
data_velocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001be40  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd8  0801c030  0801c030  0002c030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc08  0801dc08  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  0801dc08  0801dc08  0002dc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc10  0801dc10  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dc10  0801dc10  0002dc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc14  0801dc14  0002dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0801dc18  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd08  20000350  0801df64  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  2000e058  0801df64  0003e058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027056  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005519  00000000  00000000  000573cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  0005c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  0005e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215bc  00000000  00000000  0005fc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002231a  00000000  00000000  000811ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7869  00000000  00000000  000a3506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  0015ad6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080d4  00000000  00000000  0015ae1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000350 	.word	0x20000350
 800020c:	00000000 	.word	0x00000000
 8000210:	0801c018 	.word	0x0801c018

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000354 	.word	0x20000354
 800022c:	0801c018 	.word	0x0801c018

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eca:	2afd      	cmp	r2, #253	; 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	; 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	; 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	; 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_f2iz>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800120c:	d30f      	bcc.n	800122e <__aeabi_f2iz+0x2a>
 800120e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001212:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001216:	d90d      	bls.n	8001234 <__aeabi_f2iz+0x30>
 8001218:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800121c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001220:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001224:	fa23 f002 	lsr.w	r0, r3, r2
 8001228:	bf18      	it	ne
 800122a:	4240      	negne	r0, r0
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr
 8001234:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001238:	d101      	bne.n	800123e <__aeabi_f2iz+0x3a>
 800123a:	0242      	lsls	r2, r0, #9
 800123c:	d105      	bne.n	800124a <__aeabi_f2iz+0x46>
 800123e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001242:	bf08      	it	eq
 8001244:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001248:	4770      	bx	lr
 800124a:	f04f 0000 	mov.w	r0, #0
 800124e:	4770      	bx	lr

08001250 <__aeabi_ldivmod>:
 8001250:	b97b      	cbnz	r3, 8001272 <__aeabi_ldivmod+0x22>
 8001252:	b972      	cbnz	r2, 8001272 <__aeabi_ldivmod+0x22>
 8001254:	2900      	cmp	r1, #0
 8001256:	bfbe      	ittt	lt
 8001258:	2000      	movlt	r0, #0
 800125a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800125e:	e006      	blt.n	800126e <__aeabi_ldivmod+0x1e>
 8001260:	bf08      	it	eq
 8001262:	2800      	cmpeq	r0, #0
 8001264:	bf1c      	itt	ne
 8001266:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800126a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800126e:	f000 b9b9 	b.w	80015e4 <__aeabi_idiv0>
 8001272:	f1ad 0c08 	sub.w	ip, sp, #8
 8001276:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800127a:	2900      	cmp	r1, #0
 800127c:	db09      	blt.n	8001292 <__aeabi_ldivmod+0x42>
 800127e:	2b00      	cmp	r3, #0
 8001280:	db1a      	blt.n	80012b8 <__aeabi_ldivmod+0x68>
 8001282:	f000 f84d 	bl	8001320 <__udivmoddi4>
 8001286:	f8dd e004 	ldr.w	lr, [sp, #4]
 800128a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800128e:	b004      	add	sp, #16
 8001290:	4770      	bx	lr
 8001292:	4240      	negs	r0, r0
 8001294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	db1b      	blt.n	80012d4 <__aeabi_ldivmod+0x84>
 800129c:	f000 f840 	bl	8001320 <__udivmoddi4>
 80012a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012a8:	b004      	add	sp, #16
 80012aa:	4240      	negs	r0, r0
 80012ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012b0:	4252      	negs	r2, r2
 80012b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012b6:	4770      	bx	lr
 80012b8:	4252      	negs	r2, r2
 80012ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012be:	f000 f82f 	bl	8001320 <__udivmoddi4>
 80012c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012ca:	b004      	add	sp, #16
 80012cc:	4240      	negs	r0, r0
 80012ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012d2:	4770      	bx	lr
 80012d4:	4252      	negs	r2, r2
 80012d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012da:	f000 f821 	bl	8001320 <__udivmoddi4>
 80012de:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012e6:	b004      	add	sp, #16
 80012e8:	4252      	negs	r2, r2
 80012ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80012ee:	4770      	bx	lr

080012f0 <__aeabi_uldivmod>:
 80012f0:	b953      	cbnz	r3, 8001308 <__aeabi_uldivmod+0x18>
 80012f2:	b94a      	cbnz	r2, 8001308 <__aeabi_uldivmod+0x18>
 80012f4:	2900      	cmp	r1, #0
 80012f6:	bf08      	it	eq
 80012f8:	2800      	cmpeq	r0, #0
 80012fa:	bf1c      	itt	ne
 80012fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001304:	f000 b96e 	b.w	80015e4 <__aeabi_idiv0>
 8001308:	f1ad 0c08 	sub.w	ip, sp, #8
 800130c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001310:	f000 f806 	bl	8001320 <__udivmoddi4>
 8001314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr

08001320 <__udivmoddi4>:
 8001320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001324:	9e08      	ldr	r6, [sp, #32]
 8001326:	460d      	mov	r5, r1
 8001328:	4604      	mov	r4, r0
 800132a:	468e      	mov	lr, r1
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 8083 	bne.w	8001438 <__udivmoddi4+0x118>
 8001332:	428a      	cmp	r2, r1
 8001334:	4617      	mov	r7, r2
 8001336:	d947      	bls.n	80013c8 <__udivmoddi4+0xa8>
 8001338:	fab2 f382 	clz	r3, r2
 800133c:	b14b      	cbz	r3, 8001352 <__udivmoddi4+0x32>
 800133e:	f1c3 0120 	rsb	r1, r3, #32
 8001342:	fa05 fe03 	lsl.w	lr, r5, r3
 8001346:	fa20 f101 	lsr.w	r1, r0, r1
 800134a:	409f      	lsls	r7, r3
 800134c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001350:	409c      	lsls	r4, r3
 8001352:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001356:	fbbe fcf8 	udiv	ip, lr, r8
 800135a:	fa1f f987 	uxth.w	r9, r7
 800135e:	fb08 e21c 	mls	r2, r8, ip, lr
 8001362:	fb0c f009 	mul.w	r0, ip, r9
 8001366:	0c21      	lsrs	r1, r4, #16
 8001368:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800136c:	4290      	cmp	r0, r2
 800136e:	d90a      	bls.n	8001386 <__udivmoddi4+0x66>
 8001370:	18ba      	adds	r2, r7, r2
 8001372:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8001376:	f080 8118 	bcs.w	80015aa <__udivmoddi4+0x28a>
 800137a:	4290      	cmp	r0, r2
 800137c:	f240 8115 	bls.w	80015aa <__udivmoddi4+0x28a>
 8001380:	f1ac 0c02 	sub.w	ip, ip, #2
 8001384:	443a      	add	r2, r7
 8001386:	1a12      	subs	r2, r2, r0
 8001388:	fbb2 f0f8 	udiv	r0, r2, r8
 800138c:	fb08 2210 	mls	r2, r8, r0, r2
 8001390:	fb00 f109 	mul.w	r1, r0, r9
 8001394:	b2a4      	uxth	r4, r4
 8001396:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800139a:	42a1      	cmp	r1, r4
 800139c:	d909      	bls.n	80013b2 <__udivmoddi4+0x92>
 800139e:	193c      	adds	r4, r7, r4
 80013a0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80013a4:	f080 8103 	bcs.w	80015ae <__udivmoddi4+0x28e>
 80013a8:	42a1      	cmp	r1, r4
 80013aa:	f240 8100 	bls.w	80015ae <__udivmoddi4+0x28e>
 80013ae:	3802      	subs	r0, #2
 80013b0:	443c      	add	r4, r7
 80013b2:	1a64      	subs	r4, r4, r1
 80013b4:	2100      	movs	r1, #0
 80013b6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80013ba:	b11e      	cbz	r6, 80013c4 <__udivmoddi4+0xa4>
 80013bc:	2200      	movs	r2, #0
 80013be:	40dc      	lsrs	r4, r3
 80013c0:	e9c6 4200 	strd	r4, r2, [r6]
 80013c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c8:	b902      	cbnz	r2, 80013cc <__udivmoddi4+0xac>
 80013ca:	deff      	udf	#255	; 0xff
 80013cc:	fab2 f382 	clz	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d14f      	bne.n	8001474 <__udivmoddi4+0x154>
 80013d4:	1a8d      	subs	r5, r1, r2
 80013d6:	2101      	movs	r1, #1
 80013d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80013dc:	fa1f f882 	uxth.w	r8, r2
 80013e0:	fbb5 fcfe 	udiv	ip, r5, lr
 80013e4:	fb0e 551c 	mls	r5, lr, ip, r5
 80013e8:	fb08 f00c 	mul.w	r0, r8, ip
 80013ec:	0c22      	lsrs	r2, r4, #16
 80013ee:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d907      	bls.n	8001406 <__udivmoddi4+0xe6>
 80013f6:	197d      	adds	r5, r7, r5
 80013f8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80013fc:	d202      	bcs.n	8001404 <__udivmoddi4+0xe4>
 80013fe:	42a8      	cmp	r0, r5
 8001400:	f200 80e9 	bhi.w	80015d6 <__udivmoddi4+0x2b6>
 8001404:	4694      	mov	ip, r2
 8001406:	1a2d      	subs	r5, r5, r0
 8001408:	fbb5 f0fe 	udiv	r0, r5, lr
 800140c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001410:	fb08 f800 	mul.w	r8, r8, r0
 8001414:	b2a4      	uxth	r4, r4
 8001416:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800141a:	45a0      	cmp	r8, r4
 800141c:	d907      	bls.n	800142e <__udivmoddi4+0x10e>
 800141e:	193c      	adds	r4, r7, r4
 8001420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001424:	d202      	bcs.n	800142c <__udivmoddi4+0x10c>
 8001426:	45a0      	cmp	r8, r4
 8001428:	f200 80d9 	bhi.w	80015de <__udivmoddi4+0x2be>
 800142c:	4610      	mov	r0, r2
 800142e:	eba4 0408 	sub.w	r4, r4, r8
 8001432:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001436:	e7c0      	b.n	80013ba <__udivmoddi4+0x9a>
 8001438:	428b      	cmp	r3, r1
 800143a:	d908      	bls.n	800144e <__udivmoddi4+0x12e>
 800143c:	2e00      	cmp	r6, #0
 800143e:	f000 80b1 	beq.w	80015a4 <__udivmoddi4+0x284>
 8001442:	2100      	movs	r1, #0
 8001444:	e9c6 0500 	strd	r0, r5, [r6]
 8001448:	4608      	mov	r0, r1
 800144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800144e:	fab3 f183 	clz	r1, r3
 8001452:	2900      	cmp	r1, #0
 8001454:	d14b      	bne.n	80014ee <__udivmoddi4+0x1ce>
 8001456:	42ab      	cmp	r3, r5
 8001458:	d302      	bcc.n	8001460 <__udivmoddi4+0x140>
 800145a:	4282      	cmp	r2, r0
 800145c:	f200 80b9 	bhi.w	80015d2 <__udivmoddi4+0x2b2>
 8001460:	1a84      	subs	r4, r0, r2
 8001462:	eb65 0303 	sbc.w	r3, r5, r3
 8001466:	2001      	movs	r0, #1
 8001468:	469e      	mov	lr, r3
 800146a:	2e00      	cmp	r6, #0
 800146c:	d0aa      	beq.n	80013c4 <__udivmoddi4+0xa4>
 800146e:	e9c6 4e00 	strd	r4, lr, [r6]
 8001472:	e7a7      	b.n	80013c4 <__udivmoddi4+0xa4>
 8001474:	409f      	lsls	r7, r3
 8001476:	f1c3 0220 	rsb	r2, r3, #32
 800147a:	40d1      	lsrs	r1, r2
 800147c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001480:	fbb1 f0fe 	udiv	r0, r1, lr
 8001484:	fa1f f887 	uxth.w	r8, r7
 8001488:	fb0e 1110 	mls	r1, lr, r0, r1
 800148c:	fa24 f202 	lsr.w	r2, r4, r2
 8001490:	409d      	lsls	r5, r3
 8001492:	fb00 fc08 	mul.w	ip, r0, r8
 8001496:	432a      	orrs	r2, r5
 8001498:	0c15      	lsrs	r5, r2, #16
 800149a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800149e:	45ac      	cmp	ip, r5
 80014a0:	fa04 f403 	lsl.w	r4, r4, r3
 80014a4:	d909      	bls.n	80014ba <__udivmoddi4+0x19a>
 80014a6:	197d      	adds	r5, r7, r5
 80014a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80014ac:	f080 808f 	bcs.w	80015ce <__udivmoddi4+0x2ae>
 80014b0:	45ac      	cmp	ip, r5
 80014b2:	f240 808c 	bls.w	80015ce <__udivmoddi4+0x2ae>
 80014b6:	3802      	subs	r0, #2
 80014b8:	443d      	add	r5, r7
 80014ba:	eba5 050c 	sub.w	r5, r5, ip
 80014be:	fbb5 f1fe 	udiv	r1, r5, lr
 80014c2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80014c6:	fb01 f908 	mul.w	r9, r1, r8
 80014ca:	b295      	uxth	r5, r2
 80014cc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80014d0:	45a9      	cmp	r9, r5
 80014d2:	d907      	bls.n	80014e4 <__udivmoddi4+0x1c4>
 80014d4:	197d      	adds	r5, r7, r5
 80014d6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80014da:	d274      	bcs.n	80015c6 <__udivmoddi4+0x2a6>
 80014dc:	45a9      	cmp	r9, r5
 80014de:	d972      	bls.n	80015c6 <__udivmoddi4+0x2a6>
 80014e0:	3902      	subs	r1, #2
 80014e2:	443d      	add	r5, r7
 80014e4:	eba5 0509 	sub.w	r5, r5, r9
 80014e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014ec:	e778      	b.n	80013e0 <__udivmoddi4+0xc0>
 80014ee:	f1c1 0720 	rsb	r7, r1, #32
 80014f2:	408b      	lsls	r3, r1
 80014f4:	fa22 fc07 	lsr.w	ip, r2, r7
 80014f8:	ea4c 0c03 	orr.w	ip, ip, r3
 80014fc:	fa25 f407 	lsr.w	r4, r5, r7
 8001500:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001504:	fbb4 f9fe 	udiv	r9, r4, lr
 8001508:	fa1f f88c 	uxth.w	r8, ip
 800150c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001510:	fa20 f307 	lsr.w	r3, r0, r7
 8001514:	fb09 fa08 	mul.w	sl, r9, r8
 8001518:	408d      	lsls	r5, r1
 800151a:	431d      	orrs	r5, r3
 800151c:	0c2b      	lsrs	r3, r5, #16
 800151e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001522:	45a2      	cmp	sl, r4
 8001524:	fa02 f201 	lsl.w	r2, r2, r1
 8001528:	fa00 f301 	lsl.w	r3, r0, r1
 800152c:	d909      	bls.n	8001542 <__udivmoddi4+0x222>
 800152e:	eb1c 0404 	adds.w	r4, ip, r4
 8001532:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001536:	d248      	bcs.n	80015ca <__udivmoddi4+0x2aa>
 8001538:	45a2      	cmp	sl, r4
 800153a:	d946      	bls.n	80015ca <__udivmoddi4+0x2aa>
 800153c:	f1a9 0902 	sub.w	r9, r9, #2
 8001540:	4464      	add	r4, ip
 8001542:	eba4 040a 	sub.w	r4, r4, sl
 8001546:	fbb4 f0fe 	udiv	r0, r4, lr
 800154a:	fb0e 4410 	mls	r4, lr, r0, r4
 800154e:	fb00 fa08 	mul.w	sl, r0, r8
 8001552:	b2ad      	uxth	r5, r5
 8001554:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001558:	45a2      	cmp	sl, r4
 800155a:	d908      	bls.n	800156e <__udivmoddi4+0x24e>
 800155c:	eb1c 0404 	adds.w	r4, ip, r4
 8001560:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001564:	d22d      	bcs.n	80015c2 <__udivmoddi4+0x2a2>
 8001566:	45a2      	cmp	sl, r4
 8001568:	d92b      	bls.n	80015c2 <__udivmoddi4+0x2a2>
 800156a:	3802      	subs	r0, #2
 800156c:	4464      	add	r4, ip
 800156e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001572:	fba0 8902 	umull	r8, r9, r0, r2
 8001576:	eba4 040a 	sub.w	r4, r4, sl
 800157a:	454c      	cmp	r4, r9
 800157c:	46c6      	mov	lr, r8
 800157e:	464d      	mov	r5, r9
 8001580:	d319      	bcc.n	80015b6 <__udivmoddi4+0x296>
 8001582:	d016      	beq.n	80015b2 <__udivmoddi4+0x292>
 8001584:	b15e      	cbz	r6, 800159e <__udivmoddi4+0x27e>
 8001586:	ebb3 020e 	subs.w	r2, r3, lr
 800158a:	eb64 0405 	sbc.w	r4, r4, r5
 800158e:	fa04 f707 	lsl.w	r7, r4, r7
 8001592:	fa22 f301 	lsr.w	r3, r2, r1
 8001596:	431f      	orrs	r7, r3
 8001598:	40cc      	lsrs	r4, r1
 800159a:	e9c6 7400 	strd	r7, r4, [r6]
 800159e:	2100      	movs	r1, #0
 80015a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015a4:	4631      	mov	r1, r6
 80015a6:	4630      	mov	r0, r6
 80015a8:	e70c      	b.n	80013c4 <__udivmoddi4+0xa4>
 80015aa:	468c      	mov	ip, r1
 80015ac:	e6eb      	b.n	8001386 <__udivmoddi4+0x66>
 80015ae:	4610      	mov	r0, r2
 80015b0:	e6ff      	b.n	80013b2 <__udivmoddi4+0x92>
 80015b2:	4543      	cmp	r3, r8
 80015b4:	d2e6      	bcs.n	8001584 <__udivmoddi4+0x264>
 80015b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80015ba:	eb69 050c 	sbc.w	r5, r9, ip
 80015be:	3801      	subs	r0, #1
 80015c0:	e7e0      	b.n	8001584 <__udivmoddi4+0x264>
 80015c2:	4628      	mov	r0, r5
 80015c4:	e7d3      	b.n	800156e <__udivmoddi4+0x24e>
 80015c6:	4611      	mov	r1, r2
 80015c8:	e78c      	b.n	80014e4 <__udivmoddi4+0x1c4>
 80015ca:	4681      	mov	r9, r0
 80015cc:	e7b9      	b.n	8001542 <__udivmoddi4+0x222>
 80015ce:	4608      	mov	r0, r1
 80015d0:	e773      	b.n	80014ba <__udivmoddi4+0x19a>
 80015d2:	4608      	mov	r0, r1
 80015d4:	e749      	b.n	800146a <__udivmoddi4+0x14a>
 80015d6:	f1ac 0c02 	sub.w	ip, ip, #2
 80015da:	443d      	add	r5, r7
 80015dc:	e713      	b.n	8001406 <__udivmoddi4+0xe6>
 80015de:	3802      	subs	r0, #2
 80015e0:	443c      	add	r4, r7
 80015e2:	e724      	b.n	800142e <__udivmoddi4+0x10e>

080015e4 <__aeabi_idiv0>:
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_ADC1_Init+0x58>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_ADC1_Init+0x5c>)
 80015fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_ADC1_Init+0x58>)
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_ADC1_Init+0x58>)
 8001608:	2201      	movs	r2, #1
 800160a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_ADC1_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_ADC1_Init+0x58>)
 8001614:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_ADC1_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_ADC1_Init+0x58>)
 8001622:	2201      	movs	r2, #1
 8001624:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_ADC1_Init+0x58>)
 8001628:	f003 fece 	bl	80053c8 <HAL_ADC_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001632:	f002 fcbb 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20006964 	.word	0x20006964
 8001644:	40012400 	.word	0x40012400

08001648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0318 	add.w	r3, r7, #24
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_ADC_MspInit+0x98>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d137      	bne.n	80016d8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 800166e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6193      	str	r3, [r2, #24]
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 800169e:	f043 0308 	orr.w	r3, r3, #8
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_ADC_MspInit+0x9c>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b0:	23c0      	movs	r3, #192	; 0xc0
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b4:	2303      	movs	r3, #3
 80016b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0318 	add.w	r3, r7, #24
 80016bc:	4619      	mov	r1, r3
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <HAL_ADC_MspInit+0xa0>)
 80016c0:	f005 fe92 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016c4:	2303      	movs	r3, #3
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <HAL_ADC_MspInit+0xa4>)
 80016d4:	f005 fe88 	bl	80073e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40012400 	.word	0x40012400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010800 	.word	0x40010800
 80016ec:	40010c00 	.word	0x40010c00

080016f0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_CAN_Init+0x64>)
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <MX_CAN_Init+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_CAN_Init+0x64>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_CAN_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_CAN_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_CAN_Init+0x64>)
 800170e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001712:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_CAN_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_CAN_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_CAN_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_CAN_Init+0x64>)
 8001728:	2200      	movs	r2, #0
 800172a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_CAN_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_CAN_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_CAN_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_CAN_Init+0x64>)
 8001740:	f004 faab 	bl	8005c9a <HAL_CAN_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800174a:	f002 fc2f 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20006994 	.word	0x20006994
 8001758:	40006400 	.word	0x40006400

0800175c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_CAN_MspInit+0x9c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d139      	bne.n	80017f0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800177c:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_CAN_MspInit+0xa0>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_CAN_MspInit+0xa0>)
 8001782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_CAN_MspInit+0xa0>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_CAN_MspInit+0xa0>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a18      	ldr	r2, [pc, #96]	; (80017fc <HAL_CAN_MspInit+0xa0>)
 800179a:	f043 0304 	orr.w	r3, r3, #4
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_CAN_MspInit+0xa0>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0310 	add.w	r3, r7, #16
 80017be:	4619      	mov	r1, r3
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <HAL_CAN_MspInit+0xa4>)
 80017c2:	f005 fe11 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_CAN_MspInit+0xa4>)
 80017dc:	f005 fe04 	bl	80073e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2105      	movs	r1, #5
 80017e4:	2014      	movs	r0, #20
 80017e6:	f005 f86e 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80017ea:	2014      	movs	r0, #20
 80017ec:	f005 f887 	bl	80068fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40006400 	.word	0x40006400
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010800 	.word	0x40010800

08001804 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001810:	f009 fefa 	bl	800b608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <pvPortMallocMicroROS+0x174>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800181c:	f000 f97a 	bl	8001b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <pvPortMallocMicroROS+0x178>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 808e 	bne.w	800194a <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01d      	beq.n	8001870 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001834:	2208      	movs	r2, #8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2b00      	cmp	r3, #0
 8001844:	d014      	beq.n	8001870 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f023 0307 	bic.w	r3, r3, #7
 800184c:	3308      	adds	r3, #8
 800184e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800186c:	bf00      	nop
 800186e:	e7fe      	b.n	800186e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d069      	beq.n	800194a <pvPortMallocMicroROS+0x146>
 8001876:	4b42      	ldr	r3, [pc, #264]	; (8001980 <pvPortMallocMicroROS+0x17c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d864      	bhi.n	800194a <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <pvPortMallocMicroROS+0x180>)
 8001882:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001884:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <pvPortMallocMicroROS+0x180>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800188a:	e004      	b.n	8001896 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	d903      	bls.n	80018a8 <pvPortMallocMicroROS+0xa4>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f1      	bne.n	800188c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <pvPortMallocMicroROS+0x174>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d04b      	beq.n	800194a <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2208      	movs	r2, #8
 80018b8:	4413      	add	r3, r2
 80018ba:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1ad2      	subs	r2, r2, r3
 80018cc:	2308      	movs	r3, #8
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d91f      	bls.n	8001914 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00a      	beq.n	80018fc <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80018e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ea:	f383 8811 	msr	BASEPRI, r3
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	613b      	str	r3, [r7, #16]
}
 80018f8:	bf00      	nop
 80018fa:	e7fe      	b.n	80018fa <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1ad2      	subs	r2, r2, r3
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800190e:	69b8      	ldr	r0, [r7, #24]
 8001910:	f000 f962 	bl	8001bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <pvPortMallocMicroROS+0x17c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <pvPortMallocMicroROS+0x17c>)
 8001920:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <pvPortMallocMicroROS+0x17c>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <pvPortMallocMicroROS+0x184>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d203      	bcs.n	8001936 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <pvPortMallocMicroROS+0x17c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <pvPortMallocMicroROS+0x184>)
 8001934:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <pvPortMallocMicroROS+0x178>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	431a      	orrs	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800194a:	f009 fe6b 	bl	800b624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195c:	f383 8811 	msr	BASEPRI, r3
 8001960:	f3bf 8f6f 	isb	sy
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	60fb      	str	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	e7fe      	b.n	800196c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800196e:	69fb      	ldr	r3, [r7, #28]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20002a84 	.word	0x20002a84
 800197c:	20002a90 	.word	0x20002a90
 8001980:	20002a88 	.word	0x20002a88
 8001984:	20002a7c 	.word	0x20002a7c
 8001988:	20002a8c 	.word	0x20002a8c

0800198c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d048      	beq.n	8001a30 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800199e:	2308      	movs	r3, #8
 80019a0:	425b      	negs	r3, r3
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <vPortFreeMicroROS+0xac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <vPortFreeMicroROS+0x44>
	__asm volatile
 80019ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	60fb      	str	r3, [r7, #12]
}
 80019cc:	bf00      	nop
 80019ce:	e7fe      	b.n	80019ce <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <vPortFreeMicroROS+0x62>
	__asm volatile
 80019d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019dc:	f383 8811 	msr	BASEPRI, r3
 80019e0:	f3bf 8f6f 	isb	sy
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	60bb      	str	r3, [r7, #8]
}
 80019ea:	bf00      	nop
 80019ec:	e7fe      	b.n	80019ec <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <vPortFreeMicroROS+0xac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d019      	beq.n	8001a30 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d115      	bne.n	8001a30 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <vPortFreeMicroROS+0xac>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a14:	f009 fdf8 	bl	800b608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <vPortFreeMicroROS+0xb0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <vPortFreeMicroROS+0xb0>)
 8001a24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a26:	6938      	ldr	r0, [r7, #16]
 8001a28:	f000 f8d6 	bl	8001bd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a2c:	f009 fdfa 	bl	800b624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a30:	bf00      	nop
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20002a90 	.word	0x20002a90
 8001a3c:	20002a88 	.word	0x20002a88

08001a40 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	425b      	negs	r3, r3
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4413      	add	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <getBlockSize+0x34>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]

	return count;
 8001a68:	68fb      	ldr	r3, [r7, #12]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20002a90 	.word	0x20002a90

08001a78 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a82:	f009 fdc1 	bl	800b608 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f7ff febc 	bl	8001804 <pvPortMallocMicroROS>
 8001a8c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d014      	beq.n	8001abe <pvPortReallocMicroROS+0x46>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ffd3 	bl	8001a40 <getBlockSize>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d201      	bcs.n	8001aae <pvPortReallocMicroROS+0x36>
		{
			count = xWantedSize;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	68b8      	ldr	r0, [r7, #8]
 8001ab4:	f018 fe22 	bl	801a6fc <memcpy>

		vPortFreeMicroROS(pv);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff67 	bl	800198c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001abe:	f009 fdb1 	bl	800b624 <xTaskResumeAll>

	return newmem;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001ad6:	f009 fd97 	bl	800b608 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	f7ff fe8d 	bl	8001804 <pvPortMallocMicroROS>
 8001aea:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001af0:	e004      	b.n	8001afc <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	613a      	str	r2, [r7, #16]
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	617a      	str	r2, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f5      	bne.n	8001af2 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001b06:	f009 fd8d 	bl	800b624 <xTaskResumeAll>
  	return mem;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <prvHeapInit+0xac>)
 8001b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00c      	beq.n	8001b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3307      	adds	r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 0307 	bic.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <prvHeapInit+0xac>)
 8001b44:	4413      	add	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <prvHeapInit+0xb0>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <prvHeapInit+0xb0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b60:	2208      	movs	r2, #8
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f023 0307 	bic.w	r3, r3, #7
 8001b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <prvHeapInit+0xb4>)
 8001b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <prvHeapInit+0xb4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <prvHeapInit+0xb4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	1ad2      	subs	r2, r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <prvHeapInit+0xb4>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <prvHeapInit+0xb8>)
 8001ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <prvHeapInit+0xbc>)
 8001baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <prvHeapInit+0xc0>)
 8001bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	2000036c 	.word	0x2000036c
 8001bc4:	20002a7c 	.word	0x20002a7c
 8001bc8:	20002a84 	.word	0x20002a84
 8001bcc:	20002a8c 	.word	0x20002a8c
 8001bd0:	20002a88 	.word	0x20002a88
 8001bd4:	20002a90 	.word	0x20002a90

08001bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <prvInsertBlockIntoFreeList+0xa8>)
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e002      	b.n	8001bec <prvInsertBlockIntoFreeList+0x14>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d8f7      	bhi.n	8001be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4413      	add	r3, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d108      	bne.n	8001c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	441a      	add	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	441a      	add	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d118      	bne.n	8001c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <prvInsertBlockIntoFreeList+0xac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d00d      	beq.n	8001c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	441a      	add	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	e008      	b.n	8001c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <prvInsertBlockIntoFreeList+0xac>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e003      	b.n	8001c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d002      	beq.n	8001c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20002a7c 	.word	0x20002a7c
 8001c84:	20002a84 	.word	0x20002a84

08001c88 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001c8e:	463b      	mov	r3, r7
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001c96:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_DAC_Init+0x60>)
 8001c98:	4a14      	ldr	r2, [pc, #80]	; (8001cec <MX_DAC_Init+0x64>)
 8001c9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <MX_DAC_Init+0x60>)
 8001c9e:	f004 fe3c 	bl	800691a <HAL_DAC_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001ca8:	f002 f980 	bl	8003fac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MX_DAC_Init+0x60>)
 8001cbc:	f004 fec4 	bl	8006a48 <HAL_DAC_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001cc6:	f002 f971 	bl	8003fac <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2210      	movs	r2, #16
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_DAC_Init+0x60>)
 8001cd2:	f004 feb9 	bl	8006a48 <HAL_DAC_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001cdc:	f002 f966 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	200069bc 	.word	0x200069bc
 8001cec:	40007400 	.word	0x40007400

08001cf0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <HAL_DAC_MspInit+0x6c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d121      	bne.n	8001d54 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_DAC_MspInit+0x70>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_DAC_MspInit+0x70>)
 8001d16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d1a:	61d3      	str	r3, [r2, #28]
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_DAC_MspInit+0x70>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_DAC_MspInit+0x70>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_DAC_MspInit+0x70>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_DAC_MspInit+0x70>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d40:	2330      	movs	r3, #48	; 0x30
 8001d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d44:	2303      	movs	r3, #3
 8001d46:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_DAC_MspInit+0x74>)
 8001d50:	f005 fb4a 	bl	80073e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40007400 	.word	0x40007400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010800 	.word	0x40010800

08001d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <MX_DMA_Init+0x48>)
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <MX_DMA_Init+0x48>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6153      	str	r3, [r2, #20]
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <MX_DMA_Init+0x48>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2010      	movs	r0, #16
 8001d8c:	f004 fd9b 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d90:	2010      	movs	r0, #16
 8001d92:	f004 fdb4 	bl	80068fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	2011      	movs	r0, #17
 8001d9c:	f004 fd93 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001da0:	2011      	movs	r0, #17
 8001da2:	f004 fdac 	bl	80068fe <HAL_NVIC_EnableIRQ>

}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001dc2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <cubemx_transport_open+0x28>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f007 fc44 	bl	8009658 <HAL_UART_Receive_DMA>
    return true;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20002a94 	.word	0x20002a94

08001de0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001dee:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f007 fc61 	bl	80096b8 <HAL_UART_DMAStop>
    return true;
 8001df6:	2301      	movs	r3, #1
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e14:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d11c      	bne.n	8001e5c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f007 fba8 	bl	8009580 <HAL_UART_Transmit_DMA>
 8001e30:	4603      	mov	r3, r0
 8001e32:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e34:	e002      	b.n	8001e3c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f008 fbc0 	bl	800a5bc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e3c:	7cfb      	ldrb	r3, [r7, #19]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d105      	bne.n	8001e4e <cubemx_transport_write+0x4e>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d1f3      	bne.n	8001e36 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <cubemx_transport_write+0x58>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	e002      	b.n	8001e5e <cubemx_transport_write+0x5e>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e5c:	2300      	movs	r3, #0
    }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e7c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e82:	b672      	cpsid	i
}
 8001e84:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <cubemx_transport_read+0x9c>)
 8001e94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e96:	b662      	cpsie	i
}
 8001e98:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f008 fb8b 	bl	800a5bc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <cubemx_transport_read+0xa0>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <cubemx_transport_read+0x9c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d103      	bne.n	8001eba <cubemx_transport_read+0x52>
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbe3      	blt.n	8001e82 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ebe:	e011      	b.n	8001ee4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <cubemx_transport_read+0xa0>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	440b      	add	r3, r1
 8001eca:	4910      	ldr	r1, [pc, #64]	; (8001f0c <cubemx_transport_read+0xa4>)
 8001ecc:	5c8a      	ldrb	r2, [r1, r2]
 8001ece:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <cubemx_transport_read+0xa0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <cubemx_transport_read+0xa0>)
 8001edc:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <cubemx_transport_read+0xa0>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <cubemx_transport_read+0x9c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d003      	beq.n	8001ef8 <cubemx_transport_read+0x90>
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3e3      	bcc.n	8001ec0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20003298 	.word	0x20003298
 8001f08:	20003294 	.word	0x20003294
 8001f0c:	20002a94 	.word	0x20002a94

08001f10 <HAL_GPIO_EXTI_Callback>:

float angle_resolution=0.05, Ts=0.01, vel[4]={0,0,0,0};

// Esta função utiliza interrupção para realizar
// a leitura dos encoders e registrar o numero de pulsos e sentido
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]

   if(GPIO_Pin == GPIO_PIN_0){                  // LEITURA DO NUMERO DE PULSOS DO LADO DIREITO
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d11b      	bne.n	8001f58 <HAL_GPIO_EXTI_Callback+0x48>
	   if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1))
 8001f20:	2102      	movs	r1, #2
 8001f22:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001f24:	f005 fbf4 	bl	8007710 <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_GPIO_EXTI_Callback+0x34>
	     {count_a++; count_pulse_a++;}
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3301      	adds	r3, #1
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e009      	b.n	8001f58 <HAL_GPIO_EXTI_Callback+0x48>
	   else
		 {count_a--; count_pulse_a--;}
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <HAL_GPIO_EXTI_Callback+0x9c>)
 8001f56:	6013      	str	r3, [r2, #0]
    }

   if(GPIO_Pin == GPIO_PIN_8){                 // LEITURA DO NUMERO DE PULSOS DO LADO ESQUERDO
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5e:	d11c      	bne.n	8001f9a <HAL_GPIO_EXTI_Callback+0x8a>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9))
 8001f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f64:	480f      	ldr	r0, [pc, #60]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001f66:	f005 fbd3 	bl	8007710 <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00a      	beq.n	8001f86 <HAL_GPIO_EXTI_Callback+0x76>
           {count_b--; count_pulse_b--;}
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f82:	6013      	str	r3, [r2, #0]
	    else
 	   	   {count_b++; count_pulse_b++;}
    }
}
 8001f84:	e009      	b.n	8001f9a <HAL_GPIO_EXTI_Callback+0x8a>
 	   	   {count_b++; count_pulse_b++;}
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	200032e0 	.word	0x200032e0
 8001fac:	200032e4 	.word	0x200032e4
 8001fb0:	200032e8 	.word	0x200032e8
 8001fb4:	200032ec 	.word	0x200032ec

08001fb8 <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

void MX_FREERTOS_Init(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	483d      	ldr	r0, [pc, #244]	; (80020b4 <MX_FREERTOS_Init+0xfc>)
 8001fc0:	f004 fccd 	bl	800695e <HAL_DAC_Start>
	  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	483b      	ldr	r0, [pc, #236]	; (80020b4 <MX_FREERTOS_Init+0xfc>)
 8001fc8:	f004 fcc9 	bl	800695e <HAL_DAC_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8001fcc:	483a      	ldr	r0, [pc, #232]	; (80020b8 <MX_FREERTOS_Init+0x100>)
 8001fce:	f006 fa1d 	bl	800840c <HAL_TIM_Base_Start_IT>

   // Configuração da comunicação CAN

   // CAN configuration transmiter
	  txHeader.DLC = 8;
 8001fd2:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <MX_FREERTOS_Init+0x104>)
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	611a      	str	r2, [r3, #16]
	  txHeader.IDE = CAN_ID_STD; //CAN_ID_EXT
 8001fd8:	4b38      	ldr	r3, [pc, #224]	; (80020bc <MX_FREERTOS_Init+0x104>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
	  txHeader.RTR = CAN_RTR_DATA;
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <MX_FREERTOS_Init+0x104>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
	  txHeader.StdId = 0x2BC;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <MX_FREERTOS_Init+0x104>)
 8001fe6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001fea:	601a      	str	r2, [r3, #0]
   // CAN configuration filter
	  canfil.FilterActivation = CAN_FILTER_ENABLE;
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	621a      	str	r2, [r3, #32]
	  canfil.FilterBank = 10;
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8001ff4:	220a      	movs	r2, #10
 8001ff6:	615a      	str	r2, [r3, #20]
	  canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
	  canfil.FilterIdHigh =0xFF;
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	601a      	str	r2, [r3, #0]
	  canfil.FilterIdLow = 0;
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
	  canfil.FilterMaskIdHigh = 0x000;
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
	  canfil.FilterMaskIdLow = 0x0000;
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
	  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
	  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 800201e:	2201      	movs	r2, #1
 8002020:	61da      	str	r2, [r3, #28]
	  canfil.SlaveStartFilterBank = 0;
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

	  HAL_CAN_ConfigFilter(&hcan,&canfil);
 8002028:	4925      	ldr	r1, [pc, #148]	; (80020c0 <MX_FREERTOS_Init+0x108>)
 800202a:	4826      	ldr	r0, [pc, #152]	; (80020c4 <MX_FREERTOS_Init+0x10c>)
 800202c:	f003 ff30 	bl	8005e90 <HAL_CAN_ConfigFilter>
     // Start Can
	  HAL_CAN_Start(&hcan);
 8002030:	4824      	ldr	r0, [pc, #144]	; (80020c4 <MX_FREERTOS_Init+0x10c>)
 8002032:	f003 fff6 	bl	8006022 <HAL_CAN_Start>
     // Start Callback receive data
	  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){Error_Handler();}
 8002036:	2102      	movs	r1, #2
 8002038:	4822      	ldr	r0, [pc, #136]	; (80020c4 <MX_FREERTOS_Init+0x10c>)
 800203a:	f004 f947 	bl	80062cc <HAL_CAN_ActivateNotification>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_FREERTOS_Init+0x90>
 8002044:	f001 ffb2 	bl	8003fac <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 8002048:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <MX_FREERTOS_Init+0x110>)
 800204a:	2100      	movs	r1, #0
 800204c:	481f      	ldr	r0, [pc, #124]	; (80020cc <MX_FREERTOS_Init+0x114>)
 800204e:	f008 f917 	bl	800a280 <osThreadNew>
 8002052:	4603      	mov	r3, r0
 8002054:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <MX_FREERTOS_Init+0x118>)
 8002056:	6013      	str	r3, [r2, #0]

  /* creation of digital_inputs */
  digital_inputsHandle = osThreadNew(digital_inputs_task, NULL, &digital_inputs_attributes);
 8002058:	4a1e      	ldr	r2, [pc, #120]	; (80020d4 <MX_FREERTOS_Init+0x11c>)
 800205a:	2100      	movs	r1, #0
 800205c:	481e      	ldr	r0, [pc, #120]	; (80020d8 <MX_FREERTOS_Init+0x120>)
 800205e:	f008 f90f 	bl	800a280 <osThreadNew>
 8002062:	4603      	mov	r3, r0
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <MX_FREERTOS_Init+0x124>)
 8002066:	6013      	str	r3, [r2, #0]

  /* creation of analog_input */
  analog_inputHandle = osThreadNew(analog_input_task, NULL, &analog_input_attributes);
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <MX_FREERTOS_Init+0x128>)
 800206a:	2100      	movs	r1, #0
 800206c:	481d      	ldr	r0, [pc, #116]	; (80020e4 <MX_FREERTOS_Init+0x12c>)
 800206e:	f008 f907 	bl	800a280 <osThreadNew>
 8002072:	4603      	mov	r3, r0
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <MX_FREERTOS_Init+0x130>)
 8002076:	6013      	str	r3, [r2, #0]

  /* creation of auto_man_mod */
  auto_man_modHandle = osThreadNew(automatic_manual_mode_Task, NULL, &auto_man_mod_attributes);
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <MX_FREERTOS_Init+0x134>)
 800207a:	2100      	movs	r1, #0
 800207c:	481c      	ldr	r0, [pc, #112]	; (80020f0 <MX_FREERTOS_Init+0x138>)
 800207e:	f008 f8ff 	bl	800a280 <osThreadNew>
 8002082:	4603      	mov	r3, r0
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <MX_FREERTOS_Init+0x13c>)
 8002086:	6013      	str	r3, [r2, #0]

  /* creation of task_stepper */
  task_stepperHandle = osThreadNew(task_stepper_function, NULL, &task_stepper_attributes);
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <MX_FREERTOS_Init+0x140>)
 800208a:	2100      	movs	r1, #0
 800208c:	481b      	ldr	r0, [pc, #108]	; (80020fc <MX_FREERTOS_Init+0x144>)
 800208e:	f008 f8f7 	bl	800a280 <osThreadNew>
 8002092:	4603      	mov	r3, r0
 8002094:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <MX_FREERTOS_Init+0x148>)
 8002096:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  stepper.currentPos = 0;    //CONDIÇÕES INICIAIS DO MOTOR DE PASSO
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_FREERTOS_Init+0x14c>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
  stepper.targetPos = 0;
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <MX_FREERTOS_Init+0x14c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  osThreadFlagsSet(task_stepperHandle, TF_STEPPER_DATA);
 80020a4:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_FREERTOS_Init+0x148>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2102      	movs	r1, #2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f008 f992 	bl	800a3d4 <osThreadFlagsSet>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200069bc 	.word	0x200069bc
 80020b8:	20008cc4 	.word	0x20008cc4
 80020bc:	200069d4 	.word	0x200069d4
 80020c0:	20006ba8 	.word	0x20006ba8
 80020c4:	20006994 	.word	0x20006994
 80020c8:	0801cea4 	.word	0x0801cea4
 80020cc:	08002109 	.word	0x08002109
 80020d0:	200069f4 	.word	0x200069f4
 80020d4:	0801cec8 	.word	0x0801cec8
 80020d8:	08002911 	.word	0x08002911
 80020dc:	20006a14 	.word	0x20006a14
 80020e0:	0801ceec 	.word	0x0801ceec
 80020e4:	08002bf9 	.word	0x08002bf9
 80020e8:	20008be8 	.word	0x20008be8
 80020ec:	0801cf10 	.word	0x0801cf10
 80020f0:	08002cc9 	.word	0x08002cc9
 80020f4:	20006a60 	.word	0x20006a60
 80020f8:	0801cf34 	.word	0x0801cf34
 80020fc:	08002fe1 	.word	0x08002fe1
 8002100:	20006a58 	.word	0x20006a58
 8002104:	20006a1c 	.word	0x20006a1c

08002108 <task_ros2_function>:

rcl_ret_t rc1;
rcl_ret_t rc2;

void task_ros2_function(void *argument)
{
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b0da      	sub	sp, #360	; 0x168
 800210c:	af02      	add	r7, sp, #8
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_ros2_function */
	// micro-ROS configuration
		  rmw_uros_set_custom_transport(
 8002114:	4b6b      	ldr	r3, [pc, #428]	; (80022c4 <task_ros2_function+0x1bc>)
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <task_ros2_function+0x1c0>)
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	4b6b      	ldr	r3, [pc, #428]	; (80022cc <task_ros2_function+0x1c4>)
 800211e:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <task_ros2_function+0x1c8>)
 8002120:	496c      	ldr	r1, [pc, #432]	; (80022d4 <task_ros2_function+0x1cc>)
 8002122:	2001      	movs	r0, #1
 8002124:	f00e fa76 	bl	8010614 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

		  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002128:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800212c:	4618      	mov	r0, r3
 800212e:	f00d feff 	bl	800ff30 <rcutils_get_zero_initialized_allocator>
		  freeRTOS_allocator.allocate = microros_allocate;
 8002132:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <task_ros2_function+0x1d0>)
 8002134:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		  freeRTOS_allocator.deallocate = microros_deallocate;
 8002138:	4b68      	ldr	r3, [pc, #416]	; (80022dc <task_ros2_function+0x1d4>)
 800213a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		  freeRTOS_allocator.reallocate = microros_reallocate;
 800213e:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <task_ros2_function+0x1d8>)
 8002140:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002144:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <task_ros2_function+0x1dc>)
 8002146:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800214a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800214e:	4618      	mov	r0, r3
 8002150:	f00d fefc 	bl	800ff4c <rcutils_set_default_allocator>
 8002154:	4603      	mov	r3, r0
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8002160:	f240 2103 	movw	r1, #515	; 0x203
 8002164:	4860      	ldr	r0, [pc, #384]	; (80022e8 <task_ros2_function+0x1e0>)
 8002166:	f018 fbad 	bl	801a8c4 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 800216a:	463b      	mov	r3, r7
 800216c:	4618      	mov	r0, r3
 800216e:	f00d ff0d 	bl	800ff8c <rcutils_get_default_allocator>
 8002172:	463b      	mov	r3, r7
 8002174:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8002178:	461d      	mov	r5, r3
 800217a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800217e:	682b      	ldr	r3, [r5, #0]
 8002180:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 8002182:	f00c fe4f 	bl	800ee24 <rcl_get_zero_initialized_init_options>
 8002186:	4602      	mov	r2, r0
 8002188:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800218c:	601a      	str	r2, [r3, #0]
	  rcl_ret_t rc = rcl_init_options_init(&init_options, allocator);
 800218e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002192:	466a      	mov	r2, sp
 8002194:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002198:	e893 0003 	ldmia.w	r3, {r0, r1}
 800219c:	e882 0003 	stmia.w	r2, {r0, r1}
 80021a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a6:	4620      	mov	r0, r4
 80021a8:	f00c fe3e 	bl	800ee28 <rcl_init_options_init>
 80021ac:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
	  if (RCL_RET_OK != rc) {// Handle error
 80021b0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 82fb 	bne.w	80027b0 <task_ros2_function+0x6a8>
		  return;
	     }
	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80021ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80021be:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80021c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	f00d fd95 	bl	800fcfc <rclc_support_init_with_options>

	  // create node
	   rclc_node_init_default(&node, "golfinho", "acquisition_system", &support);
 80021d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021d6:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80021da:	4a44      	ldr	r2, [pc, #272]	; (80022ec <task_ros2_function+0x1e4>)
 80021dc:	4944      	ldr	r1, [pc, #272]	; (80022f0 <task_ros2_function+0x1e8>)
 80021de:	f00d fdcb 	bl	800fd78 <rclc_node_init_default>

	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 80021e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021e6:	f00f f905 	bl	80113f4 <rmw_uros_sync_session>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <task_ros2_function+0xf2>
		  printf("Error on time sync (line %d)\n", __LINE__);
 80021f0:	f240 211a 	movw	r1, #538	; 0x21a
 80021f4:	483f      	ldr	r0, [pc, #252]	; (80022f4 <task_ros2_function+0x1ec>)
 80021f6:	f018 fb65 	bl	801a8c4 <iprintf>

	  // ros2_motion_status_gps_pub
	  rclc_publisher_init_default(
 80021fa:	f00f fe93 	bl	8011f24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 80021fe:	4602      	mov	r2, r0
 8002200:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002204:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <task_ros2_function+0x1f0>)
 8002206:	483d      	ldr	r0, [pc, #244]	; (80022fc <task_ros2_function+0x1f4>)
 8002208:	f00d fdf2 	bl	800fdf0 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
			  "/golfinho/diagnostics/motion_status_gps");

	  // ros2_imu_pub
	  rclc_publisher_init_default(
 800220c:	f00f fc3e 	bl	8011a8c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 8002210:	4602      	mov	r2, r0
 8002212:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <task_ros2_function+0x1f8>)
 8002218:	483a      	ldr	r0, [pc, #232]	; (8002304 <task_ros2_function+0x1fc>)
 800221a:	f00d fde9 	bl	800fdf0 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/golfinho/imu");

	  // odom_pub
	  rclc_publisher_init_default(
 800221e:	f00c fd3d 	bl	800ec9c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002222:	4602      	mov	r2, r0
 8002224:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <task_ros2_function+0x200>)
 800222a:	4838      	ldr	r0, [pc, #224]	; (800230c <task_ros2_function+0x204>)
 800222c:	f00d fde0 	bl	800fdf0 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
			  "/golfinho/odom");

	  // ros2_joint_steering_pub
	  rclc_publisher_init_default(
 8002230:	f00f fc2e 	bl	8011a90 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8002234:	4602      	mov	r2, r0
 8002236:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800223a:	4b35      	ldr	r3, [pc, #212]	; (8002310 <task_ros2_function+0x208>)
 800223c:	4835      	ldr	r0, [pc, #212]	; (8002314 <task_ros2_function+0x20c>)
 800223e:	f00d fdd7 	bl	800fdf0 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
			  "/golfinho/joint_steering");

	  //create cmd_vel_sub
	  cmd_vel_sub = rcl_get_zero_initialized_subscription();
 8002242:	f00d f867 	bl	800f314 <rcl_get_zero_initialized_subscription>
 8002246:	4603      	mov	r3, r0
 8002248:	4a33      	ldr	r2, [pc, #204]	; (8002318 <task_ros2_function+0x210>)
 800224a:	6013      	str	r3, [r2, #0]
          rclc_subscription_init_best_effort(
 800224c:	f00a ff6e 	bl	800d12c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002250:	4602      	mov	r2, r0
 8002252:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002256:	4b31      	ldr	r3, [pc, #196]	; (800231c <task_ros2_function+0x214>)
 8002258:	482f      	ldr	r0, [pc, #188]	; (8002318 <task_ros2_function+0x210>)
 800225a:	f00d fdfd 	bl	800fe58 <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
			  "/golfinho/cmd_vel");

	  //create operation_mode_sub
	  operation_mode_sub = rcl_get_zero_initialized_subscription();
 800225e:	f00d f859 	bl	800f314 <rcl_get_zero_initialized_subscription>
 8002262:	4603      	mov	r3, r0
 8002264:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <task_ros2_function+0x218>)
 8002266:	6013      	str	r3, [r2, #0]
          rclc_subscription_init_best_effort(
 8002268:	f00f fe5e 	bl	8011f28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8>
 800226c:	4602      	mov	r2, r0
 800226e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <task_ros2_function+0x21c>)
 8002274:	482a      	ldr	r0, [pc, #168]	; (8002320 <task_ros2_function+0x218>)
 8002276:	f00d fdef 	bl	800fe58 <rclc_subscription_init_best_effort>
//##############################################################################################################
//##################################### Alocação de memória ####################################################
//##############################################################################################################


		 	golfinho_motion_status_gps_msg.data.capacity = 14;
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <task_ros2_function+0x220>)
 800227c:	220e      	movs	r2, #14
 800227e:	619a      	str	r2, [r3, #24]
		 	golfinho_motion_status_gps_msg.data.size = 14;
 8002280:	4b29      	ldr	r3, [pc, #164]	; (8002328 <task_ros2_function+0x220>)
 8002282:	220e      	movs	r2, #14
 8002284:	615a      	str	r2, [r3, #20]
		 	golfinho_motion_status_gps_msg.data.data = (float *) pvPortMalloc(golfinho_motion_status_gps_msg.data.capacity * sizeof(float));
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <task_ros2_function+0x220>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f00a fd75 	bl	800cd7c <pvPortMalloc>
 8002292:	4603      	mov	r3, r0
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <task_ros2_function+0x220>)
 8002296:	6113      	str	r3, [r2, #16]
		 	golfinho_motion_status_gps_msg.layout.dim.capacity = 14;
 8002298:	4b23      	ldr	r3, [pc, #140]	; (8002328 <task_ros2_function+0x220>)
 800229a:	220e      	movs	r2, #14
 800229c:	609a      	str	r2, [r3, #8]
		 	golfinho_motion_status_gps_msg.layout.dim.size = 14;
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <task_ros2_function+0x220>)
 80022a0:	220e      	movs	r2, #14
 80022a2:	605a      	str	r2, [r3, #4]
		 	golfinho_motion_status_gps_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_motion_status_gps_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <task_ros2_function+0x220>)
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00a fd63 	bl	800cd7c <pvPortMalloc>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <task_ros2_function+0x220>)
 80022ba:	6013      	str	r3, [r2, #0]
			 	  for (size_t i =0; i< golfinho_motion_status_gps_msg.layout.dim.capacity; i++){
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80022c2:	e065      	b.n	8002390 <task_ros2_function+0x288>
 80022c4:	08001e69 	.word	0x08001e69
 80022c8:	08001e01 	.word	0x08001e01
 80022cc:	08001de1 	.word	0x08001de1
 80022d0:	08001db5 	.word	0x08001db5
 80022d4:	20008e1c 	.word	0x20008e1c
 80022d8:	08003fb9 	.word	0x08003fb9
 80022dc:	08003ffd 	.word	0x08003ffd
 80022e0:	08004035 	.word	0x08004035
 80022e4:	080040a1 	.word	0x080040a1
 80022e8:	0801c07c 	.word	0x0801c07c
 80022ec:	0801c0a4 	.word	0x0801c0a4
 80022f0:	0801c0b8 	.word	0x0801c0b8
 80022f4:	0801c0c4 	.word	0x0801c0c4
 80022f8:	0801c0e4 	.word	0x0801c0e4
 80022fc:	20006bd8 	.word	0x20006bd8
 8002300:	0801c10c 	.word	0x0801c10c
 8002304:	200069d0 	.word	0x200069d0
 8002308:	0801c11c 	.word	0x0801c11c
 800230c:	20006a54 	.word	0x20006a54
 8002310:	0801c12c 	.word	0x0801c12c
 8002314:	20006be4 	.word	0x20006be4
 8002318:	200069ec 	.word	0x200069ec
 800231c:	0801c148 	.word	0x0801c148
 8002320:	20006a48 	.word	0x20006a48
 8002324:	0801c15c 	.word	0x0801c15c
 8002328:	20008890 	.word	0x20008890
			 		golfinho_motion_status_gps_msg.layout.dim.data[i].label.capacity = 14;
 800232c:	4bc1      	ldr	r3, [pc, #772]	; (8002634 <task_ros2_function+0x52c>)
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	220e      	movs	r2, #14
 8002340:	609a      	str	r2, [r3, #8]
			 		golfinho_motion_status_gps_msg.layout.dim.data[i].label.size = 14;
 8002342:	4bbc      	ldr	r3, [pc, #752]	; (8002634 <task_ros2_function+0x52c>)
 8002344:	6819      	ldr	r1, [r3, #0]
 8002346:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	220e      	movs	r2, #14
 8002356:	605a      	str	r2, [r3, #4]
			 		golfinho_motion_status_gps_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_motion_status_gps_msg.layout.dim.data[i].label.capacity * sizeof(char));
 8002358:	4bb6      	ldr	r3, [pc, #728]	; (8002634 <task_ros2_function+0x52c>)
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	6898      	ldr	r0, [r3, #8]
 800236c:	4bb1      	ldr	r3, [pc, #708]	; (8002634 <task_ros2_function+0x52c>)
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	18cc      	adds	r4, r1, r3
 800237e:	f00a fcfd 	bl	800cd7c <pvPortMalloc>
 8002382:	4603      	mov	r3, r0
 8002384:	6023      	str	r3, [r4, #0]
			 	  for (size_t i =0; i< golfinho_motion_status_gps_msg.layout.dim.capacity; i++){
 8002386:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800238a:	3301      	adds	r3, #1
 800238c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002390:	4ba8      	ldr	r3, [pc, #672]	; (8002634 <task_ros2_function+0x52c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002398:	429a      	cmp	r2, r3
 800239a:	d3c7      	bcc.n	800232c <task_ros2_function+0x224>
			 	  }

			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[0].label.data, "reserved");
 800239c:	4ba5      	ldr	r3, [pc, #660]	; (8002634 <task_ros2_function+0x52c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	49a5      	ldr	r1, [pc, #660]	; (8002638 <task_ros2_function+0x530>)
 80023a4:	461a      	mov	r2, r3
 80023a6:	460b      	mov	r3, r1
 80023a8:	cb03      	ldmia	r3!, {r0, r1}
 80023aa:	6010      	str	r0, [r2, #0]
 80023ac:	6051      	str	r1, [r2, #4]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[1].label.data, "steering");
 80023b2:	4ba0      	ldr	r3, [pc, #640]	; (8002634 <task_ros2_function+0x52c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3314      	adds	r3, #20
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	49a0      	ldr	r1, [pc, #640]	; (800263c <task_ros2_function+0x534>)
 80023bc:	461a      	mov	r2, r3
 80023be:	460b      	mov	r3, r1
 80023c0:	cb03      	ldmia	r3!, {r0, r1}
 80023c2:	6010      	str	r0, [r2, #0]
 80023c4:	6051      	str	r1, [r2, #4]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[2].label.data, "throttle");
 80023ca:	4b9a      	ldr	r3, [pc, #616]	; (8002634 <task_ros2_function+0x52c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3328      	adds	r3, #40	; 0x28
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	499b      	ldr	r1, [pc, #620]	; (8002640 <task_ros2_function+0x538>)
 80023d4:	461a      	mov	r2, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	cb03      	ldmia	r3!, {r0, r1}
 80023da:	6010      	str	r0, [r2, #0]
 80023dc:	6051      	str	r1, [r2, #4]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[3].label.data, "break");
 80023e2:	4b94      	ldr	r3, [pc, #592]	; (8002634 <task_ros2_function+0x52c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	333c      	adds	r3, #60	; 0x3c
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a96      	ldr	r2, [pc, #600]	; (8002644 <task_ros2_function+0x53c>)
 80023ec:	6810      	ldr	r0, [r2, #0]
 80023ee:	6018      	str	r0, [r3, #0]
 80023f0:	8892      	ldrh	r2, [r2, #4]
 80023f2:	809a      	strh	r2, [r3, #4]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[4].label.data, "bat_car");
 80023f4:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <task_ros2_function+0x52c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3350      	adds	r3, #80	; 0x50
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4992      	ldr	r1, [pc, #584]	; (8002648 <task_ros2_function+0x540>)
 80023fe:	461a      	mov	r2, r3
 8002400:	460b      	mov	r3, r1
 8002402:	cb03      	ldmia	r3!, {r0, r1}
 8002404:	6010      	str	r0, [r2, #0]
 8002406:	6051      	str	r1, [r2, #4]
			 	  //check status
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[5].label.data, "bat_sys");
 8002408:	4b8a      	ldr	r3, [pc, #552]	; (8002634 <task_ros2_function+0x52c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3364      	adds	r3, #100	; 0x64
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	498e      	ldr	r1, [pc, #568]	; (800264c <task_ros2_function+0x544>)
 8002412:	461a      	mov	r2, r3
 8002414:	460b      	mov	r3, r1
 8002416:	cb03      	ldmia	r3!, {r0, r1}
 8002418:	6010      	str	r0, [r2, #0]
 800241a:	6051      	str	r1, [r2, #4]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[6].label.data, "status");
 800241c:	4b85      	ldr	r3, [pc, #532]	; (8002634 <task_ros2_function+0x52c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3378      	adds	r3, #120	; 0x78
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a8a      	ldr	r2, [pc, #552]	; (8002650 <task_ros2_function+0x548>)
 8002426:	6810      	ldr	r0, [r2, #0]
 8002428:	6018      	str	r0, [r3, #0]
 800242a:	8891      	ldrh	r1, [r2, #4]
 800242c:	7992      	ldrb	r2, [r2, #6]
 800242e:	8099      	strh	r1, [r3, #4]
 8002430:	719a      	strb	r2, [r3, #6]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[7].label.data, "op_mod");
 8002432:	4b80      	ldr	r3, [pc, #512]	; (8002634 <task_ros2_function+0x52c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	338c      	adds	r3, #140	; 0x8c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a86      	ldr	r2, [pc, #536]	; (8002654 <task_ros2_function+0x54c>)
 800243c:	6810      	ldr	r0, [r2, #0]
 800243e:	6018      	str	r0, [r3, #0]
 8002440:	8891      	ldrh	r1, [r2, #4]
 8002442:	7992      	ldrb	r2, [r2, #6]
 8002444:	8099      	strh	r1, [r3, #4]
 8002446:	719a      	strb	r2, [r3, #6]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[8].label.data, "key_th");
 8002448:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <task_ros2_function+0x52c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	33a0      	adds	r3, #160	; 0xa0
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a81      	ldr	r2, [pc, #516]	; (8002658 <task_ros2_function+0x550>)
 8002452:	6810      	ldr	r0, [r2, #0]
 8002454:	6018      	str	r0, [r3, #0]
 8002456:	8891      	ldrh	r1, [r2, #4]
 8002458:	7992      	ldrb	r2, [r2, #6]
 800245a:	8099      	strh	r1, [r3, #4]
 800245c:	719a      	strb	r2, [r3, #6]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[9].label.data, "key_br");
 800245e:	4b75      	ldr	r3, [pc, #468]	; (8002634 <task_ros2_function+0x52c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	33b4      	adds	r3, #180	; 0xb4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7d      	ldr	r2, [pc, #500]	; (800265c <task_ros2_function+0x554>)
 8002468:	6810      	ldr	r0, [r2, #0]
 800246a:	6018      	str	r0, [r3, #0]
 800246c:	8891      	ldrh	r1, [r2, #4]
 800246e:	7992      	ldrb	r2, [r2, #6]
 8002470:	8099      	strh	r1, [r3, #4]
 8002472:	719a      	strb	r2, [r3, #6]
                  //gps
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[10].label.data, "altitude");
 8002474:	4b6f      	ldr	r3, [pc, #444]	; (8002634 <task_ros2_function+0x52c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	33c8      	adds	r3, #200	; 0xc8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4978      	ldr	r1, [pc, #480]	; (8002660 <task_ros2_function+0x558>)
 800247e:	461a      	mov	r2, r3
 8002480:	460b      	mov	r3, r1
 8002482:	cb03      	ldmia	r3!, {r0, r1}
 8002484:	6010      	str	r0, [r2, #0]
 8002486:	6051      	str	r1, [r2, #4]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[11].label.data, "latitude");
 800248c:	4b69      	ldr	r3, [pc, #420]	; (8002634 <task_ros2_function+0x52c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	33dc      	adds	r3, #220	; 0xdc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4973      	ldr	r1, [pc, #460]	; (8002664 <task_ros2_function+0x55c>)
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	cb03      	ldmia	r3!, {r0, r1}
 800249c:	6010      	str	r0, [r2, #0]
 800249e:	6051      	str	r1, [r2, #4]
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_status_gps_msg.layout.dim.data[12].label.data, "longitude");
 80024a4:	4b63      	ldr	r3, [pc, #396]	; (8002634 <task_ros2_function+0x52c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	33f0      	adds	r3, #240	; 0xf0
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	496e      	ldr	r1, [pc, #440]	; (8002668 <task_ros2_function+0x560>)
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	cb03      	ldmia	r3!, {r0, r1}
 80024b4:	6010      	str	r0, [r2, #0]
 80024b6:	6051      	str	r1, [r2, #4]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	8113      	strh	r3, [r2, #8]


						int STRING_BUFFER_LEN=25;
 80024bc:	2319      	movs	r3, #25
 80024be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	//imu
				    	char imu_buffer[STRING_BUFFER_LEN];
 80024c2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80024c6:	1e63      	subs	r3, r4, #1
 80024c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024cc:	4623      	mov	r3, r4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f04f 0100 	mov.w	r1, #0
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	00cb      	lsls	r3, r1, #3
 80024de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024e2:	00c2      	lsls	r2, r0, #3
 80024e4:	4623      	mov	r3, r4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	00cb      	lsls	r3, r1, #3
 80024f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024fa:	00c2      	lsls	r2, r0, #3
 80024fc:	4623      	mov	r3, r4
 80024fe:	3307      	adds	r3, #7
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	ebad 0d03 	sub.w	sp, sp, r3
 8002508:	ab02      	add	r3, sp, #8
 800250a:	3300      	adds	r3, #0
 800250c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
				    	imu_.header.frame_id.data = imu_buffer;
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <task_ros2_function+0x564>)
 8002512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002516:	6093      	str	r3, [r2, #8]
				    	imu_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8002518:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800251c:	4a53      	ldr	r2, [pc, #332]	; (800266c <task_ros2_function+0x564>)
 800251e:	6113      	str	r3, [r2, #16]

	//odom
				    	char odom_buffer[STRING_BUFFER_LEN];
 8002520:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8002524:	1e63      	subs	r3, r4, #1
 8002526:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800252a:	4623      	mov	r3, r4
 800252c:	4618      	mov	r0, r3
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	00cb      	lsls	r3, r1, #3
 800253c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002540:	00c2      	lsls	r2, r0, #3
 8002542:	4623      	mov	r3, r4
 8002544:	4618      	mov	r0, r3
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	00cb      	lsls	r3, r1, #3
 8002554:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002558:	00c2      	lsls	r2, r0, #3
 800255a:	4623      	mov	r3, r4
 800255c:	3307      	adds	r3, #7
 800255e:	08db      	lsrs	r3, r3, #3
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	ebad 0d03 	sub.w	sp, sp, r3
 8002566:	ab02      	add	r3, sp, #8
 8002568:	3300      	adds	r3, #0
 800256a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				    	odom.header.frame_id.data = odom_buffer;
 800256e:	4a40      	ldr	r2, [pc, #256]	; (8002670 <task_ros2_function+0x568>)
 8002570:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002574:	6093      	str	r3, [r2, #8]
				    	odom.header.frame_id.capacity = STRING_BUFFER_LEN;
 8002576:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <task_ros2_function+0x568>)
 800257c:	6113      	str	r3, [r2, #16]

				    	char child_frame_id[25];
				    	odom.child_frame_id.data = child_frame_id;
 800257e:	4a3c      	ldr	r2, [pc, #240]	; (8002670 <task_ros2_function+0x568>)
 8002580:	f107 0320 	add.w	r3, r7, #32
 8002584:	6153      	str	r3, [r2, #20]
				    	odom.child_frame_id.capacity = 25;
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <task_ros2_function+0x568>)
 8002588:	2219      	movs	r2, #25
 800258a:	61da      	str	r2, [r3, #28]
	// joint_steering
				    				    	char joint_steering_buffer[STRING_BUFFER_LEN];
 800258c:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8002590:	1e63      	subs	r3, r4, #1
 8002592:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002596:	4623      	mov	r3, r4
 8002598:	4618      	mov	r0, r3
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	00cb      	lsls	r3, r1, #3
 80025a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80025ac:	00c2      	lsls	r2, r0, #3
 80025ae:	4623      	mov	r3, r4
 80025b0:	4618      	mov	r0, r3
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	00cb      	lsls	r3, r1, #3
 80025c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80025c4:	00c2      	lsls	r2, r0, #3
 80025c6:	4623      	mov	r3, r4
 80025c8:	3307      	adds	r3, #7
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	ebad 0d03 	sub.w	sp, sp, r3
 80025d2:	ab02      	add	r3, sp, #8
 80025d4:	3300      	adds	r3, #0
 80025d6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				    				    	joint_steering.header.frame_id.data = joint_steering_buffer;
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <task_ros2_function+0x56c>)
 80025dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80025e0:	6093      	str	r3, [r2, #8]
				    				    	joint_steering.header.frame_id.capacity = STRING_BUFFER_LEN;
 80025e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80025e6:	4a23      	ldr	r2, [pc, #140]	; (8002674 <task_ros2_function+0x56c>)
 80025e8:	6113      	str	r3, [r2, #16]

				    				    	joint_steering.name.capacity = 1;
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <task_ros2_function+0x56c>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	61da      	str	r2, [r3, #28]
				    						joint_steering.name.size = 1;
 80025f0:	4b20      	ldr	r3, [pc, #128]	; (8002674 <task_ros2_function+0x56c>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	619a      	str	r2, [r3, #24]
				    						joint_steering.name.data = (rosidl_runtime_c__String *) pvPortMalloc(joint_steering.name.capacity * sizeof(rosidl_runtime_c__String));
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <task_ros2_function+0x56c>)
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f00a fbba 	bl	800cd7c <pvPortMalloc>
 8002608:	4603      	mov	r3, r0
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <task_ros2_function+0x56c>)
 800260c:	6153      	str	r3, [r2, #20]

				    						joint_steering.name.data->capacity = 5;
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <task_ros2_function+0x56c>)
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	2205      	movs	r2, #5
 8002614:	609a      	str	r2, [r3, #8]
				    						joint_steering.name.data->size = 5;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <task_ros2_function+0x56c>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	2205      	movs	r2, #5
 800261c:	605a      	str	r2, [r3, #4]
				    						joint_steering.name.data->data = (char*) pvPortMalloc(joint_steering.name.capacity * sizeof(char));
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <task_ros2_function+0x56c>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a14      	ldr	r2, [pc, #80]	; (8002674 <task_ros2_function+0x56c>)
 8002624:	6954      	ldr	r4, [r2, #20]
 8002626:	4618      	mov	r0, r3
 8002628:	f00a fba8 	bl	800cd7c <pvPortMalloc>
 800262c:	4603      	mov	r3, r0
 800262e:	6023      	str	r3, [r4, #0]
 8002630:	e022      	b.n	8002678 <task_ros2_function+0x570>
 8002632:	bf00      	nop
 8002634:	20008890 	.word	0x20008890
 8002638:	0801c178 	.word	0x0801c178
 800263c:	0801c184 	.word	0x0801c184
 8002640:	0801c190 	.word	0x0801c190
 8002644:	0801c19c 	.word	0x0801c19c
 8002648:	0801c1a4 	.word	0x0801c1a4
 800264c:	0801c1ac 	.word	0x0801c1ac
 8002650:	0801c1b4 	.word	0x0801c1b4
 8002654:	0801c1bc 	.word	0x0801c1bc
 8002658:	0801c1c4 	.word	0x0801c1c4
 800265c:	0801c1cc 	.word	0x0801c1cc
 8002660:	0801c1d4 	.word	0x0801c1d4
 8002664:	0801c1e0 	.word	0x0801c1e0
 8002668:	0801c1ec 	.word	0x0801c1ec
 800266c:	20006a68 	.word	0x20006a68
 8002670:	20008918 	.word	0x20008918
 8002674:	20006c28 	.word	0x20006c28
				    					 	strcpy(joint_steering.name.data->data, "steer");
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <task_ros2_function+0x6c0>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a53      	ldr	r2, [pc, #332]	; (80027cc <task_ros2_function+0x6c4>)
 8002680:	6810      	ldr	r0, [r2, #0]
 8002682:	6018      	str	r0, [r3, #0]
 8002684:	8892      	ldrh	r2, [r2, #4]
 8002686:	809a      	strh	r2, [r3, #4]

				    					 	joint_steering.velocity.capacity = 1;
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <task_ros2_function+0x6c0>)
 800268a:	2201      	movs	r2, #1
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
				    					 	joint_steering.velocity.size = 1;
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <task_ros2_function+0x6c0>)
 8002690:	2201      	movs	r2, #1
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
				    					 	joint_steering.velocity.data = (double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
 8002694:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <task_ros2_function+0x6c0>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4618      	mov	r0, r3
 800269c:	f00a fb6e 	bl	800cd7c <pvPortMalloc>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a49      	ldr	r2, [pc, #292]	; (80027c8 <task_ros2_function+0x6c0>)
 80026a4:	62d3      	str	r3, [r2, #44]	; 0x2c

				    					 	joint_steering.position.capacity = 1;
 80026a6:	4b48      	ldr	r3, [pc, #288]	; (80027c8 <task_ros2_function+0x6c0>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
				    					 	joint_steering.position.size = 1;
 80026ac:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <task_ros2_function+0x6c0>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
				    					 	joint_steering.position.data = (double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <task_ros2_function+0x6c0>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00a fb5f 	bl	800cd7c <pvPortMalloc>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <task_ros2_function+0x6c0>)
 80026c2:	6213      	str	r3, [r2, #32]

				    					 	joint_steering.effort.capacity = 1;
 80026c4:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <task_ros2_function+0x6c0>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
				    					 	joint_steering.effort.size = 1;
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <task_ros2_function+0x6c0>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
				    					 	joint_steering.effort.data = (double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <task_ros2_function+0x6c0>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f00a fb50 	bl	800cd7c <pvPortMalloc>
 80026dc:	4603      	mov	r3, r0
 80026de:	4a3a      	ldr	r2, [pc, #232]	; (80027c8 <task_ros2_function+0x6c0>)
 80026e0:	6393      	str	r3, [r2, #56]	; 0x38
	  // Create a timer
	  rclc_timer_init_default(&golfinho_imu_timer, &support, RCL_MS_TO_NS(40), golfinho_imu_timer_callback);
 80026e2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80026e6:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <task_ros2_function+0x6c8>)
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <task_ros2_function+0x6cc>)
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	4839      	ldr	r0, [pc, #228]	; (80027d8 <task_ros2_function+0x6d0>)
 80026f2:	f00d fbe5 	bl	800fec0 <rclc_timer_init_default>
	  rclc_timer_init_default(&odom_timer, &support, RCL_MS_TO_NS(40), odom_callback);
 80026f6:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80026fa:	4b38      	ldr	r3, [pc, #224]	; (80027dc <task_ros2_function+0x6d4>)
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4a35      	ldr	r2, [pc, #212]	; (80027d4 <task_ros2_function+0x6cc>)
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	4836      	ldr	r0, [pc, #216]	; (80027e0 <task_ros2_function+0x6d8>)
 8002706:	f00d fbdb 	bl	800fec0 <rclc_timer_init_default>
      rclc_timer_init_default(&golfinho_joint_steering_timer, &support, RCL_MS_TO_NS(40), golfinho_joint_steering_timer_callback);
 800270a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800270e:	4b35      	ldr	r3, [pc, #212]	; (80027e4 <task_ros2_function+0x6dc>)
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4a30      	ldr	r2, [pc, #192]	; (80027d4 <task_ros2_function+0x6cc>)
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	4833      	ldr	r0, [pc, #204]	; (80027e8 <task_ros2_function+0x6e0>)
 800271a:	f00d fbd1 	bl	800fec0 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_motion_status_gps_timer, &support, RCL_MS_TO_NS(500), golfinho_motion_status_gps_timer_callback);
 800271e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002722:	4b32      	ldr	r3, [pc, #200]	; (80027ec <task_ros2_function+0x6e4>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	a326      	add	r3, pc, #152	; (adr r3, 80027c0 <task_ros2_function+0x6b8>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	4830      	ldr	r0, [pc, #192]	; (80027f0 <task_ros2_function+0x6e8>)
 800272e:	f00d fbc7 	bl	800fec0 <rclc_timer_init_default>


	  // Create executor
	  rclc_executor_init(&executor, &support.context, 6, &allocator);
 8002732:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8002736:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800273a:	f103 0108 	add.w	r1, r3, #8
 800273e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002742:	4613      	mov	r3, r2
 8002744:	2206      	movs	r2, #6
 8002746:	f00d f853 	bl	800f7f0 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel,
 800274a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800274e:	2300      	movs	r3, #0
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <task_ros2_function+0x6ec>)
 8002754:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <task_ros2_function+0x6f0>)
 8002756:	4929      	ldr	r1, [pc, #164]	; (80027fc <task_ros2_function+0x6f4>)
 8002758:	f00d f8be 	bl	800f8d8 <rclc_executor_add_subscription>
	 	  			  &cmd_vel_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
          rclc_executor_add_subscription(&executor, &operation_mode_sub, &operation_mode_,
 800275c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <task_ros2_function+0x6f8>)
 8002766:	4a27      	ldr	r2, [pc, #156]	; (8002804 <task_ros2_function+0x6fc>)
 8002768:	4927      	ldr	r1, [pc, #156]	; (8002808 <task_ros2_function+0x700>)
 800276a:	f00d f8b5 	bl	800f8d8 <rclc_executor_add_subscription>
	 	  			  &operation_mode_callback, ON_NEW_DATA);

	  rclc_executor_add_timer(&executor, &odom_timer);
 800276e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002772:	491b      	ldr	r1, [pc, #108]	; (80027e0 <task_ros2_function+0x6d8>)
 8002774:	4618      	mov	r0, r3
 8002776:	f00d f8e7 	bl	800f948 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_joint_steering_timer);
 800277a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800277e:	491a      	ldr	r1, [pc, #104]	; (80027e8 <task_ros2_function+0x6e0>)
 8002780:	4618      	mov	r0, r3
 8002782:	f00d f8e1 	bl	800f948 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_imu_timer);
 8002786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800278a:	4913      	ldr	r1, [pc, #76]	; (80027d8 <task_ros2_function+0x6d0>)
 800278c:	4618      	mov	r0, r3
 800278e:	f00d f8db 	bl	800f948 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_motion_status_gps_timer);
 8002792:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002796:	4916      	ldr	r1, [pc, #88]	; (80027f0 <task_ros2_function+0x6e8>)
 8002798:	4618      	mov	r0, r3
 800279a:	f00d f8d5 	bl	800f948 <rclc_executor_add_timer>

      // Run executor
	  rclc_executor_spin(&executor);
 800279e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027a2:	4618      	mov	r0, r3
 80027a4:	f00d fa72 	bl	800fc8c <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;) osDelay(10);
 80027a8:	200a      	movs	r0, #10
 80027aa:	f007 ff07 	bl	800a5bc <osDelay>
 80027ae:	e7fb      	b.n	80027a8 <task_ros2_function+0x6a0>
		  return;
 80027b0:	bf00      	nop

  /* USER CODE END task_ros2_function */
}
 80027b2:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ba:	bf00      	nop
 80027bc:	f3af 8000 	nop.w
 80027c0:	1dcd6500 	.word	0x1dcd6500
 80027c4:	00000000 	.word	0x00000000
 80027c8:	20006c28 	.word	0x20006c28
 80027cc:	0801c1f8 	.word	0x0801c1f8
 80027d0:	08003209 	.word	0x08003209
 80027d4:	02625a00 	.word	0x02625a00
 80027d8:	2000888c 	.word	0x2000888c
 80027dc:	08003359 	.word	0x08003359
 80027e0:	200069f0 	.word	0x200069f0
 80027e4:	08003561 	.word	0x08003561
 80027e8:	20006a4c 	.word	0x20006a4c
 80027ec:	08003679 	.word	0x08003679
 80027f0:	20006bf4 	.word	0x20006bf4
 80027f4:	0800310d 	.word	0x0800310d
 80027f8:	20006bf8 	.word	0x20006bf8
 80027fc:	200069ec 	.word	0x200069ec
 8002800:	080030d9 	.word	0x080030d9
 8002804:	20006a50 	.word	0x20006a50
 8002808:	20006a48 	.word	0x20006a48

0800280c <hex2float>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_digital_inputs_task */

float hex2float(uint16_t tmp,uint16_t tmp1){
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	460a      	mov	r2, r1
 8002816:	80fb      	strh	r3, [r7, #6]
 8002818:	4613      	mov	r3, r2
 800281a:	80bb      	strh	r3, [r7, #4]
	 float ang_res_enc_abs = 0.0625043405792069;
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <hex2float+0xf0>)
 800281e:	60fb      	str	r3, [r7, #12]
	 encoder_abs[0]=tmp << 8 | tmp1;
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	021a      	lsls	r2, r3, #8
 8002824:	88bb      	ldrh	r3, [r7, #4]
 8002826:	4313      	orrs	r3, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <hex2float+0xf4>)
 800282c:	601a      	str	r2, [r3, #0]
     tmp=encoder_abs[0];
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <hex2float+0xf4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	80fb      	strh	r3, [r7, #6]
     if(!tmp)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <hex2float+0x34>
        return 0;
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e058      	b.n	80028f2 <hex2float+0xe6>
     else
       if(tmp>0 && tmp<=14399)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d028      	beq.n	8002898 <hex2float+0x8c>
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800284c:	d224      	bcs.n	8002898 <hex2float+0x8c>
    	   return trunc((float)tmp*ang_res_enc_abs*1000)/1000;
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fab9 	bl	8000dc8 <__aeabi_ui2f>
 8002856:	4603      	mov	r3, r0
 8002858:	68f9      	ldr	r1, [r7, #12]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fb0c 	bl	8000e78 <__aeabi_fmul>
 8002860:	4603      	mov	r3, r0
 8002862:	4928      	ldr	r1, [pc, #160]	; (8002904 <hex2float+0xf8>)
 8002864:	4618      	mov	r0, r3
 8002866:	f7fe fb07 	bl	8000e78 <__aeabi_fmul>
 800286a:	4603      	mov	r3, r0
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe55 	bl	800051c <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f019 fac5 	bl	801be08 <trunc>
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <hex2float+0xfc>)
 8002884:	f7fd ffcc 	bl	8000820 <__aeabi_ddiv>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f994 	bl	8000bbc <__aeabi_d2f>
 8002894:	4603      	mov	r3, r0
 8002896:	e02c      	b.n	80028f2 <hex2float+0xe6>
    	  else
           if(tmp>14399)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800289e:	d327      	bcc.n	80028f0 <hex2float+0xe4>
              return trunc((float)(tmp-65535)*ang_res_enc_abs*1000)/1000;
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80028a6:	3bff      	subs	r3, #255	; 0xff
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fa91 	bl	8000dd0 <__aeabi_i2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fae0 	bl	8000e78 <__aeabi_fmul>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4912      	ldr	r1, [pc, #72]	; (8002904 <hex2float+0xf8>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fadb 	bl	8000e78 <__aeabi_fmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fe29 	bl	800051c <__aeabi_f2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f019 fa99 	bl	801be08 <trunc>
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <hex2float+0xfc>)
 80028dc:	f7fd ffa0 	bl	8000820 <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f968 	bl	8000bbc <__aeabi_d2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	e000      	b.n	80028f2 <hex2float+0xe6>

     return -1;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <hex2float+0x100>)
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	3d800247 	.word	0x3d800247
 8002900:	20003300 	.word	0x20003300
 8002904:	447a0000 	.word	0x447a0000
 8002908:	408f4000 	.word	0x408f4000
 800290c:	bf800000 	.word	0xbf800000

08002910 <digital_inputs_task>:

////REALIZA A LEITURA DA ENTRADAS DIGITAIS
////REALIZA O CALCULO DE VELOCIDADE DOS ENCODERS
////RECEBE A ATUALIZAÇÃO DA POSIÇÃO DO ESTERÇAMENTO

void digital_inputs_task(void *argument){
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	  for(;;){
		  //////////////////////////////////////////
		  ////INICIO - LEITURA DAS ENTRADAS DIGITAIS
		  //////////////////////////////////////////
		  // key switch read
		  stats[0]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));   //a             num41                               -- BRANCO
 8002918:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800291c:	48a8      	ldr	r0, [pc, #672]	; (8002bc0 <digital_inputs_task+0x2b0>)
 800291e:	f004 fef7 	bl	8007710 <HAL_GPIO_ReadPin>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	bf0c      	ite	eq
 8002928:	2301      	moveq	r3, #1
 800292a:	2300      	movne	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	4ba4      	ldr	r3, [pc, #656]	; (8002bc4 <digital_inputs_task+0x2b4>)
 8002932:	701a      	strb	r2, [r3, #0]
		  stats[1]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));   //c (antes pb15)  	num42		     			  -- VERDE
 8002934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002938:	48a1      	ldr	r0, [pc, #644]	; (8002bc0 <digital_inputs_task+0x2b0>)
 800293a:	f004 fee9 	bl	8007710 <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	4b9d      	ldr	r3, [pc, #628]	; (8002bc4 <digital_inputs_task+0x2b4>)
 800294e:	705a      	strb	r2, [r3, #1]
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7));    //d (antes pc6)  agora entrada do buzzer pc7 num 46  -- VERMELHO
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	489d      	ldr	r0, [pc, #628]	; (8002bc8 <digital_inputs_task+0x2b8>)
 8002954:	f004 fedc 	bl	8007710 <HAL_GPIO_ReadPin>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	4b97      	ldr	r3, [pc, #604]	; (8002bc4 <digital_inputs_task+0x2b4>)
 8002968:	709a      	strb	r2, [r3, #2]

		  // break read
		  digital_data_input_manual[4] = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 800296a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296e:	4894      	ldr	r0, [pc, #592]	; (8002bc0 <digital_inputs_task+0x2b0>)
 8002970:	f004 fece 	bl	8007710 <HAL_GPIO_ReadPin>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <digital_inputs_task+0x2bc>)
 8002984:	711a      	strb	r2, [r3, #4]
		  // throttle read
		  digital_data_input_manual[3] = !(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8002986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298a:	488d      	ldr	r0, [pc, #564]	; (8002bc0 <digital_inputs_task+0x2b0>)
 800298c:	f004 fec0 	bl	8007710 <HAL_GPIO_ReadPin>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	bf0c      	ite	eq
 8002996:	2301      	moveq	r3, #1
 8002998:	2300      	movne	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <digital_inputs_task+0x2bc>)
 80029a0:	70da      	strb	r2, [r3, #3]


		  if(stats[0] || stats[1] || stats[2]){
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d107      	bne.n	80029ba <digital_inputs_task+0xaa>
 80029aa:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <digital_inputs_task+0xaa>
 80029b2:	4b84      	ldr	r3, [pc, #528]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d025      	beq.n	8002a06 <digital_inputs_task+0xf6>
			  if(stats[1] && stats[2])  //Frente
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <digital_inputs_task+0xc0>
 80029c2:	4b80      	ldr	r3, [pc, #512]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029c4:	789b      	ldrb	r3, [r3, #2]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <digital_inputs_task+0xc0>
			 	digital_data_input_manual[1] = 2; //a
 80029ca:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <digital_inputs_task+0x2bc>)
 80029cc:	2202      	movs	r2, #2
 80029ce:	705a      	strb	r2, [r3, #1]
			  if(stats[0] && stats[2])  // Ré
 80029d0:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <digital_inputs_task+0xd6>
 80029d8:	4b7a      	ldr	r3, [pc, #488]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029da:	789b      	ldrb	r3, [r3, #2]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <digital_inputs_task+0xd6>
			 	digital_data_input_manual[1] = 3; //c
 80029e0:	4b7a      	ldr	r3, [pc, #488]	; (8002bcc <digital_inputs_task+0x2bc>)
 80029e2:	2203      	movs	r2, #3
 80029e4:	705a      	strb	r2, [r3, #1]
			  if(stats[2] && !stats[1] && !stats[0])  // Neutro
 80029e6:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029e8:	789b      	ldrb	r3, [r3, #2]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00f      	beq.n	8002a0e <digital_inputs_task+0xfe>
 80029ee:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029f0:	785b      	ldrb	r3, [r3, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <digital_inputs_task+0xfe>
 80029f6:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <digital_inputs_task+0x2b4>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <digital_inputs_task+0xfe>
			    digital_data_input_manual[1] = 4; //d
 80029fe:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <digital_inputs_task+0x2bc>)
 8002a00:	2204      	movs	r2, #4
 8002a02:	705a      	strb	r2, [r3, #1]
			  if(stats[2] && !stats[1] && !stats[0])  // Neutro
 8002a04:	e003      	b.n	8002a0e <digital_inputs_task+0xfe>
		  }else
			  digital_data_input_manual[1]=1;
 8002a06:	4b71      	ldr	r3, [pc, #452]	; (8002bcc <digital_inputs_task+0x2bc>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	705a      	strb	r2, [r3, #1]
 8002a0c:	e000      	b.n	8002a10 <digital_inputs_task+0x100>
			  if(stats[2] && !stats[1] && !stats[0])  // Neutro
 8002a0e:	bf00      	nop
		  ///////////////////////////////////////

		    /////////////////////////////////
		    ////INICIO - CÁLCULO DA VELOCIDADE LINEAR
		    /////////////////////////////////
			vel[0] = 0.3277*2*3.1415*(count_a)/(Nmax_rev*Ts); count_a = 0; //  m/s  // roda direita
 8002a10:	4b6f      	ldr	r3, [pc, #444]	; (8002bd0 <digital_inputs_task+0x2c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd6f 	bl	80004f8 <__aeabi_i2d>
 8002a1a:	a35f      	add	r3, pc, #380	; (adr r3, 8002b98 <digital_inputs_task+0x288>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fd fdd4 	bl	80005cc <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4614      	mov	r4, r2
 8002a2a:	461d      	mov	r5, r3
 8002a2c:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <digital_inputs_task+0x2c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe f9c9 	bl	8000dc8 <__aeabi_ui2f>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <digital_inputs_task+0x2c8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f7fe fa1a 	bl	8000e78 <__aeabi_fmul>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd68 	bl	800051c <__aeabi_f2d>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4620      	mov	r0, r4
 8002a52:	4629      	mov	r1, r5
 8002a54:	f7fd fee4 	bl	8000820 <__aeabi_ddiv>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8ac 	bl	8000bbc <__aeabi_d2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4a5d      	ldr	r2, [pc, #372]	; (8002bdc <digital_inputs_task+0x2cc>)
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b59      	ldr	r3, [pc, #356]	; (8002bd0 <digital_inputs_task+0x2c0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
			vel[1] = (vel[0]/0.3277)*60/(2*3.1415);//RPM
 8002a70:	4b5a      	ldr	r3, [pc, #360]	; (8002bdc <digital_inputs_task+0x2cc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd51 	bl	800051c <__aeabi_f2d>
 8002a7a:	a349      	add	r3, pc, #292	; (adr r3, 8002ba0 <digital_inputs_task+0x290>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fece 	bl	8000820 <__aeabi_ddiv>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	4b53      	ldr	r3, [pc, #332]	; (8002be0 <digital_inputs_task+0x2d0>)
 8002a92:	f7fd fd9b 	bl	80005cc <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	a342      	add	r3, pc, #264	; (adr r3, 8002ba8 <digital_inputs_task+0x298>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f7fd febc 	bl	8000820 <__aeabi_ddiv>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f7fe f884 	bl	8000bbc <__aeabi_d2f>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <digital_inputs_task+0x2cc>)
 8002ab8:	6053      	str	r3, [r2, #4]

			vel[2] = 0.3492*2*3.1415*(count_b)/(Nmax_rev*Ts); count_b = 0; //  m/s  // roda esquerda
 8002aba:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <digital_inputs_task+0x2d4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd1a 	bl	80004f8 <__aeabi_i2d>
 8002ac4:	a33a      	add	r3, pc, #232	; (adr r3, 8002bb0 <digital_inputs_task+0x2a0>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fd7f 	bl	80005cc <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4614      	mov	r4, r2
 8002ad4:	461d      	mov	r5, r3
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <digital_inputs_task+0x2c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe f974 	bl	8000dc8 <__aeabi_ui2f>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <digital_inputs_task+0x2c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7fe f9c5 	bl	8000e78 <__aeabi_fmul>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fd fd13 	bl	800051c <__aeabi_f2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4620      	mov	r0, r4
 8002afc:	4629      	mov	r1, r5
 8002afe:	f7fd fe8f 	bl	8000820 <__aeabi_ddiv>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe f857 	bl	8000bbc <__aeabi_d2f>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <digital_inputs_task+0x2cc>)
 8002b12:	6093      	str	r3, [r2, #8]
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <digital_inputs_task+0x2d4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
			vel[3] = vel[2]*60/(2*3.1415);//RPM
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <digital_inputs_task+0x2cc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4932      	ldr	r1, [pc, #200]	; (8002be8 <digital_inputs_task+0x2d8>)
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe f9a9 	bl	8000e78 <__aeabi_fmul>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fcf7 	bl	800051c <__aeabi_f2d>
 8002b2e:	a31e      	add	r3, pc, #120	; (adr r3, 8002ba8 <digital_inputs_task+0x298>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fe74 	bl	8000820 <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fe f83c 	bl	8000bbc <__aeabi_d2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <digital_inputs_task+0x2cc>)
 8002b48:	60d3      	str	r3, [r2, #12]
			//////////////////////////////////////////////
			////INICIO - CÁLCULO DA POSIÇÃO DO ESTERÇMENTO
			//////////////////////////////////////////////

			//Verifica se a informação enviada vem do encoder absoluto
		    if(flg_ImuGps_Sterr){encoder_abs_f[0] = (hex2float(canRX[1],canRX[2]) - 13.563);}
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <digital_inputs_task+0x2dc>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01b      	beq.n	8002b8a <digital_inputs_task+0x27a>
 8002b52:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <digital_inputs_task+0x2e0>)
 8002b54:	785b      	ldrb	r3, [r3, #1]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4a25      	ldr	r2, [pc, #148]	; (8002bf0 <digital_inputs_task+0x2e0>)
 8002b5a:	7892      	ldrb	r2, [r2, #2]
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe53 	bl	800280c <hex2float>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fcd7 	bl	800051c <__aeabi_f2d>
 8002b6e:	a312      	add	r3, pc, #72	; (adr r3, 8002bb8 <digital_inputs_task+0x2a8>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fb72 	bl	800025c <__aeabi_dsub>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4610      	mov	r0, r2
 8002b7e:	4619      	mov	r1, r3
 8002b80:	f7fe f81c 	bl	8000bbc <__aeabi_d2f>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <digital_inputs_task+0x2e4>)
 8002b88:	6013      	str	r3, [r2, #0]
			//////////////////////////////////////////////
			////FIM - CÁLCULO DA POSIÇÃO DO ESTERÇMENTO
			//////////////////////////////////////////////
		    osDelay(10); //ATUALIZA A CADA 10ms
 8002b8a:	200a      	movs	r0, #10
 8002b8c:	f007 fd16 	bl	800a5bc <osDelay>
		  stats[0]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));   //a             num41                               -- BRANCO
 8002b90:	e6c2      	b.n	8002918 <digital_inputs_task+0x8>
 8002b92:	bf00      	nop
 8002b94:	f3af 8000 	nop.w
 8002b98:	1017a538 	.word	0x1017a538
 8002b9c:	400078b5 	.word	0x400078b5
 8002ba0:	6bb98c7e 	.word	0x6bb98c7e
 8002ba4:	3fd4f909 	.word	0x3fd4f909
 8002ba8:	c083126f 	.word	0xc083126f
 8002bac:	401921ca 	.word	0x401921ca
 8002bb0:	3ec537ae 	.word	0x3ec537ae
 8002bb4:	40018d5c 	.word	0x40018d5c
 8002bb8:	89374bc7 	.word	0x89374bc7
 8002bbc:	402b2041 	.word	0x402b2041
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	20003320 	.word	0x20003320
 8002bc8:	40011000 	.word	0x40011000
 8002bcc:	200032a0 	.word	0x200032a0
 8002bd0:	200032e0 	.word	0x200032e0
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004
 8002bdc:	200032f0 	.word	0x200032f0
 8002be0:	404e0000 	.word	0x404e0000
 8002be4:	200032e8 	.word	0x200032e8
 8002be8:	42700000 	.word	0x42700000
 8002bec:	2000329d 	.word	0x2000329d
 8002bf0:	200032d8 	.word	0x200032d8
 8002bf4:	20003308 	.word	0x20003308

08002bf8 <analog_input_task>:
*/
/* USER CODE END Header_analog_input_task */


void analog_input_task(void *argument)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
  for(;;){
	      //////////////////////////////////////////////////////////////
	      //REALIZA A LEITURA DO FREIO E ESTERÇAMENTO UTILIZANDO POLLING
	      //////////////////////////////////////////////////////////////
		  ADC_select_channel_batery_car(); // freio
 8002c00:	f000 ff6c 	bl	8003adc <ADC_select_channel_batery_car>
		  HAL_ADC_Start(&hadc1);
 8002c04:	482c      	ldr	r0, [pc, #176]	; (8002cb8 <analog_input_task+0xc0>)
 8002c06:	f002 fcc9 	bl	800559c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8002c0a:	210a      	movs	r1, #10
 8002c0c:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <analog_input_task+0xc0>)
 8002c0e:	f002 fd9f 	bl	8005750 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[2] = 6.5*(HAL_ADC_GetValue(&hadc1));
 8002c12:	4829      	ldr	r0, [pc, #164]	; (8002cb8 <analog_input_task+0xc0>)
 8002c14:	f002 fea2 	bl	800595c <HAL_ADC_GetValue>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc5c 	bl	80004d8 <__aeabi_ui2d>
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <analog_input_task+0xc4>)
 8002c26:	f7fd fcd1 	bl	80005cc <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4610      	mov	r0, r2
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fd ffa3 	bl	8000b7c <__aeabi_d2uiz>
 8002c36:	4603      	mov	r3, r0
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <analog_input_task+0xc8>)
 8002c3c:	809a      	strh	r2, [r3, #4]
   	      if(analog_data_input_manual[2] < ofst_break)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <analog_input_task+0xc8>)
 8002c40:	889a      	ldrh	r2, [r3, #4]
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <analog_input_task+0xcc>)
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d203      	bcs.n	8002c52 <analog_input_task+0x5a>
   	    	analog_data_input_manual[2] = ofst_break;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <analog_input_task+0xcc>)
 8002c4c:	881a      	ldrh	r2, [r3, #0]
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <analog_input_task+0xc8>)
 8002c50:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Stop(&hadc1);
 8002c52:	4819      	ldr	r0, [pc, #100]	; (8002cb8 <analog_input_task+0xc0>)
 8002c54:	f002 fd50 	bl	80056f8 <HAL_ADC_Stop>

		  ADC_select_channel_system_batery();  //acelerador
 8002c58:	f000 ff5c 	bl	8003b14 <ADC_select_channel_system_batery>
		  HAL_ADC_Start(&hadc1);
 8002c5c:	4816      	ldr	r0, [pc, #88]	; (8002cb8 <analog_input_task+0xc0>)
 8002c5e:	f002 fc9d 	bl	800559c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8002c62:	210a      	movs	r1, #10
 8002c64:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <analog_input_task+0xc0>)
 8002c66:	f002 fd73 	bl	8005750 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[3] = 6.5*(HAL_ADC_GetValue(&hadc1));
 8002c6a:	4813      	ldr	r0, [pc, #76]	; (8002cb8 <analog_input_task+0xc0>)
 8002c6c:	f002 fe76 	bl	800595c <HAL_ADC_GetValue>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc30 	bl	80004d8 <__aeabi_ui2d>
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <analog_input_task+0xc4>)
 8002c7e:	f7fd fca5 	bl	80005cc <__aeabi_dmul>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f7fd ff77 	bl	8000b7c <__aeabi_d2uiz>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <analog_input_task+0xc8>)
 8002c94:	80da      	strh	r2, [r3, #6]
		  if(analog_data_input_manual[3]>4095)
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <analog_input_task+0xc8>)
 8002c98:	88db      	ldrh	r3, [r3, #6]
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d303      	bcc.n	8002ca8 <analog_input_task+0xb0>
		  analog_data_input_manual[3]=4095;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <analog_input_task+0xc8>)
 8002ca2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002ca6:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <analog_input_task+0xc0>)
 8002caa:	f002 fd25 	bl	80056f8 <HAL_ADC_Stop>
	      //////////////////////////////////////////////////////////////
	      //REALIZA A LEITURA DO FREIO E ESTERÇAMENTO UTILIZANDO POLLING
	      //////////////////////////////////////////////////////////////
		  HAL_Delay(20); //ATUALIZA A CADA 20ms
 8002cae:	2014      	movs	r0, #20
 8002cb0:	f002 fb66 	bl	8005380 <HAL_Delay>
		  ADC_select_channel_batery_car(); // freio
 8002cb4:	e7a4      	b.n	8002c00 <analog_input_task+0x8>
 8002cb6:	bf00      	nop
 8002cb8:	20006964 	.word	0x20006964
 8002cbc:	401a0000 	.word	0x401a0000
 8002cc0:	200032a8 	.word	0x200032a8
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <automatic_manual_mode_Task>:
	}
}

float cmd_a = 0;

void automatic_manual_mode_Task(void *argument){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN automatic_manual_mode_Task */
  /* Infinite loop */
	uint16_t ofst = 400;
 8002cd0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002cd4:	81fb      	strh	r3, [r7, #14]
	for(;;){

	  switch(flg){
 8002cd6:	4bb2      	ldr	r3, [pc, #712]	; (8002fa0 <automatic_manual_mode_Task+0x2d8>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <automatic_manual_mode_Task+0x1e>
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f000 8094 	beq.w	8002e0c <automatic_manual_mode_Task+0x144>
 8002ce4:	e100      	b.n	8002ee8 <automatic_manual_mode_Task+0x220>

	    case 0:
    //KEY SWITCH
	      switch(digital_data_input_manual[1]){
 8002ce6:	4baf      	ldr	r3, [pc, #700]	; (8002fa4 <automatic_manual_mode_Task+0x2dc>)
 8002ce8:	785b      	ldrb	r3, [r3, #1]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d84b      	bhi.n	8002d88 <automatic_manual_mode_Task+0xc0>
 8002cf0:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <automatic_manual_mode_Task+0x30>)
 8002cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf6:	bf00      	nop
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d29 	.word	0x08002d29
 8002d00:	08002d49 	.word	0x08002d49
 8002d04:	08002d69 	.word	0x08002d69

	    	 case 1:
	              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET); //a -- BRANCO
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2104      	movs	r1, #4
 8002d0c:	48a6      	ldr	r0, [pc, #664]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d0e:	f004 fd16 	bl	800773e <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET); //c -- VERDE
 8002d12:	2200      	movs	r2, #0
 8002d14:	2108      	movs	r1, #8
 8002d16:	48a4      	ldr	r0, [pc, #656]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d18:	f004 fd11 	bl	800773e <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET); //d -- VERMELHO
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2110      	movs	r1, #16
 8002d20:	48a1      	ldr	r0, [pc, #644]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d22:	f004 fd0c 	bl	800773e <HAL_GPIO_WritePin>
		     break;
 8002d26:	e02f      	b.n	8002d88 <automatic_manual_mode_Task+0xc0>
	//FRENTE
	    	 case 2:
   	    	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET); //a -- BRANCO
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	489e      	ldr	r0, [pc, #632]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d2e:	f004 fd06 	bl	800773e <HAL_GPIO_WritePin>
 	              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);   //c -- VERDE
 8002d32:	2201      	movs	r2, #1
 8002d34:	2108      	movs	r1, #8
 8002d36:	489c      	ldr	r0, [pc, #624]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d38:	f004 fd01 	bl	800773e <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);   //d -- VERMELHO
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	2110      	movs	r1, #16
 8002d40:	4899      	ldr	r0, [pc, #612]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d42:	f004 fcfc 	bl	800773e <HAL_GPIO_WritePin>
             break;
 8002d46:	e01f      	b.n	8002d88 <automatic_manual_mode_Task+0xc0>
	// RÉ
	    	 case 3:
			              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);     //a -- BRANCO
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2104      	movs	r1, #4
 8002d4c:	4896      	ldr	r0, [pc, #600]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d4e:	f004 fcf6 	bl	800773e <HAL_GPIO_WritePin>
			         	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);   //c -- VERDE
 8002d52:	2200      	movs	r2, #0
 8002d54:	2108      	movs	r1, #8
 8002d56:	4894      	ldr	r0, [pc, #592]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d58:	f004 fcf1 	bl	800773e <HAL_GPIO_WritePin>
			              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);     //d -- VERMELHO
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2110      	movs	r1, #16
 8002d60:	4891      	ldr	r0, [pc, #580]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d62:	f004 fcec 	bl	800773e <HAL_GPIO_WritePin>
                    break;
 8002d66:	e00f      	b.n	8002d88 <automatic_manual_mode_Task+0xc0>
	// NEUTRO
	    	 case 4:
                      	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);   //a -- BRANCO
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	488e      	ldr	r0, [pc, #568]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d6e:	f004 fce6 	bl	800773e <HAL_GPIO_WritePin>
                       	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);   //c -- VERDE
 8002d72:	2200      	movs	r2, #0
 8002d74:	2108      	movs	r1, #8
 8002d76:	488c      	ldr	r0, [pc, #560]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d78:	f004 fce1 	bl	800773e <HAL_GPIO_WritePin>
                         HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);     //d -- VERMELHO
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2110      	movs	r1, #16
 8002d80:	4889      	ldr	r0, [pc, #548]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d82:	f004 fcdc 	bl	800773e <HAL_GPIO_WritePin>
             break;
 8002d86:	bf00      	nop
	     }
    //THROTTLE
                         if(digital_data_input_manual[3]){
 8002d88:	4b86      	ldr	r3, [pc, #536]	; (8002fa4 <automatic_manual_mode_Task+0x2dc>)
 8002d8a:	78db      	ldrb	r3, [r3, #3]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00c      	beq.n	8002daa <automatic_manual_mode_Task+0xe2>
            	            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8002d90:	2201      	movs	r2, #1
 8002d92:	2101      	movs	r1, #1
 8002d94:	4884      	ldr	r0, [pc, #528]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002d96:	f004 fcd2 	bl	800773e <HAL_GPIO_WritePin>
           	                HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_manual[3]);
 8002d9a:	4b84      	ldr	r3, [pc, #528]	; (8002fac <automatic_manual_mode_Task+0x2e4>)
 8002d9c:	88db      	ldrh	r3, [r3, #6]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	4883      	ldr	r0, [pc, #524]	; (8002fb0 <automatic_manual_mode_Task+0x2e8>)
 8002da4:	f003 fe2c 	bl	8006a00 <HAL_DAC_SetValue>
 8002da8:	e00e      	b.n	8002dc8 <automatic_manual_mode_Task+0x100>
                          }else if(!digital_data_input_manual[3]){
 8002daa:	4b7e      	ldr	r3, [pc, #504]	; (8002fa4 <automatic_manual_mode_Task+0x2dc>)
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <automatic_manual_mode_Task+0x100>
            	            	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R,  ofst);
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	487d      	ldr	r0, [pc, #500]	; (8002fb0 <automatic_manual_mode_Task+0x2e8>)
 8002dba:	f003 fe21 	bl	8006a00 <HAL_DAC_SetValue>
            	            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4879      	ldr	r0, [pc, #484]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002dc4:	f004 fcbb 	bl	800773e <HAL_GPIO_WritePin>
            	            }
    //BREAK
                         if(digital_data_input_manual[4]){
 8002dc8:	4b76      	ldr	r3, [pc, #472]	; (8002fa4 <automatic_manual_mode_Task+0x2dc>)
 8002dca:	791b      	ldrb	r3, [r3, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00c      	beq.n	8002dea <automatic_manual_mode_Task+0x122>
                 	        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4874      	ldr	r0, [pc, #464]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002dd6:	f004 fcb2 	bl	800773e <HAL_GPIO_WritePin>
                            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
 8002dda:	4b74      	ldr	r3, [pc, #464]	; (8002fac <automatic_manual_mode_Task+0x2e4>)
 8002ddc:	889b      	ldrh	r3, [r3, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	2110      	movs	r1, #16
 8002de2:	4873      	ldr	r0, [pc, #460]	; (8002fb0 <automatic_manual_mode_Task+0x2e8>)
 8002de4:	f003 fe0c 	bl	8006a00 <HAL_DAC_SetValue>
                         }else if(!digital_data_input_manual[4]){
            	            	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
            		             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
	                          }
		  break;
 8002de8:	e07b      	b.n	8002ee2 <automatic_manual_mode_Task+0x21a>
                         }else if(!digital_data_input_manual[4]){
 8002dea:	4b6e      	ldr	r3, [pc, #440]	; (8002fa4 <automatic_manual_mode_Task+0x2dc>)
 8002dec:	791b      	ldrb	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d177      	bne.n	8002ee2 <automatic_manual_mode_Task+0x21a>
            	            	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
 8002df2:	4b6e      	ldr	r3, [pc, #440]	; (8002fac <automatic_manual_mode_Task+0x2e4>)
 8002df4:	889b      	ldrh	r3, [r3, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2110      	movs	r1, #16
 8002dfa:	486d      	ldr	r0, [pc, #436]	; (8002fb0 <automatic_manual_mode_Task+0x2e8>)
 8002dfc:	f003 fe00 	bl	8006a00 <HAL_DAC_SetValue>
            		             HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2102      	movs	r1, #2
 8002e04:	4868      	ldr	r0, [pc, #416]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002e06:	f004 fc9a 	bl	800773e <HAL_GPIO_WritePin>
		  break;
 8002e0a:	e06a      	b.n	8002ee2 <automatic_manual_mode_Task+0x21a>
		          //    vel_fil_p = -wc*vel_fil + wc*vel[0];
		         //     vel_fil = vel_fil + vel_fil_p*Tams;
//FIM FILTRO

//INICIO ERRO
                       erro=sp-vel[0];
 8002e0c:	4b69      	ldr	r3, [pc, #420]	; (8002fb4 <automatic_manual_mode_Task+0x2ec>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <automatic_manual_mode_Task+0x2f0>)
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd ff24 	bl	8000c64 <__aeabi_fsub>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <automatic_manual_mode_Task+0x2f4>)
 8002e22:	601a      	str	r2, [r3, #0]
//FIM ERRO

//INICIO - AÇÃO DE CONTROLE
                       if(erro > 0.1){
 8002e24:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <automatic_manual_mode_Task+0x2f4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fd fb77 	bl	800051c <__aeabi_f2d>
 8002e2e:	a352      	add	r3, pc, #328	; (adr r3, 8002f78 <automatic_manual_mode_Task+0x2b0>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f7fd fe5a 	bl	8000aec <__aeabi_dcmpgt>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d032      	beq.n	8002ea4 <automatic_manual_mode_Task+0x1dc>
                    	   digital_data_input_auto[3]=1;
 8002e3e:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <automatic_manual_mode_Task+0x2f8>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	70da      	strb	r2, [r3, #3]
                           u=kp*erro;
 8002e44:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <automatic_manual_mode_Task+0x2fc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5c      	ldr	r2, [pc, #368]	; (8002fbc <automatic_manual_mode_Task+0x2f4>)
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f812 	bl	8000e78 <__aeabi_fmul>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <automatic_manual_mode_Task+0x300>)
 8002e5a:	601a      	str	r2, [r3, #0]
//FIM - AÇÃO DE CONTROLE

                       if( abs(u) > 5 )  u = 5;
 8002e5c:	4b5a      	ldr	r3, [pc, #360]	; (8002fc8 <automatic_manual_mode_Task+0x300>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe f9cf 	bl	8001204 <__aeabi_f2iz>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bfb8      	it	lt
 8002e6c:	425b      	neglt	r3, r3
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	dd02      	ble.n	8002e78 <automatic_manual_mode_Task+0x1b0>
 8002e72:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <automatic_manual_mode_Task+0x300>)
 8002e74:	4a55      	ldr	r2, [pc, #340]	; (8002fcc <automatic_manual_mode_Task+0x304>)
 8002e76:	601a      	str	r2, [r3, #0]

                           analog_data_input_auto[2] = abs(u)*4095/5;
 8002e78:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <automatic_manual_mode_Task+0x300>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fe f9c1 	bl	8001204 <__aeabi_f2iz>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bfb8      	it	lt
 8002e88:	425b      	neglt	r3, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	0052      	lsls	r2, r2, #1
 8002e90:	441a      	add	r2, r3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	461a      	mov	r2, r3
 8002e98:	0192      	lsls	r2, r2, #6
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <automatic_manual_mode_Task+0x308>)
 8002ea0:	809a      	strh	r2, [r3, #4]
 8002ea2:	e002      	b.n	8002eaa <automatic_manual_mode_Task+0x1e2>
                       }else
                    	   digital_data_input_auto[3]=0;
 8002ea4:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <automatic_manual_mode_Task+0x2f8>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	70da      	strb	r2, [r3, #3]


		  // THROTTLE
		             if(digital_data_input_auto[3]){
 8002eaa:	4b45      	ldr	r3, [pc, #276]	; (8002fc0 <automatic_manual_mode_Task+0x2f8>)
 8002eac:	78db      	ldrb	r3, [r3, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00c      	beq.n	8002ecc <automatic_manual_mode_Task+0x204>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	483c      	ldr	r0, [pc, #240]	; (8002fa8 <automatic_manual_mode_Task+0x2e0>)
 8002eb8:	f004 fc41 	bl	800773e <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, (analog_data_input_auto[2]));
 8002ebc:	4b44      	ldr	r3, [pc, #272]	; (8002fd0 <automatic_manual_mode_Task+0x308>)
 8002ebe:	889b      	ldrh	r3, [r3, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	483a      	ldr	r0, [pc, #232]	; (8002fb0 <automatic_manual_mode_Task+0x2e8>)
 8002ec6:	f003 fd9b 	bl	8006a00 <HAL_DAC_SetValue>
		             strcpy(h,str1);
		             HAL_UART_Transmit(&huart2,h, sizeof(h), 20);
		             memset(str1,0,sizeof(str1));
		             memset(h,0,sizeof(h));
*/
	     break;
 8002eca:	e00c      	b.n	8002ee6 <automatic_manual_mode_Task+0x21e>
		                   if(!digital_data_input_auto[3])
 8002ecc:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <automatic_manual_mode_Task+0x2f8>)
 8002ece:	78db      	ldrb	r3, [r3, #3]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d108      	bne.n	8002ee6 <automatic_manual_mode_Task+0x21e>
           	            	   HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R,  ofst);
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4835      	ldr	r0, [pc, #212]	; (8002fb0 <automatic_manual_mode_Task+0x2e8>)
 8002edc:	f003 fd90 	bl	8006a00 <HAL_DAC_SetValue>
	     break;
 8002ee0:	e001      	b.n	8002ee6 <automatic_manual_mode_Task+0x21e>
		  break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <automatic_manual_mode_Task+0x220>
	     break;
 8002ee6:	bf00      	nop
	  }

      cmd_a = - (trunc(1000*(encoder_abs_f[0] + 452.156)/(425.530 + 452.156))*15600/1000 - 7800);
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <automatic_manual_mode_Task+0x30c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fb15 	bl	800051c <__aeabi_f2d>
 8002ef2:	a323      	add	r3, pc, #140	; (adr r3, 8002f80 <automatic_manual_mode_Task+0x2b8>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd f9b2 	bl	8000260 <__adddf3>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <automatic_manual_mode_Task+0x310>)
 8002f0a:	f7fd fb5f 	bl	80005cc <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	a31c      	add	r3, pc, #112	; (adr r3, 8002f88 <automatic_manual_mode_Task+0x2c0>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	f7fd fc80 	bl	8000820 <__aeabi_ddiv>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	f018 ff6e 	bl	801be08 <trunc>
 8002f2c:	a318      	add	r3, pc, #96	; (adr r3, 8002f90 <automatic_manual_mode_Task+0x2c8>)
 8002f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f32:	f7fd fb4b 	bl	80005cc <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <automatic_manual_mode_Task+0x310>)
 8002f44:	f7fd fc6c 	bl	8000820 <__aeabi_ddiv>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4610      	mov	r0, r2
 8002f4e:	4619      	mov	r1, r3
 8002f50:	a311      	add	r3, pc, #68	; (adr r3, 8002f98 <automatic_manual_mode_Task+0x2d0>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd f981 	bl	800025c <__aeabi_dsub>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fe2b 	bl	8000bbc <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <automatic_manual_mode_Task+0x314>)
 8002f6e:	6013      	str	r3, [r2, #0]

     osDelay(100);
 8002f70:	2064      	movs	r0, #100	; 0x64
 8002f72:	f007 fb23 	bl	800a5bc <osDelay>
	  switch(flg){
 8002f76:	e6ae      	b.n	8002cd6 <automatic_manual_mode_Task+0xe>
 8002f78:	9999999a 	.word	0x9999999a
 8002f7c:	3fb99999 	.word	0x3fb99999
 8002f80:	f9db22d1 	.word	0xf9db22d1
 8002f84:	407c427e 	.word	0x407c427e
 8002f88:	ed916872 	.word	0xed916872
 8002f8c:	408b6d7c 	.word	0x408b6d7c
 8002f90:	00000000 	.word	0x00000000
 8002f94:	40ce7800 	.word	0x40ce7800
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	40be7800 	.word	0x40be7800
 8002fa0:	2000329c 	.word	0x2000329c
 8002fa4:	200032a0 	.word	0x200032a0
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	200032a8 	.word	0x200032a8
 8002fb0:	200069bc 	.word	0x200069bc
 8002fb4:	20003310 	.word	0x20003310
 8002fb8:	200032f0 	.word	0x200032f0
 8002fbc:	20003314 	.word	0x20003314
 8002fc0:	200032b4 	.word	0x200032b4
 8002fc4:	2000331c 	.word	0x2000331c
 8002fc8:	20003318 	.word	0x20003318
 8002fcc:	40a00000 	.word	0x40a00000
 8002fd0:	200032bc 	.word	0x200032bc
 8002fd4:	20003308 	.word	0x20003308
 8002fd8:	408f4000 	.word	0x408f4000
 8002fdc:	20003324 	.word	0x20003324

08002fe0 <task_stepper_function>:
*/
/* USER CODE END Header_task_stepper_function */

//cfg_v = 48*2*4,cfg_a = 48*2*4; 16900 -> excursão total

void task_stepper_function(void *argument){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_stepper_function */
	//VARIAVEIS UTILIZADAS PARA CONFIGURAR A ACELERAÇÃO E VELOCIDADE DO MOTOR DE PASSO
	uint16_t cfg_v = 48*2*4,cfg_a = 48*2*4, flags;
 8002fe8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002fec:	81fb      	strh	r3, [r7, #14]
 8002fee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ff2:	81bb      	strh	r3, [r7, #12]
	//stepper.currentPos = sensor_enc_abs;
	stepperInit(&stepper);
 8002ff4:	4836      	ldr	r0, [pc, #216]	; (80030d0 <task_stepper_function+0xf0>)
 8002ff6:	f001 f931 	bl	800425c <stepperInit>
	stepperSetSpeed(&stepper, 1);
 8002ffa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002ffe:	4834      	ldr	r0, [pc, #208]	; (80030d0 <task_stepper_function+0xf0>)
 8003000:	f001 f96e 	bl	80042e0 <stepperSetSpeed>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 8003004:	4b32      	ldr	r3, [pc, #200]	; (80030d0 <task_stepper_function+0xf0>)
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <task_stepper_function+0xf4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <task_stepper_function+0xf0>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	461a      	mov	r2, r3
 8003014:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <task_stepper_function+0xf4>)
 8003016:	60da      	str	r2, [r3, #12]
	stepperSetAcceleration(&stepper, cfg_a); //48*2*4
 8003018:	89bb      	ldrh	r3, [r7, #12]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fd fed4 	bl	8000dc8 <__aeabi_ui2f>
 8003020:	4603      	mov	r3, r0
 8003022:	4619      	mov	r1, r3
 8003024:	482a      	ldr	r0, [pc, #168]	; (80030d0 <task_stepper_function+0xf0>)
 8003026:	f001 fa23 	bl	8004470 <stepperSetAcceleration>
	// Motor = 7.5°/Step, 1/4 Microstepping, speed =  2rev/s,
	stepperSetMaxSpeed(&stepper, cfg_v);     //48*2*4
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fecb 	bl	8000dc8 <__aeabi_ui2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4619      	mov	r1, r3
 8003036:	4826      	ldr	r0, [pc, #152]	; (80030d0 <task_stepper_function+0xf0>)
 8003038:	f001 f9be 	bl	80043b8 <stepperSetMaxSpeed>
	stepperSetAbsoluteTartePosition(&stepper, 0);
 800303c:	2100      	movs	r1, #0
 800303e:	4824      	ldr	r0, [pc, #144]	; (80030d0 <task_stepper_function+0xf0>)
 8003040:	f001 fa9c 	bl	800457c <stepperSetAbsoluteTartePosition>
	__HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <task_stepper_function+0xf0>)
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <task_stepper_function+0xf4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <task_stepper_function+0xf0>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	461a      	mov	r2, r3
 8003054:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <task_stepper_function+0xf4>)
 8003056:	60da      	str	r2, [r3, #12]
	 HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8003058:	2100      	movs	r1, #0
 800305a:	481e      	ldr	r0, [pc, #120]	; (80030d4 <task_stepper_function+0xf4>)
 800305c:	f005 fae6 	bl	800862c <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  for(;;){
	       flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 8003060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003064:	2100      	movs	r1, #0
 8003066:	2003      	movs	r0, #3
 8003068:	f007 fa14 	bl	800a494 <osThreadFlagsWait>
 800306c:	4603      	mov	r3, r0
 800306e:	817b      	strh	r3, [r7, #10]

	       if ((flags & TF_STEPPER_INT) == TF_STEPPER_INT){
 8003070:	897b      	ldrh	r3, [r7, #10]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d011      	beq.n	800309e <task_stepper_function+0xbe>
	     	  stepperComputeNewSpeed(&stepper);
 800307a:	4815      	ldr	r0, [pc, #84]	; (80030d0 <task_stepper_function+0xf0>)
 800307c:	f001 fa8c 	bl	8004598 <stepperComputeNewSpeed>
	    	  signal_pos_stepper(stepper.stepInverval);
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <task_stepper_function+0xf0>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 fdbd 	bl	8003c04 <signal_pos_stepper>
	    	  __HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <task_stepper_function+0xf0>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <task_stepper_function+0xf4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <task_stepper_function+0xf0>)
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	461a      	mov	r2, r3
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <task_stepper_function+0xf4>)
 800309c:	60da      	str	r2, [r3, #12]
	         }
	       if ((flags & TF_STEPPER_DATA) == TF_STEPPER_DATA){
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0db      	beq.n	8003060 <task_stepper_function+0x80>
		     stepperComputeNewSpeed(&stepper);
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <task_stepper_function+0xf0>)
 80030aa:	f001 fa75 	bl	8004598 <stepperComputeNewSpeed>
		     signal_pos_stepper(stepper.stepInverval);
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <task_stepper_function+0xf0>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fda6 	bl	8003c04 <signal_pos_stepper>
		     __HAL_TIM_SET_AUTORELOAD(&htim3, stepper.stepInverval);
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <task_stepper_function+0xf0>)
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <task_stepper_function+0xf4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80030c2:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <task_stepper_function+0xf0>)
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <task_stepper_function+0xf4>)
 80030ca:	60da      	str	r2, [r3, #12]
	       flags = osThreadFlagsWait((TF_STEPPER_INT | TF_STEPPER_DATA), osFlagsWaitAny, osWaitForever);
 80030cc:	e7c8      	b.n	8003060 <task_stepper_function+0x80>
 80030ce:	bf00      	nop
 80030d0:	20006a1c 	.word	0x20006a1c
 80030d4:	20008c7c 	.word	0x20008c7c

080030d8 <operation_mode_callback>:
//#####################################################################################################################################

//#####################################################################################################################################
									    					/*SUBSCRIBERS*/
//#####################################################################################################################################
void operation_mode_callback(const void * msgin){ // ALTERA O MODO DE OPERAÇÃO DE MANUAL - 0 PARA AUTOMATICO - 1
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
     const std_msgs__msg__UInt8 *operation_mode_msg;
	if (msgin != NULL){
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <operation_mode_callback+0x22>
	   operation_mode_msg = (const std_msgs__msg__UInt8 *)msgin;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
           flg=operation_mode_msg->data;  // flag - operation mode , go to automatic_manual_mode
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <operation_mode_callback+0x2c>)
 80030f0:	701a      	strb	r2, [r3, #0]
           digital_data_input_auto[2] = flg;    // go to check_status
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <operation_mode_callback+0x2c>)
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <operation_mode_callback+0x30>)
 80030f8:	709a      	strb	r2, [r3, #2]
	}
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	2000329c 	.word	0x2000329c
 8003108:	200032b4 	.word	0x200032b4

0800310c <cmd_vel_callback>:

uint8_t pos_init_stepper_motor = 1;

void cmd_vel_callback(const void * msgin){
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

	const geometry_msgs__msg__Twist *cmd_vel_msg;

	if (msgin != NULL){
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d060      	beq.n	80031dc <cmd_vel_callback+0xd0>
	    cmd_vel_msg = (const geometry_msgs__msg__Twist *)msgin;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	60fb      	str	r3, [r7, #12]
            cmd_vel_buff[0]=cmd_vel_msg->linear.x;  // velocidade linear
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	492f      	ldr	r1, [pc, #188]	; (80031e4 <cmd_vel_callback+0xd8>)
 8003126:	e9c1 2300 	strd	r2, r3, [r1]
            cmd_vel_buff[1]=cmd_vel_msg->angular.z; // posição angular
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003130:	492c      	ldr	r1, [pc, #176]	; (80031e4 <cmd_vel_callback+0xd8>)
 8003132:	e9c1 2302 	strd	r2, r3, [r1, #8]
             if(pos_init_stepper_motor){
 8003136:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <cmd_vel_callback+0xdc>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <cmd_vel_callback+0x48>
                 stepper.currentPos = cmd_a; pos_init_stepper_motor = 0;
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <cmd_vel_callback+0xe0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f85e 	bl	8001204 <__aeabi_f2iz>
 8003148:	4603      	mov	r3, r0
 800314a:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <cmd_vel_callback+0xe4>)
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <cmd_vel_callback+0xdc>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
             }
               if(cmd_vel_buff[1]>1) cmd_vel_buff[1] = 1;
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <cmd_vel_callback+0xd8>)
 8003156:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <cmd_vel_callback+0xe8>)
 8003160:	f7fd fcc4 	bl	8000aec <__aeabi_dcmpgt>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <cmd_vel_callback+0x6a>
 800316a:	491e      	ldr	r1, [pc, #120]	; (80031e4 <cmd_vel_callback+0xd8>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <cmd_vel_callback+0xe8>)
 8003172:	e9c1 2302 	strd	r2, r3, [r1, #8]
               if(cmd_vel_buff[1]<-1) cmd_vel_buff[1] = -1;
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <cmd_vel_callback+0xd8>)
 8003178:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <cmd_vel_callback+0xec>)
 8003182:	f7fd fc95 	bl	8000ab0 <__aeabi_dcmplt>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <cmd_vel_callback+0x8c>
 800318c:	4915      	ldr	r1, [pc, #84]	; (80031e4 <cmd_vel_callback+0xd8>)
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <cmd_vel_callback+0xec>)
 8003194:	e9c1 2302 	strd	r2, r3, [r1, #8]
               stepper.targetPos = cmd_vel_buff[1]*(gain_stepper*780);    // define a posição do angulo de esterçamento [-1 ... 1]
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <cmd_vel_callback+0xd8>)
 800319a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <cmd_vel_callback+0xf0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4917      	ldr	r1, [pc, #92]	; (8003200 <cmd_vel_callback+0xf4>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd fe67 	bl	8000e78 <__aeabi_fmul>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9b5 	bl	800051c <__aeabi_f2d>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4620      	mov	r0, r4
 80031b8:	4629      	mov	r1, r5
 80031ba:	f7fd fa07 	bl	80005cc <__aeabi_dmul>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4610      	mov	r0, r2
 80031c4:	4619      	mov	r1, r3
 80031c6:	f7fd fcb1 	bl	8000b2c <__aeabi_d2iz>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a08      	ldr	r2, [pc, #32]	; (80031f0 <cmd_vel_callback+0xe4>)
 80031ce:	6053      	str	r3, [r2, #4]
               osThreadFlagsSet(task_stepperHandle, TF_STEPPER_DATA);
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <cmd_vel_callback+0xf8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2102      	movs	r1, #2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f007 f8fc 	bl	800a3d4 <osThreadFlagsSet>

	}
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdb0      	pop	{r4, r5, r7, pc}
 80031e4:	200032c8 	.word	0x200032c8
 80031e8:	20000014 	.word	0x20000014
 80031ec:	20003324 	.word	0x20003324
 80031f0:	20006a1c 	.word	0x20006a1c
 80031f4:	3ff00000 	.word	0x3ff00000
 80031f8:	bff00000 	.word	0xbff00000
 80031fc:	2000000c 	.word	0x2000000c
 8003200:	44430000 	.word	0x44430000
 8003204:	20006a58 	.word	0x20006a58

08003208 <golfinho_imu_timer_callback>:
//#####################################################################################################################################
									    					/*PUBLISHERS*/
//#####################################################################################################################################
void golfinho_imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8003208:	b580      	push	{r7, lr}
 800320a:	b08c      	sub	sp, #48	; 0x30
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id = 1234;
 8003214:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no = 10;
 800321a:	230a      	movs	r3, #10
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8087 	beq.w	8003334 <golfinho_imu_timer_callback+0x12c>
		sprintf(imu_.header.frame_id.data, "%d_%d", seq_no, device_id);
 8003226:	4b45      	ldr	r3, [pc, #276]	; (800333c <golfinho_imu_timer_callback+0x134>)
 8003228:	6898      	ldr	r0, [r3, #8]
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800322e:	4944      	ldr	r1, [pc, #272]	; (8003340 <golfinho_imu_timer_callback+0x138>)
 8003230:	f017 fc1a 	bl	801aa68 <siprintf>
		imu_.header.frame_id.size = strlen(imu_.header.frame_id.data);
 8003234:	4b41      	ldr	r3, [pc, #260]	; (800333c <golfinho_imu_timer_callback+0x134>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd f803 	bl	8000244 <strlen>
 800323e:	4603      	mov	r3, r0
 8003240:	4a3e      	ldr	r2, [pc, #248]	; (800333c <golfinho_imu_timer_callback+0x134>)
 8003242:	60d3      	str	r3, [r2, #12]

		if(!flg_ImuGps_Sterr){
 8003244:	4b3f      	ldr	r3, [pc, #252]	; (8003344 <golfinho_imu_timer_callback+0x13c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d157      	bne.n	80032fc <golfinho_imu_timer_callback+0xf4>
		   imu_.orientation.x = 0;
 800324c:	493b      	ldr	r1, [pc, #236]	; (800333c <golfinho_imu_timer_callback+0x134>)
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9c1 2306 	strd	r2, r3, [r1, #24]
		   imu_.orientation.y = 0;
 800325a:	4938      	ldr	r1, [pc, #224]	; (800333c <golfinho_imu_timer_callback+0x134>)
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9c1 2308 	strd	r2, r3, [r1, #32]
		   imu_.orientation.z = 0;
 8003268:	4934      	ldr	r1, [pc, #208]	; (800333c <golfinho_imu_timer_callback+0x134>)
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		   imu_.orientation.w = 0;
 8003276:	4931      	ldr	r1, [pc, #196]	; (800333c <golfinho_imu_timer_callback+0x134>)
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

		   imu_.angular_velocity.x = canRX[0];
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <golfinho_imu_timer_callback+0x140>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd f925 	bl	80004d8 <__aeabi_ui2d>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	492a      	ldr	r1, [pc, #168]	; (800333c <golfinho_imu_timer_callback+0x134>)
 8003294:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
		   imu_.angular_velocity.y = canRX[1];
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <golfinho_imu_timer_callback+0x140>)
 800329a:	785b      	ldrb	r3, [r3, #1]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f91b 	bl	80004d8 <__aeabi_ui2d>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4925      	ldr	r1, [pc, #148]	; (800333c <golfinho_imu_timer_callback+0x134>)
 80032a8:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
		   imu_.angular_velocity.z = canRX[2];
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <golfinho_imu_timer_callback+0x140>)
 80032ae:	789b      	ldrb	r3, [r3, #2]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f911 	bl	80004d8 <__aeabi_ui2d>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4920      	ldr	r1, [pc, #128]	; (800333c <golfinho_imu_timer_callback+0x134>)
 80032bc:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

		   imu_.linear_acceleration.x = canRX[3];
 80032c0:	4b21      	ldr	r3, [pc, #132]	; (8003348 <golfinho_imu_timer_callback+0x140>)
 80032c2:	78db      	ldrb	r3, [r3, #3]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f907 	bl	80004d8 <__aeabi_ui2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	491b      	ldr	r1, [pc, #108]	; (800333c <golfinho_imu_timer_callback+0x134>)
 80032d0:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
		   imu_.linear_acceleration.y = canRX[4];
 80032d4:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <golfinho_imu_timer_callback+0x140>)
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f8fd 	bl	80004d8 <__aeabi_ui2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4916      	ldr	r1, [pc, #88]	; (800333c <golfinho_imu_timer_callback+0x134>)
 80032e4:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
		   imu_.linear_acceleration.z = canRX[5];
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <golfinho_imu_timer_callback+0x140>)
 80032ea:	795b      	ldrb	r3, [r3, #5]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f8f3 	bl	80004d8 <__aeabi_ui2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4911      	ldr	r1, [pc, #68]	; (800333c <golfinho_imu_timer_callback+0x134>)
 80032f8:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
		}
		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4619      	mov	r1, r3
 8003302:	2001      	movs	r0, #1
 8003304:	f000 ff44 	bl	8004190 <clock_gettime>
		imu_.header.stamp.sec = ts.tv_sec;
 8003308:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <golfinho_imu_timer_callback+0x134>)
 800330e:	601a      	str	r2, [r3, #0]
		imu_.header.stamp.nanosec = ts.tv_nsec;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	461a      	mov	r2, r3
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <golfinho_imu_timer_callback+0x134>)
 8003316:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_imu_pub,&imu_, NULL);
 8003318:	2200      	movs	r2, #0
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <golfinho_imu_timer_callback+0x134>)
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <golfinho_imu_timer_callback+0x144>)
 800331e:	f00b ffd5 	bl	800f2cc <rcl_publish>
 8003322:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK){
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <golfinho_imu_timer_callback+0x12c>
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 800332a:	f44f 6189 	mov.w	r1, #1096	; 0x448
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <golfinho_imu_timer_callback+0x148>)
 8003330:	f017 fac8 	bl	801a8c4 <iprintf>
		}
      }
}
 8003334:	bf00      	nop
 8003336:	3730      	adds	r7, #48	; 0x30
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20006a68 	.word	0x20006a68
 8003340:	0801c200 	.word	0x0801c200
 8003344:	2000329d 	.word	0x2000329d
 8003348:	200032d8 	.word	0x200032d8
 800334c:	200069d0 	.word	0x200069d0
 8003350:	0801c208 	.word	0x0801c208
 8003354:	00000000 	.word	0x00000000

08003358 <odom_callback>:

void odom_callback(rcl_timer_t * timer, int64_t last_call_time){
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id = 4321;
 8003364:	f241 03e1 	movw	r3, #4321	; 0x10e1
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no = 15;
 800336a:	230f      	movs	r3, #15
 800336c:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80dd 	beq.w	8003530 <odom_callback+0x1d8>
		sprintf(odom.header.frame_id.data, "%d_%d", seq_no, device_id);
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <odom_callback+0x1f8>)
 8003378:	6898      	ldr	r0, [r3, #8]
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800337e:	4975      	ldr	r1, [pc, #468]	; (8003554 <odom_callback+0x1fc>)
 8003380:	f017 fb72 	bl	801aa68 <siprintf>
		odom.header.frame_id.size = strlen(odom.header.frame_id.data);
 8003384:	4b72      	ldr	r3, [pc, #456]	; (8003550 <odom_callback+0x1f8>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fc ff5b 	bl	8000244 <strlen>
 800338e:	4603      	mov	r3, r0
 8003390:	4a6f      	ldr	r2, [pc, #444]	; (8003550 <odom_callback+0x1f8>)
 8003392:	60d3      	str	r3, [r2, #12]

		sprintf(odom.child_frame_id.data, "%d_%d", seq_no, device_id);
 8003394:	4b6e      	ldr	r3, [pc, #440]	; (8003550 <odom_callback+0x1f8>)
 8003396:	6958      	ldr	r0, [r3, #20]
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800339c:	496d      	ldr	r1, [pc, #436]	; (8003554 <odom_callback+0x1fc>)
 800339e:	f017 fb63 	bl	801aa68 <siprintf>
		odom.child_frame_id.size = strlen(odom.child_frame_id.data);
 80033a2:	4b6b      	ldr	r3, [pc, #428]	; (8003550 <odom_callback+0x1f8>)
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fc ff4c 	bl	8000244 <strlen>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4a68      	ldr	r2, [pc, #416]	; (8003550 <odom_callback+0x1f8>)
 80033b0:	6193      	str	r3, [r2, #24]

		odom.pose.pose.position.x = 0;
 80033b2:	4967      	ldr	r1, [pc, #412]	; (8003550 <odom_callback+0x1f8>)
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		odom.pose.pose.position.y = 0;
 80033c0:	4963      	ldr	r1, [pc, #396]	; (8003550 <odom_callback+0x1f8>)
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		odom.pose.pose.position.z = 0;
 80033ce:	4960      	ldr	r1, [pc, #384]	; (8003550 <odom_callback+0x1f8>)
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

		odom.pose.pose.orientation.x = 0;
 80033dc:	495c      	ldr	r1, [pc, #368]	; (8003550 <odom_callback+0x1f8>)
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		odom.pose.pose.orientation.y = 0;
 80033ea:	4959      	ldr	r1, [pc, #356]	; (8003550 <odom_callback+0x1f8>)
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		odom.pose.pose.orientation.z = 0;
 80033f8:	4955      	ldr	r1, [pc, #340]	; (8003550 <odom_callback+0x1f8>)
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		odom.pose.pose.orientation.w = 0;
 8003406:	4952      	ldr	r1, [pc, #328]	; (8003550 <odom_callback+0x1f8>)
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		odom.pose.covariance[0]  = 1.0e-05;
 8003414:	494e      	ldr	r1, [pc, #312]	; (8003550 <odom_callback+0x1f8>)
 8003416:	a348      	add	r3, pc, #288	; (adr r3, 8003538 <odom_callback+0x1e0>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		odom.pose.covariance[7]  = 1.0e-05;
 8003420:	494b      	ldr	r1, [pc, #300]	; (8003550 <odom_callback+0x1f8>)
 8003422:	a345      	add	r3, pc, #276	; (adr r3, 8003538 <odom_callback+0x1e0>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
		odom.pose.covariance[14] = 1000000000000.0;
 800342c:	4948      	ldr	r1, [pc, #288]	; (8003550 <odom_callback+0x1f8>)
 800342e:	a344      	add	r3, pc, #272	; (adr r3, 8003540 <odom_callback+0x1e8>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
		odom.pose.covariance[21] = 1000000000000.0;
 8003438:	4945      	ldr	r1, [pc, #276]	; (8003550 <odom_callback+0x1f8>)
 800343a:	a341      	add	r3, pc, #260	; (adr r3, 8003540 <odom_callback+0x1e8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
		odom.pose.covariance[28] = 1000000000000.0;
 8003444:	4942      	ldr	r1, [pc, #264]	; (8003550 <odom_callback+0x1f8>)
 8003446:	a33e      	add	r3, pc, #248	; (adr r3, 8003540 <odom_callback+0x1e8>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
		odom.pose.covariance[35]  =  0.001;
 8003450:	493f      	ldr	r1, [pc, #252]	; (8003550 <odom_callback+0x1f8>)
 8003452:	a33d      	add	r3, pc, #244	; (adr r3, 8003548 <odom_callback+0x1f0>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170

		odom.twist.twist.linear.x = 0;
 800345c:	493c      	ldr	r1, [pc, #240]	; (8003550 <odom_callback+0x1f8>)
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
		odom.twist.twist.linear.y = 0;
 800346a:	4939      	ldr	r1, [pc, #228]	; (8003550 <odom_callback+0x1f8>)
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
		odom.twist.twist.linear.z = 0;
 8003478:	4935      	ldr	r1, [pc, #212]	; (8003550 <odom_callback+0x1f8>)
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188

		odom.twist.twist.angular.x = 0;
 8003486:	4932      	ldr	r1, [pc, #200]	; (8003550 <odom_callback+0x1f8>)
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9c1 2364 	strd	r2, r3, [r1, #400]	; 0x190
		odom.twist.twist.angular.y = 0;
 8003494:	492e      	ldr	r1, [pc, #184]	; (8003550 <odom_callback+0x1f8>)
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9c1 2366 	strd	r2, r3, [r1, #408]	; 0x198
		odom.twist.twist.angular.z = 0;
 80034a2:	492b      	ldr	r1, [pc, #172]	; (8003550 <odom_callback+0x1f8>)
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9c1 2368 	strd	r2, r3, [r1, #416]	; 0x1a0

		odom.twist.covariance[0]  = 1.0e-05;
 80034b0:	4927      	ldr	r1, [pc, #156]	; (8003550 <odom_callback+0x1f8>)
 80034b2:	a321      	add	r3, pc, #132	; (adr r3, 8003538 <odom_callback+0x1e0>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	e9c1 236a 	strd	r2, r3, [r1, #424]	; 0x1a8
		odom.twist.covariance[7]  = 1.0e-05;
 80034bc:	4924      	ldr	r1, [pc, #144]	; (8003550 <odom_callback+0x1f8>)
 80034be:	a31e      	add	r3, pc, #120	; (adr r3, 8003538 <odom_callback+0x1e0>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
		odom.twist.covariance[14] = 1000000000000.0;
 80034c8:	4921      	ldr	r1, [pc, #132]	; (8003550 <odom_callback+0x1f8>)
 80034ca:	a31d      	add	r3, pc, #116	; (adr r3, 8003540 <odom_callback+0x1e8>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
		odom.twist.covariance[21] = 1000000000000.0;
 80034d4:	491e      	ldr	r1, [pc, #120]	; (8003550 <odom_callback+0x1f8>)
 80034d6:	a31a      	add	r3, pc, #104	; (adr r3, 8003540 <odom_callback+0x1e8>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	e9c1 2394 	strd	r2, r3, [r1, #592]	; 0x250
		odom.twist.covariance[28] = 1000000000000.0;
 80034e0:	491b      	ldr	r1, [pc, #108]	; (8003550 <odom_callback+0x1f8>)
 80034e2:	a317      	add	r3, pc, #92	; (adr r3, 8003540 <odom_callback+0x1e8>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	e9c1 23a2 	strd	r2, r3, [r1, #648]	; 0x288
		odom.twist.covariance[35]  =  0.001;
 80034ec:	4918      	ldr	r1, [pc, #96]	; (8003550 <odom_callback+0x1f8>)
 80034ee:	a316      	add	r3, pc, #88	; (adr r3, 8003548 <odom_callback+0x1f0>)
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	e9c1 23b0 	strd	r2, r3, [r1, #704]	; 0x2c0

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 80034f8:	f107 0310 	add.w	r3, r7, #16
 80034fc:	4619      	mov	r1, r3
 80034fe:	2001      	movs	r0, #1
 8003500:	f000 fe46 	bl	8004190 <clock_gettime>
		odom.header.stamp.sec = ts.tv_sec;
 8003504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <odom_callback+0x1f8>)
 800350a:	601a      	str	r2, [r3, #0]
		odom.header.stamp.nanosec = ts.tv_nsec;
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	461a      	mov	r2, r3
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <odom_callback+0x1f8>)
 8003512:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&odom_pub,&odom, NULL);
 8003514:	2200      	movs	r2, #0
 8003516:	490e      	ldr	r1, [pc, #56]	; (8003550 <odom_callback+0x1f8>)
 8003518:	480f      	ldr	r0, [pc, #60]	; (8003558 <odom_callback+0x200>)
 800351a:	f00b fed7 	bl	800f2cc <rcl_publish>
 800351e:	6278      	str	r0, [r7, #36]	; 0x24
		if (ret != RCL_RET_OK){
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <odom_callback+0x1d8>
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8003526:	f240 4181 	movw	r1, #1153	; 0x481
 800352a:	480c      	ldr	r0, [pc, #48]	; (800355c <odom_callback+0x204>)
 800352c:	f017 f9ca 	bl	801a8c4 <iprintf>
		}
   }
}
 8003530:	bf00      	nop
 8003532:	3730      	adds	r7, #48	; 0x30
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	88e368f1 	.word	0x88e368f1
 800353c:	3ee4f8b5 	.word	0x3ee4f8b5
 8003540:	a2000000 	.word	0xa2000000
 8003544:	426d1a94 	.word	0x426d1a94
 8003548:	d2f1a9fc 	.word	0xd2f1a9fc
 800354c:	3f50624d 	.word	0x3f50624d
 8003550:	20008918 	.word	0x20008918
 8003554:	0801c200 	.word	0x0801c200
 8003558:	20006a54 	.word	0x20006a54
 800355c:	0801c208 	.word	0x0801c208

08003560 <golfinho_joint_steering_timer_callback>:

// ESTERÇAMENTO
double data0 = 0, data1 = 0;

void golfinho_joint_steering_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	; 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id = 012;
 800356c:	230a      	movs	r3, #10
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no = 01;
 8003570:	2301      	movs	r3, #1
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;
	if (timer != NULL) {
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d05f      	beq.n	800363a <golfinho_joint_steering_timer_callback+0xda>

		sprintf(joint_steering.header.frame_id.data, "%d_%d", seq_no, device_id);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 800357c:	6898      	ldr	r0, [r3, #8]
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003582:	4936      	ldr	r1, [pc, #216]	; (800365c <golfinho_joint_steering_timer_callback+0xfc>)
 8003584:	f017 fa70 	bl	801aa68 <siprintf>
		joint_steering.header.frame_id.size = strlen(joint_steering.header.frame_id.data);
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc fe59 	bl	8000244 <strlen>
 8003592:	4603      	mov	r3, r0
 8003594:	4a30      	ldr	r2, [pc, #192]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 8003596:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8003598:	f107 0310 	add.w	r3, r7, #16
 800359c:	4619      	mov	r1, r3
 800359e:	2001      	movs	r0, #1
 80035a0:	f000 fdf6 	bl	8004190 <clock_gettime>
		joint_steering.header.stamp.sec = ts.tv_sec;
 80035a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 80035aa:	601a      	str	r2, [r3, #0]
		joint_steering.header.stamp.nanosec = ts.tv_nsec;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b29      	ldr	r3, [pc, #164]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 80035b2:	605a      	str	r2, [r3, #4]
		data0 = trunc(10000*(0.5236*encoder_abs_f[0]/780))/10000; //[rad]
 80035b4:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <golfinho_joint_steering_timer_callback+0x100>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fc ffaf 	bl	800051c <__aeabi_f2d>
 80035be:	a322      	add	r3, pc, #136	; (adr r3, 8003648 <golfinho_joint_steering_timer_callback+0xe8>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fd f802 	bl	80005cc <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <golfinho_joint_steering_timer_callback+0x104>)
 80035d6:	f7fd f923 	bl	8000820 <__aeabi_ddiv>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	a31b      	add	r3, pc, #108	; (adr r3, 8003650 <golfinho_joint_steering_timer_callback+0xf0>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fc fff0 	bl	80005cc <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	f018 fc08 	bl	801be08 <trunc>
 80035f8:	a315      	add	r3, pc, #84	; (adr r3, 8003650 <golfinho_joint_steering_timer_callback+0xf0>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fd f90f 	bl	8000820 <__aeabi_ddiv>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4918      	ldr	r1, [pc, #96]	; (8003668 <golfinho_joint_steering_timer_callback+0x108>)
 8003608:	e9c1 2300 	strd	r2, r3, [r1]
		joint_steering.position.data = & data0;
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 800360e:	4a16      	ldr	r2, [pc, #88]	; (8003668 <golfinho_joint_steering_timer_callback+0x108>)
 8003610:	621a      	str	r2, [r3, #32]
		joint_steering.velocity.data = & data1;
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 8003614:	4a15      	ldr	r2, [pc, #84]	; (800366c <golfinho_joint_steering_timer_callback+0x10c>)
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
		joint_steering.effort.data = &data1;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 800361a:	4a14      	ldr	r2, [pc, #80]	; (800366c <golfinho_joint_steering_timer_callback+0x10c>)
 800361c:	639a      	str	r2, [r3, #56]	; 0x38

		rcl_ret_t ret = rcl_publish(&ros2_joint_steering_pub,&joint_steering, NULL);
 800361e:	2200      	movs	r2, #0
 8003620:	490d      	ldr	r1, [pc, #52]	; (8003658 <golfinho_joint_steering_timer_callback+0xf8>)
 8003622:	4813      	ldr	r0, [pc, #76]	; (8003670 <golfinho_joint_steering_timer_callback+0x110>)
 8003624:	f00b fe52 	bl	800f2cc <rcl_publish>
 8003628:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	d004      	beq.n	800363a <golfinho_joint_steering_timer_callback+0xda>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8003630:	f240 41a1 	movw	r1, #1185	; 0x4a1
 8003634:	480f      	ldr	r0, [pc, #60]	; (8003674 <golfinho_joint_steering_timer_callback+0x114>)
 8003636:	f017 f945 	bl	801a8c4 <iprintf>
		}
	}

}
 800363a:	bf00      	nop
 800363c:	3730      	adds	r7, #48	; 0x30
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	f3af 8000 	nop.w
 8003648:	c985f06f 	.word	0xc985f06f
 800364c:	3fe0c154 	.word	0x3fe0c154
 8003650:	00000000 	.word	0x00000000
 8003654:	40c38800 	.word	0x40c38800
 8003658:	20006c28 	.word	0x20006c28
 800365c:	0801c200 	.word	0x0801c200
 8003660:	20003308 	.word	0x20003308
 8003664:	40886000 	.word	0x40886000
 8003668:	20003328 	.word	0x20003328
 800366c:	20003330 	.word	0x20003330
 8003670:	20006be4 	.word	0x20006be4
 8003674:	0801c208 	.word	0x0801c208

08003678 <golfinho_motion_status_gps_timer_callback>:
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
void golfinho_motion_status_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8003678:	b590      	push	{r4, r7, lr}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modos de operação
 8003684:	4bb6      	ldr	r3, [pc, #728]	; (8003960 <golfinho_motion_status_gps_timer_callback+0x2e8>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80f3 	beq.w	8003874 <golfinho_motion_status_gps_timer_callback+0x1fc>
	                 golfinho_motion_status_gps_msg.data.data[1] = trunc(10000*(0.5236*encoder_abs_f[0]/780))/10000; // steer
 800368e:	4bb5      	ldr	r3, [pc, #724]	; (8003964 <golfinho_motion_status_gps_timer_callback+0x2ec>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fc ff42 	bl	800051c <__aeabi_f2d>
 8003698:	a3ad      	add	r3, pc, #692	; (adr r3, 8003950 <golfinho_motion_status_gps_timer_callback+0x2d8>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f7fc ff95 	bl	80005cc <__aeabi_dmul>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	4bae      	ldr	r3, [pc, #696]	; (8003968 <golfinho_motion_status_gps_timer_callback+0x2f0>)
 80036b0:	f7fd f8b6 	bl	8000820 <__aeabi_ddiv>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	a3a6      	add	r3, pc, #664	; (adr r3, 8003958 <golfinho_motion_status_gps_timer_callback+0x2e0>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	f7fc ff83 	bl	80005cc <__aeabi_dmul>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4610      	mov	r0, r2
 80036cc:	4619      	mov	r1, r3
 80036ce:	f018 fb9b 	bl	801be08 <trunc>
 80036d2:	a3a1      	add	r3, pc, #644	; (adr r3, 8003958 <golfinho_motion_status_gps_timer_callback+0x2e0>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fd f8a2 	bl	8000820 <__aeabi_ddiv>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	4ba1      	ldr	r3, [pc, #644]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	1d1c      	adds	r4, r3, #4
 80036ea:	f7fd fa67 	bl	8000bbc <__aeabi_d2f>
 80036ee:	4603      	mov	r3, r0
 80036f0:	6023      	str	r3, [r4, #0]
		      if(digital_data_input_auto[3]) //acelerador
 80036f2:	4b9f      	ldr	r3, [pc, #636]	; (8003970 <golfinho_motion_status_gps_timer_callback+0x2f8>)
 80036f4:	78db      	ldrb	r3, [r3, #3]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d016      	beq.n	8003728 <golfinho_motion_status_gps_timer_callback+0xb0>
		                 golfinho_motion_status_gps_msg.data.data[2] = analog_data_input_auto[2]*100/4095;
 80036fa:	4b9e      	ldr	r3, [pc, #632]	; (8003974 <golfinho_motion_status_gps_timer_callback+0x2fc>)
 80036fc:	889b      	ldrh	r3, [r3, #4]
 80036fe:	461a      	mov	r2, r3
 8003700:	2364      	movs	r3, #100	; 0x64
 8003702:	fb03 f302 	mul.w	r3, r3, r2
 8003706:	4a9c      	ldr	r2, [pc, #624]	; (8003978 <golfinho_motion_status_gps_timer_callback+0x300>)
 8003708:	fb82 1203 	smull	r1, r2, r2, r3
 800370c:	441a      	add	r2, r3
 800370e:	12d2      	asrs	r2, r2, #11
 8003710:	17db      	asrs	r3, r3, #31
 8003712:	1ad2      	subs	r2, r2, r3
 8003714:	4b95      	ldr	r3, [pc, #596]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f103 0408 	add.w	r4, r3, #8
 800371c:	4610      	mov	r0, r2
 800371e:	f7fd fb57 	bl	8000dd0 <__aeabi_i2f>
 8003722:	4603      	mov	r3, r0
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	e005      	b.n	8003734 <golfinho_motion_status_gps_timer_callback+0xbc>
		               else
		                 golfinho_motion_status_gps_msg.data.data[2]=0;
 8003728:	4b90      	ldr	r3, [pc, #576]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	3308      	adds	r3, #8
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

		      if(digital_data_input_auto[4]) //break
 8003734:	4b8e      	ldr	r3, [pc, #568]	; (8003970 <golfinho_motion_status_gps_timer_callback+0x2f8>)
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d016      	beq.n	800376a <golfinho_motion_status_gps_timer_callback+0xf2>
                         golfinho_motion_status_gps_msg.data.data[3] = analog_data_input_auto[3]*100/4095;
 800373c:	4b8d      	ldr	r3, [pc, #564]	; (8003974 <golfinho_motion_status_gps_timer_callback+0x2fc>)
 800373e:	88db      	ldrh	r3, [r3, #6]
 8003740:	461a      	mov	r2, r3
 8003742:	2364      	movs	r3, #100	; 0x64
 8003744:	fb03 f302 	mul.w	r3, r3, r2
 8003748:	4a8b      	ldr	r2, [pc, #556]	; (8003978 <golfinho_motion_status_gps_timer_callback+0x300>)
 800374a:	fb82 1203 	smull	r1, r2, r2, r3
 800374e:	441a      	add	r2, r3
 8003750:	12d2      	asrs	r2, r2, #11
 8003752:	17db      	asrs	r3, r3, #31
 8003754:	1ad2      	subs	r2, r2, r3
 8003756:	4b85      	ldr	r3, [pc, #532]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f103 040c 	add.w	r4, r3, #12
 800375e:	4610      	mov	r0, r2
 8003760:	f7fd fb36 	bl	8000dd0 <__aeabi_i2f>
 8003764:	4603      	mov	r3, r0
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	e005      	b.n	8003776 <golfinho_motion_status_gps_timer_callback+0xfe>
	    	           else
	        	         golfinho_motion_status_gps_msg.data.data[3]=0;
 800376a:	4b80      	ldr	r3, [pc, #512]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	330c      	adds	r3, #12
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

	        	 golfinho_motion_status_gps_msg.data.data[4] = analog_data_input_manual[4]*100/4095; // batery car
 8003776:	4b81      	ldr	r3, [pc, #516]	; (800397c <golfinho_motion_status_gps_timer_callback+0x304>)
 8003778:	891b      	ldrh	r3, [r3, #8]
 800377a:	461a      	mov	r2, r3
 800377c:	2364      	movs	r3, #100	; 0x64
 800377e:	fb03 f302 	mul.w	r3, r3, r2
 8003782:	4a7d      	ldr	r2, [pc, #500]	; (8003978 <golfinho_motion_status_gps_timer_callback+0x300>)
 8003784:	fb82 1203 	smull	r1, r2, r2, r3
 8003788:	441a      	add	r2, r3
 800378a:	12d2      	asrs	r2, r2, #11
 800378c:	17db      	asrs	r3, r3, #31
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	4b76      	ldr	r3, [pc, #472]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f103 0410 	add.w	r4, r3, #16
 8003798:	4610      	mov	r0, r2
 800379a:	f7fd fb19 	bl	8000dd0 <__aeabi_i2f>
 800379e:	4603      	mov	r3, r0
 80037a0:	6023      	str	r3, [r4, #0]
	         	 golfinho_motion_status_gps_msg.data.data[5] = analog_data_input_manual[5]*100/4095; // batery system
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <golfinho_motion_status_gps_timer_callback+0x304>)
 80037a4:	895b      	ldrh	r3, [r3, #10]
 80037a6:	461a      	mov	r2, r3
 80037a8:	2364      	movs	r3, #100	; 0x64
 80037aa:	fb03 f302 	mul.w	r3, r3, r2
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <golfinho_motion_status_gps_timer_callback+0x300>)
 80037b0:	fb82 1203 	smull	r1, r2, r2, r3
 80037b4:	441a      	add	r2, r3
 80037b6:	12d2      	asrs	r2, r2, #11
 80037b8:	17db      	asrs	r3, r3, #31
 80037ba:	1ad2      	subs	r2, r2, r3
 80037bc:	4b6b      	ldr	r3, [pc, #428]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f103 0414 	add.w	r4, r3, #20
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7fd fb03 	bl	8000dd0 <__aeabi_i2f>
 80037ca:	4603      	mov	r3, r0
 80037cc:	6023      	str	r3, [r4, #0]


                 //CHECK STATUS
		         golfinho_motion_status_gps_msg.data.data[6] = digital_data_input_manual[1];//key_switch - status
 80037ce:	4b6c      	ldr	r3, [pc, #432]	; (8003980 <golfinho_motion_status_gps_timer_callback+0x308>)
 80037d0:	785a      	ldrb	r2, [r3, #1]
 80037d2:	4b66      	ldr	r3, [pc, #408]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f103 0418 	add.w	r4, r3, #24
 80037da:	4610      	mov	r0, r2
 80037dc:	f7fd faf4 	bl	8000dc8 <__aeabi_ui2f>
 80037e0:	4603      	mov	r3, r0
 80037e2:	6023      	str	r3, [r4, #0]
		         golfinho_motion_status_gps_msg.data.data[7] = digital_data_input_auto[2];  //op_mode
 80037e4:	4b62      	ldr	r3, [pc, #392]	; (8003970 <golfinho_motion_status_gps_timer_callback+0x2f8>)
 80037e6:	789a      	ldrb	r2, [r3, #2]
 80037e8:	4b60      	ldr	r3, [pc, #384]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	f103 041c 	add.w	r4, r3, #28
 80037f0:	4610      	mov	r0, r2
 80037f2:	f7fd fae9 	bl	8000dc8 <__aeabi_ui2f>
 80037f6:	4603      	mov	r3, r0
 80037f8:	6023      	str	r3, [r4, #0]
		         golfinho_motion_status_gps_msg.data.data[8] = digital_data_input_auto[3];  //key_throttle
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <golfinho_motion_status_gps_timer_callback+0x2f8>)
 80037fc:	78da      	ldrb	r2, [r3, #3]
 80037fe:	4b5b      	ldr	r3, [pc, #364]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f103 0420 	add.w	r4, r3, #32
 8003806:	4610      	mov	r0, r2
 8003808:	f7fd fade 	bl	8000dc8 <__aeabi_ui2f>
 800380c:	4603      	mov	r3, r0
 800380e:	6023      	str	r3, [r4, #0]
		         golfinho_motion_status_gps_msg.data.data[9] = digital_data_input_auto[4];  //key_break
 8003810:	4b57      	ldr	r3, [pc, #348]	; (8003970 <golfinho_motion_status_gps_timer_callback+0x2f8>)
 8003812:	791a      	ldrb	r2, [r3, #4]
 8003814:	4b55      	ldr	r3, [pc, #340]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800381c:	4610      	mov	r0, r2
 800381e:	f7fd fad3 	bl	8000dc8 <__aeabi_ui2f>
 8003822:	4603      	mov	r3, r0
 8003824:	6023      	str	r3, [r4, #0]

			    	//GPS
			    if(!flg_ImuGps_Sterr){
 8003826:	4b57      	ldr	r3, [pc, #348]	; (8003984 <golfinho_motion_status_gps_timer_callback+0x30c>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 8131 	bne.w	8003a92 <golfinho_motion_status_gps_timer_callback+0x41a>
			         golfinho_motion_status_gps_msg.data.data[10] = canRX[5];  //altitude
 8003830:	4b55      	ldr	r3, [pc, #340]	; (8003988 <golfinho_motion_status_gps_timer_callback+0x310>)
 8003832:	795a      	ldrb	r2, [r3, #5]
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800383c:	4610      	mov	r0, r2
 800383e:	f7fd fac3 	bl	8000dc8 <__aeabi_ui2f>
 8003842:	4603      	mov	r3, r0
 8003844:	6023      	str	r3, [r4, #0]
			         golfinho_motion_status_gps_msg.data.data[11] = canRX[6];  //latitude
 8003846:	4b50      	ldr	r3, [pc, #320]	; (8003988 <golfinho_motion_status_gps_timer_callback+0x310>)
 8003848:	799a      	ldrb	r2, [r3, #6]
 800384a:	4b48      	ldr	r3, [pc, #288]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8003852:	4610      	mov	r0, r2
 8003854:	f7fd fab8 	bl	8000dc8 <__aeabi_ui2f>
 8003858:	4603      	mov	r3, r0
 800385a:	6023      	str	r3, [r4, #0]
			         golfinho_motion_status_gps_msg.data.data[12] = canRX[7];  //longitude
 800385c:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <golfinho_motion_status_gps_timer_callback+0x310>)
 800385e:	79da      	ldrb	r2, [r3, #7]
 8003860:	4b42      	ldr	r3, [pc, #264]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8003868:	4610      	mov	r0, r2
 800386a:	f7fd faad 	bl	8000dc8 <__aeabi_ui2f>
 800386e:	4603      	mov	r3, r0
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	e10e      	b.n	8003a92 <golfinho_motion_status_gps_timer_callback+0x41a>
			      }


			 }else{

				    golfinho_motion_status_gps_msg.data.data[1] = trunc(10000*(0.5236*encoder_abs_f[0]/780))/10000; // steer
 8003874:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <golfinho_motion_status_gps_timer_callback+0x2ec>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fc fe4f 	bl	800051c <__aeabi_f2d>
 800387e:	a334      	add	r3, pc, #208	; (adr r3, 8003950 <golfinho_motion_status_gps_timer_callback+0x2d8>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fea2 	bl	80005cc <__aeabi_dmul>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	4b34      	ldr	r3, [pc, #208]	; (8003968 <golfinho_motion_status_gps_timer_callback+0x2f0>)
 8003896:	f7fc ffc3 	bl	8000820 <__aeabi_ddiv>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	a32d      	add	r3, pc, #180	; (adr r3, 8003958 <golfinho_motion_status_gps_timer_callback+0x2e0>)
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f7fc fe90 	bl	80005cc <__aeabi_dmul>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4610      	mov	r0, r2
 80038b2:	4619      	mov	r1, r3
 80038b4:	f018 faa8 	bl	801be08 <trunc>
 80038b8:	a327      	add	r3, pc, #156	; (adr r3, 8003958 <golfinho_motion_status_gps_timer_callback+0x2e0>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fc ffaf 	bl	8000820 <__aeabi_ddiv>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	4b28      	ldr	r3, [pc, #160]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	1d1c      	adds	r4, r3, #4
 80038d0:	f7fd f974 	bl	8000bbc <__aeabi_d2f>
 80038d4:	4603      	mov	r3, r0
 80038d6:	6023      	str	r3, [r4, #0]

                 if(digital_data_input_manual[3]) //acelerador
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <golfinho_motion_status_gps_timer_callback+0x308>)
 80038da:	78db      	ldrb	r3, [r3, #3]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d016      	beq.n	800390e <golfinho_motion_status_gps_timer_callback+0x296>
			             golfinho_motion_status_gps_msg.data.data[2] = analog_data_input_manual[2]*100/4095;
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <golfinho_motion_status_gps_timer_callback+0x304>)
 80038e2:	889b      	ldrh	r3, [r3, #4]
 80038e4:	461a      	mov	r2, r3
 80038e6:	2364      	movs	r3, #100	; 0x64
 80038e8:	fb03 f302 	mul.w	r3, r3, r2
 80038ec:	4a22      	ldr	r2, [pc, #136]	; (8003978 <golfinho_motion_status_gps_timer_callback+0x300>)
 80038ee:	fb82 1203 	smull	r1, r2, r2, r3
 80038f2:	441a      	add	r2, r3
 80038f4:	12d2      	asrs	r2, r2, #11
 80038f6:	17db      	asrs	r3, r3, #31
 80038f8:	1ad2      	subs	r2, r2, r3
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	f103 0408 	add.w	r4, r3, #8
 8003902:	4610      	mov	r0, r2
 8003904:	f7fd fa64 	bl	8000dd0 <__aeabi_i2f>
 8003908:	4603      	mov	r3, r0
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	e005      	b.n	800391a <golfinho_motion_status_gps_timer_callback+0x2a2>
				    else
			             golfinho_motion_status_gps_msg.data.data[2] = 0;
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	3308      	adds	r3, #8
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

			    if(digital_data_input_manual[4]) //freio
 800391a:	4b19      	ldr	r3, [pc, #100]	; (8003980 <golfinho_motion_status_gps_timer_callback+0x308>)
 800391c:	791b      	ldrb	r3, [r3, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d034      	beq.n	800398c <golfinho_motion_status_gps_timer_callback+0x314>
			    	     golfinho_motion_status_gps_msg.data.data[3] = analog_data_input_manual[3]*100/4095;
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <golfinho_motion_status_gps_timer_callback+0x304>)
 8003924:	88db      	ldrh	r3, [r3, #6]
 8003926:	461a      	mov	r2, r3
 8003928:	2364      	movs	r3, #100	; 0x64
 800392a:	fb03 f302 	mul.w	r3, r3, r2
 800392e:	4a12      	ldr	r2, [pc, #72]	; (8003978 <golfinho_motion_status_gps_timer_callback+0x300>)
 8003930:	fb82 1203 	smull	r1, r2, r2, r3
 8003934:	441a      	add	r2, r3
 8003936:	12d2      	asrs	r2, r2, #11
 8003938:	17db      	asrs	r3, r3, #31
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <golfinho_motion_status_gps_timer_callback+0x2f4>)
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f103 040c 	add.w	r4, r3, #12
 8003944:	4610      	mov	r0, r2
 8003946:	f7fd fa43 	bl	8000dd0 <__aeabi_i2f>
 800394a:	4603      	mov	r3, r0
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	e023      	b.n	8003998 <golfinho_motion_status_gps_timer_callback+0x320>
 8003950:	c985f06f 	.word	0xc985f06f
 8003954:	3fe0c154 	.word	0x3fe0c154
 8003958:	00000000 	.word	0x00000000
 800395c:	40c38800 	.word	0x40c38800
 8003960:	2000329c 	.word	0x2000329c
 8003964:	20003308 	.word	0x20003308
 8003968:	40886000 	.word	0x40886000
 800396c:	20008890 	.word	0x20008890
 8003970:	200032b4 	.word	0x200032b4
 8003974:	200032bc 	.word	0x200032bc
 8003978:	80080081 	.word	0x80080081
 800397c:	200032a8 	.word	0x200032a8
 8003980:	200032a0 	.word	0x200032a0
 8003984:	2000329d 	.word	0x2000329d
 8003988:	200032d8 	.word	0x200032d8
			        else
			    	     golfinho_motion_status_gps_msg.data.data[3] = 0;
 800398c:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	330c      	adds	r3, #12
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

			    golfinho_motion_status_gps_msg.data.data[4] = analog_data_input_manual[4]*100/4095; // batery car
 8003998:	4b48      	ldr	r3, [pc, #288]	; (8003abc <golfinho_motion_status_gps_timer_callback+0x444>)
 800399a:	891b      	ldrh	r3, [r3, #8]
 800399c:	461a      	mov	r2, r3
 800399e:	2364      	movs	r3, #100	; 0x64
 80039a0:	fb03 f302 	mul.w	r3, r3, r2
 80039a4:	4a46      	ldr	r2, [pc, #280]	; (8003ac0 <golfinho_motion_status_gps_timer_callback+0x448>)
 80039a6:	fb82 1203 	smull	r1, r2, r2, r3
 80039aa:	441a      	add	r2, r3
 80039ac:	12d2      	asrs	r2, r2, #11
 80039ae:	17db      	asrs	r3, r3, #31
 80039b0:	1ad2      	subs	r2, r2, r3
 80039b2:	4b41      	ldr	r3, [pc, #260]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f103 0410 	add.w	r4, r3, #16
 80039ba:	4610      	mov	r0, r2
 80039bc:	f7fd fa08 	bl	8000dd0 <__aeabi_i2f>
 80039c0:	4603      	mov	r3, r0
 80039c2:	6023      	str	r3, [r4, #0]
				golfinho_motion_status_gps_msg.data.data[5] = analog_data_input_manual[5]*100/4095; // batery system
 80039c4:	4b3d      	ldr	r3, [pc, #244]	; (8003abc <golfinho_motion_status_gps_timer_callback+0x444>)
 80039c6:	895b      	ldrh	r3, [r3, #10]
 80039c8:	461a      	mov	r2, r3
 80039ca:	2364      	movs	r3, #100	; 0x64
 80039cc:	fb03 f302 	mul.w	r3, r3, r2
 80039d0:	4a3b      	ldr	r2, [pc, #236]	; (8003ac0 <golfinho_motion_status_gps_timer_callback+0x448>)
 80039d2:	fb82 1203 	smull	r1, r2, r2, r3
 80039d6:	441a      	add	r2, r3
 80039d8:	12d2      	asrs	r2, r2, #11
 80039da:	17db      	asrs	r3, r3, #31
 80039dc:	1ad2      	subs	r2, r2, r3
 80039de:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f103 0414 	add.w	r4, r3, #20
 80039e6:	4610      	mov	r0, r2
 80039e8:	f7fd f9f2 	bl	8000dd0 <__aeabi_i2f>
 80039ec:	4603      	mov	r3, r0
 80039ee:	6023      	str	r3, [r4, #0]

                //CHECK STATUS
		    	golfinho_motion_status_gps_msg.data.data[6] = digital_data_input_manual[1]; // key_switch
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <golfinho_motion_status_gps_timer_callback+0x44c>)
 80039f2:	785a      	ldrb	r2, [r3, #1]
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f103 0418 	add.w	r4, r3, #24
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fd f9e3 	bl	8000dc8 <__aeabi_ui2f>
 8003a02:	4603      	mov	r3, r0
 8003a04:	6023      	str	r3, [r4, #0]
		    	golfinho_motion_status_gps_msg.data.data[7] = digital_data_input_auto[2];   //op_mode
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <golfinho_motion_status_gps_timer_callback+0x450>)
 8003a08:	789a      	ldrb	r2, [r3, #2]
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f103 041c 	add.w	r4, r3, #28
 8003a12:	4610      	mov	r0, r2
 8003a14:	f7fd f9d8 	bl	8000dc8 <__aeabi_ui2f>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	6023      	str	r3, [r4, #0]
		    	golfinho_motion_status_gps_msg.data.data[8] = digital_data_input_manual[3]; //key_throttle
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <golfinho_motion_status_gps_timer_callback+0x44c>)
 8003a1e:	78da      	ldrb	r2, [r3, #3]
 8003a20:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f103 0420 	add.w	r4, r3, #32
 8003a28:	4610      	mov	r0, r2
 8003a2a:	f7fd f9cd 	bl	8000dc8 <__aeabi_ui2f>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	6023      	str	r3, [r4, #0]
		    	golfinho_motion_status_gps_msg.data.data[9] = digital_data_input_manual[4]; //key_break
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <golfinho_motion_status_gps_timer_callback+0x44c>)
 8003a34:	791a      	ldrb	r2, [r3, #4]
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f7fd f9c2 	bl	8000dc8 <__aeabi_ui2f>
 8003a44:	4603      	mov	r3, r0
 8003a46:	6023      	str	r3, [r4, #0]

		    	//GPS
		    	if(!flg_ImuGps_Sterr){
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <golfinho_motion_status_gps_timer_callback+0x454>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d120      	bne.n	8003a92 <golfinho_motion_status_gps_timer_callback+0x41a>
		         golfinho_motion_status_gps_msg.data.data[10] = canRX[5];  //altitude
 8003a50:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <golfinho_motion_status_gps_timer_callback+0x458>)
 8003a52:	795a      	ldrb	r2, [r3, #5]
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	f7fd f9b3 	bl	8000dc8 <__aeabi_ui2f>
 8003a62:	4603      	mov	r3, r0
 8003a64:	6023      	str	r3, [r4, #0]
		         golfinho_motion_status_gps_msg.data.data[11] = canRX[6];  //latitude
 8003a66:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <golfinho_motion_status_gps_timer_callback+0x458>)
 8003a68:	799a      	ldrb	r2, [r3, #6]
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7fd f9a8 	bl	8000dc8 <__aeabi_ui2f>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	6023      	str	r3, [r4, #0]
		         golfinho_motion_status_gps_msg.data.data[12] = canRX[7]; //longitude
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <golfinho_motion_status_gps_timer_callback+0x458>)
 8003a7e:	79da      	ldrb	r2, [r3, #7]
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f7fd f99d 	bl	8000dc8 <__aeabi_ui2f>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6023      	str	r3, [r4, #0]
		    	}

   	       }
		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_motion_status_gps_pub,&golfinho_motion_status_gps_msg, NULL);
 8003a92:	2200      	movs	r2, #0
 8003a94:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <golfinho_motion_status_gps_timer_callback+0x440>)
 8003a96:	480f      	ldr	r0, [pc, #60]	; (8003ad4 <golfinho_motion_status_gps_timer_callback+0x45c>)
 8003a98:	f00b fc18 	bl	800f2cc <rcl_publish>
 8003a9c:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK){
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <golfinho_motion_status_gps_timer_callback+0x436>
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8003aa4:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8003aa8:	480b      	ldr	r0, [pc, #44]	; (8003ad8 <golfinho_motion_status_gps_timer_callback+0x460>)
 8003aaa:	f016 ff0b 	bl	801a8c4 <iprintf>
		}
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20008890 	.word	0x20008890
 8003abc:	200032a8 	.word	0x200032a8
 8003ac0:	80080081 	.word	0x80080081
 8003ac4:	200032a0 	.word	0x200032a0
 8003ac8:	200032b4 	.word	0x200032b4
 8003acc:	2000329d 	.word	0x2000329d
 8003ad0:	200032d8 	.word	0x200032d8
 8003ad4:	20006bd8 	.word	0x20006bd8
 8003ad8:	0801c208 	.word	0x0801c208

08003adc <ADC_select_channel_batery_car>:
	    Error_Handler();
	  }
}

void ADC_select_channel_batery_car(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8003aec:	2306      	movs	r3, #6
 8003aee:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af4:	1d3b      	adds	r3, r7, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <ADC_select_channel_batery_car+0x34>)
 8003afa:	f001 ff3b 	bl	8005974 <HAL_ADC_ConfigChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <ADC_select_channel_batery_car+0x2c>
	  {
	    Error_Handler();
 8003b04:	f000 fa52 	bl	8003fac <Error_Handler>
	  }
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20006964 	.word	0x20006964

08003b14 <ADC_select_channel_system_batery>:

void ADC_select_channel_system_batery(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8003b24:	2307      	movs	r3, #7
 8003b26:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4805      	ldr	r0, [pc, #20]	; (8003b48 <ADC_select_channel_system_batery+0x34>)
 8003b32:	f001 ff1f 	bl	8005974 <HAL_ADC_ConfigChannel>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <ADC_select_channel_system_batery+0x2c>
	  {
	    Error_Handler();
 8003b3c:	f000 fa36 	bl	8003fac <Error_Handler>
	  }
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20006964 	.word	0x20006964

08003b4c <HAL_CAN_RxFifo0MsgPendingCallback>:


//////////////////////////////////////////////////////////////
//INCIO - LEITURA DOS SENSORES ATRAVES DA COMUNICAÇÃO CAN
//////////////////////////////////////////////////////////////
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK){Error_Handler();}
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003b56:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8003b58:	2100      	movs	r1, #0
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f002 faa5 	bl	80060aa <HAL_CAN_GetRxMessage>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
 8003b66:	f000 fa21 	bl	8003fac <Error_Handler>
     // Ao receber dados de um dispositivo conectado a rede can, a "flag_no"
     // informa qual dispositivo enviou os dados que se encontra no buffer canRX onde será
     // direcionado para a callback associada ao nivel lógico da flag.
     if(rxHeader.StdId == 485)  flg_ImuGps_Sterr=1;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f240 12e5 	movw	r2, #485	; 0x1e5
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d102      	bne.n	8003b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
     if(rxHeader.StdId == 0)   flg_ImuGps_Sterr=0;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200032d8 	.word	0x200032d8
 8003b98:	200069f8 	.word	0x200069f8
 8003b9c:	2000329d 	.word	0x2000329d

08003ba0 <HAL_TIM_PeriodElapsedCallback>:


//////////////////////////////////////////////////////////////////////////////////
//GERADOR DE PULSO POR INTERRUPÇÃO - ESTRATEGIA DE CONTROLE PARA O MOTOR DE PASSO
//////////////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {HAL_IncTick();}
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
 8003bb2:	f001 fbc9 	bl	8005348 <HAL_IncTick>

  if (htim->Instance == TIM2) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d118      	bne.n	8003bf2 <HAL_TIM_PeriodElapsedCallback+0x52>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);    //troca realizada em jul 28 de GPIO_PIN_13 para GPIO_PIN_15
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc6:	480e      	ldr	r0, [pc, #56]	; (8003c00 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003bc8:	f003 fdb9 	bl	800773e <HAL_GPIO_WritePin>
      for(int i=0;i<999;i++);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e002      	b.n	8003bd8 <HAL_TIM_PeriodElapsedCallback+0x38>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f240 32e6 	movw	r2, #998	; 0x3e6
 8003bde:	4293      	cmp	r3, r2
 8003be0:	ddf7      	ble.n	8003bd2 <HAL_TIM_PeriodElapsedCallback+0x32>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003be2:	2200      	movs	r2, #0
 8003be4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003be8:	4805      	ldr	r0, [pc, #20]	; (8003c00 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003bea:	f003 fda8 	bl	800773e <HAL_GPIO_WritePin>
      HAL_IncTick();
 8003bee:	f001 fbab 	bl	8005348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40011000 	.word	0x40011000

08003c04 <signal_pos_stepper>:
//INCIO - CALCULA A DISTÂNCIA ENTRE OS PULSOS
//////////////////////////////////////////////////////////////////////////////////

//uint32_t stepper_interval;

void signal_pos_stepper(uint32_t pos_){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	  stepper_interval = pos_;
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <signal_pos_stepper+0x24>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
	  htim2.Instance->ARR = stepper_interval;
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <signal_pos_stepper+0x28>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <signal_pos_stepper+0x24>)
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c
	  change_period();
 8003c1c:	f000 f808 	bl	8003c30 <change_period>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000010 	.word	0x20000010
 8003c2c:	20008cc4 	.word	0x20008cc4

08003c30 <change_period>:

void change_period(void){                       //DISTÂNCIA ENTRE OS PULSOS
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	609a      	str	r2, [r3, #8]
 8003c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c44:	463b      	mov	r3, r7
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <change_period+0x98>)
 8003c4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000;
 8003c54:	4b1c      	ldr	r3, [pc, #112]	; (8003cc8 <change_period+0x98>)
 8003c56:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8003c5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <change_period+0x98>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = stepper_interval;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <change_period+0x9c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <change_period+0x98>)
 8003c68:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <change_period+0x98>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <change_period+0x98>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c76:	4814      	ldr	r0, [pc, #80]	; (8003cc8 <change_period+0x98>)
 8003c78:	f004 fb78 	bl	800836c <HAL_TIM_Base_Init>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <change_period+0x56>
  {
    Error_Handler();
 8003c82:	f000 f993 	bl	8003fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	4619      	mov	r1, r3
 8003c92:	480d      	ldr	r0, [pc, #52]	; (8003cc8 <change_period+0x98>)
 8003c94:	f004 ffe8 	bl	8008c68 <HAL_TIM_ConfigClockSource>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <change_period+0x72>
  {
    Error_Handler();
 8003c9e:	f000 f985 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003caa:	463b      	mov	r3, r7
 8003cac:	4619      	mov	r1, r3
 8003cae:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <change_period+0x98>)
 8003cb0:	f005 fb9a 	bl	80093e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <change_period+0x8e>
  {
    Error_Handler();
 8003cba:	f000 f977 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20008cc4 	.word	0x20008cc4
 8003ccc:	20000010 	.word	0x20000010

08003cd0 <HAL_TIM_PWM_PulseFinishedCallback>:


/////////////////////////////////////////////////////////////////
//INICIO - DIREÇÃO - SENTIDD DE GIRO DO MOTOR DE PASSO
/////////////////////////////////////////////////////////////////
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d121      	bne.n	8003d26 <HAL_TIM_PWM_PulseFinishedCallback+0x56>
	   if(stepper.direction == DIRECTION_CW){
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10b      	bne.n	8003d04 <HAL_TIM_PWM_PulseFinishedCallback+0x34>
		     stepper.currentPos++;
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003cf4:	6013      	str	r3, [r2, #0]
		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cfc:	480e      	ldr	r0, [pc, #56]	; (8003d38 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8003cfe:	f003 fd1e 	bl	800773e <HAL_GPIO_WritePin>
 8003d02:	e00a      	b.n	8003d1a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
	    }else{
		     stepper.currentPos--;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8003d0c:	6013      	str	r3, [r2, #0]
		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d14:	4808      	ldr	r0, [pc, #32]	; (8003d38 <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8003d16:	f003 fd12 	bl	800773e <HAL_GPIO_WritePin>
		}
	    osThreadFlagsSet(task_stepperHandle, TF_STEPPER_INT);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f006 fb57 	bl	800a3d4 <osThreadFlagsSet>
	}
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40000400 	.word	0x40000400
 8003d34:	20006a1c 	.word	0x20006a1c
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	20006a58 	.word	0x20006a58

08003d40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4a4f      	ldr	r2, [pc, #316]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	6193      	str	r3, [r2, #24]
 8003d60:	4b4d      	ldr	r3, [pc, #308]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	4a49      	ldr	r2, [pc, #292]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d72:	f043 0320 	orr.w	r3, r3, #32
 8003d76:	6193      	str	r3, [r2, #24]
 8003d78:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d84:	4b44      	ldr	r3, [pc, #272]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	4a43      	ldr	r2, [pc, #268]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6193      	str	r3, [r2, #24]
 8003d90:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	4a3d      	ldr	r2, [pc, #244]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003da2:	f043 0308 	orr.w	r3, r3, #8
 8003da6:	6193      	str	r3, [r2, #24]
 8003da8:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <MX_GPIO_Init+0x158>)
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003db4:	2200      	movs	r2, #0
 8003db6:	f24e 013f 	movw	r1, #57407	; 0xe03f
 8003dba:	4838      	ldr	r0, [pc, #224]	; (8003e9c <MX_GPIO_Init+0x15c>)
 8003dbc:	f003 fcbf 	bl	800773e <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f640 4104 	movw	r1, #3076	; 0xc04
 8003dc6:	4836      	ldr	r0, [pc, #216]	; (8003ea0 <MX_GPIO_Init+0x160>)
 8003dc8:	f003 fcb9 	bl	800773e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8003dcc:	f24e 033f 	movw	r3, #57407	; 0xe03f
 8003dd0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4619      	mov	r1, r3
 8003de4:	482d      	ldr	r0, [pc, #180]	; (8003e9c <MX_GPIO_Init+0x15c>)
 8003de6:	f003 faff 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8003dea:	f240 1301 	movw	r3, #257	; 0x101
 8003dee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003df0:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <MX_GPIO_Init+0x164>)
 8003df2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df8:	f107 0310 	add.w	r3, r7, #16
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	482a      	ldr	r0, [pc, #168]	; (8003ea8 <MX_GPIO_Init+0x168>)
 8003e00:	f003 faf2 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 8003e04:	f240 6302 	movw	r3, #1538	; 0x602
 8003e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e12:	f107 0310 	add.w	r3, r7, #16
 8003e16:	4619      	mov	r1, r3
 8003e18:	4823      	ldr	r0, [pc, #140]	; (8003ea8 <MX_GPIO_Init+0x168>)
 8003e1a:	f003 fae5 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8003e1e:	f640 4304 	movw	r3, #3076	; 0xc04
 8003e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e30:	f107 0310 	add.w	r3, r7, #16
 8003e34:	4619      	mov	r1, r3
 8003e36:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <MX_GPIO_Init+0x160>)
 8003e38:	f003 fad6 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003e3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4813      	ldr	r0, [pc, #76]	; (8003ea0 <MX_GPIO_Init+0x160>)
 8003e52:	f003 fac9 	bl	80073e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003e56:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	4619      	mov	r1, r3
 8003e6a:	480c      	ldr	r0, [pc, #48]	; (8003e9c <MX_GPIO_Init+0x15c>)
 8003e6c:	f003 fabc 	bl	80073e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	2105      	movs	r1, #5
 8003e74:	2006      	movs	r0, #6
 8003e76:	f002 fd26 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003e7a:	2006      	movs	r0, #6
 8003e7c:	f002 fd3f 	bl	80068fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003e80:	2200      	movs	r2, #0
 8003e82:	2105      	movs	r1, #5
 8003e84:	2017      	movs	r0, #23
 8003e86:	f002 fd1e 	bl	80068c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e8a:	2017      	movs	r0, #23
 8003e8c:	f002 fd37 	bl	80068fe <HAL_NVIC_EnableIRQ>

}
 8003e90:	bf00      	nop
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40011000 	.word	0x40011000
 8003ea0:	40010c00 	.word	0x40010c00
 8003ea4:	10110000 	.word	0x10110000
 8003ea8:	40010800 	.word	0x40010800

08003eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8003eb0:	f001 fa34 	bl	800531c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eb4:	f000 f81d 	bl	8003ef2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eb8:	f7ff ff42 	bl	8003d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ebc:	f7fd ff54 	bl	8001d68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003ec0:	f001 f8a0 	bl	8005004 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003ec4:	f7fd fb90 	bl	80015e8 <MX_ADC1_Init>
  MX_DAC_Init();
 8003ec8:	f7fd fede 	bl	8001c88 <MX_DAC_Init>
  MX_UART5_Init();
 8003ecc:	f001 f846 	bl	8004f5c <MX_UART5_Init>
  MX_CAN_Init();
 8003ed0:	f7fd fc0e 	bl	80016f0 <MX_CAN_Init>
  MX_TIM3_Init();
 8003ed4:	f000 feb0 	bl	8004c38 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003ed8:	f001 f86a 	bl	8004fb0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003edc:	f000 fe3a 	bl	8004b54 <MX_TIM2_Init>
  MX_TIM4_Init();
 8003ee0:	f000 ff20 	bl	8004d24 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003ee4:	f006 f966 	bl	800a1b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003ee8:	f7fe f866 	bl	8001fb8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003eec:	f006 f994 	bl	800a218 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    //   uint8_t Rx_data[10];  //  creating a buffer of 10 bytes

  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <main+0x44>

08003ef2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b096      	sub	sp, #88	; 0x58
 8003ef6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003efc:	2228      	movs	r2, #40	; 0x28
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f016 fc23 	bl	801a74c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f06:	f107 031c 	add.w	r3, r7, #28
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f16:	1d3b      	adds	r3, r7, #4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
 8003f24:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003f30:	2300      	movs	r3, #0
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f34:	2301      	movs	r3, #1
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003f42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003f46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f003 fc27 	bl	80077a0 <HAL_RCC_OscConfig>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003f58:	f000 f828 	bl	8003fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f5c:	230f      	movs	r3, #15
 8003f5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f60:	2302      	movs	r3, #2
 8003f62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f64:	2300      	movs	r3, #0
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f72:	f107 031c 	add.w	r3, r7, #28
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f003 fe91 	bl	8007ca0 <HAL_RCC_ClockConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003f84:	f000 f812 	bl	8003fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	4618      	mov	r0, r3
 8003f96:	f004 f84d 	bl	8008034 <HAL_RCCEx_PeriphCLKConfig>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003fa0:	f000 f804 	bl	8003fac <Error_Handler>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3758      	adds	r7, #88	; 0x58
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb0:	b672      	cpsid	i
}
 8003fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <Error_Handler+0x8>
	...

08003fb8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <microros_allocate+0x3c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <microros_allocate+0x3c>)
 8003fd0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <microros_allocate+0x40>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4413      	add	r3, r2
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <microros_allocate+0x40>)
 8003fe0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fd fc0e 	bl	8001804 <pvPortMallocMicroROS>
 8003fe8:	4603      	mov	r3, r0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20003338 	.word	0x20003338
 8003ff8:	2000333c 	.word	0x2000333c

08003ffc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00c      	beq.n	8004026 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fd fd17 	bl	8001a40 <getBlockSize>
 8004012:	4603      	mov	r3, r0
 8004014:	4a06      	ldr	r2, [pc, #24]	; (8004030 <microros_deallocate+0x34>)
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	461a      	mov	r2, r3
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <microros_deallocate+0x34>)
 800401e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fd fcb3 	bl	800198c <vPortFreeMicroROS>
  }
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	2000333c 	.word	0x2000333c

08004034 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8004040:	4b15      	ldr	r3, [pc, #84]	; (8004098 <microros_reallocate+0x64>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4413      	add	r3, r2
 800404a:	461a      	mov	r2, r3
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <microros_reallocate+0x64>)
 800404e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <microros_reallocate+0x68>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	461a      	mov	r2, r3
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <microros_reallocate+0x68>)
 800405e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d104      	bne.n	8004070 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8004066:	68b8      	ldr	r0, [r7, #8]
 8004068:	f7fd fbcc 	bl	8001804 <pvPortMallocMicroROS>
 800406c:	4603      	mov	r3, r0
 800406e:	e00e      	b.n	800408e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7fd fce5 	bl	8001a40 <getBlockSize>
 8004076:	4603      	mov	r3, r0
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <microros_reallocate+0x68>)
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	461a      	mov	r2, r3
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <microros_reallocate+0x68>)
 8004082:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7fd fcf6 	bl	8001a78 <pvPortReallocMicroROS>
 800408c:	4603      	mov	r3, r0
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20003338 	.word	0x20003338
 800409c:	2000333c 	.word	0x2000333c

080040a0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	4a0c      	ldr	r2, [pc, #48]	; (80040e8 <microros_zero_allocate+0x48>)
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	4413      	add	r3, r2
 80040ba:	461a      	mov	r2, r3
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <microros_zero_allocate+0x48>)
 80040be:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	4a08      	ldr	r2, [pc, #32]	; (80040ec <microros_zero_allocate+0x4c>)
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	4413      	add	r3, r2
 80040ce:	461a      	mov	r2, r3
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <microros_zero_allocate+0x4c>)
 80040d2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f7fd fcf8 	bl	8001acc <pvPortCallocMicroROS>
 80040dc:	4603      	mov	r3, r0
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20003338 	.word	0x20003338
 80040ec:	2000333c 	.word	0x2000333c

080040f0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8004100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004104:	a320      	add	r3, pc, #128	; (adr r3, 8004188 <UTILS_NanosecondsToTimespec+0x98>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f7fd f8a1 	bl	8001250 <__aeabi_ldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8004118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800411c:	a31a      	add	r3, pc, #104	; (adr r3, 8004188 <UTILS_NanosecondsToTimespec+0x98>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fd f895 	bl	8001250 <__aeabi_ldivmod>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	da1f      	bge.n	8004172 <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <UTILS_NanosecondsToTimespec+0x90>)
 8004138:	fb82 1203 	smull	r1, r2, r2, r3
 800413c:	1712      	asrs	r2, r2, #28
 800413e:	17db      	asrs	r3, r3, #31
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	e9d3 0100 	ldrd	r0, r1, [r3]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	461a      	mov	r2, r3
 8004150:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004154:	1a84      	subs	r4, r0, r2
 8004156:	eb61 0503 	sbc.w	r5, r1, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4907      	ldr	r1, [pc, #28]	; (8004184 <UTILS_NanosecondsToTimespec+0x94>)
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	609a      	str	r2, [r3, #8]
    }
}
 8004172:	bf00      	nop
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bdb0      	pop	{r4, r5, r7, pc}
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	44b82fa1 	.word	0x44b82fa1
 8004184:	3b9aca00 	.word	0x3b9aca00
 8004188:	3b9aca00 	.word	0x3b9aca00
 800418c:	00000000 	.word	0x00000000

08004190 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8004190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 800419c:	f107 0308 	add.w	r3, r7, #8
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	4618      	mov	r0, r3
 80041b8:	f007 fcae 	bl	800bb18 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4618      	mov	r0, r3
 80041c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	0003      	movs	r3, r0
 80041ce:	2200      	movs	r2, #0
 80041d0:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041e0:	1884      	adds	r4, r0, r2
 80041e2:	eb41 0503 	adc.w	r5, r1, r3
 80041e6:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80041ea:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80041ee:	4622      	mov	r2, r4
 80041f0:	462b      	mov	r3, r5
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f04f 0100 	mov.w	r1, #0
 80041fa:	0159      	lsls	r1, r3, #5
 80041fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004200:	0150      	lsls	r0, r2, #5
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	1b12      	subs	r2, r2, r4
 8004208:	eb63 0305 	sbc.w	r3, r3, r5
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	f04f 0100 	mov.w	r1, #0
 8004214:	0259      	lsls	r1, r3, #9
 8004216:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800421a:	0250      	lsls	r0, r2, #9
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	1912      	adds	r2, r2, r4
 8004222:	eb45 0303 	adc.w	r3, r5, r3
 8004226:	f04f 0000 	mov.w	r0, #0
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	0199      	lsls	r1, r3, #6
 8004230:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8004234:	0190      	lsls	r0, r2, #6
 8004236:	1a80      	subs	r0, r0, r2
 8004238:	eb61 0103 	sbc.w	r1, r1, r3
 800423c:	eb10 0804 	adds.w	r8, r0, r4
 8004240:	eb41 0905 	adc.w	r9, r1, r5
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	4640      	mov	r0, r8
 8004248:	4649      	mov	r1, r9
 800424a:	f7ff ff51 	bl	80040f0 <UTILS_NanosecondsToTimespec>

    return 0;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800425c <stepperInit>:
#include "stepper.h"
#include "math.h"
#include "main.h"


void stepperInit(stepper_t* stepper){
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
	stepper->currentPos = 0;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
	stepper->targetPos = 0;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	605a      	str	r2, [r3, #4]
	stepper->speed = 0.0;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
	stepper->max_speed = 2000.0;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <stepperInit+0x7c>)
 800427c:	60da      	str	r2, [r3, #12]
	stepper->acceleration = 0.0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
	stepper->stepInverval = 0;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	615a      	str	r2, [r3, #20]
	stepper->n = 0;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	619a      	str	r2, [r3, #24]
	stepper->c0 = 0.0;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	61da      	str	r2, [r3, #28]
	stepper->cn = 0.0;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	621a      	str	r2, [r3, #32]
	stepper->cmin = 1.0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24
	//HAL_GPIO_WritePin(STEPPER_EN_GPIO_Port, STEPPER_EN_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80042aa:	2200      	movs	r2, #0
 80042ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042b0:	480a      	ldr	r0, [pc, #40]	; (80042dc <stepperInit+0x80>)
 80042b2:	f003 fa44 	bl	800773e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80042b6:	2200      	movs	r2, #0
 80042b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042bc:	4807      	ldr	r0, [pc, #28]	; (80042dc <stepperInit+0x80>)
 80042be:	f003 fa3e 	bl	800773e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80042c2:	2201      	movs	r2, #1
 80042c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042c8:	4804      	ldr	r0, [pc, #16]	; (80042dc <stepperInit+0x80>)
 80042ca:	f003 fa38 	bl	800773e <HAL_GPIO_WritePin>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	44fa0000 	.word	0x44fa0000
 80042dc:	40011000 	.word	0x40011000

080042e0 <stepperSetSpeed>:

void stepperSetSpeed(stepper_t* stepper, float speed){
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
	if (speed == stepper->speed) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	4619      	mov	r1, r3
 80042f0:	6838      	ldr	r0, [r7, #0]
 80042f2:	f7fc ff55 	bl	80011a0 <__aeabi_fcmpeq>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d153      	bne.n	80043a4 <stepperSetSpeed+0xc4>
		return;
	}
	if (speed < -stepper->max_speed){
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004304:	4619      	mov	r1, r3
 8004306:	6838      	ldr	r0, [r7, #0]
 8004308:	f7fc ff54 	bl	80011b4 <__aeabi_fcmplt>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <stepperSetSpeed+0x3e>
		speed = -stepper->max_speed;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	e00b      	b.n	8004336 <stepperSetSpeed+0x56>
	}
	else if (speed > stepper->max_speed) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4619      	mov	r1, r3
 8004324:	6838      	ldr	r0, [r7, #0]
 8004326:	f7fc ff63 	bl	80011f0 <__aeabi_fcmpgt>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <stepperSetSpeed+0x56>
		speed = stepper->max_speed;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	603b      	str	r3, [r7, #0]
	}

	if (speed == 0.0){
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	6838      	ldr	r0, [r7, #0]
 800433c:	f7fc ff30 	bl	80011a0 <__aeabi_fcmpeq>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <stepperSetSpeed+0x6e>
		stepper->stepInverval = 0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	615a      	str	r2, [r3, #20]
 800434c:	e026      	b.n	800439c <stepperSetSpeed+0xbc>
	}
	else {
		stepper->stepInverval = fabs(1000000.0/speed);
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	f7fc f8e4 	bl	800051c <__aeabi_f2d>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	a115      	add	r1, pc, #84	; (adr r1, 80043b0 <stepperSetSpeed+0xd0>)
 800435a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800435e:	f7fc fa5f 	bl	8000820 <__aeabi_ddiv>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4614      	mov	r4, r2
 8004368:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f7fc fbdc 	bl	8000b2c <__aeabi_d2iz>
 8004374:	4602      	mov	r2, r0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	615a      	str	r2, [r3, #20]
		stepper->direction = (speed>0.0)? DIRECTION_CW : DIRECTION_CCW;
 800437a:	2301      	movs	r3, #1
 800437c:	461c      	mov	r4, r3
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	6838      	ldr	r0, [r7, #0]
 8004384:	f7fc ff34 	bl	80011f0 <__aeabi_fcmpgt>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <stepperSetSpeed+0xb2>
 800438e:	2300      	movs	r3, #0
 8004390:	461c      	mov	r4, r3
 8004392:	b2e3      	uxtb	r3, r4
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}
	stepper->speed = speed;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	e000      	b.n	80043a6 <stepperSetSpeed+0xc6>
		return;
 80043a4:	bf00      	nop
}
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bdb0      	pop	{r4, r5, r7, pc}
 80043ac:	f3af 8000 	nop.w
 80043b0:	00000000 	.word	0x00000000
 80043b4:	412e8480 	.word	0x412e8480

080043b8 <stepperSetMaxSpeed>:
float stepperGetSpeed(stepper_t* stepper){
	return stepper->speed;
}


void stepperSetMaxSpeed(stepper_t* stepper, float speed){
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
	if (speed < 0.0){
 80043c2:	f04f 0100 	mov.w	r1, #0
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f7fc fef4 	bl	80011b4 <__aeabi_fcmplt>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <stepperSetMaxSpeed+0x22>
		speed = -speed;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043d8:	603b      	str	r3, [r7, #0]
	}
	if (stepper->max_speed != speed){
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4619      	mov	r1, r3
 80043e0:	6838      	ldr	r0, [r7, #0]
 80043e2:	f7fc fedd 	bl	80011a0 <__aeabi_fcmpeq>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d000      	beq.n	80043ee <stepperSetMaxSpeed+0x36>
			stepper->n = (long)((stepper->speed * stepper->speed)/ (2.0 * stepper->acceleration));
			stepperComputeNewSpeed(stepper);
		}
	}

}
 80043ec:	e037      	b.n	800445e <stepperSetMaxSpeed+0xa6>
		stepper->max_speed = speed;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	60da      	str	r2, [r3, #12]
		stepper->cmin = 1000000.0/speed;
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	481c      	ldr	r0, [pc, #112]	; (8004468 <stepperSetMaxSpeed+0xb0>)
 80043f8:	f7fc fdf2 	bl	8000fe0 <__aeabi_fdiv>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
		if (stepper->n > 0){
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	dd28      	ble.n	800445e <stepperSetMaxSpeed+0xa6>
			stepper->n = (long)((stepper->speed * stepper->speed)/ (2.0 * stepper->acceleration));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4619      	mov	r1, r3
 8004416:	4610      	mov	r0, r2
 8004418:	f7fc fd2e 	bl	8000e78 <__aeabi_fmul>
 800441c:	4603      	mov	r3, r0
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f87c 	bl	800051c <__aeabi_f2d>
 8004424:	4604      	mov	r4, r0
 8004426:	460d      	mov	r5, r1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc f875 	bl	800051c <__aeabi_f2d>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	f7fb ff13 	bl	8000260 <__adddf3>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fc f9ed 	bl	8000820 <__aeabi_ddiv>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f7fc fb6d 	bl	8000b2c <__aeabi_d2iz>
 8004452:	4602      	mov	r2, r0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	619a      	str	r2, [r3, #24]
			stepperComputeNewSpeed(stepper);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f89d 	bl	8004598 <stepperComputeNewSpeed>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bdb0      	pop	{r4, r5, r7, pc}
 8004466:	bf00      	nop
 8004468:	49742400 	.word	0x49742400
 800446c:	00000000 	.word	0x00000000

08004470 <stepperSetAcceleration>:

float stepperGetMaxSpeed(stepper_t* stepper){
	return stepper->max_speed;
}

void stepperSetAcceleration(stepper_t* stepper, float acceleration){
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	if (acceleration == 0.0)
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	6838      	ldr	r0, [r7, #0]
 8004480:	f7fc fe8e 	bl	80011a0 <__aeabi_fcmpeq>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d15b      	bne.n	8004542 <stepperSetAcceleration+0xd2>
		return;
	if (acceleration < 0.0){
 800448a:	f04f 0100 	mov.w	r1, #0
 800448e:	6838      	ldr	r0, [r7, #0]
 8004490:	f7fc fe90 	bl	80011b4 <__aeabi_fcmplt>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <stepperSetAcceleration+0x32>
		acceleration = - acceleration;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044a0:	603b      	str	r3, [r7, #0]
	}
	if (stepper->acceleration != acceleration){
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4619      	mov	r1, r3
 80044a8:	6838      	ldr	r0, [r7, #0]
 80044aa:	f7fc fe79 	bl	80011a0 <__aeabi_fcmpeq>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d147      	bne.n	8004544 <stepperSetAcceleration+0xd4>
		stepper->n = stepper->n * (stepper->acceleration/acceleration);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fc89 	bl	8000dd0 <__aeabi_i2f>
 80044be:	4604      	mov	r4, r0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fc fd8a 	bl	8000fe0 <__aeabi_fdiv>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4619      	mov	r1, r3
 80044d0:	4620      	mov	r0, r4
 80044d2:	f7fc fcd1 	bl	8000e78 <__aeabi_fmul>
 80044d6:	4603      	mov	r3, r0
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc fe93 	bl	8001204 <__aeabi_f2iz>
 80044de:	4602      	mov	r2, r0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	619a      	str	r2, [r3, #24]
		stepper->c0 = 0.676* sqrt(2.0 / acceleration) * 1000000.0;
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	f7fc f819 	bl	800051c <__aeabi_f2d>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	f04f 0000 	mov.w	r0, #0
 80044f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044f6:	f7fc f993 	bl	8000820 <__aeabi_ddiv>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	f017 fcb1 	bl	801be68 <sqrt>
 8004506:	a312      	add	r3, pc, #72	; (adr r3, 8004550 <stepperSetAcceleration+0xe0>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fc f85e 	bl	80005cc <__aeabi_dmul>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4610      	mov	r0, r2
 8004516:	4619      	mov	r1, r3
 8004518:	a30f      	add	r3, pc, #60	; (adr r3, 8004558 <stepperSetAcceleration+0xe8>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fc f855 	bl	80005cc <__aeabi_dmul>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f7fc fb47 	bl	8000bbc <__aeabi_d2f>
 800452e:	4602      	mov	r2, r0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	61da      	str	r2, [r3, #28]
		stepper->acceleration = acceleration;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	611a      	str	r2, [r3, #16]
		stepperComputeNewSpeed(stepper);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f82c 	bl	8004598 <stepperComputeNewSpeed>
 8004540:	e000      	b.n	8004544 <stepperSetAcceleration+0xd4>
		return;
 8004542:	bf00      	nop
	}

}
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bd90      	pop	{r4, r7, pc}
 800454a:	bf00      	nop
 800454c:	f3af 8000 	nop.w
 8004550:	c083126f 	.word	0xc083126f
 8004554:	3fe5a1ca 	.word	0x3fe5a1ca
 8004558:	00000000 	.word	0x00000000
 800455c:	412e8480 	.word	0x412e8480

08004560 <stepperGetDistanceToGo>:

long stepperGetDistanceToGo(stepper_t* stepper){
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	return stepper->targetPos - stepper->currentPos;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	1ad3      	subs	r3, r2, r3
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <stepperSetAbsoluteTartePosition>:

long stepperGetTargetPosition(stepper_t* stepper){
	return stepper->targetPos;
}

void stepperSetAbsoluteTartePosition(stepper_t* stepper, long absolutePosition){
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
	stepper->targetPos = absolutePosition;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	605a      	str	r2, [r3, #4]
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
	...

08004598 <stepperComputeNewSpeed>:

void stepperSetRelativeTargetPosition(stepper_t* stepper, long relativePosition){
	stepper->targetPos = stepperGetTargetPosition(stepper) + relativePosition;
}

void stepperComputeNewSpeed(stepper_t* stepper){
 8004598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
	long distanceTo = stepperGetDistanceToGo(stepper);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ffdc 	bl	8004560 <stepperGetDistanceToGo>
 80045a8:	60f8      	str	r0, [r7, #12]
	long stepsToStop = (long)((stepper->speed * stepper->speed) / (2.0 * stepper->acceleration));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7fc fc5f 	bl	8000e78 <__aeabi_fmul>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ffad 	bl	800051c <__aeabi_f2d>
 80045c2:	4604      	mov	r4, r0
 80045c4:	460d      	mov	r5, r1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fb ffa6 	bl	800051c <__aeabi_f2d>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	f7fb fe44 	bl	8000260 <__adddf3>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4620      	mov	r0, r4
 80045de:	4629      	mov	r1, r5
 80045e0:	f7fc f91e 	bl	8000820 <__aeabi_ddiv>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f7fc fa9e 	bl	8000b2c <__aeabi_d2iz>
 80045f0:	4603      	mov	r3, r0
 80045f2:	60bb      	str	r3, [r7, #8]

	if (distanceTo == 0 && stepsToStop <=1)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <stepperComputeNewSpeed+0x7e>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	dc0a      	bgt.n	8004616 <stepperComputeNewSpeed+0x7e>
	{
		stepper->stepInverval = 0;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	615a      	str	r2, [r3, #20]
		stepper->speed = 0.0;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
		stepper->n = 0;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	619a      	str	r2, [r3, #24]
		return;
 8004614:	e0d5      	b.n	80047c2 <stepperComputeNewSpeed+0x22a>
	}
	if (distanceTo > 0) {
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	dd24      	ble.n	8004666 <stepperComputeNewSpeed+0xce>
		if (stepper->n > 0){
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dd0d      	ble.n	8004640 <stepperComputeNewSpeed+0xa8>
			if ((stepsToStop >= distanceTo) || (stepper->direction == DIRECTION_CCW)){
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	da04      	bge.n	8004636 <stepperComputeNewSpeed+0x9e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d140      	bne.n	80046b8 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	425a      	negs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	619a      	str	r2, [r3, #24]
 800463e:	e03b      	b.n	80046b8 <stepperComputeNewSpeed+0x120>
			}

		}
		else if (stepper->n < 0 ){
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	2b00      	cmp	r3, #0
 8004646:	da37      	bge.n	80046b8 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < distanceTo) && stepper->direction == DIRECTION_CW){
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	429a      	cmp	r2, r3
 800464e:	da33      	bge.n	80046b8 <stepperComputeNewSpeed+0x120>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004656:	2b01      	cmp	r3, #1
 8004658:	d12e      	bne.n	80046b8 <stepperComputeNewSpeed+0x120>
				stepper->n = - stepper->n;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	425a      	negs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	619a      	str	r2, [r3, #24]
 8004664:	e028      	b.n	80046b8 <stepperComputeNewSpeed+0x120>
			}
		}
	}
	else if (distanceTo < 0) {
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	da25      	bge.n	80046b8 <stepperComputeNewSpeed+0x120>
		if (stepper->n > 0){
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	dd0e      	ble.n	8004692 <stepperComputeNewSpeed+0xfa>
			if ((stepsToStop >= -distanceTo) || stepper->direction == DIRECTION_CW){
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	425b      	negs	r3, r3
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	da04      	bge.n	8004688 <stepperComputeNewSpeed+0xf0>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004684:	2b01      	cmp	r3, #1
 8004686:	d117      	bne.n	80046b8 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepsToStop;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	425a      	negs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	619a      	str	r2, [r3, #24]
 8004690:	e012      	b.n	80046b8 <stepperComputeNewSpeed+0x120>
			}
		}
		else if (stepper->n < 0){
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b00      	cmp	r3, #0
 8004698:	da0e      	bge.n	80046b8 <stepperComputeNewSpeed+0x120>
			if ((stepsToStop < - distanceTo) && stepper->direction == DIRECTION_CCW){
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	425b      	negs	r3, r3
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	da09      	bge.n	80046b8 <stepperComputeNewSpeed+0x120>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d104      	bne.n	80046b8 <stepperComputeNewSpeed+0x120>
				stepper->n = -stepper->n;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	425a      	negs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	619a      	str	r2, [r3, #24]
			}
		}
	}
	if (stepper->n == 0){
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10e      	bne.n	80046de <stepperComputeNewSpeed+0x146>
		stepper->cn = stepper->c0;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	621a      	str	r2, [r3, #32]
		stepper->direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfcc      	ite	gt
 80046ce:	2301      	movgt	r3, #1
 80046d0:	2300      	movle	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80046dc:	e04f      	b.n	800477e <stepperComputeNewSpeed+0x1e6>
	}
	else {
		stepper->cn = stepper->cn - ((2.0 * stepper->cn)/((4.0* stepper->n)+1));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb ff1a 	bl	800051c <__aeabi_f2d>
 80046e8:	4604      	mov	r4, r0
 80046ea:	460d      	mov	r5, r1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fb ff13 	bl	800051c <__aeabi_f2d>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	f7fb fdb1 	bl	8000260 <__adddf3>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4690      	mov	r8, r2
 8004704:	4699      	mov	r9, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fb fef4 	bl	80004f8 <__aeabi_i2d>
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <stepperComputeNewSpeed+0x234>)
 8004716:	f7fb ff59 	bl	80005cc <__aeabi_dmul>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <stepperComputeNewSpeed+0x238>)
 8004728:	f7fb fd9a 	bl	8000260 <__adddf3>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4640      	mov	r0, r8
 8004732:	4649      	mov	r1, r9
 8004734:	f7fc f874 	bl	8000820 <__aeabi_ddiv>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fd8c 	bl	800025c <__aeabi_dsub>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4610      	mov	r0, r2
 800474a:	4619      	mov	r1, r3
 800474c:	f7fc fa36 	bl	8000bbc <__aeabi_d2f>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]
		if (stepper->cn > stepper->cmin){
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1a      	ldr	r2, [r3, #32]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7fc fd45 	bl	80011f0 <__aeabi_fcmpgt>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <stepperComputeNewSpeed+0x1de>
			stepper->cn = stepper->cn;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	621a      	str	r2, [r3, #32]
 8004774:	e003      	b.n	800477e <stepperComputeNewSpeed+0x1e6>
		}
		else {
			stepper->cn = stepper->cmin;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	621a      	str	r2, [r3, #32]
		}

	}
	stepper->n++;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	619a      	str	r2, [r3, #24]
	stepper->stepInverval = stepper->cn;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4618      	mov	r0, r3
 800478e:	f7fc fd39 	bl	8001204 <__aeabi_f2iz>
 8004792:	4602      	mov	r2, r0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	615a      	str	r2, [r3, #20]
	stepper->speed = 1000000.0/stepper->cn;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4619      	mov	r1, r3
 800479e:	480d      	ldr	r0, [pc, #52]	; (80047d4 <stepperComputeNewSpeed+0x23c>)
 80047a0:	f7fc fc1e 	bl	8000fe0 <__aeabi_fdiv>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	609a      	str	r2, [r3, #8]
	if (stepper->direction == DIRECTION_CCW){
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d105      	bne.n	80047c2 <stepperComputeNewSpeed+0x22a>
		stepper->speed = -stepper->speed;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	609a      	str	r2, [r3, #8]
	}
}
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047ca:	bf00      	nop
 80047cc:	40100000 	.word	0x40100000
 80047d0:	3ff00000 	.word	0x3ff00000
 80047d4:	49742400 	.word	0x49742400

080047d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80047de:	4b18      	ldr	r3, [pc, #96]	; (8004840 <HAL_MspInit+0x68>)
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_MspInit+0x68>)
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	6193      	str	r3, [r2, #24]
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_MspInit+0x68>)
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_MspInit+0x68>)
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_MspInit+0x68>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	61d3      	str	r3, [r2, #28]
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <HAL_MspInit+0x68>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	210f      	movs	r1, #15
 8004812:	f06f 0001 	mvn.w	r0, #1
 8004816:	f002 f856 	bl	80068c6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <HAL_MspInit+0x6c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HAL_MspInit+0x6c>)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	40021000 	.word	0x40021000
 8004844:	40010000 	.word	0x40010000

08004848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8004858:	2200      	movs	r2, #0
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	2019      	movs	r0, #25
 800485e:	f002 f832 	bl	80068c6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004862:	2019      	movs	r0, #25
 8004864:	f002 f84b 	bl	80068fe <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <HAL_InitTick+0x9c>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_InitTick+0x9c>)
 800486e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004872:	6193      	str	r3, [r2, #24]
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_InitTick+0x9c>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004880:	f107 0210 	add.w	r2, r7, #16
 8004884:	f107 0314 	add.w	r3, r7, #20
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f003 fb84 	bl	8007f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004890:	f003 fb6e 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 8004894:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	4a13      	ldr	r2, [pc, #76]	; (80048e8 <HAL_InitTick+0xa0>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0c9b      	lsrs	r3, r3, #18
 80048a0:	3b01      	subs	r3, #1
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80048a4:	4b11      	ldr	r3, [pc, #68]	; (80048ec <HAL_InitTick+0xa4>)
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <HAL_InitTick+0xa8>)
 80048a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <HAL_InitTick+0xa4>)
 80048ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80048b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80048b2:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <HAL_InitTick+0xa4>)
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_InitTick+0xa4>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_InitTick+0xa4>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80048c4:	4809      	ldr	r0, [pc, #36]	; (80048ec <HAL_InitTick+0xa4>)
 80048c6:	f003 fd51 	bl	800836c <HAL_TIM_Base_Init>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80048d0:	4806      	ldr	r0, [pc, #24]	; (80048ec <HAL_InitTick+0xa4>)
 80048d2:	f003 fd9b 	bl	800840c <HAL_TIM_Base_Start_IT>
 80048d6:	4603      	mov	r3, r0
 80048d8:	e000      	b.n	80048dc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3730      	adds	r7, #48	; 0x30
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	431bde83 	.word	0x431bde83
 80048ec:	20008bec 	.word	0x20008bec
 80048f0:	40012c00 	.word	0x40012c00

080048f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048f8:	e7fe      	b.n	80048f8 <NMI_Handler+0x4>

080048fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048fa:	b480      	push	{r7}
 80048fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048fe:	e7fe      	b.n	80048fe <HardFault_Handler+0x4>

08004900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004904:	e7fe      	b.n	8004904 <MemManage_Handler+0x4>

08004906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004906:	b480      	push	{r7}
 8004908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800490a:	e7fe      	b.n	800490a <BusFault_Handler+0x4>

0800490c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004910:	e7fe      	b.n	8004910 <UsageFault_Handler+0x4>

08004912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004922:	2001      	movs	r0, #1
 8004924:	f002 ff24 	bl	8007770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004928:	bf00      	nop
 800492a:	bd80      	pop	{r7, pc}

0800492c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004930:	4802      	ldr	r0, [pc, #8]	; (800493c <DMA1_Channel6_IRQHandler+0x10>)
 8004932:	f002 faef 	bl	8006f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004936:	bf00      	nop
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20008d0c 	.word	0x20008d0c

08004940 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004944:	4802      	ldr	r0, [pc, #8]	; (8004950 <DMA1_Channel7_IRQHandler+0x10>)
 8004946:	f002 fae5 	bl	8006f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20008d94 	.word	0x20008d94

08004954 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004958:	4802      	ldr	r0, [pc, #8]	; (8004964 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800495a:	f001 fcdc 	bl	8006316 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20006994 	.word	0x20006994

08004968 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800496c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004970:	f002 fefe 	bl	8007770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004974:	bf00      	nop
 8004976:	bd80      	pop	{r7, pc}

08004978 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <TIM1_UP_IRQHandler+0x10>)
 800497e:	f003 ff55 	bl	800882c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20008bec 	.word	0x20008bec

0800498c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004990:	4802      	ldr	r0, [pc, #8]	; (800499c <TIM2_IRQHandler+0x10>)
 8004992:	f003 ff4b 	bl	800882c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20008cc4 	.word	0x20008cc4

080049a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80049a4:	4802      	ldr	r0, [pc, #8]	; (80049b0 <TIM3_IRQHandler+0x10>)
 80049a6:	f003 ff41 	bl	800882c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20008c7c 	.word	0x20008c7c

080049b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049b8:	4802      	ldr	r0, [pc, #8]	; (80049c4 <USART2_IRQHandler+0x10>)
 80049ba:	f004 fed9 	bl	8009770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20008e1c 	.word	0x20008e1c

080049c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
	return 1;
 80049cc:	2301      	movs	r3, #1
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <_kill>:

int _kill(int pid, int sig)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049e0:	f015 fe0c 	bl	801a5fc <__errno>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2216      	movs	r2, #22
 80049e8:	601a      	str	r2, [r3, #0]
	return -1;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <_exit>:

void _exit (int status)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80049fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffe7 	bl	80049d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a08:	e7fe      	b.n	8004a08 <_exit+0x12>

08004a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
 8004a1a:	e00a      	b.n	8004a32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a1c:	f3af 8000 	nop.w
 8004a20:	4601      	mov	r1, r0
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	60ba      	str	r2, [r7, #8]
 8004a28:	b2ca      	uxtb	r2, r1
 8004a2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	dbf0      	blt.n	8004a1c <_read+0x12>
	}

return len;
 8004a3a:	687b      	ldr	r3, [r7, #4]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e009      	b.n	8004a6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	60ba      	str	r2, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3301      	adds	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	dbf1      	blt.n	8004a56 <_write+0x12>
	}
	return len;
 8004a72:	687b      	ldr	r3, [r7, #4]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <_sbrk>:

caddr_t _sbrk(int incr) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <_sbrk+0x5c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <_sbrk+0x16>
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <_sbrk+0x5c>)
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <_sbrk+0x60>)
 8004a90:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <_sbrk+0x5c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <_sbrk+0x5c>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	441a      	add	r2, r3
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <_sbrk+0x64>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	490f      	ldr	r1, [pc, #60]	; (8004ae4 <_sbrk+0x68>)
 8004aa8:	440b      	add	r3, r1
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d908      	bls.n	8004ac0 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8004aae:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8004ab0:	f015 fda4 	bl	801a5fc <__errno>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	220c      	movs	r2, #12
 8004ab8:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004abe:	e006      	b.n	8004ace <_sbrk+0x52>

    }

    heap_end += incr;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <_sbrk+0x5c>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <_sbrk+0x5c>)
 8004aca:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8004acc:	68fb      	ldr	r3, [r7, #12]

}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20003344 	.word	0x20003344
 8004adc:	2000e058 	.word	0x2000e058
 8004ae0:	00000400 	.word	0x00000400
 8004ae4:	20010000 	.word	0x20010000

08004ae8 <_close>:

int _close(int file)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	return -1;
 8004af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <_isatty>:

int _isatty(int file)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	return 1;
 8004b24:	2301      	movs	r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	return 0;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b68:	f107 0320 	add.w	r3, r7, #32
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
 8004b7e:	611a      	str	r2, [r3, #16]
 8004b80:	615a      	str	r2, [r3, #20]
 8004b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600;
 8004b8c:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004b8e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004b9c:	2264      	movs	r2, #100	; 0x64
 8004b9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba0:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba6:	4b23      	ldr	r3, [pc, #140]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bac:	4821      	ldr	r0, [pc, #132]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004bae:	f003 fbdd 	bl	800836c <HAL_TIM_Base_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004bb8:	f7ff f9f8 	bl	8003fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	481a      	ldr	r0, [pc, #104]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004bca:	f004 f84d 	bl	8008c68 <HAL_TIM_ConfigClockSource>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004bd4:	f7ff f9ea 	bl	8003fac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8004bd8:	4816      	ldr	r0, [pc, #88]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004bda:	f003 fc77 	bl	80084cc <HAL_TIM_OC_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004be4:	f7ff f9e2 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004be8:	2300      	movs	r3, #0
 8004bea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bf0:	f107 0320 	add.w	r3, r7, #32
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	480f      	ldr	r0, [pc, #60]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004bf8:	f004 fbf6 	bl	80093e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004c02:	f7ff f9d3 	bl	8003fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4805      	ldr	r0, [pc, #20]	; (8004c34 <MX_TIM2_Init+0xe0>)
 8004c1e:	f003 ff0d 	bl	8008a3c <HAL_TIM_OC_ConfigChannel>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004c28:	f7ff f9c0 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c2c:	bf00      	nop
 8004c2e:	3738      	adds	r7, #56	; 0x38
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20008cc4 	.word	0x20008cc4

08004c38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c4c:	f107 0320 	add.w	r3, r7, #32
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
 8004c64:	615a      	str	r2, [r3, #20]
 8004c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c68:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c6a:	4a2d      	ldr	r2, [pc, #180]	; (8004d20 <MX_TIM3_Init+0xe8>)
 8004c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c70:	2224      	movs	r2, #36	; 0x24
 8004c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c74:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8004c7a:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c88:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c8e:	4823      	ldr	r0, [pc, #140]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004c90:	f003 fb6c 	bl	800836c <HAL_TIM_Base_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004c9a:	f7ff f987 	bl	8003fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ca8:	4619      	mov	r1, r3
 8004caa:	481c      	ldr	r0, [pc, #112]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004cac:	f003 ffdc 	bl	8008c68 <HAL_TIM_ConfigClockSource>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004cb6:	f7ff f979 	bl	8003fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004cba:	4818      	ldr	r0, [pc, #96]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004cbc:	f003 fc5e 	bl	800857c <HAL_TIM_PWM_Init>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004cc6:	f7ff f971 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cd2:	f107 0320 	add.w	r3, r7, #32
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4810      	ldr	r0, [pc, #64]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004cda:	f004 fb85 	bl	80093e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004ce4:	f7ff f962 	bl	8003fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ce8:	2360      	movs	r3, #96	; 0x60
 8004cea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 8004cec:	23fa      	movs	r3, #250	; 0xfa
 8004cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4807      	ldr	r0, [pc, #28]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004d00:	f003 fef4 	bl	8008aec <HAL_TIM_PWM_ConfigChannel>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004d0a:	f7ff f94f 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d0e:	4803      	ldr	r0, [pc, #12]	; (8004d1c <MX_TIM3_Init+0xe4>)
 8004d10:	f000 f8de 	bl	8004ed0 <HAL_TIM_MspPostInit>

}
 8004d14:	bf00      	nop
 8004d16:	3738      	adds	r7, #56	; 0x38
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20008c7c 	.word	0x20008c7c
 8004d20:	40000400 	.word	0x40000400

08004d24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d2a:	f107 0308 	add.w	r3, r7, #8
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	609a      	str	r2, [r3, #8]
 8004d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d38:	463b      	mov	r3, r7
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <MX_TIM4_Init+0x98>)
 8004d44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004d52:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d5a:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d60:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d66:	4814      	ldr	r0, [pc, #80]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d68:	f003 fb00 	bl	800836c <HAL_TIM_Base_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004d72:	f7ff f91b 	bl	8003fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	4619      	mov	r1, r3
 8004d82:	480d      	ldr	r0, [pc, #52]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004d84:	f003 ff70 	bl	8008c68 <HAL_TIM_ConfigClockSource>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004d8e:	f7ff f90d 	bl	8003fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d92:	2300      	movs	r3, #0
 8004d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4806      	ldr	r0, [pc, #24]	; (8004db8 <MX_TIM4_Init+0x94>)
 8004da0:	f004 fb22 	bl	80093e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004daa:	f7ff f8ff 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004dae:	bf00      	nop
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20008c34 	.word	0x20008c34
 8004dbc:	40000800 	.word	0x40000800

08004dc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc8:	f107 031c 	add.w	r3, r7, #28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d114      	bne.n	8004e0a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	61d3      	str	r3, [r2, #28]
 8004dec:	4b33      	ldr	r3, [pc, #204]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	69bb      	ldr	r3, [r7, #24]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2105      	movs	r1, #5
 8004dfc:	201c      	movs	r0, #28
 8004dfe:	f001 fd62 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e02:	201c      	movs	r0, #28
 8004e04:	f001 fd7b 	bl	80068fe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004e08:	e054      	b.n	8004eb4 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <HAL_TIM_Base_MspInit+0x100>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d13e      	bne.n	8004e92 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e1a:	f043 0302 	orr.w	r3, r3, #2
 8004e1e:	61d3      	str	r3, [r2, #28]
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2c:	4b23      	ldr	r3, [pc, #140]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	4a22      	ldr	r2, [pc, #136]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	6193      	str	r3, [r2, #24]
 8004e38:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e44:	2320      	movs	r3, #32
 8004e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e50:	f107 031c 	add.w	r3, r7, #28
 8004e54:	4619      	mov	r1, r3
 8004e56:	481b      	ldr	r0, [pc, #108]	; (8004ec4 <HAL_TIM_Base_MspInit+0x104>)
 8004e58:	f002 fac6 	bl	80073e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004e5c:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <HAL_TIM_Base_MspInit+0x108>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e7a:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <HAL_TIM_Base_MspInit+0x108>)
 8004e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004e80:	2200      	movs	r2, #0
 8004e82:	2105      	movs	r1, #5
 8004e84:	201d      	movs	r0, #29
 8004e86:	f001 fd1e 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004e8a:	201d      	movs	r0, #29
 8004e8c:	f001 fd37 	bl	80068fe <HAL_NVIC_EnableIRQ>
}
 8004e90:	e010      	b.n	8004eb4 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM4)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <HAL_TIM_Base_MspInit+0x10c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	61d3      	str	r3, [r2, #28]
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_TIM_Base_MspInit+0xfc>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
}
 8004eb4:	bf00      	nop
 8004eb6:	3730      	adds	r7, #48	; 0x30
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40010c00 	.word	0x40010c00
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000800 	.word	0x40000800

08004ed0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ed8:	f107 030c 	add.w	r3, r7, #12
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <HAL_TIM_MspPostInit+0x7c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d129      	bne.n	8004f44 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ef0:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <HAL_TIM_MspPostInit+0x80>)
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <HAL_TIM_MspPostInit+0x80>)
 8004ef6:	f043 0308 	orr.w	r3, r3, #8
 8004efa:	6193      	str	r3, [r2, #24]
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <HAL_TIM_MspPostInit+0x80>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f08:	2310      	movs	r3, #16
 8004f0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f10:	2302      	movs	r3, #2
 8004f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f14:	f107 030c 	add.w	r3, r7, #12
 8004f18:	4619      	mov	r1, r3
 8004f1a:	480e      	ldr	r0, [pc, #56]	; (8004f54 <HAL_TIM_MspPostInit+0x84>)
 8004f1c:	f002 fa64 	bl	80073e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_TIM_MspPostInit+0x88>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	4a06      	ldr	r2, [pc, #24]	; (8004f58 <HAL_TIM_MspPostInit+0x88>)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004f44:	bf00      	nop
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40010c00 	.word	0x40010c00
 8004f58:	40010000 	.word	0x40010000

08004f5c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f62:	4a12      	ldr	r2, [pc, #72]	; (8004fac <MX_UART5_Init+0x50>)
 8004f64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004f74:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f82:	220c      	movs	r2, #12
 8004f84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f86:	4b08      	ldr	r3, [pc, #32]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004f92:	4805      	ldr	r0, [pc, #20]	; (8004fa8 <MX_UART5_Init+0x4c>)
 8004f94:	f004 faa6 	bl	80094e4 <HAL_UART_Init>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8004f9e:	f7ff f805 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20008d50 	.word	0x20008d50
 8004fac:	40005000 	.word	0x40005000

08004fb0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fb6:	4a12      	ldr	r2, [pc, #72]	; (8005000 <MX_USART1_UART_Init+0x50>)
 8004fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fd6:	220c      	movs	r2, #12
 8004fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fe6:	4805      	ldr	r0, [pc, #20]	; (8004ffc <MX_USART1_UART_Init+0x4c>)
 8004fe8:	f004 fa7c 	bl	80094e4 <HAL_UART_Init>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004ff2:	f7fe ffdb 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20008dd8 	.word	0x20008dd8
 8005000:	40013800 	.word	0x40013800

08005004 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005008:	4b11      	ldr	r3, [pc, #68]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <MX_USART2_UART_Init+0x50>)
 800500c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 8005010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005014:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005016:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 800501e:	2200      	movs	r2, #0
 8005020:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005022:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005028:	4b09      	ldr	r3, [pc, #36]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 800502a:	220c      	movs	r2, #12
 800502c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 8005030:	2200      	movs	r2, #0
 8005032:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 8005036:	2200      	movs	r2, #0
 8005038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800503a:	4805      	ldr	r0, [pc, #20]	; (8005050 <MX_USART2_UART_Init+0x4c>)
 800503c:	f004 fa52 	bl	80094e4 <HAL_UART_Init>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005046:	f7fe ffb1 	bl	8003fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20008e1c 	.word	0x20008e1c
 8005054:	40004400 	.word	0x40004400

08005058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08e      	sub	sp, #56	; 0x38
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a8a      	ldr	r2, [pc, #552]	; (800529c <HAL_UART_MspInit+0x244>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d13d      	bne.n	80050f4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005078:	4b89      	ldr	r3, [pc, #548]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	4a88      	ldr	r2, [pc, #544]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800507e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005082:	61d3      	str	r3, [r2, #28]
 8005084:	4b86      	ldr	r3, [pc, #536]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005090:	4b83      	ldr	r3, [pc, #524]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	4a82      	ldr	r2, [pc, #520]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005096:	f043 0310 	orr.w	r3, r3, #16
 800509a:	6193      	str	r3, [r2, #24]
 800509c:	4b80      	ldr	r3, [pc, #512]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050a8:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_UART_MspInit+0x248>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_UART_MspInit+0x248>)
 80050ae:	f043 0320 	orr.w	r3, r3, #32
 80050b2:	6193      	str	r3, [r2, #24]
 80050b4:	4b7a      	ldr	r3, [pc, #488]	; (80052a0 <HAL_UART_MspInit+0x248>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80050c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c6:	2302      	movs	r3, #2
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ca:	2303      	movs	r3, #3
 80050cc:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d2:	4619      	mov	r1, r3
 80050d4:	4873      	ldr	r0, [pc, #460]	; (80052a4 <HAL_UART_MspInit+0x24c>)
 80050d6:	f002 f987 	bl	80073e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050da:	2304      	movs	r3, #4
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050de:	2300      	movs	r3, #0
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ea:	4619      	mov	r1, r3
 80050ec:	486e      	ldr	r0, [pc, #440]	; (80052a8 <HAL_UART_MspInit+0x250>)
 80050ee:	f002 f97b 	bl	80073e8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80050f2:	e0cf      	b.n	8005294 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6c      	ldr	r2, [pc, #432]	; (80052ac <HAL_UART_MspInit+0x254>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d13e      	bne.n	800517c <HAL_UART_MspInit+0x124>
    __HAL_RCC_USART1_CLK_ENABLE();
 80050fe:	4b68      	ldr	r3, [pc, #416]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	4a67      	ldr	r2, [pc, #412]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005108:	6193      	str	r3, [r2, #24]
 800510a:	4b65      	ldr	r3, [pc, #404]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005116:	4b62      	ldr	r3, [pc, #392]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	4a61      	ldr	r2, [pc, #388]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800511c:	f043 0308 	orr.w	r3, r3, #8
 8005120:	6193      	str	r3, [r2, #24]
 8005122:	4b5f      	ldr	r3, [pc, #380]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800512e:	2340      	movs	r3, #64	; 0x40
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005132:	2302      	movs	r3, #2
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005136:	2303      	movs	r3, #3
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800513e:	4619      	mov	r1, r3
 8005140:	485b      	ldr	r0, [pc, #364]	; (80052b0 <HAL_UART_MspInit+0x258>)
 8005142:	f002 f951 	bl	80073e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800514a:	2300      	movs	r3, #0
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005156:	4619      	mov	r1, r3
 8005158:	4855      	ldr	r0, [pc, #340]	; (80052b0 <HAL_UART_MspInit+0x258>)
 800515a:	f002 f945 	bl	80073e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 800515e:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <HAL_UART_MspInit+0x25c>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005166:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
 800516c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516e:	f043 0304 	orr.w	r3, r3, #4
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
 8005174:	4a4f      	ldr	r2, [pc, #316]	; (80052b4 <HAL_UART_MspInit+0x25c>)
 8005176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005178:	6053      	str	r3, [r2, #4]
}
 800517a:	e08b      	b.n	8005294 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a4d      	ldr	r2, [pc, #308]	; (80052b8 <HAL_UART_MspInit+0x260>)
 8005182:	4293      	cmp	r3, r2
 8005184:	f040 8086 	bne.w	8005294 <HAL_UART_MspInit+0x23c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005188:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4a44      	ldr	r2, [pc, #272]	; (80052a0 <HAL_UART_MspInit+0x248>)
 800518e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005192:	61d3      	str	r3, [r2, #28]
 8005194:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <HAL_UART_MspInit+0x248>)
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a0:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <HAL_UART_MspInit+0x248>)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	4a3e      	ldr	r2, [pc, #248]	; (80052a0 <HAL_UART_MspInit+0x248>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6193      	str	r3, [r2, #24]
 80051ac:	4b3c      	ldr	r3, [pc, #240]	; (80052a0 <HAL_UART_MspInit+0x248>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051b8:	2304      	movs	r3, #4
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051bc:	2302      	movs	r3, #2
 80051be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051c0:	2303      	movs	r3, #3
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051c8:	4619      	mov	r1, r3
 80051ca:	483c      	ldr	r0, [pc, #240]	; (80052bc <HAL_UART_MspInit+0x264>)
 80051cc:	f002 f90c 	bl	80073e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80051d0:	2308      	movs	r3, #8
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d8:	2300      	movs	r3, #0
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e0:	4619      	mov	r1, r3
 80051e2:	4836      	ldr	r0, [pc, #216]	; (80052bc <HAL_UART_MspInit+0x264>)
 80051e4:	f002 f900 	bl	80073e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80051e8:	4b35      	ldr	r3, [pc, #212]	; (80052c0 <HAL_UART_MspInit+0x268>)
 80051ea:	4a36      	ldr	r2, [pc, #216]	; (80052c4 <HAL_UART_MspInit+0x26c>)
 80051ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051ee:	4b34      	ldr	r3, [pc, #208]	; (80052c0 <HAL_UART_MspInit+0x268>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f4:	4b32      	ldr	r3, [pc, #200]	; (80052c0 <HAL_UART_MspInit+0x268>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_UART_MspInit+0x268>)
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005200:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <HAL_UART_MspInit+0x268>)
 8005202:	2200      	movs	r2, #0
 8005204:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_UART_MspInit+0x268>)
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800520c:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <HAL_UART_MspInit+0x268>)
 800520e:	2220      	movs	r2, #32
 8005210:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005212:	4b2b      	ldr	r3, [pc, #172]	; (80052c0 <HAL_UART_MspInit+0x268>)
 8005214:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005218:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800521a:	4829      	ldr	r0, [pc, #164]	; (80052c0 <HAL_UART_MspInit+0x268>)
 800521c:	f001 fc62 	bl	8006ae4 <HAL_DMA_Init>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8005226:	f7fe fec1 	bl	8003fac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a24      	ldr	r2, [pc, #144]	; (80052c0 <HAL_UART_MspInit+0x268>)
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
 8005230:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <HAL_UART_MspInit+0x268>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8005236:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_UART_MspInit+0x270>)
 8005238:	4a24      	ldr	r2, [pc, #144]	; (80052cc <HAL_UART_MspInit+0x274>)
 800523a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800523c:	4b22      	ldr	r3, [pc, #136]	; (80052c8 <HAL_UART_MspInit+0x270>)
 800523e:	2210      	movs	r2, #16
 8005240:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005242:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <HAL_UART_MspInit+0x270>)
 8005244:	2200      	movs	r2, #0
 8005246:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005248:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <HAL_UART_MspInit+0x270>)
 800524a:	2280      	movs	r2, #128	; 0x80
 800524c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800524e:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <HAL_UART_MspInit+0x270>)
 8005250:	2200      	movs	r2, #0
 8005252:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005254:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <HAL_UART_MspInit+0x270>)
 8005256:	2200      	movs	r2, #0
 8005258:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <HAL_UART_MspInit+0x270>)
 800525c:	2200      	movs	r2, #0
 800525e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_UART_MspInit+0x270>)
 8005262:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8005266:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005268:	4817      	ldr	r0, [pc, #92]	; (80052c8 <HAL_UART_MspInit+0x270>)
 800526a:	f001 fc3b 	bl	8006ae4 <HAL_DMA_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_MspInit+0x220>
      Error_Handler();
 8005274:	f7fe fe9a 	bl	8003fac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <HAL_UART_MspInit+0x270>)
 800527c:	635a      	str	r2, [r3, #52]	; 0x34
 800527e:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <HAL_UART_MspInit+0x270>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005284:	2200      	movs	r2, #0
 8005286:	2105      	movs	r1, #5
 8005288:	2026      	movs	r0, #38	; 0x26
 800528a:	f001 fb1c 	bl	80068c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800528e:	2026      	movs	r0, #38	; 0x26
 8005290:	f001 fb35 	bl	80068fe <HAL_NVIC_EnableIRQ>
}
 8005294:	bf00      	nop
 8005296:	3738      	adds	r7, #56	; 0x38
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40005000 	.word	0x40005000
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40011000 	.word	0x40011000
 80052a8:	40011400 	.word	0x40011400
 80052ac:	40013800 	.word	0x40013800
 80052b0:	40010c00 	.word	0x40010c00
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40004400 	.word	0x40004400
 80052bc:	40010800 	.word	0x40010800
 80052c0:	20008d0c 	.word	0x20008d0c
 80052c4:	4002006c 	.word	0x4002006c
 80052c8:	20008d94 	.word	0x20008d94
 80052cc:	40020080 	.word	0x40020080

080052d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80052d2:	490d      	ldr	r1, [pc, #52]	; (8005308 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052d8:	e002      	b.n	80052e0 <LoopCopyDataInit>

080052da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052de:	3304      	adds	r3, #4

080052e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052e4:	d3f9      	bcc.n	80052da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80052e8:	4c0a      	ldr	r4, [pc, #40]	; (8005314 <LoopFillZerobss+0x22>)
  movs r3, #0
 80052ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ec:	e001      	b.n	80052f2 <LoopFillZerobss>

080052ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052f0:	3204      	adds	r2, #4

080052f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052f4:	d3fb      	bcc.n	80052ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052f6:	f7ff fc27 	bl	8004b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052fa:	f015 f9cb 	bl	801a694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052fe:	f7fe fdd5 	bl	8003eac <main>
  bx lr
 8005302:	4770      	bx	lr
  ldr r0, =_sdata
 8005304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005308:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 800530c:	0801dc18 	.word	0x0801dc18
  ldr r2, =_sbss
 8005310:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8005314:	2000e058 	.word	0x2000e058

08005318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005318:	e7fe      	b.n	8005318 <ADC1_2_IRQHandler>
	...

0800531c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <HAL_Init+0x28>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a07      	ldr	r2, [pc, #28]	; (8005344 <HAL_Init+0x28>)
 8005326:	f043 0310 	orr.w	r3, r3, #16
 800532a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800532c:	2003      	movs	r0, #3
 800532e:	f001 fabf 	bl	80068b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005332:	200f      	movs	r0, #15
 8005334:	f7ff fa88 	bl	8004848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005338:	f7ff fa4e 	bl	80047d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40022000 	.word	0x40022000

08005348 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_IncTick+0x1c>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	4b05      	ldr	r3, [pc, #20]	; (8005368 <HAL_IncTick+0x20>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4413      	add	r3, r2
 8005358:	4a03      	ldr	r2, [pc, #12]	; (8005368 <HAL_IncTick+0x20>)
 800535a:	6013      	str	r3, [r2, #0]
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	20000024 	.word	0x20000024
 8005368:	20008e60 	.word	0x20008e60

0800536c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
  return uwTick;
 8005370:	4b02      	ldr	r3, [pc, #8]	; (800537c <HAL_GetTick+0x10>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	20008e60 	.word	0x20008e60

08005380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005388:	f7ff fff0 	bl	800536c <HAL_GetTick>
 800538c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005398:	d005      	beq.n	80053a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800539a:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <HAL_Delay+0x44>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053a6:	bf00      	nop
 80053a8:	f7ff ffe0 	bl	800536c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d8f7      	bhi.n	80053a8 <HAL_Delay+0x28>
  {
  }
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000024 	.word	0x20000024

080053c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e0ce      	b.n	8005588 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc f91e 	bl	8001648 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fc03 	bl	8005c18 <ADC_ConversionStop_Disable>
 8005412:	4603      	mov	r3, r0
 8005414:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 80a9 	bne.w	8005576 <HAL_ADC_Init+0x1ae>
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f040 80a5 	bne.w	8005576 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005434:	f023 0302 	bic.w	r3, r3, #2
 8005438:	f043 0202 	orr.w	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4951      	ldr	r1, [pc, #324]	; (8005590 <HAL_ADC_Init+0x1c8>)
 800544a:	428b      	cmp	r3, r1
 800544c:	d10a      	bne.n	8005464 <HAL_ADC_Init+0x9c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005456:	d002      	beq.n	800545e <HAL_ADC_Init+0x96>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	e004      	b.n	8005468 <HAL_ADC_Init+0xa0>
 800545e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005462:	e001      	b.n	8005468 <HAL_ADC_Init+0xa0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005468:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	7b1b      	ldrb	r3, [r3, #12]
 800546e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005470:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d003      	beq.n	800548a <HAL_ADC_Init+0xc2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_ADC_Init+0xc8>
 800548a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800548e:	e000      	b.n	8005492 <HAL_ADC_Init+0xca>
 8005490:	2300      	movs	r3, #0
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	7d1b      	ldrb	r3, [r3, #20]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d119      	bne.n	80054d4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7b1b      	ldrb	r3, [r3, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	035a      	lsls	r2, r3, #13
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e00b      	b.n	80054d4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	4b29      	ldr	r3, [pc, #164]	; (8005594 <HAL_ADC_Init+0x1cc>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005504:	d003      	beq.n	800550e <HAL_ADC_Init+0x146>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d104      	bne.n	8005518 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	3b01      	subs	r3, #1
 8005514:	051b      	lsls	r3, r3, #20
 8005516:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	430a      	orrs	r2, r1
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	4b19      	ldr	r3, [pc, #100]	; (8005598 <HAL_ADC_Init+0x1d0>)
 8005534:	4013      	ands	r3, r2
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	429a      	cmp	r2, r3
 800553a:	d10b      	bne.n	8005554 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	f043 0201 	orr.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005552:	e018      	b.n	8005586 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f023 0312 	bic.w	r3, r3, #18
 800555c:	f043 0210 	orr.w	r2, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005574:	e007      	b.n	8005586 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f043 0210 	orr.w	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005586:	7dfb      	ldrb	r3, [r7, #23]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40013c00 	.word	0x40013c00
 8005594:	ffe1f7fd 	.word	0xffe1f7fd
 8005598:	ff1f0efe 	.word	0xff1f0efe

0800559c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_ADC_Start+0x1a>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e098      	b.n	80056e8 <HAL_ADC_Start+0x14c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fad0 	bl	8005b64 <ADC_Enable>
 80055c4:	4603      	mov	r3, r0
 80055c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 8087 	bne.w	80056de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a41      	ldr	r2, [pc, #260]	; (80056f0 <HAL_ADC_Start+0x154>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d105      	bne.n	80055fa <HAL_ADC_Start+0x5e>
 80055ee:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_ADC_Start+0x158>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d115      	bne.n	8005626 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005610:	2b00      	cmp	r3, #0
 8005612:	d026      	beq.n	8005662 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800561c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005624:	e01d      	b.n	8005662 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <HAL_ADC_Start+0x158>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_ADC_Start+0xaa>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2b      	ldr	r2, [pc, #172]	; (80056f0 <HAL_ADC_Start+0x154>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10d      	bne.n	8005662 <HAL_ADC_Start+0xc6>
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <HAL_ADC_Start+0x158>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800565a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d006      	beq.n	800567c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005672:	f023 0206 	bic.w	r2, r3, #6
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	62da      	str	r2, [r3, #44]	; 0x2c
 800567a:	e002      	b.n	8005682 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f06f 0202 	mvn.w	r2, #2
 8005692:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800569e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80056a2:	d113      	bne.n	80056cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80056a8:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <HAL_ADC_Start+0x154>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d105      	bne.n	80056ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_ADC_Start+0x158>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d108      	bne.n	80056cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80056c8:	609a      	str	r2, [r3, #8]
 80056ca:	e00c      	b.n	80056e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	e003      	b.n	80056e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3710      	adds	r7, #16
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40012800 	.word	0x40012800
 80056f4:	40012400 	.word	0x40012400

080056f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800570a:	2b01      	cmp	r3, #1
 800570c:	d101      	bne.n	8005712 <HAL_ADC_Stop+0x1a>
 800570e:	2302      	movs	r3, #2
 8005710:	e01a      	b.n	8005748 <HAL_ADC_Stop+0x50>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fa7c 	bl	8005c18 <ADC_ConversionStop_Disable>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005766:	f7ff fe01 	bl	800536c <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0d3      	b.n	800593a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579c:	2b00      	cmp	r3, #0
 800579e:	d131      	bne.n	8005804 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d12a      	bne.n	8005804 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80057ae:	e021      	b.n	80057f4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b6:	d01d      	beq.n	80057f4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <HAL_ADC_PollForConversion+0x7e>
 80057be:	f7ff fdd5 	bl	800536c <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d212      	bcs.n	80057f4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	f043 0204 	orr.w	r2, r3, #4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0a2      	b.n	800593a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0d6      	beq.n	80057b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005802:	e070      	b.n	80058e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005804:	4b4f      	ldr	r3, [pc, #316]	; (8005944 <HAL_ADC_PollForConversion+0x1f4>)
 8005806:	681c      	ldr	r4, [r3, #0]
 8005808:	2002      	movs	r0, #2
 800580a:	f002 fcc9 	bl	80081a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800580e:	4603      	mov	r3, r0
 8005810:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6919      	ldr	r1, [r3, #16]
 800581a:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <HAL_ADC_PollForConversion+0x1f8>)
 800581c:	400b      	ands	r3, r1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d118      	bne.n	8005854 <HAL_ADC_PollForConversion+0x104>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68d9      	ldr	r1, [r3, #12]
 8005828:	4b48      	ldr	r3, [pc, #288]	; (800594c <HAL_ADC_PollForConversion+0x1fc>)
 800582a:	400b      	ands	r3, r1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d111      	bne.n	8005854 <HAL_ADC_PollForConversion+0x104>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6919      	ldr	r1, [r3, #16]
 8005836:	4b46      	ldr	r3, [pc, #280]	; (8005950 <HAL_ADC_PollForConversion+0x200>)
 8005838:	400b      	ands	r3, r1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d108      	bne.n	8005850 <HAL_ADC_PollForConversion+0x100>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68d9      	ldr	r1, [r3, #12]
 8005844:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_ADC_PollForConversion+0x204>)
 8005846:	400b      	ands	r3, r1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_ADC_PollForConversion+0x100>
 800584c:	2314      	movs	r3, #20
 800584e:	e020      	b.n	8005892 <HAL_ADC_PollForConversion+0x142>
 8005850:	2329      	movs	r3, #41	; 0x29
 8005852:	e01e      	b.n	8005892 <HAL_ADC_PollForConversion+0x142>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6919      	ldr	r1, [r3, #16]
 800585a:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <HAL_ADC_PollForConversion+0x200>)
 800585c:	400b      	ands	r3, r1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <HAL_ADC_PollForConversion+0x120>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68d9      	ldr	r1, [r3, #12]
 8005868:	4b3a      	ldr	r3, [pc, #232]	; (8005954 <HAL_ADC_PollForConversion+0x204>)
 800586a:	400b      	ands	r3, r1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00d      	beq.n	800588c <HAL_ADC_PollForConversion+0x13c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6919      	ldr	r1, [r3, #16]
 8005876:	4b38      	ldr	r3, [pc, #224]	; (8005958 <HAL_ADC_PollForConversion+0x208>)
 8005878:	400b      	ands	r3, r1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d108      	bne.n	8005890 <HAL_ADC_PollForConversion+0x140>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	4b34      	ldr	r3, [pc, #208]	; (8005958 <HAL_ADC_PollForConversion+0x208>)
 8005886:	400b      	ands	r3, r1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_ADC_PollForConversion+0x140>
 800588c:	2354      	movs	r3, #84	; 0x54
 800588e:	e000      	b.n	8005892 <HAL_ADC_PollForConversion+0x142>
 8005890:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005892:	fb02 f303 	mul.w	r3, r2, r3
 8005896:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005898:	e021      	b.n	80058de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a0:	d01a      	beq.n	80058d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <HAL_ADC_PollForConversion+0x168>
 80058a8:	f7ff fd60 	bl	800536c <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d20f      	bcs.n	80058d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d90b      	bls.n	80058d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f043 0204 	orr.w	r2, r3, #4
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e030      	b.n	800593a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d8d9      	bhi.n	800589a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f06f 0212 	mvn.w	r2, #18
 80058ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005906:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800590a:	d115      	bne.n	8005938 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005910:	2b00      	cmp	r3, #0
 8005912:	d111      	bne.n	8005938 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	f043 0201 	orr.w	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	bd90      	pop	{r4, r7, pc}
 8005942:	bf00      	nop
 8005944:	2000001c 	.word	0x2000001c
 8005948:	24924924 	.word	0x24924924
 800594c:	00924924 	.word	0x00924924
 8005950:	12492492 	.word	0x12492492
 8005954:	00492492 	.word	0x00492492
 8005958:	00249249 	.word	0x00249249

0800595c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_ADC_ConfigChannel+0x20>
 8005990:	2302      	movs	r3, #2
 8005992:	e0dc      	b.n	8005b4e <HAL_ADC_ConfigChannel+0x1da>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b06      	cmp	r3, #6
 80059a2:	d81c      	bhi.n	80059de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	3b05      	subs	r3, #5
 80059b6:	221f      	movs	r2, #31
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	4019      	ands	r1, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	3b05      	subs	r3, #5
 80059d0:	fa00 f203 	lsl.w	r2, r0, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	635a      	str	r2, [r3, #52]	; 0x34
 80059dc:	e03c      	b.n	8005a58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b0c      	cmp	r3, #12
 80059e4:	d81c      	bhi.n	8005a20 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	3b23      	subs	r3, #35	; 0x23
 80059f8:	221f      	movs	r2, #31
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	4019      	ands	r1, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	3b23      	subs	r3, #35	; 0x23
 8005a12:	fa00 f203 	lsl.w	r2, r0, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a1e:	e01b      	b.n	8005a58 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	3b41      	subs	r3, #65	; 0x41
 8005a32:	221f      	movs	r2, #31
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	4019      	ands	r1, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	3b41      	subs	r3, #65	; 0x41
 8005a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d91c      	bls.n	8005a9a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	3b1e      	subs	r3, #30
 8005a72:	2207      	movs	r2, #7
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	4019      	ands	r1, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	6898      	ldr	r0, [r3, #8]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	3b1e      	subs	r3, #30
 8005a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e019      	b.n	8005ace <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6919      	ldr	r1, [r3, #16]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	4413      	add	r3, r2
 8005aaa:	2207      	movs	r2, #7
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	4019      	ands	r1, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6898      	ldr	r0, [r3, #8]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	4413      	add	r3, r2
 8005ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d003      	beq.n	8005ade <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ada:	2b11      	cmp	r3, #17
 8005adc:	d132      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <HAL_ADC_ConfigChannel+0x1e4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d125      	bne.n	8005b34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d126      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d11a      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b0e:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <HAL_ADC_ConfigChannel+0x1e8>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a13      	ldr	r2, [pc, #76]	; (8005b60 <HAL_ADC_ConfigChannel+0x1ec>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	0c9a      	lsrs	r2, r3, #18
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b24:	e002      	b.n	8005b2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f9      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x1b2>
 8005b32:	e007      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	40012400 	.word	0x40012400
 8005b5c:	2000001c 	.word	0x2000001c
 8005b60:	431bde83 	.word	0x431bde83

08005b64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d040      	beq.n	8005c04 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b92:	4b1f      	ldr	r3, [pc, #124]	; (8005c10 <ADC_Enable+0xac>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <ADC_Enable+0xb0>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	0c9b      	lsrs	r3, r3, #18
 8005b9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005ba0:	e002      	b.n	8005ba8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f9      	bne.n	8005ba2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bae:	f7ff fbdd 	bl	800536c <HAL_GetTick>
 8005bb2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005bb4:	e01f      	b.n	8005bf6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bb6:	f7ff fbd9 	bl	800536c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d918      	bls.n	8005bf6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d011      	beq.n	8005bf6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	f043 0210 	orr.w	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	f043 0201 	orr.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e007      	b.n	8005c06 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d1d8      	bne.n	8005bb6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	2000001c 	.word	0x2000001c
 8005c14:	431bde83 	.word	0x431bde83

08005c18 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d12e      	bne.n	8005c90 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c42:	f7ff fb93 	bl	800536c <HAL_GetTick>
 8005c46:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005c48:	e01b      	b.n	8005c82 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c4a:	f7ff fb8f 	bl	800536c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d914      	bls.n	8005c82 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10d      	bne.n	8005c82 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	f043 0210 	orr.w	r2, r3, #16
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	f043 0201 	orr.w	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e007      	b.n	8005c92 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d0dc      	beq.n	8005c4a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0ed      	b.n	8005e88 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fb fd4f 	bl	800175c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cce:	f7ff fb4d 	bl	800536c <HAL_GetTick>
 8005cd2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005cd4:	e012      	b.n	8005cfc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005cd6:	f7ff fb49 	bl	800536c <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b0a      	cmp	r3, #10
 8005ce2:	d90b      	bls.n	8005cfc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2205      	movs	r2, #5
 8005cf4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0c5      	b.n	8005e88 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0e5      	beq.n	8005cd6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0202 	bic.w	r2, r2, #2
 8005d18:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d1a:	f7ff fb27 	bl	800536c <HAL_GetTick>
 8005d1e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005d20:	e012      	b.n	8005d48 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005d22:	f7ff fb23 	bl	800536c <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	2b0a      	cmp	r3, #10
 8005d2e:	d90b      	bls.n	8005d48 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2205      	movs	r2, #5
 8005d40:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e09f      	b.n	8005e88 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	7e1b      	ldrb	r3, [r3, #24]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d108      	bne.n	8005d70 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e007      	b.n	8005d80 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	7e5b      	ldrb	r3, [r3, #25]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d108      	bne.n	8005d9a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e007      	b.n	8005daa <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7e9b      	ldrb	r3, [r3, #26]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d108      	bne.n	8005dc4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0220 	orr.w	r2, r2, #32
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e007      	b.n	8005dd4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0220 	bic.w	r2, r2, #32
 8005dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	7edb      	ldrb	r3, [r3, #27]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d108      	bne.n	8005dee <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0210 	bic.w	r2, r2, #16
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	e007      	b.n	8005dfe <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0210 	orr.w	r2, r2, #16
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7f1b      	ldrb	r3, [r3, #28]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d108      	bne.n	8005e18 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0208 	orr.w	r2, r2, #8
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	e007      	b.n	8005e28 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0208 	bic.w	r2, r2, #8
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7f5b      	ldrb	r3, [r3, #29]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d108      	bne.n	8005e42 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0204 	orr.w	r2, r2, #4
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e007      	b.n	8005e52 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0204 	bic.w	r2, r2, #4
 8005e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	ea42 0103 	orr.w	r1, r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	1e5a      	subs	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ea6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d003      	beq.n	8005eb6 <HAL_CAN_ConfigFilter+0x26>
 8005eae:	7cfb      	ldrb	r3, [r7, #19]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	f040 80aa 	bne.w	800600a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ebc:	f043 0201 	orr.w	r2, r3, #1
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2201      	movs	r2, #1
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	401a      	ands	r2, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d123      	bne.n	8005f38 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005f12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3248      	adds	r2, #72	; 0x48
 8005f18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	3348      	adds	r3, #72	; 0x48
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	440b      	add	r3, r1
 8005f36:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d122      	bne.n	8005f86 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005f60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3248      	adds	r2, #72	; 0x48
 8005f66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f7c:	6979      	ldr	r1, [r7, #20]
 8005f7e:	3348      	adds	r3, #72	; 0x48
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	440b      	add	r3, r1
 8005f84:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	401a      	ands	r2, r3
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005fa0:	e007      	b.n	8005fb2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	401a      	ands	r2, r3
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005fcc:	e007      	b.n	8005fde <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d107      	bne.n	8005ff6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ffc:	f023 0201 	bic.w	r2, r3, #1
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e006      	b.n	8006018 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
  }
}
 8006018:	4618      	mov	r0, r3
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	d12e      	bne.n	8006094 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800604e:	f7ff f98d 	bl	800536c <HAL_GetTick>
 8006052:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006054:	e012      	b.n	800607c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006056:	f7ff f989 	bl	800536c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b0a      	cmp	r3, #10
 8006062:	d90b      	bls.n	800607c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2205      	movs	r2, #5
 8006074:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e012      	b.n	80060a2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e5      	bne.n	8006056 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	e006      	b.n	80060a2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d003      	beq.n	80060ce <HAL_CAN_GetRxMessage+0x24>
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	f040 80f3 	bne.w	80062b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10e      	bne.n	80060f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d116      	bne.n	8006110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e0e7      	b.n	80062c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d107      	bne.n	8006110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0d8      	b.n	80062c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	331b      	adds	r3, #27
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	4413      	add	r3, r2
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0204 	and.w	r2, r3, #4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10c      	bne.n	8006148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	331b      	adds	r3, #27
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	4413      	add	r3, r2
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	0d5b      	lsrs	r3, r3, #21
 800613e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e00b      	b.n	8006160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	331b      	adds	r3, #27
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	331b      	adds	r3, #27
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	4413      	add	r3, r2
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0202 	and.w	r2, r3, #2
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	331b      	adds	r3, #27
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	4413      	add	r3, r2
 8006182:	3304      	adds	r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	331b      	adds	r3, #27
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	4413      	add	r3, r2
 800619a:	3304      	adds	r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	0a1b      	lsrs	r3, r3, #8
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	331b      	adds	r3, #27
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	4413      	add	r3, r2
 80061b2:	3304      	adds	r3, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	0c1b      	lsrs	r3, r3, #16
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	4413      	add	r3, r2
 80061de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	0a1a      	lsrs	r2, r3, #8
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0c1a      	lsrs	r2, r3, #16
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	3302      	adds	r3, #2
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4413      	add	r3, r2
 8006212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	0e1a      	lsrs	r2, r3, #24
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	3303      	adds	r3, #3
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	3304      	adds	r3, #4
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	4413      	add	r3, r2
 8006244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	0a1a      	lsrs	r2, r3, #8
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	3305      	adds	r3, #5
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	4413      	add	r3, r2
 800625e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	0c1a      	lsrs	r2, r3, #16
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	3306      	adds	r3, #6
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	4413      	add	r3, r2
 8006278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	0e1a      	lsrs	r2, r3, #24
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	3307      	adds	r3, #7
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0220 	orr.w	r2, r2, #32
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e007      	b.n	80062b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0220 	orr.w	r2, r2, #32
 80062ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	e006      	b.n	80062c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bc80      	pop	{r7}
 80062ca:	4770      	bx	lr

080062cc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062dc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d002      	beq.n	80062ea <HAL_CAN_ActivateNotification+0x1e>
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d109      	bne.n	80062fe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6959      	ldr	r1, [r3, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e006      	b.n	800630c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
  }
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr

08006316 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b08a      	sub	sp, #40	; 0x28
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d07c      	beq.n	8006456 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d023      	beq.n	80063ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2201      	movs	r2, #1
 800636c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f983 	bl	8006684 <HAL_CAN_TxMailbox0CompleteCallback>
 800637e:	e016      	b.n	80063ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
 8006392:	e00c      	b.n	80063ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d004      	beq.n	80063a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
 80063a6:	e002      	b.n	80063ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f986 	bl	80066ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d024      	beq.n	8006402 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f962 	bl	8006696 <HAL_CAN_TxMailbox1CompleteCallback>
 80063d2:	e016      	b.n	8006402 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d004      	beq.n	80063e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
 80063e6:	e00c      	b.n	8006402 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
 80063fa:	e002      	b.n	8006402 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f965 	bl	80066cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d024      	beq.n	8006456 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006414:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f941 	bl	80066a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8006426:	e016      	b.n	8006456 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
 800643a:	e00c      	b.n	8006456 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d004      	beq.n	8006450 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
 800644e:	e002      	b.n	8006456 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f944 	bl	80066de <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00c      	beq.n	800647a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f003 0310 	and.w	r3, r3, #16
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006470:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2210      	movs	r2, #16
 8006478:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d006      	beq.n	800649c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2208      	movs	r2, #8
 8006494:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f92a 	bl	80066f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d009      	beq.n	80064ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fd fb49 	bl	8003b4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00c      	beq.n	80064de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d006      	beq.n	8006500 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2208      	movs	r2, #8
 80064f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f90a 	bl	8006714 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	f003 0310 	and.w	r3, r3, #16
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 f8f2 	bl	8006702 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0310 	and.w	r3, r3, #16
 800652e:	2b00      	cmp	r3, #0
 8006530:	d006      	beq.n	8006540 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2210      	movs	r2, #16
 8006538:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8f3 	bl	8006726 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d006      	beq.n	8006562 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2208      	movs	r2, #8
 800655a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8eb 	bl	8006738 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d07b      	beq.n	8006664 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d072      	beq.n	800665c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	f043 0302 	orr.w	r3, r3, #2
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	f043 0304 	orr.w	r3, r3, #4
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d043      	beq.n	800665c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d03e      	beq.n	800665c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e4:	2b60      	cmp	r3, #96	; 0x60
 80065e6:	d02b      	beq.n	8006640 <HAL_CAN_IRQHandler+0x32a>
 80065e8:	2b60      	cmp	r3, #96	; 0x60
 80065ea:	d82e      	bhi.n	800664a <HAL_CAN_IRQHandler+0x334>
 80065ec:	2b50      	cmp	r3, #80	; 0x50
 80065ee:	d022      	beq.n	8006636 <HAL_CAN_IRQHandler+0x320>
 80065f0:	2b50      	cmp	r3, #80	; 0x50
 80065f2:	d82a      	bhi.n	800664a <HAL_CAN_IRQHandler+0x334>
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d019      	beq.n	800662c <HAL_CAN_IRQHandler+0x316>
 80065f8:	2b40      	cmp	r3, #64	; 0x40
 80065fa:	d826      	bhi.n	800664a <HAL_CAN_IRQHandler+0x334>
 80065fc:	2b30      	cmp	r3, #48	; 0x30
 80065fe:	d010      	beq.n	8006622 <HAL_CAN_IRQHandler+0x30c>
 8006600:	2b30      	cmp	r3, #48	; 0x30
 8006602:	d822      	bhi.n	800664a <HAL_CAN_IRQHandler+0x334>
 8006604:	2b10      	cmp	r3, #16
 8006606:	d002      	beq.n	800660e <HAL_CAN_IRQHandler+0x2f8>
 8006608:	2b20      	cmp	r3, #32
 800660a:	d005      	beq.n	8006618 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800660c:	e01d      	b.n	800664a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006616:	e019      	b.n	800664c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	f043 0310 	orr.w	r3, r3, #16
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006620:	e014      	b.n	800664c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	f043 0320 	orr.w	r3, r3, #32
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800662a:	e00f      	b.n	800664c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006634:	e00a      	b.n	800664c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800663e:	e005      	b.n	800664c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006648:	e000      	b.n	800664c <HAL_CAN_IRQHandler+0x336>
            break;
 800664a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800665a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2204      	movs	r2, #4
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f867 	bl	800674a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800667c:	bf00      	nop
 800667e:	3728      	adds	r7, #40	; 0x28
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066de:	b480      	push	{r7}
 80066e0:	b083      	sub	sp, #12
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bc80      	pop	{r7}
 80066ee:	4770      	bx	lr

080066f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr

08006702 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	bc80      	pop	{r7}
 8006724:	4770      	bx	lr

08006726 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800676c:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <__NVIC_SetPriorityGrouping+0x44>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800678e:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	60d3      	str	r3, [r2, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067a8:	4b04      	ldr	r3, [pc, #16]	; (80067bc <__NVIC_GetPriorityGrouping+0x18>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	0a1b      	lsrs	r3, r3, #8
 80067ae:	f003 0307 	and.w	r3, r3, #7
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	e000ed00 	.word	0xe000ed00

080067c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db0b      	blt.n	80067ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	f003 021f 	and.w	r2, r3, #31
 80067d8:	4906      	ldr	r1, [pc, #24]	; (80067f4 <__NVIC_EnableIRQ+0x34>)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	2001      	movs	r0, #1
 80067e2:	fa00 f202 	lsl.w	r2, r0, r2
 80067e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	e000e100 	.word	0xe000e100

080067f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006808:	2b00      	cmp	r3, #0
 800680a:	db0a      	blt.n	8006822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	490c      	ldr	r1, [pc, #48]	; (8006844 <__NVIC_SetPriority+0x4c>)
 8006812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006816:	0112      	lsls	r2, r2, #4
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	440b      	add	r3, r1
 800681c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006820:	e00a      	b.n	8006838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	b2da      	uxtb	r2, r3
 8006826:	4908      	ldr	r1, [pc, #32]	; (8006848 <__NVIC_SetPriority+0x50>)
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	3b04      	subs	r3, #4
 8006830:	0112      	lsls	r2, r2, #4
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	440b      	add	r3, r1
 8006836:	761a      	strb	r2, [r3, #24]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	e000e100 	.word	0xe000e100
 8006848:	e000ed00 	.word	0xe000ed00

0800684c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	; 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f1c3 0307 	rsb	r3, r3, #7
 8006866:	2b04      	cmp	r3, #4
 8006868:	bf28      	it	cs
 800686a:	2304      	movcs	r3, #4
 800686c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3304      	adds	r3, #4
 8006872:	2b06      	cmp	r3, #6
 8006874:	d902      	bls.n	800687c <NVIC_EncodePriority+0x30>
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	3b03      	subs	r3, #3
 800687a:	e000      	b.n	800687e <NVIC_EncodePriority+0x32>
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	43da      	mvns	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	401a      	ands	r2, r3
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	fa01 f303 	lsl.w	r3, r1, r3
 800689e:	43d9      	mvns	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a4:	4313      	orrs	r3, r2
         );
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3724      	adds	r7, #36	; 0x24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff ff4f 	bl	800675c <__NVIC_SetPriorityGrouping>
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	4603      	mov	r3, r0
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068d8:	f7ff ff64 	bl	80067a4 <__NVIC_GetPriorityGrouping>
 80068dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	6978      	ldr	r0, [r7, #20]
 80068e4:	f7ff ffb2 	bl	800684c <NVIC_EncodePriority>
 80068e8:	4602      	mov	r2, r0
 80068ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ee:	4611      	mov	r1, r2
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ff81 	bl	80067f8 <__NVIC_SetPriority>
}
 80068f6:	bf00      	nop
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	4603      	mov	r3, r0
 8006906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff ff57 	bl	80067c0 <__NVIC_EnableIRQ>
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e014      	b.n	8006956 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fb f9d7 	bl	8001cf0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2202      	movs	r2, #2
 8006946:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	795b      	ldrb	r3, [r3, #5]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_DAC_Start+0x16>
 8006970:	2302      	movs	r3, #2
 8006972:	e040      	b.n	80069f6 <HAL_DAC_Start+0x98>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2201      	movs	r2, #1
 800698e:	409a      	lsls	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80069a8:	2b3c      	cmp	r3, #60	; 0x3c
 80069aa:	d11d      	bne.n	80069e8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	e014      	b.n	80069e8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	213c      	movs	r1, #60	; 0x3c
 80069d0:	fa01 f303 	lsl.w	r3, r1, r3
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d107      	bne.n	80069e8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0202 	orr.w	r2, r2, #2
 80069e6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	3308      	adds	r3, #8
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e004      	b.n	8006a34 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4413      	add	r3, r2
 8006a30:	3314      	adds	r3, #20
 8006a32:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	461a      	mov	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	795b      	ldrb	r3, [r3, #5]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_DAC_ConfigChannel+0x18>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e03c      	b.n	8006ada <HAL_DAC_ConfigChannel+0x92>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43db      	mvns	r3, r3
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4013      	ands	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6819      	ldr	r1, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	22c0      	movs	r2, #192	; 0xc0
 8006abe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac2:	43da      	mvns	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	400a      	ands	r2, r1
 8006aca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e059      	b.n	8006bae <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	4b2d      	ldr	r3, [pc, #180]	; (8006bb8 <HAL_DMA_Init+0xd4>)
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d80f      	bhi.n	8006b26 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4b2b      	ldr	r3, [pc, #172]	; (8006bbc <HAL_DMA_Init+0xd8>)
 8006b0e:	4413      	add	r3, r2
 8006b10:	4a2b      	ldr	r2, [pc, #172]	; (8006bc0 <HAL_DMA_Init+0xdc>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	009a      	lsls	r2, r3, #2
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a28      	ldr	r2, [pc, #160]	; (8006bc4 <HAL_DMA_Init+0xe0>)
 8006b22:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b24:	e00e      	b.n	8006b44 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <HAL_DMA_Init+0xe4>)
 8006b2e:	4413      	add	r3, r2
 8006b30:	4a23      	ldr	r2, [pc, #140]	; (8006bc0 <HAL_DMA_Init+0xdc>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	091b      	lsrs	r3, r3, #4
 8006b38:	009a      	lsls	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <HAL_DMA_Init+0xe8>)
 8006b42:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr
 8006bb8:	40020407 	.word	0x40020407
 8006bbc:	bffdfff8 	.word	0xbffdfff8
 8006bc0:	cccccccd 	.word	0xcccccccd
 8006bc4:	40020000 	.word	0x40020000
 8006bc8:	bffdfbf8 	.word	0xbffdfbf8
 8006bcc:	40020400 	.word	0x40020400

08006bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_DMA_Start_IT+0x20>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e04a      	b.n	8006c86 <HAL_DMA_Start_IT+0xb6>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d13a      	bne.n	8006c78 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2202      	movs	r2, #2
 8006c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fbb0 	bl	800738c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d008      	beq.n	8006c46 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 020e 	orr.w	r2, r2, #14
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e00f      	b.n	8006c66 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0204 	bic.w	r2, r2, #4
 8006c54:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 020a 	orr.w	r2, r2, #10
 8006c64:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e005      	b.n	8006c84 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c80:	2302      	movs	r3, #2
 8006c82:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d008      	beq.n	8006cb6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e020      	b.n	8006cf8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 020e 	bic.w	r2, r2, #14
 8006cc4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	2101      	movs	r1, #1
 8006ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ce4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d005      	beq.n	8006d26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
 8006d24:	e0d6      	b.n	8006ed4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 020e 	bic.w	r2, r2, #14
 8006d34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0201 	bic.w	r2, r2, #1
 8006d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	4b64      	ldr	r3, [pc, #400]	; (8006ee0 <HAL_DMA_Abort_IT+0x1dc>)
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d958      	bls.n	8006e04 <HAL_DMA_Abort_IT+0x100>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a63      	ldr	r2, [pc, #396]	; (8006ee4 <HAL_DMA_Abort_IT+0x1e0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d04f      	beq.n	8006dfc <HAL_DMA_Abort_IT+0xf8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a61      	ldr	r2, [pc, #388]	; (8006ee8 <HAL_DMA_Abort_IT+0x1e4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d048      	beq.n	8006df8 <HAL_DMA_Abort_IT+0xf4>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a60      	ldr	r2, [pc, #384]	; (8006eec <HAL_DMA_Abort_IT+0x1e8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d040      	beq.n	8006df2 <HAL_DMA_Abort_IT+0xee>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a5e      	ldr	r2, [pc, #376]	; (8006ef0 <HAL_DMA_Abort_IT+0x1ec>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d038      	beq.n	8006dec <HAL_DMA_Abort_IT+0xe8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a5d      	ldr	r2, [pc, #372]	; (8006ef4 <HAL_DMA_Abort_IT+0x1f0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d030      	beq.n	8006de6 <HAL_DMA_Abort_IT+0xe2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a5b      	ldr	r2, [pc, #364]	; (8006ef8 <HAL_DMA_Abort_IT+0x1f4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d028      	beq.n	8006de0 <HAL_DMA_Abort_IT+0xdc>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a53      	ldr	r2, [pc, #332]	; (8006ee0 <HAL_DMA_Abort_IT+0x1dc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d020      	beq.n	8006dda <HAL_DMA_Abort_IT+0xd6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a57      	ldr	r2, [pc, #348]	; (8006efc <HAL_DMA_Abort_IT+0x1f8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d019      	beq.n	8006dd6 <HAL_DMA_Abort_IT+0xd2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a56      	ldr	r2, [pc, #344]	; (8006f00 <HAL_DMA_Abort_IT+0x1fc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d012      	beq.n	8006dd2 <HAL_DMA_Abort_IT+0xce>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a54      	ldr	r2, [pc, #336]	; (8006f04 <HAL_DMA_Abort_IT+0x200>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d00a      	beq.n	8006dcc <HAL_DMA_Abort_IT+0xc8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a53      	ldr	r2, [pc, #332]	; (8006f08 <HAL_DMA_Abort_IT+0x204>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d102      	bne.n	8006dc6 <HAL_DMA_Abort_IT+0xc2>
 8006dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dc4:	e01b      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006dca:	e018      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd0:	e015      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	e013      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e011      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dde:	e00e      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006de0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006de4:	e00b      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006dea:	e008      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006df0:	e005      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006df6:	e002      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	e000      	b.n	8006dfe <HAL_DMA_Abort_IT+0xfa>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4a43      	ldr	r2, [pc, #268]	; (8006f0c <HAL_DMA_Abort_IT+0x208>)
 8006e00:	6053      	str	r3, [r2, #4]
 8006e02:	e057      	b.n	8006eb4 <HAL_DMA_Abort_IT+0x1b0>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a36      	ldr	r2, [pc, #216]	; (8006ee4 <HAL_DMA_Abort_IT+0x1e0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d04f      	beq.n	8006eae <HAL_DMA_Abort_IT+0x1aa>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a35      	ldr	r2, [pc, #212]	; (8006ee8 <HAL_DMA_Abort_IT+0x1e4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d048      	beq.n	8006eaa <HAL_DMA_Abort_IT+0x1a6>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a33      	ldr	r2, [pc, #204]	; (8006eec <HAL_DMA_Abort_IT+0x1e8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d040      	beq.n	8006ea4 <HAL_DMA_Abort_IT+0x1a0>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a32      	ldr	r2, [pc, #200]	; (8006ef0 <HAL_DMA_Abort_IT+0x1ec>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d038      	beq.n	8006e9e <HAL_DMA_Abort_IT+0x19a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a30      	ldr	r2, [pc, #192]	; (8006ef4 <HAL_DMA_Abort_IT+0x1f0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d030      	beq.n	8006e98 <HAL_DMA_Abort_IT+0x194>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2f      	ldr	r2, [pc, #188]	; (8006ef8 <HAL_DMA_Abort_IT+0x1f4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d028      	beq.n	8006e92 <HAL_DMA_Abort_IT+0x18e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <HAL_DMA_Abort_IT+0x1dc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d020      	beq.n	8006e8c <HAL_DMA_Abort_IT+0x188>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a2b      	ldr	r2, [pc, #172]	; (8006efc <HAL_DMA_Abort_IT+0x1f8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d019      	beq.n	8006e88 <HAL_DMA_Abort_IT+0x184>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <HAL_DMA_Abort_IT+0x1fc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d012      	beq.n	8006e84 <HAL_DMA_Abort_IT+0x180>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <HAL_DMA_Abort_IT+0x200>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00a      	beq.n	8006e7e <HAL_DMA_Abort_IT+0x17a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a26      	ldr	r2, [pc, #152]	; (8006f08 <HAL_DMA_Abort_IT+0x204>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d102      	bne.n	8006e78 <HAL_DMA_Abort_IT+0x174>
 8006e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e76:	e01b      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e7c:	e018      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e82:	e015      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e84:	2310      	movs	r3, #16
 8006e86:	e013      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e011      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e90:	e00e      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e96:	e00b      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e9c:	e008      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ea2:	e005      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ea8:	e002      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006eaa:	2310      	movs	r3, #16
 8006eac:	e000      	b.n	8006eb0 <HAL_DMA_Abort_IT+0x1ac>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_DMA_Abort_IT+0x20c>)
 8006eb2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
    } 
  }
  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	40020080 	.word	0x40020080
 8006ee4:	40020008 	.word	0x40020008
 8006ee8:	4002001c 	.word	0x4002001c
 8006eec:	40020030 	.word	0x40020030
 8006ef0:	40020044 	.word	0x40020044
 8006ef4:	40020058 	.word	0x40020058
 8006ef8:	4002006c 	.word	0x4002006c
 8006efc:	40020408 	.word	0x40020408
 8006f00:	4002041c 	.word	0x4002041c
 8006f04:	40020430 	.word	0x40020430
 8006f08:	40020444 	.word	0x40020444
 8006f0c:	40020400 	.word	0x40020400
 8006f10:	40020000 	.word	0x40020000

08006f14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	2204      	movs	r2, #4
 8006f32:	409a      	lsls	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80d6 	beq.w	80070ea <HAL_DMA_IRQHandler+0x1d6>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 80d0 	beq.w	80070ea <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d107      	bne.n	8006f68 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0204 	bic.w	r2, r2, #4
 8006f66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	4b9b      	ldr	r3, [pc, #620]	; (80071dc <HAL_DMA_IRQHandler+0x2c8>)
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d958      	bls.n	8007026 <HAL_DMA_IRQHandler+0x112>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a99      	ldr	r2, [pc, #612]	; (80071e0 <HAL_DMA_IRQHandler+0x2cc>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d04f      	beq.n	800701e <HAL_DMA_IRQHandler+0x10a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a98      	ldr	r2, [pc, #608]	; (80071e4 <HAL_DMA_IRQHandler+0x2d0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d048      	beq.n	800701a <HAL_DMA_IRQHandler+0x106>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a96      	ldr	r2, [pc, #600]	; (80071e8 <HAL_DMA_IRQHandler+0x2d4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d040      	beq.n	8007014 <HAL_DMA_IRQHandler+0x100>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a95      	ldr	r2, [pc, #596]	; (80071ec <HAL_DMA_IRQHandler+0x2d8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d038      	beq.n	800700e <HAL_DMA_IRQHandler+0xfa>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a93      	ldr	r2, [pc, #588]	; (80071f0 <HAL_DMA_IRQHandler+0x2dc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d030      	beq.n	8007008 <HAL_DMA_IRQHandler+0xf4>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a92      	ldr	r2, [pc, #584]	; (80071f4 <HAL_DMA_IRQHandler+0x2e0>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d028      	beq.n	8007002 <HAL_DMA_IRQHandler+0xee>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a89      	ldr	r2, [pc, #548]	; (80071dc <HAL_DMA_IRQHandler+0x2c8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d020      	beq.n	8006ffc <HAL_DMA_IRQHandler+0xe8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a8e      	ldr	r2, [pc, #568]	; (80071f8 <HAL_DMA_IRQHandler+0x2e4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d019      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0xe4>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a8c      	ldr	r2, [pc, #560]	; (80071fc <HAL_DMA_IRQHandler+0x2e8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d012      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0xe0>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a8b      	ldr	r2, [pc, #556]	; (8007200 <HAL_DMA_IRQHandler+0x2ec>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00a      	beq.n	8006fee <HAL_DMA_IRQHandler+0xda>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a89      	ldr	r2, [pc, #548]	; (8007204 <HAL_DMA_IRQHandler+0x2f0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d102      	bne.n	8006fe8 <HAL_DMA_IRQHandler+0xd4>
 8006fe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fe6:	e01b      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8006fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fec:	e018      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8006fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff2:	e015      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8006ff4:	2340      	movs	r3, #64	; 0x40
 8006ff6:	e013      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	e011      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8006ffc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007000:	e00e      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8007002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007006:	e00b      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8007008:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800700c:	e008      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 800700e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007012:	e005      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 8007014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007018:	e002      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	e000      	b.n	8007020 <HAL_DMA_IRQHandler+0x10c>
 800701e:	2304      	movs	r3, #4
 8007020:	4a79      	ldr	r2, [pc, #484]	; (8007208 <HAL_DMA_IRQHandler+0x2f4>)
 8007022:	6053      	str	r3, [r2, #4]
 8007024:	e057      	b.n	80070d6 <HAL_DMA_IRQHandler+0x1c2>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a6d      	ldr	r2, [pc, #436]	; (80071e0 <HAL_DMA_IRQHandler+0x2cc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d04f      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x1bc>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a6b      	ldr	r2, [pc, #428]	; (80071e4 <HAL_DMA_IRQHandler+0x2d0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d048      	beq.n	80070cc <HAL_DMA_IRQHandler+0x1b8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a6a      	ldr	r2, [pc, #424]	; (80071e8 <HAL_DMA_IRQHandler+0x2d4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d040      	beq.n	80070c6 <HAL_DMA_IRQHandler+0x1b2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a68      	ldr	r2, [pc, #416]	; (80071ec <HAL_DMA_IRQHandler+0x2d8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d038      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x1ac>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a67      	ldr	r2, [pc, #412]	; (80071f0 <HAL_DMA_IRQHandler+0x2dc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d030      	beq.n	80070ba <HAL_DMA_IRQHandler+0x1a6>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a65      	ldr	r2, [pc, #404]	; (80071f4 <HAL_DMA_IRQHandler+0x2e0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d028      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x1a0>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a5d      	ldr	r2, [pc, #372]	; (80071dc <HAL_DMA_IRQHandler+0x2c8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d020      	beq.n	80070ae <HAL_DMA_IRQHandler+0x19a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a61      	ldr	r2, [pc, #388]	; (80071f8 <HAL_DMA_IRQHandler+0x2e4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d019      	beq.n	80070aa <HAL_DMA_IRQHandler+0x196>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a60      	ldr	r2, [pc, #384]	; (80071fc <HAL_DMA_IRQHandler+0x2e8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d012      	beq.n	80070a6 <HAL_DMA_IRQHandler+0x192>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5e      	ldr	r2, [pc, #376]	; (8007200 <HAL_DMA_IRQHandler+0x2ec>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00a      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x18c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a5d      	ldr	r2, [pc, #372]	; (8007204 <HAL_DMA_IRQHandler+0x2f0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d102      	bne.n	800709a <HAL_DMA_IRQHandler+0x186>
 8007094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007098:	e01b      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 800709a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800709e:	e018      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070a4:	e015      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	e013      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070aa:	2304      	movs	r3, #4
 80070ac:	e011      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070b2:	e00e      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070b8:	e00b      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070be:	e008      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070c4:	e005      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ca:	e002      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	e000      	b.n	80070d2 <HAL_DMA_IRQHandler+0x1be>
 80070d0:	2304      	movs	r3, #4
 80070d2:	4a4e      	ldr	r2, [pc, #312]	; (800720c <HAL_DMA_IRQHandler+0x2f8>)
 80070d4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8136 	beq.w	800734c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80070e8:	e130      	b.n	800734c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2202      	movs	r2, #2
 80070f0:	409a      	lsls	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80f8 	beq.w	80072ec <HAL_DMA_IRQHandler+0x3d8>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 80f2 	beq.w	80072ec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10b      	bne.n	800712e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 020a 	bic.w	r2, r2, #10
 8007124:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	4b29      	ldr	r3, [pc, #164]	; (80071dc <HAL_DMA_IRQHandler+0x2c8>)
 8007136:	429a      	cmp	r2, r3
 8007138:	d973      	bls.n	8007222 <HAL_DMA_IRQHandler+0x30e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <HAL_DMA_IRQHandler+0x2cc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d06a      	beq.n	800721a <HAL_DMA_IRQHandler+0x306>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <HAL_DMA_IRQHandler+0x2d0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d063      	beq.n	8007216 <HAL_DMA_IRQHandler+0x302>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a25      	ldr	r2, [pc, #148]	; (80071e8 <HAL_DMA_IRQHandler+0x2d4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d05b      	beq.n	8007210 <HAL_DMA_IRQHandler+0x2fc>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a23      	ldr	r2, [pc, #140]	; (80071ec <HAL_DMA_IRQHandler+0x2d8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d038      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x2c0>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <HAL_DMA_IRQHandler+0x2dc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d030      	beq.n	80071ce <HAL_DMA_IRQHandler+0x2ba>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a20      	ldr	r2, [pc, #128]	; (80071f4 <HAL_DMA_IRQHandler+0x2e0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d028      	beq.n	80071c8 <HAL_DMA_IRQHandler+0x2b4>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a18      	ldr	r2, [pc, #96]	; (80071dc <HAL_DMA_IRQHandler+0x2c8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d020      	beq.n	80071c2 <HAL_DMA_IRQHandler+0x2ae>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1c      	ldr	r2, [pc, #112]	; (80071f8 <HAL_DMA_IRQHandler+0x2e4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d019      	beq.n	80071be <HAL_DMA_IRQHandler+0x2aa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1b      	ldr	r2, [pc, #108]	; (80071fc <HAL_DMA_IRQHandler+0x2e8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d012      	beq.n	80071ba <HAL_DMA_IRQHandler+0x2a6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a19      	ldr	r2, [pc, #100]	; (8007200 <HAL_DMA_IRQHandler+0x2ec>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00a      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x2a0>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a18      	ldr	r2, [pc, #96]	; (8007204 <HAL_DMA_IRQHandler+0x2f0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d102      	bne.n	80071ae <HAL_DMA_IRQHandler+0x29a>
 80071a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071ac:	e036      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071b2:	e033      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071b8:	e030      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071ba:	2320      	movs	r3, #32
 80071bc:	e02e      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071be:	2302      	movs	r3, #2
 80071c0:	e02c      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071c6:	e029      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80071cc:	e026      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071d2:	e023      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071d8:	e020      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 80071da:	bf00      	nop
 80071dc:	40020080 	.word	0x40020080
 80071e0:	40020008 	.word	0x40020008
 80071e4:	4002001c 	.word	0x4002001c
 80071e8:	40020030 	.word	0x40020030
 80071ec:	40020044 	.word	0x40020044
 80071f0:	40020058 	.word	0x40020058
 80071f4:	4002006c 	.word	0x4002006c
 80071f8:	40020408 	.word	0x40020408
 80071fc:	4002041c 	.word	0x4002041c
 8007200:	40020430 	.word	0x40020430
 8007204:	40020444 	.word	0x40020444
 8007208:	40020400 	.word	0x40020400
 800720c:	40020000 	.word	0x40020000
 8007210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007214:	e002      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 8007216:	2320      	movs	r3, #32
 8007218:	e000      	b.n	800721c <HAL_DMA_IRQHandler+0x308>
 800721a:	2302      	movs	r3, #2
 800721c:	4a4e      	ldr	r2, [pc, #312]	; (8007358 <HAL_DMA_IRQHandler+0x444>)
 800721e:	6053      	str	r3, [r2, #4]
 8007220:	e057      	b.n	80072d2 <HAL_DMA_IRQHandler+0x3be>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a4d      	ldr	r2, [pc, #308]	; (800735c <HAL_DMA_IRQHandler+0x448>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04f      	beq.n	80072cc <HAL_DMA_IRQHandler+0x3b8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a4b      	ldr	r2, [pc, #300]	; (8007360 <HAL_DMA_IRQHandler+0x44c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d048      	beq.n	80072c8 <HAL_DMA_IRQHandler+0x3b4>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a4a      	ldr	r2, [pc, #296]	; (8007364 <HAL_DMA_IRQHandler+0x450>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d040      	beq.n	80072c2 <HAL_DMA_IRQHandler+0x3ae>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a48      	ldr	r2, [pc, #288]	; (8007368 <HAL_DMA_IRQHandler+0x454>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d038      	beq.n	80072bc <HAL_DMA_IRQHandler+0x3a8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a47      	ldr	r2, [pc, #284]	; (800736c <HAL_DMA_IRQHandler+0x458>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d030      	beq.n	80072b6 <HAL_DMA_IRQHandler+0x3a2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a45      	ldr	r2, [pc, #276]	; (8007370 <HAL_DMA_IRQHandler+0x45c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d028      	beq.n	80072b0 <HAL_DMA_IRQHandler+0x39c>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a44      	ldr	r2, [pc, #272]	; (8007374 <HAL_DMA_IRQHandler+0x460>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d020      	beq.n	80072aa <HAL_DMA_IRQHandler+0x396>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a42      	ldr	r2, [pc, #264]	; (8007378 <HAL_DMA_IRQHandler+0x464>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d019      	beq.n	80072a6 <HAL_DMA_IRQHandler+0x392>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a41      	ldr	r2, [pc, #260]	; (800737c <HAL_DMA_IRQHandler+0x468>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d012      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x38e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a3f      	ldr	r2, [pc, #252]	; (8007380 <HAL_DMA_IRQHandler+0x46c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00a      	beq.n	800729c <HAL_DMA_IRQHandler+0x388>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3e      	ldr	r2, [pc, #248]	; (8007384 <HAL_DMA_IRQHandler+0x470>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d102      	bne.n	8007296 <HAL_DMA_IRQHandler+0x382>
 8007290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007294:	e01b      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 8007296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800729a:	e018      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 800729c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072a0:	e015      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072a2:	2320      	movs	r3, #32
 80072a4:	e013      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e011      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ae:	e00e      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80072b4:	e00b      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ba:	e008      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072c0:	e005      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c6:	e002      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072c8:	2320      	movs	r3, #32
 80072ca:	e000      	b.n	80072ce <HAL_DMA_IRQHandler+0x3ba>
 80072cc:	2302      	movs	r3, #2
 80072ce:	4a2e      	ldr	r2, [pc, #184]	; (8007388 <HAL_DMA_IRQHandler+0x474>)
 80072d0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d034      	beq.n	800734c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80072ea:	e02f      	b.n	800734c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	2208      	movs	r2, #8
 80072f2:	409a      	lsls	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4013      	ands	r3, r2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d028      	beq.n	800734e <HAL_DMA_IRQHandler+0x43a>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 0308 	and.w	r3, r3, #8
 8007302:	2b00      	cmp	r3, #0
 8007304:	d023      	beq.n	800734e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 020e 	bic.w	r2, r2, #14
 8007314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	2101      	movs	r1, #1
 8007320:	fa01 f202 	lsl.w	r2, r1, r2
 8007324:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
    }
  }
  return;
 800734c:	bf00      	nop
 800734e:	bf00      	nop
}
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40020400 	.word	0x40020400
 800735c:	40020008 	.word	0x40020008
 8007360:	4002001c 	.word	0x4002001c
 8007364:	40020030 	.word	0x40020030
 8007368:	40020044 	.word	0x40020044
 800736c:	40020058 	.word	0x40020058
 8007370:	4002006c 	.word	0x4002006c
 8007374:	40020080 	.word	0x40020080
 8007378:	40020408 	.word	0x40020408
 800737c:	4002041c 	.word	0x4002041c
 8007380:	40020430 	.word	0x40020430
 8007384:	40020444 	.word	0x40020444
 8007388:	40020000 	.word	0x40020000

0800738c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a2:	2101      	movs	r1, #1
 80073a4:	fa01 f202 	lsl.w	r2, r1, r2
 80073a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d108      	bne.n	80073cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80073ca:	e007      	b.n	80073dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	60da      	str	r2, [r3, #12]
}
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr
	...

080073e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b08b      	sub	sp, #44	; 0x2c
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073f2:	2300      	movs	r3, #0
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80073f6:	2300      	movs	r3, #0
 80073f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073fa:	e179      	b.n	80076f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80073fc:	2201      	movs	r2, #1
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	4013      	ands	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	429a      	cmp	r2, r3
 8007416:	f040 8168 	bne.w	80076ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4aa0      	ldr	r2, [pc, #640]	; (80076a0 <HAL_GPIO_Init+0x2b8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d05e      	beq.n	80074e2 <HAL_GPIO_Init+0xfa>
 8007424:	4a9e      	ldr	r2, [pc, #632]	; (80076a0 <HAL_GPIO_Init+0x2b8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d875      	bhi.n	8007516 <HAL_GPIO_Init+0x12e>
 800742a:	4a9e      	ldr	r2, [pc, #632]	; (80076a4 <HAL_GPIO_Init+0x2bc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d058      	beq.n	80074e2 <HAL_GPIO_Init+0xfa>
 8007430:	4a9c      	ldr	r2, [pc, #624]	; (80076a4 <HAL_GPIO_Init+0x2bc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d86f      	bhi.n	8007516 <HAL_GPIO_Init+0x12e>
 8007436:	4a9c      	ldr	r2, [pc, #624]	; (80076a8 <HAL_GPIO_Init+0x2c0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d052      	beq.n	80074e2 <HAL_GPIO_Init+0xfa>
 800743c:	4a9a      	ldr	r2, [pc, #616]	; (80076a8 <HAL_GPIO_Init+0x2c0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d869      	bhi.n	8007516 <HAL_GPIO_Init+0x12e>
 8007442:	4a9a      	ldr	r2, [pc, #616]	; (80076ac <HAL_GPIO_Init+0x2c4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d04c      	beq.n	80074e2 <HAL_GPIO_Init+0xfa>
 8007448:	4a98      	ldr	r2, [pc, #608]	; (80076ac <HAL_GPIO_Init+0x2c4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d863      	bhi.n	8007516 <HAL_GPIO_Init+0x12e>
 800744e:	4a98      	ldr	r2, [pc, #608]	; (80076b0 <HAL_GPIO_Init+0x2c8>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d046      	beq.n	80074e2 <HAL_GPIO_Init+0xfa>
 8007454:	4a96      	ldr	r2, [pc, #600]	; (80076b0 <HAL_GPIO_Init+0x2c8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d85d      	bhi.n	8007516 <HAL_GPIO_Init+0x12e>
 800745a:	2b12      	cmp	r3, #18
 800745c:	d82a      	bhi.n	80074b4 <HAL_GPIO_Init+0xcc>
 800745e:	2b12      	cmp	r3, #18
 8007460:	d859      	bhi.n	8007516 <HAL_GPIO_Init+0x12e>
 8007462:	a201      	add	r2, pc, #4	; (adr r2, 8007468 <HAL_GPIO_Init+0x80>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	080074e3 	.word	0x080074e3
 800746c:	080074bd 	.word	0x080074bd
 8007470:	080074cf 	.word	0x080074cf
 8007474:	08007511 	.word	0x08007511
 8007478:	08007517 	.word	0x08007517
 800747c:	08007517 	.word	0x08007517
 8007480:	08007517 	.word	0x08007517
 8007484:	08007517 	.word	0x08007517
 8007488:	08007517 	.word	0x08007517
 800748c:	08007517 	.word	0x08007517
 8007490:	08007517 	.word	0x08007517
 8007494:	08007517 	.word	0x08007517
 8007498:	08007517 	.word	0x08007517
 800749c:	08007517 	.word	0x08007517
 80074a0:	08007517 	.word	0x08007517
 80074a4:	08007517 	.word	0x08007517
 80074a8:	08007517 	.word	0x08007517
 80074ac:	080074c5 	.word	0x080074c5
 80074b0:	080074d9 	.word	0x080074d9
 80074b4:	4a7f      	ldr	r2, [pc, #508]	; (80076b4 <HAL_GPIO_Init+0x2cc>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d013      	beq.n	80074e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80074ba:	e02c      	b.n	8007516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	623b      	str	r3, [r7, #32]
          break;
 80074c2:	e029      	b.n	8007518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	3304      	adds	r3, #4
 80074ca:	623b      	str	r3, [r7, #32]
          break;
 80074cc:	e024      	b.n	8007518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	3308      	adds	r3, #8
 80074d4:	623b      	str	r3, [r7, #32]
          break;
 80074d6:	e01f      	b.n	8007518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	330c      	adds	r3, #12
 80074de:	623b      	str	r3, [r7, #32]
          break;
 80074e0:	e01a      	b.n	8007518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80074ea:	2304      	movs	r3, #4
 80074ec:	623b      	str	r3, [r7, #32]
          break;
 80074ee:	e013      	b.n	8007518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d105      	bne.n	8007504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80074f8:	2308      	movs	r3, #8
 80074fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	611a      	str	r2, [r3, #16]
          break;
 8007502:	e009      	b.n	8007518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007504:	2308      	movs	r3, #8
 8007506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	615a      	str	r2, [r3, #20]
          break;
 800750e:	e003      	b.n	8007518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007510:	2300      	movs	r3, #0
 8007512:	623b      	str	r3, [r7, #32]
          break;
 8007514:	e000      	b.n	8007518 <HAL_GPIO_Init+0x130>
          break;
 8007516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2bff      	cmp	r3, #255	; 0xff
 800751c:	d801      	bhi.n	8007522 <HAL_GPIO_Init+0x13a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	e001      	b.n	8007526 <HAL_GPIO_Init+0x13e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3304      	adds	r3, #4
 8007526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2bff      	cmp	r3, #255	; 0xff
 800752c:	d802      	bhi.n	8007534 <HAL_GPIO_Init+0x14c>
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	e002      	b.n	800753a <HAL_GPIO_Init+0x152>
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	3b08      	subs	r3, #8
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	210f      	movs	r1, #15
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	401a      	ands	r2, r3
 800754c:	6a39      	ldr	r1, [r7, #32]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	fa01 f303 	lsl.w	r3, r1, r3
 8007554:	431a      	orrs	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 80c1 	beq.w	80076ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007568:	4b53      	ldr	r3, [pc, #332]	; (80076b8 <HAL_GPIO_Init+0x2d0>)
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	4a52      	ldr	r2, [pc, #328]	; (80076b8 <HAL_GPIO_Init+0x2d0>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6193      	str	r3, [r2, #24]
 8007574:	4b50      	ldr	r3, [pc, #320]	; (80076b8 <HAL_GPIO_Init+0x2d0>)
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	60bb      	str	r3, [r7, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007580:	4a4e      	ldr	r2, [pc, #312]	; (80076bc <HAL_GPIO_Init+0x2d4>)
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	089b      	lsrs	r3, r3, #2
 8007586:	3302      	adds	r3, #2
 8007588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	f003 0303 	and.w	r3, r3, #3
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	220f      	movs	r2, #15
 8007598:	fa02 f303 	lsl.w	r3, r2, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4013      	ands	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a46      	ldr	r2, [pc, #280]	; (80076c0 <HAL_GPIO_Init+0x2d8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d01f      	beq.n	80075ec <HAL_GPIO_Init+0x204>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a45      	ldr	r2, [pc, #276]	; (80076c4 <HAL_GPIO_Init+0x2dc>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d019      	beq.n	80075e8 <HAL_GPIO_Init+0x200>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a44      	ldr	r2, [pc, #272]	; (80076c8 <HAL_GPIO_Init+0x2e0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <HAL_GPIO_Init+0x1fc>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a43      	ldr	r2, [pc, #268]	; (80076cc <HAL_GPIO_Init+0x2e4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00d      	beq.n	80075e0 <HAL_GPIO_Init+0x1f8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a42      	ldr	r2, [pc, #264]	; (80076d0 <HAL_GPIO_Init+0x2e8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d007      	beq.n	80075dc <HAL_GPIO_Init+0x1f4>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a41      	ldr	r2, [pc, #260]	; (80076d4 <HAL_GPIO_Init+0x2ec>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d101      	bne.n	80075d8 <HAL_GPIO_Init+0x1f0>
 80075d4:	2305      	movs	r3, #5
 80075d6:	e00a      	b.n	80075ee <HAL_GPIO_Init+0x206>
 80075d8:	2306      	movs	r3, #6
 80075da:	e008      	b.n	80075ee <HAL_GPIO_Init+0x206>
 80075dc:	2304      	movs	r3, #4
 80075de:	e006      	b.n	80075ee <HAL_GPIO_Init+0x206>
 80075e0:	2303      	movs	r3, #3
 80075e2:	e004      	b.n	80075ee <HAL_GPIO_Init+0x206>
 80075e4:	2302      	movs	r3, #2
 80075e6:	e002      	b.n	80075ee <HAL_GPIO_Init+0x206>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <HAL_GPIO_Init+0x206>
 80075ec:	2300      	movs	r3, #0
 80075ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f0:	f002 0203 	and.w	r2, r2, #3
 80075f4:	0092      	lsls	r2, r2, #2
 80075f6:	4093      	lsls	r3, r2
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80075fe:	492f      	ldr	r1, [pc, #188]	; (80076bc <HAL_GPIO_Init+0x2d4>)
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	089b      	lsrs	r3, r3, #2
 8007604:	3302      	adds	r3, #2
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d006      	beq.n	8007626 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007618:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	492e      	ldr	r1, [pc, #184]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	4313      	orrs	r3, r2
 8007622:	600b      	str	r3, [r1, #0]
 8007624:	e006      	b.n	8007634 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007626:	4b2c      	ldr	r3, [pc, #176]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	43db      	mvns	r3, r3
 800762e:	492a      	ldr	r1, [pc, #168]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007630:	4013      	ands	r3, r2
 8007632:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007642:	685a      	ldr	r2, [r3, #4]
 8007644:	4924      	ldr	r1, [pc, #144]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	4313      	orrs	r3, r2
 800764a:	604b      	str	r3, [r1, #4]
 800764c:	e006      	b.n	800765c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800764e:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	43db      	mvns	r3, r3
 8007656:	4920      	ldr	r1, [pc, #128]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007658:	4013      	ands	r3, r2
 800765a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	491a      	ldr	r1, [pc, #104]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	4313      	orrs	r3, r2
 8007672:	608b      	str	r3, [r1, #8]
 8007674:	e006      	b.n	8007684 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007676:	4b18      	ldr	r3, [pc, #96]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007678:	689a      	ldr	r2, [r3, #8]
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	43db      	mvns	r3, r3
 800767e:	4916      	ldr	r1, [pc, #88]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007680:	4013      	ands	r3, r2
 8007682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d025      	beq.n	80076dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007690:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	4910      	ldr	r1, [pc, #64]	; (80076d8 <HAL_GPIO_Init+0x2f0>)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	4313      	orrs	r3, r2
 800769a:	60cb      	str	r3, [r1, #12]
 800769c:	e025      	b.n	80076ea <HAL_GPIO_Init+0x302>
 800769e:	bf00      	nop
 80076a0:	10320000 	.word	0x10320000
 80076a4:	10310000 	.word	0x10310000
 80076a8:	10220000 	.word	0x10220000
 80076ac:	10210000 	.word	0x10210000
 80076b0:	10120000 	.word	0x10120000
 80076b4:	10110000 	.word	0x10110000
 80076b8:	40021000 	.word	0x40021000
 80076bc:	40010000 	.word	0x40010000
 80076c0:	40010800 	.word	0x40010800
 80076c4:	40010c00 	.word	0x40010c00
 80076c8:	40011000 	.word	0x40011000
 80076cc:	40011400 	.word	0x40011400
 80076d0:	40011800 	.word	0x40011800
 80076d4:	40011c00 	.word	0x40011c00
 80076d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80076dc:	4b0b      	ldr	r3, [pc, #44]	; (800770c <HAL_GPIO_Init+0x324>)
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	43db      	mvns	r3, r3
 80076e4:	4909      	ldr	r1, [pc, #36]	; (800770c <HAL_GPIO_Init+0x324>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	3301      	adds	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	fa22 f303 	lsr.w	r3, r2, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f47f ae7e 	bne.w	80073fc <HAL_GPIO_Init+0x14>
  }
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	372c      	adds	r7, #44	; 0x2c
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr
 800770c:	40010400 	.word	0x40010400

08007710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	887b      	ldrh	r3, [r7, #2]
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007728:	2301      	movs	r3, #1
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e001      	b.n	8007732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	807b      	strh	r3, [r7, #2]
 800774a:	4613      	mov	r3, r2
 800774c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800774e:	787b      	ldrb	r3, [r7, #1]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007754:	887a      	ldrh	r2, [r7, #2]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800775a:	e003      	b.n	8007764 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800775c:	887b      	ldrh	r3, [r7, #2]
 800775e:	041a      	lsls	r2, r3, #16
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	611a      	str	r2, [r3, #16]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr
	...

08007770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800777a:	4b08      	ldr	r3, [pc, #32]	; (800779c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	4013      	ands	r3, r2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007786:	4a05      	ldr	r2, [pc, #20]	; (800779c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fa fbbe 	bl	8001f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40010400 	.word	0x40010400

080077a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e26c      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8087 	beq.w	80078ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077c0:	4b92      	ldr	r3, [pc, #584]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 030c 	and.w	r3, r3, #12
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d00c      	beq.n	80077e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80077cc:	4b8f      	ldr	r3, [pc, #572]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f003 030c 	and.w	r3, r3, #12
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d112      	bne.n	80077fe <HAL_RCC_OscConfig+0x5e>
 80077d8:	4b8c      	ldr	r3, [pc, #560]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e4:	d10b      	bne.n	80077fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e6:	4b89      	ldr	r3, [pc, #548]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d06c      	beq.n	80078cc <HAL_RCC_OscConfig+0x12c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d168      	bne.n	80078cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e246      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007806:	d106      	bne.n	8007816 <HAL_RCC_OscConfig+0x76>
 8007808:	4b80      	ldr	r3, [pc, #512]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a7f      	ldr	r2, [pc, #508]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 800780e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e02e      	b.n	8007874 <HAL_RCC_OscConfig+0xd4>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10c      	bne.n	8007838 <HAL_RCC_OscConfig+0x98>
 800781e:	4b7b      	ldr	r3, [pc, #492]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a7a      	ldr	r2, [pc, #488]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	4b78      	ldr	r3, [pc, #480]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a77      	ldr	r2, [pc, #476]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	e01d      	b.n	8007874 <HAL_RCC_OscConfig+0xd4>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007840:	d10c      	bne.n	800785c <HAL_RCC_OscConfig+0xbc>
 8007842:	4b72      	ldr	r3, [pc, #456]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a71      	ldr	r2, [pc, #452]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	4b6f      	ldr	r3, [pc, #444]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a6e      	ldr	r2, [pc, #440]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	e00b      	b.n	8007874 <HAL_RCC_OscConfig+0xd4>
 800785c:	4b6b      	ldr	r3, [pc, #428]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a6a      	ldr	r2, [pc, #424]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	4b68      	ldr	r3, [pc, #416]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a67      	ldr	r2, [pc, #412]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 800786e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d013      	beq.n	80078a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787c:	f7fd fd76 	bl	800536c <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007884:	f7fd fd72 	bl	800536c <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b64      	cmp	r3, #100	; 0x64
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e1fa      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007896:	4b5d      	ldr	r3, [pc, #372]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0xe4>
 80078a2:	e014      	b.n	80078ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a4:	f7fd fd62 	bl	800536c <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ac:	f7fd fd5e 	bl	800536c <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b64      	cmp	r3, #100	; 0x64
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e1e6      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078be:	4b53      	ldr	r3, [pc, #332]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f0      	bne.n	80078ac <HAL_RCC_OscConfig+0x10c>
 80078ca:	e000      	b.n	80078ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d063      	beq.n	80079a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078da:	4b4c      	ldr	r3, [pc, #304]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f003 030c 	and.w	r3, r3, #12
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80078e6:	4b49      	ldr	r3, [pc, #292]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d11c      	bne.n	800792c <HAL_RCC_OscConfig+0x18c>
 80078f2:	4b46      	ldr	r3, [pc, #280]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d116      	bne.n	800792c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078fe:	4b43      	ldr	r3, [pc, #268]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0302 	and.w	r3, r3, #2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_RCC_OscConfig+0x176>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d001      	beq.n	8007916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e1ba      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007916:	4b3d      	ldr	r3, [pc, #244]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4939      	ldr	r1, [pc, #228]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007926:	4313      	orrs	r3, r2
 8007928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800792a:	e03a      	b.n	80079a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d020      	beq.n	8007976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007934:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <HAL_RCC_OscConfig+0x270>)
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800793a:	f7fd fd17 	bl	800536c <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007942:	f7fd fd13 	bl	800536c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e19b      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007954:	4b2d      	ldr	r3, [pc, #180]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007960:	4b2a      	ldr	r3, [pc, #168]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	4927      	ldr	r1, [pc, #156]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]
 8007974:	e015      	b.n	80079a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007976:	4b26      	ldr	r3, [pc, #152]	; (8007a10 <HAL_RCC_OscConfig+0x270>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800797c:	f7fd fcf6 	bl	800536c <HAL_GetTick>
 8007980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007984:	f7fd fcf2 	bl	800536c <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e17a      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007996:	4b1d      	ldr	r3, [pc, #116]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1f0      	bne.n	8007984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d03a      	beq.n	8007a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d019      	beq.n	80079ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079b6:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <HAL_RCC_OscConfig+0x274>)
 80079b8:	2201      	movs	r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079bc:	f7fd fcd6 	bl	800536c <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079c4:	f7fd fcd2 	bl	800536c <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e15a      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <HAL_RCC_OscConfig+0x26c>)
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f0      	beq.n	80079c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80079e2:	2001      	movs	r0, #1
 80079e4:	f000 fb08 	bl	8007ff8 <RCC_Delay>
 80079e8:	e01c      	b.n	8007a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <HAL_RCC_OscConfig+0x274>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f0:	f7fd fcbc 	bl	800536c <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079f6:	e00f      	b.n	8007a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079f8:	f7fd fcb8 	bl	800536c <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d908      	bls.n	8007a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e140      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
 8007a0a:	bf00      	nop
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	42420000 	.word	0x42420000
 8007a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a18:	4b9e      	ldr	r3, [pc, #632]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e9      	bne.n	80079f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a6 	beq.w	8007b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a36:	4b97      	ldr	r3, [pc, #604]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10d      	bne.n	8007a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a42:	4b94      	ldr	r3, [pc, #592]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	4a93      	ldr	r2, [pc, #588]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	61d3      	str	r3, [r2, #28]
 8007a4e:	4b91      	ldr	r3, [pc, #580]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a56:	60bb      	str	r3, [r7, #8]
 8007a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a5e:	4b8e      	ldr	r3, [pc, #568]	; (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d118      	bne.n	8007a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a6a:	4b8b      	ldr	r3, [pc, #556]	; (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a8a      	ldr	r2, [pc, #552]	; (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a76:	f7fd fc79 	bl	800536c <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a7c:	e008      	b.n	8007a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a7e:	f7fd fc75 	bl	800536c <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b64      	cmp	r3, #100	; 0x64
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e0fd      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a90:	4b81      	ldr	r3, [pc, #516]	; (8007c98 <HAL_RCC_OscConfig+0x4f8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d106      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x312>
 8007aa4:	4b7b      	ldr	r3, [pc, #492]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	4a7a      	ldr	r2, [pc, #488]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007aaa:	f043 0301 	orr.w	r3, r3, #1
 8007aae:	6213      	str	r3, [r2, #32]
 8007ab0:	e02d      	b.n	8007b0e <HAL_RCC_OscConfig+0x36e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10c      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x334>
 8007aba:	4b76      	ldr	r3, [pc, #472]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	4a75      	ldr	r2, [pc, #468]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	6213      	str	r3, [r2, #32]
 8007ac6:	4b73      	ldr	r3, [pc, #460]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	4a72      	ldr	r2, [pc, #456]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007acc:	f023 0304 	bic.w	r3, r3, #4
 8007ad0:	6213      	str	r3, [r2, #32]
 8007ad2:	e01c      	b.n	8007b0e <HAL_RCC_OscConfig+0x36e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b05      	cmp	r3, #5
 8007ada:	d10c      	bne.n	8007af6 <HAL_RCC_OscConfig+0x356>
 8007adc:	4b6d      	ldr	r3, [pc, #436]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	4a6c      	ldr	r2, [pc, #432]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007ae2:	f043 0304 	orr.w	r3, r3, #4
 8007ae6:	6213      	str	r3, [r2, #32]
 8007ae8:	4b6a      	ldr	r3, [pc, #424]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	4a69      	ldr	r2, [pc, #420]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	6213      	str	r3, [r2, #32]
 8007af4:	e00b      	b.n	8007b0e <HAL_RCC_OscConfig+0x36e>
 8007af6:	4b67      	ldr	r3, [pc, #412]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	4a66      	ldr	r2, [pc, #408]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	6213      	str	r3, [r2, #32]
 8007b02:	4b64      	ldr	r3, [pc, #400]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	4a63      	ldr	r2, [pc, #396]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b08:	f023 0304 	bic.w	r3, r3, #4
 8007b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d015      	beq.n	8007b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b16:	f7fd fc29 	bl	800536c <HAL_GetTick>
 8007b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1c:	e00a      	b.n	8007b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b1e:	f7fd fc25 	bl	800536c <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e0ab      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b34:	4b57      	ldr	r3, [pc, #348]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0ee      	beq.n	8007b1e <HAL_RCC_OscConfig+0x37e>
 8007b40:	e014      	b.n	8007b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b42:	f7fd fc13 	bl	800536c <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b48:	e00a      	b.n	8007b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b4a:	f7fd fc0f 	bl	800536c <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d901      	bls.n	8007b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e095      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b60:	4b4c      	ldr	r3, [pc, #304]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	f003 0302 	and.w	r3, r3, #2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1ee      	bne.n	8007b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d105      	bne.n	8007b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b72:	4b48      	ldr	r3, [pc, #288]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	4a47      	ldr	r2, [pc, #284]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8081 	beq.w	8007c8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b88:	4b42      	ldr	r3, [pc, #264]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f003 030c 	and.w	r3, r3, #12
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d061      	beq.n	8007c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d146      	bne.n	8007c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b9c:	4b3f      	ldr	r3, [pc, #252]	; (8007c9c <HAL_RCC_OscConfig+0x4fc>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba2:	f7fd fbe3 	bl	800536c <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007baa:	f7fd fbdf 	bl	800536c <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e067      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007bbc:	4b35      	ldr	r3, [pc, #212]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1f0      	bne.n	8007baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd0:	d108      	bne.n	8007be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007bd2:	4b30      	ldr	r3, [pc, #192]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	492d      	ldr	r1, [pc, #180]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007be4:	4b2b      	ldr	r3, [pc, #172]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a19      	ldr	r1, [r3, #32]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	4927      	ldr	r1, [pc, #156]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bfc:	4b27      	ldr	r3, [pc, #156]	; (8007c9c <HAL_RCC_OscConfig+0x4fc>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c02:	f7fd fbb3 	bl	800536c <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c08:	e008      	b.n	8007c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c0a:	f7fd fbaf 	bl	800536c <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d901      	bls.n	8007c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e037      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0f0      	beq.n	8007c0a <HAL_RCC_OscConfig+0x46a>
 8007c28:	e02f      	b.n	8007c8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <HAL_RCC_OscConfig+0x4fc>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c30:	f7fd fb9c 	bl	800536c <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c38:	f7fd fb98 	bl	800536c <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e020      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c4a:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x498>
 8007c56:	e018      	b.n	8007c8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e013      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <HAL_RCC_OscConfig+0x4f4>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d106      	bne.n	8007c86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d001      	beq.n	8007c8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e000      	b.n	8007c8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	40021000 	.word	0x40021000
 8007c98:	40007000 	.word	0x40007000
 8007c9c:	42420060 	.word	0x42420060

08007ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0d0      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cb4:	4b6a      	ldr	r3, [pc, #424]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d910      	bls.n	8007ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cc2:	4b67      	ldr	r3, [pc, #412]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f023 0207 	bic.w	r2, r3, #7
 8007cca:	4965      	ldr	r1, [pc, #404]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cd2:	4b63      	ldr	r3, [pc, #396]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d001      	beq.n	8007ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e0b8      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d020      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cfc:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	4a58      	ldr	r2, [pc, #352]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d14:	4b53      	ldr	r3, [pc, #332]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a52      	ldr	r2, [pc, #328]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d20:	4b50      	ldr	r3, [pc, #320]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	494d      	ldr	r1, [pc, #308]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d040      	beq.n	8007dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d107      	bne.n	8007d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d46:	4b47      	ldr	r3, [pc, #284]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d115      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e07f      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d5e:	4b41      	ldr	r3, [pc, #260]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e073      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d6e:	4b3d      	ldr	r3, [pc, #244]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e06b      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d7e:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f023 0203 	bic.w	r2, r3, #3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	4936      	ldr	r1, [pc, #216]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d90:	f7fd faec 	bl	800536c <HAL_GetTick>
 8007d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d96:	e00a      	b.n	8007dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d98:	f7fd fae8 	bl	800536c <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e053      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dae:	4b2d      	ldr	r3, [pc, #180]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f003 020c 	and.w	r2, r3, #12
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d1eb      	bne.n	8007d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007dc0:	4b27      	ldr	r3, [pc, #156]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d210      	bcs.n	8007df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f023 0207 	bic.w	r2, r3, #7
 8007dd6:	4922      	ldr	r1, [pc, #136]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dde:	4b20      	ldr	r3, [pc, #128]	; (8007e60 <HAL_RCC_ClockConfig+0x1c0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d001      	beq.n	8007df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e032      	b.n	8007e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d008      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	4916      	ldr	r1, [pc, #88]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	490e      	ldr	r1, [pc, #56]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e2e:	f000 f821 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <HAL_RCC_ClockConfig+0x1c4>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	490a      	ldr	r1, [pc, #40]	; (8007e68 <HAL_RCC_ClockConfig+0x1c8>)
 8007e40:	5ccb      	ldrb	r3, [r1, r3]
 8007e42:	fa22 f303 	lsr.w	r3, r2, r3
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <HAL_RCC_ClockConfig+0x1cc>)
 8007e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e4a:	4b09      	ldr	r3, [pc, #36]	; (8007e70 <HAL_RCC_ClockConfig+0x1d0>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fc fcfa 	bl	8004848 <HAL_InitTick>

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	40022000 	.word	0x40022000
 8007e64:	40021000 	.word	0x40021000
 8007e68:	0801cf58 	.word	0x0801cf58
 8007e6c:	2000001c 	.word	0x2000001c
 8007e70:	20000020 	.word	0x20000020

08007e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e74:	b490      	push	{r4, r7}
 8007e76:	b08a      	sub	sp, #40	; 0x28
 8007e78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007e7a:	4b2a      	ldr	r3, [pc, #168]	; (8007f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007e7c:	1d3c      	adds	r4, r7, #4
 8007e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007e84:	f240 2301 	movw	r3, #513	; 0x201
 8007e88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61fb      	str	r3, [r7, #28]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
 8007e92:	2300      	movs	r3, #0
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
 8007e96:	2300      	movs	r3, #0
 8007e98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007e9e:	4b22      	ldr	r3, [pc, #136]	; (8007f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	f003 030c 	and.w	r3, r3, #12
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d002      	beq.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8007eae:	2b08      	cmp	r3, #8
 8007eb0:	d003      	beq.n	8007eba <HAL_RCC_GetSysClockFreq+0x46>
 8007eb2:	e02d      	b.n	8007f10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	; (8007f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007eb6:	623b      	str	r3, [r7, #32]
      break;
 8007eb8:	e02d      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	0c9b      	lsrs	r3, r3, #18
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007ecc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d013      	beq.n	8007f00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ed8:	4b13      	ldr	r3, [pc, #76]	; (8007f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	0c5b      	lsrs	r3, r3, #17
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007eec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4a0e      	ldr	r2, [pc, #56]	; (8007f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007ef2:	fb02 f203 	mul.w	r2, r2, r3
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
 8007efe:	e004      	b.n	8007f0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4a0b      	ldr	r2, [pc, #44]	; (8007f30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f04:	fb02 f303 	mul.w	r3, r2, r3
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	623b      	str	r3, [r7, #32]
      break;
 8007f0e:	e002      	b.n	8007f16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f12:	623b      	str	r3, [r7, #32]
      break;
 8007f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f16:	6a3b      	ldr	r3, [r7, #32]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3728      	adds	r7, #40	; 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc90      	pop	{r4, r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	0801c230 	.word	0x0801c230
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	007a1200 	.word	0x007a1200
 8007f30:	003d0900 	.word	0x003d0900

08007f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr
 8007f44:	2000001c 	.word	0x2000001c

08007f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f4c:	f7ff fff2 	bl	8007f34 <HAL_RCC_GetHCLKFreq>
 8007f50:	4602      	mov	r2, r0
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 0307 	and.w	r3, r3, #7
 8007f5c:	4903      	ldr	r1, [pc, #12]	; (8007f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f5e:	5ccb      	ldrb	r3, [r1, r3]
 8007f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	0801cf68 	.word	0x0801cf68

08007f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f74:	f7ff ffde 	bl	8007f34 <HAL_RCC_GetHCLKFreq>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	0adb      	lsrs	r3, r3, #11
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	4903      	ldr	r1, [pc, #12]	; (8007f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f86:	5ccb      	ldrb	r3, [r1, r3]
 8007f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	40021000 	.word	0x40021000
 8007f94:	0801cf68 	.word	0x0801cf68

08007f98 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	220f      	movs	r2, #15
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f003 0203 	and.w	r2, r3, #3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007fcc:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <HAL_RCC_GetClockConfig+0x58>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	08db      	lsrs	r3, r3, #3
 8007fd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fda:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0207 	and.w	r2, r3, #7
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007fe6:	bf00      	nop
 8007fe8:	370c      	adds	r7, #12
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	40022000 	.word	0x40022000

08007ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <RCC_Delay+0x34>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0a      	ldr	r2, [pc, #40]	; (8008030 <RCC_Delay+0x38>)
 8008006:	fba2 2303 	umull	r2, r3, r2, r3
 800800a:	0a5b      	lsrs	r3, r3, #9
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	fb02 f303 	mul.w	r3, r2, r3
 8008012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008014:	bf00      	nop
  }
  while (Delay --);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	1e5a      	subs	r2, r3, #1
 800801a:	60fa      	str	r2, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1f9      	bne.n	8008014 <RCC_Delay+0x1c>
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr
 800802c:	2000001c 	.word	0x2000001c
 8008030:	10624dd3 	.word	0x10624dd3

08008034 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800803c:	2300      	movs	r3, #0
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	2300      	movs	r3, #0
 8008042:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d07d      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008050:	2300      	movs	r3, #0
 8008052:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008054:	4b4f      	ldr	r3, [pc, #316]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10d      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008060:	4b4c      	ldr	r3, [pc, #304]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	4a4b      	ldr	r2, [pc, #300]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800806a:	61d3      	str	r3, [r2, #28]
 800806c:	4b49      	ldr	r3, [pc, #292]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800807c:	4b46      	ldr	r3, [pc, #280]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008084:	2b00      	cmp	r3, #0
 8008086:	d118      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008088:	4b43      	ldr	r3, [pc, #268]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a42      	ldr	r2, [pc, #264]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800808e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008094:	f7fd f96a 	bl	800536c <HAL_GetTick>
 8008098:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800809a:	e008      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800809c:	f7fd f966 	bl	800536c <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	2b64      	cmp	r3, #100	; 0x64
 80080a8:	d901      	bls.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e06d      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080ae:	4b3a      	ldr	r3, [pc, #232]	; (8008198 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0f0      	beq.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080ba:	4b36      	ldr	r3, [pc, #216]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d02e      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d027      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080d8:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080e2:	4b2e      	ldr	r3, [pc, #184]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080e8:	4b2c      	ldr	r3, [pc, #176]	; (800819c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80080ee:	4a29      	ldr	r2, [pc, #164]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d014      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fe:	f7fd f935 	bl	800536c <HAL_GetTick>
 8008102:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008104:	e00a      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008106:	f7fd f931 	bl	800536c <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f241 3288 	movw	r2, #5000	; 0x1388
 8008114:	4293      	cmp	r3, r2
 8008116:	d901      	bls.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e036      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d0ee      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	4917      	ldr	r1, [pc, #92]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008136:	4313      	orrs	r3, r2
 8008138:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d105      	bne.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008140:	4b14      	ldr	r3, [pc, #80]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	4a13      	ldr	r2, [pc, #76]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008158:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	490b      	ldr	r1, [pc, #44]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008166:	4313      	orrs	r3, r2
 8008168:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b00      	cmp	r3, #0
 8008174:	d008      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008176:	4b07      	ldr	r3, [pc, #28]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4904      	ldr	r1, [pc, #16]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008184:	4313      	orrs	r3, r2
 8008186:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40021000 	.word	0x40021000
 8008198:	40007000 	.word	0x40007000
 800819c:	42420440 	.word	0x42420440

080081a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b08d      	sub	sp, #52	; 0x34
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80081a8:	4b6b      	ldr	r3, [pc, #428]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80081aa:	f107 040c 	add.w	r4, r7, #12
 80081ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80081b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80081b4:	f240 2301 	movw	r3, #513	; 0x201
 80081b8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
 80081be:	2300      	movs	r3, #0
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081c2:	2300      	movs	r3, #0
 80081c4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	2300      	movs	r3, #0
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	2b0f      	cmp	r3, #15
 80081d4:	f200 80b6 	bhi.w	8008344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80081d8:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080082c3 	.word	0x080082c3
 80081e4:	08008329 	.word	0x08008329
 80081e8:	08008345 	.word	0x08008345
 80081ec:	080082b3 	.word	0x080082b3
 80081f0:	08008345 	.word	0x08008345
 80081f4:	08008345 	.word	0x08008345
 80081f8:	08008345 	.word	0x08008345
 80081fc:	080082bb 	.word	0x080082bb
 8008200:	08008345 	.word	0x08008345
 8008204:	08008345 	.word	0x08008345
 8008208:	08008345 	.word	0x08008345
 800820c:	08008345 	.word	0x08008345
 8008210:	08008345 	.word	0x08008345
 8008214:	08008345 	.word	0x08008345
 8008218:	08008345 	.word	0x08008345
 800821c:	08008221 	.word	0x08008221
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008220:	4b4e      	ldr	r3, [pc, #312]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008226:	4b4d      	ldr	r3, [pc, #308]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 808a 	beq.w	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	0c9b      	lsrs	r3, r3, #18
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008240:	4413      	add	r3, r2
 8008242:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008246:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d018      	beq.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008252:	4b42      	ldr	r3, [pc, #264]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	0c5b      	lsrs	r3, r3, #17
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008260:	4413      	add	r3, r2
 8008262:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008266:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00d      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008272:	4a3b      	ldr	r2, [pc, #236]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	fbb2 f2f3 	udiv	r2, r2, r3
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	fb02 f303 	mul.w	r3, r2, r3
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008282:	e004      	b.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	4a37      	ldr	r2, [pc, #220]	; (8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8008288:	fb02 f303 	mul.w	r3, r2, r3
 800828c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800828e:	4b33      	ldr	r3, [pc, #204]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800829a:	d102      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80082a0:	e052      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80082a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	4a30      	ldr	r2, [pc, #192]	; (8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80082a8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80082b0:	e04a      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80082b2:	f7ff fddf 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 80082b6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80082b8:	e049      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80082ba:	f7ff fddb 	bl	8007e74 <HAL_RCC_GetSysClockFreq>
 80082be:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80082c0:	e045      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80082c2:	4b26      	ldr	r3, [pc, #152]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d2:	d108      	bne.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80082de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082e4:	e01f      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f0:	d109      	bne.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80082fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008302:	62bb      	str	r3, [r7, #40]	; 0x28
 8008304:	e00f      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800830c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008310:	d11c      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008312:	4b12      	ldr	r3, [pc, #72]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d016      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 800831e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008324:	e012      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008326:	e011      	b.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008328:	f7ff fe22 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 800832c:	4602      	mov	r2, r0
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	0b9b      	lsrs	r3, r3, #14
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	3301      	adds	r3, #1
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8008342:	e004      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8008344:	bf00      	nop
 8008346:	e002      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8008348:	bf00      	nop
 800834a:	e000      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800834c:	bf00      	nop
    }
  }
  return (frequency);
 800834e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008350:	4618      	mov	r0, r3
 8008352:	3734      	adds	r7, #52	; 0x34
 8008354:	46bd      	mov	sp, r7
 8008356:	bd90      	pop	{r4, r7, pc}
 8008358:	0801c240 	.word	0x0801c240
 800835c:	40021000 	.word	0x40021000
 8008360:	007a1200 	.word	0x007a1200
 8008364:	003d0900 	.word	0x003d0900
 8008368:	aaaaaaab 	.word	0xaaaaaaab

0800836c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e041      	b.n	8008402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7fc fd14 	bl	8004dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f000 fd3c 	bl	8008e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d001      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e044      	b.n	80084ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1d      	ldr	r2, [pc, #116]	; (80084b8 <HAL_TIM_Base_Start_IT+0xac>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d018      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x6c>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a1c      	ldr	r2, [pc, #112]	; (80084bc <HAL_TIM_Base_Start_IT+0xb0>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d013      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x6c>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008458:	d00e      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x6c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a18      	ldr	r2, [pc, #96]	; (80084c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d009      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x6c>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a16      	ldr	r2, [pc, #88]	; (80084c4 <HAL_TIM_Base_Start_IT+0xb8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d004      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x6c>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a15      	ldr	r2, [pc, #84]	; (80084c8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d111      	bne.n	800849c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b06      	cmp	r3, #6
 8008488:	d010      	beq.n	80084ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0201 	orr.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800849a:	e007      	b.n	80084ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr
 80084b8:	40012c00 	.word	0x40012c00
 80084bc:	40013400 	.word	0x40013400
 80084c0:	40000400 	.word	0x40000400
 80084c4:	40000800 	.word	0x40000800
 80084c8:	40000c00 	.word	0x40000c00

080084cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e041      	b.n	8008562 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f839 	bl	800856a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f000 fc8c 	bl	8008e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr

0800857c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e041      	b.n	8008612 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f839 	bl	800861a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f000 fc34 	bl	8008e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr

0800862c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d109      	bne.n	8008650 <HAL_TIM_PWM_Start_IT+0x24>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b01      	cmp	r3, #1
 8008646:	bf14      	ite	ne
 8008648:	2301      	movne	r3, #1
 800864a:	2300      	moveq	r3, #0
 800864c:	b2db      	uxtb	r3, r3
 800864e:	e022      	b.n	8008696 <HAL_TIM_PWM_Start_IT+0x6a>
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b04      	cmp	r3, #4
 8008654:	d109      	bne.n	800866a <HAL_TIM_PWM_Start_IT+0x3e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b01      	cmp	r3, #1
 8008660:	bf14      	ite	ne
 8008662:	2301      	movne	r3, #1
 8008664:	2300      	moveq	r3, #0
 8008666:	b2db      	uxtb	r3, r3
 8008668:	e015      	b.n	8008696 <HAL_TIM_PWM_Start_IT+0x6a>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b08      	cmp	r3, #8
 800866e:	d109      	bne.n	8008684 <HAL_TIM_PWM_Start_IT+0x58>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008676:	b2db      	uxtb	r3, r3
 8008678:	2b01      	cmp	r3, #1
 800867a:	bf14      	ite	ne
 800867c:	2301      	movne	r3, #1
 800867e:	2300      	moveq	r3, #0
 8008680:	b2db      	uxtb	r3, r3
 8008682:	e008      	b.n	8008696 <HAL_TIM_PWM_Start_IT+0x6a>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b01      	cmp	r3, #1
 800868e:	bf14      	ite	ne
 8008690:	2301      	movne	r3, #1
 8008692:	2300      	moveq	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e0b8      	b.n	8008810 <HAL_TIM_PWM_Start_IT+0x1e4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d104      	bne.n	80086ae <HAL_TIM_PWM_Start_IT+0x82>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086ac:	e013      	b.n	80086d6 <HAL_TIM_PWM_Start_IT+0xaa>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d104      	bne.n	80086be <HAL_TIM_PWM_Start_IT+0x92>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086bc:	e00b      	b.n	80086d6 <HAL_TIM_PWM_Start_IT+0xaa>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d104      	bne.n	80086ce <HAL_TIM_PWM_Start_IT+0xa2>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2202      	movs	r2, #2
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086cc:	e003      	b.n	80086d6 <HAL_TIM_PWM_Start_IT+0xaa>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b0c      	cmp	r3, #12
 80086da:	d841      	bhi.n	8008760 <HAL_TIM_PWM_Start_IT+0x134>
 80086dc:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <HAL_TIM_PWM_Start_IT+0xb8>)
 80086de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e2:	bf00      	nop
 80086e4:	08008719 	.word	0x08008719
 80086e8:	08008761 	.word	0x08008761
 80086ec:	08008761 	.word	0x08008761
 80086f0:	08008761 	.word	0x08008761
 80086f4:	0800872b 	.word	0x0800872b
 80086f8:	08008761 	.word	0x08008761
 80086fc:	08008761 	.word	0x08008761
 8008700:	08008761 	.word	0x08008761
 8008704:	0800873d 	.word	0x0800873d
 8008708:	08008761 	.word	0x08008761
 800870c:	08008761 	.word	0x08008761
 8008710:	08008761 	.word	0x08008761
 8008714:	0800874f 	.word	0x0800874f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0202 	orr.w	r2, r2, #2
 8008726:	60da      	str	r2, [r3, #12]
      break;
 8008728:	e01b      	b.n	8008762 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68da      	ldr	r2, [r3, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0204 	orr.w	r2, r2, #4
 8008738:	60da      	str	r2, [r3, #12]
      break;
 800873a:	e012      	b.n	8008762 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0208 	orr.w	r2, r2, #8
 800874a:	60da      	str	r2, [r3, #12]
      break;
 800874c:	e009      	b.n	8008762 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0210 	orr.w	r2, r2, #16
 800875c:	60da      	str	r2, [r3, #12]
      break;
 800875e:	e000      	b.n	8008762 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8008760:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2201      	movs	r2, #1
 8008768:	6839      	ldr	r1, [r7, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fe18 	bl	80093a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a28      	ldr	r2, [pc, #160]	; (8008818 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIM_PWM_Start_IT+0x158>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a27      	ldr	r2, [pc, #156]	; (800881c <HAL_TIM_PWM_Start_IT+0x1f0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d101      	bne.n	8008788 <HAL_TIM_PWM_Start_IT+0x15c>
 8008784:	2301      	movs	r3, #1
 8008786:	e000      	b.n	800878a <HAL_TIM_PWM_Start_IT+0x15e>
 8008788:	2300      	movs	r3, #0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d007      	beq.n	800879e <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800879c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d018      	beq.n	80087da <HAL_TIM_PWM_Start_IT+0x1ae>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1b      	ldr	r2, [pc, #108]	; (800881c <HAL_TIM_PWM_Start_IT+0x1f0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <HAL_TIM_PWM_Start_IT+0x1ae>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ba:	d00e      	beq.n	80087da <HAL_TIM_PWM_Start_IT+0x1ae>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a17      	ldr	r2, [pc, #92]	; (8008820 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <HAL_TIM_PWM_Start_IT+0x1ae>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a16      	ldr	r2, [pc, #88]	; (8008824 <HAL_TIM_PWM_Start_IT+0x1f8>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_TIM_PWM_Start_IT+0x1ae>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a14      	ldr	r2, [pc, #80]	; (8008828 <HAL_TIM_PWM_Start_IT+0x1fc>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d111      	bne.n	80087fe <HAL_TIM_PWM_Start_IT+0x1d2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2b06      	cmp	r3, #6
 80087ea:	d010      	beq.n	800880e <HAL_TIM_PWM_Start_IT+0x1e2>
    {
      __HAL_TIM_ENABLE(htim);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fc:	e007      	b.n	800880e <HAL_TIM_PWM_Start_IT+0x1e2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0201 	orr.w	r2, r2, #1
 800880c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	40012c00 	.word	0x40012c00
 800881c:	40013400 	.word	0x40013400
 8008820:	40000400 	.word	0x40000400
 8008824:	40000800 	.word	0x40000800
 8008828:	40000c00 	.word	0x40000c00

0800882c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b02      	cmp	r3, #2
 8008840:	d122      	bne.n	8008888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b02      	cmp	r3, #2
 800884e:	d11b      	bne.n	8008888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f06f 0202 	mvn.w	r2, #2
 8008858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fac7 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 8008874:	e005      	b.n	8008882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 faba 	bl	8008df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fb fa27 	bl	8003cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0304 	and.w	r3, r3, #4
 8008892:	2b04      	cmp	r3, #4
 8008894:	d122      	bne.n	80088dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d11b      	bne.n	80088dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f06f 0204 	mvn.w	r2, #4
 80088ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2202      	movs	r2, #2
 80088b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fa9d 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 80088c8:	e005      	b.n	80088d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa90 	bl	8008df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7fb f9fd 	bl	8003cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d122      	bne.n	8008930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d11b      	bne.n	8008930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f06f 0208 	mvn.w	r2, #8
 8008900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2204      	movs	r2, #4
 8008906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa73 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 800891c:	e005      	b.n	800892a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa66 	bl	8008df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7fb f9d3 	bl	8003cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	f003 0310 	and.w	r3, r3, #16
 800893a:	2b10      	cmp	r3, #16
 800893c:	d122      	bne.n	8008984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f003 0310 	and.w	r3, r3, #16
 8008948:	2b10      	cmp	r3, #16
 800894a:	d11b      	bne.n	8008984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f06f 0210 	mvn.w	r2, #16
 8008954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2208      	movs	r2, #8
 800895a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa49 	bl	8008e02 <HAL_TIM_IC_CaptureCallback>
 8008970:	e005      	b.n	800897e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa3c 	bl	8008df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fb f9a9 	bl	8003cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b01      	cmp	r3, #1
 8008990:	d10e      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b01      	cmp	r3, #1
 800899e:	d107      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f06f 0201 	mvn.w	r2, #1
 80089a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7fb f8f8 	bl	8003ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ba:	2b80      	cmp	r3, #128	; 0x80
 80089bc:	d10e      	bne.n	80089dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c8:	2b80      	cmp	r3, #128	; 0x80
 80089ca:	d107      	bne.n	80089dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fd7b 	bl	80094d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e6:	2b40      	cmp	r3, #64	; 0x40
 80089e8:	d10e      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b40      	cmp	r3, #64	; 0x40
 80089f6:	d107      	bne.n	8008a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa06 	bl	8008e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	f003 0320 	and.w	r3, r3, #32
 8008a12:	2b20      	cmp	r3, #32
 8008a14:	d10e      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f003 0320 	and.w	r3, r3, #32
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d107      	bne.n	8008a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0220 	mvn.w	r2, #32
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fd46 	bl	80094c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e046      	b.n	8008ae4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b0c      	cmp	r3, #12
 8008a62:	d839      	bhi.n	8008ad8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_TIM_OC_ConfigChannel+0x30>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008aaf 	.word	0x08008aaf
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ad9 	.word	0x08008ad9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008abd 	.word	0x08008abd
 8008a90:	08008ad9 	.word	0x08008ad9
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008acb 	.word	0x08008acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68b9      	ldr	r1, [r7, #8]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f000 fa38 	bl	8008f1c <TIM_OC1_SetConfig>
      break;
 8008aac:	e015      	b.n	8008ada <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68b9      	ldr	r1, [r7, #8]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 faa1 	bl	8008ffc <TIM_OC2_SetConfig>
      break;
 8008aba:	e00e      	b.n	8008ada <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fb0e 	bl	80090e4 <TIM_OC3_SetConfig>
      break;
 8008ac8:	e007      	b.n	8008ada <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68b9      	ldr	r1, [r7, #8]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 fb7b 	bl	80091cc <TIM_OC4_SetConfig>
      break;
 8008ad6:	e000      	b.n	8008ada <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008ad8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e0ac      	b.n	8008c60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b0c      	cmp	r3, #12
 8008b12:	f200 809f 	bhi.w	8008c54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008b16:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008b51 	.word	0x08008b51
 8008b20:	08008c55 	.word	0x08008c55
 8008b24:	08008c55 	.word	0x08008c55
 8008b28:	08008c55 	.word	0x08008c55
 8008b2c:	08008b91 	.word	0x08008b91
 8008b30:	08008c55 	.word	0x08008c55
 8008b34:	08008c55 	.word	0x08008c55
 8008b38:	08008c55 	.word	0x08008c55
 8008b3c:	08008bd3 	.word	0x08008bd3
 8008b40:	08008c55 	.word	0x08008c55
 8008b44:	08008c55 	.word	0x08008c55
 8008b48:	08008c55 	.word	0x08008c55
 8008b4c:	08008c13 	.word	0x08008c13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f9e0 	bl	8008f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	699a      	ldr	r2, [r3, #24]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0208 	orr.w	r2, r2, #8
 8008b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	699a      	ldr	r2, [r3, #24]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0204 	bic.w	r2, r2, #4
 8008b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6999      	ldr	r1, [r3, #24]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	619a      	str	r2, [r3, #24]
      break;
 8008b8e:	e062      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68b9      	ldr	r1, [r7, #8]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fa30 	bl	8008ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008baa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	699a      	ldr	r2, [r3, #24]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6999      	ldr	r1, [r3, #24]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	021a      	lsls	r2, r3, #8
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	619a      	str	r2, [r3, #24]
      break;
 8008bd0:	e041      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68b9      	ldr	r1, [r7, #8]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fa83 	bl	80090e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69da      	ldr	r2, [r3, #28]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0208 	orr.w	r2, r2, #8
 8008bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69da      	ldr	r2, [r3, #28]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0204 	bic.w	r2, r2, #4
 8008bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69d9      	ldr	r1, [r3, #28]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	691a      	ldr	r2, [r3, #16]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	61da      	str	r2, [r3, #28]
      break;
 8008c10:	e021      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fad7 	bl	80091cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	69da      	ldr	r2, [r3, #28]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69d9      	ldr	r1, [r3, #28]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	021a      	lsls	r2, r3, #8
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	61da      	str	r2, [r3, #28]
      break;
 8008c52:	e000      	b.n	8008c56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_TIM_ConfigClockSource+0x18>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e0b3      	b.n	8008de8 <HAL_TIM_ConfigClockSource+0x180>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ca6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cb8:	d03e      	beq.n	8008d38 <HAL_TIM_ConfigClockSource+0xd0>
 8008cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cbe:	f200 8087 	bhi.w	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc6:	f000 8085 	beq.w	8008dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8008cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cce:	d87f      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008cd0:	2b70      	cmp	r3, #112	; 0x70
 8008cd2:	d01a      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0xa2>
 8008cd4:	2b70      	cmp	r3, #112	; 0x70
 8008cd6:	d87b      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008cd8:	2b60      	cmp	r3, #96	; 0x60
 8008cda:	d050      	beq.n	8008d7e <HAL_TIM_ConfigClockSource+0x116>
 8008cdc:	2b60      	cmp	r3, #96	; 0x60
 8008cde:	d877      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008ce0:	2b50      	cmp	r3, #80	; 0x50
 8008ce2:	d03c      	beq.n	8008d5e <HAL_TIM_ConfigClockSource+0xf6>
 8008ce4:	2b50      	cmp	r3, #80	; 0x50
 8008ce6:	d873      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008ce8:	2b40      	cmp	r3, #64	; 0x40
 8008cea:	d058      	beq.n	8008d9e <HAL_TIM_ConfigClockSource+0x136>
 8008cec:	2b40      	cmp	r3, #64	; 0x40
 8008cee:	d86f      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008cf0:	2b30      	cmp	r3, #48	; 0x30
 8008cf2:	d064      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x156>
 8008cf4:	2b30      	cmp	r3, #48	; 0x30
 8008cf6:	d86b      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008cf8:	2b20      	cmp	r3, #32
 8008cfa:	d060      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x156>
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	d867      	bhi.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d05c      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x156>
 8008d04:	2b10      	cmp	r3, #16
 8008d06:	d05a      	beq.n	8008dbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008d08:	e062      	b.n	8008dd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6899      	ldr	r1, [r3, #8]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f000 fb22 	bl	8009362 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	609a      	str	r2, [r3, #8]
      break;
 8008d36:	e04e      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6818      	ldr	r0, [r3, #0]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6899      	ldr	r1, [r3, #8]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	f000 fb0b 	bl	8009362 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d5a:	609a      	str	r2, [r3, #8]
      break;
 8008d5c:	e03b      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	6859      	ldr	r1, [r3, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 fa82 	bl	8009274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2150      	movs	r1, #80	; 0x50
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fad9 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008d7c:	e02b      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6818      	ldr	r0, [r3, #0]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	6859      	ldr	r1, [r3, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f000 faa0 	bl	80092d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2160      	movs	r1, #96	; 0x60
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fac9 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008d9c:	e01b      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	6859      	ldr	r1, [r3, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f000 fa62 	bl	8009274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2140      	movs	r1, #64	; 0x40
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fab9 	bl	800932e <TIM_ITRx_SetConfig>
      break;
 8008dbc:	e00b      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f000 fab0 	bl	800932e <TIM_ITRx_SetConfig>
        break;
 8008dce:	e002      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008dd0:	bf00      	nop
 8008dd2:	e000      	b.n	8008dd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008dd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr

08008e02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e0a:	bf00      	nop
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bc80      	pop	{r7}
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
	...

08008e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a33      	ldr	r2, [pc, #204]	; (8008f08 <TIM_Base_SetConfig+0xe0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d013      	beq.n	8008e68 <TIM_Base_SetConfig+0x40>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a32      	ldr	r2, [pc, #200]	; (8008f0c <TIM_Base_SetConfig+0xe4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d00f      	beq.n	8008e68 <TIM_Base_SetConfig+0x40>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4e:	d00b      	beq.n	8008e68 <TIM_Base_SetConfig+0x40>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a2f      	ldr	r2, [pc, #188]	; (8008f10 <TIM_Base_SetConfig+0xe8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d007      	beq.n	8008e68 <TIM_Base_SetConfig+0x40>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a2e      	ldr	r2, [pc, #184]	; (8008f14 <TIM_Base_SetConfig+0xec>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d003      	beq.n	8008e68 <TIM_Base_SetConfig+0x40>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a2d      	ldr	r2, [pc, #180]	; (8008f18 <TIM_Base_SetConfig+0xf0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d108      	bne.n	8008e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a22      	ldr	r2, [pc, #136]	; (8008f08 <TIM_Base_SetConfig+0xe0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <TIM_Base_SetConfig+0x82>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a21      	ldr	r2, [pc, #132]	; (8008f0c <TIM_Base_SetConfig+0xe4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d00f      	beq.n	8008eaa <TIM_Base_SetConfig+0x82>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e90:	d00b      	beq.n	8008eaa <TIM_Base_SetConfig+0x82>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a1e      	ldr	r2, [pc, #120]	; (8008f10 <TIM_Base_SetConfig+0xe8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d007      	beq.n	8008eaa <TIM_Base_SetConfig+0x82>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <TIM_Base_SetConfig+0xec>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d003      	beq.n	8008eaa <TIM_Base_SetConfig+0x82>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <TIM_Base_SetConfig+0xf0>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d108      	bne.n	8008ebc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a09      	ldr	r2, [pc, #36]	; (8008f08 <TIM_Base_SetConfig+0xe0>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d003      	beq.n	8008ef0 <TIM_Base_SetConfig+0xc8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <TIM_Base_SetConfig+0xe4>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d103      	bne.n	8008ef8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	691a      	ldr	r2, [r3, #16]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	615a      	str	r2, [r3, #20]
}
 8008efe:	bf00      	nop
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr
 8008f08:	40012c00 	.word	0x40012c00
 8008f0c:	40013400 	.word	0x40013400
 8008f10:	40000400 	.word	0x40000400
 8008f14:	40000800 	.word	0x40000800
 8008f18:	40000c00 	.word	0x40000c00

08008f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f023 0201 	bic.w	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f023 0302 	bic.w	r3, r3, #2
 8008f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a20      	ldr	r2, [pc, #128]	; (8008ff4 <TIM_OC1_SetConfig+0xd8>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_OC1_SetConfig+0x64>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1f      	ldr	r2, [pc, #124]	; (8008ff8 <TIM_OC1_SetConfig+0xdc>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d10c      	bne.n	8008f9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f023 0308 	bic.w	r3, r3, #8
 8008f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f023 0304 	bic.w	r3, r3, #4
 8008f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a15      	ldr	r2, [pc, #84]	; (8008ff4 <TIM_OC1_SetConfig+0xd8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d003      	beq.n	8008faa <TIM_OC1_SetConfig+0x8e>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a14      	ldr	r2, [pc, #80]	; (8008ff8 <TIM_OC1_SetConfig+0xdc>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d111      	bne.n	8008fce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	621a      	str	r2, [r3, #32]
}
 8008fe8:	bf00      	nop
 8008fea:	371c      	adds	r7, #28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40012c00 	.word	0x40012c00
 8008ff8:	40013400 	.word	0x40013400

08008ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f023 0210 	bic.w	r2, r3, #16
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f023 0320 	bic.w	r3, r3, #32
 8009046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	4313      	orrs	r3, r2
 8009052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a21      	ldr	r2, [pc, #132]	; (80090dc <TIM_OC2_SetConfig+0xe0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_OC2_SetConfig+0x68>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <TIM_OC2_SetConfig+0xe4>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d10d      	bne.n	8009080 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800906a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	011b      	lsls	r3, r3, #4
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a16      	ldr	r2, [pc, #88]	; (80090dc <TIM_OC2_SetConfig+0xe0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_OC2_SetConfig+0x94>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <TIM_OC2_SetConfig+0xe4>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d113      	bne.n	80090b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009096:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800909e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	621a      	str	r2, [r3, #32]
}
 80090d2:	bf00      	nop
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr
 80090dc:	40012c00 	.word	0x40012c00
 80090e0:	40013400 	.word	0x40013400

080090e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800912c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a21      	ldr	r2, [pc, #132]	; (80091c4 <TIM_OC3_SetConfig+0xe0>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d003      	beq.n	800914a <TIM_OC3_SetConfig+0x66>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a20      	ldr	r2, [pc, #128]	; (80091c8 <TIM_OC3_SetConfig+0xe4>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d10d      	bne.n	8009166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a16      	ldr	r2, [pc, #88]	; (80091c4 <TIM_OC3_SetConfig+0xe0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d003      	beq.n	8009176 <TIM_OC3_SetConfig+0x92>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <TIM_OC3_SetConfig+0xe4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d113      	bne.n	800919e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800917c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	011b      	lsls	r3, r3, #4
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	011b      	lsls	r3, r3, #4
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	621a      	str	r2, [r3, #32]
}
 80091b8:	bf00      	nop
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	bc80      	pop	{r7}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40013400 	.word	0x40013400

080091cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	031b      	lsls	r3, r3, #12
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a11      	ldr	r2, [pc, #68]	; (800926c <TIM_OC4_SetConfig+0xa0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_OC4_SetConfig+0x68>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a10      	ldr	r2, [pc, #64]	; (8009270 <TIM_OC4_SetConfig+0xa4>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d109      	bne.n	8009248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800923a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	019b      	lsls	r3, r3, #6
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	621a      	str	r2, [r3, #32]
}
 8009262:	bf00      	nop
 8009264:	371c      	adds	r7, #28
 8009266:	46bd      	mov	sp, r7
 8009268:	bc80      	pop	{r7}
 800926a:	4770      	bx	lr
 800926c:	40012c00 	.word	0x40012c00
 8009270:	40013400 	.word	0x40013400

08009274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f023 0201 	bic.w	r2, r3, #1
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800929e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f023 030a 	bic.w	r3, r3, #10
 80092b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	621a      	str	r2, [r3, #32]
}
 80092c6:	bf00      	nop
 80092c8:	371c      	adds	r7, #28
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bc80      	pop	{r7}
 80092ce:	4770      	bx	lr

080092d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	f023 0210 	bic.w	r2, r3, #16
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	031b      	lsls	r3, r3, #12
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800930c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	621a      	str	r2, [r3, #32]
}
 8009324:	bf00      	nop
 8009326:	371c      	adds	r7, #28
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr

0800932e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4313      	orrs	r3, r2
 800934c:	f043 0307 	orr.w	r3, r3, #7
 8009350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	609a      	str	r2, [r3, #8]
}
 8009358:	bf00      	nop
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr

08009362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009362:	b480      	push	{r7}
 8009364:	b087      	sub	sp, #28
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800937c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	021a      	lsls	r2, r3, #8
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	431a      	orrs	r2, r3
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4313      	orrs	r3, r2
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	4313      	orrs	r3, r2
 800938e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	609a      	str	r2, [r3, #8]
}
 8009396:	bf00      	nop
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr

080093a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	2201      	movs	r2, #1
 80093b4:	fa02 f303 	lsl.w	r3, r2, r3
 80093b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a1a      	ldr	r2, [r3, #32]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	43db      	mvns	r3, r3
 80093c2:	401a      	ands	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 031f 	and.w	r3, r3, #31
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	fa01 f303 	lsl.w	r3, r1, r3
 80093d8:	431a      	orrs	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bc80      	pop	{r7}
 80093e6:	4770      	bx	lr

080093e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d101      	bne.n	8009400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093fc:	2302      	movs	r3, #2
 80093fe:	e050      	b.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4313      	orrs	r3, r2
 8009430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1b      	ldr	r2, [pc, #108]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d018      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009456:	d00e      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d009      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a14      	ldr	r2, [pc, #80]	; (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a12      	ldr	r2, [pc, #72]	; (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d10c      	bne.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800947c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	4313      	orrs	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bc80      	pop	{r7}
 80094aa:	4770      	bx	lr
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	40013400 	.word	0x40013400
 80094b4:	40000400 	.word	0x40000400
 80094b8:	40000800 	.word	0x40000800
 80094bc:	40000c00 	.word	0x40000c00

080094c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bc80      	pop	{r7}
 80094d0:	4770      	bx	lr

080094d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	bc80      	pop	{r7}
 80094e2:	4770      	bx	lr

080094e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e03f      	b.n	8009576 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7fb fda4 	bl	8005058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2224      	movs	r2, #36	; 0x24
 8009514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fdb5 	bl	800a098 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	691a      	ldr	r2, [r3, #16]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800953c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695a      	ldr	r2, [r3, #20]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800954c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800955c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2220      	movs	r2, #32
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b20      	cmp	r3, #32
 8009598:	d153      	bne.n	8009642 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <HAL_UART_Transmit_DMA+0x26>
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e04c      	b.n	8009644 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d101      	bne.n	80095b8 <HAL_UART_Transmit_DMA+0x38>
 80095b4:	2302      	movs	r3, #2
 80095b6:	e045      	b.n	8009644 <HAL_UART_Transmit_DMA+0xc4>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	88fa      	ldrh	r2, [r7, #6]
 80095ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	88fa      	ldrh	r2, [r7, #6]
 80095d0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2221      	movs	r2, #33	; 0x21
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e4:	4a19      	ldr	r2, [pc, #100]	; (800964c <HAL_UART_Transmit_DMA+0xcc>)
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ec:	4a18      	ldr	r2, [pc, #96]	; (8009650 <HAL_UART_Transmit_DMA+0xd0>)
 80095ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	4a17      	ldr	r2, [pc, #92]	; (8009654 <HAL_UART_Transmit_DMA+0xd4>)
 80095f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fc:	2200      	movs	r2, #0
 80095fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009600:	f107 0308 	add.w	r3, r7, #8
 8009604:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	6819      	ldr	r1, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3304      	adds	r3, #4
 8009614:	461a      	mov	r2, r3
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	f7fd fada 	bl	8006bd0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009624:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	695a      	ldr	r2, [r3, #20]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800963c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	e000      	b.n	8009644 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009642:	2302      	movs	r3, #2
  }
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	08009b35 	.word	0x08009b35
 8009650:	08009b87 	.word	0x08009b87
 8009654:	08009c6f 	.word	0x08009c6f

08009658 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b20      	cmp	r3, #32
 8009670:	d11d      	bne.n	80096ae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <HAL_UART_Receive_DMA+0x26>
 8009678:	88fb      	ldrh	r3, [r7, #6]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d101      	bne.n	8009682 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e016      	b.n	80096b0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_UART_Receive_DMA+0x38>
 800968c:	2302      	movs	r3, #2
 800968e:	e00f      	b.n	80096b0 <HAL_UART_Receive_DMA+0x58>
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	461a      	mov	r2, r3
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f000 fb2d 	bl	8009d04 <UART_Start_Receive_DMA>
 80096aa:	4603      	mov	r3, r0
 80096ac:	e000      	b.n	80096b0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80096ae:	2302      	movs	r3, #2
  }
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bf14      	ite	ne
 80096d2:	2301      	movne	r3, #1
 80096d4:	2300      	moveq	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b21      	cmp	r3, #33	; 0x21
 80096e4:	d116      	bne.n	8009714 <HAL_UART_DMAStop+0x5c>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d013      	beq.n	8009714 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	695a      	ldr	r2, [r3, #20]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096fa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009700:	2b00      	cmp	r3, #0
 8009702:	d004      	beq.n	800970e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	4618      	mov	r0, r3
 800970a:	f7fd fac0 	bl	8006c8e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fb5c 	bl	8009dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b00      	cmp	r3, #0
 8009720:	bf14      	ite	ne
 8009722:	2301      	movne	r3, #1
 8009724:	2300      	moveq	r3, #0
 8009726:	b2db      	uxtb	r3, r3
 8009728:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b22      	cmp	r3, #34	; 0x22
 8009734:	d116      	bne.n	8009764 <HAL_UART_DMAStop+0xac>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d013      	beq.n	8009764 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695a      	ldr	r2, [r3, #20]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800974a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd fa98 	bl	8006c8e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fb49 	bl	8009df6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
	...

08009770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08a      	sub	sp, #40	; 0x28
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009790:	2300      	movs	r3, #0
 8009792:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009794:	2300      	movs	r3, #0
 8009796:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	f003 030f 	and.w	r3, r3, #15
 800979e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10d      	bne.n	80097c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	f003 0320 	and.w	r3, r3, #32
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d008      	beq.n	80097c2 <HAL_UART_IRQHandler+0x52>
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fbc2 	bl	8009f44 <UART_Receive_IT>
      return;
 80097c0:	e17b      	b.n	8009aba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 80b1 	beq.w	800992c <HAL_UART_IRQHandler+0x1bc>
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d105      	bne.n	80097e0 <HAL_UART_IRQHandler+0x70>
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80a6 	beq.w	800992c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <HAL_UART_IRQHandler+0x90>
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	f043 0201 	orr.w	r2, r3, #1
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	f003 0304 	and.w	r3, r3, #4
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <HAL_UART_IRQHandler+0xb0>
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009818:	f043 0202 	orr.w	r2, r3, #2
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00a      	beq.n	8009840 <HAL_UART_IRQHandler+0xd0>
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	f043 0204 	orr.w	r2, r3, #4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	f003 0308 	and.w	r3, r3, #8
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00f      	beq.n	800986a <HAL_UART_IRQHandler+0xfa>
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	f003 0320 	and.w	r3, r3, #32
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <HAL_UART_IRQHandler+0xee>
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d005      	beq.n	800986a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	f043 0208 	orr.w	r2, r3, #8
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 811e 	beq.w	8009ab0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <HAL_UART_IRQHandler+0x11e>
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	f003 0320 	and.w	r3, r3, #32
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fb5b 	bl	8009f44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	bf14      	ite	ne
 800989c:	2301      	movne	r3, #1
 800989e:	2300      	moveq	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <HAL_UART_IRQHandler+0x146>
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d031      	beq.n	800991a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fa9d 	bl	8009df6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d023      	beq.n	8009912 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	695a      	ldr	r2, [r3, #20]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d013      	beq.n	800990a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e6:	4a76      	ldr	r2, [pc, #472]	; (8009ac0 <HAL_UART_IRQHandler+0x350>)
 80098e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fd fa08 	bl	8006d04 <HAL_DMA_Abort_IT>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d016      	beq.n	8009928 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009908:	e00e      	b.n	8009928 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8fe 	bl	8009b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009910:	e00a      	b.n	8009928 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f8fa 	bl	8009b0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009918:	e006      	b.n	8009928 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f8f6 	bl	8009b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009926:	e0c3      	b.n	8009ab0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009928:	bf00      	nop
    return;
 800992a:	e0c1      	b.n	8009ab0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	2b01      	cmp	r3, #1
 8009932:	f040 80a1 	bne.w	8009a78 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 809b 	beq.w	8009a78 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 8095 	beq.w	8009a78 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d04e      	beq.n	8009a10 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800997c:	8a3b      	ldrh	r3, [r7, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8098 	beq.w	8009ab4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009988:	8a3a      	ldrh	r2, [r7, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	f080 8092 	bcs.w	8009ab4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8a3a      	ldrh	r2, [r7, #16]
 8009994:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	2b20      	cmp	r3, #32
 800999e:	d02b      	beq.n	80099f8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099ae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	695a      	ldr	r2, [r3, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 0201 	bic.w	r2, r2, #1
 80099be:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	695a      	ldr	r2, [r3, #20]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099ce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68da      	ldr	r2, [r3, #12]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f022 0210 	bic.w	r2, r2, #16
 80099ec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fd f94b 	bl	8006c8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f888 	bl	8009b1e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009a0e:	e051      	b.n	8009ab4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d047      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009a28:	8a7b      	ldrh	r3, [r7, #18]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d044      	beq.n	8009ab8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a3c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0201 	bic.w	r2, r2, #1
 8009a4c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0210 	bic.w	r2, r2, #16
 8009a6a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f854 	bl	8009b1e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009a76:	e01f      	b.n	8009ab8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d008      	beq.n	8009a94 <HAL_UART_IRQHandler+0x324>
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f9f2 	bl	8009e76 <UART_Transmit_IT>
    return;
 8009a92:	e012      	b.n	8009aba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <HAL_UART_IRQHandler+0x34a>
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d008      	beq.n	8009aba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fa33 	bl	8009f14 <UART_EndTransmit_IT>
    return;
 8009aae:	e004      	b.n	8009aba <HAL_UART_IRQHandler+0x34a>
    return;
 8009ab0:	bf00      	nop
 8009ab2:	e002      	b.n	8009aba <HAL_UART_IRQHandler+0x34a>
      return;
 8009ab4:	bf00      	nop
 8009ab6:	e000      	b.n	8009aba <HAL_UART_IRQHandler+0x34a>
      return;
 8009ab8:	bf00      	nop
  }
}
 8009aba:	3728      	adds	r7, #40	; 0x28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	08009e4f 	.word	0x08009e4f

08009ac4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009acc:	bf00      	nop
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bc80      	pop	{r7}
 8009ad4:	4770      	bx	lr

08009ad6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bc80      	pop	{r7}
 8009af8:	4770      	bx	lr

08009afa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009b02:	bf00      	nop
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr

08009b0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bc80      	pop	{r7}
 8009b1c:	4770      	bx	lr

08009b1e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr

08009b34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d113      	bne.n	8009b78 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b64:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b74:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b76:	e002      	b.n	8009b7e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff ffa3 	bl	8009ac4 <HAL_UART_TxCpltCallback>
}
 8009b7e:	bf00      	nop
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff ff9e 	bl	8009ad6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d12a      	bne.n	8009c14 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bd2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	695a      	ldr	r2, [r3, #20]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0201 	bic.w	r2, r2, #1
 8009be2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	695a      	ldr	r2, [r3, #20]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2220      	movs	r2, #32
 8009bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d107      	bne.n	8009c14 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0210 	bic.w	r2, r2, #16
 8009c12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d106      	bne.n	8009c2a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c20:	4619      	mov	r1, r3
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff ff7b 	bl	8009b1e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c28:	e002      	b.n	8009c30 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff ff5c 	bl	8009ae8 <HAL_UART_RxCpltCallback>
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d108      	bne.n	8009c60 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c52:	085b      	lsrs	r3, r3, #1
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4619      	mov	r1, r3
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff ff60 	bl	8009b1e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c5e:	e002      	b.n	8009c66 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f7ff ff4a 	bl	8009afa <HAL_UART_RxHalfCpltCallback>
}
 8009c66:	bf00      	nop
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bf14      	ite	ne
 8009c8e:	2301      	movne	r3, #1
 8009c90:	2300      	moveq	r3, #0
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b21      	cmp	r3, #33	; 0x21
 8009ca0:	d108      	bne.n	8009cb4 <UART_DMAError+0x46>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	2200      	movs	r2, #0
 8009cac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009cae:	68b8      	ldr	r0, [r7, #8]
 8009cb0:	f000 f88c 	bl	8009dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bf14      	ite	ne
 8009cc2:	2301      	movne	r3, #1
 8009cc4:	2300      	moveq	r3, #0
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b22      	cmp	r3, #34	; 0x22
 8009cd4:	d108      	bne.n	8009ce8 <UART_DMAError+0x7a>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009ce2:	68b8      	ldr	r0, [r7, #8]
 8009ce4:	f000 f887 	bl	8009df6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	f043 0210 	orr.w	r2, r3, #16
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cf4:	68b8      	ldr	r0, [r7, #8]
 8009cf6:	f7ff ff09 	bl	8009b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	88fa      	ldrh	r2, [r7, #6]
 8009d1c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2222      	movs	r2, #34	; 0x22
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	4a23      	ldr	r2, [pc, #140]	; (8009dc0 <UART_Start_Receive_DMA+0xbc>)
 8009d32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d38:	4a22      	ldr	r2, [pc, #136]	; (8009dc4 <UART_Start_Receive_DMA+0xc0>)
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	4a21      	ldr	r2, [pc, #132]	; (8009dc8 <UART_Start_Receive_DMA+0xc4>)
 8009d42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	2200      	movs	r2, #0
 8009d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	88fb      	ldrh	r3, [r7, #6]
 8009d64:	f7fc ff34 	bl	8006bd0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d68:	2300      	movs	r3, #0
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	613b      	str	r3, [r7, #16]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	613b      	str	r3, [r7, #16]
 8009d7c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	695a      	ldr	r2, [r3, #20]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0201 	orr.w	r2, r2, #1
 8009da4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	695a      	ldr	r2, [r3, #20]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009db4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	08009ba3 	.word	0x08009ba3
 8009dc4:	08009c39 	.word	0x08009c39
 8009dc8:	08009c6f 	.word	0x08009c6f

08009dcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009de2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2220      	movs	r2, #32
 8009de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bc80      	pop	{r7}
 8009df4:	4770      	bx	lr

08009df6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e0c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	695a      	ldr	r2, [r3, #20]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0201 	bic.w	r2, r2, #1
 8009e1c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d107      	bne.n	8009e36 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0210 	bic.w	r2, r2, #16
 8009e34:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr

08009e4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f7ff fe4f 	bl	8009b0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e6e:	bf00      	nop
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b21      	cmp	r3, #33	; 0x21
 8009e88:	d13e      	bne.n	8009f08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e92:	d114      	bne.n	8009ebe <UART_Transmit_IT+0x48>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d110      	bne.n	8009ebe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	1c9a      	adds	r2, r3, #2
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	621a      	str	r2, [r3, #32]
 8009ebc:	e008      	b.n	8009ed0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	1c59      	adds	r1, r3, #1
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6211      	str	r1, [r2, #32]
 8009ec8:	781a      	ldrb	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	4619      	mov	r1, r3
 8009ede:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10f      	bne.n	8009f04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ef2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	e000      	b.n	8009f0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009f08:	2302      	movs	r3, #2
  }
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bc80      	pop	{r7}
 8009f12:	4770      	bx	lr

08009f14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff fdc5 	bl	8009ac4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b22      	cmp	r3, #34	; 0x22
 8009f56:	f040 8099 	bne.w	800a08c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f62:	d117      	bne.n	8009f94 <UART_Receive_IT+0x50>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d113      	bne.n	8009f94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f74:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	1c9a      	adds	r2, r3, #2
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	629a      	str	r2, [r3, #40]	; 0x28
 8009f92:	e026      	b.n	8009fe2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fa6:	d007      	beq.n	8009fb8 <UART_Receive_IT+0x74>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d10a      	bne.n	8009fc6 <UART_Receive_IT+0x82>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	701a      	strb	r2, [r3, #0]
 8009fc4:	e008      	b.n	8009fd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d148      	bne.n	800a088 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68da      	ldr	r2, [r3, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0220 	bic.w	r2, r2, #32
 800a004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	695a      	ldr	r2, [r3, #20]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a032:	2b01      	cmp	r3, #1
 800a034:	d123      	bne.n	800a07e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0210 	bic.w	r2, r2, #16
 800a04a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	2b10      	cmp	r3, #16
 800a058:	d10a      	bne.n	800a070 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a05a:	2300      	movs	r3, #0
 800a05c:	60fb      	str	r3, [r7, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	60fb      	str	r3, [r7, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff fd51 	bl	8009b1e <HAL_UARTEx_RxEventCallback>
 800a07c:	e002      	b.n	800a084 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fd32 	bl	8009ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	e002      	b.n	800a08e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	e000      	b.n	800a08e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a08c:	2302      	movs	r3, #2
  }
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a0d2:	f023 030c 	bic.w	r3, r3, #12
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	68b9      	ldr	r1, [r7, #8]
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a2c      	ldr	r2, [pc, #176]	; (800a1ac <UART_SetConfig+0x114>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d103      	bne.n	800a108 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a100:	f7fd ff36 	bl	8007f70 <HAL_RCC_GetPCLK2Freq>
 800a104:	60f8      	str	r0, [r7, #12]
 800a106:	e002      	b.n	800a10e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a108:	f7fd ff1e 	bl	8007f48 <HAL_RCC_GetPCLK1Freq>
 800a10c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4613      	mov	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	009a      	lsls	r2, r3, #2
 800a118:	441a      	add	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	fbb2 f3f3 	udiv	r3, r2, r3
 800a124:	4a22      	ldr	r2, [pc, #136]	; (800a1b0 <UART_SetConfig+0x118>)
 800a126:	fba2 2303 	umull	r2, r3, r2, r3
 800a12a:	095b      	lsrs	r3, r3, #5
 800a12c:	0119      	lsls	r1, r3, #4
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	009a      	lsls	r2, r3, #2
 800a138:	441a      	add	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	fbb2 f2f3 	udiv	r2, r2, r3
 800a144:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <UART_SetConfig+0x118>)
 800a146:	fba3 0302 	umull	r0, r3, r3, r2
 800a14a:	095b      	lsrs	r3, r3, #5
 800a14c:	2064      	movs	r0, #100	; 0x64
 800a14e:	fb00 f303 	mul.w	r3, r0, r3
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	011b      	lsls	r3, r3, #4
 800a156:	3332      	adds	r3, #50	; 0x32
 800a158:	4a15      	ldr	r2, [pc, #84]	; (800a1b0 <UART_SetConfig+0x118>)
 800a15a:	fba2 2303 	umull	r2, r3, r2, r3
 800a15e:	095b      	lsrs	r3, r3, #5
 800a160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a164:	4419      	add	r1, r3
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4613      	mov	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4413      	add	r3, r2
 800a16e:	009a      	lsls	r2, r3, #2
 800a170:	441a      	add	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	fbb2 f2f3 	udiv	r2, r2, r3
 800a17c:	4b0c      	ldr	r3, [pc, #48]	; (800a1b0 <UART_SetConfig+0x118>)
 800a17e:	fba3 0302 	umull	r0, r3, r3, r2
 800a182:	095b      	lsrs	r3, r3, #5
 800a184:	2064      	movs	r0, #100	; 0x64
 800a186:	fb00 f303 	mul.w	r3, r0, r3
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	011b      	lsls	r3, r3, #4
 800a18e:	3332      	adds	r3, #50	; 0x32
 800a190:	4a07      	ldr	r2, [pc, #28]	; (800a1b0 <UART_SetConfig+0x118>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	095b      	lsrs	r3, r3, #5
 800a198:	f003 020f 	and.w	r2, r3, #15
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	440a      	add	r2, r1
 800a1a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a1a4:	bf00      	nop
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	40013800 	.word	0x40013800
 800a1b0:	51eb851f 	.word	0x51eb851f

0800a1b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1b4:	b480      	push	{r7}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ba:	f3ef 8305 	mrs	r3, IPSR
 800a1be:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10f      	bne.n	800a1e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1c6:	f3ef 8310 	mrs	r3, PRIMASK
 800a1ca:	607b      	str	r3, [r7, #4]
  return(result);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d109      	bne.n	800a1e6 <osKernelInitialize+0x32>
 800a1d2:	4b10      	ldr	r3, [pc, #64]	; (800a214 <osKernelInitialize+0x60>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d109      	bne.n	800a1ee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1da:	f3ef 8311 	mrs	r3, BASEPRI
 800a1de:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a1e6:	f06f 0305 	mvn.w	r3, #5
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e00c      	b.n	800a208 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1ee:	4b09      	ldr	r3, [pc, #36]	; (800a214 <osKernelInitialize+0x60>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d105      	bne.n	800a202 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800a1f6:	4b07      	ldr	r3, [pc, #28]	; (800a214 <osKernelInitialize+0x60>)
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e002      	b.n	800a208 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a206:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a208:	68fb      	ldr	r3, [r7, #12]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	bc80      	pop	{r7}
 800a212:	4770      	bx	lr
 800a214:	20003348 	.word	0x20003348

0800a218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a21e:	f3ef 8305 	mrs	r3, IPSR
 800a222:	60bb      	str	r3, [r7, #8]
  return(result);
 800a224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10f      	bne.n	800a24a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a22a:	f3ef 8310 	mrs	r3, PRIMASK
 800a22e:	607b      	str	r3, [r7, #4]
  return(result);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d109      	bne.n	800a24a <osKernelStart+0x32>
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <osKernelStart+0x64>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d109      	bne.n	800a252 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a23e:	f3ef 8311 	mrs	r3, BASEPRI
 800a242:	603b      	str	r3, [r7, #0]
  return(result);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a24a:	f06f 0305 	mvn.w	r3, #5
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e00e      	b.n	800a270 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800a252:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <osKernelStart+0x64>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d107      	bne.n	800a26a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800a25a:	4b08      	ldr	r3, [pc, #32]	; (800a27c <osKernelStart+0x64>)
 800a25c:	2202      	movs	r2, #2
 800a25e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800a260:	f001 f96c 	bl	800b53c <vTaskStartScheduler>
      stat = osOK;
 800a264:	2300      	movs	r3, #0
 800a266:	60fb      	str	r3, [r7, #12]
 800a268:	e002      	b.n	800a270 <osKernelStart+0x58>
    } else {
      stat = osError;
 800a26a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a26e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a270:	68fb      	ldr	r3, [r7, #12]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20003348 	.word	0x20003348

0800a280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a280:	b580      	push	{r7, lr}
 800a282:	b092      	sub	sp, #72	; 0x48
 800a284:	af04      	add	r7, sp, #16
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a290:	f3ef 8305 	mrs	r3, IPSR
 800a294:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f040 8094 	bne.w	800a3c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a29e:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a2:	623b      	str	r3, [r7, #32]
  return(result);
 800a2a4:	6a3b      	ldr	r3, [r7, #32]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f040 808d 	bne.w	800a3c6 <osThreadNew+0x146>
 800a2ac:	4b48      	ldr	r3, [pc, #288]	; (800a3d0 <osThreadNew+0x150>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d106      	bne.n	800a2c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a2b8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 8082 	bne.w	800a3c6 <osThreadNew+0x146>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d07e      	beq.n	800a3c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800a2cc:	2318      	movs	r3, #24
 800a2ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800a2d4:	f107 031b 	add.w	r3, r7, #27
 800a2d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d045      	beq.n	800a372 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <osThreadNew+0x74>
        name = attr->name;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d008      	beq.n	800a31a <osThreadNew+0x9a>
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	2b38      	cmp	r3, #56	; 0x38
 800a30c:	d805      	bhi.n	800a31a <osThreadNew+0x9a>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <osThreadNew+0x9e>
        return (NULL);
 800a31a:	2300      	movs	r3, #0
 800a31c:	e054      	b.n	800a3c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	089b      	lsrs	r3, r3, #2
 800a32c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00e      	beq.n	800a354 <osThreadNew+0xd4>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	2b5b      	cmp	r3, #91	; 0x5b
 800a33c:	d90a      	bls.n	800a354 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a342:	2b00      	cmp	r3, #0
 800a344:	d006      	beq.n	800a354 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <osThreadNew+0xd4>
        mem = 1;
 800a34e:	2301      	movs	r3, #1
 800a350:	62bb      	str	r3, [r7, #40]	; 0x28
 800a352:	e010      	b.n	800a376 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10c      	bne.n	800a376 <osThreadNew+0xf6>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d108      	bne.n	800a376 <osThreadNew+0xf6>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d104      	bne.n	800a376 <osThreadNew+0xf6>
          mem = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a370:	e001      	b.n	800a376 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800a376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d110      	bne.n	800a39e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a384:	9202      	str	r2, [sp, #8]
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a390:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 ff06 	bl	800b1a4 <xTaskCreateStatic>
 800a398:	4603      	mov	r3, r0
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e013      	b.n	800a3c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d110      	bne.n	800a3c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	f107 0314 	add.w	r3, r7, #20
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 ff50 	bl	800b25c <xTaskCreate>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d001      	beq.n	800a3c6 <osThreadNew+0x146>
          hTask = NULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3c6:	697b      	ldr	r3, [r7, #20]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3738      	adds	r7, #56	; 0x38
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20003348 	.word	0x20003348

0800a3d4 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08a      	sub	sp, #40	; 0x28
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <osThreadFlagsSet+0x1a>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	da03      	bge.n	800a3f6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a3ee:	f06f 0303 	mvn.w	r3, #3
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	e045      	b.n	800a482 <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 800a3f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3fc:	f3ef 8305 	mrs	r3, IPSR
 800a400:	61bb      	str	r3, [r7, #24]
  return(result);
 800a402:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10f      	bne.n	800a428 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a408:	f3ef 8310 	mrs	r3, PRIMASK
 800a40c:	617b      	str	r3, [r7, #20]
  return(result);
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d109      	bne.n	800a428 <osThreadFlagsSet+0x54>
 800a414:	4b1d      	ldr	r3, [pc, #116]	; (800a48c <osThreadFlagsSet+0xb8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d125      	bne.n	800a468 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a41c:	f3ef 8311 	mrs	r3, BASEPRI
 800a420:	613b      	str	r3, [r7, #16]
  return(result);
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01f      	beq.n	800a468 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 800a428:	2300      	movs	r3, #0
 800a42a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a42c:	f107 0308 	add.w	r3, r7, #8
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	2300      	movs	r3, #0
 800a434:	2201      	movs	r2, #1
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	69f8      	ldr	r0, [r7, #28]
 800a43a:	f001 fe7b 	bl	800c134 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a43e:	f107 030c 	add.w	r3, r7, #12
 800a442:	2200      	movs	r2, #0
 800a444:	9200      	str	r2, [sp, #0]
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	69f8      	ldr	r0, [r7, #28]
 800a44c:	f001 fe72 	bl	800c134 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d015      	beq.n	800a482 <osThreadFlagsSet+0xae>
 800a456:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <osThreadFlagsSet+0xbc>)
 800a458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	e00c      	b.n	800a482 <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a468:	2300      	movs	r3, #0
 800a46a:	2201      	movs	r2, #1
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	69f8      	ldr	r0, [r7, #28]
 800a470:	f001 fdbc 	bl	800bfec <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a474:	f107 030c 	add.w	r3, r7, #12
 800a478:	2200      	movs	r2, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	69f8      	ldr	r0, [r7, #28]
 800a47e:	f001 fdb5 	bl	800bfec <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a482:	68fb      	ldr	r3, [r7, #12]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3720      	adds	r7, #32
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20003348 	.word	0x20003348
 800a490:	e000ed04 	.word	0xe000ed04

0800a494 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a494:	b580      	push	{r7, lr}
 800a496:	b08e      	sub	sp, #56	; 0x38
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4a0:	f3ef 8305 	mrs	r3, IPSR
 800a4a4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a4a6:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10f      	bne.n	800a4cc <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a4b0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d109      	bne.n	800a4cc <osThreadFlagsWait+0x38>
 800a4b8:	4b3f      	ldr	r3, [pc, #252]	; (800a5b8 <osThreadFlagsWait+0x124>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d109      	bne.n	800a4d4 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a4c0:	f3ef 8311 	mrs	r3, BASEPRI
 800a4c4:	617b      	str	r3, [r7, #20]
  return(result);
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800a4cc:	f06f 0305 	mvn.w	r3, #5
 800a4d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4d2:	e06b      	b.n	800a5ac <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	da03      	bge.n	800a4e2 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800a4da:	f06f 0303 	mvn.w	r3, #3
 800a4de:	637b      	str	r3, [r7, #52]	; 0x34
 800a4e0:	e064      	b.n	800a5ac <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f003 0302 	and.w	r3, r3, #2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <osThreadFlagsWait+0x5e>
      clear = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	633b      	str	r3, [r7, #48]	; 0x30
 800a4f0:	e001      	b.n	800a4f6 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800a4fe:	f001 f92f 	bl	800b760 <xTaskGetTickCount>
 800a502:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a504:	f107 0210 	add.w	r2, r7, #16
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a50c:	2000      	movs	r0, #0
 800a50e:	f001 fd13 	bl	800bf38 <xTaskNotifyWait>
 800a512:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	2b01      	cmp	r3, #1
 800a518:	d137      	bne.n	800a58a <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800a51a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4013      	ands	r3, r2
 800a520:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a526:	4313      	orrs	r3, r2
 800a528:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00c      	beq.n	800a54e <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a538:	4013      	ands	r3, r2
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d032      	beq.n	800a5a6 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10f      	bne.n	800a566 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a546:	f06f 0302 	mvn.w	r3, #2
 800a54a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a54c:	e02e      	b.n	800a5ac <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a552:	4013      	ands	r3, r2
 800a554:	2b00      	cmp	r3, #0
 800a556:	d128      	bne.n	800a5aa <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d103      	bne.n	800a566 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800a55e:	f06f 0302 	mvn.w	r3, #2
 800a562:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800a564:	e022      	b.n	800a5ac <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a566:	f001 f8fb 	bl	800b760 <xTaskGetTickCount>
 800a56a:	4602      	mov	r2, r0
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800a572:	6a3a      	ldr	r2, [r7, #32]
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	429a      	cmp	r2, r3
 800a578:	d902      	bls.n	800a580 <osThreadFlagsWait+0xec>
          tout  = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a57e:	e00e      	b.n	800a59e <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800a580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a588:	e009      	b.n	800a59e <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d103      	bne.n	800a598 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800a590:	f06f 0302 	mvn.w	r3, #2
 800a594:	637b      	str	r3, [r7, #52]	; 0x34
 800a596:	e002      	b.n	800a59e <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a598:	f06f 0301 	mvn.w	r3, #1
 800a59c:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1af      	bne.n	800a504 <osThreadFlagsWait+0x70>
 800a5a4:	e002      	b.n	800a5ac <osThreadFlagsWait+0x118>
            break;
 800a5a6:	bf00      	nop
 800a5a8:	e000      	b.n	800a5ac <osThreadFlagsWait+0x118>
            break;
 800a5aa:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3738      	adds	r7, #56	; 0x38
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20003348 	.word	0x20003348

0800a5bc <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5c4:	f3ef 8305 	mrs	r3, IPSR
 800a5c8:	613b      	str	r3, [r7, #16]
  return(result);
 800a5ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d10f      	bne.n	800a5f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a5d4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d109      	bne.n	800a5f0 <osDelay+0x34>
 800a5dc:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <osDelay+0x58>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d109      	bne.n	800a5f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5e4:	f3ef 8311 	mrs	r3, BASEPRI
 800a5e8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <osDelay+0x3c>
    stat = osErrorISR;
 800a5f0:	f06f 0305 	mvn.w	r3, #5
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e007      	b.n	800a608 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 ff66 	bl	800b4d4 <vTaskDelay>
    }
  }

  return (stat);
 800a608:	697b      	ldr	r3, [r7, #20]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20003348 	.word	0x20003348

0800a618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4a06      	ldr	r2, [pc, #24]	; (800a640 <vApplicationGetIdleTaskMemory+0x28>)
 800a628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	4a05      	ldr	r2, [pc, #20]	; (800a644 <vApplicationGetIdleTaskMemory+0x2c>)
 800a62e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2280      	movs	r2, #128	; 0x80
 800a634:	601a      	str	r2, [r3, #0]
}
 800a636:	bf00      	nop
 800a638:	3714      	adds	r7, #20
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bc80      	pop	{r7}
 800a63e:	4770      	bx	lr
 800a640:	2000334c 	.word	0x2000334c
 800a644:	200033a8 	.word	0x200033a8

0800a648 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4a07      	ldr	r2, [pc, #28]	; (800a674 <vApplicationGetTimerTaskMemory+0x2c>)
 800a658:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4a06      	ldr	r2, [pc, #24]	; (800a678 <vApplicationGetTimerTaskMemory+0x30>)
 800a65e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a666:	601a      	str	r2, [r3, #0]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bc80      	pop	{r7}
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	200035a8 	.word	0x200035a8
 800a678:	20003604 	.word	0x20003604

0800a67c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f103 0208 	add.w	r2, r3, #8
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f103 0208 	add.w	r2, r3, #8
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f103 0208 	add.w	r2, r3, #8
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bc80      	pop	{r7}
 800a6b8:	4770      	bx	lr

0800a6ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bc80      	pop	{r7}
 800a6d0:	4770      	bx	lr

0800a6d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b085      	sub	sp, #20
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	1c5a      	adds	r2, r3, #1
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	601a      	str	r2, [r3, #0]
}
 800a70e:	bf00      	nop
 800a710:	3714      	adds	r7, #20
 800a712:	46bd      	mov	sp, r7
 800a714:	bc80      	pop	{r7}
 800a716:	4770      	bx	lr

0800a718 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a72e:	d103      	bne.n	800a738 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e00c      	b.n	800a752 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3308      	adds	r3, #8
 800a73c:	60fb      	str	r3, [r7, #12]
 800a73e:	e002      	b.n	800a746 <vListInsert+0x2e>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d2f6      	bcs.n	800a740 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	601a      	str	r2, [r3, #0]
}
 800a77e:	bf00      	nop
 800a780:	3714      	adds	r7, #20
 800a782:	46bd      	mov	sp, r7
 800a784:	bc80      	pop	{r7}
 800a786:	4770      	bx	lr

0800a788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691b      	ldr	r3, [r3, #16]
 800a794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6892      	ldr	r2, [r2, #8]
 800a79e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	6852      	ldr	r2, [r2, #4]
 800a7a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d103      	bne.n	800a7bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689a      	ldr	r2, [r3, #8]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	1e5a      	subs	r2, r3, #1
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr
	...

0800a7dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <xQueueGenericReset+0x2a>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60bb      	str	r3, [r7, #8]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a806:	f002 f9b9 	bl	800cb7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a812:	68f9      	ldr	r1, [r7, #12]
 800a814:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a816:	fb01 f303 	mul.w	r3, r1, r3
 800a81a:	441a      	add	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a836:	3b01      	subs	r3, #1
 800a838:	68f9      	ldr	r1, [r7, #12]
 800a83a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	441a      	add	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	22ff      	movs	r2, #255	; 0xff
 800a84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	22ff      	movs	r2, #255	; 0xff
 800a852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d114      	bne.n	800a886 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01a      	beq.n	800a89a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3310      	adds	r3, #16
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 f8f1 	bl	800ba50 <xTaskRemoveFromEventList>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d012      	beq.n	800a89a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a874:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <xQueueGenericReset+0xcc>)
 800a876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87a:	601a      	str	r2, [r3, #0]
 800a87c:	f3bf 8f4f 	dsb	sy
 800a880:	f3bf 8f6f 	isb	sy
 800a884:	e009      	b.n	800a89a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3310      	adds	r3, #16
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff fef6 	bl	800a67c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3324      	adds	r3, #36	; 0x24
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff fef1 	bl	800a67c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a89a:	f002 f99f 	bl	800cbdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a89e:	2301      	movs	r3, #1
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	e000ed04 	.word	0xe000ed04

0800a8ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b08e      	sub	sp, #56	; 0x38
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10a      	bne.n	800a8d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <xQueueGenericCreateStatic+0x52>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <xQueueGenericCreateStatic+0x56>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueGenericCreateStatic+0x58>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	623b      	str	r3, [r7, #32]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <xQueueGenericCreateStatic+0x7e>
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d101      	bne.n	800a92e <xQueueGenericCreateStatic+0x82>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e000      	b.n	800a930 <xQueueGenericCreateStatic+0x84>
 800a92e:	2300      	movs	r3, #0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10a      	bne.n	800a94a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	61fb      	str	r3, [r7, #28]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a94a:	2350      	movs	r3, #80	; 0x50
 800a94c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b50      	cmp	r3, #80	; 0x50
 800a952:	d00a      	beq.n	800a96a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a958:	f383 8811 	msr	BASEPRI, r3
 800a95c:	f3bf 8f6f 	isb	sy
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	61bb      	str	r3, [r7, #24]
}
 800a966:	bf00      	nop
 800a968:	e7fe      	b.n	800a968 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00d      	beq.n	800a990 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a97c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	4613      	mov	r3, r2
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 f805 	bl	800a99a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a992:	4618      	mov	r0, r3
 800a994:	3730      	adds	r7, #48	; 0x30
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b084      	sub	sp, #16
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	607a      	str	r2, [r7, #4]
 800a9a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d103      	bne.n	800a9b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	e002      	b.n	800a9bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	69b8      	ldr	r0, [r7, #24]
 800a9cc:	f7ff ff06 	bl	800a7dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	78fa      	ldrb	r2, [r7, #3]
 800a9d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a9d8:	bf00      	nop
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08e      	sub	sp, #56	; 0x38
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <xQueueGenericSend+0x32>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa0e:	bf00      	nop
 800aa10:	e7fe      	b.n	800aa10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <xQueueGenericSend+0x40>
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <xQueueGenericSend+0x44>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <xQueueGenericSend+0x46>
 800aa24:	2300      	movs	r3, #0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <xQueueGenericSend+0x60>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa3c:	bf00      	nop
 800aa3e:	e7fe      	b.n	800aa3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d103      	bne.n	800aa4e <xQueueGenericSend+0x6e>
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <xQueueGenericSend+0x72>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <xQueueGenericSend+0x74>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <xQueueGenericSend+0x8e>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	623b      	str	r3, [r7, #32]
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa6e:	f001 f9d7 	bl	800be20 <xTaskGetSchedulerState>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <xQueueGenericSend+0x9e>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d101      	bne.n	800aa82 <xQueueGenericSend+0xa2>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e000      	b.n	800aa84 <xQueueGenericSend+0xa4>
 800aa82:	2300      	movs	r3, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10a      	bne.n	800aa9e <xQueueGenericSend+0xbe>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	61fb      	str	r3, [r7, #28]
}
 800aa9a:	bf00      	nop
 800aa9c:	e7fe      	b.n	800aa9c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa9e:	f002 f86d 	bl	800cb7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <xQueueGenericSend+0xd4>
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d129      	bne.n	800ab08 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaba:	f000 fa07 	bl	800aecc <prvCopyDataToQueue>
 800aabe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d010      	beq.n	800aaea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	3324      	adds	r3, #36	; 0x24
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 ffbf 	bl	800ba50 <xTaskRemoveFromEventList>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d013      	beq.n	800ab00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aad8:	4b3f      	ldr	r3, [pc, #252]	; (800abd8 <xQueueGenericSend+0x1f8>)
 800aada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	e00a      	b.n	800ab00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d007      	beq.n	800ab00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aaf0:	4b39      	ldr	r3, [pc, #228]	; (800abd8 <xQueueGenericSend+0x1f8>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab00:	f002 f86c 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e063      	b.n	800abd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d103      	bne.n	800ab16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab0e:	f002 f865 	bl	800cbdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e05c      	b.n	800abd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d106      	bne.n	800ab2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab1c:	f107 0314 	add.w	r3, r7, #20
 800ab20:	4618      	mov	r0, r3
 800ab22:	f001 f81f 	bl	800bb64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab26:	2301      	movs	r3, #1
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab2a:	f002 f857 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab2e:	f000 fd6b 	bl	800b608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab32:	f002 f823 	bl	800cb7c <vPortEnterCritical>
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab3c:	b25b      	sxtb	r3, r3
 800ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab42:	d103      	bne.n	800ab4c <xQueueGenericSend+0x16c>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab58:	d103      	bne.n	800ab62 <xQueueGenericSend+0x182>
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab62:	f002 f83b 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab66:	1d3a      	adds	r2, r7, #4
 800ab68:	f107 0314 	add.w	r3, r7, #20
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 f80e 	bl	800bb90 <xTaskCheckForTimeOut>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d124      	bne.n	800abc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab7c:	f000 fa9e 	bl	800b0bc <prvIsQueueFull>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d018      	beq.n	800abb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab88:	3310      	adds	r3, #16
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 ff0e 	bl	800b9b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab96:	f000 fa29 	bl	800afec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab9a:	f000 fd43 	bl	800b624 <xTaskResumeAll>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f47f af7c 	bne.w	800aa9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <xQueueGenericSend+0x1f8>)
 800aba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	e772      	b.n	800aa9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800abb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abba:	f000 fa17 	bl	800afec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abbe:	f000 fd31 	bl	800b624 <xTaskResumeAll>
 800abc2:	e76c      	b.n	800aa9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800abc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abc6:	f000 fa11 	bl	800afec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abca:	f000 fd2b 	bl	800b624 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800abce:	2300      	movs	r3, #0
		}
	}
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3738      	adds	r7, #56	; 0x38
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	e000ed04 	.word	0xe000ed04

0800abdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08e      	sub	sp, #56	; 0x38
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800abf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac06:	bf00      	nop
 800ac08:	e7fe      	b.n	800ac08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d103      	bne.n	800ac18 <xQueueGenericSendFromISR+0x3c>
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d101      	bne.n	800ac1c <xQueueGenericSendFromISR+0x40>
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e000      	b.n	800ac1e <xQueueGenericSendFromISR+0x42>
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ac22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	623b      	str	r3, [r7, #32]
}
 800ac34:	bf00      	nop
 800ac36:	e7fe      	b.n	800ac36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d103      	bne.n	800ac46 <xQueueGenericSendFromISR+0x6a>
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d101      	bne.n	800ac4a <xQueueGenericSendFromISR+0x6e>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e000      	b.n	800ac4c <xQueueGenericSendFromISR+0x70>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10a      	bne.n	800ac66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61fb      	str	r3, [r7, #28]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac66:	f002 f84b 	bl	800cd00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	61ba      	str	r2, [r7, #24]
 800ac80:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac82:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d302      	bcc.n	800ac98 <xQueueGenericSendFromISR+0xbc>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d12c      	bne.n	800acf2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aca8:	f000 f910 	bl	800aecc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800acac:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800acb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acb4:	d112      	bne.n	800acdc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d016      	beq.n	800acec <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	3324      	adds	r3, #36	; 0x24
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fec4 	bl	800ba50 <xTaskRemoveFromEventList>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00e      	beq.n	800acec <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2201      	movs	r2, #1
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	e007      	b.n	800acec <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800acdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ace0:	3301      	adds	r3, #1
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	b25a      	sxtb	r2, r3
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800acec:	2301      	movs	r3, #1
 800acee:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800acf0:	e001      	b.n	800acf6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	637b      	str	r3, [r7, #52]	; 0x34
 800acf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3738      	adds	r7, #56	; 0x38
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08c      	sub	sp, #48	; 0x30
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <xQueueReceive+0x30>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	623b      	str	r3, [r7, #32]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d103      	bne.n	800ad4a <xQueueReceive+0x3e>
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d101      	bne.n	800ad4e <xQueueReceive+0x42>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e000      	b.n	800ad50 <xQueueReceive+0x44>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10a      	bne.n	800ad6a <xQueueReceive+0x5e>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	61fb      	str	r3, [r7, #28]
}
 800ad66:	bf00      	nop
 800ad68:	e7fe      	b.n	800ad68 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad6a:	f001 f859 	bl	800be20 <xTaskGetSchedulerState>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <xQueueReceive+0x6e>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <xQueueReceive+0x72>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e000      	b.n	800ad80 <xQueueReceive+0x74>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <xQueueReceive+0x8e>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	61bb      	str	r3, [r7, #24]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad9a:	f001 feef 	bl	800cb7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d01f      	beq.n	800adea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adae:	f000 f8f7 	bl	800afa0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb4:	1e5a      	subs	r2, r3, #1
 800adb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00f      	beq.n	800ade2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc4:	3310      	adds	r3, #16
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fe42 	bl	800ba50 <xTaskRemoveFromEventList>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d007      	beq.n	800ade2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800add2:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <xQueueReceive+0x1bc>)
 800add4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add8:	601a      	str	r2, [r3, #0]
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ade2:	f001 fefb 	bl	800cbdc <vPortExitCritical>
				return pdPASS;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e069      	b.n	800aebe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d103      	bne.n	800adf8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adf0:	f001 fef4 	bl	800cbdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adf4:	2300      	movs	r3, #0
 800adf6:	e062      	b.n	800aebe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d106      	bne.n	800ae0c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adfe:	f107 0310 	add.w	r3, r7, #16
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 feae 	bl	800bb64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae0c:	f001 fee6 	bl	800cbdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae10:	f000 fbfa 	bl	800b608 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae14:	f001 feb2 	bl	800cb7c <vPortEnterCritical>
 800ae18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae1e:	b25b      	sxtb	r3, r3
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae24:	d103      	bne.n	800ae2e <xQueueReceive+0x122>
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae34:	b25b      	sxtb	r3, r3
 800ae36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3a:	d103      	bne.n	800ae44 <xQueueReceive+0x138>
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae44:	f001 feca 	bl	800cbdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae48:	1d3a      	adds	r2, r7, #4
 800ae4a:	f107 0310 	add.w	r3, r7, #16
 800ae4e:	4611      	mov	r1, r2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fe9d 	bl	800bb90 <xTaskCheckForTimeOut>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d123      	bne.n	800aea4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae5e:	f000 f917 	bl	800b090 <prvIsQueueEmpty>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d017      	beq.n	800ae98 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6a:	3324      	adds	r3, #36	; 0x24
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 fd9d 	bl	800b9b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae78:	f000 f8b8 	bl	800afec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae7c:	f000 fbd2 	bl	800b624 <xTaskResumeAll>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d189      	bne.n	800ad9a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ae86:	4b10      	ldr	r3, [pc, #64]	; (800aec8 <xQueueReceive+0x1bc>)
 800ae88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	e780      	b.n	800ad9a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae9a:	f000 f8a7 	bl	800afec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae9e:	f000 fbc1 	bl	800b624 <xTaskResumeAll>
 800aea2:	e77a      	b.n	800ad9a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aea6:	f000 f8a1 	bl	800afec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeaa:	f000 fbbb 	bl	800b624 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aeae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb0:	f000 f8ee 	bl	800b090 <prvIsQueueEmpty>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f43f af6f 	beq.w	800ad9a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aebc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3730      	adds	r7, #48	; 0x30
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aed8:	2300      	movs	r3, #0
 800aeda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10d      	bne.n	800af06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d14d      	bne.n	800af8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 ffb0 	bl	800be5c <xTaskPriorityDisinherit>
 800aefc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	605a      	str	r2, [r3, #4]
 800af04:	e043      	b.n	800af8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d119      	bne.n	800af40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6898      	ldr	r0, [r3, #8]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af14:	461a      	mov	r2, r3
 800af16:	68b9      	ldr	r1, [r7, #8]
 800af18:	f00f fbf0 	bl	801a6fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af24:	441a      	add	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d32b      	bcc.n	800af8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	609a      	str	r2, [r3, #8]
 800af3e:	e026      	b.n	800af8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	68d8      	ldr	r0, [r3, #12]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af48:	461a      	mov	r2, r3
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	f00f fbd6 	bl	801a6fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af58:	425b      	negs	r3, r3
 800af5a:	441a      	add	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	68da      	ldr	r2, [r3, #12]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d207      	bcs.n	800af7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af74:	425b      	negs	r3, r3
 800af76:	441a      	add	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d105      	bne.n	800af8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af96:	697b      	ldr	r3, [r7, #20]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d018      	beq.n	800afe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68da      	ldr	r2, [r3, #12]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	441a      	add	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d303      	bcc.n	800afd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68d9      	ldr	r1, [r3, #12]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afdc:	461a      	mov	r2, r3
 800afde:	6838      	ldr	r0, [r7, #0]
 800afe0:	f00f fb8c 	bl	801a6fc <memcpy>
	}
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aff4:	f001 fdc2 	bl	800cb7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800affe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b000:	e011      	b.n	800b026 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b006:	2b00      	cmp	r3, #0
 800b008:	d012      	beq.n	800b030 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	3324      	adds	r3, #36	; 0x24
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 fd1e 	bl	800ba50 <xTaskRemoveFromEventList>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b01a:	f000 fe1b 	bl	800bc54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	3b01      	subs	r3, #1
 800b022:	b2db      	uxtb	r3, r3
 800b024:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dce9      	bgt.n	800b002 <prvUnlockQueue+0x16>
 800b02e:	e000      	b.n	800b032 <prvUnlockQueue+0x46>
					break;
 800b030:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	22ff      	movs	r2, #255	; 0xff
 800b036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b03a:	f001 fdcf 	bl	800cbdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b03e:	f001 fd9d 	bl	800cb7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b048:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b04a:	e011      	b.n	800b070 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d012      	beq.n	800b07a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3310      	adds	r3, #16
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 fcf9 	bl	800ba50 <xTaskRemoveFromEventList>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b064:	f000 fdf6 	bl	800bc54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b068:	7bbb      	ldrb	r3, [r7, #14]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b074:	2b00      	cmp	r3, #0
 800b076:	dce9      	bgt.n	800b04c <prvUnlockQueue+0x60>
 800b078:	e000      	b.n	800b07c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b07a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	22ff      	movs	r2, #255	; 0xff
 800b080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b084:	f001 fdaa 	bl	800cbdc <vPortExitCritical>
}
 800b088:	bf00      	nop
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b098:	f001 fd70 	bl	800cb7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d102      	bne.n	800b0aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	e001      	b.n	800b0ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0ae:	f001 fd95 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0c4:	f001 fd5a 	bl	800cb7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d102      	bne.n	800b0da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e001      	b.n	800b0de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0de:	f001 fd7d 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	e014      	b.n	800b126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0fc:	4a0e      	ldr	r2, [pc, #56]	; (800b138 <vQueueAddToRegistry+0x4c>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10b      	bne.n	800b120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b108:	490b      	ldr	r1, [pc, #44]	; (800b138 <vQueueAddToRegistry+0x4c>)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b112:	4a09      	ldr	r2, [pc, #36]	; (800b138 <vQueueAddToRegistry+0x4c>)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	00db      	lsls	r3, r3, #3
 800b118:	4413      	add	r3, r2
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b11e:	e006      	b.n	800b12e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b07      	cmp	r3, #7
 800b12a:	d9e7      	bls.n	800b0fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b12c:	bf00      	nop
 800b12e:	bf00      	nop
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	bc80      	pop	{r7}
 800b136:	4770      	bx	lr
 800b138:	20008e64 	.word	0x20008e64

0800b13c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b14c:	f001 fd16 	bl	800cb7c <vPortEnterCritical>
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b156:	b25b      	sxtb	r3, r3
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b15c:	d103      	bne.n	800b166 <vQueueWaitForMessageRestricted+0x2a>
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b16c:	b25b      	sxtb	r3, r3
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b172:	d103      	bne.n	800b17c <vQueueWaitForMessageRestricted+0x40>
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	2200      	movs	r2, #0
 800b178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b17c:	f001 fd2e 	bl	800cbdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	2b00      	cmp	r3, #0
 800b186:	d106      	bne.n	800b196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	3324      	adds	r3, #36	; 0x24
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	68b9      	ldr	r1, [r7, #8]
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fc31 	bl	800b9f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b196:	6978      	ldr	r0, [r7, #20]
 800b198:	f7ff ff28 	bl	800afec <prvUnlockQueue>
	}
 800b19c:	bf00      	nop
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08e      	sub	sp, #56	; 0x38
 800b1a8:	af04      	add	r7, sp, #16
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
 800b1b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10a      	bne.n	800b1ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	623b      	str	r3, [r7, #32]
}
 800b1ca:	bf00      	nop
 800b1cc:	e7fe      	b.n	800b1cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <xTaskCreateStatic+0x46>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	61fb      	str	r3, [r7, #28]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1ea:	235c      	movs	r3, #92	; 0x5c
 800b1ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b5c      	cmp	r3, #92	; 0x5c
 800b1f2:	d00a      	beq.n	800b20a <xTaskCreateStatic+0x66>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	61bb      	str	r3, [r7, #24]
}
 800b206:	bf00      	nop
 800b208:	e7fe      	b.n	800b208 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d01e      	beq.n	800b24e <xTaskCreateStatic+0xaa>
 800b210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b212:	2b00      	cmp	r3, #0
 800b214:	d01b      	beq.n	800b24e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b218:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b21e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	2202      	movs	r2, #2
 800b224:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b228:	2300      	movs	r3, #0
 800b22a:	9303      	str	r3, [sp, #12]
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	9302      	str	r3, [sp, #8]
 800b230:	f107 0314 	add.w	r3, r7, #20
 800b234:	9301      	str	r3, [sp, #4]
 800b236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 f850 	bl	800b2e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b248:	f000 f8d4 	bl	800b3f4 <prvAddNewTaskToReadyList>
 800b24c:	e001      	b.n	800b252 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b252:	697b      	ldr	r3, [r7, #20]
	}
 800b254:	4618      	mov	r0, r3
 800b256:	3728      	adds	r7, #40	; 0x28
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b08c      	sub	sp, #48	; 0x30
 800b260:	af04      	add	r7, sp, #16
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4618      	mov	r0, r3
 800b272:	f001 fd83 	bl	800cd7c <pvPortMalloc>
 800b276:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00e      	beq.n	800b29c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b27e:	205c      	movs	r0, #92	; 0x5c
 800b280:	f001 fd7c 	bl	800cd7c <pvPortMalloc>
 800b284:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d003      	beq.n	800b294 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	631a      	str	r2, [r3, #48]	; 0x30
 800b292:	e005      	b.n	800b2a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b294:	6978      	ldr	r0, [r7, #20]
 800b296:	f001 fe35 	bl	800cf04 <vPortFree>
 800b29a:	e001      	b.n	800b2a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d017      	beq.n	800b2d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2ae:	88fa      	ldrh	r2, [r7, #6]
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	9303      	str	r3, [sp, #12]
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	9302      	str	r3, [sp, #8]
 800b2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ba:	9301      	str	r3, [sp, #4]
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	68b9      	ldr	r1, [r7, #8]
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 f80e 	bl	800b2e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2ca:	69f8      	ldr	r0, [r7, #28]
 800b2cc:	f000 f892 	bl	800b3f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	61bb      	str	r3, [r7, #24]
 800b2d4:	e002      	b.n	800b2dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2dc:	69bb      	ldr	r3, [r7, #24]
	}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3720      	adds	r7, #32
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b088      	sub	sp, #32
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	60f8      	str	r0, [r7, #12]
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	607a      	str	r2, [r7, #4]
 800b2f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	21a5      	movs	r1, #165	; 0xa5
 800b300:	f00f fa24 	bl	801a74c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b30e:	3b01      	subs	r3, #1
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	f003 0307 	and.w	r3, r3, #7
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00a      	beq.n	800b33e <prvInitialiseNewTask+0x58>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	617b      	str	r3, [r7, #20]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b33e:	2300      	movs	r3, #0
 800b340:	61fb      	str	r3, [r7, #28]
 800b342:	e012      	b.n	800b36a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	4413      	add	r3, r2
 800b34a:	7819      	ldrb	r1, [r3, #0]
 800b34c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	3334      	adds	r3, #52	; 0x34
 800b354:	460a      	mov	r2, r1
 800b356:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4413      	add	r3, r2
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d006      	beq.n	800b372 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	3301      	adds	r3, #1
 800b368:	61fb      	str	r3, [r7, #28]
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	2b0f      	cmp	r3, #15
 800b36e:	d9e9      	bls.n	800b344 <prvInitialiseNewTask+0x5e>
 800b370:	e000      	b.n	800b374 <prvInitialiseNewTask+0x8e>
		{
			break;
 800b372:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	2b37      	cmp	r3, #55	; 0x37
 800b380:	d901      	bls.n	800b386 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b382:	2337      	movs	r3, #55	; 0x37
 800b384:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b38a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b390:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	2200      	movs	r2, #0
 800b396:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	3304      	adds	r3, #4
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff f98c 	bl	800a6ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a4:	3318      	adds	r3, #24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff f987 	bl	800a6ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	68f9      	ldr	r1, [r7, #12]
 800b3d4:	69b8      	ldr	r0, [r7, #24]
 800b3d6:	f001 fadd 	bl	800c994 <pxPortInitialiseStack>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3ec:	bf00      	nop
 800b3ee:	3720      	adds	r7, #32
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3fc:	f001 fbbe 	bl	800cb7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b400:	4b2d      	ldr	r3, [pc, #180]	; (800b4b8 <prvAddNewTaskToReadyList+0xc4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	4a2c      	ldr	r2, [pc, #176]	; (800b4b8 <prvAddNewTaskToReadyList+0xc4>)
 800b408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b40a:	4b2c      	ldr	r3, [pc, #176]	; (800b4bc <prvAddNewTaskToReadyList+0xc8>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b412:	4a2a      	ldr	r2, [pc, #168]	; (800b4bc <prvAddNewTaskToReadyList+0xc8>)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b418:	4b27      	ldr	r3, [pc, #156]	; (800b4b8 <prvAddNewTaskToReadyList+0xc4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d110      	bne.n	800b442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b420:	f000 fc3c 	bl	800bc9c <prvInitialiseTaskLists>
 800b424:	e00d      	b.n	800b442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b426:	4b26      	ldr	r3, [pc, #152]	; (800b4c0 <prvAddNewTaskToReadyList+0xcc>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d109      	bne.n	800b442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b42e:	4b23      	ldr	r3, [pc, #140]	; (800b4bc <prvAddNewTaskToReadyList+0xc8>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	429a      	cmp	r2, r3
 800b43a:	d802      	bhi.n	800b442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b43c:	4a1f      	ldr	r2, [pc, #124]	; (800b4bc <prvAddNewTaskToReadyList+0xc8>)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b442:	4b20      	ldr	r3, [pc, #128]	; (800b4c4 <prvAddNewTaskToReadyList+0xd0>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <prvAddNewTaskToReadyList+0xd0>)
 800b44a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b44c:	4b1d      	ldr	r3, [pc, #116]	; (800b4c4 <prvAddNewTaskToReadyList+0xd0>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4b1b      	ldr	r3, [pc, #108]	; (800b4c8 <prvAddNewTaskToReadyList+0xd4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d903      	bls.n	800b468 <prvAddNewTaskToReadyList+0x74>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <prvAddNewTaskToReadyList+0xd4>)
 800b466:	6013      	str	r3, [r2, #0]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46c:	4613      	mov	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	4413      	add	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4a15      	ldr	r2, [pc, #84]	; (800b4cc <prvAddNewTaskToReadyList+0xd8>)
 800b476:	441a      	add	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3304      	adds	r3, #4
 800b47c:	4619      	mov	r1, r3
 800b47e:	4610      	mov	r0, r2
 800b480:	f7ff f927 	bl	800a6d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b484:	f001 fbaa 	bl	800cbdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b488:	4b0d      	ldr	r3, [pc, #52]	; (800b4c0 <prvAddNewTaskToReadyList+0xcc>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00e      	beq.n	800b4ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <prvAddNewTaskToReadyList+0xc8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d207      	bcs.n	800b4ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <prvAddNewTaskToReadyList+0xdc>)
 800b4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4ae:	bf00      	nop
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20003ed8 	.word	0x20003ed8
 800b4bc:	20003a04 	.word	0x20003a04
 800b4c0:	20003ee4 	.word	0x20003ee4
 800b4c4:	20003ef4 	.word	0x20003ef4
 800b4c8:	20003ee0 	.word	0x20003ee0
 800b4cc:	20003a08 	.word	0x20003a08
 800b4d0:	e000ed04 	.word	0xe000ed04

0800b4d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d017      	beq.n	800b516 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4e6:	4b13      	ldr	r3, [pc, #76]	; (800b534 <vTaskDelay+0x60>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <vTaskDelay+0x30>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	60bb      	str	r3, [r7, #8]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b504:	f000 f880 	bl	800b608 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b508:	2100      	movs	r1, #0
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fedc 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b510:	f000 f888 	bl	800b624 <xTaskResumeAll>
 800b514:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d107      	bne.n	800b52c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b51c:	4b06      	ldr	r3, [pc, #24]	; (800b538 <vTaskDelay+0x64>)
 800b51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b52c:	bf00      	nop
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20003f00 	.word	0x20003f00
 800b538:	e000ed04 	.word	0xe000ed04

0800b53c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08a      	sub	sp, #40	; 0x28
 800b540:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b54a:	463a      	mov	r2, r7
 800b54c:	1d39      	adds	r1, r7, #4
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff f860 	bl	800a618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	9202      	str	r2, [sp, #8]
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	2300      	movs	r3, #0
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	2300      	movs	r3, #0
 800b568:	460a      	mov	r2, r1
 800b56a:	4921      	ldr	r1, [pc, #132]	; (800b5f0 <vTaskStartScheduler+0xb4>)
 800b56c:	4821      	ldr	r0, [pc, #132]	; (800b5f4 <vTaskStartScheduler+0xb8>)
 800b56e:	f7ff fe19 	bl	800b1a4 <xTaskCreateStatic>
 800b572:	4603      	mov	r3, r0
 800b574:	4a20      	ldr	r2, [pc, #128]	; (800b5f8 <vTaskStartScheduler+0xbc>)
 800b576:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b578:	4b1f      	ldr	r3, [pc, #124]	; (800b5f8 <vTaskStartScheduler+0xbc>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b580:	2301      	movs	r3, #1
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	e001      	b.n	800b58a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b586:	2300      	movs	r3, #0
 800b588:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d102      	bne.n	800b596 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b590:	f000 feee 	bl	800c370 <xTimerCreateTimerTask>
 800b594:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d116      	bne.n	800b5ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	613b      	str	r3, [r7, #16]
}
 800b5ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5b0:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <vTaskStartScheduler+0xc0>)
 800b5b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5b8:	4b11      	ldr	r3, [pc, #68]	; (800b600 <vTaskStartScheduler+0xc4>)
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b5be:	4b11      	ldr	r3, [pc, #68]	; (800b604 <vTaskStartScheduler+0xc8>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5c4:	f001 fa68 	bl	800ca98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5c8:	e00e      	b.n	800b5e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5d0:	d10a      	bne.n	800b5e8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60fb      	str	r3, [r7, #12]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <vTaskStartScheduler+0xaa>
}
 800b5e8:	bf00      	nop
 800b5ea:	3718      	adds	r7, #24
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	0801c250 	.word	0x0801c250
 800b5f4:	0800bc6d 	.word	0x0800bc6d
 800b5f8:	20003efc 	.word	0x20003efc
 800b5fc:	20003ef8 	.word	0x20003ef8
 800b600:	20003ee4 	.word	0x20003ee4
 800b604:	20003edc 	.word	0x20003edc

0800b608 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b608:	b480      	push	{r7}
 800b60a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b60c:	4b04      	ldr	r3, [pc, #16]	; (800b620 <vTaskSuspendAll+0x18>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3301      	adds	r3, #1
 800b612:	4a03      	ldr	r2, [pc, #12]	; (800b620 <vTaskSuspendAll+0x18>)
 800b614:	6013      	str	r3, [r2, #0]
}
 800b616:	bf00      	nop
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20003f00 	.word	0x20003f00

0800b624 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b62a:	2300      	movs	r3, #0
 800b62c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b62e:	2300      	movs	r3, #0
 800b630:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b632:	4b42      	ldr	r3, [pc, #264]	; (800b73c <xTaskResumeAll+0x118>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <xTaskResumeAll+0x2c>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	603b      	str	r3, [r7, #0]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b650:	f001 fa94 	bl	800cb7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b654:	4b39      	ldr	r3, [pc, #228]	; (800b73c <xTaskResumeAll+0x118>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3b01      	subs	r3, #1
 800b65a:	4a38      	ldr	r2, [pc, #224]	; (800b73c <xTaskResumeAll+0x118>)
 800b65c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b65e:	4b37      	ldr	r3, [pc, #220]	; (800b73c <xTaskResumeAll+0x118>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d162      	bne.n	800b72c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b666:	4b36      	ldr	r3, [pc, #216]	; (800b740 <xTaskResumeAll+0x11c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d05e      	beq.n	800b72c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b66e:	e02f      	b.n	800b6d0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b670:	4b34      	ldr	r3, [pc, #208]	; (800b744 <xTaskResumeAll+0x120>)
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3318      	adds	r3, #24
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff f883 	bl	800a788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3304      	adds	r3, #4
 800b686:	4618      	mov	r0, r3
 800b688:	f7ff f87e 	bl	800a788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b690:	4b2d      	ldr	r3, [pc, #180]	; (800b748 <xTaskResumeAll+0x124>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	429a      	cmp	r2, r3
 800b696:	d903      	bls.n	800b6a0 <xTaskResumeAll+0x7c>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69c:	4a2a      	ldr	r2, [pc, #168]	; (800b748 <xTaskResumeAll+0x124>)
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	4413      	add	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4a27      	ldr	r2, [pc, #156]	; (800b74c <xTaskResumeAll+0x128>)
 800b6ae:	441a      	add	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	f7ff f80b 	bl	800a6d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c0:	4b23      	ldr	r3, [pc, #140]	; (800b750 <xTaskResumeAll+0x12c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d302      	bcc.n	800b6d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b6ca:	4b22      	ldr	r3, [pc, #136]	; (800b754 <xTaskResumeAll+0x130>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6d0:	4b1c      	ldr	r3, [pc, #112]	; (800b744 <xTaskResumeAll+0x120>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1cb      	bne.n	800b670 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b6de:	f000 fb7b 	bl	800bdd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6e2:	4b1d      	ldr	r3, [pc, #116]	; (800b758 <xTaskResumeAll+0x134>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d010      	beq.n	800b710 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6ee:	f000 f845 	bl	800b77c <xTaskIncrementTick>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b6f8:	4b16      	ldr	r3, [pc, #88]	; (800b754 <xTaskResumeAll+0x130>)
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3b01      	subs	r3, #1
 800b702:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1f1      	bne.n	800b6ee <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b70a:	4b13      	ldr	r3, [pc, #76]	; (800b758 <xTaskResumeAll+0x134>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b710:	4b10      	ldr	r3, [pc, #64]	; (800b754 <xTaskResumeAll+0x130>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d009      	beq.n	800b72c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b718:	2301      	movs	r3, #1
 800b71a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b71c:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <xTaskResumeAll+0x138>)
 800b71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	f3bf 8f4f 	dsb	sy
 800b728:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b72c:	f001 fa56 	bl	800cbdc <vPortExitCritical>

	return xAlreadyYielded;
 800b730:	68bb      	ldr	r3, [r7, #8]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20003f00 	.word	0x20003f00
 800b740:	20003ed8 	.word	0x20003ed8
 800b744:	20003e98 	.word	0x20003e98
 800b748:	20003ee0 	.word	0x20003ee0
 800b74c:	20003a08 	.word	0x20003a08
 800b750:	20003a04 	.word	0x20003a04
 800b754:	20003eec 	.word	0x20003eec
 800b758:	20003ee8 	.word	0x20003ee8
 800b75c:	e000ed04 	.word	0xe000ed04

0800b760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b766:	4b04      	ldr	r3, [pc, #16]	; (800b778 <xTaskGetTickCount+0x18>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b76c:	687b      	ldr	r3, [r7, #4]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr
 800b778:	20003edc 	.word	0x20003edc

0800b77c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b786:	4b51      	ldr	r3, [pc, #324]	; (800b8cc <xTaskIncrementTick+0x150>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f040 808e 	bne.w	800b8ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b790:	4b4f      	ldr	r3, [pc, #316]	; (800b8d0 <xTaskIncrementTick+0x154>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b798:	4a4d      	ldr	r2, [pc, #308]	; (800b8d0 <xTaskIncrementTick+0x154>)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d120      	bne.n	800b7e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b7a4:	4b4b      	ldr	r3, [pc, #300]	; (800b8d4 <xTaskIncrementTick+0x158>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00a      	beq.n	800b7c4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	603b      	str	r3, [r7, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	e7fe      	b.n	800b7c2 <xTaskIncrementTick+0x46>
 800b7c4:	4b43      	ldr	r3, [pc, #268]	; (800b8d4 <xTaskIncrementTick+0x158>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]
 800b7ca:	4b43      	ldr	r3, [pc, #268]	; (800b8d8 <xTaskIncrementTick+0x15c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a41      	ldr	r2, [pc, #260]	; (800b8d4 <xTaskIncrementTick+0x158>)
 800b7d0:	6013      	str	r3, [r2, #0]
 800b7d2:	4a41      	ldr	r2, [pc, #260]	; (800b8d8 <xTaskIncrementTick+0x15c>)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	4b40      	ldr	r3, [pc, #256]	; (800b8dc <xTaskIncrementTick+0x160>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	4a3f      	ldr	r2, [pc, #252]	; (800b8dc <xTaskIncrementTick+0x160>)
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	f000 faf9 	bl	800bdd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7e6:	4b3e      	ldr	r3, [pc, #248]	; (800b8e0 <xTaskIncrementTick+0x164>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d34e      	bcc.n	800b88e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7f0:	4b38      	ldr	r3, [pc, #224]	; (800b8d4 <xTaskIncrementTick+0x158>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d101      	bne.n	800b7fe <xTaskIncrementTick+0x82>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e000      	b.n	800b800 <xTaskIncrementTick+0x84>
 800b7fe:	2300      	movs	r3, #0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d004      	beq.n	800b80e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b804:	4b36      	ldr	r3, [pc, #216]	; (800b8e0 <xTaskIncrementTick+0x164>)
 800b806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b80a:	601a      	str	r2, [r3, #0]
					break;
 800b80c:	e03f      	b.n	800b88e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b80e:	4b31      	ldr	r3, [pc, #196]	; (800b8d4 <xTaskIncrementTick+0x158>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	429a      	cmp	r2, r3
 800b824:	d203      	bcs.n	800b82e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b826:	4a2e      	ldr	r2, [pc, #184]	; (800b8e0 <xTaskIncrementTick+0x164>)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6013      	str	r3, [r2, #0]
						break;
 800b82c:	e02f      	b.n	800b88e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	3304      	adds	r3, #4
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe ffa8 	bl	800a788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d004      	beq.n	800b84a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	3318      	adds	r3, #24
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe ff9f 	bl	800a788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	4b25      	ldr	r3, [pc, #148]	; (800b8e4 <xTaskIncrementTick+0x168>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d903      	bls.n	800b85e <xTaskIncrementTick+0xe2>
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	4a22      	ldr	r2, [pc, #136]	; (800b8e4 <xTaskIncrementTick+0x168>)
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4a1f      	ldr	r2, [pc, #124]	; (800b8e8 <xTaskIncrementTick+0x16c>)
 800b86c:	441a      	add	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	3304      	adds	r3, #4
 800b872:	4619      	mov	r1, r3
 800b874:	4610      	mov	r0, r2
 800b876:	f7fe ff2c 	bl	800a6d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87e:	4b1b      	ldr	r3, [pc, #108]	; (800b8ec <xTaskIncrementTick+0x170>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b884:	429a      	cmp	r2, r3
 800b886:	d3b3      	bcc.n	800b7f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b88c:	e7b0      	b.n	800b7f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b88e:	4b17      	ldr	r3, [pc, #92]	; (800b8ec <xTaskIncrementTick+0x170>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b894:	4914      	ldr	r1, [pc, #80]	; (800b8e8 <xTaskIncrementTick+0x16c>)
 800b896:	4613      	mov	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	440b      	add	r3, r1
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d907      	bls.n	800b8b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	617b      	str	r3, [r7, #20]
 800b8aa:	e004      	b.n	800b8b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b8ac:	4b10      	ldr	r3, [pc, #64]	; (800b8f0 <xTaskIncrementTick+0x174>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	4a0f      	ldr	r2, [pc, #60]	; (800b8f0 <xTaskIncrementTick+0x174>)
 800b8b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b8b6:	4b0f      	ldr	r3, [pc, #60]	; (800b8f4 <xTaskIncrementTick+0x178>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b8c2:	697b      	ldr	r3, [r7, #20]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	20003f00 	.word	0x20003f00
 800b8d0:	20003edc 	.word	0x20003edc
 800b8d4:	20003e90 	.word	0x20003e90
 800b8d8:	20003e94 	.word	0x20003e94
 800b8dc:	20003ef0 	.word	0x20003ef0
 800b8e0:	20003ef8 	.word	0x20003ef8
 800b8e4:	20003ee0 	.word	0x20003ee0
 800b8e8:	20003a08 	.word	0x20003a08
 800b8ec:	20003a04 	.word	0x20003a04
 800b8f0:	20003ee8 	.word	0x20003ee8
 800b8f4:	20003eec 	.word	0x20003eec

0800b8f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8fe:	4b27      	ldr	r3, [pc, #156]	; (800b99c <vTaskSwitchContext+0xa4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b906:	4b26      	ldr	r3, [pc, #152]	; (800b9a0 <vTaskSwitchContext+0xa8>)
 800b908:	2201      	movs	r2, #1
 800b90a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b90c:	e041      	b.n	800b992 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b90e:	4b24      	ldr	r3, [pc, #144]	; (800b9a0 <vTaskSwitchContext+0xa8>)
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b914:	4b23      	ldr	r3, [pc, #140]	; (800b9a4 <vTaskSwitchContext+0xac>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	e010      	b.n	800b93e <vTaskSwitchContext+0x46>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10a      	bne.n	800b938 <vTaskSwitchContext+0x40>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	607b      	str	r3, [r7, #4]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <vTaskSwitchContext+0x3e>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	491a      	ldr	r1, [pc, #104]	; (800b9a8 <vTaskSwitchContext+0xb0>)
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	4613      	mov	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	440b      	add	r3, r1
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0e4      	beq.n	800b91c <vTaskSwitchContext+0x24>
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	4613      	mov	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	4a12      	ldr	r2, [pc, #72]	; (800b9a8 <vTaskSwitchContext+0xb0>)
 800b95e:	4413      	add	r3, r2
 800b960:	60bb      	str	r3, [r7, #8]
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	605a      	str	r2, [r3, #4]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	3308      	adds	r3, #8
 800b974:	429a      	cmp	r2, r3
 800b976:	d104      	bne.n	800b982 <vTaskSwitchContext+0x8a>
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	605a      	str	r2, [r3, #4]
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	4a08      	ldr	r2, [pc, #32]	; (800b9ac <vTaskSwitchContext+0xb4>)
 800b98a:	6013      	str	r3, [r2, #0]
 800b98c:	4a05      	ldr	r2, [pc, #20]	; (800b9a4 <vTaskSwitchContext+0xac>)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	6013      	str	r3, [r2, #0]
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	bc80      	pop	{r7}
 800b99a:	4770      	bx	lr
 800b99c:	20003f00 	.word	0x20003f00
 800b9a0:	20003eec 	.word	0x20003eec
 800b9a4:	20003ee0 	.word	0x20003ee0
 800b9a8:	20003a08 	.word	0x20003a08
 800b9ac:	20003a04 	.word	0x20003a04

0800b9b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	60fb      	str	r3, [r7, #12]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9d6:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <vTaskPlaceOnEventList+0x44>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	4619      	mov	r1, r3
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f7fe fe9a 	bl	800a718 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9e4:	2101      	movs	r1, #1
 800b9e6:	6838      	ldr	r0, [r7, #0]
 800b9e8:	f000 fc6e 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>
}
 800b9ec:	bf00      	nop
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20003a04 	.word	0x20003a04

0800b9f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	617b      	str	r3, [r7, #20]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba20:	4b0a      	ldr	r3, [pc, #40]	; (800ba4c <vTaskPlaceOnEventListRestricted+0x54>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3318      	adds	r3, #24
 800ba26:	4619      	mov	r1, r3
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f7fe fe52 	bl	800a6d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	68b8      	ldr	r0, [r7, #8]
 800ba3e:	f000 fc43 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>
	}
 800ba42:	bf00      	nop
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20003a04 	.word	0x20003a04

0800ba50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ba66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6a:	f383 8811 	msr	BASEPRI, r3
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f3bf 8f4f 	dsb	sy
 800ba76:	60fb      	str	r3, [r7, #12]
}
 800ba78:	bf00      	nop
 800ba7a:	e7fe      	b.n	800ba7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	3318      	adds	r3, #24
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fe81 	bl	800a788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba86:	4b1e      	ldr	r3, [pc, #120]	; (800bb00 <xTaskRemoveFromEventList+0xb0>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d11d      	bne.n	800baca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	3304      	adds	r3, #4
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fe78 	bl	800a788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4b19      	ldr	r3, [pc, #100]	; (800bb04 <xTaskRemoveFromEventList+0xb4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d903      	bls.n	800baac <xTaskRemoveFromEventList+0x5c>
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	4a16      	ldr	r2, [pc, #88]	; (800bb04 <xTaskRemoveFromEventList+0xb4>)
 800baaa:	6013      	str	r3, [r2, #0]
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	4a13      	ldr	r2, [pc, #76]	; (800bb08 <xTaskRemoveFromEventList+0xb8>)
 800baba:	441a      	add	r2, r3
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	3304      	adds	r3, #4
 800bac0:	4619      	mov	r1, r3
 800bac2:	4610      	mov	r0, r2
 800bac4:	f7fe fe05 	bl	800a6d2 <vListInsertEnd>
 800bac8:	e005      	b.n	800bad6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	3318      	adds	r3, #24
 800bace:	4619      	mov	r1, r3
 800bad0:	480e      	ldr	r0, [pc, #56]	; (800bb0c <xTaskRemoveFromEventList+0xbc>)
 800bad2:	f7fe fdfe 	bl	800a6d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bada:	4b0d      	ldr	r3, [pc, #52]	; (800bb10 <xTaskRemoveFromEventList+0xc0>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d905      	bls.n	800baf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bae4:	2301      	movs	r3, #1
 800bae6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bae8:	4b0a      	ldr	r3, [pc, #40]	; (800bb14 <xTaskRemoveFromEventList+0xc4>)
 800baea:	2201      	movs	r2, #1
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	e001      	b.n	800baf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800baf4:	697b      	ldr	r3, [r7, #20]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20003f00 	.word	0x20003f00
 800bb04:	20003ee0 	.word	0x20003ee0
 800bb08:	20003a08 	.word	0x20003a08
 800bb0c:	20003e98 	.word	0x20003e98
 800bb10:	20003a04 	.word	0x20003a04
 800bb14:	20003eec 	.word	0x20003eec

0800bb18 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	60fb      	str	r3, [r7, #12]
}
 800bb38:	bf00      	nop
 800bb3a:	e7fe      	b.n	800bb3a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800bb3c:	f001 f81e 	bl	800cb7c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb40:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <vTaskSetTimeOutState+0x44>)
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bb48:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <vTaskSetTimeOutState+0x48>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bb50:	f001 f844 	bl	800cbdc <vPortExitCritical>
}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	20003ef0 	.word	0x20003ef0
 800bb60:	20003edc 	.word	0x20003edc

0800bb64 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb6c:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <vTaskInternalSetTimeOutState+0x24>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb74:	4b05      	ldr	r3, [pc, #20]	; (800bb8c <vTaskInternalSetTimeOutState+0x28>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	605a      	str	r2, [r3, #4]
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bc80      	pop	{r7}
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20003ef0 	.word	0x20003ef0
 800bb8c:	20003edc 	.word	0x20003edc

0800bb90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10a      	bne.n	800bbb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	613b      	str	r3, [r7, #16]
}
 800bbb2:	bf00      	nop
 800bbb4:	e7fe      	b.n	800bbb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10a      	bne.n	800bbd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	60fb      	str	r3, [r7, #12]
}
 800bbce:	bf00      	nop
 800bbd0:	e7fe      	b.n	800bbd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bbd2:	f000 ffd3 	bl	800cb7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbd6:	4b1d      	ldr	r3, [pc, #116]	; (800bc4c <xTaskCheckForTimeOut+0xbc>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	69ba      	ldr	r2, [r7, #24]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbee:	d102      	bne.n	800bbf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	61fb      	str	r3, [r7, #28]
 800bbf4:	e023      	b.n	800bc3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <xTaskCheckForTimeOut+0xc0>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d007      	beq.n	800bc12 <xTaskCheckForTimeOut+0x82>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	69ba      	ldr	r2, [r7, #24]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d302      	bcc.n	800bc12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	61fb      	str	r3, [r7, #28]
 800bc10:	e015      	b.n	800bc3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d20b      	bcs.n	800bc34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	1ad2      	subs	r2, r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7ff ff9b 	bl	800bb64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	61fb      	str	r3, [r7, #28]
 800bc32:	e004      	b.n	800bc3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2200      	movs	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc3e:	f000 ffcd 	bl	800cbdc <vPortExitCritical>

	return xReturn;
 800bc42:	69fb      	ldr	r3, [r7, #28]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3720      	adds	r7, #32
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	20003edc 	.word	0x20003edc
 800bc50:	20003ef0 	.word	0x20003ef0

0800bc54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc58:	4b03      	ldr	r3, [pc, #12]	; (800bc68 <vTaskMissedYield+0x14>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]
}
 800bc5e:	bf00      	nop
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bc80      	pop	{r7}
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20003eec 	.word	0x20003eec

0800bc6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc74:	f000 f852 	bl	800bd1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc78:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <prvIdleTask+0x28>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d9f9      	bls.n	800bc74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bc80:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <prvIdleTask+0x2c>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc90:	e7f0      	b.n	800bc74 <prvIdleTask+0x8>
 800bc92:	bf00      	nop
 800bc94:	20003a08 	.word	0x20003a08
 800bc98:	e000ed04 	.word	0xe000ed04

0800bc9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bca2:	2300      	movs	r3, #0
 800bca4:	607b      	str	r3, [r7, #4]
 800bca6:	e00c      	b.n	800bcc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4413      	add	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4a12      	ldr	r2, [pc, #72]	; (800bcfc <prvInitialiseTaskLists+0x60>)
 800bcb4:	4413      	add	r3, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fe fce0 	bl	800a67c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	607b      	str	r3, [r7, #4]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2b37      	cmp	r3, #55	; 0x37
 800bcc6:	d9ef      	bls.n	800bca8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcc8:	480d      	ldr	r0, [pc, #52]	; (800bd00 <prvInitialiseTaskLists+0x64>)
 800bcca:	f7fe fcd7 	bl	800a67c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcce:	480d      	ldr	r0, [pc, #52]	; (800bd04 <prvInitialiseTaskLists+0x68>)
 800bcd0:	f7fe fcd4 	bl	800a67c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bcd4:	480c      	ldr	r0, [pc, #48]	; (800bd08 <prvInitialiseTaskLists+0x6c>)
 800bcd6:	f7fe fcd1 	bl	800a67c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcda:	480c      	ldr	r0, [pc, #48]	; (800bd0c <prvInitialiseTaskLists+0x70>)
 800bcdc:	f7fe fcce 	bl	800a67c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bce0:	480b      	ldr	r0, [pc, #44]	; (800bd10 <prvInitialiseTaskLists+0x74>)
 800bce2:	f7fe fccb 	bl	800a67c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bce6:	4b0b      	ldr	r3, [pc, #44]	; (800bd14 <prvInitialiseTaskLists+0x78>)
 800bce8:	4a05      	ldr	r2, [pc, #20]	; (800bd00 <prvInitialiseTaskLists+0x64>)
 800bcea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <prvInitialiseTaskLists+0x7c>)
 800bcee:	4a05      	ldr	r2, [pc, #20]	; (800bd04 <prvInitialiseTaskLists+0x68>)
 800bcf0:	601a      	str	r2, [r3, #0]
}
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
 800bcfa:	bf00      	nop
 800bcfc:	20003a08 	.word	0x20003a08
 800bd00:	20003e68 	.word	0x20003e68
 800bd04:	20003e7c 	.word	0x20003e7c
 800bd08:	20003e98 	.word	0x20003e98
 800bd0c:	20003eac 	.word	0x20003eac
 800bd10:	20003ec4 	.word	0x20003ec4
 800bd14:	20003e90 	.word	0x20003e90
 800bd18:	20003e94 	.word	0x20003e94

0800bd1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd22:	e019      	b.n	800bd58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd24:	f000 ff2a 	bl	800cb7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bd28:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <prvCheckTasksWaitingTermination+0x50>)
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	3304      	adds	r3, #4
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe fd27 	bl	800a788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd3a:	4b0d      	ldr	r3, [pc, #52]	; (800bd70 <prvCheckTasksWaitingTermination+0x54>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	4a0b      	ldr	r2, [pc, #44]	; (800bd70 <prvCheckTasksWaitingTermination+0x54>)
 800bd42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd44:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <prvCheckTasksWaitingTermination+0x58>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	4a0a      	ldr	r2, [pc, #40]	; (800bd74 <prvCheckTasksWaitingTermination+0x58>)
 800bd4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd4e:	f000 ff45 	bl	800cbdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f810 	bl	800bd78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd58:	4b06      	ldr	r3, [pc, #24]	; (800bd74 <prvCheckTasksWaitingTermination+0x58>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e1      	bne.n	800bd24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd60:	bf00      	nop
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20003eac 	.word	0x20003eac
 800bd70:	20003ed8 	.word	0x20003ed8
 800bd74:	20003ec0 	.word	0x20003ec0

0800bd78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d108      	bne.n	800bd9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f001 f8b8 	bl	800cf04 <vPortFree>
				vPortFree( pxTCB );
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f001 f8b5 	bl	800cf04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd9a:	e018      	b.n	800bdce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d103      	bne.n	800bdae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f001 f8ac 	bl	800cf04 <vPortFree>
	}
 800bdac:	e00f      	b.n	800bdce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d00a      	beq.n	800bdce <prvDeleteTCB+0x56>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	60fb      	str	r3, [r7, #12]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <prvDeleteTCB+0x54>
	}
 800bdce:	bf00      	nop
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
	...

0800bdd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdde:	4b0e      	ldr	r3, [pc, #56]	; (800be18 <prvResetNextTaskUnblockTime+0x40>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d101      	bne.n	800bdec <prvResetNextTaskUnblockTime+0x14>
 800bde8:	2301      	movs	r3, #1
 800bdea:	e000      	b.n	800bdee <prvResetNextTaskUnblockTime+0x16>
 800bdec:	2300      	movs	r3, #0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d004      	beq.n	800bdfc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bdf2:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <prvResetNextTaskUnblockTime+0x44>)
 800bdf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdf8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bdfa:	e008      	b.n	800be0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bdfc:	4b06      	ldr	r3, [pc, #24]	; (800be18 <prvResetNextTaskUnblockTime+0x40>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	68db      	ldr	r3, [r3, #12]
 800be04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	4a04      	ldr	r2, [pc, #16]	; (800be1c <prvResetNextTaskUnblockTime+0x44>)
 800be0c:	6013      	str	r3, [r2, #0]
}
 800be0e:	bf00      	nop
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	bc80      	pop	{r7}
 800be16:	4770      	bx	lr
 800be18:	20003e90 	.word	0x20003e90
 800be1c:	20003ef8 	.word	0x20003ef8

0800be20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <xTaskGetSchedulerState+0x34>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d102      	bne.n	800be34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be2e:	2301      	movs	r3, #1
 800be30:	607b      	str	r3, [r7, #4]
 800be32:	e008      	b.n	800be46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be34:	4b08      	ldr	r3, [pc, #32]	; (800be58 <xTaskGetSchedulerState+0x38>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d102      	bne.n	800be42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be3c:	2302      	movs	r3, #2
 800be3e:	607b      	str	r3, [r7, #4]
 800be40:	e001      	b.n	800be46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be42:	2300      	movs	r3, #0
 800be44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be46:	687b      	ldr	r3, [r7, #4]
	}
 800be48:	4618      	mov	r0, r3
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bc80      	pop	{r7}
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	20003ee4 	.word	0x20003ee4
 800be58:	20003f00 	.word	0x20003f00

0800be5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be68:	2300      	movs	r3, #0
 800be6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d056      	beq.n	800bf20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be72:	4b2e      	ldr	r3, [pc, #184]	; (800bf2c <xTaskPriorityDisinherit+0xd0>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d00a      	beq.n	800be92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	60fb      	str	r3, [r7, #12]
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	60bb      	str	r3, [r7, #8]
}
 800beac:	bf00      	nop
 800beae:	e7fe      	b.n	800beae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb4:	1e5a      	subs	r2, r3, #1
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d02c      	beq.n	800bf20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beca:	2b00      	cmp	r3, #0
 800becc:	d128      	bne.n	800bf20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe fc58 	bl	800a788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef0:	4b0f      	ldr	r3, [pc, #60]	; (800bf30 <xTaskPriorityDisinherit+0xd4>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d903      	bls.n	800bf00 <xTaskPriorityDisinherit+0xa4>
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	4a0c      	ldr	r2, [pc, #48]	; (800bf30 <xTaskPriorityDisinherit+0xd4>)
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf04:	4613      	mov	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	4413      	add	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4a09      	ldr	r2, [pc, #36]	; (800bf34 <xTaskPriorityDisinherit+0xd8>)
 800bf0e:	441a      	add	r2, r3
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	3304      	adds	r3, #4
 800bf14:	4619      	mov	r1, r3
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fe fbdb 	bl	800a6d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf20:	697b      	ldr	r3, [r7, #20]
	}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20003a04 	.word	0x20003a04
 800bf30:	20003ee0 	.word	0x20003ee0
 800bf34:	20003a08 	.word	0x20003a08

0800bf38 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bf46:	f000 fe19 	bl	800cb7c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bf4a:	4b26      	ldr	r3, [pc, #152]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d01a      	beq.n	800bf8e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bf58:	4b22      	ldr	r3, [pc, #136]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	43d2      	mvns	r2, r2
 800bf62:	400a      	ands	r2, r1
 800bf64:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bf66:	4b1f      	ldr	r3, [pc, #124]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00b      	beq.n	800bf8e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf76:	2101      	movs	r1, #1
 800bf78:	6838      	ldr	r0, [r7, #0]
 800bf7a:	f000 f9a5 	bl	800c2c8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bf7e:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <xTaskNotifyWait+0xb0>)
 800bf80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bf8e:	f000 fe25 	bl	800cbdc <vPortExitCritical>

		taskENTER_CRITICAL();
 800bf92:	f000 fdf3 	bl	800cb7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bf9c:	4b11      	ldr	r3, [pc, #68]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bfa6:	4b0f      	ldr	r3, [pc, #60]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d002      	beq.n	800bfba <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	617b      	str	r3, [r7, #20]
 800bfb8:	e008      	b.n	800bfcc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bfba:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	43d2      	mvns	r2, r2
 800bfc4:	400a      	ands	r2, r1
 800bfc6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <xTaskNotifyWait+0xac>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800bfd6:	f000 fe01 	bl	800cbdc <vPortExitCritical>

		return xReturn;
 800bfda:	697b      	ldr	r3, [r7, #20]
	}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	20003a04 	.word	0x20003a04
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	; 0x28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	603b      	str	r3, [r7, #0]
 800bff8:	4613      	mov	r3, r2
 800bffa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bffc:	2301      	movs	r3, #1
 800bffe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10a      	bne.n	800c01c <xTaskGenericNotify+0x30>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	61bb      	str	r3, [r7, #24]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c020:	f000 fdac 	bl	800cb7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c02a:	6a3b      	ldr	r3, [r7, #32]
 800c02c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c032:	6a3b      	ldr	r3, [r7, #32]
 800c034:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c038:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	2202      	movs	r2, #2
 800c03e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	2b04      	cmp	r3, #4
 800c046:	d828      	bhi.n	800c09a <xTaskGenericNotify+0xae>
 800c048:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <xTaskGenericNotify+0x64>)
 800c04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04e:	bf00      	nop
 800c050:	0800c09b 	.word	0x0800c09b
 800c054:	0800c065 	.word	0x0800c065
 800c058:	0800c073 	.word	0x0800c073
 800c05c:	0800c07f 	.word	0x0800c07f
 800c060:	0800c087 	.word	0x0800c087
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	431a      	orrs	r2, r3
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c070:	e013      	b.n	800c09a <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c076:	1c5a      	adds	r2, r3, #1
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c07c:	e00d      	b.n	800c09a <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c084:	e009      	b.n	800c09a <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c086:	7ffb      	ldrb	r3, [r7, #31]
 800c088:	2b02      	cmp	r3, #2
 800c08a:	d003      	beq.n	800c094 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c092:	e001      	b.n	800c098 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 800c094:	2300      	movs	r3, #0
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c098:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c09a:	7ffb      	ldrb	r3, [r7, #31]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d13a      	bne.n	800c116 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fe fb6f 	bl	800a788 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c0aa:	6a3b      	ldr	r3, [r7, #32]
 800c0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ae:	4b1d      	ldr	r3, [pc, #116]	; (800c124 <xTaskGenericNotify+0x138>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d903      	bls.n	800c0be <xTaskGenericNotify+0xd2>
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ba:	4a1a      	ldr	r2, [pc, #104]	; (800c124 <xTaskGenericNotify+0x138>)
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	6a3b      	ldr	r3, [r7, #32]
 800c0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4413      	add	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4a17      	ldr	r2, [pc, #92]	; (800c128 <xTaskGenericNotify+0x13c>)
 800c0cc:	441a      	add	r2, r3
 800c0ce:	6a3b      	ldr	r3, [r7, #32]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f7fe fafc 	bl	800a6d2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00a      	beq.n	800c0f8 <xTaskGenericNotify+0x10c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	617b      	str	r3, [r7, #20]
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fc:	4b0b      	ldr	r3, [pc, #44]	; (800c12c <xTaskGenericNotify+0x140>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c102:	429a      	cmp	r2, r3
 800c104:	d907      	bls.n	800c116 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c106:	4b0a      	ldr	r3, [pc, #40]	; (800c130 <xTaskGenericNotify+0x144>)
 800c108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c116:	f000 fd61 	bl	800cbdc <vPortExitCritical>

		return xReturn;
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3728      	adds	r7, #40	; 0x28
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	20003ee0 	.word	0x20003ee0
 800c128:	20003a08 	.word	0x20003a08
 800c12c:	20003a04 	.word	0x20003a04
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	; 0x38
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	4613      	mov	r3, r2
 800c142:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c144:	2301      	movs	r3, #1
 800c146:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c164:	f000 fdcc 	bl	800cd00 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c16c:	f3ef 8211 	mrs	r2, BASEPRI
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	623a      	str	r2, [r7, #32]
 800c182:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c184:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c186:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c19c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800c1a8:	79fb      	ldrb	r3, [r7, #7]
 800c1aa:	2b04      	cmp	r3, #4
 800c1ac:	d828      	bhi.n	800c200 <xTaskGenericNotifyFromISR+0xcc>
 800c1ae:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <xTaskGenericNotifyFromISR+0x80>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c201 	.word	0x0800c201
 800c1b8:	0800c1c9 	.word	0x0800c1c9
 800c1bc:	0800c1d7 	.word	0x0800c1d7
 800c1c0:	0800c1e3 	.word	0x0800c1e3
 800c1c4:	0800c1eb 	.word	0x0800c1eb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c1d4:	e014      	b.n	800c200 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1da:	1c5a      	adds	r2, r3, #1
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c1e0:	e00e      	b.n	800c200 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800c1e8:	e00a      	b.n	800c200 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c1ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d003      	beq.n	800c1fa <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c1f8:	e001      	b.n	800c1fe <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c1fe:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c200:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c204:	2b01      	cmp	r3, #1
 800c206:	d147      	bne.n	800c298 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00a      	beq.n	800c226 <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	61bb      	str	r3, [r7, #24]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c226:	4b22      	ldr	r3, [pc, #136]	; (800c2b0 <xTaskGenericNotifyFromISR+0x17c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d11d      	bne.n	800c26a <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	3304      	adds	r3, #4
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe faa8 	bl	800a788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23c:	4b1d      	ldr	r3, [pc, #116]	; (800c2b4 <xTaskGenericNotifyFromISR+0x180>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d903      	bls.n	800c24c <xTaskGenericNotifyFromISR+0x118>
 800c244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	4a1a      	ldr	r2, [pc, #104]	; (800c2b4 <xTaskGenericNotifyFromISR+0x180>)
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4a17      	ldr	r2, [pc, #92]	; (800c2b8 <xTaskGenericNotifyFromISR+0x184>)
 800c25a:	441a      	add	r2, r3
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f7fe fa35 	bl	800a6d2 <vListInsertEnd>
 800c268:	e005      	b.n	800c276 <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	3318      	adds	r3, #24
 800c26e:	4619      	mov	r1, r3
 800c270:	4812      	ldr	r0, [pc, #72]	; (800c2bc <xTaskGenericNotifyFromISR+0x188>)
 800c272:	f7fe fa2e 	bl	800a6d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27a:	4b11      	ldr	r3, [pc, #68]	; (800c2c0 <xTaskGenericNotifyFromISR+0x18c>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	429a      	cmp	r2, r3
 800c282:	d909      	bls.n	800c298 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c28c:	2201      	movs	r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
 800c290:	e002      	b.n	800c298 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800c292:	4b0c      	ldr	r3, [pc, #48]	; (800c2c4 <xTaskGenericNotifyFromISR+0x190>)
 800c294:	2201      	movs	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f383 8811 	msr	BASEPRI, r3
}
 800c2a2:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3738      	adds	r7, #56	; 0x38
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20003f00 	.word	0x20003f00
 800c2b4:	20003ee0 	.word	0x20003ee0
 800c2b8:	20003a08 	.word	0x20003a08
 800c2bc:	20003e98 	.word	0x20003e98
 800c2c0:	20003a04 	.word	0x20003a04
 800c2c4:	20003eec 	.word	0x20003eec

0800c2c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2d2:	4b21      	ldr	r3, [pc, #132]	; (800c358 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2d8:	4b20      	ldr	r3, [pc, #128]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fe fa52 	bl	800a788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ea:	d10a      	bne.n	800c302 <prvAddCurrentTaskToDelayedList+0x3a>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d007      	beq.n	800c302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f2:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4819      	ldr	r0, [pc, #100]	; (800c360 <prvAddCurrentTaskToDelayedList+0x98>)
 800c2fc:	f7fe f9e9 	bl	800a6d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c300:	e026      	b.n	800c350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4413      	add	r3, r2
 800c308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c30a:	4b14      	ldr	r3, [pc, #80]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d209      	bcs.n	800c32e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c31a:	4b12      	ldr	r3, [pc, #72]	; (800c364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3304      	adds	r3, #4
 800c324:	4619      	mov	r1, r3
 800c326:	4610      	mov	r0, r2
 800c328:	f7fe f9f6 	bl	800a718 <vListInsert>
}
 800c32c:	e010      	b.n	800c350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c32e:	4b0e      	ldr	r3, [pc, #56]	; (800c368 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <prvAddCurrentTaskToDelayedList+0x94>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3304      	adds	r3, #4
 800c338:	4619      	mov	r1, r3
 800c33a:	4610      	mov	r0, r2
 800c33c:	f7fe f9ec 	bl	800a718 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	429a      	cmp	r2, r3
 800c348:	d202      	bcs.n	800c350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c34a:	4a08      	ldr	r2, [pc, #32]	; (800c36c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	6013      	str	r3, [r2, #0]
}
 800c350:	bf00      	nop
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	20003edc 	.word	0x20003edc
 800c35c:	20003a04 	.word	0x20003a04
 800c360:	20003ec4 	.word	0x20003ec4
 800c364:	20003e94 	.word	0x20003e94
 800c368:	20003e90 	.word	0x20003e90
 800c36c:	20003ef8 	.word	0x20003ef8

0800c370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08a      	sub	sp, #40	; 0x28
 800c374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c376:	2300      	movs	r3, #0
 800c378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c37a:	f000 facb 	bl	800c914 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c37e:	4b1c      	ldr	r3, [pc, #112]	; (800c3f0 <xTimerCreateTimerTask+0x80>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d021      	beq.n	800c3ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c38e:	1d3a      	adds	r2, r7, #4
 800c390:	f107 0108 	add.w	r1, r7, #8
 800c394:	f107 030c 	add.w	r3, r7, #12
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe f955 	bl	800a648 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	460a      	mov	r2, r1
 800c3b0:	4910      	ldr	r1, [pc, #64]	; (800c3f4 <xTimerCreateTimerTask+0x84>)
 800c3b2:	4811      	ldr	r0, [pc, #68]	; (800c3f8 <xTimerCreateTimerTask+0x88>)
 800c3b4:	f7fe fef6 	bl	800b1a4 <xTaskCreateStatic>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <xTimerCreateTimerTask+0x8c>)
 800c3bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <xTimerCreateTimerTask+0x8c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10a      	bne.n	800c3e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	613b      	str	r3, [r7, #16]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3e6:	697b      	ldr	r3, [r7, #20]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3718      	adds	r7, #24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20003f34 	.word	0x20003f34
 800c3f4:	0801c258 	.word	0x0801c258
 800c3f8:	0800c51d 	.word	0x0800c51d
 800c3fc:	20003f38 	.word	0x20003f38

0800c400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b08a      	sub	sp, #40	; 0x28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c40e:	2300      	movs	r3, #0
 800c410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	623b      	str	r3, [r7, #32]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c42e:	4b1a      	ldr	r3, [pc, #104]	; (800c498 <xTimerGenericCommand+0x98>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d02a      	beq.n	800c48c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	2b05      	cmp	r3, #5
 800c446:	dc18      	bgt.n	800c47a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c448:	f7ff fcea 	bl	800be20 <xTaskGetSchedulerState>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d109      	bne.n	800c466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c452:	4b11      	ldr	r3, [pc, #68]	; (800c498 <xTimerGenericCommand+0x98>)
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	f107 0110 	add.w	r1, r7, #16
 800c45a:	2300      	movs	r3, #0
 800c45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c45e:	f7fe fabf 	bl	800a9e0 <xQueueGenericSend>
 800c462:	6278      	str	r0, [r7, #36]	; 0x24
 800c464:	e012      	b.n	800c48c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c466:	4b0c      	ldr	r3, [pc, #48]	; (800c498 <xTimerGenericCommand+0x98>)
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f107 0110 	add.w	r1, r7, #16
 800c46e:	2300      	movs	r3, #0
 800c470:	2200      	movs	r2, #0
 800c472:	f7fe fab5 	bl	800a9e0 <xQueueGenericSend>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24
 800c478:	e008      	b.n	800c48c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <xTimerGenericCommand+0x98>)
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	f107 0110 	add.w	r1, r7, #16
 800c482:	2300      	movs	r3, #0
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	f7fe fba9 	bl	800abdc <xQueueGenericSendFromISR>
 800c48a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3728      	adds	r7, #40	; 0x28
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20003f34 	.word	0x20003f34

0800c49c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4a6:	4b1c      	ldr	r3, [pc, #112]	; (800c518 <prvProcessExpiredTimer+0x7c>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7fe f967 	bl	800a788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	69db      	ldr	r3, [r3, #28]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d122      	bne.n	800c508 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	699a      	ldr	r2, [r3, #24]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	18d1      	adds	r1, r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	683a      	ldr	r2, [r7, #0]
 800c4ce:	6978      	ldr	r0, [r7, #20]
 800c4d0:	f000 f8c8 	bl	800c664 <prvInsertTimerInActiveList>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d016      	beq.n	800c508 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	6978      	ldr	r0, [r7, #20]
 800c4e6:	f7ff ff8b 	bl	800c400 <xTimerGenericCommand>
 800c4ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10a      	bne.n	800c508 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f6:	f383 8811 	msr	BASEPRI, r3
 800c4fa:	f3bf 8f6f 	isb	sy
 800c4fe:	f3bf 8f4f 	dsb	sy
 800c502:	60fb      	str	r3, [r7, #12]
}
 800c504:	bf00      	nop
 800c506:	e7fe      	b.n	800c506 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50c:	6978      	ldr	r0, [r7, #20]
 800c50e:	4798      	blx	r3
}
 800c510:	bf00      	nop
 800c512:	3718      	adds	r7, #24
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	20003f2c 	.word	0x20003f2c

0800c51c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c524:	f107 0308 	add.w	r3, r7, #8
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f857 	bl	800c5dc <prvGetNextExpireTime>
 800c52e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	4619      	mov	r1, r3
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f000 f803 	bl	800c540 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c53a:	f000 f8d5 	bl	800c6e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c53e:	e7f1      	b.n	800c524 <prvTimerTask+0x8>

0800c540 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c54a:	f7ff f85d 	bl	800b608 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	4618      	mov	r0, r3
 800c554:	f000 f866 	bl	800c624 <prvSampleTimeNow>
 800c558:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d130      	bne.n	800c5c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10a      	bne.n	800c57c <prvProcessTimerOrBlockTask+0x3c>
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d806      	bhi.n	800c57c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c56e:	f7ff f859 	bl	800b624 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c572:	68f9      	ldr	r1, [r7, #12]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff ff91 	bl	800c49c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c57a:	e024      	b.n	800c5c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d008      	beq.n	800c594 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c582:	4b13      	ldr	r3, [pc, #76]	; (800c5d0 <prvProcessTimerOrBlockTask+0x90>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	bf0c      	ite	eq
 800c58c:	2301      	moveq	r3, #1
 800c58e:	2300      	movne	r3, #0
 800c590:	b2db      	uxtb	r3, r3
 800c592:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c594:	4b0f      	ldr	r3, [pc, #60]	; (800c5d4 <prvProcessTimerOrBlockTask+0x94>)
 800c596:	6818      	ldr	r0, [r3, #0]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7fe fdcb 	bl	800b13c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5a6:	f7ff f83d 	bl	800b624 <xTaskResumeAll>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10a      	bne.n	800c5c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5b0:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <prvProcessTimerOrBlockTask+0x98>)
 800c5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	f3bf 8f6f 	isb	sy
}
 800c5c0:	e001      	b.n	800c5c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5c2:	f7ff f82f 	bl	800b624 <xTaskResumeAll>
}
 800c5c6:	bf00      	nop
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	20003f30 	.word	0x20003f30
 800c5d4:	20003f34 	.word	0x20003f34
 800c5d8:	e000ed04 	.word	0xe000ed04

0800c5dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5e4:	4b0e      	ldr	r3, [pc, #56]	; (800c620 <prvGetNextExpireTime+0x44>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bf0c      	ite	eq
 800c5ee:	2301      	moveq	r3, #1
 800c5f0:	2300      	movne	r3, #0
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d105      	bne.n	800c60e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <prvGetNextExpireTime+0x44>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	e001      	b.n	800c612 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c60e:	2300      	movs	r3, #0
 800c610:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c612:	68fb      	ldr	r3, [r7, #12]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	bc80      	pop	{r7}
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	20003f2c 	.word	0x20003f2c

0800c624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c62c:	f7ff f898 	bl	800b760 <xTaskGetTickCount>
 800c630:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c632:	4b0b      	ldr	r3, [pc, #44]	; (800c660 <prvSampleTimeNow+0x3c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d205      	bcs.n	800c648 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c63c:	f000 f908 	bl	800c850 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2201      	movs	r2, #1
 800c644:	601a      	str	r2, [r3, #0]
 800c646:	e002      	b.n	800c64e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c64e:	4a04      	ldr	r2, [pc, #16]	; (800c660 <prvSampleTimeNow+0x3c>)
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c654:	68fb      	ldr	r3, [r7, #12]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	20003f3c 	.word	0x20003f3c

0800c664 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c672:	2300      	movs	r3, #0
 800c674:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	429a      	cmp	r2, r3
 800c688:	d812      	bhi.n	800c6b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	1ad2      	subs	r2, r2, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	429a      	cmp	r2, r3
 800c696:	d302      	bcc.n	800c69e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c698:	2301      	movs	r3, #1
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	e01b      	b.n	800c6d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <prvInsertTimerInActiveList+0x7c>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	f7fe f835 	bl	800a718 <vListInsert>
 800c6ae:	e012      	b.n	800c6d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d206      	bcs.n	800c6c6 <prvInsertTimerInActiveList+0x62>
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d302      	bcc.n	800c6c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	e007      	b.n	800c6d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6c6:	4b07      	ldr	r3, [pc, #28]	; (800c6e4 <prvInsertTimerInActiveList+0x80>)
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	f7fe f821 	bl	800a718 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6d6:	697b      	ldr	r3, [r7, #20]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	20003f30 	.word	0x20003f30
 800c6e4:	20003f2c 	.word	0x20003f2c

0800c6e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08e      	sub	sp, #56	; 0x38
 800c6ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6ee:	e09d      	b.n	800c82c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	da18      	bge.n	800c728 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6f6:	1d3b      	adds	r3, r7, #4
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10a      	bne.n	800c718 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	61fb      	str	r3, [r7, #28]
}
 800c714:	bf00      	nop
 800c716:	e7fe      	b.n	800c716 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c71e:	6850      	ldr	r0, [r2, #4]
 800c720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c722:	6892      	ldr	r2, [r2, #8]
 800c724:	4611      	mov	r1, r2
 800c726:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	db7d      	blt.n	800c82a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d004      	beq.n	800c744 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	3304      	adds	r3, #4
 800c73e:	4618      	mov	r0, r3
 800c740:	f7fe f822 	bl	800a788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c744:	463b      	mov	r3, r7
 800c746:	4618      	mov	r0, r3
 800c748:	f7ff ff6c 	bl	800c624 <prvSampleTimeNow>
 800c74c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b09      	cmp	r3, #9
 800c752:	d86b      	bhi.n	800c82c <prvProcessReceivedCommands+0x144>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <prvProcessReceivedCommands+0x74>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c785 	.word	0x0800c785
 800c760:	0800c785 	.word	0x0800c785
 800c764:	0800c785 	.word	0x0800c785
 800c768:	0800c82d 	.word	0x0800c82d
 800c76c:	0800c7e1 	.word	0x0800c7e1
 800c770:	0800c819 	.word	0x0800c819
 800c774:	0800c785 	.word	0x0800c785
 800c778:	0800c785 	.word	0x0800c785
 800c77c:	0800c82d 	.word	0x0800c82d
 800c780:	0800c7e1 	.word	0x0800c7e1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	18d1      	adds	r1, r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c792:	f7ff ff67 	bl	800c664 <prvInsertTimerInActiveList>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d047      	beq.n	800c82c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d13f      	bne.n	800c82c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	441a      	add	r2, r3
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	9300      	str	r3, [sp, #0]
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7be:	f7ff fe1f 	bl	800c400 <xTimerGenericCommand>
 800c7c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d130      	bne.n	800c82c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800c7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ce:	f383 8811 	msr	BASEPRI, r3
 800c7d2:	f3bf 8f6f 	isb	sy
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	61bb      	str	r3, [r7, #24]
}
 800c7dc:	bf00      	nop
 800c7de:	e7fe      	b.n	800c7de <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10a      	bne.n	800c804 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	617b      	str	r3, [r7, #20]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	699a      	ldr	r2, [r3, #24]
 800c808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80a:	18d1      	adds	r1, r2, r3
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c812:	f7ff ff27 	bl	800c664 <prvInsertTimerInActiveList>
					break;
 800c816:	e009      	b.n	800c82c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d104      	bne.n	800c82c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800c822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c824:	f000 fb6e 	bl	800cf04 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c828:	e000      	b.n	800c82c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c82a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c82c:	4b07      	ldr	r3, [pc, #28]	; (800c84c <prvProcessReceivedCommands+0x164>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	1d39      	adds	r1, r7, #4
 800c832:	2200      	movs	r2, #0
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe fa69 	bl	800ad0c <xQueueReceive>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f47f af57 	bne.w	800c6f0 <prvProcessReceivedCommands+0x8>
	}
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	3730      	adds	r7, #48	; 0x30
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20003f34 	.word	0x20003f34

0800c850 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b088      	sub	sp, #32
 800c854:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c856:	e045      	b.n	800c8e4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c858:	4b2c      	ldr	r3, [pc, #176]	; (800c90c <prvSwitchTimerLists+0xbc>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c862:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <prvSwitchTimerLists+0xbc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3304      	adds	r3, #4
 800c870:	4618      	mov	r0, r3
 800c872:	f7fd ff89 	bl	800a788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d12e      	bne.n	800c8e4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	4413      	add	r3, r2
 800c88e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	429a      	cmp	r2, r3
 800c896:	d90e      	bls.n	800c8b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8a4:	4b19      	ldr	r3, [pc, #100]	; (800c90c <prvSwitchTimerLists+0xbc>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	4610      	mov	r0, r2
 800c8b0:	f7fd ff32 	bl	800a718 <vListInsert>
 800c8b4:	e016      	b.n	800c8e4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	693a      	ldr	r2, [r7, #16]
 800c8be:	2100      	movs	r1, #0
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fd9d 	bl	800c400 <xTimerGenericCommand>
 800c8c6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d10a      	bne.n	800c8e4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	603b      	str	r3, [r7, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	e7fe      	b.n	800c8e2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8e4:	4b09      	ldr	r3, [pc, #36]	; (800c90c <prvSwitchTimerLists+0xbc>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d1b4      	bne.n	800c858 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8ee:	4b07      	ldr	r3, [pc, #28]	; (800c90c <prvSwitchTimerLists+0xbc>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8f4:	4b06      	ldr	r3, [pc, #24]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a04      	ldr	r2, [pc, #16]	; (800c90c <prvSwitchTimerLists+0xbc>)
 800c8fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8fc:	4a04      	ldr	r2, [pc, #16]	; (800c910 <prvSwitchTimerLists+0xc0>)
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	6013      	str	r3, [r2, #0]
}
 800c902:	bf00      	nop
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
 800c90a:	bf00      	nop
 800c90c:	20003f2c 	.word	0x20003f2c
 800c910:	20003f30 	.word	0x20003f30

0800c914 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c91a:	f000 f92f 	bl	800cb7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c91e:	4b15      	ldr	r3, [pc, #84]	; (800c974 <prvCheckForValidListAndQueue+0x60>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d120      	bne.n	800c968 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c926:	4814      	ldr	r0, [pc, #80]	; (800c978 <prvCheckForValidListAndQueue+0x64>)
 800c928:	f7fd fea8 	bl	800a67c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c92c:	4813      	ldr	r0, [pc, #76]	; (800c97c <prvCheckForValidListAndQueue+0x68>)
 800c92e:	f7fd fea5 	bl	800a67c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c932:	4b13      	ldr	r3, [pc, #76]	; (800c980 <prvCheckForValidListAndQueue+0x6c>)
 800c934:	4a10      	ldr	r2, [pc, #64]	; (800c978 <prvCheckForValidListAndQueue+0x64>)
 800c936:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c938:	4b12      	ldr	r3, [pc, #72]	; (800c984 <prvCheckForValidListAndQueue+0x70>)
 800c93a:	4a10      	ldr	r2, [pc, #64]	; (800c97c <prvCheckForValidListAndQueue+0x68>)
 800c93c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c93e:	2300      	movs	r3, #0
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	4b11      	ldr	r3, [pc, #68]	; (800c988 <prvCheckForValidListAndQueue+0x74>)
 800c944:	4a11      	ldr	r2, [pc, #68]	; (800c98c <prvCheckForValidListAndQueue+0x78>)
 800c946:	2110      	movs	r1, #16
 800c948:	200a      	movs	r0, #10
 800c94a:	f7fd ffaf 	bl	800a8ac <xQueueGenericCreateStatic>
 800c94e:	4603      	mov	r3, r0
 800c950:	4a08      	ldr	r2, [pc, #32]	; (800c974 <prvCheckForValidListAndQueue+0x60>)
 800c952:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c954:	4b07      	ldr	r3, [pc, #28]	; (800c974 <prvCheckForValidListAndQueue+0x60>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d005      	beq.n	800c968 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c95c:	4b05      	ldr	r3, [pc, #20]	; (800c974 <prvCheckForValidListAndQueue+0x60>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	490b      	ldr	r1, [pc, #44]	; (800c990 <prvCheckForValidListAndQueue+0x7c>)
 800c962:	4618      	mov	r0, r3
 800c964:	f7fe fbc2 	bl	800b0ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c968:	f000 f938 	bl	800cbdc <vPortExitCritical>
}
 800c96c:	bf00      	nop
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20003f34 	.word	0x20003f34
 800c978:	20003f04 	.word	0x20003f04
 800c97c:	20003f18 	.word	0x20003f18
 800c980:	20003f2c 	.word	0x20003f2c
 800c984:	20003f30 	.word	0x20003f30
 800c988:	20003fe0 	.word	0x20003fe0
 800c98c:	20003f40 	.word	0x20003f40
 800c990:	0801c260 	.word	0x0801c260

0800c994 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3b04      	subs	r3, #4
 800c9a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3b04      	subs	r3, #4
 800c9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	f023 0201 	bic.w	r2, r3, #1
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3b04      	subs	r3, #4
 800c9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9c4:	4a08      	ldr	r2, [pc, #32]	; (800c9e8 <pxPortInitialiseStack+0x54>)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3b14      	subs	r3, #20
 800c9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	3b20      	subs	r3, #32
 800c9da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3714      	adds	r7, #20
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bc80      	pop	{r7}
 800c9e6:	4770      	bx	lr
 800c9e8:	0800c9ed 	.word	0x0800c9ed

0800c9ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9f6:	4b12      	ldr	r3, [pc, #72]	; (800ca40 <prvTaskExitError+0x54>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9fe:	d00a      	beq.n	800ca16 <prvTaskExitError+0x2a>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	60fb      	str	r3, [r7, #12]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <prvTaskExitError+0x28>
	__asm volatile
 800ca16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	60bb      	str	r3, [r7, #8]
}
 800ca28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca2a:	bf00      	nop
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d0fc      	beq.n	800ca2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca32:	bf00      	nop
 800ca34:	bf00      	nop
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bc80      	pop	{r7}
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	20000028 	.word	0x20000028
	...

0800ca50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <pxCurrentTCBConst2>)
 800ca52:	6819      	ldr	r1, [r3, #0]
 800ca54:	6808      	ldr	r0, [r1, #0]
 800ca56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ca5a:	f380 8809 	msr	PSP, r0
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f04f 0000 	mov.w	r0, #0
 800ca66:	f380 8811 	msr	BASEPRI, r0
 800ca6a:	f04e 0e0d 	orr.w	lr, lr, #13
 800ca6e:	4770      	bx	lr

0800ca70 <pxCurrentTCBConst2>:
 800ca70:	20003a04 	.word	0x20003a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800ca78:	4806      	ldr	r0, [pc, #24]	; (800ca94 <prvPortStartFirstTask+0x1c>)
 800ca7a:	6800      	ldr	r0, [r0, #0]
 800ca7c:	6800      	ldr	r0, [r0, #0]
 800ca7e:	f380 8808 	msr	MSP, r0
 800ca82:	b662      	cpsie	i
 800ca84:	b661      	cpsie	f
 800ca86:	f3bf 8f4f 	dsb	sy
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	df00      	svc	0
 800ca90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca92:	bf00      	nop
 800ca94:	e000ed08 	.word	0xe000ed08

0800ca98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca9e:	4b32      	ldr	r3, [pc, #200]	; (800cb68 <xPortStartScheduler+0xd0>)
 800caa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	22ff      	movs	r2, #255	; 0xff
 800caae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cab8:	78fb      	ldrb	r3, [r7, #3]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	4b2a      	ldr	r3, [pc, #168]	; (800cb6c <xPortStartScheduler+0xd4>)
 800cac4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cac6:	4b2a      	ldr	r3, [pc, #168]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cac8:	2207      	movs	r2, #7
 800caca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cacc:	e009      	b.n	800cae2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cace:	4b28      	ldr	r3, [pc, #160]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3b01      	subs	r3, #1
 800cad4:	4a26      	ldr	r2, [pc, #152]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cad6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cae2:	78fb      	ldrb	r3, [r7, #3]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800caea:	2b80      	cmp	r3, #128	; 0x80
 800caec:	d0ef      	beq.n	800cace <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800caee:	4b20      	ldr	r3, [pc, #128]	; (800cb70 <xPortStartScheduler+0xd8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f1c3 0307 	rsb	r3, r3, #7
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	d00a      	beq.n	800cb10 <xPortStartScheduler+0x78>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	60bb      	str	r3, [r7, #8]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb10:	4b17      	ldr	r3, [pc, #92]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	021b      	lsls	r3, r3, #8
 800cb16:	4a16      	ldr	r2, [pc, #88]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cb18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb1a:	4b15      	ldr	r3, [pc, #84]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb22:	4a13      	ldr	r2, [pc, #76]	; (800cb70 <xPortStartScheduler+0xd8>)
 800cb24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <xPortStartScheduler+0xdc>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a10      	ldr	r2, [pc, #64]	; (800cb74 <xPortStartScheduler+0xdc>)
 800cb34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb3a:	4b0e      	ldr	r3, [pc, #56]	; (800cb74 <xPortStartScheduler+0xdc>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a0d      	ldr	r2, [pc, #52]	; (800cb74 <xPortStartScheduler+0xdc>)
 800cb40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb46:	f000 f8b9 	bl	800ccbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb4a:	4b0b      	ldr	r3, [pc, #44]	; (800cb78 <xPortStartScheduler+0xe0>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cb50:	f7ff ff92 	bl	800ca78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb54:	f7fe fed0 	bl	800b8f8 <vTaskSwitchContext>
	prvTaskExitError();
 800cb58:	f7ff ff48 	bl	800c9ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	e000e400 	.word	0xe000e400
 800cb6c:	20004030 	.word	0x20004030
 800cb70:	20004034 	.word	0x20004034
 800cb74:	e000ed20 	.word	0xe000ed20
 800cb78:	20000028 	.word	0x20000028

0800cb7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	607b      	str	r3, [r7, #4]
}
 800cb94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb96:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <vPortEnterCritical+0x58>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	4a0d      	ldr	r2, [pc, #52]	; (800cbd4 <vPortEnterCritical+0x58>)
 800cb9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cba0:	4b0c      	ldr	r3, [pc, #48]	; (800cbd4 <vPortEnterCritical+0x58>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d10f      	bne.n	800cbc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cba8:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <vPortEnterCritical+0x5c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <vPortEnterCritical+0x4c>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	603b      	str	r3, [r7, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	e7fe      	b.n	800cbc6 <vPortEnterCritical+0x4a>
	}
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bc80      	pop	{r7}
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	20000028 	.word	0x20000028
 800cbd8:	e000ed04 	.word	0xe000ed04

0800cbdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cbe2:	4b11      	ldr	r3, [pc, #68]	; (800cc28 <vPortExitCritical+0x4c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10a      	bne.n	800cc00 <vPortExitCritical+0x24>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
 800cbfe:	e7fe      	b.n	800cbfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc00:	4b09      	ldr	r3, [pc, #36]	; (800cc28 <vPortExitCritical+0x4c>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	4a08      	ldr	r2, [pc, #32]	; (800cc28 <vPortExitCritical+0x4c>)
 800cc08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc0a:	4b07      	ldr	r3, [pc, #28]	; (800cc28 <vPortExitCritical+0x4c>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d105      	bne.n	800cc1e <vPortExitCritical+0x42>
 800cc12:	2300      	movs	r3, #0
 800cc14:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	f383 8811 	msr	BASEPRI, r3
}
 800cc1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc1e:	bf00      	nop
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bc80      	pop	{r7}
 800cc26:	4770      	bx	lr
 800cc28:	20000028 	.word	0x20000028
 800cc2c:	00000000 	.word	0x00000000

0800cc30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cc30:	f3ef 8009 	mrs	r0, PSP
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <pxCurrentTCBConst>)
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc40:	6010      	str	r0, [r2, #0]
 800cc42:	e92d 4008 	stmdb	sp!, {r3, lr}
 800cc46:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cc4a:	f380 8811 	msr	BASEPRI, r0
 800cc4e:	f7fe fe53 	bl	800b8f8 <vTaskSwitchContext>
 800cc52:	f04f 0000 	mov.w	r0, #0
 800cc56:	f380 8811 	msr	BASEPRI, r0
 800cc5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc5e:	6819      	ldr	r1, [r3, #0]
 800cc60:	6808      	ldr	r0, [r1, #0]
 800cc62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800cc66:	f380 8809 	msr	PSP, r0
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	4770      	bx	lr

0800cc70 <pxCurrentTCBConst>:
 800cc70:	20003a04 	.word	0x20003a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop

0800cc78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	607b      	str	r3, [r7, #4]
}
 800cc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc92:	f7fe fd73 	bl	800b77c <xTaskIncrementTick>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d003      	beq.n	800cca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <SysTick_Handler+0x40>)
 800cc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	2300      	movs	r3, #0
 800cca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	f383 8811 	msr	BASEPRI, r3
}
 800ccae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ccb0:	bf00      	nop
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	e000ed04 	.word	0xe000ed04

0800ccbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ccc0:	4b0a      	ldr	r3, [pc, #40]	; (800ccec <vPortSetupTimerInterrupt+0x30>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ccc6:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <vPortSetupTimerInterrupt+0x34>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cccc:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <vPortSetupTimerInterrupt+0x38>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a09      	ldr	r2, [pc, #36]	; (800ccf8 <vPortSetupTimerInterrupt+0x3c>)
 800ccd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd6:	099b      	lsrs	r3, r3, #6
 800ccd8:	4a08      	ldr	r2, [pc, #32]	; (800ccfc <vPortSetupTimerInterrupt+0x40>)
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccde:	4b03      	ldr	r3, [pc, #12]	; (800ccec <vPortSetupTimerInterrupt+0x30>)
 800cce0:	2207      	movs	r2, #7
 800cce2:	601a      	str	r2, [r3, #0]
}
 800cce4:	bf00      	nop
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bc80      	pop	{r7}
 800ccea:	4770      	bx	lr
 800ccec:	e000e010 	.word	0xe000e010
 800ccf0:	e000e018 	.word	0xe000e018
 800ccf4:	2000001c 	.word	0x2000001c
 800ccf8:	10624dd3 	.word	0x10624dd3
 800ccfc:	e000e014 	.word	0xe000e014

0800cd00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cd06:	f3ef 8305 	mrs	r3, IPSR
 800cd0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b0f      	cmp	r3, #15
 800cd10:	d914      	bls.n	800cd3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd12:	4a16      	ldr	r2, [pc, #88]	; (800cd6c <vPortValidateInterruptPriority+0x6c>)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	4413      	add	r3, r2
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd1c:	4b14      	ldr	r3, [pc, #80]	; (800cd70 <vPortValidateInterruptPriority+0x70>)
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	7afa      	ldrb	r2, [r7, #11]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d20a      	bcs.n	800cd3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	607b      	str	r3, [r7, #4]
}
 800cd38:	bf00      	nop
 800cd3a:	e7fe      	b.n	800cd3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <vPortValidateInterruptPriority+0x74>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cd44:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <vPortValidateInterruptPriority+0x78>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d90a      	bls.n	800cd62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	603b      	str	r3, [r7, #0]
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <vPortValidateInterruptPriority+0x60>
	}
 800cd62:	bf00      	nop
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bc80      	pop	{r7}
 800cd6a:	4770      	bx	lr
 800cd6c:	e000e3f0 	.word	0xe000e3f0
 800cd70:	20004030 	.word	0x20004030
 800cd74:	e000ed0c 	.word	0xe000ed0c
 800cd78:	20004034 	.word	0x20004034

0800cd7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08a      	sub	sp, #40	; 0x28
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd84:	2300      	movs	r3, #0
 800cd86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd88:	f7fe fc3e 	bl	800b608 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd8c:	4b58      	ldr	r3, [pc, #352]	; (800cef0 <pvPortMalloc+0x174>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd94:	f000 f910 	bl	800cfb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd98:	4b56      	ldr	r3, [pc, #344]	; (800cef4 <pvPortMalloc+0x178>)
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4013      	ands	r3, r2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f040 808e 	bne.w	800cec2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d01d      	beq.n	800cde8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cdac:	2208      	movs	r2, #8
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d014      	beq.n	800cde8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f023 0307 	bic.w	r3, r3, #7
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f003 0307 	and.w	r3, r3, #7
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00a      	beq.n	800cde8 <pvPortMalloc+0x6c>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	617b      	str	r3, [r7, #20]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d069      	beq.n	800cec2 <pvPortMalloc+0x146>
 800cdee:	4b42      	ldr	r3, [pc, #264]	; (800cef8 <pvPortMalloc+0x17c>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d864      	bhi.n	800cec2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cdf8:	4b40      	ldr	r3, [pc, #256]	; (800cefc <pvPortMalloc+0x180>)
 800cdfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cdfc:	4b3f      	ldr	r3, [pc, #252]	; (800cefc <pvPortMalloc+0x180>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce02:	e004      	b.n	800ce0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d903      	bls.n	800ce20 <pvPortMalloc+0xa4>
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1f1      	bne.n	800ce04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce20:	4b33      	ldr	r3, [pc, #204]	; (800cef0 <pvPortMalloc+0x174>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d04b      	beq.n	800cec2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce2a:	6a3b      	ldr	r3, [r7, #32]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2208      	movs	r2, #8
 800ce30:	4413      	add	r3, r2
 800ce32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	6a3b      	ldr	r3, [r7, #32]
 800ce3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	1ad2      	subs	r2, r2, r3
 800ce44:	2308      	movs	r3, #8
 800ce46:	005b      	lsls	r3, r3, #1
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d91f      	bls.n	800ce8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4413      	add	r3, r2
 800ce52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	f003 0307 	and.w	r3, r3, #7
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00a      	beq.n	800ce74 <pvPortMalloc+0xf8>
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	613b      	str	r3, [r7, #16]
}
 800ce70:	bf00      	nop
 800ce72:	e7fe      	b.n	800ce72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	1ad2      	subs	r2, r2, r3
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce86:	69b8      	ldr	r0, [r7, #24]
 800ce88:	f000 f8f8 	bl	800d07c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce8c:	4b1a      	ldr	r3, [pc, #104]	; (800cef8 <pvPortMalloc+0x17c>)
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	4a18      	ldr	r2, [pc, #96]	; (800cef8 <pvPortMalloc+0x17c>)
 800ce98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce9a:	4b17      	ldr	r3, [pc, #92]	; (800cef8 <pvPortMalloc+0x17c>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	4b18      	ldr	r3, [pc, #96]	; (800cf00 <pvPortMalloc+0x184>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d203      	bcs.n	800ceae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cea6:	4b14      	ldr	r3, [pc, #80]	; (800cef8 <pvPortMalloc+0x17c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a15      	ldr	r2, [pc, #84]	; (800cf00 <pvPortMalloc+0x184>)
 800ceac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	685a      	ldr	r2, [r3, #4]
 800ceb2:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <pvPortMalloc+0x178>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	2200      	movs	r2, #0
 800cec0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cec2:	f7fe fbaf 	bl	800b624 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	f003 0307 	and.w	r3, r3, #7
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00a      	beq.n	800cee6 <pvPortMalloc+0x16a>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	60fb      	str	r3, [r7, #12]
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <pvPortMalloc+0x168>
	return pvReturn;
 800cee6:	69fb      	ldr	r3, [r7, #28]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3728      	adds	r7, #40	; 0x28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20006750 	.word	0x20006750
 800cef4:	2000675c 	.word	0x2000675c
 800cef8:	20006754 	.word	0x20006754
 800cefc:	20006748 	.word	0x20006748
 800cf00:	20006758 	.word	0x20006758

0800cf04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d048      	beq.n	800cfa8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf16:	2308      	movs	r3, #8
 800cf18:	425b      	negs	r3, r3
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	685a      	ldr	r2, [r3, #4]
 800cf28:	4b21      	ldr	r3, [pc, #132]	; (800cfb0 <vPortFree+0xac>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4013      	ands	r3, r2
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10a      	bne.n	800cf48 <vPortFree+0x44>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	60fb      	str	r3, [r7, #12]
}
 800cf44:	bf00      	nop
 800cf46:	e7fe      	b.n	800cf46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00a      	beq.n	800cf66 <vPortFree+0x62>
	__asm volatile
 800cf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	60bb      	str	r3, [r7, #8]
}
 800cf62:	bf00      	nop
 800cf64:	e7fe      	b.n	800cf64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <vPortFree+0xac>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4013      	ands	r3, r2
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d019      	beq.n	800cfa8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d115      	bne.n	800cfa8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	4b0b      	ldr	r3, [pc, #44]	; (800cfb0 <vPortFree+0xac>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	43db      	mvns	r3, r3
 800cf86:	401a      	ands	r2, r3
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf8c:	f7fe fb3c 	bl	800b608 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <vPortFree+0xb0>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4413      	add	r3, r2
 800cf9a:	4a06      	ldr	r2, [pc, #24]	; (800cfb4 <vPortFree+0xb0>)
 800cf9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf9e:	6938      	ldr	r0, [r7, #16]
 800cfa0:	f000 f86c 	bl	800d07c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cfa4:	f7fe fb3e 	bl	800b624 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cfa8:	bf00      	nop
 800cfaa:	3718      	adds	r7, #24
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	2000675c 	.word	0x2000675c
 800cfb4:	20006754 	.word	0x20006754

0800cfb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cfbe:	f242 7310 	movw	r3, #10000	; 0x2710
 800cfc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cfc4:	4b27      	ldr	r3, [pc, #156]	; (800d064 <prvHeapInit+0xac>)
 800cfc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00c      	beq.n	800cfec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f023 0307 	bic.w	r3, r3, #7
 800cfde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	4a1f      	ldr	r2, [pc, #124]	; (800d064 <prvHeapInit+0xac>)
 800cfe8:	4413      	add	r3, r2
 800cfea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cff0:	4a1d      	ldr	r2, [pc, #116]	; (800d068 <prvHeapInit+0xb0>)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cff6:	4b1c      	ldr	r3, [pc, #112]	; (800d068 <prvHeapInit+0xb0>)
 800cff8:	2200      	movs	r2, #0
 800cffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	68ba      	ldr	r2, [r7, #8]
 800d000:	4413      	add	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d004:	2208      	movs	r2, #8
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	1a9b      	subs	r3, r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f023 0307 	bic.w	r3, r3, #7
 800d012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	4a15      	ldr	r2, [pc, #84]	; (800d06c <prvHeapInit+0xb4>)
 800d018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d01a:	4b14      	ldr	r3, [pc, #80]	; (800d06c <prvHeapInit+0xb4>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2200      	movs	r2, #0
 800d020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d022:	4b12      	ldr	r3, [pc, #72]	; (800d06c <prvHeapInit+0xb4>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	1ad2      	subs	r2, r2, r3
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d038:	4b0c      	ldr	r3, [pc, #48]	; (800d06c <prvHeapInit+0xb4>)
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	4a0a      	ldr	r2, [pc, #40]	; (800d070 <prvHeapInit+0xb8>)
 800d046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	4a09      	ldr	r2, [pc, #36]	; (800d074 <prvHeapInit+0xbc>)
 800d04e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d050:	4b09      	ldr	r3, [pc, #36]	; (800d078 <prvHeapInit+0xc0>)
 800d052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d056:	601a      	str	r2, [r3, #0]
}
 800d058:	bf00      	nop
 800d05a:	3714      	adds	r7, #20
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bc80      	pop	{r7}
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	20004038 	.word	0x20004038
 800d068:	20006748 	.word	0x20006748
 800d06c:	20006750 	.word	0x20006750
 800d070:	20006758 	.word	0x20006758
 800d074:	20006754 	.word	0x20006754
 800d078:	2000675c 	.word	0x2000675c

0800d07c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d084:	4b27      	ldr	r3, [pc, #156]	; (800d124 <prvInsertBlockIntoFreeList+0xa8>)
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	e002      	b.n	800d090 <prvInsertBlockIntoFreeList+0x14>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	429a      	cmp	r2, r3
 800d098:	d8f7      	bhi.n	800d08a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d108      	bne.n	800d0be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	441a      	add	r2, r3
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	68ba      	ldr	r2, [r7, #8]
 800d0c8:	441a      	add	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d118      	bne.n	800d104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	4b14      	ldr	r3, [pc, #80]	; (800d128 <prvInsertBlockIntoFreeList+0xac>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d00d      	beq.n	800d0fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	685a      	ldr	r2, [r3, #4]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	441a      	add	r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	601a      	str	r2, [r3, #0]
 800d0f8:	e008      	b.n	800d10c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0fa:	4b0b      	ldr	r3, [pc, #44]	; (800d128 <prvInsertBlockIntoFreeList+0xac>)
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	e003      	b.n	800d10c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	429a      	cmp	r2, r3
 800d112:	d002      	beq.n	800d11a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d11a:	bf00      	nop
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	bc80      	pop	{r7}
 800d122:	4770      	bx	lr
 800d124:	20006748 	.word	0x20006748
 800d128:	20006750 	.word	0x20006750

0800d12c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d12c:	f000 b86c 	b.w	800d208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>

0800d130 <get_serialized_size_geometry_msgs__msg__Twist>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	4604      	mov	r4, r0
 800d134:	b148      	cbz	r0, 800d14a <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800d136:	460d      	mov	r5, r1
 800d138:	f000 f86a 	bl	800d210 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d13c:	4606      	mov	r6, r0
 800d13e:	f104 0018 	add.w	r0, r4, #24
 800d142:	19a9      	adds	r1, r5, r6
 800d144:	f000 f864 	bl	800d210 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d148:	4430      	add	r0, r6
 800d14a:	bd70      	pop	{r4, r5, r6, pc}

0800d14c <_Twist__cdr_deserialize>:
 800d14c:	b570      	push	{r4, r5, r6, lr}
 800d14e:	460c      	mov	r4, r1
 800d150:	b189      	cbz	r1, 800d176 <_Twist__cdr_deserialize+0x2a>
 800d152:	4605      	mov	r5, r0
 800d154:	f000 f8e8 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d158:	6843      	ldr	r3, [r0, #4]
 800d15a:	4621      	mov	r1, r4
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	4628      	mov	r0, r5
 800d160:	4798      	blx	r3
 800d162:	f000 f8e1 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d166:	6843      	ldr	r3, [r0, #4]
 800d168:	f104 0118 	add.w	r1, r4, #24
 800d16c:	4628      	mov	r0, r5
 800d16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	4718      	bx	r3
 800d176:	4608      	mov	r0, r1
 800d178:	bd70      	pop	{r4, r5, r6, pc}
 800d17a:	bf00      	nop

0800d17c <_Twist__cdr_serialize>:
 800d17c:	b198      	cbz	r0, 800d1a6 <_Twist__cdr_serialize+0x2a>
 800d17e:	b570      	push	{r4, r5, r6, lr}
 800d180:	460d      	mov	r5, r1
 800d182:	4604      	mov	r4, r0
 800d184:	f000 f8d0 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d188:	6843      	ldr	r3, [r0, #4]
 800d18a:	4629      	mov	r1, r5
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	4620      	mov	r0, r4
 800d190:	4798      	blx	r3
 800d192:	f000 f8c9 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d196:	6843      	ldr	r3, [r0, #4]
 800d198:	4629      	mov	r1, r5
 800d19a:	f104 0018 	add.w	r0, r4, #24
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1a4:	4718      	bx	r3
 800d1a6:	4770      	bx	lr

0800d1a8 <_Twist__get_serialized_size>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	b148      	cbz	r0, 800d1c2 <_Twist__get_serialized_size+0x1a>
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f000 f82e 	bl	800d210 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	f104 0018 	add.w	r0, r4, #24
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	f000 f828 	bl	800d210 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d1c0:	4428      	add	r0, r5
 800d1c2:	bd38      	pop	{r3, r4, r5, pc}

0800d1c4 <_Twist__max_serialized_size>:
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	b510      	push	{r4, lr}
 800d1c8:	b082      	sub	sp, #8
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	f10d 0007 	add.w	r0, sp, #7
 800d1d0:	f88d 3007 	strb.w	r3, [sp, #7]
 800d1d4:	f000 f88c 	bl	800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1d8:	4604      	mov	r4, r0
 800d1da:	f10d 0007 	add.w	r0, sp, #7
 800d1de:	4621      	mov	r1, r4
 800d1e0:	f000 f886 	bl	800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1e4:	4420      	add	r0, r4
 800d1e6:	b002      	add	sp, #8
 800d1e8:	bd10      	pop	{r4, pc}
 800d1ea:	bf00      	nop

0800d1ec <max_serialized_size_geometry_msgs__msg__Twist>:
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	b570      	push	{r4, r5, r6, lr}
 800d1f0:	7003      	strb	r3, [r0, #0]
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	460e      	mov	r6, r1
 800d1f6:	f000 f87b 	bl	800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	1931      	adds	r1, r6, r4
 800d200:	f000 f876 	bl	800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d204:	4420      	add	r0, r4
 800d206:	bd70      	pop	{r4, r5, r6, pc}

0800d208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800d208:	4800      	ldr	r0, [pc, #0]	; (800d20c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800d20a:	4770      	bx	lr
 800d20c:	2000002c 	.word	0x2000002c

0800d210 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800d210:	b1b8      	cbz	r0, 800d242 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800d212:	b538      	push	{r3, r4, r5, lr}
 800d214:	460d      	mov	r5, r1
 800d216:	2108      	movs	r1, #8
 800d218:	4628      	mov	r0, r5
 800d21a:	f001 fcd1 	bl	800ebc0 <ucdr_alignment>
 800d21e:	f105 0408 	add.w	r4, r5, #8
 800d222:	4404      	add	r4, r0
 800d224:	4620      	mov	r0, r4
 800d226:	2108      	movs	r1, #8
 800d228:	f001 fcca 	bl	800ebc0 <ucdr_alignment>
 800d22c:	3008      	adds	r0, #8
 800d22e:	4404      	add	r4, r0
 800d230:	4620      	mov	r0, r4
 800d232:	2108      	movs	r1, #8
 800d234:	f001 fcc4 	bl	800ebc0 <ucdr_alignment>
 800d238:	f1c5 0508 	rsb	r5, r5, #8
 800d23c:	4428      	add	r0, r5
 800d23e:	4420      	add	r0, r4
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	4770      	bx	lr

0800d244 <_Vector3__cdr_deserialize>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	460c      	mov	r4, r1
 800d248:	b171      	cbz	r1, 800d268 <_Vector3__cdr_deserialize+0x24>
 800d24a:	4605      	mov	r5, r0
 800d24c:	f001 faca 	bl	800e7e4 <ucdr_deserialize_double>
 800d250:	f104 0108 	add.w	r1, r4, #8
 800d254:	4628      	mov	r0, r5
 800d256:	f001 fac5 	bl	800e7e4 <ucdr_deserialize_double>
 800d25a:	4628      	mov	r0, r5
 800d25c:	f104 0110 	add.w	r1, r4, #16
 800d260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d264:	f001 babe 	b.w	800e7e4 <ucdr_deserialize_double>
 800d268:	4608      	mov	r0, r1
 800d26a:	bd38      	pop	{r3, r4, r5, pc}

0800d26c <_Vector3__cdr_serialize>:
 800d26c:	b198      	cbz	r0, 800d296 <_Vector3__cdr_serialize+0x2a>
 800d26e:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d272:	b570      	push	{r4, r5, r6, lr}
 800d274:	460d      	mov	r5, r1
 800d276:	4604      	mov	r4, r0
 800d278:	4608      	mov	r0, r1
 800d27a:	f001 f911 	bl	800e4a0 <ucdr_serialize_double>
 800d27e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800d282:	4628      	mov	r0, r5
 800d284:	f001 f90c 	bl	800e4a0 <ucdr_serialize_double>
 800d288:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d28c:	4628      	mov	r0, r5
 800d28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d292:	f001 b905 	b.w	800e4a0 <ucdr_serialize_double>
 800d296:	4770      	bx	lr

0800d298 <_Vector3__get_serialized_size>:
 800d298:	b198      	cbz	r0, 800d2c2 <_Vector3__get_serialized_size+0x2a>
 800d29a:	b510      	push	{r4, lr}
 800d29c:	2108      	movs	r1, #8
 800d29e:	2000      	movs	r0, #0
 800d2a0:	f001 fc8e 	bl	800ebc0 <ucdr_alignment>
 800d2a4:	f100 0408 	add.w	r4, r0, #8
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	2108      	movs	r1, #8
 800d2ac:	f001 fc88 	bl	800ebc0 <ucdr_alignment>
 800d2b0:	3008      	adds	r0, #8
 800d2b2:	4404      	add	r4, r0
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	2108      	movs	r1, #8
 800d2b8:	f001 fc82 	bl	800ebc0 <ucdr_alignment>
 800d2bc:	3008      	adds	r0, #8
 800d2be:	4420      	add	r0, r4
 800d2c0:	bd10      	pop	{r4, pc}
 800d2c2:	4770      	bx	lr

0800d2c4 <_Vector3__max_serialized_size>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	2108      	movs	r1, #8
 800d2c8:	2000      	movs	r0, #0
 800d2ca:	f001 fc79 	bl	800ebc0 <ucdr_alignment>
 800d2ce:	f100 0508 	add.w	r5, r0, #8
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	2108      	movs	r1, #8
 800d2d6:	f001 fc73 	bl	800ebc0 <ucdr_alignment>
 800d2da:	f100 0408 	add.w	r4, r0, #8
 800d2de:	442c      	add	r4, r5
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	2108      	movs	r1, #8
 800d2e4:	f001 fc6c 	bl	800ebc0 <ucdr_alignment>
 800d2e8:	3008      	adds	r0, #8
 800d2ea:	4420      	add	r0, r4
 800d2ec:	bd38      	pop	{r3, r4, r5, pc}
 800d2ee:	bf00      	nop

0800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	4608      	mov	r0, r1
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	2108      	movs	r1, #8
 800d2fe:	f001 fc5f 	bl	800ebc0 <ucdr_alignment>
 800d302:	f104 0508 	add.w	r5, r4, #8
 800d306:	1946      	adds	r6, r0, r5
 800d308:	4630      	mov	r0, r6
 800d30a:	2108      	movs	r1, #8
 800d30c:	f001 fc58 	bl	800ebc0 <ucdr_alignment>
 800d310:	f100 0508 	add.w	r5, r0, #8
 800d314:	4435      	add	r5, r6
 800d316:	4628      	mov	r0, r5
 800d318:	2108      	movs	r1, #8
 800d31a:	f001 fc51 	bl	800ebc0 <ucdr_alignment>
 800d31e:	f1c4 0408 	rsb	r4, r4, #8
 800d322:	4420      	add	r0, r4
 800d324:	4428      	add	r0, r5
 800d326:	bd70      	pop	{r4, r5, r6, pc}

0800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800d328:	4800      	ldr	r0, [pc, #0]	; (800d32c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800d32a:	4770      	bx	lr
 800d32c:	20000054 	.word	0x20000054

0800d330 <ucdr_serialize_bool>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	460d      	mov	r5, r1
 800d334:	2101      	movs	r1, #1
 800d336:	4604      	mov	r4, r0
 800d338:	f001 fbf8 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d33c:	b148      	cbz	r0, 800d352 <ucdr_serialize_bool+0x22>
 800d33e:	2101      	movs	r1, #1
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	701d      	strb	r5, [r3, #0]
 800d344:	68a2      	ldr	r2, [r4, #8]
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	440a      	add	r2, r1
 800d34a:	440b      	add	r3, r1
 800d34c:	60a2      	str	r2, [r4, #8]
 800d34e:	6123      	str	r3, [r4, #16]
 800d350:	7561      	strb	r1, [r4, #21]
 800d352:	7da0      	ldrb	r0, [r4, #22]
 800d354:	f080 0001 	eor.w	r0, r0, #1
 800d358:	bd38      	pop	{r3, r4, r5, pc}
 800d35a:	bf00      	nop

0800d35c <ucdr_deserialize_bool>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	460d      	mov	r5, r1
 800d360:	2101      	movs	r1, #1
 800d362:	4604      	mov	r4, r0
 800d364:	f001 fbe2 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d368:	b160      	cbz	r0, 800d384 <ucdr_deserialize_bool+0x28>
 800d36a:	68a2      	ldr	r2, [r4, #8]
 800d36c:	2001      	movs	r0, #1
 800d36e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	3900      	subs	r1, #0
 800d376:	bf18      	it	ne
 800d378:	2101      	movne	r1, #1
 800d37a:	4403      	add	r3, r0
 800d37c:	7029      	strb	r1, [r5, #0]
 800d37e:	60a2      	str	r2, [r4, #8]
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	7560      	strb	r0, [r4, #21]
 800d384:	7da0      	ldrb	r0, [r4, #22]
 800d386:	f080 0001 	eor.w	r0, r0, #1
 800d38a:	bd38      	pop	{r3, r4, r5, pc}

0800d38c <ucdr_serialize_uint8_t>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	460d      	mov	r5, r1
 800d390:	2101      	movs	r1, #1
 800d392:	4604      	mov	r4, r0
 800d394:	f001 fbca 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d398:	b148      	cbz	r0, 800d3ae <ucdr_serialize_uint8_t+0x22>
 800d39a:	2101      	movs	r1, #1
 800d39c:	68a3      	ldr	r3, [r4, #8]
 800d39e:	701d      	strb	r5, [r3, #0]
 800d3a0:	68a2      	ldr	r2, [r4, #8]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	440a      	add	r2, r1
 800d3a6:	440b      	add	r3, r1
 800d3a8:	60a2      	str	r2, [r4, #8]
 800d3aa:	6123      	str	r3, [r4, #16]
 800d3ac:	7561      	strb	r1, [r4, #21]
 800d3ae:	7da0      	ldrb	r0, [r4, #22]
 800d3b0:	f080 0001 	eor.w	r0, r0, #1
 800d3b4:	bd38      	pop	{r3, r4, r5, pc}
 800d3b6:	bf00      	nop

0800d3b8 <ucdr_deserialize_uint8_t>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	460d      	mov	r5, r1
 800d3bc:	2101      	movs	r1, #1
 800d3be:	4604      	mov	r4, r0
 800d3c0:	f001 fbb4 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d3c4:	b150      	cbz	r0, 800d3dc <ucdr_deserialize_uint8_t+0x24>
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	68a3      	ldr	r3, [r4, #8]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	702b      	strb	r3, [r5, #0]
 800d3ce:	68a2      	ldr	r2, [r4, #8]
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	440a      	add	r2, r1
 800d3d4:	440b      	add	r3, r1
 800d3d6:	60a2      	str	r2, [r4, #8]
 800d3d8:	6123      	str	r3, [r4, #16]
 800d3da:	7561      	strb	r1, [r4, #21]
 800d3dc:	7da0      	ldrb	r0, [r4, #22]
 800d3de:	f080 0001 	eor.w	r0, r0, #1
 800d3e2:	bd38      	pop	{r3, r4, r5, pc}

0800d3e4 <ucdr_serialize_uint16_t>:
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	b082      	sub	sp, #8
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3f4:	f001 fbec 	bl	800ebd0 <ucdr_buffer_alignment>
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	7d67      	ldrb	r7, [r4, #21]
 800d3fe:	f001 fc2d 	bl	800ec5c <ucdr_advance_buffer>
 800d402:	4620      	mov	r0, r4
 800d404:	2102      	movs	r1, #2
 800d406:	f001 fb85 	bl	800eb14 <ucdr_check_buffer_available_for>
 800d40a:	bb78      	cbnz	r0, 800d46c <ucdr_serialize_uint16_t+0x88>
 800d40c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d410:	42ab      	cmp	r3, r5
 800d412:	d926      	bls.n	800d462 <ucdr_serialize_uint16_t+0x7e>
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	1b5e      	subs	r6, r3, r5
 800d418:	4432      	add	r2, r6
 800d41a:	f1c6 0802 	rsb	r8, r6, #2
 800d41e:	4641      	mov	r1, r8
 800d420:	4620      	mov	r0, r4
 800d422:	60a3      	str	r3, [r4, #8]
 800d424:	6122      	str	r2, [r4, #16]
 800d426:	f001 fb81 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d03b      	beq.n	800d4a6 <ucdr_serialize_uint16_t+0xc2>
 800d42e:	7d23      	ldrb	r3, [r4, #20]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d04a      	beq.n	800d4ca <ucdr_serialize_uint16_t+0xe6>
 800d434:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d438:	702b      	strb	r3, [r5, #0]
 800d43a:	2e00      	cmp	r6, #0
 800d43c:	d040      	beq.n	800d4c0 <ucdr_serialize_uint16_t+0xdc>
 800d43e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d442:	706b      	strb	r3, [r5, #1]
 800d444:	2102      	movs	r1, #2
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	68a2      	ldr	r2, [r4, #8]
 800d44a:	7da0      	ldrb	r0, [r4, #22]
 800d44c:	440b      	add	r3, r1
 800d44e:	1b9e      	subs	r6, r3, r6
 800d450:	4442      	add	r2, r8
 800d452:	f080 0001 	eor.w	r0, r0, #1
 800d456:	6126      	str	r6, [r4, #16]
 800d458:	60a2      	str	r2, [r4, #8]
 800d45a:	7561      	strb	r1, [r4, #21]
 800d45c:	b002      	add	sp, #8
 800d45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d462:	2102      	movs	r1, #2
 800d464:	4620      	mov	r0, r4
 800d466:	f001 fb61 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d46a:	b190      	cbz	r0, 800d492 <ucdr_serialize_uint16_t+0xae>
 800d46c:	7d23      	ldrb	r3, [r4, #20]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	68a3      	ldr	r3, [r4, #8]
 800d472:	d014      	beq.n	800d49e <ucdr_serialize_uint16_t+0xba>
 800d474:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d478:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d47c:	7019      	strb	r1, [r3, #0]
 800d47e:	68a3      	ldr	r3, [r4, #8]
 800d480:	705a      	strb	r2, [r3, #1]
 800d482:	2102      	movs	r1, #2
 800d484:	68a2      	ldr	r2, [r4, #8]
 800d486:	6923      	ldr	r3, [r4, #16]
 800d488:	440a      	add	r2, r1
 800d48a:	440b      	add	r3, r1
 800d48c:	60a2      	str	r2, [r4, #8]
 800d48e:	6123      	str	r3, [r4, #16]
 800d490:	7561      	strb	r1, [r4, #21]
 800d492:	7da0      	ldrb	r0, [r4, #22]
 800d494:	f080 0001 	eor.w	r0, r0, #1
 800d498:	b002      	add	sp, #8
 800d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4a2:	801a      	strh	r2, [r3, #0]
 800d4a4:	e7ed      	b.n	800d482 <ucdr_serialize_uint16_t+0x9e>
 800d4a6:	68a2      	ldr	r2, [r4, #8]
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	7da0      	ldrb	r0, [r4, #22]
 800d4ac:	1b92      	subs	r2, r2, r6
 800d4ae:	f080 0001 	eor.w	r0, r0, #1
 800d4b2:	1b9e      	subs	r6, r3, r6
 800d4b4:	7567      	strb	r7, [r4, #21]
 800d4b6:	60a2      	str	r2, [r4, #8]
 800d4b8:	6126      	str	r6, [r4, #16]
 800d4ba:	b002      	add	sp, #8
 800d4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c0:	68a3      	ldr	r3, [r4, #8]
 800d4c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4c6:	701a      	strb	r2, [r3, #0]
 800d4c8:	e7bc      	b.n	800d444 <ucdr_serialize_uint16_t+0x60>
 800d4ca:	4628      	mov	r0, r5
 800d4cc:	f10d 0506 	add.w	r5, sp, #6
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	4632      	mov	r2, r6
 800d4d4:	f00d f912 	bl	801a6fc <memcpy>
 800d4d8:	4642      	mov	r2, r8
 800d4da:	68a0      	ldr	r0, [r4, #8]
 800d4dc:	19a9      	adds	r1, r5, r6
 800d4de:	f00d f90d 	bl	801a6fc <memcpy>
 800d4e2:	e7af      	b.n	800d444 <ucdr_serialize_uint16_t+0x60>

0800d4e4 <ucdr_serialize_endian_uint16_t>:
 800d4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	2102      	movs	r1, #2
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d4f4:	f001 fb6c 	bl	800ebd0 <ucdr_buffer_alignment>
 800d4f8:	4601      	mov	r1, r0
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d500:	f001 fbac 	bl	800ec5c <ucdr_advance_buffer>
 800d504:	4620      	mov	r0, r4
 800d506:	2102      	movs	r1, #2
 800d508:	f001 fb04 	bl	800eb14 <ucdr_check_buffer_available_for>
 800d50c:	bb70      	cbnz	r0, 800d56c <ucdr_serialize_endian_uint16_t+0x88>
 800d50e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d512:	42b3      	cmp	r3, r6
 800d514:	d925      	bls.n	800d562 <ucdr_serialize_endian_uint16_t+0x7e>
 800d516:	6922      	ldr	r2, [r4, #16]
 800d518:	1b9f      	subs	r7, r3, r6
 800d51a:	443a      	add	r2, r7
 800d51c:	f1c7 0902 	rsb	r9, r7, #2
 800d520:	4649      	mov	r1, r9
 800d522:	4620      	mov	r0, r4
 800d524:	60a3      	str	r3, [r4, #8]
 800d526:	6122      	str	r2, [r4, #16]
 800d528:	f001 fb00 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d039      	beq.n	800d5a4 <ucdr_serialize_endian_uint16_t+0xc0>
 800d530:	2d01      	cmp	r5, #1
 800d532:	d04a      	beq.n	800d5ca <ucdr_serialize_endian_uint16_t+0xe6>
 800d534:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d538:	7033      	strb	r3, [r6, #0]
 800d53a:	2f00      	cmp	r7, #0
 800d53c:	d040      	beq.n	800d5c0 <ucdr_serialize_endian_uint16_t+0xdc>
 800d53e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d542:	7073      	strb	r3, [r6, #1]
 800d544:	2102      	movs	r1, #2
 800d546:	6923      	ldr	r3, [r4, #16]
 800d548:	68a2      	ldr	r2, [r4, #8]
 800d54a:	7da0      	ldrb	r0, [r4, #22]
 800d54c:	440b      	add	r3, r1
 800d54e:	1bdf      	subs	r7, r3, r7
 800d550:	444a      	add	r2, r9
 800d552:	f080 0001 	eor.w	r0, r0, #1
 800d556:	6127      	str	r7, [r4, #16]
 800d558:	60a2      	str	r2, [r4, #8]
 800d55a:	7561      	strb	r1, [r4, #21]
 800d55c:	b003      	add	sp, #12
 800d55e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d562:	2102      	movs	r1, #2
 800d564:	4620      	mov	r0, r4
 800d566:	f001 fae1 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d56a:	b188      	cbz	r0, 800d590 <ucdr_serialize_endian_uint16_t+0xac>
 800d56c:	2d01      	cmp	r5, #1
 800d56e:	68a3      	ldr	r3, [r4, #8]
 800d570:	d014      	beq.n	800d59c <ucdr_serialize_endian_uint16_t+0xb8>
 800d572:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d576:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d57a:	7019      	strb	r1, [r3, #0]
 800d57c:	68a3      	ldr	r3, [r4, #8]
 800d57e:	705a      	strb	r2, [r3, #1]
 800d580:	2102      	movs	r1, #2
 800d582:	68a2      	ldr	r2, [r4, #8]
 800d584:	6923      	ldr	r3, [r4, #16]
 800d586:	440a      	add	r2, r1
 800d588:	440b      	add	r3, r1
 800d58a:	60a2      	str	r2, [r4, #8]
 800d58c:	6123      	str	r3, [r4, #16]
 800d58e:	7561      	strb	r1, [r4, #21]
 800d590:	7da0      	ldrb	r0, [r4, #22]
 800d592:	f080 0001 	eor.w	r0, r0, #1
 800d596:	b003      	add	sp, #12
 800d598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d59c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d5a0:	801a      	strh	r2, [r3, #0]
 800d5a2:	e7ed      	b.n	800d580 <ucdr_serialize_endian_uint16_t+0x9c>
 800d5a4:	68a2      	ldr	r2, [r4, #8]
 800d5a6:	6923      	ldr	r3, [r4, #16]
 800d5a8:	7da0      	ldrb	r0, [r4, #22]
 800d5aa:	1bd2      	subs	r2, r2, r7
 800d5ac:	f080 0001 	eor.w	r0, r0, #1
 800d5b0:	1bdf      	subs	r7, r3, r7
 800d5b2:	f884 8015 	strb.w	r8, [r4, #21]
 800d5b6:	60a2      	str	r2, [r4, #8]
 800d5b8:	6127      	str	r7, [r4, #16]
 800d5ba:	b003      	add	sp, #12
 800d5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5c0:	68a3      	ldr	r3, [r4, #8]
 800d5c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	e7bc      	b.n	800d544 <ucdr_serialize_endian_uint16_t+0x60>
 800d5ca:	f10d 0506 	add.w	r5, sp, #6
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	463a      	mov	r2, r7
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f00d f892 	bl	801a6fc <memcpy>
 800d5d8:	464a      	mov	r2, r9
 800d5da:	68a0      	ldr	r0, [r4, #8]
 800d5dc:	19e9      	adds	r1, r5, r7
 800d5de:	f00d f88d 	bl	801a6fc <memcpy>
 800d5e2:	e7af      	b.n	800d544 <ucdr_serialize_endian_uint16_t+0x60>

0800d5e4 <ucdr_deserialize_uint16_t>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	2102      	movs	r1, #2
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	f001 faef 	bl	800ebd0 <ucdr_buffer_alignment>
 800d5f2:	4601      	mov	r1, r0
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d5fa:	f001 fb2f 	bl	800ec5c <ucdr_advance_buffer>
 800d5fe:	4620      	mov	r0, r4
 800d600:	2102      	movs	r1, #2
 800d602:	f001 fa87 	bl	800eb14 <ucdr_check_buffer_available_for>
 800d606:	bb60      	cbnz	r0, 800d662 <ucdr_deserialize_uint16_t+0x7e>
 800d608:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d60c:	42b3      	cmp	r3, r6
 800d60e:	d923      	bls.n	800d658 <ucdr_deserialize_uint16_t+0x74>
 800d610:	6922      	ldr	r2, [r4, #16]
 800d612:	1b9f      	subs	r7, r3, r6
 800d614:	443a      	add	r2, r7
 800d616:	f1c7 0902 	rsb	r9, r7, #2
 800d61a:	4649      	mov	r1, r9
 800d61c:	4620      	mov	r0, r4
 800d61e:	60a3      	str	r3, [r4, #8]
 800d620:	6122      	str	r2, [r4, #16]
 800d622:	f001 fa83 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d626:	2800      	cmp	r0, #0
 800d628:	d034      	beq.n	800d694 <ucdr_deserialize_uint16_t+0xb0>
 800d62a:	7d23      	ldrb	r3, [r4, #20]
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d042      	beq.n	800d6b6 <ucdr_deserialize_uint16_t+0xd2>
 800d630:	7873      	ldrb	r3, [r6, #1]
 800d632:	702b      	strb	r3, [r5, #0]
 800d634:	2f00      	cmp	r7, #0
 800d636:	d03a      	beq.n	800d6ae <ucdr_deserialize_uint16_t+0xca>
 800d638:	7833      	ldrb	r3, [r6, #0]
 800d63a:	706b      	strb	r3, [r5, #1]
 800d63c:	2102      	movs	r1, #2
 800d63e:	6923      	ldr	r3, [r4, #16]
 800d640:	68a2      	ldr	r2, [r4, #8]
 800d642:	7da0      	ldrb	r0, [r4, #22]
 800d644:	440b      	add	r3, r1
 800d646:	1bdf      	subs	r7, r3, r7
 800d648:	444a      	add	r2, r9
 800d64a:	7561      	strb	r1, [r4, #21]
 800d64c:	6127      	str	r7, [r4, #16]
 800d64e:	60a2      	str	r2, [r4, #8]
 800d650:	f080 0001 	eor.w	r0, r0, #1
 800d654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d658:	2102      	movs	r1, #2
 800d65a:	4620      	mov	r0, r4
 800d65c:	f001 fa66 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d660:	b180      	cbz	r0, 800d684 <ucdr_deserialize_uint16_t+0xa0>
 800d662:	7d23      	ldrb	r3, [r4, #20]
 800d664:	2b01      	cmp	r3, #1
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	d011      	beq.n	800d68e <ucdr_deserialize_uint16_t+0xaa>
 800d66a:	785b      	ldrb	r3, [r3, #1]
 800d66c:	702b      	strb	r3, [r5, #0]
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	706b      	strb	r3, [r5, #1]
 800d674:	2102      	movs	r1, #2
 800d676:	68a2      	ldr	r2, [r4, #8]
 800d678:	6923      	ldr	r3, [r4, #16]
 800d67a:	440a      	add	r2, r1
 800d67c:	440b      	add	r3, r1
 800d67e:	60a2      	str	r2, [r4, #8]
 800d680:	6123      	str	r3, [r4, #16]
 800d682:	7561      	strb	r1, [r4, #21]
 800d684:	7da0      	ldrb	r0, [r4, #22]
 800d686:	f080 0001 	eor.w	r0, r0, #1
 800d68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	802b      	strh	r3, [r5, #0]
 800d692:	e7ef      	b.n	800d674 <ucdr_deserialize_uint16_t+0x90>
 800d694:	68a2      	ldr	r2, [r4, #8]
 800d696:	6923      	ldr	r3, [r4, #16]
 800d698:	7da0      	ldrb	r0, [r4, #22]
 800d69a:	1bd2      	subs	r2, r2, r7
 800d69c:	f884 8015 	strb.w	r8, [r4, #21]
 800d6a0:	1bdf      	subs	r7, r3, r7
 800d6a2:	60a2      	str	r2, [r4, #8]
 800d6a4:	6127      	str	r7, [r4, #16]
 800d6a6:	f080 0001 	eor.w	r0, r0, #1
 800d6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ae:	68a3      	ldr	r3, [r4, #8]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	706b      	strb	r3, [r5, #1]
 800d6b4:	e7c2      	b.n	800d63c <ucdr_deserialize_uint16_t+0x58>
 800d6b6:	4631      	mov	r1, r6
 800d6b8:	463a      	mov	r2, r7
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	f00d f81e 	bl	801a6fc <memcpy>
 800d6c0:	464a      	mov	r2, r9
 800d6c2:	68a1      	ldr	r1, [r4, #8]
 800d6c4:	19e8      	adds	r0, r5, r7
 800d6c6:	f00d f819 	bl	801a6fc <memcpy>
 800d6ca:	e7b7      	b.n	800d63c <ucdr_deserialize_uint16_t+0x58>

0800d6cc <ucdr_deserialize_endian_uint16_t>:
 800d6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d0:	460e      	mov	r6, r1
 800d6d2:	2102      	movs	r1, #2
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	4615      	mov	r5, r2
 800d6d8:	f001 fa7a 	bl	800ebd0 <ucdr_buffer_alignment>
 800d6dc:	4601      	mov	r1, r0
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d6e4:	f001 faba 	bl	800ec5c <ucdr_advance_buffer>
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	2102      	movs	r1, #2
 800d6ec:	f001 fa12 	bl	800eb14 <ucdr_check_buffer_available_for>
 800d6f0:	bb70      	cbnz	r0, 800d750 <ucdr_deserialize_endian_uint16_t+0x84>
 800d6f2:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d6f6:	42bb      	cmp	r3, r7
 800d6f8:	d925      	bls.n	800d746 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d6fa:	6922      	ldr	r2, [r4, #16]
 800d6fc:	eba3 0807 	sub.w	r8, r3, r7
 800d700:	4442      	add	r2, r8
 800d702:	f1c8 0a02 	rsb	sl, r8, #2
 800d706:	4651      	mov	r1, sl
 800d708:	4620      	mov	r0, r4
 800d70a:	60a3      	str	r3, [r4, #8]
 800d70c:	6122      	str	r2, [r4, #16]
 800d70e:	f001 fa0d 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d712:	2800      	cmp	r0, #0
 800d714:	d034      	beq.n	800d780 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d716:	2e01      	cmp	r6, #1
 800d718:	d045      	beq.n	800d7a6 <ucdr_deserialize_endian_uint16_t+0xda>
 800d71a:	787b      	ldrb	r3, [r7, #1]
 800d71c:	702b      	strb	r3, [r5, #0]
 800d71e:	f1b8 0f00 	cmp.w	r8, #0
 800d722:	d03c      	beq.n	800d79e <ucdr_deserialize_endian_uint16_t+0xd2>
 800d724:	783b      	ldrb	r3, [r7, #0]
 800d726:	706b      	strb	r3, [r5, #1]
 800d728:	2102      	movs	r1, #2
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	68a2      	ldr	r2, [r4, #8]
 800d72e:	7da0      	ldrb	r0, [r4, #22]
 800d730:	440b      	add	r3, r1
 800d732:	eba3 0308 	sub.w	r3, r3, r8
 800d736:	4452      	add	r2, sl
 800d738:	7561      	strb	r1, [r4, #21]
 800d73a:	6123      	str	r3, [r4, #16]
 800d73c:	60a2      	str	r2, [r4, #8]
 800d73e:	f080 0001 	eor.w	r0, r0, #1
 800d742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d746:	2102      	movs	r1, #2
 800d748:	4620      	mov	r0, r4
 800d74a:	f001 f9ef 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d74e:	b178      	cbz	r0, 800d770 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d750:	2e01      	cmp	r6, #1
 800d752:	68a3      	ldr	r3, [r4, #8]
 800d754:	d011      	beq.n	800d77a <ucdr_deserialize_endian_uint16_t+0xae>
 800d756:	785b      	ldrb	r3, [r3, #1]
 800d758:	702b      	strb	r3, [r5, #0]
 800d75a:	68a3      	ldr	r3, [r4, #8]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	706b      	strb	r3, [r5, #1]
 800d760:	2102      	movs	r1, #2
 800d762:	68a2      	ldr	r2, [r4, #8]
 800d764:	6923      	ldr	r3, [r4, #16]
 800d766:	440a      	add	r2, r1
 800d768:	440b      	add	r3, r1
 800d76a:	60a2      	str	r2, [r4, #8]
 800d76c:	6123      	str	r3, [r4, #16]
 800d76e:	7561      	strb	r1, [r4, #21]
 800d770:	7da0      	ldrb	r0, [r4, #22]
 800d772:	f080 0001 	eor.w	r0, r0, #1
 800d776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77a:	881b      	ldrh	r3, [r3, #0]
 800d77c:	802b      	strh	r3, [r5, #0]
 800d77e:	e7ef      	b.n	800d760 <ucdr_deserialize_endian_uint16_t+0x94>
 800d780:	68a2      	ldr	r2, [r4, #8]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	7da0      	ldrb	r0, [r4, #22]
 800d786:	eba2 0208 	sub.w	r2, r2, r8
 800d78a:	eba3 0308 	sub.w	r3, r3, r8
 800d78e:	f884 9015 	strb.w	r9, [r4, #21]
 800d792:	60a2      	str	r2, [r4, #8]
 800d794:	6123      	str	r3, [r4, #16]
 800d796:	f080 0001 	eor.w	r0, r0, #1
 800d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79e:	68a3      	ldr	r3, [r4, #8]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	706b      	strb	r3, [r5, #1]
 800d7a4:	e7c0      	b.n	800d728 <ucdr_deserialize_endian_uint16_t+0x5c>
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	4642      	mov	r2, r8
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f00c ffa6 	bl	801a6fc <memcpy>
 800d7b0:	4652      	mov	r2, sl
 800d7b2:	68a1      	ldr	r1, [r4, #8]
 800d7b4:	eb05 0008 	add.w	r0, r5, r8
 800d7b8:	f00c ffa0 	bl	801a6fc <memcpy>
 800d7bc:	e7b4      	b.n	800d728 <ucdr_deserialize_endian_uint16_t+0x5c>
 800d7be:	bf00      	nop

0800d7c0 <ucdr_serialize_uint32_t>:
 800d7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	9101      	str	r1, [sp, #4]
 800d7c8:	2104      	movs	r1, #4
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	f001 fa00 	bl	800ebd0 <ucdr_buffer_alignment>
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	7d67      	ldrb	r7, [r4, #21]
 800d7d6:	f001 fa41 	bl	800ec5c <ucdr_advance_buffer>
 800d7da:	4620      	mov	r0, r4
 800d7dc:	2104      	movs	r1, #4
 800d7de:	f001 f999 	bl	800eb14 <ucdr_check_buffer_available_for>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	d139      	bne.n	800d85a <ucdr_serialize_uint32_t+0x9a>
 800d7e6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d7ea:	42ab      	cmp	r3, r5
 800d7ec:	d930      	bls.n	800d850 <ucdr_serialize_uint32_t+0x90>
 800d7ee:	6922      	ldr	r2, [r4, #16]
 800d7f0:	1b5e      	subs	r6, r3, r5
 800d7f2:	4432      	add	r2, r6
 800d7f4:	f1c6 0804 	rsb	r8, r6, #4
 800d7f8:	4641      	mov	r1, r8
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	60a3      	str	r3, [r4, #8]
 800d7fe:	6122      	str	r2, [r4, #16]
 800d800:	f001 f994 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d804:	2800      	cmp	r0, #0
 800d806:	d04c      	beq.n	800d8a2 <ucdr_serialize_uint32_t+0xe2>
 800d808:	7d23      	ldrb	r3, [r4, #20]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d063      	beq.n	800d8d6 <ucdr_serialize_uint32_t+0x116>
 800d80e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d812:	702b      	strb	r3, [r5, #0]
 800d814:	2e00      	cmp	r6, #0
 800d816:	d051      	beq.n	800d8bc <ucdr_serialize_uint32_t+0xfc>
 800d818:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d81c:	2e01      	cmp	r6, #1
 800d81e:	706b      	strb	r3, [r5, #1]
 800d820:	d050      	beq.n	800d8c4 <ucdr_serialize_uint32_t+0x104>
 800d822:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d826:	2e02      	cmp	r6, #2
 800d828:	70ab      	strb	r3, [r5, #2]
 800d82a:	d04f      	beq.n	800d8cc <ucdr_serialize_uint32_t+0x10c>
 800d82c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d830:	70eb      	strb	r3, [r5, #3]
 800d832:	2104      	movs	r1, #4
 800d834:	6923      	ldr	r3, [r4, #16]
 800d836:	68a2      	ldr	r2, [r4, #8]
 800d838:	7da0      	ldrb	r0, [r4, #22]
 800d83a:	440b      	add	r3, r1
 800d83c:	1b9e      	subs	r6, r3, r6
 800d83e:	4442      	add	r2, r8
 800d840:	f080 0001 	eor.w	r0, r0, #1
 800d844:	6126      	str	r6, [r4, #16]
 800d846:	60a2      	str	r2, [r4, #8]
 800d848:	7561      	strb	r1, [r4, #21]
 800d84a:	b002      	add	sp, #8
 800d84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d850:	2104      	movs	r1, #4
 800d852:	4620      	mov	r0, r4
 800d854:	f001 f96a 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d858:	b1d0      	cbz	r0, 800d890 <ucdr_serialize_uint32_t+0xd0>
 800d85a:	7d23      	ldrb	r3, [r4, #20]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	68a3      	ldr	r3, [r4, #8]
 800d860:	d01c      	beq.n	800d89c <ucdr_serialize_uint32_t+0xdc>
 800d862:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d866:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d86a:	7019      	strb	r1, [r3, #0]
 800d86c:	68a3      	ldr	r3, [r4, #8]
 800d86e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d872:	705a      	strb	r2, [r3, #1]
 800d874:	68a3      	ldr	r3, [r4, #8]
 800d876:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d87a:	7099      	strb	r1, [r3, #2]
 800d87c:	68a3      	ldr	r3, [r4, #8]
 800d87e:	70da      	strb	r2, [r3, #3]
 800d880:	2104      	movs	r1, #4
 800d882:	68a2      	ldr	r2, [r4, #8]
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	440a      	add	r2, r1
 800d888:	440b      	add	r3, r1
 800d88a:	60a2      	str	r2, [r4, #8]
 800d88c:	6123      	str	r3, [r4, #16]
 800d88e:	7561      	strb	r1, [r4, #21]
 800d890:	7da0      	ldrb	r0, [r4, #22]
 800d892:	f080 0001 	eor.w	r0, r0, #1
 800d896:	b002      	add	sp, #8
 800d898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89c:	9a01      	ldr	r2, [sp, #4]
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	e7ee      	b.n	800d880 <ucdr_serialize_uint32_t+0xc0>
 800d8a2:	68a2      	ldr	r2, [r4, #8]
 800d8a4:	6923      	ldr	r3, [r4, #16]
 800d8a6:	7da0      	ldrb	r0, [r4, #22]
 800d8a8:	1b92      	subs	r2, r2, r6
 800d8aa:	f080 0001 	eor.w	r0, r0, #1
 800d8ae:	1b9e      	subs	r6, r3, r6
 800d8b0:	7567      	strb	r7, [r4, #21]
 800d8b2:	60a2      	str	r2, [r4, #8]
 800d8b4:	6126      	str	r6, [r4, #16]
 800d8b6:	b002      	add	sp, #8
 800d8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8bc:	68a3      	ldr	r3, [r4, #8]
 800d8be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8c2:	701a      	strb	r2, [r3, #0]
 800d8c4:	68a3      	ldr	r3, [r4, #8]
 800d8c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8ca:	701a      	strb	r2, [r3, #0]
 800d8cc:	68a3      	ldr	r3, [r4, #8]
 800d8ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8d2:	701a      	strb	r2, [r3, #0]
 800d8d4:	e7ad      	b.n	800d832 <ucdr_serialize_uint32_t+0x72>
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	ad01      	add	r5, sp, #4
 800d8da:	4629      	mov	r1, r5
 800d8dc:	4632      	mov	r2, r6
 800d8de:	f00c ff0d 	bl	801a6fc <memcpy>
 800d8e2:	4642      	mov	r2, r8
 800d8e4:	68a0      	ldr	r0, [r4, #8]
 800d8e6:	19a9      	adds	r1, r5, r6
 800d8e8:	f00c ff08 	bl	801a6fc <memcpy>
 800d8ec:	e7a1      	b.n	800d832 <ucdr_serialize_uint32_t+0x72>
 800d8ee:	bf00      	nop

0800d8f0 <ucdr_serialize_endian_uint32_t>:
 800d8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8f4:	460d      	mov	r5, r1
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	2104      	movs	r1, #4
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	f001 f967 	bl	800ebd0 <ucdr_buffer_alignment>
 800d902:	4601      	mov	r1, r0
 800d904:	4620      	mov	r0, r4
 800d906:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d90a:	f001 f9a7 	bl	800ec5c <ucdr_advance_buffer>
 800d90e:	4620      	mov	r0, r4
 800d910:	2104      	movs	r1, #4
 800d912:	f001 f8ff 	bl	800eb14 <ucdr_check_buffer_available_for>
 800d916:	2800      	cmp	r0, #0
 800d918:	d138      	bne.n	800d98c <ucdr_serialize_endian_uint32_t+0x9c>
 800d91a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800d91e:	42b3      	cmp	r3, r6
 800d920:	d92f      	bls.n	800d982 <ucdr_serialize_endian_uint32_t+0x92>
 800d922:	6922      	ldr	r2, [r4, #16]
 800d924:	1b9f      	subs	r7, r3, r6
 800d926:	443a      	add	r2, r7
 800d928:	f1c7 0904 	rsb	r9, r7, #4
 800d92c:	4649      	mov	r1, r9
 800d92e:	4620      	mov	r0, r4
 800d930:	60a3      	str	r3, [r4, #8]
 800d932:	6122      	str	r2, [r4, #16]
 800d934:	f001 f8fa 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d04a      	beq.n	800d9d2 <ucdr_serialize_endian_uint32_t+0xe2>
 800d93c:	2d01      	cmp	r5, #1
 800d93e:	d063      	beq.n	800da08 <ucdr_serialize_endian_uint32_t+0x118>
 800d940:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d944:	7033      	strb	r3, [r6, #0]
 800d946:	2f00      	cmp	r7, #0
 800d948:	d051      	beq.n	800d9ee <ucdr_serialize_endian_uint32_t+0xfe>
 800d94a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d94e:	2f01      	cmp	r7, #1
 800d950:	7073      	strb	r3, [r6, #1]
 800d952:	d050      	beq.n	800d9f6 <ucdr_serialize_endian_uint32_t+0x106>
 800d954:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d958:	2f02      	cmp	r7, #2
 800d95a:	70b3      	strb	r3, [r6, #2]
 800d95c:	d04f      	beq.n	800d9fe <ucdr_serialize_endian_uint32_t+0x10e>
 800d95e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d962:	70f3      	strb	r3, [r6, #3]
 800d964:	2104      	movs	r1, #4
 800d966:	6923      	ldr	r3, [r4, #16]
 800d968:	68a2      	ldr	r2, [r4, #8]
 800d96a:	7da0      	ldrb	r0, [r4, #22]
 800d96c:	440b      	add	r3, r1
 800d96e:	1bdf      	subs	r7, r3, r7
 800d970:	444a      	add	r2, r9
 800d972:	f080 0001 	eor.w	r0, r0, #1
 800d976:	6127      	str	r7, [r4, #16]
 800d978:	60a2      	str	r2, [r4, #8]
 800d97a:	7561      	strb	r1, [r4, #21]
 800d97c:	b003      	add	sp, #12
 800d97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d982:	2104      	movs	r1, #4
 800d984:	4620      	mov	r0, r4
 800d986:	f001 f8d1 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800d98a:	b1c8      	cbz	r0, 800d9c0 <ucdr_serialize_endian_uint32_t+0xd0>
 800d98c:	2d01      	cmp	r5, #1
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	d01c      	beq.n	800d9cc <ucdr_serialize_endian_uint32_t+0xdc>
 800d992:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d996:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d99a:	7019      	strb	r1, [r3, #0]
 800d99c:	68a3      	ldr	r3, [r4, #8]
 800d99e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d9a2:	705a      	strb	r2, [r3, #1]
 800d9a4:	68a3      	ldr	r3, [r4, #8]
 800d9a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9aa:	7099      	strb	r1, [r3, #2]
 800d9ac:	68a3      	ldr	r3, [r4, #8]
 800d9ae:	70da      	strb	r2, [r3, #3]
 800d9b0:	2104      	movs	r1, #4
 800d9b2:	68a2      	ldr	r2, [r4, #8]
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	440a      	add	r2, r1
 800d9b8:	440b      	add	r3, r1
 800d9ba:	60a2      	str	r2, [r4, #8]
 800d9bc:	6123      	str	r3, [r4, #16]
 800d9be:	7561      	strb	r1, [r4, #21]
 800d9c0:	7da0      	ldrb	r0, [r4, #22]
 800d9c2:	f080 0001 	eor.w	r0, r0, #1
 800d9c6:	b003      	add	sp, #12
 800d9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9cc:	9a01      	ldr	r2, [sp, #4]
 800d9ce:	601a      	str	r2, [r3, #0]
 800d9d0:	e7ee      	b.n	800d9b0 <ucdr_serialize_endian_uint32_t+0xc0>
 800d9d2:	68a2      	ldr	r2, [r4, #8]
 800d9d4:	6923      	ldr	r3, [r4, #16]
 800d9d6:	7da0      	ldrb	r0, [r4, #22]
 800d9d8:	1bd2      	subs	r2, r2, r7
 800d9da:	f080 0001 	eor.w	r0, r0, #1
 800d9de:	1bdf      	subs	r7, r3, r7
 800d9e0:	f884 8015 	strb.w	r8, [r4, #21]
 800d9e4:	60a2      	str	r2, [r4, #8]
 800d9e6:	6127      	str	r7, [r4, #16]
 800d9e8:	b003      	add	sp, #12
 800d9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ee:	68a3      	ldr	r3, [r4, #8]
 800d9f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9f4:	701a      	strb	r2, [r3, #0]
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9fc:	701a      	strb	r2, [r3, #0]
 800d9fe:	68a3      	ldr	r3, [r4, #8]
 800da00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	e7ad      	b.n	800d964 <ucdr_serialize_endian_uint32_t+0x74>
 800da08:	ad01      	add	r5, sp, #4
 800da0a:	4629      	mov	r1, r5
 800da0c:	463a      	mov	r2, r7
 800da0e:	4630      	mov	r0, r6
 800da10:	f00c fe74 	bl	801a6fc <memcpy>
 800da14:	464a      	mov	r2, r9
 800da16:	68a0      	ldr	r0, [r4, #8]
 800da18:	19e9      	adds	r1, r5, r7
 800da1a:	f00c fe6f 	bl	801a6fc <memcpy>
 800da1e:	e7a1      	b.n	800d964 <ucdr_serialize_endian_uint32_t+0x74>

0800da20 <ucdr_deserialize_uint32_t>:
 800da20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da24:	460d      	mov	r5, r1
 800da26:	2104      	movs	r1, #4
 800da28:	4604      	mov	r4, r0
 800da2a:	f001 f8d1 	bl	800ebd0 <ucdr_buffer_alignment>
 800da2e:	4601      	mov	r1, r0
 800da30:	4620      	mov	r0, r4
 800da32:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da36:	f001 f911 	bl	800ec5c <ucdr_advance_buffer>
 800da3a:	4620      	mov	r0, r4
 800da3c:	2104      	movs	r1, #4
 800da3e:	f001 f869 	bl	800eb14 <ucdr_check_buffer_available_for>
 800da42:	2800      	cmp	r0, #0
 800da44:	d138      	bne.n	800dab8 <ucdr_deserialize_uint32_t+0x98>
 800da46:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800da4a:	42b3      	cmp	r3, r6
 800da4c:	d92f      	bls.n	800daae <ucdr_deserialize_uint32_t+0x8e>
 800da4e:	6922      	ldr	r2, [r4, #16]
 800da50:	1b9f      	subs	r7, r3, r6
 800da52:	443a      	add	r2, r7
 800da54:	f1c7 0904 	rsb	r9, r7, #4
 800da58:	4649      	mov	r1, r9
 800da5a:	4620      	mov	r0, r4
 800da5c:	60a3      	str	r3, [r4, #8]
 800da5e:	6122      	str	r2, [r4, #16]
 800da60:	f001 f864 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800da64:	2800      	cmp	r0, #0
 800da66:	d046      	beq.n	800daf6 <ucdr_deserialize_uint32_t+0xd6>
 800da68:	7d23      	ldrb	r3, [r4, #20]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d05c      	beq.n	800db28 <ucdr_deserialize_uint32_t+0x108>
 800da6e:	78f3      	ldrb	r3, [r6, #3]
 800da70:	702b      	strb	r3, [r5, #0]
 800da72:	2f00      	cmp	r7, #0
 800da74:	d04c      	beq.n	800db10 <ucdr_deserialize_uint32_t+0xf0>
 800da76:	78b2      	ldrb	r2, [r6, #2]
 800da78:	2f01      	cmp	r7, #1
 800da7a:	f105 0302 	add.w	r3, r5, #2
 800da7e:	706a      	strb	r2, [r5, #1]
 800da80:	d04a      	beq.n	800db18 <ucdr_deserialize_uint32_t+0xf8>
 800da82:	7872      	ldrb	r2, [r6, #1]
 800da84:	2f02      	cmp	r7, #2
 800da86:	f105 0303 	add.w	r3, r5, #3
 800da8a:	70aa      	strb	r2, [r5, #2]
 800da8c:	d048      	beq.n	800db20 <ucdr_deserialize_uint32_t+0x100>
 800da8e:	7833      	ldrb	r3, [r6, #0]
 800da90:	70eb      	strb	r3, [r5, #3]
 800da92:	2104      	movs	r1, #4
 800da94:	6923      	ldr	r3, [r4, #16]
 800da96:	68a2      	ldr	r2, [r4, #8]
 800da98:	7da0      	ldrb	r0, [r4, #22]
 800da9a:	440b      	add	r3, r1
 800da9c:	1bdf      	subs	r7, r3, r7
 800da9e:	444a      	add	r2, r9
 800daa0:	7561      	strb	r1, [r4, #21]
 800daa2:	6127      	str	r7, [r4, #16]
 800daa4:	60a2      	str	r2, [r4, #8]
 800daa6:	f080 0001 	eor.w	r0, r0, #1
 800daaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daae:	2104      	movs	r1, #4
 800dab0:	4620      	mov	r0, r4
 800dab2:	f001 f83b 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800dab6:	b1b0      	cbz	r0, 800dae6 <ucdr_deserialize_uint32_t+0xc6>
 800dab8:	7d23      	ldrb	r3, [r4, #20]
 800daba:	2b01      	cmp	r3, #1
 800dabc:	68a3      	ldr	r3, [r4, #8]
 800dabe:	d017      	beq.n	800daf0 <ucdr_deserialize_uint32_t+0xd0>
 800dac0:	78db      	ldrb	r3, [r3, #3]
 800dac2:	702b      	strb	r3, [r5, #0]
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	789b      	ldrb	r3, [r3, #2]
 800dac8:	706b      	strb	r3, [r5, #1]
 800daca:	68a3      	ldr	r3, [r4, #8]
 800dacc:	785b      	ldrb	r3, [r3, #1]
 800dace:	70ab      	strb	r3, [r5, #2]
 800dad0:	68a3      	ldr	r3, [r4, #8]
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	70eb      	strb	r3, [r5, #3]
 800dad6:	2104      	movs	r1, #4
 800dad8:	68a2      	ldr	r2, [r4, #8]
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	440a      	add	r2, r1
 800dade:	440b      	add	r3, r1
 800dae0:	60a2      	str	r2, [r4, #8]
 800dae2:	6123      	str	r3, [r4, #16]
 800dae4:	7561      	strb	r1, [r4, #21]
 800dae6:	7da0      	ldrb	r0, [r4, #22]
 800dae8:	f080 0001 	eor.w	r0, r0, #1
 800daec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	e7ef      	b.n	800dad6 <ucdr_deserialize_uint32_t+0xb6>
 800daf6:	68a2      	ldr	r2, [r4, #8]
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	7da0      	ldrb	r0, [r4, #22]
 800dafc:	1bd2      	subs	r2, r2, r7
 800dafe:	f884 8015 	strb.w	r8, [r4, #21]
 800db02:	1bdf      	subs	r7, r3, r7
 800db04:	60a2      	str	r2, [r4, #8]
 800db06:	6127      	str	r7, [r4, #16]
 800db08:	f080 0001 	eor.w	r0, r0, #1
 800db0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db10:	68a2      	ldr	r2, [r4, #8]
 800db12:	1cab      	adds	r3, r5, #2
 800db14:	7892      	ldrb	r2, [r2, #2]
 800db16:	706a      	strb	r2, [r5, #1]
 800db18:	68a2      	ldr	r2, [r4, #8]
 800db1a:	7852      	ldrb	r2, [r2, #1]
 800db1c:	f803 2b01 	strb.w	r2, [r3], #1
 800db20:	68a2      	ldr	r2, [r4, #8]
 800db22:	7812      	ldrb	r2, [r2, #0]
 800db24:	701a      	strb	r2, [r3, #0]
 800db26:	e7b4      	b.n	800da92 <ucdr_deserialize_uint32_t+0x72>
 800db28:	4631      	mov	r1, r6
 800db2a:	463a      	mov	r2, r7
 800db2c:	4628      	mov	r0, r5
 800db2e:	f00c fde5 	bl	801a6fc <memcpy>
 800db32:	464a      	mov	r2, r9
 800db34:	68a1      	ldr	r1, [r4, #8]
 800db36:	19e8      	adds	r0, r5, r7
 800db38:	f00c fde0 	bl	801a6fc <memcpy>
 800db3c:	e7a9      	b.n	800da92 <ucdr_deserialize_uint32_t+0x72>
 800db3e:	bf00      	nop

0800db40 <ucdr_deserialize_endian_uint32_t>:
 800db40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db44:	460e      	mov	r6, r1
 800db46:	2104      	movs	r1, #4
 800db48:	4604      	mov	r4, r0
 800db4a:	4615      	mov	r5, r2
 800db4c:	f001 f840 	bl	800ebd0 <ucdr_buffer_alignment>
 800db50:	4601      	mov	r1, r0
 800db52:	4620      	mov	r0, r4
 800db54:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db58:	f001 f880 	bl	800ec5c <ucdr_advance_buffer>
 800db5c:	4620      	mov	r0, r4
 800db5e:	2104      	movs	r1, #4
 800db60:	f000 ffd8 	bl	800eb14 <ucdr_check_buffer_available_for>
 800db64:	2800      	cmp	r0, #0
 800db66:	d13c      	bne.n	800dbe2 <ucdr_deserialize_endian_uint32_t+0xa2>
 800db68:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800db6c:	42bb      	cmp	r3, r7
 800db6e:	d933      	bls.n	800dbd8 <ucdr_deserialize_endian_uint32_t+0x98>
 800db70:	6922      	ldr	r2, [r4, #16]
 800db72:	eba3 0807 	sub.w	r8, r3, r7
 800db76:	4442      	add	r2, r8
 800db78:	f1c8 0a04 	rsb	sl, r8, #4
 800db7c:	4651      	mov	r1, sl
 800db7e:	4620      	mov	r0, r4
 800db80:	60a3      	str	r3, [r4, #8]
 800db82:	6122      	str	r2, [r4, #16]
 800db84:	f000 ffd2 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d048      	beq.n	800dc1e <ucdr_deserialize_endian_uint32_t+0xde>
 800db8c:	2e01      	cmp	r6, #1
 800db8e:	d061      	beq.n	800dc54 <ucdr_deserialize_endian_uint32_t+0x114>
 800db90:	78fb      	ldrb	r3, [r7, #3]
 800db92:	702b      	strb	r3, [r5, #0]
 800db94:	f1b8 0f00 	cmp.w	r8, #0
 800db98:	d050      	beq.n	800dc3c <ucdr_deserialize_endian_uint32_t+0xfc>
 800db9a:	78ba      	ldrb	r2, [r7, #2]
 800db9c:	f1b8 0f01 	cmp.w	r8, #1
 800dba0:	f105 0302 	add.w	r3, r5, #2
 800dba4:	706a      	strb	r2, [r5, #1]
 800dba6:	d04d      	beq.n	800dc44 <ucdr_deserialize_endian_uint32_t+0x104>
 800dba8:	787a      	ldrb	r2, [r7, #1]
 800dbaa:	f1b8 0f02 	cmp.w	r8, #2
 800dbae:	f105 0303 	add.w	r3, r5, #3
 800dbb2:	70aa      	strb	r2, [r5, #2]
 800dbb4:	d04a      	beq.n	800dc4c <ucdr_deserialize_endian_uint32_t+0x10c>
 800dbb6:	783b      	ldrb	r3, [r7, #0]
 800dbb8:	70eb      	strb	r3, [r5, #3]
 800dbba:	2104      	movs	r1, #4
 800dbbc:	6923      	ldr	r3, [r4, #16]
 800dbbe:	68a2      	ldr	r2, [r4, #8]
 800dbc0:	7da0      	ldrb	r0, [r4, #22]
 800dbc2:	440b      	add	r3, r1
 800dbc4:	eba3 0308 	sub.w	r3, r3, r8
 800dbc8:	4452      	add	r2, sl
 800dbca:	7561      	strb	r1, [r4, #21]
 800dbcc:	6123      	str	r3, [r4, #16]
 800dbce:	60a2      	str	r2, [r4, #8]
 800dbd0:	f080 0001 	eor.w	r0, r0, #1
 800dbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd8:	2104      	movs	r1, #4
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f000 ffa6 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800dbe0:	b1a8      	cbz	r0, 800dc0e <ucdr_deserialize_endian_uint32_t+0xce>
 800dbe2:	2e01      	cmp	r6, #1
 800dbe4:	68a3      	ldr	r3, [r4, #8]
 800dbe6:	d017      	beq.n	800dc18 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dbe8:	78db      	ldrb	r3, [r3, #3]
 800dbea:	702b      	strb	r3, [r5, #0]
 800dbec:	68a3      	ldr	r3, [r4, #8]
 800dbee:	789b      	ldrb	r3, [r3, #2]
 800dbf0:	706b      	strb	r3, [r5, #1]
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	785b      	ldrb	r3, [r3, #1]
 800dbf6:	70ab      	strb	r3, [r5, #2]
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	70eb      	strb	r3, [r5, #3]
 800dbfe:	2104      	movs	r1, #4
 800dc00:	68a2      	ldr	r2, [r4, #8]
 800dc02:	6923      	ldr	r3, [r4, #16]
 800dc04:	440a      	add	r2, r1
 800dc06:	440b      	add	r3, r1
 800dc08:	60a2      	str	r2, [r4, #8]
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	7561      	strb	r1, [r4, #21]
 800dc0e:	7da0      	ldrb	r0, [r4, #22]
 800dc10:	f080 0001 	eor.w	r0, r0, #1
 800dc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	e7ef      	b.n	800dbfe <ucdr_deserialize_endian_uint32_t+0xbe>
 800dc1e:	68a2      	ldr	r2, [r4, #8]
 800dc20:	6923      	ldr	r3, [r4, #16]
 800dc22:	7da0      	ldrb	r0, [r4, #22]
 800dc24:	eba2 0208 	sub.w	r2, r2, r8
 800dc28:	eba3 0308 	sub.w	r3, r3, r8
 800dc2c:	f884 9015 	strb.w	r9, [r4, #21]
 800dc30:	60a2      	str	r2, [r4, #8]
 800dc32:	6123      	str	r3, [r4, #16]
 800dc34:	f080 0001 	eor.w	r0, r0, #1
 800dc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3c:	68a2      	ldr	r2, [r4, #8]
 800dc3e:	1cab      	adds	r3, r5, #2
 800dc40:	7892      	ldrb	r2, [r2, #2]
 800dc42:	706a      	strb	r2, [r5, #1]
 800dc44:	68a2      	ldr	r2, [r4, #8]
 800dc46:	7852      	ldrb	r2, [r2, #1]
 800dc48:	f803 2b01 	strb.w	r2, [r3], #1
 800dc4c:	68a2      	ldr	r2, [r4, #8]
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	701a      	strb	r2, [r3, #0]
 800dc52:	e7b2      	b.n	800dbba <ucdr_deserialize_endian_uint32_t+0x7a>
 800dc54:	4639      	mov	r1, r7
 800dc56:	4642      	mov	r2, r8
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f00c fd4f 	bl	801a6fc <memcpy>
 800dc5e:	4652      	mov	r2, sl
 800dc60:	68a1      	ldr	r1, [r4, #8]
 800dc62:	eb05 0008 	add.w	r0, r5, r8
 800dc66:	f00c fd49 	bl	801a6fc <memcpy>
 800dc6a:	e7a6      	b.n	800dbba <ucdr_deserialize_endian_uint32_t+0x7a>

0800dc6c <ucdr_serialize_uint64_t>:
 800dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc70:	2108      	movs	r1, #8
 800dc72:	b082      	sub	sp, #8
 800dc74:	4604      	mov	r4, r0
 800dc76:	e9cd 2300 	strd	r2, r3, [sp]
 800dc7a:	f000 ffa9 	bl	800ebd0 <ucdr_buffer_alignment>
 800dc7e:	4601      	mov	r1, r0
 800dc80:	4620      	mov	r0, r4
 800dc82:	7d67      	ldrb	r7, [r4, #21]
 800dc84:	f000 ffea 	bl	800ec5c <ucdr_advance_buffer>
 800dc88:	4620      	mov	r0, r4
 800dc8a:	2108      	movs	r1, #8
 800dc8c:	f000 ff42 	bl	800eb14 <ucdr_check_buffer_available_for>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d14e      	bne.n	800dd32 <ucdr_serialize_uint64_t+0xc6>
 800dc94:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc98:	42ab      	cmp	r3, r5
 800dc9a:	d945      	bls.n	800dd28 <ucdr_serialize_uint64_t+0xbc>
 800dc9c:	6922      	ldr	r2, [r4, #16]
 800dc9e:	1b5e      	subs	r6, r3, r5
 800dca0:	4432      	add	r2, r6
 800dca2:	f1c6 0808 	rsb	r8, r6, #8
 800dca6:	4641      	mov	r1, r8
 800dca8:	4620      	mov	r0, r4
 800dcaa:	60a3      	str	r3, [r4, #8]
 800dcac:	6122      	str	r2, [r4, #16]
 800dcae:	f000 ff3d 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	d074      	beq.n	800dda0 <ucdr_serialize_uint64_t+0x134>
 800dcb6:	7d23      	ldrb	r3, [r4, #20]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	f000 809b 	beq.w	800ddf4 <ucdr_serialize_uint64_t+0x188>
 800dcbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcc2:	702b      	strb	r3, [r5, #0]
 800dcc4:	2e00      	cmp	r6, #0
 800dcc6:	d078      	beq.n	800ddba <ucdr_serialize_uint64_t+0x14e>
 800dcc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dccc:	2e01      	cmp	r6, #1
 800dcce:	706b      	strb	r3, [r5, #1]
 800dcd0:	d077      	beq.n	800ddc2 <ucdr_serialize_uint64_t+0x156>
 800dcd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcd6:	2e02      	cmp	r6, #2
 800dcd8:	70ab      	strb	r3, [r5, #2]
 800dcda:	d076      	beq.n	800ddca <ucdr_serialize_uint64_t+0x15e>
 800dcdc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dce0:	2e03      	cmp	r6, #3
 800dce2:	70eb      	strb	r3, [r5, #3]
 800dce4:	d075      	beq.n	800ddd2 <ucdr_serialize_uint64_t+0x166>
 800dce6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dcea:	2e04      	cmp	r6, #4
 800dcec:	712b      	strb	r3, [r5, #4]
 800dcee:	d074      	beq.n	800ddda <ucdr_serialize_uint64_t+0x16e>
 800dcf0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dcf4:	2e05      	cmp	r6, #5
 800dcf6:	716b      	strb	r3, [r5, #5]
 800dcf8:	d073      	beq.n	800dde2 <ucdr_serialize_uint64_t+0x176>
 800dcfa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dcfe:	2e06      	cmp	r6, #6
 800dd00:	71ab      	strb	r3, [r5, #6]
 800dd02:	d072      	beq.n	800ddea <ucdr_serialize_uint64_t+0x17e>
 800dd04:	f89d 3000 	ldrb.w	r3, [sp]
 800dd08:	71eb      	strb	r3, [r5, #7]
 800dd0a:	2108      	movs	r1, #8
 800dd0c:	6923      	ldr	r3, [r4, #16]
 800dd0e:	68a2      	ldr	r2, [r4, #8]
 800dd10:	7da0      	ldrb	r0, [r4, #22]
 800dd12:	440b      	add	r3, r1
 800dd14:	1b9e      	subs	r6, r3, r6
 800dd16:	4442      	add	r2, r8
 800dd18:	f080 0001 	eor.w	r0, r0, #1
 800dd1c:	6126      	str	r6, [r4, #16]
 800dd1e:	60a2      	str	r2, [r4, #8]
 800dd20:	7561      	strb	r1, [r4, #21]
 800dd22:	b002      	add	sp, #8
 800dd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd28:	2108      	movs	r1, #8
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 fefe 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800dd30:	b350      	cbz	r0, 800dd88 <ucdr_serialize_uint64_t+0x11c>
 800dd32:	7d23      	ldrb	r3, [r4, #20]
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d02d      	beq.n	800dd94 <ucdr_serialize_uint64_t+0x128>
 800dd38:	68a3      	ldr	r3, [r4, #8]
 800dd3a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dd3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd42:	7019      	strb	r1, [r3, #0]
 800dd44:	68a3      	ldr	r3, [r4, #8]
 800dd46:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800dd4a:	705a      	strb	r2, [r3, #1]
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd52:	7099      	strb	r1, [r3, #2]
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800dd5a:	70da      	strb	r2, [r3, #3]
 800dd5c:	68a3      	ldr	r3, [r4, #8]
 800dd5e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd62:	7119      	strb	r1, [r3, #4]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800dd6a:	715a      	strb	r2, [r3, #5]
 800dd6c:	68a3      	ldr	r3, [r4, #8]
 800dd6e:	f89d 2000 	ldrb.w	r2, [sp]
 800dd72:	7199      	strb	r1, [r3, #6]
 800dd74:	68a3      	ldr	r3, [r4, #8]
 800dd76:	71da      	strb	r2, [r3, #7]
 800dd78:	2108      	movs	r1, #8
 800dd7a:	68a2      	ldr	r2, [r4, #8]
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	440a      	add	r2, r1
 800dd80:	440b      	add	r3, r1
 800dd82:	60a2      	str	r2, [r4, #8]
 800dd84:	6123      	str	r3, [r4, #16]
 800dd86:	7561      	strb	r1, [r4, #21]
 800dd88:	7da0      	ldrb	r0, [r4, #22]
 800dd8a:	f080 0001 	eor.w	r0, r0, #1
 800dd8e:	b002      	add	sp, #8
 800dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd94:	466b      	mov	r3, sp
 800dd96:	68a2      	ldr	r2, [r4, #8]
 800dd98:	cb03      	ldmia	r3!, {r0, r1}
 800dd9a:	6010      	str	r0, [r2, #0]
 800dd9c:	6051      	str	r1, [r2, #4]
 800dd9e:	e7eb      	b.n	800dd78 <ucdr_serialize_uint64_t+0x10c>
 800dda0:	68a2      	ldr	r2, [r4, #8]
 800dda2:	6923      	ldr	r3, [r4, #16]
 800dda4:	7da0      	ldrb	r0, [r4, #22]
 800dda6:	1b92      	subs	r2, r2, r6
 800dda8:	f080 0001 	eor.w	r0, r0, #1
 800ddac:	1b9e      	subs	r6, r3, r6
 800ddae:	7567      	strb	r7, [r4, #21]
 800ddb0:	60a2      	str	r2, [r4, #8]
 800ddb2:	6126      	str	r6, [r4, #16]
 800ddb4:	b002      	add	sp, #8
 800ddb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddba:	68a3      	ldr	r3, [r4, #8]
 800ddbc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddc0:	701a      	strb	r2, [r3, #0]
 800ddc2:	68a3      	ldr	r3, [r4, #8]
 800ddc4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddc8:	701a      	strb	r2, [r3, #0]
 800ddca:	68a3      	ldr	r3, [r4, #8]
 800ddcc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	68a3      	ldr	r3, [r4, #8]
 800ddd4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ddd8:	701a      	strb	r2, [r3, #0]
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dde0:	701a      	strb	r2, [r3, #0]
 800dde2:	68a3      	ldr	r3, [r4, #8]
 800dde4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dde8:	701a      	strb	r2, [r3, #0]
 800ddea:	68a3      	ldr	r3, [r4, #8]
 800ddec:	f89d 2000 	ldrb.w	r2, [sp]
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	e78a      	b.n	800dd0a <ucdr_serialize_uint64_t+0x9e>
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	466d      	mov	r5, sp
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	4629      	mov	r1, r5
 800ddfc:	f00c fc7e 	bl	801a6fc <memcpy>
 800de00:	4642      	mov	r2, r8
 800de02:	68a0      	ldr	r0, [r4, #8]
 800de04:	19a9      	adds	r1, r5, r6
 800de06:	f00c fc79 	bl	801a6fc <memcpy>
 800de0a:	e77e      	b.n	800dd0a <ucdr_serialize_uint64_t+0x9e>

0800de0c <ucdr_serialize_int16_t>:
 800de0c:	460b      	mov	r3, r1
 800de0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de12:	2102      	movs	r1, #2
 800de14:	b082      	sub	sp, #8
 800de16:	4604      	mov	r4, r0
 800de18:	f8ad 3006 	strh.w	r3, [sp, #6]
 800de1c:	f000 fed8 	bl	800ebd0 <ucdr_buffer_alignment>
 800de20:	4601      	mov	r1, r0
 800de22:	4620      	mov	r0, r4
 800de24:	7d67      	ldrb	r7, [r4, #21]
 800de26:	f000 ff19 	bl	800ec5c <ucdr_advance_buffer>
 800de2a:	4620      	mov	r0, r4
 800de2c:	2102      	movs	r1, #2
 800de2e:	f000 fe71 	bl	800eb14 <ucdr_check_buffer_available_for>
 800de32:	bb78      	cbnz	r0, 800de94 <ucdr_serialize_int16_t+0x88>
 800de34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de38:	42ab      	cmp	r3, r5
 800de3a:	d926      	bls.n	800de8a <ucdr_serialize_int16_t+0x7e>
 800de3c:	6922      	ldr	r2, [r4, #16]
 800de3e:	1b5e      	subs	r6, r3, r5
 800de40:	4432      	add	r2, r6
 800de42:	f1c6 0802 	rsb	r8, r6, #2
 800de46:	4641      	mov	r1, r8
 800de48:	4620      	mov	r0, r4
 800de4a:	60a3      	str	r3, [r4, #8]
 800de4c:	6122      	str	r2, [r4, #16]
 800de4e:	f000 fe6d 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800de52:	2800      	cmp	r0, #0
 800de54:	d03b      	beq.n	800dece <ucdr_serialize_int16_t+0xc2>
 800de56:	7d23      	ldrb	r3, [r4, #20]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d04a      	beq.n	800def2 <ucdr_serialize_int16_t+0xe6>
 800de5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de60:	702b      	strb	r3, [r5, #0]
 800de62:	2e00      	cmp	r6, #0
 800de64:	d040      	beq.n	800dee8 <ucdr_serialize_int16_t+0xdc>
 800de66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de6a:	706b      	strb	r3, [r5, #1]
 800de6c:	2102      	movs	r1, #2
 800de6e:	6923      	ldr	r3, [r4, #16]
 800de70:	68a2      	ldr	r2, [r4, #8]
 800de72:	7da0      	ldrb	r0, [r4, #22]
 800de74:	440b      	add	r3, r1
 800de76:	1b9e      	subs	r6, r3, r6
 800de78:	4442      	add	r2, r8
 800de7a:	f080 0001 	eor.w	r0, r0, #1
 800de7e:	6126      	str	r6, [r4, #16]
 800de80:	60a2      	str	r2, [r4, #8]
 800de82:	7561      	strb	r1, [r4, #21]
 800de84:	b002      	add	sp, #8
 800de86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de8a:	2102      	movs	r1, #2
 800de8c:	4620      	mov	r0, r4
 800de8e:	f000 fe4d 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800de92:	b190      	cbz	r0, 800deba <ucdr_serialize_int16_t+0xae>
 800de94:	7d23      	ldrb	r3, [r4, #20]
 800de96:	2b01      	cmp	r3, #1
 800de98:	68a3      	ldr	r3, [r4, #8]
 800de9a:	d014      	beq.n	800dec6 <ucdr_serialize_int16_t+0xba>
 800de9c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dea0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dea4:	7019      	strb	r1, [r3, #0]
 800dea6:	68a3      	ldr	r3, [r4, #8]
 800dea8:	705a      	strb	r2, [r3, #1]
 800deaa:	2102      	movs	r1, #2
 800deac:	68a2      	ldr	r2, [r4, #8]
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	440a      	add	r2, r1
 800deb2:	440b      	add	r3, r1
 800deb4:	60a2      	str	r2, [r4, #8]
 800deb6:	6123      	str	r3, [r4, #16]
 800deb8:	7561      	strb	r1, [r4, #21]
 800deba:	7da0      	ldrb	r0, [r4, #22]
 800debc:	f080 0001 	eor.w	r0, r0, #1
 800dec0:	b002      	add	sp, #8
 800dec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800deca:	801a      	strh	r2, [r3, #0]
 800decc:	e7ed      	b.n	800deaa <ucdr_serialize_int16_t+0x9e>
 800dece:	68a2      	ldr	r2, [r4, #8]
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	7da0      	ldrb	r0, [r4, #22]
 800ded4:	1b92      	subs	r2, r2, r6
 800ded6:	f080 0001 	eor.w	r0, r0, #1
 800deda:	1b9e      	subs	r6, r3, r6
 800dedc:	7567      	strb	r7, [r4, #21]
 800dede:	60a2      	str	r2, [r4, #8]
 800dee0:	6126      	str	r6, [r4, #16]
 800dee2:	b002      	add	sp, #8
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	68a3      	ldr	r3, [r4, #8]
 800deea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e7bc      	b.n	800de6c <ucdr_serialize_int16_t+0x60>
 800def2:	4628      	mov	r0, r5
 800def4:	f10d 0506 	add.w	r5, sp, #6
 800def8:	4629      	mov	r1, r5
 800defa:	4632      	mov	r2, r6
 800defc:	f00c fbfe 	bl	801a6fc <memcpy>
 800df00:	4642      	mov	r2, r8
 800df02:	68a0      	ldr	r0, [r4, #8]
 800df04:	19a9      	adds	r1, r5, r6
 800df06:	f00c fbf9 	bl	801a6fc <memcpy>
 800df0a:	e7af      	b.n	800de6c <ucdr_serialize_int16_t+0x60>

0800df0c <ucdr_deserialize_int16_t>:
 800df0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	2102      	movs	r1, #2
 800df14:	4604      	mov	r4, r0
 800df16:	f000 fe5b 	bl	800ebd0 <ucdr_buffer_alignment>
 800df1a:	4601      	mov	r1, r0
 800df1c:	4620      	mov	r0, r4
 800df1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df22:	f000 fe9b 	bl	800ec5c <ucdr_advance_buffer>
 800df26:	4620      	mov	r0, r4
 800df28:	2102      	movs	r1, #2
 800df2a:	f000 fdf3 	bl	800eb14 <ucdr_check_buffer_available_for>
 800df2e:	bb60      	cbnz	r0, 800df8a <ucdr_deserialize_int16_t+0x7e>
 800df30:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800df34:	42b3      	cmp	r3, r6
 800df36:	d923      	bls.n	800df80 <ucdr_deserialize_int16_t+0x74>
 800df38:	6922      	ldr	r2, [r4, #16]
 800df3a:	1b9f      	subs	r7, r3, r6
 800df3c:	443a      	add	r2, r7
 800df3e:	f1c7 0902 	rsb	r9, r7, #2
 800df42:	4649      	mov	r1, r9
 800df44:	4620      	mov	r0, r4
 800df46:	60a3      	str	r3, [r4, #8]
 800df48:	6122      	str	r2, [r4, #16]
 800df4a:	f000 fdef 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d034      	beq.n	800dfbc <ucdr_deserialize_int16_t+0xb0>
 800df52:	7d23      	ldrb	r3, [r4, #20]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d042      	beq.n	800dfde <ucdr_deserialize_int16_t+0xd2>
 800df58:	7873      	ldrb	r3, [r6, #1]
 800df5a:	702b      	strb	r3, [r5, #0]
 800df5c:	2f00      	cmp	r7, #0
 800df5e:	d03a      	beq.n	800dfd6 <ucdr_deserialize_int16_t+0xca>
 800df60:	7833      	ldrb	r3, [r6, #0]
 800df62:	706b      	strb	r3, [r5, #1]
 800df64:	2102      	movs	r1, #2
 800df66:	6923      	ldr	r3, [r4, #16]
 800df68:	68a2      	ldr	r2, [r4, #8]
 800df6a:	7da0      	ldrb	r0, [r4, #22]
 800df6c:	440b      	add	r3, r1
 800df6e:	1bdf      	subs	r7, r3, r7
 800df70:	444a      	add	r2, r9
 800df72:	7561      	strb	r1, [r4, #21]
 800df74:	6127      	str	r7, [r4, #16]
 800df76:	60a2      	str	r2, [r4, #8]
 800df78:	f080 0001 	eor.w	r0, r0, #1
 800df7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df80:	2102      	movs	r1, #2
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fdd2 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800df88:	b180      	cbz	r0, 800dfac <ucdr_deserialize_int16_t+0xa0>
 800df8a:	7d23      	ldrb	r3, [r4, #20]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	68a3      	ldr	r3, [r4, #8]
 800df90:	d011      	beq.n	800dfb6 <ucdr_deserialize_int16_t+0xaa>
 800df92:	785b      	ldrb	r3, [r3, #1]
 800df94:	702b      	strb	r3, [r5, #0]
 800df96:	68a3      	ldr	r3, [r4, #8]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	706b      	strb	r3, [r5, #1]
 800df9c:	2102      	movs	r1, #2
 800df9e:	68a2      	ldr	r2, [r4, #8]
 800dfa0:	6923      	ldr	r3, [r4, #16]
 800dfa2:	440a      	add	r2, r1
 800dfa4:	440b      	add	r3, r1
 800dfa6:	60a2      	str	r2, [r4, #8]
 800dfa8:	6123      	str	r3, [r4, #16]
 800dfaa:	7561      	strb	r1, [r4, #21]
 800dfac:	7da0      	ldrb	r0, [r4, #22]
 800dfae:	f080 0001 	eor.w	r0, r0, #1
 800dfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfb6:	881b      	ldrh	r3, [r3, #0]
 800dfb8:	802b      	strh	r3, [r5, #0]
 800dfba:	e7ef      	b.n	800df9c <ucdr_deserialize_int16_t+0x90>
 800dfbc:	68a2      	ldr	r2, [r4, #8]
 800dfbe:	6923      	ldr	r3, [r4, #16]
 800dfc0:	7da0      	ldrb	r0, [r4, #22]
 800dfc2:	1bd2      	subs	r2, r2, r7
 800dfc4:	f884 8015 	strb.w	r8, [r4, #21]
 800dfc8:	1bdf      	subs	r7, r3, r7
 800dfca:	60a2      	str	r2, [r4, #8]
 800dfcc:	6127      	str	r7, [r4, #16]
 800dfce:	f080 0001 	eor.w	r0, r0, #1
 800dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd6:	68a3      	ldr	r3, [r4, #8]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	706b      	strb	r3, [r5, #1]
 800dfdc:	e7c2      	b.n	800df64 <ucdr_deserialize_int16_t+0x58>
 800dfde:	4631      	mov	r1, r6
 800dfe0:	463a      	mov	r2, r7
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f00c fb8a 	bl	801a6fc <memcpy>
 800dfe8:	464a      	mov	r2, r9
 800dfea:	68a1      	ldr	r1, [r4, #8]
 800dfec:	19e8      	adds	r0, r5, r7
 800dfee:	f00c fb85 	bl	801a6fc <memcpy>
 800dff2:	e7b7      	b.n	800df64 <ucdr_deserialize_int16_t+0x58>

0800dff4 <ucdr_serialize_int32_t>:
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	b082      	sub	sp, #8
 800dffa:	9101      	str	r1, [sp, #4]
 800dffc:	2104      	movs	r1, #4
 800dffe:	4604      	mov	r4, r0
 800e000:	f000 fde6 	bl	800ebd0 <ucdr_buffer_alignment>
 800e004:	4601      	mov	r1, r0
 800e006:	4620      	mov	r0, r4
 800e008:	7d67      	ldrb	r7, [r4, #21]
 800e00a:	f000 fe27 	bl	800ec5c <ucdr_advance_buffer>
 800e00e:	4620      	mov	r0, r4
 800e010:	2104      	movs	r1, #4
 800e012:	f000 fd7f 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e016:	2800      	cmp	r0, #0
 800e018:	d139      	bne.n	800e08e <ucdr_serialize_int32_t+0x9a>
 800e01a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e01e:	42ab      	cmp	r3, r5
 800e020:	d930      	bls.n	800e084 <ucdr_serialize_int32_t+0x90>
 800e022:	6922      	ldr	r2, [r4, #16]
 800e024:	1b5e      	subs	r6, r3, r5
 800e026:	4432      	add	r2, r6
 800e028:	f1c6 0804 	rsb	r8, r6, #4
 800e02c:	4641      	mov	r1, r8
 800e02e:	4620      	mov	r0, r4
 800e030:	60a3      	str	r3, [r4, #8]
 800e032:	6122      	str	r2, [r4, #16]
 800e034:	f000 fd7a 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e038:	2800      	cmp	r0, #0
 800e03a:	d04c      	beq.n	800e0d6 <ucdr_serialize_int32_t+0xe2>
 800e03c:	7d23      	ldrb	r3, [r4, #20]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d063      	beq.n	800e10a <ucdr_serialize_int32_t+0x116>
 800e042:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e046:	702b      	strb	r3, [r5, #0]
 800e048:	2e00      	cmp	r6, #0
 800e04a:	d051      	beq.n	800e0f0 <ucdr_serialize_int32_t+0xfc>
 800e04c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e050:	2e01      	cmp	r6, #1
 800e052:	706b      	strb	r3, [r5, #1]
 800e054:	d050      	beq.n	800e0f8 <ucdr_serialize_int32_t+0x104>
 800e056:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e05a:	2e02      	cmp	r6, #2
 800e05c:	70ab      	strb	r3, [r5, #2]
 800e05e:	d04f      	beq.n	800e100 <ucdr_serialize_int32_t+0x10c>
 800e060:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e064:	70eb      	strb	r3, [r5, #3]
 800e066:	2104      	movs	r1, #4
 800e068:	6923      	ldr	r3, [r4, #16]
 800e06a:	68a2      	ldr	r2, [r4, #8]
 800e06c:	7da0      	ldrb	r0, [r4, #22]
 800e06e:	440b      	add	r3, r1
 800e070:	1b9e      	subs	r6, r3, r6
 800e072:	4442      	add	r2, r8
 800e074:	f080 0001 	eor.w	r0, r0, #1
 800e078:	6126      	str	r6, [r4, #16]
 800e07a:	60a2      	str	r2, [r4, #8]
 800e07c:	7561      	strb	r1, [r4, #21]
 800e07e:	b002      	add	sp, #8
 800e080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e084:	2104      	movs	r1, #4
 800e086:	4620      	mov	r0, r4
 800e088:	f000 fd50 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e08c:	b1d0      	cbz	r0, 800e0c4 <ucdr_serialize_int32_t+0xd0>
 800e08e:	7d23      	ldrb	r3, [r4, #20]
 800e090:	2b01      	cmp	r3, #1
 800e092:	68a3      	ldr	r3, [r4, #8]
 800e094:	d01c      	beq.n	800e0d0 <ucdr_serialize_int32_t+0xdc>
 800e096:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e09a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e09e:	7019      	strb	r1, [r3, #0]
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e0a6:	705a      	strb	r2, [r3, #1]
 800e0a8:	68a3      	ldr	r3, [r4, #8]
 800e0aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0ae:	7099      	strb	r1, [r3, #2]
 800e0b0:	68a3      	ldr	r3, [r4, #8]
 800e0b2:	70da      	strb	r2, [r3, #3]
 800e0b4:	2104      	movs	r1, #4
 800e0b6:	68a2      	ldr	r2, [r4, #8]
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	440a      	add	r2, r1
 800e0bc:	440b      	add	r3, r1
 800e0be:	60a2      	str	r2, [r4, #8]
 800e0c0:	6123      	str	r3, [r4, #16]
 800e0c2:	7561      	strb	r1, [r4, #21]
 800e0c4:	7da0      	ldrb	r0, [r4, #22]
 800e0c6:	f080 0001 	eor.w	r0, r0, #1
 800e0ca:	b002      	add	sp, #8
 800e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d0:	9a01      	ldr	r2, [sp, #4]
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	e7ee      	b.n	800e0b4 <ucdr_serialize_int32_t+0xc0>
 800e0d6:	68a2      	ldr	r2, [r4, #8]
 800e0d8:	6923      	ldr	r3, [r4, #16]
 800e0da:	7da0      	ldrb	r0, [r4, #22]
 800e0dc:	1b92      	subs	r2, r2, r6
 800e0de:	f080 0001 	eor.w	r0, r0, #1
 800e0e2:	1b9e      	subs	r6, r3, r6
 800e0e4:	7567      	strb	r7, [r4, #21]
 800e0e6:	60a2      	str	r2, [r4, #8]
 800e0e8:	6126      	str	r6, [r4, #16]
 800e0ea:	b002      	add	sp, #8
 800e0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f0:	68a3      	ldr	r3, [r4, #8]
 800e0f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	68a3      	ldr	r3, [r4, #8]
 800e0fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0fe:	701a      	strb	r2, [r3, #0]
 800e100:	68a3      	ldr	r3, [r4, #8]
 800e102:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e106:	701a      	strb	r2, [r3, #0]
 800e108:	e7ad      	b.n	800e066 <ucdr_serialize_int32_t+0x72>
 800e10a:	4628      	mov	r0, r5
 800e10c:	ad01      	add	r5, sp, #4
 800e10e:	4629      	mov	r1, r5
 800e110:	4632      	mov	r2, r6
 800e112:	f00c faf3 	bl	801a6fc <memcpy>
 800e116:	4642      	mov	r2, r8
 800e118:	68a0      	ldr	r0, [r4, #8]
 800e11a:	19a9      	adds	r1, r5, r6
 800e11c:	f00c faee 	bl	801a6fc <memcpy>
 800e120:	e7a1      	b.n	800e066 <ucdr_serialize_int32_t+0x72>
 800e122:	bf00      	nop

0800e124 <ucdr_deserialize_int32_t>:
 800e124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e128:	460d      	mov	r5, r1
 800e12a:	2104      	movs	r1, #4
 800e12c:	4604      	mov	r4, r0
 800e12e:	f000 fd4f 	bl	800ebd0 <ucdr_buffer_alignment>
 800e132:	4601      	mov	r1, r0
 800e134:	4620      	mov	r0, r4
 800e136:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e13a:	f000 fd8f 	bl	800ec5c <ucdr_advance_buffer>
 800e13e:	4620      	mov	r0, r4
 800e140:	2104      	movs	r1, #4
 800e142:	f000 fce7 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e146:	2800      	cmp	r0, #0
 800e148:	d138      	bne.n	800e1bc <ucdr_deserialize_int32_t+0x98>
 800e14a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e14e:	42b3      	cmp	r3, r6
 800e150:	d92f      	bls.n	800e1b2 <ucdr_deserialize_int32_t+0x8e>
 800e152:	6922      	ldr	r2, [r4, #16]
 800e154:	1b9f      	subs	r7, r3, r6
 800e156:	443a      	add	r2, r7
 800e158:	f1c7 0904 	rsb	r9, r7, #4
 800e15c:	4649      	mov	r1, r9
 800e15e:	4620      	mov	r0, r4
 800e160:	60a3      	str	r3, [r4, #8]
 800e162:	6122      	str	r2, [r4, #16]
 800e164:	f000 fce2 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d046      	beq.n	800e1fa <ucdr_deserialize_int32_t+0xd6>
 800e16c:	7d23      	ldrb	r3, [r4, #20]
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d05c      	beq.n	800e22c <ucdr_deserialize_int32_t+0x108>
 800e172:	78f3      	ldrb	r3, [r6, #3]
 800e174:	702b      	strb	r3, [r5, #0]
 800e176:	2f00      	cmp	r7, #0
 800e178:	d04c      	beq.n	800e214 <ucdr_deserialize_int32_t+0xf0>
 800e17a:	78b2      	ldrb	r2, [r6, #2]
 800e17c:	2f01      	cmp	r7, #1
 800e17e:	f105 0302 	add.w	r3, r5, #2
 800e182:	706a      	strb	r2, [r5, #1]
 800e184:	d04a      	beq.n	800e21c <ucdr_deserialize_int32_t+0xf8>
 800e186:	7872      	ldrb	r2, [r6, #1]
 800e188:	2f02      	cmp	r7, #2
 800e18a:	f105 0303 	add.w	r3, r5, #3
 800e18e:	70aa      	strb	r2, [r5, #2]
 800e190:	d048      	beq.n	800e224 <ucdr_deserialize_int32_t+0x100>
 800e192:	7833      	ldrb	r3, [r6, #0]
 800e194:	70eb      	strb	r3, [r5, #3]
 800e196:	2104      	movs	r1, #4
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	68a2      	ldr	r2, [r4, #8]
 800e19c:	7da0      	ldrb	r0, [r4, #22]
 800e19e:	440b      	add	r3, r1
 800e1a0:	1bdf      	subs	r7, r3, r7
 800e1a2:	444a      	add	r2, r9
 800e1a4:	7561      	strb	r1, [r4, #21]
 800e1a6:	6127      	str	r7, [r4, #16]
 800e1a8:	60a2      	str	r2, [r4, #8]
 800e1aa:	f080 0001 	eor.w	r0, r0, #1
 800e1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1b2:	2104      	movs	r1, #4
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f000 fcb9 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e1ba:	b1b0      	cbz	r0, 800e1ea <ucdr_deserialize_int32_t+0xc6>
 800e1bc:	7d23      	ldrb	r3, [r4, #20]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	68a3      	ldr	r3, [r4, #8]
 800e1c2:	d017      	beq.n	800e1f4 <ucdr_deserialize_int32_t+0xd0>
 800e1c4:	78db      	ldrb	r3, [r3, #3]
 800e1c6:	702b      	strb	r3, [r5, #0]
 800e1c8:	68a3      	ldr	r3, [r4, #8]
 800e1ca:	789b      	ldrb	r3, [r3, #2]
 800e1cc:	706b      	strb	r3, [r5, #1]
 800e1ce:	68a3      	ldr	r3, [r4, #8]
 800e1d0:	785b      	ldrb	r3, [r3, #1]
 800e1d2:	70ab      	strb	r3, [r5, #2]
 800e1d4:	68a3      	ldr	r3, [r4, #8]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	70eb      	strb	r3, [r5, #3]
 800e1da:	2104      	movs	r1, #4
 800e1dc:	68a2      	ldr	r2, [r4, #8]
 800e1de:	6923      	ldr	r3, [r4, #16]
 800e1e0:	440a      	add	r2, r1
 800e1e2:	440b      	add	r3, r1
 800e1e4:	60a2      	str	r2, [r4, #8]
 800e1e6:	6123      	str	r3, [r4, #16]
 800e1e8:	7561      	strb	r1, [r4, #21]
 800e1ea:	7da0      	ldrb	r0, [r4, #22]
 800e1ec:	f080 0001 	eor.w	r0, r0, #1
 800e1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	602b      	str	r3, [r5, #0]
 800e1f8:	e7ef      	b.n	800e1da <ucdr_deserialize_int32_t+0xb6>
 800e1fa:	68a2      	ldr	r2, [r4, #8]
 800e1fc:	6923      	ldr	r3, [r4, #16]
 800e1fe:	7da0      	ldrb	r0, [r4, #22]
 800e200:	1bd2      	subs	r2, r2, r7
 800e202:	f884 8015 	strb.w	r8, [r4, #21]
 800e206:	1bdf      	subs	r7, r3, r7
 800e208:	60a2      	str	r2, [r4, #8]
 800e20a:	6127      	str	r7, [r4, #16]
 800e20c:	f080 0001 	eor.w	r0, r0, #1
 800e210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e214:	68a2      	ldr	r2, [r4, #8]
 800e216:	1cab      	adds	r3, r5, #2
 800e218:	7892      	ldrb	r2, [r2, #2]
 800e21a:	706a      	strb	r2, [r5, #1]
 800e21c:	68a2      	ldr	r2, [r4, #8]
 800e21e:	7852      	ldrb	r2, [r2, #1]
 800e220:	f803 2b01 	strb.w	r2, [r3], #1
 800e224:	68a2      	ldr	r2, [r4, #8]
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	701a      	strb	r2, [r3, #0]
 800e22a:	e7b4      	b.n	800e196 <ucdr_deserialize_int32_t+0x72>
 800e22c:	4631      	mov	r1, r6
 800e22e:	463a      	mov	r2, r7
 800e230:	4628      	mov	r0, r5
 800e232:	f00c fa63 	bl	801a6fc <memcpy>
 800e236:	464a      	mov	r2, r9
 800e238:	68a1      	ldr	r1, [r4, #8]
 800e23a:	19e8      	adds	r0, r5, r7
 800e23c:	f00c fa5e 	bl	801a6fc <memcpy>
 800e240:	e7a9      	b.n	800e196 <ucdr_deserialize_int32_t+0x72>
 800e242:	bf00      	nop

0800e244 <ucdr_serialize_endian_float>:
 800e244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e248:	460d      	mov	r5, r1
 800e24a:	b083      	sub	sp, #12
 800e24c:	2104      	movs	r1, #4
 800e24e:	4604      	mov	r4, r0
 800e250:	9201      	str	r2, [sp, #4]
 800e252:	f000 fcbd 	bl	800ebd0 <ucdr_buffer_alignment>
 800e256:	4601      	mov	r1, r0
 800e258:	4620      	mov	r0, r4
 800e25a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e25e:	f000 fcfd 	bl	800ec5c <ucdr_advance_buffer>
 800e262:	4620      	mov	r0, r4
 800e264:	2104      	movs	r1, #4
 800e266:	f000 fc55 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d138      	bne.n	800e2e0 <ucdr_serialize_endian_float+0x9c>
 800e26e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e272:	42b3      	cmp	r3, r6
 800e274:	d92f      	bls.n	800e2d6 <ucdr_serialize_endian_float+0x92>
 800e276:	6922      	ldr	r2, [r4, #16]
 800e278:	1b9f      	subs	r7, r3, r6
 800e27a:	443a      	add	r2, r7
 800e27c:	f1c7 0904 	rsb	r9, r7, #4
 800e280:	4649      	mov	r1, r9
 800e282:	4620      	mov	r0, r4
 800e284:	60a3      	str	r3, [r4, #8]
 800e286:	6122      	str	r2, [r4, #16]
 800e288:	f000 fc50 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d04a      	beq.n	800e326 <ucdr_serialize_endian_float+0xe2>
 800e290:	2d01      	cmp	r5, #1
 800e292:	d063      	beq.n	800e35c <ucdr_serialize_endian_float+0x118>
 800e294:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e298:	7033      	strb	r3, [r6, #0]
 800e29a:	2f00      	cmp	r7, #0
 800e29c:	d051      	beq.n	800e342 <ucdr_serialize_endian_float+0xfe>
 800e29e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e2a2:	2f01      	cmp	r7, #1
 800e2a4:	7073      	strb	r3, [r6, #1]
 800e2a6:	d050      	beq.n	800e34a <ucdr_serialize_endian_float+0x106>
 800e2a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e2ac:	2f02      	cmp	r7, #2
 800e2ae:	70b3      	strb	r3, [r6, #2]
 800e2b0:	d04f      	beq.n	800e352 <ucdr_serialize_endian_float+0x10e>
 800e2b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e2b6:	70f3      	strb	r3, [r6, #3]
 800e2b8:	2104      	movs	r1, #4
 800e2ba:	6923      	ldr	r3, [r4, #16]
 800e2bc:	68a2      	ldr	r2, [r4, #8]
 800e2be:	7da0      	ldrb	r0, [r4, #22]
 800e2c0:	440b      	add	r3, r1
 800e2c2:	1bdf      	subs	r7, r3, r7
 800e2c4:	444a      	add	r2, r9
 800e2c6:	f080 0001 	eor.w	r0, r0, #1
 800e2ca:	6127      	str	r7, [r4, #16]
 800e2cc:	60a2      	str	r2, [r4, #8]
 800e2ce:	7561      	strb	r1, [r4, #21]
 800e2d0:	b003      	add	sp, #12
 800e2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2d6:	2104      	movs	r1, #4
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 fc27 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e2de:	b1c8      	cbz	r0, 800e314 <ucdr_serialize_endian_float+0xd0>
 800e2e0:	2d01      	cmp	r5, #1
 800e2e2:	68a3      	ldr	r3, [r4, #8]
 800e2e4:	d01c      	beq.n	800e320 <ucdr_serialize_endian_float+0xdc>
 800e2e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e2ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e2ee:	7019      	strb	r1, [r3, #0]
 800e2f0:	68a3      	ldr	r3, [r4, #8]
 800e2f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e2f6:	705a      	strb	r2, [r3, #1]
 800e2f8:	68a3      	ldr	r3, [r4, #8]
 800e2fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e2fe:	7099      	strb	r1, [r3, #2]
 800e300:	68a3      	ldr	r3, [r4, #8]
 800e302:	70da      	strb	r2, [r3, #3]
 800e304:	2104      	movs	r1, #4
 800e306:	68a2      	ldr	r2, [r4, #8]
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	440a      	add	r2, r1
 800e30c:	440b      	add	r3, r1
 800e30e:	60a2      	str	r2, [r4, #8]
 800e310:	6123      	str	r3, [r4, #16]
 800e312:	7561      	strb	r1, [r4, #21]
 800e314:	7da0      	ldrb	r0, [r4, #22]
 800e316:	f080 0001 	eor.w	r0, r0, #1
 800e31a:	b003      	add	sp, #12
 800e31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e320:	9a01      	ldr	r2, [sp, #4]
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	e7ee      	b.n	800e304 <ucdr_serialize_endian_float+0xc0>
 800e326:	68a2      	ldr	r2, [r4, #8]
 800e328:	6923      	ldr	r3, [r4, #16]
 800e32a:	7da0      	ldrb	r0, [r4, #22]
 800e32c:	1bd2      	subs	r2, r2, r7
 800e32e:	f080 0001 	eor.w	r0, r0, #1
 800e332:	1bdf      	subs	r7, r3, r7
 800e334:	f884 8015 	strb.w	r8, [r4, #21]
 800e338:	60a2      	str	r2, [r4, #8]
 800e33a:	6127      	str	r7, [r4, #16]
 800e33c:	b003      	add	sp, #12
 800e33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e342:	68a3      	ldr	r3, [r4, #8]
 800e344:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	68a3      	ldr	r3, [r4, #8]
 800e34c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e350:	701a      	strb	r2, [r3, #0]
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e358:	701a      	strb	r2, [r3, #0]
 800e35a:	e7ad      	b.n	800e2b8 <ucdr_serialize_endian_float+0x74>
 800e35c:	ad01      	add	r5, sp, #4
 800e35e:	4629      	mov	r1, r5
 800e360:	463a      	mov	r2, r7
 800e362:	4630      	mov	r0, r6
 800e364:	f00c f9ca 	bl	801a6fc <memcpy>
 800e368:	464a      	mov	r2, r9
 800e36a:	68a0      	ldr	r0, [r4, #8]
 800e36c:	19e9      	adds	r1, r5, r7
 800e36e:	f00c f9c5 	bl	801a6fc <memcpy>
 800e372:	e7a1      	b.n	800e2b8 <ucdr_serialize_endian_float+0x74>

0800e374 <ucdr_deserialize_endian_float>:
 800e374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e378:	460e      	mov	r6, r1
 800e37a:	2104      	movs	r1, #4
 800e37c:	4604      	mov	r4, r0
 800e37e:	4615      	mov	r5, r2
 800e380:	f000 fc26 	bl	800ebd0 <ucdr_buffer_alignment>
 800e384:	4601      	mov	r1, r0
 800e386:	4620      	mov	r0, r4
 800e388:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e38c:	f000 fc66 	bl	800ec5c <ucdr_advance_buffer>
 800e390:	4620      	mov	r0, r4
 800e392:	2104      	movs	r1, #4
 800e394:	f000 fbbe 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d13c      	bne.n	800e416 <ucdr_deserialize_endian_float+0xa2>
 800e39c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e3a0:	42bb      	cmp	r3, r7
 800e3a2:	d933      	bls.n	800e40c <ucdr_deserialize_endian_float+0x98>
 800e3a4:	6922      	ldr	r2, [r4, #16]
 800e3a6:	eba3 0807 	sub.w	r8, r3, r7
 800e3aa:	4442      	add	r2, r8
 800e3ac:	f1c8 0a04 	rsb	sl, r8, #4
 800e3b0:	4651      	mov	r1, sl
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	60a3      	str	r3, [r4, #8]
 800e3b6:	6122      	str	r2, [r4, #16]
 800e3b8:	f000 fbb8 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d048      	beq.n	800e452 <ucdr_deserialize_endian_float+0xde>
 800e3c0:	2e01      	cmp	r6, #1
 800e3c2:	d061      	beq.n	800e488 <ucdr_deserialize_endian_float+0x114>
 800e3c4:	78fb      	ldrb	r3, [r7, #3]
 800e3c6:	702b      	strb	r3, [r5, #0]
 800e3c8:	f1b8 0f00 	cmp.w	r8, #0
 800e3cc:	d050      	beq.n	800e470 <ucdr_deserialize_endian_float+0xfc>
 800e3ce:	78ba      	ldrb	r2, [r7, #2]
 800e3d0:	f1b8 0f01 	cmp.w	r8, #1
 800e3d4:	f105 0302 	add.w	r3, r5, #2
 800e3d8:	706a      	strb	r2, [r5, #1]
 800e3da:	d04d      	beq.n	800e478 <ucdr_deserialize_endian_float+0x104>
 800e3dc:	787a      	ldrb	r2, [r7, #1]
 800e3de:	f1b8 0f02 	cmp.w	r8, #2
 800e3e2:	f105 0303 	add.w	r3, r5, #3
 800e3e6:	70aa      	strb	r2, [r5, #2]
 800e3e8:	d04a      	beq.n	800e480 <ucdr_deserialize_endian_float+0x10c>
 800e3ea:	783b      	ldrb	r3, [r7, #0]
 800e3ec:	70eb      	strb	r3, [r5, #3]
 800e3ee:	2104      	movs	r1, #4
 800e3f0:	6923      	ldr	r3, [r4, #16]
 800e3f2:	68a2      	ldr	r2, [r4, #8]
 800e3f4:	7da0      	ldrb	r0, [r4, #22]
 800e3f6:	440b      	add	r3, r1
 800e3f8:	eba3 0308 	sub.w	r3, r3, r8
 800e3fc:	4452      	add	r2, sl
 800e3fe:	7561      	strb	r1, [r4, #21]
 800e400:	6123      	str	r3, [r4, #16]
 800e402:	60a2      	str	r2, [r4, #8]
 800e404:	f080 0001 	eor.w	r0, r0, #1
 800e408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e40c:	2104      	movs	r1, #4
 800e40e:	4620      	mov	r0, r4
 800e410:	f000 fb8c 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e414:	b1a8      	cbz	r0, 800e442 <ucdr_deserialize_endian_float+0xce>
 800e416:	2e01      	cmp	r6, #1
 800e418:	68a3      	ldr	r3, [r4, #8]
 800e41a:	d017      	beq.n	800e44c <ucdr_deserialize_endian_float+0xd8>
 800e41c:	78db      	ldrb	r3, [r3, #3]
 800e41e:	702b      	strb	r3, [r5, #0]
 800e420:	68a3      	ldr	r3, [r4, #8]
 800e422:	789b      	ldrb	r3, [r3, #2]
 800e424:	706b      	strb	r3, [r5, #1]
 800e426:	68a3      	ldr	r3, [r4, #8]
 800e428:	785b      	ldrb	r3, [r3, #1]
 800e42a:	70ab      	strb	r3, [r5, #2]
 800e42c:	68a3      	ldr	r3, [r4, #8]
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	70eb      	strb	r3, [r5, #3]
 800e432:	2104      	movs	r1, #4
 800e434:	68a2      	ldr	r2, [r4, #8]
 800e436:	6923      	ldr	r3, [r4, #16]
 800e438:	440a      	add	r2, r1
 800e43a:	440b      	add	r3, r1
 800e43c:	60a2      	str	r2, [r4, #8]
 800e43e:	6123      	str	r3, [r4, #16]
 800e440:	7561      	strb	r1, [r4, #21]
 800e442:	7da0      	ldrb	r0, [r4, #22]
 800e444:	f080 0001 	eor.w	r0, r0, #1
 800e448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	602b      	str	r3, [r5, #0]
 800e450:	e7ef      	b.n	800e432 <ucdr_deserialize_endian_float+0xbe>
 800e452:	68a2      	ldr	r2, [r4, #8]
 800e454:	6923      	ldr	r3, [r4, #16]
 800e456:	7da0      	ldrb	r0, [r4, #22]
 800e458:	eba2 0208 	sub.w	r2, r2, r8
 800e45c:	eba3 0308 	sub.w	r3, r3, r8
 800e460:	f884 9015 	strb.w	r9, [r4, #21]
 800e464:	60a2      	str	r2, [r4, #8]
 800e466:	6123      	str	r3, [r4, #16]
 800e468:	f080 0001 	eor.w	r0, r0, #1
 800e46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e470:	68a2      	ldr	r2, [r4, #8]
 800e472:	1cab      	adds	r3, r5, #2
 800e474:	7892      	ldrb	r2, [r2, #2]
 800e476:	706a      	strb	r2, [r5, #1]
 800e478:	68a2      	ldr	r2, [r4, #8]
 800e47a:	7852      	ldrb	r2, [r2, #1]
 800e47c:	f803 2b01 	strb.w	r2, [r3], #1
 800e480:	68a2      	ldr	r2, [r4, #8]
 800e482:	7812      	ldrb	r2, [r2, #0]
 800e484:	701a      	strb	r2, [r3, #0]
 800e486:	e7b2      	b.n	800e3ee <ucdr_deserialize_endian_float+0x7a>
 800e488:	4639      	mov	r1, r7
 800e48a:	4642      	mov	r2, r8
 800e48c:	4628      	mov	r0, r5
 800e48e:	f00c f935 	bl	801a6fc <memcpy>
 800e492:	4652      	mov	r2, sl
 800e494:	68a1      	ldr	r1, [r4, #8]
 800e496:	eb05 0008 	add.w	r0, r5, r8
 800e49a:	f00c f92f 	bl	801a6fc <memcpy>
 800e49e:	e7a6      	b.n	800e3ee <ucdr_deserialize_endian_float+0x7a>

0800e4a0 <ucdr_serialize_double>:
 800e4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a4:	2108      	movs	r1, #8
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	e9cd 2300 	strd	r2, r3, [sp]
 800e4ae:	f000 fb8f 	bl	800ebd0 <ucdr_buffer_alignment>
 800e4b2:	4601      	mov	r1, r0
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	7d67      	ldrb	r7, [r4, #21]
 800e4b8:	f000 fbd0 	bl	800ec5c <ucdr_advance_buffer>
 800e4bc:	4620      	mov	r0, r4
 800e4be:	2108      	movs	r1, #8
 800e4c0:	f000 fb28 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d14e      	bne.n	800e566 <ucdr_serialize_double+0xc6>
 800e4c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e4cc:	42ab      	cmp	r3, r5
 800e4ce:	d945      	bls.n	800e55c <ucdr_serialize_double+0xbc>
 800e4d0:	6922      	ldr	r2, [r4, #16]
 800e4d2:	1b5e      	subs	r6, r3, r5
 800e4d4:	4432      	add	r2, r6
 800e4d6:	f1c6 0808 	rsb	r8, r6, #8
 800e4da:	4641      	mov	r1, r8
 800e4dc:	4620      	mov	r0, r4
 800e4de:	60a3      	str	r3, [r4, #8]
 800e4e0:	6122      	str	r2, [r4, #16]
 800e4e2:	f000 fb23 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d074      	beq.n	800e5d4 <ucdr_serialize_double+0x134>
 800e4ea:	7d23      	ldrb	r3, [r4, #20]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	f000 809b 	beq.w	800e628 <ucdr_serialize_double+0x188>
 800e4f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e4f6:	702b      	strb	r3, [r5, #0]
 800e4f8:	2e00      	cmp	r6, #0
 800e4fa:	d078      	beq.n	800e5ee <ucdr_serialize_double+0x14e>
 800e4fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e500:	2e01      	cmp	r6, #1
 800e502:	706b      	strb	r3, [r5, #1]
 800e504:	d077      	beq.n	800e5f6 <ucdr_serialize_double+0x156>
 800e506:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e50a:	2e02      	cmp	r6, #2
 800e50c:	70ab      	strb	r3, [r5, #2]
 800e50e:	d076      	beq.n	800e5fe <ucdr_serialize_double+0x15e>
 800e510:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e514:	2e03      	cmp	r6, #3
 800e516:	70eb      	strb	r3, [r5, #3]
 800e518:	d075      	beq.n	800e606 <ucdr_serialize_double+0x166>
 800e51a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e51e:	2e04      	cmp	r6, #4
 800e520:	712b      	strb	r3, [r5, #4]
 800e522:	d074      	beq.n	800e60e <ucdr_serialize_double+0x16e>
 800e524:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e528:	2e05      	cmp	r6, #5
 800e52a:	716b      	strb	r3, [r5, #5]
 800e52c:	d073      	beq.n	800e616 <ucdr_serialize_double+0x176>
 800e52e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e532:	2e06      	cmp	r6, #6
 800e534:	71ab      	strb	r3, [r5, #6]
 800e536:	d072      	beq.n	800e61e <ucdr_serialize_double+0x17e>
 800e538:	f89d 3000 	ldrb.w	r3, [sp]
 800e53c:	71eb      	strb	r3, [r5, #7]
 800e53e:	2108      	movs	r1, #8
 800e540:	6923      	ldr	r3, [r4, #16]
 800e542:	68a2      	ldr	r2, [r4, #8]
 800e544:	7da0      	ldrb	r0, [r4, #22]
 800e546:	440b      	add	r3, r1
 800e548:	1b9e      	subs	r6, r3, r6
 800e54a:	4442      	add	r2, r8
 800e54c:	f080 0001 	eor.w	r0, r0, #1
 800e550:	6126      	str	r6, [r4, #16]
 800e552:	60a2      	str	r2, [r4, #8]
 800e554:	7561      	strb	r1, [r4, #21]
 800e556:	b002      	add	sp, #8
 800e558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55c:	2108      	movs	r1, #8
 800e55e:	4620      	mov	r0, r4
 800e560:	f000 fae4 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e564:	b350      	cbz	r0, 800e5bc <ucdr_serialize_double+0x11c>
 800e566:	7d23      	ldrb	r3, [r4, #20]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d02d      	beq.n	800e5c8 <ucdr_serialize_double+0x128>
 800e56c:	68a3      	ldr	r3, [r4, #8]
 800e56e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e572:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e576:	7019      	strb	r1, [r3, #0]
 800e578:	68a3      	ldr	r3, [r4, #8]
 800e57a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e57e:	705a      	strb	r2, [r3, #1]
 800e580:	68a3      	ldr	r3, [r4, #8]
 800e582:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e586:	7099      	strb	r1, [r3, #2]
 800e588:	68a3      	ldr	r3, [r4, #8]
 800e58a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800e58e:	70da      	strb	r2, [r3, #3]
 800e590:	68a3      	ldr	r3, [r4, #8]
 800e592:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e596:	7119      	strb	r1, [r3, #4]
 800e598:	68a3      	ldr	r3, [r4, #8]
 800e59a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e59e:	715a      	strb	r2, [r3, #5]
 800e5a0:	68a3      	ldr	r3, [r4, #8]
 800e5a2:	f89d 2000 	ldrb.w	r2, [sp]
 800e5a6:	7199      	strb	r1, [r3, #6]
 800e5a8:	68a3      	ldr	r3, [r4, #8]
 800e5aa:	71da      	strb	r2, [r3, #7]
 800e5ac:	2108      	movs	r1, #8
 800e5ae:	68a2      	ldr	r2, [r4, #8]
 800e5b0:	6923      	ldr	r3, [r4, #16]
 800e5b2:	440a      	add	r2, r1
 800e5b4:	440b      	add	r3, r1
 800e5b6:	60a2      	str	r2, [r4, #8]
 800e5b8:	6123      	str	r3, [r4, #16]
 800e5ba:	7561      	strb	r1, [r4, #21]
 800e5bc:	7da0      	ldrb	r0, [r4, #22]
 800e5be:	f080 0001 	eor.w	r0, r0, #1
 800e5c2:	b002      	add	sp, #8
 800e5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c8:	466b      	mov	r3, sp
 800e5ca:	68a2      	ldr	r2, [r4, #8]
 800e5cc:	cb03      	ldmia	r3!, {r0, r1}
 800e5ce:	6010      	str	r0, [r2, #0]
 800e5d0:	6051      	str	r1, [r2, #4]
 800e5d2:	e7eb      	b.n	800e5ac <ucdr_serialize_double+0x10c>
 800e5d4:	68a2      	ldr	r2, [r4, #8]
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	7da0      	ldrb	r0, [r4, #22]
 800e5da:	1b92      	subs	r2, r2, r6
 800e5dc:	f080 0001 	eor.w	r0, r0, #1
 800e5e0:	1b9e      	subs	r6, r3, r6
 800e5e2:	7567      	strb	r7, [r4, #21]
 800e5e4:	60a2      	str	r2, [r4, #8]
 800e5e6:	6126      	str	r6, [r4, #16]
 800e5e8:	b002      	add	sp, #8
 800e5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e5f4:	701a      	strb	r2, [r3, #0]
 800e5f6:	68a3      	ldr	r3, [r4, #8]
 800e5f8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	68a3      	ldr	r3, [r4, #8]
 800e600:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e604:	701a      	strb	r2, [r3, #0]
 800e606:	68a3      	ldr	r3, [r4, #8]
 800e608:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e60c:	701a      	strb	r2, [r3, #0]
 800e60e:	68a3      	ldr	r3, [r4, #8]
 800e610:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	68a3      	ldr	r3, [r4, #8]
 800e618:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	68a3      	ldr	r3, [r4, #8]
 800e620:	f89d 2000 	ldrb.w	r2, [sp]
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	e78a      	b.n	800e53e <ucdr_serialize_double+0x9e>
 800e628:	4628      	mov	r0, r5
 800e62a:	466d      	mov	r5, sp
 800e62c:	4632      	mov	r2, r6
 800e62e:	4629      	mov	r1, r5
 800e630:	f00c f864 	bl	801a6fc <memcpy>
 800e634:	4642      	mov	r2, r8
 800e636:	68a0      	ldr	r0, [r4, #8]
 800e638:	19a9      	adds	r1, r5, r6
 800e63a:	f00c f85f 	bl	801a6fc <memcpy>
 800e63e:	e77e      	b.n	800e53e <ucdr_serialize_double+0x9e>

0800e640 <ucdr_serialize_endian_double>:
 800e640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e644:	460d      	mov	r5, r1
 800e646:	b083      	sub	sp, #12
 800e648:	2108      	movs	r1, #8
 800e64a:	4604      	mov	r4, r0
 800e64c:	e9cd 2300 	strd	r2, r3, [sp]
 800e650:	f000 fabe 	bl	800ebd0 <ucdr_buffer_alignment>
 800e654:	4601      	mov	r1, r0
 800e656:	4620      	mov	r0, r4
 800e658:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e65c:	f000 fafe 	bl	800ec5c <ucdr_advance_buffer>
 800e660:	4620      	mov	r0, r4
 800e662:	2108      	movs	r1, #8
 800e664:	f000 fa56 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d14d      	bne.n	800e708 <ucdr_serialize_endian_double+0xc8>
 800e66c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e670:	42b3      	cmp	r3, r6
 800e672:	d944      	bls.n	800e6fe <ucdr_serialize_endian_double+0xbe>
 800e674:	6922      	ldr	r2, [r4, #16]
 800e676:	1b9f      	subs	r7, r3, r6
 800e678:	443a      	add	r2, r7
 800e67a:	f1c7 0908 	rsb	r9, r7, #8
 800e67e:	4649      	mov	r1, r9
 800e680:	4620      	mov	r0, r4
 800e682:	60a3      	str	r3, [r4, #8]
 800e684:	6122      	str	r2, [r4, #16]
 800e686:	f000 fa51 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e68a:	2800      	cmp	r0, #0
 800e68c:	d072      	beq.n	800e774 <ucdr_serialize_endian_double+0x134>
 800e68e:	2d01      	cmp	r5, #1
 800e690:	f000 809b 	beq.w	800e7ca <ucdr_serialize_endian_double+0x18a>
 800e694:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e698:	7033      	strb	r3, [r6, #0]
 800e69a:	2f00      	cmp	r7, #0
 800e69c:	d078      	beq.n	800e790 <ucdr_serialize_endian_double+0x150>
 800e69e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e6a2:	2f01      	cmp	r7, #1
 800e6a4:	7073      	strb	r3, [r6, #1]
 800e6a6:	d077      	beq.n	800e798 <ucdr_serialize_endian_double+0x158>
 800e6a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e6ac:	2f02      	cmp	r7, #2
 800e6ae:	70b3      	strb	r3, [r6, #2]
 800e6b0:	d076      	beq.n	800e7a0 <ucdr_serialize_endian_double+0x160>
 800e6b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e6b6:	2f03      	cmp	r7, #3
 800e6b8:	70f3      	strb	r3, [r6, #3]
 800e6ba:	d075      	beq.n	800e7a8 <ucdr_serialize_endian_double+0x168>
 800e6bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e6c0:	2f04      	cmp	r7, #4
 800e6c2:	7133      	strb	r3, [r6, #4]
 800e6c4:	d074      	beq.n	800e7b0 <ucdr_serialize_endian_double+0x170>
 800e6c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e6ca:	2f05      	cmp	r7, #5
 800e6cc:	7173      	strb	r3, [r6, #5]
 800e6ce:	d073      	beq.n	800e7b8 <ucdr_serialize_endian_double+0x178>
 800e6d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e6d4:	2f06      	cmp	r7, #6
 800e6d6:	71b3      	strb	r3, [r6, #6]
 800e6d8:	d072      	beq.n	800e7c0 <ucdr_serialize_endian_double+0x180>
 800e6da:	f89d 3000 	ldrb.w	r3, [sp]
 800e6de:	71f3      	strb	r3, [r6, #7]
 800e6e0:	2108      	movs	r1, #8
 800e6e2:	6923      	ldr	r3, [r4, #16]
 800e6e4:	68a2      	ldr	r2, [r4, #8]
 800e6e6:	7da0      	ldrb	r0, [r4, #22]
 800e6e8:	440b      	add	r3, r1
 800e6ea:	1bdf      	subs	r7, r3, r7
 800e6ec:	444a      	add	r2, r9
 800e6ee:	f080 0001 	eor.w	r0, r0, #1
 800e6f2:	6127      	str	r7, [r4, #16]
 800e6f4:	60a2      	str	r2, [r4, #8]
 800e6f6:	7561      	strb	r1, [r4, #21]
 800e6f8:	b003      	add	sp, #12
 800e6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	2108      	movs	r1, #8
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fa13 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e706:	b348      	cbz	r0, 800e75c <ucdr_serialize_endian_double+0x11c>
 800e708:	2d01      	cmp	r5, #1
 800e70a:	d02d      	beq.n	800e768 <ucdr_serialize_endian_double+0x128>
 800e70c:	68a3      	ldr	r3, [r4, #8]
 800e70e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e712:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e716:	7019      	strb	r1, [r3, #0]
 800e718:	68a3      	ldr	r3, [r4, #8]
 800e71a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e71e:	705a      	strb	r2, [r3, #1]
 800e720:	68a3      	ldr	r3, [r4, #8]
 800e722:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e726:	7099      	strb	r1, [r3, #2]
 800e728:	68a3      	ldr	r3, [r4, #8]
 800e72a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800e72e:	70da      	strb	r2, [r3, #3]
 800e730:	68a3      	ldr	r3, [r4, #8]
 800e732:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e736:	7119      	strb	r1, [r3, #4]
 800e738:	68a3      	ldr	r3, [r4, #8]
 800e73a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e73e:	715a      	strb	r2, [r3, #5]
 800e740:	68a3      	ldr	r3, [r4, #8]
 800e742:	f89d 2000 	ldrb.w	r2, [sp]
 800e746:	7199      	strb	r1, [r3, #6]
 800e748:	68a3      	ldr	r3, [r4, #8]
 800e74a:	71da      	strb	r2, [r3, #7]
 800e74c:	2108      	movs	r1, #8
 800e74e:	68a2      	ldr	r2, [r4, #8]
 800e750:	6923      	ldr	r3, [r4, #16]
 800e752:	440a      	add	r2, r1
 800e754:	440b      	add	r3, r1
 800e756:	60a2      	str	r2, [r4, #8]
 800e758:	6123      	str	r3, [r4, #16]
 800e75a:	7561      	strb	r1, [r4, #21]
 800e75c:	7da0      	ldrb	r0, [r4, #22]
 800e75e:	f080 0001 	eor.w	r0, r0, #1
 800e762:	b003      	add	sp, #12
 800e764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e768:	466b      	mov	r3, sp
 800e76a:	68a2      	ldr	r2, [r4, #8]
 800e76c:	cb03      	ldmia	r3!, {r0, r1}
 800e76e:	6010      	str	r0, [r2, #0]
 800e770:	6051      	str	r1, [r2, #4]
 800e772:	e7eb      	b.n	800e74c <ucdr_serialize_endian_double+0x10c>
 800e774:	68a2      	ldr	r2, [r4, #8]
 800e776:	6923      	ldr	r3, [r4, #16]
 800e778:	7da0      	ldrb	r0, [r4, #22]
 800e77a:	1bd2      	subs	r2, r2, r7
 800e77c:	f080 0001 	eor.w	r0, r0, #1
 800e780:	1bdf      	subs	r7, r3, r7
 800e782:	f884 8015 	strb.w	r8, [r4, #21]
 800e786:	60a2      	str	r2, [r4, #8]
 800e788:	6127      	str	r7, [r4, #16]
 800e78a:	b003      	add	sp, #12
 800e78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e790:	68a3      	ldr	r3, [r4, #8]
 800e792:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e796:	701a      	strb	r2, [r3, #0]
 800e798:	68a3      	ldr	r3, [r4, #8]
 800e79a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e79e:	701a      	strb	r2, [r3, #0]
 800e7a0:	68a3      	ldr	r3, [r4, #8]
 800e7a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7a6:	701a      	strb	r2, [r3, #0]
 800e7a8:	68a3      	ldr	r3, [r4, #8]
 800e7aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	68a3      	ldr	r3, [r4, #8]
 800e7b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e7b6:	701a      	strb	r2, [r3, #0]
 800e7b8:	68a3      	ldr	r3, [r4, #8]
 800e7ba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e7be:	701a      	strb	r2, [r3, #0]
 800e7c0:	68a3      	ldr	r3, [r4, #8]
 800e7c2:	f89d 2000 	ldrb.w	r2, [sp]
 800e7c6:	701a      	strb	r2, [r3, #0]
 800e7c8:	e78a      	b.n	800e6e0 <ucdr_serialize_endian_double+0xa0>
 800e7ca:	466d      	mov	r5, sp
 800e7cc:	463a      	mov	r2, r7
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f00b ff93 	bl	801a6fc <memcpy>
 800e7d6:	464a      	mov	r2, r9
 800e7d8:	68a0      	ldr	r0, [r4, #8]
 800e7da:	19e9      	adds	r1, r5, r7
 800e7dc:	f00b ff8e 	bl	801a6fc <memcpy>
 800e7e0:	e77e      	b.n	800e6e0 <ucdr_serialize_endian_double+0xa0>
 800e7e2:	bf00      	nop

0800e7e4 <ucdr_deserialize_double>:
 800e7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7e8:	460d      	mov	r5, r1
 800e7ea:	2108      	movs	r1, #8
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	f000 f9ef 	bl	800ebd0 <ucdr_buffer_alignment>
 800e7f2:	4601      	mov	r1, r0
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e7fa:	f000 fa2f 	bl	800ec5c <ucdr_advance_buffer>
 800e7fe:	4620      	mov	r0, r4
 800e800:	2108      	movs	r1, #8
 800e802:	f000 f987 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e806:	2800      	cmp	r0, #0
 800e808:	d151      	bne.n	800e8ae <ucdr_deserialize_double+0xca>
 800e80a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e80e:	42b3      	cmp	r3, r6
 800e810:	d948      	bls.n	800e8a4 <ucdr_deserialize_double+0xc0>
 800e812:	6922      	ldr	r2, [r4, #16]
 800e814:	1b9f      	subs	r7, r3, r6
 800e816:	443a      	add	r2, r7
 800e818:	f1c7 0808 	rsb	r8, r7, #8
 800e81c:	4641      	mov	r1, r8
 800e81e:	4620      	mov	r0, r4
 800e820:	60a3      	str	r3, [r4, #8]
 800e822:	6122      	str	r2, [r4, #16]
 800e824:	f000 f982 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e828:	2800      	cmp	r0, #0
 800e82a:	d06d      	beq.n	800e908 <ucdr_deserialize_double+0x124>
 800e82c:	7d23      	ldrb	r3, [r4, #20]
 800e82e:	2b01      	cmp	r3, #1
 800e830:	f000 8093 	beq.w	800e95a <ucdr_deserialize_double+0x176>
 800e834:	79f3      	ldrb	r3, [r6, #7]
 800e836:	702b      	strb	r3, [r5, #0]
 800e838:	2f00      	cmp	r7, #0
 800e83a:	d072      	beq.n	800e922 <ucdr_deserialize_double+0x13e>
 800e83c:	79b2      	ldrb	r2, [r6, #6]
 800e83e:	2f01      	cmp	r7, #1
 800e840:	f105 0302 	add.w	r3, r5, #2
 800e844:	706a      	strb	r2, [r5, #1]
 800e846:	d070      	beq.n	800e92a <ucdr_deserialize_double+0x146>
 800e848:	7972      	ldrb	r2, [r6, #5]
 800e84a:	2f02      	cmp	r7, #2
 800e84c:	f105 0303 	add.w	r3, r5, #3
 800e850:	70aa      	strb	r2, [r5, #2]
 800e852:	d06e      	beq.n	800e932 <ucdr_deserialize_double+0x14e>
 800e854:	7932      	ldrb	r2, [r6, #4]
 800e856:	2f03      	cmp	r7, #3
 800e858:	f105 0304 	add.w	r3, r5, #4
 800e85c:	70ea      	strb	r2, [r5, #3]
 800e85e:	d06c      	beq.n	800e93a <ucdr_deserialize_double+0x156>
 800e860:	78f2      	ldrb	r2, [r6, #3]
 800e862:	2f04      	cmp	r7, #4
 800e864:	f105 0305 	add.w	r3, r5, #5
 800e868:	712a      	strb	r2, [r5, #4]
 800e86a:	d06a      	beq.n	800e942 <ucdr_deserialize_double+0x15e>
 800e86c:	78b2      	ldrb	r2, [r6, #2]
 800e86e:	2f05      	cmp	r7, #5
 800e870:	f105 0306 	add.w	r3, r5, #6
 800e874:	716a      	strb	r2, [r5, #5]
 800e876:	d068      	beq.n	800e94a <ucdr_deserialize_double+0x166>
 800e878:	7872      	ldrb	r2, [r6, #1]
 800e87a:	2f06      	cmp	r7, #6
 800e87c:	f105 0307 	add.w	r3, r5, #7
 800e880:	71aa      	strb	r2, [r5, #6]
 800e882:	d066      	beq.n	800e952 <ucdr_deserialize_double+0x16e>
 800e884:	7833      	ldrb	r3, [r6, #0]
 800e886:	71eb      	strb	r3, [r5, #7]
 800e888:	2108      	movs	r1, #8
 800e88a:	6923      	ldr	r3, [r4, #16]
 800e88c:	68a2      	ldr	r2, [r4, #8]
 800e88e:	7da0      	ldrb	r0, [r4, #22]
 800e890:	440b      	add	r3, r1
 800e892:	1bdf      	subs	r7, r3, r7
 800e894:	4442      	add	r2, r8
 800e896:	7561      	strb	r1, [r4, #21]
 800e898:	6127      	str	r7, [r4, #16]
 800e89a:	60a2      	str	r2, [r4, #8]
 800e89c:	f080 0001 	eor.w	r0, r0, #1
 800e8a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8a4:	2108      	movs	r1, #8
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 f940 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e8ac:	b310      	cbz	r0, 800e8f4 <ucdr_deserialize_double+0x110>
 800e8ae:	7d23      	ldrb	r3, [r4, #20]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	68a3      	ldr	r3, [r4, #8]
 800e8b4:	d023      	beq.n	800e8fe <ucdr_deserialize_double+0x11a>
 800e8b6:	79db      	ldrb	r3, [r3, #7]
 800e8b8:	702b      	strb	r3, [r5, #0]
 800e8ba:	68a3      	ldr	r3, [r4, #8]
 800e8bc:	799b      	ldrb	r3, [r3, #6]
 800e8be:	706b      	strb	r3, [r5, #1]
 800e8c0:	68a3      	ldr	r3, [r4, #8]
 800e8c2:	795b      	ldrb	r3, [r3, #5]
 800e8c4:	70ab      	strb	r3, [r5, #2]
 800e8c6:	68a3      	ldr	r3, [r4, #8]
 800e8c8:	791b      	ldrb	r3, [r3, #4]
 800e8ca:	70eb      	strb	r3, [r5, #3]
 800e8cc:	68a3      	ldr	r3, [r4, #8]
 800e8ce:	78db      	ldrb	r3, [r3, #3]
 800e8d0:	712b      	strb	r3, [r5, #4]
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	789b      	ldrb	r3, [r3, #2]
 800e8d6:	716b      	strb	r3, [r5, #5]
 800e8d8:	68a3      	ldr	r3, [r4, #8]
 800e8da:	785b      	ldrb	r3, [r3, #1]
 800e8dc:	71ab      	strb	r3, [r5, #6]
 800e8de:	68a3      	ldr	r3, [r4, #8]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	71eb      	strb	r3, [r5, #7]
 800e8e4:	2108      	movs	r1, #8
 800e8e6:	68a2      	ldr	r2, [r4, #8]
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	440a      	add	r2, r1
 800e8ec:	440b      	add	r3, r1
 800e8ee:	60a2      	str	r2, [r4, #8]
 800e8f0:	6123      	str	r3, [r4, #16]
 800e8f2:	7561      	strb	r1, [r4, #21]
 800e8f4:	7da0      	ldrb	r0, [r4, #22]
 800e8f6:	f080 0001 	eor.w	r0, r0, #1
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	602a      	str	r2, [r5, #0]
 800e904:	606b      	str	r3, [r5, #4]
 800e906:	e7ed      	b.n	800e8e4 <ucdr_deserialize_double+0x100>
 800e908:	68a2      	ldr	r2, [r4, #8]
 800e90a:	6923      	ldr	r3, [r4, #16]
 800e90c:	7da0      	ldrb	r0, [r4, #22]
 800e90e:	1bd2      	subs	r2, r2, r7
 800e910:	f884 9015 	strb.w	r9, [r4, #21]
 800e914:	1bdf      	subs	r7, r3, r7
 800e916:	60a2      	str	r2, [r4, #8]
 800e918:	6127      	str	r7, [r4, #16]
 800e91a:	f080 0001 	eor.w	r0, r0, #1
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	68a2      	ldr	r2, [r4, #8]
 800e924:	1cab      	adds	r3, r5, #2
 800e926:	7992      	ldrb	r2, [r2, #6]
 800e928:	706a      	strb	r2, [r5, #1]
 800e92a:	68a2      	ldr	r2, [r4, #8]
 800e92c:	7952      	ldrb	r2, [r2, #5]
 800e92e:	f803 2b01 	strb.w	r2, [r3], #1
 800e932:	68a2      	ldr	r2, [r4, #8]
 800e934:	7912      	ldrb	r2, [r2, #4]
 800e936:	f803 2b01 	strb.w	r2, [r3], #1
 800e93a:	68a2      	ldr	r2, [r4, #8]
 800e93c:	78d2      	ldrb	r2, [r2, #3]
 800e93e:	f803 2b01 	strb.w	r2, [r3], #1
 800e942:	68a2      	ldr	r2, [r4, #8]
 800e944:	7892      	ldrb	r2, [r2, #2]
 800e946:	f803 2b01 	strb.w	r2, [r3], #1
 800e94a:	68a2      	ldr	r2, [r4, #8]
 800e94c:	7852      	ldrb	r2, [r2, #1]
 800e94e:	f803 2b01 	strb.w	r2, [r3], #1
 800e952:	68a2      	ldr	r2, [r4, #8]
 800e954:	7812      	ldrb	r2, [r2, #0]
 800e956:	701a      	strb	r2, [r3, #0]
 800e958:	e796      	b.n	800e888 <ucdr_deserialize_double+0xa4>
 800e95a:	4631      	mov	r1, r6
 800e95c:	463a      	mov	r2, r7
 800e95e:	4628      	mov	r0, r5
 800e960:	f00b fecc 	bl	801a6fc <memcpy>
 800e964:	4642      	mov	r2, r8
 800e966:	68a1      	ldr	r1, [r4, #8]
 800e968:	19e8      	adds	r0, r5, r7
 800e96a:	f00b fec7 	bl	801a6fc <memcpy>
 800e96e:	e78b      	b.n	800e888 <ucdr_deserialize_double+0xa4>

0800e970 <ucdr_deserialize_endian_double>:
 800e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e974:	460e      	mov	r6, r1
 800e976:	2108      	movs	r1, #8
 800e978:	4604      	mov	r4, r0
 800e97a:	4615      	mov	r5, r2
 800e97c:	f000 f928 	bl	800ebd0 <ucdr_buffer_alignment>
 800e980:	4601      	mov	r1, r0
 800e982:	4620      	mov	r0, r4
 800e984:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e988:	f000 f968 	bl	800ec5c <ucdr_advance_buffer>
 800e98c:	4620      	mov	r0, r4
 800e98e:	2108      	movs	r1, #8
 800e990:	f000 f8c0 	bl	800eb14 <ucdr_check_buffer_available_for>
 800e994:	2800      	cmp	r0, #0
 800e996:	d159      	bne.n	800ea4c <ucdr_deserialize_endian_double+0xdc>
 800e998:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e99c:	42bb      	cmp	r3, r7
 800e99e:	d950      	bls.n	800ea42 <ucdr_deserialize_endian_double+0xd2>
 800e9a0:	6922      	ldr	r2, [r4, #16]
 800e9a2:	eba3 0807 	sub.w	r8, r3, r7
 800e9a6:	4442      	add	r2, r8
 800e9a8:	f1c8 0a08 	rsb	sl, r8, #8
 800e9ac:	4651      	mov	r1, sl
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	60a3      	str	r3, [r4, #8]
 800e9b2:	6122      	str	r2, [r4, #16]
 800e9b4:	f000 f8ba 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d073      	beq.n	800eaa4 <ucdr_deserialize_endian_double+0x134>
 800e9bc:	2e01      	cmp	r6, #1
 800e9be:	f000 809c 	beq.w	800eafa <ucdr_deserialize_endian_double+0x18a>
 800e9c2:	79fb      	ldrb	r3, [r7, #7]
 800e9c4:	702b      	strb	r3, [r5, #0]
 800e9c6:	f1b8 0f00 	cmp.w	r8, #0
 800e9ca:	d07a      	beq.n	800eac2 <ucdr_deserialize_endian_double+0x152>
 800e9cc:	79ba      	ldrb	r2, [r7, #6]
 800e9ce:	f1b8 0f01 	cmp.w	r8, #1
 800e9d2:	f105 0302 	add.w	r3, r5, #2
 800e9d6:	706a      	strb	r2, [r5, #1]
 800e9d8:	d077      	beq.n	800eaca <ucdr_deserialize_endian_double+0x15a>
 800e9da:	797a      	ldrb	r2, [r7, #5]
 800e9dc:	f1b8 0f02 	cmp.w	r8, #2
 800e9e0:	f105 0303 	add.w	r3, r5, #3
 800e9e4:	70aa      	strb	r2, [r5, #2]
 800e9e6:	d074      	beq.n	800ead2 <ucdr_deserialize_endian_double+0x162>
 800e9e8:	793a      	ldrb	r2, [r7, #4]
 800e9ea:	f1b8 0f03 	cmp.w	r8, #3
 800e9ee:	f105 0304 	add.w	r3, r5, #4
 800e9f2:	70ea      	strb	r2, [r5, #3]
 800e9f4:	d071      	beq.n	800eada <ucdr_deserialize_endian_double+0x16a>
 800e9f6:	78fa      	ldrb	r2, [r7, #3]
 800e9f8:	f1b8 0f04 	cmp.w	r8, #4
 800e9fc:	f105 0305 	add.w	r3, r5, #5
 800ea00:	712a      	strb	r2, [r5, #4]
 800ea02:	d06e      	beq.n	800eae2 <ucdr_deserialize_endian_double+0x172>
 800ea04:	78ba      	ldrb	r2, [r7, #2]
 800ea06:	f1b8 0f05 	cmp.w	r8, #5
 800ea0a:	f105 0306 	add.w	r3, r5, #6
 800ea0e:	716a      	strb	r2, [r5, #5]
 800ea10:	d06b      	beq.n	800eaea <ucdr_deserialize_endian_double+0x17a>
 800ea12:	787a      	ldrb	r2, [r7, #1]
 800ea14:	f1b8 0f06 	cmp.w	r8, #6
 800ea18:	f105 0307 	add.w	r3, r5, #7
 800ea1c:	71aa      	strb	r2, [r5, #6]
 800ea1e:	d068      	beq.n	800eaf2 <ucdr_deserialize_endian_double+0x182>
 800ea20:	783b      	ldrb	r3, [r7, #0]
 800ea22:	71eb      	strb	r3, [r5, #7]
 800ea24:	2108      	movs	r1, #8
 800ea26:	6923      	ldr	r3, [r4, #16]
 800ea28:	68a2      	ldr	r2, [r4, #8]
 800ea2a:	7da0      	ldrb	r0, [r4, #22]
 800ea2c:	440b      	add	r3, r1
 800ea2e:	eba3 0308 	sub.w	r3, r3, r8
 800ea32:	4452      	add	r2, sl
 800ea34:	7561      	strb	r1, [r4, #21]
 800ea36:	6123      	str	r3, [r4, #16]
 800ea38:	60a2      	str	r2, [r4, #8]
 800ea3a:	f080 0001 	eor.w	r0, r0, #1
 800ea3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea42:	2108      	movs	r1, #8
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 f871 	bl	800eb2c <ucdr_check_final_buffer_behavior>
 800ea4a:	b308      	cbz	r0, 800ea90 <ucdr_deserialize_endian_double+0x120>
 800ea4c:	2e01      	cmp	r6, #1
 800ea4e:	68a3      	ldr	r3, [r4, #8]
 800ea50:	d023      	beq.n	800ea9a <ucdr_deserialize_endian_double+0x12a>
 800ea52:	79db      	ldrb	r3, [r3, #7]
 800ea54:	702b      	strb	r3, [r5, #0]
 800ea56:	68a3      	ldr	r3, [r4, #8]
 800ea58:	799b      	ldrb	r3, [r3, #6]
 800ea5a:	706b      	strb	r3, [r5, #1]
 800ea5c:	68a3      	ldr	r3, [r4, #8]
 800ea5e:	795b      	ldrb	r3, [r3, #5]
 800ea60:	70ab      	strb	r3, [r5, #2]
 800ea62:	68a3      	ldr	r3, [r4, #8]
 800ea64:	791b      	ldrb	r3, [r3, #4]
 800ea66:	70eb      	strb	r3, [r5, #3]
 800ea68:	68a3      	ldr	r3, [r4, #8]
 800ea6a:	78db      	ldrb	r3, [r3, #3]
 800ea6c:	712b      	strb	r3, [r5, #4]
 800ea6e:	68a3      	ldr	r3, [r4, #8]
 800ea70:	789b      	ldrb	r3, [r3, #2]
 800ea72:	716b      	strb	r3, [r5, #5]
 800ea74:	68a3      	ldr	r3, [r4, #8]
 800ea76:	785b      	ldrb	r3, [r3, #1]
 800ea78:	71ab      	strb	r3, [r5, #6]
 800ea7a:	68a3      	ldr	r3, [r4, #8]
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	71eb      	strb	r3, [r5, #7]
 800ea80:	2108      	movs	r1, #8
 800ea82:	68a2      	ldr	r2, [r4, #8]
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	440a      	add	r2, r1
 800ea88:	440b      	add	r3, r1
 800ea8a:	60a2      	str	r2, [r4, #8]
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	7561      	strb	r1, [r4, #21]
 800ea90:	7da0      	ldrb	r0, [r4, #22]
 800ea92:	f080 0001 	eor.w	r0, r0, #1
 800ea96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9a:	681a      	ldr	r2, [r3, #0]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	602a      	str	r2, [r5, #0]
 800eaa0:	606b      	str	r3, [r5, #4]
 800eaa2:	e7ed      	b.n	800ea80 <ucdr_deserialize_endian_double+0x110>
 800eaa4:	68a2      	ldr	r2, [r4, #8]
 800eaa6:	6923      	ldr	r3, [r4, #16]
 800eaa8:	7da0      	ldrb	r0, [r4, #22]
 800eaaa:	eba2 0208 	sub.w	r2, r2, r8
 800eaae:	eba3 0308 	sub.w	r3, r3, r8
 800eab2:	f884 9015 	strb.w	r9, [r4, #21]
 800eab6:	60a2      	str	r2, [r4, #8]
 800eab8:	6123      	str	r3, [r4, #16]
 800eaba:	f080 0001 	eor.w	r0, r0, #1
 800eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac2:	68a2      	ldr	r2, [r4, #8]
 800eac4:	1cab      	adds	r3, r5, #2
 800eac6:	7992      	ldrb	r2, [r2, #6]
 800eac8:	706a      	strb	r2, [r5, #1]
 800eaca:	68a2      	ldr	r2, [r4, #8]
 800eacc:	7952      	ldrb	r2, [r2, #5]
 800eace:	f803 2b01 	strb.w	r2, [r3], #1
 800ead2:	68a2      	ldr	r2, [r4, #8]
 800ead4:	7912      	ldrb	r2, [r2, #4]
 800ead6:	f803 2b01 	strb.w	r2, [r3], #1
 800eada:	68a2      	ldr	r2, [r4, #8]
 800eadc:	78d2      	ldrb	r2, [r2, #3]
 800eade:	f803 2b01 	strb.w	r2, [r3], #1
 800eae2:	68a2      	ldr	r2, [r4, #8]
 800eae4:	7892      	ldrb	r2, [r2, #2]
 800eae6:	f803 2b01 	strb.w	r2, [r3], #1
 800eaea:	68a2      	ldr	r2, [r4, #8]
 800eaec:	7852      	ldrb	r2, [r2, #1]
 800eaee:	f803 2b01 	strb.w	r2, [r3], #1
 800eaf2:	68a2      	ldr	r2, [r4, #8]
 800eaf4:	7812      	ldrb	r2, [r2, #0]
 800eaf6:	701a      	strb	r2, [r3, #0]
 800eaf8:	e794      	b.n	800ea24 <ucdr_deserialize_endian_double+0xb4>
 800eafa:	4639      	mov	r1, r7
 800eafc:	4642      	mov	r2, r8
 800eafe:	4628      	mov	r0, r5
 800eb00:	f00b fdfc 	bl	801a6fc <memcpy>
 800eb04:	4652      	mov	r2, sl
 800eb06:	68a1      	ldr	r1, [r4, #8]
 800eb08:	eb05 0008 	add.w	r0, r5, r8
 800eb0c:	f00b fdf6 	bl	801a6fc <memcpy>
 800eb10:	e788      	b.n	800ea24 <ucdr_deserialize_endian_double+0xb4>
 800eb12:	bf00      	nop

0800eb14 <ucdr_check_buffer_available_for>:
 800eb14:	7d83      	ldrb	r3, [r0, #22]
 800eb16:	b93b      	cbnz	r3, 800eb28 <ucdr_check_buffer_available_for+0x14>
 800eb18:	6883      	ldr	r3, [r0, #8]
 800eb1a:	6840      	ldr	r0, [r0, #4]
 800eb1c:	4419      	add	r1, r3
 800eb1e:	4288      	cmp	r0, r1
 800eb20:	bf34      	ite	cc
 800eb22:	2000      	movcc	r0, #0
 800eb24:	2001      	movcs	r0, #1
 800eb26:	4770      	bx	lr
 800eb28:	2000      	movs	r0, #0
 800eb2a:	4770      	bx	lr

0800eb2c <ucdr_check_final_buffer_behavior>:
 800eb2c:	7d83      	ldrb	r3, [r0, #22]
 800eb2e:	b943      	cbnz	r3, 800eb42 <ucdr_check_final_buffer_behavior+0x16>
 800eb30:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800eb34:	4291      	cmp	r1, r2
 800eb36:	b510      	push	{r4, lr}
 800eb38:	4604      	mov	r4, r0
 800eb3a:	d205      	bcs.n	800eb48 <ucdr_check_final_buffer_behavior+0x1c>
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	4618      	mov	r0, r3
 800eb40:	bd10      	pop	{r4, pc}
 800eb42:	2300      	movs	r3, #0
 800eb44:	4618      	mov	r0, r3
 800eb46:	4770      	bx	lr
 800eb48:	6982      	ldr	r2, [r0, #24]
 800eb4a:	b13a      	cbz	r2, 800eb5c <ucdr_check_final_buffer_behavior+0x30>
 800eb4c:	69c1      	ldr	r1, [r0, #28]
 800eb4e:	4790      	blx	r2
 800eb50:	f080 0301 	eor.w	r3, r0, #1
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	75a0      	strb	r0, [r4, #22]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	75a0      	strb	r0, [r4, #22]
 800eb60:	e7fa      	b.n	800eb58 <ucdr_check_final_buffer_behavior+0x2c>
 800eb62:	bf00      	nop

0800eb64 <ucdr_set_on_full_buffer_callback>:
 800eb64:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop

0800eb6c <ucdr_init_buffer_origin_offset_endian>:
 800eb6c:	b430      	push	{r4, r5}
 800eb6e:	2400      	movs	r4, #0
 800eb70:	9d02      	ldr	r5, [sp, #8]
 800eb72:	440a      	add	r2, r1
 800eb74:	6001      	str	r1, [r0, #0]
 800eb76:	60c3      	str	r3, [r0, #12]
 800eb78:	4429      	add	r1, r5
 800eb7a:	441d      	add	r5, r3
 800eb7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800eb80:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800eb84:	6105      	str	r5, [r0, #16]
 800eb86:	7544      	strb	r4, [r0, #21]
 800eb88:	7584      	strb	r4, [r0, #22]
 800eb8a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800eb8e:	bc30      	pop	{r4, r5}
 800eb90:	7503      	strb	r3, [r0, #20]
 800eb92:	4770      	bx	lr

0800eb94 <ucdr_init_buffer_origin_offset>:
 800eb94:	b530      	push	{r4, r5, lr}
 800eb96:	2501      	movs	r5, #1
 800eb98:	b083      	sub	sp, #12
 800eb9a:	9c06      	ldr	r4, [sp, #24]
 800eb9c:	e9cd 4500 	strd	r4, r5, [sp]
 800eba0:	f7ff ffe4 	bl	800eb6c <ucdr_init_buffer_origin_offset_endian>
 800eba4:	b003      	add	sp, #12
 800eba6:	bd30      	pop	{r4, r5, pc}

0800eba8 <ucdr_init_buffer_origin>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	2400      	movs	r4, #0
 800ebac:	b082      	sub	sp, #8
 800ebae:	9400      	str	r4, [sp, #0]
 800ebb0:	f7ff fff0 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 800ebb4:	b002      	add	sp, #8
 800ebb6:	bd10      	pop	{r4, pc}

0800ebb8 <ucdr_init_buffer>:
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f7ff bff5 	b.w	800eba8 <ucdr_init_buffer_origin>
 800ebbe:	bf00      	nop

0800ebc0 <ucdr_alignment>:
 800ebc0:	fbb0 f3f1 	udiv	r3, r0, r1
 800ebc4:	fb03 0311 	mls	r3, r3, r1, r0
 800ebc8:	1e48      	subs	r0, r1, #1
 800ebca:	1ac9      	subs	r1, r1, r3
 800ebcc:	4008      	ands	r0, r1
 800ebce:	4770      	bx	lr

0800ebd0 <ucdr_buffer_alignment>:
 800ebd0:	7d43      	ldrb	r3, [r0, #21]
 800ebd2:	428b      	cmp	r3, r1
 800ebd4:	d209      	bcs.n	800ebea <ucdr_buffer_alignment+0x1a>
 800ebd6:	6903      	ldr	r3, [r0, #16]
 800ebd8:	1e4a      	subs	r2, r1, #1
 800ebda:	fbb3 f0f1 	udiv	r0, r3, r1
 800ebde:	fb01 3010 	mls	r0, r1, r0, r3
 800ebe2:	1a09      	subs	r1, r1, r0
 800ebe4:	ea01 0002 	and.w	r0, r1, r2
 800ebe8:	4770      	bx	lr
 800ebea:	2000      	movs	r0, #0
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop

0800ebf0 <ucdr_align_to>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	460d      	mov	r5, r1
 800ebf6:	f7ff ffeb 	bl	800ebd0 <ucdr_buffer_alignment>
 800ebfa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800ebfe:	4402      	add	r2, r0
 800ec00:	4293      	cmp	r3, r2
 800ec02:	bf28      	it	cs
 800ec04:	4613      	movcs	r3, r2
 800ec06:	6922      	ldr	r2, [r4, #16]
 800ec08:	7565      	strb	r5, [r4, #21]
 800ec0a:	4410      	add	r0, r2
 800ec0c:	6120      	str	r0, [r4, #16]
 800ec0e:	60a3      	str	r3, [r4, #8]
 800ec10:	bd38      	pop	{r3, r4, r5, pc}
 800ec12:	bf00      	nop

0800ec14 <ucdr_buffer_length>:
 800ec14:	6882      	ldr	r2, [r0, #8]
 800ec16:	6800      	ldr	r0, [r0, #0]
 800ec18:	1a10      	subs	r0, r2, r0
 800ec1a:	4770      	bx	lr

0800ec1c <ucdr_buffer_remaining>:
 800ec1c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ec20:	1a10      	subs	r0, r2, r0
 800ec22:	4770      	bx	lr

0800ec24 <ucdr_check_final_buffer_behavior_array>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	7d83      	ldrb	r3, [r0, #22]
 800ec28:	b963      	cbnz	r3, 800ec44 <ucdr_check_final_buffer_behavior_array+0x20>
 800ec2a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	d308      	bcc.n	800ec48 <ucdr_check_final_buffer_behavior_array+0x24>
 800ec36:	b139      	cbz	r1, 800ec48 <ucdr_check_final_buffer_behavior_array+0x24>
 800ec38:	6983      	ldr	r3, [r0, #24]
 800ec3a:	b163      	cbz	r3, 800ec56 <ucdr_check_final_buffer_behavior_array+0x32>
 800ec3c:	69c1      	ldr	r1, [r0, #28]
 800ec3e:	4798      	blx	r3
 800ec40:	75a0      	strb	r0, [r4, #22]
 800ec42:	b108      	cbz	r0, 800ec48 <ucdr_check_final_buffer_behavior_array+0x24>
 800ec44:	2000      	movs	r0, #0
 800ec46:	bd38      	pop	{r3, r4, r5, pc}
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f7ff ffe7 	bl	800ec1c <ucdr_buffer_remaining>
 800ec4e:	42a8      	cmp	r0, r5
 800ec50:	bf28      	it	cs
 800ec52:	4628      	movcs	r0, r5
 800ec54:	bd38      	pop	{r3, r4, r5, pc}
 800ec56:	2301      	movs	r3, #1
 800ec58:	7583      	strb	r3, [r0, #22]
 800ec5a:	e7f3      	b.n	800ec44 <ucdr_check_final_buffer_behavior_array+0x20>

0800ec5c <ucdr_advance_buffer>:
 800ec5c:	b538      	push	{r3, r4, r5, lr}
 800ec5e:	4604      	mov	r4, r0
 800ec60:	460d      	mov	r5, r1
 800ec62:	f7ff ff57 	bl	800eb14 <ucdr_check_buffer_available_for>
 800ec66:	b178      	cbz	r0, 800ec88 <ucdr_advance_buffer+0x2c>
 800ec68:	68a3      	ldr	r3, [r4, #8]
 800ec6a:	6921      	ldr	r1, [r4, #16]
 800ec6c:	442b      	add	r3, r5
 800ec6e:	60a3      	str	r3, [r4, #8]
 800ec70:	2301      	movs	r3, #1
 800ec72:	4429      	add	r1, r5
 800ec74:	7563      	strb	r3, [r4, #21]
 800ec76:	6121      	str	r1, [r4, #16]
 800ec78:	bd38      	pop	{r3, r4, r5, pc}
 800ec7a:	68a2      	ldr	r2, [r4, #8]
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	4402      	add	r2, r0
 800ec80:	4403      	add	r3, r0
 800ec82:	1a2d      	subs	r5, r5, r0
 800ec84:	60a2      	str	r2, [r4, #8]
 800ec86:	6123      	str	r3, [r4, #16]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	4629      	mov	r1, r5
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f7ff ffc9 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d1f1      	bne.n	800ec7a <ucdr_advance_buffer+0x1e>
 800ec96:	2301      	movs	r3, #1
 800ec98:	7563      	strb	r3, [r4, #21]
 800ec9a:	bd38      	pop	{r3, r4, r5, pc}

0800ec9c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800ec9c:	f000 b8be 	b.w	800ee1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>

0800eca0 <get_serialized_size_nav_msgs__msg__Odometry>:
 800eca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca2:	4604      	mov	r4, r0
 800eca4:	b1c8      	cbz	r0, 800ecda <get_serialized_size_nav_msgs__msg__Odometry+0x3a>
 800eca6:	460e      	mov	r6, r1
 800eca8:	f003 f9d6 	bl	8012058 <get_serialized_size_std_msgs__msg__Header>
 800ecac:	1837      	adds	r7, r6, r0
 800ecae:	2104      	movs	r1, #4
 800ecb0:	4638      	mov	r0, r7
 800ecb2:	f7ff ff85 	bl	800ebc0 <ucdr_alignment>
 800ecb6:	4601      	mov	r1, r0
 800ecb8:	69a3      	ldr	r3, [r4, #24]
 800ecba:	f104 0020 	add.w	r0, r4, #32
 800ecbe:	1d5d      	adds	r5, r3, #5
 800ecc0:	440d      	add	r5, r1
 800ecc2:	443d      	add	r5, r7
 800ecc4:	4629      	mov	r1, r5
 800ecc6:	f003 fb87 	bl	80123d8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800ecca:	4405      	add	r5, r0
 800eccc:	4629      	mov	r1, r5
 800ecce:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800ecd2:	f003 fcab 	bl	801262c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800ecd6:	1b80      	subs	r0, r0, r6
 800ecd8:	4428      	add	r0, r5
 800ecda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ecdc <_Odometry__cdr_deserialize>:
 800ecdc:	b570      	push	{r4, r5, r6, lr}
 800ecde:	460c      	mov	r4, r1
 800ece0:	b082      	sub	sp, #8
 800ece2:	b341      	cbz	r1, 800ed36 <_Odometry__cdr_deserialize+0x5a>
 800ece4:	4605      	mov	r5, r0
 800ece6:	f003 fa39 	bl	801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ecea:	6843      	ldr	r3, [r0, #4]
 800ecec:	4621      	mov	r1, r4
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	4798      	blx	r3
 800ecf4:	69e6      	ldr	r6, [r4, #28]
 800ecf6:	ab01      	add	r3, sp, #4
 800ecf8:	4632      	mov	r2, r6
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	6961      	ldr	r1, [r4, #20]
 800ecfe:	f004 f845 	bl	8012d8c <ucdr_deserialize_sequence_char>
 800ed02:	9b01      	ldr	r3, [sp, #4]
 800ed04:	b998      	cbnz	r0, 800ed2e <_Odometry__cdr_deserialize+0x52>
 800ed06:	429e      	cmp	r6, r3
 800ed08:	d318      	bcc.n	800ed3c <_Odometry__cdr_deserialize+0x60>
 800ed0a:	f003 fbd1 	bl	80124b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800ed0e:	6843      	ldr	r3, [r0, #4]
 800ed10:	f104 0120 	add.w	r1, r4, #32
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	4628      	mov	r0, r5
 800ed18:	4798      	blx	r3
 800ed1a:	f003 fcf3 	bl	8012704 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800ed1e:	6843      	ldr	r3, [r0, #4]
 800ed20:	f504 71bc 	add.w	r1, r4, #376	; 0x178
 800ed24:	4628      	mov	r0, r5
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	4798      	blx	r3
 800ed2a:	b002      	add	sp, #8
 800ed2c:	bd70      	pop	{r4, r5, r6, pc}
 800ed2e:	b103      	cbz	r3, 800ed32 <_Odometry__cdr_deserialize+0x56>
 800ed30:	3b01      	subs	r3, #1
 800ed32:	61a3      	str	r3, [r4, #24]
 800ed34:	e7e9      	b.n	800ed0a <_Odometry__cdr_deserialize+0x2e>
 800ed36:	4608      	mov	r0, r1
 800ed38:	b002      	add	sp, #8
 800ed3a:	bd70      	pop	{r4, r5, r6, pc}
 800ed3c:	2101      	movs	r1, #1
 800ed3e:	75a8      	strb	r0, [r5, #22]
 800ed40:	7569      	strb	r1, [r5, #21]
 800ed42:	61a0      	str	r0, [r4, #24]
 800ed44:	4628      	mov	r0, r5
 800ed46:	f7ff ff53 	bl	800ebf0 <ucdr_align_to>
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	9901      	ldr	r1, [sp, #4]
 800ed4e:	f7ff ff85 	bl	800ec5c <ucdr_advance_buffer>
 800ed52:	e7da      	b.n	800ed0a <_Odometry__cdr_deserialize+0x2e>

0800ed54 <_Odometry__cdr_serialize>:
 800ed54:	b348      	cbz	r0, 800edaa <_Odometry__cdr_serialize+0x56>
 800ed56:	b570      	push	{r4, r5, r6, lr}
 800ed58:	4604      	mov	r4, r0
 800ed5a:	460e      	mov	r6, r1
 800ed5c:	f003 f9fe 	bl	801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ed60:	6843      	ldr	r3, [r0, #4]
 800ed62:	4631      	mov	r1, r6
 800ed64:	4620      	mov	r0, r4
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	4798      	blx	r3
 800ed6a:	6965      	ldr	r5, [r4, #20]
 800ed6c:	b1d5      	cbz	r5, 800eda4 <_Odometry__cdr_serialize+0x50>
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f7f1 fa68 	bl	8000244 <strlen>
 800ed74:	1c42      	adds	r2, r0, #1
 800ed76:	4629      	mov	r1, r5
 800ed78:	61a0      	str	r0, [r4, #24]
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f003 fff4 	bl	8012d68 <ucdr_serialize_sequence_char>
 800ed80:	f003 fb96 	bl	80124b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800ed84:	6843      	ldr	r3, [r0, #4]
 800ed86:	4631      	mov	r1, r6
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f104 0020 	add.w	r0, r4, #32
 800ed8e:	4798      	blx	r3
 800ed90:	f003 fcb8 	bl	8012704 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800ed94:	6843      	ldr	r3, [r0, #4]
 800ed96:	4631      	mov	r1, r6
 800ed98:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eda2:	4718      	bx	r3
 800eda4:	462a      	mov	r2, r5
 800eda6:	4628      	mov	r0, r5
 800eda8:	e7e5      	b.n	800ed76 <_Odometry__cdr_serialize+0x22>
 800edaa:	4770      	bx	lr

0800edac <_Odometry__max_serialized_size>:
 800edac:	2301      	movs	r3, #1
 800edae:	b510      	push	{r4, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	2100      	movs	r1, #0
 800edb4:	f10d 0007 	add.w	r0, sp, #7
 800edb8:	f88d 3007 	strb.w	r3, [sp, #7]
 800edbc:	f003 f9c4 	bl	8012148 <max_serialized_size_std_msgs__msg__Header>
 800edc0:	2300      	movs	r3, #0
 800edc2:	4601      	mov	r1, r0
 800edc4:	4604      	mov	r4, r0
 800edc6:	f10d 0007 	add.w	r0, sp, #7
 800edca:	f88d 3007 	strb.w	r3, [sp, #7]
 800edce:	f003 fb5f 	bl	8012490 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800edd2:	4404      	add	r4, r0
 800edd4:	4621      	mov	r1, r4
 800edd6:	f10d 0007 	add.w	r0, sp, #7
 800edda:	f003 fc83 	bl	80126e4 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800edde:	4420      	add	r0, r4
 800ede0:	b002      	add	sp, #8
 800ede2:	bd10      	pop	{r4, pc}

0800ede4 <_Odometry__get_serialized_size>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	4604      	mov	r4, r0
 800ede8:	b1b8      	cbz	r0, 800ee1a <_Odometry__get_serialized_size+0x36>
 800edea:	2100      	movs	r1, #0
 800edec:	f003 f934 	bl	8012058 <get_serialized_size_std_msgs__msg__Header>
 800edf0:	2104      	movs	r1, #4
 800edf2:	4606      	mov	r6, r0
 800edf4:	f7ff fee4 	bl	800ebc0 <ucdr_alignment>
 800edf8:	4601      	mov	r1, r0
 800edfa:	69a3      	ldr	r3, [r4, #24]
 800edfc:	f104 0020 	add.w	r0, r4, #32
 800ee00:	1d5d      	adds	r5, r3, #5
 800ee02:	4435      	add	r5, r6
 800ee04:	440d      	add	r5, r1
 800ee06:	4629      	mov	r1, r5
 800ee08:	f003 fae6 	bl	80123d8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800ee0c:	4405      	add	r5, r0
 800ee0e:	4629      	mov	r1, r5
 800ee10:	f504 70bc 	add.w	r0, r4, #376	; 0x178
 800ee14:	f003 fc0a 	bl	801262c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800ee18:	4428      	add	r0, r5
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}

0800ee1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800ee1c:	4800      	ldr	r0, [pc, #0]	; (800ee20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800ee1e:	4770      	bx	lr
 800ee20:	2000007c 	.word	0x2000007c

0800ee24 <rcl_get_zero_initialized_init_options>:
 800ee24:	2000      	movs	r0, #0
 800ee26:	4770      	bx	lr

0800ee28 <rcl_init_options_init>:
 800ee28:	b084      	sub	sp, #16
 800ee2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee2c:	b091      	sub	sp, #68	; 0x44
 800ee2e:	af17      	add	r7, sp, #92	; 0x5c
 800ee30:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d045      	beq.n	800eec4 <rcl_init_options_init+0x9c>
 800ee38:	6803      	ldr	r3, [r0, #0]
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	b133      	cbz	r3, 800ee4c <rcl_init_options_init+0x24>
 800ee3e:	2464      	movs	r4, #100	; 0x64
 800ee40:	4620      	mov	r0, r4
 800ee42:	b011      	add	sp, #68	; 0x44
 800ee44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ee48:	b004      	add	sp, #16
 800ee4a:	4770      	bx	lr
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	f001 f8ab 	bl	800ffa8 <rcutils_allocator_is_valid>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d036      	beq.n	800eec4 <rcl_init_options_init+0x9c>
 800ee56:	2050      	movs	r0, #80	; 0x50
 800ee58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee5a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ee5c:	4798      	blx	r3
 800ee5e:	4604      	mov	r4, r0
 800ee60:	6030      	str	r0, [r6, #0]
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d030      	beq.n	800eec8 <rcl_init_options_init+0xa0>
 800ee66:	4605      	mov	r5, r0
 800ee68:	46bc      	mov	ip, r7
 800ee6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee70:	f8dc 3000 	ldr.w	r3, [ip]
 800ee74:	a802      	add	r0, sp, #8
 800ee76:	602b      	str	r3, [r5, #0]
 800ee78:	3418      	adds	r4, #24
 800ee7a:	ad02      	add	r5, sp, #8
 800ee7c:	f001 fb16 	bl	80104ac <rmw_get_zero_initialized_init_options>
 800ee80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ee8c:	f8d6 c000 	ldr.w	ip, [r6]
 800ee90:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee94:	e884 0003 	stmia.w	r4, {r0, r1}
 800ee98:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800ee9c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eea0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800eea4:	f10c 0018 	add.w	r0, ip, #24
 800eea8:	f001 fbcc 	bl	8010644 <rmw_init_options_init>
 800eeac:	4604      	mov	r4, r0
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d0c6      	beq.n	800ee40 <rcl_init_options_init+0x18>
 800eeb2:	6830      	ldr	r0, [r6, #0]
 800eeb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eeb6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800eeb8:	4798      	blx	r3
 800eeba:	4620      	mov	r0, r4
 800eebc:	f007 fa48 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 800eec0:	4604      	mov	r4, r0
 800eec2:	e7bd      	b.n	800ee40 <rcl_init_options_init+0x18>
 800eec4:	240b      	movs	r4, #11
 800eec6:	e7bb      	b.n	800ee40 <rcl_init_options_init+0x18>
 800eec8:	240a      	movs	r4, #10
 800eeca:	e7b9      	b.n	800ee40 <rcl_init_options_init+0x18>

0800eecc <rcl_init_options_fini>:
 800eecc:	b570      	push	{r4, r5, r6, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	b1c0      	cbz	r0, 800ef04 <rcl_init_options_fini+0x38>
 800eed2:	6804      	ldr	r4, [r0, #0]
 800eed4:	4606      	mov	r6, r0
 800eed6:	b1ac      	cbz	r4, 800ef04 <rcl_init_options_fini+0x38>
 800eed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eeda:	ad01      	add	r5, sp, #4
 800eedc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	a801      	add	r0, sp, #4
 800eee2:	602b      	str	r3, [r5, #0]
 800eee4:	f001 f860 	bl	800ffa8 <rcutils_allocator_is_valid>
 800eee8:	b160      	cbz	r0, 800ef04 <rcl_init_options_fini+0x38>
 800eeea:	6830      	ldr	r0, [r6, #0]
 800eeec:	3018      	adds	r0, #24
 800eeee:	f001 fc43 	bl	8010778 <rmw_init_options_fini>
 800eef2:	4604      	mov	r4, r0
 800eef4:	b950      	cbnz	r0, 800ef0c <rcl_init_options_fini+0x40>
 800eef6:	6830      	ldr	r0, [r6, #0]
 800eef8:	9b02      	ldr	r3, [sp, #8]
 800eefa:	9905      	ldr	r1, [sp, #20]
 800eefc:	4798      	blx	r3
 800eefe:	4620      	mov	r0, r4
 800ef00:	b006      	add	sp, #24
 800ef02:	bd70      	pop	{r4, r5, r6, pc}
 800ef04:	240b      	movs	r4, #11
 800ef06:	4620      	mov	r0, r4
 800ef08:	b006      	add	sp, #24
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	f007 fa20 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 800ef10:	4604      	mov	r4, r0
 800ef12:	e7f8      	b.n	800ef06 <rcl_init_options_fini+0x3a>

0800ef14 <rcl_init_options_copy>:
 800ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef18:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d070      	beq.n	800f002 <rcl_init_options_copy+0xee>
 800ef20:	6806      	ldr	r6, [r0, #0]
 800ef22:	4605      	mov	r5, r0
 800ef24:	2e00      	cmp	r6, #0
 800ef26:	d06c      	beq.n	800f002 <rcl_init_options_copy+0xee>
 800ef28:	460c      	mov	r4, r1
 800ef2a:	2900      	cmp	r1, #0
 800ef2c:	d069      	beq.n	800f002 <rcl_init_options_copy+0xee>
 800ef2e:	680b      	ldr	r3, [r1, #0]
 800ef30:	b12b      	cbz	r3, 800ef3e <rcl_init_options_copy+0x2a>
 800ef32:	2664      	movs	r6, #100	; 0x64
 800ef34:	4630      	mov	r0, r6
 800ef36:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800ef3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef3e:	af10      	add	r7, sp, #64	; 0x40
 800ef40:	46bc      	mov	ip, r7
 800ef42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ef44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef48:	6833      	ldr	r3, [r6, #0]
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	f8cc 3000 	str.w	r3, [ip]
 800ef50:	f001 f82a 	bl	800ffa8 <rcutils_allocator_is_valid>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d054      	beq.n	800f002 <rcl_init_options_copy+0xee>
 800ef58:	2050      	movs	r0, #80	; 0x50
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	6939      	ldr	r1, [r7, #16]
 800ef5e:	4798      	blx	r3
 800ef60:	4606      	mov	r6, r0
 800ef62:	6020      	str	r0, [r4, #0]
 800ef64:	2800      	cmp	r0, #0
 800ef66:	f000 8089 	beq.w	800f07c <rcl_init_options_copy+0x168>
 800ef6a:	4684      	mov	ip, r0
 800ef6c:	46be      	mov	lr, r7
 800ef6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef76:	f8de 3000 	ldr.w	r3, [lr]
 800ef7a:	a802      	add	r0, sp, #8
 800ef7c:	f8cc 3000 	str.w	r3, [ip]
 800ef80:	f001 fa94 	bl	80104ac <rmw_get_zero_initialized_init_options>
 800ef84:	3618      	adds	r6, #24
 800ef86:	f10d 0c08 	add.w	ip, sp, #8
 800ef8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef9c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800efa0:	e886 0003 	stmia.w	r6, {r0, r1}
 800efa4:	6826      	ldr	r6, [r4, #0]
 800efa6:	ab13      	add	r3, sp, #76	; 0x4c
 800efa8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800efac:	e88d 0003 	stmia.w	sp, {r0, r1}
 800efb0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800efb4:	f106 0018 	add.w	r0, r6, #24
 800efb8:	f001 fb44 	bl	8010644 <rmw_init_options_init>
 800efbc:	4606      	mov	r6, r0
 800efbe:	bb30      	cbnz	r0, 800f00e <rcl_init_options_copy+0xfa>
 800efc0:	f8d4 e000 	ldr.w	lr, [r4]
 800efc4:	f8d5 c000 	ldr.w	ip, [r5]
 800efc8:	4676      	mov	r6, lr
 800efca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800efd0:	f8dc 3000 	ldr.w	r3, [ip]
 800efd4:	f10e 0018 	add.w	r0, lr, #24
 800efd8:	6033      	str	r3, [r6, #0]
 800efda:	f001 fbcd 	bl	8010778 <rmw_init_options_fini>
 800efde:	4680      	mov	r8, r0
 800efe0:	b300      	cbz	r0, 800f024 <rcl_init_options_copy+0x110>
 800efe2:	4638      	mov	r0, r7
 800efe4:	f001 f8a8 	bl	8010138 <rcutils_get_error_string>
 800efe8:	f001 f8ce 	bl	8010188 <rcutils_reset_error>
 800efec:	4620      	mov	r0, r4
 800efee:	f7ff ff6d 	bl	800eecc <rcl_init_options_fini>
 800eff2:	4606      	mov	r6, r0
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d19d      	bne.n	800ef34 <rcl_init_options_copy+0x20>
 800eff8:	4640      	mov	r0, r8
 800effa:	f007 f9a9 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 800effe:	4606      	mov	r6, r0
 800f000:	e798      	b.n	800ef34 <rcl_init_options_copy+0x20>
 800f002:	260b      	movs	r6, #11
 800f004:	4630      	mov	r0, r6
 800f006:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800f00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6939      	ldr	r1, [r7, #16]
 800f012:	6820      	ldr	r0, [r4, #0]
 800f014:	4798      	blx	r3
 800f016:	4630      	mov	r0, r6
 800f018:	f007 f99a 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 800f01c:	4606      	mov	r6, r0
 800f01e:	2800      	cmp	r0, #0
 800f020:	d0ce      	beq.n	800efc0 <rcl_init_options_copy+0xac>
 800f022:	e787      	b.n	800ef34 <rcl_init_options_copy+0x20>
 800f024:	f8d4 8000 	ldr.w	r8, [r4]
 800f028:	a802      	add	r0, sp, #8
 800f02a:	f001 fa3f 	bl	80104ac <rmw_get_zero_initialized_init_options>
 800f02e:	ae02      	add	r6, sp, #8
 800f030:	f108 0c18 	add.w	ip, r8, #24
 800f034:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f036:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f03a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f03c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f040:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f042:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f046:	682a      	ldr	r2, [r5, #0]
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f04e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f052:	f102 0018 	add.w	r0, r2, #24
 800f056:	f103 0118 	add.w	r1, r3, #24
 800f05a:	f001 fb4b 	bl	80106f4 <rmw_init_options_copy>
 800f05e:	4606      	mov	r6, r0
 800f060:	2800      	cmp	r0, #0
 800f062:	f43f af67 	beq.w	800ef34 <rcl_init_options_copy+0x20>
 800f066:	4638      	mov	r0, r7
 800f068:	f001 f866 	bl	8010138 <rcutils_get_error_string>
 800f06c:	f001 f88c 	bl	8010188 <rcutils_reset_error>
 800f070:	4620      	mov	r0, r4
 800f072:	f7ff ff2b 	bl	800eecc <rcl_init_options_fini>
 800f076:	b118      	cbz	r0, 800f080 <rcl_init_options_copy+0x16c>
 800f078:	4606      	mov	r6, r0
 800f07a:	e75b      	b.n	800ef34 <rcl_init_options_copy+0x20>
 800f07c:	260a      	movs	r6, #10
 800f07e:	e759      	b.n	800ef34 <rcl_init_options_copy+0x20>
 800f080:	4630      	mov	r0, r6
 800f082:	f007 f965 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 800f086:	4606      	mov	r6, r0
 800f088:	e754      	b.n	800ef34 <rcl_init_options_copy+0x20>
 800f08a:	bf00      	nop

0800f08c <rcl_get_zero_initialized_publisher>:
 800f08c:	4b01      	ldr	r3, [pc, #4]	; (800f094 <rcl_get_zero_initialized_publisher+0x8>)
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	0801cfd4 	.word	0x0801cfd4

0800f098 <rcl_publisher_init>:
 800f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09c:	b08f      	sub	sp, #60	; 0x3c
 800f09e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800f0a0:	2f00      	cmp	r7, #0
 800f0a2:	d03a      	beq.n	800f11a <rcl_publisher_init+0x82>
 800f0a4:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	4648      	mov	r0, r9
 800f0ac:	4688      	mov	r8, r1
 800f0ae:	4616      	mov	r6, r2
 800f0b0:	461d      	mov	r5, r3
 800f0b2:	f000 ff79 	bl	800ffa8 <rcutils_allocator_is_valid>
 800f0b6:	b380      	cbz	r0, 800f11a <rcl_publisher_init+0x82>
 800f0b8:	b37c      	cbz	r4, 800f11a <rcl_publisher_init+0x82>
 800f0ba:	f8d4 a000 	ldr.w	sl, [r4]
 800f0be:	f1ba 0f00 	cmp.w	sl, #0
 800f0c2:	d004      	beq.n	800f0ce <rcl_publisher_init+0x36>
 800f0c4:	2564      	movs	r5, #100	; 0x64
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	b00f      	add	sp, #60	; 0x3c
 800f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ce:	4640      	mov	r0, r8
 800f0d0:	f007 fdf2 	bl	8016cb8 <rcl_node_is_valid>
 800f0d4:	b330      	cbz	r0, 800f124 <rcl_publisher_init+0x8c>
 800f0d6:	b306      	cbz	r6, 800f11a <rcl_publisher_init+0x82>
 800f0d8:	b1fd      	cbz	r5, 800f11a <rcl_publisher_init+0x82>
 800f0da:	46ce      	mov	lr, r9
 800f0dc:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800f0e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f0e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f0e8:	f8de 3000 	ldr.w	r3, [lr]
 800f0ec:	f8cc 3000 	str.w	r3, [ip]
 800f0f0:	f001 f868 	bl	80101c4 <rcutils_get_zero_initialized_string_map>
 800f0f4:	4684      	mov	ip, r0
 800f0f6:	ab0e      	add	r3, sp, #56	; 0x38
 800f0f8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f0fc:	f8cd c018 	str.w	ip, [sp, #24]
 800f100:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f106:	4651      	mov	r1, sl
 800f108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f10a:	a806      	add	r0, sp, #24
 800f10c:	f001 f8d0 	bl	80102b0 <rcutils_string_map_init>
 800f110:	b150      	cbz	r0, 800f128 <rcl_publisher_init+0x90>
 800f112:	280a      	cmp	r0, #10
 800f114:	d013      	beq.n	800f13e <rcl_publisher_init+0xa6>
 800f116:	2501      	movs	r5, #1
 800f118:	e7d5      	b.n	800f0c6 <rcl_publisher_init+0x2e>
 800f11a:	250b      	movs	r5, #11
 800f11c:	4628      	mov	r0, r5
 800f11e:	b00f      	add	sp, #60	; 0x3c
 800f120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f124:	25c8      	movs	r5, #200	; 0xc8
 800f126:	e7ce      	b.n	800f0c6 <rcl_publisher_init+0x2e>
 800f128:	a806      	add	r0, sp, #24
 800f12a:	f007 fb13 	bl	8016754 <rcl_get_default_topic_name_substitutions>
 800f12e:	4682      	mov	sl, r0
 800f130:	b138      	cbz	r0, 800f142 <rcl_publisher_init+0xaa>
 800f132:	a806      	add	r0, sp, #24
 800f134:	f001 f8fa 	bl	801032c <rcutils_string_map_fini>
 800f138:	f1ba 0f0a 	cmp.w	sl, #10
 800f13c:	d1eb      	bne.n	800f116 <rcl_publisher_init+0x7e>
 800f13e:	250a      	movs	r5, #10
 800f140:	e7c1      	b.n	800f0c6 <rcl_publisher_init+0x2e>
 800f142:	4640      	mov	r0, r8
 800f144:	f8cd a01c 	str.w	sl, [sp, #28]
 800f148:	f007 fdc0 	bl	8016ccc <rcl_node_get_name>
 800f14c:	4682      	mov	sl, r0
 800f14e:	4640      	mov	r0, r8
 800f150:	f007 fdc4 	bl	8016cdc <rcl_node_get_namespace>
 800f154:	46ec      	mov	ip, sp
 800f156:	4686      	mov	lr, r0
 800f158:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800f15c:	f10d 0b1c 	add.w	fp, sp, #28
 800f160:	f8cd b014 	str.w	fp, [sp, #20]
 800f164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f168:	f8d9 3000 	ldr.w	r3, [r9]
 800f16c:	4628      	mov	r0, r5
 800f16e:	f8cc 3000 	str.w	r3, [ip]
 800f172:	4651      	mov	r1, sl
 800f174:	4672      	mov	r2, lr
 800f176:	ab06      	add	r3, sp, #24
 800f178:	f007 f988 	bl	801648c <rcl_expand_topic_name>
 800f17c:	4605      	mov	r5, r0
 800f17e:	a806      	add	r0, sp, #24
 800f180:	f001 f8d4 	bl	801032c <rcutils_string_map_fini>
 800f184:	b920      	cbnz	r0, 800f190 <rcl_publisher_init+0xf8>
 800f186:	b15d      	cbz	r5, 800f1a0 <rcl_publisher_init+0x108>
 800f188:	2d67      	cmp	r5, #103	; 0x67
 800f18a:	d002      	beq.n	800f192 <rcl_publisher_init+0xfa>
 800f18c:	2d69      	cmp	r5, #105	; 0x69
 800f18e:	d05f      	beq.n	800f250 <rcl_publisher_init+0x1b8>
 800f190:	2501      	movs	r5, #1
 800f192:	9807      	ldr	r0, [sp, #28]
 800f194:	2800      	cmp	r0, #0
 800f196:	d096      	beq.n	800f0c6 <rcl_publisher_init+0x2e>
 800f198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f19a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f19c:	4798      	blx	r3
 800f19e:	e792      	b.n	800f0c6 <rcl_publisher_init+0x2e>
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	f007 fda3 	bl	8016cec <rcl_node_get_options>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d0f2      	beq.n	800f190 <rcl_publisher_init+0xf8>
 800f1aa:	9807      	ldr	r0, [sp, #28]
 800f1ac:	f7f1 f84a 	bl	8000244 <strlen>
 800f1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	4798      	blx	r3
 800f1b8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f1bc:	4681      	mov	r9, r0
 800f1be:	4650      	mov	r0, sl
 800f1c0:	f7f1 f840 	bl	8000244 <strlen>
 800f1c4:	4651      	mov	r1, sl
 800f1c6:	1c42      	adds	r2, r0, #1
 800f1c8:	4648      	mov	r0, r9
 800f1ca:	f00b fa97 	bl	801a6fc <memcpy>
 800f1ce:	462a      	mov	r2, r5
 800f1d0:	4648      	mov	r0, r9
 800f1d2:	a908      	add	r1, sp, #32
 800f1d4:	f001 f996 	bl	8010504 <rmw_validate_full_topic_name>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d137      	bne.n	800f24c <rcl_publisher_init+0x1b4>
 800f1dc:	9b08      	ldr	r3, [sp, #32]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d138      	bne.n	800f254 <rcl_publisher_init+0x1bc>
 800f1e2:	20c0      	movs	r0, #192	; 0xc0
 800f1e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f1e8:	4798      	blx	r3
 800f1ea:	6020      	str	r0, [r4, #0]
 800f1ec:	b3a0      	cbz	r0, 800f258 <rcl_publisher_init+0x1c0>
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	f007 fd84 	bl	8016cfc <rcl_node_get_rmw_handle>
 800f1f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	463b      	mov	r3, r7
 800f1fe:	464a      	mov	r2, r9
 800f200:	6825      	ldr	r5, [r4, #0]
 800f202:	f001 fdc7 	bl	8010d94 <rmw_create_publisher>
 800f206:	6821      	ldr	r1, [r4, #0]
 800f208:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800f20c:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800f210:	b388      	cbz	r0, 800f276 <rcl_publisher_init+0x1de>
 800f212:	3168      	adds	r1, #104	; 0x68
 800f214:	f001 fe9a 	bl	8010f4c <rmw_publisher_get_actual_qos>
 800f218:	6823      	ldr	r3, [r4, #0]
 800f21a:	4605      	mov	r5, r0
 800f21c:	b9f0      	cbnz	r0, 800f25c <rcl_publisher_init+0x1c4>
 800f21e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f222:	4618      	mov	r0, r3
 800f224:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800f228:	4639      	mov	r1, r7
 800f22a:	2268      	movs	r2, #104	; 0x68
 800f22c:	f00b fa66 	bl	801a6fc <memcpy>
 800f230:	f8d8 2000 	ldr.w	r2, [r8]
 800f234:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800f238:	9807      	ldr	r0, [sp, #28]
 800f23a:	b110      	cbz	r0, 800f242 <rcl_publisher_init+0x1aa>
 800f23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f23e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f240:	4798      	blx	r3
 800f242:	4648      	mov	r0, r9
 800f244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f246:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f248:	4798      	blx	r3
 800f24a:	e73c      	b.n	800f0c6 <rcl_publisher_init+0x2e>
 800f24c:	2501      	movs	r5, #1
 800f24e:	e7f3      	b.n	800f238 <rcl_publisher_init+0x1a0>
 800f250:	2567      	movs	r5, #103	; 0x67
 800f252:	e79e      	b.n	800f192 <rcl_publisher_init+0xfa>
 800f254:	2567      	movs	r5, #103	; 0x67
 800f256:	e7ef      	b.n	800f238 <rcl_publisher_init+0x1a0>
 800f258:	250a      	movs	r5, #10
 800f25a:	e7ed      	b.n	800f238 <rcl_publisher_init+0x1a0>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d0f5      	beq.n	800f24c <rcl_publisher_init+0x1b4>
 800f260:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f264:	b13b      	cbz	r3, 800f276 <rcl_publisher_init+0x1de>
 800f266:	4640      	mov	r0, r8
 800f268:	f007 fd48 	bl	8016cfc <rcl_node_get_rmw_handle>
 800f26c:	6823      	ldr	r3, [r4, #0]
 800f26e:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800f272:	f001 fe6d 	bl	8010f50 <rmw_destroy_publisher>
 800f276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f278:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f27a:	6820      	ldr	r0, [r4, #0]
 800f27c:	4798      	blx	r3
 800f27e:	2300      	movs	r3, #0
 800f280:	2501      	movs	r5, #1
 800f282:	6023      	str	r3, [r4, #0]
 800f284:	e7d8      	b.n	800f238 <rcl_publisher_init+0x1a0>
 800f286:	bf00      	nop

0800f288 <rcl_publisher_get_default_options>:
 800f288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f28a:	b087      	sub	sp, #28
 800f28c:	466c      	mov	r4, sp
 800f28e:	4f0d      	ldr	r7, [pc, #52]	; (800f2c4 <rcl_publisher_get_default_options+0x3c>)
 800f290:	4606      	mov	r6, r0
 800f292:	2250      	movs	r2, #80	; 0x50
 800f294:	490c      	ldr	r1, [pc, #48]	; (800f2c8 <rcl_publisher_get_default_options+0x40>)
 800f296:	4638      	mov	r0, r7
 800f298:	f00b fa30 	bl	801a6fc <memcpy>
 800f29c:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800f2a0:	4668      	mov	r0, sp
 800f2a2:	f000 fe73 	bl	800ff8c <rcutils_get_default_allocator>
 800f2a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	602b      	str	r3, [r5, #0]
 800f2ae:	f001 f90d 	bl	80104cc <rmw_get_default_publisher_options>
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	6678      	str	r0, [r7, #100]	; 0x64
 800f2b6:	2268      	movs	r2, #104	; 0x68
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	f00b fa1f 	bl	801a6fc <memcpy>
 800f2be:	4630      	mov	r0, r6
 800f2c0:	b007      	add	sp, #28
 800f2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2c4:	20006760 	.word	0x20006760
 800f2c8:	0801cfd8 	.word	0x0801cfd8

0800f2cc <rcl_publish>:
 800f2cc:	b1f8      	cbz	r0, 800f30e <rcl_publish+0x42>
 800f2ce:	6803      	ldr	r3, [r0, #0]
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	b1b3      	cbz	r3, 800f304 <rcl_publish+0x38>
 800f2d6:	4616      	mov	r6, r2
 800f2d8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800f2dc:	b192      	cbz	r2, 800f304 <rcl_publish+0x38>
 800f2de:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800f2e2:	460d      	mov	r5, r1
 800f2e4:	f007 f858 	bl	8016398 <rcl_context_is_valid>
 800f2e8:	b160      	cbz	r0, 800f304 <rcl_publish+0x38>
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800f2f0:	b140      	cbz	r0, 800f304 <rcl_publish+0x38>
 800f2f2:	b155      	cbz	r5, 800f30a <rcl_publish+0x3e>
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f001 fcec 	bl	8010cd4 <rmw_publish>
 800f2fc:	3800      	subs	r0, #0
 800f2fe:	bf18      	it	ne
 800f300:	2001      	movne	r0, #1
 800f302:	bd70      	pop	{r4, r5, r6, pc}
 800f304:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f308:	bd70      	pop	{r4, r5, r6, pc}
 800f30a:	200b      	movs	r0, #11
 800f30c:	bd70      	pop	{r4, r5, r6, pc}
 800f30e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f312:	4770      	bx	lr

0800f314 <rcl_get_zero_initialized_subscription>:
 800f314:	4b01      	ldr	r3, [pc, #4]	; (800f31c <rcl_get_zero_initialized_subscription+0x8>)
 800f316:	6818      	ldr	r0, [r3, #0]
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	0801d028 	.word	0x0801d028

0800f320 <rcl_subscription_init>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	b08f      	sub	sp, #60	; 0x3c
 800f326:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800f328:	b1d7      	cbz	r7, 800f360 <rcl_subscription_init+0x40>
 800f32a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800f32e:	4604      	mov	r4, r0
 800f330:	4648      	mov	r0, r9
 800f332:	4688      	mov	r8, r1
 800f334:	4616      	mov	r6, r2
 800f336:	461d      	mov	r5, r3
 800f338:	f000 fe36 	bl	800ffa8 <rcutils_allocator_is_valid>
 800f33c:	b180      	cbz	r0, 800f360 <rcl_subscription_init+0x40>
 800f33e:	b17c      	cbz	r4, 800f360 <rcl_subscription_init+0x40>
 800f340:	4640      	mov	r0, r8
 800f342:	f007 fcb9 	bl	8016cb8 <rcl_node_is_valid>
 800f346:	b380      	cbz	r0, 800f3aa <rcl_subscription_init+0x8a>
 800f348:	b156      	cbz	r6, 800f360 <rcl_subscription_init+0x40>
 800f34a:	b14d      	cbz	r5, 800f360 <rcl_subscription_init+0x40>
 800f34c:	f8d4 a000 	ldr.w	sl, [r4]
 800f350:	f1ba 0f00 	cmp.w	sl, #0
 800f354:	d009      	beq.n	800f36a <rcl_subscription_init+0x4a>
 800f356:	2564      	movs	r5, #100	; 0x64
 800f358:	4628      	mov	r0, r5
 800f35a:	b00f      	add	sp, #60	; 0x3c
 800f35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f360:	250b      	movs	r5, #11
 800f362:	4628      	mov	r0, r5
 800f364:	b00f      	add	sp, #60	; 0x3c
 800f366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f36a:	46ce      	mov	lr, r9
 800f36c:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800f370:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f374:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f378:	f8de 3000 	ldr.w	r3, [lr]
 800f37c:	f8cc 3000 	str.w	r3, [ip]
 800f380:	f000 ff20 	bl	80101c4 <rcutils_get_zero_initialized_string_map>
 800f384:	4684      	mov	ip, r0
 800f386:	ab0e      	add	r3, sp, #56	; 0x38
 800f388:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f38c:	f8cd c018 	str.w	ip, [sp, #24]
 800f390:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f396:	4651      	mov	r1, sl
 800f398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f39a:	a806      	add	r0, sp, #24
 800f39c:	f000 ff88 	bl	80102b0 <rcutils_string_map_init>
 800f3a0:	b140      	cbz	r0, 800f3b4 <rcl_subscription_init+0x94>
 800f3a2:	280a      	cmp	r0, #10
 800f3a4:	d011      	beq.n	800f3ca <rcl_subscription_init+0xaa>
 800f3a6:	2501      	movs	r5, #1
 800f3a8:	e7db      	b.n	800f362 <rcl_subscription_init+0x42>
 800f3aa:	25c8      	movs	r5, #200	; 0xc8
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	b00f      	add	sp, #60	; 0x3c
 800f3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b4:	a806      	add	r0, sp, #24
 800f3b6:	f007 f9cd 	bl	8016754 <rcl_get_default_topic_name_substitutions>
 800f3ba:	4682      	mov	sl, r0
 800f3bc:	b138      	cbz	r0, 800f3ce <rcl_subscription_init+0xae>
 800f3be:	a806      	add	r0, sp, #24
 800f3c0:	f000 ffb4 	bl	801032c <rcutils_string_map_fini>
 800f3c4:	f1ba 0f0a 	cmp.w	sl, #10
 800f3c8:	d1ed      	bne.n	800f3a6 <rcl_subscription_init+0x86>
 800f3ca:	250a      	movs	r5, #10
 800f3cc:	e7c9      	b.n	800f362 <rcl_subscription_init+0x42>
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	f8cd a01c 	str.w	sl, [sp, #28]
 800f3d4:	f007 fc7a 	bl	8016ccc <rcl_node_get_name>
 800f3d8:	4682      	mov	sl, r0
 800f3da:	4640      	mov	r0, r8
 800f3dc:	f007 fc7e 	bl	8016cdc <rcl_node_get_namespace>
 800f3e0:	46ec      	mov	ip, sp
 800f3e2:	4686      	mov	lr, r0
 800f3e4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800f3e8:	f10d 0b1c 	add.w	fp, sp, #28
 800f3ec:	f8cd b014 	str.w	fp, [sp, #20]
 800f3f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3f4:	f8d9 3000 	ldr.w	r3, [r9]
 800f3f8:	4628      	mov	r0, r5
 800f3fa:	f8cc 3000 	str.w	r3, [ip]
 800f3fe:	4651      	mov	r1, sl
 800f400:	4672      	mov	r2, lr
 800f402:	ab06      	add	r3, sp, #24
 800f404:	f007 f842 	bl	801648c <rcl_expand_topic_name>
 800f408:	4605      	mov	r5, r0
 800f40a:	a806      	add	r0, sp, #24
 800f40c:	f000 ff8e 	bl	801032c <rcutils_string_map_fini>
 800f410:	b920      	cbnz	r0, 800f41c <rcl_subscription_init+0xfc>
 800f412:	b15d      	cbz	r5, 800f42c <rcl_subscription_init+0x10c>
 800f414:	2d67      	cmp	r5, #103	; 0x67
 800f416:	d002      	beq.n	800f41e <rcl_subscription_init+0xfe>
 800f418:	2d69      	cmp	r5, #105	; 0x69
 800f41a:	d05a      	beq.n	800f4d2 <rcl_subscription_init+0x1b2>
 800f41c:	2501      	movs	r5, #1
 800f41e:	9807      	ldr	r0, [sp, #28]
 800f420:	2800      	cmp	r0, #0
 800f422:	d09e      	beq.n	800f362 <rcl_subscription_init+0x42>
 800f424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f426:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f428:	4798      	blx	r3
 800f42a:	e79a      	b.n	800f362 <rcl_subscription_init+0x42>
 800f42c:	4640      	mov	r0, r8
 800f42e:	f007 fc5d 	bl	8016cec <rcl_node_get_options>
 800f432:	2800      	cmp	r0, #0
 800f434:	d0f2      	beq.n	800f41c <rcl_subscription_init+0xfc>
 800f436:	9807      	ldr	r0, [sp, #28]
 800f438:	f7f0 ff04 	bl	8000244 <strlen>
 800f43c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f43e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f440:	3001      	adds	r0, #1
 800f442:	4798      	blx	r3
 800f444:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f448:	4681      	mov	r9, r0
 800f44a:	4650      	mov	r0, sl
 800f44c:	f7f0 fefa 	bl	8000244 <strlen>
 800f450:	4651      	mov	r1, sl
 800f452:	1c42      	adds	r2, r0, #1
 800f454:	4648      	mov	r0, r9
 800f456:	f00b f951 	bl	801a6fc <memcpy>
 800f45a:	462a      	mov	r2, r5
 800f45c:	4648      	mov	r0, r9
 800f45e:	a908      	add	r1, sp, #32
 800f460:	f001 f850 	bl	8010504 <rmw_validate_full_topic_name>
 800f464:	2800      	cmp	r0, #0
 800f466:	d132      	bne.n	800f4ce <rcl_subscription_init+0x1ae>
 800f468:	9b08      	ldr	r3, [sp, #32]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d133      	bne.n	800f4d6 <rcl_subscription_init+0x1b6>
 800f46e:	20c8      	movs	r0, #200	; 0xc8
 800f470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f472:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f474:	4798      	blx	r3
 800f476:	6020      	str	r0, [r4, #0]
 800f478:	b378      	cbz	r0, 800f4da <rcl_subscription_init+0x1ba>
 800f47a:	4640      	mov	r0, r8
 800f47c:	f007 fc3e 	bl	8016cfc <rcl_node_get_rmw_handle>
 800f480:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	4631      	mov	r1, r6
 800f488:	463b      	mov	r3, r7
 800f48a:	464a      	mov	r2, r9
 800f48c:	6825      	ldr	r5, [r4, #0]
 800f48e:	f001 fdf3 	bl	8011078 <rmw_create_subscription>
 800f492:	6821      	ldr	r1, [r4, #0]
 800f494:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800f498:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800f49c:	b368      	cbz	r0, 800f4fa <rcl_subscription_init+0x1da>
 800f49e:	3170      	adds	r1, #112	; 0x70
 800f4a0:	f001 fece 	bl	8011240 <rmw_subscription_get_actual_qos>
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	b9d0      	cbnz	r0, 800f4de <rcl_subscription_init+0x1be>
 800f4a8:	6820      	ldr	r0, [r4, #0]
 800f4aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f4ae:	2270      	movs	r2, #112	; 0x70
 800f4b0:	4639      	mov	r1, r7
 800f4b2:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800f4b6:	f00b f921 	bl	801a6fc <memcpy>
 800f4ba:	9807      	ldr	r0, [sp, #28]
 800f4bc:	b110      	cbz	r0, 800f4c4 <rcl_subscription_init+0x1a4>
 800f4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4c2:	4798      	blx	r3
 800f4c4:	4648      	mov	r0, r9
 800f4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4ca:	4798      	blx	r3
 800f4cc:	e749      	b.n	800f362 <rcl_subscription_init+0x42>
 800f4ce:	2501      	movs	r5, #1
 800f4d0:	e7f3      	b.n	800f4ba <rcl_subscription_init+0x19a>
 800f4d2:	2567      	movs	r5, #103	; 0x67
 800f4d4:	e7a3      	b.n	800f41e <rcl_subscription_init+0xfe>
 800f4d6:	2567      	movs	r5, #103	; 0x67
 800f4d8:	e7ef      	b.n	800f4ba <rcl_subscription_init+0x19a>
 800f4da:	250a      	movs	r5, #10
 800f4dc:	e7ed      	b.n	800f4ba <rcl_subscription_init+0x19a>
 800f4de:	6823      	ldr	r3, [r4, #0]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d0f4      	beq.n	800f4ce <rcl_subscription_init+0x1ae>
 800f4e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f4e8:	b13b      	cbz	r3, 800f4fa <rcl_subscription_init+0x1da>
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	f007 fc06 	bl	8016cfc <rcl_node_get_rmw_handle>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800f4f6:	f001 fea5 	bl	8011244 <rmw_destroy_subscription>
 800f4fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4fe:	6820      	ldr	r0, [r4, #0]
 800f500:	4798      	blx	r3
 800f502:	2300      	movs	r3, #0
 800f504:	2501      	movs	r5, #1
 800f506:	6023      	str	r3, [r4, #0]
 800f508:	e7d7      	b.n	800f4ba <rcl_subscription_init+0x19a>
 800f50a:	bf00      	nop

0800f50c <rcl_subscription_get_default_options>:
 800f50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f50e:	4f12      	ldr	r7, [pc, #72]	; (800f558 <rcl_subscription_get_default_options+0x4c>)
 800f510:	b089      	sub	sp, #36	; 0x24
 800f512:	4606      	mov	r6, r0
 800f514:	2250      	movs	r2, #80	; 0x50
 800f516:	4911      	ldr	r1, [pc, #68]	; (800f55c <rcl_subscription_get_default_options+0x50>)
 800f518:	4638      	mov	r0, r7
 800f51a:	f00b f8ef 	bl	801a6fc <memcpy>
 800f51e:	ac02      	add	r4, sp, #8
 800f520:	a802      	add	r0, sp, #8
 800f522:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800f526:	f000 fd31 	bl	800ff8c <rcutils_get_default_allocator>
 800f52a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f52c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	466c      	mov	r4, sp
 800f532:	4620      	mov	r0, r4
 800f534:	602b      	str	r3, [r5, #0]
 800f536:	f000 ffcf 	bl	80104d8 <rmw_get_default_subscription_options>
 800f53a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f53e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f542:	e883 0003 	stmia.w	r3, {r0, r1}
 800f546:	2270      	movs	r2, #112	; 0x70
 800f548:	4639      	mov	r1, r7
 800f54a:	4630      	mov	r0, r6
 800f54c:	f00b f8d6 	bl	801a6fc <memcpy>
 800f550:	4630      	mov	r0, r6
 800f552:	b009      	add	sp, #36	; 0x24
 800f554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f556:	bf00      	nop
 800f558:	200067c8 	.word	0x200067c8
 800f55c:	0801d030 	.word	0x0801d030

0800f560 <rcl_take>:
 800f560:	2800      	cmp	r0, #0
 800f562:	d040      	beq.n	800f5e6 <rcl_take+0x86>
 800f564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f568:	4606      	mov	r6, r0
 800f56a:	6800      	ldr	r0, [r0, #0]
 800f56c:	b09d      	sub	sp, #116	; 0x74
 800f56e:	b390      	cbz	r0, 800f5d6 <rcl_take+0x76>
 800f570:	4699      	mov	r9, r3
 800f572:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800f576:	b373      	cbz	r3, 800f5d6 <rcl_take+0x76>
 800f578:	4688      	mov	r8, r1
 800f57a:	b391      	cbz	r1, 800f5e2 <rcl_take+0x82>
 800f57c:	4617      	mov	r7, r2
 800f57e:	2a00      	cmp	r2, #0
 800f580:	d035      	beq.n	800f5ee <rcl_take+0x8e>
 800f582:	463d      	mov	r5, r7
 800f584:	a802      	add	r0, sp, #8
 800f586:	f000 ffab 	bl	80104e0 <rmw_get_zero_initialized_message_info>
 800f58a:	f04f 0c00 	mov.w	ip, #0
 800f58e:	ac02      	add	r4, sp, #8
 800f590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f598:	6836      	ldr	r6, [r6, #0]
 800f59a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f59e:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 800f5a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800f5a6:	463b      	mov	r3, r7
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	4641      	mov	r1, r8
 800f5ac:	f8cd 9000 	str.w	r9, [sp]
 800f5b0:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800f5b4:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
 800f5b8:	f001 fea2 	bl	8011300 <rmw_take_with_info>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	b9c0      	cbnz	r0, 800f5f2 <rcl_take+0x92>
 800f5c0:	f240 1291 	movw	r2, #401	; 0x191
 800f5c4:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800f5c8:	2900      	cmp	r1, #0
 800f5ca:	bf08      	it	eq
 800f5cc:	4613      	moveq	r3, r2
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	b01d      	add	sp, #116	; 0x74
 800f5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f5da:	4618      	mov	r0, r3
 800f5dc:	b01d      	add	sp, #116	; 0x74
 800f5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5e2:	230b      	movs	r3, #11
 800f5e4:	e7f3      	b.n	800f5ce <rcl_take+0x6e>
 800f5e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	4770      	bx	lr
 800f5ee:	af10      	add	r7, sp, #64	; 0x40
 800f5f0:	e7c7      	b.n	800f582 <rcl_take+0x22>
 800f5f2:	f006 fead 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	e7e9      	b.n	800f5ce <rcl_take+0x6e>
 800f5fa:	bf00      	nop

0800f5fc <rcl_subscription_get_rmw_handle>:
 800f5fc:	b118      	cbz	r0, 800f606 <rcl_subscription_get_rmw_handle+0xa>
 800f5fe:	6800      	ldr	r0, [r0, #0]
 800f600:	b108      	cbz	r0, 800f606 <rcl_subscription_get_rmw_handle+0xa>
 800f602:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f606:	4770      	bx	lr

0800f608 <_rclc_check_for_new_data>:
 800f608:	4603      	mov	r3, r0
 800f60a:	b1e0      	cbz	r0, 800f646 <_rclc_check_for_new_data+0x3e>
 800f60c:	7802      	ldrb	r2, [r0, #0]
 800f60e:	2a08      	cmp	r2, #8
 800f610:	d81b      	bhi.n	800f64a <_rclc_check_for_new_data+0x42>
 800f612:	e8df f002 	tbb	[pc, r2]
 800f616:	1010      	.short	0x1010
 800f618:	05121216 	.word	0x05121216
 800f61c:	0505      	.short	0x0505
 800f61e:	14          	.byte	0x14
 800f61f:	00          	.byte	0x00
 800f620:	6a0a      	ldr	r2, [r1, #32]
 800f622:	2000      	movs	r0, #0
 800f624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f626:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f62a:	1a12      	subs	r2, r2, r0
 800f62c:	bf18      	it	ne
 800f62e:	2201      	movne	r2, #1
 800f630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800f634:	4770      	bx	lr
 800f636:	680a      	ldr	r2, [r1, #0]
 800f638:	e7f3      	b.n	800f622 <_rclc_check_for_new_data+0x1a>
 800f63a:	698a      	ldr	r2, [r1, #24]
 800f63c:	e7f1      	b.n	800f622 <_rclc_check_for_new_data+0x1a>
 800f63e:	688a      	ldr	r2, [r1, #8]
 800f640:	e7ef      	b.n	800f622 <_rclc_check_for_new_data+0x1a>
 800f642:	690a      	ldr	r2, [r1, #16]
 800f644:	e7ed      	b.n	800f622 <_rclc_check_for_new_data+0x1a>
 800f646:	200b      	movs	r0, #11
 800f648:	4770      	bx	lr
 800f64a:	2200      	movs	r2, #0
 800f64c:	2001      	movs	r0, #1
 800f64e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800f652:	4770      	bx	lr

0800f654 <_rclc_take_new_data>:
 800f654:	2800      	cmp	r0, #0
 800f656:	d049      	beq.n	800f6ec <_rclc_take_new_data+0x98>
 800f658:	b510      	push	{r4, lr}
 800f65a:	7803      	ldrb	r3, [r0, #0]
 800f65c:	4604      	mov	r4, r0
 800f65e:	b08e      	sub	sp, #56	; 0x38
 800f660:	2b08      	cmp	r3, #8
 800f662:	d84a      	bhi.n	800f6fa <_rclc_take_new_data+0xa6>
 800f664:	e8df f003 	tbb	[pc, r3]
 800f668:	2b121515 	.word	0x2b121515
 800f66c:	0505052b 	.word	0x0505052b
 800f670:	12          	.byte	0x12
 800f671:	00          	.byte	0x00
 800f672:	6a0b      	ldr	r3, [r1, #32]
 800f674:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67a:	b13b      	cbz	r3, 800f68c <_rclc_take_new_data+0x38>
 800f67c:	6882      	ldr	r2, [r0, #8]
 800f67e:	f100 0110 	add.w	r1, r0, #16
 800f682:	6840      	ldr	r0, [r0, #4]
 800f684:	f007 fc7e 	bl	8016f84 <rcl_take_request>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d131      	bne.n	800f6f0 <_rclc_take_new_data+0x9c>
 800f68c:	2000      	movs	r0, #0
 800f68e:	b00e      	add	sp, #56	; 0x38
 800f690:	bd10      	pop	{r4, pc}
 800f692:	680b      	ldr	r3, [r1, #0]
 800f694:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d0f6      	beq.n	800f68c <_rclc_take_new_data+0x38>
 800f69e:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	aa02      	add	r2, sp, #8
 800f6a6:	f7ff ff5b 	bl	800f560 <rcl_take>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d0ef      	beq.n	800f68e <_rclc_take_new_data+0x3a>
 800f6ae:	f240 1391 	movw	r3, #401	; 0x191
 800f6b2:	4298      	cmp	r0, r3
 800f6b4:	d115      	bne.n	800f6e2 <_rclc_take_new_data+0x8e>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800f6bc:	e7e7      	b.n	800f68e <_rclc_take_new_data+0x3a>
 800f6be:	698b      	ldr	r3, [r1, #24]
 800f6c0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f6c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d0e0      	beq.n	800f68c <_rclc_take_new_data+0x38>
 800f6ca:	6882      	ldr	r2, [r0, #8]
 800f6cc:	f100 0110 	add.w	r1, r0, #16
 800f6d0:	6840      	ldr	r0, [r0, #4]
 800f6d2:	f006 fe01 	bl	80162d8 <rcl_take_response>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d0d8      	beq.n	800f68c <_rclc_take_new_data+0x38>
 800f6da:	f240 13f5 	movw	r3, #501	; 0x1f5
 800f6de:	4298      	cmp	r0, r3
 800f6e0:	d0d5      	beq.n	800f68e <_rclc_take_new_data+0x3a>
 800f6e2:	9001      	str	r0, [sp, #4]
 800f6e4:	f000 fd50 	bl	8010188 <rcutils_reset_error>
 800f6e8:	9801      	ldr	r0, [sp, #4]
 800f6ea:	e7d0      	b.n	800f68e <_rclc_take_new_data+0x3a>
 800f6ec:	200b      	movs	r0, #11
 800f6ee:	4770      	bx	lr
 800f6f0:	f240 2359 	movw	r3, #601	; 0x259
 800f6f4:	4298      	cmp	r0, r3
 800f6f6:	d0de      	beq.n	800f6b6 <_rclc_take_new_data+0x62>
 800f6f8:	e7f3      	b.n	800f6e2 <_rclc_take_new_data+0x8e>
 800f6fa:	2001      	movs	r0, #1
 800f6fc:	e7c7      	b.n	800f68e <_rclc_take_new_data+0x3a>
 800f6fe:	bf00      	nop

0800f700 <rclc_executor_trigger_any>:
 800f700:	4603      	mov	r3, r0
 800f702:	b178      	cbz	r0, 800f724 <rclc_executor_trigger_any+0x24>
 800f704:	b179      	cbz	r1, 800f726 <rclc_executor_trigger_any+0x26>
 800f706:	2200      	movs	r2, #0
 800f708:	e005      	b.n	800f716 <rclc_executor_trigger_any+0x16>
 800f70a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800f70e:	3340      	adds	r3, #64	; 0x40
 800f710:	b930      	cbnz	r0, 800f720 <rclc_executor_trigger_any+0x20>
 800f712:	4291      	cmp	r1, r2
 800f714:	d005      	beq.n	800f722 <rclc_executor_trigger_any+0x22>
 800f716:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800f71a:	3201      	adds	r2, #1
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d1f4      	bne.n	800f70a <rclc_executor_trigger_any+0xa>
 800f720:	4770      	bx	lr
 800f722:	4770      	bx	lr
 800f724:	4770      	bx	lr
 800f726:	4608      	mov	r0, r1
 800f728:	e7fa      	b.n	800f720 <rclc_executor_trigger_any+0x20>
 800f72a:	bf00      	nop

0800f72c <_rclc_execute.part.0>:
 800f72c:	b530      	push	{r4, r5, lr}
 800f72e:	7803      	ldrb	r3, [r0, #0]
 800f730:	4604      	mov	r4, r0
 800f732:	b083      	sub	sp, #12
 800f734:	2b08      	cmp	r3, #8
 800f736:	d857      	bhi.n	800f7e8 <_rclc_execute.part.0+0xbc>
 800f738:	e8df f003 	tbb	[pc, r3]
 800f73c:	31372820 	.word	0x31372820
 800f740:	05050540 	.word	0x05050540
 800f744:	1b          	.byte	0x1b
 800f745:	00          	.byte	0x00
 800f746:	2b06      	cmp	r3, #6
 800f748:	d046      	beq.n	800f7d8 <_rclc_execute.part.0+0xac>
 800f74a:	2b07      	cmp	r3, #7
 800f74c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f74e:	d13d      	bne.n	800f7cc <_rclc_execute.part.0+0xa0>
 800f750:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800f754:	6880      	ldr	r0, [r0, #8]
 800f756:	4798      	blx	r3
 800f758:	f104 0510 	add.w	r5, r4, #16
 800f75c:	4629      	mov	r1, r5
 800f75e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f760:	6860      	ldr	r0, [r4, #4]
 800f762:	f007 fc47 	bl	8016ff4 <rcl_send_response>
 800f766:	b138      	cbz	r0, 800f778 <_rclc_execute.part.0+0x4c>
 800f768:	9001      	str	r0, [sp, #4]
 800f76a:	f000 fd0d 	bl	8010188 <rcutils_reset_error>
 800f76e:	9801      	ldr	r0, [sp, #4]
 800f770:	e002      	b.n	800f778 <_rclc_execute.part.0+0x4c>
 800f772:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f774:	4798      	blx	r3
 800f776:	2000      	movs	r0, #0
 800f778:	b003      	add	sp, #12
 800f77a:	bd30      	pop	{r4, r5, pc}
 800f77c:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800f780:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f782:	b96d      	cbnz	r5, 800f7a0 <_rclc_execute.part.0+0x74>
 800f784:	4628      	mov	r0, r5
 800f786:	4798      	blx	r3
 800f788:	4628      	mov	r0, r5
 800f78a:	e7f5      	b.n	800f778 <_rclc_execute.part.0+0x4c>
 800f78c:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800f790:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800f794:	b9ad      	cbnz	r5, 800f7c2 <_rclc_execute.part.0+0x96>
 800f796:	4628      	mov	r0, r5
 800f798:	4798      	blx	r3
 800f79a:	4628      	mov	r0, r5
 800f79c:	e7ec      	b.n	800f778 <_rclc_execute.part.0+0x4c>
 800f79e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7a0:	68a0      	ldr	r0, [r4, #8]
 800f7a2:	4798      	blx	r3
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	b003      	add	sp, #12
 800f7a8:	bd30      	pop	{r4, r5, pc}
 800f7aa:	6840      	ldr	r0, [r0, #4]
 800f7ac:	f007 fee6 	bl	801757c <rcl_timer_call>
 800f7b0:	f240 3321 	movw	r3, #801	; 0x321
 800f7b4:	4298      	cmp	r0, r3
 800f7b6:	d1d6      	bne.n	800f766 <_rclc_execute.part.0+0x3a>
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	e7dd      	b.n	800f778 <_rclc_execute.part.0+0x4c>
 800f7bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7be:	f100 0110 	add.w	r1, r0, #16
 800f7c2:	68a0      	ldr	r0, [r4, #8]
 800f7c4:	4798      	blx	r3
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	b003      	add	sp, #12
 800f7ca:	bd30      	pop	{r4, r5, pc}
 800f7cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f7ce:	6880      	ldr	r0, [r0, #8]
 800f7d0:	4798      	blx	r3
 800f7d2:	f104 0510 	add.w	r5, r4, #16
 800f7d6:	e7c1      	b.n	800f75c <_rclc_execute.part.0+0x30>
 800f7d8:	f100 0510 	add.w	r5, r0, #16
 800f7dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f7de:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	6880      	ldr	r0, [r0, #8]
 800f7e4:	4798      	blx	r3
 800f7e6:	e7b9      	b.n	800f75c <_rclc_execute.part.0+0x30>
 800f7e8:	2001      	movs	r0, #1
 800f7ea:	e7c5      	b.n	800f778 <_rclc_execute.part.0+0x4c>
 800f7ec:	0000      	movs	r0, r0
	...

0800f7f0 <rclc_executor_init>:
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d064      	beq.n	800f8be <rclc_executor_init+0xce>
 800f7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	b0ae      	sub	sp, #184	; 0xb8
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	d056      	beq.n	800f8ae <rclc_executor_init+0xbe>
 800f800:	4605      	mov	r5, r0
 800f802:	4618      	mov	r0, r3
 800f804:	4616      	mov	r6, r2
 800f806:	469a      	mov	sl, r3
 800f808:	f000 fbce 	bl	800ffa8 <rcutils_allocator_is_valid>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d04e      	beq.n	800f8ae <rclc_executor_init+0xbe>
 800f810:	2e00      	cmp	r6, #0
 800f812:	d04c      	beq.n	800f8ae <rclc_executor_init+0xbe>
 800f814:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 800f818:	e9d9 8900 	ldrd	r8, r9, [r9]
 800f81c:	2280      	movs	r2, #128	; 0x80
 800f81e:	492a      	ldr	r1, [pc, #168]	; (800f8c8 <rclc_executor_init+0xd8>)
 800f820:	2400      	movs	r4, #0
 800f822:	a80e      	add	r0, sp, #56	; 0x38
 800f824:	f00a ff6a 	bl	801a6fc <memcpy>
 800f828:	2280      	movs	r2, #128	; 0x80
 800f82a:	a90e      	add	r1, sp, #56	; 0x38
 800f82c:	4628      	mov	r0, r5
 800f82e:	f00a ff65 	bl	801a6fc <memcpy>
 800f832:	602f      	str	r7, [r5, #0]
 800f834:	466f      	mov	r7, sp
 800f836:	4668      	mov	r0, sp
 800f838:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800f83c:	f008 f8f6 	bl	8017a2c <rcl_get_zero_initialized_wait_set>
 800f840:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f842:	f105 0c14 	add.w	ip, r5, #20
 800f846:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f84a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f84c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f850:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f852:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f856:	683a      	ldr	r2, [r7, #0]
 800f858:	f8da 3000 	ldr.w	r3, [sl]
 800f85c:	f8da 1010 	ldr.w	r1, [sl, #16]
 800f860:	f8cc 2000 	str.w	r2, [ip]
 800f864:	01b0      	lsls	r0, r6, #6
 800f866:	e9c5 8918 	strd	r8, r9, [r5, #96]	; 0x60
 800f86a:	f8c5 a010 	str.w	sl, [r5, #16]
 800f86e:	4798      	blx	r3
 800f870:	6068      	str	r0, [r5, #4]
 800f872:	b908      	cbnz	r0, 800f878 <rclc_executor_init+0x88>
 800f874:	e025      	b.n	800f8c2 <rclc_executor_init+0xd2>
 800f876:	6868      	ldr	r0, [r5, #4]
 800f878:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f87c:	4631      	mov	r1, r6
 800f87e:	3401      	adds	r4, #1
 800f880:	f000 fa28 	bl	800fcd4 <rclc_executor_handle_init>
 800f884:	42a6      	cmp	r6, r4
 800f886:	d1f6      	bne.n	800f876 <rclc_executor_init+0x86>
 800f888:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f88c:	f000 fa16 	bl	800fcbc <rclc_executor_handle_counters_zero_init>
 800f890:	2000      	movs	r0, #0
 800f892:	4a0e      	ldr	r2, [pc, #56]	; (800f8cc <rclc_executor_init+0xdc>)
 800f894:	686b      	ldr	r3, [r5, #4]
 800f896:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 800f89a:	b163      	cbz	r3, 800f8b6 <rclc_executor_init+0xc6>
 800f89c:	692b      	ldr	r3, [r5, #16]
 800f89e:	b153      	cbz	r3, 800f8b6 <rclc_executor_init+0xc6>
 800f8a0:	68ab      	ldr	r3, [r5, #8]
 800f8a2:	b143      	cbz	r3, 800f8b6 <rclc_executor_init+0xc6>
 800f8a4:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800f8a8:	b02e      	add	sp, #184	; 0xb8
 800f8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ae:	200b      	movs	r0, #11
 800f8b0:	b02e      	add	sp, #184	; 0xb8
 800f8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	b02e      	add	sp, #184	; 0xb8
 800f8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8be:	200b      	movs	r0, #11
 800f8c0:	4770      	bx	lr
 800f8c2:	200a      	movs	r0, #10
 800f8c4:	e7f4      	b.n	800f8b0 <rclc_executor_init+0xc0>
 800f8c6:	bf00      	nop
 800f8c8:	0801d080 	.word	0x0801d080
 800f8cc:	0800f701 	.word	0x0800f701
 800f8d0:	3b9aca00 	.word	0x3b9aca00
 800f8d4:	00000000 	.word	0x00000000

0800f8d8 <rclc_executor_add_subscription>:
 800f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8dc:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800f8e0:	b348      	cbz	r0, 800f936 <rclc_executor_add_subscription+0x5e>
 800f8e2:	b341      	cbz	r1, 800f936 <rclc_executor_add_subscription+0x5e>
 800f8e4:	b33a      	cbz	r2, 800f936 <rclc_executor_add_subscription+0x5e>
 800f8e6:	b333      	cbz	r3, 800f936 <rclc_executor_add_subscription+0x5e>
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
 800f8ee:	4285      	cmp	r5, r0
 800f8f0:	d302      	bcc.n	800f8f8 <rclc_executor_add_subscription+0x20>
 800f8f2:	2001      	movs	r0, #1
 800f8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f8:	2700      	movs	r7, #0
 800f8fa:	f04f 0c01 	mov.w	ip, #1
 800f8fe:	6860      	ldr	r0, [r4, #4]
 800f900:	ea4f 1e85 	mov.w	lr, r5, lsl #6
 800f904:	f800 700e 	strb.w	r7, [r0, lr]
 800f908:	f104 0814 	add.w	r8, r4, #20
 800f90c:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800f910:	4465      	add	r5, ip
 800f912:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800f916:	6303      	str	r3, [r0, #48]	; 0x30
 800f918:	7046      	strb	r6, [r0, #1]
 800f91a:	62c7      	str	r7, [r0, #44]	; 0x2c
 800f91c:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800f920:	4640      	mov	r0, r8
 800f922:	60e5      	str	r5, [r4, #12]
 800f924:	f008 f894 	bl	8017a50 <rcl_wait_set_is_valid>
 800f928:	b940      	cbnz	r0, 800f93c <rclc_executor_add_subscription+0x64>
 800f92a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f92c:	2000      	movs	r0, #0
 800f92e:	3301      	adds	r3, #1
 800f930:	64a3      	str	r3, [r4, #72]	; 0x48
 800f932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f936:	200b      	movs	r0, #11
 800f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93c:	4640      	mov	r0, r8
 800f93e:	f008 f88d 	bl	8017a5c <rcl_wait_set_fini>
 800f942:	2800      	cmp	r0, #0
 800f944:	d0f1      	beq.n	800f92a <rclc_executor_add_subscription+0x52>
 800f946:	e7d5      	b.n	800f8f4 <rclc_executor_add_subscription+0x1c>

0800f948 <rclc_executor_add_timer>:
 800f948:	b308      	cbz	r0, 800f98e <rclc_executor_add_timer+0x46>
 800f94a:	b301      	cbz	r1, 800f98e <rclc_executor_add_timer+0x46>
 800f94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f94e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f952:	4293      	cmp	r3, r2
 800f954:	4604      	mov	r4, r0
 800f956:	d301      	bcc.n	800f95c <rclc_executor_add_timer+0x14>
 800f958:	2001      	movs	r0, #1
 800f95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f95c:	2502      	movs	r5, #2
 800f95e:	2701      	movs	r7, #1
 800f960:	2600      	movs	r6, #0
 800f962:	6840      	ldr	r0, [r0, #4]
 800f964:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800f968:	6051      	str	r1, [r2, #4]
 800f96a:	0199      	lsls	r1, r3, #6
 800f96c:	5245      	strh	r5, [r0, r1]
 800f96e:	443b      	add	r3, r7
 800f970:	f104 0514 	add.w	r5, r4, #20
 800f974:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 800f978:	62d6      	str	r6, [r2, #44]	; 0x2c
 800f97a:	4628      	mov	r0, r5
 800f97c:	60e3      	str	r3, [r4, #12]
 800f97e:	f008 f867 	bl	8017a50 <rcl_wait_set_is_valid>
 800f982:	b930      	cbnz	r0, 800f992 <rclc_executor_add_timer+0x4a>
 800f984:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f986:	2000      	movs	r0, #0
 800f988:	3301      	adds	r3, #1
 800f98a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800f98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f98e:	200b      	movs	r0, #11
 800f990:	4770      	bx	lr
 800f992:	4628      	mov	r0, r5
 800f994:	f008 f862 	bl	8017a5c <rcl_wait_set_fini>
 800f998:	2800      	cmp	r0, #0
 800f99a:	d0f3      	beq.n	800f984 <rclc_executor_add_timer+0x3c>
 800f99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f99e:	bf00      	nop

0800f9a0 <rclc_executor_prepare>:
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d03d      	beq.n	800fa20 <rclc_executor_prepare+0x80>
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	f100 0814 	add.w	r8, r0, #20
 800f9ac:	4604      	mov	r4, r0
 800f9ae:	b09a      	sub	sp, #104	; 0x68
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	f008 f84d 	bl	8017a50 <rcl_wait_set_is_valid>
 800f9b6:	b118      	cbz	r0, 800f9c0 <rclc_executor_prepare+0x20>
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	b01a      	add	sp, #104	; 0x68
 800f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c0:	4640      	mov	r0, r8
 800f9c2:	f008 f84b 	bl	8017a5c <rcl_wait_set_fini>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d127      	bne.n	800fa1a <rclc_executor_prepare+0x7a>
 800f9ca:	4646      	mov	r6, r8
 800f9cc:	a80c      	add	r0, sp, #48	; 0x30
 800f9ce:	ad0c      	add	r5, sp, #48	; 0x30
 800f9d0:	f008 f82c 	bl	8017a2c <rcl_get_zero_initialized_wait_set>
 800f9d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f9dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f9e0:	6927      	ldr	r7, [r4, #16]
 800f9e2:	682b      	ldr	r3, [r5, #0]
 800f9e4:	ad04      	add	r5, sp, #16
 800f9e6:	6033      	str	r3, [r6, #0]
 800f9e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f9ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f9ec:	6838      	ldr	r0, [r7, #0]
 800f9ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f9f0:	6826      	ldr	r6, [r4, #0]
 800f9f2:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f9f6:	6028      	str	r0, [r5, #0]
 800f9f8:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f9fc:	e9cd 3200 	strd	r3, r2, [sp]
 800fa00:	4640      	mov	r0, r8
 800fa02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fa04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fa06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fa08:	f008 fb4a 	bl	80180a0 <rcl_wait_set_init>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d0d4      	beq.n	800f9ba <rclc_executor_prepare+0x1a>
 800fa10:	900b      	str	r0, [sp, #44]	; 0x2c
 800fa12:	f000 fbb9 	bl	8010188 <rcutils_reset_error>
 800fa16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fa18:	e7cf      	b.n	800f9ba <rclc_executor_prepare+0x1a>
 800fa1a:	f000 fbb5 	bl	8010188 <rcutils_reset_error>
 800fa1e:	e7d4      	b.n	800f9ca <rclc_executor_prepare+0x2a>
 800fa20:	200b      	movs	r0, #11
 800fa22:	4770      	bx	lr

0800fa24 <rclc_executor_spin_some.part.0>:
 800fa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa28:	f100 0814 	add.w	r8, r0, #20
 800fa2c:	b083      	sub	sp, #12
 800fa2e:	4692      	mov	sl, r2
 800fa30:	4699      	mov	r9, r3
 800fa32:	4605      	mov	r5, r0
 800fa34:	f7ff ffb4 	bl	800f9a0 <rclc_executor_prepare>
 800fa38:	4640      	mov	r0, r8
 800fa3a:	f008 f8df 	bl	8017bfc <rcl_wait_set_clear>
 800fa3e:	4607      	mov	r7, r0
 800fa40:	2800      	cmp	r0, #0
 800fa42:	f040 80bb 	bne.w	800fbbc <rclc_executor_spin_some.part.0+0x198>
 800fa46:	68ab      	ldr	r3, [r5, #8]
 800fa48:	4604      	mov	r4, r0
 800fa4a:	b1eb      	cbz	r3, 800fa88 <rclc_executor_spin_some.part.0+0x64>
 800fa4c:	686e      	ldr	r6, [r5, #4]
 800fa4e:	01a2      	lsls	r2, r4, #6
 800fa50:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800fa54:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800fa58:	b1b3      	cbz	r3, 800fa88 <rclc_executor_spin_some.part.0+0x64>
 800fa5a:	5cb3      	ldrb	r3, [r6, r2]
 800fa5c:	2b08      	cmp	r3, #8
 800fa5e:	f200 80a6 	bhi.w	800fbae <rclc_executor_spin_some.part.0+0x18a>
 800fa62:	e8df f003 	tbb	[pc, r3]
 800fa66:	8686      	.short	0x8686
 800fa68:	05787890 	.word	0x05787890
 800fa6c:	0505      	.short	0x0505
 800fa6e:	9a          	.byte	0x9a
 800fa6f:	00          	.byte	0x00
 800fa70:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800fa74:	4640      	mov	r0, r8
 800fa76:	6849      	ldr	r1, [r1, #4]
 800fa78:	f008 fc28 	bl	80182cc <rcl_wait_set_add_service>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d172      	bne.n	800fb66 <rclc_executor_spin_some.part.0+0x142>
 800fa80:	68ab      	ldr	r3, [r5, #8]
 800fa82:	3401      	adds	r4, #1
 800fa84:	429c      	cmp	r4, r3
 800fa86:	d3e1      	bcc.n	800fa4c <rclc_executor_spin_some.part.0+0x28>
 800fa88:	464b      	mov	r3, r9
 800fa8a:	4652      	mov	r2, sl
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	f008 fc4b 	bl	8018328 <rcl_wait>
 800fa92:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 8098 	beq.w	800fbcc <rclc_executor_spin_some.part.0+0x1a8>
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	f040 8086 	bne.w	800fbae <rclc_executor_spin_some.part.0+0x18a>
 800faa2:	68a9      	ldr	r1, [r5, #8]
 800faa4:	2900      	cmp	r1, #0
 800faa6:	f000 80ea 	beq.w	800fc7e <rclc_executor_spin_some.part.0+0x25a>
 800faaa:	2400      	movs	r4, #0
 800faac:	f240 1991 	movw	r9, #401	; 0x191
 800fab0:	4626      	mov	r6, r4
 800fab2:	e00b      	b.n	800facc <rclc_executor_spin_some.part.0+0xa8>
 800fab4:	4641      	mov	r1, r8
 800fab6:	f7ff fda7 	bl	800f608 <_rclc_check_for_new_data>
 800faba:	4604      	mov	r4, r0
 800fabc:	b110      	cbz	r0, 800fac4 <rclc_executor_spin_some.part.0+0xa0>
 800fabe:	4548      	cmp	r0, r9
 800fac0:	f040 8082 	bne.w	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fac4:	68a9      	ldr	r1, [r5, #8]
 800fac6:	428e      	cmp	r6, r1
 800fac8:	f080 80d5 	bcs.w	800fc76 <rclc_executor_spin_some.part.0+0x252>
 800facc:	686b      	ldr	r3, [r5, #4]
 800face:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800fad2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800fad6:	3601      	adds	r6, #1
 800fad8:	2a00      	cmp	r2, #0
 800fada:	d1eb      	bne.n	800fab4 <rclc_executor_spin_some.part.0+0x90>
 800fadc:	4618      	mov	r0, r3
 800fade:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800fae2:	4798      	blx	r3
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d06f      	beq.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fae8:	68ab      	ldr	r3, [r5, #8]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d06c      	beq.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800faee:	2600      	movs	r6, #0
 800faf0:	f240 1991 	movw	r9, #401	; 0x191
 800faf4:	e009      	b.n	800fb0a <rclc_executor_spin_some.part.0+0xe6>
 800faf6:	4641      	mov	r1, r8
 800faf8:	f7ff fdac 	bl	800f654 <_rclc_take_new_data>
 800fafc:	4604      	mov	r4, r0
 800fafe:	b108      	cbz	r0, 800fb04 <rclc_executor_spin_some.part.0+0xe0>
 800fb00:	4548      	cmp	r0, r9
 800fb02:	d161      	bne.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fb04:	68ab      	ldr	r3, [r5, #8]
 800fb06:	429e      	cmp	r6, r3
 800fb08:	d207      	bcs.n	800fb1a <rclc_executor_spin_some.part.0+0xf6>
 800fb0a:	6868      	ldr	r0, [r5, #4]
 800fb0c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800fb10:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800fb14:	3601      	adds	r6, #1
 800fb16:	2a00      	cmp	r2, #0
 800fb18:	d1ed      	bne.n	800faf6 <rclc_executor_spin_some.part.0+0xd2>
 800fb1a:	2600      	movs	r6, #0
 800fb1c:	b933      	cbnz	r3, 800fb2c <rclc_executor_spin_some.part.0+0x108>
 800fb1e:	e053      	b.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fb20:	2a01      	cmp	r2, #1
 800fb22:	d011      	beq.n	800fb48 <rclc_executor_spin_some.part.0+0x124>
 800fb24:	3601      	adds	r6, #1
 800fb26:	429e      	cmp	r6, r3
 800fb28:	d244      	bcs.n	800fbb4 <rclc_executor_spin_some.part.0+0x190>
 800fb2a:	2400      	movs	r4, #0
 800fb2c:	6868      	ldr	r0, [r5, #4]
 800fb2e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800fb32:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800fb36:	2a00      	cmp	r2, #0
 800fb38:	d046      	beq.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fb3a:	7842      	ldrb	r2, [r0, #1]
 800fb3c:	2a00      	cmp	r2, #0
 800fb3e:	d1ef      	bne.n	800fb20 <rclc_executor_spin_some.part.0+0xfc>
 800fb40:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800fb44:	2a00      	cmp	r2, #0
 800fb46:	d0ed      	beq.n	800fb24 <rclc_executor_spin_some.part.0+0x100>
 800fb48:	f7ff fdf0 	bl	800f72c <_rclc_execute.part.0>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	f040 8094 	bne.w	800fc7a <rclc_executor_spin_some.part.0+0x256>
 800fb52:	68ab      	ldr	r3, [r5, #8]
 800fb54:	e7e6      	b.n	800fb24 <rclc_executor_spin_some.part.0+0x100>
 800fb56:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800fb5a:	4640      	mov	r0, r8
 800fb5c:	6849      	ldr	r1, [r1, #4]
 800fb5e:	f008 fb89 	bl	8018274 <rcl_wait_set_add_client>
 800fb62:	2800      	cmp	r0, #0
 800fb64:	d08c      	beq.n	800fa80 <rclc_executor_spin_some.part.0+0x5c>
 800fb66:	9001      	str	r0, [sp, #4]
 800fb68:	f000 fb0e 	bl	8010188 <rcutils_reset_error>
 800fb6c:	9801      	ldr	r0, [sp, #4]
 800fb6e:	4607      	mov	r7, r0
 800fb70:	e020      	b.n	800fbb4 <rclc_executor_spin_some.part.0+0x190>
 800fb72:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800fb76:	4640      	mov	r0, r8
 800fb78:	6849      	ldr	r1, [r1, #4]
 800fb7a:	f008 f813 	bl	8017ba4 <rcl_wait_set_add_subscription>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	f43f af7e 	beq.w	800fa80 <rclc_executor_spin_some.part.0+0x5c>
 800fb84:	e7ef      	b.n	800fb66 <rclc_executor_spin_some.part.0+0x142>
 800fb86:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800fb8a:	4640      	mov	r0, r8
 800fb8c:	6849      	ldr	r1, [r1, #4]
 800fb8e:	f008 fb41 	bl	8018214 <rcl_wait_set_add_timer>
 800fb92:	2800      	cmp	r0, #0
 800fb94:	f43f af74 	beq.w	800fa80 <rclc_executor_spin_some.part.0+0x5c>
 800fb98:	e7e5      	b.n	800fb66 <rclc_executor_spin_some.part.0+0x142>
 800fb9a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800fb9e:	4640      	mov	r0, r8
 800fba0:	6849      	ldr	r1, [r1, #4]
 800fba2:	f008 fb0b 	bl	80181bc <rcl_wait_set_add_guard_condition>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	f43f af6a 	beq.w	800fa80 <rclc_executor_spin_some.part.0+0x5c>
 800fbac:	e7db      	b.n	800fb66 <rclc_executor_spin_some.part.0+0x142>
 800fbae:	f000 faeb 	bl	8010188 <rcutils_reset_error>
 800fbb2:	2701      	movs	r7, #1
 800fbb4:	4638      	mov	r0, r7
 800fbb6:	b003      	add	sp, #12
 800fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbc:	f000 fae4 	bl	8010188 <rcutils_reset_error>
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	b003      	add	sp, #12
 800fbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc8:	4627      	mov	r7, r4
 800fbca:	e7f3      	b.n	800fbb4 <rclc_executor_spin_some.part.0+0x190>
 800fbcc:	68a9      	ldr	r1, [r5, #8]
 800fbce:	2900      	cmp	r1, #0
 800fbd0:	d058      	beq.n	800fc84 <rclc_executor_spin_some.part.0+0x260>
 800fbd2:	2400      	movs	r4, #0
 800fbd4:	f240 1991 	movw	r9, #401	; 0x191
 800fbd8:	4626      	mov	r6, r4
 800fbda:	e009      	b.n	800fbf0 <rclc_executor_spin_some.part.0+0x1cc>
 800fbdc:	4641      	mov	r1, r8
 800fbde:	f7ff fd13 	bl	800f608 <_rclc_check_for_new_data>
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	b108      	cbz	r0, 800fbea <rclc_executor_spin_some.part.0+0x1c6>
 800fbe6:	4548      	cmp	r0, r9
 800fbe8:	d1ee      	bne.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fbea:	68a9      	ldr	r1, [r5, #8]
 800fbec:	428e      	cmp	r6, r1
 800fbee:	d240      	bcs.n	800fc72 <rclc_executor_spin_some.part.0+0x24e>
 800fbf0:	686b      	ldr	r3, [r5, #4]
 800fbf2:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800fbf6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800fbfa:	3601      	adds	r6, #1
 800fbfc:	2a00      	cmp	r2, #0
 800fbfe:	d1ed      	bne.n	800fbdc <rclc_executor_spin_some.part.0+0x1b8>
 800fc00:	4618      	mov	r0, r3
 800fc02:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800fc06:	4798      	blx	r3
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d0dd      	beq.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fc0c:	68ab      	ldr	r3, [r5, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d0da      	beq.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fc12:	f04f 0a00 	mov.w	sl, #0
 800fc16:	f240 1691 	movw	r6, #401	; 0x191
 800fc1a:	f240 2959 	movw	r9, #601	; 0x259
 800fc1e:	e00b      	b.n	800fc38 <rclc_executor_spin_some.part.0+0x214>
 800fc20:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800fc24:	b113      	cbz	r3, 800fc2c <rclc_executor_spin_some.part.0+0x208>
 800fc26:	f7ff fd81 	bl	800f72c <_rclc_execute.part.0>
 800fc2a:	bb30      	cbnz	r0, 800fc7a <rclc_executor_spin_some.part.0+0x256>
 800fc2c:	68ab      	ldr	r3, [r5, #8]
 800fc2e:	f10a 0a01 	add.w	sl, sl, #1
 800fc32:	459a      	cmp	sl, r3
 800fc34:	d2be      	bcs.n	800fbb4 <rclc_executor_spin_some.part.0+0x190>
 800fc36:	2400      	movs	r4, #0
 800fc38:	6868      	ldr	r0, [r5, #4]
 800fc3a:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800fc3e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800fc42:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d0be      	beq.n	800fbc8 <rclc_executor_spin_some.part.0+0x1a4>
 800fc4a:	4641      	mov	r1, r8
 800fc4c:	f7ff fd02 	bl	800f654 <_rclc_take_new_data>
 800fc50:	b118      	cbz	r0, 800fc5a <rclc_executor_spin_some.part.0+0x236>
 800fc52:	42b0      	cmp	r0, r6
 800fc54:	d001      	beq.n	800fc5a <rclc_executor_spin_some.part.0+0x236>
 800fc56:	4548      	cmp	r0, r9
 800fc58:	d10f      	bne.n	800fc7a <rclc_executor_spin_some.part.0+0x256>
 800fc5a:	6868      	ldr	r0, [r5, #4]
 800fc5c:	eb10 000b 	adds.w	r0, r0, fp
 800fc60:	d005      	beq.n	800fc6e <rclc_executor_spin_some.part.0+0x24a>
 800fc62:	7843      	ldrb	r3, [r0, #1]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d0db      	beq.n	800fc20 <rclc_executor_spin_some.part.0+0x1fc>
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d1df      	bne.n	800fc2c <rclc_executor_spin_some.part.0+0x208>
 800fc6c:	e7db      	b.n	800fc26 <rclc_executor_spin_some.part.0+0x202>
 800fc6e:	270b      	movs	r7, #11
 800fc70:	e7a0      	b.n	800fbb4 <rclc_executor_spin_some.part.0+0x190>
 800fc72:	686b      	ldr	r3, [r5, #4]
 800fc74:	e7c4      	b.n	800fc00 <rclc_executor_spin_some.part.0+0x1dc>
 800fc76:	686b      	ldr	r3, [r5, #4]
 800fc78:	e730      	b.n	800fadc <rclc_executor_spin_some.part.0+0xb8>
 800fc7a:	4607      	mov	r7, r0
 800fc7c:	e79a      	b.n	800fbb4 <rclc_executor_spin_some.part.0+0x190>
 800fc7e:	460c      	mov	r4, r1
 800fc80:	686b      	ldr	r3, [r5, #4]
 800fc82:	e72b      	b.n	800fadc <rclc_executor_spin_some.part.0+0xb8>
 800fc84:	460c      	mov	r4, r1
 800fc86:	686b      	ldr	r3, [r5, #4]
 800fc88:	e7ba      	b.n	800fc00 <rclc_executor_spin_some.part.0+0x1dc>
 800fc8a:	bf00      	nop

0800fc8c <rclc_executor_spin>:
 800fc8c:	b1a0      	cbz	r0, 800fcb8 <rclc_executor_spin+0x2c>
 800fc8e:	b5d0      	push	{r4, r6, r7, lr}
 800fc90:	4604      	mov	r4, r0
 800fc92:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800fc96:	6820      	ldr	r0, [r4, #0]
 800fc98:	f006 fb7e 	bl	8016398 <rcl_context_is_valid>
 800fc9c:	b140      	cbz	r0, 800fcb0 <rclc_executor_spin+0x24>
 800fc9e:	463b      	mov	r3, r7
 800fca0:	4632      	mov	r2, r6
 800fca2:	4620      	mov	r0, r4
 800fca4:	f7ff febe 	bl	800fa24 <rclc_executor_spin_some.part.0>
 800fca8:	f030 0302 	bics.w	r3, r0, #2
 800fcac:	d0f1      	beq.n	800fc92 <rclc_executor_spin+0x6>
 800fcae:	bdd0      	pop	{r4, r6, r7, pc}
 800fcb0:	f000 fa6a 	bl	8010188 <rcutils_reset_error>
 800fcb4:	2001      	movs	r0, #1
 800fcb6:	bdd0      	pop	{r4, r6, r7, pc}
 800fcb8:	200b      	movs	r0, #11
 800fcba:	4770      	bx	lr

0800fcbc <rclc_executor_handle_counters_zero_init>:
 800fcbc:	b140      	cbz	r0, 800fcd0 <rclc_executor_handle_counters_zero_init+0x14>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	6003      	str	r3, [r0, #0]
 800fcc2:	6043      	str	r3, [r0, #4]
 800fcc4:	6083      	str	r3, [r0, #8]
 800fcc6:	60c3      	str	r3, [r0, #12]
 800fcc8:	6103      	str	r3, [r0, #16]
 800fcca:	6143      	str	r3, [r0, #20]
 800fccc:	4618      	mov	r0, r3
 800fcce:	4770      	bx	lr
 800fcd0:	200b      	movs	r0, #11
 800fcd2:	4770      	bx	lr

0800fcd4 <rclc_executor_handle_init>:
 800fcd4:	b178      	cbz	r0, 800fcf6 <rclc_executor_handle_init+0x22>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2209      	movs	r2, #9
 800fcda:	b430      	push	{r4, r5}
 800fcdc:	2000      	movs	r0, #0
 800fcde:	2400      	movs	r4, #0
 800fce0:	2500      	movs	r5, #0
 800fce2:	801a      	strh	r2, [r3, #0]
 800fce4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800fce8:	bc30      	pop	{r4, r5}
 800fcea:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800fcee:	6359      	str	r1, [r3, #52]	; 0x34
 800fcf0:	6318      	str	r0, [r3, #48]	; 0x30
 800fcf2:	8718      	strh	r0, [r3, #56]	; 0x38
 800fcf4:	4770      	bx	lr
 800fcf6:	200b      	movs	r0, #11
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop

0800fcfc <rclc_support_init_with_options>:
 800fcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd00:	b084      	sub	sp, #16
 800fd02:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800fd06:	b390      	cbz	r0, 800fd6e <rclc_support_init_with_options+0x72>
 800fd08:	461c      	mov	r4, r3
 800fd0a:	b383      	cbz	r3, 800fd6e <rclc_support_init_with_options+0x72>
 800fd0c:	f1b8 0f00 	cmp.w	r8, #0
 800fd10:	d02d      	beq.n	800fd6e <rclc_support_init_with_options+0x72>
 800fd12:	4605      	mov	r5, r0
 800fd14:	460e      	mov	r6, r1
 800fd16:	4617      	mov	r7, r2
 800fd18:	f7ff f884 	bl	800ee24 <rcl_get_zero_initialized_init_options>
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	6028      	str	r0, [r5, #0]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f7ff f8f7 	bl	800ef14 <rcl_init_options_copy>
 800fd26:	4604      	mov	r4, r0
 800fd28:	b9d8      	cbnz	r0, 800fd62 <rclc_support_init_with_options+0x66>
 800fd2a:	466c      	mov	r4, sp
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f006 fb23 	bl	8016378 <rcl_get_zero_initialized_context>
 800fd32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800fd36:	f105 0408 	add.w	r4, r5, #8
 800fd3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fd3e:	4623      	mov	r3, r4
 800fd40:	4639      	mov	r1, r7
 800fd42:	4630      	mov	r0, r6
 800fd44:	462a      	mov	r2, r5
 800fd46:	f006 fd0b 	bl	8016760 <rcl_init>
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	b948      	cbnz	r0, 800fd62 <rclc_support_init_with_options+0x66>
 800fd4e:	4642      	mov	r2, r8
 800fd50:	2003      	movs	r0, #3
 800fd52:	f8c5 8018 	str.w	r8, [r5, #24]
 800fd56:	f105 011c 	add.w	r1, r5, #28
 800fd5a:	f007 f97b 	bl	8017054 <rcl_clock_init>
 800fd5e:	4604      	mov	r4, r0
 800fd60:	b108      	cbz	r0, 800fd66 <rclc_support_init_with_options+0x6a>
 800fd62:	f000 fa11 	bl	8010188 <rcutils_reset_error>
 800fd66:	4620      	mov	r0, r4
 800fd68:	b004      	add	sp, #16
 800fd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd6e:	240b      	movs	r4, #11
 800fd70:	4620      	mov	r0, r4
 800fd72:	b004      	add	sp, #16
 800fd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd78 <rclc_node_init_default>:
 800fd78:	b3c0      	cbz	r0, 800fdec <rclc_node_init_default+0x74>
 800fd7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd7e:	460d      	mov	r5, r1
 800fd80:	b08f      	sub	sp, #60	; 0x3c
 800fd82:	b331      	cbz	r1, 800fdd2 <rclc_node_init_default+0x5a>
 800fd84:	4616      	mov	r6, r2
 800fd86:	b322      	cbz	r2, 800fdd2 <rclc_node_init_default+0x5a>
 800fd88:	461f      	mov	r7, r3
 800fd8a:	b313      	cbz	r3, 800fdd2 <rclc_node_init_default+0x5a>
 800fd8c:	4604      	mov	r4, r0
 800fd8e:	f10d 0810 	add.w	r8, sp, #16
 800fd92:	4640      	mov	r0, r8
 800fd94:	f10d 091c 	add.w	r9, sp, #28
 800fd98:	f006 fe1a 	bl	80169d0 <rcl_get_zero_initialized_node>
 800fd9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fda0:	e884 0003 	stmia.w	r4, {r0, r1}
 800fda4:	4648      	mov	r0, r9
 800fda6:	f006 ffaf 	bl	8016d08 <rcl_node_get_default_options>
 800fdaa:	4640      	mov	r0, r8
 800fdac:	f006 fe10 	bl	80169d0 <rcl_get_zero_initialized_node>
 800fdb0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	f8cd 9000 	str.w	r9, [sp]
 800fdba:	f107 0308 	add.w	r3, r7, #8
 800fdbe:	e884 0003 	stmia.w	r4, {r0, r1}
 800fdc2:	4629      	mov	r1, r5
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f006 fe0d 	bl	80169e4 <rcl_node_init>
 800fdca:	b930      	cbnz	r0, 800fdda <rclc_node_init_default+0x62>
 800fdcc:	b00f      	add	sp, #60	; 0x3c
 800fdce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdd2:	200b      	movs	r0, #11
 800fdd4:	b00f      	add	sp, #60	; 0x3c
 800fdd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdda:	9003      	str	r0, [sp, #12]
 800fddc:	f000 f9d4 	bl	8010188 <rcutils_reset_error>
 800fde0:	f000 f9d2 	bl	8010188 <rcutils_reset_error>
 800fde4:	9803      	ldr	r0, [sp, #12]
 800fde6:	b00f      	add	sp, #60	; 0x3c
 800fde8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdec:	200b      	movs	r0, #11
 800fdee:	4770      	bx	lr

0800fdf0 <rclc_publisher_init_default>:
 800fdf0:	b368      	cbz	r0, 800fe4e <rclc_publisher_init_default+0x5e>
 800fdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf6:	460d      	mov	r5, r1
 800fdf8:	b09e      	sub	sp, #120	; 0x78
 800fdfa:	b321      	cbz	r1, 800fe46 <rclc_publisher_init_default+0x56>
 800fdfc:	4616      	mov	r6, r2
 800fdfe:	b312      	cbz	r2, 800fe46 <rclc_publisher_init_default+0x56>
 800fe00:	461f      	mov	r7, r3
 800fe02:	b303      	cbz	r3, 800fe46 <rclc_publisher_init_default+0x56>
 800fe04:	4604      	mov	r4, r0
 800fe06:	f7ff f941 	bl	800f08c <rcl_get_zero_initialized_publisher>
 800fe0a:	f10d 0810 	add.w	r8, sp, #16
 800fe0e:	6020      	str	r0, [r4, #0]
 800fe10:	4640      	mov	r0, r8
 800fe12:	f7ff fa39 	bl	800f288 <rcl_publisher_get_default_options>
 800fe16:	2250      	movs	r2, #80	; 0x50
 800fe18:	490e      	ldr	r1, [pc, #56]	; (800fe54 <rclc_publisher_init_default+0x64>)
 800fe1a:	4640      	mov	r0, r8
 800fe1c:	f00a fc6e 	bl	801a6fc <memcpy>
 800fe20:	463b      	mov	r3, r7
 800fe22:	4632      	mov	r2, r6
 800fe24:	4629      	mov	r1, r5
 800fe26:	4620      	mov	r0, r4
 800fe28:	f8cd 8000 	str.w	r8, [sp]
 800fe2c:	f7ff f934 	bl	800f098 <rcl_publisher_init>
 800fe30:	b910      	cbnz	r0, 800fe38 <rclc_publisher_init_default+0x48>
 800fe32:	b01e      	add	sp, #120	; 0x78
 800fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe38:	9003      	str	r0, [sp, #12]
 800fe3a:	f000 f9a5 	bl	8010188 <rcutils_reset_error>
 800fe3e:	9803      	ldr	r0, [sp, #12]
 800fe40:	b01e      	add	sp, #120	; 0x78
 800fe42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe46:	200b      	movs	r0, #11
 800fe48:	b01e      	add	sp, #120	; 0x78
 800fe4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4e:	200b      	movs	r0, #11
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	0801d100 	.word	0x0801d100

0800fe58 <rclc_subscription_init_best_effort>:
 800fe58:	b368      	cbz	r0, 800feb6 <rclc_subscription_init_best_effort+0x5e>
 800fe5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5e:	460d      	mov	r5, r1
 800fe60:	b0a0      	sub	sp, #128	; 0x80
 800fe62:	b321      	cbz	r1, 800feae <rclc_subscription_init_best_effort+0x56>
 800fe64:	4616      	mov	r6, r2
 800fe66:	b312      	cbz	r2, 800feae <rclc_subscription_init_best_effort+0x56>
 800fe68:	461f      	mov	r7, r3
 800fe6a:	b303      	cbz	r3, 800feae <rclc_subscription_init_best_effort+0x56>
 800fe6c:	4604      	mov	r4, r0
 800fe6e:	f7ff fa51 	bl	800f314 <rcl_get_zero_initialized_subscription>
 800fe72:	f10d 0810 	add.w	r8, sp, #16
 800fe76:	6020      	str	r0, [r4, #0]
 800fe78:	4640      	mov	r0, r8
 800fe7a:	f7ff fb47 	bl	800f50c <rcl_subscription_get_default_options>
 800fe7e:	2250      	movs	r2, #80	; 0x50
 800fe80:	490e      	ldr	r1, [pc, #56]	; (800febc <rclc_subscription_init_best_effort+0x64>)
 800fe82:	4640      	mov	r0, r8
 800fe84:	f00a fc3a 	bl	801a6fc <memcpy>
 800fe88:	463b      	mov	r3, r7
 800fe8a:	4632      	mov	r2, r6
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f8cd 8000 	str.w	r8, [sp]
 800fe94:	f7ff fa44 	bl	800f320 <rcl_subscription_init>
 800fe98:	b910      	cbnz	r0, 800fea0 <rclc_subscription_init_best_effort+0x48>
 800fe9a:	b020      	add	sp, #128	; 0x80
 800fe9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea0:	9003      	str	r0, [sp, #12]
 800fea2:	f000 f971 	bl	8010188 <rcutils_reset_error>
 800fea6:	9803      	ldr	r0, [sp, #12]
 800fea8:	b020      	add	sp, #128	; 0x80
 800feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feae:	200b      	movs	r0, #11
 800feb0:	b020      	add	sp, #128	; 0x80
 800feb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feb6:	200b      	movs	r0, #11
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	0801d150 	.word	0x0801d150

0800fec0 <rclc_timer_init_default>:
 800fec0:	b360      	cbz	r0, 800ff1c <rclc_timer_init_default+0x5c>
 800fec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fec6:	460c      	mov	r4, r1
 800fec8:	b08b      	sub	sp, #44	; 0x2c
 800feca:	b319      	cbz	r1, 800ff14 <rclc_timer_init_default+0x54>
 800fecc:	4691      	mov	r9, r2
 800fece:	4698      	mov	r8, r3
 800fed0:	4607      	mov	r7, r0
 800fed2:	f007 faa3 	bl	801741c <rcl_get_zero_initialized_timer>
 800fed6:	4684      	mov	ip, r0
 800fed8:	69a6      	ldr	r6, [r4, #24]
 800feda:	ad03      	add	r5, sp, #12
 800fedc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fee0:	6833      	ldr	r3, [r6, #0]
 800fee2:	f8c7 c000 	str.w	ip, [r7]
 800fee6:	602b      	str	r3, [r5, #0]
 800fee8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800feea:	4638      	mov	r0, r7
 800feec:	e9cd 9800 	strd	r9, r8, [sp]
 800fef0:	9302      	str	r3, [sp, #8]
 800fef2:	f104 0208 	add.w	r2, r4, #8
 800fef6:	f104 011c 	add.w	r1, r4, #28
 800fefa:	f007 fa95 	bl	8017428 <rcl_timer_init>
 800fefe:	b910      	cbnz	r0, 800ff06 <rclc_timer_init_default+0x46>
 800ff00:	b00b      	add	sp, #44	; 0x2c
 800ff02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff06:	9009      	str	r0, [sp, #36]	; 0x24
 800ff08:	f000 f93e 	bl	8010188 <rcutils_reset_error>
 800ff0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff0e:	b00b      	add	sp, #44	; 0x2c
 800ff10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff14:	200b      	movs	r0, #11
 800ff16:	b00b      	add	sp, #44	; 0x2c
 800ff18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff1c:	200b      	movs	r0, #11
 800ff1e:	4770      	bx	lr

0800ff20 <__default_zero_allocate>:
 800ff20:	f00a bb64 	b.w	801a5ec <calloc>

0800ff24 <__default_reallocate>:
 800ff24:	f00a bd54 	b.w	801a9d0 <realloc>

0800ff28 <__default_deallocate>:
 800ff28:	f00a bbe0 	b.w	801a6ec <free>

0800ff2c <__default_allocate>:
 800ff2c:	f00a bbd6 	b.w	801a6dc <malloc>

0800ff30 <rcutils_get_zero_initialized_allocator>:
 800ff30:	b470      	push	{r4, r5, r6}
 800ff32:	4604      	mov	r4, r0
 800ff34:	4606      	mov	r6, r0
 800ff36:	4d04      	ldr	r5, [pc, #16]	; (800ff48 <rcutils_get_zero_initialized_allocator+0x18>)
 800ff38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff3c:	682b      	ldr	r3, [r5, #0]
 800ff3e:	4630      	mov	r0, r6
 800ff40:	6023      	str	r3, [r4, #0]
 800ff42:	bc70      	pop	{r4, r5, r6}
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	0801d1a0 	.word	0x0801d1a0

0800ff4c <rcutils_set_default_allocator>:
 800ff4c:	b1a0      	cbz	r0, 800ff78 <rcutils_set_default_allocator+0x2c>
 800ff4e:	6802      	ldr	r2, [r0, #0]
 800ff50:	b19a      	cbz	r2, 800ff7a <rcutils_set_default_allocator+0x2e>
 800ff52:	6841      	ldr	r1, [r0, #4]
 800ff54:	b199      	cbz	r1, 800ff7e <rcutils_set_default_allocator+0x32>
 800ff56:	b470      	push	{r4, r5, r6}
 800ff58:	68c4      	ldr	r4, [r0, #12]
 800ff5a:	b15c      	cbz	r4, 800ff74 <rcutils_set_default_allocator+0x28>
 800ff5c:	6885      	ldr	r5, [r0, #8]
 800ff5e:	b185      	cbz	r5, 800ff82 <rcutils_set_default_allocator+0x36>
 800ff60:	2600      	movs	r6, #0
 800ff62:	2001      	movs	r0, #1
 800ff64:	4b08      	ldr	r3, [pc, #32]	; (800ff88 <rcutils_set_default_allocator+0x3c>)
 800ff66:	e9c3 2100 	strd	r2, r1, [r3]
 800ff6a:	e9c3 5402 	strd	r5, r4, [r3, #8]
 800ff6e:	611e      	str	r6, [r3, #16]
 800ff70:	bc70      	pop	{r4, r5, r6}
 800ff72:	4770      	bx	lr
 800ff74:	4620      	mov	r0, r4
 800ff76:	e7fb      	b.n	800ff70 <rcutils_set_default_allocator+0x24>
 800ff78:	4770      	bx	lr
 800ff7a:	4610      	mov	r0, r2
 800ff7c:	4770      	bx	lr
 800ff7e:	4608      	mov	r0, r1
 800ff80:	4770      	bx	lr
 800ff82:	4628      	mov	r0, r5
 800ff84:	e7f4      	b.n	800ff70 <rcutils_set_default_allocator+0x24>
 800ff86:	bf00      	nop
 800ff88:	200000a4 	.word	0x200000a4

0800ff8c <rcutils_get_default_allocator>:
 800ff8c:	b470      	push	{r4, r5, r6}
 800ff8e:	4604      	mov	r4, r0
 800ff90:	4606      	mov	r6, r0
 800ff92:	4d04      	ldr	r5, [pc, #16]	; (800ffa4 <rcutils_get_default_allocator+0x18>)
 800ff94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff98:	682b      	ldr	r3, [r5, #0]
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	6023      	str	r3, [r4, #0]
 800ff9e:	bc70      	pop	{r4, r5, r6}
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	200000a4 	.word	0x200000a4

0800ffa8 <rcutils_allocator_is_valid>:
 800ffa8:	b158      	cbz	r0, 800ffc2 <rcutils_allocator_is_valid+0x1a>
 800ffaa:	6803      	ldr	r3, [r0, #0]
 800ffac:	b143      	cbz	r3, 800ffc0 <rcutils_allocator_is_valid+0x18>
 800ffae:	6843      	ldr	r3, [r0, #4]
 800ffb0:	b133      	cbz	r3, 800ffc0 <rcutils_allocator_is_valid+0x18>
 800ffb2:	68c3      	ldr	r3, [r0, #12]
 800ffb4:	b123      	cbz	r3, 800ffc0 <rcutils_allocator_is_valid+0x18>
 800ffb6:	6880      	ldr	r0, [r0, #8]
 800ffb8:	3800      	subs	r0, #0
 800ffba:	bf18      	it	ne
 800ffbc:	2001      	movne	r0, #1
 800ffbe:	4770      	bx	lr
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	4770      	bx	lr

0800ffc4 <__rcutils_format_error_string>:
 800ffc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc8:	460f      	mov	r7, r1
 800ffca:	4606      	mov	r6, r0
 800ffcc:	b087      	sub	sp, #28
 800ffce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	f00a fd8f 	bl	801aaf6 <strnlen>
 800ffd8:	f240 39ff 	movw	r9, #1023	; 0x3ff
 800ffdc:	4548      	cmp	r0, r9
 800ffde:	bf28      	it	cs
 800ffe0:	4648      	movcs	r0, r9
 800ffe2:	4605      	mov	r5, r0
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800ffea:	462a      	mov	r2, r5
 800ffec:	4630      	mov	r0, r6
 800ffee:	f00a fb93 	bl	801a718 <memmove>
 800fff2:	2c05      	cmp	r4, #5
 800fff4:	46a0      	mov	r8, r4
 800fff6:	bf28      	it	cs
 800fff8:	f04f 0805 	movcs.w	r8, #5
 800fffc:	2300      	movs	r3, #0
 800fffe:	4544      	cmp	r4, r8
 8010000:	bf98      	it	ls
 8010002:	eba9 0805 	subls.w	r8, r9, r5
 8010006:	5573      	strb	r3, [r6, r5]
 8010008:	442e      	add	r6, r5
 801000a:	2500      	movs	r5, #0
 801000c:	4642      	mov	r2, r8
 801000e:	4630      	mov	r0, r6
 8010010:	4947      	ldr	r1, [pc, #284]	; (8010130 <__rcutils_format_error_string+0x16c>)
 8010012:	eba4 0408 	sub.w	r4, r4, r8
 8010016:	f507 7a40 	add.w	sl, r7, #768	; 0x300
 801001a:	f00a fb6f 	bl	801a6fc <memcpy>
 801001e:	f806 5008 	strb.w	r5, [r6, r8]
 8010022:	4621      	mov	r1, r4
 8010024:	4650      	mov	r0, sl
 8010026:	f00a fd66 	bl	801aaf6 <strnlen>
 801002a:	4284      	cmp	r4, r0
 801002c:	4683      	mov	fp, r0
 801002e:	4446      	add	r6, r8
 8010030:	d96b      	bls.n	801010a <__rcutils_format_error_string+0x146>
 8010032:	1a24      	subs	r4, r4, r0
 8010034:	2c01      	cmp	r4, #1
 8010036:	46a1      	mov	r9, r4
 8010038:	bf28      	it	cs
 801003a:	f04f 0901 	movcs.w	r9, #1
 801003e:	4602      	mov	r2, r0
 8010040:	4651      	mov	r1, sl
 8010042:	4630      	mov	r0, r6
 8010044:	f00a fb68 	bl	801a718 <memmove>
 8010048:	454c      	cmp	r4, r9
 801004a:	eb06 030b 	add.w	r3, r6, fp
 801004e:	f806 500b 	strb.w	r5, [r6, fp]
 8010052:	bf88      	it	hi
 8010054:	eba4 0809 	subhi.w	r8, r4, r9
 8010058:	d960      	bls.n	801011c <__rcutils_format_error_string+0x158>
 801005a:	464a      	mov	r2, r9
 801005c:	4618      	mov	r0, r3
 801005e:	4935      	ldr	r1, [pc, #212]	; (8010134 <__rcutils_format_error_string+0x170>)
 8010060:	f00a fb4c 	bl	801a6fc <memcpy>
 8010064:	2600      	movs	r6, #0
 8010066:	f800 6009 	strb.w	r6, [r0, r9]
 801006a:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 801006e:	ea54 0305 	orrs.w	r3, r4, r5
 8010072:	4481      	add	r9, r0
 8010074:	d057      	beq.n	8010126 <__rcutils_format_error_string+0x162>
 8010076:	466f      	mov	r7, sp
 8010078:	46ba      	mov	sl, r7
 801007a:	4620      	mov	r0, r4
 801007c:	4629      	mov	r1, r5
 801007e:	220a      	movs	r2, #10
 8010080:	2300      	movs	r3, #0
 8010082:	f7f1 f935 	bl	80012f0 <__aeabi_uldivmod>
 8010086:	3230      	adds	r2, #48	; 0x30
 8010088:	2300      	movs	r3, #0
 801008a:	4620      	mov	r0, r4
 801008c:	4629      	mov	r1, r5
 801008e:	f80a 2b01 	strb.w	r2, [sl], #1
 8010092:	220a      	movs	r2, #10
 8010094:	f7f1 f92c 	bl	80012f0 <__aeabi_uldivmod>
 8010098:	462b      	mov	r3, r5
 801009a:	4622      	mov	r2, r4
 801009c:	2b00      	cmp	r3, #0
 801009e:	bf08      	it	eq
 80100a0:	2a0a      	cmpeq	r2, #10
 80100a2:	4604      	mov	r4, r0
 80100a4:	460d      	mov	r5, r1
 80100a6:	f106 0601 	add.w	r6, r6, #1
 80100aa:	d2e6      	bcs.n	801007a <__rcutils_format_error_string+0xb6>
 80100ac:	2300      	movs	r3, #0
 80100ae:	aa06      	add	r2, sp, #24
 80100b0:	4416      	add	r6, r2
 80100b2:	2115      	movs	r1, #21
 80100b4:	4638      	mov	r0, r7
 80100b6:	f806 3c18 	strb.w	r3, [r6, #-24]
 80100ba:	f00a fd1c 	bl	801aaf6 <strnlen>
 80100be:	2801      	cmp	r0, #1
 80100c0:	d90f      	bls.n	80100e2 <__rcutils_format_error_string+0x11e>
 80100c2:	463a      	mov	r2, r7
 80100c4:	1e43      	subs	r3, r0, #1
 80100c6:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 80100ca:	443b      	add	r3, r7
 80100cc:	4408      	add	r0, r1
 80100ce:	7811      	ldrb	r1, [r2, #0]
 80100d0:	781c      	ldrb	r4, [r3, #0]
 80100d2:	f802 4b01 	strb.w	r4, [r2], #1
 80100d6:	f803 1901 	strb.w	r1, [r3], #-1
 80100da:	1ac4      	subs	r4, r0, r3
 80100dc:	1a81      	subs	r1, r0, r2
 80100de:	428c      	cmp	r4, r1
 80100e0:	d3f5      	bcc.n	80100ce <__rcutils_format_error_string+0x10a>
 80100e2:	4641      	mov	r1, r8
 80100e4:	4638      	mov	r0, r7
 80100e6:	f00a fd06 	bl	801aaf6 <strnlen>
 80100ea:	4604      	mov	r4, r0
 80100ec:	4540      	cmp	r0, r8
 80100ee:	bf28      	it	cs
 80100f0:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 80100f4:	4639      	mov	r1, r7
 80100f6:	4622      	mov	r2, r4
 80100f8:	4648      	mov	r0, r9
 80100fa:	f00a faff 	bl	801a6fc <memcpy>
 80100fe:	2300      	movs	r3, #0
 8010100:	f809 3004 	strb.w	r3, [r9, r4]
 8010104:	b007      	add	sp, #28
 8010106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010a:	3c01      	subs	r4, #1
 801010c:	4622      	mov	r2, r4
 801010e:	4651      	mov	r1, sl
 8010110:	4630      	mov	r0, r6
 8010112:	f00a fb01 	bl	801a718 <memmove>
 8010116:	1933      	adds	r3, r6, r4
 8010118:	5535      	strb	r5, [r6, r4]
 801011a:	2401      	movs	r4, #1
 801011c:	f04f 0801 	mov.w	r8, #1
 8010120:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010124:	e799      	b.n	801005a <__rcutils_format_error_string+0x96>
 8010126:	2330      	movs	r3, #48	; 0x30
 8010128:	466f      	mov	r7, sp
 801012a:	f8ad 3000 	strh.w	r3, [sp]
 801012e:	e7d8      	b.n	80100e2 <__rcutils_format_error_string+0x11e>
 8010130:	0801d1b4 	.word	0x0801d1b4
 8010134:	0801d1bc 	.word	0x0801d1bc

08010138 <rcutils_get_error_string>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4b0e      	ldr	r3, [pc, #56]	; (8010174 <rcutils_get_error_string+0x3c>)
 801013c:	4604      	mov	r4, r0
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	b18b      	cbz	r3, 8010166 <rcutils_get_error_string+0x2e>
 8010142:	4d0d      	ldr	r5, [pc, #52]	; (8010178 <rcutils_get_error_string+0x40>)
 8010144:	782b      	ldrb	r3, [r5, #0]
 8010146:	b13b      	cbz	r3, 8010158 <rcutils_get_error_string+0x20>
 8010148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801014c:	4620      	mov	r0, r4
 801014e:	490b      	ldr	r1, [pc, #44]	; (801017c <rcutils_get_error_string+0x44>)
 8010150:	f00a fad4 	bl	801a6fc <memcpy>
 8010154:	4620      	mov	r0, r4
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	4909      	ldr	r1, [pc, #36]	; (8010180 <rcutils_get_error_string+0x48>)
 801015a:	4808      	ldr	r0, [pc, #32]	; (801017c <rcutils_get_error_string+0x44>)
 801015c:	f7ff ff32 	bl	800ffc4 <__rcutils_format_error_string>
 8010160:	2301      	movs	r3, #1
 8010162:	702b      	strb	r3, [r5, #0]
 8010164:	e7f0      	b.n	8010148 <rcutils_get_error_string+0x10>
 8010166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801016a:	4906      	ldr	r1, [pc, #24]	; (8010184 <rcutils_get_error_string+0x4c>)
 801016c:	f00a fac6 	bl	801a6fc <memcpy>
 8010170:	4620      	mov	r0, r4
 8010172:	bd38      	pop	{r3, r4, r5, pc}
 8010174:	20006838 	.word	0x20006838
 8010178:	20006839 	.word	0x20006839
 801017c:	20008ea8 	.word	0x20008ea8
 8010180:	200092a8 	.word	0x200092a8
 8010184:	0801ca68 	.word	0x0801ca68

08010188 <rcutils_reset_error>:
 8010188:	b510      	push	{r4, lr}
 801018a:	2400      	movs	r4, #0
 801018c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8010190:	4621      	mov	r1, r4
 8010192:	4807      	ldr	r0, [pc, #28]	; (80101b0 <rcutils_reset_error+0x28>)
 8010194:	f00a fada 	bl	801a74c <memset>
 8010198:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <rcutils_reset_error+0x2c>)
 801019a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801019e:	4906      	ldr	r1, [pc, #24]	; (80101b8 <rcutils_reset_error+0x30>)
 80101a0:	4806      	ldr	r0, [pc, #24]	; (80101bc <rcutils_reset_error+0x34>)
 80101a2:	701c      	strb	r4, [r3, #0]
 80101a4:	f00a faaa 	bl	801a6fc <memcpy>
 80101a8:	4b05      	ldr	r3, [pc, #20]	; (80101c0 <rcutils_reset_error+0x38>)
 80101aa:	701c      	strb	r4, [r3, #0]
 80101ac:	bd10      	pop	{r4, pc}
 80101ae:	bf00      	nop
 80101b0:	200092a8 	.word	0x200092a8
 80101b4:	20006839 	.word	0x20006839
 80101b8:	0801c268 	.word	0x0801c268
 80101bc:	20008ea8 	.word	0x20008ea8
 80101c0:	20006838 	.word	0x20006838

080101c4 <rcutils_get_zero_initialized_string_map>:
 80101c4:	2000      	movs	r0, #0
 80101c6:	4b01      	ldr	r3, [pc, #4]	; (80101cc <rcutils_get_zero_initialized_string_map+0x8>)
 80101c8:	6018      	str	r0, [r3, #0]
 80101ca:	4770      	bx	lr
 80101cc:	2000683c 	.word	0x2000683c

080101d0 <rcutils_string_map_reserve>:
 80101d0:	2800      	cmp	r0, #0
 80101d2:	d05d      	beq.n	8010290 <rcutils_string_map_reserve+0xc0>
 80101d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d8:	6805      	ldr	r5, [r0, #0]
 80101da:	4606      	mov	r6, r0
 80101dc:	460c      	mov	r4, r1
 80101de:	b12d      	cbz	r5, 80101ec <rcutils_string_map_reserve+0x1c>
 80101e0:	68eb      	ldr	r3, [r5, #12]
 80101e2:	42a3      	cmp	r3, r4
 80101e4:	d905      	bls.n	80101f2 <rcutils_string_map_reserve+0x22>
 80101e6:	461c      	mov	r4, r3
 80101e8:	2d00      	cmp	r5, #0
 80101ea:	d1f9      	bne.n	80101e0 <rcutils_string_map_reserve+0x10>
 80101ec:	201f      	movs	r0, #31
 80101ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101f2:	68ab      	ldr	r3, [r5, #8]
 80101f4:	42a3      	cmp	r3, r4
 80101f6:	d047      	beq.n	8010288 <rcutils_string_map_reserve+0xb8>
 80101f8:	6a2f      	ldr	r7, [r5, #32]
 80101fa:	2c00      	cmp	r4, #0
 80101fc:	d034      	beq.n	8010268 <rcutils_string_map_reserve+0x98>
 80101fe:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010202:	d243      	bcs.n	801028c <rcutils_string_map_reserve+0xbc>
 8010204:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8010208:	4641      	mov	r1, r8
 801020a:	463a      	mov	r2, r7
 801020c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8010210:	6828      	ldr	r0, [r5, #0]
 8010212:	47c8      	blx	r9
 8010214:	2800      	cmp	r0, #0
 8010216:	d039      	beq.n	801028c <rcutils_string_map_reserve+0xbc>
 8010218:	6833      	ldr	r3, [r6, #0]
 801021a:	463a      	mov	r2, r7
 801021c:	6018      	str	r0, [r3, #0]
 801021e:	4641      	mov	r1, r8
 8010220:	6858      	ldr	r0, [r3, #4]
 8010222:	47c8      	blx	r9
 8010224:	4603      	mov	r3, r0
 8010226:	b388      	cbz	r0, 801028c <rcutils_string_map_reserve+0xbc>
 8010228:	6835      	ldr	r5, [r6, #0]
 801022a:	68aa      	ldr	r2, [r5, #8]
 801022c:	6068      	str	r0, [r5, #4]
 801022e:	42a2      	cmp	r2, r4
 8010230:	d226      	bcs.n	8010280 <rcutils_string_map_reserve+0xb0>
 8010232:	682e      	ldr	r6, [r5, #0]
 8010234:	eb00 0c08 	add.w	ip, r0, r8
 8010238:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 801023c:	4560      	cmp	r0, ip
 801023e:	ea4f 0182 	mov.w	r1, r2, lsl #2
 8010242:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8010246:	d203      	bcs.n	8010250 <rcutils_string_map_reserve+0x80>
 8010248:	eb06 0c08 	add.w	ip, r6, r8
 801024c:	4567      	cmp	r7, ip
 801024e:	d321      	bcc.n	8010294 <rcutils_string_map_reserve+0xc4>
 8010250:	1aa2      	subs	r2, r4, r2
 8010252:	0096      	lsls	r6, r2, #2
 8010254:	4632      	mov	r2, r6
 8010256:	2100      	movs	r1, #0
 8010258:	f00a fa78 	bl	801a74c <memset>
 801025c:	4632      	mov	r2, r6
 801025e:	4638      	mov	r0, r7
 8010260:	2100      	movs	r1, #0
 8010262:	f00a fa73 	bl	801a74c <memset>
 8010266:	e00b      	b.n	8010280 <rcutils_string_map_reserve+0xb0>
 8010268:	f8d5 8014 	ldr.w	r8, [r5, #20]
 801026c:	6828      	ldr	r0, [r5, #0]
 801026e:	4639      	mov	r1, r7
 8010270:	47c0      	blx	r8
 8010272:	6833      	ldr	r3, [r6, #0]
 8010274:	4639      	mov	r1, r7
 8010276:	6858      	ldr	r0, [r3, #4]
 8010278:	601c      	str	r4, [r3, #0]
 801027a:	47c0      	blx	r8
 801027c:	6835      	ldr	r5, [r6, #0]
 801027e:	606c      	str	r4, [r5, #4]
 8010280:	2000      	movs	r0, #0
 8010282:	60ac      	str	r4, [r5, #8]
 8010284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010288:	2000      	movs	r0, #0
 801028a:	e7b0      	b.n	80101ee <rcutils_string_map_reserve+0x1e>
 801028c:	200a      	movs	r0, #10
 801028e:	e7ae      	b.n	80101ee <rcutils_string_map_reserve+0x1e>
 8010290:	200b      	movs	r0, #11
 8010292:	4770      	bx	lr
 8010294:	2000      	movs	r0, #0
 8010296:	3904      	subs	r1, #4
 8010298:	1f32      	subs	r2, r6, #4
 801029a:	440b      	add	r3, r1
 801029c:	4490      	add	r8, r2
 801029e:	4431      	add	r1, r6
 80102a0:	f841 0f04 	str.w	r0, [r1, #4]!
 80102a4:	4541      	cmp	r1, r8
 80102a6:	f843 0f04 	str.w	r0, [r3, #4]!
 80102aa:	d1f9      	bne.n	80102a0 <rcutils_string_map_reserve+0xd0>
 80102ac:	e7e8      	b.n	8010280 <rcutils_string_map_reserve+0xb0>
 80102ae:	bf00      	nop

080102b0 <rcutils_string_map_init>:
 80102b0:	b082      	sub	sp, #8
 80102b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102b4:	ac06      	add	r4, sp, #24
 80102b6:	e884 000c 	stmia.w	r4, {r2, r3}
 80102ba:	b370      	cbz	r0, 801031a <rcutils_string_map_init+0x6a>
 80102bc:	6806      	ldr	r6, [r0, #0]
 80102be:	4604      	mov	r4, r0
 80102c0:	b12e      	cbz	r6, 80102ce <rcutils_string_map_init+0x1e>
 80102c2:	251e      	movs	r5, #30
 80102c4:	4628      	mov	r0, r5
 80102c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80102ca:	b002      	add	sp, #8
 80102cc:	4770      	bx	lr
 80102ce:	a806      	add	r0, sp, #24
 80102d0:	460d      	mov	r5, r1
 80102d2:	f7ff fe69 	bl	800ffa8 <rcutils_allocator_is_valid>
 80102d6:	b300      	cbz	r0, 801031a <rcutils_string_map_init+0x6a>
 80102d8:	2024      	movs	r0, #36	; 0x24
 80102da:	9b06      	ldr	r3, [sp, #24]
 80102dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80102de:	4798      	blx	r3
 80102e0:	6020      	str	r0, [r4, #0]
 80102e2:	b300      	cbz	r0, 8010326 <rcutils_string_map_init+0x76>
 80102e4:	f100 0710 	add.w	r7, r0, #16
 80102e8:	f10d 0c18 	add.w	ip, sp, #24
 80102ec:	e9c0 6600 	strd	r6, r6, [r0]
 80102f0:	e9c0 6602 	strd	r6, r6, [r0, #8]
 80102f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102f8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80102fa:	f8dc 3000 	ldr.w	r3, [ip]
 80102fe:	4629      	mov	r1, r5
 8010300:	4620      	mov	r0, r4
 8010302:	603b      	str	r3, [r7, #0]
 8010304:	f7ff ff64 	bl	80101d0 <rcutils_string_map_reserve>
 8010308:	4605      	mov	r5, r0
 801030a:	2800      	cmp	r0, #0
 801030c:	d0da      	beq.n	80102c4 <rcutils_string_map_init+0x14>
 801030e:	9b07      	ldr	r3, [sp, #28]
 8010310:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010312:	6820      	ldr	r0, [r4, #0]
 8010314:	4798      	blx	r3
 8010316:	6026      	str	r6, [r4, #0]
 8010318:	e7d4      	b.n	80102c4 <rcutils_string_map_init+0x14>
 801031a:	250b      	movs	r5, #11
 801031c:	4628      	mov	r0, r5
 801031e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010322:	b002      	add	sp, #8
 8010324:	4770      	bx	lr
 8010326:	250a      	movs	r5, #10
 8010328:	e7cc      	b.n	80102c4 <rcutils_string_map_init+0x14>
 801032a:	bf00      	nop

0801032c <rcutils_string_map_fini>:
 801032c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010330:	2800      	cmp	r0, #0
 8010332:	d036      	beq.n	80103a2 <rcutils_string_map_fini+0x76>
 8010334:	6804      	ldr	r4, [r0, #0]
 8010336:	4606      	mov	r6, r0
 8010338:	2c00      	cmp	r4, #0
 801033a:	d02f      	beq.n	801039c <rcutils_string_map_fini+0x70>
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	b313      	cbz	r3, 8010386 <rcutils_string_map_fini+0x5a>
 8010340:	2500      	movs	r5, #0
 8010342:	46a8      	mov	r8, r5
 8010344:	e017      	b.n	8010376 <rcutils_string_map_fini+0x4a>
 8010346:	f8d4 9020 	ldr.w	r9, [r4, #32]
 801034a:	6967      	ldr	r7, [r4, #20]
 801034c:	4649      	mov	r1, r9
 801034e:	47b8      	blx	r7
 8010350:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010354:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8010358:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801035c:	4649      	mov	r1, r9
 801035e:	47b8      	blx	r7
 8010360:	68e3      	ldr	r3, [r4, #12]
 8010362:	6862      	ldr	r2, [r4, #4]
 8010364:	3b01      	subs	r3, #1
 8010366:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 801036a:	60e3      	str	r3, [r4, #12]
 801036c:	6834      	ldr	r4, [r6, #0]
 801036e:	3501      	adds	r5, #1
 8010370:	68a3      	ldr	r3, [r4, #8]
 8010372:	429d      	cmp	r5, r3
 8010374:	d207      	bcs.n	8010386 <rcutils_string_map_fini+0x5a>
 8010376:	6822      	ldr	r2, [r4, #0]
 8010378:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801037c:	2800      	cmp	r0, #0
 801037e:	d1e2      	bne.n	8010346 <rcutils_string_map_fini+0x1a>
 8010380:	3501      	adds	r5, #1
 8010382:	429d      	cmp	r5, r3
 8010384:	d3f8      	bcc.n	8010378 <rcutils_string_map_fini+0x4c>
 8010386:	2100      	movs	r1, #0
 8010388:	4630      	mov	r0, r6
 801038a:	f7ff ff21 	bl	80101d0 <rcutils_string_map_reserve>
 801038e:	4604      	mov	r4, r0
 8010390:	b920      	cbnz	r0, 801039c <rcutils_string_map_fini+0x70>
 8010392:	6830      	ldr	r0, [r6, #0]
 8010394:	6943      	ldr	r3, [r0, #20]
 8010396:	6a01      	ldr	r1, [r0, #32]
 8010398:	4798      	blx	r3
 801039a:	6034      	str	r4, [r6, #0]
 801039c:	4620      	mov	r0, r4
 801039e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a2:	240b      	movs	r4, #11
 80103a4:	4620      	mov	r0, r4
 80103a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103aa:	bf00      	nop

080103ac <rcutils_string_map_getn>:
 80103ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b0:	b310      	cbz	r0, 80103f8 <rcutils_string_map_getn+0x4c>
 80103b2:	6804      	ldr	r4, [r0, #0]
 80103b4:	b30c      	cbz	r4, 80103fa <rcutils_string_map_getn+0x4e>
 80103b6:	460d      	mov	r5, r1
 80103b8:	b1f1      	cbz	r1, 80103f8 <rcutils_string_map_getn+0x4c>
 80103ba:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80103be:	6827      	ldr	r7, [r4, #0]
 80103c0:	f1ba 0f00 	cmp.w	sl, #0
 80103c4:	d018      	beq.n	80103f8 <rcutils_string_map_getn+0x4c>
 80103c6:	4690      	mov	r8, r2
 80103c8:	2600      	movs	r6, #0
 80103ca:	3f04      	subs	r7, #4
 80103cc:	f857 9f04 	ldr.w	r9, [r7, #4]!
 80103d0:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 80103d4:	3601      	adds	r6, #1
 80103d6:	f1b9 0f00 	cmp.w	r9, #0
 80103da:	d00b      	beq.n	80103f4 <rcutils_string_map_getn+0x48>
 80103dc:	4648      	mov	r0, r9
 80103de:	f7ef ff31 	bl	8000244 <strlen>
 80103e2:	4540      	cmp	r0, r8
 80103e4:	4602      	mov	r2, r0
 80103e6:	4649      	mov	r1, r9
 80103e8:	bf38      	it	cc
 80103ea:	4642      	movcc	r2, r8
 80103ec:	4628      	mov	r0, r5
 80103ee:	f00a fb70 	bl	801aad2 <strncmp>
 80103f2:	b128      	cbz	r0, 8010400 <rcutils_string_map_getn+0x54>
 80103f4:	45b2      	cmp	sl, r6
 80103f6:	d1e9      	bne.n	80103cc <rcutils_string_map_getn+0x20>
 80103f8:	2400      	movs	r4, #0
 80103fa:	4620      	mov	r0, r4
 80103fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010400:	6863      	ldr	r3, [r4, #4]
 8010402:	f853 400b 	ldr.w	r4, [r3, fp]
 8010406:	4620      	mov	r0, r4
 8010408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801040c <rcutils_system_time_now>:
 801040c:	b310      	cbz	r0, 8010454 <rcutils_system_time_now+0x48>
 801040e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010410:	b085      	sub	sp, #20
 8010412:	4604      	mov	r4, r0
 8010414:	4669      	mov	r1, sp
 8010416:	2001      	movs	r0, #1
 8010418:	f7f3 feba 	bl	8004190 <clock_gettime>
 801041c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010420:	2e00      	cmp	r6, #0
 8010422:	f177 0300 	sbcs.w	r3, r7, #0
 8010426:	db12      	blt.n	801044e <rcutils_system_time_now+0x42>
 8010428:	9902      	ldr	r1, [sp, #8]
 801042a:	2900      	cmp	r1, #0
 801042c:	db0c      	blt.n	8010448 <rcutils_system_time_now+0x3c>
 801042e:	2000      	movs	r0, #0
 8010430:	4d09      	ldr	r5, [pc, #36]	; (8010458 <rcutils_system_time_now+0x4c>)
 8010432:	fba6 2305 	umull	r2, r3, r6, r5
 8010436:	fb05 3307 	mla	r3, r5, r7, r3
 801043a:	1852      	adds	r2, r2, r1
 801043c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8010440:	e9c4 2300 	strd	r2, r3, [r4]
 8010444:	b005      	add	sp, #20
 8010446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010448:	ea56 0307 	orrs.w	r3, r6, r7
 801044c:	d1ef      	bne.n	801042e <rcutils_system_time_now+0x22>
 801044e:	2002      	movs	r0, #2
 8010450:	b005      	add	sp, #20
 8010452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010454:	200b      	movs	r0, #11
 8010456:	4770      	bx	lr
 8010458:	3b9aca00 	.word	0x3b9aca00

0801045c <rcutils_steady_time_now>:
 801045c:	b310      	cbz	r0, 80104a4 <rcutils_steady_time_now+0x48>
 801045e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010460:	b085      	sub	sp, #20
 8010462:	4604      	mov	r4, r0
 8010464:	4669      	mov	r1, sp
 8010466:	2000      	movs	r0, #0
 8010468:	f7f3 fe92 	bl	8004190 <clock_gettime>
 801046c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010470:	2e00      	cmp	r6, #0
 8010472:	f177 0300 	sbcs.w	r3, r7, #0
 8010476:	db12      	blt.n	801049e <rcutils_steady_time_now+0x42>
 8010478:	9902      	ldr	r1, [sp, #8]
 801047a:	2900      	cmp	r1, #0
 801047c:	db0c      	blt.n	8010498 <rcutils_steady_time_now+0x3c>
 801047e:	2000      	movs	r0, #0
 8010480:	4d09      	ldr	r5, [pc, #36]	; (80104a8 <rcutils_steady_time_now+0x4c>)
 8010482:	fba6 2305 	umull	r2, r3, r6, r5
 8010486:	fb05 3307 	mla	r3, r5, r7, r3
 801048a:	1852      	adds	r2, r2, r1
 801048c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8010490:	e9c4 2300 	strd	r2, r3, [r4]
 8010494:	b005      	add	sp, #20
 8010496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010498:	ea56 0307 	orrs.w	r3, r6, r7
 801049c:	d1ef      	bne.n	801047e <rcutils_steady_time_now+0x22>
 801049e:	2002      	movs	r0, #2
 80104a0:	b005      	add	sp, #20
 80104a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104a4:	200b      	movs	r0, #11
 80104a6:	4770      	bx	lr
 80104a8:	3b9aca00 	.word	0x3b9aca00

080104ac <rmw_get_zero_initialized_init_options>:
 80104ac:	b510      	push	{r4, lr}
 80104ae:	4604      	mov	r4, r0
 80104b0:	2238      	movs	r2, #56	; 0x38
 80104b2:	2100      	movs	r1, #0
 80104b4:	f00a f94a 	bl	801a74c <memset>
 80104b8:	f104 0010 	add.w	r0, r4, #16
 80104bc:	f000 f808 	bl	80104d0 <rmw_get_default_security_options>
 80104c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104c4:	4620      	mov	r0, r4
 80104c6:	60e3      	str	r3, [r4, #12]
 80104c8:	bd10      	pop	{r4, pc}
 80104ca:	bf00      	nop

080104cc <rmw_get_default_publisher_options>:
 80104cc:	2000      	movs	r0, #0
 80104ce:	4770      	bx	lr

080104d0 <rmw_get_default_security_options>:
 80104d0:	2200      	movs	r2, #0
 80104d2:	7002      	strb	r2, [r0, #0]
 80104d4:	6042      	str	r2, [r0, #4]
 80104d6:	4770      	bx	lr

080104d8 <rmw_get_default_subscription_options>:
 80104d8:	2200      	movs	r2, #0
 80104da:	6002      	str	r2, [r0, #0]
 80104dc:	7102      	strb	r2, [r0, #4]
 80104de:	4770      	bx	lr

080104e0 <rmw_get_zero_initialized_message_info>:
 80104e0:	b470      	push	{r4, r5, r6}
 80104e2:	4604      	mov	r4, r0
 80104e4:	4606      	mov	r6, r0
 80104e6:	4d06      	ldr	r5, [pc, #24]	; (8010500 <rmw_get_zero_initialized_message_info+0x20>)
 80104e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80104f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80104f8:	4630      	mov	r0, r6
 80104fa:	bc70      	pop	{r4, r5, r6}
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	0801ce68 	.word	0x0801ce68

08010504 <rmw_validate_full_topic_name>:
 8010504:	2800      	cmp	r0, #0
 8010506:	d062      	beq.n	80105ce <rmw_validate_full_topic_name+0xca>
 8010508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801050c:	460d      	mov	r5, r1
 801050e:	2900      	cmp	r1, #0
 8010510:	d05f      	beq.n	80105d2 <rmw_validate_full_topic_name+0xce>
 8010512:	4616      	mov	r6, r2
 8010514:	4604      	mov	r4, r0
 8010516:	f7ef fe95 	bl	8000244 <strlen>
 801051a:	b148      	cbz	r0, 8010530 <rmw_validate_full_topic_name+0x2c>
 801051c:	7823      	ldrb	r3, [r4, #0]
 801051e:	2b2f      	cmp	r3, #47	; 0x2f
 8010520:	d00d      	beq.n	801053e <rmw_validate_full_topic_name+0x3a>
 8010522:	2302      	movs	r3, #2
 8010524:	602b      	str	r3, [r5, #0]
 8010526:	b13e      	cbz	r6, 8010538 <rmw_validate_full_topic_name+0x34>
 8010528:	2000      	movs	r0, #0
 801052a:	6030      	str	r0, [r6, #0]
 801052c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010530:	2301      	movs	r3, #1
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	2e00      	cmp	r6, #0
 8010536:	d1f7      	bne.n	8010528 <rmw_validate_full_topic_name+0x24>
 8010538:	2000      	movs	r0, #0
 801053a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801053e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8010542:	f814 300c 	ldrb.w	r3, [r4, ip]
 8010546:	2b2f      	cmp	r3, #47	; 0x2f
 8010548:	d045      	beq.n	80105d6 <rmw_validate_full_topic_name+0xd2>
 801054a:	4627      	mov	r7, r4
 801054c:	1e63      	subs	r3, r4, #1
 801054e:	eb03 0900 	add.w	r9, r3, r0
 8010552:	f1c4 0e01 	rsb	lr, r4, #1
 8010556:	eb0e 0803 	add.w	r8, lr, r3
 801055a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801055e:	f021 0220 	bic.w	r2, r1, #32
 8010562:	3a41      	subs	r2, #65	; 0x41
 8010564:	2a19      	cmp	r2, #25
 8010566:	f1a1 042f 	sub.w	r4, r1, #47	; 0x2f
 801056a:	d90b      	bls.n	8010584 <rmw_validate_full_topic_name+0x80>
 801056c:	295f      	cmp	r1, #95	; 0x5f
 801056e:	d009      	beq.n	8010584 <rmw_validate_full_topic_name+0x80>
 8010570:	2c0a      	cmp	r4, #10
 8010572:	d907      	bls.n	8010584 <rmw_validate_full_topic_name+0x80>
 8010574:	2304      	movs	r3, #4
 8010576:	602b      	str	r3, [r5, #0]
 8010578:	2e00      	cmp	r6, #0
 801057a:	d0dd      	beq.n	8010538 <rmw_validate_full_topic_name+0x34>
 801057c:	2000      	movs	r0, #0
 801057e:	f8c6 8000 	str.w	r8, [r6]
 8010582:	e7d3      	b.n	801052c <rmw_validate_full_topic_name+0x28>
 8010584:	454b      	cmp	r3, r9
 8010586:	d1e6      	bne.n	8010556 <rmw_validate_full_topic_name+0x52>
 8010588:	2300      	movs	r3, #0
 801058a:	f8df e084 	ldr.w	lr, [pc, #132]	; 8010610 <rmw_validate_full_topic_name+0x10c>
 801058e:	f10c 0801 	add.w	r8, ip, #1
 8010592:	e005      	b.n	80105a0 <rmw_validate_full_topic_name+0x9c>
 8010594:	4611      	mov	r1, r2
 8010596:	4288      	cmp	r0, r1
 8010598:	4613      	mov	r3, r2
 801059a:	f107 0701 	add.w	r7, r7, #1
 801059e:	d925      	bls.n	80105ec <rmw_validate_full_topic_name+0xe8>
 80105a0:	459c      	cmp	ip, r3
 80105a2:	f103 0201 	add.w	r2, r3, #1
 80105a6:	d01d      	beq.n	80105e4 <rmw_validate_full_topic_name+0xe0>
 80105a8:	7839      	ldrb	r1, [r7, #0]
 80105aa:	292f      	cmp	r1, #47	; 0x2f
 80105ac:	d1f2      	bne.n	8010594 <rmw_validate_full_topic_name+0x90>
 80105ae:	787c      	ldrb	r4, [r7, #1]
 80105b0:	1c5a      	adds	r2, r3, #1
 80105b2:	2c2f      	cmp	r4, #47	; 0x2f
 80105b4:	4611      	mov	r1, r2
 80105b6:	d026      	beq.n	8010606 <rmw_validate_full_topic_name+0x102>
 80105b8:	f814 300e 	ldrb.w	r3, [r4, lr]
 80105bc:	075b      	lsls	r3, r3, #29
 80105be:	d5ea      	bpl.n	8010596 <rmw_validate_full_topic_name+0x92>
 80105c0:	2306      	movs	r3, #6
 80105c2:	602b      	str	r3, [r5, #0]
 80105c4:	2e00      	cmp	r6, #0
 80105c6:	d0b7      	beq.n	8010538 <rmw_validate_full_topic_name+0x34>
 80105c8:	2000      	movs	r0, #0
 80105ca:	6032      	str	r2, [r6, #0]
 80105cc:	e7ae      	b.n	801052c <rmw_validate_full_topic_name+0x28>
 80105ce:	200b      	movs	r0, #11
 80105d0:	4770      	bx	lr
 80105d2:	200b      	movs	r0, #11
 80105d4:	e7aa      	b.n	801052c <rmw_validate_full_topic_name+0x28>
 80105d6:	2303      	movs	r3, #3
 80105d8:	602b      	str	r3, [r5, #0]
 80105da:	2e00      	cmp	r6, #0
 80105dc:	d0ac      	beq.n	8010538 <rmw_validate_full_topic_name+0x34>
 80105de:	f8c6 c000 	str.w	ip, [r6]
 80105e2:	e7a9      	b.n	8010538 <rmw_validate_full_topic_name+0x34>
 80105e4:	4641      	mov	r1, r8
 80105e6:	f10c 0201 	add.w	r2, ip, #1
 80105ea:	e7d4      	b.n	8010596 <rmw_validate_full_topic_name+0x92>
 80105ec:	28f7      	cmp	r0, #247	; 0xf7
 80105ee:	d802      	bhi.n	80105f6 <rmw_validate_full_topic_name+0xf2>
 80105f0:	2000      	movs	r0, #0
 80105f2:	6028      	str	r0, [r5, #0]
 80105f4:	e79a      	b.n	801052c <rmw_validate_full_topic_name+0x28>
 80105f6:	2307      	movs	r3, #7
 80105f8:	602b      	str	r3, [r5, #0]
 80105fa:	2e00      	cmp	r6, #0
 80105fc:	d09c      	beq.n	8010538 <rmw_validate_full_topic_name+0x34>
 80105fe:	23f6      	movs	r3, #246	; 0xf6
 8010600:	2000      	movs	r0, #0
 8010602:	6033      	str	r3, [r6, #0]
 8010604:	e792      	b.n	801052c <rmw_validate_full_topic_name+0x28>
 8010606:	2305      	movs	r3, #5
 8010608:	602b      	str	r3, [r5, #0]
 801060a:	2e00      	cmp	r6, #0
 801060c:	d1dc      	bne.n	80105c8 <rmw_validate_full_topic_name+0xc4>
 801060e:	e793      	b.n	8010538 <rmw_validate_full_topic_name+0x34>
 8010610:	0801d9bb 	.word	0x0801d9bb

08010614 <rmw_uros_set_custom_transport>:
 8010614:	b4f0      	push	{r4, r5, r6, r7}
 8010616:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801061a:	b16a      	cbz	r2, 8010638 <rmw_uros_set_custom_transport+0x24>
 801061c:	b163      	cbz	r3, 8010638 <rmw_uros_set_custom_transport+0x24>
 801061e:	b15e      	cbz	r6, 8010638 <rmw_uros_set_custom_transport+0x24>
 8010620:	b157      	cbz	r7, 8010638 <rmw_uros_set_custom_transport+0x24>
 8010622:	4605      	mov	r5, r0
 8010624:	4c06      	ldr	r4, [pc, #24]	; (8010640 <rmw_uros_set_custom_transport+0x2c>)
 8010626:	2000      	movs	r0, #0
 8010628:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801062c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8010630:	7025      	strb	r5, [r4, #0]
 8010632:	6167      	str	r7, [r4, #20]
 8010634:	bcf0      	pop	{r4, r5, r6, r7}
 8010636:	4770      	bx	lr
 8010638:	200b      	movs	r0, #11
 801063a:	bcf0      	pop	{r4, r5, r6, r7}
 801063c:	4770      	bx	lr
 801063e:	bf00      	nop
 8010640:	20009698 	.word	0x20009698

08010644 <rmw_init_options_init>:
 8010644:	b084      	sub	sp, #16
 8010646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801064a:	ad09      	add	r5, sp, #36	; 0x24
 801064c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010650:	b130      	cbz	r0, 8010660 <rmw_init_options_init+0x1c>
 8010652:	4604      	mov	r4, r0
 8010654:	4628      	mov	r0, r5
 8010656:	f7ff fca7 	bl	800ffa8 <rcutils_allocator_is_valid>
 801065a:	b108      	cbz	r0, 8010660 <rmw_init_options_init+0x1c>
 801065c:	68a3      	ldr	r3, [r4, #8]
 801065e:	b123      	cbz	r3, 801066a <rmw_init_options_init+0x26>
 8010660:	200b      	movs	r0, #11
 8010662:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010666:	b004      	add	sp, #16
 8010668:	4770      	bx	lr
 801066a:	f04f 0800 	mov.w	r8, #0
 801066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010670:	f04f 0900 	mov.w	r9, #0
 8010674:	4e1a      	ldr	r6, [pc, #104]	; (80106e0 <rmw_init_options_init+0x9c>)
 8010676:	e9c4 8900 	strd	r8, r9, [r4]
 801067a:	6837      	ldr	r7, [r6, #0]
 801067c:	f104 0620 	add.w	r6, r4, #32
 8010680:	60a7      	str	r7, [r4, #8]
 8010682:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010684:	682a      	ldr	r2, [r5, #0]
 8010686:	4b17      	ldr	r3, [pc, #92]	; (80106e4 <rmw_init_options_init+0xa0>)
 8010688:	6032      	str	r2, [r6, #0]
 801068a:	4817      	ldr	r0, [pc, #92]	; (80106e8 <rmw_init_options_init+0xa4>)
 801068c:	2203      	movs	r2, #3
 801068e:	4917      	ldr	r1, [pc, #92]	; (80106ec <rmw_init_options_init+0xa8>)
 8010690:	61e3      	str	r3, [r4, #28]
 8010692:	f000 ff9d 	bl	80115d0 <rmw_uxrce_init_init_options_impl_memory>
 8010696:	4814      	ldr	r0, [pc, #80]	; (80106e8 <rmw_init_options_init+0xa4>)
 8010698:	f008 fbc2 	bl	8018e20 <get_memory>
 801069c:	b1e8      	cbz	r0, 80106da <rmw_init_options_init+0x96>
 801069e:	4a14      	ldr	r2, [pc, #80]	; (80106f0 <rmw_init_options_init+0xac>)
 80106a0:	68c3      	ldr	r3, [r0, #12]
 80106a2:	6851      	ldr	r1, [r2, #4]
 80106a4:	7810      	ldrb	r0, [r2, #0]
 80106a6:	6363      	str	r3, [r4, #52]	; 0x34
 80106a8:	7418      	strb	r0, [r3, #16]
 80106aa:	6159      	str	r1, [r3, #20]
 80106ac:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 80106b0:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 80106b4:	e9c3 5006 	strd	r5, r0, [r3, #24]
 80106b8:	e9c3 1208 	strd	r1, r2, [r3, #32]
 80106bc:	f004 fd9e 	bl	80151fc <uxr_nanos>
 80106c0:	f00a f918 	bl	801a8f4 <srand>
 80106c4:	f00a f944 	bl	801a950 <rand>
 80106c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80106ca:	6298      	str	r0, [r3, #40]	; 0x28
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d0f9      	beq.n	80106c4 <rmw_init_options_init+0x80>
 80106d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106d4:	2000      	movs	r0, #0
 80106d6:	b004      	add	sp, #16
 80106d8:	4770      	bx	lr
 80106da:	2001      	movs	r0, #1
 80106dc:	e7c1      	b.n	8010662 <rmw_init_options_init+0x1e>
 80106de:	bf00      	nop
 80106e0:	0801d97c 	.word	0x0801d97c
 80106e4:	0801d1c0 	.word	0x0801d1c0
 80106e8:	2000c9b4 	.word	0x2000c9b4
 80106ec:	2000c608 	.word	0x2000c608
 80106f0:	20009698 	.word	0x20009698

080106f4 <rmw_init_options_copy>:
 80106f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f6:	b158      	cbz	r0, 8010710 <rmw_init_options_copy+0x1c>
 80106f8:	460d      	mov	r5, r1
 80106fa:	b149      	cbz	r1, 8010710 <rmw_init_options_copy+0x1c>
 80106fc:	4604      	mov	r4, r0
 80106fe:	6880      	ldr	r0, [r0, #8]
 8010700:	b120      	cbz	r0, 801070c <rmw_init_options_copy+0x18>
 8010702:	4b1b      	ldr	r3, [pc, #108]	; (8010770 <rmw_init_options_copy+0x7c>)
 8010704:	6819      	ldr	r1, [r3, #0]
 8010706:	f7ef fd93 	bl	8000230 <strcmp>
 801070a:	bb60      	cbnz	r0, 8010766 <rmw_init_options_copy+0x72>
 801070c:	68ab      	ldr	r3, [r5, #8]
 801070e:	b113      	cbz	r3, 8010716 <rmw_init_options_copy+0x22>
 8010710:	260b      	movs	r6, #11
 8010712:	4630      	mov	r0, r6
 8010714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010716:	4623      	mov	r3, r4
 8010718:	462a      	mov	r2, r5
 801071a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 801071e:	681f      	ldr	r7, [r3, #0]
 8010720:	685e      	ldr	r6, [r3, #4]
 8010722:	6898      	ldr	r0, [r3, #8]
 8010724:	68d9      	ldr	r1, [r3, #12]
 8010726:	3310      	adds	r3, #16
 8010728:	4563      	cmp	r3, ip
 801072a:	6017      	str	r7, [r2, #0]
 801072c:	6056      	str	r6, [r2, #4]
 801072e:	6090      	str	r0, [r2, #8]
 8010730:	60d1      	str	r1, [r2, #12]
 8010732:	f102 0210 	add.w	r2, r2, #16
 8010736:	d1f2      	bne.n	801071e <rmw_init_options_copy+0x2a>
 8010738:	6819      	ldr	r1, [r3, #0]
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	480d      	ldr	r0, [pc, #52]	; (8010774 <rmw_init_options_copy+0x80>)
 801073e:	6011      	str	r1, [r2, #0]
 8010740:	6053      	str	r3, [r2, #4]
 8010742:	f008 fb6d 	bl	8018e20 <get_memory>
 8010746:	b188      	cbz	r0, 801076c <rmw_init_options_copy+0x78>
 8010748:	2600      	movs	r6, #0
 801074a:	68c3      	ldr	r3, [r0, #12]
 801074c:	636b      	str	r3, [r5, #52]	; 0x34
 801074e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8010750:	f103 0410 	add.w	r4, r3, #16
 8010754:	3510      	adds	r5, #16
 8010756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801075a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801075e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010762:	4630      	mov	r0, r6
 8010764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010766:	260c      	movs	r6, #12
 8010768:	4630      	mov	r0, r6
 801076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801076c:	2601      	movs	r6, #1
 801076e:	e7d0      	b.n	8010712 <rmw_init_options_copy+0x1e>
 8010770:	0801d97c 	.word	0x0801d97c
 8010774:	2000c9b4 	.word	0x2000c9b4

08010778 <rmw_init_options_fini>:
 8010778:	2800      	cmp	r0, #0
 801077a:	d036      	beq.n	80107ea <rmw_init_options_fini+0x72>
 801077c:	b530      	push	{r4, r5, lr}
 801077e:	4604      	mov	r4, r0
 8010780:	b08f      	sub	sp, #60	; 0x3c
 8010782:	3020      	adds	r0, #32
 8010784:	f7ff fc10 	bl	800ffa8 <rcutils_allocator_is_valid>
 8010788:	b328      	cbz	r0, 80107d6 <rmw_init_options_fini+0x5e>
 801078a:	68a0      	ldr	r0, [r4, #8]
 801078c:	b120      	cbz	r0, 8010798 <rmw_init_options_fini+0x20>
 801078e:	4b18      	ldr	r3, [pc, #96]	; (80107f0 <rmw_init_options_fini+0x78>)
 8010790:	6819      	ldr	r1, [r3, #0]
 8010792:	f7ef fd4d 	bl	8000230 <strcmp>
 8010796:	bb30      	cbnz	r0, 80107e6 <rmw_init_options_fini+0x6e>
 8010798:	4b16      	ldr	r3, [pc, #88]	; (80107f4 <rmw_init_options_fini+0x7c>)
 801079a:	6819      	ldr	r1, [r3, #0]
 801079c:	b1f9      	cbz	r1, 80107de <rmw_init_options_fini+0x66>
 801079e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80107a0:	e001      	b.n	80107a6 <rmw_init_options_fini+0x2e>
 80107a2:	6889      	ldr	r1, [r1, #8]
 80107a4:	b1d9      	cbz	r1, 80107de <rmw_init_options_fini+0x66>
 80107a6:	68cb      	ldr	r3, [r1, #12]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d1fa      	bne.n	80107a2 <rmw_init_options_fini+0x2a>
 80107ac:	466d      	mov	r5, sp
 80107ae:	4811      	ldr	r0, [pc, #68]	; (80107f4 <rmw_init_options_fini+0x7c>)
 80107b0:	f008 fb46 	bl	8018e40 <put_memory>
 80107b4:	4668      	mov	r0, sp
 80107b6:	f7ff fe79 	bl	80104ac <rmw_get_zero_initialized_init_options>
 80107ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80107c6:	2300      	movs	r3, #0
 80107c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80107cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80107d0:	4618      	mov	r0, r3
 80107d2:	b00f      	add	sp, #60	; 0x3c
 80107d4:	bd30      	pop	{r4, r5, pc}
 80107d6:	230b      	movs	r3, #11
 80107d8:	4618      	mov	r0, r3
 80107da:	b00f      	add	sp, #60	; 0x3c
 80107dc:	bd30      	pop	{r4, r5, pc}
 80107de:	2301      	movs	r3, #1
 80107e0:	4618      	mov	r0, r3
 80107e2:	b00f      	add	sp, #60	; 0x3c
 80107e4:	bd30      	pop	{r4, r5, pc}
 80107e6:	230c      	movs	r3, #12
 80107e8:	e7f2      	b.n	80107d0 <rmw_init_options_fini+0x58>
 80107ea:	230b      	movs	r3, #11
 80107ec:	4618      	mov	r0, r3
 80107ee:	4770      	bx	lr
 80107f0:	0801d97c 	.word	0x0801d97c
 80107f4:	2000c9b4 	.word	0x2000c9b4

080107f8 <rmw_init>:
 80107f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107fc:	b083      	sub	sp, #12
 80107fe:	2800      	cmp	r0, #0
 8010800:	f000 8087 	beq.w	8010912 <rmw_init+0x11a>
 8010804:	460e      	mov	r6, r1
 8010806:	2900      	cmp	r1, #0
 8010808:	f000 8083 	beq.w	8010912 <rmw_init+0x11a>
 801080c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801080e:	4605      	mov	r5, r0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d07e      	beq.n	8010912 <rmw_init+0x11a>
 8010814:	4b70      	ldr	r3, [pc, #448]	; (80109d8 <rmw_init+0x1e0>)
 8010816:	6880      	ldr	r0, [r0, #8]
 8010818:	f8d3 8000 	ldr.w	r8, [r3]
 801081c:	b120      	cbz	r0, 8010828 <rmw_init+0x30>
 801081e:	4641      	mov	r1, r8
 8010820:	f7ef fd06 	bl	8000230 <strcmp>
 8010824:	2800      	cmp	r0, #0
 8010826:	d17e      	bne.n	8010926 <rmw_init+0x12e>
 8010828:	e9d5 2300 	ldrd	r2, r3, [r5]
 801082c:	68e9      	ldr	r1, [r5, #12]
 801082e:	486b      	ldr	r0, [pc, #428]	; (80109dc <rmw_init+0x1e4>)
 8010830:	e9c6 2300 	strd	r2, r3, [r6]
 8010834:	61f1      	str	r1, [r6, #28]
 8010836:	2201      	movs	r2, #1
 8010838:	4969      	ldr	r1, [pc, #420]	; (80109e0 <rmw_init+0x1e8>)
 801083a:	f8c6 8008 	str.w	r8, [r6, #8]
 801083e:	f000 fe6d 	bl	801151c <rmw_uxrce_init_session_memory>
 8010842:	4868      	ldr	r0, [pc, #416]	; (80109e4 <rmw_init+0x1ec>)
 8010844:	2204      	movs	r2, #4
 8010846:	4968      	ldr	r1, [pc, #416]	; (80109e8 <rmw_init+0x1f0>)
 8010848:	f000 fea4 	bl	8011594 <rmw_uxrce_init_static_input_buffer_memory>
 801084c:	4863      	ldr	r0, [pc, #396]	; (80109dc <rmw_init+0x1e4>)
 801084e:	f008 fae7 	bl	8018e20 <get_memory>
 8010852:	2800      	cmp	r0, #0
 8010854:	d062      	beq.n	801091c <rmw_init+0x124>
 8010856:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8010858:	68c4      	ldr	r4, [r0, #12]
 801085a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801085c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010860:	7c39      	ldrb	r1, [r7, #16]
 8010862:	9001      	str	r0, [sp, #4]
 8010864:	6a38      	ldr	r0, [r7, #32]
 8010866:	f104 0910 	add.w	r9, r4, #16
 801086a:	9000      	str	r0, [sp, #0]
 801086c:	4648      	mov	r0, r9
 801086e:	f002 fdbd 	bl	80133ec <uxr_set_custom_transport_callbacks>
 8010872:	2700      	movs	r7, #0
 8010874:	f241 5194 	movw	r1, #5524	; 0x1594
 8010878:	f241 5398 	movw	r3, #5528	; 0x1598
 801087c:	f241 509c 	movw	r0, #5532	; 0x159c
 8010880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010884:	5067      	str	r7, [r4, r1]
 8010886:	50e7      	str	r7, [r4, r3]
 8010888:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 801088c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8010890:	5027      	str	r7, [r4, r0]
 8010892:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8010896:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801089a:	4854      	ldr	r0, [pc, #336]	; (80109ec <rmw_init+0x1f4>)
 801089c:	600f      	str	r7, [r1, #0]
 801089e:	2201      	movs	r2, #1
 80108a0:	e9c4 87da 	strd	r8, r7, [r4, #872]	; 0x368
 80108a4:	4952      	ldr	r1, [pc, #328]	; (80109f0 <rmw_init+0x1f8>)
 80108a6:	64b4      	str	r4, [r6, #72]	; 0x48
 80108a8:	f000 fe1e 	bl	80114e8 <rmw_uxrce_init_node_memory>
 80108ac:	2205      	movs	r2, #5
 80108ae:	4951      	ldr	r1, [pc, #324]	; (80109f4 <rmw_init+0x1fc>)
 80108b0:	4851      	ldr	r0, [pc, #324]	; (80109f8 <rmw_init+0x200>)
 80108b2:	f000 fdff 	bl	80114b4 <rmw_uxrce_init_subscription_memory>
 80108b6:	220a      	movs	r2, #10
 80108b8:	4950      	ldr	r1, [pc, #320]	; (80109fc <rmw_init+0x204>)
 80108ba:	4851      	ldr	r0, [pc, #324]	; (8010a00 <rmw_init+0x208>)
 80108bc:	f000 fde0 	bl	8011480 <rmw_uxrce_init_publisher_memory>
 80108c0:	2201      	movs	r2, #1
 80108c2:	4950      	ldr	r1, [pc, #320]	; (8010a04 <rmw_init+0x20c>)
 80108c4:	4850      	ldr	r0, [pc, #320]	; (8010a08 <rmw_init+0x210>)
 80108c6:	f000 fda7 	bl	8011418 <rmw_uxrce_init_service_memory>
 80108ca:	2201      	movs	r2, #1
 80108cc:	494f      	ldr	r1, [pc, #316]	; (8010a0c <rmw_init+0x214>)
 80108ce:	4850      	ldr	r0, [pc, #320]	; (8010a10 <rmw_init+0x218>)
 80108d0:	f000 fdbc 	bl	801144c <rmw_uxrce_init_client_memory>
 80108d4:	220f      	movs	r2, #15
 80108d6:	494f      	ldr	r1, [pc, #316]	; (8010a14 <rmw_init+0x21c>)
 80108d8:	484f      	ldr	r0, [pc, #316]	; (8010a18 <rmw_init+0x220>)
 80108da:	f000 fe3f 	bl	801155c <rmw_uxrce_init_topic_memory>
 80108de:	2203      	movs	r2, #3
 80108e0:	494e      	ldr	r1, [pc, #312]	; (8010a1c <rmw_init+0x224>)
 80108e2:	484f      	ldr	r0, [pc, #316]	; (8010a20 <rmw_init+0x228>)
 80108e4:	f000 fe74 	bl	80115d0 <rmw_uxrce_init_init_options_impl_memory>
 80108e8:	2204      	movs	r2, #4
 80108ea:	494e      	ldr	r1, [pc, #312]	; (8010a24 <rmw_init+0x22c>)
 80108ec:	484e      	ldr	r0, [pc, #312]	; (8010a28 <rmw_init+0x230>)
 80108ee:	f000 fe89 	bl	8011604 <rmw_uxrce_init_wait_set_memory>
 80108f2:	2204      	movs	r2, #4
 80108f4:	494d      	ldr	r1, [pc, #308]	; (8010a2c <rmw_init+0x234>)
 80108f6:	484e      	ldr	r0, [pc, #312]	; (8010a30 <rmw_init+0x238>)
 80108f8:	f000 fea0 	bl	801163c <rmw_uxrce_init_guard_condition_memory>
 80108fc:	463a      	mov	r2, r7
 80108fe:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8010900:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8010902:	f000 fd51 	bl	80113a8 <rmw_uxrce_transport_init>
 8010906:	4607      	mov	r7, r0
 8010908:	b190      	cbz	r0, 8010930 <rmw_init+0x138>
 801090a:	4638      	mov	r0, r7
 801090c:	b003      	add	sp, #12
 801090e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010912:	270b      	movs	r7, #11
 8010914:	4638      	mov	r0, r7
 8010916:	b003      	add	sp, #12
 8010918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801091c:	2701      	movs	r7, #1
 801091e:	4638      	mov	r0, r7
 8010920:	b003      	add	sp, #12
 8010922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010926:	270c      	movs	r7, #12
 8010928:	4638      	mov	r0, r7
 801092a:	b003      	add	sp, #12
 801092c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010930:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8010932:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8010936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010938:	4628      	mov	r0, r5
 801093a:	f504 7122 	add.w	r1, r4, #648	; 0x288
 801093e:	f003 fa69 	bl	8013e14 <uxr_init_session>
 8010942:	4622      	mov	r2, r4
 8010944:	4628      	mov	r0, r5
 8010946:	493b      	ldr	r1, [pc, #236]	; (8010a34 <rmw_init+0x23c>)
 8010948:	f003 fa86 	bl	8013e58 <uxr_set_topic_callback>
 801094c:	463a      	mov	r2, r7
 801094e:	4628      	mov	r0, r5
 8010950:	4939      	ldr	r1, [pc, #228]	; (8010a38 <rmw_init+0x240>)
 8010952:	f003 fa7d 	bl	8013e50 <uxr_set_status_callback>
 8010956:	463a      	mov	r2, r7
 8010958:	4628      	mov	r0, r5
 801095a:	4938      	ldr	r1, [pc, #224]	; (8010a3c <rmw_init+0x244>)
 801095c:	f003 fa80 	bl	8013e60 <uxr_set_request_callback>
 8010960:	463a      	mov	r2, r7
 8010962:	4628      	mov	r0, r5
 8010964:	4936      	ldr	r1, [pc, #216]	; (8010a40 <rmw_init+0x248>)
 8010966:	f003 fa7f 	bl	8013e68 <uxr_set_reply_callback>
 801096a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801096e:	2304      	movs	r3, #4
 8010970:	0092      	lsls	r2, r2, #2
 8010972:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8010976:	4628      	mov	r0, r5
 8010978:	f003 fb44 	bl	8014004 <uxr_create_input_reliable_stream>
 801097c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010980:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8010984:	0092      	lsls	r2, r2, #2
 8010986:	2304      	movs	r3, #4
 8010988:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801098c:	4628      	mov	r0, r5
 801098e:	f003 fb0f 	bl	8013fb0 <uxr_create_output_reliable_stream>
 8010992:	4603      	mov	r3, r0
 8010994:	4628      	mov	r0, r5
 8010996:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 801099a:	f003 fb2d 	bl	8013ff8 <uxr_create_input_best_effort_stream>
 801099e:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80109a2:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80109a6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80109aa:	4628      	mov	r0, r5
 80109ac:	3114      	adds	r1, #20
 80109ae:	f003 faed 	bl	8013f8c <uxr_create_output_best_effort_stream>
 80109b2:	4603      	mov	r3, r0
 80109b4:	4628      	mov	r0, r5
 80109b6:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 80109ba:	f003 fa59 	bl	8013e70 <uxr_create_session>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d1a3      	bne.n	801090a <rmw_init+0x112>
 80109c2:	4648      	mov	r0, r9
 80109c4:	f002 fd52 	bl	801346c <uxr_close_custom_transport>
 80109c8:	4621      	mov	r1, r4
 80109ca:	4804      	ldr	r0, [pc, #16]	; (80109dc <rmw_init+0x1e4>)
 80109cc:	f008 fa38 	bl	8018e40 <put_memory>
 80109d0:	64b7      	str	r7, [r6, #72]	; 0x48
 80109d2:	2701      	movs	r7, #1
 80109d4:	e799      	b.n	801090a <rmw_init+0x112>
 80109d6:	bf00      	nop
 80109d8:	0801d97c 	.word	0x0801d97c
 80109dc:	2000c860 	.word	0x2000c860
 80109e0:	2000ca90 	.word	0x2000ca90
 80109e4:	200096b8 	.word	0x200096b8
 80109e8:	2000a498 	.word	0x2000a498
 80109ec:	2000c68c 	.word	0x2000c68c
 80109f0:	2000c870 	.word	0x2000c870
 80109f4:	20009fc0 	.word	0x20009fc0
 80109f8:	2000c924 	.word	0x2000c924
 80109fc:	200096d8 	.word	0x200096d8
 8010a00:	200096c8 	.word	0x200096c8
 8010a04:	2000c9c8 	.word	0x2000c9c8
 8010a08:	2000c914 	.word	0x2000c914
 8010a0c:	2000a3d0 	.word	0x2000a3d0
 8010a10:	20009f48 	.word	0x20009f48
 8010a14:	2000c69c 	.word	0x2000c69c
 8010a18:	2000c850 	.word	0x2000c850
 8010a1c:	2000c608 	.word	0x2000c608
 8010a20:	2000c9b4 	.word	0x2000c9b4
 8010a24:	2000c598 	.word	0x2000c598
 8010a28:	2000e038 	.word	0x2000e038
 8010a2c:	2000c934 	.word	0x2000c934
 8010a30:	2000c840 	.word	0x2000c840
 8010a34:	08018c59 	.word	0x08018c59
 8010a38:	08018c51 	.word	0x08018c51
 8010a3c:	08018ced 	.word	0x08018ced
 8010a40:	08018d89 	.word	0x08018d89

08010a44 <rmw_context_fini>:
 8010a44:	4b17      	ldr	r3, [pc, #92]	; (8010aa4 <rmw_context_fini+0x60>)
 8010a46:	b570      	push	{r4, r5, r6, lr}
 8010a48:	681c      	ldr	r4, [r3, #0]
 8010a4a:	4605      	mov	r5, r0
 8010a4c:	b33c      	cbz	r4, 8010a9e <rmw_context_fini+0x5a>
 8010a4e:	2600      	movs	r6, #0
 8010a50:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8010a52:	68e0      	ldr	r0, [r4, #12]
 8010a54:	68a4      	ldr	r4, [r4, #8]
 8010a56:	6902      	ldr	r2, [r0, #16]
 8010a58:	428a      	cmp	r2, r1
 8010a5a:	d018      	beq.n	8010a8e <rmw_context_fini+0x4a>
 8010a5c:	2c00      	cmp	r4, #0
 8010a5e:	d1f8      	bne.n	8010a52 <rmw_context_fini+0xe>
 8010a60:	b189      	cbz	r1, 8010a86 <rmw_context_fini+0x42>
 8010a62:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8010a66:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8010a6a:	789b      	ldrb	r3, [r3, #2]
 8010a6c:	2b01      	cmp	r3, #1
 8010a6e:	bf14      	ite	ne
 8010a70:	210a      	movne	r1, #10
 8010a72:	2100      	moveq	r1, #0
 8010a74:	f003 fa40 	bl	8013ef8 <uxr_delete_session_retries>
 8010a78:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010a7a:	f000 fdf9 	bl	8011670 <rmw_uxrce_fini_session_memory>
 8010a7e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8010a80:	3010      	adds	r0, #16
 8010a82:	f002 fcf3 	bl	801346c <uxr_close_custom_transport>
 8010a86:	2300      	movs	r3, #0
 8010a88:	4630      	mov	r0, r6
 8010a8a:	64ab      	str	r3, [r5, #72]	; 0x48
 8010a8c:	bd70      	pop	{r4, r5, r6, pc}
 8010a8e:	3018      	adds	r0, #24
 8010a90:	f000 f89c 	bl	8010bcc <rmw_destroy_node>
 8010a94:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8010a96:	4606      	mov	r6, r0
 8010a98:	2c00      	cmp	r4, #0
 8010a9a:	d1da      	bne.n	8010a52 <rmw_context_fini+0xe>
 8010a9c:	e7e0      	b.n	8010a60 <rmw_context_fini+0x1c>
 8010a9e:	4626      	mov	r6, r4
 8010aa0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8010aa2:	e7dd      	b.n	8010a60 <rmw_context_fini+0x1c>
 8010aa4:	2000c68c 	.word	0x2000c68c

08010aa8 <create_node>:
 8010aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010aac:	b083      	sub	sp, #12
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d05f      	beq.n	8010b72 <create_node+0xca>
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	4835      	ldr	r0, [pc, #212]	; (8010b8c <create_node+0xe4>)
 8010ab6:	460f      	mov	r7, r1
 8010ab8:	4690      	mov	r8, r2
 8010aba:	461d      	mov	r5, r3
 8010abc:	f008 f9b0 	bl	8018e20 <get_memory>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	d056      	beq.n	8010b72 <create_node+0xca>
 8010ac4:	68c4      	ldr	r4, [r0, #12]
 8010ac6:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8010ac8:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8010acc:	6123      	str	r3, [r4, #16]
 8010ace:	f008 fa0f 	bl	8018ef0 <rmw_get_implementation_identifier>
 8010ad2:	f8c4 9020 	str.w	r9, [r4, #32]
 8010ad6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8010ada:	4630      	mov	r0, r6
 8010adc:	f7ef fbb2 	bl	8000244 <strlen>
 8010ae0:	1c42      	adds	r2, r0, #1
 8010ae2:	2a3c      	cmp	r2, #60	; 0x3c
 8010ae4:	f104 0518 	add.w	r5, r4, #24
 8010ae8:	d840      	bhi.n	8010b6c <create_node+0xc4>
 8010aea:	4648      	mov	r0, r9
 8010aec:	4631      	mov	r1, r6
 8010aee:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8010af2:	f009 fe03 	bl	801a6fc <memcpy>
 8010af6:	4638      	mov	r0, r7
 8010af8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8010afc:	f7ef fba2 	bl	8000244 <strlen>
 8010b00:	1c42      	adds	r2, r0, #1
 8010b02:	2a3c      	cmp	r2, #60	; 0x3c
 8010b04:	d832      	bhi.n	8010b6c <create_node+0xc4>
 8010b06:	4639      	mov	r1, r7
 8010b08:	4648      	mov	r0, r9
 8010b0a:	f009 fdf7 	bl	801a6fc <memcpy>
 8010b0e:	f241 5394 	movw	r3, #5524	; 0x1594
 8010b12:	2101      	movs	r1, #1
 8010b14:	6922      	ldr	r2, [r4, #16]
 8010b16:	5ad0      	ldrh	r0, [r2, r3]
 8010b18:	eb00 0c01 	add.w	ip, r0, r1
 8010b1c:	f822 c003 	strh.w	ip, [r2, r3]
 8010b20:	f002 fca8 	bl	8013474 <uxr_object_id>
 8010b24:	6160      	str	r0, [r4, #20]
 8010b26:	783b      	ldrb	r3, [r7, #0]
 8010b28:	2b2f      	cmp	r3, #47	; 0x2f
 8010b2a:	d127      	bne.n	8010b7c <create_node+0xd4>
 8010b2c:	787b      	ldrb	r3, [r7, #1]
 8010b2e:	bb2b      	cbnz	r3, 8010b7c <create_node+0xd4>
 8010b30:	4633      	mov	r3, r6
 8010b32:	213c      	movs	r1, #60	; 0x3c
 8010b34:	4a16      	ldr	r2, [pc, #88]	; (8010b90 <create_node+0xe8>)
 8010b36:	4817      	ldr	r0, [pc, #92]	; (8010b94 <create_node+0xec>)
 8010b38:	f009 ff62 	bl	801aa00 <sniprintf>
 8010b3c:	2106      	movs	r1, #6
 8010b3e:	6920      	ldr	r0, [r4, #16]
 8010b40:	4b14      	ldr	r3, [pc, #80]	; (8010b94 <create_node+0xec>)
 8010b42:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8010b46:	e9cd 3100 	strd	r3, r1, [sp]
 8010b4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010b4e:	6811      	ldr	r1, [r2, #0]
 8010b50:	fa1f f388 	uxth.w	r3, r8
 8010b54:	6962      	ldr	r2, [r4, #20]
 8010b56:	f002 fa05 	bl	8012f64 <uxr_buffer_create_participant_bin>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	6920      	ldr	r0, [r4, #16]
 8010b5e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010b62:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010b66:	f000 fef3 	bl	8011950 <run_xrce_session>
 8010b6a:	b918      	cbnz	r0, 8010b74 <create_node+0xcc>
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f000 fd85 	bl	801167c <rmw_uxrce_fini_node_memory>
 8010b72:	2500      	movs	r5, #0
 8010b74:	4628      	mov	r0, r5
 8010b76:	b003      	add	sp, #12
 8010b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b7c:	463b      	mov	r3, r7
 8010b7e:	213c      	movs	r1, #60	; 0x3c
 8010b80:	4a05      	ldr	r2, [pc, #20]	; (8010b98 <create_node+0xf0>)
 8010b82:	9600      	str	r6, [sp, #0]
 8010b84:	4803      	ldr	r0, [pc, #12]	; (8010b94 <create_node+0xec>)
 8010b86:	f009 ff3b 	bl	801aa00 <sniprintf>
 8010b8a:	e7d7      	b.n	8010b3c <create_node+0x94>
 8010b8c:	2000c68c 	.word	0x2000c68c
 8010b90:	0801d1dc 	.word	0x0801d1dc
 8010b94:	20006840 	.word	0x20006840
 8010b98:	0801d1c4 	.word	0x0801d1c4

08010b9c <rmw_create_node>:
 8010b9c:	b199      	cbz	r1, 8010bc6 <rmw_create_node+0x2a>
 8010b9e:	b430      	push	{r4, r5}
 8010ba0:	4614      	mov	r4, r2
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	780b      	ldrb	r3, [r1, #0]
 8010ba6:	4605      	mov	r5, r0
 8010ba8:	4608      	mov	r0, r1
 8010baa:	b14b      	cbz	r3, 8010bc0 <rmw_create_node+0x24>
 8010bac:	b144      	cbz	r4, 8010bc0 <rmw_create_node+0x24>
 8010bae:	7823      	ldrb	r3, [r4, #0]
 8010bb0:	b133      	cbz	r3, 8010bc0 <rmw_create_node+0x24>
 8010bb2:	b902      	cbnz	r2, 8010bb6 <rmw_create_node+0x1a>
 8010bb4:	69ea      	ldr	r2, [r5, #28]
 8010bb6:	462b      	mov	r3, r5
 8010bb8:	4621      	mov	r1, r4
 8010bba:	bc30      	pop	{r4, r5}
 8010bbc:	f7ff bf74 	b.w	8010aa8 <create_node>
 8010bc0:	2000      	movs	r0, #0
 8010bc2:	bc30      	pop	{r4, r5}
 8010bc4:	4770      	bx	lr
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop

08010bcc <rmw_destroy_node>:
 8010bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	d067      	beq.n	8010ca2 <rmw_destroy_node+0xd6>
 8010bd2:	4607      	mov	r7, r0
 8010bd4:	6800      	ldr	r0, [r0, #0]
 8010bd6:	b128      	cbz	r0, 8010be4 <rmw_destroy_node+0x18>
 8010bd8:	4b34      	ldr	r3, [pc, #208]	; (8010cac <rmw_destroy_node+0xe0>)
 8010bda:	6819      	ldr	r1, [r3, #0]
 8010bdc:	f7ef fb28 	bl	8000230 <strcmp>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	d15e      	bne.n	8010ca2 <rmw_destroy_node+0xd6>
 8010be4:	687c      	ldr	r4, [r7, #4]
 8010be6:	2c00      	cmp	r4, #0
 8010be8:	d05b      	beq.n	8010ca2 <rmw_destroy_node+0xd6>
 8010bea:	4b31      	ldr	r3, [pc, #196]	; (8010cb0 <rmw_destroy_node+0xe4>)
 8010bec:	681d      	ldr	r5, [r3, #0]
 8010bee:	2d00      	cmp	r5, #0
 8010bf0:	d05a      	beq.n	8010ca8 <rmw_destroy_node+0xdc>
 8010bf2:	2600      	movs	r6, #0
 8010bf4:	68e9      	ldr	r1, [r5, #12]
 8010bf6:	68ad      	ldr	r5, [r5, #8]
 8010bf8:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8010bfc:	429c      	cmp	r4, r3
 8010bfe:	d048      	beq.n	8010c92 <rmw_destroy_node+0xc6>
 8010c00:	2d00      	cmp	r5, #0
 8010c02:	d1f7      	bne.n	8010bf4 <rmw_destroy_node+0x28>
 8010c04:	4b2b      	ldr	r3, [pc, #172]	; (8010cb4 <rmw_destroy_node+0xe8>)
 8010c06:	681d      	ldr	r5, [r3, #0]
 8010c08:	b15d      	cbz	r5, 8010c22 <rmw_destroy_node+0x56>
 8010c0a:	68e9      	ldr	r1, [r5, #12]
 8010c0c:	68ad      	ldr	r5, [r5, #8]
 8010c0e:	6a0b      	ldr	r3, [r1, #32]
 8010c10:	429c      	cmp	r4, r3
 8010c12:	d1f9      	bne.n	8010c08 <rmw_destroy_node+0x3c>
 8010c14:	4638      	mov	r0, r7
 8010c16:	317c      	adds	r1, #124	; 0x7c
 8010c18:	f000 fb14 	bl	8011244 <rmw_destroy_subscription>
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	2d00      	cmp	r5, #0
 8010c20:	d1f3      	bne.n	8010c0a <rmw_destroy_node+0x3e>
 8010c22:	4b25      	ldr	r3, [pc, #148]	; (8010cb8 <rmw_destroy_node+0xec>)
 8010c24:	681d      	ldr	r5, [r3, #0]
 8010c26:	b15d      	cbz	r5, 8010c40 <rmw_destroy_node+0x74>
 8010c28:	68e9      	ldr	r1, [r5, #12]
 8010c2a:	68ad      	ldr	r5, [r5, #8]
 8010c2c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010c2e:	429c      	cmp	r4, r3
 8010c30:	d1f9      	bne.n	8010c26 <rmw_destroy_node+0x5a>
 8010c32:	4638      	mov	r0, r7
 8010c34:	317c      	adds	r1, #124	; 0x7c
 8010c36:	f000 f9db 	bl	8010ff0 <rmw_destroy_service>
 8010c3a:	4606      	mov	r6, r0
 8010c3c:	2d00      	cmp	r5, #0
 8010c3e:	d1f3      	bne.n	8010c28 <rmw_destroy_node+0x5c>
 8010c40:	4b1e      	ldr	r3, [pc, #120]	; (8010cbc <rmw_destroy_node+0xf0>)
 8010c42:	681d      	ldr	r5, [r3, #0]
 8010c44:	b15d      	cbz	r5, 8010c5e <rmw_destroy_node+0x92>
 8010c46:	68e9      	ldr	r1, [r5, #12]
 8010c48:	68ad      	ldr	r5, [r5, #8]
 8010c4a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010c4c:	429c      	cmp	r4, r3
 8010c4e:	d1f9      	bne.n	8010c44 <rmw_destroy_node+0x78>
 8010c50:	4638      	mov	r0, r7
 8010c52:	317c      	adds	r1, #124	; 0x7c
 8010c54:	f008 f908 	bl	8018e68 <rmw_destroy_client>
 8010c58:	4606      	mov	r6, r0
 8010c5a:	2d00      	cmp	r5, #0
 8010c5c:	d1f3      	bne.n	8010c46 <rmw_destroy_node+0x7a>
 8010c5e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8010c62:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010c66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010c6a:	6819      	ldr	r1, [r3, #0]
 8010c6c:	f002 f92c 	bl	8012ec8 <uxr_buffer_delete_entity>
 8010c70:	4602      	mov	r2, r0
 8010c72:	6920      	ldr	r0, [r4, #16]
 8010c74:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010c78:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010c7c:	f000 fe68 	bl	8011950 <run_xrce_session>
 8010c80:	4603      	mov	r3, r0
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	bf08      	it	eq
 8010c86:	2602      	moveq	r6, #2
 8010c88:	4638      	mov	r0, r7
 8010c8a:	f000 fcf7 	bl	801167c <rmw_uxrce_fini_node_memory>
 8010c8e:	4630      	mov	r0, r6
 8010c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c92:	4638      	mov	r0, r7
 8010c94:	3184      	adds	r1, #132	; 0x84
 8010c96:	f000 f95b 	bl	8010f50 <rmw_destroy_publisher>
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	2d00      	cmp	r5, #0
 8010c9e:	d1a9      	bne.n	8010bf4 <rmw_destroy_node+0x28>
 8010ca0:	e7b0      	b.n	8010c04 <rmw_destroy_node+0x38>
 8010ca2:	2601      	movs	r6, #1
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ca8:	462e      	mov	r6, r5
 8010caa:	e7ab      	b.n	8010c04 <rmw_destroy_node+0x38>
 8010cac:	0801d97c 	.word	0x0801d97c
 8010cb0:	200096c8 	.word	0x200096c8
 8010cb4:	2000c924 	.word	0x2000c924
 8010cb8:	2000c914 	.word	0x2000c914
 8010cbc:	20009f48 	.word	0x20009f48

08010cc0 <rmw_node_get_graph_guard_condition>:
 8010cc0:	6843      	ldr	r3, [r0, #4]
 8010cc2:	6918      	ldr	r0, [r3, #16]
 8010cc4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop

08010ccc <flush_session>:
 8010ccc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8010cce:	f003 baa7 	b.w	8014220 <uxr_run_session_until_confirm_delivery>
 8010cd2:	bf00      	nop

08010cd4 <rmw_publish>:
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d053      	beq.n	8010d80 <rmw_publish+0xac>
 8010cd8:	b570      	push	{r4, r5, r6, lr}
 8010cda:	460d      	mov	r5, r1
 8010cdc:	b08e      	sub	sp, #56	; 0x38
 8010cde:	2900      	cmp	r1, #0
 8010ce0:	d04b      	beq.n	8010d7a <rmw_publish+0xa6>
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	6800      	ldr	r0, [r0, #0]
 8010ce6:	f000 feb7 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8010cea:	2800      	cmp	r0, #0
 8010cec:	d045      	beq.n	8010d7a <rmw_publish+0xa6>
 8010cee:	6866      	ldr	r6, [r4, #4]
 8010cf0:	2e00      	cmp	r6, #0
 8010cf2:	d042      	beq.n	8010d7a <rmw_publish+0xa6>
 8010cf4:	69b4      	ldr	r4, [r6, #24]
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	6923      	ldr	r3, [r4, #16]
 8010cfa:	4798      	blx	r3
 8010cfc:	69f3      	ldr	r3, [r6, #28]
 8010cfe:	9005      	str	r0, [sp, #20]
 8010d00:	b113      	cbz	r3, 8010d08 <rmw_publish+0x34>
 8010d02:	a805      	add	r0, sp, #20
 8010d04:	4798      	blx	r3
 8010d06:	9805      	ldr	r0, [sp, #20]
 8010d08:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010d0c:	691b      	ldr	r3, [r3, #16]
 8010d0e:	9000      	str	r0, [sp, #0]
 8010d10:	6972      	ldr	r2, [r6, #20]
 8010d12:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010d16:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010d18:	ab06      	add	r3, sp, #24
 8010d1a:	f004 fb11 	bl	8015340 <uxr_prepare_output_stream>
 8010d1e:	b1d8      	cbz	r0, 8010d58 <rmw_publish+0x84>
 8010d20:	68a3      	ldr	r3, [r4, #8]
 8010d22:	4628      	mov	r0, r5
 8010d24:	a906      	add	r1, sp, #24
 8010d26:	4798      	blx	r3
 8010d28:	6a33      	ldr	r3, [r6, #32]
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	b10b      	cbz	r3, 8010d32 <rmw_publish+0x5e>
 8010d2e:	a806      	add	r0, sp, #24
 8010d30:	4798      	blx	r3
 8010d32:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8010d3c:	d022      	beq.n	8010d84 <rmw_publish+0xb0>
 8010d3e:	6918      	ldr	r0, [r3, #16]
 8010d40:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8010d42:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d46:	f003 fa6b 	bl	8014220 <uxr_run_session_until_confirm_delivery>
 8010d4a:	4004      	ands	r4, r0
 8010d4c:	b2e4      	uxtb	r4, r4
 8010d4e:	f084 0001 	eor.w	r0, r4, #1
 8010d52:	b2c0      	uxtb	r0, r0
 8010d54:	b00e      	add	sp, #56	; 0x38
 8010d56:	bd70      	pop	{r4, r5, r6, pc}
 8010d58:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 8010d5c:	4a0c      	ldr	r2, [pc, #48]	; (8010d90 <rmw_publish+0xbc>)
 8010d5e:	6908      	ldr	r0, [r1, #16]
 8010d60:	9b05      	ldr	r3, [sp, #20]
 8010d62:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8010d66:	9300      	str	r3, [sp, #0]
 8010d68:	6972      	ldr	r2, [r6, #20]
 8010d6a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8010d6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d70:	ab06      	add	r3, sp, #24
 8010d72:	f004 fb15 	bl	80153a0 <uxr_prepare_output_stream_fragmented>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d1d2      	bne.n	8010d20 <rmw_publish+0x4c>
 8010d7a:	2001      	movs	r0, #1
 8010d7c:	b00e      	add	sp, #56	; 0x38
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}
 8010d80:	2001      	movs	r0, #1
 8010d82:	4770      	bx	lr
 8010d84:	6918      	ldr	r0, [r3, #16]
 8010d86:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010d8a:	f003 f9b7 	bl	80140fc <uxr_flash_output_streams>
 8010d8e:	e7de      	b.n	8010d4e <rmw_publish+0x7a>
 8010d90:	08010ccd 	.word	0x08010ccd

08010d94 <rmw_create_publisher>:
 8010d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d98:	b087      	sub	sp, #28
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f000 80ca 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010da0:	460e      	mov	r6, r1
 8010da2:	2900      	cmp	r1, #0
 8010da4:	f000 80c6 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010da8:	4604      	mov	r4, r0
 8010daa:	6800      	ldr	r0, [r0, #0]
 8010dac:	4615      	mov	r5, r2
 8010dae:	4698      	mov	r8, r3
 8010db0:	f000 fe52 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8010db4:	2800      	cmp	r0, #0
 8010db6:	f000 80bd 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010dba:	2d00      	cmp	r5, #0
 8010dbc:	f000 80ba 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010dc0:	782b      	ldrb	r3, [r5, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f000 80b6 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010dc8:	f1b8 0f00 	cmp.w	r8, #0
 8010dcc:	f000 80b2 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010dd0:	485b      	ldr	r0, [pc, #364]	; (8010f40 <rmw_create_publisher+0x1ac>)
 8010dd2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010dd6:	f008 f823 	bl	8018e20 <get_memory>
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	f000 80aa 	beq.w	8010f34 <rmw_create_publisher+0x1a0>
 8010de0:	2300      	movs	r3, #0
 8010de2:	68c4      	ldr	r4, [r0, #12]
 8010de4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010de8:	f008 f882 	bl	8018ef0 <rmw_get_implementation_identifier>
 8010dec:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8010df0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8010df4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f7ef fa23 	bl	8000244 <strlen>
 8010dfe:	3001      	adds	r0, #1
 8010e00:	283c      	cmp	r0, #60	; 0x3c
 8010e02:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8010e06:	f200 8092 	bhi.w	8010f2e <rmw_create_publisher+0x19a>
 8010e0a:	462b      	mov	r3, r5
 8010e0c:	213c      	movs	r1, #60	; 0x3c
 8010e0e:	4a4d      	ldr	r2, [pc, #308]	; (8010f44 <rmw_create_publisher+0x1b0>)
 8010e10:	4650      	mov	r0, sl
 8010e12:	f009 fdf5 	bl	801aa00 <sniprintf>
 8010e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010e1a:	4641      	mov	r1, r8
 8010e1c:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 8010e20:	2250      	movs	r2, #80	; 0x50
 8010e22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010e26:	f009 fc69 	bl	801a6fc <memcpy>
 8010e2a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010e2e:	4630      	mov	r0, r6
 8010e30:	2b02      	cmp	r3, #2
 8010e32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e36:	4944      	ldr	r1, [pc, #272]	; (8010f48 <rmw_create_publisher+0x1b4>)
 8010e38:	bf0c      	ite	eq
 8010e3a:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8010e3e:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010e42:	67a3      	str	r3, [r4, #120]	; 0x78
 8010e44:	2300      	movs	r3, #0
 8010e46:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010e4a:	f000 fe13 	bl	8011a74 <get_message_typesupport_handle>
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d06d      	beq.n	8010f2e <rmw_create_publisher+0x19a>
 8010e52:	6842      	ldr	r2, [r0, #4]
 8010e54:	61a2      	str	r2, [r4, #24]
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	d069      	beq.n	8010f2e <rmw_create_publisher+0x19a>
 8010e5a:	4629      	mov	r1, r5
 8010e5c:	4643      	mov	r3, r8
 8010e5e:	4648      	mov	r0, r9
 8010e60:	f008 f84c 	bl	8018efc <create_topic>
 8010e64:	6260      	str	r0, [r4, #36]	; 0x24
 8010e66:	2800      	cmp	r0, #0
 8010e68:	d061      	beq.n	8010f2e <rmw_create_publisher+0x19a>
 8010e6a:	f241 5398 	movw	r3, #5528	; 0x1598
 8010e6e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010e72:	2103      	movs	r1, #3
 8010e74:	5ad0      	ldrh	r0, [r2, r3]
 8010e76:	2606      	movs	r6, #6
 8010e78:	1c45      	adds	r5, r0, #1
 8010e7a:	52d5      	strh	r5, [r2, r3]
 8010e7c:	f002 fafa 	bl	8013474 <uxr_object_id>
 8010e80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010e84:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010e88:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010e8c:	6912      	ldr	r2, [r2, #16]
 8010e8e:	6120      	str	r0, [r4, #16]
 8010e90:	9600      	str	r6, [sp, #0]
 8010e92:	6819      	ldr	r1, [r3, #0]
 8010e94:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8010e98:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010e9c:	6922      	ldr	r2, [r4, #16]
 8010e9e:	f002 f8cf 	bl	8013040 <uxr_buffer_create_publisher_bin>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010ea8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010eac:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010eb0:	f000 fd4e 	bl	8011950 <run_xrce_session>
 8010eb4:	b3b8      	cbz	r0, 8010f26 <rmw_create_publisher+0x192>
 8010eb6:	f241 539a 	movw	r3, #5530	; 0x159a
 8010eba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010ebe:	2105      	movs	r1, #5
 8010ec0:	5ad0      	ldrh	r0, [r2, r3]
 8010ec2:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8010ec6:	1c45      	adds	r5, r0, #1
 8010ec8:	52d5      	strh	r5, [r2, r3]
 8010eca:	f002 fad3 	bl	8013474 <uxr_object_id>
 8010ece:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010ed2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ed6:	f10d 0a10 	add.w	sl, sp, #16
 8010eda:	6915      	ldr	r5, [r2, #16]
 8010edc:	4641      	mov	r1, r8
 8010ede:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010ee2:	6160      	str	r0, [r4, #20]
 8010ee4:	4650      	mov	r0, sl
 8010ee6:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8010eea:	f000 fd4d 	bl	8011988 <convert_qos_profile>
 8010eee:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010ef2:	9603      	str	r6, [sp, #12]
 8010ef4:	9001      	str	r0, [sp, #4]
 8010ef6:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010efa:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010efe:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 8010f02:	9300      	str	r3, [sp, #0]
 8010f04:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8010f08:	f8d8 1000 	ldr.w	r1, [r8]
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f002 f8f7 	bl	8013100 <uxr_buffer_create_datawriter_bin>
 8010f12:	4602      	mov	r2, r0
 8010f14:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010f18:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010f1c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010f20:	f000 fd16 	bl	8011950 <run_xrce_session>
 8010f24:	b938      	cbnz	r0, 8010f36 <rmw_create_publisher+0x1a2>
 8010f26:	4621      	mov	r1, r4
 8010f28:	4805      	ldr	r0, [pc, #20]	; (8010f40 <rmw_create_publisher+0x1ac>)
 8010f2a:	f007 ff89 	bl	8018e40 <put_memory>
 8010f2e:	4638      	mov	r0, r7
 8010f30:	f000 fbbc 	bl	80116ac <rmw_uxrce_fini_publisher_memory>
 8010f34:	2700      	movs	r7, #0
 8010f36:	4638      	mov	r0, r7
 8010f38:	b007      	add	sp, #28
 8010f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3e:	bf00      	nop
 8010f40:	200096c8 	.word	0x200096c8
 8010f44:	0801d1dc 	.word	0x0801d1dc
 8010f48:	0801cf70 	.word	0x0801cf70

08010f4c <rmw_publisher_get_actual_qos>:
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	4770      	bx	lr

08010f50 <rmw_destroy_publisher>:
 8010f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f52:	b128      	cbz	r0, 8010f60 <rmw_destroy_publisher+0x10>
 8010f54:	4604      	mov	r4, r0
 8010f56:	6800      	ldr	r0, [r0, #0]
 8010f58:	460d      	mov	r5, r1
 8010f5a:	f000 fd7d 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8010f5e:	b910      	cbnz	r0, 8010f66 <rmw_destroy_publisher+0x16>
 8010f60:	2401      	movs	r4, #1
 8010f62:	4620      	mov	r0, r4
 8010f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f66:	6863      	ldr	r3, [r4, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d0f9      	beq.n	8010f60 <rmw_destroy_publisher+0x10>
 8010f6c:	2d00      	cmp	r5, #0
 8010f6e:	d0f7      	beq.n	8010f60 <rmw_destroy_publisher+0x10>
 8010f70:	6828      	ldr	r0, [r5, #0]
 8010f72:	f000 fd71 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d0f2      	beq.n	8010f60 <rmw_destroy_publisher+0x10>
 8010f7a:	686c      	ldr	r4, [r5, #4]
 8010f7c:	2c00      	cmp	r4, #0
 8010f7e:	d0ef      	beq.n	8010f60 <rmw_destroy_publisher+0x10>
 8010f80:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010f82:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8010f86:	f008 f807 	bl	8018f98 <destroy_topic>
 8010f8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010f8e:	6962      	ldr	r2, [r4, #20]
 8010f90:	6918      	ldr	r0, [r3, #16]
 8010f92:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010f96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010f9a:	6819      	ldr	r1, [r3, #0]
 8010f9c:	f001 ff94 	bl	8012ec8 <uxr_buffer_delete_entity>
 8010fa0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010fa4:	6922      	ldr	r2, [r4, #16]
 8010fa6:	691b      	ldr	r3, [r3, #16]
 8010fa8:	4604      	mov	r4, r0
 8010faa:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010fae:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010fb2:	6809      	ldr	r1, [r1, #0]
 8010fb4:	f001 ff88 	bl	8012ec8 <uxr_buffer_delete_entity>
 8010fb8:	4606      	mov	r6, r0
 8010fba:	6938      	ldr	r0, [r7, #16]
 8010fbc:	4622      	mov	r2, r4
 8010fbe:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010fc2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010fc6:	f000 fcc3 	bl	8011950 <run_xrce_session>
 8010fca:	4604      	mov	r4, r0
 8010fcc:	6938      	ldr	r0, [r7, #16]
 8010fce:	4632      	mov	r2, r6
 8010fd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010fd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010fd8:	f000 fcba 	bl	8011950 <run_xrce_session>
 8010fdc:	b12c      	cbz	r4, 8010fea <rmw_destroy_publisher+0x9a>
 8010fde:	b120      	cbz	r0, 8010fea <rmw_destroy_publisher+0x9a>
 8010fe0:	2400      	movs	r4, #0
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	f000 fb62 	bl	80116ac <rmw_uxrce_fini_publisher_memory>
 8010fe8:	e7bb      	b.n	8010f62 <rmw_destroy_publisher+0x12>
 8010fea:	2402      	movs	r4, #2
 8010fec:	e7f9      	b.n	8010fe2 <rmw_destroy_publisher+0x92>
 8010fee:	bf00      	nop

08010ff0 <rmw_destroy_service>:
 8010ff0:	b570      	push	{r4, r5, r6, lr}
 8010ff2:	b128      	cbz	r0, 8011000 <rmw_destroy_service+0x10>
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	6800      	ldr	r0, [r0, #0]
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	f000 fd2d 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8010ffe:	b910      	cbnz	r0, 8011006 <rmw_destroy_service+0x16>
 8011000:	2401      	movs	r4, #1
 8011002:	4620      	mov	r0, r4
 8011004:	bd70      	pop	{r4, r5, r6, pc}
 8011006:	6863      	ldr	r3, [r4, #4]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d0f9      	beq.n	8011000 <rmw_destroy_service+0x10>
 801100c:	2d00      	cmp	r5, #0
 801100e:	d0f7      	beq.n	8011000 <rmw_destroy_service+0x10>
 8011010:	6828      	ldr	r0, [r5, #0]
 8011012:	f000 fd21 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8011016:	2800      	cmp	r0, #0
 8011018:	d0f2      	beq.n	8011000 <rmw_destroy_service+0x10>
 801101a:	686e      	ldr	r6, [r5, #4]
 801101c:	2e00      	cmp	r6, #0
 801101e:	d0ef      	beq.n	8011000 <rmw_destroy_service+0x10>
 8011020:	6864      	ldr	r4, [r4, #4]
 8011022:	6932      	ldr	r2, [r6, #16]
 8011024:	6920      	ldr	r0, [r4, #16]
 8011026:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801102a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801102e:	6819      	ldr	r1, [r3, #0]
 8011030:	f002 fa88 	bl	8013544 <uxr_buffer_cancel_data>
 8011034:	4602      	mov	r2, r0
 8011036:	6920      	ldr	r0, [r4, #16]
 8011038:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801103c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011040:	f000 fc86 	bl	8011950 <run_xrce_session>
 8011044:	6920      	ldr	r0, [r4, #16]
 8011046:	6932      	ldr	r2, [r6, #16]
 8011048:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801104c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011050:	6819      	ldr	r1, [r3, #0]
 8011052:	f001 ff39 	bl	8012ec8 <uxr_buffer_delete_entity>
 8011056:	4602      	mov	r2, r0
 8011058:	6920      	ldr	r0, [r4, #16]
 801105a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801105e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011062:	f000 fc75 	bl	8011950 <run_xrce_session>
 8011066:	4603      	mov	r3, r0
 8011068:	4628      	mov	r0, r5
 801106a:	2b00      	cmp	r3, #0
 801106c:	bf14      	ite	ne
 801106e:	2400      	movne	r4, #0
 8011070:	2402      	moveq	r4, #2
 8011072:	f000 fb47 	bl	8011704 <rmw_uxrce_fini_service_memory>
 8011076:	e7c4      	b.n	8011002 <rmw_destroy_service+0x12>

08011078 <rmw_create_subscription>:
 8011078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107c:	b08d      	sub	sp, #52	; 0x34
 801107e:	2800      	cmp	r0, #0
 8011080:	f000 80d3 	beq.w	801122a <rmw_create_subscription+0x1b2>
 8011084:	460e      	mov	r6, r1
 8011086:	2900      	cmp	r1, #0
 8011088:	f000 80cf 	beq.w	801122a <rmw_create_subscription+0x1b2>
 801108c:	4604      	mov	r4, r0
 801108e:	6800      	ldr	r0, [r0, #0]
 8011090:	4615      	mov	r5, r2
 8011092:	4698      	mov	r8, r3
 8011094:	f000 fce0 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8011098:	2800      	cmp	r0, #0
 801109a:	f000 80c6 	beq.w	801122a <rmw_create_subscription+0x1b2>
 801109e:	2d00      	cmp	r5, #0
 80110a0:	f000 80c3 	beq.w	801122a <rmw_create_subscription+0x1b2>
 80110a4:	782b      	ldrb	r3, [r5, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	f000 80bf 	beq.w	801122a <rmw_create_subscription+0x1b2>
 80110ac:	f1b8 0f00 	cmp.w	r8, #0
 80110b0:	f000 80bb 	beq.w	801122a <rmw_create_subscription+0x1b2>
 80110b4:	485f      	ldr	r0, [pc, #380]	; (8011234 <rmw_create_subscription+0x1bc>)
 80110b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80110ba:	f007 feb1 	bl	8018e20 <get_memory>
 80110be:	4604      	mov	r4, r0
 80110c0:	2800      	cmp	r0, #0
 80110c2:	f000 80b3 	beq.w	801122c <rmw_create_subscription+0x1b4>
 80110c6:	2300      	movs	r3, #0
 80110c8:	68c7      	ldr	r7, [r0, #12]
 80110ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80110ce:	f007 ff0f 	bl	8018ef0 <rmw_get_implementation_identifier>
 80110d2:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 80110d6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80110d8:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 80110dc:	4628      	mov	r0, r5
 80110de:	f7ef f8b1 	bl	8000244 <strlen>
 80110e2:	3001      	adds	r0, #1
 80110e4:	283c      	cmp	r0, #60	; 0x3c
 80110e6:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80110ea:	f200 809b 	bhi.w	8011224 <rmw_create_subscription+0x1ac>
 80110ee:	462b      	mov	r3, r5
 80110f0:	213c      	movs	r1, #60	; 0x3c
 80110f2:	4a51      	ldr	r2, [pc, #324]	; (8011238 <rmw_create_subscription+0x1c0>)
 80110f4:	4650      	mov	r0, sl
 80110f6:	f009 fc83 	bl	801aa00 <sniprintf>
 80110fa:	4641      	mov	r1, r8
 80110fc:	2250      	movs	r2, #80	; 0x50
 80110fe:	f8c7 9020 	str.w	r9, [r7, #32]
 8011102:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8011106:	f009 faf9 	bl	801a6fc <memcpy>
 801110a:	4630      	mov	r0, r6
 801110c:	494b      	ldr	r1, [pc, #300]	; (801123c <rmw_create_subscription+0x1c4>)
 801110e:	f000 fcb1 	bl	8011a74 <get_message_typesupport_handle>
 8011112:	2800      	cmp	r0, #0
 8011114:	f000 8086 	beq.w	8011224 <rmw_create_subscription+0x1ac>
 8011118:	6842      	ldr	r2, [r0, #4]
 801111a:	61ba      	str	r2, [r7, #24]
 801111c:	2a00      	cmp	r2, #0
 801111e:	f000 8081 	beq.w	8011224 <rmw_create_subscription+0x1ac>
 8011122:	4629      	mov	r1, r5
 8011124:	4643      	mov	r3, r8
 8011126:	4648      	mov	r0, r9
 8011128:	f007 fee8 	bl	8018efc <create_topic>
 801112c:	61f8      	str	r0, [r7, #28]
 801112e:	2800      	cmp	r0, #0
 8011130:	d078      	beq.n	8011224 <rmw_create_subscription+0x1ac>
 8011132:	f241 539c 	movw	r3, #5532	; 0x159c
 8011136:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801113a:	2104      	movs	r1, #4
 801113c:	5ad0      	ldrh	r0, [r2, r3]
 801113e:	2506      	movs	r5, #6
 8011140:	1c46      	adds	r6, r0, #1
 8011142:	52d6      	strh	r6, [r2, r3]
 8011144:	f002 f996 	bl	8013474 <uxr_object_id>
 8011148:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801114c:	6138      	str	r0, [r7, #16]
 801114e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8011152:	9500      	str	r5, [sp, #0]
 8011154:	6811      	ldr	r1, [r2, #0]
 8011156:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801115a:	693a      	ldr	r2, [r7, #16]
 801115c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011160:	f001 ff9e 	bl	80130a0 <uxr_buffer_create_subscriber_bin>
 8011164:	4602      	mov	r2, r0
 8011166:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801116a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801116e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011172:	f000 fbed 	bl	8011950 <run_xrce_session>
 8011176:	2800      	cmp	r0, #0
 8011178:	d050      	beq.n	801121c <rmw_create_subscription+0x1a4>
 801117a:	f241 539e 	movw	r3, #5534	; 0x159e
 801117e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8011182:	4629      	mov	r1, r5
 8011184:	5ad0      	ldrh	r0, [r2, r3]
 8011186:	ae08      	add	r6, sp, #32
 8011188:	f100 0c01 	add.w	ip, r0, #1
 801118c:	f822 c003 	strh.w	ip, [r2, r3]
 8011190:	f002 f970 	bl	8013474 <uxr_object_id>
 8011194:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	4641      	mov	r1, r8
 801119c:	6178      	str	r0, [r7, #20]
 801119e:	4630      	mov	r0, r6
 80111a0:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 80111a4:	9305      	str	r3, [sp, #20]
 80111a6:	f000 fbef 	bl	8011988 <convert_qos_profile>
 80111aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80111ae:	9b05      	ldr	r3, [sp, #20]
 80111b0:	9001      	str	r0, [sp, #4]
 80111b2:	9503      	str	r5, [sp, #12]
 80111b4:	f8ad 1008 	strh.w	r1, [sp, #8]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80111be:	9300      	str	r3, [sp, #0]
 80111c0:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80111c4:	f8db 1000 	ldr.w	r1, [fp]
 80111c8:	f002 f816 	bl	80131f8 <uxr_buffer_create_datareader_bin>
 80111cc:	4602      	mov	r2, r0
 80111ce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80111d2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80111d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80111da:	f000 fbb9 	bl	8011950 <run_xrce_session>
 80111de:	b1e8      	cbz	r0, 801121c <rmw_create_subscription+0x1a4>
 80111e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111e4:	2200      	movs	r2, #0
 80111e6:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80111ea:	f898 3008 	ldrb.w	r3, [r8, #8]
 80111ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80111f2:	2b02      	cmp	r3, #2
 80111f4:	bf0c      	ite	eq
 80111f6:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80111fa:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80111fe:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8011202:	9307      	str	r3, [sp, #28]
 8011204:	aa0a      	add	r2, sp, #40	; 0x28
 8011206:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801120a:	9200      	str	r2, [sp, #0]
 801120c:	6819      	ldr	r1, [r3, #0]
 801120e:	697a      	ldr	r2, [r7, #20]
 8011210:	9b07      	ldr	r3, [sp, #28]
 8011212:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011216:	f002 f95b 	bl	80134d0 <uxr_buffer_request_data>
 801121a:	e007      	b.n	801122c <rmw_create_subscription+0x1b4>
 801121c:	4639      	mov	r1, r7
 801121e:	4805      	ldr	r0, [pc, #20]	; (8011234 <rmw_create_subscription+0x1bc>)
 8011220:	f007 fe0e 	bl	8018e40 <put_memory>
 8011224:	4620      	mov	r0, r4
 8011226:	f000 fa57 	bl	80116d8 <rmw_uxrce_fini_subscription_memory>
 801122a:	2400      	movs	r4, #0
 801122c:	4620      	mov	r0, r4
 801122e:	b00d      	add	sp, #52	; 0x34
 8011230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011234:	2000c924 	.word	0x2000c924
 8011238:	0801d1dc 	.word	0x0801d1dc
 801123c:	0801cf70 	.word	0x0801cf70

08011240 <rmw_subscription_get_actual_qos>:
 8011240:	2000      	movs	r0, #0
 8011242:	4770      	bx	lr

08011244 <rmw_destroy_subscription>:
 8011244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011246:	b128      	cbz	r0, 8011254 <rmw_destroy_subscription+0x10>
 8011248:	4604      	mov	r4, r0
 801124a:	6800      	ldr	r0, [r0, #0]
 801124c:	460d      	mov	r5, r1
 801124e:	f000 fc03 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8011252:	b910      	cbnz	r0, 801125a <rmw_destroy_subscription+0x16>
 8011254:	2401      	movs	r4, #1
 8011256:	4620      	mov	r0, r4
 8011258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801125a:	6863      	ldr	r3, [r4, #4]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d0f9      	beq.n	8011254 <rmw_destroy_subscription+0x10>
 8011260:	2d00      	cmp	r5, #0
 8011262:	d0f7      	beq.n	8011254 <rmw_destroy_subscription+0x10>
 8011264:	6828      	ldr	r0, [r5, #0]
 8011266:	f000 fbf7 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 801126a:	2800      	cmp	r0, #0
 801126c:	d0f2      	beq.n	8011254 <rmw_destroy_subscription+0x10>
 801126e:	686c      	ldr	r4, [r5, #4]
 8011270:	2c00      	cmp	r4, #0
 8011272:	d0ef      	beq.n	8011254 <rmw_destroy_subscription+0x10>
 8011274:	6a26      	ldr	r6, [r4, #32]
 8011276:	6962      	ldr	r2, [r4, #20]
 8011278:	6930      	ldr	r0, [r6, #16]
 801127a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801127e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011282:	6819      	ldr	r1, [r3, #0]
 8011284:	f002 f95e 	bl	8013544 <uxr_buffer_cancel_data>
 8011288:	4602      	mov	r2, r0
 801128a:	6930      	ldr	r0, [r6, #16]
 801128c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011290:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011294:	f000 fb5c 	bl	8011950 <run_xrce_session>
 8011298:	69e0      	ldr	r0, [r4, #28]
 801129a:	f007 fe7d 	bl	8018f98 <destroy_topic>
 801129e:	6a23      	ldr	r3, [r4, #32]
 80112a0:	6962      	ldr	r2, [r4, #20]
 80112a2:	6918      	ldr	r0, [r3, #16]
 80112a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80112a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80112ac:	6819      	ldr	r1, [r3, #0]
 80112ae:	f001 fe0b 	bl	8012ec8 <uxr_buffer_delete_entity>
 80112b2:	6a23      	ldr	r3, [r4, #32]
 80112b4:	6922      	ldr	r2, [r4, #16]
 80112b6:	691b      	ldr	r3, [r3, #16]
 80112b8:	4604      	mov	r4, r0
 80112ba:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 80112be:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80112c2:	6809      	ldr	r1, [r1, #0]
 80112c4:	f001 fe00 	bl	8012ec8 <uxr_buffer_delete_entity>
 80112c8:	4607      	mov	r7, r0
 80112ca:	6930      	ldr	r0, [r6, #16]
 80112cc:	4622      	mov	r2, r4
 80112ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80112d2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80112d6:	f000 fb3b 	bl	8011950 <run_xrce_session>
 80112da:	4604      	mov	r4, r0
 80112dc:	6930      	ldr	r0, [r6, #16]
 80112de:	463a      	mov	r2, r7
 80112e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80112e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80112e8:	f000 fb32 	bl	8011950 <run_xrce_session>
 80112ec:	b12c      	cbz	r4, 80112fa <rmw_destroy_subscription+0xb6>
 80112ee:	b120      	cbz	r0, 80112fa <rmw_destroy_subscription+0xb6>
 80112f0:	2400      	movs	r4, #0
 80112f2:	4628      	mov	r0, r5
 80112f4:	f000 f9f0 	bl	80116d8 <rmw_uxrce_fini_subscription_memory>
 80112f8:	e7ad      	b.n	8011256 <rmw_destroy_subscription+0x12>
 80112fa:	2402      	movs	r4, #2
 80112fc:	e7f9      	b.n	80112f2 <rmw_destroy_subscription+0xae>
 80112fe:	bf00      	nop

08011300 <rmw_take_with_info>:
 8011300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011302:	4604      	mov	r4, r0
 8011304:	6800      	ldr	r0, [r0, #0]
 8011306:	460f      	mov	r7, r1
 8011308:	4615      	mov	r5, r2
 801130a:	b089      	sub	sp, #36	; 0x24
 801130c:	b128      	cbz	r0, 801131a <rmw_take_with_info+0x1a>
 801130e:	4b24      	ldr	r3, [pc, #144]	; (80113a0 <rmw_take_with_info+0xa0>)
 8011310:	6819      	ldr	r1, [r3, #0]
 8011312:	f7ee ff8d 	bl	8000230 <strcmp>
 8011316:	2800      	cmp	r0, #0
 8011318:	d13e      	bne.n	8011398 <rmw_take_with_info+0x98>
 801131a:	b305      	cbz	r5, 801135e <rmw_take_with_info+0x5e>
 801131c:	2300      	movs	r3, #0
 801131e:	6864      	ldr	r4, [r4, #4]
 8011320:	702b      	strb	r3, [r5, #0]
 8011322:	f000 fa9d 	bl	8011860 <rmw_uxrce_clean_expired_static_input_buffer>
 8011326:	4620      	mov	r0, r4
 8011328:	f000 fa70 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 801132c:	4606      	mov	r6, r0
 801132e:	b1f0      	cbz	r0, 801136e <rmw_take_with_info+0x6e>
 8011330:	68c1      	ldr	r1, [r0, #12]
 8011332:	4668      	mov	r0, sp
 8011334:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8011338:	3110      	adds	r1, #16
 801133a:	f7fd fc3d 	bl	800ebb8 <ucdr_init_buffer>
 801133e:	69a3      	ldr	r3, [r4, #24]
 8011340:	4639      	mov	r1, r7
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	4668      	mov	r0, sp
 8011346:	4798      	blx	r3
 8011348:	4604      	mov	r4, r0
 801134a:	4631      	mov	r1, r6
 801134c:	4815      	ldr	r0, [pc, #84]	; (80113a4 <rmw_take_with_info+0xa4>)
 801134e:	f007 fd77 	bl	8018e40 <put_memory>
 8011352:	702c      	strb	r4, [r5, #0]
 8011354:	f084 0001 	eor.w	r0, r4, #1
 8011358:	b2c0      	uxtb	r0, r0
 801135a:	b009      	add	sp, #36	; 0x24
 801135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135e:	6864      	ldr	r4, [r4, #4]
 8011360:	f000 fa7e 	bl	8011860 <rmw_uxrce_clean_expired_static_input_buffer>
 8011364:	4620      	mov	r0, r4
 8011366:	f000 fa51 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 801136a:	4605      	mov	r5, r0
 801136c:	b910      	cbnz	r0, 8011374 <rmw_take_with_info+0x74>
 801136e:	2001      	movs	r0, #1
 8011370:	b009      	add	sp, #36	; 0x24
 8011372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011374:	68e9      	ldr	r1, [r5, #12]
 8011376:	4668      	mov	r0, sp
 8011378:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801137c:	3110      	adds	r1, #16
 801137e:	f7fd fc1b 	bl	800ebb8 <ucdr_init_buffer>
 8011382:	69a3      	ldr	r3, [r4, #24]
 8011384:	4639      	mov	r1, r7
 8011386:	4668      	mov	r0, sp
 8011388:	68db      	ldr	r3, [r3, #12]
 801138a:	4798      	blx	r3
 801138c:	4629      	mov	r1, r5
 801138e:	4604      	mov	r4, r0
 8011390:	4804      	ldr	r0, [pc, #16]	; (80113a4 <rmw_take_with_info+0xa4>)
 8011392:	f007 fd55 	bl	8018e40 <put_memory>
 8011396:	e7dd      	b.n	8011354 <rmw_take_with_info+0x54>
 8011398:	200c      	movs	r0, #12
 801139a:	b009      	add	sp, #36	; 0x24
 801139c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801139e:	bf00      	nop
 80113a0:	0801d97c 	.word	0x0801d97c
 80113a4:	200096b8 	.word	0x200096b8

080113a8 <rmw_uxrce_transport_init>:
 80113a8:	b508      	push	{r3, lr}
 80113aa:	b108      	cbz	r0, 80113b0 <rmw_uxrce_transport_init+0x8>
 80113ac:	f100 0210 	add.w	r2, r0, #16
 80113b0:	b139      	cbz	r1, 80113c2 <rmw_uxrce_transport_init+0x1a>
 80113b2:	4610      	mov	r0, r2
 80113b4:	6949      	ldr	r1, [r1, #20]
 80113b6:	f002 f825 	bl	8013404 <uxr_init_custom_transport>
 80113ba:	f080 0001 	eor.w	r0, r0, #1
 80113be:	b2c0      	uxtb	r0, r0
 80113c0:	bd08      	pop	{r3, pc}
 80113c2:	4b04      	ldr	r3, [pc, #16]	; (80113d4 <rmw_uxrce_transport_init+0x2c>)
 80113c4:	4610      	mov	r0, r2
 80113c6:	6859      	ldr	r1, [r3, #4]
 80113c8:	f002 f81c 	bl	8013404 <uxr_init_custom_transport>
 80113cc:	f080 0001 	eor.w	r0, r0, #1
 80113d0:	b2c0      	uxtb	r0, r0
 80113d2:	bd08      	pop	{r3, pc}
 80113d4:	20009698 	.word	0x20009698

080113d8 <rmw_uros_epoch_nanos>:
 80113d8:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <rmw_uros_epoch_nanos+0x18>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	b123      	cbz	r3, 80113e8 <rmw_uros_epoch_nanos+0x10>
 80113de:	68d8      	ldr	r0, [r3, #12]
 80113e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80113e4:	f002 be80 	b.w	80140e8 <uxr_epoch_nanos>
 80113e8:	2000      	movs	r0, #0
 80113ea:	2100      	movs	r1, #0
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	2000c860 	.word	0x2000c860

080113f4 <rmw_uros_sync_session>:
 80113f4:	b508      	push	{r3, lr}
 80113f6:	4b07      	ldr	r3, [pc, #28]	; (8011414 <rmw_uros_sync_session+0x20>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	b14b      	cbz	r3, 8011410 <rmw_uros_sync_session+0x1c>
 80113fc:	4601      	mov	r1, r0
 80113fe:	68d8      	ldr	r0, [r3, #12]
 8011400:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011404:	f002 fe1c 	bl	8014040 <uxr_sync_session>
 8011408:	f080 0001 	eor.w	r0, r0, #1
 801140c:	b2c0      	uxtb	r0, r0
 801140e:	bd08      	pop	{r3, pc}
 8011410:	2001      	movs	r0, #1
 8011412:	bd08      	pop	{r3, pc}
 8011414:	2000c860 	.word	0x2000c860

08011418 <rmw_uxrce_init_service_memory>:
 8011418:	b1ba      	cbz	r2, 801144a <rmw_uxrce_init_service_memory+0x32>
 801141a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141c:	7a03      	ldrb	r3, [r0, #8]
 801141e:	4605      	mov	r5, r0
 8011420:	b993      	cbnz	r3, 8011448 <rmw_uxrce_init_service_memory+0x30>
 8011422:	460c      	mov	r4, r1
 8011424:	21c8      	movs	r1, #200	; 0xc8
 8011426:	2001      	movs	r0, #1
 8011428:	461f      	mov	r7, r3
 801142a:	fb01 4602 	mla	r6, r1, r2, r4
 801142e:	e9c5 3300 	strd	r3, r3, [r5]
 8011432:	60e9      	str	r1, [r5, #12]
 8011434:	7228      	strb	r0, [r5, #8]
 8011436:	4621      	mov	r1, r4
 8011438:	4628      	mov	r0, r5
 801143a:	f007 fd01 	bl	8018e40 <put_memory>
 801143e:	60e4      	str	r4, [r4, #12]
 8011440:	f804 7bc8 	strb.w	r7, [r4], #200
 8011444:	42a6      	cmp	r6, r4
 8011446:	d1f6      	bne.n	8011436 <rmw_uxrce_init_service_memory+0x1e>
 8011448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801144a:	4770      	bx	lr

0801144c <rmw_uxrce_init_client_memory>:
 801144c:	b1ba      	cbz	r2, 801147e <rmw_uxrce_init_client_memory+0x32>
 801144e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011450:	7a03      	ldrb	r3, [r0, #8]
 8011452:	4605      	mov	r5, r0
 8011454:	b993      	cbnz	r3, 801147c <rmw_uxrce_init_client_memory+0x30>
 8011456:	460c      	mov	r4, r1
 8011458:	21c8      	movs	r1, #200	; 0xc8
 801145a:	2001      	movs	r0, #1
 801145c:	461f      	mov	r7, r3
 801145e:	fb01 4602 	mla	r6, r1, r2, r4
 8011462:	e9c5 3300 	strd	r3, r3, [r5]
 8011466:	60e9      	str	r1, [r5, #12]
 8011468:	7228      	strb	r0, [r5, #8]
 801146a:	4621      	mov	r1, r4
 801146c:	4628      	mov	r0, r5
 801146e:	f007 fce7 	bl	8018e40 <put_memory>
 8011472:	60e4      	str	r4, [r4, #12]
 8011474:	f804 7bc8 	strb.w	r7, [r4], #200
 8011478:	42a6      	cmp	r6, r4
 801147a:	d1f6      	bne.n	801146a <rmw_uxrce_init_client_memory+0x1e>
 801147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801147e:	4770      	bx	lr

08011480 <rmw_uxrce_init_publisher_memory>:
 8011480:	b1ba      	cbz	r2, 80114b2 <rmw_uxrce_init_publisher_memory+0x32>
 8011482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011484:	7a03      	ldrb	r3, [r0, #8]
 8011486:	4605      	mov	r5, r0
 8011488:	b993      	cbnz	r3, 80114b0 <rmw_uxrce_init_publisher_memory+0x30>
 801148a:	460c      	mov	r4, r1
 801148c:	21d8      	movs	r1, #216	; 0xd8
 801148e:	2001      	movs	r0, #1
 8011490:	461f      	mov	r7, r3
 8011492:	fb01 4602 	mla	r6, r1, r2, r4
 8011496:	e9c5 3300 	strd	r3, r3, [r5]
 801149a:	60e9      	str	r1, [r5, #12]
 801149c:	7228      	strb	r0, [r5, #8]
 801149e:	4621      	mov	r1, r4
 80114a0:	4628      	mov	r0, r5
 80114a2:	f007 fccd 	bl	8018e40 <put_memory>
 80114a6:	60e4      	str	r4, [r4, #12]
 80114a8:	f804 7bd8 	strb.w	r7, [r4], #216
 80114ac:	42a6      	cmp	r6, r4
 80114ae:	d1f6      	bne.n	801149e <rmw_uxrce_init_publisher_memory+0x1e>
 80114b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114b2:	4770      	bx	lr

080114b4 <rmw_uxrce_init_subscription_memory>:
 80114b4:	b1ba      	cbz	r2, 80114e6 <rmw_uxrce_init_subscription_memory+0x32>
 80114b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114b8:	7a03      	ldrb	r3, [r0, #8]
 80114ba:	4605      	mov	r5, r0
 80114bc:	b993      	cbnz	r3, 80114e4 <rmw_uxrce_init_subscription_memory+0x30>
 80114be:	460c      	mov	r4, r1
 80114c0:	21d0      	movs	r1, #208	; 0xd0
 80114c2:	2001      	movs	r0, #1
 80114c4:	461f      	mov	r7, r3
 80114c6:	fb01 4602 	mla	r6, r1, r2, r4
 80114ca:	e9c5 3300 	strd	r3, r3, [r5]
 80114ce:	60e9      	str	r1, [r5, #12]
 80114d0:	7228      	strb	r0, [r5, #8]
 80114d2:	4621      	mov	r1, r4
 80114d4:	4628      	mov	r0, r5
 80114d6:	f007 fcb3 	bl	8018e40 <put_memory>
 80114da:	60e4      	str	r4, [r4, #12]
 80114dc:	f804 7bd0 	strb.w	r7, [r4], #208
 80114e0:	42a6      	cmp	r6, r4
 80114e2:	d1f6      	bne.n	80114d2 <rmw_uxrce_init_subscription_memory+0x1e>
 80114e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114e6:	4770      	bx	lr

080114e8 <rmw_uxrce_init_node_memory>:
 80114e8:	b1ba      	cbz	r2, 801151a <rmw_uxrce_init_node_memory+0x32>
 80114ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ec:	7a03      	ldrb	r3, [r0, #8]
 80114ee:	4605      	mov	r5, r0
 80114f0:	b993      	cbnz	r3, 8011518 <rmw_uxrce_init_node_memory+0x30>
 80114f2:	460c      	mov	r4, r1
 80114f4:	21a4      	movs	r1, #164	; 0xa4
 80114f6:	2001      	movs	r0, #1
 80114f8:	461f      	mov	r7, r3
 80114fa:	fb01 4602 	mla	r6, r1, r2, r4
 80114fe:	e9c5 3300 	strd	r3, r3, [r5]
 8011502:	60e9      	str	r1, [r5, #12]
 8011504:	7228      	strb	r0, [r5, #8]
 8011506:	4621      	mov	r1, r4
 8011508:	4628      	mov	r0, r5
 801150a:	f007 fc99 	bl	8018e40 <put_memory>
 801150e:	60e4      	str	r4, [r4, #12]
 8011510:	f804 7ba4 	strb.w	r7, [r4], #164
 8011514:	42a6      	cmp	r6, r4
 8011516:	d1f6      	bne.n	8011506 <rmw_uxrce_init_node_memory+0x1e>
 8011518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801151a:	4770      	bx	lr

0801151c <rmw_uxrce_init_session_memory>:
 801151c:	b1e2      	cbz	r2, 8011558 <rmw_uxrce_init_session_memory+0x3c>
 801151e:	7a03      	ldrb	r3, [r0, #8]
 8011520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011524:	4605      	mov	r5, r0
 8011526:	b9ab      	cbnz	r3, 8011554 <rmw_uxrce_init_session_memory+0x38>
 8011528:	f241 50a8 	movw	r0, #5544	; 0x15a8
 801152c:	460c      	mov	r4, r1
 801152e:	2101      	movs	r1, #1
 8011530:	4698      	mov	r8, r3
 8011532:	4607      	mov	r7, r0
 8011534:	fb00 4602 	mla	r6, r0, r2, r4
 8011538:	e9c5 3300 	strd	r3, r3, [r5]
 801153c:	60e8      	str	r0, [r5, #12]
 801153e:	7229      	strb	r1, [r5, #8]
 8011540:	4621      	mov	r1, r4
 8011542:	4628      	mov	r0, r5
 8011544:	f007 fc7c 	bl	8018e40 <put_memory>
 8011548:	60e4      	str	r4, [r4, #12]
 801154a:	f884 8000 	strb.w	r8, [r4]
 801154e:	443c      	add	r4, r7
 8011550:	42a6      	cmp	r6, r4
 8011552:	d1f5      	bne.n	8011540 <rmw_uxrce_init_session_memory+0x24>
 8011554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop

0801155c <rmw_uxrce_init_topic_memory>:
 801155c:	b1ca      	cbz	r2, 8011592 <rmw_uxrce_init_topic_memory+0x36>
 801155e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011560:	7a03      	ldrb	r3, [r0, #8]
 8011562:	4606      	mov	r6, r0
 8011564:	b9a3      	cbnz	r3, 8011590 <rmw_uxrce_init_topic_memory+0x34>
 8011566:	460c      	mov	r4, r1
 8011568:	2001      	movs	r0, #1
 801156a:	211c      	movs	r1, #28
 801156c:	461f      	mov	r7, r3
 801156e:	e9c6 3300 	strd	r3, r3, [r6]
 8011572:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8011576:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801157a:	7230      	strb	r0, [r6, #8]
 801157c:	60f1      	str	r1, [r6, #12]
 801157e:	4621      	mov	r1, r4
 8011580:	4630      	mov	r0, r6
 8011582:	f007 fc5d 	bl	8018e40 <put_memory>
 8011586:	60e4      	str	r4, [r4, #12]
 8011588:	f804 7b1c 	strb.w	r7, [r4], #28
 801158c:	42a5      	cmp	r5, r4
 801158e:	d1f6      	bne.n	801157e <rmw_uxrce_init_topic_memory+0x22>
 8011590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011592:	4770      	bx	lr

08011594 <rmw_uxrce_init_static_input_buffer_memory>:
 8011594:	b1da      	cbz	r2, 80115ce <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011598:	7a03      	ldrb	r3, [r0, #8]
 801159a:	4606      	mov	r6, r0
 801159c:	b9b3      	cbnz	r3, 80115cc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 801159e:	460c      	mov	r4, r1
 80115a0:	2001      	movs	r0, #1
 80115a2:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80115a6:	461f      	mov	r7, r3
 80115a8:	e9c6 3300 	strd	r3, r3, [r6]
 80115ac:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80115b0:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 80115b4:	7230      	strb	r0, [r6, #8]
 80115b6:	60f1      	str	r1, [r6, #12]
 80115b8:	4621      	mov	r1, r4
 80115ba:	4630      	mov	r0, r6
 80115bc:	f007 fc40 	bl	8018e40 <put_memory>
 80115c0:	60e4      	str	r4, [r4, #12]
 80115c2:	7027      	strb	r7, [r4, #0]
 80115c4:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80115c8:	42a5      	cmp	r5, r4
 80115ca:	d1f5      	bne.n	80115b8 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 80115cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115ce:	4770      	bx	lr

080115d0 <rmw_uxrce_init_init_options_impl_memory>:
 80115d0:	b1ba      	cbz	r2, 8011602 <rmw_uxrce_init_init_options_impl_memory+0x32>
 80115d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d4:	7a03      	ldrb	r3, [r0, #8]
 80115d6:	4605      	mov	r5, r0
 80115d8:	b993      	cbnz	r3, 8011600 <rmw_uxrce_init_init_options_impl_memory+0x30>
 80115da:	460c      	mov	r4, r1
 80115dc:	212c      	movs	r1, #44	; 0x2c
 80115de:	2001      	movs	r0, #1
 80115e0:	461f      	mov	r7, r3
 80115e2:	fb01 4602 	mla	r6, r1, r2, r4
 80115e6:	e9c5 3300 	strd	r3, r3, [r5]
 80115ea:	60e9      	str	r1, [r5, #12]
 80115ec:	7228      	strb	r0, [r5, #8]
 80115ee:	4621      	mov	r1, r4
 80115f0:	4628      	mov	r0, r5
 80115f2:	f007 fc25 	bl	8018e40 <put_memory>
 80115f6:	60e4      	str	r4, [r4, #12]
 80115f8:	f804 7b2c 	strb.w	r7, [r4], #44
 80115fc:	42a6      	cmp	r6, r4
 80115fe:	d1f6      	bne.n	80115ee <rmw_uxrce_init_init_options_impl_memory+0x1e>
 8011600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011602:	4770      	bx	lr

08011604 <rmw_uxrce_init_wait_set_memory>:
 8011604:	b1ca      	cbz	r2, 801163a <rmw_uxrce_init_wait_set_memory+0x36>
 8011606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011608:	7a03      	ldrb	r3, [r0, #8]
 801160a:	4606      	mov	r6, r0
 801160c:	b9a3      	cbnz	r3, 8011638 <rmw_uxrce_init_wait_set_memory+0x34>
 801160e:	460c      	mov	r4, r1
 8011610:	2001      	movs	r0, #1
 8011612:	211c      	movs	r1, #28
 8011614:	461f      	mov	r7, r3
 8011616:	e9c6 3300 	strd	r3, r3, [r6]
 801161a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801161e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011622:	7230      	strb	r0, [r6, #8]
 8011624:	60f1      	str	r1, [r6, #12]
 8011626:	4621      	mov	r1, r4
 8011628:	4630      	mov	r0, r6
 801162a:	f007 fc09 	bl	8018e40 <put_memory>
 801162e:	60e4      	str	r4, [r4, #12]
 8011630:	f804 7b1c 	strb.w	r7, [r4], #28
 8011634:	42a5      	cmp	r5, r4
 8011636:	d1f6      	bne.n	8011626 <rmw_uxrce_init_wait_set_memory+0x22>
 8011638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801163a:	4770      	bx	lr

0801163c <rmw_uxrce_init_guard_condition_memory>:
 801163c:	b1ba      	cbz	r2, 801166e <rmw_uxrce_init_guard_condition_memory+0x32>
 801163e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011640:	7a03      	ldrb	r3, [r0, #8]
 8011642:	4605      	mov	r5, r0
 8011644:	b993      	cbnz	r3, 801166c <rmw_uxrce_init_guard_condition_memory+0x30>
 8011646:	460c      	mov	r4, r1
 8011648:	2001      	movs	r0, #1
 801164a:	2120      	movs	r1, #32
 801164c:	461f      	mov	r7, r3
 801164e:	e9c5 3300 	strd	r3, r3, [r5]
 8011652:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 8011656:	7228      	strb	r0, [r5, #8]
 8011658:	60e9      	str	r1, [r5, #12]
 801165a:	4621      	mov	r1, r4
 801165c:	4628      	mov	r0, r5
 801165e:	f007 fbef 	bl	8018e40 <put_memory>
 8011662:	60e4      	str	r4, [r4, #12]
 8011664:	f804 7b20 	strb.w	r7, [r4], #32
 8011668:	42a6      	cmp	r6, r4
 801166a:	d1f6      	bne.n	801165a <rmw_uxrce_init_guard_condition_memory+0x1e>
 801166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801166e:	4770      	bx	lr

08011670 <rmw_uxrce_fini_session_memory>:
 8011670:	4601      	mov	r1, r0
 8011672:	4801      	ldr	r0, [pc, #4]	; (8011678 <rmw_uxrce_fini_session_memory+0x8>)
 8011674:	f007 bbe4 	b.w	8018e40 <put_memory>
 8011678:	2000c860 	.word	0x2000c860

0801167c <rmw_uxrce_fini_node_memory>:
 801167c:	b538      	push	{r3, r4, r5, lr}
 801167e:	4604      	mov	r4, r0
 8011680:	6800      	ldr	r0, [r0, #0]
 8011682:	b128      	cbz	r0, 8011690 <rmw_uxrce_fini_node_memory+0x14>
 8011684:	4b07      	ldr	r3, [pc, #28]	; (80116a4 <rmw_uxrce_fini_node_memory+0x28>)
 8011686:	6819      	ldr	r1, [r3, #0]
 8011688:	f7ee fdd2 	bl	8000230 <strcmp>
 801168c:	b940      	cbnz	r0, 80116a0 <rmw_uxrce_fini_node_memory+0x24>
 801168e:	6020      	str	r0, [r4, #0]
 8011690:	6861      	ldr	r1, [r4, #4]
 8011692:	b129      	cbz	r1, 80116a0 <rmw_uxrce_fini_node_memory+0x24>
 8011694:	2500      	movs	r5, #0
 8011696:	4804      	ldr	r0, [pc, #16]	; (80116a8 <rmw_uxrce_fini_node_memory+0x2c>)
 8011698:	610d      	str	r5, [r1, #16]
 801169a:	f007 fbd1 	bl	8018e40 <put_memory>
 801169e:	6065      	str	r5, [r4, #4]
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop
 80116a4:	0801d97c 	.word	0x0801d97c
 80116a8:	2000c68c 	.word	0x2000c68c

080116ac <rmw_uxrce_fini_publisher_memory>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	4604      	mov	r4, r0
 80116b0:	6800      	ldr	r0, [r0, #0]
 80116b2:	b128      	cbz	r0, 80116c0 <rmw_uxrce_fini_publisher_memory+0x14>
 80116b4:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <rmw_uxrce_fini_publisher_memory+0x24>)
 80116b6:	6819      	ldr	r1, [r3, #0]
 80116b8:	f7ee fdba 	bl	8000230 <strcmp>
 80116bc:	b938      	cbnz	r0, 80116ce <rmw_uxrce_fini_publisher_memory+0x22>
 80116be:	6020      	str	r0, [r4, #0]
 80116c0:	6861      	ldr	r1, [r4, #4]
 80116c2:	b121      	cbz	r1, 80116ce <rmw_uxrce_fini_publisher_memory+0x22>
 80116c4:	4803      	ldr	r0, [pc, #12]	; (80116d4 <rmw_uxrce_fini_publisher_memory+0x28>)
 80116c6:	f007 fbbb 	bl	8018e40 <put_memory>
 80116ca:	2300      	movs	r3, #0
 80116cc:	6063      	str	r3, [r4, #4]
 80116ce:	bd10      	pop	{r4, pc}
 80116d0:	0801d97c 	.word	0x0801d97c
 80116d4:	200096c8 	.word	0x200096c8

080116d8 <rmw_uxrce_fini_subscription_memory>:
 80116d8:	b510      	push	{r4, lr}
 80116da:	4604      	mov	r4, r0
 80116dc:	6800      	ldr	r0, [r0, #0]
 80116de:	b128      	cbz	r0, 80116ec <rmw_uxrce_fini_subscription_memory+0x14>
 80116e0:	4b06      	ldr	r3, [pc, #24]	; (80116fc <rmw_uxrce_fini_subscription_memory+0x24>)
 80116e2:	6819      	ldr	r1, [r3, #0]
 80116e4:	f7ee fda4 	bl	8000230 <strcmp>
 80116e8:	b938      	cbnz	r0, 80116fa <rmw_uxrce_fini_subscription_memory+0x22>
 80116ea:	6020      	str	r0, [r4, #0]
 80116ec:	6861      	ldr	r1, [r4, #4]
 80116ee:	b121      	cbz	r1, 80116fa <rmw_uxrce_fini_subscription_memory+0x22>
 80116f0:	4803      	ldr	r0, [pc, #12]	; (8011700 <rmw_uxrce_fini_subscription_memory+0x28>)
 80116f2:	f007 fba5 	bl	8018e40 <put_memory>
 80116f6:	2300      	movs	r3, #0
 80116f8:	6063      	str	r3, [r4, #4]
 80116fa:	bd10      	pop	{r4, pc}
 80116fc:	0801d97c 	.word	0x0801d97c
 8011700:	2000c924 	.word	0x2000c924

08011704 <rmw_uxrce_fini_service_memory>:
 8011704:	b510      	push	{r4, lr}
 8011706:	4604      	mov	r4, r0
 8011708:	6800      	ldr	r0, [r0, #0]
 801170a:	b128      	cbz	r0, 8011718 <rmw_uxrce_fini_service_memory+0x14>
 801170c:	4b06      	ldr	r3, [pc, #24]	; (8011728 <rmw_uxrce_fini_service_memory+0x24>)
 801170e:	6819      	ldr	r1, [r3, #0]
 8011710:	f7ee fd8e 	bl	8000230 <strcmp>
 8011714:	b938      	cbnz	r0, 8011726 <rmw_uxrce_fini_service_memory+0x22>
 8011716:	6020      	str	r0, [r4, #0]
 8011718:	6861      	ldr	r1, [r4, #4]
 801171a:	b121      	cbz	r1, 8011726 <rmw_uxrce_fini_service_memory+0x22>
 801171c:	4803      	ldr	r0, [pc, #12]	; (801172c <rmw_uxrce_fini_service_memory+0x28>)
 801171e:	f007 fb8f 	bl	8018e40 <put_memory>
 8011722:	2300      	movs	r3, #0
 8011724:	6063      	str	r3, [r4, #4]
 8011726:	bd10      	pop	{r4, pc}
 8011728:	0801d97c 	.word	0x0801d97c
 801172c:	2000c914 	.word	0x2000c914

08011730 <rmw_uxrce_fini_client_memory>:
 8011730:	b510      	push	{r4, lr}
 8011732:	4604      	mov	r4, r0
 8011734:	6800      	ldr	r0, [r0, #0]
 8011736:	b128      	cbz	r0, 8011744 <rmw_uxrce_fini_client_memory+0x14>
 8011738:	4b06      	ldr	r3, [pc, #24]	; (8011754 <rmw_uxrce_fini_client_memory+0x24>)
 801173a:	6819      	ldr	r1, [r3, #0]
 801173c:	f7ee fd78 	bl	8000230 <strcmp>
 8011740:	b938      	cbnz	r0, 8011752 <rmw_uxrce_fini_client_memory+0x22>
 8011742:	6020      	str	r0, [r4, #0]
 8011744:	6861      	ldr	r1, [r4, #4]
 8011746:	b121      	cbz	r1, 8011752 <rmw_uxrce_fini_client_memory+0x22>
 8011748:	4803      	ldr	r0, [pc, #12]	; (8011758 <rmw_uxrce_fini_client_memory+0x28>)
 801174a:	f007 fb79 	bl	8018e40 <put_memory>
 801174e:	2300      	movs	r3, #0
 8011750:	6063      	str	r3, [r4, #4]
 8011752:	bd10      	pop	{r4, pc}
 8011754:	0801d97c 	.word	0x0801d97c
 8011758:	20009f48 	.word	0x20009f48

0801175c <rmw_uxrce_fini_topic_memory>:
 801175c:	b510      	push	{r4, lr}
 801175e:	4604      	mov	r4, r0
 8011760:	4803      	ldr	r0, [pc, #12]	; (8011770 <rmw_uxrce_fini_topic_memory+0x14>)
 8011762:	4621      	mov	r1, r4
 8011764:	f007 fb6c 	bl	8018e40 <put_memory>
 8011768:	2300      	movs	r3, #0
 801176a:	61a3      	str	r3, [r4, #24]
 801176c:	bd10      	pop	{r4, pc}
 801176e:	bf00      	nop
 8011770:	2000c850 	.word	0x2000c850

08011774 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011774:	b082      	sub	sp, #8
 8011776:	b4f0      	push	{r4, r5, r6, r7}
 8011778:	4923      	ldr	r1, [pc, #140]	; (8011808 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 801177a:	ac04      	add	r4, sp, #16
 801177c:	e884 000c 	stmia.w	r4, {r2, r3}
 8011780:	680d      	ldr	r5, [r1, #0]
 8011782:	9c05      	ldr	r4, [sp, #20]
 8011784:	4601      	mov	r1, r0
 8011786:	2d00      	cmp	r5, #0
 8011788:	d03c      	beq.n	8011804 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 801178a:	462b      	mov	r3, r5
 801178c:	2000      	movs	r0, #0
 801178e:	68da      	ldr	r2, [r3, #12]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8011796:	4291      	cmp	r1, r2
 8011798:	bf08      	it	eq
 801179a:	3001      	addeq	r0, #1
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1f6      	bne.n	801178e <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 80117a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80117a4:	2b02      	cmp	r3, #2
 80117a6:	d025      	beq.n	80117f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 80117a8:	d905      	bls.n	80117b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80117aa:	2b03      	cmp	r3, #3
 80117ac:	d003      	beq.n	80117b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80117ae:	2000      	movs	r0, #0
 80117b0:	bcf0      	pop	{r4, r5, r6, r7}
 80117b2:	b002      	add	sp, #8
 80117b4:	4770      	bx	lr
 80117b6:	b304      	cbz	r4, 80117fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80117b8:	4284      	cmp	r4, r0
 80117ba:	d81e      	bhi.n	80117fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80117bc:	2d00      	cmp	r5, #0
 80117be:	d0f6      	beq.n	80117ae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80117c0:	2000      	movs	r0, #0
 80117c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80117c6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80117ca:	e002      	b.n	80117d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 80117cc:	68ad      	ldr	r5, [r5, #8]
 80117ce:	2d00      	cmp	r5, #0
 80117d0:	d0ee      	beq.n	80117b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x3c>
 80117d2:	68eb      	ldr	r3, [r5, #12]
 80117d4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80117d8:	4291      	cmp	r1, r2
 80117da:	d1f7      	bne.n	80117cc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80117dc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80117e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e4:	42b2      	cmp	r2, r6
 80117e6:	eb73 0407 	sbcs.w	r4, r3, r7
 80117ea:	daef      	bge.n	80117cc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80117ec:	4616      	mov	r6, r2
 80117ee:	461f      	mov	r7, r3
 80117f0:	4628      	mov	r0, r5
 80117f2:	e7eb      	b.n	80117cc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80117f4:	b10c      	cbz	r4, 80117fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80117f6:	4284      	cmp	r4, r0
 80117f8:	d9d9      	bls.n	80117ae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80117fa:	bcf0      	pop	{r4, r5, r6, r7}
 80117fc:	4802      	ldr	r0, [pc, #8]	; (8011808 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80117fe:	b002      	add	sp, #8
 8011800:	f007 bb0e 	b.w	8018e20 <get_memory>
 8011804:	4628      	mov	r0, r5
 8011806:	e7cb      	b.n	80117a0 <rmw_uxrce_get_static_input_buffer_for_entity+0x2c>
 8011808:	200096b8 	.word	0x200096b8

0801180c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801180c:	4b12      	ldr	r3, [pc, #72]	; (8011858 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	b303      	cbz	r3, 8011854 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>
 8011812:	e92d 03d0 	stmdb	sp!, {r4, r6, r7, r8, r9}
 8011816:	4604      	mov	r4, r0
 8011818:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801181c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011820:	2000      	movs	r0, #0
 8011822:	e001      	b.n	8011828 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 8011824:	689b      	ldr	r3, [r3, #8]
 8011826:	b193      	cbz	r3, 801184e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011828:	68da      	ldr	r2, [r3, #12]
 801182a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 801182e:	428c      	cmp	r4, r1
 8011830:	d1f8      	bne.n	8011824 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011832:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8011836:	e9d2 8900 	ldrd	r8, r9, [r2]
 801183a:	45b0      	cmp	r8, r6
 801183c:	eb79 0207 	sbcs.w	r2, r9, r7
 8011840:	daf0      	bge.n	8011824 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011842:	4618      	mov	r0, r3
 8011844:	689b      	ldr	r3, [r3, #8]
 8011846:	4646      	mov	r6, r8
 8011848:	464f      	mov	r7, r9
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1ec      	bne.n	8011828 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 801184e:	e8bd 03d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9}
 8011852:	4770      	bx	lr
 8011854:	4618      	mov	r0, r3
 8011856:	4770      	bx	lr
 8011858:	200096b8 	.word	0x200096b8
 801185c:	00000000 	.word	0x00000000

08011860 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011864:	4e38      	ldr	r6, [pc, #224]	; (8011948 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 8011866:	b083      	sub	sp, #12
 8011868:	f8d6 8000 	ldr.w	r8, [r6]
 801186c:	f7ff fdb4 	bl	80113d8 <rmw_uros_epoch_nanos>
 8011870:	f1b8 0f00 	cmp.w	r8, #0
 8011874:	d05f      	beq.n	8011936 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8011876:	46b1      	mov	r9, r6
 8011878:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801187c:	4682      	mov	sl, r0
 801187e:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8011882:	468b      	mov	fp, r1
 8011884:	2b04      	cmp	r3, #4
 8011886:	d02d      	beq.n	80118e4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8011888:	2b05      	cmp	r3, #5
 801188a:	d041      	beq.n	8011910 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 801188c:	2b03      	cmp	r3, #3
 801188e:	d029      	beq.n	80118e4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8011890:	2200      	movs	r2, #0
 8011892:	2300      	movs	r3, #0
 8011894:	2001      	movs	r0, #1
 8011896:	2100      	movs	r1, #0
 8011898:	e9cd 2300 	strd	r2, r3, [sp]
 801189c:	9b00      	ldr	r3, [sp, #0]
 801189e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 80118a2:	18c2      	adds	r2, r0, r3
 80118a4:	9b01      	ldr	r3, [sp, #4]
 80118a6:	cec0      	ldmia	r6, {r6, r7}
 80118a8:	eb41 0303 	adc.w	r3, r1, r3
 80118ac:	1994      	adds	r4, r2, r6
 80118ae:	eb43 0507 	adc.w	r5, r3, r7
 80118b2:	4554      	cmp	r4, sl
 80118b4:	eb75 020b 	sbcs.w	r2, r5, fp
 80118b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80118bc:	db03      	blt.n	80118c6 <rmw_uxrce_clean_expired_static_input_buffer+0x66>
 80118be:	45b2      	cmp	sl, r6
 80118c0:	eb7b 0207 	sbcs.w	r2, fp, r7
 80118c4:	da05      	bge.n	80118d2 <rmw_uxrce_clean_expired_static_input_buffer+0x72>
 80118c6:	4641      	mov	r1, r8
 80118c8:	4648      	mov	r0, r9
 80118ca:	9300      	str	r3, [sp, #0]
 80118cc:	f007 fab8 	bl	8018e40 <put_memory>
 80118d0:	9b00      	ldr	r3, [sp, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d02f      	beq.n	8011936 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80118d6:	4698      	mov	r8, r3
 80118d8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80118dc:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d1d1      	bne.n	8011888 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 80118e4:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 80118e8:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 80118ec:	e9cd 2300 	strd	r2, r3, [sp]
 80118f0:	4313      	orrs	r3, r2
 80118f2:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 80118f6:	d015      	beq.n	8011924 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80118f8:	9a01      	ldr	r2, [sp, #4]
 80118fa:	4b14      	ldr	r3, [pc, #80]	; (801194c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80118fc:	fb03 f702 	mul.w	r7, r3, r2
 8011900:	9a00      	ldr	r2, [sp, #0]
 8011902:	fba2 2303 	umull	r2, r3, r2, r3
 8011906:	e9cd 2300 	strd	r2, r3, [sp]
 801190a:	443b      	add	r3, r7
 801190c:	9301      	str	r3, [sp, #4]
 801190e:	e7c5      	b.n	801189c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8011910:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8011914:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8011918:	e9cd 2300 	strd	r2, r3, [sp]
 801191c:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8011920:	4313      	orrs	r3, r2
 8011922:	d1e9      	bne.n	80118f8 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8011924:	ea50 0301 	orrs.w	r3, r0, r1
 8011928:	d1b8      	bne.n	801189c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 801192a:	a305      	add	r3, pc, #20	; (adr r3, 8011940 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	e9cd 2300 	strd	r2, r3, [sp]
 8011934:	e7b2      	b.n	801189c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8011936:	b003      	add	sp, #12
 8011938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801193c:	f3af 8000 	nop.w
 8011940:	fc23ac00 	.word	0xfc23ac00
 8011944:	00000006 	.word	0x00000006
 8011948:	200096b8 	.word	0x200096b8
 801194c:	3b9aca00 	.word	0x3b9aca00

08011950 <run_xrce_session>:
 8011950:	b510      	push	{r4, lr}
 8011952:	788c      	ldrb	r4, [r1, #2]
 8011954:	b086      	sub	sp, #24
 8011956:	2c01      	cmp	r4, #1
 8011958:	f8ad 200e 	strh.w	r2, [sp, #14]
 801195c:	d00c      	beq.n	8011978 <run_xrce_session+0x28>
 801195e:	4619      	mov	r1, r3
 8011960:	2301      	movs	r3, #1
 8011962:	f10d 020e 	add.w	r2, sp, #14
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801196c:	f10d 0317 	add.w	r3, sp, #23
 8011970:	f002 fc7a 	bl	8014268 <uxr_run_session_until_all_status>
 8011974:	b006      	add	sp, #24
 8011976:	bd10      	pop	{r4, pc}
 8011978:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801197c:	f002 fbbe 	bl	80140fc <uxr_flash_output_streams>
 8011980:	4620      	mov	r0, r4
 8011982:	b006      	add	sp, #24
 8011984:	bd10      	pop	{r4, pc}
 8011986:	bf00      	nop

08011988 <convert_qos_profile>:
 8011988:	b430      	push	{r4, r5}
 801198a:	7a0d      	ldrb	r5, [r1, #8]
 801198c:	780c      	ldrb	r4, [r1, #0]
 801198e:	7a4a      	ldrb	r2, [r1, #9]
 8011990:	f1a5 0502 	sub.w	r5, r5, #2
 8011994:	f1a4 0402 	sub.w	r4, r4, #2
 8011998:	fab5 f585 	clz	r5, r5
 801199c:	fab4 f484 	clz	r4, r4
 80119a0:	2a02      	cmp	r2, #2
 80119a2:	bf18      	it	ne
 80119a4:	2200      	movne	r2, #0
 80119a6:	8889      	ldrh	r1, [r1, #4]
 80119a8:	096d      	lsrs	r5, r5, #5
 80119aa:	0964      	lsrs	r4, r4, #5
 80119ac:	7045      	strb	r5, [r0, #1]
 80119ae:	7084      	strb	r4, [r0, #2]
 80119b0:	7002      	strb	r2, [r0, #0]
 80119b2:	8081      	strh	r1, [r0, #4]
 80119b4:	bc30      	pop	{r4, r5}
 80119b6:	4770      	bx	lr

080119b8 <generate_type_name>:
 80119b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119bc:	4606      	mov	r6, r0
 80119be:	b086      	sub	sp, #24
 80119c0:	6840      	ldr	r0, [r0, #4]
 80119c2:	4688      	mov	r8, r1
 80119c4:	4617      	mov	r7, r2
 80119c6:	f7ee fc3d 	bl	8000244 <strlen>
 80119ca:	6834      	ldr	r4, [r6, #0]
 80119cc:	4605      	mov	r5, r0
 80119ce:	b11c      	cbz	r4, 80119d8 <generate_type_name+0x20>
 80119d0:	4620      	mov	r0, r4
 80119d2:	f7ee fc37 	bl	8000244 <strlen>
 80119d6:	4604      	mov	r4, r0
 80119d8:	2300      	movs	r3, #0
 80119da:	f888 3000 	strb.w	r3, [r8]
 80119de:	6833      	ldr	r3, [r6, #0]
 80119e0:	3508      	adds	r5, #8
 80119e2:	442c      	add	r4, r5
 80119e4:	b19b      	cbz	r3, 8011a0e <generate_type_name+0x56>
 80119e6:	490c      	ldr	r1, [pc, #48]	; (8011a18 <generate_type_name+0x60>)
 80119e8:	4608      	mov	r0, r1
 80119ea:	6875      	ldr	r5, [r6, #4]
 80119ec:	4a0b      	ldr	r2, [pc, #44]	; (8011a1c <generate_type_name+0x64>)
 80119ee:	9504      	str	r5, [sp, #16]
 80119f0:	4d0b      	ldr	r5, [pc, #44]	; (8011a20 <generate_type_name+0x68>)
 80119f2:	9103      	str	r1, [sp, #12]
 80119f4:	e9cd 5201 	strd	r5, r2, [sp, #4]
 80119f8:	9000      	str	r0, [sp, #0]
 80119fa:	9205      	str	r2, [sp, #20]
 80119fc:	4639      	mov	r1, r7
 80119fe:	4640      	mov	r0, r8
 8011a00:	4a08      	ldr	r2, [pc, #32]	; (8011a24 <generate_type_name+0x6c>)
 8011a02:	f008 fffd 	bl	801aa00 <sniprintf>
 8011a06:	4620      	mov	r0, r4
 8011a08:	b006      	add	sp, #24
 8011a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0e:	4b06      	ldr	r3, [pc, #24]	; (8011a28 <generate_type_name+0x70>)
 8011a10:	4901      	ldr	r1, [pc, #4]	; (8011a18 <generate_type_name+0x60>)
 8011a12:	4618      	mov	r0, r3
 8011a14:	e7e9      	b.n	80119ea <generate_type_name+0x32>
 8011a16:	bf00      	nop
 8011a18:	0801d1cc 	.word	0x0801d1cc
 8011a1c:	0801d1e0 	.word	0x0801d1e0
 8011a20:	0801d1e4 	.word	0x0801d1e4
 8011a24:	0801d1d0 	.word	0x0801d1d0
 8011a28:	0801d754 	.word	0x0801d754

08011a2c <generate_topic_name>:
 8011a2c:	b510      	push	{r4, lr}
 8011a2e:	b082      	sub	sp, #8
 8011a30:	9000      	str	r0, [sp, #0]
 8011a32:	4614      	mov	r4, r2
 8011a34:	4608      	mov	r0, r1
 8011a36:	4b06      	ldr	r3, [pc, #24]	; (8011a50 <generate_topic_name+0x24>)
 8011a38:	4611      	mov	r1, r2
 8011a3a:	4a06      	ldr	r2, [pc, #24]	; (8011a54 <generate_topic_name+0x28>)
 8011a3c:	f008 ffe0 	bl	801aa00 <sniprintf>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	da02      	bge.n	8011a4a <generate_topic_name+0x1e>
 8011a44:	4284      	cmp	r4, r0
 8011a46:	bfd8      	it	le
 8011a48:	2000      	movle	r0, #0
 8011a4a:	b002      	add	sp, #8
 8011a4c:	bd10      	pop	{r4, pc}
 8011a4e:	bf00      	nop
 8011a50:	0801d1f0 	.word	0x0801d1f0
 8011a54:	0801d1e8 	.word	0x0801d1e8

08011a58 <is_uxrce_rmw_identifier_valid>:
 8011a58:	b510      	push	{r4, lr}
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	b140      	cbz	r0, 8011a70 <is_uxrce_rmw_identifier_valid+0x18>
 8011a5e:	f007 fa47 	bl	8018ef0 <rmw_get_implementation_identifier>
 8011a62:	4601      	mov	r1, r0
 8011a64:	4620      	mov	r0, r4
 8011a66:	f7ee fbe3 	bl	8000230 <strcmp>
 8011a6a:	fab0 f080 	clz	r0, r0
 8011a6e:	0940      	lsrs	r0, r0, #5
 8011a70:	bd10      	pop	{r4, pc}
 8011a72:	bf00      	nop

08011a74 <get_message_typesupport_handle>:
 8011a74:	6883      	ldr	r3, [r0, #8]
 8011a76:	4718      	bx	r3

08011a78 <get_message_typesupport_handle_function>:
 8011a78:	b510      	push	{r4, lr}
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	6800      	ldr	r0, [r0, #0]
 8011a7e:	f7ee fbd7 	bl	8000230 <strcmp>
 8011a82:	2800      	cmp	r0, #0
 8011a84:	bf0c      	ite	eq
 8011a86:	4620      	moveq	r0, r4
 8011a88:	2000      	movne	r0, #0
 8011a8a:	bd10      	pop	{r4, pc}

08011a8c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011a8c:	f000 b8e8 	b.w	8011c60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>

08011a90 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 8011a90:	f000 ba44 	b.w	8011f1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>

08011a94 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 8011a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a96:	4607      	mov	r7, r0
 8011a98:	460e      	mov	r6, r1
 8011a9a:	f000 fadd 	bl	8012058 <get_serialized_size_std_msgs__msg__Header>
 8011a9e:	1835      	adds	r5, r6, r0
 8011aa0:	4629      	mov	r1, r5
 8011aa2:	f107 0018 	add.w	r0, r7, #24
 8011aa6:	f000 fd07 	bl	80124b8 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8011aaa:	4405      	add	r5, r0
 8011aac:	4628      	mov	r0, r5
 8011aae:	2108      	movs	r1, #8
 8011ab0:	f7fd f886 	bl	800ebc0 <ucdr_alignment>
 8011ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ab8:	4425      	add	r5, r4
 8011aba:	4629      	mov	r1, r5
 8011abc:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8011ac0:	f7fb fba6 	bl	800d210 <get_serialized_size_geometry_msgs__msg__Vector3>
 8011ac4:	4405      	add	r5, r0
 8011ac6:	4628      	mov	r0, r5
 8011ac8:	2108      	movs	r1, #8
 8011aca:	f7fd f879 	bl	800ebc0 <ucdr_alignment>
 8011ace:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ad2:	442c      	add	r4, r5
 8011ad4:	4621      	mov	r1, r4
 8011ad6:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8011ada:	f7fb fb99 	bl	800d210 <get_serialized_size_geometry_msgs__msg__Vector3>
 8011ade:	4404      	add	r4, r0
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	2108      	movs	r1, #8
 8011ae4:	f7fd f86c 	bl	800ebc0 <ucdr_alignment>
 8011ae8:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 8011aec:	4430      	add	r0, r6
 8011aee:	4420      	add	r0, r4
 8011af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011af2:	bf00      	nop

08011af4 <get_serialized_size_sensor_msgs__msg__Imu>:
 8011af4:	b108      	cbz	r0, 8011afa <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8011af6:	f7ff bfcd 	b.w	8011a94 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011afa:	4770      	bx	lr

08011afc <_Imu__get_serialized_size>:
 8011afc:	b110      	cbz	r0, 8011b04 <_Imu__get_serialized_size+0x8>
 8011afe:	2100      	movs	r1, #0
 8011b00:	f7ff bfc8 	b.w	8011a94 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop

08011b08 <_Imu__cdr_deserialize>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	460c      	mov	r4, r1
 8011b0c:	b399      	cbz	r1, 8011b76 <_Imu__cdr_deserialize+0x6e>
 8011b0e:	4605      	mov	r5, r0
 8011b10:	f000 fb24 	bl	801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011b14:	6843      	ldr	r3, [r0, #4]
 8011b16:	4621      	mov	r1, r4
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	4798      	blx	r3
 8011b1e:	f000 fd81 	bl	8012624 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011b22:	6843      	ldr	r3, [r0, #4]
 8011b24:	f104 0118 	add.w	r1, r4, #24
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	4798      	blx	r3
 8011b2e:	2209      	movs	r2, #9
 8011b30:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011b34:	4628      	mov	r0, r5
 8011b36:	f001 f86d 	bl	8012c14 <ucdr_deserialize_array_double>
 8011b3a:	f7fb fbf5 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011b3e:	6843      	ldr	r3, [r0, #4]
 8011b40:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	4628      	mov	r0, r5
 8011b48:	4798      	blx	r3
 8011b4a:	2209      	movs	r2, #9
 8011b4c:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8011b50:	4628      	mov	r0, r5
 8011b52:	f001 f85f 	bl	8012c14 <ucdr_deserialize_array_double>
 8011b56:	f7fb fbe7 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011b5a:	6843      	ldr	r3, [r0, #4]
 8011b5c:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 8011b60:	4628      	mov	r0, r5
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	4798      	blx	r3
 8011b66:	4628      	mov	r0, r5
 8011b68:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8011b6c:	2209      	movs	r2, #9
 8011b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b72:	f001 b84f 	b.w	8012c14 <ucdr_deserialize_array_double>
 8011b76:	4608      	mov	r0, r1
 8011b78:	bd38      	pop	{r3, r4, r5, pc}
 8011b7a:	bf00      	nop

08011b7c <_Imu__cdr_serialize>:
 8011b7c:	2800      	cmp	r0, #0
 8011b7e:	d035      	beq.n	8011bec <_Imu__cdr_serialize+0x70>
 8011b80:	b538      	push	{r3, r4, r5, lr}
 8011b82:	460d      	mov	r5, r1
 8011b84:	4604      	mov	r4, r0
 8011b86:	f000 fae9 	bl	801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011b8a:	6843      	ldr	r3, [r0, #4]
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	4620      	mov	r0, r4
 8011b92:	4798      	blx	r3
 8011b94:	f000 fd46 	bl	8012624 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011b98:	6843      	ldr	r3, [r0, #4]
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	689b      	ldr	r3, [r3, #8]
 8011b9e:	f104 0018 	add.w	r0, r4, #24
 8011ba2:	4798      	blx	r3
 8011ba4:	2209      	movs	r2, #9
 8011ba6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8011baa:	4628      	mov	r0, r5
 8011bac:	f000 ff86 	bl	8012abc <ucdr_serialize_array_double>
 8011bb0:	f7fb fbba 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011bb4:	6843      	ldr	r3, [r0, #4]
 8011bb6:	4629      	mov	r1, r5
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8011bbe:	4798      	blx	r3
 8011bc0:	2209      	movs	r2, #9
 8011bc2:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8011bc6:	4628      	mov	r0, r5
 8011bc8:	f000 ff78 	bl	8012abc <ucdr_serialize_array_double>
 8011bcc:	f7fb fbac 	bl	800d328 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011bd0:	6843      	ldr	r3, [r0, #4]
 8011bd2:	4629      	mov	r1, r5
 8011bd4:	689b      	ldr	r3, [r3, #8]
 8011bd6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8011bda:	4798      	blx	r3
 8011bdc:	4628      	mov	r0, r5
 8011bde:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 8011be2:	2209      	movs	r2, #9
 8011be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011be8:	f000 bf68 	b.w	8012abc <ucdr_serialize_array_double>
 8011bec:	4770      	bx	lr
 8011bee:	bf00      	nop

08011bf0 <max_serialized_size_sensor_msgs__msg__Imu>:
 8011bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	7003      	strb	r3, [r0, #0]
 8011bf6:	4607      	mov	r7, r0
 8011bf8:	460e      	mov	r6, r1
 8011bfa:	f000 faa5 	bl	8012148 <max_serialized_size_std_msgs__msg__Header>
 8011bfe:	1835      	adds	r5, r6, r0
 8011c00:	4629      	mov	r1, r5
 8011c02:	4638      	mov	r0, r7
 8011c04:	f000 fcea 	bl	80125dc <max_serialized_size_geometry_msgs__msg__Quaternion>
 8011c08:	4405      	add	r5, r0
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	2108      	movs	r1, #8
 8011c0e:	f7fc ffd7 	bl	800ebc0 <ucdr_alignment>
 8011c12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c16:	4425      	add	r5, r4
 8011c18:	4629      	mov	r1, r5
 8011c1a:	4638      	mov	r0, r7
 8011c1c:	f7fb fb68 	bl	800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011c20:	4405      	add	r5, r0
 8011c22:	4628      	mov	r0, r5
 8011c24:	2108      	movs	r1, #8
 8011c26:	f7fc ffcb 	bl	800ebc0 <ucdr_alignment>
 8011c2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c2e:	442c      	add	r4, r5
 8011c30:	4621      	mov	r1, r4
 8011c32:	4638      	mov	r0, r7
 8011c34:	f7fb fb5c 	bl	800d2f0 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011c38:	4404      	add	r4, r0
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	2108      	movs	r1, #8
 8011c3e:	f7fc ffbf 	bl	800ebc0 <ucdr_alignment>
 8011c42:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 8011c46:	4430      	add	r0, r6
 8011c48:	4420      	add	r0, r4
 8011c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c4c <_Imu__max_serialized_size>:
 8011c4c:	b500      	push	{lr}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	2100      	movs	r1, #0
 8011c52:	f10d 0007 	add.w	r0, sp, #7
 8011c56:	f7ff ffcb 	bl	8011bf0 <max_serialized_size_sensor_msgs__msg__Imu>
 8011c5a:	b003      	add	sp, #12
 8011c5c:	f85d fb04 	ldr.w	pc, [sp], #4

08011c60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011c60:	4800      	ldr	r0, [pc, #0]	; (8011c64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 8011c62:	4770      	bx	lr
 8011c64:	200000b8 	.word	0x200000b8

08011c68 <_JointState__max_serialized_size>:
 8011c68:	2301      	movs	r3, #1
 8011c6a:	b500      	push	{lr}
 8011c6c:	b083      	sub	sp, #12
 8011c6e:	2100      	movs	r1, #0
 8011c70:	f10d 0007 	add.w	r0, sp, #7
 8011c74:	f88d 3007 	strb.w	r3, [sp, #7]
 8011c78:	f000 fa66 	bl	8012148 <max_serialized_size_std_msgs__msg__Header>
 8011c7c:	b003      	add	sp, #12
 8011c7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c82:	bf00      	nop

08011c84 <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 8011c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c88:	4688      	mov	r8, r1
 8011c8a:	4606      	mov	r6, r0
 8011c8c:	f000 f9e4 	bl	8012058 <get_serialized_size_std_msgs__msg__Header>
 8011c90:	eb08 0400 	add.w	r4, r8, r0
 8011c94:	4620      	mov	r0, r4
 8011c96:	2104      	movs	r1, #4
 8011c98:	69b7      	ldr	r7, [r6, #24]
 8011c9a:	f7fc ff91 	bl	800ebc0 <ucdr_alignment>
 8011c9e:	1d03      	adds	r3, r0, #4
 8011ca0:	441c      	add	r4, r3
 8011ca2:	b187      	cbz	r7, 8011cc6 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x42>
 8011ca4:	2500      	movs	r5, #0
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	2104      	movs	r1, #4
 8011caa:	f7fc ff89 	bl	800ebc0 <ucdr_alignment>
 8011cae:	6973      	ldr	r3, [r6, #20]
 8011cb0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8011cb4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8011cb8:	3501      	adds	r5, #1
 8011cba:	1903      	adds	r3, r0, r4
 8011cbc:	6854      	ldr	r4, [r2, #4]
 8011cbe:	3305      	adds	r3, #5
 8011cc0:	42af      	cmp	r7, r5
 8011cc2:	441c      	add	r4, r3
 8011cc4:	d1ef      	bne.n	8011ca6 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 8011cc6:	2104      	movs	r1, #4
 8011cc8:	4620      	mov	r0, r4
 8011cca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8011ccc:	f7fc ff78 	bl	800ebc0 <ucdr_alignment>
 8011cd0:	4404      	add	r4, r0
 8011cd2:	3404      	adds	r4, #4
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	2108      	movs	r1, #8
 8011cd8:	f7fc ff72 	bl	800ebc0 <ucdr_alignment>
 8011cdc:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8011ce0:	442c      	add	r4, r5
 8011ce2:	4620      	mov	r0, r4
 8011ce4:	2104      	movs	r1, #4
 8011ce6:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8011ce8:	f7fc ff6a 	bl	800ebc0 <ucdr_alignment>
 8011cec:	1d05      	adds	r5, r0, #4
 8011cee:	4425      	add	r5, r4
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	2108      	movs	r1, #8
 8011cf4:	f7fc ff64 	bl	800ebc0 <ucdr_alignment>
 8011cf8:	eb00 04c7 	add.w	r4, r0, r7, lsl #3
 8011cfc:	4425      	add	r5, r4
 8011cfe:	4628      	mov	r0, r5
 8011d00:	2104      	movs	r1, #4
 8011d02:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 8011d04:	f7fc ff5c 	bl	800ebc0 <ucdr_alignment>
 8011d08:	1d04      	adds	r4, r0, #4
 8011d0a:	442c      	add	r4, r5
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	2108      	movs	r1, #8
 8011d10:	f7fc ff56 	bl	800ebc0 <ucdr_alignment>
 8011d14:	ebc8 08c6 	rsb	r8, r8, r6, lsl #3
 8011d18:	4440      	add	r0, r8
 8011d1a:	4420      	add	r0, r4
 8011d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d20 <get_serialized_size_sensor_msgs__msg__JointState>:
 8011d20:	b108      	cbz	r0, 8011d26 <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 8011d22:	f7ff bfaf 	b.w	8011c84 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 8011d26:	4770      	bx	lr

08011d28 <_JointState__get_serialized_size>:
 8011d28:	b110      	cbz	r0, 8011d30 <_JointState__get_serialized_size+0x8>
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	f7ff bfaa 	b.w	8011c84 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 8011d30:	4770      	bx	lr
 8011d32:	bf00      	nop

08011d34 <_JointState__cdr_deserialize>:
 8011d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d38:	460d      	mov	r5, r1
 8011d3a:	b083      	sub	sp, #12
 8011d3c:	2900      	cmp	r1, #0
 8011d3e:	d073      	beq.n	8011e28 <_JointState__cdr_deserialize+0xf4>
 8011d40:	4606      	mov	r6, r0
 8011d42:	f000 fa0b 	bl	801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011d46:	6843      	ldr	r3, [r0, #4]
 8011d48:	4629      	mov	r1, r5
 8011d4a:	68db      	ldr	r3, [r3, #12]
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	4798      	blx	r3
 8011d50:	4669      	mov	r1, sp
 8011d52:	4630      	mov	r0, r6
 8011d54:	f7fb fe64 	bl	800da20 <ucdr_deserialize_uint32_t>
 8011d58:	9b00      	ldr	r3, [sp, #0]
 8011d5a:	69ea      	ldr	r2, [r5, #28]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d34d      	bcc.n	8011dfc <_JointState__cdr_deserialize+0xc8>
 8011d60:	61ab      	str	r3, [r5, #24]
 8011d62:	f10d 0804 	add.w	r8, sp, #4
 8011d66:	b320      	cbz	r0, 8011db2 <_JointState__cdr_deserialize+0x7e>
 8011d68:	2400      	movs	r4, #0
 8011d6a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011d6e:	429c      	cmp	r4, r3
 8011d70:	f10d 0804 	add.w	r8, sp, #4
 8011d74:	ea4f 0781 	mov.w	r7, r1, lsl #2
 8011d78:	d21b      	bcs.n	8011db2 <_JointState__cdr_deserialize+0x7e>
 8011d7a:	696a      	ldr	r2, [r5, #20]
 8011d7c:	4643      	mov	r3, r8
 8011d7e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8011d82:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8011d86:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	464a      	mov	r2, r9
 8011d8e:	f000 fffd 	bl	8012d8c <ucdr_deserialize_sequence_char>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d037      	beq.n	8011e06 <_JointState__cdr_deserialize+0xd2>
 8011d96:	9901      	ldr	r1, [sp, #4]
 8011d98:	b101      	cbz	r1, 8011d9c <_JointState__cdr_deserialize+0x68>
 8011d9a:	3901      	subs	r1, #1
 8011d9c:	696a      	ldr	r2, [r5, #20]
 8011d9e:	9b00      	ldr	r3, [sp, #0]
 8011da0:	4417      	add	r7, r2
 8011da2:	3401      	adds	r4, #1
 8011da4:	6079      	str	r1, [r7, #4]
 8011da6:	429c      	cmp	r4, r3
 8011da8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011dac:	ea4f 0781 	mov.w	r7, r1, lsl #2
 8011db0:	d3e3      	bcc.n	8011d7a <_JointState__cdr_deserialize+0x46>
 8011db2:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8011db4:	4643      	mov	r3, r8
 8011db6:	4622      	mov	r2, r4
 8011db8:	4630      	mov	r0, r6
 8011dba:	6a29      	ldr	r1, [r5, #32]
 8011dbc:	f001 f86a 	bl	8012e94 <ucdr_deserialize_sequence_double>
 8011dc0:	9b01      	ldr	r3, [sp, #4]
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d055      	beq.n	8011e72 <_JointState__cdr_deserialize+0x13e>
 8011dc6:	626b      	str	r3, [r5, #36]	; 0x24
 8011dc8:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8011dca:	4643      	mov	r3, r8
 8011dcc:	4622      	mov	r2, r4
 8011dce:	4630      	mov	r0, r6
 8011dd0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8011dd2:	f001 f85f 	bl	8012e94 <ucdr_deserialize_sequence_double>
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d03a      	beq.n	8011e52 <_JointState__cdr_deserialize+0x11e>
 8011ddc:	632b      	str	r3, [r5, #48]	; 0x30
 8011dde:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8011de0:	4643      	mov	r3, r8
 8011de2:	463a      	mov	r2, r7
 8011de4:	4630      	mov	r0, r6
 8011de6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8011de8:	f001 f854 	bl	8012e94 <ucdr_deserialize_sequence_double>
 8011dec:	9b01      	ldr	r3, [sp, #4]
 8011dee:	4604      	mov	r4, r0
 8011df0:	b1f8      	cbz	r0, 8011e32 <_JointState__cdr_deserialize+0xfe>
 8011df2:	4620      	mov	r0, r4
 8011df4:	63eb      	str	r3, [r5, #60]	; 0x3c
 8011df6:	b003      	add	sp, #12
 8011df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dfc:	2400      	movs	r4, #0
 8011dfe:	4620      	mov	r0, r4
 8011e00:	b003      	add	sp, #12
 8011e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e06:	9b01      	ldr	r3, [sp, #4]
 8011e08:	4599      	cmp	r9, r3
 8011e0a:	d2d2      	bcs.n	8011db2 <_JointState__cdr_deserialize+0x7e>
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	7571      	strb	r1, [r6, #21]
 8011e10:	696b      	ldr	r3, [r5, #20]
 8011e12:	75b0      	strb	r0, [r6, #22]
 8011e14:	441f      	add	r7, r3
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	4630      	mov	r0, r6
 8011e1a:	f7fc fee9 	bl	800ebf0 <ucdr_align_to>
 8011e1e:	4630      	mov	r0, r6
 8011e20:	9901      	ldr	r1, [sp, #4]
 8011e22:	f7fc ff1b 	bl	800ec5c <ucdr_advance_buffer>
 8011e26:	e7c4      	b.n	8011db2 <_JointState__cdr_deserialize+0x7e>
 8011e28:	460c      	mov	r4, r1
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	b003      	add	sp, #12
 8011e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e32:	429f      	cmp	r7, r3
 8011e34:	d2e3      	bcs.n	8011dfe <_JointState__cdr_deserialize+0xca>
 8011e36:	2301      	movs	r3, #1
 8011e38:	75b0      	strb	r0, [r6, #22]
 8011e3a:	7573      	strb	r3, [r6, #21]
 8011e3c:	2108      	movs	r1, #8
 8011e3e:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011e40:	4630      	mov	r0, r6
 8011e42:	f7fc fed5 	bl	800ebf0 <ucdr_align_to>
 8011e46:	9901      	ldr	r1, [sp, #4]
 8011e48:	4630      	mov	r0, r6
 8011e4a:	00c9      	lsls	r1, r1, #3
 8011e4c:	f7fc ff06 	bl	800ec5c <ucdr_advance_buffer>
 8011e50:	e7d5      	b.n	8011dfe <_JointState__cdr_deserialize+0xca>
 8011e52:	429c      	cmp	r4, r3
 8011e54:	d2c3      	bcs.n	8011dde <_JointState__cdr_deserialize+0xaa>
 8011e56:	2301      	movs	r3, #1
 8011e58:	75b0      	strb	r0, [r6, #22]
 8011e5a:	7573      	strb	r3, [r6, #21]
 8011e5c:	2108      	movs	r1, #8
 8011e5e:	6328      	str	r0, [r5, #48]	; 0x30
 8011e60:	4630      	mov	r0, r6
 8011e62:	f7fc fec5 	bl	800ebf0 <ucdr_align_to>
 8011e66:	9901      	ldr	r1, [sp, #4]
 8011e68:	4630      	mov	r0, r6
 8011e6a:	00c9      	lsls	r1, r1, #3
 8011e6c:	f7fc fef6 	bl	800ec5c <ucdr_advance_buffer>
 8011e70:	e7b5      	b.n	8011dde <_JointState__cdr_deserialize+0xaa>
 8011e72:	429c      	cmp	r4, r3
 8011e74:	d2a8      	bcs.n	8011dc8 <_JointState__cdr_deserialize+0x94>
 8011e76:	2301      	movs	r3, #1
 8011e78:	75b0      	strb	r0, [r6, #22]
 8011e7a:	7573      	strb	r3, [r6, #21]
 8011e7c:	2108      	movs	r1, #8
 8011e7e:	6268      	str	r0, [r5, #36]	; 0x24
 8011e80:	4630      	mov	r0, r6
 8011e82:	f7fc feb5 	bl	800ebf0 <ucdr_align_to>
 8011e86:	9901      	ldr	r1, [sp, #4]
 8011e88:	4630      	mov	r0, r6
 8011e8a:	00c9      	lsls	r1, r1, #3
 8011e8c:	f7fc fee6 	bl	800ec5c <ucdr_advance_buffer>
 8011e90:	e79a      	b.n	8011dc8 <_JointState__cdr_deserialize+0x94>
 8011e92:	bf00      	nop

08011e94 <_JointState__cdr_serialize>:
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d040      	beq.n	8011f1a <_JointState__cdr_serialize+0x86>
 8011e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e9c:	4688      	mov	r8, r1
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	f000 f95c 	bl	801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011ea4:	6843      	ldr	r3, [r0, #4]
 8011ea6:	4641      	mov	r1, r8
 8011ea8:	4638      	mov	r0, r7
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	4798      	blx	r3
 8011eae:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8011eb2:	4640      	mov	r0, r8
 8011eb4:	4649      	mov	r1, r9
 8011eb6:	f7fb fc83 	bl	800d7c0 <ucdr_serialize_uint32_t>
 8011eba:	b1e8      	cbz	r0, 8011ef8 <_JointState__cdr_serialize+0x64>
 8011ebc:	f1b9 0f00 	cmp.w	r9, #0
 8011ec0:	d01a      	beq.n	8011ef8 <_JointState__cdr_serialize+0x64>
 8011ec2:	2400      	movs	r4, #0
 8011ec4:	e00c      	b.n	8011ee0 <_JointState__cdr_serialize+0x4c>
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	f7ee f9bc 	bl	8000244 <strlen>
 8011ecc:	1c42      	adds	r2, r0, #1
 8011ece:	6068      	str	r0, [r5, #4]
 8011ed0:	4631      	mov	r1, r6
 8011ed2:	4640      	mov	r0, r8
 8011ed4:	f000 ff48 	bl	8012d68 <ucdr_serialize_sequence_char>
 8011ed8:	3401      	adds	r4, #1
 8011eda:	b168      	cbz	r0, 8011ef8 <_JointState__cdr_serialize+0x64>
 8011edc:	45a1      	cmp	r9, r4
 8011ede:	d00b      	beq.n	8011ef8 <_JointState__cdr_serialize+0x64>
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8011ee6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8011eea:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011eee:	2e00      	cmp	r6, #0
 8011ef0:	d1e9      	bne.n	8011ec6 <_JointState__cdr_serialize+0x32>
 8011ef2:	4632      	mov	r2, r6
 8011ef4:	4630      	mov	r0, r6
 8011ef6:	e7ea      	b.n	8011ece <_JointState__cdr_serialize+0x3a>
 8011ef8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011efc:	4640      	mov	r0, r8
 8011efe:	f000 ffb7 	bl	8012e70 <ucdr_serialize_sequence_double>
 8011f02:	e9d7 120b 	ldrd	r1, r2, [r7, #44]	; 0x2c
 8011f06:	4640      	mov	r0, r8
 8011f08:	f000 ffb2 	bl	8012e70 <ucdr_serialize_sequence_double>
 8011f0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8011f10:	4640      	mov	r0, r8
 8011f12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f16:	f000 bfab 	b.w	8012e70 <ucdr_serialize_sequence_double>
 8011f1a:	4770      	bx	lr

08011f1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 8011f1c:	4800      	ldr	r0, [pc, #0]	; (8011f20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 8011f1e:	4770      	bx	lr
 8011f20:	200000e0 	.word	0x200000e0

08011f24 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 8011f24:	f000 b886 	b.w	8012034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>

08011f28 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8>:
 8011f28:	f000 b9ea 	b.w	8012300 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8>

08011f2c <_Float32MultiArray__max_serialized_size>:
 8011f2c:	2301      	movs	r3, #1
 8011f2e:	b500      	push	{lr}
 8011f30:	b083      	sub	sp, #12
 8011f32:	2100      	movs	r1, #0
 8011f34:	f10d 0007 	add.w	r0, sp, #7
 8011f38:	f88d 3007 	strb.w	r3, [sp, #7]
 8011f3c:	f000 f9aa 	bl	8012294 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011f40:	b003      	add	sp, #12
 8011f42:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f46:	bf00      	nop

08011f48 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	b190      	cbz	r0, 8011f74 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x2c>
 8011f4e:	460d      	mov	r5, r1
 8011f50:	f000 f944 	bl	80121dc <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8011f54:	182e      	adds	r6, r5, r0
 8011f56:	2104      	movs	r1, #4
 8011f58:	4630      	mov	r0, r6
 8011f5a:	6967      	ldr	r7, [r4, #20]
 8011f5c:	f7fc fe30 	bl	800ebc0 <ucdr_alignment>
 8011f60:	1d04      	adds	r4, r0, #4
 8011f62:	4434      	add	r4, r6
 8011f64:	4620      	mov	r0, r4
 8011f66:	2104      	movs	r1, #4
 8011f68:	f7fc fe2a 	bl	800ebc0 <ucdr_alignment>
 8011f6c:	ebc5 0587 	rsb	r5, r5, r7, lsl #2
 8011f70:	4428      	add	r0, r5
 8011f72:	4420      	add	r0, r4
 8011f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f76:	bf00      	nop

08011f78 <_Float32MultiArray__cdr_deserialize>:
 8011f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	b083      	sub	sp, #12
 8011f7e:	b1d1      	cbz	r1, 8011fb6 <_Float32MultiArray__cdr_deserialize+0x3e>
 8011f80:	4606      	mov	r6, r0
 8011f82:	f000 f991 	bl	80122a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011f86:	6843      	ldr	r3, [r0, #4]
 8011f88:	4621      	mov	r1, r4
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	4630      	mov	r0, r6
 8011f8e:	4798      	blx	r3
 8011f90:	69a7      	ldr	r7, [r4, #24]
 8011f92:	ab01      	add	r3, sp, #4
 8011f94:	463a      	mov	r2, r7
 8011f96:	4630      	mov	r0, r6
 8011f98:	6921      	ldr	r1, [r4, #16]
 8011f9a:	f000 ff4f 	bl	8012e3c <ucdr_deserialize_sequence_float>
 8011f9e:	9b01      	ldr	r3, [sp, #4]
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	b920      	cbnz	r0, 8011fae <_Float32MultiArray__cdr_deserialize+0x36>
 8011fa4:	429f      	cmp	r7, r3
 8011fa6:	d30a      	bcc.n	8011fbe <_Float32MultiArray__cdr_deserialize+0x46>
 8011fa8:	4628      	mov	r0, r5
 8011faa:	b003      	add	sp, #12
 8011fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fae:	4628      	mov	r0, r5
 8011fb0:	6163      	str	r3, [r4, #20]
 8011fb2:	b003      	add	sp, #12
 8011fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb6:	460d      	mov	r5, r1
 8011fb8:	4628      	mov	r0, r5
 8011fba:	b003      	add	sp, #12
 8011fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	75b0      	strb	r0, [r6, #22]
 8011fc2:	7573      	strb	r3, [r6, #21]
 8011fc4:	2104      	movs	r1, #4
 8011fc6:	6160      	str	r0, [r4, #20]
 8011fc8:	4630      	mov	r0, r6
 8011fca:	f7fc fe11 	bl	800ebf0 <ucdr_align_to>
 8011fce:	9901      	ldr	r1, [sp, #4]
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	0089      	lsls	r1, r1, #2
 8011fd4:	f7fc fe42 	bl	800ec5c <ucdr_advance_buffer>
 8011fd8:	4628      	mov	r0, r5
 8011fda:	b003      	add	sp, #12
 8011fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fde:	bf00      	nop

08011fe0 <_Float32MultiArray__cdr_serialize>:
 8011fe0:	b180      	cbz	r0, 8012004 <_Float32MultiArray__cdr_serialize+0x24>
 8011fe2:	b538      	push	{r3, r4, r5, lr}
 8011fe4:	460d      	mov	r5, r1
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	f000 f95e 	bl	80122a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8011fec:	6843      	ldr	r3, [r0, #4]
 8011fee:	4629      	mov	r1, r5
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	4798      	blx	r3
 8011ff6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012000:	f000 bf0a 	b.w	8012e18 <ucdr_serialize_sequence_float>
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop

08012008 <_Float32MultiArray__get_serialized_size>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	4604      	mov	r4, r0
 801200c:	b180      	cbz	r0, 8012030 <_Float32MultiArray__get_serialized_size+0x28>
 801200e:	2100      	movs	r1, #0
 8012010:	f000 f8e4 	bl	80121dc <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8012014:	2104      	movs	r1, #4
 8012016:	6965      	ldr	r5, [r4, #20]
 8012018:	4604      	mov	r4, r0
 801201a:	f7fc fdd1 	bl	800ebc0 <ucdr_alignment>
 801201e:	4404      	add	r4, r0
 8012020:	3404      	adds	r4, #4
 8012022:	4620      	mov	r0, r4
 8012024:	2104      	movs	r1, #4
 8012026:	f7fc fdcb 	bl	800ebc0 <ucdr_alignment>
 801202a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801202e:	4420      	add	r0, r4
 8012030:	bd38      	pop	{r3, r4, r5, pc}
 8012032:	bf00      	nop

08012034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 8012034:	4800      	ldr	r0, [pc, #0]	; (8012038 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 8012036:	4770      	bx	lr
 8012038:	20000108 	.word	0x20000108

0801203c <_Header__max_serialized_size>:
 801203c:	2301      	movs	r3, #1
 801203e:	b500      	push	{lr}
 8012040:	b083      	sub	sp, #12
 8012042:	2100      	movs	r1, #0
 8012044:	f10d 0007 	add.w	r0, sp, #7
 8012048:	f88d 3007 	strb.w	r3, [sp, #7]
 801204c:	f000 f9ac 	bl	80123a8 <max_serialized_size_builtin_interfaces__msg__Time>
 8012050:	b003      	add	sp, #12
 8012052:	f85d fb04 	ldr.w	pc, [sp], #4
 8012056:	bf00      	nop

08012058 <get_serialized_size_std_msgs__msg__Header>:
 8012058:	b570      	push	{r4, r5, r6, lr}
 801205a:	4605      	mov	r5, r0
 801205c:	b168      	cbz	r0, 801207a <get_serialized_size_std_msgs__msg__Header+0x22>
 801205e:	460c      	mov	r4, r1
 8012060:	f000 f952 	bl	8012308 <get_serialized_size_builtin_interfaces__msg__Time>
 8012064:	1826      	adds	r6, r4, r0
 8012066:	2104      	movs	r1, #4
 8012068:	4630      	mov	r0, r6
 801206a:	f7fc fda9 	bl	800ebc0 <ucdr_alignment>
 801206e:	68e9      	ldr	r1, [r5, #12]
 8012070:	f1c4 0405 	rsb	r4, r4, #5
 8012074:	440c      	add	r4, r1
 8012076:	4404      	add	r4, r0
 8012078:	19a0      	adds	r0, r4, r6
 801207a:	bd70      	pop	{r4, r5, r6, pc}

0801207c <_Header__cdr_deserialize>:
 801207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801207e:	460c      	mov	r4, r1
 8012080:	b083      	sub	sp, #12
 8012082:	b1e1      	cbz	r1, 80120be <_Header__cdr_deserialize+0x42>
 8012084:	4606      	mov	r6, r0
 8012086:	f000 f9a3 	bl	80123d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801208a:	6843      	ldr	r3, [r0, #4]
 801208c:	4621      	mov	r1, r4
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	4630      	mov	r0, r6
 8012092:	4798      	blx	r3
 8012094:	6927      	ldr	r7, [r4, #16]
 8012096:	ab01      	add	r3, sp, #4
 8012098:	463a      	mov	r2, r7
 801209a:	4630      	mov	r0, r6
 801209c:	68a1      	ldr	r1, [r4, #8]
 801209e:	f000 fe75 	bl	8012d8c <ucdr_deserialize_sequence_char>
 80120a2:	9b01      	ldr	r3, [sp, #4]
 80120a4:	4605      	mov	r5, r0
 80120a6:	b920      	cbnz	r0, 80120b2 <_Header__cdr_deserialize+0x36>
 80120a8:	429f      	cmp	r7, r3
 80120aa:	d30c      	bcc.n	80120c6 <_Header__cdr_deserialize+0x4a>
 80120ac:	4628      	mov	r0, r5
 80120ae:	b003      	add	sp, #12
 80120b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120b2:	b103      	cbz	r3, 80120b6 <_Header__cdr_deserialize+0x3a>
 80120b4:	3b01      	subs	r3, #1
 80120b6:	4628      	mov	r0, r5
 80120b8:	60e3      	str	r3, [r4, #12]
 80120ba:	b003      	add	sp, #12
 80120bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120be:	460d      	mov	r5, r1
 80120c0:	4628      	mov	r0, r5
 80120c2:	b003      	add	sp, #12
 80120c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120c6:	2101      	movs	r1, #1
 80120c8:	75b0      	strb	r0, [r6, #22]
 80120ca:	7571      	strb	r1, [r6, #21]
 80120cc:	60e0      	str	r0, [r4, #12]
 80120ce:	4630      	mov	r0, r6
 80120d0:	f7fc fd8e 	bl	800ebf0 <ucdr_align_to>
 80120d4:	4630      	mov	r0, r6
 80120d6:	9901      	ldr	r1, [sp, #4]
 80120d8:	f7fc fdc0 	bl	800ec5c <ucdr_advance_buffer>
 80120dc:	4628      	mov	r0, r5
 80120de:	b003      	add	sp, #12
 80120e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120e2:	bf00      	nop

080120e4 <_Header__cdr_serialize>:
 80120e4:	b1f8      	cbz	r0, 8012126 <_Header__cdr_serialize+0x42>
 80120e6:	b570      	push	{r4, r5, r6, lr}
 80120e8:	4604      	mov	r4, r0
 80120ea:	460d      	mov	r5, r1
 80120ec:	f000 f970 	bl	80123d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80120f0:	6843      	ldr	r3, [r0, #4]
 80120f2:	4629      	mov	r1, r5
 80120f4:	4620      	mov	r0, r4
 80120f6:	689b      	ldr	r3, [r3, #8]
 80120f8:	4798      	blx	r3
 80120fa:	68a6      	ldr	r6, [r4, #8]
 80120fc:	b156      	cbz	r6, 8012114 <_Header__cdr_serialize+0x30>
 80120fe:	4630      	mov	r0, r6
 8012100:	f7ee f8a0 	bl	8000244 <strlen>
 8012104:	4631      	mov	r1, r6
 8012106:	60e0      	str	r0, [r4, #12]
 8012108:	1c42      	adds	r2, r0, #1
 801210a:	4628      	mov	r0, r5
 801210c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012110:	f000 be2a 	b.w	8012d68 <ucdr_serialize_sequence_char>
 8012114:	4630      	mov	r0, r6
 8012116:	4632      	mov	r2, r6
 8012118:	60e0      	str	r0, [r4, #12]
 801211a:	4631      	mov	r1, r6
 801211c:	4628      	mov	r0, r5
 801211e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012122:	f000 be21 	b.w	8012d68 <ucdr_serialize_sequence_char>
 8012126:	4770      	bx	lr

08012128 <_Header__get_serialized_size>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	4604      	mov	r4, r0
 801212c:	b150      	cbz	r0, 8012144 <_Header__get_serialized_size+0x1c>
 801212e:	2100      	movs	r1, #0
 8012130:	f000 f8ea 	bl	8012308 <get_serialized_size_builtin_interfaces__msg__Time>
 8012134:	2104      	movs	r1, #4
 8012136:	4605      	mov	r5, r0
 8012138:	f7fc fd42 	bl	800ebc0 <ucdr_alignment>
 801213c:	68e4      	ldr	r4, [r4, #12]
 801213e:	3405      	adds	r4, #5
 8012140:	442c      	add	r4, r5
 8012142:	4420      	add	r0, r4
 8012144:	bd38      	pop	{r3, r4, r5, pc}
 8012146:	bf00      	nop

08012148 <max_serialized_size_std_msgs__msg__Header>:
 8012148:	2301      	movs	r3, #1
 801214a:	b510      	push	{r4, lr}
 801214c:	7003      	strb	r3, [r0, #0]
 801214e:	4604      	mov	r4, r0
 8012150:	f000 f92a 	bl	80123a8 <max_serialized_size_builtin_interfaces__msg__Time>
 8012154:	2300      	movs	r3, #0
 8012156:	7023      	strb	r3, [r4, #0]
 8012158:	bd10      	pop	{r4, pc}
 801215a:	bf00      	nop

0801215c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801215c:	4800      	ldr	r0, [pc, #0]	; (8012160 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801215e:	4770      	bx	lr
 8012160:	20000130 	.word	0x20000130

08012164 <_MultiArrayLayout__max_serialized_size>:
 8012164:	2104      	movs	r1, #4
 8012166:	b508      	push	{r3, lr}
 8012168:	2000      	movs	r0, #0
 801216a:	f7fc fd29 	bl	800ebc0 <ucdr_alignment>
 801216e:	3004      	adds	r0, #4
 8012170:	bd08      	pop	{r3, pc}
 8012172:	bf00      	nop

08012174 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8012174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012178:	4607      	mov	r7, r0
 801217a:	4689      	mov	r9, r1
 801217c:	4608      	mov	r0, r1
 801217e:	2104      	movs	r1, #4
 8012180:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8012184:	f7fc fd1c 	bl	800ebc0 <ucdr_alignment>
 8012188:	f109 0304 	add.w	r3, r9, #4
 801218c:	18c6      	adds	r6, r0, r3
 801218e:	f1b8 0f00 	cmp.w	r8, #0
 8012192:	d018      	beq.n	80121c6 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8012194:	2500      	movs	r5, #0
 8012196:	f007 fa55 	bl	8019644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801219a:	683a      	ldr	r2, [r7, #0]
 801219c:	6843      	ldr	r3, [r0, #4]
 801219e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 80121a2:	4631      	mov	r1, r6
 80121a4:	695b      	ldr	r3, [r3, #20]
 80121a6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80121aa:	4798      	blx	r3
 80121ac:	4604      	mov	r4, r0
 80121ae:	2c04      	cmp	r4, #4
 80121b0:	4621      	mov	r1, r4
 80121b2:	4630      	mov	r0, r6
 80121b4:	bf28      	it	cs
 80121b6:	2104      	movcs	r1, #4
 80121b8:	f7fc fd02 	bl	800ebc0 <ucdr_alignment>
 80121bc:	3501      	adds	r5, #1
 80121be:	4404      	add	r4, r0
 80121c0:	45a8      	cmp	r8, r5
 80121c2:	4426      	add	r6, r4
 80121c4:	d1e7      	bne.n	8012196 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 80121c6:	2104      	movs	r1, #4
 80121c8:	4630      	mov	r0, r6
 80121ca:	f7fc fcf9 	bl	800ebc0 <ucdr_alignment>
 80121ce:	f1c9 0904 	rsb	r9, r9, #4
 80121d2:	444e      	add	r6, r9
 80121d4:	4430      	add	r0, r6
 80121d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121da:	bf00      	nop

080121dc <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 80121dc:	b108      	cbz	r0, 80121e2 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 80121de:	f7ff bfc9 	b.w	8012174 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 80121e2:	4770      	bx	lr

080121e4 <_MultiArrayLayout__get_serialized_size>:
 80121e4:	b110      	cbz	r0, 80121ec <_MultiArrayLayout__get_serialized_size+0x8>
 80121e6:	2100      	movs	r1, #0
 80121e8:	f7ff bfc4 	b.w	8012174 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop

080121f0 <_MultiArrayLayout__cdr_deserialize>:
 80121f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121f2:	460d      	mov	r5, r1
 80121f4:	b083      	sub	sp, #12
 80121f6:	b329      	cbz	r1, 8012244 <_MultiArrayLayout__cdr_deserialize+0x54>
 80121f8:	a901      	add	r1, sp, #4
 80121fa:	4607      	mov	r7, r0
 80121fc:	f7fb fc10 	bl	800da20 <ucdr_deserialize_uint32_t>
 8012200:	9b01      	ldr	r3, [sp, #4]
 8012202:	68aa      	ldr	r2, [r5, #8]
 8012204:	429a      	cmp	r2, r3
 8012206:	d31a      	bcc.n	801223e <_MultiArrayLayout__cdr_deserialize+0x4e>
 8012208:	606b      	str	r3, [r5, #4]
 801220a:	b18b      	cbz	r3, 8012230 <_MultiArrayLayout__cdr_deserialize+0x40>
 801220c:	2400      	movs	r4, #0
 801220e:	4626      	mov	r6, r4
 8012210:	e002      	b.n	8012218 <_MultiArrayLayout__cdr_deserialize+0x28>
 8012212:	9b01      	ldr	r3, [sp, #4]
 8012214:	429e      	cmp	r6, r3
 8012216:	d20b      	bcs.n	8012230 <_MultiArrayLayout__cdr_deserialize+0x40>
 8012218:	f007 fa14 	bl	8019644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801221c:	6829      	ldr	r1, [r5, #0]
 801221e:	6843      	ldr	r3, [r0, #4]
 8012220:	4421      	add	r1, r4
 8012222:	4638      	mov	r0, r7
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	4798      	blx	r3
 8012228:	3601      	adds	r6, #1
 801222a:	3414      	adds	r4, #20
 801222c:	2800      	cmp	r0, #0
 801222e:	d1f0      	bne.n	8012212 <_MultiArrayLayout__cdr_deserialize+0x22>
 8012230:	4638      	mov	r0, r7
 8012232:	f105 010c 	add.w	r1, r5, #12
 8012236:	f7fb fbf3 	bl	800da20 <ucdr_deserialize_uint32_t>
 801223a:	b003      	add	sp, #12
 801223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801223e:	2000      	movs	r0, #0
 8012240:	b003      	add	sp, #12
 8012242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012244:	4608      	mov	r0, r1
 8012246:	b003      	add	sp, #12
 8012248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801224a:	bf00      	nop

0801224c <_MultiArrayLayout__cdr_serialize>:
 801224c:	b308      	cbz	r0, 8012292 <_MultiArrayLayout__cdr_serialize+0x46>
 801224e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012250:	6847      	ldr	r7, [r0, #4]
 8012252:	460e      	mov	r6, r1
 8012254:	4605      	mov	r5, r0
 8012256:	4608      	mov	r0, r1
 8012258:	4639      	mov	r1, r7
 801225a:	f7fb fab1 	bl	800d7c0 <ucdr_serialize_uint32_t>
 801225e:	b190      	cbz	r0, 8012286 <_MultiArrayLayout__cdr_serialize+0x3a>
 8012260:	b18f      	cbz	r7, 8012286 <_MultiArrayLayout__cdr_serialize+0x3a>
 8012262:	2400      	movs	r4, #0
 8012264:	e001      	b.n	801226a <_MultiArrayLayout__cdr_serialize+0x1e>
 8012266:	42a7      	cmp	r7, r4
 8012268:	d00d      	beq.n	8012286 <_MultiArrayLayout__cdr_serialize+0x3a>
 801226a:	f007 f9eb 	bl	8019644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 801226e:	682a      	ldr	r2, [r5, #0]
 8012270:	6843      	ldr	r3, [r0, #4]
 8012272:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8012276:	4631      	mov	r1, r6
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801227e:	4798      	blx	r3
 8012280:	3401      	adds	r4, #1
 8012282:	2800      	cmp	r0, #0
 8012284:	d1ef      	bne.n	8012266 <_MultiArrayLayout__cdr_serialize+0x1a>
 8012286:	4630      	mov	r0, r6
 8012288:	68e9      	ldr	r1, [r5, #12]
 801228a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801228e:	f7fb ba97 	b.w	800d7c0 <ucdr_serialize_uint32_t>
 8012292:	4770      	bx	lr

08012294 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8012294:	b508      	push	{r3, lr}
 8012296:	2200      	movs	r2, #0
 8012298:	4603      	mov	r3, r0
 801229a:	4608      	mov	r0, r1
 801229c:	701a      	strb	r2, [r3, #0]
 801229e:	2104      	movs	r1, #4
 80122a0:	f7fc fc8e 	bl	800ebc0 <ucdr_alignment>
 80122a4:	3004      	adds	r0, #4
 80122a6:	bd08      	pop	{r3, pc}

080122a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 80122a8:	4800      	ldr	r0, [pc, #0]	; (80122ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 80122aa:	4770      	bx	lr
 80122ac:	20000158 	.word	0x20000158

080122b0 <_UInt8__max_serialized_size>:
 80122b0:	2101      	movs	r1, #1
 80122b2:	b508      	push	{r3, lr}
 80122b4:	2000      	movs	r0, #0
 80122b6:	f7fc fc83 	bl	800ebc0 <ucdr_alignment>
 80122ba:	3001      	adds	r0, #1
 80122bc:	bd08      	pop	{r3, pc}
 80122be:	bf00      	nop

080122c0 <_UInt8__cdr_deserialize>:
 80122c0:	b109      	cbz	r1, 80122c6 <_UInt8__cdr_deserialize+0x6>
 80122c2:	f7fb b879 	b.w	800d3b8 <ucdr_deserialize_uint8_t>
 80122c6:	4608      	mov	r0, r1
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop

080122cc <get_serialized_size_std_msgs__msg__UInt8>:
 80122cc:	b508      	push	{r3, lr}
 80122ce:	b120      	cbz	r0, 80122da <get_serialized_size_std_msgs__msg__UInt8+0xe>
 80122d0:	4608      	mov	r0, r1
 80122d2:	2101      	movs	r1, #1
 80122d4:	f7fc fc74 	bl	800ebc0 <ucdr_alignment>
 80122d8:	3001      	adds	r0, #1
 80122da:	bd08      	pop	{r3, pc}

080122dc <_UInt8__cdr_serialize>:
 80122dc:	460a      	mov	r2, r1
 80122de:	b118      	cbz	r0, 80122e8 <_UInt8__cdr_serialize+0xc>
 80122e0:	7801      	ldrb	r1, [r0, #0]
 80122e2:	4610      	mov	r0, r2
 80122e4:	f7fb b852 	b.w	800d38c <ucdr_serialize_uint8_t>
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop

080122ec <_UInt8__get_serialized_size>:
 80122ec:	b130      	cbz	r0, 80122fc <_UInt8__get_serialized_size+0x10>
 80122ee:	2101      	movs	r1, #1
 80122f0:	b508      	push	{r3, lr}
 80122f2:	2000      	movs	r0, #0
 80122f4:	f7fc fc64 	bl	800ebc0 <ucdr_alignment>
 80122f8:	3001      	adds	r0, #1
 80122fa:	bd08      	pop	{r3, pc}
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop

08012300 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8>:
 8012300:	4800      	ldr	r0, [pc, #0]	; (8012304 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8+0x4>)
 8012302:	4770      	bx	lr
 8012304:	20000180 	.word	0x20000180

08012308 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012308:	b180      	cbz	r0, 801232c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 801230a:	b538      	push	{r3, r4, r5, lr}
 801230c:	460d      	mov	r5, r1
 801230e:	2104      	movs	r1, #4
 8012310:	4628      	mov	r0, r5
 8012312:	f7fc fc55 	bl	800ebc0 <ucdr_alignment>
 8012316:	1d2c      	adds	r4, r5, #4
 8012318:	4404      	add	r4, r0
 801231a:	4620      	mov	r0, r4
 801231c:	2104      	movs	r1, #4
 801231e:	f7fc fc4f 	bl	800ebc0 <ucdr_alignment>
 8012322:	f1c5 0504 	rsb	r5, r5, #4
 8012326:	4428      	add	r0, r5
 8012328:	4420      	add	r0, r4
 801232a:	bd38      	pop	{r3, r4, r5, pc}
 801232c:	4770      	bx	lr
 801232e:	bf00      	nop

08012330 <_Time__cdr_deserialize>:
 8012330:	b538      	push	{r3, r4, r5, lr}
 8012332:	460c      	mov	r4, r1
 8012334:	b141      	cbz	r1, 8012348 <_Time__cdr_deserialize+0x18>
 8012336:	4605      	mov	r5, r0
 8012338:	f7fb fef4 	bl	800e124 <ucdr_deserialize_int32_t>
 801233c:	4628      	mov	r0, r5
 801233e:	1d21      	adds	r1, r4, #4
 8012340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012344:	f7fb bb6c 	b.w	800da20 <ucdr_deserialize_uint32_t>
 8012348:	4608      	mov	r0, r1
 801234a:	bd38      	pop	{r3, r4, r5, pc}

0801234c <_Time__cdr_serialize>:
 801234c:	b160      	cbz	r0, 8012368 <_Time__cdr_serialize+0x1c>
 801234e:	b538      	push	{r3, r4, r5, lr}
 8012350:	460d      	mov	r5, r1
 8012352:	4604      	mov	r4, r0
 8012354:	6801      	ldr	r1, [r0, #0]
 8012356:	4628      	mov	r0, r5
 8012358:	f7fb fe4c 	bl	800dff4 <ucdr_serialize_int32_t>
 801235c:	4628      	mov	r0, r5
 801235e:	6861      	ldr	r1, [r4, #4]
 8012360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012364:	f7fb ba2c 	b.w	800d7c0 <ucdr_serialize_uint32_t>
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop

0801236c <_Time__get_serialized_size>:
 801236c:	b160      	cbz	r0, 8012388 <_Time__get_serialized_size+0x1c>
 801236e:	b510      	push	{r4, lr}
 8012370:	2104      	movs	r1, #4
 8012372:	2000      	movs	r0, #0
 8012374:	f7fc fc24 	bl	800ebc0 <ucdr_alignment>
 8012378:	1d04      	adds	r4, r0, #4
 801237a:	4620      	mov	r0, r4
 801237c:	2104      	movs	r1, #4
 801237e:	f7fc fc1f 	bl	800ebc0 <ucdr_alignment>
 8012382:	3004      	adds	r0, #4
 8012384:	4420      	add	r0, r4
 8012386:	bd10      	pop	{r4, pc}
 8012388:	4770      	bx	lr
 801238a:	bf00      	nop

0801238c <_Time__max_serialized_size>:
 801238c:	b510      	push	{r4, lr}
 801238e:	2104      	movs	r1, #4
 8012390:	2000      	movs	r0, #0
 8012392:	f7fc fc15 	bl	800ebc0 <ucdr_alignment>
 8012396:	1d04      	adds	r4, r0, #4
 8012398:	4620      	mov	r0, r4
 801239a:	2104      	movs	r1, #4
 801239c:	f7fc fc10 	bl	800ebc0 <ucdr_alignment>
 80123a0:	3004      	adds	r0, #4
 80123a2:	4420      	add	r0, r4
 80123a4:	bd10      	pop	{r4, pc}
 80123a6:	bf00      	nop

080123a8 <max_serialized_size_builtin_interfaces__msg__Time>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	2201      	movs	r2, #1
 80123ac:	4603      	mov	r3, r0
 80123ae:	460c      	mov	r4, r1
 80123b0:	701a      	strb	r2, [r3, #0]
 80123b2:	4608      	mov	r0, r1
 80123b4:	2104      	movs	r1, #4
 80123b6:	f7fc fc03 	bl	800ebc0 <ucdr_alignment>
 80123ba:	1d25      	adds	r5, r4, #4
 80123bc:	4405      	add	r5, r0
 80123be:	4628      	mov	r0, r5
 80123c0:	2104      	movs	r1, #4
 80123c2:	f7fc fbfd 	bl	800ebc0 <ucdr_alignment>
 80123c6:	f1c4 0404 	rsb	r4, r4, #4
 80123ca:	4420      	add	r0, r4
 80123cc:	4428      	add	r0, r5
 80123ce:	bd38      	pop	{r3, r4, r5, pc}

080123d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80123d0:	4800      	ldr	r0, [pc, #0]	; (80123d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80123d2:	4770      	bx	lr
 80123d4:	200001a8 	.word	0x200001a8

080123d8 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	b158      	cbz	r0, 80123f4 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 80123dc:	460d      	mov	r5, r1
 80123de:	f007 f935 	bl	801964c <get_serialized_size_geometry_msgs__msg__Pose>
 80123e2:	182c      	adds	r4, r5, r0
 80123e4:	4620      	mov	r0, r4
 80123e6:	2108      	movs	r1, #8
 80123e8:	f7fc fbea 	bl	800ebc0 <ucdr_alignment>
 80123ec:	f5c5 7590 	rsb	r5, r5, #288	; 0x120
 80123f0:	4428      	add	r0, r5
 80123f2:	4420      	add	r0, r4
 80123f4:	bd38      	pop	{r3, r4, r5, pc}
 80123f6:	bf00      	nop

080123f8 <_PoseWithCovariance__cdr_deserialize>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	460c      	mov	r4, r1
 80123fc:	b179      	cbz	r1, 801241e <_PoseWithCovariance__cdr_deserialize+0x26>
 80123fe:	4605      	mov	r5, r0
 8012400:	f007 f990 	bl	8019724 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8012404:	6843      	ldr	r3, [r0, #4]
 8012406:	4621      	mov	r1, r4
 8012408:	4628      	mov	r0, r5
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	4798      	blx	r3
 801240e:	4628      	mov	r0, r5
 8012410:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8012414:	2224      	movs	r2, #36	; 0x24
 8012416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801241a:	f000 bbfb 	b.w	8012c14 <ucdr_deserialize_array_double>
 801241e:	4608      	mov	r0, r1
 8012420:	bd38      	pop	{r3, r4, r5, pc}
 8012422:	bf00      	nop

08012424 <_PoseWithCovariance__cdr_serialize>:
 8012424:	b188      	cbz	r0, 801244a <_PoseWithCovariance__cdr_serialize+0x26>
 8012426:	b538      	push	{r3, r4, r5, lr}
 8012428:	460d      	mov	r5, r1
 801242a:	4604      	mov	r4, r0
 801242c:	f007 f97a 	bl	8019724 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8012430:	6843      	ldr	r3, [r0, #4]
 8012432:	4629      	mov	r1, r5
 8012434:	4620      	mov	r0, r4
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	4798      	blx	r3
 801243a:	4628      	mov	r0, r5
 801243c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8012440:	2224      	movs	r2, #36	; 0x24
 8012442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012446:	f000 bb39 	b.w	8012abc <ucdr_serialize_array_double>
 801244a:	4770      	bx	lr

0801244c <_PoseWithCovariance__get_serialized_size>:
 801244c:	b158      	cbz	r0, 8012466 <_PoseWithCovariance__get_serialized_size+0x1a>
 801244e:	b510      	push	{r4, lr}
 8012450:	2100      	movs	r1, #0
 8012452:	f007 f8fb 	bl	801964c <get_serialized_size_geometry_msgs__msg__Pose>
 8012456:	2108      	movs	r1, #8
 8012458:	4604      	mov	r4, r0
 801245a:	f7fc fbb1 	bl	800ebc0 <ucdr_alignment>
 801245e:	4420      	add	r0, r4
 8012460:	f500 7090 	add.w	r0, r0, #288	; 0x120
 8012464:	bd10      	pop	{r4, pc}
 8012466:	4770      	bx	lr

08012468 <_PoseWithCovariance__max_serialized_size>:
 8012468:	2301      	movs	r3, #1
 801246a:	b510      	push	{r4, lr}
 801246c:	b082      	sub	sp, #8
 801246e:	2100      	movs	r1, #0
 8012470:	f10d 0007 	add.w	r0, sp, #7
 8012474:	f88d 3007 	strb.w	r3, [sp, #7]
 8012478:	f007 f946 	bl	8019708 <max_serialized_size_geometry_msgs__msg__Pose>
 801247c:	2108      	movs	r1, #8
 801247e:	4604      	mov	r4, r0
 8012480:	f7fc fb9e 	bl	800ebc0 <ucdr_alignment>
 8012484:	4420      	add	r0, r4
 8012486:	f500 7090 	add.w	r0, r0, #288	; 0x120
 801248a:	b002      	add	sp, #8
 801248c:	bd10      	pop	{r4, pc}
 801248e:	bf00      	nop

08012490 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012490:	b538      	push	{r3, r4, r5, lr}
 8012492:	2301      	movs	r3, #1
 8012494:	7003      	strb	r3, [r0, #0]
 8012496:	460c      	mov	r4, r1
 8012498:	f007 f936 	bl	8019708 <max_serialized_size_geometry_msgs__msg__Pose>
 801249c:	1825      	adds	r5, r4, r0
 801249e:	4628      	mov	r0, r5
 80124a0:	2108      	movs	r1, #8
 80124a2:	f7fc fb8d 	bl	800ebc0 <ucdr_alignment>
 80124a6:	f5c4 7490 	rsb	r4, r4, #288	; 0x120
 80124aa:	4420      	add	r0, r4
 80124ac:	4428      	add	r0, r5
 80124ae:	bd38      	pop	{r3, r4, r5, pc}

080124b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 80124b0:	4800      	ldr	r0, [pc, #0]	; (80124b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 80124b2:	4770      	bx	lr
 80124b4:	200001d0 	.word	0x200001d0

080124b8 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 80124b8:	b1f0      	cbz	r0, 80124f8 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 80124ba:	b570      	push	{r4, r5, r6, lr}
 80124bc:	460d      	mov	r5, r1
 80124be:	2108      	movs	r1, #8
 80124c0:	4628      	mov	r0, r5
 80124c2:	f7fc fb7d 	bl	800ebc0 <ucdr_alignment>
 80124c6:	f105 0408 	add.w	r4, r5, #8
 80124ca:	1826      	adds	r6, r4, r0
 80124cc:	4630      	mov	r0, r6
 80124ce:	2108      	movs	r1, #8
 80124d0:	f7fc fb76 	bl	800ebc0 <ucdr_alignment>
 80124d4:	f100 0408 	add.w	r4, r0, #8
 80124d8:	4434      	add	r4, r6
 80124da:	4620      	mov	r0, r4
 80124dc:	2108      	movs	r1, #8
 80124de:	f7fc fb6f 	bl	800ebc0 <ucdr_alignment>
 80124e2:	3008      	adds	r0, #8
 80124e4:	4404      	add	r4, r0
 80124e6:	4620      	mov	r0, r4
 80124e8:	2108      	movs	r1, #8
 80124ea:	f7fc fb69 	bl	800ebc0 <ucdr_alignment>
 80124ee:	f1c5 0508 	rsb	r5, r5, #8
 80124f2:	4428      	add	r0, r5
 80124f4:	4420      	add	r0, r4
 80124f6:	bd70      	pop	{r4, r5, r6, pc}
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop

080124fc <_Quaternion__cdr_deserialize>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	460c      	mov	r4, r1
 8012500:	b199      	cbz	r1, 801252a <_Quaternion__cdr_deserialize+0x2e>
 8012502:	4605      	mov	r5, r0
 8012504:	f7fc f96e 	bl	800e7e4 <ucdr_deserialize_double>
 8012508:	f104 0108 	add.w	r1, r4, #8
 801250c:	4628      	mov	r0, r5
 801250e:	f7fc f969 	bl	800e7e4 <ucdr_deserialize_double>
 8012512:	f104 0110 	add.w	r1, r4, #16
 8012516:	4628      	mov	r0, r5
 8012518:	f7fc f964 	bl	800e7e4 <ucdr_deserialize_double>
 801251c:	4628      	mov	r0, r5
 801251e:	f104 0118 	add.w	r1, r4, #24
 8012522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012526:	f7fc b95d 	b.w	800e7e4 <ucdr_deserialize_double>
 801252a:	4608      	mov	r0, r1
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop

08012530 <_Quaternion__cdr_serialize>:
 8012530:	b1c0      	cbz	r0, 8012564 <_Quaternion__cdr_serialize+0x34>
 8012532:	e9d0 2300 	ldrd	r2, r3, [r0]
 8012536:	b570      	push	{r4, r5, r6, lr}
 8012538:	460d      	mov	r5, r1
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	f7fb ffaf 	bl	800e4a0 <ucdr_serialize_double>
 8012542:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8012546:	4628      	mov	r0, r5
 8012548:	f7fb ffaa 	bl	800e4a0 <ucdr_serialize_double>
 801254c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8012550:	4628      	mov	r0, r5
 8012552:	f7fb ffa5 	bl	800e4a0 <ucdr_serialize_double>
 8012556:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801255a:	4628      	mov	r0, r5
 801255c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012560:	f7fb bf9e 	b.w	800e4a0 <ucdr_serialize_double>
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop

08012568 <_Quaternion__get_serialized_size>:
 8012568:	b1d0      	cbz	r0, 80125a0 <_Quaternion__get_serialized_size+0x38>
 801256a:	b538      	push	{r3, r4, r5, lr}
 801256c:	2108      	movs	r1, #8
 801256e:	2000      	movs	r0, #0
 8012570:	f7fc fb26 	bl	800ebc0 <ucdr_alignment>
 8012574:	f100 0508 	add.w	r5, r0, #8
 8012578:	4628      	mov	r0, r5
 801257a:	2108      	movs	r1, #8
 801257c:	f7fc fb20 	bl	800ebc0 <ucdr_alignment>
 8012580:	f100 0408 	add.w	r4, r0, #8
 8012584:	442c      	add	r4, r5
 8012586:	4620      	mov	r0, r4
 8012588:	2108      	movs	r1, #8
 801258a:	f7fc fb19 	bl	800ebc0 <ucdr_alignment>
 801258e:	3008      	adds	r0, #8
 8012590:	4404      	add	r4, r0
 8012592:	4620      	mov	r0, r4
 8012594:	2108      	movs	r1, #8
 8012596:	f7fc fb13 	bl	800ebc0 <ucdr_alignment>
 801259a:	3008      	adds	r0, #8
 801259c:	4420      	add	r0, r4
 801259e:	bd38      	pop	{r3, r4, r5, pc}
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop

080125a4 <_Quaternion__max_serialized_size>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	2108      	movs	r1, #8
 80125a8:	2000      	movs	r0, #0
 80125aa:	f7fc fb09 	bl	800ebc0 <ucdr_alignment>
 80125ae:	f100 0508 	add.w	r5, r0, #8
 80125b2:	4628      	mov	r0, r5
 80125b4:	2108      	movs	r1, #8
 80125b6:	f7fc fb03 	bl	800ebc0 <ucdr_alignment>
 80125ba:	f100 0408 	add.w	r4, r0, #8
 80125be:	4425      	add	r5, r4
 80125c0:	4628      	mov	r0, r5
 80125c2:	2108      	movs	r1, #8
 80125c4:	f7fc fafc 	bl	800ebc0 <ucdr_alignment>
 80125c8:	f100 0408 	add.w	r4, r0, #8
 80125cc:	442c      	add	r4, r5
 80125ce:	4620      	mov	r0, r4
 80125d0:	2108      	movs	r1, #8
 80125d2:	f7fc faf5 	bl	800ebc0 <ucdr_alignment>
 80125d6:	3008      	adds	r0, #8
 80125d8:	4420      	add	r0, r4
 80125da:	bd38      	pop	{r3, r4, r5, pc}

080125dc <max_serialized_size_geometry_msgs__msg__Quaternion>:
 80125dc:	4603      	mov	r3, r0
 80125de:	2201      	movs	r2, #1
 80125e0:	b570      	push	{r4, r5, r6, lr}
 80125e2:	4608      	mov	r0, r1
 80125e4:	701a      	strb	r2, [r3, #0]
 80125e6:	460c      	mov	r4, r1
 80125e8:	2108      	movs	r1, #8
 80125ea:	f7fc fae9 	bl	800ebc0 <ucdr_alignment>
 80125ee:	f104 0608 	add.w	r6, r4, #8
 80125f2:	4406      	add	r6, r0
 80125f4:	4630      	mov	r0, r6
 80125f6:	2108      	movs	r1, #8
 80125f8:	f7fc fae2 	bl	800ebc0 <ucdr_alignment>
 80125fc:	f100 0508 	add.w	r5, r0, #8
 8012600:	442e      	add	r6, r5
 8012602:	4630      	mov	r0, r6
 8012604:	2108      	movs	r1, #8
 8012606:	f7fc fadb 	bl	800ebc0 <ucdr_alignment>
 801260a:	f100 0508 	add.w	r5, r0, #8
 801260e:	4435      	add	r5, r6
 8012610:	4628      	mov	r0, r5
 8012612:	2108      	movs	r1, #8
 8012614:	f7fc fad4 	bl	800ebc0 <ucdr_alignment>
 8012618:	f1c4 0408 	rsb	r4, r4, #8
 801261c:	4420      	add	r0, r4
 801261e:	4428      	add	r0, r5
 8012620:	bd70      	pop	{r4, r5, r6, pc}
 8012622:	bf00      	nop

08012624 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8012624:	4800      	ldr	r0, [pc, #0]	; (8012628 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8012626:	4770      	bx	lr
 8012628:	200001f8 	.word	0x200001f8

0801262c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 801262c:	b538      	push	{r3, r4, r5, lr}
 801262e:	b158      	cbz	r0, 8012648 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 8012630:	460d      	mov	r5, r1
 8012632:	f7fa fd7d 	bl	800d130 <get_serialized_size_geometry_msgs__msg__Twist>
 8012636:	182c      	adds	r4, r5, r0
 8012638:	4620      	mov	r0, r4
 801263a:	2108      	movs	r1, #8
 801263c:	f7fc fac0 	bl	800ebc0 <ucdr_alignment>
 8012640:	f5c5 7590 	rsb	r5, r5, #288	; 0x120
 8012644:	4428      	add	r0, r5
 8012646:	4420      	add	r0, r4
 8012648:	bd38      	pop	{r3, r4, r5, pc}
 801264a:	bf00      	nop

0801264c <_TwistWithCovariance__cdr_deserialize>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	460c      	mov	r4, r1
 8012650:	b179      	cbz	r1, 8012672 <_TwistWithCovariance__cdr_deserialize+0x26>
 8012652:	4605      	mov	r5, r0
 8012654:	f7fa fdd8 	bl	800d208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012658:	6843      	ldr	r3, [r0, #4]
 801265a:	4621      	mov	r1, r4
 801265c:	4628      	mov	r0, r5
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	4798      	blx	r3
 8012662:	4628      	mov	r0, r5
 8012664:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012668:	2224      	movs	r2, #36	; 0x24
 801266a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801266e:	f000 bad1 	b.w	8012c14 <ucdr_deserialize_array_double>
 8012672:	4608      	mov	r0, r1
 8012674:	bd38      	pop	{r3, r4, r5, pc}
 8012676:	bf00      	nop

08012678 <_TwistWithCovariance__cdr_serialize>:
 8012678:	b188      	cbz	r0, 801269e <_TwistWithCovariance__cdr_serialize+0x26>
 801267a:	b538      	push	{r3, r4, r5, lr}
 801267c:	460d      	mov	r5, r1
 801267e:	4604      	mov	r4, r0
 8012680:	f7fa fdc2 	bl	800d208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012684:	6843      	ldr	r3, [r0, #4]
 8012686:	4629      	mov	r1, r5
 8012688:	4620      	mov	r0, r4
 801268a:	689b      	ldr	r3, [r3, #8]
 801268c:	4798      	blx	r3
 801268e:	4628      	mov	r0, r5
 8012690:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012694:	2224      	movs	r2, #36	; 0x24
 8012696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801269a:	f000 ba0f 	b.w	8012abc <ucdr_serialize_array_double>
 801269e:	4770      	bx	lr

080126a0 <_TwistWithCovariance__get_serialized_size>:
 80126a0:	b158      	cbz	r0, 80126ba <_TwistWithCovariance__get_serialized_size+0x1a>
 80126a2:	b510      	push	{r4, lr}
 80126a4:	2100      	movs	r1, #0
 80126a6:	f7fa fd43 	bl	800d130 <get_serialized_size_geometry_msgs__msg__Twist>
 80126aa:	2108      	movs	r1, #8
 80126ac:	4604      	mov	r4, r0
 80126ae:	f7fc fa87 	bl	800ebc0 <ucdr_alignment>
 80126b2:	4420      	add	r0, r4
 80126b4:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80126b8:	bd10      	pop	{r4, pc}
 80126ba:	4770      	bx	lr

080126bc <_TwistWithCovariance__max_serialized_size>:
 80126bc:	2301      	movs	r3, #1
 80126be:	b510      	push	{r4, lr}
 80126c0:	b082      	sub	sp, #8
 80126c2:	2100      	movs	r1, #0
 80126c4:	f10d 0007 	add.w	r0, sp, #7
 80126c8:	f88d 3007 	strb.w	r3, [sp, #7]
 80126cc:	f7fa fd8e 	bl	800d1ec <max_serialized_size_geometry_msgs__msg__Twist>
 80126d0:	2108      	movs	r1, #8
 80126d2:	4604      	mov	r4, r0
 80126d4:	f7fc fa74 	bl	800ebc0 <ucdr_alignment>
 80126d8:	4420      	add	r0, r4
 80126da:	f500 7090 	add.w	r0, r0, #288	; 0x120
 80126de:	b002      	add	sp, #8
 80126e0:	bd10      	pop	{r4, pc}
 80126e2:	bf00      	nop

080126e4 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 80126e4:	b538      	push	{r3, r4, r5, lr}
 80126e6:	2301      	movs	r3, #1
 80126e8:	7003      	strb	r3, [r0, #0]
 80126ea:	460c      	mov	r4, r1
 80126ec:	f7fa fd7e 	bl	800d1ec <max_serialized_size_geometry_msgs__msg__Twist>
 80126f0:	1825      	adds	r5, r4, r0
 80126f2:	4628      	mov	r0, r5
 80126f4:	2108      	movs	r1, #8
 80126f6:	f7fc fa63 	bl	800ebc0 <ucdr_alignment>
 80126fa:	f5c4 7490 	rsb	r4, r4, #288	; 0x120
 80126fe:	4420      	add	r0, r4
 8012700:	4428      	add	r0, r5
 8012702:	bd38      	pop	{r3, r4, r5, pc}

08012704 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8012704:	4800      	ldr	r0, [pc, #0]	; (8012708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 8012706:	4770      	bx	lr
 8012708:	20000220 	.word	0x20000220

0801270c <ucdr_serialize_endian_array_char>:
 801270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012710:	4619      	mov	r1, r3
 8012712:	461e      	mov	r6, r3
 8012714:	4690      	mov	r8, r2
 8012716:	4604      	mov	r4, r0
 8012718:	f7fc f9fc 	bl	800eb14 <ucdr_check_buffer_available_for>
 801271c:	b9e0      	cbnz	r0, 8012758 <ucdr_serialize_endian_array_char+0x4c>
 801271e:	4637      	mov	r7, r6
 8012720:	e00a      	b.n	8012738 <ucdr_serialize_endian_array_char+0x2c>
 8012722:	462a      	mov	r2, r5
 8012724:	68a0      	ldr	r0, [r4, #8]
 8012726:	f007 ffe9 	bl	801a6fc <memcpy>
 801272a:	68a2      	ldr	r2, [r4, #8]
 801272c:	6923      	ldr	r3, [r4, #16]
 801272e:	442a      	add	r2, r5
 8012730:	442b      	add	r3, r5
 8012732:	1b7f      	subs	r7, r7, r5
 8012734:	60a2      	str	r2, [r4, #8]
 8012736:	6123      	str	r3, [r4, #16]
 8012738:	4639      	mov	r1, r7
 801273a:	2201      	movs	r2, #1
 801273c:	4620      	mov	r0, r4
 801273e:	f7fc fa71 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012742:	1bf1      	subs	r1, r6, r7
 8012744:	4605      	mov	r5, r0
 8012746:	4441      	add	r1, r8
 8012748:	2800      	cmp	r0, #0
 801274a:	d1ea      	bne.n	8012722 <ucdr_serialize_endian_array_char+0x16>
 801274c:	2301      	movs	r3, #1
 801274e:	7da0      	ldrb	r0, [r4, #22]
 8012750:	7563      	strb	r3, [r4, #21]
 8012752:	4058      	eors	r0, r3
 8012754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012758:	4632      	mov	r2, r6
 801275a:	4641      	mov	r1, r8
 801275c:	68a0      	ldr	r0, [r4, #8]
 801275e:	f007 ffcd 	bl	801a6fc <memcpy>
 8012762:	68a2      	ldr	r2, [r4, #8]
 8012764:	6923      	ldr	r3, [r4, #16]
 8012766:	4432      	add	r2, r6
 8012768:	4433      	add	r3, r6
 801276a:	60a2      	str	r2, [r4, #8]
 801276c:	6123      	str	r3, [r4, #16]
 801276e:	e7ed      	b.n	801274c <ucdr_serialize_endian_array_char+0x40>

08012770 <ucdr_deserialize_endian_array_char>:
 8012770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012774:	4619      	mov	r1, r3
 8012776:	461e      	mov	r6, r3
 8012778:	4690      	mov	r8, r2
 801277a:	4604      	mov	r4, r0
 801277c:	f7fc f9ca 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012780:	b9e0      	cbnz	r0, 80127bc <ucdr_deserialize_endian_array_char+0x4c>
 8012782:	4637      	mov	r7, r6
 8012784:	e00a      	b.n	801279c <ucdr_deserialize_endian_array_char+0x2c>
 8012786:	462a      	mov	r2, r5
 8012788:	68a1      	ldr	r1, [r4, #8]
 801278a:	f007 ffb7 	bl	801a6fc <memcpy>
 801278e:	68a2      	ldr	r2, [r4, #8]
 8012790:	6923      	ldr	r3, [r4, #16]
 8012792:	442a      	add	r2, r5
 8012794:	442b      	add	r3, r5
 8012796:	1b7f      	subs	r7, r7, r5
 8012798:	60a2      	str	r2, [r4, #8]
 801279a:	6123      	str	r3, [r4, #16]
 801279c:	2201      	movs	r2, #1
 801279e:	4639      	mov	r1, r7
 80127a0:	4620      	mov	r0, r4
 80127a2:	f7fc fa3f 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 80127a6:	4605      	mov	r5, r0
 80127a8:	1bf0      	subs	r0, r6, r7
 80127aa:	4440      	add	r0, r8
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	d1ea      	bne.n	8012786 <ucdr_deserialize_endian_array_char+0x16>
 80127b0:	2301      	movs	r3, #1
 80127b2:	7da0      	ldrb	r0, [r4, #22]
 80127b4:	7563      	strb	r3, [r4, #21]
 80127b6:	4058      	eors	r0, r3
 80127b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127bc:	4632      	mov	r2, r6
 80127be:	4640      	mov	r0, r8
 80127c0:	68a1      	ldr	r1, [r4, #8]
 80127c2:	f007 ff9b 	bl	801a6fc <memcpy>
 80127c6:	68a2      	ldr	r2, [r4, #8]
 80127c8:	6923      	ldr	r3, [r4, #16]
 80127ca:	4432      	add	r2, r6
 80127cc:	4433      	add	r3, r6
 80127ce:	60a2      	str	r2, [r4, #8]
 80127d0:	6123      	str	r3, [r4, #16]
 80127d2:	e7ed      	b.n	80127b0 <ucdr_deserialize_endian_array_char+0x40>

080127d4 <ucdr_serialize_array_uint8_t>:
 80127d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d8:	4688      	mov	r8, r1
 80127da:	4611      	mov	r1, r2
 80127dc:	4616      	mov	r6, r2
 80127de:	4604      	mov	r4, r0
 80127e0:	f7fc f998 	bl	800eb14 <ucdr_check_buffer_available_for>
 80127e4:	b9e0      	cbnz	r0, 8012820 <ucdr_serialize_array_uint8_t+0x4c>
 80127e6:	4637      	mov	r7, r6
 80127e8:	e00a      	b.n	8012800 <ucdr_serialize_array_uint8_t+0x2c>
 80127ea:	462a      	mov	r2, r5
 80127ec:	68a0      	ldr	r0, [r4, #8]
 80127ee:	f007 ff85 	bl	801a6fc <memcpy>
 80127f2:	68a2      	ldr	r2, [r4, #8]
 80127f4:	6923      	ldr	r3, [r4, #16]
 80127f6:	442a      	add	r2, r5
 80127f8:	442b      	add	r3, r5
 80127fa:	1b7f      	subs	r7, r7, r5
 80127fc:	60a2      	str	r2, [r4, #8]
 80127fe:	6123      	str	r3, [r4, #16]
 8012800:	4639      	mov	r1, r7
 8012802:	2201      	movs	r2, #1
 8012804:	4620      	mov	r0, r4
 8012806:	f7fc fa0d 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 801280a:	1bf1      	subs	r1, r6, r7
 801280c:	4605      	mov	r5, r0
 801280e:	4441      	add	r1, r8
 8012810:	2800      	cmp	r0, #0
 8012812:	d1ea      	bne.n	80127ea <ucdr_serialize_array_uint8_t+0x16>
 8012814:	2301      	movs	r3, #1
 8012816:	7da0      	ldrb	r0, [r4, #22]
 8012818:	7563      	strb	r3, [r4, #21]
 801281a:	4058      	eors	r0, r3
 801281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012820:	4632      	mov	r2, r6
 8012822:	4641      	mov	r1, r8
 8012824:	68a0      	ldr	r0, [r4, #8]
 8012826:	f007 ff69 	bl	801a6fc <memcpy>
 801282a:	68a3      	ldr	r3, [r4, #8]
 801282c:	6922      	ldr	r2, [r4, #16]
 801282e:	4433      	add	r3, r6
 8012830:	4432      	add	r2, r6
 8012832:	60a3      	str	r3, [r4, #8]
 8012834:	6122      	str	r2, [r4, #16]
 8012836:	e7ed      	b.n	8012814 <ucdr_serialize_array_uint8_t+0x40>

08012838 <ucdr_serialize_endian_array_uint8_t>:
 8012838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801283c:	4619      	mov	r1, r3
 801283e:	461e      	mov	r6, r3
 8012840:	4690      	mov	r8, r2
 8012842:	4604      	mov	r4, r0
 8012844:	f7fc f966 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012848:	b9e0      	cbnz	r0, 8012884 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801284a:	4637      	mov	r7, r6
 801284c:	e00a      	b.n	8012864 <ucdr_serialize_endian_array_uint8_t+0x2c>
 801284e:	462a      	mov	r2, r5
 8012850:	68a0      	ldr	r0, [r4, #8]
 8012852:	f007 ff53 	bl	801a6fc <memcpy>
 8012856:	68a2      	ldr	r2, [r4, #8]
 8012858:	6923      	ldr	r3, [r4, #16]
 801285a:	442a      	add	r2, r5
 801285c:	442b      	add	r3, r5
 801285e:	1b7f      	subs	r7, r7, r5
 8012860:	60a2      	str	r2, [r4, #8]
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	4639      	mov	r1, r7
 8012866:	2201      	movs	r2, #1
 8012868:	4620      	mov	r0, r4
 801286a:	f7fc f9db 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 801286e:	1bf1      	subs	r1, r6, r7
 8012870:	4605      	mov	r5, r0
 8012872:	4441      	add	r1, r8
 8012874:	2800      	cmp	r0, #0
 8012876:	d1ea      	bne.n	801284e <ucdr_serialize_endian_array_uint8_t+0x16>
 8012878:	2301      	movs	r3, #1
 801287a:	7da0      	ldrb	r0, [r4, #22]
 801287c:	7563      	strb	r3, [r4, #21]
 801287e:	4058      	eors	r0, r3
 8012880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012884:	4632      	mov	r2, r6
 8012886:	4641      	mov	r1, r8
 8012888:	68a0      	ldr	r0, [r4, #8]
 801288a:	f007 ff37 	bl	801a6fc <memcpy>
 801288e:	68a2      	ldr	r2, [r4, #8]
 8012890:	6923      	ldr	r3, [r4, #16]
 8012892:	4432      	add	r2, r6
 8012894:	4433      	add	r3, r6
 8012896:	60a2      	str	r2, [r4, #8]
 8012898:	6123      	str	r3, [r4, #16]
 801289a:	e7ed      	b.n	8012878 <ucdr_serialize_endian_array_uint8_t+0x40>

0801289c <ucdr_deserialize_array_uint8_t>:
 801289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	4688      	mov	r8, r1
 80128a2:	4611      	mov	r1, r2
 80128a4:	4616      	mov	r6, r2
 80128a6:	4604      	mov	r4, r0
 80128a8:	f7fc f934 	bl	800eb14 <ucdr_check_buffer_available_for>
 80128ac:	b9e0      	cbnz	r0, 80128e8 <ucdr_deserialize_array_uint8_t+0x4c>
 80128ae:	4637      	mov	r7, r6
 80128b0:	e00a      	b.n	80128c8 <ucdr_deserialize_array_uint8_t+0x2c>
 80128b2:	462a      	mov	r2, r5
 80128b4:	68a1      	ldr	r1, [r4, #8]
 80128b6:	f007 ff21 	bl	801a6fc <memcpy>
 80128ba:	68a2      	ldr	r2, [r4, #8]
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	442a      	add	r2, r5
 80128c0:	442b      	add	r3, r5
 80128c2:	1b7f      	subs	r7, r7, r5
 80128c4:	60a2      	str	r2, [r4, #8]
 80128c6:	6123      	str	r3, [r4, #16]
 80128c8:	2201      	movs	r2, #1
 80128ca:	4639      	mov	r1, r7
 80128cc:	4620      	mov	r0, r4
 80128ce:	f7fc f9a9 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 80128d2:	4605      	mov	r5, r0
 80128d4:	1bf0      	subs	r0, r6, r7
 80128d6:	4440      	add	r0, r8
 80128d8:	2d00      	cmp	r5, #0
 80128da:	d1ea      	bne.n	80128b2 <ucdr_deserialize_array_uint8_t+0x16>
 80128dc:	2301      	movs	r3, #1
 80128de:	7da0      	ldrb	r0, [r4, #22]
 80128e0:	7563      	strb	r3, [r4, #21]
 80128e2:	4058      	eors	r0, r3
 80128e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e8:	4632      	mov	r2, r6
 80128ea:	4640      	mov	r0, r8
 80128ec:	68a1      	ldr	r1, [r4, #8]
 80128ee:	f007 ff05 	bl	801a6fc <memcpy>
 80128f2:	68a3      	ldr	r3, [r4, #8]
 80128f4:	6922      	ldr	r2, [r4, #16]
 80128f6:	4433      	add	r3, r6
 80128f8:	4432      	add	r2, r6
 80128fa:	60a3      	str	r3, [r4, #8]
 80128fc:	6122      	str	r2, [r4, #16]
 80128fe:	e7ed      	b.n	80128dc <ucdr_deserialize_array_uint8_t+0x40>

08012900 <ucdr_deserialize_endian_array_uint8_t>:
 8012900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012904:	4619      	mov	r1, r3
 8012906:	461e      	mov	r6, r3
 8012908:	4690      	mov	r8, r2
 801290a:	4604      	mov	r4, r0
 801290c:	f7fc f902 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012910:	b9e0      	cbnz	r0, 801294c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012912:	4637      	mov	r7, r6
 8012914:	e00a      	b.n	801292c <ucdr_deserialize_endian_array_uint8_t+0x2c>
 8012916:	462a      	mov	r2, r5
 8012918:	68a1      	ldr	r1, [r4, #8]
 801291a:	f007 feef 	bl	801a6fc <memcpy>
 801291e:	68a2      	ldr	r2, [r4, #8]
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	442a      	add	r2, r5
 8012924:	442b      	add	r3, r5
 8012926:	1b7f      	subs	r7, r7, r5
 8012928:	60a2      	str	r2, [r4, #8]
 801292a:	6123      	str	r3, [r4, #16]
 801292c:	2201      	movs	r2, #1
 801292e:	4639      	mov	r1, r7
 8012930:	4620      	mov	r0, r4
 8012932:	f7fc f977 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012936:	4605      	mov	r5, r0
 8012938:	1bf0      	subs	r0, r6, r7
 801293a:	4440      	add	r0, r8
 801293c:	2d00      	cmp	r5, #0
 801293e:	d1ea      	bne.n	8012916 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012940:	2301      	movs	r3, #1
 8012942:	7da0      	ldrb	r0, [r4, #22]
 8012944:	7563      	strb	r3, [r4, #21]
 8012946:	4058      	eors	r0, r3
 8012948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801294c:	4632      	mov	r2, r6
 801294e:	4640      	mov	r0, r8
 8012950:	68a1      	ldr	r1, [r4, #8]
 8012952:	f007 fed3 	bl	801a6fc <memcpy>
 8012956:	68a2      	ldr	r2, [r4, #8]
 8012958:	6923      	ldr	r3, [r4, #16]
 801295a:	4432      	add	r2, r6
 801295c:	4433      	add	r3, r6
 801295e:	60a2      	str	r2, [r4, #8]
 8012960:	6123      	str	r3, [r4, #16]
 8012962:	e7ed      	b.n	8012940 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012964 <ucdr_serialize_endian_array_float>:
 8012964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012968:	460f      	mov	r7, r1
 801296a:	2104      	movs	r1, #4
 801296c:	4605      	mov	r5, r0
 801296e:	4614      	mov	r4, r2
 8012970:	461e      	mov	r6, r3
 8012972:	f7fc f92d 	bl	800ebd0 <ucdr_buffer_alignment>
 8012976:	f895 8015 	ldrb.w	r8, [r5, #21]
 801297a:	4601      	mov	r1, r0
 801297c:	4628      	mov	r0, r5
 801297e:	f7fc f96d 	bl	800ec5c <ucdr_advance_buffer>
 8012982:	2f01      	cmp	r7, #1
 8012984:	f885 8015 	strb.w	r8, [r5, #21]
 8012988:	d010      	beq.n	80129ac <ucdr_serialize_endian_array_float+0x48>
 801298a:	b156      	cbz	r6, 80129a2 <ucdr_serialize_endian_array_float+0x3e>
 801298c:	3c04      	subs	r4, #4
 801298e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012992:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8012996:	4639      	mov	r1, r7
 8012998:	4628      	mov	r0, r5
 801299a:	f7fb fc53 	bl	800e244 <ucdr_serialize_endian_float>
 801299e:	42b4      	cmp	r4, r6
 80129a0:	d1f7      	bne.n	8012992 <ucdr_serialize_endian_array_float+0x2e>
 80129a2:	7da8      	ldrb	r0, [r5, #22]
 80129a4:	f080 0001 	eor.w	r0, r0, #1
 80129a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ac:	00b6      	lsls	r6, r6, #2
 80129ae:	4631      	mov	r1, r6
 80129b0:	4628      	mov	r0, r5
 80129b2:	f7fc f8af 	bl	800eb14 <ucdr_check_buffer_available_for>
 80129b6:	b9f8      	cbnz	r0, 80129f8 <ucdr_serialize_endian_array_float+0x94>
 80129b8:	46b0      	mov	r8, r6
 80129ba:	e00b      	b.n	80129d4 <ucdr_serialize_endian_array_float+0x70>
 80129bc:	463a      	mov	r2, r7
 80129be:	68a8      	ldr	r0, [r5, #8]
 80129c0:	f007 fe9c 	bl	801a6fc <memcpy>
 80129c4:	68aa      	ldr	r2, [r5, #8]
 80129c6:	692b      	ldr	r3, [r5, #16]
 80129c8:	443a      	add	r2, r7
 80129ca:	443b      	add	r3, r7
 80129cc:	eba8 0807 	sub.w	r8, r8, r7
 80129d0:	60aa      	str	r2, [r5, #8]
 80129d2:	612b      	str	r3, [r5, #16]
 80129d4:	4641      	mov	r1, r8
 80129d6:	2204      	movs	r2, #4
 80129d8:	4628      	mov	r0, r5
 80129da:	f7fc f923 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 80129de:	eba6 0108 	sub.w	r1, r6, r8
 80129e2:	4607      	mov	r7, r0
 80129e4:	4421      	add	r1, r4
 80129e6:	2800      	cmp	r0, #0
 80129e8:	d1e8      	bne.n	80129bc <ucdr_serialize_endian_array_float+0x58>
 80129ea:	2304      	movs	r3, #4
 80129ec:	7da8      	ldrb	r0, [r5, #22]
 80129ee:	756b      	strb	r3, [r5, #21]
 80129f0:	f080 0001 	eor.w	r0, r0, #1
 80129f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f8:	4632      	mov	r2, r6
 80129fa:	4621      	mov	r1, r4
 80129fc:	68a8      	ldr	r0, [r5, #8]
 80129fe:	f007 fe7d 	bl	801a6fc <memcpy>
 8012a02:	68aa      	ldr	r2, [r5, #8]
 8012a04:	692b      	ldr	r3, [r5, #16]
 8012a06:	4432      	add	r2, r6
 8012a08:	441e      	add	r6, r3
 8012a0a:	60aa      	str	r2, [r5, #8]
 8012a0c:	612e      	str	r6, [r5, #16]
 8012a0e:	e7ec      	b.n	80129ea <ucdr_serialize_endian_array_float+0x86>

08012a10 <ucdr_deserialize_endian_array_float>:
 8012a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a14:	460f      	mov	r7, r1
 8012a16:	2104      	movs	r1, #4
 8012a18:	4605      	mov	r5, r0
 8012a1a:	4614      	mov	r4, r2
 8012a1c:	461e      	mov	r6, r3
 8012a1e:	f7fc f8d7 	bl	800ebd0 <ucdr_buffer_alignment>
 8012a22:	f895 8015 	ldrb.w	r8, [r5, #21]
 8012a26:	4601      	mov	r1, r0
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f7fc f917 	bl	800ec5c <ucdr_advance_buffer>
 8012a2e:	2f01      	cmp	r7, #1
 8012a30:	f885 8015 	strb.w	r8, [r5, #21]
 8012a34:	d00f      	beq.n	8012a56 <ucdr_deserialize_endian_array_float+0x46>
 8012a36:	b14e      	cbz	r6, 8012a4c <ucdr_deserialize_endian_array_float+0x3c>
 8012a38:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012a3c:	4622      	mov	r2, r4
 8012a3e:	4639      	mov	r1, r7
 8012a40:	4628      	mov	r0, r5
 8012a42:	3404      	adds	r4, #4
 8012a44:	f7fb fc96 	bl	800e374 <ucdr_deserialize_endian_float>
 8012a48:	42a6      	cmp	r6, r4
 8012a4a:	d1f7      	bne.n	8012a3c <ucdr_deserialize_endian_array_float+0x2c>
 8012a4c:	7da8      	ldrb	r0, [r5, #22]
 8012a4e:	f080 0001 	eor.w	r0, r0, #1
 8012a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a56:	00b6      	lsls	r6, r6, #2
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f7fc f85a 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012a60:	b9f8      	cbnz	r0, 8012aa2 <ucdr_deserialize_endian_array_float+0x92>
 8012a62:	46b0      	mov	r8, r6
 8012a64:	e00b      	b.n	8012a7e <ucdr_deserialize_endian_array_float+0x6e>
 8012a66:	463a      	mov	r2, r7
 8012a68:	68a9      	ldr	r1, [r5, #8]
 8012a6a:	f007 fe47 	bl	801a6fc <memcpy>
 8012a6e:	68aa      	ldr	r2, [r5, #8]
 8012a70:	692b      	ldr	r3, [r5, #16]
 8012a72:	443a      	add	r2, r7
 8012a74:	443b      	add	r3, r7
 8012a76:	eba8 0807 	sub.w	r8, r8, r7
 8012a7a:	60aa      	str	r2, [r5, #8]
 8012a7c:	612b      	str	r3, [r5, #16]
 8012a7e:	2204      	movs	r2, #4
 8012a80:	4641      	mov	r1, r8
 8012a82:	4628      	mov	r0, r5
 8012a84:	f7fc f8ce 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012a88:	4607      	mov	r7, r0
 8012a8a:	eba6 0008 	sub.w	r0, r6, r8
 8012a8e:	4420      	add	r0, r4
 8012a90:	2f00      	cmp	r7, #0
 8012a92:	d1e8      	bne.n	8012a66 <ucdr_deserialize_endian_array_float+0x56>
 8012a94:	2304      	movs	r3, #4
 8012a96:	7da8      	ldrb	r0, [r5, #22]
 8012a98:	756b      	strb	r3, [r5, #21]
 8012a9a:	f080 0001 	eor.w	r0, r0, #1
 8012a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa2:	4632      	mov	r2, r6
 8012aa4:	4620      	mov	r0, r4
 8012aa6:	68a9      	ldr	r1, [r5, #8]
 8012aa8:	f007 fe28 	bl	801a6fc <memcpy>
 8012aac:	68aa      	ldr	r2, [r5, #8]
 8012aae:	692b      	ldr	r3, [r5, #16]
 8012ab0:	4432      	add	r2, r6
 8012ab2:	441e      	add	r6, r3
 8012ab4:	60aa      	str	r2, [r5, #8]
 8012ab6:	612e      	str	r6, [r5, #16]
 8012ab8:	e7ec      	b.n	8012a94 <ucdr_deserialize_endian_array_float+0x84>
 8012aba:	bf00      	nop

08012abc <ucdr_serialize_array_double>:
 8012abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac0:	460d      	mov	r5, r1
 8012ac2:	2108      	movs	r1, #8
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	4616      	mov	r6, r2
 8012ac8:	f7fc f882 	bl	800ebd0 <ucdr_buffer_alignment>
 8012acc:	4601      	mov	r1, r0
 8012ace:	4620      	mov	r0, r4
 8012ad0:	7d67      	ldrb	r7, [r4, #21]
 8012ad2:	f7fc f8c3 	bl	800ec5c <ucdr_advance_buffer>
 8012ad6:	7d21      	ldrb	r1, [r4, #20]
 8012ad8:	7567      	strb	r7, [r4, #21]
 8012ada:	2901      	cmp	r1, #1
 8012adc:	d011      	beq.n	8012b02 <ucdr_serialize_array_double+0x46>
 8012ade:	b15e      	cbz	r6, 8012af8 <ucdr_serialize_array_double+0x3c>
 8012ae0:	3d08      	subs	r5, #8
 8012ae2:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012ae6:	e000      	b.n	8012aea <ucdr_serialize_array_double+0x2e>
 8012ae8:	7d21      	ldrb	r1, [r4, #20]
 8012aea:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8012aee:	4620      	mov	r0, r4
 8012af0:	f7fb fda6 	bl	800e640 <ucdr_serialize_endian_double>
 8012af4:	42b5      	cmp	r5, r6
 8012af6:	d1f7      	bne.n	8012ae8 <ucdr_serialize_array_double+0x2c>
 8012af8:	7da0      	ldrb	r0, [r4, #22]
 8012afa:	f080 0001 	eor.w	r0, r0, #1
 8012afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b02:	00f6      	lsls	r6, r6, #3
 8012b04:	4631      	mov	r1, r6
 8012b06:	4620      	mov	r0, r4
 8012b08:	f7fc f804 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012b0c:	b9f8      	cbnz	r0, 8012b4e <ucdr_serialize_array_double+0x92>
 8012b0e:	46b0      	mov	r8, r6
 8012b10:	e00b      	b.n	8012b2a <ucdr_serialize_array_double+0x6e>
 8012b12:	463a      	mov	r2, r7
 8012b14:	68a0      	ldr	r0, [r4, #8]
 8012b16:	f007 fdf1 	bl	801a6fc <memcpy>
 8012b1a:	68a2      	ldr	r2, [r4, #8]
 8012b1c:	6923      	ldr	r3, [r4, #16]
 8012b1e:	443a      	add	r2, r7
 8012b20:	443b      	add	r3, r7
 8012b22:	eba8 0807 	sub.w	r8, r8, r7
 8012b26:	60a2      	str	r2, [r4, #8]
 8012b28:	6123      	str	r3, [r4, #16]
 8012b2a:	4641      	mov	r1, r8
 8012b2c:	2208      	movs	r2, #8
 8012b2e:	4620      	mov	r0, r4
 8012b30:	f7fc f878 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012b34:	eba6 0108 	sub.w	r1, r6, r8
 8012b38:	4607      	mov	r7, r0
 8012b3a:	4429      	add	r1, r5
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	d1e8      	bne.n	8012b12 <ucdr_serialize_array_double+0x56>
 8012b40:	2308      	movs	r3, #8
 8012b42:	7da0      	ldrb	r0, [r4, #22]
 8012b44:	7563      	strb	r3, [r4, #21]
 8012b46:	f080 0001 	eor.w	r0, r0, #1
 8012b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b4e:	4632      	mov	r2, r6
 8012b50:	4629      	mov	r1, r5
 8012b52:	68a0      	ldr	r0, [r4, #8]
 8012b54:	f007 fdd2 	bl	801a6fc <memcpy>
 8012b58:	68a2      	ldr	r2, [r4, #8]
 8012b5a:	6923      	ldr	r3, [r4, #16]
 8012b5c:	4432      	add	r2, r6
 8012b5e:	441e      	add	r6, r3
 8012b60:	60a2      	str	r2, [r4, #8]
 8012b62:	6126      	str	r6, [r4, #16]
 8012b64:	e7ec      	b.n	8012b40 <ucdr_serialize_array_double+0x84>
 8012b66:	bf00      	nop

08012b68 <ucdr_serialize_endian_array_double>:
 8012b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6c:	460f      	mov	r7, r1
 8012b6e:	2108      	movs	r1, #8
 8012b70:	4605      	mov	r5, r0
 8012b72:	4614      	mov	r4, r2
 8012b74:	461e      	mov	r6, r3
 8012b76:	f7fc f82b 	bl	800ebd0 <ucdr_buffer_alignment>
 8012b7a:	f895 8015 	ldrb.w	r8, [r5, #21]
 8012b7e:	4601      	mov	r1, r0
 8012b80:	4628      	mov	r0, r5
 8012b82:	f7fc f86b 	bl	800ec5c <ucdr_advance_buffer>
 8012b86:	2f01      	cmp	r7, #1
 8012b88:	f885 8015 	strb.w	r8, [r5, #21]
 8012b8c:	d010      	beq.n	8012bb0 <ucdr_serialize_endian_array_double+0x48>
 8012b8e:	b156      	cbz	r6, 8012ba6 <ucdr_serialize_endian_array_double+0x3e>
 8012b90:	3c08      	subs	r4, #8
 8012b92:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8012b96:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8012b9a:	4639      	mov	r1, r7
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	f7fb fd4f 	bl	800e640 <ucdr_serialize_endian_double>
 8012ba2:	42b4      	cmp	r4, r6
 8012ba4:	d1f7      	bne.n	8012b96 <ucdr_serialize_endian_array_double+0x2e>
 8012ba6:	7da8      	ldrb	r0, [r5, #22]
 8012ba8:	f080 0001 	eor.w	r0, r0, #1
 8012bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb0:	00f6      	lsls	r6, r6, #3
 8012bb2:	4631      	mov	r1, r6
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	f7fb ffad 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012bba:	b9f8      	cbnz	r0, 8012bfc <ucdr_serialize_endian_array_double+0x94>
 8012bbc:	46b0      	mov	r8, r6
 8012bbe:	e00b      	b.n	8012bd8 <ucdr_serialize_endian_array_double+0x70>
 8012bc0:	463a      	mov	r2, r7
 8012bc2:	68a8      	ldr	r0, [r5, #8]
 8012bc4:	f007 fd9a 	bl	801a6fc <memcpy>
 8012bc8:	68aa      	ldr	r2, [r5, #8]
 8012bca:	692b      	ldr	r3, [r5, #16]
 8012bcc:	443a      	add	r2, r7
 8012bce:	443b      	add	r3, r7
 8012bd0:	eba8 0807 	sub.w	r8, r8, r7
 8012bd4:	60aa      	str	r2, [r5, #8]
 8012bd6:	612b      	str	r3, [r5, #16]
 8012bd8:	4641      	mov	r1, r8
 8012bda:	2208      	movs	r2, #8
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7fc f821 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012be2:	eba6 0108 	sub.w	r1, r6, r8
 8012be6:	4607      	mov	r7, r0
 8012be8:	4421      	add	r1, r4
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d1e8      	bne.n	8012bc0 <ucdr_serialize_endian_array_double+0x58>
 8012bee:	2308      	movs	r3, #8
 8012bf0:	7da8      	ldrb	r0, [r5, #22]
 8012bf2:	756b      	strb	r3, [r5, #21]
 8012bf4:	f080 0001 	eor.w	r0, r0, #1
 8012bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfc:	4632      	mov	r2, r6
 8012bfe:	4621      	mov	r1, r4
 8012c00:	68a8      	ldr	r0, [r5, #8]
 8012c02:	f007 fd7b 	bl	801a6fc <memcpy>
 8012c06:	68aa      	ldr	r2, [r5, #8]
 8012c08:	692b      	ldr	r3, [r5, #16]
 8012c0a:	4432      	add	r2, r6
 8012c0c:	441e      	add	r6, r3
 8012c0e:	60aa      	str	r2, [r5, #8]
 8012c10:	612e      	str	r6, [r5, #16]
 8012c12:	e7ec      	b.n	8012bee <ucdr_serialize_endian_array_double+0x86>

08012c14 <ucdr_deserialize_array_double>:
 8012c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c18:	460d      	mov	r5, r1
 8012c1a:	2108      	movs	r1, #8
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	4616      	mov	r6, r2
 8012c20:	f7fb ffd6 	bl	800ebd0 <ucdr_buffer_alignment>
 8012c24:	4601      	mov	r1, r0
 8012c26:	4620      	mov	r0, r4
 8012c28:	7d67      	ldrb	r7, [r4, #21]
 8012c2a:	f7fc f817 	bl	800ec5c <ucdr_advance_buffer>
 8012c2e:	7d21      	ldrb	r1, [r4, #20]
 8012c30:	7567      	strb	r7, [r4, #21]
 8012c32:	2901      	cmp	r1, #1
 8012c34:	d010      	beq.n	8012c58 <ucdr_deserialize_array_double+0x44>
 8012c36:	b156      	cbz	r6, 8012c4e <ucdr_deserialize_array_double+0x3a>
 8012c38:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8012c3c:	e000      	b.n	8012c40 <ucdr_deserialize_array_double+0x2c>
 8012c3e:	7d21      	ldrb	r1, [r4, #20]
 8012c40:	462a      	mov	r2, r5
 8012c42:	4620      	mov	r0, r4
 8012c44:	3508      	adds	r5, #8
 8012c46:	f7fb fe93 	bl	800e970 <ucdr_deserialize_endian_double>
 8012c4a:	42ae      	cmp	r6, r5
 8012c4c:	d1f7      	bne.n	8012c3e <ucdr_deserialize_array_double+0x2a>
 8012c4e:	7da0      	ldrb	r0, [r4, #22]
 8012c50:	f080 0001 	eor.w	r0, r0, #1
 8012c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c58:	00f6      	lsls	r6, r6, #3
 8012c5a:	4631      	mov	r1, r6
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f7fb ff59 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012c62:	b9f8      	cbnz	r0, 8012ca4 <ucdr_deserialize_array_double+0x90>
 8012c64:	46b0      	mov	r8, r6
 8012c66:	e00b      	b.n	8012c80 <ucdr_deserialize_array_double+0x6c>
 8012c68:	463a      	mov	r2, r7
 8012c6a:	68a1      	ldr	r1, [r4, #8]
 8012c6c:	f007 fd46 	bl	801a6fc <memcpy>
 8012c70:	68a2      	ldr	r2, [r4, #8]
 8012c72:	6923      	ldr	r3, [r4, #16]
 8012c74:	443a      	add	r2, r7
 8012c76:	443b      	add	r3, r7
 8012c78:	eba8 0807 	sub.w	r8, r8, r7
 8012c7c:	60a2      	str	r2, [r4, #8]
 8012c7e:	6123      	str	r3, [r4, #16]
 8012c80:	2208      	movs	r2, #8
 8012c82:	4641      	mov	r1, r8
 8012c84:	4620      	mov	r0, r4
 8012c86:	f7fb ffcd 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012c8a:	4607      	mov	r7, r0
 8012c8c:	eba6 0008 	sub.w	r0, r6, r8
 8012c90:	4428      	add	r0, r5
 8012c92:	2f00      	cmp	r7, #0
 8012c94:	d1e8      	bne.n	8012c68 <ucdr_deserialize_array_double+0x54>
 8012c96:	2308      	movs	r3, #8
 8012c98:	7da0      	ldrb	r0, [r4, #22]
 8012c9a:	7563      	strb	r3, [r4, #21]
 8012c9c:	f080 0001 	eor.w	r0, r0, #1
 8012ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ca4:	4632      	mov	r2, r6
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	68a1      	ldr	r1, [r4, #8]
 8012caa:	f007 fd27 	bl	801a6fc <memcpy>
 8012cae:	68a2      	ldr	r2, [r4, #8]
 8012cb0:	6923      	ldr	r3, [r4, #16]
 8012cb2:	4432      	add	r2, r6
 8012cb4:	441e      	add	r6, r3
 8012cb6:	60a2      	str	r2, [r4, #8]
 8012cb8:	6126      	str	r6, [r4, #16]
 8012cba:	e7ec      	b.n	8012c96 <ucdr_deserialize_array_double+0x82>

08012cbc <ucdr_deserialize_endian_array_double>:
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	460f      	mov	r7, r1
 8012cc2:	2108      	movs	r1, #8
 8012cc4:	4605      	mov	r5, r0
 8012cc6:	4614      	mov	r4, r2
 8012cc8:	461e      	mov	r6, r3
 8012cca:	f7fb ff81 	bl	800ebd0 <ucdr_buffer_alignment>
 8012cce:	f895 8015 	ldrb.w	r8, [r5, #21]
 8012cd2:	4601      	mov	r1, r0
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	f7fb ffc1 	bl	800ec5c <ucdr_advance_buffer>
 8012cda:	2f01      	cmp	r7, #1
 8012cdc:	f885 8015 	strb.w	r8, [r5, #21]
 8012ce0:	d00f      	beq.n	8012d02 <ucdr_deserialize_endian_array_double+0x46>
 8012ce2:	b14e      	cbz	r6, 8012cf8 <ucdr_deserialize_endian_array_double+0x3c>
 8012ce4:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8012ce8:	4622      	mov	r2, r4
 8012cea:	4639      	mov	r1, r7
 8012cec:	4628      	mov	r0, r5
 8012cee:	3408      	adds	r4, #8
 8012cf0:	f7fb fe3e 	bl	800e970 <ucdr_deserialize_endian_double>
 8012cf4:	42a6      	cmp	r6, r4
 8012cf6:	d1f7      	bne.n	8012ce8 <ucdr_deserialize_endian_array_double+0x2c>
 8012cf8:	7da8      	ldrb	r0, [r5, #22]
 8012cfa:	f080 0001 	eor.w	r0, r0, #1
 8012cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d02:	00f6      	lsls	r6, r6, #3
 8012d04:	4631      	mov	r1, r6
 8012d06:	4628      	mov	r0, r5
 8012d08:	f7fb ff04 	bl	800eb14 <ucdr_check_buffer_available_for>
 8012d0c:	b9f8      	cbnz	r0, 8012d4e <ucdr_deserialize_endian_array_double+0x92>
 8012d0e:	46b0      	mov	r8, r6
 8012d10:	e00b      	b.n	8012d2a <ucdr_deserialize_endian_array_double+0x6e>
 8012d12:	463a      	mov	r2, r7
 8012d14:	68a9      	ldr	r1, [r5, #8]
 8012d16:	f007 fcf1 	bl	801a6fc <memcpy>
 8012d1a:	68aa      	ldr	r2, [r5, #8]
 8012d1c:	692b      	ldr	r3, [r5, #16]
 8012d1e:	443a      	add	r2, r7
 8012d20:	443b      	add	r3, r7
 8012d22:	eba8 0807 	sub.w	r8, r8, r7
 8012d26:	60aa      	str	r2, [r5, #8]
 8012d28:	612b      	str	r3, [r5, #16]
 8012d2a:	2208      	movs	r2, #8
 8012d2c:	4641      	mov	r1, r8
 8012d2e:	4628      	mov	r0, r5
 8012d30:	f7fb ff78 	bl	800ec24 <ucdr_check_final_buffer_behavior_array>
 8012d34:	4607      	mov	r7, r0
 8012d36:	eba6 0008 	sub.w	r0, r6, r8
 8012d3a:	4420      	add	r0, r4
 8012d3c:	2f00      	cmp	r7, #0
 8012d3e:	d1e8      	bne.n	8012d12 <ucdr_deserialize_endian_array_double+0x56>
 8012d40:	2308      	movs	r3, #8
 8012d42:	7da8      	ldrb	r0, [r5, #22]
 8012d44:	756b      	strb	r3, [r5, #21]
 8012d46:	f080 0001 	eor.w	r0, r0, #1
 8012d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d4e:	4632      	mov	r2, r6
 8012d50:	4620      	mov	r0, r4
 8012d52:	68a9      	ldr	r1, [r5, #8]
 8012d54:	f007 fcd2 	bl	801a6fc <memcpy>
 8012d58:	68aa      	ldr	r2, [r5, #8]
 8012d5a:	692b      	ldr	r3, [r5, #16]
 8012d5c:	4432      	add	r2, r6
 8012d5e:	441e      	add	r6, r3
 8012d60:	60aa      	str	r2, [r5, #8]
 8012d62:	612e      	str	r6, [r5, #16]
 8012d64:	e7ec      	b.n	8012d40 <ucdr_deserialize_endian_array_double+0x84>
 8012d66:	bf00      	nop

08012d68 <ucdr_serialize_sequence_char>:
 8012d68:	b570      	push	{r4, r5, r6, lr}
 8012d6a:	4615      	mov	r5, r2
 8012d6c:	460e      	mov	r6, r1
 8012d6e:	7d01      	ldrb	r1, [r0, #20]
 8012d70:	4604      	mov	r4, r0
 8012d72:	f7fa fdbd 	bl	800d8f0 <ucdr_serialize_endian_uint32_t>
 8012d76:	b90d      	cbnz	r5, 8012d7c <ucdr_serialize_sequence_char+0x14>
 8012d78:	2001      	movs	r0, #1
 8012d7a:	bd70      	pop	{r4, r5, r6, pc}
 8012d7c:	462b      	mov	r3, r5
 8012d7e:	4632      	mov	r2, r6
 8012d80:	4620      	mov	r0, r4
 8012d82:	7d21      	ldrb	r1, [r4, #20]
 8012d84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012d88:	f7ff bcc0 	b.w	801270c <ucdr_serialize_endian_array_char>

08012d8c <ucdr_deserialize_sequence_char>:
 8012d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d90:	461d      	mov	r5, r3
 8012d92:	4616      	mov	r6, r2
 8012d94:	460f      	mov	r7, r1
 8012d96:	461a      	mov	r2, r3
 8012d98:	7d01      	ldrb	r1, [r0, #20]
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	f7fa fed0 	bl	800db40 <ucdr_deserialize_endian_uint32_t>
 8012da0:	682b      	ldr	r3, [r5, #0]
 8012da2:	429e      	cmp	r6, r3
 8012da4:	bf3c      	itt	cc
 8012da6:	2201      	movcc	r2, #1
 8012da8:	75a2      	strbcc	r2, [r4, #22]
 8012daa:	b913      	cbnz	r3, 8012db2 <ucdr_deserialize_sequence_char+0x26>
 8012dac:	2001      	movs	r0, #1
 8012dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db2:	463a      	mov	r2, r7
 8012db4:	4620      	mov	r0, r4
 8012db6:	7d21      	ldrb	r1, [r4, #20]
 8012db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbc:	f7ff bcd8 	b.w	8012770 <ucdr_deserialize_endian_array_char>

08012dc0 <ucdr_serialize_sequence_uint8_t>:
 8012dc0:	b570      	push	{r4, r5, r6, lr}
 8012dc2:	4615      	mov	r5, r2
 8012dc4:	460e      	mov	r6, r1
 8012dc6:	7d01      	ldrb	r1, [r0, #20]
 8012dc8:	4604      	mov	r4, r0
 8012dca:	f7fa fd91 	bl	800d8f0 <ucdr_serialize_endian_uint32_t>
 8012dce:	b90d      	cbnz	r5, 8012dd4 <ucdr_serialize_sequence_uint8_t+0x14>
 8012dd0:	2001      	movs	r0, #1
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	462b      	mov	r3, r5
 8012dd6:	4632      	mov	r2, r6
 8012dd8:	4620      	mov	r0, r4
 8012dda:	7d21      	ldrb	r1, [r4, #20]
 8012ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012de0:	f7ff bd2a 	b.w	8012838 <ucdr_serialize_endian_array_uint8_t>

08012de4 <ucdr_deserialize_sequence_uint8_t>:
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	461d      	mov	r5, r3
 8012dea:	4616      	mov	r6, r2
 8012dec:	460f      	mov	r7, r1
 8012dee:	461a      	mov	r2, r3
 8012df0:	7d01      	ldrb	r1, [r0, #20]
 8012df2:	4604      	mov	r4, r0
 8012df4:	f7fa fea4 	bl	800db40 <ucdr_deserialize_endian_uint32_t>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	429e      	cmp	r6, r3
 8012dfc:	bf3c      	itt	cc
 8012dfe:	2201      	movcc	r2, #1
 8012e00:	75a2      	strbcc	r2, [r4, #22]
 8012e02:	b913      	cbnz	r3, 8012e0a <ucdr_deserialize_sequence_uint8_t+0x26>
 8012e04:	2001      	movs	r0, #1
 8012e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0a:	463a      	mov	r2, r7
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	7d21      	ldrb	r1, [r4, #20]
 8012e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e14:	f7ff bd74 	b.w	8012900 <ucdr_deserialize_endian_array_uint8_t>

08012e18 <ucdr_serialize_sequence_float>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	4615      	mov	r5, r2
 8012e1c:	460e      	mov	r6, r1
 8012e1e:	7d01      	ldrb	r1, [r0, #20]
 8012e20:	4604      	mov	r4, r0
 8012e22:	f7fa fd65 	bl	800d8f0 <ucdr_serialize_endian_uint32_t>
 8012e26:	b90d      	cbnz	r5, 8012e2c <ucdr_serialize_sequence_float+0x14>
 8012e28:	2001      	movs	r0, #1
 8012e2a:	bd70      	pop	{r4, r5, r6, pc}
 8012e2c:	462b      	mov	r3, r5
 8012e2e:	4632      	mov	r2, r6
 8012e30:	4620      	mov	r0, r4
 8012e32:	7d21      	ldrb	r1, [r4, #20]
 8012e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e38:	f7ff bd94 	b.w	8012964 <ucdr_serialize_endian_array_float>

08012e3c <ucdr_deserialize_sequence_float>:
 8012e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e40:	461d      	mov	r5, r3
 8012e42:	4616      	mov	r6, r2
 8012e44:	460f      	mov	r7, r1
 8012e46:	461a      	mov	r2, r3
 8012e48:	7d01      	ldrb	r1, [r0, #20]
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	f7fa fe78 	bl	800db40 <ucdr_deserialize_endian_uint32_t>
 8012e50:	682b      	ldr	r3, [r5, #0]
 8012e52:	429e      	cmp	r6, r3
 8012e54:	bf3c      	itt	cc
 8012e56:	2201      	movcc	r2, #1
 8012e58:	75a2      	strbcc	r2, [r4, #22]
 8012e5a:	b913      	cbnz	r3, 8012e62 <ucdr_deserialize_sequence_float+0x26>
 8012e5c:	2001      	movs	r0, #1
 8012e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e62:	463a      	mov	r2, r7
 8012e64:	4620      	mov	r0, r4
 8012e66:	7d21      	ldrb	r1, [r4, #20]
 8012e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e6c:	f7ff bdd0 	b.w	8012a10 <ucdr_deserialize_endian_array_float>

08012e70 <ucdr_serialize_sequence_double>:
 8012e70:	b570      	push	{r4, r5, r6, lr}
 8012e72:	4615      	mov	r5, r2
 8012e74:	460e      	mov	r6, r1
 8012e76:	7d01      	ldrb	r1, [r0, #20]
 8012e78:	4604      	mov	r4, r0
 8012e7a:	f7fa fd39 	bl	800d8f0 <ucdr_serialize_endian_uint32_t>
 8012e7e:	b90d      	cbnz	r5, 8012e84 <ucdr_serialize_sequence_double+0x14>
 8012e80:	2001      	movs	r0, #1
 8012e82:	bd70      	pop	{r4, r5, r6, pc}
 8012e84:	462b      	mov	r3, r5
 8012e86:	4632      	mov	r2, r6
 8012e88:	4620      	mov	r0, r4
 8012e8a:	7d21      	ldrb	r1, [r4, #20]
 8012e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e90:	f7ff be6a 	b.w	8012b68 <ucdr_serialize_endian_array_double>

08012e94 <ucdr_deserialize_sequence_double>:
 8012e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e98:	461d      	mov	r5, r3
 8012e9a:	4616      	mov	r6, r2
 8012e9c:	460f      	mov	r7, r1
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	7d01      	ldrb	r1, [r0, #20]
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	f7fa fe4c 	bl	800db40 <ucdr_deserialize_endian_uint32_t>
 8012ea8:	682b      	ldr	r3, [r5, #0]
 8012eaa:	429e      	cmp	r6, r3
 8012eac:	bf3c      	itt	cc
 8012eae:	2201      	movcc	r2, #1
 8012eb0:	75a2      	strbcc	r2, [r4, #22]
 8012eb2:	b913      	cbnz	r3, 8012eba <ucdr_deserialize_sequence_double+0x26>
 8012eb4:	2001      	movs	r0, #1
 8012eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eba:	463a      	mov	r2, r7
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	7d21      	ldrb	r1, [r4, #20]
 8012ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ec4:	f7ff befa 	b.w	8012cbc <ucdr_deserialize_endian_array_double>

08012ec8 <uxr_buffer_delete_entity>:
 8012ec8:	b510      	push	{r4, lr}
 8012eca:	2303      	movs	r3, #3
 8012ecc:	2400      	movs	r4, #0
 8012ece:	b08e      	sub	sp, #56	; 0x38
 8012ed0:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	2204      	movs	r2, #4
 8012ed8:	ab06      	add	r3, sp, #24
 8012eda:	4604      	mov	r4, r0
 8012edc:	9103      	str	r1, [sp, #12]
 8012ede:	f001 fa17 	bl	8014310 <uxr_prepare_stream_to_write_submessage>
 8012ee2:	b918      	cbnz	r0, 8012eec <uxr_buffer_delete_entity+0x24>
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	b00e      	add	sp, #56	; 0x38
 8012eea:	bd10      	pop	{r4, pc}
 8012eec:	9902      	ldr	r1, [sp, #8]
 8012eee:	aa05      	add	r2, sp, #20
 8012ef0:	4620      	mov	r0, r4
 8012ef2:	f001 fb3f 	bl	8014574 <uxr_init_base_object_request>
 8012ef6:	4604      	mov	r4, r0
 8012ef8:	a905      	add	r1, sp, #20
 8012efa:	a806      	add	r0, sp, #24
 8012efc:	f003 f88a 	bl	8016014 <uxr_serialize_DELETE_Payload>
 8012f00:	4620      	mov	r0, r4
 8012f02:	b00e      	add	sp, #56	; 0x38
 8012f04:	bd10      	pop	{r4, pc}
 8012f06:	bf00      	nop

08012f08 <uxr_common_create_entity>:
 8012f08:	b530      	push	{r4, r5, lr}
 8012f0a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012f0e:	b08d      	sub	sp, #52	; 0x34
 8012f10:	2d01      	cmp	r5, #1
 8012f12:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012f16:	bf18      	it	ne
 8012f18:	2200      	movne	r2, #0
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	f04f 0101 	mov.w	r1, #1
 8012f20:	bf08      	it	eq
 8012f22:	f003 0201 	andeq.w	r2, r3, #1
 8012f26:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8012f2a:	330e      	adds	r3, #14
 8012f2c:	441a      	add	r2, r3
 8012f2e:	e9cd 1000 	strd	r1, r0, [sp]
 8012f32:	b292      	uxth	r2, r2
 8012f34:	4620      	mov	r0, r4
 8012f36:	9903      	ldr	r1, [sp, #12]
 8012f38:	ab04      	add	r3, sp, #16
 8012f3a:	f001 f9e9 	bl	8014310 <uxr_prepare_stream_to_write_submessage>
 8012f3e:	b918      	cbnz	r0, 8012f48 <uxr_common_create_entity+0x40>
 8012f40:	4604      	mov	r4, r0
 8012f42:	4620      	mov	r0, r4
 8012f44:	b00d      	add	sp, #52	; 0x34
 8012f46:	bd30      	pop	{r4, r5, pc}
 8012f48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012f4a:	9902      	ldr	r1, [sp, #8]
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f001 fb11 	bl	8014574 <uxr_init_base_object_request>
 8012f52:	4604      	mov	r4, r0
 8012f54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012f56:	a804      	add	r0, sp, #16
 8012f58:	f002 ffc4 	bl	8015ee4 <uxr_serialize_CREATE_Payload>
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	b00d      	add	sp, #52	; 0x34
 8012f60:	bd30      	pop	{r4, r5, pc}
 8012f62:	bf00      	nop

08012f64 <uxr_buffer_create_participant_bin>:
 8012f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f68:	f04f 0c00 	mov.w	ip, #0
 8012f6c:	f04f 0e03 	mov.w	lr, #3
 8012f70:	2701      	movs	r7, #1
 8012f72:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8012f76:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8012f78:	ac11      	add	r4, sp, #68	; 0x44
 8012f7a:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8012f7e:	f884 e008 	strb.w	lr, [r4, #8]
 8012f82:	7127      	strb	r7, [r4, #4]
 8012f84:	4605      	mov	r5, r0
 8012f86:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012f8a:	f89d 8274 	ldrb.w	r8, [sp, #628]	; 0x274
 8012f8e:	f88d c014 	strb.w	ip, [sp, #20]
 8012f92:	b1de      	cbz	r6, 8012fcc <uxr_buffer_create_participant_bin+0x68>
 8012f94:	f88d 701c 	strb.w	r7, [sp, #28]
 8012f98:	9608      	str	r6, [sp, #32]
 8012f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f9e:	a809      	add	r0, sp, #36	; 0x24
 8012fa0:	a915      	add	r1, sp, #84	; 0x54
 8012fa2:	f7fb fe09 	bl	800ebb8 <ucdr_init_buffer>
 8012fa6:	a905      	add	r1, sp, #20
 8012fa8:	a809      	add	r0, sp, #36	; 0x24
 8012faa:	f002 fc2d 	bl	8015808 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012fae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012fb2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8012fb4:	9401      	str	r4, [sp, #4]
 8012fb6:	f8cd 8000 	str.w	r8, [sp]
 8012fba:	4628      	mov	r0, r5
 8012fbc:	b2b3      	uxth	r3, r6
 8012fbe:	60e6      	str	r6, [r4, #12]
 8012fc0:	f7ff ffa2 	bl	8012f08 <uxr_common_create_entity>
 8012fc4:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8012fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fcc:	f88d 601c 	strb.w	r6, [sp, #28]
 8012fd0:	e7e3      	b.n	8012f9a <uxr_buffer_create_participant_bin+0x36>
 8012fd2:	bf00      	nop

08012fd4 <uxr_buffer_create_topic_bin>:
 8012fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fd6:	2602      	movs	r6, #2
 8012fd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8012fdc:	4605      	mov	r5, r0
 8012fde:	9105      	str	r1, [sp, #20]
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	a997      	add	r1, sp, #604	; 0x25c
 8012fe4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012fe8:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8012fec:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8012ff0:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8012ff2:	f000 fa61 	bl	80134b8 <uxr_object_id_to_raw>
 8012ff6:	2203      	movs	r2, #3
 8012ff8:	2101      	movs	r1, #1
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 8013000:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8013002:	a80b      	add	r0, sp, #44	; 0x2c
 8013004:	9206      	str	r2, [sp, #24]
 8013006:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801300a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801300e:	a917      	add	r1, sp, #92	; 0x5c
 8013010:	f88d 301c 	strb.w	r3, [sp, #28]
 8013014:	960a      	str	r6, [sp, #40]	; 0x28
 8013016:	f7fb fdcf 	bl	800ebb8 <ucdr_init_buffer>
 801301a:	a906      	add	r1, sp, #24
 801301c:	a80b      	add	r0, sp, #44	; 0x2c
 801301e:	f002 fc15 	bl	801584c <uxr_serialize_OBJK_Topic_Binary>
 8013022:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013026:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013028:	ac13      	add	r4, sp, #76	; 0x4c
 801302a:	e9cd 7400 	strd	r7, r4, [sp]
 801302e:	4628      	mov	r0, r5
 8013030:	b2b3      	uxth	r3, r6
 8013032:	60e6      	str	r6, [r4, #12]
 8013034:	f7ff ff68 	bl	8012f08 <uxr_common_create_entity>
 8013038:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801303e:	bf00      	nop

08013040 <uxr_buffer_create_publisher_bin>:
 8013040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013042:	2603      	movs	r6, #3
 8013044:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8013048:	4605      	mov	r5, r0
 801304a:	9105      	str	r1, [sp, #20]
 801304c:	4618      	mov	r0, r3
 801304e:	a992      	add	r1, sp, #584	; 0x248
 8013050:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013054:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8013058:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801305c:	f000 fa2c 	bl	80134b8 <uxr_object_id_to_raw>
 8013060:	2300      	movs	r3, #0
 8013062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013066:	a806      	add	r0, sp, #24
 8013068:	a912      	add	r1, sp, #72	; 0x48
 801306a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801306e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013072:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8013076:	f7fb fd9f 	bl	800ebb8 <ucdr_init_buffer>
 801307a:	a993      	add	r1, sp, #588	; 0x24c
 801307c:	a806      	add	r0, sp, #24
 801307e:	f002 fc99 	bl	80159b4 <uxr_serialize_OBJK_Publisher_Binary>
 8013082:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013086:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013088:	ac0e      	add	r4, sp, #56	; 0x38
 801308a:	9700      	str	r7, [sp, #0]
 801308c:	9401      	str	r4, [sp, #4]
 801308e:	4628      	mov	r0, r5
 8013090:	b2b3      	uxth	r3, r6
 8013092:	60e6      	str	r6, [r4, #12]
 8013094:	f7ff ff38 	bl	8012f08 <uxr_common_create_entity>
 8013098:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801309c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801309e:	bf00      	nop

080130a0 <uxr_buffer_create_subscriber_bin>:
 80130a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130a2:	2604      	movs	r6, #4
 80130a4:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80130a8:	4605      	mov	r5, r0
 80130aa:	9105      	str	r1, [sp, #20]
 80130ac:	4618      	mov	r0, r3
 80130ae:	a992      	add	r1, sp, #584	; 0x248
 80130b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80130b4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80130b8:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80130bc:	f000 f9fc 	bl	80134b8 <uxr_object_id_to_raw>
 80130c0:	2103      	movs	r1, #3
 80130c2:	2300      	movs	r3, #0
 80130c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130c8:	a806      	add	r0, sp, #24
 80130ca:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 80130ce:	a912      	add	r1, sp, #72	; 0x48
 80130d0:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80130d4:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80130d8:	f7fb fd6e 	bl	800ebb8 <ucdr_init_buffer>
 80130dc:	a993      	add	r1, sp, #588	; 0x24c
 80130de:	a806      	add	r0, sp, #24
 80130e0:	f002 fd18 	bl	8015b14 <uxr_serialize_OBJK_Subscriber_Binary>
 80130e4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80130e8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80130ea:	ac0e      	add	r4, sp, #56	; 0x38
 80130ec:	9700      	str	r7, [sp, #0]
 80130ee:	9401      	str	r4, [sp, #4]
 80130f0:	4628      	mov	r0, r5
 80130f2:	b2b3      	uxth	r3, r6
 80130f4:	60e6      	str	r6, [r4, #12]
 80130f6:	f7ff ff07 	bl	8012f08 <uxr_common_create_entity>
 80130fa:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80130fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013100 <uxr_buffer_create_datawriter_bin>:
 8013100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013104:	2705      	movs	r7, #5
 8013106:	2603      	movs	r6, #3
 8013108:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801310c:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 8013110:	9105      	str	r1, [sp, #20]
 8013112:	4605      	mov	r5, r0
 8013114:	a9a1      	add	r1, sp, #644	; 0x284
 8013116:	4618      	mov	r0, r3
 8013118:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 801311c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013120:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 8013124:	f000 f9c8 	bl	80134b8 <uxr_object_id_to_raw>
 8013128:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801312a:	a90e      	add	r1, sp, #56	; 0x38
 801312c:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 8013130:	f000 f9c2 	bl	80134b8 <uxr_object_id_to_raw>
 8013134:	f1b8 0000 	subs.w	r0, r8, #0
 8013138:	f04f 0300 	mov.w	r3, #0
 801313c:	bf18      	it	ne
 801313e:	2001      	movne	r0, #1
 8013140:	2201      	movs	r2, #1
 8013142:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8013146:	ac1d      	add	r4, sp, #116	; 0x74
 8013148:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801314c:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8013150:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8013154:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013158:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801315c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8013160:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013164:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013168:	bb89      	cbnz	r1, 80131ce <uxr_buffer_create_datawriter_bin+0xce>
 801316a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801316e:	f04f 0823 	mov.w	r8, #35	; 0x23
 8013172:	f04f 0e13 	mov.w	lr, #19
 8013176:	f04f 0c0b 	mov.w	ip, #11
 801317a:	2221      	movs	r2, #33	; 0x21
 801317c:	2111      	movs	r1, #17
 801317e:	2009      	movs	r0, #9
 8013180:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8013184:	b923      	cbnz	r3, 8013190 <uxr_buffer_create_datawriter_bin+0x90>
 8013186:	4642      	mov	r2, r8
 8013188:	4671      	mov	r1, lr
 801318a:	4660      	mov	r0, ip
 801318c:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8013190:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8013194:	2b01      	cmp	r3, #1
 8013196:	d025      	beq.n	80131e4 <uxr_buffer_create_datawriter_bin+0xe4>
 8013198:	2b03      	cmp	r3, #3
 801319a:	d029      	beq.n	80131f0 <uxr_buffer_create_datawriter_bin+0xf0>
 801319c:	b32b      	cbz	r3, 80131ea <uxr_buffer_create_datawriter_bin+0xea>
 801319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131a2:	a806      	add	r0, sp, #24
 80131a4:	a921      	add	r1, sp, #132	; 0x84
 80131a6:	f7fb fd07 	bl	800ebb8 <ucdr_init_buffer>
 80131aa:	a90e      	add	r1, sp, #56	; 0x38
 80131ac:	a806      	add	r0, sp, #24
 80131ae:	f002 fd53 	bl	8015c58 <uxr_serialize_OBJK_DataWriter_Binary>
 80131b2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80131b6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80131b8:	9401      	str	r4, [sp, #4]
 80131ba:	9700      	str	r7, [sp, #0]
 80131bc:	4628      	mov	r0, r5
 80131be:	b2b3      	uxth	r3, r6
 80131c0:	60e6      	str	r6, [r4, #12]
 80131c2:	f7ff fea1 	bl	8012f08 <uxr_common_create_entity>
 80131c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80131ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ce:	f04f 0822 	mov.w	r8, #34	; 0x22
 80131d2:	f04f 0e12 	mov.w	lr, #18
 80131d6:	f04f 0c0a 	mov.w	ip, #10
 80131da:	2220      	movs	r2, #32
 80131dc:	2110      	movs	r1, #16
 80131de:	2008      	movs	r0, #8
 80131e0:	2602      	movs	r6, #2
 80131e2:	e7cd      	b.n	8013180 <uxr_buffer_create_datawriter_bin+0x80>
 80131e4:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80131e8:	e7d9      	b.n	801319e <uxr_buffer_create_datawriter_bin+0x9e>
 80131ea:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80131ee:	e7d6      	b.n	801319e <uxr_buffer_create_datawriter_bin+0x9e>
 80131f0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80131f4:	e7d3      	b.n	801319e <uxr_buffer_create_datawriter_bin+0x9e>
 80131f6:	bf00      	nop

080131f8 <uxr_buffer_create_datareader_bin>:
 80131f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131fc:	2706      	movs	r7, #6
 80131fe:	2603      	movs	r6, #3
 8013200:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8013204:	f8bd 82b0 	ldrh.w	r8, [sp, #688]	; 0x2b0
 8013208:	9105      	str	r1, [sp, #20]
 801320a:	4605      	mov	r5, r0
 801320c:	a9a3      	add	r1, sp, #652	; 0x28c
 801320e:	4618      	mov	r0, r3
 8013210:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 8013214:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013218:	f89d 72b4 	ldrb.w	r7, [sp, #692]	; 0x2b4
 801321c:	f000 f94c 	bl	80134b8 <uxr_object_id_to_raw>
 8013220:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8013222:	a90e      	add	r1, sp, #56	; 0x38
 8013224:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 8013228:	f000 f946 	bl	80134b8 <uxr_object_id_to_raw>
 801322c:	f1b8 0000 	subs.w	r0, r8, #0
 8013230:	f04f 0300 	mov.w	r3, #0
 8013234:	bf18      	it	ne
 8013236:	2001      	movne	r0, #1
 8013238:	2201      	movs	r2, #1
 801323a:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 801323e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013240:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8013244:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8013248:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801324c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8013250:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013254:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8013258:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801325c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013260:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013264:	bb89      	cbnz	r1, 80132ca <uxr_buffer_create_datareader_bin+0xd2>
 8013266:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801326a:	f04f 0823 	mov.w	r8, #35	; 0x23
 801326e:	f04f 0e13 	mov.w	lr, #19
 8013272:	f04f 0c0b 	mov.w	ip, #11
 8013276:	2221      	movs	r2, #33	; 0x21
 8013278:	2111      	movs	r1, #17
 801327a:	2009      	movs	r0, #9
 801327c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8013280:	b923      	cbnz	r3, 801328c <uxr_buffer_create_datareader_bin+0x94>
 8013282:	4642      	mov	r2, r8
 8013284:	4671      	mov	r1, lr
 8013286:	4660      	mov	r0, ip
 8013288:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801328c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8013290:	2b01      	cmp	r3, #1
 8013292:	d025      	beq.n	80132e0 <uxr_buffer_create_datareader_bin+0xe8>
 8013294:	2b03      	cmp	r3, #3
 8013296:	d029      	beq.n	80132ec <uxr_buffer_create_datareader_bin+0xf4>
 8013298:	b32b      	cbz	r3, 80132e6 <uxr_buffer_create_datareader_bin+0xee>
 801329a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801329e:	a806      	add	r0, sp, #24
 80132a0:	a923      	add	r1, sp, #140	; 0x8c
 80132a2:	f7fb fc89 	bl	800ebb8 <ucdr_init_buffer>
 80132a6:	a90e      	add	r1, sp, #56	; 0x38
 80132a8:	a806      	add	r0, sp, #24
 80132aa:	f002 fc99 	bl	8015be0 <uxr_serialize_OBJK_DataReader_Binary>
 80132ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80132b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80132b4:	9401      	str	r4, [sp, #4]
 80132b6:	9700      	str	r7, [sp, #0]
 80132b8:	4628      	mov	r0, r5
 80132ba:	b2b3      	uxth	r3, r6
 80132bc:	60e6      	str	r6, [r4, #12]
 80132be:	f7ff fe23 	bl	8012f08 <uxr_common_create_entity>
 80132c2:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80132c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ca:	f04f 0822 	mov.w	r8, #34	; 0x22
 80132ce:	f04f 0e12 	mov.w	lr, #18
 80132d2:	f04f 0c0a 	mov.w	ip, #10
 80132d6:	2220      	movs	r2, #32
 80132d8:	2110      	movs	r1, #16
 80132da:	2008      	movs	r0, #8
 80132dc:	2602      	movs	r6, #2
 80132de:	e7cd      	b.n	801327c <uxr_buffer_create_datareader_bin+0x84>
 80132e0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80132e4:	e7d9      	b.n	801329a <uxr_buffer_create_datareader_bin+0xa2>
 80132e6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80132ea:	e7d6      	b.n	801329a <uxr_buffer_create_datareader_bin+0xa2>
 80132ec:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80132f0:	e7d3      	b.n	801329a <uxr_buffer_create_datareader_bin+0xa2>
 80132f2:	bf00      	nop

080132f4 <get_custom_error>:
 80132f4:	4b01      	ldr	r3, [pc, #4]	; (80132fc <get_custom_error+0x8>)
 80132f6:	7818      	ldrb	r0, [r3, #0]
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop
 80132fc:	2000687c 	.word	0x2000687c

08013300 <recv_custom_msg>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	2600      	movs	r6, #0
 8013306:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801330a:	b089      	sub	sp, #36	; 0x24
 801330c:	4604      	mov	r4, r0
 801330e:	468a      	mov	sl, r1
 8013310:	4693      	mov	fp, r2
 8013312:	9305      	str	r3, [sp, #20]
 8013314:	f88d 601e 	strb.w	r6, [sp, #30]
 8013318:	b325      	cbz	r5, 8013364 <recv_custom_msg+0x64>
 801331a:	f44f 7900 	mov.w	r9, #512	; 0x200
 801331e:	f200 2802 	addw	r8, r0, #514	; 0x202
 8013322:	f10d 071f 	add.w	r7, sp, #31
 8013326:	ae05      	add	r6, sp, #20
 8013328:	f10d 051e 	add.w	r5, sp, #30
 801332c:	e002      	b.n	8013334 <recv_custom_msg+0x34>
 801332e:	9b05      	ldr	r3, [sp, #20]
 8013330:	2b00      	cmp	r3, #0
 8013332:	dd0f      	ble.n	8013354 <recv_custom_msg+0x54>
 8013334:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013338:	e9cd 9500 	strd	r9, r5, [sp]
 801333c:	4623      	mov	r3, r4
 801333e:	4622      	mov	r2, r4
 8013340:	4640      	mov	r0, r8
 8013342:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8013346:	f001 fb3d 	bl	80149c4 <uxr_read_framed_msg>
 801334a:	2800      	cmp	r0, #0
 801334c:	d0ef      	beq.n	801332e <recv_custom_msg+0x2e>
 801334e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013352:	b1b3      	cbz	r3, 8013382 <recv_custom_msg+0x82>
 8013354:	2000      	movs	r0, #0
 8013356:	4b0f      	ldr	r3, [pc, #60]	; (8013394 <recv_custom_msg+0x94>)
 8013358:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801335c:	701a      	strb	r2, [r3, #0]
 801335e:	b009      	add	sp, #36	; 0x24
 8013360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013364:	f10d 021f 	add.w	r2, sp, #31
 8013368:	9200      	str	r2, [sp, #0]
 801336a:	4601      	mov	r1, r0
 801336c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013370:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8013374:	47a8      	blx	r5
 8013376:	2800      	cmp	r0, #0
 8013378:	d0ec      	beq.n	8013354 <recv_custom_msg+0x54>
 801337a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d1e8      	bne.n	8013354 <recv_custom_msg+0x54>
 8013382:	f8cb 0000 	str.w	r0, [fp]
 8013386:	2001      	movs	r0, #1
 8013388:	f8ca 4000 	str.w	r4, [sl]
 801338c:	b009      	add	sp, #36	; 0x24
 801338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013392:	bf00      	nop
 8013394:	2000687c 	.word	0x2000687c

08013398 <send_custom_msg>:
 8013398:	b570      	push	{r4, r5, r6, lr}
 801339a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801339e:	4616      	mov	r6, r2
 80133a0:	b086      	sub	sp, #24
 80133a2:	b975      	cbnz	r5, 80133c2 <send_custom_msg+0x2a>
 80133a4:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80133a8:	f10d 0317 	add.w	r3, sp, #23
 80133ac:	47a0      	blx	r4
 80133ae:	b108      	cbz	r0, 80133b4 <send_custom_msg+0x1c>
 80133b0:	42b0      	cmp	r0, r6
 80133b2:	d015      	beq.n	80133e0 <send_custom_msg+0x48>
 80133b4:	2000      	movs	r0, #0
 80133b6:	4b0c      	ldr	r3, [pc, #48]	; (80133e8 <send_custom_msg+0x50>)
 80133b8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80133bc:	701a      	strb	r2, [r3, #0]
 80133be:	b006      	add	sp, #24
 80133c0:	bd70      	pop	{r4, r5, r6, pc}
 80133c2:	460b      	mov	r3, r1
 80133c4:	2100      	movs	r1, #0
 80133c6:	e9cd 6100 	strd	r6, r1, [sp]
 80133ca:	f10d 0217 	add.w	r2, sp, #23
 80133ce:	9202      	str	r2, [sp, #8]
 80133d0:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80133d4:	4602      	mov	r2, r0
 80133d6:	f200 2002 	addw	r0, r0, #514	; 0x202
 80133da:	f001 f901 	bl	80145e0 <uxr_write_framed_msg>
 80133de:	e7e6      	b.n	80133ae <send_custom_msg+0x16>
 80133e0:	2001      	movs	r0, #1
 80133e2:	b006      	add	sp, #24
 80133e4:	bd70      	pop	{r4, r5, r6, pc}
 80133e6:	bf00      	nop
 80133e8:	2000687c 	.word	0x2000687c

080133ec <uxr_set_custom_transport_callbacks>:
 80133ec:	b430      	push	{r4, r5}
 80133ee:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80133f2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80133f6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80133fa:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80133fe:	bc30      	pop	{r4, r5}
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop

08013404 <uxr_init_custom_transport>:
 8013404:	b538      	push	{r3, r4, r5, lr}
 8013406:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801340a:	b303      	cbz	r3, 801344e <uxr_init_custom_transport+0x4a>
 801340c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8013410:	4604      	mov	r4, r0
 8013412:	b1e2      	cbz	r2, 801344e <uxr_init_custom_transport+0x4a>
 8013414:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8013418:	b1ca      	cbz	r2, 801344e <uxr_init_custom_transport+0x4a>
 801341a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801341e:	b1b2      	cbz	r2, 801344e <uxr_init_custom_transport+0x4a>
 8013420:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8013424:	4798      	blx	r3
 8013426:	4605      	mov	r5, r0
 8013428:	b188      	cbz	r0, 801344e <uxr_init_custom_transport+0x4a>
 801342a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801342e:	b98b      	cbnz	r3, 8013454 <uxr_init_custom_transport+0x50>
 8013430:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013434:	490a      	ldr	r1, [pc, #40]	; (8013460 <uxr_init_custom_transport+0x5c>)
 8013436:	4a0b      	ldr	r2, [pc, #44]	; (8013464 <uxr_init_custom_transport+0x60>)
 8013438:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <uxr_init_custom_transport+0x64>)
 801343a:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
 801343e:	e9c4 129f 	strd	r1, r2, [r4, #636]	; 0x27c
 8013442:	4628      	mov	r0, r5
 8013444:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8013448:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 801344c:	bd38      	pop	{r3, r4, r5, pc}
 801344e:	2500      	movs	r5, #0
 8013450:	4628      	mov	r0, r5
 8013452:	bd38      	pop	{r3, r4, r5, pc}
 8013454:	2100      	movs	r1, #0
 8013456:	f204 2002 	addw	r0, r4, #514	; 0x202
 801345a:	f001 f8bb 	bl	80145d4 <uxr_init_framing_io>
 801345e:	e7e7      	b.n	8013430 <uxr_init_custom_transport+0x2c>
 8013460:	08013399 	.word	0x08013399
 8013464:	08013301 	.word	0x08013301
 8013468:	080132f5 	.word	0x080132f5

0801346c <uxr_close_custom_transport>:
 801346c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8013470:	4718      	bx	r3
 8013472:	bf00      	nop

08013474 <uxr_object_id>:
 8013474:	2300      	movs	r3, #0
 8013476:	b082      	sub	sp, #8
 8013478:	f88d 1006 	strb.w	r1, [sp, #6]
 801347c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013480:	f360 030f 	bfi	r3, r0, #0, #16
 8013484:	f362 431f 	bfi	r3, r2, #16, #16
 8013488:	4618      	mov	r0, r3
 801348a:	b002      	add	sp, #8
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop

08013490 <uxr_object_id_from_raw>:
 8013490:	4602      	mov	r2, r0
 8013492:	2000      	movs	r0, #0
 8013494:	7853      	ldrb	r3, [r2, #1]
 8013496:	b082      	sub	sp, #8
 8013498:	7812      	ldrb	r2, [r2, #0]
 801349a:	f003 010f 	and.w	r1, r3, #15
 801349e:	f88d 1006 	strb.w	r1, [sp, #6]
 80134a2:	091b      	lsrs	r3, r3, #4
 80134a4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80134a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80134ac:	f363 000f 	bfi	r0, r3, #0, #16
 80134b0:	f362 401f 	bfi	r0, r2, #16, #16
 80134b4:	b002      	add	sp, #8
 80134b6:	4770      	bx	lr

080134b8 <uxr_object_id_to_raw>:
 80134b8:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80134bc:	b082      	sub	sp, #8
 80134be:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80134c2:	f3c0 100b 	ubfx	r0, r0, #4, #12
 80134c6:	7008      	strb	r0, [r1, #0]
 80134c8:	704b      	strb	r3, [r1, #1]
 80134ca:	b002      	add	sp, #8
 80134cc:	4770      	bx	lr
 80134ce:	bf00      	nop

080134d0 <uxr_buffer_request_data>:
 80134d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134d2:	b095      	sub	sp, #84	; 0x54
 80134d4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80134d6:	2600      	movs	r6, #0
 80134d8:	2d00      	cmp	r5, #0
 80134da:	bf14      	ite	ne
 80134dc:	2701      	movne	r7, #1
 80134de:	2700      	moveq	r7, #0
 80134e0:	4604      	mov	r4, r0
 80134e2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80134e6:	9303      	str	r3, [sp, #12]
 80134e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80134ec:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80134f0:	f88d 601d 	strb.w	r6, [sp, #29]
 80134f4:	f88d 601e 	strb.w	r6, [sp, #30]
 80134f8:	d021      	beq.n	801353e <uxr_buffer_request_data+0x6e>
 80134fa:	686a      	ldr	r2, [r5, #4]
 80134fc:	682b      	ldr	r3, [r5, #0]
 80134fe:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8013502:	2210      	movs	r2, #16
 8013504:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8013508:	2308      	movs	r3, #8
 801350a:	2100      	movs	r1, #0
 801350c:	4620      	mov	r0, r4
 801350e:	e9cd 3100 	strd	r3, r1, [sp]
 8013512:	9905      	ldr	r1, [sp, #20]
 8013514:	ab0c      	add	r3, sp, #48	; 0x30
 8013516:	f000 fefb 	bl	8014310 <uxr_prepare_stream_to_write_submessage>
 801351a:	b918      	cbnz	r0, 8013524 <uxr_buffer_request_data+0x54>
 801351c:	4604      	mov	r4, r0
 801351e:	4620      	mov	r0, r4
 8013520:	b015      	add	sp, #84	; 0x54
 8013522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013524:	9904      	ldr	r1, [sp, #16]
 8013526:	aa06      	add	r2, sp, #24
 8013528:	4620      	mov	r0, r4
 801352a:	f001 f823 	bl	8014574 <uxr_init_base_object_request>
 801352e:	4604      	mov	r4, r0
 8013530:	a906      	add	r1, sp, #24
 8013532:	a80c      	add	r0, sp, #48	; 0x30
 8013534:	f002 fdcc 	bl	80160d0 <uxr_serialize_READ_DATA_Payload>
 8013538:	4620      	mov	r0, r4
 801353a:	b015      	add	sp, #84	; 0x54
 801353c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801353e:	2208      	movs	r2, #8
 8013540:	e7e2      	b.n	8013508 <uxr_buffer_request_data+0x38>
 8013542:	bf00      	nop

08013544 <uxr_buffer_cancel_data>:
 8013544:	b530      	push	{r4, r5, lr}
 8013546:	2308      	movs	r3, #8
 8013548:	2400      	movs	r4, #0
 801354a:	2501      	movs	r5, #1
 801354c:	b095      	sub	sp, #84	; 0x54
 801354e:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8013552:	9300      	str	r3, [sp, #0]
 8013554:	9205      	str	r2, [sp, #20]
 8013556:	ab0c      	add	r3, sp, #48	; 0x30
 8013558:	2210      	movs	r2, #16
 801355a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801355e:	f88d 401e 	strb.w	r4, [sp, #30]
 8013562:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8013566:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 801356a:	9103      	str	r1, [sp, #12]
 801356c:	4604      	mov	r4, r0
 801356e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013572:	f000 fecd 	bl	8014310 <uxr_prepare_stream_to_write_submessage>
 8013576:	b918      	cbnz	r0, 8013580 <uxr_buffer_cancel_data+0x3c>
 8013578:	4604      	mov	r4, r0
 801357a:	4620      	mov	r0, r4
 801357c:	b015      	add	sp, #84	; 0x54
 801357e:	bd30      	pop	{r4, r5, pc}
 8013580:	9905      	ldr	r1, [sp, #20]
 8013582:	aa06      	add	r2, sp, #24
 8013584:	4620      	mov	r0, r4
 8013586:	f000 fff5 	bl	8014574 <uxr_init_base_object_request>
 801358a:	4604      	mov	r4, r0
 801358c:	a906      	add	r1, sp, #24
 801358e:	a80c      	add	r0, sp, #48	; 0x30
 8013590:	f002 fd9e 	bl	80160d0 <uxr_serialize_READ_DATA_Payload>
 8013594:	4620      	mov	r0, r4
 8013596:	b015      	add	sp, #84	; 0x54
 8013598:	bd30      	pop	{r4, r5, pc}
 801359a:	bf00      	nop

0801359c <read_submessage_format>:
 801359c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80135a0:	b095      	sub	sp, #84	; 0x54
 80135a2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 80135a6:	b113      	cbz	r3, 80135ae <read_submessage_format+0x12>
 80135a8:	b015      	add	sp, #84	; 0x54
 80135aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135ae:	460c      	mov	r4, r1
 80135b0:	4606      	mov	r6, r0
 80135b2:	4690      	mov	r8, r2
 80135b4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80135b8:	a80c      	add	r0, sp, #48	; 0x30
 80135ba:	1a52      	subs	r2, r2, r1
 80135bc:	461d      	mov	r5, r3
 80135be:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 80135c2:	e9cd 7304 	strd	r7, r3, [sp, #16]
 80135c6:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 80135ca:	f7fb faf5 	bl	800ebb8 <ucdr_init_buffer>
 80135ce:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80135d2:	a80c      	add	r0, sp, #48	; 0x30
 80135d4:	f7fb fac6 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 80135d8:	69e3      	ldr	r3, [r4, #28]
 80135da:	b17b      	cbz	r3, 80135fc <read_submessage_format+0x60>
 80135dc:	2f07      	cmp	r7, #7
 80135de:	751d      	strb	r5, [r3, #20]
 80135e0:	d03a      	beq.n	8013658 <read_submessage_format+0xbc>
 80135e2:	2f08      	cmp	r7, #8
 80135e4:	d029      	beq.n	801363a <read_submessage_format+0x9e>
 80135e6:	2f06      	cmp	r7, #6
 80135e8:	d00e      	beq.n	8013608 <read_submessage_format+0x6c>
 80135ea:	2201      	movs	r2, #1
 80135ec:	751a      	strb	r2, [r3, #20]
 80135ee:	4641      	mov	r1, r8
 80135f0:	4620      	mov	r0, r4
 80135f2:	f7fb fb33 	bl	800ec5c <ucdr_advance_buffer>
 80135f6:	b015      	add	sp, #84	; 0x54
 80135f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135fc:	2f07      	cmp	r7, #7
 80135fe:	d02b      	beq.n	8013658 <read_submessage_format+0xbc>
 8013600:	2f08      	cmp	r7, #8
 8013602:	d01a      	beq.n	801363a <read_submessage_format+0x9e>
 8013604:	2f06      	cmp	r7, #6
 8013606:	d1f2      	bne.n	80135ee <read_submessage_format+0x52>
 8013608:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 801360c:	b195      	cbz	r5, 8013634 <read_submessage_format+0x98>
 801360e:	2206      	movs	r2, #6
 8013610:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8013614:	f88d 2016 	strb.w	r2, [sp, #22]
 8013618:	aa0c      	add	r2, sp, #48	; 0x30
 801361a:	9200      	str	r2, [sp, #0]
 801361c:	9302      	str	r3, [sp, #8]
 801361e:	464a      	mov	r2, r9
 8013620:	9b04      	ldr	r3, [sp, #16]
 8013622:	4630      	mov	r0, r6
 8013624:	9905      	ldr	r1, [sp, #20]
 8013626:	f8cd 8004 	str.w	r8, [sp, #4]
 801362a:	47a8      	blx	r5
 801362c:	2201      	movs	r2, #1
 801362e:	69e3      	ldr	r3, [r4, #28]
 8013630:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1d8      	bne.n	80135ea <read_submessage_format+0x4e>
 8013638:	e7d9      	b.n	80135ee <read_submessage_format+0x52>
 801363a:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 801363e:	2a00      	cmp	r2, #0
 8013640:	d0f8      	beq.n	8013634 <read_submessage_format+0x98>
 8013642:	a906      	add	r1, sp, #24
 8013644:	a80c      	add	r0, sp, #48	; 0x30
 8013646:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013648:	f002 fe16 	bl	8016278 <uxr_deserialize_SampleIdentity>
 801364c:	2800      	cmp	r0, #0
 801364e:	d13c      	bne.n	80136ca <read_submessage_format+0x12e>
 8013650:	69e3      	ldr	r3, [r4, #28]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d1c9      	bne.n	80135ea <read_submessage_format+0x4e>
 8013656:	e7ca      	b.n	80135ee <read_submessage_format+0x52>
 8013658:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 801365c:	b132      	cbz	r2, 801366c <read_submessage_format+0xd0>
 801365e:	a906      	add	r1, sp, #24
 8013660:	a80c      	add	r0, sp, #48	; 0x30
 8013662:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013664:	f002 fbd2 	bl	8015e0c <uxr_deserialize_BaseObjectRequest>
 8013668:	b930      	cbnz	r0, 8013678 <read_submessage_format+0xdc>
 801366a:	69e3      	ldr	r3, [r4, #28]
 801366c:	68a2      	ldr	r2, [r4, #8]
 801366e:	4442      	add	r2, r8
 8013670:	60a2      	str	r2, [r4, #8]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d1b9      	bne.n	80135ea <read_submessage_format+0x4e>
 8013676:	e7ba      	b.n	80135ee <read_submessage_format+0x52>
 8013678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801367a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801367e:	a80c      	add	r0, sp, #48	; 0x30
 8013680:	1a52      	subs	r2, r2, r1
 8013682:	1aed      	subs	r5, r5, r3
 8013684:	f7fb fa98 	bl	800ebb8 <ucdr_init_buffer>
 8013688:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801368c:	a80c      	add	r0, sp, #48	; 0x30
 801368e:	f7fb fa69 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 8013692:	2107      	movs	r1, #7
 8013694:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8013698:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801369c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 80136a0:	4445      	add	r5, r8
 80136a2:	b2ad      	uxth	r5, r5
 80136a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80136a8:	aa0c      	add	r2, sp, #48	; 0x30
 80136aa:	9200      	str	r2, [sp, #0]
 80136ac:	9002      	str	r0, [sp, #8]
 80136ae:	f88d 1016 	strb.w	r1, [sp, #22]
 80136b2:	9501      	str	r5, [sp, #4]
 80136b4:	b29b      	uxth	r3, r3
 80136b6:	464a      	mov	r2, r9
 80136b8:	4630      	mov	r0, r6
 80136ba:	9905      	ldr	r1, [sp, #20]
 80136bc:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 80136c0:	47a8      	blx	r5
 80136c2:	2301      	movs	r3, #1
 80136c4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80136c8:	e7cf      	b.n	801366a <read_submessage_format+0xce>
 80136ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80136cc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80136d0:	a80c      	add	r0, sp, #48	; 0x30
 80136d2:	1a52      	subs	r2, r2, r1
 80136d4:	1aed      	subs	r5, r5, r3
 80136d6:	f7fb fa6f 	bl	800ebb8 <ucdr_init_buffer>
 80136da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80136de:	a80c      	add	r0, sp, #48	; 0x30
 80136e0:	f7fb fa40 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 80136e4:	2308      	movs	r3, #8
 80136e6:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 80136ea:	4445      	add	r5, r8
 80136ec:	f88d 3016 	strb.w	r3, [sp, #22]
 80136f0:	b2ad      	uxth	r5, r5
 80136f2:	ab0c      	add	r3, sp, #48	; 0x30
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	9002      	str	r0, [sp, #8]
 80136f8:	9501      	str	r5, [sp, #4]
 80136fa:	ab06      	add	r3, sp, #24
 80136fc:	464a      	mov	r2, r9
 80136fe:	4630      	mov	r0, r6
 8013700:	9905      	ldr	r1, [sp, #20]
 8013702:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 8013706:	47a8      	blx	r5
 8013708:	2301      	movs	r3, #1
 801370a:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801370e:	e79f      	b.n	8013650 <read_submessage_format+0xb4>

08013710 <on_get_fragmentation_info>:
 8013710:	b500      	push	{lr}
 8013712:	b08b      	sub	sp, #44	; 0x2c
 8013714:	4601      	mov	r1, r0
 8013716:	2204      	movs	r2, #4
 8013718:	a802      	add	r0, sp, #8
 801371a:	f7fb fa4d 	bl	800ebb8 <ucdr_init_buffer>
 801371e:	f10d 0305 	add.w	r3, sp, #5
 8013722:	a802      	add	r0, sp, #8
 8013724:	f10d 0206 	add.w	r2, sp, #6
 8013728:	a901      	add	r1, sp, #4
 801372a:	f001 fd1f 	bl	801516c <uxr_read_submessage_header>
 801372e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013732:	2b0d      	cmp	r3, #13
 8013734:	d003      	beq.n	801373e <on_get_fragmentation_info+0x2e>
 8013736:	2000      	movs	r0, #0
 8013738:	b00b      	add	sp, #44	; 0x2c
 801373a:	f85d fb04 	ldr.w	pc, [sp], #4
 801373e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013742:	f013 0f02 	tst.w	r3, #2
 8013746:	bf14      	ite	ne
 8013748:	2002      	movne	r0, #2
 801374a:	2001      	moveq	r0, #1
 801374c:	b00b      	add	sp, #44	; 0x2c
 801374e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013752:	bf00      	nop

08013754 <write_submessage_acknack.isra.0>:
 8013754:	b570      	push	{r4, r5, r6, lr}
 8013756:	4614      	mov	r4, r2
 8013758:	b092      	sub	sp, #72	; 0x48
 801375a:	4605      	mov	r5, r0
 801375c:	460e      	mov	r6, r1
 801375e:	f000 ff01 	bl	8014564 <uxr_session_header_offset>
 8013762:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013766:	9000      	str	r0, [sp, #0]
 8013768:	a905      	add	r1, sp, #20
 801376a:	a80a      	add	r0, sp, #40	; 0x28
 801376c:	2300      	movs	r3, #0
 801376e:	2211      	movs	r2, #17
 8013770:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8013774:	f7fb fa0e 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8013778:	3450      	adds	r4, #80	; 0x50
 801377a:	2205      	movs	r2, #5
 801377c:	2300      	movs	r3, #0
 801377e:	210a      	movs	r1, #10
 8013780:	a80a      	add	r0, sp, #40	; 0x28
 8013782:	f001 fcd9 	bl	8015138 <uxr_buffer_submessage_header>
 8013786:	a903      	add	r1, sp, #12
 8013788:	4620      	mov	r0, r4
 801378a:	f006 f97d 	bl	8019a88 <uxr_compute_acknack>
 801378e:	a903      	add	r1, sp, #12
 8013790:	ba43      	rev16	r3, r0
 8013792:	a80a      	add	r0, sp, #40	; 0x28
 8013794:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013798:	f88d 6010 	strb.w	r6, [sp, #16]
 801379c:	f002 fcbc 	bl	8016118 <uxr_serialize_ACKNACK_Payload>
 80137a0:	2200      	movs	r2, #0
 80137a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137a4:	4611      	mov	r1, r2
 80137a6:	4628      	mov	r0, r5
 80137a8:	f000 fe88 	bl	80144bc <uxr_stamp_session_header>
 80137ac:	a80a      	add	r0, sp, #40	; 0x28
 80137ae:	f7fb fa31 	bl	800ec14 <ucdr_buffer_length>
 80137b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80137b4:	4602      	mov	r2, r0
 80137b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80137ba:	a905      	add	r1, sp, #20
 80137bc:	47a0      	blx	r4
 80137be:	b012      	add	sp, #72	; 0x48
 80137c0:	bd70      	pop	{r4, r5, r6, pc}
 80137c2:	bf00      	nop

080137c4 <uxr_acknack_pong.part.0>:
 80137c4:	b570      	push	{r4, r5, r6, lr}
 80137c6:	2400      	movs	r4, #0
 80137c8:	4605      	mov	r5, r0
 80137ca:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 80137ce:	f10d 0306 	add.w	r3, sp, #6
 80137d2:	a901      	add	r1, sp, #4
 80137d4:	f10d 0205 	add.w	r2, sp, #5
 80137d8:	f88d 4004 	strb.w	r4, [sp, #4]
 80137dc:	f88d 4005 	strb.w	r4, [sp, #5]
 80137e0:	f8ad 4006 	strh.w	r4, [sp, #6]
 80137e4:	f001 fef8 	bl	80155d8 <uxr_deserialize_submessage_header>
 80137e8:	4628      	mov	r0, r5
 80137ea:	f7fb fa17 	bl	800ec1c <ucdr_buffer_remaining>
 80137ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80137f2:	4298      	cmp	r0, r3
 80137f4:	d31d      	bcc.n	8013832 <uxr_acknack_pong.part.0+0x6e>
 80137f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80137fa:	2b06      	cmp	r3, #6
 80137fc:	d003      	beq.n	8013806 <uxr_acknack_pong.part.0+0x42>
 80137fe:	4620      	mov	r0, r4
 8013800:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8013804:	bd70      	pop	{r4, r5, r6, pc}
 8013806:	a902      	add	r1, sp, #8
 8013808:	4628      	mov	r0, r5
 801380a:	f002 fb0f 	bl	8015e2c <uxr_deserialize_BaseObjectReply>
 801380e:	a904      	add	r1, sp, #16
 8013810:	4604      	mov	r4, r0
 8013812:	4628      	mov	r0, r5
 8013814:	f7f9 fda2 	bl	800d35c <ucdr_deserialize_bool>
 8013818:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801381c:	4004      	ands	r4, r0
 801381e:	b2e4      	uxtb	r4, r4
 8013820:	bb23      	cbnz	r3, 801386c <uxr_acknack_pong.part.0+0xa8>
 8013822:	4628      	mov	r0, r5
 8013824:	a989      	add	r1, sp, #548	; 0x224
 8013826:	f7f9 fd99 	bl	800d35c <ucdr_deserialize_bool>
 801382a:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 801382e:	4606      	mov	r6, r0
 8013830:	b91b      	cbnz	r3, 801383a <uxr_acknack_pong.part.0+0x76>
 8013832:	2000      	movs	r0, #0
 8013834:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8013838:	bd70      	pop	{r4, r5, r6, pc}
 801383a:	4628      	mov	r0, r5
 801383c:	a98a      	add	r1, sp, #552	; 0x228
 801383e:	f7f9 fdbb 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8013842:	4226      	tst	r6, r4
 8013844:	d0f5      	beq.n	8013832 <uxr_acknack_pong.part.0+0x6e>
 8013846:	2800      	cmp	r0, #0
 8013848:	d0f3      	beq.n	8013832 <uxr_acknack_pong.part.0+0x6e>
 801384a:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 801384e:	2b0d      	cmp	r3, #13
 8013850:	d1ef      	bne.n	8013832 <uxr_acknack_pong.part.0+0x6e>
 8013852:	4628      	mov	r0, r5
 8013854:	a98c      	add	r1, sp, #560	; 0x230
 8013856:	f7fa fb59 	bl	800df0c <ucdr_deserialize_int16_t>
 801385a:	2800      	cmp	r0, #0
 801385c:	d0ea      	beq.n	8013834 <uxr_acknack_pong.part.0+0x70>
 801385e:	f9bd 4230 	ldrsh.w	r4, [sp, #560]	; 0x230
 8013862:	2c00      	cmp	r4, #0
 8013864:	bfd4      	ite	le
 8013866:	2000      	movle	r0, #0
 8013868:	2001      	movgt	r0, #1
 801386a:	e7e3      	b.n	8013834 <uxr_acknack_pong.part.0+0x70>
 801386c:	4628      	mov	r0, r5
 801386e:	a905      	add	r1, sp, #20
 8013870:	f002 fa1e 	bl	8015cb0 <uxr_deserialize_ObjectVariant>
 8013874:	4004      	ands	r4, r0
 8013876:	e7d4      	b.n	8013822 <uxr_acknack_pong.part.0+0x5e>

08013878 <read_submessage_list>:
 8013878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801387c:	4604      	mov	r4, r0
 801387e:	460d      	mov	r5, r1
 8013880:	b099      	sub	sp, #100	; 0x64
 8013882:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8013b78 <read_submessage_list+0x300>
 8013886:	920b      	str	r2, [sp, #44]	; 0x2c
 8013888:	4628      	mov	r0, r5
 801388a:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 801388e:	aa0e      	add	r2, sp, #56	; 0x38
 8013890:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8013894:	f001 fc6a 	bl	801516c <uxr_read_submessage_header>
 8013898:	2800      	cmp	r0, #0
 801389a:	f000 810d 	beq.w	8013ab8 <read_submessage_list+0x240>
 801389e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80138a2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 80138a6:	3b04      	subs	r3, #4
 80138a8:	2b0b      	cmp	r3, #11
 80138aa:	d8ed      	bhi.n	8013888 <read_submessage_list+0x10>
 80138ac:	a101      	add	r1, pc, #4	; (adr r1, 80138b4 <read_submessage_list+0x3c>)
 80138ae:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80138b2:	bf00      	nop
 80138b4:	08013aa9 	.word	0x08013aa9
 80138b8:	08013a9d 	.word	0x08013a9d
 80138bc:	08013889 	.word	0x08013889
 80138c0:	08013889 	.word	0x08013889
 80138c4:	08013889 	.word	0x08013889
 80138c8:	080139fd 	.word	0x080139fd
 80138cc:	0801398d 	.word	0x0801398d
 80138d0:	0801394b 	.word	0x0801394b
 80138d4:	08013889 	.word	0x08013889
 80138d8:	08013889 	.word	0x08013889
 80138dc:	08013889 	.word	0x08013889
 80138e0:	080138e5 	.word	0x080138e5
 80138e4:	4628      	mov	r0, r5
 80138e6:	a912      	add	r1, sp, #72	; 0x48
 80138e8:	f002 fc74 	bl	80161d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80138ec:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 80138f0:	2e00      	cmp	r6, #0
 80138f2:	f000 8112 	beq.w	8013b1a <read_submessage_list+0x2a2>
 80138f6:	f001 fc81 	bl	80151fc <uxr_nanos>
 80138fa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80138fc:	f04f 0900 	mov.w	r9, #0
 8013900:	46b8      	mov	r8, r7
 8013902:	4602      	mov	r2, r0
 8013904:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013906:	f04f 0c00 	mov.w	ip, #0
 801390a:	4683      	mov	fp, r0
 801390c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801390e:	460b      	mov	r3, r1
 8013910:	fbca 8907 	smlal	r8, r9, sl, r7
 8013914:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8013918:	46d8      	mov	r8, fp
 801391a:	46e1      	mov	r9, ip
 801391c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801391e:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013920:	4608      	mov	r0, r1
 8013922:	2100      	movs	r1, #0
 8013924:	fbca 8907 	smlal	r8, r9, sl, r7
 8013928:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801392a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801392e:	fbca 0107 	smlal	r0, r1, sl, r7
 8013932:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 8013936:	e9cd 0100 	strd	r0, r1, [sp]
 801393a:	9706      	str	r7, [sp, #24]
 801393c:	4620      	mov	r0, r4
 801393e:	47b0      	blx	r6
 8013940:	f04f 0301 	mov.w	r3, #1
 8013944:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8013948:	e79e      	b.n	8013888 <read_submessage_list+0x10>
 801394a:	a912      	add	r1, sp, #72	; 0x48
 801394c:	4628      	mov	r0, r5
 801394e:	f002 fc21 	bl	8016194 <uxr_deserialize_HEARTBEAT_Payload>
 8013952:	2100      	movs	r1, #0
 8013954:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8013958:	f001 fade 	bl	8014f18 <uxr_stream_id_from_raw>
 801395c:	4603      	mov	r3, r0
 801395e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013962:	4631      	mov	r1, r6
 8013964:	f104 0008 	add.w	r0, r4, #8
 8013968:	9311      	str	r3, [sp, #68]	; 0x44
 801396a:	f001 fbc3 	bl	80150f4 <uxr_get_input_reliable_stream>
 801396e:	2800      	cmp	r0, #0
 8013970:	d08a      	beq.n	8013888 <read_submessage_list+0x10>
 8013972:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8013976:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801397a:	f006 f879 	bl	8019a70 <uxr_process_heartbeat>
 801397e:	4632      	mov	r2, r6
 8013980:	4620      	mov	r0, r4
 8013982:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8013986:	f7ff fee5 	bl	8013754 <write_submessage_acknack.isra.0>
 801398a:	e77d      	b.n	8013888 <read_submessage_list+0x10>
 801398c:	a912      	add	r1, sp, #72	; 0x48
 801398e:	4628      	mov	r0, r5
 8013990:	f002 fbd8 	bl	8016144 <uxr_deserialize_ACKNACK_Payload>
 8013994:	2100      	movs	r1, #0
 8013996:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801399a:	f001 fabd 	bl	8014f18 <uxr_stream_id_from_raw>
 801399e:	4603      	mov	r3, r0
 80139a0:	f104 0008 	add.w	r0, r4, #8
 80139a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80139a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80139aa:	f001 fb8d 	bl	80150c8 <uxr_get_output_reliable_stream>
 80139ae:	4606      	mov	r6, r0
 80139b0:	2800      	cmp	r0, #0
 80139b2:	f43f af69 	beq.w	8013888 <read_submessage_list+0x10>
 80139b6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 80139ba:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 80139be:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80139c2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80139c6:	b289      	uxth	r1, r1
 80139c8:	f006 fb92 	bl	801a0f0 <uxr_process_acknack>
 80139cc:	4630      	mov	r0, r6
 80139ce:	f006 fb55 	bl	801a07c <uxr_begin_output_nack_buffer_it>
 80139d2:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80139d6:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 80139da:	e005      	b.n	80139e8 <read_submessage_list+0x170>
 80139dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80139de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80139e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80139e2:	e9d3 0700 	ldrd	r0, r7, [r3]
 80139e6:	47b8      	blx	r7
 80139e8:	4641      	mov	r1, r8
 80139ea:	4630      	mov	r0, r6
 80139ec:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 80139f0:	aa11      	add	r2, sp, #68	; 0x44
 80139f2:	f006 fb45 	bl	801a080 <uxr_next_reliable_nack_buffer_to_send>
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d1f0      	bne.n	80139dc <read_submessage_list+0x164>
 80139fa:	e745      	b.n	8013888 <read_submessage_list+0x10>
 80139fc:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8013a00:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8013a04:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8013a08:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8013a0c:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 8013a10:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8013a14:	4641      	mov	r1, r8
 8013a16:	4628      	mov	r0, r5
 8013a18:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 8013a1c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8013a20:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8013a24:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8013a28:	f002 f9f0 	bl	8015e0c <uxr_deserialize_BaseObjectRequest>
 8013a2c:	4640      	mov	r0, r8
 8013a2e:	a911      	add	r1, sp, #68	; 0x44
 8013a30:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8013a34:	f000 fdbc 	bl	80145b0 <uxr_parse_base_object_request>
 8013a38:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013a3a:	f8d4 9080 	ldr.w	r9, [r4, #128]	; 0x80
 8013a3e:	3e04      	subs	r6, #4
 8013a40:	f8bd 803a 	ldrh.w	r8, [sp, #58]	; 0x3a
 8013a44:	f007 070e 	and.w	r7, r7, #14
 8013a48:	b2b6      	uxth	r6, r6
 8013a4a:	9112      	str	r1, [sp, #72]	; 0x48
 8013a4c:	f1b9 0f00 	cmp.w	r9, #0
 8013a50:	d006      	beq.n	8013a60 <read_submessage_list+0x1e8>
 8013a52:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013a56:	4642      	mov	r2, r8
 8013a58:	9300      	str	r3, [sp, #0]
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	47c8      	blx	r9
 8013a60:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8013a62:	b168      	cbz	r0, 8013a80 <read_submessage_list+0x208>
 8013a64:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013a66:	2300      	movs	r3, #0
 8013a68:	3902      	subs	r1, #2
 8013a6a:	e002      	b.n	8013a72 <read_submessage_list+0x1fa>
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	4283      	cmp	r3, r0
 8013a70:	d006      	beq.n	8013a80 <read_submessage_list+0x208>
 8013a72:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8013a76:	4542      	cmp	r2, r8
 8013a78:	d1f8      	bne.n	8013a6c <read_submessage_list+0x1f4>
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8013a7e:	54d1      	strb	r1, [r2, r3]
 8013a80:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 8013a84:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013a86:	463b      	mov	r3, r7
 8013a88:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8013a8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013a8e:	4632      	mov	r2, r6
 8013a90:	9100      	str	r1, [sp, #0]
 8013a92:	4620      	mov	r0, r4
 8013a94:	4629      	mov	r1, r5
 8013a96:	f7ff fd81 	bl	801359c <read_submessage_format>
 8013a9a:	e6f5      	b.n	8013888 <read_submessage_list+0x10>
 8013a9c:	b97a      	cbnz	r2, 8013abe <read_submessage_list+0x246>
 8013a9e:	4629      	mov	r1, r5
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	f000 fcd9 	bl	8014458 <uxr_read_delete_session_status>
 8013aa6:	e6ef      	b.n	8013888 <read_submessage_list+0x10>
 8013aa8:	2a00      	cmp	r2, #0
 8013aaa:	f47f aeed 	bne.w	8013888 <read_submessage_list+0x10>
 8013aae:	4629      	mov	r1, r5
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f000 fcc5 	bl	8014440 <uxr_read_create_session_status>
 8013ab6:	e6e7      	b.n	8013888 <read_submessage_list+0x10>
 8013ab8:	b019      	add	sp, #100	; 0x64
 8013aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013abe:	a912      	add	r1, sp, #72	; 0x48
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	f002 fae7 	bl	8016094 <uxr_deserialize_STATUS_Payload>
 8013ac6:	a910      	add	r1, sp, #64	; 0x40
 8013ac8:	aa0f      	add	r2, sp, #60	; 0x3c
 8013aca:	a812      	add	r0, sp, #72	; 0x48
 8013acc:	f000 fd70 	bl	80145b0 <uxr_parse_base_object_request>
 8013ad0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013ad2:	f8d4 8080 	ldr.w	r8, [r4, #128]	; 0x80
 8013ad6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8013ada:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8013ade:	9111      	str	r1, [sp, #68]	; 0x44
 8013ae0:	f1b8 0f00 	cmp.w	r8, #0
 8013ae4:	d006      	beq.n	8013af4 <read_submessage_list+0x27c>
 8013ae6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013aea:	4632      	mov	r2, r6
 8013aec:	9300      	str	r3, [sp, #0]
 8013aee:	4620      	mov	r0, r4
 8013af0:	463b      	mov	r3, r7
 8013af2:	47c0      	blx	r8
 8013af4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013af6:	2a00      	cmp	r2, #0
 8013af8:	f43f aec6 	beq.w	8013888 <read_submessage_list+0x10>
 8013afc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013afe:	2100      	movs	r1, #0
 8013b00:	3802      	subs	r0, #2
 8013b02:	e003      	b.n	8013b0c <read_submessage_list+0x294>
 8013b04:	3101      	adds	r1, #1
 8013b06:	4291      	cmp	r1, r2
 8013b08:	f43f aebe 	beq.w	8013888 <read_submessage_list+0x10>
 8013b0c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013b10:	42b3      	cmp	r3, r6
 8013b12:	d1f7      	bne.n	8013b04 <read_submessage_list+0x28c>
 8013b14:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013b16:	545f      	strb	r7, [r3, r1]
 8013b18:	e6b6      	b.n	8013888 <read_submessage_list+0x10>
 8013b1a:	f001 fb6f 	bl	80151fc <uxr_nanos>
 8013b1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013b20:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8013b22:	4693      	mov	fp, r2
 8013b24:	f04f 0c00 	mov.w	ip, #0
 8013b28:	46b8      	mov	r8, r7
 8013b2a:	f04f 0900 	mov.w	r9, #0
 8013b2e:	2700      	movs	r7, #0
 8013b30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013b32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013b34:	fbca bc03 	smlal	fp, ip, sl, r3
 8013b38:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8013b3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013b3c:	fbca 6702 	smlal	r6, r7, sl, r2
 8013b40:	fbca 8903 	smlal	r8, r9, sl, r3
 8013b44:	eb1b 0000 	adds.w	r0, fp, r0
 8013b48:	eb4c 0101 	adc.w	r1, ip, r1
 8013b4c:	eb18 0306 	adds.w	r3, r8, r6
 8013b50:	eb49 0207 	adc.w	r2, r9, r7
 8013b54:	1ac3      	subs	r3, r0, r3
 8013b56:	9308      	str	r3, [sp, #32]
 8013b58:	eb61 0302 	sbc.w	r3, r1, r2
 8013b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013b5e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8013b62:	0fd3      	lsrs	r3, r2, #31
 8013b64:	18c9      	adds	r1, r1, r3
 8013b66:	f142 0200 	adc.w	r2, r2, #0
 8013b6a:	084b      	lsrs	r3, r1, #1
 8013b6c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8013b70:	1052      	asrs	r2, r2, #1
 8013b72:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8013b76:	e6e3      	b.n	8013940 <read_submessage_list+0xc8>
 8013b78:	3b9aca00 	.word	0x3b9aca00

08013b7c <listen_message>:
 8013b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b80:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8013b82:	b099      	sub	sp, #100	; 0x64
 8013b84:	6894      	ldr	r4, [r2, #8]
 8013b86:	460b      	mov	r3, r1
 8013b88:	4605      	mov	r5, r0
 8013b8a:	a904      	add	r1, sp, #16
 8013b8c:	6810      	ldr	r0, [r2, #0]
 8013b8e:	aa05      	add	r2, sp, #20
 8013b90:	47a0      	blx	r4
 8013b92:	4604      	mov	r4, r0
 8013b94:	b918      	cbnz	r0, 8013b9e <listen_message+0x22>
 8013b96:	4620      	mov	r0, r4
 8013b98:	b019      	add	sp, #100	; 0x64
 8013b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9e:	2600      	movs	r6, #0
 8013ba0:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8013ba4:	a808      	add	r0, sp, #32
 8013ba6:	f7fb f807 	bl	800ebb8 <ucdr_init_buffer>
 8013baa:	4628      	mov	r0, r5
 8013bac:	a908      	add	r1, sp, #32
 8013bae:	f10d 030e 	add.w	r3, sp, #14
 8013bb2:	aa03      	add	r2, sp, #12
 8013bb4:	f88d 600c 	strb.w	r6, [sp, #12]
 8013bb8:	f000 fc94 	bl	80144e4 <uxr_read_session_header>
 8013bbc:	b1e8      	cbz	r0, 8013bfa <listen_message+0x7e>
 8013bbe:	4631      	mov	r1, r6
 8013bc0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8013bc4:	f001 f9a8 	bl	8014f18 <uxr_stream_id_from_raw>
 8013bc8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013bcc:	2f01      	cmp	r7, #1
 8013bce:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 8013bd2:	9007      	str	r0, [sp, #28]
 8013bd4:	fa5f f880 	uxtb.w	r8, r0
 8013bd8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013bdc:	d01b      	beq.n	8013c16 <listen_message+0x9a>
 8013bde:	2f02      	cmp	r7, #2
 8013be0:	d031      	beq.n	8013c46 <listen_message+0xca>
 8013be2:	2f00      	cmp	r7, #0
 8013be4:	d1d7      	bne.n	8013b96 <listen_message+0x1a>
 8013be6:	4639      	mov	r1, r7
 8013be8:	4638      	mov	r0, r7
 8013bea:	f001 f995 	bl	8014f18 <uxr_stream_id_from_raw>
 8013bee:	a908      	add	r1, sp, #32
 8013bf0:	4602      	mov	r2, r0
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f7ff fe40 	bl	8013878 <read_submessage_list>
 8013bf8:	e7cd      	b.n	8013b96 <listen_message+0x1a>
 8013bfa:	a808      	add	r0, sp, #32
 8013bfc:	f7fb f80e 	bl	800ec1c <ucdr_buffer_remaining>
 8013c00:	2804      	cmp	r0, #4
 8013c02:	d9c8      	bls.n	8013b96 <listen_message+0x1a>
 8013c04:	a808      	add	r0, sp, #32
 8013c06:	f7ff fddd 	bl	80137c4 <uxr_acknack_pong.part.0>
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	d0c3      	beq.n	8013b96 <listen_message+0x1a>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 8013c14:	e7bf      	b.n	8013b96 <listen_message+0x1a>
 8013c16:	4631      	mov	r1, r6
 8013c18:	f105 0008 	add.w	r0, r5, #8
 8013c1c:	f001 fa60 	bl	80150e0 <uxr_get_input_best_effort_stream>
 8013c20:	2800      	cmp	r0, #0
 8013c22:	d0b8      	beq.n	8013b96 <listen_message+0x1a>
 8013c24:	4651      	mov	r1, sl
 8013c26:	f005 fd9f 	bl	8019768 <uxr_receive_best_effort_message>
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d0b3      	beq.n	8013b96 <listen_message+0x1a>
 8013c2e:	f88d 801c 	strb.w	r8, [sp, #28]
 8013c32:	f88d 601d 	strb.w	r6, [sp, #29]
 8013c36:	f88d 701e 	strb.w	r7, [sp, #30]
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	9a07      	ldr	r2, [sp, #28]
 8013c3e:	a908      	add	r1, sp, #32
 8013c40:	f7ff fe1a 	bl	8013878 <read_submessage_list>
 8013c44:	e7a7      	b.n	8013b96 <listen_message+0x1a>
 8013c46:	4631      	mov	r1, r6
 8013c48:	f105 0008 	add.w	r0, r5, #8
 8013c4c:	f001 fa52 	bl	80150f4 <uxr_get_input_reliable_stream>
 8013c50:	4681      	mov	r9, r0
 8013c52:	b328      	cbz	r0, 8013ca0 <listen_message+0x124>
 8013c54:	a808      	add	r0, sp, #32
 8013c56:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8013c5a:	f7fa ffdf 	bl	800ec1c <ucdr_buffer_remaining>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	f10d 000d 	add.w	r0, sp, #13
 8013c64:	9000      	str	r0, [sp, #0]
 8013c66:	465a      	mov	r2, fp
 8013c68:	4651      	mov	r1, sl
 8013c6a:	4648      	mov	r0, r9
 8013c6c:	f005 fe00 	bl	8019870 <uxr_receive_reliable_message>
 8013c70:	b1b0      	cbz	r0, 8013ca0 <listen_message+0x124>
 8013c72:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8013c76:	b1cb      	cbz	r3, 8013cac <listen_message+0x130>
 8013c78:	2702      	movs	r7, #2
 8013c7a:	e00a      	b.n	8013c92 <listen_message+0x116>
 8013c7c:	f88d 801c 	strb.w	r8, [sp, #28]
 8013c80:	f88d 601d 	strb.w	r6, [sp, #29]
 8013c84:	f88d 701e 	strb.w	r7, [sp, #30]
 8013c88:	4628      	mov	r0, r5
 8013c8a:	9a07      	ldr	r2, [sp, #28]
 8013c8c:	a910      	add	r1, sp, #64	; 0x40
 8013c8e:	f7ff fdf3 	bl	8013878 <read_submessage_list>
 8013c92:	2204      	movs	r2, #4
 8013c94:	4648      	mov	r0, r9
 8013c96:	a910      	add	r1, sp, #64	; 0x40
 8013c98:	f005 fe6a 	bl	8019970 <uxr_next_input_reliable_buffer_available>
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d1ed      	bne.n	8013c7c <listen_message+0x100>
 8013ca0:	4632      	mov	r2, r6
 8013ca2:	4641      	mov	r1, r8
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	f7ff fd55 	bl	8013754 <write_submessage_acknack.isra.0>
 8013caa:	e774      	b.n	8013b96 <listen_message+0x1a>
 8013cac:	f88d 801c 	strb.w	r8, [sp, #28]
 8013cb0:	f88d 601d 	strb.w	r6, [sp, #29]
 8013cb4:	f88d 701e 	strb.w	r7, [sp, #30]
 8013cb8:	4628      	mov	r0, r5
 8013cba:	9a07      	ldr	r2, [sp, #28]
 8013cbc:	a908      	add	r1, sp, #32
 8013cbe:	f7ff fddb 	bl	8013878 <read_submessage_list>
 8013cc2:	e7d9      	b.n	8013c78 <listen_message+0xfc>

08013cc4 <listen_message_reliably>:
 8013cc4:	1e0b      	subs	r3, r1, #0
 8013cc6:	bfb8      	it	lt
 8013cc8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8013ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	4683      	mov	fp, r0
 8013cd2:	b095      	sub	sp, #84	; 0x54
 8013cd4:	9303      	str	r3, [sp, #12]
 8013cd6:	f001 fa75 	bl	80151c4 <uxr_millis>
 8013cda:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013cde:	4688      	mov	r8, r1
 8013ce0:	4607      	mov	r7, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	f000 8093 	beq.w	8013e0e <listen_message_reliably+0x14a>
 8013ce8:	2600      	movs	r6, #0
 8013cea:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8013cee:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	e00f      	b.n	8013d16 <listen_message_reliably+0x52>
 8013cf6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013cfa:	454a      	cmp	r2, r9
 8013cfc:	eb73 010a 	sbcs.w	r1, r3, sl
 8013d00:	bfb8      	it	lt
 8013d02:	469a      	movlt	sl, r3
 8013d04:	f106 0601 	add.w	r6, r6, #1
 8013d08:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013d0c:	b2f0      	uxtb	r0, r6
 8013d0e:	bfb8      	it	lt
 8013d10:	4691      	movlt	r9, r2
 8013d12:	4283      	cmp	r3, r0
 8013d14:	d953      	bls.n	8013dbe <listen_message_reliably+0xfa>
 8013d16:	2201      	movs	r2, #1
 8013d18:	2102      	movs	r1, #2
 8013d1a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013d1e:	f001 f8d1 	bl	8014ec4 <uxr_stream_id>
 8013d22:	4601      	mov	r1, r0
 8013d24:	00e4      	lsls	r4, r4, #3
 8013d26:	f104 0520 	add.w	r5, r4, #32
 8013d2a:	445d      	add	r5, fp
 8013d2c:	4643      	mov	r3, r8
 8013d2e:	463a      	mov	r2, r7
 8013d30:	4628      	mov	r0, r5
 8013d32:	9104      	str	r1, [sp, #16]
 8013d34:	f006 f976 	bl	801a024 <uxr_update_output_stream_heartbeat_timestamp>
 8013d38:	eb0b 0304 	add.w	r3, fp, r4
 8013d3c:	2800      	cmp	r0, #0
 8013d3e:	d0da      	beq.n	8013cf6 <listen_message_reliably+0x32>
 8013d40:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013d44:	4658      	mov	r0, fp
 8013d46:	f89d 5011 	ldrb.w	r5, [sp, #17]
 8013d4a:	9302      	str	r3, [sp, #8]
 8013d4c:	f000 fc0a 	bl	8014564 <uxr_session_header_offset>
 8013d50:	3501      	adds	r5, #1
 8013d52:	2300      	movs	r3, #0
 8013d54:	2211      	movs	r2, #17
 8013d56:	9000      	str	r0, [sp, #0]
 8013d58:	a907      	add	r1, sp, #28
 8013d5a:	a80c      	add	r0, sp, #48	; 0x30
 8013d5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013d60:	f7fa ff18 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8013d64:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8013d68:	2300      	movs	r3, #0
 8013d6a:	2205      	movs	r2, #5
 8013d6c:	210b      	movs	r1, #11
 8013d6e:	a80c      	add	r0, sp, #48	; 0x30
 8013d70:	f001 f9e2 	bl	8015138 <uxr_buffer_submessage_header>
 8013d74:	2101      	movs	r1, #1
 8013d76:	8968      	ldrh	r0, [r5, #10]
 8013d78:	f006 fa14 	bl	801a1a4 <uxr_seq_num_add>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	892a      	ldrh	r2, [r5, #8]
 8013d80:	9d02      	ldr	r5, [sp, #8]
 8013d82:	a905      	add	r1, sp, #20
 8013d84:	a80c      	add	r0, sp, #48	; 0x30
 8013d86:	f88d 5018 	strb.w	r5, [sp, #24]
 8013d8a:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013d8e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d92:	f002 f9eb 	bl	801616c <uxr_serialize_HEARTBEAT_Payload>
 8013d96:	2200      	movs	r2, #0
 8013d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	4658      	mov	r0, fp
 8013d9e:	f000 fb8d 	bl	80144bc <uxr_stamp_session_header>
 8013da2:	a80c      	add	r0, sp, #48	; 0x30
 8013da4:	f7fa ff36 	bl	800ec14 <ucdr_buffer_length>
 8013da8:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8013dac:	4602      	mov	r2, r0
 8013dae:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013db2:	a907      	add	r1, sp, #28
 8013db4:	445c      	add	r4, fp
 8013db6:	47a8      	blx	r5
 8013db8:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8013dbc:	e79d      	b.n	8013cfa <listen_message_reliably+0x36>
 8013dbe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8013dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dc6:	45a2      	cmp	sl, r4
 8013dc8:	bf08      	it	eq
 8013dca:	4599      	cmpeq	r9, r3
 8013dcc:	d01f      	beq.n	8013e0e <listen_message_reliably+0x14a>
 8013dce:	eba9 0107 	sub.w	r1, r9, r7
 8013dd2:	2900      	cmp	r1, #0
 8013dd4:	bf08      	it	eq
 8013dd6:	2101      	moveq	r1, #1
 8013dd8:	9c03      	ldr	r4, [sp, #12]
 8013dda:	4658      	mov	r0, fp
 8013ddc:	428c      	cmp	r4, r1
 8013dde:	4623      	mov	r3, r4
 8013de0:	bfa8      	it	ge
 8013de2:	460b      	movge	r3, r1
 8013de4:	4619      	mov	r1, r3
 8013de6:	461f      	mov	r7, r3
 8013de8:	f7ff fec8 	bl	8013b7c <listen_message>
 8013dec:	b110      	cbz	r0, 8013df4 <listen_message_reliably+0x130>
 8013dee:	b015      	add	sp, #84	; 0x54
 8013df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013df4:	1be3      	subs	r3, r4, r7
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	9303      	str	r3, [sp, #12]
 8013dfa:	ddf8      	ble.n	8013dee <listen_message_reliably+0x12a>
 8013dfc:	f001 f9e2 	bl	80151c4 <uxr_millis>
 8013e00:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013e04:	4688      	mov	r8, r1
 8013e06:	4607      	mov	r7, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	f47f af6d 	bne.w	8013ce8 <listen_message_reliably+0x24>
 8013e0e:	9903      	ldr	r1, [sp, #12]
 8013e10:	e7df      	b.n	8013dd2 <listen_message_reliably+0x10e>
 8013e12:	bf00      	nop

08013e14 <uxr_init_session>:
 8013e14:	b5d0      	push	{r4, r6, r7, lr}
 8013e16:	2300      	movs	r3, #0
 8013e18:	2600      	movs	r6, #0
 8013e1a:	2700      	movs	r7, #0
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8013e22:	6701      	str	r1, [r0, #112]	; 0x70
 8013e24:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8013e28:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8013e2c:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8013e30:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8013e34:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8013e38:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8013e3c:	2181      	movs	r1, #129	; 0x81
 8013e3e:	f000 faab 	bl	8014398 <uxr_init_session_info>
 8013e42:	f104 0008 	add.w	r0, r4, #8
 8013e46:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8013e4a:	f001 b891 	b.w	8014f70 <uxr_init_stream_storage>
 8013e4e:	bf00      	nop

08013e50 <uxr_set_status_callback>:
 8013e50:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8013e54:	4770      	bx	lr
 8013e56:	bf00      	nop

08013e58 <uxr_set_topic_callback>:
 8013e58:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop

08013e60 <uxr_set_request_callback>:
 8013e60:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8013e64:	4770      	bx	lr
 8013e66:	bf00      	nop

08013e68 <uxr_set_reply_callback>:
 8013e68:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8013e6c:	4770      	bx	lr
 8013e6e:	bf00      	nop

08013e70 <uxr_create_session>:
 8013e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e74:	4604      	mov	r4, r0
 8013e76:	f100 0708 	add.w	r7, r0, #8
 8013e7a:	b092      	sub	sp, #72	; 0x48
 8013e7c:	4638      	mov	r0, r7
 8013e7e:	f001 f881 	bl	8014f84 <uxr_reset_stream_storage>
 8013e82:	4620      	mov	r0, r4
 8013e84:	f000 fb6e 	bl	8014564 <uxr_session_header_offset>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	221c      	movs	r2, #28
 8013e8c:	9000      	str	r0, [sp, #0]
 8013e8e:	a903      	add	r1, sp, #12
 8013e90:	a80a      	add	r0, sp, #40	; 0x28
 8013e92:	f7fa fe7f 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8013e96:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013e98:	4620      	mov	r0, r4
 8013e9a:	8a1a      	ldrh	r2, [r3, #16]
 8013e9c:	a90a      	add	r1, sp, #40	; 0x28
 8013e9e:	3a04      	subs	r2, #4
 8013ea0:	b292      	uxth	r2, r2
 8013ea2:	f000 fa8b 	bl	80143bc <uxr_buffer_create_session>
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013eaa:	f000 faf3 	bl	8014494 <uxr_stamp_create_session_header>
 8013eae:	a80a      	add	r0, sp, #40	; 0x28
 8013eb0:	f7fa feb0 	bl	800ec14 <ucdr_buffer_length>
 8013eb4:	23ff      	movs	r3, #255	; 0xff
 8013eb6:	4606      	mov	r6, r0
 8013eb8:	250a      	movs	r5, #10
 8013eba:	7163      	strb	r3, [r4, #5]
 8013ebc:	e001      	b.n	8013ec2 <uxr_create_session+0x52>
 8013ebe:	2bff      	cmp	r3, #255	; 0xff
 8013ec0:	d10d      	bne.n	8013ede <uxr_create_session+0x6e>
 8013ec2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013ec4:	4632      	mov	r2, r6
 8013ec6:	e9d3 0800 	ldrd	r0, r8, [r3]
 8013eca:	a903      	add	r1, sp, #12
 8013ecc:	47c0      	blx	r8
 8013ece:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7ff fe52 	bl	8013b7c <listen_message>
 8013ed8:	3d01      	subs	r5, #1
 8013eda:	7963      	ldrb	r3, [r4, #5]
 8013edc:	d1ef      	bne.n	8013ebe <uxr_create_session+0x4e>
 8013ede:	b11b      	cbz	r3, 8013ee8 <uxr_create_session+0x78>
 8013ee0:	2000      	movs	r0, #0
 8013ee2:	b012      	add	sp, #72	; 0x48
 8013ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ee8:	4638      	mov	r0, r7
 8013eea:	f001 f84b 	bl	8014f84 <uxr_reset_stream_storage>
 8013eee:	2001      	movs	r0, #1
 8013ef0:	b012      	add	sp, #72	; 0x48
 8013ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef6:	bf00      	nop

08013ef8 <uxr_delete_session_retries>:
 8013ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013efc:	b08e      	sub	sp, #56	; 0x38
 8013efe:	4604      	mov	r4, r0
 8013f00:	460d      	mov	r5, r1
 8013f02:	f000 fb2f 	bl	8014564 <uxr_session_header_offset>
 8013f06:	2300      	movs	r3, #0
 8013f08:	2210      	movs	r2, #16
 8013f0a:	9000      	str	r0, [sp, #0]
 8013f0c:	a902      	add	r1, sp, #8
 8013f0e:	a806      	add	r0, sp, #24
 8013f10:	f7fa fe40 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8013f14:	4620      	mov	r0, r4
 8013f16:	a906      	add	r1, sp, #24
 8013f18:	f000 fa76 	bl	8014408 <uxr_buffer_delete_session>
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	9b06      	ldr	r3, [sp, #24]
 8013f20:	4620      	mov	r0, r4
 8013f22:	4611      	mov	r1, r2
 8013f24:	f000 faca 	bl	80144bc <uxr_stamp_session_header>
 8013f28:	a806      	add	r0, sp, #24
 8013f2a:	f7fa fe73 	bl	800ec14 <ucdr_buffer_length>
 8013f2e:	23ff      	movs	r3, #255	; 0xff
 8013f30:	4606      	mov	r6, r0
 8013f32:	7163      	strb	r3, [r4, #5]
 8013f34:	b1f5      	cbz	r5, 8013f74 <uxr_delete_session_retries+0x7c>
 8013f36:	2700      	movs	r7, #0
 8013f38:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013f3a:	4632      	mov	r2, r6
 8013f3c:	e9d3 0800 	ldrd	r0, r8, [r3]
 8013f40:	a902      	add	r1, sp, #8
 8013f42:	47c0      	blx	r8
 8013f44:	3701      	adds	r7, #1
 8013f46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	f7ff fe16 	bl	8013b7c <listen_message>
 8013f50:	42bd      	cmp	r5, r7
 8013f52:	7963      	ldrb	r3, [r4, #5]
 8013f54:	d007      	beq.n	8013f66 <uxr_delete_session_retries+0x6e>
 8013f56:	2bff      	cmp	r3, #255	; 0xff
 8013f58:	d0ee      	beq.n	8013f38 <uxr_delete_session_retries+0x40>
 8013f5a:	fab3 f083 	clz	r0, r3
 8013f5e:	0940      	lsrs	r0, r0, #5
 8013f60:	b00e      	add	sp, #56	; 0x38
 8013f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f66:	2bff      	cmp	r3, #255	; 0xff
 8013f68:	bf08      	it	eq
 8013f6a:	2000      	moveq	r0, #0
 8013f6c:	d1f5      	bne.n	8013f5a <uxr_delete_session_retries+0x62>
 8013f6e:	b00e      	add	sp, #56	; 0x38
 8013f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013f76:	4602      	mov	r2, r0
 8013f78:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013f7c:	a902      	add	r1, sp, #8
 8013f7e:	47a8      	blx	r5
 8013f80:	7963      	ldrb	r3, [r4, #5]
 8013f82:	fab3 f083 	clz	r0, r3
 8013f86:	0940      	lsrs	r0, r0, #5
 8013f88:	e7ea      	b.n	8013f60 <uxr_delete_session_retries+0x68>
 8013f8a:	bf00      	nop

08013f8c <uxr_create_output_best_effort_stream>:
 8013f8c:	b570      	push	{r4, r5, r6, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	4604      	mov	r4, r0
 8013f92:	460d      	mov	r5, r1
 8013f94:	4616      	mov	r6, r2
 8013f96:	f000 fae5 	bl	8014564 <uxr_session_header_offset>
 8013f9a:	4632      	mov	r2, r6
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	4629      	mov	r1, r5
 8013fa0:	f104 0008 	add.w	r0, r4, #8
 8013fa4:	b002      	add	sp, #8
 8013fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013faa:	f001 b82b 	b.w	8015004 <uxr_add_output_best_effort_buffer>
 8013fae:	bf00      	nop

08013fb0 <uxr_create_output_reliable_stream>:
 8013fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fb2:	b085      	sub	sp, #20
 8013fb4:	460d      	mov	r5, r1
 8013fb6:	4616      	mov	r6, r2
 8013fb8:	461f      	mov	r7, r3
 8013fba:	4604      	mov	r4, r0
 8013fbc:	f000 fad2 	bl	8014564 <uxr_session_header_offset>
 8013fc0:	4684      	mov	ip, r0
 8013fc2:	463b      	mov	r3, r7
 8013fc4:	4632      	mov	r2, r6
 8013fc6:	4629      	mov	r1, r5
 8013fc8:	f104 0008 	add.w	r0, r4, #8
 8013fcc:	f8cd c000 	str.w	ip, [sp]
 8013fd0:	f001 f82a 	bl	8015028 <uxr_add_output_reliable_buffer>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	2000      	movs	r0, #0
 8013fd8:	b2da      	uxtb	r2, r3
 8013fda:	f362 0007 	bfi	r0, r2, #0, #8
 8013fde:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013fe2:	f362 200f 	bfi	r0, r2, #8, #8
 8013fe6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013fea:	f362 4017 	bfi	r0, r2, #16, #8
 8013fee:	0e1b      	lsrs	r3, r3, #24
 8013ff0:	f363 601f 	bfi	r0, r3, #24, #8
 8013ff4:	b005      	add	sp, #20
 8013ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ff8 <uxr_create_input_best_effort_stream>:
 8013ff8:	b082      	sub	sp, #8
 8013ffa:	3008      	adds	r0, #8
 8013ffc:	b002      	add	sp, #8
 8013ffe:	f001 b82d 	b.w	801505c <uxr_add_input_best_effort_buffer>
 8014002:	bf00      	nop

08014004 <uxr_create_input_reliable_stream>:
 8014004:	b510      	push	{r4, lr}
 8014006:	4c0c      	ldr	r4, [pc, #48]	; (8014038 <uxr_create_input_reliable_stream+0x34>)
 8014008:	b084      	sub	sp, #16
 801400a:	9400      	str	r4, [sp, #0]
 801400c:	3008      	adds	r0, #8
 801400e:	f001 f83b 	bl	8015088 <uxr_add_input_reliable_buffer>
 8014012:	4603      	mov	r3, r0
 8014014:	2000      	movs	r0, #0
 8014016:	b2da      	uxtb	r2, r3
 8014018:	f362 0007 	bfi	r0, r2, #0, #8
 801401c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014020:	f362 200f 	bfi	r0, r2, #8, #8
 8014024:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014028:	f362 4017 	bfi	r0, r2, #16, #8
 801402c:	0e1b      	lsrs	r3, r3, #24
 801402e:	f363 601f 	bfi	r0, r3, #24, #8
 8014032:	b004      	add	sp, #16
 8014034:	bd10      	pop	{r4, pc}
 8014036:	bf00      	nop
 8014038:	08013711 	.word	0x08013711
 801403c:	00000000 	.word	0x00000000

08014040 <uxr_sync_session>:
 8014040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014042:	b093      	sub	sp, #76	; 0x4c
 8014044:	4604      	mov	r4, r0
 8014046:	460d      	mov	r5, r1
 8014048:	f000 fa8c 	bl	8014564 <uxr_session_header_offset>
 801404c:	2300      	movs	r3, #0
 801404e:	2214      	movs	r2, #20
 8014050:	9000      	str	r0, [sp, #0]
 8014052:	a905      	add	r1, sp, #20
 8014054:	a80a      	add	r0, sp, #40	; 0x28
 8014056:	f7fa fd9d 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 801405a:	2300      	movs	r3, #0
 801405c:	2208      	movs	r2, #8
 801405e:	210e      	movs	r1, #14
 8014060:	a80a      	add	r0, sp, #40	; 0x28
 8014062:	f001 f869 	bl	8015138 <uxr_buffer_submessage_header>
 8014066:	f001 f8c9 	bl	80151fc <uxr_nanos>
 801406a:	a31d      	add	r3, pc, #116	; (adr r3, 80140e0 <uxr_sync_session+0xa0>)
 801406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014070:	4606      	mov	r6, r0
 8014072:	460f      	mov	r7, r1
 8014074:	f7ed f8ec 	bl	8001250 <__aeabi_ldivmod>
 8014078:	a319      	add	r3, pc, #100	; (adr r3, 80140e0 <uxr_sync_session+0xa0>)
 801407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407e:	4684      	mov	ip, r0
 8014080:	4639      	mov	r1, r7
 8014082:	4630      	mov	r0, r6
 8014084:	f8cd c00c 	str.w	ip, [sp, #12]
 8014088:	f7ed f8e2 	bl	8001250 <__aeabi_ldivmod>
 801408c:	a903      	add	r1, sp, #12
 801408e:	a80a      	add	r0, sp, #40	; 0x28
 8014090:	9204      	str	r2, [sp, #16]
 8014092:	f002 f891 	bl	80161b8 <uxr_serialize_TIMESTAMP_Payload>
 8014096:	2200      	movs	r2, #0
 8014098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801409a:	4611      	mov	r1, r2
 801409c:	4620      	mov	r0, r4
 801409e:	f000 fa0d 	bl	80144bc <uxr_stamp_session_header>
 80140a2:	a80a      	add	r0, sp, #40	; 0x28
 80140a4:	f7fa fdb6 	bl	800ec14 <ucdr_buffer_length>
 80140a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80140aa:	4602      	mov	r2, r0
 80140ac:	e9d3 0600 	ldrd	r0, r6, [r3]
 80140b0:	a905      	add	r1, sp, #20
 80140b2:	47b0      	blx	r6
 80140b4:	f001 f886 	bl	80151c4 <uxr_millis>
 80140b8:	2300      	movs	r3, #0
 80140ba:	4606      	mov	r6, r0
 80140bc:	4629      	mov	r1, r5
 80140be:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80140c2:	e000      	b.n	80140c6 <uxr_sync_session+0x86>
 80140c4:	b950      	cbnz	r0, 80140dc <uxr_sync_session+0x9c>
 80140c6:	4620      	mov	r0, r4
 80140c8:	f7ff fdfc 	bl	8013cc4 <listen_message_reliably>
 80140cc:	f001 f87a 	bl	80151c4 <uxr_millis>
 80140d0:	1b83      	subs	r3, r0, r6
 80140d2:	1ae9      	subs	r1, r5, r3
 80140d4:	2900      	cmp	r1, #0
 80140d6:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 80140da:	dcf3      	bgt.n	80140c4 <uxr_sync_session+0x84>
 80140dc:	b013      	add	sp, #76	; 0x4c
 80140de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140e0:	3b9aca00 	.word	0x3b9aca00
 80140e4:	00000000 	.word	0x00000000

080140e8 <uxr_epoch_nanos>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	4604      	mov	r4, r0
 80140ec:	f001 f886 	bl	80151fc <uxr_nanos>
 80140f0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80140f4:	1ac0      	subs	r0, r0, r3
 80140f6:	eb61 0102 	sbc.w	r1, r1, r2
 80140fa:	bd10      	pop	{r4, pc}

080140fc <uxr_flash_output_streams>:
 80140fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014100:	7e03      	ldrb	r3, [r0, #24]
 8014102:	4604      	mov	r4, r0
 8014104:	b084      	sub	sp, #16
 8014106:	b1fb      	cbz	r3, 8014148 <uxr_flash_output_streams+0x4c>
 8014108:	f04f 0900 	mov.w	r9, #0
 801410c:	4648      	mov	r0, r9
 801410e:	f10d 0802 	add.w	r8, sp, #2
 8014112:	af03      	add	r7, sp, #12
 8014114:	ae02      	add	r6, sp, #8
 8014116:	2201      	movs	r2, #1
 8014118:	4611      	mov	r1, r2
 801411a:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801411e:	f000 fed1 	bl	8014ec4 <uxr_stream_id>
 8014122:	4684      	mov	ip, r0
 8014124:	3508      	adds	r5, #8
 8014126:	4643      	mov	r3, r8
 8014128:	4628      	mov	r0, r5
 801412a:	463a      	mov	r2, r7
 801412c:	4631      	mov	r1, r6
 801412e:	f8cd c004 	str.w	ip, [sp, #4]
 8014132:	f005 fd2f 	bl	8019b94 <uxr_prepare_best_effort_buffer_to_send>
 8014136:	2800      	cmp	r0, #0
 8014138:	d13c      	bne.n	80141b4 <uxr_flash_output_streams+0xb8>
 801413a:	7e23      	ldrb	r3, [r4, #24]
 801413c:	f109 0901 	add.w	r9, r9, #1
 8014140:	fa5f f089 	uxtb.w	r0, r9
 8014144:	4283      	cmp	r3, r0
 8014146:	d8e6      	bhi.n	8014116 <uxr_flash_output_streams+0x1a>
 8014148:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801414c:	b37b      	cbz	r3, 80141ae <uxr_flash_output_streams+0xb2>
 801414e:	f04f 0900 	mov.w	r9, #0
 8014152:	4648      	mov	r0, r9
 8014154:	f10d 0802 	add.w	r8, sp, #2
 8014158:	af03      	add	r7, sp, #12
 801415a:	ae02      	add	r6, sp, #8
 801415c:	2201      	movs	r2, #1
 801415e:	2102      	movs	r1, #2
 8014160:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014164:	f000 feae 	bl	8014ec4 <uxr_stream_id>
 8014168:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801416c:	3520      	adds	r5, #32
 801416e:	9001      	str	r0, [sp, #4]
 8014170:	e00d      	b.n	801418e <uxr_flash_output_streams+0x92>
 8014172:	4620      	mov	r0, r4
 8014174:	9b02      	ldr	r3, [sp, #8]
 8014176:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801417a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801417e:	f000 f99d 	bl	80144bc <uxr_stamp_session_header>
 8014182:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014184:	9a03      	ldr	r2, [sp, #12]
 8014186:	9902      	ldr	r1, [sp, #8]
 8014188:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801418c:	47d0      	blx	sl
 801418e:	4643      	mov	r3, r8
 8014190:	463a      	mov	r2, r7
 8014192:	4631      	mov	r1, r6
 8014194:	4628      	mov	r0, r5
 8014196:	f005 feff 	bl	8019f98 <uxr_prepare_next_reliable_buffer_to_send>
 801419a:	2800      	cmp	r0, #0
 801419c:	d1e9      	bne.n	8014172 <uxr_flash_output_streams+0x76>
 801419e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80141a2:	f109 0901 	add.w	r9, r9, #1
 80141a6:	fa5f f089 	uxtb.w	r0, r9
 80141aa:	4283      	cmp	r3, r0
 80141ac:	d8d6      	bhi.n	801415c <uxr_flash_output_streams+0x60>
 80141ae:	b004      	add	sp, #16
 80141b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141b4:	4620      	mov	r0, r4
 80141b6:	9b02      	ldr	r3, [sp, #8]
 80141b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80141bc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80141c0:	f000 f97c 	bl	80144bc <uxr_stamp_session_header>
 80141c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80141c6:	9a03      	ldr	r2, [sp, #12]
 80141c8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80141cc:	9902      	ldr	r1, [sp, #8]
 80141ce:	47a8      	blx	r5
 80141d0:	f109 0901 	add.w	r9, r9, #1
 80141d4:	7e23      	ldrb	r3, [r4, #24]
 80141d6:	fa5f f089 	uxtb.w	r0, r9
 80141da:	4283      	cmp	r3, r0
 80141dc:	d89b      	bhi.n	8014116 <uxr_flash_output_streams+0x1a>
 80141de:	e7b3      	b.n	8014148 <uxr_flash_output_streams+0x4c>

080141e0 <uxr_run_session_until_data>:
 80141e0:	b570      	push	{r4, r5, r6, lr}
 80141e2:	4604      	mov	r4, r0
 80141e4:	460d      	mov	r5, r1
 80141e6:	f000 ffed 	bl	80151c4 <uxr_millis>
 80141ea:	4606      	mov	r6, r0
 80141ec:	4620      	mov	r0, r4
 80141ee:	f7ff ff85 	bl	80140fc <uxr_flash_output_streams>
 80141f2:	2300      	movs	r3, #0
 80141f4:	4629      	mov	r1, r5
 80141f6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80141fa:	e005      	b.n	8014208 <uxr_run_session_until_data+0x28>
 80141fc:	f000 ffe2 	bl	80151c4 <uxr_millis>
 8014200:	1b81      	subs	r1, r0, r6
 8014202:	1a69      	subs	r1, r5, r1
 8014204:	2900      	cmp	r1, #0
 8014206:	dd07      	ble.n	8014218 <uxr_run_session_until_data+0x38>
 8014208:	4620      	mov	r0, r4
 801420a:	f7ff fd5b 	bl	8013cc4 <listen_message_reliably>
 801420e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8014212:	2800      	cmp	r0, #0
 8014214:	d0f2      	beq.n	80141fc <uxr_run_session_until_data+0x1c>
 8014216:	bd70      	pop	{r4, r5, r6, pc}
 8014218:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801421c:	bd70      	pop	{r4, r5, r6, pc}
 801421e:	bf00      	nop

08014220 <uxr_run_session_until_confirm_delivery>:
 8014220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014224:	4606      	mov	r6, r0
 8014226:	460d      	mov	r5, r1
 8014228:	f000 ffcc 	bl	80151c4 <uxr_millis>
 801422c:	4607      	mov	r7, r0
 801422e:	4630      	mov	r0, r6
 8014230:	f7ff ff64 	bl	80140fc <uxr_flash_output_streams>
 8014234:	2d00      	cmp	r5, #0
 8014236:	bfa8      	it	ge
 8014238:	462c      	movge	r4, r5
 801423a:	f106 0808 	add.w	r8, r6, #8
 801423e:	da09      	bge.n	8014254 <uxr_run_session_until_confirm_delivery+0x34>
 8014240:	e00d      	b.n	801425e <uxr_run_session_until_confirm_delivery+0x3e>
 8014242:	4621      	mov	r1, r4
 8014244:	4630      	mov	r0, r6
 8014246:	f7ff fd3d 	bl	8013cc4 <listen_message_reliably>
 801424a:	f000 ffbb 	bl	80151c4 <uxr_millis>
 801424e:	1bc1      	subs	r1, r0, r7
 8014250:	1a6c      	subs	r4, r5, r1
 8014252:	d404      	bmi.n	801425e <uxr_run_session_until_confirm_delivery+0x3e>
 8014254:	4640      	mov	r0, r8
 8014256:	f000 ff59 	bl	801510c <uxr_output_streams_confirmed>
 801425a:	2800      	cmp	r0, #0
 801425c:	d0f1      	beq.n	8014242 <uxr_run_session_until_confirm_delivery+0x22>
 801425e:	4640      	mov	r0, r8
 8014260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014264:	f000 bf52 	b.w	801510c <uxr_output_streams_confirmed>

08014268 <uxr_run_session_until_all_status>:
 8014268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801426e:	4688      	mov	r8, r1
 8014270:	4615      	mov	r5, r2
 8014272:	461c      	mov	r4, r3
 8014274:	4607      	mov	r7, r0
 8014276:	f7ff ff41 	bl	80140fc <uxr_flash_output_streams>
 801427a:	b126      	cbz	r6, 8014286 <uxr_run_session_until_all_status+0x1e>
 801427c:	4632      	mov	r2, r6
 801427e:	21ff      	movs	r1, #255	; 0xff
 8014280:	4620      	mov	r0, r4
 8014282:	f006 fa63 	bl	801a74c <memset>
 8014286:	e9c7 541d 	strd	r5, r4, [r7, #116]	; 0x74
 801428a:	67fe      	str	r6, [r7, #124]	; 0x7c
 801428c:	f000 ff9a 	bl	80151c4 <uxr_millis>
 8014290:	4641      	mov	r1, r8
 8014292:	4681      	mov	r9, r0
 8014294:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8014298:	f1a5 0a02 	sub.w	sl, r5, #2
 801429c:	4638      	mov	r0, r7
 801429e:	f7ff fd11 	bl	8013cc4 <listen_message_reliably>
 80142a2:	f000 ff8f 	bl	80151c4 <uxr_millis>
 80142a6:	eba0 0109 	sub.w	r1, r0, r9
 80142aa:	eba8 0101 	sub.w	r1, r8, r1
 80142ae:	b33e      	cbz	r6, 8014300 <uxr_run_session_until_all_status+0x98>
 80142b0:	4658      	mov	r0, fp
 80142b2:	465c      	mov	r4, fp
 80142b4:	2301      	movs	r3, #1
 80142b6:	e002      	b.n	80142be <uxr_run_session_until_all_status+0x56>
 80142b8:	42b3      	cmp	r3, r6
 80142ba:	d20c      	bcs.n	80142d6 <uxr_run_session_until_all_status+0x6e>
 80142bc:	3301      	adds	r3, #1
 80142be:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80142c2:	2dff      	cmp	r5, #255	; 0xff
 80142c4:	d1f8      	bne.n	80142b8 <uxr_run_session_until_all_status+0x50>
 80142c6:	42b3      	cmp	r3, r6
 80142c8:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 80142cc:	d213      	bcs.n	80142f6 <uxr_run_session_until_all_status+0x8e>
 80142ce:	2a00      	cmp	r2, #0
 80142d0:	d0f4      	beq.n	80142bc <uxr_run_session_until_all_status+0x54>
 80142d2:	2900      	cmp	r1, #0
 80142d4:	dce2      	bgt.n	801429c <uxr_run_session_until_all_status+0x34>
 80142d6:	2300      	movs	r3, #0
 80142d8:	445e      	add	r6, fp
 80142da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80142dc:	e001      	b.n	80142e2 <uxr_run_session_until_all_status+0x7a>
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d812      	bhi.n	8014308 <uxr_run_session_until_all_status+0xa0>
 80142e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80142e6:	4286      	cmp	r6, r0
 80142e8:	d1f9      	bne.n	80142de <uxr_run_session_until_all_status+0x76>
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	bf8c      	ite	hi
 80142ee:	2000      	movhi	r0, #0
 80142f0:	2001      	movls	r0, #1
 80142f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f6:	2900      	cmp	r1, #0
 80142f8:	dded      	ble.n	80142d6 <uxr_run_session_until_all_status+0x6e>
 80142fa:	2a00      	cmp	r2, #0
 80142fc:	d1ce      	bne.n	801429c <uxr_run_session_until_all_status+0x34>
 80142fe:	e7ea      	b.n	80142d6 <uxr_run_session_until_all_status+0x6e>
 8014300:	2001      	movs	r0, #1
 8014302:	67fe      	str	r6, [r7, #124]	; 0x7c
 8014304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014308:	2000      	movs	r0, #0
 801430a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801430e:	bf00      	nop

08014310 <uxr_prepare_stream_to_write_submessage>:
 8014310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014314:	4615      	mov	r5, r2
 8014316:	b082      	sub	sp, #8
 8014318:	4682      	mov	sl, r0
 801431a:	4610      	mov	r0, r2
 801431c:	461e      	mov	r6, r3
 801431e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8014322:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8014326:	9101      	str	r1, [sp, #4]
 8014328:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801432c:	f000 ff44 	bl	80151b8 <uxr_submessage_padding>
 8014330:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014334:	f105 0904 	add.w	r9, r5, #4
 8014338:	2b01      	cmp	r3, #1
 801433a:	4481      	add	r9, r0
 801433c:	d01d      	beq.n	801437a <uxr_prepare_stream_to_write_submessage+0x6a>
 801433e:	2b02      	cmp	r3, #2
 8014340:	d116      	bne.n	8014370 <uxr_prepare_stream_to_write_submessage+0x60>
 8014342:	4621      	mov	r1, r4
 8014344:	f10a 0008 	add.w	r0, sl, #8
 8014348:	f000 febe 	bl	80150c8 <uxr_get_output_reliable_stream>
 801434c:	4604      	mov	r4, r0
 801434e:	b158      	cbz	r0, 8014368 <uxr_prepare_stream_to_write_submessage+0x58>
 8014350:	4649      	mov	r1, r9
 8014352:	4632      	mov	r2, r6
 8014354:	f005 fcc2 	bl	8019cdc <uxr_prepare_reliable_buffer_to_write>
 8014358:	4604      	mov	r4, r0
 801435a:	b12c      	cbz	r4, 8014368 <uxr_prepare_stream_to_write_submessage+0x58>
 801435c:	4643      	mov	r3, r8
 801435e:	4639      	mov	r1, r7
 8014360:	4630      	mov	r0, r6
 8014362:	b2aa      	uxth	r2, r5
 8014364:	f000 fee8 	bl	8015138 <uxr_buffer_submessage_header>
 8014368:	4620      	mov	r0, r4
 801436a:	b002      	add	sp, #8
 801436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014370:	2400      	movs	r4, #0
 8014372:	4620      	mov	r0, r4
 8014374:	b002      	add	sp, #8
 8014376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437a:	4621      	mov	r1, r4
 801437c:	f10a 0008 	add.w	r0, sl, #8
 8014380:	f000 fe9a 	bl	80150b8 <uxr_get_output_best_effort_stream>
 8014384:	4604      	mov	r4, r0
 8014386:	2800      	cmp	r0, #0
 8014388:	d0ee      	beq.n	8014368 <uxr_prepare_stream_to_write_submessage+0x58>
 801438a:	4649      	mov	r1, r9
 801438c:	4632      	mov	r2, r6
 801438e:	f005 fbe1 	bl	8019b54 <uxr_prepare_best_effort_buffer_to_write>
 8014392:	4604      	mov	r4, r0
 8014394:	e7e1      	b.n	801435a <uxr_prepare_stream_to_write_submessage+0x4a>
 8014396:	bf00      	nop

08014398 <uxr_init_session_info>:
 8014398:	b430      	push	{r4, r5}
 801439a:	23ff      	movs	r3, #255	; 0xff
 801439c:	2409      	movs	r4, #9
 801439e:	0e15      	lsrs	r5, r2, #24
 80143a0:	7102      	strb	r2, [r0, #4]
 80143a2:	7001      	strb	r1, [r0, #0]
 80143a4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80143a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80143ac:	7045      	strb	r5, [r0, #1]
 80143ae:	80c4      	strh	r4, [r0, #6]
 80143b0:	7081      	strb	r1, [r0, #2]
 80143b2:	70c2      	strb	r2, [r0, #3]
 80143b4:	7143      	strb	r3, [r0, #5]
 80143b6:	bc30      	pop	{r4, r5}
 80143b8:	4770      	bx	lr
 80143ba:	bf00      	nop

080143bc <uxr_buffer_create_session>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	460c      	mov	r4, r1
 80143c0:	2101      	movs	r1, #1
 80143c2:	2300      	movs	r3, #0
 80143c4:	b088      	sub	sp, #32
 80143c6:	4d0f      	ldr	r5, [pc, #60]	; (8014404 <uxr_buffer_create_session+0x48>)
 80143c8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80143cc:	f8d0 2001 	ldr.w	r2, [r0, #1]
 80143d0:	80c1      	strh	r1, [r0, #6]
 80143d2:	9202      	str	r2, [sp, #8]
 80143d4:	7800      	ldrb	r0, [r0, #0]
 80143d6:	88aa      	ldrh	r2, [r5, #4]
 80143d8:	682e      	ldr	r6, [r5, #0]
 80143da:	f88d 000c 	strb.w	r0, [sp, #12]
 80143de:	f8ad 1004 	strh.w	r1, [sp, #4]
 80143e2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80143e6:	4619      	mov	r1, r3
 80143e8:	2210      	movs	r2, #16
 80143ea:	4620      	mov	r0, r4
 80143ec:	f88d 300d 	strb.w	r3, [sp, #13]
 80143f0:	9600      	str	r6, [sp, #0]
 80143f2:	f000 fea1 	bl	8015138 <uxr_buffer_submessage_header>
 80143f6:	4620      	mov	r0, r4
 80143f8:	4669      	mov	r1, sp
 80143fa:	f001 fd71 	bl	8015ee0 <uxr_serialize_CREATE_CLIENT_Payload>
 80143fe:	b008      	add	sp, #32
 8014400:	bd70      	pop	{r4, r5, r6, pc}
 8014402:	bf00      	nop
 8014404:	0801ce98 	.word	0x0801ce98

08014408 <uxr_buffer_delete_session>:
 8014408:	b530      	push	{r4, r5, lr}
 801440a:	2202      	movs	r2, #2
 801440c:	460c      	mov	r4, r1
 801440e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8014412:	4b0a      	ldr	r3, [pc, #40]	; (801443c <uxr_buffer_delete_session+0x34>)
 8014414:	b083      	sub	sp, #12
 8014416:	8919      	ldrh	r1, [r3, #8]
 8014418:	80c2      	strh	r2, [r0, #6]
 801441a:	2300      	movs	r3, #0
 801441c:	2204      	movs	r2, #4
 801441e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014422:	4620      	mov	r0, r4
 8014424:	2103      	movs	r1, #3
 8014426:	f8ad 5004 	strh.w	r5, [sp, #4]
 801442a:	f000 fe85 	bl	8015138 <uxr_buffer_submessage_header>
 801442e:	4620      	mov	r0, r4
 8014430:	a901      	add	r1, sp, #4
 8014432:	f001 fdef 	bl	8016014 <uxr_serialize_DELETE_Payload>
 8014436:	b003      	add	sp, #12
 8014438:	bd30      	pop	{r4, r5, pc}
 801443a:	bf00      	nop
 801443c:	0801ce98 	.word	0x0801ce98

08014440 <uxr_read_create_session_status>:
 8014440:	b510      	push	{r4, lr}
 8014442:	b088      	sub	sp, #32
 8014444:	4604      	mov	r4, r0
 8014446:	4608      	mov	r0, r1
 8014448:	a901      	add	r1, sp, #4
 801444a:	f001 fdf3 	bl	8016034 <uxr_deserialize_STATUS_AGENT_Payload>
 801444e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014452:	7163      	strb	r3, [r4, #5]
 8014454:	b008      	add	sp, #32
 8014456:	bd10      	pop	{r4, pc}

08014458 <uxr_read_delete_session_status>:
 8014458:	b510      	push	{r4, lr}
 801445a:	4604      	mov	r4, r0
 801445c:	b084      	sub	sp, #16
 801445e:	4608      	mov	r0, r1
 8014460:	a902      	add	r1, sp, #8
 8014462:	f001 fe17 	bl	8016094 <uxr_deserialize_STATUS_Payload>
 8014466:	88e3      	ldrh	r3, [r4, #6]
 8014468:	2b02      	cmp	r3, #2
 801446a:	d001      	beq.n	8014470 <uxr_read_delete_session_status+0x18>
 801446c:	b004      	add	sp, #16
 801446e:	bd10      	pop	{r4, pc}
 8014470:	f10d 000a 	add.w	r0, sp, #10
 8014474:	f7ff f80c 	bl	8013490 <uxr_object_id_from_raw>
 8014478:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801447c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014480:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014484:	b29b      	uxth	r3, r3
 8014486:	2b02      	cmp	r3, #2
 8014488:	bf04      	itt	eq
 801448a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801448e:	7163      	strbeq	r3, [r4, #5]
 8014490:	b004      	add	sp, #16
 8014492:	bd10      	pop	{r4, pc}

08014494 <uxr_stamp_create_session_header>:
 8014494:	b510      	push	{r4, lr}
 8014496:	4604      	mov	r4, r0
 8014498:	b08a      	sub	sp, #40	; 0x28
 801449a:	a802      	add	r0, sp, #8
 801449c:	2208      	movs	r2, #8
 801449e:	f7fa fb8b 	bl	800ebb8 <ucdr_init_buffer>
 80144a2:	2300      	movs	r3, #0
 80144a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a8:	461a      	mov	r2, r3
 80144aa:	a802      	add	r0, sp, #8
 80144ac:	9400      	str	r4, [sp, #0]
 80144ae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80144b2:	f001 f841 	bl	8015538 <uxr_serialize_message_header>
 80144b6:	b00a      	add	sp, #40	; 0x28
 80144b8:	bd10      	pop	{r4, pc}
 80144ba:	bf00      	nop

080144bc <uxr_stamp_session_header>:
 80144bc:	b570      	push	{r4, r5, r6, lr}
 80144be:	4604      	mov	r4, r0
 80144c0:	460d      	mov	r5, r1
 80144c2:	4616      	mov	r6, r2
 80144c4:	b08a      	sub	sp, #40	; 0x28
 80144c6:	4619      	mov	r1, r3
 80144c8:	a802      	add	r0, sp, #8
 80144ca:	2208      	movs	r2, #8
 80144cc:	f7fa fb74 	bl	800ebb8 <ucdr_init_buffer>
 80144d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144d4:	4633      	mov	r3, r6
 80144d6:	462a      	mov	r2, r5
 80144d8:	a802      	add	r0, sp, #8
 80144da:	9400      	str	r4, [sp, #0]
 80144dc:	f001 f82c 	bl	8015538 <uxr_serialize_message_header>
 80144e0:	b00a      	add	sp, #40	; 0x28
 80144e2:	bd70      	pop	{r4, r5, r6, pc}

080144e4 <uxr_read_session_header>:
 80144e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144e8:	4607      	mov	r7, r0
 80144ea:	b084      	sub	sp, #16
 80144ec:	4608      	mov	r0, r1
 80144ee:	460c      	mov	r4, r1
 80144f0:	4615      	mov	r5, r2
 80144f2:	461e      	mov	r6, r3
 80144f4:	f7fa fb92 	bl	800ec1c <ucdr_buffer_remaining>
 80144f8:	2808      	cmp	r0, #8
 80144fa:	d803      	bhi.n	8014504 <uxr_read_session_header+0x20>
 80144fc:	2000      	movs	r0, #0
 80144fe:	b004      	add	sp, #16
 8014500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014504:	f10d 080c 	add.w	r8, sp, #12
 8014508:	4633      	mov	r3, r6
 801450a:	462a      	mov	r2, r5
 801450c:	4620      	mov	r0, r4
 801450e:	f8cd 8000 	str.w	r8, [sp]
 8014512:	f10d 010b 	add.w	r1, sp, #11
 8014516:	f001 f82d 	bl	8015574 <uxr_deserialize_message_header>
 801451a:	783a      	ldrb	r2, [r7, #0]
 801451c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014520:	4293      	cmp	r3, r2
 8014522:	d1eb      	bne.n	80144fc <uxr_read_session_header+0x18>
 8014524:	061b      	lsls	r3, r3, #24
 8014526:	d41b      	bmi.n	8014560 <uxr_read_session_header+0x7c>
 8014528:	f898 2000 	ldrb.w	r2, [r8]
 801452c:	787b      	ldrb	r3, [r7, #1]
 801452e:	429a      	cmp	r2, r3
 8014530:	d003      	beq.n	801453a <uxr_read_session_header+0x56>
 8014532:	2001      	movs	r0, #1
 8014534:	f080 0001 	eor.w	r0, r0, #1
 8014538:	e7e1      	b.n	80144fe <uxr_read_session_header+0x1a>
 801453a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801453e:	78bb      	ldrb	r3, [r7, #2]
 8014540:	1cb9      	adds	r1, r7, #2
 8014542:	429a      	cmp	r2, r3
 8014544:	d1f5      	bne.n	8014532 <uxr_read_session_header+0x4e>
 8014546:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801454a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801454e:	429a      	cmp	r2, r3
 8014550:	d1ef      	bne.n	8014532 <uxr_read_session_header+0x4e>
 8014552:	784b      	ldrb	r3, [r1, #1]
 8014554:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014558:	429a      	cmp	r2, r3
 801455a:	d1ea      	bne.n	8014532 <uxr_read_session_header+0x4e>
 801455c:	2000      	movs	r0, #0
 801455e:	e7e9      	b.n	8014534 <uxr_read_session_header+0x50>
 8014560:	2001      	movs	r0, #1
 8014562:	e7cc      	b.n	80144fe <uxr_read_session_header+0x1a>

08014564 <uxr_session_header_offset>:
 8014564:	f990 3000 	ldrsb.w	r3, [r0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	bfac      	ite	ge
 801456c:	2008      	movge	r0, #8
 801456e:	2004      	movlt	r0, #4
 8014570:	4770      	bx	lr
 8014572:	bf00      	nop

08014574 <uxr_init_base_object_request>:
 8014574:	b530      	push	{r4, r5, lr}
 8014576:	f64f 75f4 	movw	r5, #65524	; 0xfff4
 801457a:	88c3      	ldrh	r3, [r0, #6]
 801457c:	b083      	sub	sp, #12
 801457e:	f1a3 040a 	sub.w	r4, r3, #10
 8014582:	b2a4      	uxth	r4, r4
 8014584:	42ac      	cmp	r4, r5
 8014586:	9101      	str	r1, [sp, #4]
 8014588:	d80e      	bhi.n	80145a8 <uxr_init_base_object_request+0x34>
 801458a:	3301      	adds	r3, #1
 801458c:	b29c      	uxth	r4, r3
 801458e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8014592:	b2db      	uxtb	r3, r3
 8014594:	80c4      	strh	r4, [r0, #6]
 8014596:	1c91      	adds	r1, r2, #2
 8014598:	9801      	ldr	r0, [sp, #4]
 801459a:	7015      	strb	r5, [r2, #0]
 801459c:	7053      	strb	r3, [r2, #1]
 801459e:	f7fe ff8b 	bl	80134b8 <uxr_object_id_to_raw>
 80145a2:	4620      	mov	r0, r4
 80145a4:	b003      	add	sp, #12
 80145a6:	bd30      	pop	{r4, r5, pc}
 80145a8:	230a      	movs	r3, #10
 80145aa:	2500      	movs	r5, #0
 80145ac:	461c      	mov	r4, r3
 80145ae:	e7f1      	b.n	8014594 <uxr_init_base_object_request+0x20>

080145b0 <uxr_parse_base_object_request>:
 80145b0:	b570      	push	{r4, r5, r6, lr}
 80145b2:	4604      	mov	r4, r0
 80145b4:	3002      	adds	r0, #2
 80145b6:	460d      	mov	r5, r1
 80145b8:	4616      	mov	r6, r2
 80145ba:	f7fe ff69 	bl	8013490 <uxr_object_id_from_raw>
 80145be:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80145c2:	8028      	strh	r0, [r5, #0]
 80145c4:	806b      	strh	r3, [r5, #2]
 80145c6:	7822      	ldrb	r2, [r4, #0]
 80145c8:	7863      	ldrb	r3, [r4, #1]
 80145ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80145ce:	8033      	strh	r3, [r6, #0]
 80145d0:	bd70      	pop	{r4, r5, r6, pc}
 80145d2:	bf00      	nop

080145d4 <uxr_init_framing_io>:
 80145d4:	2300      	movs	r3, #0
 80145d6:	7041      	strb	r1, [r0, #1]
 80145d8:	7003      	strb	r3, [r0, #0]
 80145da:	8583      	strh	r3, [r0, #44]	; 0x2c
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop

080145e0 <uxr_write_framed_msg>:
 80145e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80145e8:	4604      	mov	r4, r0
 80145ea:	7840      	ldrb	r0, [r0, #1]
 80145ec:	b085      	sub	sp, #20
 80145ee:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 80145f2:	2d01      	cmp	r5, #1
 80145f4:	460e      	mov	r6, r1
 80145f6:	4617      	mov	r7, r2
 80145f8:	469b      	mov	fp, r3
 80145fa:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80145fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014602:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
 8014606:	f240 8131 	bls.w	801486c <uxr_write_framed_msg+0x28c>
 801460a:	2302      	movs	r3, #2
 801460c:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8014610:	2a01      	cmp	r2, #1
 8014612:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8014616:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801461a:	f240 8092 	bls.w	8014742 <uxr_write_framed_msg+0x162>
 801461e:	2303      	movs	r3, #3
 8014620:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014622:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8014626:	b2d0      	uxtb	r0, r2
 8014628:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801462c:	2a01      	cmp	r2, #1
 801462e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014632:	f240 809c 	bls.w	801476e <uxr_write_framed_msg+0x18e>
 8014636:	18e2      	adds	r2, r4, r3
 8014638:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801463c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801463e:	3301      	adds	r3, #1
 8014640:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8014644:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8014648:	2a01      	cmp	r2, #1
 801464a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801464e:	f240 80a1 	bls.w	8014794 <uxr_write_framed_msg+0x1b4>
 8014652:	1c5a      	adds	r2, r3, #1
 8014654:	4423      	add	r3, r4
 8014656:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801465a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801465c:	b2d2      	uxtb	r2, r2
 801465e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014662:	2b00      	cmp	r3, #0
 8014664:	f000 80a6 	beq.w	80147b4 <uxr_write_framed_msg+0x1d4>
 8014668:	f04f 0a00 	mov.w	sl, #0
 801466c:	46d1      	mov	r9, sl
 801466e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8014672:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014676:	2901      	cmp	r1, #1
 8014678:	f240 80bf 	bls.w	80147fa <uxr_write_framed_msg+0x21a>
 801467c:	2a29      	cmp	r2, #41	; 0x29
 801467e:	f200 809c 	bhi.w	80147ba <uxr_write_framed_msg+0x1da>
 8014682:	1c50      	adds	r0, r2, #1
 8014684:	18a1      	adds	r1, r4, r2
 8014686:	b2c2      	uxtb	r2, r0
 8014688:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 801468c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014690:	ea8a 0303 	eor.w	r3, sl, r3
 8014694:	4988      	ldr	r1, [pc, #544]	; (80148b8 <uxr_write_framed_msg+0x2d8>)
 8014696:	b2db      	uxtb	r3, r3
 8014698:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801469c:	f109 0901 	add.w	r9, r9, #1
 80146a0:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 80146a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146a6:	454b      	cmp	r3, r9
 80146a8:	d8e1      	bhi.n	801466e <uxr_write_framed_msg+0x8e>
 80146aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80146ae:	fa5f f98a 	uxtb.w	r9, sl
 80146b2:	9301      	str	r3, [sp, #4]
 80146b4:	f04f 0b00 	mov.w	fp, #0
 80146b8:	f88d 900c 	strb.w	r9, [sp, #12]
 80146bc:	f88d 300d 	strb.w	r3, [sp, #13]
 80146c0:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 80146c4:	fa5f f18a 	uxtb.w	r1, sl
 80146c8:	2901      	cmp	r1, #1
 80146ca:	d921      	bls.n	8014710 <uxr_write_framed_msg+0x130>
 80146cc:	2a29      	cmp	r2, #41	; 0x29
 80146ce:	f240 80a6 	bls.w	801481e <uxr_write_framed_msg+0x23e>
 80146d2:	2500      	movs	r5, #0
 80146d4:	e000      	b.n	80146d8 <uxr_write_framed_msg+0xf8>
 80146d6:	b160      	cbz	r0, 80146f2 <uxr_write_framed_msg+0x112>
 80146d8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80146dc:	1b52      	subs	r2, r2, r5
 80146de:	4643      	mov	r3, r8
 80146e0:	4638      	mov	r0, r7
 80146e2:	4421      	add	r1, r4
 80146e4:	47b0      	blx	r6
 80146e6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80146ea:	4405      	add	r5, r0
 80146ec:	4295      	cmp	r5, r2
 80146ee:	d3f2      	bcc.n	80146d6 <uxr_write_framed_msg+0xf6>
 80146f0:	d003      	beq.n	80146fa <uxr_write_framed_msg+0x11a>
 80146f2:	2000      	movs	r0, #0
 80146f4:	b005      	add	sp, #20
 80146f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fa:	f04f 0300 	mov.w	r3, #0
 80146fe:	fa5f f18a 	uxtb.w	r1, sl
 8014702:	2901      	cmp	r1, #1
 8014704:	f04f 0200 	mov.w	r2, #0
 8014708:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801470c:	f200 8087 	bhi.w	801481e <uxr_write_framed_msg+0x23e>
 8014710:	1c51      	adds	r1, r2, #1
 8014712:	b2c9      	uxtb	r1, r1
 8014714:	2929      	cmp	r1, #41	; 0x29
 8014716:	d8dc      	bhi.n	80146d2 <uxr_write_framed_msg+0xf2>
 8014718:	1c91      	adds	r1, r2, #2
 801471a:	18a0      	adds	r0, r4, r2
 801471c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014720:	b2ca      	uxtb	r2, r1
 8014722:	4659      	mov	r1, fp
 8014724:	f089 0920 	eor.w	r9, r9, #32
 8014728:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 801472c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014730:	f04f 0b01 	mov.w	fp, #1
 8014734:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014738:	2900      	cmp	r1, #0
 801473a:	d17c      	bne.n	8014836 <uxr_write_framed_msg+0x256>
 801473c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014740:	e7be      	b.n	80146c0 <uxr_write_framed_msg+0xe0>
 8014742:	461a      	mov	r2, r3
 8014744:	2503      	movs	r5, #3
 8014746:	2304      	movs	r3, #4
 8014748:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801474c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801474e:	4422      	add	r2, r4
 8014750:	b2c0      	uxtb	r0, r0
 8014752:	f882 c038 	strb.w	ip, [r2, #56]	; 0x38
 8014756:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801475a:	4425      	add	r5, r4
 801475c:	f081 0120 	eor.w	r1, r1, #32
 8014760:	2a01      	cmp	r2, #1
 8014762:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
 8014766:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801476a:	f63f af64 	bhi.w	8014636 <uxr_write_framed_msg+0x56>
 801476e:	217d      	movs	r1, #125	; 0x7d
 8014770:	18e2      	adds	r2, r4, r3
 8014772:	f080 0020 	eor.w	r0, r0, #32
 8014776:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 801477a:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 801477e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014780:	3302      	adds	r3, #2
 8014782:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8014786:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 801478a:	2a01      	cmp	r2, #1
 801478c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014790:	f63f af5f 	bhi.w	8014652 <uxr_write_framed_msg+0x72>
 8014794:	257d      	movs	r5, #125	; 0x7d
 8014796:	18e0      	adds	r0, r4, r3
 8014798:	3302      	adds	r3, #2
 801479a:	b2da      	uxtb	r2, r3
 801479c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801479e:	f081 0120 	eor.w	r1, r1, #32
 80147a2:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80147a6:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80147aa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	f47f af5a 	bne.w	8014668 <uxr_write_framed_msg+0x88>
 80147b4:	4699      	mov	r9, r3
 80147b6:	9301      	str	r3, [sp, #4]
 80147b8:	e77c      	b.n	80146b4 <uxr_write_framed_msg+0xd4>
 80147ba:	2500      	movs	r5, #0
 80147bc:	e001      	b.n	80147c2 <uxr_write_framed_msg+0x1e2>
 80147be:	2800      	cmp	r0, #0
 80147c0:	d097      	beq.n	80146f2 <uxr_write_framed_msg+0x112>
 80147c2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80147c6:	1b52      	subs	r2, r2, r5
 80147c8:	4643      	mov	r3, r8
 80147ca:	4638      	mov	r0, r7
 80147cc:	4421      	add	r1, r4
 80147ce:	47b0      	blx	r6
 80147d0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80147d4:	4405      	add	r5, r0
 80147d6:	4295      	cmp	r5, r2
 80147d8:	d3f1      	bcc.n	80147be <uxr_write_framed_msg+0x1de>
 80147da:	d18a      	bne.n	80146f2 <uxr_write_framed_msg+0x112>
 80147dc:	f04f 0300 	mov.w	r3, #0
 80147e0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80147e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147e6:	454b      	cmp	r3, r9
 80147e8:	d95f      	bls.n	80148aa <uxr_write_framed_msg+0x2ca>
 80147ea:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80147ee:	2200      	movs	r2, #0
 80147f0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80147f4:	2901      	cmp	r1, #1
 80147f6:	f63f af41 	bhi.w	801467c <uxr_write_framed_msg+0x9c>
 80147fa:	1c51      	adds	r1, r2, #1
 80147fc:	b2c9      	uxtb	r1, r1
 80147fe:	2929      	cmp	r1, #41	; 0x29
 8014800:	d8db      	bhi.n	80147ba <uxr_write_framed_msg+0x1da>
 8014802:	1c95      	adds	r5, r2, #2
 8014804:	18a0      	adds	r0, r4, r2
 8014806:	b2ea      	uxtb	r2, r5
 8014808:	f04f 057d 	mov.w	r5, #125	; 0x7d
 801480c:	f083 0120 	eor.w	r1, r3, #32
 8014810:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8014814:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8014818:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801481c:	e738      	b.n	8014690 <uxr_write_framed_msg+0xb0>
 801481e:	4659      	mov	r1, fp
 8014820:	1c55      	adds	r5, r2, #1
 8014822:	18a0      	adds	r0, r4, r2
 8014824:	b2ea      	uxtb	r2, r5
 8014826:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801482a:	f04f 0b01 	mov.w	fp, #1
 801482e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014832:	2900      	cmp	r1, #0
 8014834:	d082      	beq.n	801473c <uxr_write_framed_msg+0x15c>
 8014836:	2500      	movs	r5, #0
 8014838:	e002      	b.n	8014840 <uxr_write_framed_msg+0x260>
 801483a:	2800      	cmp	r0, #0
 801483c:	f43f af59 	beq.w	80146f2 <uxr_write_framed_msg+0x112>
 8014840:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014844:	1b52      	subs	r2, r2, r5
 8014846:	4643      	mov	r3, r8
 8014848:	4638      	mov	r0, r7
 801484a:	4421      	add	r1, r4
 801484c:	47b0      	blx	r6
 801484e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014852:	4405      	add	r5, r0
 8014854:	4295      	cmp	r5, r2
 8014856:	d3f0      	bcc.n	801483a <uxr_write_framed_msg+0x25a>
 8014858:	f47f af4b 	bne.w	80146f2 <uxr_write_framed_msg+0x112>
 801485c:	2300      	movs	r3, #0
 801485e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014860:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014864:	b290      	uxth	r0, r2
 8014866:	b005      	add	sp, #20
 8014868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801486c:	2303      	movs	r3, #3
 801486e:	257d      	movs	r5, #125	; 0x7d
 8014870:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8014874:	f080 0020 	eor.w	r0, r0, #32
 8014878:	2a01      	cmp	r2, #1
 801487a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801487e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014882:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014886:	d803      	bhi.n	8014890 <uxr_write_framed_msg+0x2b0>
 8014888:	461a      	mov	r2, r3
 801488a:	2504      	movs	r5, #4
 801488c:	2305      	movs	r3, #5
 801488e:	e75b      	b.n	8014748 <uxr_write_framed_msg+0x168>
 8014890:	2304      	movs	r3, #4
 8014892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014894:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8014898:	b2d0      	uxtb	r0, r2
 801489a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801489e:	2a01      	cmp	r2, #1
 80148a0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80148a4:	f63f aec7 	bhi.w	8014636 <uxr_write_framed_msg+0x56>
 80148a8:	e761      	b.n	801476e <uxr_write_framed_msg+0x18e>
 80148aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80148ae:	2200      	movs	r2, #0
 80148b0:	fa5f f98a 	uxtb.w	r9, sl
 80148b4:	9301      	str	r3, [sp, #4]
 80148b6:	e6fd      	b.n	80146b4 <uxr_write_framed_msg+0xd4>
 80148b8:	0801d2b4 	.word	0x0801d2b4

080148bc <uxr_framing_read_transport>:
 80148bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c0:	4604      	mov	r4, r0
 80148c2:	b083      	sub	sp, #12
 80148c4:	461f      	mov	r7, r3
 80148c6:	4689      	mov	r9, r1
 80148c8:	4692      	mov	sl, r2
 80148ca:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80148ce:	f000 fc79 	bl	80151c4 <uxr_millis>
 80148d2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80148d6:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80148da:	4680      	mov	r8, r0
 80148dc:	42b3      	cmp	r3, r6
 80148de:	d060      	beq.n	80149a2 <uxr_framing_read_transport+0xe6>
 80148e0:	d81c      	bhi.n	801491c <uxr_framing_read_transport+0x60>
 80148e2:	1e75      	subs	r5, r6, #1
 80148e4:	2600      	movs	r6, #0
 80148e6:	1aed      	subs	r5, r5, r3
 80148e8:	b2ed      	uxtb	r5, r5
 80148ea:	455d      	cmp	r5, fp
 80148ec:	d81f      	bhi.n	801492e <uxr_framing_read_transport+0x72>
 80148ee:	19ab      	adds	r3, r5, r6
 80148f0:	455b      	cmp	r3, fp
 80148f2:	bf84      	itt	hi
 80148f4:	ebab 0605 	subhi.w	r6, fp, r5
 80148f8:	b2f6      	uxtbhi	r6, r6
 80148fa:	b9ed      	cbnz	r5, 8014938 <uxr_framing_read_transport+0x7c>
 80148fc:	f04f 0b00 	mov.w	fp, #0
 8014900:	f000 fc60 	bl	80151c4 <uxr_millis>
 8014904:	eba0 0808 	sub.w	r8, r0, r8
 8014908:	4658      	mov	r0, fp
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	eba3 0308 	sub.w	r3, r3, r8
 8014910:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014914:	603b      	str	r3, [r7, #0]
 8014916:	b003      	add	sp, #12
 8014918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801491c:	2e00      	cmp	r6, #0
 801491e:	d048      	beq.n	80149b2 <uxr_framing_read_transport+0xf6>
 8014920:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8014924:	b2ed      	uxtb	r5, r5
 8014926:	3e01      	subs	r6, #1
 8014928:	455d      	cmp	r5, fp
 801492a:	b2f6      	uxtb	r6, r6
 801492c:	d9df      	bls.n	80148ee <uxr_framing_read_transport+0x32>
 801492e:	fa5f f58b 	uxtb.w	r5, fp
 8014932:	2600      	movs	r6, #0
 8014934:	2d00      	cmp	r5, #0
 8014936:	d0e1      	beq.n	80148fc <uxr_framing_read_transport+0x40>
 8014938:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801493c:	3102      	adds	r1, #2
 801493e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014940:	462a      	mov	r2, r5
 8014942:	9300      	str	r3, [sp, #0]
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	4421      	add	r1, r4
 8014948:	4650      	mov	r0, sl
 801494a:	47c8      	blx	r9
 801494c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014950:	4a1b      	ldr	r2, [pc, #108]	; (80149c0 <uxr_framing_read_transport+0x104>)
 8014952:	4403      	add	r3, r0
 8014954:	0859      	lsrs	r1, r3, #1
 8014956:	fba2 2101 	umull	r2, r1, r2, r1
 801495a:	222a      	movs	r2, #42	; 0x2a
 801495c:	0889      	lsrs	r1, r1, #2
 801495e:	fb02 3111 	mls	r1, r2, r1, r3
 8014962:	4683      	mov	fp, r0
 8014964:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8014968:	2800      	cmp	r0, #0
 801496a:	d0c7      	beq.n	80148fc <uxr_framing_read_transport+0x40>
 801496c:	42a8      	cmp	r0, r5
 801496e:	d1c7      	bne.n	8014900 <uxr_framing_read_transport+0x44>
 8014970:	b31e      	cbz	r6, 80149ba <uxr_framing_read_transport+0xfe>
 8014972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014974:	3102      	adds	r1, #2
 8014976:	4632      	mov	r2, r6
 8014978:	4421      	add	r1, r4
 801497a:	9300      	str	r3, [sp, #0]
 801497c:	4650      	mov	r0, sl
 801497e:	2300      	movs	r3, #0
 8014980:	47c8      	blx	r9
 8014982:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014986:	4a0e      	ldr	r2, [pc, #56]	; (80149c0 <uxr_framing_read_transport+0x104>)
 8014988:	1819      	adds	r1, r3, r0
 801498a:	084b      	lsrs	r3, r1, #1
 801498c:	fba2 2303 	umull	r2, r3, r2, r3
 8014990:	222a      	movs	r2, #42	; 0x2a
 8014992:	089b      	lsrs	r3, r3, #2
 8014994:	fb02 1313 	mls	r3, r2, r3, r1
 8014998:	eb00 0b05 	add.w	fp, r0, r5
 801499c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80149a0:	e7ae      	b.n	8014900 <uxr_framing_read_transport+0x44>
 80149a2:	2600      	movs	r6, #0
 80149a4:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80149a8:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80149aa:	d9c0      	bls.n	801492e <uxr_framing_read_transport+0x72>
 80149ac:	2102      	movs	r1, #2
 80149ae:	2529      	movs	r5, #41	; 0x29
 80149b0:	e7c5      	b.n	801493e <uxr_framing_read_transport+0x82>
 80149b2:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80149b6:	b2ed      	uxtb	r5, r5
 80149b8:	e797      	b.n	80148ea <uxr_framing_read_transport+0x2e>
 80149ba:	46ab      	mov	fp, r5
 80149bc:	e7a0      	b.n	8014900 <uxr_framing_read_transport+0x44>
 80149be:	bf00      	nop
 80149c0:	30c30c31 	.word	0x30c30c31

080149c4 <uxr_read_framed_msg>:
 80149c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149c8:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80149cc:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80149d0:	4604      	mov	r4, r0
 80149d2:	42ae      	cmp	r6, r5
 80149d4:	461f      	mov	r7, r3
 80149d6:	4689      	mov	r9, r1
 80149d8:	4692      	mov	sl, r2
 80149da:	b083      	sub	sp, #12
 80149dc:	f000 8176 	beq.w	8014ccc <uxr_read_framed_msg+0x308>
 80149e0:	7823      	ldrb	r3, [r4, #0]
 80149e2:	4ec7      	ldr	r6, [pc, #796]	; (8014d00 <uxr_read_framed_msg+0x33c>)
 80149e4:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8014d04 <uxr_read_framed_msg+0x340>
 80149e8:	2b07      	cmp	r3, #7
 80149ea:	d8fd      	bhi.n	80149e8 <uxr_read_framed_msg+0x24>
 80149ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80149f0:	00ee010d 	.word	0x00ee010d
 80149f4:	00b100ce 	.word	0x00b100ce
 80149f8:	004d0088 	.word	0x004d0088
 80149fc:	00080030 	.word	0x00080030
 8014a00:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014a04:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	f000 813a 	beq.w	8014c82 <uxr_read_framed_msg+0x2be>
 8014a0e:	18e1      	adds	r1, r4, r3
 8014a10:	7889      	ldrb	r1, [r1, #2]
 8014a12:	202a      	movs	r0, #42	; 0x2a
 8014a14:	297d      	cmp	r1, #125	; 0x7d
 8014a16:	f000 81b0 	beq.w	8014d7a <uxr_read_framed_msg+0x3b6>
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	085a      	lsrs	r2, r3, #1
 8014a1e:	fba6 5202 	umull	r5, r2, r6, r2
 8014a22:	0892      	lsrs	r2, r2, #2
 8014a24:	fb00 3312 	mls	r3, r0, r2, r3
 8014a28:	297e      	cmp	r1, #126	; 0x7e
 8014a2a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014a2e:	f000 8244 	beq.w	8014eba <uxr_read_framed_msg+0x4f6>
 8014a32:	2000      	movs	r0, #0
 8014a34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014a36:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014a38:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014a42:	7020      	strb	r0, [r4, #0]
 8014a44:	f000 8176 	beq.w	8014d34 <uxr_read_framed_msg+0x370>
 8014a48:	2000      	movs	r0, #0
 8014a4a:	b003      	add	sp, #12
 8014a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a50:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014a54:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	f000 8121 	beq.w	8014ca0 <uxr_read_framed_msg+0x2dc>
 8014a5e:	18e1      	adds	r1, r4, r3
 8014a60:	7889      	ldrb	r1, [r1, #2]
 8014a62:	202a      	movs	r0, #42	; 0x2a
 8014a64:	297d      	cmp	r1, #125	; 0x7d
 8014a66:	f000 816d 	beq.w	8014d44 <uxr_read_framed_msg+0x380>
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	085a      	lsrs	r2, r3, #1
 8014a6e:	fba6 5202 	umull	r5, r2, r6, r2
 8014a72:	0892      	lsrs	r2, r2, #2
 8014a74:	fb00 3312 	mls	r3, r0, r2, r3
 8014a78:	297e      	cmp	r1, #126	; 0x7e
 8014a7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014a7e:	f000 820c 	beq.w	8014e9a <uxr_read_framed_msg+0x4d6>
 8014a82:	2307      	movs	r3, #7
 8014a84:	86a1      	strh	r1, [r4, #52]	; 0x34
 8014a86:	7023      	strb	r3, [r4, #0]
 8014a88:	e7ae      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014a8a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014a8c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014a90:	459e      	cmp	lr, r3
 8014a92:	d930      	bls.n	8014af6 <uxr_read_framed_msg+0x132>
 8014a94:	252a      	movs	r5, #42	; 0x2a
 8014a96:	e021      	b.n	8014adc <uxr_read_framed_msg+0x118>
 8014a98:	7889      	ldrb	r1, [r1, #2]
 8014a9a:	297d      	cmp	r1, #125	; 0x7d
 8014a9c:	f000 80d1 	beq.w	8014c42 <uxr_read_framed_msg+0x27e>
 8014aa0:	fba6 2000 	umull	r2, r0, r6, r0
 8014aa4:	0880      	lsrs	r0, r0, #2
 8014aa6:	fb05 c010 	mls	r0, r5, r0, ip
 8014aaa:	297e      	cmp	r1, #126	; 0x7e
 8014aac:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8014ab0:	f000 80c4 	beq.w	8014c3c <uxr_read_framed_msg+0x278>
 8014ab4:	54f9      	strb	r1, [r7, r3]
 8014ab6:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8014aba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014abc:	ea8c 0001 	eor.w	r0, ip, r1
 8014ac0:	b2c0      	uxtb	r0, r0
 8014ac2:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
 8014ac6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014aca:	3301      	adds	r3, #1
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 8014ad2:	4573      	cmp	r3, lr
 8014ad4:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014ad6:	8663      	strh	r3, [r4, #50]	; 0x32
 8014ad8:	f080 8116 	bcs.w	8014d08 <uxr_read_framed_msg+0x344>
 8014adc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014ae0:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 8014ae4:	f102 0c01 	add.w	ip, r2, #1
 8014ae8:	4593      	cmp	fp, r2
 8014aea:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8014aee:	eb04 0102 	add.w	r1, r4, r2
 8014af2:	d1d1      	bne.n	8014a98 <uxr_read_framed_msg+0xd4>
 8014af4:	459e      	cmp	lr, r3
 8014af6:	f040 810b 	bne.w	8014d10 <uxr_read_framed_msg+0x34c>
 8014afa:	2306      	movs	r3, #6
 8014afc:	7023      	strb	r3, [r4, #0]
 8014afe:	e773      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014b00:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014b04:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	f000 80ba 	beq.w	8014c82 <uxr_read_framed_msg+0x2be>
 8014b0e:	18e1      	adds	r1, r4, r3
 8014b10:	7889      	ldrb	r1, [r1, #2]
 8014b12:	202a      	movs	r0, #42	; 0x2a
 8014b14:	297d      	cmp	r1, #125	; 0x7d
 8014b16:	f000 818a 	beq.w	8014e2e <uxr_read_framed_msg+0x46a>
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	085a      	lsrs	r2, r3, #1
 8014b1e:	fba6 5202 	umull	r5, r2, r6, r2
 8014b22:	0892      	lsrs	r2, r2, #2
 8014b24:	fb00 3212 	mls	r2, r0, r2, r3
 8014b28:	297e      	cmp	r1, #126	; 0x7e
 8014b2a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014b2e:	f000 81c4 	beq.w	8014eba <uxr_read_framed_msg+0x4f6>
 8014b32:	2000      	movs	r0, #0
 8014b34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014b36:	8660      	strh	r0, [r4, #50]	; 0x32
 8014b38:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014b3e:	b29b      	uxth	r3, r3
 8014b40:	428b      	cmp	r3, r1
 8014b42:	8623      	strh	r3, [r4, #48]	; 0x30
 8014b44:	86e0      	strh	r0, [r4, #54]	; 0x36
 8014b46:	f240 80d8 	bls.w	8014cfa <uxr_read_framed_msg+0x336>
 8014b4a:	7020      	strb	r0, [r4, #0]
 8014b4c:	b003      	add	sp, #12
 8014b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b52:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014b56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	f000 80a0 	beq.w	8014ca0 <uxr_read_framed_msg+0x2dc>
 8014b60:	18e1      	adds	r1, r4, r3
 8014b62:	7889      	ldrb	r1, [r1, #2]
 8014b64:	202a      	movs	r0, #42	; 0x2a
 8014b66:	297d      	cmp	r1, #125	; 0x7d
 8014b68:	f000 817c 	beq.w	8014e64 <uxr_read_framed_msg+0x4a0>
 8014b6c:	3301      	adds	r3, #1
 8014b6e:	085a      	lsrs	r2, r3, #1
 8014b70:	fba6 5202 	umull	r5, r2, r6, r2
 8014b74:	0892      	lsrs	r2, r2, #2
 8014b76:	fb00 3312 	mls	r3, r0, r2, r3
 8014b7a:	297e      	cmp	r1, #126	; 0x7e
 8014b7c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014b80:	f000 818b 	beq.w	8014e9a <uxr_read_framed_msg+0x4d6>
 8014b84:	2304      	movs	r3, #4
 8014b86:	8621      	strh	r1, [r4, #48]	; 0x30
 8014b88:	7023      	strb	r3, [r4, #0]
 8014b8a:	e72d      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014b8c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014b90:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014b94:	4291      	cmp	r1, r2
 8014b96:	f000 80ae 	beq.w	8014cf6 <uxr_read_framed_msg+0x332>
 8014b9a:	18a3      	adds	r3, r4, r2
 8014b9c:	7898      	ldrb	r0, [r3, #2]
 8014b9e:	287d      	cmp	r0, #125	; 0x7d
 8014ba0:	f000 8107 	beq.w	8014db2 <uxr_read_framed_msg+0x3ee>
 8014ba4:	232a      	movs	r3, #42	; 0x2a
 8014ba6:	3201      	adds	r2, #1
 8014ba8:	0851      	lsrs	r1, r2, #1
 8014baa:	fba6 5101 	umull	r5, r1, r6, r1
 8014bae:	0889      	lsrs	r1, r1, #2
 8014bb0:	fb03 2211 	mls	r2, r3, r1, r2
 8014bb4:	287e      	cmp	r0, #126	; 0x7e
 8014bb6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014bba:	f000 8180 	beq.w	8014ebe <uxr_read_framed_msg+0x4fa>
 8014bbe:	7863      	ldrb	r3, [r4, #1]
 8014bc0:	4283      	cmp	r3, r0
 8014bc2:	bf0c      	ite	eq
 8014bc4:	2303      	moveq	r3, #3
 8014bc6:	2300      	movne	r3, #0
 8014bc8:	7023      	strb	r3, [r4, #0]
 8014bca:	e70d      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014bd2:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8014bd6:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014bda:	4288      	cmp	r0, r1
 8014bdc:	d062      	beq.n	8014ca4 <uxr_read_framed_msg+0x2e0>
 8014bde:	1862      	adds	r2, r4, r1
 8014be0:	7892      	ldrb	r2, [r2, #2]
 8014be2:	2a7d      	cmp	r2, #125	; 0x7d
 8014be4:	f000 8100 	beq.w	8014de8 <uxr_read_framed_msg+0x424>
 8014be8:	202a      	movs	r0, #42	; 0x2a
 8014bea:	3101      	adds	r1, #1
 8014bec:	084b      	lsrs	r3, r1, #1
 8014bee:	fba6 5303 	umull	r5, r3, r6, r3
 8014bf2:	089b      	lsrs	r3, r3, #2
 8014bf4:	fb00 1313 	mls	r3, r0, r3, r1
 8014bf8:	2a7e      	cmp	r2, #126	; 0x7e
 8014bfa:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014bfe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014c02:	d04f      	beq.n	8014ca4 <uxr_read_framed_msg+0x2e0>
 8014c04:	2302      	movs	r3, #2
 8014c06:	7023      	strb	r3, [r4, #0]
 8014c08:	e6ee      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014c0a:	252a      	movs	r5, #42	; 0x2a
 8014c0c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014c10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014c14:	f103 0c01 	add.w	ip, r3, #1
 8014c18:	4298      	cmp	r0, r3
 8014c1a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014c1e:	eb04 0103 	add.w	r1, r4, r3
 8014c22:	f43f af11 	beq.w	8014a48 <uxr_read_framed_msg+0x84>
 8014c26:	fba6 3202 	umull	r3, r2, r6, r2
 8014c2a:	0892      	lsrs	r2, r2, #2
 8014c2c:	fb05 c212 	mls	r2, r5, r2, ip
 8014c30:	7889      	ldrb	r1, [r1, #2]
 8014c32:	b2d3      	uxtb	r3, r2
 8014c34:	297e      	cmp	r1, #126	; 0x7e
 8014c36:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014c3a:	d1eb      	bne.n	8014c14 <uxr_read_framed_msg+0x250>
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	7023      	strb	r3, [r4, #0]
 8014c40:	e6d2      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014c42:	f102 0c01 	add.w	ip, r2, #1
 8014c46:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8014c4a:	fba6 0101 	umull	r0, r1, r6, r1
 8014c4e:	0889      	lsrs	r1, r1, #2
 8014c50:	fb05 c111 	mls	r1, r5, r1, ip
 8014c54:	eb04 0c01 	add.w	ip, r4, r1
 8014c58:	b2c9      	uxtb	r1, r1
 8014c5a:	3202      	adds	r2, #2
 8014c5c:	458b      	cmp	fp, r1
 8014c5e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8014c62:	f43f af47 	beq.w	8014af4 <uxr_read_framed_msg+0x130>
 8014c66:	fba6 1000 	umull	r1, r0, r6, r0
 8014c6a:	0880      	lsrs	r0, r0, #2
 8014c6c:	fb05 2210 	mls	r2, r5, r0, r2
 8014c70:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8014c74:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014c78:	297e      	cmp	r1, #126	; 0x7e
 8014c7a:	d036      	beq.n	8014cea <uxr_read_framed_msg+0x326>
 8014c7c:	f081 0120 	eor.w	r1, r1, #32
 8014c80:	e718      	b.n	8014ab4 <uxr_read_framed_msg+0xf0>
 8014c82:	2301      	movs	r3, #1
 8014c84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c86:	4649      	mov	r1, r9
 8014c88:	e9cd 2300 	strd	r2, r3, [sp]
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	4652      	mov	r2, sl
 8014c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c92:	f7ff fe13 	bl	80148bc <uxr_framing_read_transport>
 8014c96:	2800      	cmp	r0, #0
 8014c98:	f43f aed6 	beq.w	8014a48 <uxr_read_framed_msg+0x84>
 8014c9c:	7823      	ldrb	r3, [r4, #0]
 8014c9e:	e6a3      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014ca0:	2302      	movs	r3, #2
 8014ca2:	e7ef      	b.n	8014c84 <uxr_read_framed_msg+0x2c0>
 8014ca4:	2304      	movs	r3, #4
 8014ca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ca8:	4649      	mov	r1, r9
 8014caa:	e9cd 2300 	strd	r2, r3, [sp]
 8014cae:	4620      	mov	r0, r4
 8014cb0:	4652      	mov	r2, sl
 8014cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cb4:	f7ff fe02 	bl	80148bc <uxr_framing_read_transport>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d1ef      	bne.n	8014c9c <uxr_read_framed_msg+0x2d8>
 8014cbc:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8014cc0:	387e      	subs	r0, #126	; 0x7e
 8014cc2:	bf18      	it	ne
 8014cc4:	2001      	movne	r0, #1
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d0e8      	beq.n	8014c9c <uxr_read_framed_msg+0x2d8>
 8014cca:	e6bd      	b.n	8014a48 <uxr_read_framed_msg+0x84>
 8014ccc:	2305      	movs	r3, #5
 8014cce:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014cd0:	e9cd 5300 	strd	r5, r3, [sp]
 8014cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cd6:	f7ff fdf1 	bl	80148bc <uxr_framing_read_transport>
 8014cda:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014cde:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	f43f aeb0 	beq.w	8014a48 <uxr_read_framed_msg+0x84>
 8014ce8:	e67a      	b.n	80149e0 <uxr_read_framed_msg+0x1c>
 8014cea:	459e      	cmp	lr, r3
 8014cec:	f43f af05 	beq.w	8014afa <uxr_read_framed_msg+0x136>
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	7023      	strb	r3, [r4, #0]
 8014cf4:	e678      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014cf6:	2303      	movs	r3, #3
 8014cf8:	e7c4      	b.n	8014c84 <uxr_read_framed_msg+0x2c0>
 8014cfa:	2305      	movs	r3, #5
 8014cfc:	7023      	strb	r3, [r4, #0]
 8014cfe:	e673      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014d00:	30c30c31 	.word	0x30c30c31
 8014d04:	0801d2b4 	.word	0x0801d2b4
 8014d08:	f43f aef7 	beq.w	8014afa <uxr_read_framed_msg+0x136>
 8014d0c:	297e      	cmp	r1, #126	; 0x7e
 8014d0e:	d095      	beq.n	8014c3c <uxr_read_framed_msg+0x278>
 8014d10:	ebae 0303 	sub.w	r3, lr, r3
 8014d14:	3302      	adds	r3, #2
 8014d16:	9301      	str	r3, [sp, #4]
 8014d18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d1a:	4652      	mov	r2, sl
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	4649      	mov	r1, r9
 8014d20:	4620      	mov	r0, r4
 8014d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d24:	f7ff fdca 	bl	80148bc <uxr_framing_read_transport>
 8014d28:	fab0 f080 	clz	r0, r0
 8014d2c:	0940      	lsrs	r0, r0, #5
 8014d2e:	2800      	cmp	r0, #0
 8014d30:	d0b4      	beq.n	8014c9c <uxr_read_framed_msg+0x2d8>
 8014d32:	e689      	b.n	8014a48 <uxr_read_framed_msg+0x84>
 8014d34:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d3a:	7013      	strb	r3, [r2, #0]
 8014d3c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8014d3e:	b003      	add	sp, #12
 8014d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d44:	1c5d      	adds	r5, r3, #1
 8014d46:	0869      	lsrs	r1, r5, #1
 8014d48:	fba6 c101 	umull	ip, r1, r6, r1
 8014d4c:	0889      	lsrs	r1, r1, #2
 8014d4e:	fb00 5111 	mls	r1, r0, r1, r5
 8014d52:	b2cd      	uxtb	r5, r1
 8014d54:	42aa      	cmp	r2, r5
 8014d56:	d0a3      	beq.n	8014ca0 <uxr_read_framed_msg+0x2dc>
 8014d58:	3302      	adds	r3, #2
 8014d5a:	085a      	lsrs	r2, r3, #1
 8014d5c:	fba6 5202 	umull	r5, r2, r6, r2
 8014d60:	0892      	lsrs	r2, r2, #2
 8014d62:	fb00 3212 	mls	r2, r0, r2, r3
 8014d66:	1863      	adds	r3, r4, r1
 8014d68:	7899      	ldrb	r1, [r3, #2]
 8014d6a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014d6e:	297e      	cmp	r1, #126	; 0x7e
 8014d70:	f000 8093 	beq.w	8014e9a <uxr_read_framed_msg+0x4d6>
 8014d74:	f081 0120 	eor.w	r1, r1, #32
 8014d78:	e683      	b.n	8014a82 <uxr_read_framed_msg+0xbe>
 8014d7a:	1c5d      	adds	r5, r3, #1
 8014d7c:	0869      	lsrs	r1, r5, #1
 8014d7e:	fba6 c101 	umull	ip, r1, r6, r1
 8014d82:	0889      	lsrs	r1, r1, #2
 8014d84:	fb00 5111 	mls	r1, r0, r1, r5
 8014d88:	b2cd      	uxtb	r5, r1
 8014d8a:	42aa      	cmp	r2, r5
 8014d8c:	f43f af79 	beq.w	8014c82 <uxr_read_framed_msg+0x2be>
 8014d90:	3302      	adds	r3, #2
 8014d92:	085a      	lsrs	r2, r3, #1
 8014d94:	fba6 5202 	umull	r5, r2, r6, r2
 8014d98:	0892      	lsrs	r2, r2, #2
 8014d9a:	fb00 3212 	mls	r2, r0, r2, r3
 8014d9e:	1863      	adds	r3, r4, r1
 8014da0:	789b      	ldrb	r3, [r3, #2]
 8014da2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014da6:	2b7e      	cmp	r3, #126	; 0x7e
 8014da8:	f000 8087 	beq.w	8014eba <uxr_read_framed_msg+0x4f6>
 8014dac:	f083 0120 	eor.w	r1, r3, #32
 8014db0:	e63f      	b.n	8014a32 <uxr_read_framed_msg+0x6e>
 8014db2:	202a      	movs	r0, #42	; 0x2a
 8014db4:	1c55      	adds	r5, r2, #1
 8014db6:	086b      	lsrs	r3, r5, #1
 8014db8:	fba6 c303 	umull	ip, r3, r6, r3
 8014dbc:	089b      	lsrs	r3, r3, #2
 8014dbe:	fb00 5313 	mls	r3, r0, r3, r5
 8014dc2:	b2dd      	uxtb	r5, r3
 8014dc4:	42a9      	cmp	r1, r5
 8014dc6:	d096      	beq.n	8014cf6 <uxr_read_framed_msg+0x332>
 8014dc8:	3202      	adds	r2, #2
 8014dca:	0851      	lsrs	r1, r2, #1
 8014dcc:	fba6 5101 	umull	r5, r1, r6, r1
 8014dd0:	0889      	lsrs	r1, r1, #2
 8014dd2:	fb00 2211 	mls	r2, r0, r1, r2
 8014dd6:	4423      	add	r3, r4
 8014dd8:	789b      	ldrb	r3, [r3, #2]
 8014dda:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014dde:	2b7e      	cmp	r3, #126	; 0x7e
 8014de0:	d06d      	beq.n	8014ebe <uxr_read_framed_msg+0x4fa>
 8014de2:	f083 0020 	eor.w	r0, r3, #32
 8014de6:	e6ea      	b.n	8014bbe <uxr_read_framed_msg+0x1fa>
 8014de8:	252a      	movs	r5, #42	; 0x2a
 8014dea:	f101 0c01 	add.w	ip, r1, #1
 8014dee:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8014df2:	fba6 2303 	umull	r2, r3, r6, r3
 8014df6:	089a      	lsrs	r2, r3, #2
 8014df8:	fb05 c212 	mls	r2, r5, r2, ip
 8014dfc:	b2d3      	uxtb	r3, r2
 8014dfe:	4298      	cmp	r0, r3
 8014e00:	f43f af50 	beq.w	8014ca4 <uxr_read_framed_msg+0x2e0>
 8014e04:	1c8b      	adds	r3, r1, #2
 8014e06:	0859      	lsrs	r1, r3, #1
 8014e08:	fba6 0101 	umull	r0, r1, r6, r1
 8014e0c:	0889      	lsrs	r1, r1, #2
 8014e0e:	fb05 3111 	mls	r1, r5, r1, r3
 8014e12:	18a3      	adds	r3, r4, r2
 8014e14:	789b      	ldrb	r3, [r3, #2]
 8014e16:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8014e1a:	2b7e      	cmp	r3, #126	; 0x7e
 8014e1c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014e20:	f43f af40 	beq.w	8014ca4 <uxr_read_framed_msg+0x2e0>
 8014e24:	f083 0320 	eor.w	r3, r3, #32
 8014e28:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014e2c:	e6ea      	b.n	8014c04 <uxr_read_framed_msg+0x240>
 8014e2e:	1c5d      	adds	r5, r3, #1
 8014e30:	0869      	lsrs	r1, r5, #1
 8014e32:	fba6 c101 	umull	ip, r1, r6, r1
 8014e36:	0889      	lsrs	r1, r1, #2
 8014e38:	fb00 5111 	mls	r1, r0, r1, r5
 8014e3c:	b2cd      	uxtb	r5, r1
 8014e3e:	42aa      	cmp	r2, r5
 8014e40:	f43f af1f 	beq.w	8014c82 <uxr_read_framed_msg+0x2be>
 8014e44:	3302      	adds	r3, #2
 8014e46:	085a      	lsrs	r2, r3, #1
 8014e48:	fba6 5202 	umull	r5, r2, r6, r2
 8014e4c:	0892      	lsrs	r2, r2, #2
 8014e4e:	fb00 3212 	mls	r2, r0, r2, r3
 8014e52:	1863      	adds	r3, r4, r1
 8014e54:	789b      	ldrb	r3, [r3, #2]
 8014e56:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014e5a:	2b7e      	cmp	r3, #126	; 0x7e
 8014e5c:	d02d      	beq.n	8014eba <uxr_read_framed_msg+0x4f6>
 8014e5e:	f083 0120 	eor.w	r1, r3, #32
 8014e62:	e666      	b.n	8014b32 <uxr_read_framed_msg+0x16e>
 8014e64:	1c5d      	adds	r5, r3, #1
 8014e66:	0869      	lsrs	r1, r5, #1
 8014e68:	fba6 c101 	umull	ip, r1, r6, r1
 8014e6c:	0889      	lsrs	r1, r1, #2
 8014e6e:	fb00 5111 	mls	r1, r0, r1, r5
 8014e72:	b2cd      	uxtb	r5, r1
 8014e74:	42aa      	cmp	r2, r5
 8014e76:	f43f af13 	beq.w	8014ca0 <uxr_read_framed_msg+0x2dc>
 8014e7a:	3302      	adds	r3, #2
 8014e7c:	085a      	lsrs	r2, r3, #1
 8014e7e:	fba6 5202 	umull	r5, r2, r6, r2
 8014e82:	0892      	lsrs	r2, r2, #2
 8014e84:	fb00 3212 	mls	r2, r0, r2, r3
 8014e88:	1863      	adds	r3, r4, r1
 8014e8a:	7899      	ldrb	r1, [r3, #2]
 8014e8c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014e90:	297e      	cmp	r1, #126	; 0x7e
 8014e92:	d002      	beq.n	8014e9a <uxr_read_framed_msg+0x4d6>
 8014e94:	f081 0120 	eor.w	r1, r1, #32
 8014e98:	e674      	b.n	8014b84 <uxr_read_framed_msg+0x1c0>
 8014e9a:	2302      	movs	r3, #2
 8014e9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e9e:	4649      	mov	r1, r9
 8014ea0:	e9cd 2300 	strd	r2, r3, [sp]
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	4652      	mov	r2, sl
 8014ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eaa:	f7ff fd07 	bl	80148bc <uxr_framing_read_transport>
 8014eae:	2800      	cmp	r0, #0
 8014eb0:	f47f aef4 	bne.w	8014c9c <uxr_read_framed_msg+0x2d8>
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	7023      	strb	r3, [r4, #0]
 8014eb8:	e596      	b.n	80149e8 <uxr_read_framed_msg+0x24>
 8014eba:	2301      	movs	r3, #1
 8014ebc:	e7ee      	b.n	8014e9c <uxr_read_framed_msg+0x4d8>
 8014ebe:	2303      	movs	r3, #3
 8014ec0:	e7ec      	b.n	8014e9c <uxr_read_framed_msg+0x4d8>
 8014ec2:	bf00      	nop

08014ec4 <uxr_stream_id>:
 8014ec4:	b430      	push	{r4, r5}
 8014ec6:	2901      	cmp	r1, #1
 8014ec8:	4604      	mov	r4, r0
 8014eca:	b082      	sub	sp, #8
 8014ecc:	d01e      	beq.n	8014f0c <uxr_stream_id+0x48>
 8014ece:	2902      	cmp	r1, #2
 8014ed0:	f04f 0500 	mov.w	r5, #0
 8014ed4:	d01d      	beq.n	8014f12 <uxr_stream_id+0x4e>
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f365 0307 	bfi	r3, r5, #0, #8
 8014ede:	f364 230f 	bfi	r3, r4, #8, #8
 8014ee2:	f361 4317 	bfi	r3, r1, #16, #8
 8014ee6:	f362 631f 	bfi	r3, r2, #24, #8
 8014eea:	b2da      	uxtb	r2, r3
 8014eec:	f362 0007 	bfi	r0, r2, #0, #8
 8014ef0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014ef4:	f362 200f 	bfi	r0, r2, #8, #8
 8014ef8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014efc:	f362 4017 	bfi	r0, r2, #16, #8
 8014f00:	0e1b      	lsrs	r3, r3, #24
 8014f02:	f363 601f 	bfi	r0, r3, #24, #8
 8014f06:	b002      	add	sp, #8
 8014f08:	bc30      	pop	{r4, r5}
 8014f0a:	4770      	bx	lr
 8014f0c:	1c45      	adds	r5, r0, #1
 8014f0e:	b2ed      	uxtb	r5, r5
 8014f10:	e7e1      	b.n	8014ed6 <uxr_stream_id+0x12>
 8014f12:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 8014f16:	e7de      	b.n	8014ed6 <uxr_stream_id+0x12>

08014f18 <uxr_stream_id_from_raw>:
 8014f18:	b430      	push	{r4, r5}
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	b128      	cbz	r0, 8014f2c <uxr_stream_id_from_raw+0x14>
 8014f20:	0603      	lsls	r3, r0, #24
 8014f22:	d420      	bmi.n	8014f66 <uxr_stream_id_from_raw+0x4e>
 8014f24:	1e44      	subs	r4, r0, #1
 8014f26:	2501      	movs	r5, #1
 8014f28:	b2e4      	uxtb	r4, r4
 8014f2a:	e001      	b.n	8014f30 <uxr_stream_id_from_raw+0x18>
 8014f2c:	4605      	mov	r5, r0
 8014f2e:	4604      	mov	r4, r0
 8014f30:	2300      	movs	r3, #0
 8014f32:	4618      	mov	r0, r3
 8014f34:	f362 0307 	bfi	r3, r2, #0, #8
 8014f38:	f364 230f 	bfi	r3, r4, #8, #8
 8014f3c:	f365 4317 	bfi	r3, r5, #16, #8
 8014f40:	f361 631f 	bfi	r3, r1, #24, #8
 8014f44:	b2da      	uxtb	r2, r3
 8014f46:	f362 0007 	bfi	r0, r2, #0, #8
 8014f4a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014f4e:	f362 200f 	bfi	r0, r2, #8, #8
 8014f52:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014f56:	f362 4017 	bfi	r0, r2, #16, #8
 8014f5a:	0e1b      	lsrs	r3, r3, #24
 8014f5c:	f363 601f 	bfi	r0, r3, #24, #8
 8014f60:	b002      	add	sp, #8
 8014f62:	bc30      	pop	{r4, r5}
 8014f64:	4770      	bx	lr
 8014f66:	2502      	movs	r5, #2
 8014f68:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8014f6c:	e7e0      	b.n	8014f30 <uxr_stream_id_from_raw+0x18>
 8014f6e:	bf00      	nop

08014f70 <uxr_init_stream_storage>:
 8014f70:	2300      	movs	r3, #0
 8014f72:	7403      	strb	r3, [r0, #16]
 8014f74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8014f78:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8014f7c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop

08014f84 <uxr_reset_stream_storage>:
 8014f84:	b570      	push	{r4, r5, r6, lr}
 8014f86:	7c03      	ldrb	r3, [r0, #16]
 8014f88:	4604      	mov	r4, r0
 8014f8a:	b153      	cbz	r3, 8014fa2 <uxr_reset_stream_storage+0x1e>
 8014f8c:	4606      	mov	r6, r0
 8014f8e:	2500      	movs	r5, #0
 8014f90:	4630      	mov	r0, r6
 8014f92:	f004 fdd9 	bl	8019b48 <uxr_reset_output_best_effort_stream>
 8014f96:	7c23      	ldrb	r3, [r4, #16]
 8014f98:	3501      	adds	r5, #1
 8014f9a:	42ab      	cmp	r3, r5
 8014f9c:	f106 0610 	add.w	r6, r6, #16
 8014fa0:	d8f6      	bhi.n	8014f90 <uxr_reset_stream_storage+0xc>
 8014fa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014fa6:	b163      	cbz	r3, 8014fc2 <uxr_reset_stream_storage+0x3e>
 8014fa8:	2600      	movs	r6, #0
 8014faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fae:	4628      	mov	r0, r5
 8014fb0:	f004 fbd6 	bl	8019760 <uxr_reset_input_best_effort_stream>
 8014fb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014fb8:	3601      	adds	r6, #1
 8014fba:	42b3      	cmp	r3, r6
 8014fbc:	f105 0502 	add.w	r5, r5, #2
 8014fc0:	d8f5      	bhi.n	8014fae <uxr_reset_stream_storage+0x2a>
 8014fc2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014fc6:	b163      	cbz	r3, 8014fe2 <uxr_reset_stream_storage+0x5e>
 8014fc8:	2600      	movs	r6, #0
 8014fca:	f104 0518 	add.w	r5, r4, #24
 8014fce:	4628      	mov	r0, r5
 8014fd0:	f004 fe5a 	bl	8019c88 <uxr_reset_output_reliable_stream>
 8014fd4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8014fd8:	3601      	adds	r6, #1
 8014fda:	42b3      	cmp	r3, r6
 8014fdc:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8014fe0:	d8f5      	bhi.n	8014fce <uxr_reset_stream_storage+0x4a>
 8014fe2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014fe6:	b163      	cbz	r3, 8015002 <uxr_reset_stream_storage+0x7e>
 8014fe8:	2600      	movs	r6, #0
 8014fea:	f104 0548 	add.w	r5, r4, #72	; 0x48
 8014fee:	4628      	mov	r0, r5
 8014ff0:	f004 fc1e 	bl	8019830 <uxr_reset_input_reliable_stream>
 8014ff4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8014ff8:	3601      	adds	r6, #1
 8014ffa:	42b3      	cmp	r3, r6
 8014ffc:	f105 0518 	add.w	r5, r5, #24
 8015000:	d8f5      	bhi.n	8014fee <uxr_reset_stream_storage+0x6a>
 8015002:	bd70      	pop	{r4, r5, r6, pc}

08015004 <uxr_add_output_best_effort_buffer>:
 8015004:	b530      	push	{r4, r5, lr}
 8015006:	7c04      	ldrb	r4, [r0, #16]
 8015008:	b083      	sub	sp, #12
 801500a:	1c65      	adds	r5, r4, #1
 801500c:	7405      	strb	r5, [r0, #16]
 801500e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8015012:	f004 fd8f 	bl	8019b34 <uxr_init_output_best_effort_stream>
 8015016:	2201      	movs	r2, #1
 8015018:	4620      	mov	r0, r4
 801501a:	4611      	mov	r1, r2
 801501c:	b003      	add	sp, #12
 801501e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015022:	f7ff bf4f 	b.w	8014ec4 <uxr_stream_id>
 8015026:	bf00      	nop

08015028 <uxr_add_output_reliable_buffer>:
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 801502e:	b084      	sub	sp, #16
 8015030:	1c66      	adds	r6, r4, #1
 8015032:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8015036:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801503a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 801503e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8015042:	3018      	adds	r0, #24
 8015044:	9500      	str	r5, [sp, #0]
 8015046:	f004 fded 	bl	8019c24 <uxr_init_output_reliable_stream>
 801504a:	4620      	mov	r0, r4
 801504c:	2201      	movs	r2, #1
 801504e:	2102      	movs	r1, #2
 8015050:	b004      	add	sp, #16
 8015052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015056:	f7ff bf35 	b.w	8014ec4 <uxr_stream_id>
 801505a:	bf00      	nop

0801505c <uxr_add_input_best_effort_buffer>:
 801505c:	b510      	push	{r4, lr}
 801505e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8015062:	b082      	sub	sp, #8
 8015064:	1c62      	adds	r2, r4, #1
 8015066:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801506a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801506e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015072:	f004 fb71 	bl	8019758 <uxr_init_input_best_effort_stream>
 8015076:	4620      	mov	r0, r4
 8015078:	2200      	movs	r2, #0
 801507a:	2101      	movs	r1, #1
 801507c:	b002      	add	sp, #8
 801507e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015082:	f7ff bf1f 	b.w	8014ec4 <uxr_stream_id>
 8015086:	bf00      	nop

08015088 <uxr_add_input_reliable_buffer>:
 8015088:	b570      	push	{r4, r5, r6, lr}
 801508a:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801508e:	b084      	sub	sp, #16
 8015090:	1c66      	adds	r6, r4, #1
 8015092:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8015096:	9d08      	ldr	r5, [sp, #32]
 8015098:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 801509c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80150a0:	3048      	adds	r0, #72	; 0x48
 80150a2:	9500      	str	r5, [sp, #0]
 80150a4:	f004 fba0 	bl	80197e8 <uxr_init_input_reliable_stream>
 80150a8:	4620      	mov	r0, r4
 80150aa:	2200      	movs	r2, #0
 80150ac:	2102      	movs	r1, #2
 80150ae:	b004      	add	sp, #16
 80150b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150b4:	f7ff bf06 	b.w	8014ec4 <uxr_stream_id>

080150b8 <uxr_get_output_best_effort_stream>:
 80150b8:	7c03      	ldrb	r3, [r0, #16]
 80150ba:	428b      	cmp	r3, r1
 80150bc:	bf8c      	ite	hi
 80150be:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80150c2:	2000      	movls	r0, #0
 80150c4:	4770      	bx	lr
 80150c6:	bf00      	nop

080150c8 <uxr_get_output_reliable_stream>:
 80150c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80150cc:	428b      	cmp	r3, r1
 80150ce:	bf83      	ittte	hi
 80150d0:	eb01 0181 	addhi.w	r1, r1, r1, lsl #2
 80150d4:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 80150d8:	3018      	addhi	r0, #24
 80150da:	2000      	movls	r0, #0
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop

080150e0 <uxr_get_input_best_effort_stream>:
 80150e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80150e4:	428b      	cmp	r3, r1
 80150e6:	bf86      	itte	hi
 80150e8:	3121      	addhi	r1, #33	; 0x21
 80150ea:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80150ee:	2000      	movls	r0, #0
 80150f0:	4770      	bx	lr
 80150f2:	bf00      	nop

080150f4 <uxr_get_input_reliable_stream>:
 80150f4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80150f8:	428b      	cmp	r3, r1
 80150fa:	bf83      	ittte	hi
 80150fc:	eb01 0141 	addhi.w	r1, r1, r1, lsl #1
 8015100:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 8015104:	3048      	addhi	r0, #72	; 0x48
 8015106:	2000      	movls	r0, #0
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop

0801510c <uxr_output_streams_confirmed>:
 801510c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8015110:	b183      	cbz	r3, 8015134 <uxr_output_streams_confirmed+0x28>
 8015112:	b570      	push	{r4, r5, r6, lr}
 8015114:	4606      	mov	r6, r0
 8015116:	2400      	movs	r4, #0
 8015118:	f100 0518 	add.w	r5, r0, #24
 801511c:	e001      	b.n	8015122 <uxr_output_streams_confirmed+0x16>
 801511e:	3528      	adds	r5, #40	; 0x28
 8015120:	b138      	cbz	r0, 8015132 <uxr_output_streams_confirmed+0x26>
 8015122:	4628      	mov	r0, r5
 8015124:	f005 f812 	bl	801a14c <uxr_is_output_up_to_date>
 8015128:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801512c:	3401      	adds	r4, #1
 801512e:	42a3      	cmp	r3, r4
 8015130:	d8f5      	bhi.n	801511e <uxr_output_streams_confirmed+0x12>
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	2001      	movs	r0, #1
 8015136:	4770      	bx	lr

08015138 <uxr_buffer_submessage_header>:
 8015138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801513a:	460e      	mov	r6, r1
 801513c:	2104      	movs	r1, #4
 801513e:	4615      	mov	r5, r2
 8015140:	4604      	mov	r4, r0
 8015142:	461f      	mov	r7, r3
 8015144:	f7f9 fd54 	bl	800ebf0 <ucdr_align_to>
 8015148:	2301      	movs	r3, #1
 801514a:	4631      	mov	r1, r6
 801514c:	ea47 0203 	orr.w	r2, r7, r3
 8015150:	4620      	mov	r0, r4
 8015152:	7523      	strb	r3, [r4, #20]
 8015154:	462b      	mov	r3, r5
 8015156:	f000 fa2d 	bl	80155b4 <uxr_serialize_submessage_header>
 801515a:	4620      	mov	r0, r4
 801515c:	f7f9 fd5e 	bl	800ec1c <ucdr_buffer_remaining>
 8015160:	42a8      	cmp	r0, r5
 8015162:	bf34      	ite	cc
 8015164:	2000      	movcc	r0, #0
 8015166:	2001      	movcs	r0, #1
 8015168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801516a:	bf00      	nop

0801516c <uxr_read_submessage_header>:
 801516c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015170:	4604      	mov	r4, r0
 8015172:	460d      	mov	r5, r1
 8015174:	2104      	movs	r1, #4
 8015176:	4616      	mov	r6, r2
 8015178:	4698      	mov	r8, r3
 801517a:	f7f9 fd39 	bl	800ebf0 <ucdr_align_to>
 801517e:	4620      	mov	r0, r4
 8015180:	f7f9 fd4c 	bl	800ec1c <ucdr_buffer_remaining>
 8015184:	2803      	cmp	r0, #3
 8015186:	bf8c      	ite	hi
 8015188:	2701      	movhi	r7, #1
 801518a:	2700      	movls	r7, #0
 801518c:	d802      	bhi.n	8015194 <uxr_read_submessage_header+0x28>
 801518e:	4638      	mov	r0, r7
 8015190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015194:	4633      	mov	r3, r6
 8015196:	4642      	mov	r2, r8
 8015198:	4620      	mov	r0, r4
 801519a:	4629      	mov	r1, r5
 801519c:	f000 fa1c 	bl	80155d8 <uxr_deserialize_submessage_header>
 80151a0:	f898 3000 	ldrb.w	r3, [r8]
 80151a4:	4638      	mov	r0, r7
 80151a6:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80151aa:	f003 0301 	and.w	r3, r3, #1
 80151ae:	f888 2000 	strb.w	r2, [r8]
 80151b2:	7523      	strb	r3, [r4, #20]
 80151b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151b8 <uxr_submessage_padding>:
 80151b8:	f010 0003 	ands.w	r0, r0, #3
 80151bc:	bf18      	it	ne
 80151be:	f1c0 0004 	rsbne	r0, r0, #4
 80151c2:	4770      	bx	lr

080151c4 <uxr_millis>:
 80151c4:	b510      	push	{r4, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	4669      	mov	r1, sp
 80151ca:	2001      	movs	r0, #1
 80151cc:	f7ee ffe0 	bl	8004190 <clock_gettime>
 80151d0:	e9dd 0200 	ldrd	r0, r2, [sp]
 80151d4:	4b07      	ldr	r3, [pc, #28]	; (80151f4 <uxr_millis+0x30>)
 80151d6:	9c02      	ldr	r4, [sp, #8]
 80151d8:	fba0 0103 	umull	r0, r1, r0, r3
 80151dc:	fb03 1102 	mla	r1, r3, r2, r1
 80151e0:	1900      	adds	r0, r0, r4
 80151e2:	f04f 0300 	mov.w	r3, #0
 80151e6:	4a04      	ldr	r2, [pc, #16]	; (80151f8 <uxr_millis+0x34>)
 80151e8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80151ec:	f7ec f830 	bl	8001250 <__aeabi_ldivmod>
 80151f0:	b004      	add	sp, #16
 80151f2:	bd10      	pop	{r4, pc}
 80151f4:	3b9aca00 	.word	0x3b9aca00
 80151f8:	000f4240 	.word	0x000f4240

080151fc <uxr_nanos>:
 80151fc:	b500      	push	{lr}
 80151fe:	b085      	sub	sp, #20
 8015200:	4669      	mov	r1, sp
 8015202:	2001      	movs	r0, #1
 8015204:	f7ee ffc4 	bl	8004190 <clock_gettime>
 8015208:	e9dd 2000 	ldrd	r2, r0, [sp]
 801520c:	4906      	ldr	r1, [pc, #24]	; (8015228 <uxr_nanos+0x2c>)
 801520e:	fba2 2301 	umull	r2, r3, r2, r1
 8015212:	fb01 3300 	mla	r3, r1, r0, r3
 8015216:	9802      	ldr	r0, [sp, #8]
 8015218:	4684      	mov	ip, r0
 801521a:	1810      	adds	r0, r2, r0
 801521c:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 8015220:	b005      	add	sp, #20
 8015222:	f85d fb04 	ldr.w	pc, [sp], #4
 8015226:	bf00      	nop
 8015228:	3b9aca00 	.word	0x3b9aca00

0801522c <on_full_output_buffer_fragmented>:
 801522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015230:	460c      	mov	r4, r1
 8015232:	b08a      	sub	sp, #40	; 0x28
 8015234:	4606      	mov	r6, r0
 8015236:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801523a:	f104 0008 	add.w	r0, r4, #8
 801523e:	f7ff ff43 	bl	80150c8 <uxr_get_output_reliable_stream>
 8015242:	4605      	mov	r5, r0
 8015244:	f004 ff8c 	bl	801a160 <get_available_free_slots>
 8015248:	b968      	cbnz	r0, 8015266 <on_full_output_buffer_fragmented+0x3a>
 801524a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801524e:	4620      	mov	r0, r4
 8015250:	4798      	blx	r3
 8015252:	b918      	cbnz	r0, 801525c <on_full_output_buffer_fragmented+0x30>
 8015254:	2001      	movs	r0, #1
 8015256:	b00a      	add	sp, #40	; 0x28
 8015258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801525c:	4628      	mov	r0, r5
 801525e:	f004 ff7f 	bl	801a160 <get_available_free_slots>
 8015262:	2800      	cmp	r0, #0
 8015264:	d0f6      	beq.n	8015254 <on_full_output_buffer_fragmented+0x28>
 8015266:	892a      	ldrh	r2, [r5, #8]
 8015268:	89e8      	ldrh	r0, [r5, #14]
 801526a:	686b      	ldr	r3, [r5, #4]
 801526c:	fbb0 f1f2 	udiv	r1, r0, r2
 8015270:	fbb3 f8f2 	udiv	r8, r3, r2
 8015274:	fb02 0111 	mls	r1, r2, r1, r0
 8015278:	7b2b      	ldrb	r3, [r5, #12]
 801527a:	b289      	uxth	r1, r1
 801527c:	fb08 f101 	mul.w	r1, r8, r1
 8015280:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8015284:	f1a8 0804 	sub.w	r8, r8, #4
 8015288:	33fc      	adds	r3, #252	; 0xfc
 801528a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 801528e:	4443      	add	r3, r8
 8015290:	682a      	ldr	r2, [r5, #0]
 8015292:	b29f      	uxth	r7, r3
 8015294:	1bc0      	subs	r0, r0, r7
 8015296:	3104      	adds	r1, #4
 8015298:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 801529c:	4411      	add	r1, r2
 801529e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152a2:	4642      	mov	r2, r8
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	a802      	add	r0, sp, #8
 80152a8:	2300      	movs	r3, #0
 80152aa:	f7f9 fc73 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 80152ae:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80152b2:	f102 0308 	add.w	r3, r2, #8
 80152b6:	4543      	cmp	r3, r8
 80152b8:	d928      	bls.n	801530c <on_full_output_buffer_fragmented+0xe0>
 80152ba:	463a      	mov	r2, r7
 80152bc:	2300      	movs	r3, #0
 80152be:	210d      	movs	r1, #13
 80152c0:	a802      	add	r0, sp, #8
 80152c2:	f7ff ff39 	bl	8015138 <uxr_buffer_submessage_header>
 80152c6:	8929      	ldrh	r1, [r5, #8]
 80152c8:	89e8      	ldrh	r0, [r5, #14]
 80152ca:	686b      	ldr	r3, [r5, #4]
 80152cc:	fbb0 f2f1 	udiv	r2, r0, r1
 80152d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80152d4:	fb01 0212 	mls	r2, r1, r2, r0
 80152d8:	b292      	uxth	r2, r2
 80152da:	fb03 f302 	mul.w	r3, r3, r2
 80152de:	682a      	ldr	r2, [r5, #0]
 80152e0:	f842 8003 	str.w	r8, [r2, r3]
 80152e4:	2101      	movs	r1, #1
 80152e6:	89e8      	ldrh	r0, [r5, #14]
 80152e8:	f004 ff5c 	bl	801a1a4 <uxr_seq_num_add>
 80152ec:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80152f0:	81e8      	strh	r0, [r5, #14]
 80152f2:	1a52      	subs	r2, r2, r1
 80152f4:	4630      	mov	r0, r6
 80152f6:	f7f9 fc5f 	bl	800ebb8 <ucdr_init_buffer>
 80152fa:	4630      	mov	r0, r6
 80152fc:	4622      	mov	r2, r4
 80152fe:	490f      	ldr	r1, [pc, #60]	; (801533c <on_full_output_buffer_fragmented+0x110>)
 8015300:	f7f9 fc30 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 8015304:	2000      	movs	r0, #0
 8015306:	b00a      	add	sp, #40	; 0x28
 8015308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530c:	2302      	movs	r3, #2
 801530e:	210d      	movs	r1, #13
 8015310:	b292      	uxth	r2, r2
 8015312:	a802      	add	r0, sp, #8
 8015314:	f7ff ff10 	bl	8015138 <uxr_buffer_submessage_header>
 8015318:	8929      	ldrh	r1, [r5, #8]
 801531a:	89e8      	ldrh	r0, [r5, #14]
 801531c:	686b      	ldr	r3, [r5, #4]
 801531e:	fbb0 f2f1 	udiv	r2, r0, r1
 8015322:	fbb3 f3f1 	udiv	r3, r3, r1
 8015326:	fb01 0212 	mls	r2, r1, r2, r0
 801532a:	b292      	uxth	r2, r2
 801532c:	fb03 f302 	mul.w	r3, r3, r2
 8015330:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8015334:	6829      	ldr	r1, [r5, #0]
 8015336:	3208      	adds	r2, #8
 8015338:	50ca      	str	r2, [r1, r3]
 801533a:	e7d3      	b.n	80152e4 <on_full_output_buffer_fragmented+0xb8>
 801533c:	0801522d 	.word	0x0801522d

08015340 <uxr_prepare_output_stream>:
 8015340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015342:	2407      	movs	r4, #7
 8015344:	2500      	movs	r5, #0
 8015346:	b087      	sub	sp, #28
 8015348:	9202      	str	r2, [sp, #8]
 801534a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801534c:	e9cd 4500 	strd	r4, r5, [sp]
 8015350:	3204      	adds	r2, #4
 8015352:	461c      	mov	r4, r3
 8015354:	4606      	mov	r6, r0
 8015356:	9103      	str	r1, [sp, #12]
 8015358:	f7fe ffda 	bl	8014310 <uxr_prepare_stream_to_write_submessage>
 801535c:	f080 0201 	eor.w	r2, r0, #1
 8015360:	b2d2      	uxtb	r2, r2
 8015362:	75a2      	strb	r2, [r4, #22]
 8015364:	b112      	cbz	r2, 801536c <uxr_prepare_output_stream+0x2c>
 8015366:	4628      	mov	r0, r5
 8015368:	b007      	add	sp, #28
 801536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801536c:	aa05      	add	r2, sp, #20
 801536e:	9902      	ldr	r1, [sp, #8]
 8015370:	4630      	mov	r0, r6
 8015372:	f7ff f8ff 	bl	8014574 <uxr_init_base_object_request>
 8015376:	4605      	mov	r5, r0
 8015378:	a905      	add	r1, sp, #20
 801537a:	4620      	mov	r0, r4
 801537c:	f000 febc 	bl	80160f8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015380:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015384:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8015388:	4620      	mov	r0, r4
 801538a:	1a52      	subs	r2, r2, r1
 801538c:	f7f9 fc14 	bl	800ebb8 <ucdr_init_buffer>
 8015390:	4620      	mov	r0, r4
 8015392:	463a      	mov	r2, r7
 8015394:	4631      	mov	r1, r6
 8015396:	f7f9 fbe5 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 801539a:	4628      	mov	r0, r5
 801539c:	b007      	add	sp, #28
 801539e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080153a0 <uxr_prepare_output_stream_fragmented>:
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	b093      	sub	sp, #76	; 0x4c
 80153a6:	9107      	str	r1, [sp, #28]
 80153a8:	4605      	mov	r5, r0
 80153aa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80153ae:	3008      	adds	r0, #8
 80153b0:	9303      	str	r3, [sp, #12]
 80153b2:	9206      	str	r2, [sp, #24]
 80153b4:	f7ff fe88 	bl	80150c8 <uxr_get_output_reliable_stream>
 80153b8:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80153bc:	2b01      	cmp	r3, #1
 80153be:	f000 8094 	beq.w	80154ea <uxr_prepare_output_stream_fragmented+0x14a>
 80153c2:	4604      	mov	r4, r0
 80153c4:	2800      	cmp	r0, #0
 80153c6:	f000 8090 	beq.w	80154ea <uxr_prepare_output_stream_fragmented+0x14a>
 80153ca:	f004 fec9 	bl	801a160 <get_available_free_slots>
 80153ce:	2800      	cmp	r0, #0
 80153d0:	f000 8086 	beq.w	80154e0 <uxr_prepare_output_stream_fragmented+0x140>
 80153d4:	8923      	ldrh	r3, [r4, #8]
 80153d6:	89e7      	ldrh	r7, [r4, #14]
 80153d8:	6862      	ldr	r2, [r4, #4]
 80153da:	fbb7 f8f3 	udiv	r8, r7, r3
 80153de:	fbb2 f2f3 	udiv	r2, r2, r3
 80153e2:	fb03 7818 	mls	r8, r3, r8, r7
 80153e6:	fa1f f888 	uxth.w	r8, r8
 80153ea:	fb02 f808 	mul.w	r8, r2, r8
 80153ee:	6823      	ldr	r3, [r4, #0]
 80153f0:	f108 0804 	add.w	r8, r8, #4
 80153f4:	4498      	add	r8, r3
 80153f6:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80153fa:	7b23      	ldrb	r3, [r4, #12]
 80153fc:	9204      	str	r2, [sp, #16]
 80153fe:	4553      	cmp	r3, sl
 8015400:	f1a2 0b04 	sub.w	fp, r2, #4
 8015404:	d37d      	bcc.n	8015502 <uxr_prepare_output_stream_fragmented+0x162>
 8015406:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8015408:	f1ab 0904 	sub.w	r9, fp, #4
 801540c:	eba9 0903 	sub.w	r9, r9, r3
 8015410:	3608      	adds	r6, #8
 8015412:	2300      	movs	r3, #0
 8015414:	465a      	mov	r2, fp
 8015416:	4641      	mov	r1, r8
 8015418:	a80a      	add	r0, sp, #40	; 0x28
 801541a:	f8cd a000 	str.w	sl, [sp]
 801541e:	fa1f f989 	uxth.w	r9, r9
 8015422:	9605      	str	r6, [sp, #20]
 8015424:	f7f9 fbb6 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8015428:	455e      	cmp	r6, fp
 801542a:	bf34      	ite	cc
 801542c:	2302      	movcc	r3, #2
 801542e:	2300      	movcs	r3, #0
 8015430:	464a      	mov	r2, r9
 8015432:	210d      	movs	r1, #13
 8015434:	a80a      	add	r0, sp, #40	; 0x28
 8015436:	f7ff fe7f 	bl	8015138 <uxr_buffer_submessage_header>
 801543a:	8921      	ldrh	r1, [r4, #8]
 801543c:	6862      	ldr	r2, [r4, #4]
 801543e:	fbb7 f3f1 	udiv	r3, r7, r1
 8015442:	fbb2 f2f1 	udiv	r2, r2, r1
 8015446:	fb01 7313 	mls	r3, r1, r3, r7
 801544a:	b29b      	uxth	r3, r3
 801544c:	fb03 f302 	mul.w	r3, r3, r2
 8015450:	6822      	ldr	r2, [r4, #0]
 8015452:	4638      	mov	r0, r7
 8015454:	f842 b003 	str.w	fp, [r2, r3]
 8015458:	2101      	movs	r1, #1
 801545a:	f004 fea3 	bl	801a1a4 <uxr_seq_num_add>
 801545e:	9b04      	ldr	r3, [sp, #16]
 8015460:	9e03      	ldr	r6, [sp, #12]
 8015462:	f1a3 0208 	sub.w	r2, r3, #8
 8015466:	f10a 0104 	add.w	r1, sl, #4
 801546a:	4607      	mov	r7, r0
 801546c:	eba2 020a 	sub.w	r2, r2, sl
 8015470:	4630      	mov	r0, r6
 8015472:	4441      	add	r1, r8
 8015474:	f7f9 fba0 	bl	800ebb8 <ucdr_init_buffer>
 8015478:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801547a:	2107      	movs	r1, #7
 801547c:	1d1a      	adds	r2, r3, #4
 801547e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8015482:	bf28      	it	cs
 8015484:	2200      	movcs	r2, #0
 8015486:	2300      	movs	r3, #0
 8015488:	81e7      	strh	r7, [r4, #14]
 801548a:	b292      	uxth	r2, r2
 801548c:	4630      	mov	r0, r6
 801548e:	f7ff fe53 	bl	8015138 <uxr_buffer_submessage_header>
 8015492:	4628      	mov	r0, r5
 8015494:	9906      	ldr	r1, [sp, #24]
 8015496:	aa09      	add	r2, sp, #36	; 0x24
 8015498:	f7ff f86c 	bl	8014574 <uxr_init_base_object_request>
 801549c:	4604      	mov	r4, r0
 801549e:	b328      	cbz	r0, 80154ec <uxr_prepare_output_stream_fragmented+0x14c>
 80154a0:	9e03      	ldr	r6, [sp, #12]
 80154a2:	a909      	add	r1, sp, #36	; 0x24
 80154a4:	4630      	mov	r0, r6
 80154a6:	f000 fe27 	bl	80160f8 <uxr_serialize_WRITE_DATA_Payload_Data>
 80154aa:	68b1      	ldr	r1, [r6, #8]
 80154ac:	6872      	ldr	r2, [r6, #4]
 80154ae:	4630      	mov	r0, r6
 80154b0:	1a52      	subs	r2, r2, r1
 80154b2:	f7f9 fb81 	bl	800ebb8 <ucdr_init_buffer>
 80154b6:	9a05      	ldr	r2, [sp, #20]
 80154b8:	9b07      	ldr	r3, [sp, #28]
 80154ba:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80154be:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80154c0:	4630      	mov	r0, r6
 80154c2:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80154c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80154c8:	491a      	ldr	r1, [pc, #104]	; (8015534 <uxr_prepare_output_stream_fragmented+0x194>)
 80154ca:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80154ce:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80154d2:	462a      	mov	r2, r5
 80154d4:	f7f9 fb46 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 80154d8:	4620      	mov	r0, r4
 80154da:	b013      	add	sp, #76	; 0x4c
 80154dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e0:	4628      	mov	r0, r5
 80154e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80154e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80154e6:	4798      	blx	r3
 80154e8:	b920      	cbnz	r0, 80154f4 <uxr_prepare_output_stream_fragmented+0x154>
 80154ea:	2400      	movs	r4, #0
 80154ec:	4620      	mov	r0, r4
 80154ee:	b013      	add	sp, #76	; 0x4c
 80154f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f4:	4620      	mov	r0, r4
 80154f6:	f004 fe33 	bl	801a160 <get_available_free_slots>
 80154fa:	2800      	cmp	r0, #0
 80154fc:	f47f af6a 	bne.w	80153d4 <uxr_prepare_output_stream_fragmented+0x34>
 8015500:	e7f3      	b.n	80154ea <uxr_prepare_output_stream_fragmented+0x14a>
 8015502:	4638      	mov	r0, r7
 8015504:	2101      	movs	r1, #1
 8015506:	f004 fe4d 	bl	801a1a4 <uxr_seq_num_add>
 801550a:	8922      	ldrh	r2, [r4, #8]
 801550c:	6863      	ldr	r3, [r4, #4]
 801550e:	fbb0 f8f2 	udiv	r8, r0, r2
 8015512:	fbb3 f3f2 	udiv	r3, r3, r2
 8015516:	fb02 0818 	mls	r8, r2, r8, r0
 801551a:	fa1f f888 	uxth.w	r8, r8
 801551e:	fb08 f803 	mul.w	r8, r8, r3
 8015522:	6823      	ldr	r3, [r4, #0]
 8015524:	f108 0804 	add.w	r8, r8, #4
 8015528:	4498      	add	r8, r3
 801552a:	4607      	mov	r7, r0
 801552c:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8015530:	7b23      	ldrb	r3, [r4, #12]
 8015532:	e768      	b.n	8015406 <uxr_prepare_output_stream_fragmented+0x66>
 8015534:	0801522d 	.word	0x0801522d

08015538 <uxr_serialize_message_header>:
 8015538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801553c:	4617      	mov	r7, r2
 801553e:	4604      	mov	r4, r0
 8015540:	461e      	mov	r6, r3
 8015542:	460d      	mov	r5, r1
 8015544:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015548:	f7f7 ff20 	bl	800d38c <ucdr_serialize_uint8_t>
 801554c:	4639      	mov	r1, r7
 801554e:	4620      	mov	r0, r4
 8015550:	f7f7 ff1c 	bl	800d38c <ucdr_serialize_uint8_t>
 8015554:	4632      	mov	r2, r6
 8015556:	4620      	mov	r0, r4
 8015558:	2101      	movs	r1, #1
 801555a:	f7f7 ffc3 	bl	800d4e4 <ucdr_serialize_endian_uint16_t>
 801555e:	062b      	lsls	r3, r5, #24
 8015560:	d501      	bpl.n	8015566 <uxr_serialize_message_header+0x2e>
 8015562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015566:	4641      	mov	r1, r8
 8015568:	4620      	mov	r0, r4
 801556a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801556e:	2204      	movs	r2, #4
 8015570:	f7fd b930 	b.w	80127d4 <ucdr_serialize_array_uint8_t>

08015574 <uxr_deserialize_message_header>:
 8015574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015578:	4617      	mov	r7, r2
 801557a:	4604      	mov	r4, r0
 801557c:	461e      	mov	r6, r3
 801557e:	460d      	mov	r5, r1
 8015580:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015584:	f7f7 ff18 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015588:	4639      	mov	r1, r7
 801558a:	4620      	mov	r0, r4
 801558c:	f7f7 ff14 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015590:	4632      	mov	r2, r6
 8015592:	4620      	mov	r0, r4
 8015594:	2101      	movs	r1, #1
 8015596:	f7f8 f899 	bl	800d6cc <ucdr_deserialize_endian_uint16_t>
 801559a:	f995 3000 	ldrsb.w	r3, [r5]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	da01      	bge.n	80155a6 <uxr_deserialize_message_header+0x32>
 80155a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155a6:	4641      	mov	r1, r8
 80155a8:	4620      	mov	r0, r4
 80155aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155ae:	2204      	movs	r2, #4
 80155b0:	f7fd b974 	b.w	801289c <ucdr_deserialize_array_uint8_t>

080155b4 <uxr_serialize_submessage_header>:
 80155b4:	b570      	push	{r4, r5, r6, lr}
 80155b6:	4616      	mov	r6, r2
 80155b8:	4604      	mov	r4, r0
 80155ba:	461d      	mov	r5, r3
 80155bc:	f7f7 fee6 	bl	800d38c <ucdr_serialize_uint8_t>
 80155c0:	4631      	mov	r1, r6
 80155c2:	4620      	mov	r0, r4
 80155c4:	f7f7 fee2 	bl	800d38c <ucdr_serialize_uint8_t>
 80155c8:	462a      	mov	r2, r5
 80155ca:	4620      	mov	r0, r4
 80155cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155d0:	2101      	movs	r1, #1
 80155d2:	f7f7 bf87 	b.w	800d4e4 <ucdr_serialize_endian_uint16_t>
 80155d6:	bf00      	nop

080155d8 <uxr_deserialize_submessage_header>:
 80155d8:	b570      	push	{r4, r5, r6, lr}
 80155da:	4616      	mov	r6, r2
 80155dc:	4604      	mov	r4, r0
 80155de:	461d      	mov	r5, r3
 80155e0:	f7f7 feea 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80155e4:	4631      	mov	r1, r6
 80155e6:	4620      	mov	r0, r4
 80155e8:	f7f7 fee6 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80155ec:	462a      	mov	r2, r5
 80155ee:	4620      	mov	r0, r4
 80155f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80155f4:	2101      	movs	r1, #1
 80155f6:	f7f8 b869 	b.w	800d6cc <ucdr_deserialize_endian_uint16_t>
 80155fa:	bf00      	nop

080155fc <uxr_serialize_CLIENT_Representation>:
 80155fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015600:	2204      	movs	r2, #4
 8015602:	460c      	mov	r4, r1
 8015604:	4605      	mov	r5, r0
 8015606:	f7fd f8e5 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 801560a:	2202      	movs	r2, #2
 801560c:	4606      	mov	r6, r0
 801560e:	1d21      	adds	r1, r4, #4
 8015610:	4628      	mov	r0, r5
 8015612:	f7fd f8df 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015616:	2202      	movs	r2, #2
 8015618:	1da1      	adds	r1, r4, #6
 801561a:	4006      	ands	r6, r0
 801561c:	4628      	mov	r0, r5
 801561e:	f7fd f8d9 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015622:	4603      	mov	r3, r0
 8015624:	2204      	movs	r2, #4
 8015626:	f104 0108 	add.w	r1, r4, #8
 801562a:	4628      	mov	r0, r5
 801562c:	b2f6      	uxtb	r6, r6
 801562e:	401e      	ands	r6, r3
 8015630:	f7fd f8d0 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015634:	4603      	mov	r3, r0
 8015636:	7b21      	ldrb	r1, [r4, #12]
 8015638:	4628      	mov	r0, r5
 801563a:	401e      	ands	r6, r3
 801563c:	f7f7 fea6 	bl	800d38c <ucdr_serialize_uint8_t>
 8015640:	4603      	mov	r3, r0
 8015642:	7b61      	ldrb	r1, [r4, #13]
 8015644:	4628      	mov	r0, r5
 8015646:	401e      	ands	r6, r3
 8015648:	f7f7 fe72 	bl	800d330 <ucdr_serialize_bool>
 801564c:	7b63      	ldrb	r3, [r4, #13]
 801564e:	4006      	ands	r6, r0
 8015650:	b933      	cbnz	r3, 8015660 <uxr_serialize_CLIENT_Representation+0x64>
 8015652:	4628      	mov	r0, r5
 8015654:	8ba1      	ldrh	r1, [r4, #28]
 8015656:	f7f7 fec5 	bl	800d3e4 <ucdr_serialize_uint16_t>
 801565a:	4030      	ands	r0, r6
 801565c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015660:	4628      	mov	r0, r5
 8015662:	6921      	ldr	r1, [r4, #16]
 8015664:	f7f8 f8ac 	bl	800d7c0 <ucdr_serialize_uint32_t>
 8015668:	6923      	ldr	r3, [r4, #16]
 801566a:	b1cb      	cbz	r3, 80156a0 <uxr_serialize_CLIENT_Representation+0xa4>
 801566c:	b1d0      	cbz	r0, 80156a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801566e:	46a0      	mov	r8, r4
 8015670:	f04f 0900 	mov.w	r9, #0
 8015674:	e002      	b.n	801567c <uxr_serialize_CLIENT_Representation+0x80>
 8015676:	f108 0808 	add.w	r8, r8, #8
 801567a:	b198      	cbz	r0, 80156a4 <uxr_serialize_CLIENT_Representation+0xa8>
 801567c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015680:	4628      	mov	r0, r5
 8015682:	f004 f853 	bl	801972c <ucdr_serialize_string>
 8015686:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801568a:	4607      	mov	r7, r0
 801568c:	4628      	mov	r0, r5
 801568e:	f004 f84d 	bl	801972c <ucdr_serialize_string>
 8015692:	6923      	ldr	r3, [r4, #16]
 8015694:	f109 0901 	add.w	r9, r9, #1
 8015698:	4038      	ands	r0, r7
 801569a:	4599      	cmp	r9, r3
 801569c:	b2c0      	uxtb	r0, r0
 801569e:	d3ea      	bcc.n	8015676 <uxr_serialize_CLIENT_Representation+0x7a>
 80156a0:	4006      	ands	r6, r0
 80156a2:	e7d6      	b.n	8015652 <uxr_serialize_CLIENT_Representation+0x56>
 80156a4:	2600      	movs	r6, #0
 80156a6:	e7d4      	b.n	8015652 <uxr_serialize_CLIENT_Representation+0x56>

080156a8 <uxr_deserialize_CLIENT_Representation>:
 80156a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156ac:	2204      	movs	r2, #4
 80156ae:	460c      	mov	r4, r1
 80156b0:	4605      	mov	r5, r0
 80156b2:	f7fd f8f3 	bl	801289c <ucdr_deserialize_array_uint8_t>
 80156b6:	2202      	movs	r2, #2
 80156b8:	4606      	mov	r6, r0
 80156ba:	1d21      	adds	r1, r4, #4
 80156bc:	4628      	mov	r0, r5
 80156be:	f7fd f8ed 	bl	801289c <ucdr_deserialize_array_uint8_t>
 80156c2:	2202      	movs	r2, #2
 80156c4:	1da1      	adds	r1, r4, #6
 80156c6:	4006      	ands	r6, r0
 80156c8:	4628      	mov	r0, r5
 80156ca:	f7fd f8e7 	bl	801289c <ucdr_deserialize_array_uint8_t>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2204      	movs	r2, #4
 80156d2:	f104 0108 	add.w	r1, r4, #8
 80156d6:	4628      	mov	r0, r5
 80156d8:	b2f6      	uxtb	r6, r6
 80156da:	401e      	ands	r6, r3
 80156dc:	f7fd f8de 	bl	801289c <ucdr_deserialize_array_uint8_t>
 80156e0:	4603      	mov	r3, r0
 80156e2:	f104 010c 	add.w	r1, r4, #12
 80156e6:	4628      	mov	r0, r5
 80156e8:	401e      	ands	r6, r3
 80156ea:	f7f7 fe65 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80156ee:	4603      	mov	r3, r0
 80156f0:	f104 010d 	add.w	r1, r4, #13
 80156f4:	4628      	mov	r0, r5
 80156f6:	401e      	ands	r6, r3
 80156f8:	f7f7 fe30 	bl	800d35c <ucdr_deserialize_bool>
 80156fc:	7b63      	ldrb	r3, [r4, #13]
 80156fe:	4006      	ands	r6, r0
 8015700:	b93b      	cbnz	r3, 8015712 <uxr_deserialize_CLIENT_Representation+0x6a>
 8015702:	4628      	mov	r0, r5
 8015704:	f104 011c 	add.w	r1, r4, #28
 8015708:	f7f7 ff6c 	bl	800d5e4 <ucdr_deserialize_uint16_t>
 801570c:	4030      	ands	r0, r6
 801570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015712:	4628      	mov	r0, r5
 8015714:	f104 0110 	add.w	r1, r4, #16
 8015718:	f7f8 f982 	bl	800da20 <ucdr_deserialize_uint32_t>
 801571c:	6923      	ldr	r3, [r4, #16]
 801571e:	2b01      	cmp	r3, #1
 8015720:	d903      	bls.n	801572a <uxr_deserialize_CLIENT_Representation+0x82>
 8015722:	2301      	movs	r3, #1
 8015724:	2600      	movs	r6, #0
 8015726:	75ab      	strb	r3, [r5, #22]
 8015728:	e7eb      	b.n	8015702 <uxr_deserialize_CLIENT_Representation+0x5a>
 801572a:	b1eb      	cbz	r3, 8015768 <uxr_deserialize_CLIENT_Representation+0xc0>
 801572c:	b1f0      	cbz	r0, 801576c <uxr_deserialize_CLIENT_Representation+0xc4>
 801572e:	46a0      	mov	r8, r4
 8015730:	f04f 0900 	mov.w	r9, #0
 8015734:	e002      	b.n	801573c <uxr_deserialize_CLIENT_Representation+0x94>
 8015736:	f108 0808 	add.w	r8, r8, #8
 801573a:	b1b8      	cbz	r0, 801576c <uxr_deserialize_CLIENT_Representation+0xc4>
 801573c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015740:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015744:	4628      	mov	r0, r5
 8015746:	f003 ffff 	bl	8019748 <ucdr_deserialize_string>
 801574a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801574e:	4607      	mov	r7, r0
 8015750:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015754:	4628      	mov	r0, r5
 8015756:	f003 fff7 	bl	8019748 <ucdr_deserialize_string>
 801575a:	6923      	ldr	r3, [r4, #16]
 801575c:	f109 0901 	add.w	r9, r9, #1
 8015760:	4038      	ands	r0, r7
 8015762:	4599      	cmp	r9, r3
 8015764:	b2c0      	uxtb	r0, r0
 8015766:	d3e6      	bcc.n	8015736 <uxr_deserialize_CLIENT_Representation+0x8e>
 8015768:	4006      	ands	r6, r0
 801576a:	e7ca      	b.n	8015702 <uxr_deserialize_CLIENT_Representation+0x5a>
 801576c:	2600      	movs	r6, #0
 801576e:	e7c8      	b.n	8015702 <uxr_deserialize_CLIENT_Representation+0x5a>

08015770 <uxr_serialize_AGENT_Representation>:
 8015770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015774:	2204      	movs	r2, #4
 8015776:	460c      	mov	r4, r1
 8015778:	4605      	mov	r5, r0
 801577a:	f7fd f82b 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 801577e:	2202      	movs	r2, #2
 8015780:	4606      	mov	r6, r0
 8015782:	1d21      	adds	r1, r4, #4
 8015784:	4628      	mov	r0, r5
 8015786:	f7fd f825 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 801578a:	2202      	movs	r2, #2
 801578c:	1da1      	adds	r1, r4, #6
 801578e:	4006      	ands	r6, r0
 8015790:	4628      	mov	r0, r5
 8015792:	f7fd f81f 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015796:	4603      	mov	r3, r0
 8015798:	7a21      	ldrb	r1, [r4, #8]
 801579a:	4628      	mov	r0, r5
 801579c:	b2f6      	uxtb	r6, r6
 801579e:	401e      	ands	r6, r3
 80157a0:	f7f7 fdc6 	bl	800d330 <ucdr_serialize_bool>
 80157a4:	7a23      	ldrb	r3, [r4, #8]
 80157a6:	ea00 0706 	and.w	r7, r0, r6
 80157aa:	b913      	cbnz	r3, 80157b2 <uxr_serialize_AGENT_Representation+0x42>
 80157ac:	4638      	mov	r0, r7
 80157ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157b2:	4628      	mov	r0, r5
 80157b4:	68e1      	ldr	r1, [r4, #12]
 80157b6:	f7f8 f803 	bl	800d7c0 <ucdr_serialize_uint32_t>
 80157ba:	68e3      	ldr	r3, [r4, #12]
 80157bc:	b313      	cbz	r3, 8015804 <uxr_serialize_AGENT_Representation+0x94>
 80157be:	b1e8      	cbz	r0, 80157fc <uxr_serialize_AGENT_Representation+0x8c>
 80157c0:	46a0      	mov	r8, r4
 80157c2:	f04f 0900 	mov.w	r9, #0
 80157c6:	e002      	b.n	80157ce <uxr_serialize_AGENT_Representation+0x5e>
 80157c8:	f108 0808 	add.w	r8, r8, #8
 80157cc:	b1b3      	cbz	r3, 80157fc <uxr_serialize_AGENT_Representation+0x8c>
 80157ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80157d2:	4628      	mov	r0, r5
 80157d4:	f003 ffaa 	bl	801972c <ucdr_serialize_string>
 80157d8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80157dc:	4606      	mov	r6, r0
 80157de:	4628      	mov	r0, r5
 80157e0:	f003 ffa4 	bl	801972c <ucdr_serialize_string>
 80157e4:	68e2      	ldr	r2, [r4, #12]
 80157e6:	f109 0901 	add.w	r9, r9, #1
 80157ea:	ea06 0300 	and.w	r3, r6, r0
 80157ee:	4591      	cmp	r9, r2
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	d3e9      	bcc.n	80157c8 <uxr_serialize_AGENT_Representation+0x58>
 80157f4:	401f      	ands	r7, r3
 80157f6:	4638      	mov	r0, r7
 80157f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157fc:	2700      	movs	r7, #0
 80157fe:	4638      	mov	r0, r7
 8015800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015804:	4007      	ands	r7, r0
 8015806:	e7d1      	b.n	80157ac <uxr_serialize_AGENT_Representation+0x3c>

08015808 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015808:	b570      	push	{r4, r5, r6, lr}
 801580a:	460d      	mov	r5, r1
 801580c:	7809      	ldrb	r1, [r1, #0]
 801580e:	4606      	mov	r6, r0
 8015810:	f7f7 fd8e 	bl	800d330 <ucdr_serialize_bool>
 8015814:	782b      	ldrb	r3, [r5, #0]
 8015816:	4604      	mov	r4, r0
 8015818:	b94b      	cbnz	r3, 801582e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801581a:	4630      	mov	r0, r6
 801581c:	7a29      	ldrb	r1, [r5, #8]
 801581e:	f7f7 fd87 	bl	800d330 <ucdr_serialize_bool>
 8015822:	7a2b      	ldrb	r3, [r5, #8]
 8015824:	4004      	ands	r4, r0
 8015826:	b2e4      	uxtb	r4, r4
 8015828:	b943      	cbnz	r3, 801583c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801582a:	4620      	mov	r0, r4
 801582c:	bd70      	pop	{r4, r5, r6, pc}
 801582e:	4630      	mov	r0, r6
 8015830:	6869      	ldr	r1, [r5, #4]
 8015832:	f003 ff7b 	bl	801972c <ucdr_serialize_string>
 8015836:	4004      	ands	r4, r0
 8015838:	b2e4      	uxtb	r4, r4
 801583a:	e7ee      	b.n	801581a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801583c:	4630      	mov	r0, r6
 801583e:	68e9      	ldr	r1, [r5, #12]
 8015840:	f003 ff74 	bl	801972c <ucdr_serialize_string>
 8015844:	4004      	ands	r4, r0
 8015846:	4620      	mov	r0, r4
 8015848:	bd70      	pop	{r4, r5, r6, pc}
 801584a:	bf00      	nop

0801584c <uxr_serialize_OBJK_Topic_Binary>:
 801584c:	b570      	push	{r4, r5, r6, lr}
 801584e:	460d      	mov	r5, r1
 8015850:	6809      	ldr	r1, [r1, #0]
 8015852:	4606      	mov	r6, r0
 8015854:	f003 ff6a 	bl	801972c <ucdr_serialize_string>
 8015858:	7929      	ldrb	r1, [r5, #4]
 801585a:	4604      	mov	r4, r0
 801585c:	4630      	mov	r0, r6
 801585e:	f7f7 fd67 	bl	800d330 <ucdr_serialize_bool>
 8015862:	792b      	ldrb	r3, [r5, #4]
 8015864:	4004      	ands	r4, r0
 8015866:	b2e4      	uxtb	r4, r4
 8015868:	b943      	cbnz	r3, 801587c <uxr_serialize_OBJK_Topic_Binary+0x30>
 801586a:	4630      	mov	r0, r6
 801586c:	7b29      	ldrb	r1, [r5, #12]
 801586e:	f7f7 fd5f 	bl	800d330 <ucdr_serialize_bool>
 8015872:	7b2b      	ldrb	r3, [r5, #12]
 8015874:	4004      	ands	r4, r0
 8015876:	b93b      	cbnz	r3, 8015888 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015878:	4620      	mov	r0, r4
 801587a:	bd70      	pop	{r4, r5, r6, pc}
 801587c:	4630      	mov	r0, r6
 801587e:	68a9      	ldr	r1, [r5, #8]
 8015880:	f003 ff54 	bl	801972c <ucdr_serialize_string>
 8015884:	4004      	ands	r4, r0
 8015886:	e7f0      	b.n	801586a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015888:	4630      	mov	r0, r6
 801588a:	6929      	ldr	r1, [r5, #16]
 801588c:	f003 ff4e 	bl	801972c <ucdr_serialize_string>
 8015890:	4004      	ands	r4, r0
 8015892:	b2e4      	uxtb	r4, r4
 8015894:	4620      	mov	r0, r4
 8015896:	bd70      	pop	{r4, r5, r6, pc}

08015898 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801589c:	460c      	mov	r4, r1
 801589e:	7809      	ldrb	r1, [r1, #0]
 80158a0:	4606      	mov	r6, r0
 80158a2:	f7f7 fd45 	bl	800d330 <ucdr_serialize_bool>
 80158a6:	7823      	ldrb	r3, [r4, #0]
 80158a8:	4605      	mov	r5, r0
 80158aa:	b96b      	cbnz	r3, 80158c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80158ac:	4630      	mov	r0, r6
 80158ae:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80158b2:	f7f7 fd3d 	bl	800d330 <ucdr_serialize_bool>
 80158b6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80158ba:	4005      	ands	r5, r0
 80158bc:	b2ed      	uxtb	r5, r5
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d169      	bne.n	8015996 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80158c2:	4628      	mov	r0, r5
 80158c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158c8:	4630      	mov	r0, r6
 80158ca:	6861      	ldr	r1, [r4, #4]
 80158cc:	f7f7 ff78 	bl	800d7c0 <ucdr_serialize_uint32_t>
 80158d0:	6863      	ldr	r3, [r4, #4]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d06b      	beq.n	80159ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80158d6:	2800      	cmp	r0, #0
 80158d8:	d067      	beq.n	80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158da:	4630      	mov	r0, r6
 80158dc:	68a1      	ldr	r1, [r4, #8]
 80158de:	f003 ff25 	bl	801972c <ucdr_serialize_string>
 80158e2:	6863      	ldr	r3, [r4, #4]
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d953      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d05e      	beq.n	80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158ec:	4630      	mov	r0, r6
 80158ee:	68e1      	ldr	r1, [r4, #12]
 80158f0:	f003 ff1c 	bl	801972c <ucdr_serialize_string>
 80158f4:	6863      	ldr	r3, [r4, #4]
 80158f6:	2b02      	cmp	r3, #2
 80158f8:	d94a      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80158fa:	2800      	cmp	r0, #0
 80158fc:	d055      	beq.n	80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80158fe:	4630      	mov	r0, r6
 8015900:	6921      	ldr	r1, [r4, #16]
 8015902:	f003 ff13 	bl	801972c <ucdr_serialize_string>
 8015906:	6863      	ldr	r3, [r4, #4]
 8015908:	2b03      	cmp	r3, #3
 801590a:	d941      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801590c:	2800      	cmp	r0, #0
 801590e:	d04c      	beq.n	80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015910:	4630      	mov	r0, r6
 8015912:	6961      	ldr	r1, [r4, #20]
 8015914:	f003 ff0a 	bl	801972c <ucdr_serialize_string>
 8015918:	6863      	ldr	r3, [r4, #4]
 801591a:	2b04      	cmp	r3, #4
 801591c:	d938      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801591e:	2800      	cmp	r0, #0
 8015920:	d043      	beq.n	80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015922:	4630      	mov	r0, r6
 8015924:	69a1      	ldr	r1, [r4, #24]
 8015926:	f003 ff01 	bl	801972c <ucdr_serialize_string>
 801592a:	6863      	ldr	r3, [r4, #4]
 801592c:	2b05      	cmp	r3, #5
 801592e:	d92f      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015930:	2800      	cmp	r0, #0
 8015932:	d03a      	beq.n	80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015934:	4630      	mov	r0, r6
 8015936:	69e1      	ldr	r1, [r4, #28]
 8015938:	f003 fef8 	bl	801972c <ucdr_serialize_string>
 801593c:	6863      	ldr	r3, [r4, #4]
 801593e:	2b06      	cmp	r3, #6
 8015940:	d926      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015942:	b390      	cbz	r0, 80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015944:	4630      	mov	r0, r6
 8015946:	6a21      	ldr	r1, [r4, #32]
 8015948:	f003 fef0 	bl	801972c <ucdr_serialize_string>
 801594c:	6863      	ldr	r3, [r4, #4]
 801594e:	2b07      	cmp	r3, #7
 8015950:	d91e      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015952:	b350      	cbz	r0, 80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015954:	4630      	mov	r0, r6
 8015956:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015958:	f003 fee8 	bl	801972c <ucdr_serialize_string>
 801595c:	6863      	ldr	r3, [r4, #4]
 801595e:	2b08      	cmp	r3, #8
 8015960:	d916      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015962:	b310      	cbz	r0, 80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015964:	4630      	mov	r0, r6
 8015966:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015968:	f003 fee0 	bl	801972c <ucdr_serialize_string>
 801596c:	6863      	ldr	r3, [r4, #4]
 801596e:	2b09      	cmp	r3, #9
 8015970:	d90e      	bls.n	8015990 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015972:	b1d0      	cbz	r0, 80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015974:	2709      	movs	r7, #9
 8015976:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801597a:	e000      	b.n	801597e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 801597c:	b1a8      	cbz	r0, 80159aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801597e:	4630      	mov	r0, r6
 8015980:	f858 1b04 	ldr.w	r1, [r8], #4
 8015984:	f003 fed2 	bl	801972c <ucdr_serialize_string>
 8015988:	6862      	ldr	r2, [r4, #4]
 801598a:	3701      	adds	r7, #1
 801598c:	4297      	cmp	r7, r2
 801598e:	d3f5      	bcc.n	801597c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015990:	4005      	ands	r5, r0
 8015992:	b2ed      	uxtb	r5, r5
 8015994:	e78a      	b.n	80158ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015996:	4630      	mov	r0, r6
 8015998:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801599a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801599e:	f7fd fa0f 	bl	8012dc0 <ucdr_serialize_sequence_uint8_t>
 80159a2:	4005      	ands	r5, r0
 80159a4:	4628      	mov	r0, r5
 80159a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159aa:	2500      	movs	r5, #0
 80159ac:	e77e      	b.n	80158ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80159ae:	4028      	ands	r0, r5
 80159b0:	b2c5      	uxtb	r5, r0
 80159b2:	e77b      	b.n	80158ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080159b4 <uxr_serialize_OBJK_Publisher_Binary>:
 80159b4:	b570      	push	{r4, r5, r6, lr}
 80159b6:	460d      	mov	r5, r1
 80159b8:	7809      	ldrb	r1, [r1, #0]
 80159ba:	4606      	mov	r6, r0
 80159bc:	f7f7 fcb8 	bl	800d330 <ucdr_serialize_bool>
 80159c0:	782b      	ldrb	r3, [r5, #0]
 80159c2:	4604      	mov	r4, r0
 80159c4:	b94b      	cbnz	r3, 80159da <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80159c6:	4630      	mov	r0, r6
 80159c8:	7a29      	ldrb	r1, [r5, #8]
 80159ca:	f7f7 fcb1 	bl	800d330 <ucdr_serialize_bool>
 80159ce:	7a2b      	ldrb	r3, [r5, #8]
 80159d0:	4004      	ands	r4, r0
 80159d2:	b2e4      	uxtb	r4, r4
 80159d4:	b943      	cbnz	r3, 80159e8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80159d6:	4620      	mov	r0, r4
 80159d8:	bd70      	pop	{r4, r5, r6, pc}
 80159da:	4630      	mov	r0, r6
 80159dc:	6869      	ldr	r1, [r5, #4]
 80159de:	f003 fea5 	bl	801972c <ucdr_serialize_string>
 80159e2:	4004      	ands	r4, r0
 80159e4:	b2e4      	uxtb	r4, r4
 80159e6:	e7ee      	b.n	80159c6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80159e8:	4630      	mov	r0, r6
 80159ea:	f105 010c 	add.w	r1, r5, #12
 80159ee:	f7ff ff53 	bl	8015898 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80159f2:	4004      	ands	r4, r0
 80159f4:	4620      	mov	r0, r4
 80159f6:	bd70      	pop	{r4, r5, r6, pc}

080159f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80159f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159fc:	460c      	mov	r4, r1
 80159fe:	7809      	ldrb	r1, [r1, #0]
 8015a00:	4606      	mov	r6, r0
 8015a02:	f7f7 fc95 	bl	800d330 <ucdr_serialize_bool>
 8015a06:	7823      	ldrb	r3, [r4, #0]
 8015a08:	4605      	mov	r5, r0
 8015a0a:	b96b      	cbnz	r3, 8015a28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8015a0c:	4630      	mov	r0, r6
 8015a0e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8015a12:	f7f7 fc8d 	bl	800d330 <ucdr_serialize_bool>
 8015a16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015a1a:	4005      	ands	r5, r0
 8015a1c:	b2ed      	uxtb	r5, r5
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d169      	bne.n	8015af6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8015a22:	4628      	mov	r0, r5
 8015a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a28:	4630      	mov	r0, r6
 8015a2a:	6861      	ldr	r1, [r4, #4]
 8015a2c:	f7f7 fec8 	bl	800d7c0 <ucdr_serialize_uint32_t>
 8015a30:	6863      	ldr	r3, [r4, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d06b      	beq.n	8015b0e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8015a36:	2800      	cmp	r0, #0
 8015a38:	d067      	beq.n	8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a3a:	4630      	mov	r0, r6
 8015a3c:	68a1      	ldr	r1, [r4, #8]
 8015a3e:	f003 fe75 	bl	801972c <ucdr_serialize_string>
 8015a42:	6863      	ldr	r3, [r4, #4]
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d953      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	d05e      	beq.n	8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a4c:	4630      	mov	r0, r6
 8015a4e:	68e1      	ldr	r1, [r4, #12]
 8015a50:	f003 fe6c 	bl	801972c <ucdr_serialize_string>
 8015a54:	6863      	ldr	r3, [r4, #4]
 8015a56:	2b02      	cmp	r3, #2
 8015a58:	d94a      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	d055      	beq.n	8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a5e:	4630      	mov	r0, r6
 8015a60:	6921      	ldr	r1, [r4, #16]
 8015a62:	f003 fe63 	bl	801972c <ucdr_serialize_string>
 8015a66:	6863      	ldr	r3, [r4, #4]
 8015a68:	2b03      	cmp	r3, #3
 8015a6a:	d941      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a6c:	2800      	cmp	r0, #0
 8015a6e:	d04c      	beq.n	8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a70:	4630      	mov	r0, r6
 8015a72:	6961      	ldr	r1, [r4, #20]
 8015a74:	f003 fe5a 	bl	801972c <ucdr_serialize_string>
 8015a78:	6863      	ldr	r3, [r4, #4]
 8015a7a:	2b04      	cmp	r3, #4
 8015a7c:	d938      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d043      	beq.n	8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a82:	4630      	mov	r0, r6
 8015a84:	69a1      	ldr	r1, [r4, #24]
 8015a86:	f003 fe51 	bl	801972c <ucdr_serialize_string>
 8015a8a:	6863      	ldr	r3, [r4, #4]
 8015a8c:	2b05      	cmp	r3, #5
 8015a8e:	d92f      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015a90:	2800      	cmp	r0, #0
 8015a92:	d03a      	beq.n	8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015a94:	4630      	mov	r0, r6
 8015a96:	69e1      	ldr	r1, [r4, #28]
 8015a98:	f003 fe48 	bl	801972c <ucdr_serialize_string>
 8015a9c:	6863      	ldr	r3, [r4, #4]
 8015a9e:	2b06      	cmp	r3, #6
 8015aa0:	d926      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015aa2:	b390      	cbz	r0, 8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015aa4:	4630      	mov	r0, r6
 8015aa6:	6a21      	ldr	r1, [r4, #32]
 8015aa8:	f003 fe40 	bl	801972c <ucdr_serialize_string>
 8015aac:	6863      	ldr	r3, [r4, #4]
 8015aae:	2b07      	cmp	r3, #7
 8015ab0:	d91e      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ab2:	b350      	cbz	r0, 8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015ab8:	f003 fe38 	bl	801972c <ucdr_serialize_string>
 8015abc:	6863      	ldr	r3, [r4, #4]
 8015abe:	2b08      	cmp	r3, #8
 8015ac0:	d916      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ac2:	b310      	cbz	r0, 8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015ac8:	f003 fe30 	bl	801972c <ucdr_serialize_string>
 8015acc:	6863      	ldr	r3, [r4, #4]
 8015ace:	2b09      	cmp	r3, #9
 8015ad0:	d90e      	bls.n	8015af0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ad2:	b1d0      	cbz	r0, 8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ad4:	2709      	movs	r7, #9
 8015ad6:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015ada:	e000      	b.n	8015ade <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8015adc:	b1a8      	cbz	r0, 8015b0a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ade:	4630      	mov	r0, r6
 8015ae0:	f858 1b04 	ldr.w	r1, [r8], #4
 8015ae4:	f003 fe22 	bl	801972c <ucdr_serialize_string>
 8015ae8:	6862      	ldr	r2, [r4, #4]
 8015aea:	3701      	adds	r7, #1
 8015aec:	4297      	cmp	r7, r2
 8015aee:	d3f5      	bcc.n	8015adc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8015af0:	4005      	ands	r5, r0
 8015af2:	b2ed      	uxtb	r5, r5
 8015af4:	e78a      	b.n	8015a0c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015af6:	4630      	mov	r0, r6
 8015af8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015afa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015afe:	f7fd f95f 	bl	8012dc0 <ucdr_serialize_sequence_uint8_t>
 8015b02:	4005      	ands	r5, r0
 8015b04:	4628      	mov	r0, r5
 8015b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b0a:	2500      	movs	r5, #0
 8015b0c:	e77e      	b.n	8015a0c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015b0e:	4028      	ands	r0, r5
 8015b10:	b2c5      	uxtb	r5, r0
 8015b12:	e77b      	b.n	8015a0c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015b14 <uxr_serialize_OBJK_Subscriber_Binary>:
 8015b14:	b570      	push	{r4, r5, r6, lr}
 8015b16:	460d      	mov	r5, r1
 8015b18:	7809      	ldrb	r1, [r1, #0]
 8015b1a:	4606      	mov	r6, r0
 8015b1c:	f7f7 fc08 	bl	800d330 <ucdr_serialize_bool>
 8015b20:	782b      	ldrb	r3, [r5, #0]
 8015b22:	4604      	mov	r4, r0
 8015b24:	b94b      	cbnz	r3, 8015b3a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8015b26:	4630      	mov	r0, r6
 8015b28:	7a29      	ldrb	r1, [r5, #8]
 8015b2a:	f7f7 fc01 	bl	800d330 <ucdr_serialize_bool>
 8015b2e:	7a2b      	ldrb	r3, [r5, #8]
 8015b30:	4004      	ands	r4, r0
 8015b32:	b2e4      	uxtb	r4, r4
 8015b34:	b943      	cbnz	r3, 8015b48 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8015b36:	4620      	mov	r0, r4
 8015b38:	bd70      	pop	{r4, r5, r6, pc}
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	6869      	ldr	r1, [r5, #4]
 8015b3e:	f003 fdf5 	bl	801972c <ucdr_serialize_string>
 8015b42:	4004      	ands	r4, r0
 8015b44:	b2e4      	uxtb	r4, r4
 8015b46:	e7ee      	b.n	8015b26 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8015b48:	4630      	mov	r0, r6
 8015b4a:	f105 010c 	add.w	r1, r5, #12
 8015b4e:	f7ff ff53 	bl	80159f8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8015b52:	4004      	ands	r4, r0
 8015b54:	4620      	mov	r0, r4
 8015b56:	bd70      	pop	{r4, r5, r6, pc}

08015b58 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015b58:	b570      	push	{r4, r5, r6, lr}
 8015b5a:	460d      	mov	r5, r1
 8015b5c:	8809      	ldrh	r1, [r1, #0]
 8015b5e:	4606      	mov	r6, r0
 8015b60:	f7f7 fc40 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8015b64:	78a9      	ldrb	r1, [r5, #2]
 8015b66:	4604      	mov	r4, r0
 8015b68:	4630      	mov	r0, r6
 8015b6a:	f7f7 fbe1 	bl	800d330 <ucdr_serialize_bool>
 8015b6e:	78ab      	ldrb	r3, [r5, #2]
 8015b70:	4004      	ands	r4, r0
 8015b72:	b2e4      	uxtb	r4, r4
 8015b74:	b9b3      	cbnz	r3, 8015ba4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8015b76:	4630      	mov	r0, r6
 8015b78:	79a9      	ldrb	r1, [r5, #6]
 8015b7a:	f7f7 fbd9 	bl	800d330 <ucdr_serialize_bool>
 8015b7e:	79ab      	ldrb	r3, [r5, #6]
 8015b80:	4004      	ands	r4, r0
 8015b82:	bb33      	cbnz	r3, 8015bd2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8015b84:	4630      	mov	r0, r6
 8015b86:	7b29      	ldrb	r1, [r5, #12]
 8015b88:	f7f7 fbd2 	bl	800d330 <ucdr_serialize_bool>
 8015b8c:	7b2b      	ldrb	r3, [r5, #12]
 8015b8e:	4004      	ands	r4, r0
 8015b90:	b9c3      	cbnz	r3, 8015bc4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8015b92:	4630      	mov	r0, r6
 8015b94:	7d29      	ldrb	r1, [r5, #20]
 8015b96:	f7f7 fbcb 	bl	800d330 <ucdr_serialize_bool>
 8015b9a:	7d2b      	ldrb	r3, [r5, #20]
 8015b9c:	4004      	ands	r4, r0
 8015b9e:	b93b      	cbnz	r3, 8015bb0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	bd70      	pop	{r4, r5, r6, pc}
 8015ba4:	4630      	mov	r0, r6
 8015ba6:	88a9      	ldrh	r1, [r5, #4]
 8015ba8:	f7f7 fc1c 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8015bac:	4004      	ands	r4, r0
 8015bae:	e7e2      	b.n	8015b76 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	69aa      	ldr	r2, [r5, #24]
 8015bb4:	f105 011c 	add.w	r1, r5, #28
 8015bb8:	f7fd f902 	bl	8012dc0 <ucdr_serialize_sequence_uint8_t>
 8015bbc:	4004      	ands	r4, r0
 8015bbe:	b2e4      	uxtb	r4, r4
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	bd70      	pop	{r4, r5, r6, pc}
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	6929      	ldr	r1, [r5, #16]
 8015bc8:	f7f7 fdfa 	bl	800d7c0 <ucdr_serialize_uint32_t>
 8015bcc:	4004      	ands	r4, r0
 8015bce:	b2e4      	uxtb	r4, r4
 8015bd0:	e7df      	b.n	8015b92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	68a9      	ldr	r1, [r5, #8]
 8015bd6:	f7f7 fdf3 	bl	800d7c0 <ucdr_serialize_uint32_t>
 8015bda:	4004      	ands	r4, r0
 8015bdc:	b2e4      	uxtb	r4, r4
 8015bde:	e7d1      	b.n	8015b84 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08015be0 <uxr_serialize_OBJK_DataReader_Binary>:
 8015be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015be2:	2202      	movs	r2, #2
 8015be4:	460c      	mov	r4, r1
 8015be6:	4606      	mov	r6, r0
 8015be8:	f7fc fdf4 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015bec:	78a1      	ldrb	r1, [r4, #2]
 8015bee:	4605      	mov	r5, r0
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	f7f7 fb9d 	bl	800d330 <ucdr_serialize_bool>
 8015bf6:	78a3      	ldrb	r3, [r4, #2]
 8015bf8:	4005      	ands	r5, r0
 8015bfa:	b2ed      	uxtb	r5, r5
 8015bfc:	b90b      	cbnz	r3, 8015c02 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8015bfe:	4628      	mov	r0, r5
 8015c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c02:	f104 0108 	add.w	r1, r4, #8
 8015c06:	4630      	mov	r0, r6
 8015c08:	f7ff ffa6 	bl	8015b58 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015c0c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015c10:	4607      	mov	r7, r0
 8015c12:	4630      	mov	r0, r6
 8015c14:	f7f7 fb8c 	bl	800d330 <ucdr_serialize_bool>
 8015c18:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015c1c:	4007      	ands	r7, r0
 8015c1e:	b2ff      	uxtb	r7, r7
 8015c20:	b95b      	cbnz	r3, 8015c3a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8015c22:	4630      	mov	r0, r6
 8015c24:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8015c28:	f7f7 fb82 	bl	800d330 <ucdr_serialize_bool>
 8015c2c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015c30:	4007      	ands	r7, r0
 8015c32:	b94b      	cbnz	r3, 8015c48 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8015c34:	403d      	ands	r5, r7
 8015c36:	4628      	mov	r0, r5
 8015c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8015c40:	f7f8 f814 	bl	800dc6c <ucdr_serialize_uint64_t>
 8015c44:	4007      	ands	r7, r0
 8015c46:	e7ec      	b.n	8015c22 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8015c48:	4630      	mov	r0, r6
 8015c4a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015c4c:	f003 fd6e 	bl	801972c <ucdr_serialize_string>
 8015c50:	4007      	ands	r7, r0
 8015c52:	b2ff      	uxtb	r7, r7
 8015c54:	e7ee      	b.n	8015c34 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8015c56:	bf00      	nop

08015c58 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c5a:	2202      	movs	r2, #2
 8015c5c:	460d      	mov	r5, r1
 8015c5e:	4606      	mov	r6, r0
 8015c60:	f7fc fdb8 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015c64:	78a9      	ldrb	r1, [r5, #2]
 8015c66:	4604      	mov	r4, r0
 8015c68:	4630      	mov	r0, r6
 8015c6a:	f7f7 fb61 	bl	800d330 <ucdr_serialize_bool>
 8015c6e:	78ab      	ldrb	r3, [r5, #2]
 8015c70:	4004      	ands	r4, r0
 8015c72:	b2e4      	uxtb	r4, r4
 8015c74:	b90b      	cbnz	r3, 8015c7a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8015c76:	4620      	mov	r0, r4
 8015c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c7a:	f105 0108 	add.w	r1, r5, #8
 8015c7e:	4630      	mov	r0, r6
 8015c80:	f7ff ff6a 	bl	8015b58 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8015c84:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8015c88:	4607      	mov	r7, r0
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	f7f7 fb50 	bl	800d330 <ucdr_serialize_bool>
 8015c90:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8015c94:	4007      	ands	r7, r0
 8015c96:	b2ff      	uxtb	r7, r7
 8015c98:	b913      	cbnz	r3, 8015ca0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015c9a:	403c      	ands	r4, r7
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ca0:	4630      	mov	r0, r6
 8015ca2:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8015ca6:	f7f7 ffe1 	bl	800dc6c <ucdr_serialize_uint64_t>
 8015caa:	4007      	ands	r7, r0
 8015cac:	e7f5      	b.n	8015c9a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015cae:	bf00      	nop

08015cb0 <uxr_deserialize_ObjectVariant>:
 8015cb0:	b570      	push	{r4, r5, r6, lr}
 8015cb2:	4605      	mov	r5, r0
 8015cb4:	460e      	mov	r6, r1
 8015cb6:	f7f7 fb7f 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015cba:	b320      	cbz	r0, 8015d06 <uxr_deserialize_ObjectVariant+0x56>
 8015cbc:	7833      	ldrb	r3, [r6, #0]
 8015cbe:	4604      	mov	r4, r0
 8015cc0:	3b01      	subs	r3, #1
 8015cc2:	2b0d      	cmp	r3, #13
 8015cc4:	d81d      	bhi.n	8015d02 <uxr_deserialize_ObjectVariant+0x52>
 8015cc6:	e8df f003 	tbb	[pc, r3]
 8015cca:	2107      	.short	0x2107
 8015ccc:	21214b4b 	.word	0x21214b4b
 8015cd0:	381c2121 	.word	0x381c2121
 8015cd4:	876a3838 	.word	0x876a3838
 8015cd8:	4628      	mov	r0, r5
 8015cda:	1d31      	adds	r1, r6, #4
 8015cdc:	f7f7 fb6c 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	b138      	cbz	r0, 8015cf4 <uxr_deserialize_ObjectVariant+0x44>
 8015ce4:	7933      	ldrb	r3, [r6, #4]
 8015ce6:	2b02      	cmp	r3, #2
 8015ce8:	d07c      	beq.n	8015de4 <uxr_deserialize_ObjectVariant+0x134>
 8015cea:	2b03      	cmp	r3, #3
 8015cec:	f000 8082 	beq.w	8015df4 <uxr_deserialize_ObjectVariant+0x144>
 8015cf0:	2b01      	cmp	r3, #1
 8015cf2:	d077      	beq.n	8015de4 <uxr_deserialize_ObjectVariant+0x134>
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015cfa:	f7f8 f907 	bl	800df0c <ucdr_deserialize_int16_t>
 8015cfe:	4004      	ands	r4, r0
 8015d00:	b2e4      	uxtb	r4, r4
 8015d02:	4620      	mov	r0, r4
 8015d04:	bd70      	pop	{r4, r5, r6, pc}
 8015d06:	2400      	movs	r4, #0
 8015d08:	4620      	mov	r0, r4
 8015d0a:	bd70      	pop	{r4, r5, r6, pc}
 8015d0c:	4628      	mov	r0, r5
 8015d0e:	1d31      	adds	r1, r6, #4
 8015d10:	f7f7 fb52 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015d14:	4604      	mov	r4, r0
 8015d16:	b130      	cbz	r0, 8015d26 <uxr_deserialize_ObjectVariant+0x76>
 8015d18:	7933      	ldrb	r3, [r6, #4]
 8015d1a:	2b02      	cmp	r3, #2
 8015d1c:	d037      	beq.n	8015d8e <uxr_deserialize_ObjectVariant+0xde>
 8015d1e:	2b03      	cmp	r3, #3
 8015d20:	d02a      	beq.n	8015d78 <uxr_deserialize_ObjectVariant+0xc8>
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d033      	beq.n	8015d8e <uxr_deserialize_ObjectVariant+0xde>
 8015d26:	4628      	mov	r0, r5
 8015d28:	2202      	movs	r2, #2
 8015d2a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015d2e:	f7fc fdb5 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015d32:	4004      	ands	r4, r0
 8015d34:	b2e4      	uxtb	r4, r4
 8015d36:	4620      	mov	r0, r4
 8015d38:	bd70      	pop	{r4, r5, r6, pc}
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	1d31      	adds	r1, r6, #4
 8015d3e:	f7f7 fb3b 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d0df      	beq.n	8015d06 <uxr_deserialize_ObjectVariant+0x56>
 8015d46:	7933      	ldrb	r3, [r6, #4]
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	d001      	beq.n	8015d50 <uxr_deserialize_ObjectVariant+0xa0>
 8015d4c:	2b02      	cmp	r3, #2
 8015d4e:	d1d8      	bne.n	8015d02 <uxr_deserialize_ObjectVariant+0x52>
 8015d50:	4628      	mov	r0, r5
 8015d52:	68b1      	ldr	r1, [r6, #8]
 8015d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d5c:	f003 bcf4 	b.w	8019748 <ucdr_deserialize_string>
 8015d60:	4628      	mov	r0, r5
 8015d62:	1d31      	adds	r1, r6, #4
 8015d64:	f7f7 fb28 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015d68:	4604      	mov	r4, r0
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d0db      	beq.n	8015d26 <uxr_deserialize_ObjectVariant+0x76>
 8015d6e:	7933      	ldrb	r3, [r6, #4]
 8015d70:	2b02      	cmp	r3, #2
 8015d72:	d00c      	beq.n	8015d8e <uxr_deserialize_ObjectVariant+0xde>
 8015d74:	2b03      	cmp	r3, #3
 8015d76:	d1d6      	bne.n	8015d26 <uxr_deserialize_ObjectVariant+0x76>
 8015d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	f106 0308 	add.w	r3, r6, #8
 8015d82:	f106 010c 	add.w	r1, r6, #12
 8015d86:	f7fd f82d 	bl	8012de4 <ucdr_deserialize_sequence_uint8_t>
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	e7cb      	b.n	8015d26 <uxr_deserialize_ObjectVariant+0x76>
 8015d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015d92:	4628      	mov	r0, r5
 8015d94:	68b1      	ldr	r1, [r6, #8]
 8015d96:	f003 fcd7 	bl	8019748 <ucdr_deserialize_string>
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	e7c3      	b.n	8015d26 <uxr_deserialize_ObjectVariant+0x76>
 8015d9e:	2204      	movs	r2, #4
 8015da0:	4628      	mov	r0, r5
 8015da2:	18b1      	adds	r1, r6, r2
 8015da4:	f7fc fd7a 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015da8:	2202      	movs	r2, #2
 8015daa:	4604      	mov	r4, r0
 8015dac:	f106 0108 	add.w	r1, r6, #8
 8015db0:	4628      	mov	r0, r5
 8015db2:	f7fc fd73 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015db6:	2202      	movs	r2, #2
 8015db8:	4004      	ands	r4, r0
 8015dba:	f106 010a 	add.w	r1, r6, #10
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f7fc fd6c 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	b2e4      	uxtb	r4, r4
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f106 010c 	add.w	r1, r6, #12
 8015dce:	401c      	ands	r4, r3
 8015dd0:	f7f7 fac4 	bl	800d35c <ucdr_deserialize_bool>
 8015dd4:	4004      	ands	r4, r0
 8015dd6:	e794      	b.n	8015d02 <uxr_deserialize_ObjectVariant+0x52>
 8015dd8:	4628      	mov	r0, r5
 8015dda:	1d31      	adds	r1, r6, #4
 8015ddc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015de0:	f7ff bc62 	b.w	80156a8 <uxr_deserialize_CLIENT_Representation>
 8015de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015de8:	4628      	mov	r0, r5
 8015dea:	68b1      	ldr	r1, [r6, #8]
 8015dec:	f003 fcac 	bl	8019748 <ucdr_deserialize_string>
 8015df0:	4604      	mov	r4, r0
 8015df2:	e77f      	b.n	8015cf4 <uxr_deserialize_ObjectVariant+0x44>
 8015df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015df8:	4628      	mov	r0, r5
 8015dfa:	f106 0308 	add.w	r3, r6, #8
 8015dfe:	f106 010c 	add.w	r1, r6, #12
 8015e02:	f7fc ffef 	bl	8012de4 <ucdr_deserialize_sequence_uint8_t>
 8015e06:	4604      	mov	r4, r0
 8015e08:	e774      	b.n	8015cf4 <uxr_deserialize_ObjectVariant+0x44>
 8015e0a:	bf00      	nop

08015e0c <uxr_deserialize_BaseObjectRequest>:
 8015e0c:	b570      	push	{r4, r5, r6, lr}
 8015e0e:	2202      	movs	r2, #2
 8015e10:	4605      	mov	r5, r0
 8015e12:	460e      	mov	r6, r1
 8015e14:	f7fc fd42 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015e18:	2202      	movs	r2, #2
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	1cb1      	adds	r1, r6, #2
 8015e1e:	4628      	mov	r0, r5
 8015e20:	f7fc fd3c 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015e24:	4020      	ands	r0, r4
 8015e26:	b2c0      	uxtb	r0, r0
 8015e28:	bd70      	pop	{r4, r5, r6, pc}
 8015e2a:	bf00      	nop

08015e2c <uxr_deserialize_BaseObjectReply>:
 8015e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e30:	2202      	movs	r2, #2
 8015e32:	4606      	mov	r6, r0
 8015e34:	460f      	mov	r7, r1
 8015e36:	f7fc fd31 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015e3a:	2202      	movs	r2, #2
 8015e3c:	1cb9      	adds	r1, r7, #2
 8015e3e:	4605      	mov	r5, r0
 8015e40:	4630      	mov	r0, r6
 8015e42:	f7fc fd2b 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8015e46:	1d39      	adds	r1, r7, #4
 8015e48:	4680      	mov	r8, r0
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	f7f7 fab4 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015e50:	1d79      	adds	r1, r7, #5
 8015e52:	4604      	mov	r4, r0
 8015e54:	4630      	mov	r0, r6
 8015e56:	f7f7 faaf 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8015e5a:	ea05 0508 	and.w	r5, r5, r8
 8015e5e:	402c      	ands	r4, r5
 8015e60:	4020      	ands	r0, r4
 8015e62:	b2c0      	uxtb	r0, r0
 8015e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015e68 <uxr_serialize_ReadSpecification>:
 8015e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e6a:	460d      	mov	r5, r1
 8015e6c:	7809      	ldrb	r1, [r1, #0]
 8015e6e:	4606      	mov	r6, r0
 8015e70:	f7f7 fa8c 	bl	800d38c <ucdr_serialize_uint8_t>
 8015e74:	7869      	ldrb	r1, [r5, #1]
 8015e76:	4604      	mov	r4, r0
 8015e78:	4630      	mov	r0, r6
 8015e7a:	f7f7 fa87 	bl	800d38c <ucdr_serialize_uint8_t>
 8015e7e:	78a9      	ldrb	r1, [r5, #2]
 8015e80:	4004      	ands	r4, r0
 8015e82:	4630      	mov	r0, r6
 8015e84:	f7f7 fa54 	bl	800d330 <ucdr_serialize_bool>
 8015e88:	78ab      	ldrb	r3, [r5, #2]
 8015e8a:	b2e4      	uxtb	r4, r4
 8015e8c:	4004      	ands	r4, r0
 8015e8e:	b943      	cbnz	r3, 8015ea2 <uxr_serialize_ReadSpecification+0x3a>
 8015e90:	4630      	mov	r0, r6
 8015e92:	7a29      	ldrb	r1, [r5, #8]
 8015e94:	f7f7 fa4c 	bl	800d330 <ucdr_serialize_bool>
 8015e98:	7a2b      	ldrb	r3, [r5, #8]
 8015e9a:	4004      	ands	r4, r0
 8015e9c:	b93b      	cbnz	r3, 8015eae <uxr_serialize_ReadSpecification+0x46>
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	6869      	ldr	r1, [r5, #4]
 8015ea6:	f003 fc41 	bl	801972c <ucdr_serialize_string>
 8015eaa:	4004      	ands	r4, r0
 8015eac:	e7f0      	b.n	8015e90 <uxr_serialize_ReadSpecification+0x28>
 8015eae:	8969      	ldrh	r1, [r5, #10]
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	f7f7 fa97 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8015eb6:	89a9      	ldrh	r1, [r5, #12]
 8015eb8:	4607      	mov	r7, r0
 8015eba:	4630      	mov	r0, r6
 8015ebc:	f7f7 fa92 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8015ec0:	89e9      	ldrh	r1, [r5, #14]
 8015ec2:	4007      	ands	r7, r0
 8015ec4:	4630      	mov	r0, r6
 8015ec6:	f7f7 fa8d 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8015eca:	8a29      	ldrh	r1, [r5, #16]
 8015ecc:	4605      	mov	r5, r0
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f7f7 fa88 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8015ed4:	b2ff      	uxtb	r7, r7
 8015ed6:	403c      	ands	r4, r7
 8015ed8:	402c      	ands	r4, r5
 8015eda:	4004      	ands	r4, r0
 8015edc:	4620      	mov	r0, r4
 8015ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015ee0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015ee0:	f7ff bb8c 	b.w	80155fc <uxr_serialize_CLIENT_Representation>

08015ee4 <uxr_serialize_CREATE_Payload>:
 8015ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee6:	2202      	movs	r2, #2
 8015ee8:	4606      	mov	r6, r0
 8015eea:	460d      	mov	r5, r1
 8015eec:	f7fc fc72 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015ef0:	1ca9      	adds	r1, r5, #2
 8015ef2:	4604      	mov	r4, r0
 8015ef4:	2202      	movs	r2, #2
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	f7fc fc6c 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015efc:	7929      	ldrb	r1, [r5, #4]
 8015efe:	4607      	mov	r7, r0
 8015f00:	4630      	mov	r0, r6
 8015f02:	f7f7 fa43 	bl	800d38c <ucdr_serialize_uint8_t>
 8015f06:	b328      	cbz	r0, 8015f54 <uxr_serialize_CREATE_Payload+0x70>
 8015f08:	792b      	ldrb	r3, [r5, #4]
 8015f0a:	403c      	ands	r4, r7
 8015f0c:	3b01      	subs	r3, #1
 8015f0e:	b2e4      	uxtb	r4, r4
 8015f10:	2b0d      	cmp	r3, #13
 8015f12:	d81d      	bhi.n	8015f50 <uxr_serialize_CREATE_Payload+0x6c>
 8015f14:	e8df f003 	tbb	[pc, r3]
 8015f18:	32320753 	.word	0x32320753
 8015f1c:	07070707 	.word	0x07070707
 8015f20:	2121211c 	.word	0x2121211c
 8015f24:	684c      	.short	0x684c
 8015f26:	4630      	mov	r0, r6
 8015f28:	7a29      	ldrb	r1, [r5, #8]
 8015f2a:	f7f7 fa2f 	bl	800d38c <ucdr_serialize_uint8_t>
 8015f2e:	4607      	mov	r7, r0
 8015f30:	b130      	cbz	r0, 8015f40 <uxr_serialize_CREATE_Payload+0x5c>
 8015f32:	7a2b      	ldrb	r3, [r5, #8]
 8015f34:	2b02      	cmp	r3, #2
 8015f36:	d035      	beq.n	8015fa4 <uxr_serialize_CREATE_Payload+0xc0>
 8015f38:	2b03      	cmp	r3, #3
 8015f3a:	d02b      	beq.n	8015f94 <uxr_serialize_CREATE_Payload+0xb0>
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d031      	beq.n	8015fa4 <uxr_serialize_CREATE_Payload+0xc0>
 8015f40:	4630      	mov	r0, r6
 8015f42:	2202      	movs	r2, #2
 8015f44:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8015f48:	f7fc fc44 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8015f4c:	4038      	ands	r0, r7
 8015f4e:	4004      	ands	r4, r0
 8015f50:	4620      	mov	r0, r4
 8015f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f54:	2400      	movs	r4, #0
 8015f56:	4620      	mov	r0, r4
 8015f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	7a29      	ldrb	r1, [r5, #8]
 8015f5e:	f7f7 fa15 	bl	800d38c <ucdr_serialize_uint8_t>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	d0f6      	beq.n	8015f54 <uxr_serialize_CREATE_Payload+0x70>
 8015f66:	7a2b      	ldrb	r3, [r5, #8]
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d001      	beq.n	8015f70 <uxr_serialize_CREATE_Payload+0x8c>
 8015f6c:	2b02      	cmp	r3, #2
 8015f6e:	d1ef      	bne.n	8015f50 <uxr_serialize_CREATE_Payload+0x6c>
 8015f70:	4630      	mov	r0, r6
 8015f72:	68e9      	ldr	r1, [r5, #12]
 8015f74:	f003 fbda 	bl	801972c <ucdr_serialize_string>
 8015f78:	4004      	ands	r4, r0
 8015f7a:	e7e9      	b.n	8015f50 <uxr_serialize_CREATE_Payload+0x6c>
 8015f7c:	4630      	mov	r0, r6
 8015f7e:	7a29      	ldrb	r1, [r5, #8]
 8015f80:	f7f7 fa04 	bl	800d38c <ucdr_serialize_uint8_t>
 8015f84:	4607      	mov	r7, r0
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d0da      	beq.n	8015f40 <uxr_serialize_CREATE_Payload+0x5c>
 8015f8a:	7a2b      	ldrb	r3, [r5, #8]
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	d009      	beq.n	8015fa4 <uxr_serialize_CREATE_Payload+0xc0>
 8015f90:	2b03      	cmp	r3, #3
 8015f92:	d1d5      	bne.n	8015f40 <uxr_serialize_CREATE_Payload+0x5c>
 8015f94:	4630      	mov	r0, r6
 8015f96:	68ea      	ldr	r2, [r5, #12]
 8015f98:	f105 0110 	add.w	r1, r5, #16
 8015f9c:	f7fc ff10 	bl	8012dc0 <ucdr_serialize_sequence_uint8_t>
 8015fa0:	4607      	mov	r7, r0
 8015fa2:	e7cd      	b.n	8015f40 <uxr_serialize_CREATE_Payload+0x5c>
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	68e9      	ldr	r1, [r5, #12]
 8015fa8:	f003 fbc0 	bl	801972c <ucdr_serialize_string>
 8015fac:	4607      	mov	r7, r0
 8015fae:	e7c7      	b.n	8015f40 <uxr_serialize_CREATE_Payload+0x5c>
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	f105 0108 	add.w	r1, r5, #8
 8015fb6:	f7ff fbdb 	bl	8015770 <uxr_serialize_AGENT_Representation>
 8015fba:	4004      	ands	r4, r0
 8015fbc:	e7c8      	b.n	8015f50 <uxr_serialize_CREATE_Payload+0x6c>
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	7a29      	ldrb	r1, [r5, #8]
 8015fc2:	f7f7 f9e3 	bl	800d38c <ucdr_serialize_uint8_t>
 8015fc6:	4607      	mov	r7, r0
 8015fc8:	b130      	cbz	r0, 8015fd8 <uxr_serialize_CREATE_Payload+0xf4>
 8015fca:	7a2b      	ldrb	r3, [r5, #8]
 8015fcc:	2b02      	cmp	r3, #2
 8015fce:	d012      	beq.n	8015ff6 <uxr_serialize_CREATE_Payload+0x112>
 8015fd0:	2b03      	cmp	r3, #3
 8015fd2:	d016      	beq.n	8016002 <uxr_serialize_CREATE_Payload+0x11e>
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d00e      	beq.n	8015ff6 <uxr_serialize_CREATE_Payload+0x112>
 8015fd8:	4630      	mov	r0, r6
 8015fda:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8015fde:	f7f7 ff15 	bl	800de0c <ucdr_serialize_int16_t>
 8015fe2:	4038      	ands	r0, r7
 8015fe4:	4004      	ands	r4, r0
 8015fe6:	e7b3      	b.n	8015f50 <uxr_serialize_CREATE_Payload+0x6c>
 8015fe8:	4630      	mov	r0, r6
 8015fea:	f105 0108 	add.w	r1, r5, #8
 8015fee:	f7ff fb05 	bl	80155fc <uxr_serialize_CLIENT_Representation>
 8015ff2:	4004      	ands	r4, r0
 8015ff4:	e7ac      	b.n	8015f50 <uxr_serialize_CREATE_Payload+0x6c>
 8015ff6:	4630      	mov	r0, r6
 8015ff8:	68e9      	ldr	r1, [r5, #12]
 8015ffa:	f003 fb97 	bl	801972c <ucdr_serialize_string>
 8015ffe:	4607      	mov	r7, r0
 8016000:	e7ea      	b.n	8015fd8 <uxr_serialize_CREATE_Payload+0xf4>
 8016002:	4630      	mov	r0, r6
 8016004:	68ea      	ldr	r2, [r5, #12]
 8016006:	f105 0110 	add.w	r1, r5, #16
 801600a:	f7fc fed9 	bl	8012dc0 <ucdr_serialize_sequence_uint8_t>
 801600e:	4607      	mov	r7, r0
 8016010:	e7e2      	b.n	8015fd8 <uxr_serialize_CREATE_Payload+0xf4>
 8016012:	bf00      	nop

08016014 <uxr_serialize_DELETE_Payload>:
 8016014:	b570      	push	{r4, r5, r6, lr}
 8016016:	2202      	movs	r2, #2
 8016018:	4605      	mov	r5, r0
 801601a:	460e      	mov	r6, r1
 801601c:	f7fc fbda 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8016020:	2202      	movs	r2, #2
 8016022:	4604      	mov	r4, r0
 8016024:	1cb1      	adds	r1, r6, #2
 8016026:	4628      	mov	r0, r5
 8016028:	f7fc fbd4 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 801602c:	4020      	ands	r0, r4
 801602e:	b2c0      	uxtb	r0, r0
 8016030:	bd70      	pop	{r4, r5, r6, pc}
 8016032:	bf00      	nop

08016034 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016038:	4606      	mov	r6, r0
 801603a:	460f      	mov	r7, r1
 801603c:	f7f7 f9bc 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8016040:	1c79      	adds	r1, r7, #1
 8016042:	4605      	mov	r5, r0
 8016044:	4630      	mov	r0, r6
 8016046:	f7f7 f9b7 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 801604a:	1d39      	adds	r1, r7, #4
 801604c:	4682      	mov	sl, r0
 801604e:	2204      	movs	r2, #4
 8016050:	4630      	mov	r0, r6
 8016052:	f7fc fc23 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8016056:	f107 0108 	add.w	r1, r7, #8
 801605a:	4681      	mov	r9, r0
 801605c:	2202      	movs	r2, #2
 801605e:	4630      	mov	r0, r6
 8016060:	f7fc fc1c 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8016064:	2202      	movs	r2, #2
 8016066:	4680      	mov	r8, r0
 8016068:	f107 010a 	add.w	r1, r7, #10
 801606c:	4630      	mov	r0, r6
 801606e:	f7fc fc15 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8016072:	ea05 050a 	and.w	r5, r5, sl
 8016076:	b2ec      	uxtb	r4, r5
 8016078:	f107 010c 	add.w	r1, r7, #12
 801607c:	4605      	mov	r5, r0
 801607e:	4630      	mov	r0, r6
 8016080:	f7f7 f96c 	bl	800d35c <ucdr_deserialize_bool>
 8016084:	ea04 0409 	and.w	r4, r4, r9
 8016088:	ea08 0404 	and.w	r4, r8, r4
 801608c:	4025      	ands	r5, r4
 801608e:	4028      	ands	r0, r5
 8016090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08016094 <uxr_deserialize_STATUS_Payload>:
 8016094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016098:	2202      	movs	r2, #2
 801609a:	4606      	mov	r6, r0
 801609c:	460f      	mov	r7, r1
 801609e:	f7fc fbfd 	bl	801289c <ucdr_deserialize_array_uint8_t>
 80160a2:	2202      	movs	r2, #2
 80160a4:	1cb9      	adds	r1, r7, #2
 80160a6:	4605      	mov	r5, r0
 80160a8:	4630      	mov	r0, r6
 80160aa:	f7fc fbf7 	bl	801289c <ucdr_deserialize_array_uint8_t>
 80160ae:	1d39      	adds	r1, r7, #4
 80160b0:	4680      	mov	r8, r0
 80160b2:	4630      	mov	r0, r6
 80160b4:	f7f7 f980 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80160b8:	1d79      	adds	r1, r7, #5
 80160ba:	4604      	mov	r4, r0
 80160bc:	4630      	mov	r0, r6
 80160be:	f7f7 f97b 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80160c2:	ea05 0508 	and.w	r5, r5, r8
 80160c6:	402c      	ands	r4, r5
 80160c8:	4020      	ands	r0, r4
 80160ca:	b2c0      	uxtb	r0, r0
 80160cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080160d0 <uxr_serialize_READ_DATA_Payload>:
 80160d0:	b570      	push	{r4, r5, r6, lr}
 80160d2:	2202      	movs	r2, #2
 80160d4:	4605      	mov	r5, r0
 80160d6:	460e      	mov	r6, r1
 80160d8:	f7fc fb7c 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 80160dc:	2202      	movs	r2, #2
 80160de:	1cb1      	adds	r1, r6, #2
 80160e0:	4604      	mov	r4, r0
 80160e2:	4628      	mov	r0, r5
 80160e4:	f7fc fb76 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 80160e8:	1d31      	adds	r1, r6, #4
 80160ea:	4004      	ands	r4, r0
 80160ec:	4628      	mov	r0, r5
 80160ee:	f7ff febb 	bl	8015e68 <uxr_serialize_ReadSpecification>
 80160f2:	b2e4      	uxtb	r4, r4
 80160f4:	4020      	ands	r0, r4
 80160f6:	bd70      	pop	{r4, r5, r6, pc}

080160f8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	2202      	movs	r2, #2
 80160fc:	4605      	mov	r5, r0
 80160fe:	460e      	mov	r6, r1
 8016100:	f7fc fb68 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8016104:	2202      	movs	r2, #2
 8016106:	4604      	mov	r4, r0
 8016108:	1cb1      	adds	r1, r6, #2
 801610a:	4628      	mov	r0, r5
 801610c:	f7fc fb62 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8016110:	4020      	ands	r0, r4
 8016112:	b2c0      	uxtb	r0, r0
 8016114:	bd70      	pop	{r4, r5, r6, pc}
 8016116:	bf00      	nop

08016118 <uxr_serialize_ACKNACK_Payload>:
 8016118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801611a:	460f      	mov	r7, r1
 801611c:	460e      	mov	r6, r1
 801611e:	f837 1b02 	ldrh.w	r1, [r7], #2
 8016122:	4605      	mov	r5, r0
 8016124:	f7f7 f95e 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8016128:	4639      	mov	r1, r7
 801612a:	2202      	movs	r2, #2
 801612c:	4604      	mov	r4, r0
 801612e:	4628      	mov	r0, r5
 8016130:	f7fc fb50 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8016134:	7931      	ldrb	r1, [r6, #4]
 8016136:	4004      	ands	r4, r0
 8016138:	4628      	mov	r0, r5
 801613a:	f7f7 f927 	bl	800d38c <ucdr_serialize_uint8_t>
 801613e:	b2e4      	uxtb	r4, r4
 8016140:	4020      	ands	r0, r4
 8016142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016144 <uxr_deserialize_ACKNACK_Payload>:
 8016144:	b570      	push	{r4, r5, r6, lr}
 8016146:	4605      	mov	r5, r0
 8016148:	460e      	mov	r6, r1
 801614a:	f7f7 fa4b 	bl	800d5e4 <ucdr_deserialize_uint16_t>
 801614e:	2202      	movs	r2, #2
 8016150:	1cb1      	adds	r1, r6, #2
 8016152:	4604      	mov	r4, r0
 8016154:	4628      	mov	r0, r5
 8016156:	f7fc fba1 	bl	801289c <ucdr_deserialize_array_uint8_t>
 801615a:	1d31      	adds	r1, r6, #4
 801615c:	4004      	ands	r4, r0
 801615e:	4628      	mov	r0, r5
 8016160:	f7f7 f92a 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 8016164:	b2e4      	uxtb	r4, r4
 8016166:	4020      	ands	r0, r4
 8016168:	bd70      	pop	{r4, r5, r6, pc}
 801616a:	bf00      	nop

0801616c <uxr_serialize_HEARTBEAT_Payload>:
 801616c:	b570      	push	{r4, r5, r6, lr}
 801616e:	460d      	mov	r5, r1
 8016170:	8809      	ldrh	r1, [r1, #0]
 8016172:	4606      	mov	r6, r0
 8016174:	f7f7 f936 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8016178:	8869      	ldrh	r1, [r5, #2]
 801617a:	4604      	mov	r4, r0
 801617c:	4630      	mov	r0, r6
 801617e:	f7f7 f931 	bl	800d3e4 <ucdr_serialize_uint16_t>
 8016182:	7929      	ldrb	r1, [r5, #4]
 8016184:	4004      	ands	r4, r0
 8016186:	4630      	mov	r0, r6
 8016188:	f7f7 f900 	bl	800d38c <ucdr_serialize_uint8_t>
 801618c:	b2e4      	uxtb	r4, r4
 801618e:	4020      	ands	r0, r4
 8016190:	bd70      	pop	{r4, r5, r6, pc}
 8016192:	bf00      	nop

08016194 <uxr_deserialize_HEARTBEAT_Payload>:
 8016194:	b570      	push	{r4, r5, r6, lr}
 8016196:	4605      	mov	r5, r0
 8016198:	460e      	mov	r6, r1
 801619a:	f7f7 fa23 	bl	800d5e4 <ucdr_deserialize_uint16_t>
 801619e:	1cb1      	adds	r1, r6, #2
 80161a0:	4604      	mov	r4, r0
 80161a2:	4628      	mov	r0, r5
 80161a4:	f7f7 fa1e 	bl	800d5e4 <ucdr_deserialize_uint16_t>
 80161a8:	1d31      	adds	r1, r6, #4
 80161aa:	4004      	ands	r4, r0
 80161ac:	4628      	mov	r0, r5
 80161ae:	f7f7 f903 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80161b2:	b2e4      	uxtb	r4, r4
 80161b4:	4020      	ands	r0, r4
 80161b6:	bd70      	pop	{r4, r5, r6, pc}

080161b8 <uxr_serialize_TIMESTAMP_Payload>:
 80161b8:	b570      	push	{r4, r5, r6, lr}
 80161ba:	460d      	mov	r5, r1
 80161bc:	6809      	ldr	r1, [r1, #0]
 80161be:	4606      	mov	r6, r0
 80161c0:	f7f7 ff18 	bl	800dff4 <ucdr_serialize_int32_t>
 80161c4:	6869      	ldr	r1, [r5, #4]
 80161c6:	4604      	mov	r4, r0
 80161c8:	4630      	mov	r0, r6
 80161ca:	f7f7 faf9 	bl	800d7c0 <ucdr_serialize_uint32_t>
 80161ce:	4020      	ands	r0, r4
 80161d0:	b2c0      	uxtb	r0, r0
 80161d2:	bd70      	pop	{r4, r5, r6, pc}

080161d4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80161d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161d8:	4605      	mov	r5, r0
 80161da:	460e      	mov	r6, r1
 80161dc:	f7f7 ffa2 	bl	800e124 <ucdr_deserialize_int32_t>
 80161e0:	1d31      	adds	r1, r6, #4
 80161e2:	4607      	mov	r7, r0
 80161e4:	4628      	mov	r0, r5
 80161e6:	f7f7 fc1b 	bl	800da20 <ucdr_deserialize_uint32_t>
 80161ea:	f106 0108 	add.w	r1, r6, #8
 80161ee:	4680      	mov	r8, r0
 80161f0:	4628      	mov	r0, r5
 80161f2:	f7f7 ff97 	bl	800e124 <ucdr_deserialize_int32_t>
 80161f6:	f106 010c 	add.w	r1, r6, #12
 80161fa:	4604      	mov	r4, r0
 80161fc:	4628      	mov	r0, r5
 80161fe:	f7f7 fc0f 	bl	800da20 <ucdr_deserialize_uint32_t>
 8016202:	ea07 0708 	and.w	r7, r7, r8
 8016206:	403c      	ands	r4, r7
 8016208:	f106 0110 	add.w	r1, r6, #16
 801620c:	4004      	ands	r4, r0
 801620e:	4628      	mov	r0, r5
 8016210:	f7f7 ff88 	bl	800e124 <ucdr_deserialize_int32_t>
 8016214:	4603      	mov	r3, r0
 8016216:	f106 0114 	add.w	r1, r6, #20
 801621a:	4628      	mov	r0, r5
 801621c:	461d      	mov	r5, r3
 801621e:	f7f7 fbff 	bl	800da20 <ucdr_deserialize_uint32_t>
 8016222:	b2e4      	uxtb	r4, r4
 8016224:	402c      	ands	r4, r5
 8016226:	4020      	ands	r0, r4
 8016228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801622c <uxr_serialize_SampleIdentity>:
 801622c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016230:	220c      	movs	r2, #12
 8016232:	4604      	mov	r4, r0
 8016234:	460d      	mov	r5, r1
 8016236:	f7fc facd 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 801623a:	2203      	movs	r2, #3
 801623c:	f105 010c 	add.w	r1, r5, #12
 8016240:	4607      	mov	r7, r0
 8016242:	4620      	mov	r0, r4
 8016244:	f7fc fac6 	bl	80127d4 <ucdr_serialize_array_uint8_t>
 8016248:	7be9      	ldrb	r1, [r5, #15]
 801624a:	4680      	mov	r8, r0
 801624c:	4620      	mov	r0, r4
 801624e:	f7f7 f89d 	bl	800d38c <ucdr_serialize_uint8_t>
 8016252:	6929      	ldr	r1, [r5, #16]
 8016254:	4606      	mov	r6, r0
 8016256:	4620      	mov	r0, r4
 8016258:	f7f7 fecc 	bl	800dff4 <ucdr_serialize_int32_t>
 801625c:	4603      	mov	r3, r0
 801625e:	6969      	ldr	r1, [r5, #20]
 8016260:	4620      	mov	r0, r4
 8016262:	461c      	mov	r4, r3
 8016264:	f7f7 faac 	bl	800d7c0 <ucdr_serialize_uint32_t>
 8016268:	ea07 0708 	and.w	r7, r7, r8
 801626c:	403e      	ands	r6, r7
 801626e:	4034      	ands	r4, r6
 8016270:	4020      	ands	r0, r4
 8016272:	b2c0      	uxtb	r0, r0
 8016274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016278 <uxr_deserialize_SampleIdentity>:
 8016278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801627c:	220c      	movs	r2, #12
 801627e:	4604      	mov	r4, r0
 8016280:	460d      	mov	r5, r1
 8016282:	f7fc fb0b 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8016286:	2203      	movs	r2, #3
 8016288:	f105 010c 	add.w	r1, r5, #12
 801628c:	4607      	mov	r7, r0
 801628e:	4620      	mov	r0, r4
 8016290:	f7fc fb04 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8016294:	f105 010f 	add.w	r1, r5, #15
 8016298:	4680      	mov	r8, r0
 801629a:	4620      	mov	r0, r4
 801629c:	f7f7 f88c 	bl	800d3b8 <ucdr_deserialize_uint8_t>
 80162a0:	f105 0110 	add.w	r1, r5, #16
 80162a4:	4606      	mov	r6, r0
 80162a6:	4620      	mov	r0, r4
 80162a8:	f7f7 ff3c 	bl	800e124 <ucdr_deserialize_int32_t>
 80162ac:	4603      	mov	r3, r0
 80162ae:	f105 0114 	add.w	r1, r5, #20
 80162b2:	4620      	mov	r0, r4
 80162b4:	461c      	mov	r4, r3
 80162b6:	f7f7 fbb3 	bl	800da20 <ucdr_deserialize_uint32_t>
 80162ba:	ea07 0708 	and.w	r7, r7, r8
 80162be:	403e      	ands	r6, r7
 80162c0:	4034      	ands	r4, r6
 80162c2:	4020      	ands	r0, r4
 80162c4:	b2c0      	uxtb	r0, r0
 80162c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ca:	bf00      	nop

080162cc <rcl_client_get_rmw_handle>:
 80162cc:	b110      	cbz	r0, 80162d4 <rcl_client_get_rmw_handle+0x8>
 80162ce:	6800      	ldr	r0, [r0, #0]
 80162d0:	b100      	cbz	r0, 80162d4 <rcl_client_get_rmw_handle+0x8>
 80162d2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop

080162d8 <rcl_take_response>:
 80162d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162da:	460e      	mov	r6, r1
 80162dc:	4607      	mov	r7, r0
 80162de:	b08d      	sub	sp, #52	; 0x34
 80162e0:	ad06      	add	r5, sp, #24
 80162e2:	460c      	mov	r4, r1
 80162e4:	4694      	mov	ip, r2
 80162e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80162e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80162ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80162ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80162f2:	b337      	cbz	r7, 8016342 <rcl_take_response+0x6a>
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	b323      	cbz	r3, 8016342 <rcl_take_response+0x6a>
 80162f8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80162fa:	b310      	cbz	r0, 8016342 <rcl_take_response+0x6a>
 80162fc:	4662      	mov	r2, ip
 80162fe:	b31a      	cbz	r2, 8016348 <rcl_take_response+0x70>
 8016300:	2300      	movs	r3, #0
 8016302:	2600      	movs	r6, #0
 8016304:	2700      	movs	r7, #0
 8016306:	f88d 3007 	strb.w	r3, [sp, #7]
 801630a:	a902      	add	r1, sp, #8
 801630c:	f10d 0307 	add.w	r3, sp, #7
 8016310:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8016314:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016318:	f002 ff1c 	bl	8019154 <rmw_take_response>
 801631c:	4606      	mov	r6, r0
 801631e:	b9a8      	cbnz	r0, 801634c <rcl_take_response+0x74>
 8016320:	f240 13f5 	movw	r3, #501	; 0x1f5
 8016324:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016328:	2a00      	cmp	r2, #0
 801632a:	bf08      	it	eq
 801632c:	461e      	moveq	r6, r3
 801632e:	ad06      	add	r5, sp, #24
 8016330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016334:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016338:	e884 0003 	stmia.w	r4, {r0, r1}
 801633c:	4630      	mov	r0, r6
 801633e:	b00d      	add	sp, #52	; 0x34
 8016340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016342:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8016346:	e7f2      	b.n	801632e <rcl_take_response+0x56>
 8016348:	260b      	movs	r6, #11
 801634a:	e7f0      	b.n	801632e <rcl_take_response+0x56>
 801634c:	2601      	movs	r6, #1
 801634e:	e7ee      	b.n	801632e <rcl_take_response+0x56>

08016350 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016350:	280b      	cmp	r0, #11
 8016352:	dc0d      	bgt.n	8016370 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016354:	2800      	cmp	r0, #0
 8016356:	db09      	blt.n	801636c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016358:	280b      	cmp	r0, #11
 801635a:	d807      	bhi.n	801636c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801635c:	e8df f000 	tbb	[pc, r0]
 8016360:	07060607 	.word	0x07060607
 8016364:	06060606 	.word	0x06060606
 8016368:	07070606 	.word	0x07070606
 801636c:	2001      	movs	r0, #1
 801636e:	4770      	bx	lr
 8016370:	28cb      	cmp	r0, #203	; 0xcb
 8016372:	bf18      	it	ne
 8016374:	2001      	movne	r0, #1
 8016376:	4770      	bx	lr

08016378 <rcl_get_zero_initialized_context>:
 8016378:	b4d0      	push	{r4, r6, r7}
 801637a:	2600      	movs	r6, #0
 801637c:	2700      	movs	r7, #0
 801637e:	4604      	mov	r4, r0
 8016380:	4b04      	ldr	r3, [pc, #16]	; (8016394 <rcl_get_zero_initialized_context+0x1c>)
 8016382:	e9c3 6702 	strd	r6, r7, [r3, #8]
 8016386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801638c:	4620      	mov	r0, r4
 801638e:	bcd0      	pop	{r4, r6, r7}
 8016390:	4770      	bx	lr
 8016392:	bf00      	nop
 8016394:	20006880 	.word	0x20006880

08016398 <rcl_context_is_valid>:
 8016398:	b150      	cbz	r0, 80163b0 <rcl_context_is_valid+0x18>
 801639a:	b508      	push	{r3, lr}
 801639c:	2105      	movs	r1, #5
 801639e:	3008      	adds	r0, #8
 80163a0:	f002 f942 	bl	8018628 <__atomic_load_8>
 80163a4:	ea51 0300 	orrs.w	r3, r1, r0
 80163a8:	bf14      	ite	ne
 80163aa:	2001      	movne	r0, #1
 80163ac:	2000      	moveq	r0, #0
 80163ae:	bd08      	pop	{r3, pc}
 80163b0:	4770      	bx	lr
 80163b2:	bf00      	nop

080163b4 <__cleanup_context>:
 80163b4:	2305      	movs	r3, #5
 80163b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163ba:	4606      	mov	r6, r0
 80163bc:	b087      	sub	sp, #28
 80163be:	9300      	str	r3, [sp, #0]
 80163c0:	3008      	adds	r0, #8
 80163c2:	2200      	movs	r2, #0
 80163c4:	2300      	movs	r3, #0
 80163c6:	f002 f963 	bl	8018690 <__atomic_store_8>
 80163ca:	6830      	ldr	r0, [r6, #0]
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d052      	beq.n	8016476 <__cleanup_context+0xc2>
 80163d0:	6947      	ldr	r7, [r0, #20]
 80163d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80163d6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80163da:	b137      	cbz	r7, 80163ea <__cleanup_context+0x36>
 80163dc:	3014      	adds	r0, #20
 80163de:	f7f8 fd75 	bl	800eecc <rcl_init_options_fini>
 80163e2:	4607      	mov	r7, r0
 80163e4:	2800      	cmp	r0, #0
 80163e6:	d148      	bne.n	801647a <__cleanup_context+0xc6>
 80163e8:	6830      	ldr	r0, [r6, #0]
 80163ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80163ec:	b143      	cbz	r3, 8016400 <__cleanup_context+0x4c>
 80163ee:	3028      	adds	r0, #40	; 0x28
 80163f0:	f7fa fb28 	bl	8010a44 <rmw_context_fini>
 80163f4:	b118      	cbz	r0, 80163fe <__cleanup_context+0x4a>
 80163f6:	2f00      	cmp	r7, #0
 80163f8:	d042      	beq.n	8016480 <__cleanup_context+0xcc>
 80163fa:	f7f9 fec5 	bl	8010188 <rcutils_reset_error>
 80163fe:	6830      	ldr	r0, [r6, #0]
 8016400:	6a01      	ldr	r1, [r0, #32]
 8016402:	b1d9      	cbz	r1, 801643c <__cleanup_context+0x88>
 8016404:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016408:	2a01      	cmp	r2, #1
 801640a:	f173 0000 	sbcs.w	r0, r3, #0
 801640e:	db11      	blt.n	8016434 <__cleanup_context+0x80>
 8016410:	2400      	movs	r4, #0
 8016412:	2500      	movs	r5, #0
 8016414:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8016418:	b308      	cbz	r0, 801645e <__cleanup_context+0xaa>
 801641a:	4649      	mov	r1, r9
 801641c:	47c0      	blx	r8
 801641e:	6831      	ldr	r1, [r6, #0]
 8016420:	3401      	adds	r4, #1
 8016422:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8016426:	f145 0500 	adc.w	r5, r5, #0
 801642a:	4294      	cmp	r4, r2
 801642c:	eb75 0003 	sbcs.w	r0, r5, r3
 8016430:	6a09      	ldr	r1, [r1, #32]
 8016432:	dbef      	blt.n	8016414 <__cleanup_context+0x60>
 8016434:	4608      	mov	r0, r1
 8016436:	4649      	mov	r1, r9
 8016438:	47c0      	blx	r8
 801643a:	6830      	ldr	r0, [r6, #0]
 801643c:	4649      	mov	r1, r9
 801643e:	47c0      	blx	r8
 8016440:	2000      	movs	r0, #0
 8016442:	2100      	movs	r1, #0
 8016444:	4b10      	ldr	r3, [pc, #64]	; (8016488 <__cleanup_context+0xd4>)
 8016446:	ac02      	add	r4, sp, #8
 8016448:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801644c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801644e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016452:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8016456:	4638      	mov	r0, r7
 8016458:	b007      	add	sp, #28
 801645a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801645e:	3401      	adds	r4, #1
 8016460:	f145 0500 	adc.w	r5, r5, #0
 8016464:	4294      	cmp	r4, r2
 8016466:	eb75 0003 	sbcs.w	r0, r5, r3
 801646a:	dbd3      	blt.n	8016414 <__cleanup_context+0x60>
 801646c:	4608      	mov	r0, r1
 801646e:	4649      	mov	r1, r9
 8016470:	47c0      	blx	r8
 8016472:	6830      	ldr	r0, [r6, #0]
 8016474:	e7e2      	b.n	801643c <__cleanup_context+0x88>
 8016476:	4607      	mov	r7, r0
 8016478:	e7e2      	b.n	8016440 <__cleanup_context+0x8c>
 801647a:	f7f9 fe85 	bl	8010188 <rcutils_reset_error>
 801647e:	e7b3      	b.n	80163e8 <__cleanup_context+0x34>
 8016480:	f7ff ff66 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 8016484:	4607      	mov	r7, r0
 8016486:	e7b8      	b.n	80163fa <__cleanup_context+0x46>
 8016488:	20006880 	.word	0x20006880

0801648c <rcl_expand_topic_name>:
 801648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016490:	b08b      	sub	sp, #44	; 0x2c
 8016492:	9306      	str	r3, [sp, #24]
 8016494:	2800      	cmp	r0, #0
 8016496:	f000 80d6 	beq.w	8016646 <rcl_expand_topic_name+0x1ba>
 801649a:	460e      	mov	r6, r1
 801649c:	2900      	cmp	r1, #0
 801649e:	f000 80d2 	beq.w	8016646 <rcl_expand_topic_name+0x1ba>
 80164a2:	4617      	mov	r7, r2
 80164a4:	2a00      	cmp	r2, #0
 80164a6:	f000 80ce 	beq.w	8016646 <rcl_expand_topic_name+0x1ba>
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	f000 80cb 	beq.w	8016646 <rcl_expand_topic_name+0x1ba>
 80164b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	f000 80c7 	beq.w	8016646 <rcl_expand_topic_name+0x1ba>
 80164b8:	2200      	movs	r2, #0
 80164ba:	a909      	add	r1, sp, #36	; 0x24
 80164bc:	4680      	mov	r8, r0
 80164be:	f001 f9cf 	bl	8017860 <rcl_validate_topic_name>
 80164c2:	4604      	mov	r4, r0
 80164c4:	2800      	cmp	r0, #0
 80164c6:	f040 80ba 	bne.w	801663e <rcl_expand_topic_name+0x1b2>
 80164ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	f040 80c3 	bne.w	8016658 <rcl_expand_topic_name+0x1cc>
 80164d2:	4602      	mov	r2, r0
 80164d4:	a909      	add	r1, sp, #36	; 0x24
 80164d6:	4630      	mov	r0, r6
 80164d8:	f002 fb5c 	bl	8018b94 <rmw_validate_node_name>
 80164dc:	2800      	cmp	r0, #0
 80164de:	f040 80b7 	bne.w	8016650 <rcl_expand_topic_name+0x1c4>
 80164e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164e4:	2a00      	cmp	r2, #0
 80164e6:	f040 80bc 	bne.w	8016662 <rcl_expand_topic_name+0x1d6>
 80164ea:	4638      	mov	r0, r7
 80164ec:	a909      	add	r1, sp, #36	; 0x24
 80164ee:	f002 fb33 	bl	8018b58 <rmw_validate_namespace>
 80164f2:	2800      	cmp	r0, #0
 80164f4:	f040 80ac 	bne.w	8016650 <rcl_expand_topic_name+0x1c4>
 80164f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80164fa:	2c00      	cmp	r4, #0
 80164fc:	f040 80f4 	bne.w	80166e8 <rcl_expand_topic_name+0x25c>
 8016500:	217b      	movs	r1, #123	; 0x7b
 8016502:	4640      	mov	r0, r8
 8016504:	f004 fad0 	bl	801aaa8 <strchr>
 8016508:	f898 3000 	ldrb.w	r3, [r8]
 801650c:	4683      	mov	fp, r0
 801650e:	2b2f      	cmp	r3, #47	; 0x2f
 8016510:	f000 80a9 	beq.w	8016666 <rcl_expand_topic_name+0x1da>
 8016514:	2b7e      	cmp	r3, #126	; 0x7e
 8016516:	f040 80ad 	bne.w	8016674 <rcl_expand_topic_name+0x1e8>
 801651a:	4638      	mov	r0, r7
 801651c:	f7e9 fe92 	bl	8000244 <strlen>
 8016520:	4681      	mov	r9, r0
 8016522:	f8df e228 	ldr.w	lr, [pc, #552]	; 801674c <rcl_expand_topic_name+0x2c0>
 8016526:	f8df c228 	ldr.w	ip, [pc, #552]	; 8016750 <rcl_expand_topic_name+0x2c4>
 801652a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801652c:	f1b9 0f01 	cmp.w	r9, #1
 8016530:	bf18      	it	ne
 8016532:	46f4      	movne	ip, lr
 8016534:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8016538:	ab14      	add	r3, sp, #80	; 0x50
 801653a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801653c:	e9cd c702 	strd	ip, r7, [sp, #8]
 8016540:	f108 0c01 	add.w	ip, r8, #1
 8016544:	9500      	str	r5, [sp, #0]
 8016546:	9604      	str	r6, [sp, #16]
 8016548:	f8cd e004 	str.w	lr, [sp, #4]
 801654c:	f8cd c014 	str.w	ip, [sp, #20]
 8016550:	f002 f954 	bl	80187fc <rcutils_format_string_limit>
 8016554:	4605      	mov	r5, r0
 8016556:	2800      	cmp	r0, #0
 8016558:	f000 80c8 	beq.w	80166ec <rcl_expand_topic_name+0x260>
 801655c:	465b      	mov	r3, fp
 801655e:	2b00      	cmp	r3, #0
 8016560:	f000 80a4 	beq.w	80166ac <rcl_expand_topic_name+0x220>
 8016564:	217b      	movs	r1, #123	; 0x7b
 8016566:	f004 fa9f 	bl	801aaa8 <strchr>
 801656a:	46a9      	mov	r9, r5
 801656c:	4683      	mov	fp, r0
 801656e:	46aa      	mov	sl, r5
 8016570:	9407      	str	r4, [sp, #28]
 8016572:	465d      	mov	r5, fp
 8016574:	464c      	mov	r4, r9
 8016576:	2d00      	cmp	r5, #0
 8016578:	f000 80bd 	beq.w	80166f6 <rcl_expand_topic_name+0x26a>
 801657c:	217d      	movs	r1, #125	; 0x7d
 801657e:	4620      	mov	r0, r4
 8016580:	f004 fa92 	bl	801aaa8 <strchr>
 8016584:	eba0 0905 	sub.w	r9, r0, r5
 8016588:	f109 0b01 	add.w	fp, r9, #1
 801658c:	465a      	mov	r2, fp
 801658e:	4629      	mov	r1, r5
 8016590:	4869      	ldr	r0, [pc, #420]	; (8016738 <rcl_expand_topic_name+0x2ac>)
 8016592:	f004 fa9e 	bl	801aad2 <strncmp>
 8016596:	2800      	cmp	r0, #0
 8016598:	d06a      	beq.n	8016670 <rcl_expand_topic_name+0x1e4>
 801659a:	465a      	mov	r2, fp
 801659c:	4629      	mov	r1, r5
 801659e:	4867      	ldr	r0, [pc, #412]	; (801673c <rcl_expand_topic_name+0x2b0>)
 80165a0:	f004 fa97 	bl	801aad2 <strncmp>
 80165a4:	b128      	cbz	r0, 80165b2 <rcl_expand_topic_name+0x126>
 80165a6:	465a      	mov	r2, fp
 80165a8:	4629      	mov	r1, r5
 80165aa:	4865      	ldr	r0, [pc, #404]	; (8016740 <rcl_expand_topic_name+0x2b4>)
 80165ac:	f004 fa91 	bl	801aad2 <strncmp>
 80165b0:	bb38      	cbnz	r0, 8016602 <rcl_expand_topic_name+0x176>
 80165b2:	46b9      	mov	r9, r7
 80165b4:	ab16      	add	r3, sp, #88	; 0x58
 80165b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80165ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165be:	ab14      	add	r3, sp, #80	; 0x50
 80165c0:	4628      	mov	r0, r5
 80165c2:	cb0c      	ldmia	r3, {r2, r3}
 80165c4:	4659      	mov	r1, fp
 80165c6:	f002 fa55 	bl	8018a74 <rcutils_strndup>
 80165ca:	4605      	mov	r5, r0
 80165cc:	2800      	cmp	r0, #0
 80165ce:	f000 809c 	beq.w	801670a <rcl_expand_topic_name+0x27e>
 80165d2:	464a      	mov	r2, r9
 80165d4:	4620      	mov	r0, r4
 80165d6:	4629      	mov	r1, r5
 80165d8:	ab14      	add	r3, sp, #80	; 0x50
 80165da:	f002 f961 	bl	80188a0 <rcutils_repl_str>
 80165de:	4604      	mov	r4, r0
 80165e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165e2:	4628      	mov	r0, r5
 80165e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165e6:	4798      	blx	r3
 80165e8:	4650      	mov	r0, sl
 80165ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80165ee:	4798      	blx	r3
 80165f0:	2c00      	cmp	r4, #0
 80165f2:	d07b      	beq.n	80166ec <rcl_expand_topic_name+0x260>
 80165f4:	217b      	movs	r1, #123	; 0x7b
 80165f6:	4620      	mov	r0, r4
 80165f8:	f004 fa56 	bl	801aaa8 <strchr>
 80165fc:	46a2      	mov	sl, r4
 80165fe:	4605      	mov	r5, r0
 8016600:	e7b9      	b.n	8016576 <rcl_expand_topic_name+0xea>
 8016602:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8016606:	9806      	ldr	r0, [sp, #24]
 8016608:	1c69      	adds	r1, r5, #1
 801660a:	f7f9 fecf 	bl	80103ac <rcutils_string_map_getn>
 801660e:	4681      	mov	r9, r0
 8016610:	2800      	cmp	r0, #0
 8016612:	d1cf      	bne.n	80165b4 <rcl_expand_topic_name+0x128>
 8016614:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016616:	ab16      	add	r3, sp, #88	; 0x58
 8016618:	6010      	str	r0, [r2, #0]
 801661a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801661e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016622:	ab14      	add	r3, sp, #80	; 0x50
 8016624:	cb0c      	ldmia	r3, {r2, r3}
 8016626:	4659      	mov	r1, fp
 8016628:	4628      	mov	r0, r5
 801662a:	f002 fa23 	bl	8018a74 <rcutils_strndup>
 801662e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016630:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016632:	4798      	blx	r3
 8016634:	4650      	mov	r0, sl
 8016636:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016638:	9918      	ldr	r1, [sp, #96]	; 0x60
 801663a:	4798      	blx	r3
 801663c:	2469      	movs	r4, #105	; 0x69
 801663e:	4620      	mov	r0, r4
 8016640:	b00b      	add	sp, #44	; 0x2c
 8016642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016646:	240b      	movs	r4, #11
 8016648:	4620      	mov	r0, r4
 801664a:	b00b      	add	sp, #44	; 0x2c
 801664c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016650:	f7ff fe7e 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 8016654:	4604      	mov	r4, r0
 8016656:	e7f2      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 8016658:	2467      	movs	r4, #103	; 0x67
 801665a:	4620      	mov	r0, r4
 801665c:	b00b      	add	sp, #44	; 0x2c
 801665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016662:	24c9      	movs	r4, #201	; 0xc9
 8016664:	e7eb      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 8016666:	2800      	cmp	r0, #0
 8016668:	d057      	beq.n	801671a <rcl_expand_topic_name+0x28e>
 801666a:	46c1      	mov	r9, r8
 801666c:	4625      	mov	r5, r4
 801666e:	e77e      	b.n	801656e <rcl_expand_topic_name+0xe2>
 8016670:	46b1      	mov	r9, r6
 8016672:	e79f      	b.n	80165b4 <rcl_expand_topic_name+0x128>
 8016674:	2800      	cmp	r0, #0
 8016676:	d1f8      	bne.n	801666a <rcl_expand_topic_name+0x1de>
 8016678:	4638      	mov	r0, r7
 801667a:	f7e9 fde3 	bl	8000244 <strlen>
 801667e:	4a31      	ldr	r2, [pc, #196]	; (8016744 <rcl_expand_topic_name+0x2b8>)
 8016680:	4b31      	ldr	r3, [pc, #196]	; (8016748 <rcl_expand_topic_name+0x2bc>)
 8016682:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016686:	2801      	cmp	r0, #1
 8016688:	bf18      	it	ne
 801668a:	4613      	movne	r3, r2
 801668c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801668e:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8016692:	e9cd 2100 	strd	r2, r1, [sp]
 8016696:	f8cd 8010 	str.w	r8, [sp, #16]
 801669a:	ab14      	add	r3, sp, #80	; 0x50
 801669c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801669e:	f002 f8ad 	bl	80187fc <rcutils_format_string_limit>
 80166a2:	4605      	mov	r5, r0
 80166a4:	b315      	cbz	r5, 80166ec <rcl_expand_topic_name+0x260>
 80166a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166a8:	601d      	str	r5, [r3, #0]
 80166aa:	e7c8      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 80166ac:	782b      	ldrb	r3, [r5, #0]
 80166ae:	2b2f      	cmp	r3, #47	; 0x2f
 80166b0:	d0f9      	beq.n	80166a6 <rcl_expand_topic_name+0x21a>
 80166b2:	4638      	mov	r0, r7
 80166b4:	f7e9 fdc6 	bl	8000244 <strlen>
 80166b8:	4a22      	ldr	r2, [pc, #136]	; (8016744 <rcl_expand_topic_name+0x2b8>)
 80166ba:	4b23      	ldr	r3, [pc, #140]	; (8016748 <rcl_expand_topic_name+0x2bc>)
 80166bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80166c0:	2801      	cmp	r0, #1
 80166c2:	bf18      	it	ne
 80166c4:	4613      	movne	r3, r2
 80166c6:	e9cd 7503 	strd	r7, r5, [sp, #12]
 80166ca:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80166ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80166d0:	ab14      	add	r3, sp, #80	; 0x50
 80166d2:	9200      	str	r2, [sp, #0]
 80166d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80166d6:	f002 f891 	bl	80187fc <rcutils_format_string_limit>
 80166da:	4603      	mov	r3, r0
 80166dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80166de:	4628      	mov	r0, r5
 80166e0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80166e2:	461d      	mov	r5, r3
 80166e4:	4790      	blx	r2
 80166e6:	e7dd      	b.n	80166a4 <rcl_expand_topic_name+0x218>
 80166e8:	24ca      	movs	r4, #202	; 0xca
 80166ea:	e7a8      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 80166ec:	2300      	movs	r3, #0
 80166ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80166f0:	240a      	movs	r4, #10
 80166f2:	6013      	str	r3, [r2, #0]
 80166f4:	e7a3      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 80166f6:	4653      	mov	r3, sl
 80166f8:	4655      	mov	r5, sl
 80166fa:	9c07      	ldr	r4, [sp, #28]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d1d5      	bne.n	80166ac <rcl_expand_topic_name+0x220>
 8016700:	f898 3000 	ldrb.w	r3, [r8]
 8016704:	2b2f      	cmp	r3, #47	; 0x2f
 8016706:	d0ce      	beq.n	80166a6 <rcl_expand_topic_name+0x21a>
 8016708:	e7b6      	b.n	8016678 <rcl_expand_topic_name+0x1ec>
 801670a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801670c:	4650      	mov	r0, sl
 801670e:	601d      	str	r5, [r3, #0]
 8016710:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016714:	4798      	blx	r3
 8016716:	240a      	movs	r4, #10
 8016718:	e791      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 801671a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 801671e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016722:	ab14      	add	r3, sp, #80	; 0x50
 8016724:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016726:	4640      	mov	r0, r8
 8016728:	f002 f982 	bl	8018a30 <rcutils_strdup>
 801672c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801672e:	2800      	cmp	r0, #0
 8016730:	bf08      	it	eq
 8016732:	240a      	moveq	r4, #10
 8016734:	6018      	str	r0, [r3, #0]
 8016736:	e782      	b.n	801663e <rcl_expand_topic_name+0x1b2>
 8016738:	0801d4bc 	.word	0x0801d4bc
 801673c:	0801d4c4 	.word	0x0801d4c4
 8016740:	0801d4cc 	.word	0x0801d4cc
 8016744:	0801d1c4 	.word	0x0801d1c4
 8016748:	0801d1e8 	.word	0x0801d1e8
 801674c:	0801d4b4 	.word	0x0801d4b4
 8016750:	0801d1d8 	.word	0x0801d1d8

08016754 <rcl_get_default_topic_name_substitutions>:
 8016754:	2800      	cmp	r0, #0
 8016756:	bf0c      	ite	eq
 8016758:	200b      	moveq	r0, #11
 801675a:	2000      	movne	r0, #0
 801675c:	4770      	bx	lr
 801675e:	bf00      	nop

08016760 <rcl_init>:
 8016760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016764:	1e07      	subs	r7, r0, #0
 8016766:	4688      	mov	r8, r1
 8016768:	4692      	mov	sl, r2
 801676a:	4699      	mov	r9, r3
 801676c:	b09f      	sub	sp, #124	; 0x7c
 801676e:	f340 8096 	ble.w	801689e <rcl_init+0x13e>
 8016772:	2900      	cmp	r1, #0
 8016774:	f000 8096 	beq.w	80168a4 <rcl_init+0x144>
 8016778:	2400      	movs	r4, #0
 801677a:	1f0d      	subs	r5, r1, #4
 801677c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8016780:	3401      	adds	r4, #1
 8016782:	2e00      	cmp	r6, #0
 8016784:	f000 808e 	beq.w	80168a4 <rcl_init+0x144>
 8016788:	42a7      	cmp	r7, r4
 801678a:	d1f7      	bne.n	801677c <rcl_init+0x1c>
 801678c:	f1ba 0f00 	cmp.w	sl, #0
 8016790:	f000 8088 	beq.w	80168a4 <rcl_init+0x144>
 8016794:	f8da 4000 	ldr.w	r4, [sl]
 8016798:	2c00      	cmp	r4, #0
 801679a:	f000 8083 	beq.w	80168a4 <rcl_init+0x144>
 801679e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167a0:	ad19      	add	r5, sp, #100	; 0x64
 80167a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167a4:	6823      	ldr	r3, [r4, #0]
 80167a6:	a819      	add	r0, sp, #100	; 0x64
 80167a8:	602b      	str	r3, [r5, #0]
 80167aa:	f7f9 fbfd 	bl	800ffa8 <rcutils_allocator_is_valid>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d078      	beq.n	80168a4 <rcl_init+0x144>
 80167b2:	f1b9 0f00 	cmp.w	r9, #0
 80167b6:	d075      	beq.n	80168a4 <rcl_init+0x144>
 80167b8:	f8d9 3000 	ldr.w	r3, [r9]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d176      	bne.n	80168ae <rcl_init+0x14e>
 80167c0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80167c4:	2178      	movs	r1, #120	; 0x78
 80167c6:	2001      	movs	r0, #1
 80167c8:	4798      	blx	r3
 80167ca:	4604      	mov	r4, r0
 80167cc:	f8c9 0000 	str.w	r0, [r9]
 80167d0:	2800      	cmp	r0, #0
 80167d2:	f000 80c6 	beq.w	8016962 <rcl_init+0x202>
 80167d6:	a802      	add	r0, sp, #8
 80167d8:	f002 f968 	bl	8018aac <rmw_get_zero_initialized_context>
 80167dc:	2250      	movs	r2, #80	; 0x50
 80167de:	a902      	add	r1, sp, #8
 80167e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80167e4:	f003 ff8a 	bl	801a6fc <memcpy>
 80167e8:	f8d9 6000 	ldr.w	r6, [r9]
 80167ec:	ac19      	add	r4, sp, #100	; 0x64
 80167ee:	4635      	mov	r5, r6
 80167f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	f106 0114 	add.w	r1, r6, #20
 80167fa:	4650      	mov	r0, sl
 80167fc:	602b      	str	r3, [r5, #0]
 80167fe:	f7f8 fb89 	bl	800ef14 <rcl_init_options_copy>
 8016802:	4606      	mov	r6, r0
 8016804:	2800      	cmp	r0, #0
 8016806:	d143      	bne.n	8016890 <rcl_init+0x130>
 8016808:	463c      	mov	r4, r7
 801680a:	f8d9 a000 	ldr.w	sl, [r9]
 801680e:	17fd      	asrs	r5, r7, #31
 8016810:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8016814:	f8ca 0020 	str.w	r0, [sl, #32]
 8016818:	2f00      	cmp	r7, #0
 801681a:	d04d      	beq.n	80168b8 <rcl_init+0x158>
 801681c:	f1b8 0f00 	cmp.w	r8, #0
 8016820:	d04a      	beq.n	80168b8 <rcl_init+0x158>
 8016822:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8016826:	4638      	mov	r0, r7
 8016828:	2104      	movs	r1, #4
 801682a:	4798      	blx	r3
 801682c:	f8d9 b000 	ldr.w	fp, [r9]
 8016830:	f8ca 0020 	str.w	r0, [sl, #32]
 8016834:	f8db 3020 	ldr.w	r3, [fp, #32]
 8016838:	b34b      	cbz	r3, 801688e <rcl_init+0x12e>
 801683a:	2f01      	cmp	r7, #1
 801683c:	f175 0300 	sbcs.w	r3, r5, #0
 8016840:	db3a      	blt.n	80168b8 <rcl_init+0x158>
 8016842:	2600      	movs	r6, #0
 8016844:	2700      	movs	r7, #0
 8016846:	f1a8 0804 	sub.w	r8, r8, #4
 801684a:	e00d      	b.n	8016868 <rcl_init+0x108>
 801684c:	4652      	mov	r2, sl
 801684e:	f8d8 1000 	ldr.w	r1, [r8]
 8016852:	f003 ff53 	bl	801a6fc <memcpy>
 8016856:	3601      	adds	r6, #1
 8016858:	f147 0700 	adc.w	r7, r7, #0
 801685c:	42bd      	cmp	r5, r7
 801685e:	bf08      	it	eq
 8016860:	42b4      	cmpeq	r4, r6
 8016862:	d029      	beq.n	80168b8 <rcl_init+0x158>
 8016864:	f8d9 b000 	ldr.w	fp, [r9]
 8016868:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801686c:	f7e9 fcea 	bl	8000244 <strlen>
 8016870:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016872:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016874:	f8db b020 	ldr.w	fp, [fp, #32]
 8016878:	4682      	mov	sl, r0
 801687a:	4798      	blx	r3
 801687c:	f8d9 2000 	ldr.w	r2, [r9]
 8016880:	00b3      	lsls	r3, r6, #2
 8016882:	6a12      	ldr	r2, [r2, #32]
 8016884:	f84b 0003 	str.w	r0, [fp, r3]
 8016888:	58d0      	ldr	r0, [r2, r3]
 801688a:	2800      	cmp	r0, #0
 801688c:	d1de      	bne.n	801684c <rcl_init+0xec>
 801688e:	260a      	movs	r6, #10
 8016890:	4648      	mov	r0, r9
 8016892:	f7ff fd8f 	bl	80163b4 <__cleanup_context>
 8016896:	4630      	mov	r0, r6
 8016898:	b01f      	add	sp, #124	; 0x7c
 801689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801689e:	2900      	cmp	r1, #0
 80168a0:	f43f af74 	beq.w	801678c <rcl_init+0x2c>
 80168a4:	260b      	movs	r6, #11
 80168a6:	4630      	mov	r0, r6
 80168a8:	b01f      	add	sp, #124	; 0x7c
 80168aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ae:	2664      	movs	r6, #100	; 0x64
 80168b0:	4630      	mov	r0, r6
 80168b2:	b01f      	add	sp, #124	; 0x7c
 80168b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b8:	2605      	movs	r6, #5
 80168ba:	2300      	movs	r3, #0
 80168bc:	2201      	movs	r2, #1
 80168be:	4832      	ldr	r0, [pc, #200]	; (8016988 <rcl_init+0x228>)
 80168c0:	9600      	str	r6, [sp, #0]
 80168c2:	f001 ff51 	bl	8018768 <__atomic_fetch_add_8>
 80168c6:	4604      	mov	r4, r0
 80168c8:	460d      	mov	r5, r1
 80168ca:	ea54 0305 	orrs.w	r3, r4, r5
 80168ce:	d03e      	beq.n	801694e <rcl_init+0x1ee>
 80168d0:	4602      	mov	r2, r0
 80168d2:	460b      	mov	r3, r1
 80168d4:	9600      	str	r6, [sp, #0]
 80168d6:	f109 0008 	add.w	r0, r9, #8
 80168da:	f001 fed9 	bl	8018690 <__atomic_store_8>
 80168de:	f8d9 3000 	ldr.w	r3, [r9]
 80168e2:	695f      	ldr	r7, [r3, #20]
 80168e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168e6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80168ea:	3301      	adds	r3, #1
 80168ec:	d03d      	beq.n	801696a <rcl_init+0x20a>
 80168ee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80168f2:	b94b      	cbnz	r3, 8016908 <rcl_init+0x1a8>
 80168f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80168f8:	f000 f848 	bl	801698c <rcl_get_localhost_only>
 80168fc:	4606      	mov	r6, r0
 80168fe:	2800      	cmp	r0, #0
 8016900:	d1c6      	bne.n	8016890 <rcl_init+0x130>
 8016902:	f8d9 3000 	ldr.w	r3, [r9]
 8016906:	695f      	ldr	r7, [r3, #20]
 8016908:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801690a:	aa18      	add	r2, sp, #96	; 0x60
 801690c:	a917      	add	r1, sp, #92	; 0x5c
 801690e:	f000 ff95 	bl	801783c <rcl_validate_enclave_name>
 8016912:	4606      	mov	r6, r0
 8016914:	2800      	cmp	r0, #0
 8016916:	d1bb      	bne.n	8016890 <rcl_init+0x130>
 8016918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801691a:	bb23      	cbnz	r3, 8016966 <rcl_init+0x206>
 801691c:	f8d9 1000 	ldr.w	r1, [r9]
 8016920:	694b      	ldr	r3, [r1, #20]
 8016922:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8016924:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8016928:	f000 fad6 	bl	8016ed8 <rcl_get_security_options_from_environment>
 801692c:	4606      	mov	r6, r0
 801692e:	2800      	cmp	r0, #0
 8016930:	d1ae      	bne.n	8016890 <rcl_init+0x130>
 8016932:	f8d9 1000 	ldr.w	r1, [r9]
 8016936:	6948      	ldr	r0, [r1, #20]
 8016938:	3128      	adds	r1, #40	; 0x28
 801693a:	3018      	adds	r0, #24
 801693c:	f7f9 ff5c 	bl	80107f8 <rmw_init>
 8016940:	4606      	mov	r6, r0
 8016942:	2800      	cmp	r0, #0
 8016944:	d0af      	beq.n	80168a6 <rcl_init+0x146>
 8016946:	f7ff fd03 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 801694a:	4606      	mov	r6, r0
 801694c:	e7a0      	b.n	8016890 <rcl_init+0x130>
 801694e:	9600      	str	r6, [sp, #0]
 8016950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016958:	480b      	ldr	r0, [pc, #44]	; (8016988 <rcl_init+0x228>)
 801695a:	f001 fe99 	bl	8018690 <__atomic_store_8>
 801695e:	2601      	movs	r6, #1
 8016960:	e796      	b.n	8016890 <rcl_init+0x130>
 8016962:	260a      	movs	r6, #10
 8016964:	e79f      	b.n	80168a6 <rcl_init+0x146>
 8016966:	2601      	movs	r6, #1
 8016968:	e792      	b.n	8016890 <rcl_init+0x130>
 801696a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801696e:	f003 fc39 	bl	801a1e4 <rcl_get_default_domain_id>
 8016972:	4606      	mov	r6, r0
 8016974:	2800      	cmp	r0, #0
 8016976:	d18b      	bne.n	8016890 <rcl_init+0x130>
 8016978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697a:	3301      	adds	r3, #1
 801697c:	f8d9 3000 	ldr.w	r3, [r9]
 8016980:	bf08      	it	eq
 8016982:	6278      	streq	r0, [r7, #36]	; 0x24
 8016984:	695f      	ldr	r7, [r3, #20]
 8016986:	e7b2      	b.n	80168ee <rcl_init+0x18e>
 8016988:	20000248 	.word	0x20000248

0801698c <rcl_get_localhost_only>:
 801698c:	2300      	movs	r3, #0
 801698e:	b510      	push	{r4, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	9301      	str	r3, [sp, #4]
 8016994:	b1b8      	cbz	r0, 80169c6 <rcl_get_localhost_only+0x3a>
 8016996:	4604      	mov	r4, r0
 8016998:	a901      	add	r1, sp, #4
 801699a:	480c      	ldr	r0, [pc, #48]	; (80169cc <rcl_get_localhost_only+0x40>)
 801699c:	f001 ff68 	bl	8018870 <rcutils_get_env>
 80169a0:	b110      	cbz	r0, 80169a8 <rcl_get_localhost_only+0x1c>
 80169a2:	2001      	movs	r0, #1
 80169a4:	b002      	add	sp, #8
 80169a6:	bd10      	pop	{r4, pc}
 80169a8:	9b01      	ldr	r3, [sp, #4]
 80169aa:	b113      	cbz	r3, 80169b2 <rcl_get_localhost_only+0x26>
 80169ac:	781a      	ldrb	r2, [r3, #0]
 80169ae:	2a31      	cmp	r2, #49	; 0x31
 80169b0:	d004      	beq.n	80169bc <rcl_get_localhost_only+0x30>
 80169b2:	2302      	movs	r3, #2
 80169b4:	2000      	movs	r0, #0
 80169b6:	7023      	strb	r3, [r4, #0]
 80169b8:	b002      	add	sp, #8
 80169ba:	bd10      	pop	{r4, pc}
 80169bc:	785b      	ldrb	r3, [r3, #1]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1f7      	bne.n	80169b2 <rcl_get_localhost_only+0x26>
 80169c2:	2301      	movs	r3, #1
 80169c4:	e7f6      	b.n	80169b4 <rcl_get_localhost_only+0x28>
 80169c6:	200b      	movs	r0, #11
 80169c8:	b002      	add	sp, #8
 80169ca:	bd10      	pop	{r4, pc}
 80169cc:	0801d4d8 	.word	0x0801d4d8

080169d0 <rcl_get_zero_initialized_node>:
 80169d0:	4603      	mov	r3, r0
 80169d2:	4a03      	ldr	r2, [pc, #12]	; (80169e0 <rcl_get_zero_initialized_node+0x10>)
 80169d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80169d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80169dc:	4618      	mov	r0, r3
 80169de:	4770      	bx	lr
 80169e0:	0801d4f4 	.word	0x0801d4f4

080169e4 <rcl_node_init>:
 80169e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e8:	2700      	movs	r7, #0
 80169ea:	b09b      	sub	sp, #108	; 0x6c
 80169ec:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 80169f0:	4604      	mov	r4, r0
 80169f2:	a815      	add	r0, sp, #84	; 0x54
 80169f4:	460e      	mov	r6, r1
 80169f6:	4615      	mov	r5, r2
 80169f8:	4698      	mov	r8, r3
 80169fa:	9713      	str	r7, [sp, #76]	; 0x4c
 80169fc:	f003 fd00 	bl	801a400 <rcl_guard_condition_get_default_options>
 8016a00:	f1b9 0f00 	cmp.w	r9, #0
 8016a04:	f000 80fa 	beq.w	8016bfc <rcl_node_init+0x218>
 8016a08:	f109 0a04 	add.w	sl, r9, #4
 8016a0c:	4650      	mov	r0, sl
 8016a0e:	f7f9 facb 	bl	800ffa8 <rcutils_allocator_is_valid>
 8016a12:	2800      	cmp	r0, #0
 8016a14:	f000 80f2 	beq.w	8016bfc <rcl_node_init+0x218>
 8016a18:	2e00      	cmp	r6, #0
 8016a1a:	f000 80ef 	beq.w	8016bfc <rcl_node_init+0x218>
 8016a1e:	2d00      	cmp	r5, #0
 8016a20:	f000 80ec 	beq.w	8016bfc <rcl_node_init+0x218>
 8016a24:	2c00      	cmp	r4, #0
 8016a26:	f000 80e9 	beq.w	8016bfc <rcl_node_init+0x218>
 8016a2a:	6867      	ldr	r7, [r4, #4]
 8016a2c:	2f00      	cmp	r7, #0
 8016a2e:	f040 810f 	bne.w	8016c50 <rcl_node_init+0x26c>
 8016a32:	f1b8 0f00 	cmp.w	r8, #0
 8016a36:	f000 80e1 	beq.w	8016bfc <rcl_node_init+0x218>
 8016a3a:	4640      	mov	r0, r8
 8016a3c:	f7ff fcac 	bl	8016398 <rcl_context_is_valid>
 8016a40:	4683      	mov	fp, r0
 8016a42:	2800      	cmp	r0, #0
 8016a44:	f000 80df 	beq.w	8016c06 <rcl_node_init+0x222>
 8016a48:	463a      	mov	r2, r7
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	a914      	add	r1, sp, #80	; 0x50
 8016a4e:	9714      	str	r7, [sp, #80]	; 0x50
 8016a50:	f002 f8a0 	bl	8018b94 <rmw_validate_node_name>
 8016a54:	4607      	mov	r7, r0
 8016a56:	2800      	cmp	r0, #0
 8016a58:	f040 80d1 	bne.w	8016bfe <rcl_node_init+0x21a>
 8016a5c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016a5e:	2800      	cmp	r0, #0
 8016a60:	f040 8100 	bne.w	8016c64 <rcl_node_init+0x280>
 8016a64:	4628      	mov	r0, r5
 8016a66:	f7e9 fbed 	bl	8000244 <strlen>
 8016a6a:	2800      	cmp	r0, #0
 8016a6c:	f040 80cd 	bne.w	8016c0a <rcl_node_init+0x226>
 8016a70:	4d8d      	ldr	r5, [pc, #564]	; (8016ca8 <rcl_node_init+0x2c4>)
 8016a72:	2200      	movs	r2, #0
 8016a74:	4628      	mov	r0, r5
 8016a76:	a914      	add	r1, sp, #80	; 0x50
 8016a78:	f002 f86e 	bl	8018b58 <rmw_validate_namespace>
 8016a7c:	4607      	mov	r7, r0
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	f040 80bd 	bne.w	8016bfe <rcl_node_init+0x21a>
 8016a84:	4683      	mov	fp, r0
 8016a86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	f040 80ef 	bne.w	8016c6c <rcl_node_init+0x288>
 8016a8e:	2030      	movs	r0, #48	; 0x30
 8016a90:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8016a94:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016a98:	9307      	str	r3, [sp, #28]
 8016a9a:	4790      	blx	r2
 8016a9c:	4607      	mov	r7, r0
 8016a9e:	6060      	str	r0, [r4, #4]
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	f000 80da 	beq.w	8016c5a <rcl_node_init+0x276>
 8016aa6:	9b07      	ldr	r3, [sp, #28]
 8016aa8:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8016aac:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8016ab0:	a80a      	add	r0, sp, #40	; 0x28
 8016ab2:	f000 f929 	bl	8016d08 <rcl_node_get_default_options>
 8016ab6:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8016aba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016abe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016ac0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8016ac4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8016ac8:	4648      	mov	r0, r9
 8016aca:	6861      	ldr	r1, [r4, #4]
 8016acc:	f8c4 8000 	str.w	r8, [r4]
 8016ad0:	f000 f936 	bl	8016d40 <rcl_node_options_copy>
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d168      	bne.n	8016baa <rcl_node_init+0x1c6>
 8016ad8:	4628      	mov	r0, r5
 8016ada:	f7e9 fbb3 	bl	8000244 <strlen>
 8016ade:	4428      	add	r0, r5
 8016ae0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8016ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8016ae6:	f000 80c9 	beq.w	8016c7c <rcl_node_init+0x298>
 8016aea:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8016aee:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8016af2:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8016cb0 <rcl_node_init+0x2cc>
 8016af6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8016afa:	9701      	str	r7, [sp, #4]
 8016afc:	f8da 7010 	ldr.w	r7, [sl, #16]
 8016b00:	f8cd c008 	str.w	ip, [sp, #8]
 8016b04:	9700      	str	r7, [sp, #0]
 8016b06:	6867      	ldr	r7, [r4, #4]
 8016b08:	f001 fe78 	bl	80187fc <rcutils_format_string_limit>
 8016b0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016b0e:	6867      	ldr	r7, [r4, #4]
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	1c59      	adds	r1, r3, #1
 8016b14:	9313      	str	r3, [sp, #76]	; 0x4c
 8016b16:	f000 80ba 	beq.w	8016c8e <rcl_node_init+0x2aa>
 8016b1a:	f8d8 2000 	ldr.w	r2, [r8]
 8016b1e:	61fb      	str	r3, [r7, #28]
 8016b20:	6952      	ldr	r2, [r2, #20]
 8016b22:	6821      	ldr	r1, [r4, #0]
 8016b24:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8016b28:	6808      	ldr	r0, [r1, #0]
 8016b2a:	f1a2 0201 	sub.w	r2, r2, #1
 8016b2e:	fab2 f282 	clz	r2, r2
 8016b32:	0952      	lsrs	r2, r2, #5
 8016b34:	9200      	str	r2, [sp, #0]
 8016b36:	4631      	mov	r1, r6
 8016b38:	462a      	mov	r2, r5
 8016b3a:	3028      	adds	r0, #40	; 0x28
 8016b3c:	f7fa f82e 	bl	8010b9c <rmw_create_node>
 8016b40:	6863      	ldr	r3, [r4, #4]
 8016b42:	6238      	str	r0, [r7, #32]
 8016b44:	6a18      	ldr	r0, [r3, #32]
 8016b46:	2800      	cmp	r0, #0
 8016b48:	d031      	beq.n	8016bae <rcl_node_init+0x1ca>
 8016b4a:	f7fa f8b9 	bl	8010cc0 <rmw_node_get_graph_guard_condition>
 8016b4e:	4607      	mov	r7, r0
 8016b50:	b358      	cbz	r0, 8016baa <rcl_node_init+0x1c6>
 8016b52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016b56:	2008      	movs	r0, #8
 8016b58:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016b5c:	6866      	ldr	r6, [r4, #4]
 8016b5e:	4798      	blx	r3
 8016b60:	6863      	ldr	r3, [r4, #4]
 8016b62:	6270      	str	r0, [r6, #36]	; 0x24
 8016b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016b66:	9207      	str	r2, [sp, #28]
 8016b68:	b30a      	cbz	r2, 8016bae <rcl_node_init+0x1ca>
 8016b6a:	ae08      	add	r6, sp, #32
 8016b6c:	4630      	mov	r0, r6
 8016b6e:	f003 fb6d 	bl	801a24c <rcl_get_zero_initialized_guard_condition>
 8016b72:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016b76:	9a07      	ldr	r2, [sp, #28]
 8016b78:	ae15      	add	r6, sp, #84	; 0x54
 8016b7a:	e882 0003 	stmia.w	r2, {r0, r1}
 8016b7e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8016b82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016b84:	6862      	ldr	r2, [r4, #4]
 8016b86:	f8da 3000 	ldr.w	r3, [sl]
 8016b8a:	f8d2 c024 	ldr.w	ip, [r2, #36]	; 0x24
 8016b8e:	6033      	str	r3, [r6, #0]
 8016b90:	ab1a      	add	r3, sp, #104	; 0x68
 8016b92:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016b96:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016b9a:	4639      	mov	r1, r7
 8016b9c:	4660      	mov	r0, ip
 8016b9e:	4642      	mov	r2, r8
 8016ba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016ba2:	f003 fbb3 	bl	801a30c <rcl_guard_condition_init_from_rmw>
 8016ba6:	4607      	mov	r7, r0
 8016ba8:	b320      	cbz	r0, 8016bf4 <rcl_node_init+0x210>
 8016baa:	6863      	ldr	r3, [r4, #4]
 8016bac:	b1f3      	cbz	r3, 8016bec <rcl_node_init+0x208>
 8016bae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016bb0:	b128      	cbz	r0, 8016bbe <rcl_node_init+0x1da>
 8016bb2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bb6:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016bba:	4798      	blx	r3
 8016bbc:	6863      	ldr	r3, [r4, #4]
 8016bbe:	6a18      	ldr	r0, [r3, #32]
 8016bc0:	b110      	cbz	r0, 8016bc8 <rcl_node_init+0x1e4>
 8016bc2:	f7fa f803 	bl	8010bcc <rmw_destroy_node>
 8016bc6:	6863      	ldr	r3, [r4, #4]
 8016bc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016bca:	b148      	cbz	r0, 8016be0 <rcl_node_init+0x1fc>
 8016bcc:	f003 fbf6 	bl	801a3bc <rcl_guard_condition_fini>
 8016bd0:	6862      	ldr	r2, [r4, #4]
 8016bd2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bd6:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8016bd8:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016bdc:	4798      	blx	r3
 8016bde:	6863      	ldr	r3, [r4, #4]
 8016be0:	4618      	mov	r0, r3
 8016be2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016be6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016bea:	4798      	blx	r3
 8016bec:	2300      	movs	r3, #0
 8016bee:	2701      	movs	r7, #1
 8016bf0:	e9c4 3300 	strd	r3, r3, [r4]
 8016bf4:	f1bb 0f00 	cmp.w	fp, #0
 8016bf8:	d123      	bne.n	8016c42 <rcl_node_init+0x25e>
 8016bfa:	e000      	b.n	8016bfe <rcl_node_init+0x21a>
 8016bfc:	270b      	movs	r7, #11
 8016bfe:	4638      	mov	r0, r7
 8016c00:	b01b      	add	sp, #108	; 0x6c
 8016c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c06:	2765      	movs	r7, #101	; 0x65
 8016c08:	e7f9      	b.n	8016bfe <rcl_node_init+0x21a>
 8016c0a:	782b      	ldrb	r3, [r5, #0]
 8016c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8016c0e:	f43f af30 	beq.w	8016a72 <rcl_node_init+0x8e>
 8016c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016c16:	4a25      	ldr	r2, [pc, #148]	; (8016cac <rcl_node_init+0x2c8>)
 8016c18:	f8da 3010 	ldr.w	r3, [sl, #16]
 8016c1c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016c20:	9503      	str	r5, [sp, #12]
 8016c22:	9300      	str	r3, [sp, #0]
 8016c24:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8016c28:	f001 fde8 	bl	80187fc <rcutils_format_string_limit>
 8016c2c:	4605      	mov	r5, r0
 8016c2e:	b360      	cbz	r0, 8016c8a <rcl_node_init+0x2a6>
 8016c30:	2200      	movs	r2, #0
 8016c32:	a914      	add	r1, sp, #80	; 0x50
 8016c34:	9214      	str	r2, [sp, #80]	; 0x50
 8016c36:	f001 ff8f 	bl	8018b58 <rmw_validate_namespace>
 8016c3a:	4607      	mov	r7, r0
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	f43f af22 	beq.w	8016a86 <rcl_node_init+0xa2>
 8016c42:	4628      	mov	r0, r5
 8016c44:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016c48:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016c4c:	4798      	blx	r3
 8016c4e:	e7d6      	b.n	8016bfe <rcl_node_init+0x21a>
 8016c50:	2764      	movs	r7, #100	; 0x64
 8016c52:	4638      	mov	r0, r7
 8016c54:	b01b      	add	sp, #108	; 0x6c
 8016c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5a:	270a      	movs	r7, #10
 8016c5c:	f1bb 0f00 	cmp.w	fp, #0
 8016c60:	d1ef      	bne.n	8016c42 <rcl_node_init+0x25e>
 8016c62:	e7cc      	b.n	8016bfe <rcl_node_init+0x21a>
 8016c64:	f001 ffe8 	bl	8018c38 <rmw_node_name_validation_result_string>
 8016c68:	27c9      	movs	r7, #201	; 0xc9
 8016c6a:	e7c8      	b.n	8016bfe <rcl_node_init+0x21a>
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	f001 ff85 	bl	8018b7c <rmw_namespace_validation_result_string>
 8016c72:	27ca      	movs	r7, #202	; 0xca
 8016c74:	f1bb 0f00 	cmp.w	fp, #0
 8016c78:	d1e3      	bne.n	8016c42 <rcl_node_init+0x25e>
 8016c7a:	e7c0      	b.n	8016bfe <rcl_node_init+0x21a>
 8016c7c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8016c80:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8016c84:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8016cb4 <rcl_node_init+0x2d0>
 8016c88:	e735      	b.n	8016af6 <rcl_node_init+0x112>
 8016c8a:	270a      	movs	r7, #10
 8016c8c:	e7b7      	b.n	8016bfe <rcl_node_init+0x21a>
 8016c8e:	a813      	add	r0, sp, #76	; 0x4c
 8016c90:	f003 faa8 	bl	801a1e4 <rcl_get_default_domain_id>
 8016c94:	2800      	cmp	r0, #0
 8016c96:	d188      	bne.n	8016baa <rcl_node_init+0x1c6>
 8016c98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c9a:	1c5a      	adds	r2, r3, #1
 8016c9c:	bf09      	itett	eq
 8016c9e:	4603      	moveq	r3, r0
 8016ca0:	6867      	ldrne	r7, [r4, #4]
 8016ca2:	6867      	ldreq	r7, [r4, #4]
 8016ca4:	9013      	streq	r0, [sp, #76]	; 0x4c
 8016ca6:	e738      	b.n	8016b1a <rcl_node_init+0x136>
 8016ca8:	0801d1c0 	.word	0x0801d1c0
 8016cac:	0801d4f0 	.word	0x0801d4f0
 8016cb0:	0801d1c4 	.word	0x0801d1c4
 8016cb4:	0801d1e8 	.word	0x0801d1e8

08016cb8 <rcl_node_is_valid>:
 8016cb8:	b130      	cbz	r0, 8016cc8 <rcl_node_is_valid+0x10>
 8016cba:	6843      	ldr	r3, [r0, #4]
 8016cbc:	b123      	cbz	r3, 8016cc8 <rcl_node_is_valid+0x10>
 8016cbe:	6a1b      	ldr	r3, [r3, #32]
 8016cc0:	b113      	cbz	r3, 8016cc8 <rcl_node_is_valid+0x10>
 8016cc2:	6800      	ldr	r0, [r0, #0]
 8016cc4:	f7ff bb68 	b.w	8016398 <rcl_context_is_valid>
 8016cc8:	2000      	movs	r0, #0
 8016cca:	4770      	bx	lr

08016ccc <rcl_node_get_name>:
 8016ccc:	b120      	cbz	r0, 8016cd8 <rcl_node_get_name+0xc>
 8016cce:	6840      	ldr	r0, [r0, #4]
 8016cd0:	b110      	cbz	r0, 8016cd8 <rcl_node_get_name+0xc>
 8016cd2:	6a00      	ldr	r0, [r0, #32]
 8016cd4:	b100      	cbz	r0, 8016cd8 <rcl_node_get_name+0xc>
 8016cd6:	6880      	ldr	r0, [r0, #8]
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop

08016cdc <rcl_node_get_namespace>:
 8016cdc:	b120      	cbz	r0, 8016ce8 <rcl_node_get_namespace+0xc>
 8016cde:	6840      	ldr	r0, [r0, #4]
 8016ce0:	b110      	cbz	r0, 8016ce8 <rcl_node_get_namespace+0xc>
 8016ce2:	6a00      	ldr	r0, [r0, #32]
 8016ce4:	b100      	cbz	r0, 8016ce8 <rcl_node_get_namespace+0xc>
 8016ce6:	68c0      	ldr	r0, [r0, #12]
 8016ce8:	4770      	bx	lr
 8016cea:	bf00      	nop

08016cec <rcl_node_get_options>:
 8016cec:	b128      	cbz	r0, 8016cfa <rcl_node_get_options+0xe>
 8016cee:	6840      	ldr	r0, [r0, #4]
 8016cf0:	b118      	cbz	r0, 8016cfa <rcl_node_get_options+0xe>
 8016cf2:	6a03      	ldr	r3, [r0, #32]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	bf08      	it	eq
 8016cf8:	2000      	moveq	r0, #0
 8016cfa:	4770      	bx	lr

08016cfc <rcl_node_get_rmw_handle>:
 8016cfc:	b110      	cbz	r0, 8016d04 <rcl_node_get_rmw_handle+0x8>
 8016cfe:	6840      	ldr	r0, [r0, #4]
 8016d00:	b100      	cbz	r0, 8016d04 <rcl_node_get_rmw_handle+0x8>
 8016d02:	6a00      	ldr	r0, [r0, #32]
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop

08016d08 <rcl_node_get_default_options>:
 8016d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d0c:	4680      	mov	r8, r0
 8016d0e:	b086      	sub	sp, #24
 8016d10:	466d      	mov	r5, sp
 8016d12:	4c0a      	ldr	r4, [pc, #40]	; (8016d3c <rcl_node_get_default_options+0x34>)
 8016d14:	4646      	mov	r6, r8
 8016d16:	4627      	mov	r7, r4
 8016d18:	4668      	mov	r0, sp
 8016d1a:	3404      	adds	r4, #4
 8016d1c:	f7f9 f936 	bl	800ff8c <rcutils_get_default_allocator>
 8016d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8016d26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016d28:	682b      	ldr	r3, [r5, #0]
 8016d2a:	6023      	str	r3, [r4, #0]
 8016d2c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016d30:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8016d34:	4640      	mov	r0, r8
 8016d36:	b006      	add	sp, #24
 8016d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d3c:	20000250 	.word	0x20000250

08016d40 <rcl_node_options_copy>:
 8016d40:	b1d8      	cbz	r0, 8016d7a <rcl_node_options_copy+0x3a>
 8016d42:	b4f0      	push	{r4, r5, r6, r7}
 8016d44:	460f      	mov	r7, r1
 8016d46:	b1a9      	cbz	r1, 8016d74 <rcl_node_options_copy+0x34>
 8016d48:	4288      	cmp	r0, r1
 8016d4a:	4606      	mov	r6, r0
 8016d4c:	d012      	beq.n	8016d74 <rcl_node_options_copy+0x34>
 8016d4e:	4605      	mov	r5, r0
 8016d50:	460c      	mov	r4, r1
 8016d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d56:	f890 c018 	ldrb.w	ip, [r0, #24]
 8016d5a:	f844 3b04 	str.w	r3, [r4], #4
 8016d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d62:	7e73      	ldrb	r3, [r6, #25]
 8016d64:	682a      	ldr	r2, [r5, #0]
 8016d66:	2000      	movs	r0, #0
 8016d68:	6022      	str	r2, [r4, #0]
 8016d6a:	f887 c018 	strb.w	ip, [r7, #24]
 8016d6e:	767b      	strb	r3, [r7, #25]
 8016d70:	bcf0      	pop	{r4, r5, r6, r7}
 8016d72:	4770      	bx	lr
 8016d74:	200b      	movs	r0, #11
 8016d76:	bcf0      	pop	{r4, r5, r6, r7}
 8016d78:	4770      	bx	lr
 8016d7a:	200b      	movs	r0, #11
 8016d7c:	4770      	bx	lr
 8016d7e:	bf00      	nop

08016d80 <exact_match_lookup>:
 8016d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d82:	460d      	mov	r5, r1
 8016d84:	4614      	mov	r4, r2
 8016d86:	b085      	sub	sp, #20
 8016d88:	f102 0608 	add.w	r6, r2, #8
 8016d8c:	4607      	mov	r7, r0
 8016d8e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016d92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016d96:	4628      	mov	r0, r5
 8016d98:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016d9c:	4917      	ldr	r1, [pc, #92]	; (8016dfc <exact_match_lookup+0x7c>)
 8016d9e:	f001 fd1f 	bl	80187e0 <rcutils_join_path>
 8016da2:	783b      	ldrb	r3, [r7, #0]
 8016da4:	4605      	mov	r5, r0
 8016da6:	2b2f      	cmp	r3, #47	; 0x2f
 8016da8:	d021      	beq.n	8016dee <exact_match_lookup+0x6e>
 8016daa:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8016dae:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016db2:	1c78      	adds	r0, r7, #1
 8016db4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016db8:	f001 fd18 	bl	80187ec <rcutils_to_native_path>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016dc2:	461e      	mov	r6, r3
 8016dc4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016dc8:	4631      	mov	r1, r6
 8016dca:	e894 000c 	ldmia.w	r4, {r2, r3}
 8016dce:	4628      	mov	r0, r5
 8016dd0:	f001 fd06 	bl	80187e0 <rcutils_join_path>
 8016dd4:	4607      	mov	r7, r0
 8016dd6:	6863      	ldr	r3, [r4, #4]
 8016dd8:	4630      	mov	r0, r6
 8016dda:	6921      	ldr	r1, [r4, #16]
 8016ddc:	4798      	blx	r3
 8016dde:	4628      	mov	r0, r5
 8016de0:	463d      	mov	r5, r7
 8016de2:	6863      	ldr	r3, [r4, #4]
 8016de4:	6921      	ldr	r1, [r4, #16]
 8016de6:	4798      	blx	r3
 8016de8:	4628      	mov	r0, r5
 8016dea:	b005      	add	sp, #20
 8016dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dee:	787b      	ldrb	r3, [r7, #1]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d1da      	bne.n	8016daa <exact_match_lookup+0x2a>
 8016df4:	4628      	mov	r0, r5
 8016df6:	b005      	add	sp, #20
 8016df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	0801d538 	.word	0x0801d538

08016e00 <rcl_get_secure_root>:
 8016e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e04:	b085      	sub	sp, #20
 8016e06:	b168      	cbz	r0, 8016e24 <rcl_get_secure_root+0x24>
 8016e08:	4607      	mov	r7, r0
 8016e0a:	4608      	mov	r0, r1
 8016e0c:	460c      	mov	r4, r1
 8016e0e:	f7f9 f8cb 	bl	800ffa8 <rcutils_allocator_is_valid>
 8016e12:	b138      	cbz	r0, 8016e24 <rcl_get_secure_root+0x24>
 8016e14:	2300      	movs	r3, #0
 8016e16:	482e      	ldr	r0, [pc, #184]	; (8016ed0 <rcl_get_secure_root+0xd0>)
 8016e18:	a903      	add	r1, sp, #12
 8016e1a:	9303      	str	r3, [sp, #12]
 8016e1c:	f001 fd28 	bl	8018870 <rcutils_get_env>
 8016e20:	4605      	mov	r5, r0
 8016e22:	b120      	cbz	r0, 8016e2e <rcl_get_secure_root+0x2e>
 8016e24:	2500      	movs	r5, #0
 8016e26:	4628      	mov	r0, r5
 8016e28:	b005      	add	sp, #20
 8016e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e2e:	9e03      	ldr	r6, [sp, #12]
 8016e30:	7833      	ldrb	r3, [r6, #0]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d0f6      	beq.n	8016e24 <rcl_get_secure_root+0x24>
 8016e36:	f104 090c 	add.w	r9, r4, #12
 8016e3a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016e3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016e42:	4630      	mov	r0, r6
 8016e44:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016e48:	f001 fdf2 	bl	8018a30 <rcutils_strdup>
 8016e4c:	4680      	mov	r8, r0
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d0e8      	beq.n	8016e24 <rcl_get_secure_root+0x24>
 8016e52:	4820      	ldr	r0, [pc, #128]	; (8016ed4 <rcl_get_secure_root+0xd4>)
 8016e54:	a903      	add	r1, sp, #12
 8016e56:	9503      	str	r5, [sp, #12]
 8016e58:	f001 fd0a 	bl	8018870 <rcutils_get_env>
 8016e5c:	b160      	cbz	r0, 8016e78 <rcl_get_secure_root+0x78>
 8016e5e:	2600      	movs	r6, #0
 8016e60:	4630      	mov	r0, r6
 8016e62:	6863      	ldr	r3, [r4, #4]
 8016e64:	6921      	ldr	r1, [r4, #16]
 8016e66:	4798      	blx	r3
 8016e68:	4640      	mov	r0, r8
 8016e6a:	6863      	ldr	r3, [r4, #4]
 8016e6c:	6921      	ldr	r1, [r4, #16]
 8016e6e:	4798      	blx	r3
 8016e70:	4628      	mov	r0, r5
 8016e72:	b005      	add	sp, #20
 8016e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e78:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8016e7c:	f89c 6000 	ldrb.w	r6, [ip]
 8016e80:	b1f6      	cbz	r6, 8016ec0 <rcl_get_secure_root+0xc0>
 8016e82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016e86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016e8a:	4660      	mov	r0, ip
 8016e8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016e90:	f001 fdce 	bl	8018a30 <rcutils_strdup>
 8016e94:	4606      	mov	r6, r0
 8016e96:	2800      	cmp	r0, #0
 8016e98:	d0e1      	beq.n	8016e5e <rcl_get_secure_root+0x5e>
 8016e9a:	4622      	mov	r2, r4
 8016e9c:	4641      	mov	r1, r8
 8016e9e:	f7ff ff6f 	bl	8016d80 <exact_match_lookup>
 8016ea2:	4605      	mov	r5, r0
 8016ea4:	2d00      	cmp	r5, #0
 8016ea6:	d0db      	beq.n	8016e60 <rcl_get_secure_root+0x60>
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	f001 fc97 	bl	80187dc <rcutils_is_directory>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2800      	cmp	r0, #0
 8016eb2:	d1d5      	bne.n	8016e60 <rcl_get_secure_root+0x60>
 8016eb4:	4628      	mov	r0, r5
 8016eb6:	6862      	ldr	r2, [r4, #4]
 8016eb8:	6921      	ldr	r1, [r4, #16]
 8016eba:	461d      	mov	r5, r3
 8016ebc:	4790      	blx	r2
 8016ebe:	e7cf      	b.n	8016e60 <rcl_get_secure_root+0x60>
 8016ec0:	4638      	mov	r0, r7
 8016ec2:	4622      	mov	r2, r4
 8016ec4:	4641      	mov	r1, r8
 8016ec6:	f7ff ff5b 	bl	8016d80 <exact_match_lookup>
 8016eca:	4605      	mov	r5, r0
 8016ecc:	e7ea      	b.n	8016ea4 <rcl_get_secure_root+0xa4>
 8016ece:	bf00      	nop
 8016ed0:	0801d544 	.word	0x0801d544
 8016ed4:	0801d55c 	.word	0x0801d55c

08016ed8 <rcl_get_security_options_from_environment>:
 8016ed8:	2300      	movs	r3, #0
 8016eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	4606      	mov	r6, r0
 8016ee2:	460f      	mov	r7, r1
 8016ee4:	4820      	ldr	r0, [pc, #128]	; (8016f68 <rcl_get_security_options_from_environment+0x90>)
 8016ee6:	a901      	add	r1, sp, #4
 8016ee8:	4690      	mov	r8, r2
 8016eea:	9301      	str	r3, [sp, #4]
 8016eec:	f001 fcc0 	bl	8018870 <rcutils_get_env>
 8016ef0:	b120      	cbz	r0, 8016efc <rcl_get_security_options_from_environment+0x24>
 8016ef2:	2501      	movs	r5, #1
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	b002      	add	sp, #8
 8016ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016efc:	4604      	mov	r4, r0
 8016efe:	491b      	ldr	r1, [pc, #108]	; (8016f6c <rcl_get_security_options_from_environment+0x94>)
 8016f00:	9801      	ldr	r0, [sp, #4]
 8016f02:	f7e9 f995 	bl	8000230 <strcmp>
 8016f06:	4605      	mov	r5, r0
 8016f08:	b9e8      	cbnz	r0, 8016f46 <rcl_get_security_options_from_environment+0x6e>
 8016f0a:	9001      	str	r0, [sp, #4]
 8016f0c:	f1b8 0f00 	cmp.w	r8, #0
 8016f10:	d020      	beq.n	8016f54 <rcl_get_security_options_from_environment+0x7c>
 8016f12:	4817      	ldr	r0, [pc, #92]	; (8016f70 <rcl_get_security_options_from_environment+0x98>)
 8016f14:	a901      	add	r1, sp, #4
 8016f16:	f001 fcab 	bl	8018870 <rcutils_get_env>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	d1e9      	bne.n	8016ef2 <rcl_get_security_options_from_environment+0x1a>
 8016f1e:	4915      	ldr	r1, [pc, #84]	; (8016f74 <rcl_get_security_options_from_environment+0x9c>)
 8016f20:	9801      	ldr	r0, [sp, #4]
 8016f22:	f7e9 f985 	bl	8000230 <strcmp>
 8016f26:	fab0 f080 	clz	r0, r0
 8016f2a:	0940      	lsrs	r0, r0, #5
 8016f2c:	f888 0000 	strb.w	r0, [r8]
 8016f30:	4639      	mov	r1, r7
 8016f32:	4630      	mov	r0, r6
 8016f34:	f7ff ff64 	bl	8016e00 <rcl_get_secure_root>
 8016f38:	b170      	cbz	r0, 8016f58 <rcl_get_security_options_from_environment+0x80>
 8016f3a:	f8c8 0004 	str.w	r0, [r8, #4]
 8016f3e:	4628      	mov	r0, r5
 8016f40:	b002      	add	sp, #8
 8016f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f46:	4625      	mov	r5, r4
 8016f48:	4628      	mov	r0, r5
 8016f4a:	f888 4000 	strb.w	r4, [r8]
 8016f4e:	b002      	add	sp, #8
 8016f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f54:	250b      	movs	r5, #11
 8016f56:	e7cd      	b.n	8016ef4 <rcl_get_security_options_from_environment+0x1c>
 8016f58:	f898 5000 	ldrb.w	r5, [r8]
 8016f5c:	f1a5 0501 	sub.w	r5, r5, #1
 8016f60:	fab5 f585 	clz	r5, r5
 8016f64:	096d      	lsrs	r5, r5, #5
 8016f66:	e7c5      	b.n	8016ef4 <rcl_get_security_options_from_environment+0x1c>
 8016f68:	0801d4fc 	.word	0x0801d4fc
 8016f6c:	0801d510 	.word	0x0801d510
 8016f70:	0801d518 	.word	0x0801d518
 8016f74:	0801d530 	.word	0x0801d530

08016f78 <rcl_service_get_rmw_handle>:
 8016f78:	b110      	cbz	r0, 8016f80 <rcl_service_get_rmw_handle+0x8>
 8016f7a:	6800      	ldr	r0, [r0, #0]
 8016f7c:	b100      	cbz	r0, 8016f80 <rcl_service_get_rmw_handle+0x8>
 8016f7e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop

08016f84 <rcl_take_request>:
 8016f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f86:	460e      	mov	r6, r1
 8016f88:	4607      	mov	r7, r0
 8016f8a:	b08d      	sub	sp, #52	; 0x34
 8016f8c:	ad06      	add	r5, sp, #24
 8016f8e:	460c      	mov	r4, r1
 8016f90:	4694      	mov	ip, r2
 8016f92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016f94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016f96:	e896 0003 	ldmia.w	r6, {r0, r1}
 8016f9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8016f9e:	b1e7      	cbz	r7, 8016fda <rcl_take_request+0x56>
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	b1d3      	cbz	r3, 8016fda <rcl_take_request+0x56>
 8016fa4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016fa6:	b1c0      	cbz	r0, 8016fda <rcl_take_request+0x56>
 8016fa8:	4662      	mov	r2, ip
 8016faa:	b30a      	cbz	r2, 8016ff0 <rcl_take_request+0x6c>
 8016fac:	2500      	movs	r5, #0
 8016fae:	f10d 0307 	add.w	r3, sp, #7
 8016fb2:	a902      	add	r1, sp, #8
 8016fb4:	f88d 5007 	strb.w	r5, [sp, #7]
 8016fb8:	f002 f810 	bl	8018fdc <rmw_take_request>
 8016fbc:	4606      	mov	r6, r0
 8016fbe:	b178      	cbz	r0, 8016fe0 <rcl_take_request+0x5c>
 8016fc0:	280a      	cmp	r0, #10
 8016fc2:	bf18      	it	ne
 8016fc4:	2601      	movne	r6, #1
 8016fc6:	ad06      	add	r5, sp, #24
 8016fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016fd0:	e884 0003 	stmia.w	r4, {r0, r1}
 8016fd4:	4630      	mov	r0, r6
 8016fd6:	b00d      	add	sp, #52	; 0x34
 8016fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fda:	f44f 7616 	mov.w	r6, #600	; 0x258
 8016fde:	e7f2      	b.n	8016fc6 <rcl_take_request+0x42>
 8016fe0:	f240 2359 	movw	r3, #601	; 0x259
 8016fe4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016fe8:	2a00      	cmp	r2, #0
 8016fea:	bf08      	it	eq
 8016fec:	461e      	moveq	r6, r3
 8016fee:	e7ea      	b.n	8016fc6 <rcl_take_request+0x42>
 8016ff0:	260b      	movs	r6, #11
 8016ff2:	e7e8      	b.n	8016fc6 <rcl_take_request+0x42>

08016ff4 <rcl_send_response>:
 8016ff4:	b160      	cbz	r0, 8017010 <rcl_send_response+0x1c>
 8016ff6:	6800      	ldr	r0, [r0, #0]
 8016ff8:	b150      	cbz	r0, 8017010 <rcl_send_response+0x1c>
 8016ffa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8016ffc:	b140      	cbz	r0, 8017010 <rcl_send_response+0x1c>
 8016ffe:	b151      	cbz	r1, 8017016 <rcl_send_response+0x22>
 8017000:	b510      	push	{r4, lr}
 8017002:	b152      	cbz	r2, 801701a <rcl_send_response+0x26>
 8017004:	f002 f848 	bl	8019098 <rmw_send_response>
 8017008:	3800      	subs	r0, #0
 801700a:	bf18      	it	ne
 801700c:	2001      	movne	r0, #1
 801700e:	bd10      	pop	{r4, pc}
 8017010:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017014:	4770      	bx	lr
 8017016:	200b      	movs	r0, #11
 8017018:	4770      	bx	lr
 801701a:	200b      	movs	r0, #11
 801701c:	bd10      	pop	{r4, pc}
 801701e:	bf00      	nop

08017020 <rcl_get_system_time>:
 8017020:	4608      	mov	r0, r1
 8017022:	f7f9 b9f3 	b.w	801040c <rcutils_system_time_now>
 8017026:	bf00      	nop

08017028 <rcl_get_steady_time>:
 8017028:	4608      	mov	r0, r1
 801702a:	f7f9 ba17 	b.w	801045c <rcutils_steady_time_now>
 801702e:	bf00      	nop

08017030 <rcl_get_ros_time>:
 8017030:	7a03      	ldrb	r3, [r0, #8]
 8017032:	b510      	push	{r4, lr}
 8017034:	460c      	mov	r4, r1
 8017036:	b143      	cbz	r3, 801704a <rcl_get_ros_time+0x1a>
 8017038:	2105      	movs	r1, #5
 801703a:	f001 faf5 	bl	8018628 <__atomic_load_8>
 801703e:	4602      	mov	r2, r0
 8017040:	460b      	mov	r3, r1
 8017042:	2000      	movs	r0, #0
 8017044:	e9c4 2300 	strd	r2, r3, [r4]
 8017048:	bd10      	pop	{r4, pc}
 801704a:	4608      	mov	r0, r1
 801704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017050:	f7f9 b9dc 	b.w	801040c <rcutils_system_time_now>

08017054 <rcl_clock_init>:
 8017054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017058:	4605      	mov	r5, r0
 801705a:	4610      	mov	r0, r2
 801705c:	4614      	mov	r4, r2
 801705e:	460e      	mov	r6, r1
 8017060:	f7f8 ffa2 	bl	800ffa8 <rcutils_allocator_is_valid>
 8017064:	b128      	cbz	r0, 8017072 <rcl_clock_init+0x1e>
 8017066:	2d03      	cmp	r5, #3
 8017068:	d803      	bhi.n	8017072 <rcl_clock_init+0x1e>
 801706a:	e8df f005 	tbb	[pc, r5]
 801706e:	2e1d      	.short	0x2e1d
 8017070:	0555      	.short	0x0555
 8017072:	200b      	movs	r0, #11
 8017074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017078:	2e00      	cmp	r6, #0
 801707a:	d0fa      	beq.n	8017072 <rcl_clock_init+0x1e>
 801707c:	2c00      	cmp	r4, #0
 801707e:	d0f8      	beq.n	8017072 <rcl_clock_init+0x1e>
 8017080:	2700      	movs	r7, #0
 8017082:	f04f 0c03 	mov.w	ip, #3
 8017086:	7037      	strb	r7, [r6, #0]
 8017088:	f106 0514 	add.w	r5, r6, #20
 801708c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801708e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8017092:	6137      	str	r7, [r6, #16]
 8017094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017096:	4b2a      	ldr	r3, [pc, #168]	; (8017140 <rcl_clock_init+0xec>)
 8017098:	6822      	ldr	r2, [r4, #0]
 801709a:	4638      	mov	r0, r7
 801709c:	602a      	str	r2, [r5, #0]
 801709e:	f886 c000 	strb.w	ip, [r6]
 80170a2:	60f3      	str	r3, [r6, #12]
 80170a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170a8:	2e00      	cmp	r6, #0
 80170aa:	d0e2      	beq.n	8017072 <rcl_clock_init+0x1e>
 80170ac:	2700      	movs	r7, #0
 80170ae:	f106 0514 	add.w	r5, r6, #20
 80170b2:	7037      	strb	r7, [r6, #0]
 80170b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170b6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80170ba:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80170be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	4638      	mov	r0, r7
 80170c4:	602b      	str	r3, [r5, #0]
 80170c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ca:	2e00      	cmp	r6, #0
 80170cc:	d0d1      	beq.n	8017072 <rcl_clock_init+0x1e>
 80170ce:	2c00      	cmp	r4, #0
 80170d0:	d0cf      	beq.n	8017072 <rcl_clock_init+0x1e>
 80170d2:	f04f 0800 	mov.w	r8, #0
 80170d6:	4627      	mov	r7, r4
 80170d8:	f886 8000 	strb.w	r8, [r6]
 80170dc:	f106 0514 	add.w	r5, r6, #20
 80170e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170e2:	e9c6 8801 	strd	r8, r8, [r6, #4]
 80170e6:	e9c6 8803 	strd	r8, r8, [r6, #12]
 80170ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80170ec:	683a      	ldr	r2, [r7, #0]
 80170ee:	6823      	ldr	r3, [r4, #0]
 80170f0:	602a      	str	r2, [r5, #0]
 80170f2:	2010      	movs	r0, #16
 80170f4:	6921      	ldr	r1, [r4, #16]
 80170f6:	4798      	blx	r3
 80170f8:	4603      	mov	r3, r0
 80170fa:	6130      	str	r0, [r6, #16]
 80170fc:	b1e8      	cbz	r0, 801713a <rcl_clock_init+0xe6>
 80170fe:	2400      	movs	r4, #0
 8017100:	2500      	movs	r5, #0
 8017102:	2201      	movs	r2, #1
 8017104:	f880 8008 	strb.w	r8, [r0, #8]
 8017108:	e9c3 4500 	strd	r4, r5, [r3]
 801710c:	4b0d      	ldr	r3, [pc, #52]	; (8017144 <rcl_clock_init+0xf0>)
 801710e:	7032      	strb	r2, [r6, #0]
 8017110:	4640      	mov	r0, r8
 8017112:	60f3      	str	r3, [r6, #12]
 8017114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017118:	2e00      	cmp	r6, #0
 801711a:	d0aa      	beq.n	8017072 <rcl_clock_init+0x1e>
 801711c:	2c00      	cmp	r4, #0
 801711e:	d0a8      	beq.n	8017072 <rcl_clock_init+0x1e>
 8017120:	2700      	movs	r7, #0
 8017122:	f106 0514 	add.w	r5, r6, #20
 8017126:	7037      	strb	r7, [r6, #0]
 8017128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801712a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801712e:	6137      	str	r7, [r6, #16]
 8017130:	f04f 0c02 	mov.w	ip, #2
 8017134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017136:	4b04      	ldr	r3, [pc, #16]	; (8017148 <rcl_clock_init+0xf4>)
 8017138:	e7ae      	b.n	8017098 <rcl_clock_init+0x44>
 801713a:	200a      	movs	r0, #10
 801713c:	e79a      	b.n	8017074 <rcl_clock_init+0x20>
 801713e:	bf00      	nop
 8017140:	08017029 	.word	0x08017029
 8017144:	08017031 	.word	0x08017031
 8017148:	08017021 	.word	0x08017021

0801714c <rcl_clock_get_now>:
 801714c:	b140      	cbz	r0, 8017160 <rcl_clock_get_now+0x14>
 801714e:	b139      	cbz	r1, 8017160 <rcl_clock_get_now+0x14>
 8017150:	7803      	ldrb	r3, [r0, #0]
 8017152:	b11b      	cbz	r3, 801715c <rcl_clock_get_now+0x10>
 8017154:	68c3      	ldr	r3, [r0, #12]
 8017156:	b10b      	cbz	r3, 801715c <rcl_clock_get_now+0x10>
 8017158:	6900      	ldr	r0, [r0, #16]
 801715a:	4718      	bx	r3
 801715c:	2001      	movs	r0, #1
 801715e:	4770      	bx	lr
 8017160:	200b      	movs	r0, #11
 8017162:	4770      	bx	lr

08017164 <rcl_clock_add_jump_callback>:
 8017164:	b082      	sub	sp, #8
 8017166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801716a:	a906      	add	r1, sp, #24
 801716c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017170:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8017174:	b338      	cbz	r0, 80171c6 <rcl_clock_add_jump_callback+0x62>
 8017176:	4604      	mov	r4, r0
 8017178:	3014      	adds	r0, #20
 801717a:	f7f8 ff15 	bl	800ffa8 <rcutils_allocator_is_valid>
 801717e:	b310      	cbz	r0, 80171c6 <rcl_clock_add_jump_callback+0x62>
 8017180:	b30e      	cbz	r6, 80171c6 <rcl_clock_add_jump_callback+0x62>
 8017182:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017186:	2a00      	cmp	r2, #0
 8017188:	f173 0300 	sbcs.w	r3, r3, #0
 801718c:	db1b      	blt.n	80171c6 <rcl_clock_add_jump_callback+0x62>
 801718e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017192:	2a01      	cmp	r2, #1
 8017194:	f173 0300 	sbcs.w	r3, r3, #0
 8017198:	da15      	bge.n	80171c6 <rcl_clock_add_jump_callback+0x62>
 801719a:	68a7      	ldr	r7, [r4, #8]
 801719c:	2f00      	cmp	r7, #0
 801719e:	d03f      	beq.n	8017220 <rcl_clock_add_jump_callback+0xbc>
 80171a0:	6860      	ldr	r0, [r4, #4]
 80171a2:	2300      	movs	r3, #0
 80171a4:	f100 0220 	add.w	r2, r0, #32
 80171a8:	e003      	b.n	80171b2 <rcl_clock_add_jump_callback+0x4e>
 80171aa:	42bb      	cmp	r3, r7
 80171ac:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80171b0:	d00e      	beq.n	80171d0 <rcl_clock_add_jump_callback+0x6c>
 80171b2:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80171b6:	3301      	adds	r3, #1
 80171b8:	42b1      	cmp	r1, r6
 80171ba:	d1f6      	bne.n	80171aa <rcl_clock_add_jump_callback+0x46>
 80171bc:	6811      	ldr	r1, [r2, #0]
 80171be:	42a9      	cmp	r1, r5
 80171c0:	d1f3      	bne.n	80171aa <rcl_clock_add_jump_callback+0x46>
 80171c2:	2001      	movs	r0, #1
 80171c4:	e000      	b.n	80171c8 <rcl_clock_add_jump_callback+0x64>
 80171c6:	200b      	movs	r0, #11
 80171c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171cc:	b002      	add	sp, #8
 80171ce:	4770      	bx	lr
 80171d0:	3301      	adds	r3, #1
 80171d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80171d6:	00d9      	lsls	r1, r3, #3
 80171d8:	69e3      	ldr	r3, [r4, #28]
 80171da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80171dc:	4798      	blx	r3
 80171de:	b1e8      	cbz	r0, 801721c <rcl_clock_add_jump_callback+0xb8>
 80171e0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80171e4:	f10d 0c18 	add.w	ip, sp, #24
 80171e8:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80171ec:	eb00 08c3 	add.w	r8, r0, r3, lsl #3
 80171f0:	f108 0708 	add.w	r7, r8, #8
 80171f4:	6060      	str	r0, [r4, #4]
 80171f6:	f840 6033 	str.w	r6, [r0, r3, lsl #3]
 80171fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171fe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017200:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017204:	f10e 0301 	add.w	r3, lr, #1
 8017208:	e887 0003 	stmia.w	r7, {r0, r1}
 801720c:	f8c8 5020 	str.w	r5, [r8, #32]
 8017210:	2000      	movs	r0, #0
 8017212:	60a3      	str	r3, [r4, #8]
 8017214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017218:	b002      	add	sp, #8
 801721a:	4770      	bx	lr
 801721c:	200a      	movs	r0, #10
 801721e:	e7d3      	b.n	80171c8 <rcl_clock_add_jump_callback+0x64>
 8017220:	2128      	movs	r1, #40	; 0x28
 8017222:	6860      	ldr	r0, [r4, #4]
 8017224:	e7d8      	b.n	80171d8 <rcl_clock_add_jump_callback+0x74>
 8017226:	bf00      	nop

08017228 <rcl_clock_remove_jump_callback>:
 8017228:	2800      	cmp	r0, #0
 801722a:	d057      	beq.n	80172dc <rcl_clock_remove_jump_callback+0xb4>
 801722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017230:	4607      	mov	r7, r0
 8017232:	3014      	adds	r0, #20
 8017234:	460c      	mov	r4, r1
 8017236:	4615      	mov	r5, r2
 8017238:	f7f8 feb6 	bl	800ffa8 <rcutils_allocator_is_valid>
 801723c:	2800      	cmp	r0, #0
 801723e:	d03a      	beq.n	80172b6 <rcl_clock_remove_jump_callback+0x8e>
 8017240:	2c00      	cmp	r4, #0
 8017242:	d038      	beq.n	80172b6 <rcl_clock_remove_jump_callback+0x8e>
 8017244:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8017248:	f1b8 0f00 	cmp.w	r8, #0
 801724c:	d00c      	beq.n	8017268 <rcl_clock_remove_jump_callback+0x40>
 801724e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8017252:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8017256:	4676      	mov	r6, lr
 8017258:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 801725c:	6833      	ldr	r3, [r6, #0]
 801725e:	42a3      	cmp	r3, r4
 8017260:	d005      	beq.n	801726e <rcl_clock_remove_jump_callback+0x46>
 8017262:	3628      	adds	r6, #40	; 0x28
 8017264:	45b4      	cmp	ip, r6
 8017266:	d1f9      	bne.n	801725c <rcl_clock_remove_jump_callback+0x34>
 8017268:	2001      	movs	r0, #1
 801726a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801726e:	6a33      	ldr	r3, [r6, #32]
 8017270:	3628      	adds	r6, #40	; 0x28
 8017272:	4566      	cmp	r6, ip
 8017274:	d02a      	beq.n	80172cc <rcl_clock_remove_jump_callback+0xa4>
 8017276:	42ab      	cmp	r3, r5
 8017278:	d1f0      	bne.n	801725c <rcl_clock_remove_jump_callback+0x34>
 801727a:	4635      	mov	r5, r6
 801727c:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 8017280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017288:	3628      	adds	r6, #40	; 0x28
 801728a:	4566      	cmp	r6, ip
 801728c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017290:	e884 0003 	stmia.w	r4, {r0, r1}
 8017294:	d1f1      	bne.n	801727a <rcl_clock_remove_jump_callback+0x52>
 8017296:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801729a:	60bc      	str	r4, [r7, #8]
 801729c:	b174      	cbz	r4, 80172bc <rcl_clock_remove_jump_callback+0x94>
 801729e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80172a2:	4670      	mov	r0, lr
 80172a4:	69fb      	ldr	r3, [r7, #28]
 80172a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172a8:	00e1      	lsls	r1, r4, #3
 80172aa:	4798      	blx	r3
 80172ac:	b1c0      	cbz	r0, 80172e0 <rcl_clock_remove_jump_callback+0xb8>
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	2000      	movs	r0, #0
 80172b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172b6:	200b      	movs	r0, #11
 80172b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172bc:	4670      	mov	r0, lr
 80172be:	69bb      	ldr	r3, [r7, #24]
 80172c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172c2:	4798      	blx	r3
 80172c4:	4620      	mov	r0, r4
 80172c6:	607c      	str	r4, [r7, #4]
 80172c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172cc:	42ab      	cmp	r3, r5
 80172ce:	d1cb      	bne.n	8017268 <rcl_clock_remove_jump_callback+0x40>
 80172d0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 80172d4:	60bc      	str	r4, [r7, #8]
 80172d6:	2c00      	cmp	r4, #0
 80172d8:	d1e1      	bne.n	801729e <rcl_clock_remove_jump_callback+0x76>
 80172da:	e7ef      	b.n	80172bc <rcl_clock_remove_jump_callback+0x94>
 80172dc:	200b      	movs	r0, #11
 80172de:	4770      	bx	lr
 80172e0:	200a      	movs	r0, #10
 80172e2:	e7e9      	b.n	80172b8 <rcl_clock_remove_jump_callback+0x90>

080172e4 <_rcl_timer_time_jump>:
 80172e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e8:	4683      	mov	fp, r0
 80172ea:	4614      	mov	r4, r2
 80172ec:	b085      	sub	sp, #20
 80172ee:	b131      	cbz	r1, 80172fe <_rcl_timer_time_jump+0x1a>
 80172f0:	7803      	ldrb	r3, [r0, #0]
 80172f2:	3b02      	subs	r3, #2
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	d940      	bls.n	801737a <_rcl_timer_time_jump+0x96>
 80172f8:	b005      	add	sp, #20
 80172fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172fe:	6813      	ldr	r3, [r2, #0]
 8017300:	a902      	add	r1, sp, #8
 8017302:	6818      	ldr	r0, [r3, #0]
 8017304:	f7ff ff22 	bl	801714c <rcl_clock_get_now>
 8017308:	2800      	cmp	r0, #0
 801730a:	d1f5      	bne.n	80172f8 <_rcl_timer_time_jump+0x14>
 801730c:	6820      	ldr	r0, [r4, #0]
 801730e:	2105      	movs	r1, #5
 8017310:	3020      	adds	r0, #32
 8017312:	f001 f989 	bl	8018628 <__atomic_load_8>
 8017316:	460b      	mov	r3, r1
 8017318:	4680      	mov	r8, r0
 801731a:	6820      	ldr	r0, [r4, #0]
 801731c:	2105      	movs	r1, #5
 801731e:	3028      	adds	r0, #40	; 0x28
 8017320:	4699      	mov	r9, r3
 8017322:	f001 f981 	bl	8018628 <__atomic_load_8>
 8017326:	460b      	mov	r3, r1
 8017328:	4606      	mov	r6, r0
 801732a:	6820      	ldr	r0, [r4, #0]
 801732c:	2105      	movs	r1, #5
 801732e:	3018      	adds	r0, #24
 8017330:	461f      	mov	r7, r3
 8017332:	f001 f979 	bl	8018628 <__atomic_load_8>
 8017336:	f89b 3000 	ldrb.w	r3, [fp]
 801733a:	4605      	mov	r5, r0
 801733c:	3b02      	subs	r3, #2
 801733e:	2b01      	cmp	r3, #1
 8017340:	468a      	mov	sl, r1
 8017342:	d937      	bls.n	80173b4 <_rcl_timer_time_jump+0xd0>
 8017344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017348:	42b0      	cmp	r0, r6
 801734a:	eb71 0307 	sbcs.w	r3, r1, r7
 801734e:	da5f      	bge.n	8017410 <_rcl_timer_time_jump+0x12c>
 8017350:	4540      	cmp	r0, r8
 8017352:	eb71 0309 	sbcs.w	r3, r1, r9
 8017356:	dacf      	bge.n	80172f8 <_rcl_timer_time_jump+0x14>
 8017358:	2605      	movs	r6, #5
 801735a:	182a      	adds	r2, r5, r0
 801735c:	6820      	ldr	r0, [r4, #0]
 801735e:	eb4a 0301 	adc.w	r3, sl, r1
 8017362:	9600      	str	r6, [sp, #0]
 8017364:	3028      	adds	r0, #40	; 0x28
 8017366:	f001 f993 	bl	8018690 <__atomic_store_8>
 801736a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801736e:	6820      	ldr	r0, [r4, #0]
 8017370:	9600      	str	r6, [sp, #0]
 8017372:	3020      	adds	r0, #32
 8017374:	f001 f98c 	bl	8018690 <__atomic_store_8>
 8017378:	e7be      	b.n	80172f8 <_rcl_timer_time_jump+0x14>
 801737a:	6813      	ldr	r3, [r2, #0]
 801737c:	a902      	add	r1, sp, #8
 801737e:	6818      	ldr	r0, [r3, #0]
 8017380:	f7ff fee4 	bl	801714c <rcl_clock_get_now>
 8017384:	2800      	cmp	r0, #0
 8017386:	d1b7      	bne.n	80172f8 <_rcl_timer_time_jump+0x14>
 8017388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801738c:	4313      	orrs	r3, r2
 801738e:	d0b3      	beq.n	80172f8 <_rcl_timer_time_jump+0x14>
 8017390:	6820      	ldr	r0, [r4, #0]
 8017392:	2105      	movs	r1, #5
 8017394:	3028      	adds	r0, #40	; 0x28
 8017396:	f001 f947 	bl	8018628 <__atomic_load_8>
 801739a:	2505      	movs	r5, #5
 801739c:	9a02      	ldr	r2, [sp, #8]
 801739e:	6824      	ldr	r4, [r4, #0]
 80173a0:	9b03      	ldr	r3, [sp, #12]
 80173a2:	1a82      	subs	r2, r0, r2
 80173a4:	eb61 0303 	sbc.w	r3, r1, r3
 80173a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80173ac:	9500      	str	r5, [sp, #0]
 80173ae:	f001 f96f 	bl	8018690 <__atomic_store_8>
 80173b2:	e7a1      	b.n	80172f8 <_rcl_timer_time_jump+0x14>
 80173b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173b8:	4313      	orrs	r3, r2
 80173ba:	d09d      	beq.n	80172f8 <_rcl_timer_time_jump+0x14>
 80173bc:	f04f 0805 	mov.w	r8, #5
 80173c0:	6820      	ldr	r0, [r4, #0]
 80173c2:	2300      	movs	r3, #0
 80173c4:	2200      	movs	r2, #0
 80173c6:	f8cd 8000 	str.w	r8, [sp]
 80173ca:	3030      	adds	r0, #48	; 0x30
 80173cc:	f001 f994 	bl	80186f8 <__atomic_exchange_8>
 80173d0:	4606      	mov	r6, r0
 80173d2:	460f      	mov	r7, r1
 80173d4:	ea56 0307 	orrs.w	r3, r6, r7
 80173d8:	d08e      	beq.n	80172f8 <_rcl_timer_time_jump+0x14>
 80173da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80173de:	1a12      	subs	r2, r2, r0
 80173e0:	6820      	ldr	r0, [r4, #0]
 80173e2:	eb63 0301 	sbc.w	r3, r3, r1
 80173e6:	1952      	adds	r2, r2, r5
 80173e8:	eb43 030a 	adc.w	r3, r3, sl
 80173ec:	f8cd 8000 	str.w	r8, [sp]
 80173f0:	3028      	adds	r0, #40	; 0x28
 80173f2:	f001 f94d 	bl	8018690 <__atomic_store_8>
 80173f6:	9a02      	ldr	r2, [sp, #8]
 80173f8:	6820      	ldr	r0, [r4, #0]
 80173fa:	9b03      	ldr	r3, [sp, #12]
 80173fc:	1b92      	subs	r2, r2, r6
 80173fe:	f100 0020 	add.w	r0, r0, #32
 8017402:	f8cd 8000 	str.w	r8, [sp]
 8017406:	eb63 0307 	sbc.w	r3, r3, r7
 801740a:	f001 f941 	bl	8018690 <__atomic_store_8>
 801740e:	e773      	b.n	80172f8 <_rcl_timer_time_jump+0x14>
 8017410:	6820      	ldr	r0, [r4, #0]
 8017412:	3008      	adds	r0, #8
 8017414:	f003 f80c 	bl	801a430 <rcl_trigger_guard_condition>
 8017418:	e76e      	b.n	80172f8 <_rcl_timer_time_jump+0x14>
 801741a:	bf00      	nop

0801741c <rcl_get_zero_initialized_timer>:
 801741c:	4b01      	ldr	r3, [pc, #4]	; (8017424 <rcl_get_zero_initialized_timer+0x8>)
 801741e:	6818      	ldr	r0, [r3, #0]
 8017420:	4770      	bx	lr
 8017422:	bf00      	nop
 8017424:	0801d57c 	.word	0x0801d57c

08017428 <rcl_timer_init>:
 8017428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801742c:	b0ab      	sub	sp, #172	; 0xac
 801742e:	4604      	mov	r4, r0
 8017430:	a837      	add	r0, sp, #220	; 0xdc
 8017432:	460d      	mov	r5, r1
 8017434:	4617      	mov	r7, r2
 8017436:	f7f8 fdb7 	bl	800ffa8 <rcutils_allocator_is_valid>
 801743a:	2800      	cmp	r0, #0
 801743c:	d06a      	beq.n	8017514 <rcl_timer_init+0xec>
 801743e:	2c00      	cmp	r4, #0
 8017440:	d068      	beq.n	8017514 <rcl_timer_init+0xec>
 8017442:	2d00      	cmp	r5, #0
 8017444:	d066      	beq.n	8017514 <rcl_timer_init+0xec>
 8017446:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 801744a:	2a00      	cmp	r2, #0
 801744c:	f173 0300 	sbcs.w	r3, r3, #0
 8017450:	db60      	blt.n	8017514 <rcl_timer_init+0xec>
 8017452:	6823      	ldr	r3, [r4, #0]
 8017454:	b123      	cbz	r3, 8017460 <rcl_timer_init+0x38>
 8017456:	2664      	movs	r6, #100	; 0x64
 8017458:	4630      	mov	r0, r6
 801745a:	b02b      	add	sp, #172	; 0xac
 801745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017460:	4628      	mov	r0, r5
 8017462:	a908      	add	r1, sp, #32
 8017464:	f7ff fe72 	bl	801714c <rcl_clock_get_now>
 8017468:	4606      	mov	r6, r0
 801746a:	2800      	cmp	r0, #0
 801746c:	d1f4      	bne.n	8017458 <rcl_timer_init+0x30>
 801746e:	f10d 0b18 	add.w	fp, sp, #24
 8017472:	ae0b      	add	r6, sp, #44	; 0x2c
 8017474:	4658      	mov	r0, fp
 8017476:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 801747a:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
 801747e:	f002 fee5 	bl	801a24c <rcl_get_zero_initialized_guard_condition>
 8017482:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8017486:	e88a 0003 	stmia.w	sl, {r0, r1}
 801748a:	4630      	mov	r0, r6
 801748c:	f002 ffb8 	bl	801a400 <rcl_guard_condition_get_default_options>
 8017490:	ab0d      	add	r3, sp, #52	; 0x34
 8017492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017496:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801749a:	4639      	mov	r1, r7
 801749c:	e896 000c 	ldmia.w	r6, {r2, r3}
 80174a0:	4650      	mov	r0, sl
 80174a2:	f002 fedd 	bl	801a260 <rcl_guard_condition_init>
 80174a6:	4606      	mov	r6, r0
 80174a8:	2800      	cmp	r0, #0
 80174aa:	d1d5      	bne.n	8017458 <rcl_timer_init+0x30>
 80174ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80174ae:	781f      	ldrb	r7, [r3, #0]
 80174b0:	2f01      	cmp	r7, #1
 80174b2:	d034      	beq.n	801751e <rcl_timer_init+0xf6>
 80174b4:	9b08      	ldr	r3, [sp, #32]
 80174b6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80174b8:	af37      	add	r7, sp, #220	; 0xdc
 80174ba:	eb13 0802 	adds.w	r8, r3, r2
 80174be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80174c2:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 80174c6:	eb43 0902 	adc.w	r9, r3, r2
 80174ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80174cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80174d4:	f04f 0e00 	mov.w	lr, #0
 80174d8:	921a      	str	r2, [sp, #104]	; 0x68
 80174da:	2100      	movs	r1, #0
 80174dc:	f8cc 3000 	str.w	r3, [ip]
 80174e0:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80174e4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80174e8:	2200      	movs	r2, #0
 80174ea:	4603      	mov	r3, r0
 80174ec:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
 80174f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80174f4:	2050      	movs	r0, #80	; 0x50
 80174f6:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 80174fa:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 80174fe:	993b      	ldr	r1, [sp, #236]	; 0xec
 8017500:	f88d e090 	strb.w	lr, [sp, #144]	; 0x90
 8017504:	4798      	blx	r3
 8017506:	6020      	str	r0, [r4, #0]
 8017508:	b358      	cbz	r0, 8017562 <rcl_timer_init+0x13a>
 801750a:	2250      	movs	r2, #80	; 0x50
 801750c:	a916      	add	r1, sp, #88	; 0x58
 801750e:	f003 f8f5 	bl	801a6fc <memcpy>
 8017512:	e7a1      	b.n	8017458 <rcl_timer_init+0x30>
 8017514:	260b      	movs	r6, #11
 8017516:	4630      	mov	r0, r6
 8017518:	b02b      	add	sp, #172	; 0xac
 801751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801751e:	2001      	movs	r0, #1
 8017520:	2100      	movs	r1, #0
 8017522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801752a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 801752e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8017532:	f8df c044 	ldr.w	ip, [pc, #68]	; 8017578 <rcl_timer_init+0x150>
 8017536:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
 801753a:	9405      	str	r4, [sp, #20]
 801753c:	ab12      	add	r3, sp, #72	; 0x48
 801753e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017540:	f8cd c010 	str.w	ip, [sp, #16]
 8017544:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801754c:	4628      	mov	r0, r5
 801754e:	f7ff fe09 	bl	8017164 <rcl_clock_add_jump_callback>
 8017552:	4607      	mov	r7, r0
 8017554:	2800      	cmp	r0, #0
 8017556:	d0ad      	beq.n	80174b4 <rcl_timer_init+0x8c>
 8017558:	4650      	mov	r0, sl
 801755a:	f002 ff2f 	bl	801a3bc <rcl_guard_condition_fini>
 801755e:	463e      	mov	r6, r7
 8017560:	e77a      	b.n	8017458 <rcl_timer_init+0x30>
 8017562:	4650      	mov	r0, sl
 8017564:	f002 ff2a 	bl	801a3bc <rcl_guard_condition_fini>
 8017568:	4622      	mov	r2, r4
 801756a:	4628      	mov	r0, r5
 801756c:	4902      	ldr	r1, [pc, #8]	; (8017578 <rcl_timer_init+0x150>)
 801756e:	f7ff fe5b 	bl	8017228 <rcl_clock_remove_jump_callback>
 8017572:	260a      	movs	r6, #10
 8017574:	e770      	b.n	8017458 <rcl_timer_init+0x30>
 8017576:	bf00      	nop
 8017578:	080172e5 	.word	0x080172e5

0801757c <rcl_timer_call>:
 801757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017580:	b08b      	sub	sp, #44	; 0x2c
 8017582:	2800      	cmp	r0, #0
 8017584:	d070      	beq.n	8017668 <rcl_timer_call+0xec>
 8017586:	6803      	ldr	r3, [r0, #0]
 8017588:	f3bf 8f5b 	dmb	ish
 801758c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017590:	4604      	mov	r4, r0
 8017592:	f3bf 8f5b 	dmb	ish
 8017596:	2b00      	cmp	r3, #0
 8017598:	d15b      	bne.n	8017652 <rcl_timer_call+0xd6>
 801759a:	6803      	ldr	r3, [r0, #0]
 801759c:	a908      	add	r1, sp, #32
 801759e:	6818      	ldr	r0, [r3, #0]
 80175a0:	f7ff fdd4 	bl	801714c <rcl_clock_get_now>
 80175a4:	4605      	mov	r5, r0
 80175a6:	2800      	cmp	r0, #0
 80175a8:	d14f      	bne.n	801764a <rcl_timer_call+0xce>
 80175aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80175ae:	2a00      	cmp	r2, #0
 80175b0:	f173 0100 	sbcs.w	r1, r3, #0
 80175b4:	db53      	blt.n	801765e <rcl_timer_call+0xe2>
 80175b6:	2605      	movs	r6, #5
 80175b8:	6820      	ldr	r0, [r4, #0]
 80175ba:	9600      	str	r6, [sp, #0]
 80175bc:	3020      	adds	r0, #32
 80175be:	f001 f89b 	bl	80186f8 <__atomic_exchange_8>
 80175c2:	6822      	ldr	r2, [r4, #0]
 80175c4:	f3bf 8f5b 	dmb	ish
 80175c8:	f8d2 b010 	ldr.w	fp, [r2, #16]
 80175cc:	f3bf 8f5b 	dmb	ish
 80175d0:	460b      	mov	r3, r1
 80175d2:	4682      	mov	sl, r0
 80175d4:	6820      	ldr	r0, [r4, #0]
 80175d6:	4631      	mov	r1, r6
 80175d8:	3028      	adds	r0, #40	; 0x28
 80175da:	9305      	str	r3, [sp, #20]
 80175dc:	f001 f824 	bl	8018628 <__atomic_load_8>
 80175e0:	4603      	mov	r3, r0
 80175e2:	460a      	mov	r2, r1
 80175e4:	6820      	ldr	r0, [r4, #0]
 80175e6:	4631      	mov	r1, r6
 80175e8:	3018      	adds	r0, #24
 80175ea:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80175ee:	f001 f81b 	bl	8018628 <__atomic_load_8>
 80175f2:	4684      	mov	ip, r0
 80175f4:	468e      	mov	lr, r1
 80175f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80175fa:	9b04      	ldr	r3, [sp, #16]
 80175fc:	9a03      	ldr	r2, [sp, #12]
 80175fe:	eb13 080c 	adds.w	r8, r3, ip
 8017602:	eb42 090e 	adc.w	r9, r2, lr
 8017606:	4580      	cmp	r8, r0
 8017608:	eb79 0301 	sbcs.w	r3, r9, r1
 801760c:	4666      	mov	r6, ip
 801760e:	4677      	mov	r7, lr
 8017610:	460a      	mov	r2, r1
 8017612:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017616:	da04      	bge.n	8017622 <rcl_timer_call+0xa6>
 8017618:	ea56 0307 	orrs.w	r3, r6, r7
 801761c:	d129      	bne.n	8017672 <rcl_timer_call+0xf6>
 801761e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8017622:	2105      	movs	r1, #5
 8017624:	6820      	ldr	r0, [r4, #0]
 8017626:	4642      	mov	r2, r8
 8017628:	464b      	mov	r3, r9
 801762a:	9100      	str	r1, [sp, #0]
 801762c:	3028      	adds	r0, #40	; 0x28
 801762e:	f001 f82f 	bl	8018690 <__atomic_store_8>
 8017632:	f1bb 0f00 	cmp.w	fp, #0
 8017636:	d008      	beq.n	801764a <rcl_timer_call+0xce>
 8017638:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801763c:	9905      	ldr	r1, [sp, #20]
 801763e:	ebb2 020a 	subs.w	r2, r2, sl
 8017642:	4620      	mov	r0, r4
 8017644:	eb63 0301 	sbc.w	r3, r3, r1
 8017648:	47d8      	blx	fp
 801764a:	4628      	mov	r0, r5
 801764c:	b00b      	add	sp, #44	; 0x2c
 801764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017652:	f240 3521 	movw	r5, #801	; 0x321
 8017656:	4628      	mov	r0, r5
 8017658:	b00b      	add	sp, #44	; 0x2c
 801765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801765e:	2501      	movs	r5, #1
 8017660:	4628      	mov	r0, r5
 8017662:	b00b      	add	sp, #44	; 0x2c
 8017664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017668:	250b      	movs	r5, #11
 801766a:	4628      	mov	r0, r5
 801766c:	b00b      	add	sp, #44	; 0x2c
 801766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017672:	ebb0 0008 	subs.w	r0, r0, r8
 8017676:	eb62 0109 	sbc.w	r1, r2, r9
 801767a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 801767e:	4673      	mov	r3, lr
 8017680:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8017684:	4662      	mov	r2, ip
 8017686:	f7e9 fde3 	bl	8001250 <__aeabi_ldivmod>
 801768a:	fb00 7307 	mla	r3, r0, r7, r7
 801768e:	3001      	adds	r0, #1
 8017690:	f141 0100 	adc.w	r1, r1, #0
 8017694:	fb06 3101 	mla	r1, r6, r1, r3
 8017698:	fba0 6706 	umull	r6, r7, r0, r6
 801769c:	440f      	add	r7, r1
 801769e:	eb18 0806 	adds.w	r8, r8, r6
 80176a2:	eb49 0907 	adc.w	r9, r9, r7
 80176a6:	e7bc      	b.n	8017622 <rcl_timer_call+0xa6>

080176a8 <rcl_timer_is_ready>:
 80176a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ac:	b082      	sub	sp, #8
 80176ae:	b310      	cbz	r0, 80176f6 <rcl_timer_is_ready+0x4e>
 80176b0:	4688      	mov	r8, r1
 80176b2:	b301      	cbz	r1, 80176f6 <rcl_timer_is_ready+0x4e>
 80176b4:	6803      	ldr	r3, [r0, #0]
 80176b6:	4604      	mov	r4, r0
 80176b8:	4669      	mov	r1, sp
 80176ba:	6818      	ldr	r0, [r3, #0]
 80176bc:	f7ff fd46 	bl	801714c <rcl_clock_get_now>
 80176c0:	4605      	mov	r5, r0
 80176c2:	b118      	cbz	r0, 80176cc <rcl_timer_is_ready+0x24>
 80176c4:	4628      	mov	r0, r5
 80176c6:	b002      	add	sp, #8
 80176c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176cc:	6820      	ldr	r0, [r4, #0]
 80176ce:	2105      	movs	r1, #5
 80176d0:	3028      	adds	r0, #40	; 0x28
 80176d2:	f000 ffa9 	bl	8018628 <__atomic_load_8>
 80176d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80176da:	1ac6      	subs	r6, r0, r3
 80176dc:	eb61 0702 	sbc.w	r7, r1, r2
 80176e0:	2e01      	cmp	r6, #1
 80176e2:	f177 0300 	sbcs.w	r3, r7, #0
 80176e6:	db0b      	blt.n	8017700 <rcl_timer_is_ready+0x58>
 80176e8:	462b      	mov	r3, r5
 80176ea:	4628      	mov	r0, r5
 80176ec:	f888 3000 	strb.w	r3, [r8]
 80176f0:	b002      	add	sp, #8
 80176f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f6:	250b      	movs	r5, #11
 80176f8:	4628      	mov	r0, r5
 80176fa:	b002      	add	sp, #8
 80176fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017700:	6823      	ldr	r3, [r4, #0]
 8017702:	f3bf 8f5b 	dmb	ish
 8017706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801770a:	f3bf 8f5b 	dmb	ish
 801770e:	fab3 f383 	clz	r3, r3
 8017712:	095b      	lsrs	r3, r3, #5
 8017714:	e7e9      	b.n	80176ea <rcl_timer_is_ready+0x42>
 8017716:	bf00      	nop

08017718 <rcl_timer_get_time_until_next_call>:
 8017718:	b570      	push	{r4, r5, r6, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	b1d8      	cbz	r0, 8017756 <rcl_timer_get_time_until_next_call+0x3e>
 801771e:	460d      	mov	r5, r1
 8017720:	b1c9      	cbz	r1, 8017756 <rcl_timer_get_time_until_next_call+0x3e>
 8017722:	6803      	ldr	r3, [r0, #0]
 8017724:	4604      	mov	r4, r0
 8017726:	4669      	mov	r1, sp
 8017728:	6818      	ldr	r0, [r3, #0]
 801772a:	f7ff fd0f 	bl	801714c <rcl_clock_get_now>
 801772e:	4606      	mov	r6, r0
 8017730:	b110      	cbz	r0, 8017738 <rcl_timer_get_time_until_next_call+0x20>
 8017732:	4630      	mov	r0, r6
 8017734:	b002      	add	sp, #8
 8017736:	bd70      	pop	{r4, r5, r6, pc}
 8017738:	6820      	ldr	r0, [r4, #0]
 801773a:	2105      	movs	r1, #5
 801773c:	3028      	adds	r0, #40	; 0x28
 801773e:	f000 ff73 	bl	8018628 <__atomic_load_8>
 8017742:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017746:	1ac0      	subs	r0, r0, r3
 8017748:	eb61 0102 	sbc.w	r1, r1, r2
 801774c:	e9c5 0100 	strd	r0, r1, [r5]
 8017750:	4630      	mov	r0, r6
 8017752:	b002      	add	sp, #8
 8017754:	bd70      	pop	{r4, r5, r6, pc}
 8017756:	260b      	movs	r6, #11
 8017758:	4630      	mov	r0, r6
 801775a:	b002      	add	sp, #8
 801775c:	bd70      	pop	{r4, r5, r6, pc}
 801775e:	bf00      	nop

08017760 <rcl_timer_is_canceled>:
 8017760:	b168      	cbz	r0, 801777e <rcl_timer_is_canceled+0x1e>
 8017762:	b161      	cbz	r1, 801777e <rcl_timer_is_canceled+0x1e>
 8017764:	6803      	ldr	r3, [r0, #0]
 8017766:	f3bf 8f5b 	dmb	ish
 801776a:	2000      	movs	r0, #0
 801776c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017770:	f3bf 8f5b 	dmb	ish
 8017774:	1a1b      	subs	r3, r3, r0
 8017776:	bf18      	it	ne
 8017778:	2301      	movne	r3, #1
 801777a:	700b      	strb	r3, [r1, #0]
 801777c:	4770      	bx	lr
 801777e:	200b      	movs	r0, #11
 8017780:	4770      	bx	lr
 8017782:	bf00      	nop

08017784 <rcl_timer_get_guard_condition>:
 8017784:	b130      	cbz	r0, 8017794 <rcl_timer_get_guard_condition+0x10>
 8017786:	6800      	ldr	r0, [r0, #0]
 8017788:	b120      	cbz	r0, 8017794 <rcl_timer_get_guard_condition+0x10>
 801778a:	68c3      	ldr	r3, [r0, #12]
 801778c:	b10b      	cbz	r3, 8017792 <rcl_timer_get_guard_condition+0xe>
 801778e:	3008      	adds	r0, #8
 8017790:	4770      	bx	lr
 8017792:	4618      	mov	r0, r3
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop

08017798 <rcl_validate_enclave_name_with_size>:
 8017798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801779a:	b0c3      	sub	sp, #268	; 0x10c
 801779c:	b1d0      	cbz	r0, 80177d4 <rcl_validate_enclave_name_with_size+0x3c>
 801779e:	4615      	mov	r5, r2
 80177a0:	b1c2      	cbz	r2, 80177d4 <rcl_validate_enclave_name_with_size+0x3c>
 80177a2:	461f      	mov	r7, r3
 80177a4:	466a      	mov	r2, sp
 80177a6:	ab01      	add	r3, sp, #4
 80177a8:	460e      	mov	r6, r1
 80177aa:	f001 f987 	bl	8018abc <rmw_validate_namespace_with_size>
 80177ae:	4604      	mov	r4, r0
 80177b0:	b9e0      	cbnz	r0, 80177ec <rcl_validate_enclave_name_with_size+0x54>
 80177b2:	9b00      	ldr	r3, [sp, #0]
 80177b4:	b923      	cbnz	r3, 80177c0 <rcl_validate_enclave_name_with_size+0x28>
 80177b6:	2300      	movs	r3, #0
 80177b8:	602b      	str	r3, [r5, #0]
 80177ba:	4620      	mov	r0, r4
 80177bc:	b043      	add	sp, #268	; 0x10c
 80177be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177c0:	2b07      	cmp	r3, #7
 80177c2:	d00b      	beq.n	80177dc <rcl_validate_enclave_name_with_size+0x44>
 80177c4:	1e5a      	subs	r2, r3, #1
 80177c6:	2a05      	cmp	r2, #5
 80177c8:	d82e      	bhi.n	8017828 <rcl_validate_enclave_name_with_size+0x90>
 80177ca:	e8df f002 	tbb	[pc, r2]
 80177ce:	211e      	.short	0x211e
 80177d0:	152a2724 	.word	0x152a2724
 80177d4:	240b      	movs	r4, #11
 80177d6:	4620      	mov	r0, r4
 80177d8:	b043      	add	sp, #268	; 0x10c
 80177da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177dc:	2eff      	cmp	r6, #255	; 0xff
 80177de:	d9ea      	bls.n	80177b6 <rcl_validate_enclave_name_with_size+0x1e>
 80177e0:	602b      	str	r3, [r5, #0]
 80177e2:	2f00      	cmp	r7, #0
 80177e4:	d0e9      	beq.n	80177ba <rcl_validate_enclave_name_with_size+0x22>
 80177e6:	23fe      	movs	r3, #254	; 0xfe
 80177e8:	603b      	str	r3, [r7, #0]
 80177ea:	e7e6      	b.n	80177ba <rcl_validate_enclave_name_with_size+0x22>
 80177ec:	f7fe fdb0 	bl	8016350 <rcl_convert_rmw_ret_to_rcl_ret>
 80177f0:	4604      	mov	r4, r0
 80177f2:	4620      	mov	r0, r4
 80177f4:	b043      	add	sp, #268	; 0x10c
 80177f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177f8:	2306      	movs	r3, #6
 80177fa:	602b      	str	r3, [r5, #0]
 80177fc:	2f00      	cmp	r7, #0
 80177fe:	d0dc      	beq.n	80177ba <rcl_validate_enclave_name_with_size+0x22>
 8017800:	4620      	mov	r0, r4
 8017802:	9b01      	ldr	r3, [sp, #4]
 8017804:	603b      	str	r3, [r7, #0]
 8017806:	b043      	add	sp, #268	; 0x10c
 8017808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801780a:	2301      	movs	r3, #1
 801780c:	602b      	str	r3, [r5, #0]
 801780e:	e7f5      	b.n	80177fc <rcl_validate_enclave_name_with_size+0x64>
 8017810:	2302      	movs	r3, #2
 8017812:	602b      	str	r3, [r5, #0]
 8017814:	e7f2      	b.n	80177fc <rcl_validate_enclave_name_with_size+0x64>
 8017816:	2303      	movs	r3, #3
 8017818:	602b      	str	r3, [r5, #0]
 801781a:	e7ef      	b.n	80177fc <rcl_validate_enclave_name_with_size+0x64>
 801781c:	2304      	movs	r3, #4
 801781e:	602b      	str	r3, [r5, #0]
 8017820:	e7ec      	b.n	80177fc <rcl_validate_enclave_name_with_size+0x64>
 8017822:	2305      	movs	r3, #5
 8017824:	602b      	str	r3, [r5, #0]
 8017826:	e7e9      	b.n	80177fc <rcl_validate_enclave_name_with_size+0x64>
 8017828:	f44f 7180 	mov.w	r1, #256	; 0x100
 801782c:	4a02      	ldr	r2, [pc, #8]	; (8017838 <rcl_validate_enclave_name_with_size+0xa0>)
 801782e:	a802      	add	r0, sp, #8
 8017830:	f001 f8d0 	bl	80189d4 <rcutils_snprintf>
 8017834:	2401      	movs	r4, #1
 8017836:	e7c0      	b.n	80177ba <rcl_validate_enclave_name_with_size+0x22>
 8017838:	0801d580 	.word	0x0801d580

0801783c <rcl_validate_enclave_name>:
 801783c:	b168      	cbz	r0, 801785a <rcl_validate_enclave_name+0x1e>
 801783e:	b570      	push	{r4, r5, r6, lr}
 8017840:	460d      	mov	r5, r1
 8017842:	4616      	mov	r6, r2
 8017844:	4604      	mov	r4, r0
 8017846:	f7e8 fcfd 	bl	8000244 <strlen>
 801784a:	4633      	mov	r3, r6
 801784c:	4601      	mov	r1, r0
 801784e:	462a      	mov	r2, r5
 8017850:	4620      	mov	r0, r4
 8017852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017856:	f7ff bf9f 	b.w	8017798 <rcl_validate_enclave_name_with_size>
 801785a:	200b      	movs	r0, #11
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop

08017860 <rcl_validate_topic_name>:
 8017860:	2800      	cmp	r0, #0
 8017862:	f000 808c 	beq.w	801797e <rcl_validate_topic_name+0x11e>
 8017866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801786a:	460e      	mov	r6, r1
 801786c:	2900      	cmp	r1, #0
 801786e:	f000 808d 	beq.w	801798c <rcl_validate_topic_name+0x12c>
 8017872:	4617      	mov	r7, r2
 8017874:	4605      	mov	r5, r0
 8017876:	f7e8 fce5 	bl	8000244 <strlen>
 801787a:	b1b0      	cbz	r0, 80178aa <rcl_validate_topic_name+0x4a>
 801787c:	f895 9000 	ldrb.w	r9, [r5]
 8017880:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8017a28 <rcl_validate_topic_name+0x1c8>
 8017884:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017888:	f013 0304 	ands.w	r3, r3, #4
 801788c:	d179      	bne.n	8017982 <rcl_validate_topic_name+0x122>
 801788e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8017892:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017896:	2a2f      	cmp	r2, #47	; 0x2f
 8017898:	d10e      	bne.n	80178b8 <rcl_validate_topic_name+0x58>
 801789a:	2202      	movs	r2, #2
 801789c:	6032      	str	r2, [r6, #0]
 801789e:	b377      	cbz	r7, 80178fe <rcl_validate_topic_name+0x9e>
 80178a0:	4618      	mov	r0, r3
 80178a2:	f8c7 8000 	str.w	r8, [r7]
 80178a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178aa:	2301      	movs	r3, #1
 80178ac:	6033      	str	r3, [r6, #0]
 80178ae:	b337      	cbz	r7, 80178fe <rcl_validate_topic_name+0x9e>
 80178b0:	2000      	movs	r0, #0
 80178b2:	6038      	str	r0, [r7, #0]
 80178b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178b8:	461c      	mov	r4, r3
 80178ba:	4619      	mov	r1, r3
 80178bc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80178c0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80178c4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80178c8:	f1be 0f09 	cmp.w	lr, #9
 80178cc:	d947      	bls.n	801795e <rcl_validate_topic_name+0xfe>
 80178ce:	f022 0e20 	bic.w	lr, r2, #32
 80178d2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80178d6:	f1be 0f19 	cmp.w	lr, #25
 80178da:	d940      	bls.n	801795e <rcl_validate_topic_name+0xfe>
 80178dc:	2a5f      	cmp	r2, #95	; 0x5f
 80178de:	d015      	beq.n	801790c <rcl_validate_topic_name+0xac>
 80178e0:	2a2f      	cmp	r2, #47	; 0x2f
 80178e2:	d072      	beq.n	80179ca <rcl_validate_topic_name+0x16a>
 80178e4:	2a7e      	cmp	r2, #126	; 0x7e
 80178e6:	d053      	beq.n	8017990 <rcl_validate_topic_name+0x130>
 80178e8:	2a7b      	cmp	r2, #123	; 0x7b
 80178ea:	d00b      	beq.n	8017904 <rcl_validate_topic_name+0xa4>
 80178ec:	2a7d      	cmp	r2, #125	; 0x7d
 80178ee:	f040 808a 	bne.w	8017a06 <rcl_validate_topic_name+0x1a6>
 80178f2:	2c00      	cmp	r4, #0
 80178f4:	d174      	bne.n	80179e0 <rcl_validate_topic_name+0x180>
 80178f6:	2305      	movs	r3, #5
 80178f8:	6033      	str	r3, [r6, #0]
 80178fa:	b107      	cbz	r7, 80178fe <rcl_validate_topic_name+0x9e>
 80178fc:	6039      	str	r1, [r7, #0]
 80178fe:	2000      	movs	r0, #0
 8017900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017904:	2c00      	cmp	r4, #0
 8017906:	d162      	bne.n	80179ce <rcl_validate_topic_name+0x16e>
 8017908:	460b      	mov	r3, r1
 801790a:	2401      	movs	r4, #1
 801790c:	3101      	adds	r1, #1
 801790e:	4288      	cmp	r0, r1
 8017910:	d1d6      	bne.n	80178c0 <rcl_validate_topic_name+0x60>
 8017912:	2c00      	cmp	r4, #0
 8017914:	d16c      	bne.n	80179f0 <rcl_validate_topic_name+0x190>
 8017916:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801791a:	4620      	mov	r0, r4
 801791c:	f108 0401 	add.w	r4, r8, #1
 8017920:	d108      	bne.n	8017934 <rcl_validate_topic_name+0xd4>
 8017922:	e044      	b.n	80179ae <rcl_validate_topic_name+0x14e>
 8017924:	2801      	cmp	r0, #1
 8017926:	d05d      	beq.n	80179e4 <rcl_validate_topic_name+0x184>
 8017928:	461a      	mov	r2, r3
 801792a:	4291      	cmp	r1, r2
 801792c:	4618      	mov	r0, r3
 801792e:	f105 0501 	add.w	r5, r5, #1
 8017932:	d95a      	bls.n	80179ea <rcl_validate_topic_name+0x18a>
 8017934:	4580      	cmp	r8, r0
 8017936:	f100 0301 	add.w	r3, r0, #1
 801793a:	d04d      	beq.n	80179d8 <rcl_validate_topic_name+0x178>
 801793c:	782a      	ldrb	r2, [r5, #0]
 801793e:	2a2f      	cmp	r2, #47	; 0x2f
 8017940:	d1f0      	bne.n	8017924 <rcl_validate_topic_name+0xc4>
 8017942:	786a      	ldrb	r2, [r5, #1]
 8017944:	1c43      	adds	r3, r0, #1
 8017946:	f81c 0002 	ldrb.w	r0, [ip, r2]
 801794a:	461a      	mov	r2, r3
 801794c:	0740      	lsls	r0, r0, #29
 801794e:	d5ec      	bpl.n	801792a <rcl_validate_topic_name+0xca>
 8017950:	2304      	movs	r3, #4
 8017952:	6033      	str	r3, [r6, #0]
 8017954:	2f00      	cmp	r7, #0
 8017956:	d0d2      	beq.n	80178fe <rcl_validate_topic_name+0x9e>
 8017958:	2000      	movs	r0, #0
 801795a:	603a      	str	r2, [r7, #0]
 801795c:	e7aa      	b.n	80178b4 <rcl_validate_topic_name+0x54>
 801795e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017962:	0752      	lsls	r2, r2, #29
 8017964:	d5d2      	bpl.n	801790c <rcl_validate_topic_name+0xac>
 8017966:	2c00      	cmp	r4, #0
 8017968:	d0d0      	beq.n	801790c <rcl_validate_topic_name+0xac>
 801796a:	2900      	cmp	r1, #0
 801796c:	d0ce      	beq.n	801790c <rcl_validate_topic_name+0xac>
 801796e:	1e4a      	subs	r2, r1, #1
 8017970:	429a      	cmp	r2, r3
 8017972:	d1cb      	bne.n	801790c <rcl_validate_topic_name+0xac>
 8017974:	2309      	movs	r3, #9
 8017976:	6033      	str	r3, [r6, #0]
 8017978:	2f00      	cmp	r7, #0
 801797a:	d1bf      	bne.n	80178fc <rcl_validate_topic_name+0x9c>
 801797c:	e7bf      	b.n	80178fe <rcl_validate_topic_name+0x9e>
 801797e:	200b      	movs	r0, #11
 8017980:	4770      	bx	lr
 8017982:	2304      	movs	r3, #4
 8017984:	6033      	str	r3, [r6, #0]
 8017986:	2f00      	cmp	r7, #0
 8017988:	d192      	bne.n	80178b0 <rcl_validate_topic_name+0x50>
 801798a:	e7b8      	b.n	80178fe <rcl_validate_topic_name+0x9e>
 801798c:	200b      	movs	r0, #11
 801798e:	e791      	b.n	80178b4 <rcl_validate_topic_name+0x54>
 8017990:	2900      	cmp	r1, #0
 8017992:	d0bb      	beq.n	801790c <rcl_validate_topic_name+0xac>
 8017994:	2306      	movs	r3, #6
 8017996:	6033      	str	r3, [r6, #0]
 8017998:	2f00      	cmp	r7, #0
 801799a:	d1af      	bne.n	80178fc <rcl_validate_topic_name+0x9c>
 801799c:	e7af      	b.n	80178fe <rcl_validate_topic_name+0x9e>
 801799e:	2801      	cmp	r0, #1
 80179a0:	d03a      	beq.n	8017a18 <rcl_validate_topic_name+0x1b8>
 80179a2:	461a      	mov	r2, r3
 80179a4:	4291      	cmp	r1, r2
 80179a6:	4618      	mov	r0, r3
 80179a8:	f105 0501 	add.w	r5, r5, #1
 80179ac:	d91d      	bls.n	80179ea <rcl_validate_topic_name+0x18a>
 80179ae:	4580      	cmp	r8, r0
 80179b0:	f100 0301 	add.w	r3, r0, #1
 80179b4:	d023      	beq.n	80179fe <rcl_validate_topic_name+0x19e>
 80179b6:	782a      	ldrb	r2, [r5, #0]
 80179b8:	2a2f      	cmp	r2, #47	; 0x2f
 80179ba:	d1f0      	bne.n	801799e <rcl_validate_topic_name+0x13e>
 80179bc:	786a      	ldrb	r2, [r5, #1]
 80179be:	f81c 0002 	ldrb.w	r0, [ip, r2]
 80179c2:	461a      	mov	r2, r3
 80179c4:	0740      	lsls	r0, r0, #29
 80179c6:	d5ed      	bpl.n	80179a4 <rcl_validate_topic_name+0x144>
 80179c8:	e7c2      	b.n	8017950 <rcl_validate_topic_name+0xf0>
 80179ca:	2c00      	cmp	r4, #0
 80179cc:	d09e      	beq.n	801790c <rcl_validate_topic_name+0xac>
 80179ce:	2308      	movs	r3, #8
 80179d0:	6033      	str	r3, [r6, #0]
 80179d2:	2f00      	cmp	r7, #0
 80179d4:	d192      	bne.n	80178fc <rcl_validate_topic_name+0x9c>
 80179d6:	e792      	b.n	80178fe <rcl_validate_topic_name+0x9e>
 80179d8:	4622      	mov	r2, r4
 80179da:	f108 0301 	add.w	r3, r8, #1
 80179de:	e7a4      	b.n	801792a <rcl_validate_topic_name+0xca>
 80179e0:	2400      	movs	r4, #0
 80179e2:	e793      	b.n	801790c <rcl_validate_topic_name+0xac>
 80179e4:	2202      	movs	r2, #2
 80179e6:	4613      	mov	r3, r2
 80179e8:	e79f      	b.n	801792a <rcl_validate_topic_name+0xca>
 80179ea:	2000      	movs	r0, #0
 80179ec:	6030      	str	r0, [r6, #0]
 80179ee:	e761      	b.n	80178b4 <rcl_validate_topic_name+0x54>
 80179f0:	2205      	movs	r2, #5
 80179f2:	6032      	str	r2, [r6, #0]
 80179f4:	2f00      	cmp	r7, #0
 80179f6:	d082      	beq.n	80178fe <rcl_validate_topic_name+0x9e>
 80179f8:	2000      	movs	r0, #0
 80179fa:	603b      	str	r3, [r7, #0]
 80179fc:	e75a      	b.n	80178b4 <rcl_validate_topic_name+0x54>
 80179fe:	4622      	mov	r2, r4
 8017a00:	f108 0301 	add.w	r3, r8, #1
 8017a04:	e7ce      	b.n	80179a4 <rcl_validate_topic_name+0x144>
 8017a06:	2c00      	cmp	r4, #0
 8017a08:	bf14      	ite	ne
 8017a0a:	2308      	movne	r3, #8
 8017a0c:	2303      	moveq	r3, #3
 8017a0e:	6033      	str	r3, [r6, #0]
 8017a10:	2f00      	cmp	r7, #0
 8017a12:	f47f af73 	bne.w	80178fc <rcl_validate_topic_name+0x9c>
 8017a16:	e772      	b.n	80178fe <rcl_validate_topic_name+0x9e>
 8017a18:	2307      	movs	r3, #7
 8017a1a:	6033      	str	r3, [r6, #0]
 8017a1c:	2f00      	cmp	r7, #0
 8017a1e:	f43f af6e 	beq.w	80178fe <rcl_validate_topic_name+0x9e>
 8017a22:	6038      	str	r0, [r7, #0]
 8017a24:	2000      	movs	r0, #0
 8017a26:	e745      	b.n	80178b4 <rcl_validate_topic_name+0x54>
 8017a28:	0801d9bb 	.word	0x0801d9bb

08017a2c <rcl_get_zero_initialized_wait_set>:
 8017a2c:	b470      	push	{r4, r5, r6}
 8017a2e:	4604      	mov	r4, r0
 8017a30:	4606      	mov	r6, r0
 8017a32:	4d06      	ldr	r5, [pc, #24]	; (8017a4c <rcl_get_zero_initialized_wait_set+0x20>)
 8017a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a40:	682b      	ldr	r3, [r5, #0]
 8017a42:	4630      	mov	r0, r6
 8017a44:	6023      	str	r3, [r4, #0]
 8017a46:	bc70      	pop	{r4, r5, r6}
 8017a48:	4770      	bx	lr
 8017a4a:	bf00      	nop
 8017a4c:	0801d5e0 	.word	0x0801d5e0

08017a50 <rcl_wait_set_is_valid>:
 8017a50:	b118      	cbz	r0, 8017a5a <rcl_wait_set_is_valid+0xa>
 8017a52:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017a54:	3800      	subs	r0, #0
 8017a56:	bf18      	it	ne
 8017a58:	2001      	movne	r0, #1
 8017a5a:	4770      	bx	lr

08017a5c <rcl_wait_set_fini>:
 8017a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a60:	b083      	sub	sp, #12
 8017a62:	2800      	cmp	r0, #0
 8017a64:	f000 8098 	beq.w	8017b98 <rcl_wait_set_fini+0x13c>
 8017a68:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017a6a:	4604      	mov	r4, r0
 8017a6c:	2e00      	cmp	r6, #0
 8017a6e:	f000 808f 	beq.w	8017b90 <rcl_wait_set_fini+0x134>
 8017a72:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8017a74:	f001 fd44 	bl	8019500 <rmw_destroy_wait_set>
 8017a78:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017a7a:	1e06      	subs	r6, r0, #0
 8017a7c:	bf18      	it	ne
 8017a7e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8017a82:	2d00      	cmp	r5, #0
 8017a84:	f000 8084 	beq.w	8017b90 <rcl_wait_set_fini+0x134>
 8017a88:	2700      	movs	r7, #0
 8017a8a:	6820      	ldr	r0, [r4, #0]
 8017a8c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017a90:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8017a94:	6067      	str	r7, [r4, #4]
 8017a96:	602f      	str	r7, [r5, #0]
 8017a98:	b118      	cbz	r0, 8017aa2 <rcl_wait_set_fini+0x46>
 8017a9a:	4649      	mov	r1, r9
 8017a9c:	47c0      	blx	r8
 8017a9e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017aa0:	6027      	str	r7, [r4, #0]
 8017aa2:	68a8      	ldr	r0, [r5, #8]
 8017aa4:	b128      	cbz	r0, 8017ab2 <rcl_wait_set_fini+0x56>
 8017aa6:	4649      	mov	r1, r9
 8017aa8:	47c0      	blx	r8
 8017aaa:	2300      	movs	r3, #0
 8017aac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017aae:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017ab2:	f04f 0800 	mov.w	r8, #0
 8017ab6:	68a0      	ldr	r0, [r4, #8]
 8017ab8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017aba:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017abc:	f8c4 800c 	str.w	r8, [r4, #12]
 8017ac0:	f8c5 800c 	str.w	r8, [r5, #12]
 8017ac4:	b128      	cbz	r0, 8017ad2 <rcl_wait_set_fini+0x76>
 8017ac6:	47b8      	blx	r7
 8017ac8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017aca:	f8c4 8008 	str.w	r8, [r4, #8]
 8017ace:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017ad0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017ad2:	f04f 0800 	mov.w	r8, #0
 8017ad6:	6968      	ldr	r0, [r5, #20]
 8017ad8:	f8c5 8010 	str.w	r8, [r5, #16]
 8017adc:	b128      	cbz	r0, 8017aea <rcl_wait_set_fini+0x8e>
 8017ade:	47b8      	blx	r7
 8017ae0:	f8c5 8014 	str.w	r8, [r5, #20]
 8017ae4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017ae6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017ae8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017aea:	f04f 0800 	mov.w	r8, #0
 8017aee:	6920      	ldr	r0, [r4, #16]
 8017af0:	f8c4 8014 	str.w	r8, [r4, #20]
 8017af4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8017af8:	b128      	cbz	r0, 8017b06 <rcl_wait_set_fini+0xaa>
 8017afa:	47b8      	blx	r7
 8017afc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017afe:	f8c4 8010 	str.w	r8, [r4, #16]
 8017b02:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017b04:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017b06:	f04f 0800 	mov.w	r8, #0
 8017b0a:	69a0      	ldr	r0, [r4, #24]
 8017b0c:	f8c4 801c 	str.w	r8, [r4, #28]
 8017b10:	f8c5 8018 	str.w	r8, [r5, #24]
 8017b14:	b128      	cbz	r0, 8017b22 <rcl_wait_set_fini+0xc6>
 8017b16:	9101      	str	r1, [sp, #4]
 8017b18:	47b8      	blx	r7
 8017b1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b1c:	9901      	ldr	r1, [sp, #4]
 8017b1e:	f8c4 8018 	str.w	r8, [r4, #24]
 8017b22:	6a28      	ldr	r0, [r5, #32]
 8017b24:	b120      	cbz	r0, 8017b30 <rcl_wait_set_fini+0xd4>
 8017b26:	47b8      	blx	r7
 8017b28:	2300      	movs	r3, #0
 8017b2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b2c:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017b30:	2700      	movs	r7, #0
 8017b32:	6a20      	ldr	r0, [r4, #32]
 8017b34:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017b38:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8017b3c:	6267      	str	r7, [r4, #36]	; 0x24
 8017b3e:	626f      	str	r7, [r5, #36]	; 0x24
 8017b40:	b118      	cbz	r0, 8017b4a <rcl_wait_set_fini+0xee>
 8017b42:	4649      	mov	r1, r9
 8017b44:	47c0      	blx	r8
 8017b46:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b48:	6227      	str	r7, [r4, #32]
 8017b4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8017b4c:	b128      	cbz	r0, 8017b5a <rcl_wait_set_fini+0xfe>
 8017b4e:	4649      	mov	r1, r9
 8017b50:	47c0      	blx	r8
 8017b52:	2300      	movs	r3, #0
 8017b54:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b56:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017b5a:	2700      	movs	r7, #0
 8017b5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017b5e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017b62:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8017b66:	62e7      	str	r7, [r4, #44]	; 0x2c
 8017b68:	632f      	str	r7, [r5, #48]	; 0x30
 8017b6a:	b118      	cbz	r0, 8017b74 <rcl_wait_set_fini+0x118>
 8017b6c:	4649      	mov	r1, r9
 8017b6e:	47c0      	blx	r8
 8017b70:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b72:	62a7      	str	r7, [r4, #40]	; 0x28
 8017b74:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8017b76:	b128      	cbz	r0, 8017b84 <rcl_wait_set_fini+0x128>
 8017b78:	4649      	mov	r1, r9
 8017b7a:	47c0      	blx	r8
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017b80:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8017b84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8017b86:	4628      	mov	r0, r5
 8017b88:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017b8a:	4798      	blx	r3
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8017b90:	4630      	mov	r0, r6
 8017b92:	b003      	add	sp, #12
 8017b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b98:	260b      	movs	r6, #11
 8017b9a:	4630      	mov	r0, r6
 8017b9c:	b003      	add	sp, #12
 8017b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ba2:	bf00      	nop

08017ba4 <rcl_wait_set_add_subscription>:
 8017ba4:	b320      	cbz	r0, 8017bf0 <rcl_wait_set_add_subscription+0x4c>
 8017ba6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017ba8:	b570      	push	{r4, r5, r6, lr}
 8017baa:	4604      	mov	r4, r0
 8017bac:	b1d3      	cbz	r3, 8017be4 <rcl_wait_set_add_subscription+0x40>
 8017bae:	b319      	cbz	r1, 8017bf8 <rcl_wait_set_add_subscription+0x54>
 8017bb0:	681d      	ldr	r5, [r3, #0]
 8017bb2:	6860      	ldr	r0, [r4, #4]
 8017bb4:	4285      	cmp	r5, r0
 8017bb6:	d218      	bcs.n	8017bea <rcl_wait_set_add_subscription+0x46>
 8017bb8:	6820      	ldr	r0, [r4, #0]
 8017bba:	1c6e      	adds	r6, r5, #1
 8017bbc:	601e      	str	r6, [r3, #0]
 8017bbe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017bc2:	b102      	cbz	r2, 8017bc6 <rcl_wait_set_add_subscription+0x22>
 8017bc4:	6015      	str	r5, [r2, #0]
 8017bc6:	4608      	mov	r0, r1
 8017bc8:	f7f7 fd18 	bl	800f5fc <rcl_subscription_get_rmw_handle>
 8017bcc:	b190      	cbz	r0, 8017bf4 <rcl_wait_set_add_subscription+0x50>
 8017bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017bd0:	6842      	ldr	r2, [r0, #4]
 8017bd2:	689b      	ldr	r3, [r3, #8]
 8017bd4:	2000      	movs	r0, #0
 8017bd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017bda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017bdc:	6853      	ldr	r3, [r2, #4]
 8017bde:	3301      	adds	r3, #1
 8017be0:	6053      	str	r3, [r2, #4]
 8017be2:	bd70      	pop	{r4, r5, r6, pc}
 8017be4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017be8:	bd70      	pop	{r4, r5, r6, pc}
 8017bea:	f240 3086 	movw	r0, #902	; 0x386
 8017bee:	bd70      	pop	{r4, r5, r6, pc}
 8017bf0:	200b      	movs	r0, #11
 8017bf2:	4770      	bx	lr
 8017bf4:	2001      	movs	r0, #1
 8017bf6:	bd70      	pop	{r4, r5, r6, pc}
 8017bf8:	200b      	movs	r0, #11
 8017bfa:	bd70      	pop	{r4, r5, r6, pc}

08017bfc <rcl_wait_set_clear>:
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	d074      	beq.n	8017cea <rcl_wait_set_clear+0xee>
 8017c00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017c02:	b510      	push	{r4, lr}
 8017c04:	4604      	mov	r4, r0
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d071      	beq.n	8017cee <rcl_wait_set_clear+0xf2>
 8017c0a:	6800      	ldr	r0, [r0, #0]
 8017c0c:	b138      	cbz	r0, 8017c1e <rcl_wait_set_clear+0x22>
 8017c0e:	6862      	ldr	r2, [r4, #4]
 8017c10:	2100      	movs	r1, #0
 8017c12:	0092      	lsls	r2, r2, #2
 8017c14:	f002 fd9a 	bl	801a74c <memset>
 8017c18:	2200      	movs	r2, #0
 8017c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c1c:	601a      	str	r2, [r3, #0]
 8017c1e:	68a0      	ldr	r0, [r4, #8]
 8017c20:	b138      	cbz	r0, 8017c32 <rcl_wait_set_clear+0x36>
 8017c22:	68e2      	ldr	r2, [r4, #12]
 8017c24:	2100      	movs	r1, #0
 8017c26:	0092      	lsls	r2, r2, #2
 8017c28:	f002 fd90 	bl	801a74c <memset>
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c30:	60da      	str	r2, [r3, #12]
 8017c32:	69a0      	ldr	r0, [r4, #24]
 8017c34:	b138      	cbz	r0, 8017c46 <rcl_wait_set_clear+0x4a>
 8017c36:	69e2      	ldr	r2, [r4, #28]
 8017c38:	2100      	movs	r1, #0
 8017c3a:	0092      	lsls	r2, r2, #2
 8017c3c:	f002 fd86 	bl	801a74c <memset>
 8017c40:	2200      	movs	r2, #0
 8017c42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c44:	619a      	str	r2, [r3, #24]
 8017c46:	6a20      	ldr	r0, [r4, #32]
 8017c48:	b138      	cbz	r0, 8017c5a <rcl_wait_set_clear+0x5e>
 8017c4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	0092      	lsls	r2, r2, #2
 8017c50:	f002 fd7c 	bl	801a74c <memset>
 8017c54:	2200      	movs	r2, #0
 8017c56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c58:	625a      	str	r2, [r3, #36]	; 0x24
 8017c5a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017c5c:	b138      	cbz	r0, 8017c6e <rcl_wait_set_clear+0x72>
 8017c5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017c60:	2100      	movs	r1, #0
 8017c62:	0092      	lsls	r2, r2, #2
 8017c64:	f002 fd72 	bl	801a74c <memset>
 8017c68:	2200      	movs	r2, #0
 8017c6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8017c6e:	6920      	ldr	r0, [r4, #16]
 8017c70:	b138      	cbz	r0, 8017c82 <rcl_wait_set_clear+0x86>
 8017c72:	6962      	ldr	r2, [r4, #20]
 8017c74:	2100      	movs	r1, #0
 8017c76:	0092      	lsls	r2, r2, #2
 8017c78:	f002 fd68 	bl	801a74c <memset>
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c80:	641a      	str	r2, [r3, #64]	; 0x40
 8017c82:	6898      	ldr	r0, [r3, #8]
 8017c84:	b138      	cbz	r0, 8017c96 <rcl_wait_set_clear+0x9a>
 8017c86:	685a      	ldr	r2, [r3, #4]
 8017c88:	2100      	movs	r1, #0
 8017c8a:	0092      	lsls	r2, r2, #2
 8017c8c:	f002 fd5e 	bl	801a74c <memset>
 8017c90:	2200      	movs	r2, #0
 8017c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c94:	605a      	str	r2, [r3, #4]
 8017c96:	6958      	ldr	r0, [r3, #20]
 8017c98:	b138      	cbz	r0, 8017caa <rcl_wait_set_clear+0xae>
 8017c9a:	691a      	ldr	r2, [r3, #16]
 8017c9c:	2100      	movs	r1, #0
 8017c9e:	0092      	lsls	r2, r2, #2
 8017ca0:	f002 fd54 	bl	801a74c <memset>
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ca8:	611a      	str	r2, [r3, #16]
 8017caa:	6a18      	ldr	r0, [r3, #32]
 8017cac:	b138      	cbz	r0, 8017cbe <rcl_wait_set_clear+0xc2>
 8017cae:	69da      	ldr	r2, [r3, #28]
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	0092      	lsls	r2, r2, #2
 8017cb4:	f002 fd4a 	bl	801a74c <memset>
 8017cb8:	2200      	movs	r2, #0
 8017cba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017cbc:	61da      	str	r2, [r3, #28]
 8017cbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017cc0:	b138      	cbz	r0, 8017cd2 <rcl_wait_set_clear+0xd6>
 8017cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cc4:	2100      	movs	r1, #0
 8017cc6:	0092      	lsls	r2, r2, #2
 8017cc8:	f002 fd40 	bl	801a74c <memset>
 8017ccc:	2200      	movs	r2, #0
 8017cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8017cd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017cd4:	b140      	cbz	r0, 8017ce8 <rcl_wait_set_clear+0xec>
 8017cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017cd8:	2100      	movs	r1, #0
 8017cda:	0092      	lsls	r2, r2, #2
 8017cdc:	f002 fd36 	bl	801a74c <memset>
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017ce6:	6353      	str	r3, [r2, #52]	; 0x34
 8017ce8:	bd10      	pop	{r4, pc}
 8017cea:	200b      	movs	r0, #11
 8017cec:	4770      	bx	lr
 8017cee:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017cf2:	bd10      	pop	{r4, pc}

08017cf4 <rcl_wait_set_resize>:
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	f000 81a7 	beq.w	8018048 <rcl_wait_set_resize+0x354>
 8017cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cfe:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8017d02:	4604      	mov	r4, r0
 8017d04:	b083      	sub	sp, #12
 8017d06:	f1ba 0f00 	cmp.w	sl, #0
 8017d0a:	f000 819f 	beq.w	801804c <rcl_wait_set_resize+0x358>
 8017d0e:	f04f 0800 	mov.w	r8, #0
 8017d12:	461e      	mov	r6, r3
 8017d14:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8017d18:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8017d1c:	460f      	mov	r7, r1
 8017d1e:	f8c0 8004 	str.w	r8, [r0, #4]
 8017d22:	4615      	mov	r5, r2
 8017d24:	9300      	str	r3, [sp, #0]
 8017d26:	f8ca 8000 	str.w	r8, [sl]
 8017d2a:	2900      	cmp	r1, #0
 8017d2c:	f000 80ca 	beq.w	8017ec4 <rcl_wait_set_resize+0x1d0>
 8017d30:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8017d34:	4651      	mov	r1, sl
 8017d36:	464a      	mov	r2, r9
 8017d38:	6800      	ldr	r0, [r0, #0]
 8017d3a:	4798      	blx	r3
 8017d3c:	6020      	str	r0, [r4, #0]
 8017d3e:	2800      	cmp	r0, #0
 8017d40:	f000 80d9 	beq.w	8017ef6 <rcl_wait_set_resize+0x202>
 8017d44:	4652      	mov	r2, sl
 8017d46:	4641      	mov	r1, r8
 8017d48:	f002 fd00 	bl	801a74c <memset>
 8017d4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d4e:	6067      	str	r7, [r4, #4]
 8017d50:	464a      	mov	r2, r9
 8017d52:	6898      	ldr	r0, [r3, #8]
 8017d54:	f8c3 8004 	str.w	r8, [r3, #4]
 8017d58:	9301      	str	r3, [sp, #4]
 8017d5a:	4651      	mov	r1, sl
 8017d5c:	9b00      	ldr	r3, [sp, #0]
 8017d5e:	4798      	blx	r3
 8017d60:	9b01      	ldr	r3, [sp, #4]
 8017d62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d64:	6098      	str	r0, [r3, #8]
 8017d66:	6897      	ldr	r7, [r2, #8]
 8017d68:	2f00      	cmp	r7, #0
 8017d6a:	f000 80bf 	beq.w	8017eec <rcl_wait_set_resize+0x1f8>
 8017d6e:	4652      	mov	r2, sl
 8017d70:	4641      	mov	r1, r8
 8017d72:	4638      	mov	r0, r7
 8017d74:	f002 fcea 	bl	801a74c <memset>
 8017d78:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017d7c:	2700      	movs	r7, #0
 8017d7e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8017d82:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017d86:	60e7      	str	r7, [r4, #12]
 8017d88:	f8ca 700c 	str.w	r7, [sl, #12]
 8017d8c:	2d00      	cmp	r5, #0
 8017d8e:	f040 80b6 	bne.w	8017efe <rcl_wait_set_resize+0x20a>
 8017d92:	68a0      	ldr	r0, [r4, #8]
 8017d94:	b130      	cbz	r0, 8017da4 <rcl_wait_set_resize+0xb0>
 8017d96:	4641      	mov	r1, r8
 8017d98:	4790      	blx	r2
 8017d9a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017d9e:	60a5      	str	r5, [r4, #8]
 8017da0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017da4:	2700      	movs	r7, #0
 8017da6:	19ad      	adds	r5, r5, r6
 8017da8:	f8ca 7010 	str.w	r7, [sl, #16]
 8017dac:	f040 80bf 	bne.w	8017f2e <rcl_wait_set_resize+0x23a>
 8017db0:	f8da 0014 	ldr.w	r0, [sl, #20]
 8017db4:	b148      	cbz	r0, 8017dca <rcl_wait_set_resize+0xd6>
 8017db6:	4641      	mov	r1, r8
 8017db8:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8017dbc:	4798      	blx	r3
 8017dbe:	f8ca 5014 	str.w	r5, [sl, #20]
 8017dc2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017dc6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017dca:	2500      	movs	r5, #0
 8017dcc:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8017dd0:	6165      	str	r5, [r4, #20]
 8017dd2:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8017dd6:	2e00      	cmp	r6, #0
 8017dd8:	f040 80c0 	bne.w	8017f5c <rcl_wait_set_resize+0x268>
 8017ddc:	6920      	ldr	r0, [r4, #16]
 8017dde:	b140      	cbz	r0, 8017df2 <rcl_wait_set_resize+0xfe>
 8017de0:	4641      	mov	r1, r8
 8017de2:	47c8      	blx	r9
 8017de4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017de8:	6126      	str	r6, [r4, #16]
 8017dea:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017dee:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8017df2:	2500      	movs	r5, #0
 8017df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017df6:	61e5      	str	r5, [r4, #28]
 8017df8:	f8ca 5018 	str.w	r5, [sl, #24]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f040 80c2 	bne.w	8017f86 <rcl_wait_set_resize+0x292>
 8017e02:	69a0      	ldr	r0, [r4, #24]
 8017e04:	b128      	cbz	r0, 8017e12 <rcl_wait_set_resize+0x11e>
 8017e06:	4641      	mov	r1, r8
 8017e08:	47c8      	blx	r9
 8017e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017e10:	61a3      	str	r3, [r4, #24]
 8017e12:	f8da 0020 	ldr.w	r0, [sl, #32]
 8017e16:	b130      	cbz	r0, 8017e26 <rcl_wait_set_resize+0x132>
 8017e18:	4641      	mov	r1, r8
 8017e1a:	47c8      	blx	r9
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017e22:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8017e26:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8017e2a:	2600      	movs	r6, #0
 8017e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e2e:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8017e32:	6266      	str	r6, [r4, #36]	; 0x24
 8017e34:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	f000 80c9 	beq.w	8017fd0 <rcl_wait_set_resize+0x2dc>
 8017e3e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017e42:	4651      	mov	r1, sl
 8017e44:	463a      	mov	r2, r7
 8017e46:	6a20      	ldr	r0, [r4, #32]
 8017e48:	47c8      	blx	r9
 8017e4a:	6220      	str	r0, [r4, #32]
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d052      	beq.n	8017ef6 <rcl_wait_set_resize+0x202>
 8017e50:	4652      	mov	r2, sl
 8017e52:	4631      	mov	r1, r6
 8017e54:	f002 fc7a 	bl	801a74c <memset>
 8017e58:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e5c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8017e5e:	6263      	str	r3, [r4, #36]	; 0x24
 8017e60:	463a      	mov	r2, r7
 8017e62:	62ae      	str	r6, [r5, #40]	; 0x28
 8017e64:	4651      	mov	r1, sl
 8017e66:	47c8      	blx	r9
 8017e68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e6a:	62e8      	str	r0, [r5, #44]	; 0x2c
 8017e6c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8017e6e:	2d00      	cmp	r5, #0
 8017e70:	f000 8106 	beq.w	8018080 <rcl_wait_set_resize+0x38c>
 8017e74:	4652      	mov	r2, sl
 8017e76:	4631      	mov	r1, r6
 8017e78:	4628      	mov	r0, r5
 8017e7a:	f002 fc67 	bl	801a74c <memset>
 8017e7e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017e82:	2500      	movs	r5, #0
 8017e84:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8017e88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e8a:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8017e8e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8017e90:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	f040 80b0 	bne.w	8017ffa <rcl_wait_set_resize+0x306>
 8017e9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017e9c:	b128      	cbz	r0, 8017eaa <rcl_wait_set_resize+0x1b6>
 8017e9e:	4631      	mov	r1, r6
 8017ea0:	47b8      	blx	r7
 8017ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ea4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017ea8:	62a3      	str	r3, [r4, #40]	; 0x28
 8017eaa:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017eae:	b318      	cbz	r0, 8017ef8 <rcl_wait_set_resize+0x204>
 8017eb0:	4631      	mov	r1, r6
 8017eb2:	47b8      	blx	r7
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017eba:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8017ebe:	b003      	add	sp, #12
 8017ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ec4:	6800      	ldr	r0, [r0, #0]
 8017ec6:	b120      	cbz	r0, 8017ed2 <rcl_wait_set_resize+0x1de>
 8017ec8:	4649      	mov	r1, r9
 8017eca:	47d8      	blx	fp
 8017ecc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017ed0:	6027      	str	r7, [r4, #0]
 8017ed2:	f8da 0008 	ldr.w	r0, [sl, #8]
 8017ed6:	2800      	cmp	r0, #0
 8017ed8:	f43f af50 	beq.w	8017d7c <rcl_wait_set_resize+0x88>
 8017edc:	4649      	mov	r1, r9
 8017ede:	47d8      	blx	fp
 8017ee0:	2300      	movs	r3, #0
 8017ee2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017ee6:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8017eea:	e747      	b.n	8017d7c <rcl_wait_set_resize+0x88>
 8017eec:	4649      	mov	r1, r9
 8017eee:	6820      	ldr	r0, [r4, #0]
 8017ef0:	47d8      	blx	fp
 8017ef2:	e9c4 7700 	strd	r7, r7, [r4]
 8017ef6:	200a      	movs	r0, #10
 8017ef8:	b003      	add	sp, #12
 8017efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017efe:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8017f02:	4642      	mov	r2, r8
 8017f04:	4649      	mov	r1, r9
 8017f06:	68a0      	ldr	r0, [r4, #8]
 8017f08:	4798      	blx	r3
 8017f0a:	60a0      	str	r0, [r4, #8]
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	d0f2      	beq.n	8017ef6 <rcl_wait_set_resize+0x202>
 8017f10:	4639      	mov	r1, r7
 8017f12:	2700      	movs	r7, #0
 8017f14:	464a      	mov	r2, r9
 8017f16:	f002 fc19 	bl	801a74c <memset>
 8017f1a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017f1e:	60e5      	str	r5, [r4, #12]
 8017f20:	19ad      	adds	r5, r5, r6
 8017f22:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017f26:	f8ca 7010 	str.w	r7, [sl, #16]
 8017f2a:	f43f af41 	beq.w	8017db0 <rcl_wait_set_resize+0xbc>
 8017f2e:	00ad      	lsls	r5, r5, #2
 8017f30:	4642      	mov	r2, r8
 8017f32:	4629      	mov	r1, r5
 8017f34:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8017f38:	f8da 0014 	ldr.w	r0, [sl, #20]
 8017f3c:	4798      	blx	r3
 8017f3e:	4680      	mov	r8, r0
 8017f40:	f8ca 0014 	str.w	r0, [sl, #20]
 8017f44:	2800      	cmp	r0, #0
 8017f46:	f000 8084 	beq.w	8018052 <rcl_wait_set_resize+0x35e>
 8017f4a:	462a      	mov	r2, r5
 8017f4c:	4639      	mov	r1, r7
 8017f4e:	f002 fbfd 	bl	801a74c <memset>
 8017f52:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017f56:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017f5a:	e736      	b.n	8017dca <rcl_wait_set_resize+0xd6>
 8017f5c:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8017f60:	4642      	mov	r2, r8
 8017f62:	4649      	mov	r1, r9
 8017f64:	6920      	ldr	r0, [r4, #16]
 8017f66:	47b8      	blx	r7
 8017f68:	6120      	str	r0, [r4, #16]
 8017f6a:	2800      	cmp	r0, #0
 8017f6c:	d0c3      	beq.n	8017ef6 <rcl_wait_set_resize+0x202>
 8017f6e:	464a      	mov	r2, r9
 8017f70:	4629      	mov	r1, r5
 8017f72:	f002 fbeb 	bl	801a74c <memset>
 8017f76:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017f7a:	6166      	str	r6, [r4, #20]
 8017f7c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8017f80:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8017f84:	e735      	b.n	8017df2 <rcl_wait_set_resize+0xfe>
 8017f86:	009e      	lsls	r6, r3, #2
 8017f88:	4631      	mov	r1, r6
 8017f8a:	4642      	mov	r2, r8
 8017f8c:	69a0      	ldr	r0, [r4, #24]
 8017f8e:	47b8      	blx	r7
 8017f90:	61a0      	str	r0, [r4, #24]
 8017f92:	2800      	cmp	r0, #0
 8017f94:	d0af      	beq.n	8017ef6 <rcl_wait_set_resize+0x202>
 8017f96:	4632      	mov	r2, r6
 8017f98:	4629      	mov	r1, r5
 8017f9a:	f002 fbd7 	bl	801a74c <memset>
 8017f9e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017fa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017fa4:	4642      	mov	r2, r8
 8017fa6:	61e3      	str	r3, [r4, #28]
 8017fa8:	4631      	mov	r1, r6
 8017faa:	f8da 0020 	ldr.w	r0, [sl, #32]
 8017fae:	f8ca 501c 	str.w	r5, [sl, #28]
 8017fb2:	47b8      	blx	r7
 8017fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017fb6:	f8ca 0020 	str.w	r0, [sl, #32]
 8017fba:	6a1f      	ldr	r7, [r3, #32]
 8017fbc:	2f00      	cmp	r7, #0
 8017fbe:	d058      	beq.n	8018072 <rcl_wait_set_resize+0x37e>
 8017fc0:	4632      	mov	r2, r6
 8017fc2:	4629      	mov	r1, r5
 8017fc4:	4638      	mov	r0, r7
 8017fc6:	f002 fbc1 	bl	801a74c <memset>
 8017fca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017fce:	e72a      	b.n	8017e26 <rcl_wait_set_resize+0x132>
 8017fd0:	6a20      	ldr	r0, [r4, #32]
 8017fd2:	b128      	cbz	r0, 8017fe0 <rcl_wait_set_resize+0x2ec>
 8017fd4:	4639      	mov	r1, r7
 8017fd6:	47c0      	blx	r8
 8017fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017fda:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017fde:	6223      	str	r3, [r4, #32]
 8017fe0:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8017fe4:	2800      	cmp	r0, #0
 8017fe6:	f43f af4c 	beq.w	8017e82 <rcl_wait_set_resize+0x18e>
 8017fea:	4639      	mov	r1, r7
 8017fec:	47c0      	blx	r8
 8017fee:	2300      	movs	r3, #0
 8017ff0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8017ff4:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8017ff8:	e743      	b.n	8017e82 <rcl_wait_set_resize+0x18e>
 8017ffa:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8017ffe:	4641      	mov	r1, r8
 8018000:	4632      	mov	r2, r6
 8018002:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018004:	47c8      	blx	r9
 8018006:	62a0      	str	r0, [r4, #40]	; 0x28
 8018008:	2800      	cmp	r0, #0
 801800a:	f43f af74 	beq.w	8017ef6 <rcl_wait_set_resize+0x202>
 801800e:	4642      	mov	r2, r8
 8018010:	4629      	mov	r1, r5
 8018012:	f002 fb9b 	bl	801a74c <memset>
 8018016:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801801a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801801c:	4632      	mov	r2, r6
 801801e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018020:	4641      	mov	r1, r8
 8018022:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8018026:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 801802a:	47c8      	blx	r9
 801802c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801802e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8018032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018034:	b35b      	cbz	r3, 801808e <rcl_wait_set_resize+0x39a>
 8018036:	4642      	mov	r2, r8
 8018038:	4618      	mov	r0, r3
 801803a:	4629      	mov	r1, r5
 801803c:	f002 fb86 	bl	801a74c <memset>
 8018040:	4628      	mov	r0, r5
 8018042:	b003      	add	sp, #12
 8018044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018048:	200b      	movs	r0, #11
 801804a:	4770      	bx	lr
 801804c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018050:	e752      	b.n	8017ef8 <rcl_wait_set_resize+0x204>
 8018052:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018054:	68a0      	ldr	r0, [r4, #8]
 8018056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018058:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801805a:	4790      	blx	r2
 801805c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801805e:	6920      	ldr	r0, [r4, #16]
 8018060:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8018064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018066:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8018068:	4790      	blx	r2
 801806a:	200a      	movs	r0, #10
 801806c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8018070:	e742      	b.n	8017ef8 <rcl_wait_set_resize+0x204>
 8018072:	69a0      	ldr	r0, [r4, #24]
 8018074:	4641      	mov	r1, r8
 8018076:	47c8      	blx	r9
 8018078:	200a      	movs	r0, #10
 801807a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801807e:	e73b      	b.n	8017ef8 <rcl_wait_set_resize+0x204>
 8018080:	6a20      	ldr	r0, [r4, #32]
 8018082:	4639      	mov	r1, r7
 8018084:	47c0      	blx	r8
 8018086:	200a      	movs	r0, #10
 8018088:	e9c4 5508 	strd	r5, r5, [r4, #32]
 801808c:	e734      	b.n	8017ef8 <rcl_wait_set_resize+0x204>
 801808e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018090:	4631      	mov	r1, r6
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	47b8      	blx	r7
 8018096:	9b00      	ldr	r3, [sp, #0]
 8018098:	200a      	movs	r0, #10
 801809a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801809e:	e72b      	b.n	8017ef8 <rcl_wait_set_resize+0x204>

080180a0 <rcl_wait_set_init>:
 80180a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80180a4:	b084      	sub	sp, #16
 80180a6:	4604      	mov	r4, r0
 80180a8:	a810      	add	r0, sp, #64	; 0x40
 80180aa:	460f      	mov	r7, r1
 80180ac:	4690      	mov	r8, r2
 80180ae:	4699      	mov	r9, r3
 80180b0:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80180b4:	f7f7 ff78 	bl	800ffa8 <rcutils_allocator_is_valid>
 80180b8:	2800      	cmp	r0, #0
 80180ba:	d06b      	beq.n	8018194 <rcl_wait_set_init+0xf4>
 80180bc:	2c00      	cmp	r4, #0
 80180be:	d069      	beq.n	8018194 <rcl_wait_set_init+0xf4>
 80180c0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80180c2:	b125      	cbz	r5, 80180ce <rcl_wait_set_init+0x2e>
 80180c4:	2564      	movs	r5, #100	; 0x64
 80180c6:	4628      	mov	r0, r5
 80180c8:	b004      	add	sp, #16
 80180ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ce:	f1ba 0f00 	cmp.w	sl, #0
 80180d2:	d05f      	beq.n	8018194 <rcl_wait_set_init+0xf4>
 80180d4:	4650      	mov	r0, sl
 80180d6:	f7fe f95f 	bl	8016398 <rcl_context_is_valid>
 80180da:	2800      	cmp	r0, #0
 80180dc:	d067      	beq.n	80181ae <rcl_wait_set_init+0x10e>
 80180de:	205c      	movs	r0, #92	; 0x5c
 80180e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80180e2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80180e4:	4798      	blx	r3
 80180e6:	6320      	str	r0, [r4, #48]	; 0x30
 80180e8:	2800      	cmp	r0, #0
 80180ea:	d062      	beq.n	80181b2 <rcl_wait_set_init+0x112>
 80180ec:	225c      	movs	r2, #92	; 0x5c
 80180ee:	4629      	mov	r1, r5
 80180f0:	f002 fb2c 	bl	801a74c <memset>
 80180f4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80180f6:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 80180fa:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80180fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018102:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8018106:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801810a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801810e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8018112:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8018116:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801811a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801811e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8018122:	1899      	adds	r1, r3, r2
 8018124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018126:	f8de 3000 	ldr.w	r3, [lr]
 801812a:	f8da 0000 	ldr.w	r0, [sl]
 801812e:	4411      	add	r1, r2
 8018130:	4441      	add	r1, r8
 8018132:	f8cc 3000 	str.w	r3, [ip]
 8018136:	3028      	adds	r0, #40	; 0x28
 8018138:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801813c:	f001 f9d6 	bl	80194ec <rmw_create_wait_set>
 8018140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018142:	63f0      	str	r0, [r6, #60]	; 0x3c
 8018144:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018146:	b350      	cbz	r0, 801819e <rcl_wait_set_init+0xfe>
 8018148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801814a:	4642      	mov	r2, r8
 801814c:	9302      	str	r3, [sp, #8]
 801814e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018150:	4639      	mov	r1, r7
 8018152:	9301      	str	r3, [sp, #4]
 8018154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018156:	4620      	mov	r0, r4
 8018158:	9300      	str	r3, [sp, #0]
 801815a:	464b      	mov	r3, r9
 801815c:	f7ff fdca 	bl	8017cf4 <rcl_wait_set_resize>
 8018160:	4605      	mov	r5, r0
 8018162:	2800      	cmp	r0, #0
 8018164:	d0af      	beq.n	80180c6 <rcl_wait_set_init+0x26>
 8018166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018168:	bb2b      	cbnz	r3, 80181b6 <rcl_wait_set_init+0x116>
 801816a:	2600      	movs	r6, #0
 801816c:	4620      	mov	r0, r4
 801816e:	4633      	mov	r3, r6
 8018170:	4632      	mov	r2, r6
 8018172:	4631      	mov	r1, r6
 8018174:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018178:	9600      	str	r6, [sp, #0]
 801817a:	f7ff fdbb 	bl	8017cf4 <rcl_wait_set_resize>
 801817e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8018180:	2800      	cmp	r0, #0
 8018182:	d0a0      	beq.n	80180c6 <rcl_wait_set_init+0x26>
 8018184:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018186:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8018188:	4798      	blx	r3
 801818a:	4628      	mov	r0, r5
 801818c:	6326      	str	r6, [r4, #48]	; 0x30
 801818e:	b004      	add	sp, #16
 8018190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018194:	250b      	movs	r5, #11
 8018196:	4628      	mov	r0, r5
 8018198:	b004      	add	sp, #16
 801819a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801819e:	2501      	movs	r5, #1
 80181a0:	f001 f9ae 	bl	8019500 <rmw_destroy_wait_set>
 80181a4:	2800      	cmp	r0, #0
 80181a6:	bf18      	it	ne
 80181a8:	f44f 7561 	movne.w	r5, #900	; 0x384
 80181ac:	e7dd      	b.n	801816a <rcl_wait_set_init+0xca>
 80181ae:	2565      	movs	r5, #101	; 0x65
 80181b0:	e789      	b.n	80180c6 <rcl_wait_set_init+0x26>
 80181b2:	250a      	movs	r5, #10
 80181b4:	e787      	b.n	80180c6 <rcl_wait_set_init+0x26>
 80181b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80181b8:	e7f2      	b.n	80181a0 <rcl_wait_set_init+0x100>
 80181ba:	bf00      	nop

080181bc <rcl_wait_set_add_guard_condition>:
 80181bc:	b320      	cbz	r0, 8018208 <rcl_wait_set_add_guard_condition+0x4c>
 80181be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80181c0:	b570      	push	{r4, r5, r6, lr}
 80181c2:	4604      	mov	r4, r0
 80181c4:	b1d3      	cbz	r3, 80181fc <rcl_wait_set_add_guard_condition+0x40>
 80181c6:	b319      	cbz	r1, 8018210 <rcl_wait_set_add_guard_condition+0x54>
 80181c8:	68dd      	ldr	r5, [r3, #12]
 80181ca:	68e0      	ldr	r0, [r4, #12]
 80181cc:	4285      	cmp	r5, r0
 80181ce:	d218      	bcs.n	8018202 <rcl_wait_set_add_guard_condition+0x46>
 80181d0:	68a0      	ldr	r0, [r4, #8]
 80181d2:	1c6e      	adds	r6, r5, #1
 80181d4:	60de      	str	r6, [r3, #12]
 80181d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80181da:	b102      	cbz	r2, 80181de <rcl_wait_set_add_guard_condition+0x22>
 80181dc:	6015      	str	r5, [r2, #0]
 80181de:	4608      	mov	r0, r1
 80181e0:	f002 f936 	bl	801a450 <rcl_guard_condition_get_rmw_handle>
 80181e4:	b190      	cbz	r0, 801820c <rcl_wait_set_add_guard_condition+0x50>
 80181e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80181e8:	6842      	ldr	r2, [r0, #4]
 80181ea:	695b      	ldr	r3, [r3, #20]
 80181ec:	2000      	movs	r0, #0
 80181ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80181f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80181f4:	6913      	ldr	r3, [r2, #16]
 80181f6:	3301      	adds	r3, #1
 80181f8:	6113      	str	r3, [r2, #16]
 80181fa:	bd70      	pop	{r4, r5, r6, pc}
 80181fc:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018200:	bd70      	pop	{r4, r5, r6, pc}
 8018202:	f240 3086 	movw	r0, #902	; 0x386
 8018206:	bd70      	pop	{r4, r5, r6, pc}
 8018208:	200b      	movs	r0, #11
 801820a:	4770      	bx	lr
 801820c:	2001      	movs	r0, #1
 801820e:	bd70      	pop	{r4, r5, r6, pc}
 8018210:	200b      	movs	r0, #11
 8018212:	bd70      	pop	{r4, r5, r6, pc}

08018214 <rcl_wait_set_add_timer>:
 8018214:	b340      	cbz	r0, 8018268 <rcl_wait_set_add_timer+0x54>
 8018216:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018218:	b570      	push	{r4, r5, r6, lr}
 801821a:	4604      	mov	r4, r0
 801821c:	b1f3      	cbz	r3, 801825c <rcl_wait_set_add_timer+0x48>
 801821e:	b329      	cbz	r1, 801826c <rcl_wait_set_add_timer+0x58>
 8018220:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8018222:	6965      	ldr	r5, [r4, #20]
 8018224:	42a8      	cmp	r0, r5
 8018226:	d21c      	bcs.n	8018262 <rcl_wait_set_add_timer+0x4e>
 8018228:	6925      	ldr	r5, [r4, #16]
 801822a:	1c46      	adds	r6, r0, #1
 801822c:	641e      	str	r6, [r3, #64]	; 0x40
 801822e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8018232:	b102      	cbz	r2, 8018236 <rcl_wait_set_add_timer+0x22>
 8018234:	6010      	str	r0, [r2, #0]
 8018236:	4608      	mov	r0, r1
 8018238:	f7ff faa4 	bl	8017784 <rcl_timer_get_guard_condition>
 801823c:	b168      	cbz	r0, 801825a <rcl_wait_set_add_timer+0x46>
 801823e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018240:	68e3      	ldr	r3, [r4, #12]
 8018242:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8018244:	3b01      	subs	r3, #1
 8018246:	441d      	add	r5, r3
 8018248:	f002 f902 	bl	801a450 <rcl_guard_condition_get_rmw_handle>
 801824c:	b180      	cbz	r0, 8018270 <rcl_wait_set_add_timer+0x5c>
 801824e:	6842      	ldr	r2, [r0, #4]
 8018250:	2000      	movs	r0, #0
 8018252:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018254:	695b      	ldr	r3, [r3, #20]
 8018256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801825a:	bd70      	pop	{r4, r5, r6, pc}
 801825c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018260:	bd70      	pop	{r4, r5, r6, pc}
 8018262:	f240 3086 	movw	r0, #902	; 0x386
 8018266:	bd70      	pop	{r4, r5, r6, pc}
 8018268:	200b      	movs	r0, #11
 801826a:	4770      	bx	lr
 801826c:	200b      	movs	r0, #11
 801826e:	bd70      	pop	{r4, r5, r6, pc}
 8018270:	2001      	movs	r0, #1
 8018272:	bd70      	pop	{r4, r5, r6, pc}

08018274 <rcl_wait_set_add_client>:
 8018274:	b320      	cbz	r0, 80182c0 <rcl_wait_set_add_client+0x4c>
 8018276:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018278:	b570      	push	{r4, r5, r6, lr}
 801827a:	4604      	mov	r4, r0
 801827c:	b1d3      	cbz	r3, 80182b4 <rcl_wait_set_add_client+0x40>
 801827e:	b319      	cbz	r1, 80182c8 <rcl_wait_set_add_client+0x54>
 8018280:	699d      	ldr	r5, [r3, #24]
 8018282:	69e0      	ldr	r0, [r4, #28]
 8018284:	4285      	cmp	r5, r0
 8018286:	d218      	bcs.n	80182ba <rcl_wait_set_add_client+0x46>
 8018288:	69a0      	ldr	r0, [r4, #24]
 801828a:	1c6e      	adds	r6, r5, #1
 801828c:	619e      	str	r6, [r3, #24]
 801828e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8018292:	b102      	cbz	r2, 8018296 <rcl_wait_set_add_client+0x22>
 8018294:	6015      	str	r5, [r2, #0]
 8018296:	4608      	mov	r0, r1
 8018298:	f7fe f818 	bl	80162cc <rcl_client_get_rmw_handle>
 801829c:	b190      	cbz	r0, 80182c4 <rcl_wait_set_add_client+0x50>
 801829e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80182a0:	6842      	ldr	r2, [r0, #4]
 80182a2:	6a1b      	ldr	r3, [r3, #32]
 80182a4:	2000      	movs	r0, #0
 80182a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80182aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80182ac:	69d3      	ldr	r3, [r2, #28]
 80182ae:	3301      	adds	r3, #1
 80182b0:	61d3      	str	r3, [r2, #28]
 80182b2:	bd70      	pop	{r4, r5, r6, pc}
 80182b4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80182b8:	bd70      	pop	{r4, r5, r6, pc}
 80182ba:	f240 3086 	movw	r0, #902	; 0x386
 80182be:	bd70      	pop	{r4, r5, r6, pc}
 80182c0:	200b      	movs	r0, #11
 80182c2:	4770      	bx	lr
 80182c4:	2001      	movs	r0, #1
 80182c6:	bd70      	pop	{r4, r5, r6, pc}
 80182c8:	200b      	movs	r0, #11
 80182ca:	bd70      	pop	{r4, r5, r6, pc}

080182cc <rcl_wait_set_add_service>:
 80182cc:	b320      	cbz	r0, 8018318 <rcl_wait_set_add_service+0x4c>
 80182ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80182d0:	b570      	push	{r4, r5, r6, lr}
 80182d2:	4604      	mov	r4, r0
 80182d4:	b1d3      	cbz	r3, 801830c <rcl_wait_set_add_service+0x40>
 80182d6:	b319      	cbz	r1, 8018320 <rcl_wait_set_add_service+0x54>
 80182d8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80182da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80182dc:	4285      	cmp	r5, r0
 80182de:	d218      	bcs.n	8018312 <rcl_wait_set_add_service+0x46>
 80182e0:	6a20      	ldr	r0, [r4, #32]
 80182e2:	1c6e      	adds	r6, r5, #1
 80182e4:	625e      	str	r6, [r3, #36]	; 0x24
 80182e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80182ea:	b102      	cbz	r2, 80182ee <rcl_wait_set_add_service+0x22>
 80182ec:	6015      	str	r5, [r2, #0]
 80182ee:	4608      	mov	r0, r1
 80182f0:	f7fe fe42 	bl	8016f78 <rcl_service_get_rmw_handle>
 80182f4:	b190      	cbz	r0, 801831c <rcl_wait_set_add_service+0x50>
 80182f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80182f8:	6842      	ldr	r2, [r0, #4]
 80182fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182fc:	2000      	movs	r0, #0
 80182fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018302:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018304:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018306:	3301      	adds	r3, #1
 8018308:	6293      	str	r3, [r2, #40]	; 0x28
 801830a:	bd70      	pop	{r4, r5, r6, pc}
 801830c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018310:	bd70      	pop	{r4, r5, r6, pc}
 8018312:	f240 3086 	movw	r0, #902	; 0x386
 8018316:	bd70      	pop	{r4, r5, r6, pc}
 8018318:	200b      	movs	r0, #11
 801831a:	4770      	bx	lr
 801831c:	2001      	movs	r0, #1
 801831e:	bd70      	pop	{r4, r5, r6, pc}
 8018320:	200b      	movs	r0, #11
 8018322:	bd70      	pop	{r4, r5, r6, pc}
 8018324:	0000      	movs	r0, r0
	...

08018328 <rcl_wait>:
 8018328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801832c:	b08f      	sub	sp, #60	; 0x3c
 801832e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018332:	2800      	cmp	r0, #0
 8018334:	f000 8152 	beq.w	80185dc <rcl_wait+0x2b4>
 8018338:	6b05      	ldr	r5, [r0, #48]	; 0x30
 801833a:	4604      	mov	r4, r0
 801833c:	2d00      	cmp	r5, #0
 801833e:	f000 80c0 	beq.w	80184c2 <rcl_wait+0x19a>
 8018342:	6843      	ldr	r3, [r0, #4]
 8018344:	b973      	cbnz	r3, 8018364 <rcl_wait+0x3c>
 8018346:	68e3      	ldr	r3, [r4, #12]
 8018348:	b963      	cbnz	r3, 8018364 <rcl_wait+0x3c>
 801834a:	6963      	ldr	r3, [r4, #20]
 801834c:	b953      	cbnz	r3, 8018364 <rcl_wait+0x3c>
 801834e:	69e3      	ldr	r3, [r4, #28]
 8018350:	b943      	cbnz	r3, 8018364 <rcl_wait+0x3c>
 8018352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018354:	b933      	cbnz	r3, 8018364 <rcl_wait+0x3c>
 8018356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018358:	b923      	cbnz	r3, 8018364 <rcl_wait+0x3c>
 801835a:	f240 3085 	movw	r0, #901	; 0x385
 801835e:	b00f      	add	sp, #60	; 0x3c
 8018360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018368:	2a01      	cmp	r2, #1
 801836a:	f173 0300 	sbcs.w	r3, r3, #0
 801836e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8018370:	db56      	blt.n	8018420 <rcl_wait+0xf8>
 8018372:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8018376:	2900      	cmp	r1, #0
 8018378:	f000 814f 	beq.w	801861a <rcl_wait+0x2f2>
 801837c:	2300      	movs	r3, #0
 801837e:	f04f 0800 	mov.w	r8, #0
 8018382:	f04f 0900 	mov.w	r9, #0
 8018386:	469b      	mov	fp, r3
 8018388:	9307      	str	r3, [sp, #28]
 801838a:	e00d      	b.n	80183a8 <rcl_wait+0x80>
 801838c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801838e:	6922      	ldr	r2, [r4, #16]
 8018390:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8018392:	f842 000a 	str.w	r0, [r2, sl]
 8018396:	2300      	movs	r3, #0
 8018398:	f118 0801 	adds.w	r8, r8, #1
 801839c:	f149 0900 	adc.w	r9, r9, #0
 80183a0:	4599      	cmp	r9, r3
 80183a2:	bf08      	it	eq
 80183a4:	4588      	cmpeq	r8, r1
 80183a6:	d243      	bcs.n	8018430 <rcl_wait+0x108>
 80183a8:	6922      	ldr	r2, [r4, #16]
 80183aa:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80183ae:	f852 000a 	ldr.w	r0, [r2, sl]
 80183b2:	2800      	cmp	r0, #0
 80183b4:	d0ef      	beq.n	8018396 <rcl_wait+0x6e>
 80183b6:	68e2      	ldr	r2, [r4, #12]
 80183b8:	6969      	ldr	r1, [r5, #20]
 80183ba:	4442      	add	r2, r8
 80183bc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80183c0:	b13b      	cbz	r3, 80183d2 <rcl_wait+0xaa>
 80183c2:	692a      	ldr	r2, [r5, #16]
 80183c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80183c8:	6921      	ldr	r1, [r4, #16]
 80183ca:	3201      	adds	r2, #1
 80183cc:	f851 000a 	ldr.w	r0, [r1, sl]
 80183d0:	612a      	str	r2, [r5, #16]
 80183d2:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80183d6:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80183da:	f7ff f9c1 	bl	8017760 <rcl_timer_is_canceled>
 80183de:	2800      	cmp	r0, #0
 80183e0:	d1bd      	bne.n	801835e <rcl_wait+0x36>
 80183e2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80183e6:	2a00      	cmp	r2, #0
 80183e8:	d1d0      	bne.n	801838c <rcl_wait+0x64>
 80183ea:	6922      	ldr	r2, [r4, #16]
 80183ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80183f0:	f852 000a 	ldr.w	r0, [r2, sl]
 80183f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183f8:	a90a      	add	r1, sp, #40	; 0x28
 80183fa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80183fe:	f7ff f98b 	bl	8017718 <rcl_timer_get_time_until_next_call>
 8018402:	2800      	cmp	r0, #0
 8018404:	d1ab      	bne.n	801835e <rcl_wait+0x36>
 8018406:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801840a:	42b2      	cmp	r2, r6
 801840c:	eb73 0107 	sbcs.w	r1, r3, r7
 8018410:	da03      	bge.n	801841a <rcl_wait+0xf2>
 8018412:	461f      	mov	r7, r3
 8018414:	2301      	movs	r3, #1
 8018416:	4616      	mov	r6, r2
 8018418:	9307      	str	r3, [sp, #28]
 801841a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801841c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801841e:	e7ba      	b.n	8018396 <rcl_wait+0x6e>
 8018420:	2900      	cmp	r1, #0
 8018422:	f000 80e4 	beq.w	80185ee <rcl_wait+0x2c6>
 8018426:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801842a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801842e:	e7a5      	b.n	801837c <rcl_wait+0x54>
 8018430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018434:	4313      	orrs	r3, r2
 8018436:	d149      	bne.n	80184cc <rcl_wait+0x1a4>
 8018438:	2300      	movs	r3, #0
 801843a:	2200      	movs	r2, #0
 801843c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018440:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018444:	ab0a      	add	r3, sp, #40	; 0x28
 8018446:	9302      	str	r3, [sp, #8]
 8018448:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 801844a:	f105 0334 	add.w	r3, r5, #52	; 0x34
 801844e:	e9cd 3200 	strd	r3, r2, [sp]
 8018452:	f105 0110 	add.w	r1, r5, #16
 8018456:	f105 031c 	add.w	r3, r5, #28
 801845a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801845e:	1d28      	adds	r0, r5, #4
 8018460:	f000 fec4 	bl	80191ec <rmw_wait>
 8018464:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018466:	4607      	mov	r7, r0
 8018468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801846a:	b32a      	cbz	r2, 80184b8 <rcl_wait+0x190>
 801846c:	f04f 0800 	mov.w	r8, #0
 8018470:	4646      	mov	r6, r8
 8018472:	e005      	b.n	8018480 <rcl_wait+0x158>
 8018474:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018478:	f108 0801 	add.w	r8, r8, #1
 801847c:	4542      	cmp	r2, r8
 801847e:	d91b      	bls.n	80184b8 <rcl_wait+0x190>
 8018480:	6922      	ldr	r2, [r4, #16]
 8018482:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8018486:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801848a:	2800      	cmp	r0, #0
 801848c:	d0f3      	beq.n	8018476 <rcl_wait+0x14e>
 801848e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8018492:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8018496:	f7ff f907 	bl	80176a8 <rcl_timer_is_ready>
 801849a:	2800      	cmp	r0, #0
 801849c:	f47f af5f 	bne.w	801835e <rcl_wait+0x36>
 80184a0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80184a4:	2a00      	cmp	r2, #0
 80184a6:	d1e5      	bne.n	8018474 <rcl_wait+0x14c>
 80184a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80184aa:	6921      	ldr	r1, [r4, #16]
 80184ac:	f108 0801 	add.w	r8, r8, #1
 80184b0:	514a      	str	r2, [r1, r5]
 80184b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80184b4:	4542      	cmp	r2, r8
 80184b6:	d8e3      	bhi.n	8018480 <rcl_wait+0x158>
 80184b8:	f037 0002 	bics.w	r0, r7, #2
 80184bc:	d02c      	beq.n	8018518 <rcl_wait+0x1f0>
 80184be:	2001      	movs	r0, #1
 80184c0:	e74d      	b.n	801835e <rcl_wait+0x36>
 80184c2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80184c6:	b00f      	add	sp, #60	; 0x3c
 80184c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80184d0:	2a01      	cmp	r2, #1
 80184d2:	f173 0300 	sbcs.w	r3, r3, #0
 80184d6:	f2c0 8085 	blt.w	80185e4 <rcl_wait+0x2bc>
 80184da:	2e00      	cmp	r6, #0
 80184dc:	f177 0300 	sbcs.w	r3, r7, #0
 80184e0:	bfb8      	it	lt
 80184e2:	2600      	movlt	r6, #0
 80184e4:	a34e      	add	r3, pc, #312	; (adr r3, 8018620 <rcl_wait+0x2f8>)
 80184e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ea:	bfb8      	it	lt
 80184ec:	2700      	movlt	r7, #0
 80184ee:	4630      	mov	r0, r6
 80184f0:	4639      	mov	r1, r7
 80184f2:	f7e8 fead 	bl	8001250 <__aeabi_ldivmod>
 80184f6:	a34a      	add	r3, pc, #296	; (adr r3, 8018620 <rcl_wait+0x2f8>)
 80184f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184fc:	4680      	mov	r8, r0
 80184fe:	4689      	mov	r9, r1
 8018500:	4630      	mov	r0, r6
 8018502:	4639      	mov	r1, r7
 8018504:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8018508:	f7e8 fea2 	bl	8001250 <__aeabi_ldivmod>
 801850c:	4619      	mov	r1, r3
 801850e:	4610      	mov	r0, r2
 8018510:	ab0a      	add	r3, sp, #40	; 0x28
 8018512:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018516:	e796      	b.n	8018446 <rcl_wait+0x11e>
 8018518:	6866      	ldr	r6, [r4, #4]
 801851a:	4602      	mov	r2, r0
 801851c:	b91e      	cbnz	r6, 8018526 <rcl_wait+0x1fe>
 801851e:	e00d      	b.n	801853c <rcl_wait+0x214>
 8018520:	3201      	adds	r2, #1
 8018522:	42b2      	cmp	r2, r6
 8018524:	d00a      	beq.n	801853c <rcl_wait+0x214>
 8018526:	6899      	ldr	r1, [r3, #8]
 8018528:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801852c:	2900      	cmp	r1, #0
 801852e:	d1f7      	bne.n	8018520 <rcl_wait+0x1f8>
 8018530:	6825      	ldr	r5, [r4, #0]
 8018532:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8018536:	3201      	adds	r2, #1
 8018538:	42b2      	cmp	r2, r6
 801853a:	d1f4      	bne.n	8018526 <rcl_wait+0x1fe>
 801853c:	68e6      	ldr	r6, [r4, #12]
 801853e:	2200      	movs	r2, #0
 8018540:	b91e      	cbnz	r6, 801854a <rcl_wait+0x222>
 8018542:	e00d      	b.n	8018560 <rcl_wait+0x238>
 8018544:	3201      	adds	r2, #1
 8018546:	42b2      	cmp	r2, r6
 8018548:	d00a      	beq.n	8018560 <rcl_wait+0x238>
 801854a:	6959      	ldr	r1, [r3, #20]
 801854c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018550:	2900      	cmp	r1, #0
 8018552:	d1f7      	bne.n	8018544 <rcl_wait+0x21c>
 8018554:	68a5      	ldr	r5, [r4, #8]
 8018556:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801855a:	3201      	adds	r2, #1
 801855c:	42b2      	cmp	r2, r6
 801855e:	d1f4      	bne.n	801854a <rcl_wait+0x222>
 8018560:	69e6      	ldr	r6, [r4, #28]
 8018562:	2200      	movs	r2, #0
 8018564:	b91e      	cbnz	r6, 801856e <rcl_wait+0x246>
 8018566:	e00d      	b.n	8018584 <rcl_wait+0x25c>
 8018568:	3201      	adds	r2, #1
 801856a:	42b2      	cmp	r2, r6
 801856c:	d00a      	beq.n	8018584 <rcl_wait+0x25c>
 801856e:	6a19      	ldr	r1, [r3, #32]
 8018570:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018574:	2900      	cmp	r1, #0
 8018576:	d1f7      	bne.n	8018568 <rcl_wait+0x240>
 8018578:	69a5      	ldr	r5, [r4, #24]
 801857a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801857e:	3201      	adds	r2, #1
 8018580:	42b2      	cmp	r2, r6
 8018582:	d1f4      	bne.n	801856e <rcl_wait+0x246>
 8018584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018586:	2200      	movs	r2, #0
 8018588:	b91e      	cbnz	r6, 8018592 <rcl_wait+0x26a>
 801858a:	e00d      	b.n	80185a8 <rcl_wait+0x280>
 801858c:	3201      	adds	r2, #1
 801858e:	4296      	cmp	r6, r2
 8018590:	d00a      	beq.n	80185a8 <rcl_wait+0x280>
 8018592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018594:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018598:	2900      	cmp	r1, #0
 801859a:	d1f7      	bne.n	801858c <rcl_wait+0x264>
 801859c:	6a25      	ldr	r5, [r4, #32]
 801859e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80185a2:	3201      	adds	r2, #1
 80185a4:	4296      	cmp	r6, r2
 80185a6:	d1f4      	bne.n	8018592 <rcl_wait+0x26a>
 80185a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80185aa:	2200      	movs	r2, #0
 80185ac:	b91e      	cbnz	r6, 80185b6 <rcl_wait+0x28e>
 80185ae:	e00d      	b.n	80185cc <rcl_wait+0x2a4>
 80185b0:	3201      	adds	r2, #1
 80185b2:	42b2      	cmp	r2, r6
 80185b4:	d00a      	beq.n	80185cc <rcl_wait+0x2a4>
 80185b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80185b8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80185bc:	2900      	cmp	r1, #0
 80185be:	d1f7      	bne.n	80185b0 <rcl_wait+0x288>
 80185c0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80185c2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80185c6:	3201      	adds	r2, #1
 80185c8:	42b2      	cmp	r2, r6
 80185ca:	d1f4      	bne.n	80185b6 <rcl_wait+0x28e>
 80185cc:	2f02      	cmp	r7, #2
 80185ce:	f47f aec6 	bne.w	801835e <rcl_wait+0x36>
 80185d2:	9b07      	ldr	r3, [sp, #28]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	bf08      	it	eq
 80185d8:	2002      	moveq	r0, #2
 80185da:	e6c0      	b.n	801835e <rcl_wait+0x36>
 80185dc:	200b      	movs	r0, #11
 80185de:	b00f      	add	sp, #60	; 0x3c
 80185e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e4:	9b07      	ldr	r3, [sp, #28]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	f47f af77 	bne.w	80184da <rcl_wait+0x1b2>
 80185ec:	e72b      	b.n	8018446 <rcl_wait+0x11e>
 80185ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80185f2:	4313      	orrs	r3, r2
 80185f4:	bf08      	it	eq
 80185f6:	9107      	streq	r1, [sp, #28]
 80185f8:	f43f af1e 	beq.w	8018438 <rcl_wait+0x110>
 80185fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8018600:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018604:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018608:	2a01      	cmp	r2, #1
 801860a:	f173 0300 	sbcs.w	r3, r3, #0
 801860e:	f04f 0300 	mov.w	r3, #0
 8018612:	9307      	str	r3, [sp, #28]
 8018614:	f6bf af61 	bge.w	80184da <rcl_wait+0x1b2>
 8018618:	e715      	b.n	8018446 <rcl_wait+0x11e>
 801861a:	4632      	mov	r2, r6
 801861c:	463b      	mov	r3, r7
 801861e:	e7f3      	b.n	8018608 <rcl_wait+0x2e0>
 8018620:	3b9aca00 	.word	0x3b9aca00
 8018624:	00000000 	.word	0x00000000

08018628 <__atomic_load_8>:
 8018628:	f04f 0101 	mov.w	r1, #1
 801862c:	ea80 4210 	eor.w	r2, r0, r0, lsr #16
 8018630:	f082 023d 	eor.w	r2, r2, #61	; 0x3d
 8018634:	4b13      	ldr	r3, [pc, #76]	; (8018684 <__atomic_load_8+0x5c>)
 8018636:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801863a:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 801863e:	fb03 f302 	mul.w	r3, r3, r2
 8018642:	4a11      	ldr	r2, [pc, #68]	; (8018688 <__atomic_load_8+0x60>)
 8018644:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8018648:	b430      	push	{r4, r5}
 801864a:	fba2 4203 	umull	r4, r2, r2, r3
 801864e:	0912      	lsrs	r2, r2, #4
 8018650:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8018654:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
 8018658:	4c0c      	ldr	r4, [pc, #48]	; (801868c <__atomic_load_8+0x64>)
 801865a:	1a9b      	subs	r3, r3, r2
 801865c:	18e5      	adds	r5, r4, r3
 801865e:	e8d5 2f4f 	ldrexb	r2, [r5]
 8018662:	e8c5 1f4c 	strexb	ip, r1, [r5]
 8018666:	f1bc 0f00 	cmp.w	ip, #0
 801866a:	d1f8      	bne.n	801865e <__atomic_load_8+0x36>
 801866c:	b2d2      	uxtb	r2, r2
 801866e:	f3bf 8f5b 	dmb	ish
 8018672:	2a00      	cmp	r2, #0
 8018674:	d1f3      	bne.n	801865e <__atomic_load_8+0x36>
 8018676:	c803      	ldmia	r0, {r0, r1}
 8018678:	f3bf 8f5b 	dmb	ish
 801867c:	54e2      	strb	r2, [r4, r3]
 801867e:	bc30      	pop	{r4, r5}
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	27d4eb2d 	.word	0x27d4eb2d
 8018688:	b21642c9 	.word	0xb21642c9
 801868c:	20006890 	.word	0x20006890

08018690 <__atomic_store_8>:
 8018690:	b4f0      	push	{r4, r5, r6, r7}
 8018692:	f04f 0501 	mov.w	r5, #1
 8018696:	ea80 4410 	eor.w	r4, r0, r0, lsr #16
 801869a:	f084 043d 	eor.w	r4, r4, #61	; 0x3d
 801869e:	4913      	ldr	r1, [pc, #76]	; (80186ec <__atomic_store_8+0x5c>)
 80186a0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 80186a4:	ea84 1414 	eor.w	r4, r4, r4, lsr #4
 80186a8:	fb01 f104 	mul.w	r1, r1, r4
 80186ac:	4c10      	ldr	r4, [pc, #64]	; (80186f0 <__atomic_store_8+0x60>)
 80186ae:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80186b2:	fba4 6401 	umull	r6, r4, r4, r1
 80186b6:	0924      	lsrs	r4, r4, #4
 80186b8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80186bc:	ebc4 04c6 	rsb	r4, r4, r6, lsl #3
 80186c0:	4e0c      	ldr	r6, [pc, #48]	; (80186f4 <__atomic_store_8+0x64>)
 80186c2:	1b09      	subs	r1, r1, r4
 80186c4:	1877      	adds	r7, r6, r1
 80186c6:	e8d7 4f4f 	ldrexb	r4, [r7]
 80186ca:	e8c7 5f4c 	strexb	ip, r5, [r7]
 80186ce:	f1bc 0f00 	cmp.w	ip, #0
 80186d2:	d1f8      	bne.n	80186c6 <__atomic_store_8+0x36>
 80186d4:	b2e4      	uxtb	r4, r4
 80186d6:	f3bf 8f5b 	dmb	ish
 80186da:	2c00      	cmp	r4, #0
 80186dc:	d1f3      	bne.n	80186c6 <__atomic_store_8+0x36>
 80186de:	e9c0 2300 	strd	r2, r3, [r0]
 80186e2:	f3bf 8f5b 	dmb	ish
 80186e6:	5474      	strb	r4, [r6, r1]
 80186e8:	bcf0      	pop	{r4, r5, r6, r7}
 80186ea:	4770      	bx	lr
 80186ec:	27d4eb2d 	.word	0x27d4eb2d
 80186f0:	b21642c9 	.word	0xb21642c9
 80186f4:	20006890 	.word	0x20006890

080186f8 <__atomic_exchange_8>:
 80186f8:	b4f0      	push	{r4, r5, r6, r7}
 80186fa:	4605      	mov	r5, r0
 80186fc:	f04f 0001 	mov.w	r0, #1
 8018700:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8018704:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018708:	4c14      	ldr	r4, [pc, #80]	; (801875c <__atomic_exchange_8+0x64>)
 801870a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801870e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018712:	fb04 f401 	mul.w	r4, r4, r1
 8018716:	4912      	ldr	r1, [pc, #72]	; (8018760 <__atomic_exchange_8+0x68>)
 8018718:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 801871c:	fba1 6104 	umull	r6, r1, r1, r4
 8018720:	0909      	lsrs	r1, r1, #4
 8018722:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8018726:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 801872a:	4f0e      	ldr	r7, [pc, #56]	; (8018764 <__atomic_exchange_8+0x6c>)
 801872c:	1a64      	subs	r4, r4, r1
 801872e:	1939      	adds	r1, r7, r4
 8018730:	e8d1 6f4f 	ldrexb	r6, [r1]
 8018734:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8018738:	f1bc 0f00 	cmp.w	ip, #0
 801873c:	d1f8      	bne.n	8018730 <__atomic_exchange_8+0x38>
 801873e:	b2f6      	uxtb	r6, r6
 8018740:	f3bf 8f5b 	dmb	ish
 8018744:	2e00      	cmp	r6, #0
 8018746:	d1f3      	bne.n	8018730 <__atomic_exchange_8+0x38>
 8018748:	e9d5 0100 	ldrd	r0, r1, [r5]
 801874c:	e9c5 2300 	strd	r2, r3, [r5]
 8018750:	f3bf 8f5b 	dmb	ish
 8018754:	553e      	strb	r6, [r7, r4]
 8018756:	bcf0      	pop	{r4, r5, r6, r7}
 8018758:	4770      	bx	lr
 801875a:	bf00      	nop
 801875c:	27d4eb2d 	.word	0x27d4eb2d
 8018760:	b21642c9 	.word	0xb21642c9
 8018764:	20006890 	.word	0x20006890

08018768 <__atomic_fetch_add_8>:
 8018768:	b4f0      	push	{r4, r5, r6, r7}
 801876a:	4605      	mov	r5, r0
 801876c:	f04f 0001 	mov.w	r0, #1
 8018770:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8018774:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018778:	4c15      	ldr	r4, [pc, #84]	; (80187d0 <__atomic_fetch_add_8+0x68>)
 801877a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801877e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018782:	fb04 f401 	mul.w	r4, r4, r1
 8018786:	4913      	ldr	r1, [pc, #76]	; (80187d4 <__atomic_fetch_add_8+0x6c>)
 8018788:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 801878c:	fba1 6104 	umull	r6, r1, r1, r4
 8018790:	0909      	lsrs	r1, r1, #4
 8018792:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8018796:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 801879a:	4f0f      	ldr	r7, [pc, #60]	; (80187d8 <__atomic_fetch_add_8+0x70>)
 801879c:	1a64      	subs	r4, r4, r1
 801879e:	1939      	adds	r1, r7, r4
 80187a0:	e8d1 6f4f 	ldrexb	r6, [r1]
 80187a4:	e8c1 0f4c 	strexb	ip, r0, [r1]
 80187a8:	f1bc 0f00 	cmp.w	ip, #0
 80187ac:	d1f8      	bne.n	80187a0 <__atomic_fetch_add_8+0x38>
 80187ae:	b2f6      	uxtb	r6, r6
 80187b0:	f3bf 8f5b 	dmb	ish
 80187b4:	2e00      	cmp	r6, #0
 80187b6:	d1f3      	bne.n	80187a0 <__atomic_fetch_add_8+0x38>
 80187b8:	e9d5 0100 	ldrd	r0, r1, [r5]
 80187bc:	1882      	adds	r2, r0, r2
 80187be:	eb41 0303 	adc.w	r3, r1, r3
 80187c2:	e9c5 2300 	strd	r2, r3, [r5]
 80187c6:	f3bf 8f5b 	dmb	ish
 80187ca:	553e      	strb	r6, [r7, r4]
 80187cc:	bcf0      	pop	{r4, r5, r6, r7}
 80187ce:	4770      	bx	lr
 80187d0:	27d4eb2d 	.word	0x27d4eb2d
 80187d4:	b21642c9 	.word	0xb21642c9
 80187d8:	20006890 	.word	0x20006890

080187dc <rcutils_is_directory>:
 80187dc:	2000      	movs	r0, #0
 80187de:	4770      	bx	lr

080187e0 <rcutils_join_path>:
 80187e0:	b082      	sub	sp, #8
 80187e2:	2000      	movs	r0, #0
 80187e4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80187e8:	b002      	add	sp, #8
 80187ea:	4770      	bx	lr

080187ec <rcutils_to_native_path>:
 80187ec:	b084      	sub	sp, #16
 80187ee:	a801      	add	r0, sp, #4
 80187f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80187f4:	b004      	add	sp, #16
 80187f6:	2000      	movs	r0, #0
 80187f8:	4770      	bx	lr
 80187fa:	bf00      	nop

080187fc <rcutils_format_string_limit>:
 80187fc:	b40f      	push	{r0, r1, r2, r3}
 80187fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018800:	b083      	sub	sp, #12
 8018802:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018804:	ac08      	add	r4, sp, #32
 8018806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801880a:	b34e      	cbz	r6, 8018860 <rcutils_format_string_limit+0x64>
 801880c:	a808      	add	r0, sp, #32
 801880e:	f7f7 fbcb 	bl	800ffa8 <rcutils_allocator_is_valid>
 8018812:	b328      	cbz	r0, 8018860 <rcutils_format_string_limit+0x64>
 8018814:	2100      	movs	r1, #0
 8018816:	ab0f      	add	r3, sp, #60	; 0x3c
 8018818:	4608      	mov	r0, r1
 801881a:	4632      	mov	r2, r6
 801881c:	e9cd 3300 	strd	r3, r3, [sp]
 8018820:	f000 f8f4 	bl	8018a0c <rcutils_vsnprintf>
 8018824:	1c43      	adds	r3, r0, #1
 8018826:	4605      	mov	r5, r0
 8018828:	d01a      	beq.n	8018860 <rcutils_format_string_limit+0x64>
 801882a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801882c:	1c47      	adds	r7, r0, #1
 801882e:	429f      	cmp	r7, r3
 8018830:	bf84      	itt	hi
 8018832:	461f      	movhi	r7, r3
 8018834:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8018838:	4638      	mov	r0, r7
 801883a:	9b08      	ldr	r3, [sp, #32]
 801883c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801883e:	4798      	blx	r3
 8018840:	4604      	mov	r4, r0
 8018842:	b168      	cbz	r0, 8018860 <rcutils_format_string_limit+0x64>
 8018844:	4632      	mov	r2, r6
 8018846:	4639      	mov	r1, r7
 8018848:	9b01      	ldr	r3, [sp, #4]
 801884a:	f000 f8df 	bl	8018a0c <rcutils_vsnprintf>
 801884e:	2800      	cmp	r0, #0
 8018850:	db02      	blt.n	8018858 <rcutils_format_string_limit+0x5c>
 8018852:	2300      	movs	r3, #0
 8018854:	5563      	strb	r3, [r4, r5]
 8018856:	e004      	b.n	8018862 <rcutils_format_string_limit+0x66>
 8018858:	4620      	mov	r0, r4
 801885a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801885c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801885e:	4798      	blx	r3
 8018860:	2400      	movs	r4, #0
 8018862:	4620      	mov	r0, r4
 8018864:	b003      	add	sp, #12
 8018866:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801886a:	b004      	add	sp, #16
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop

08018870 <rcutils_get_env>:
 8018870:	b168      	cbz	r0, 801888e <rcutils_get_env+0x1e>
 8018872:	b510      	push	{r4, lr}
 8018874:	460c      	mov	r4, r1
 8018876:	b129      	cbz	r1, 8018884 <rcutils_get_env+0x14>
 8018878:	f001 fec6 	bl	801a608 <getenv>
 801887c:	b120      	cbz	r0, 8018888 <rcutils_get_env+0x18>
 801887e:	6020      	str	r0, [r4, #0]
 8018880:	2000      	movs	r0, #0
 8018882:	bd10      	pop	{r4, pc}
 8018884:	4803      	ldr	r0, [pc, #12]	; (8018894 <rcutils_get_env+0x24>)
 8018886:	bd10      	pop	{r4, pc}
 8018888:	4b03      	ldr	r3, [pc, #12]	; (8018898 <rcutils_get_env+0x28>)
 801888a:	6023      	str	r3, [r4, #0]
 801888c:	bd10      	pop	{r4, pc}
 801888e:	4803      	ldr	r0, [pc, #12]	; (801889c <rcutils_get_env+0x2c>)
 8018890:	4770      	bx	lr
 8018892:	bf00      	nop
 8018894:	0801d630 	.word	0x0801d630
 8018898:	0801d754 	.word	0x0801d754
 801889c:	0801d614 	.word	0x0801d614

080188a0 <rcutils_repl_str>:
 80188a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188a4:	4680      	mov	r8, r0
 80188a6:	b089      	sub	sp, #36	; 0x24
 80188a8:	4608      	mov	r0, r1
 80188aa:	2600      	movs	r6, #0
 80188ac:	468a      	mov	sl, r1
 80188ae:	4699      	mov	r9, r3
 80188b0:	f8cd 8004 	str.w	r8, [sp, #4]
 80188b4:	9206      	str	r2, [sp, #24]
 80188b6:	f7e7 fcc5 	bl	8000244 <strlen>
 80188ba:	4637      	mov	r7, r6
 80188bc:	46b3      	mov	fp, r6
 80188be:	2510      	movs	r5, #16
 80188c0:	9002      	str	r0, [sp, #8]
 80188c2:	e01e      	b.n	8018902 <rcutils_repl_str+0x62>
 80188c4:	f10b 0b01 	add.w	fp, fp, #1
 80188c8:	455e      	cmp	r6, fp
 80188ca:	d211      	bcs.n	80188f0 <rcutils_repl_str+0x50>
 80188cc:	442e      	add	r6, r5
 80188ce:	4638      	mov	r0, r7
 80188d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80188d4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80188d8:	00b1      	lsls	r1, r6, #2
 80188da:	4798      	blx	r3
 80188dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188e0:	2800      	cmp	r0, #0
 80188e2:	d074      	beq.n	80189ce <rcutils_repl_str+0x12e>
 80188e4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80188e8:	bf28      	it	cs
 80188ea:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80188ee:	4607      	mov	r7, r0
 80188f0:	9a01      	ldr	r2, [sp, #4]
 80188f2:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80188f6:	1aa2      	subs	r2, r4, r2
 80188f8:	f843 2c04 	str.w	r2, [r3, #-4]
 80188fc:	9b02      	ldr	r3, [sp, #8]
 80188fe:	eb04 0803 	add.w	r8, r4, r3
 8018902:	4651      	mov	r1, sl
 8018904:	4640      	mov	r0, r8
 8018906:	f002 f903 	bl	801ab10 <strstr>
 801890a:	4604      	mov	r4, r0
 801890c:	2800      	cmp	r0, #0
 801890e:	d1d9      	bne.n	80188c4 <rcutils_repl_str+0x24>
 8018910:	4640      	mov	r0, r8
 8018912:	f7e7 fc97 	bl	8000244 <strlen>
 8018916:	9b01      	ldr	r3, [sp, #4]
 8018918:	eba8 0303 	sub.w	r3, r8, r3
 801891c:	181d      	adds	r5, r3, r0
 801891e:	9505      	str	r5, [sp, #20]
 8018920:	f1bb 0f00 	cmp.w	fp, #0
 8018924:	d03d      	beq.n	80189a2 <rcutils_repl_str+0x102>
 8018926:	9806      	ldr	r0, [sp, #24]
 8018928:	f7e7 fc8c 	bl	8000244 <strlen>
 801892c:	9b02      	ldr	r3, [sp, #8]
 801892e:	4682      	mov	sl, r0
 8018930:	1ac3      	subs	r3, r0, r3
 8018932:	fb0b 5303 	mla	r3, fp, r3, r5
 8018936:	461a      	mov	r2, r3
 8018938:	9307      	str	r3, [sp, #28]
 801893a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801893e:	f8d9 3000 	ldr.w	r3, [r9]
 8018942:	1c50      	adds	r0, r2, #1
 8018944:	4798      	blx	r3
 8018946:	9004      	str	r0, [sp, #16]
 8018948:	2800      	cmp	r0, #0
 801894a:	d040      	beq.n	80189ce <rcutils_repl_str+0x12e>
 801894c:	463e      	mov	r6, r7
 801894e:	683a      	ldr	r2, [r7, #0]
 8018950:	9901      	ldr	r1, [sp, #4]
 8018952:	f001 fed3 	bl	801a6fc <memcpy>
 8018956:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801895a:	683d      	ldr	r5, [r7, #0]
 801895c:	9303      	str	r3, [sp, #12]
 801895e:	9b04      	ldr	r3, [sp, #16]
 8018960:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8018964:	441d      	add	r5, r3
 8018966:	4652      	mov	r2, sl
 8018968:	4641      	mov	r1, r8
 801896a:	4628      	mov	r0, r5
 801896c:	f001 fec6 	bl	801a6fc <memcpy>
 8018970:	f856 2b04 	ldr.w	r2, [r6], #4
 8018974:	9b02      	ldr	r3, [sp, #8]
 8018976:	eb05 000a 	add.w	r0, r5, sl
 801897a:	441a      	add	r2, r3
 801897c:	9b01      	ldr	r3, [sp, #4]
 801897e:	1899      	adds	r1, r3, r2
 8018980:	9b03      	ldr	r3, [sp, #12]
 8018982:	429c      	cmp	r4, r3
 8018984:	bf0c      	ite	eq
 8018986:	9b05      	ldreq	r3, [sp, #20]
 8018988:	6833      	ldrne	r3, [r6, #0]
 801898a:	3401      	adds	r4, #1
 801898c:	1a9a      	subs	r2, r3, r2
 801898e:	1885      	adds	r5, r0, r2
 8018990:	f001 feb4 	bl	801a6fc <memcpy>
 8018994:	455c      	cmp	r4, fp
 8018996:	d3e6      	bcc.n	8018966 <rcutils_repl_str+0xc6>
 8018998:	2300      	movs	r3, #0
 801899a:	9a04      	ldr	r2, [sp, #16]
 801899c:	9907      	ldr	r1, [sp, #28]
 801899e:	5453      	strb	r3, [r2, r1]
 80189a0:	e00b      	b.n	80189ba <rcutils_repl_str+0x11a>
 80189a2:	4628      	mov	r0, r5
 80189a4:	f8d9 3000 	ldr.w	r3, [r9]
 80189a8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80189ac:	3001      	adds	r0, #1
 80189ae:	4798      	blx	r3
 80189b0:	9004      	str	r0, [sp, #16]
 80189b2:	b110      	cbz	r0, 80189ba <rcutils_repl_str+0x11a>
 80189b4:	9901      	ldr	r1, [sp, #4]
 80189b6:	f002 f884 	bl	801aac2 <strcpy>
 80189ba:	4638      	mov	r0, r7
 80189bc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80189c0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80189c4:	4798      	blx	r3
 80189c6:	9804      	ldr	r0, [sp, #16]
 80189c8:	b009      	add	sp, #36	; 0x24
 80189ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ce:	2300      	movs	r3, #0
 80189d0:	9304      	str	r3, [sp, #16]
 80189d2:	e7f2      	b.n	80189ba <rcutils_repl_str+0x11a>

080189d4 <rcutils_snprintf>:
 80189d4:	b40c      	push	{r2, r3}
 80189d6:	b530      	push	{r4, r5, lr}
 80189d8:	b083      	sub	sp, #12
 80189da:	ab06      	add	r3, sp, #24
 80189dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80189e0:	9301      	str	r3, [sp, #4]
 80189e2:	b152      	cbz	r2, 80189fa <rcutils_snprintf+0x26>
 80189e4:	b138      	cbz	r0, 80189f6 <rcutils_snprintf+0x22>
 80189e6:	b141      	cbz	r1, 80189fa <rcutils_snprintf+0x26>
 80189e8:	f002 f95c 	bl	801aca4 <vsniprintf>
 80189ec:	b003      	add	sp, #12
 80189ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80189f2:	b002      	add	sp, #8
 80189f4:	4770      	bx	lr
 80189f6:	2900      	cmp	r1, #0
 80189f8:	d0f6      	beq.n	80189e8 <rcutils_snprintf+0x14>
 80189fa:	f001 fdff 	bl	801a5fc <__errno>
 80189fe:	2216      	movs	r2, #22
 8018a00:	4603      	mov	r3, r0
 8018a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a06:	601a      	str	r2, [r3, #0]
 8018a08:	e7f0      	b.n	80189ec <rcutils_snprintf+0x18>
 8018a0a:	bf00      	nop

08018a0c <rcutils_vsnprintf>:
 8018a0c:	b570      	push	{r4, r5, r6, lr}
 8018a0e:	b13a      	cbz	r2, 8018a20 <rcutils_vsnprintf+0x14>
 8018a10:	b120      	cbz	r0, 8018a1c <rcutils_vsnprintf+0x10>
 8018a12:	b129      	cbz	r1, 8018a20 <rcutils_vsnprintf+0x14>
 8018a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a18:	f002 b944 	b.w	801aca4 <vsniprintf>
 8018a1c:	2900      	cmp	r1, #0
 8018a1e:	d0f9      	beq.n	8018a14 <rcutils_vsnprintf+0x8>
 8018a20:	f001 fdec 	bl	801a5fc <__errno>
 8018a24:	2316      	movs	r3, #22
 8018a26:	6003      	str	r3, [r0, #0]
 8018a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a2c:	bd70      	pop	{r4, r5, r6, pc}
 8018a2e:	bf00      	nop

08018a30 <rcutils_strdup>:
 8018a30:	b084      	sub	sp, #16
 8018a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a34:	ac07      	add	r4, sp, #28
 8018a36:	4605      	mov	r5, r0
 8018a38:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8018a3c:	b1a0      	cbz	r0, 8018a68 <rcutils_strdup+0x38>
 8018a3e:	f7e7 fc01 	bl	8000244 <strlen>
 8018a42:	1c47      	adds	r7, r0, #1
 8018a44:	4606      	mov	r6, r0
 8018a46:	9b07      	ldr	r3, [sp, #28]
 8018a48:	4638      	mov	r0, r7
 8018a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018a4c:	4798      	blx	r3
 8018a4e:	4604      	mov	r4, r0
 8018a50:	b128      	cbz	r0, 8018a5e <rcutils_strdup+0x2e>
 8018a52:	463a      	mov	r2, r7
 8018a54:	4629      	mov	r1, r5
 8018a56:	f001 fe51 	bl	801a6fc <memcpy>
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	55a3      	strb	r3, [r4, r6]
 8018a5e:	4620      	mov	r0, r4
 8018a60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a64:	b004      	add	sp, #16
 8018a66:	4770      	bx	lr
 8018a68:	4604      	mov	r4, r0
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a70:	b004      	add	sp, #16
 8018a72:	4770      	bx	lr

08018a74 <rcutils_strndup>:
 8018a74:	b082      	sub	sp, #8
 8018a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a78:	ac06      	add	r4, sp, #24
 8018a7a:	4605      	mov	r5, r0
 8018a7c:	e884 000c 	stmia.w	r4, {r2, r3}
 8018a80:	b188      	cbz	r0, 8018aa6 <rcutils_strndup+0x32>
 8018a82:	1c4f      	adds	r7, r1, #1
 8018a84:	460e      	mov	r6, r1
 8018a86:	4638      	mov	r0, r7
 8018a88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018a8a:	4790      	blx	r2
 8018a8c:	4604      	mov	r4, r0
 8018a8e:	b128      	cbz	r0, 8018a9c <rcutils_strndup+0x28>
 8018a90:	463a      	mov	r2, r7
 8018a92:	4629      	mov	r1, r5
 8018a94:	f001 fe32 	bl	801a6fc <memcpy>
 8018a98:	2300      	movs	r3, #0
 8018a9a:	55a3      	strb	r3, [r4, r6]
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018aa2:	b002      	add	sp, #8
 8018aa4:	4770      	bx	lr
 8018aa6:	4604      	mov	r4, r0
 8018aa8:	e7f8      	b.n	8018a9c <rcutils_strndup+0x28>
 8018aaa:	bf00      	nop

08018aac <rmw_get_zero_initialized_context>:
 8018aac:	b510      	push	{r4, lr}
 8018aae:	4604      	mov	r4, r0
 8018ab0:	2250      	movs	r2, #80	; 0x50
 8018ab2:	2100      	movs	r1, #0
 8018ab4:	f001 fe4a 	bl	801a74c <memset>
 8018ab8:	4620      	mov	r0, r4
 8018aba:	bd10      	pop	{r4, pc}

08018abc <rmw_validate_namespace_with_size>:
 8018abc:	b340      	cbz	r0, 8018b10 <rmw_validate_namespace_with_size+0x54>
 8018abe:	b5d0      	push	{r4, r6, r7, lr}
 8018ac0:	4614      	mov	r4, r2
 8018ac2:	b0c2      	sub	sp, #264	; 0x108
 8018ac4:	b332      	cbz	r2, 8018b14 <rmw_validate_namespace_with_size+0x58>
 8018ac6:	2901      	cmp	r1, #1
 8018ac8:	460f      	mov	r7, r1
 8018aca:	461e      	mov	r6, r3
 8018acc:	d102      	bne.n	8018ad4 <rmw_validate_namespace_with_size+0x18>
 8018ace:	7803      	ldrb	r3, [r0, #0]
 8018ad0:	2b2f      	cmp	r3, #47	; 0x2f
 8018ad2:	d019      	beq.n	8018b08 <rmw_validate_namespace_with_size+0x4c>
 8018ad4:	4669      	mov	r1, sp
 8018ad6:	aa01      	add	r2, sp, #4
 8018ad8:	f7f7 fd14 	bl	8010504 <rmw_validate_full_topic_name>
 8018adc:	b990      	cbnz	r0, 8018b04 <rmw_validate_namespace_with_size+0x48>
 8018ade:	9b00      	ldr	r3, [sp, #0]
 8018ae0:	b14b      	cbz	r3, 8018af6 <rmw_validate_namespace_with_size+0x3a>
 8018ae2:	2b07      	cmp	r3, #7
 8018ae4:	d007      	beq.n	8018af6 <rmw_validate_namespace_with_size+0x3a>
 8018ae6:	1e5a      	subs	r2, r3, #1
 8018ae8:	2a05      	cmp	r2, #5
 8018aea:	d82b      	bhi.n	8018b44 <rmw_validate_namespace_with_size+0x88>
 8018aec:	e8df f002 	tbb	[pc, r2]
 8018af0:	24211e1b 	.word	0x24211e1b
 8018af4:	1427      	.short	0x1427
 8018af6:	2ff5      	cmp	r7, #245	; 0xf5
 8018af8:	d906      	bls.n	8018b08 <rmw_validate_namespace_with_size+0x4c>
 8018afa:	2307      	movs	r3, #7
 8018afc:	6023      	str	r3, [r4, #0]
 8018afe:	b10e      	cbz	r6, 8018b04 <rmw_validate_namespace_with_size+0x48>
 8018b00:	23f4      	movs	r3, #244	; 0xf4
 8018b02:	6033      	str	r3, [r6, #0]
 8018b04:	b042      	add	sp, #264	; 0x108
 8018b06:	bdd0      	pop	{r4, r6, r7, pc}
 8018b08:	2000      	movs	r0, #0
 8018b0a:	6020      	str	r0, [r4, #0]
 8018b0c:	b042      	add	sp, #264	; 0x108
 8018b0e:	bdd0      	pop	{r4, r6, r7, pc}
 8018b10:	200b      	movs	r0, #11
 8018b12:	4770      	bx	lr
 8018b14:	200b      	movs	r0, #11
 8018b16:	e7f5      	b.n	8018b04 <rmw_validate_namespace_with_size+0x48>
 8018b18:	2306      	movs	r3, #6
 8018b1a:	6023      	str	r3, [r4, #0]
 8018b1c:	2e00      	cmp	r6, #0
 8018b1e:	d0f1      	beq.n	8018b04 <rmw_validate_namespace_with_size+0x48>
 8018b20:	9b01      	ldr	r3, [sp, #4]
 8018b22:	6033      	str	r3, [r6, #0]
 8018b24:	e7ee      	b.n	8018b04 <rmw_validate_namespace_with_size+0x48>
 8018b26:	2301      	movs	r3, #1
 8018b28:	6023      	str	r3, [r4, #0]
 8018b2a:	e7f7      	b.n	8018b1c <rmw_validate_namespace_with_size+0x60>
 8018b2c:	2302      	movs	r3, #2
 8018b2e:	6023      	str	r3, [r4, #0]
 8018b30:	e7f4      	b.n	8018b1c <rmw_validate_namespace_with_size+0x60>
 8018b32:	2303      	movs	r3, #3
 8018b34:	6023      	str	r3, [r4, #0]
 8018b36:	e7f1      	b.n	8018b1c <rmw_validate_namespace_with_size+0x60>
 8018b38:	2304      	movs	r3, #4
 8018b3a:	6023      	str	r3, [r4, #0]
 8018b3c:	e7ee      	b.n	8018b1c <rmw_validate_namespace_with_size+0x60>
 8018b3e:	2305      	movs	r3, #5
 8018b40:	6023      	str	r3, [r4, #0]
 8018b42:	e7eb      	b.n	8018b1c <rmw_validate_namespace_with_size+0x60>
 8018b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018b48:	4a02      	ldr	r2, [pc, #8]	; (8018b54 <rmw_validate_namespace_with_size+0x98>)
 8018b4a:	a802      	add	r0, sp, #8
 8018b4c:	f7ff ff42 	bl	80189d4 <rcutils_snprintf>
 8018b50:	2001      	movs	r0, #1
 8018b52:	e7d7      	b.n	8018b04 <rmw_validate_namespace_with_size+0x48>
 8018b54:	0801d64c 	.word	0x0801d64c

08018b58 <rmw_validate_namespace>:
 8018b58:	b168      	cbz	r0, 8018b76 <rmw_validate_namespace+0x1e>
 8018b5a:	b570      	push	{r4, r5, r6, lr}
 8018b5c:	460d      	mov	r5, r1
 8018b5e:	4616      	mov	r6, r2
 8018b60:	4604      	mov	r4, r0
 8018b62:	f7e7 fb6f 	bl	8000244 <strlen>
 8018b66:	4633      	mov	r3, r6
 8018b68:	4601      	mov	r1, r0
 8018b6a:	462a      	mov	r2, r5
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b72:	f7ff bfa3 	b.w	8018abc <rmw_validate_namespace_with_size>
 8018b76:	200b      	movs	r0, #11
 8018b78:	4770      	bx	lr
 8018b7a:	bf00      	nop

08018b7c <rmw_namespace_validation_result_string>:
 8018b7c:	2807      	cmp	r0, #7
 8018b7e:	bf9a      	itte	ls
 8018b80:	4b02      	ldrls	r3, [pc, #8]	; (8018b8c <rmw_namespace_validation_result_string+0x10>)
 8018b82:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018b86:	4802      	ldrhi	r0, [pc, #8]	; (8018b90 <rmw_namespace_validation_result_string+0x14>)
 8018b88:	4770      	bx	lr
 8018b8a:	bf00      	nop
 8018b8c:	0801d844 	.word	0x0801d844
 8018b90:	0801d69c 	.word	0x0801d69c

08018b94 <rmw_validate_node_name>:
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d03b      	beq.n	8018c10 <rmw_validate_node_name+0x7c>
 8018b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b9c:	460f      	mov	r7, r1
 8018b9e:	2900      	cmp	r1, #0
 8018ba0:	d038      	beq.n	8018c14 <rmw_validate_node_name+0x80>
 8018ba2:	4615      	mov	r5, r2
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	f7e7 fb4d 	bl	8000244 <strlen>
 8018baa:	b1e0      	cbz	r0, 8018be6 <rmw_validate_node_name+0x52>
 8018bac:	1e63      	subs	r3, r4, #1
 8018bae:	eb03 0e00 	add.w	lr, r3, r0
 8018bb2:	f1c4 0c01 	rsb	ip, r4, #1
 8018bb6:	eb0c 0803 	add.w	r8, ip, r3
 8018bba:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8018bbe:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8018bc2:	f026 0220 	bic.w	r2, r6, #32
 8018bc6:	2909      	cmp	r1, #9
 8018bc8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8018bcc:	d913      	bls.n	8018bf6 <rmw_validate_node_name+0x62>
 8018bce:	2a19      	cmp	r2, #25
 8018bd0:	d911      	bls.n	8018bf6 <rmw_validate_node_name+0x62>
 8018bd2:	2e5f      	cmp	r6, #95	; 0x5f
 8018bd4:	d00f      	beq.n	8018bf6 <rmw_validate_node_name+0x62>
 8018bd6:	2302      	movs	r3, #2
 8018bd8:	603b      	str	r3, [r7, #0]
 8018bda:	b10d      	cbz	r5, 8018be0 <rmw_validate_node_name+0x4c>
 8018bdc:	f8c5 8000 	str.w	r8, [r5]
 8018be0:	2000      	movs	r0, #0
 8018be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018be6:	2301      	movs	r3, #1
 8018be8:	603b      	str	r3, [r7, #0]
 8018bea:	2d00      	cmp	r5, #0
 8018bec:	d0f8      	beq.n	8018be0 <rmw_validate_node_name+0x4c>
 8018bee:	2000      	movs	r0, #0
 8018bf0:	6028      	str	r0, [r5, #0]
 8018bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bf6:	4573      	cmp	r3, lr
 8018bf8:	d1dd      	bne.n	8018bb6 <rmw_validate_node_name+0x22>
 8018bfa:	7822      	ldrb	r2, [r4, #0]
 8018bfc:	4b0d      	ldr	r3, [pc, #52]	; (8018c34 <rmw_validate_node_name+0xa0>)
 8018bfe:	5cd3      	ldrb	r3, [r2, r3]
 8018c00:	f013 0304 	ands.w	r3, r3, #4
 8018c04:	d110      	bne.n	8018c28 <rmw_validate_node_name+0x94>
 8018c06:	28ff      	cmp	r0, #255	; 0xff
 8018c08:	d806      	bhi.n	8018c18 <rmw_validate_node_name+0x84>
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	603b      	str	r3, [r7, #0]
 8018c0e:	e7e8      	b.n	8018be2 <rmw_validate_node_name+0x4e>
 8018c10:	200b      	movs	r0, #11
 8018c12:	4770      	bx	lr
 8018c14:	200b      	movs	r0, #11
 8018c16:	e7e4      	b.n	8018be2 <rmw_validate_node_name+0x4e>
 8018c18:	2204      	movs	r2, #4
 8018c1a:	603a      	str	r2, [r7, #0]
 8018c1c:	2d00      	cmp	r5, #0
 8018c1e:	d0df      	beq.n	8018be0 <rmw_validate_node_name+0x4c>
 8018c20:	22fe      	movs	r2, #254	; 0xfe
 8018c22:	4618      	mov	r0, r3
 8018c24:	602a      	str	r2, [r5, #0]
 8018c26:	e7dc      	b.n	8018be2 <rmw_validate_node_name+0x4e>
 8018c28:	2303      	movs	r3, #3
 8018c2a:	603b      	str	r3, [r7, #0]
 8018c2c:	2d00      	cmp	r5, #0
 8018c2e:	d1de      	bne.n	8018bee <rmw_validate_node_name+0x5a>
 8018c30:	e7d6      	b.n	8018be0 <rmw_validate_node_name+0x4c>
 8018c32:	bf00      	nop
 8018c34:	0801d9bb 	.word	0x0801d9bb

08018c38 <rmw_node_name_validation_result_string>:
 8018c38:	2804      	cmp	r0, #4
 8018c3a:	bf9a      	itte	ls
 8018c3c:	4b02      	ldrls	r3, [pc, #8]	; (8018c48 <rmw_node_name_validation_result_string+0x10>)
 8018c3e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018c42:	4802      	ldrhi	r0, [pc, #8]	; (8018c4c <rmw_node_name_validation_result_string+0x14>)
 8018c44:	4770      	bx	lr
 8018c46:	bf00      	nop
 8018c48:	0801d950 	.word	0x0801d950
 8018c4c:	0801d864 	.word	0x0801d864

08018c50 <on_status>:
 8018c50:	b082      	sub	sp, #8
 8018c52:	b002      	add	sp, #8
 8018c54:	4770      	bx	lr
 8018c56:	bf00      	nop

08018c58 <on_topic>:
 8018c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c5c:	4a21      	ldr	r2, [pc, #132]	; (8018ce4 <on_topic+0x8c>)
 8018c5e:	b094      	sub	sp, #80	; 0x50
 8018c60:	6812      	ldr	r2, [r2, #0]
 8018c62:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018c64:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8018c68:	9113      	str	r1, [sp, #76]	; 0x4c
 8018c6a:	9312      	str	r3, [sp, #72]	; 0x48
 8018c6c:	b3ba      	cbz	r2, 8018cde <on_topic+0x86>
 8018c6e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8018c72:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8018c76:	e001      	b.n	8018c7c <on_topic+0x24>
 8018c78:	6892      	ldr	r2, [r2, #8]
 8018c7a:	b382      	cbz	r2, 8018cde <on_topic+0x86>
 8018c7c:	68d4      	ldr	r4, [r2, #12]
 8018c7e:	8aa3      	ldrh	r3, [r4, #20]
 8018c80:	428b      	cmp	r3, r1
 8018c82:	d1f9      	bne.n	8018c78 <on_topic+0x20>
 8018c84:	7da3      	ldrb	r3, [r4, #22]
 8018c86:	4283      	cmp	r3, r0
 8018c88:	d1f6      	bne.n	8018c78 <on_topic+0x20>
 8018c8a:	2248      	movs	r2, #72	; 0x48
 8018c8c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8018c90:	4668      	mov	r0, sp
 8018c92:	f001 fd33 	bl	801a6fc <memcpy>
 8018c96:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	f7f8 fd6a 	bl	8011774 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018ca0:	4607      	mov	r7, r0
 8018ca2:	b1e0      	cbz	r0, 8018cde <on_topic+0x86>
 8018ca4:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8018ca8:	462a      	mov	r2, r5
 8018caa:	4630      	mov	r0, r6
 8018cac:	f108 0110 	add.w	r1, r8, #16
 8018cb0:	f7f9 fdf4 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8018cb4:	b930      	cbnz	r0, 8018cc4 <on_topic+0x6c>
 8018cb6:	4639      	mov	r1, r7
 8018cb8:	480b      	ldr	r0, [pc, #44]	; (8018ce8 <on_topic+0x90>)
 8018cba:	b014      	add	sp, #80	; 0x50
 8018cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc0:	f000 b8be 	b.w	8018e40 <put_memory>
 8018cc4:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8018cc8:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8018ccc:	f7f8 fb84 	bl	80113d8 <rmw_uros_epoch_nanos>
 8018cd0:	2305      	movs	r3, #5
 8018cd2:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8018cd6:	e9c2 0100 	strd	r0, r1, [r2]
 8018cda:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8018cde:	b014      	add	sp, #80	; 0x50
 8018ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ce4:	2000c924 	.word	0x2000c924
 8018ce8:	200096b8 	.word	0x200096b8

08018cec <on_request>:
 8018cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cf0:	4823      	ldr	r0, [pc, #140]	; (8018d80 <on_request+0x94>)
 8018cf2:	b095      	sub	sp, #84	; 0x54
 8018cf4:	6800      	ldr	r0, [r0, #0]
 8018cf6:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018cfa:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8018cfe:	9113      	str	r1, [sp, #76]	; 0x4c
 8018d00:	2800      	cmp	r0, #0
 8018d02:	d039      	beq.n	8018d78 <on_request+0x8c>
 8018d04:	461d      	mov	r5, r3
 8018d06:	e001      	b.n	8018d0c <on_request+0x20>
 8018d08:	6880      	ldr	r0, [r0, #8]
 8018d0a:	b3a8      	cbz	r0, 8018d78 <on_request+0x8c>
 8018d0c:	68c4      	ldr	r4, [r0, #12]
 8018d0e:	8b21      	ldrh	r1, [r4, #24]
 8018d10:	4291      	cmp	r1, r2
 8018d12:	d1f9      	bne.n	8018d08 <on_request+0x1c>
 8018d14:	2248      	movs	r2, #72	; 0x48
 8018d16:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018d1a:	4668      	mov	r0, sp
 8018d1c:	f001 fcee 	bl	801a6fc <memcpy>
 8018d20:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8018d24:	4620      	mov	r0, r4
 8018d26:	f7f8 fd25 	bl	8011774 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018d2a:	4606      	mov	r6, r0
 8018d2c:	b320      	cbz	r0, 8018d78 <on_request+0x8c>
 8018d2e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8018d32:	463a      	mov	r2, r7
 8018d34:	4640      	mov	r0, r8
 8018d36:	f109 0110 	add.w	r1, r9, #16
 8018d3a:	f7f9 fdaf 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8018d3e:	b930      	cbnz	r0, 8018d4e <on_request+0x62>
 8018d40:	4631      	mov	r1, r6
 8018d42:	4810      	ldr	r0, [pc, #64]	; (8018d84 <on_request+0x98>)
 8018d44:	b015      	add	sp, #84	; 0x54
 8018d46:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d4a:	f000 b879 	b.w	8018e40 <put_memory>
 8018d4e:	f609 0628 	addw	r6, r9, #2088	; 0x828
 8018d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d54:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8018d58:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 8018d5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018d5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018d62:	e886 0003 	stmia.w	r6, {r0, r1}
 8018d66:	f7f8 fb37 	bl	80113d8 <rmw_uros_epoch_nanos>
 8018d6a:	2303      	movs	r3, #3
 8018d6c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8018d70:	e9c2 0100 	strd	r0, r1, [r2]
 8018d74:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8018d78:	b015      	add	sp, #84	; 0x54
 8018d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d7e:	bf00      	nop
 8018d80:	2000c914 	.word	0x2000c914
 8018d84:	200096b8 	.word	0x200096b8

08018d88 <on_reply>:
 8018d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d8c:	4822      	ldr	r0, [pc, #136]	; (8018e18 <on_reply+0x90>)
 8018d8e:	b095      	sub	sp, #84	; 0x54
 8018d90:	6800      	ldr	r0, [r0, #0]
 8018d92:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8018d96:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8018d9a:	9113      	str	r1, [sp, #76]	; 0x4c
 8018d9c:	2800      	cmp	r0, #0
 8018d9e:	d037      	beq.n	8018e10 <on_reply+0x88>
 8018da0:	461d      	mov	r5, r3
 8018da2:	e001      	b.n	8018da8 <on_reply+0x20>
 8018da4:	6880      	ldr	r0, [r0, #8]
 8018da6:	b398      	cbz	r0, 8018e10 <on_reply+0x88>
 8018da8:	68c4      	ldr	r4, [r0, #12]
 8018daa:	8b21      	ldrh	r1, [r4, #24]
 8018dac:	4291      	cmp	r1, r2
 8018dae:	d1f9      	bne.n	8018da4 <on_reply+0x1c>
 8018db0:	2248      	movs	r2, #72	; 0x48
 8018db2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018db6:	4668      	mov	r0, sp
 8018db8:	f001 fca0 	bl	801a6fc <memcpy>
 8018dbc:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	f7f8 fcd7 	bl	8011774 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018dc6:	4606      	mov	r6, r0
 8018dc8:	b310      	cbz	r0, 8018e10 <on_reply+0x88>
 8018dca:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8018dce:	463a      	mov	r2, r7
 8018dd0:	4640      	mov	r0, r8
 8018dd2:	f109 0110 	add.w	r1, r9, #16
 8018dd6:	f7f9 fd61 	bl	801289c <ucdr_deserialize_array_uint8_t>
 8018dda:	b930      	cbnz	r0, 8018dea <on_reply+0x62>
 8018ddc:	4631      	mov	r1, r6
 8018dde:	480f      	ldr	r0, [pc, #60]	; (8018e1c <on_reply+0x94>)
 8018de0:	b015      	add	sp, #84	; 0x54
 8018de2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018de6:	f000 b82b 	b.w	8018e40 <put_memory>
 8018dea:	2300      	movs	r3, #0
 8018dec:	b2aa      	uxth	r2, r5
 8018dee:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8018df2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8018df6:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 8018dfa:	e9c1 2300 	strd	r2, r3, [r1]
 8018dfe:	f7f8 faeb 	bl	80113d8 <rmw_uros_epoch_nanos>
 8018e02:	2304      	movs	r3, #4
 8018e04:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8018e08:	e9c2 0100 	strd	r0, r1, [r2]
 8018e0c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8018e10:	b015      	add	sp, #84	; 0x54
 8018e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e16:	bf00      	nop
 8018e18:	20009f48 	.word	0x20009f48
 8018e1c:	200096b8 	.word	0x200096b8

08018e20 <get_memory>:
 8018e20:	4603      	mov	r3, r0
 8018e22:	6840      	ldr	r0, [r0, #4]
 8018e24:	b158      	cbz	r0, 8018e3e <get_memory+0x1e>
 8018e26:	6882      	ldr	r2, [r0, #8]
 8018e28:	605a      	str	r2, [r3, #4]
 8018e2a:	b10a      	cbz	r2, 8018e30 <get_memory+0x10>
 8018e2c:	2100      	movs	r1, #0
 8018e2e:	6051      	str	r1, [r2, #4]
 8018e30:	681a      	ldr	r2, [r3, #0]
 8018e32:	6082      	str	r2, [r0, #8]
 8018e34:	b102      	cbz	r2, 8018e38 <get_memory+0x18>
 8018e36:	6050      	str	r0, [r2, #4]
 8018e38:	2200      	movs	r2, #0
 8018e3a:	6042      	str	r2, [r0, #4]
 8018e3c:	6018      	str	r0, [r3, #0]
 8018e3e:	4770      	bx	lr

08018e40 <put_memory>:
 8018e40:	684b      	ldr	r3, [r1, #4]
 8018e42:	b10b      	cbz	r3, 8018e48 <put_memory+0x8>
 8018e44:	688a      	ldr	r2, [r1, #8]
 8018e46:	609a      	str	r2, [r3, #8]
 8018e48:	688a      	ldr	r2, [r1, #8]
 8018e4a:	b102      	cbz	r2, 8018e4e <put_memory+0xe>
 8018e4c:	6053      	str	r3, [r2, #4]
 8018e4e:	6803      	ldr	r3, [r0, #0]
 8018e50:	428b      	cmp	r3, r1
 8018e52:	6843      	ldr	r3, [r0, #4]
 8018e54:	bf08      	it	eq
 8018e56:	6002      	streq	r2, [r0, #0]
 8018e58:	608b      	str	r3, [r1, #8]
 8018e5a:	b103      	cbz	r3, 8018e5e <put_memory+0x1e>
 8018e5c:	6059      	str	r1, [r3, #4]
 8018e5e:	2300      	movs	r3, #0
 8018e60:	604b      	str	r3, [r1, #4]
 8018e62:	6041      	str	r1, [r0, #4]
 8018e64:	4770      	bx	lr
 8018e66:	bf00      	nop

08018e68 <rmw_destroy_client>:
 8018e68:	b570      	push	{r4, r5, r6, lr}
 8018e6a:	b128      	cbz	r0, 8018e78 <rmw_destroy_client+0x10>
 8018e6c:	4604      	mov	r4, r0
 8018e6e:	6800      	ldr	r0, [r0, #0]
 8018e70:	460d      	mov	r5, r1
 8018e72:	f7f8 fdf1 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8018e76:	b910      	cbnz	r0, 8018e7e <rmw_destroy_client+0x16>
 8018e78:	2401      	movs	r4, #1
 8018e7a:	4620      	mov	r0, r4
 8018e7c:	bd70      	pop	{r4, r5, r6, pc}
 8018e7e:	6863      	ldr	r3, [r4, #4]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d0f9      	beq.n	8018e78 <rmw_destroy_client+0x10>
 8018e84:	2d00      	cmp	r5, #0
 8018e86:	d0f7      	beq.n	8018e78 <rmw_destroy_client+0x10>
 8018e88:	6828      	ldr	r0, [r5, #0]
 8018e8a:	f7f8 fde5 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 8018e8e:	2800      	cmp	r0, #0
 8018e90:	d0f2      	beq.n	8018e78 <rmw_destroy_client+0x10>
 8018e92:	686e      	ldr	r6, [r5, #4]
 8018e94:	2e00      	cmp	r6, #0
 8018e96:	d0ef      	beq.n	8018e78 <rmw_destroy_client+0x10>
 8018e98:	6864      	ldr	r4, [r4, #4]
 8018e9a:	6932      	ldr	r2, [r6, #16]
 8018e9c:	6920      	ldr	r0, [r4, #16]
 8018e9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018ea2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018ea6:	6819      	ldr	r1, [r3, #0]
 8018ea8:	f7fa fb4c 	bl	8013544 <uxr_buffer_cancel_data>
 8018eac:	4602      	mov	r2, r0
 8018eae:	6920      	ldr	r0, [r4, #16]
 8018eb0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018eb4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018eb8:	f7f8 fd4a 	bl	8011950 <run_xrce_session>
 8018ebc:	6920      	ldr	r0, [r4, #16]
 8018ebe:	6932      	ldr	r2, [r6, #16]
 8018ec0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018ec4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018ec8:	6819      	ldr	r1, [r3, #0]
 8018eca:	f7f9 fffd 	bl	8012ec8 <uxr_buffer_delete_entity>
 8018ece:	4602      	mov	r2, r0
 8018ed0:	6920      	ldr	r0, [r4, #16]
 8018ed2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018ed6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018eda:	f7f8 fd39 	bl	8011950 <run_xrce_session>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	4628      	mov	r0, r5
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	bf14      	ite	ne
 8018ee6:	2400      	movne	r4, #0
 8018ee8:	2402      	moveq	r4, #2
 8018eea:	f7f8 fc21 	bl	8011730 <rmw_uxrce_fini_client_memory>
 8018eee:	e7c4      	b.n	8018e7a <rmw_destroy_client+0x12>

08018ef0 <rmw_get_implementation_identifier>:
 8018ef0:	4b01      	ldr	r3, [pc, #4]	; (8018ef8 <rmw_get_implementation_identifier+0x8>)
 8018ef2:	6818      	ldr	r0, [r3, #0]
 8018ef4:	4770      	bx	lr
 8018ef6:	bf00      	nop
 8018ef8:	0801d97c 	.word	0x0801d97c

08018efc <create_topic>:
 8018efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f00:	4605      	mov	r5, r0
 8018f02:	b085      	sub	sp, #20
 8018f04:	4821      	ldr	r0, [pc, #132]	; (8018f8c <create_topic+0x90>)
 8018f06:	460f      	mov	r7, r1
 8018f08:	4616      	mov	r6, r2
 8018f0a:	f7ff ff89 	bl	8018e20 <get_memory>
 8018f0e:	4604      	mov	r4, r0
 8018f10:	b390      	cbz	r0, 8018f78 <create_topic+0x7c>
 8018f12:	f241 5396 	movw	r3, #5526	; 0x1596
 8018f16:	692a      	ldr	r2, [r5, #16]
 8018f18:	68c4      	ldr	r4, [r0, #12]
 8018f1a:	5ad0      	ldrh	r0, [r2, r3]
 8018f1c:	61a5      	str	r5, [r4, #24]
 8018f1e:	1c41      	adds	r1, r0, #1
 8018f20:	6166      	str	r6, [r4, #20]
 8018f22:	52d1      	strh	r1, [r2, r3]
 8018f24:	2102      	movs	r1, #2
 8018f26:	f7fa faa5 	bl	8013474 <uxr_object_id>
 8018f2a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8018f90 <create_topic+0x94>
 8018f2e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8018f94 <create_topic+0x98>
 8018f32:	4641      	mov	r1, r8
 8018f34:	223c      	movs	r2, #60	; 0x3c
 8018f36:	6120      	str	r0, [r4, #16]
 8018f38:	4638      	mov	r0, r7
 8018f3a:	f7f8 fd77 	bl	8011a2c <generate_topic_name>
 8018f3e:	4649      	mov	r1, r9
 8018f40:	2264      	movs	r2, #100	; 0x64
 8018f42:	4630      	mov	r0, r6
 8018f44:	f7f8 fd38 	bl	80119b8 <generate_type_name>
 8018f48:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8018f4c:	2106      	movs	r1, #6
 8018f4e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8018f52:	e9cd 8900 	strd	r8, r9, [sp]
 8018f56:	9102      	str	r1, [sp, #8]
 8018f58:	6811      	ldr	r1, [r2, #0]
 8018f5a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018f5e:	6922      	ldr	r2, [r4, #16]
 8018f60:	f7fa f838 	bl	8012fd4 <uxr_buffer_create_topic_bin>
 8018f64:	4602      	mov	r2, r0
 8018f66:	6928      	ldr	r0, [r5, #16]
 8018f68:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018f6c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018f70:	f7f8 fcee 	bl	8011950 <run_xrce_session>
 8018f74:	4605      	mov	r5, r0
 8018f76:	b118      	cbz	r0, 8018f80 <create_topic+0x84>
 8018f78:	4620      	mov	r0, r4
 8018f7a:	b005      	add	sp, #20
 8018f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f80:	4620      	mov	r0, r4
 8018f82:	f7f8 fbeb 	bl	801175c <rmw_uxrce_fini_topic_memory>
 8018f86:	462c      	mov	r4, r5
 8018f88:	e7f6      	b.n	8018f78 <create_topic+0x7c>
 8018f8a:	bf00      	nop
 8018f8c:	2000c850 	.word	0x2000c850
 8018f90:	200068a8 	.word	0x200068a8
 8018f94:	200068e4 	.word	0x200068e4

08018f98 <destroy_topic>:
 8018f98:	b538      	push	{r3, r4, r5, lr}
 8018f9a:	6985      	ldr	r5, [r0, #24]
 8018f9c:	b1dd      	cbz	r5, 8018fd6 <destroy_topic+0x3e>
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	6928      	ldr	r0, [r5, #16]
 8018fa2:	6922      	ldr	r2, [r4, #16]
 8018fa4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018fa8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018fac:	6819      	ldr	r1, [r3, #0]
 8018fae:	f7f9 ff8b 	bl	8012ec8 <uxr_buffer_delete_entity>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	6928      	ldr	r0, [r5, #16]
 8018fb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018fba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018fbe:	f7f8 fcc7 	bl	8011950 <run_xrce_session>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	bf14      	ite	ne
 8018fca:	2400      	movne	r4, #0
 8018fcc:	2402      	moveq	r4, #2
 8018fce:	f7f8 fbc5 	bl	801175c <rmw_uxrce_fini_topic_memory>
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	bd38      	pop	{r3, r4, r5, pc}
 8018fd6:	2401      	movs	r4, #1
 8018fd8:	4620      	mov	r0, r4
 8018fda:	bd38      	pop	{r3, r4, r5, pc}

08018fdc <rmw_take_request>:
 8018fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fe0:	4605      	mov	r5, r0
 8018fe2:	6800      	ldr	r0, [r0, #0]
 8018fe4:	460c      	mov	r4, r1
 8018fe6:	4690      	mov	r8, r2
 8018fe8:	461e      	mov	r6, r3
 8018fea:	b089      	sub	sp, #36	; 0x24
 8018fec:	b128      	cbz	r0, 8018ffa <rmw_take_request+0x1e>
 8018fee:	4b28      	ldr	r3, [pc, #160]	; (8019090 <rmw_take_request+0xb4>)
 8018ff0:	6819      	ldr	r1, [r3, #0]
 8018ff2:	f7e7 f91d 	bl	8000230 <strcmp>
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	d146      	bne.n	8019088 <rmw_take_request+0xac>
 8018ffa:	b10e      	cbz	r6, 8019000 <rmw_take_request+0x24>
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	7033      	strb	r3, [r6, #0]
 8019000:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8019004:	f7f8 fc2c 	bl	8011860 <rmw_uxrce_clean_expired_static_input_buffer>
 8019008:	4648      	mov	r0, r9
 801900a:	f7f8 fbff 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 801900e:	4607      	mov	r7, r0
 8019010:	b3b0      	cbz	r0, 8019080 <rmw_take_request+0xa4>
 8019012:	68c5      	ldr	r5, [r0, #12]
 8019014:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8019018:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 801901c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8019020:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8019024:	7423      	strb	r3, [r4, #16]
 8019026:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801902a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801902e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8019032:	74e3      	strb	r3, [r4, #19]
 8019034:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8019038:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801903c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8019040:	6161      	str	r1, [r4, #20]
 8019042:	61a2      	str	r2, [r4, #24]
 8019044:	61e3      	str	r3, [r4, #28]
 8019046:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801904a:	689b      	ldr	r3, [r3, #8]
 801904c:	4798      	blx	r3
 801904e:	6844      	ldr	r4, [r0, #4]
 8019050:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8019054:	4668      	mov	r0, sp
 8019056:	f105 0110 	add.w	r1, r5, #16
 801905a:	f7f5 fdad 	bl	800ebb8 <ucdr_init_buffer>
 801905e:	4641      	mov	r1, r8
 8019060:	68e3      	ldr	r3, [r4, #12]
 8019062:	4668      	mov	r0, sp
 8019064:	4798      	blx	r3
 8019066:	4639      	mov	r1, r7
 8019068:	4604      	mov	r4, r0
 801906a:	480a      	ldr	r0, [pc, #40]	; (8019094 <rmw_take_request+0xb8>)
 801906c:	f7ff fee8 	bl	8018e40 <put_memory>
 8019070:	b106      	cbz	r6, 8019074 <rmw_take_request+0x98>
 8019072:	7034      	strb	r4, [r6, #0]
 8019074:	f084 0001 	eor.w	r0, r4, #1
 8019078:	b2c0      	uxtb	r0, r0
 801907a:	b009      	add	sp, #36	; 0x24
 801907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019080:	2001      	movs	r0, #1
 8019082:	b009      	add	sp, #36	; 0x24
 8019084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019088:	200c      	movs	r0, #12
 801908a:	b009      	add	sp, #36	; 0x24
 801908c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019090:	0801d97c 	.word	0x0801d97c
 8019094:	200096b8 	.word	0x200096b8

08019098 <rmw_send_response>:
 8019098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801909a:	4605      	mov	r5, r0
 801909c:	6800      	ldr	r0, [r0, #0]
 801909e:	460c      	mov	r4, r1
 80190a0:	4617      	mov	r7, r2
 80190a2:	b091      	sub	sp, #68	; 0x44
 80190a4:	b128      	cbz	r0, 80190b2 <rmw_send_response+0x1a>
 80190a6:	4b2a      	ldr	r3, [pc, #168]	; (8019150 <rmw_send_response+0xb8>)
 80190a8:	6819      	ldr	r1, [r3, #0]
 80190aa:	f7e7 f8c1 	bl	8000230 <strcmp>
 80190ae:	2800      	cmp	r0, #0
 80190b0:	d143      	bne.n	801913a <rmw_send_response+0xa2>
 80190b2:	4621      	mov	r1, r4
 80190b4:	4622      	mov	r2, r4
 80190b6:	f831 ef01 	ldrh.w	lr, [r1, #1]!
 80190ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80190be:	f891 c002 	ldrb.w	ip, [r1, #2]
 80190c2:	686d      	ldr	r5, [r5, #4]
 80190c4:	6851      	ldr	r1, [r2, #4]
 80190c6:	6966      	ldr	r6, [r4, #20]
 80190c8:	f88d c016 	strb.w	ip, [sp, #22]
 80190cc:	6892      	ldr	r2, [r2, #8]
 80190ce:	f894 c000 	ldrb.w	ip, [r4]
 80190d2:	ab02      	add	r3, sp, #8
 80190d4:	f8ad e014 	strh.w	lr, [sp, #20]
 80190d8:	f88d c017 	strb.w	ip, [sp, #23]
 80190dc:	9606      	str	r6, [sp, #24]
 80190de:	c307      	stmia	r3!, {r0, r1, r2}
 80190e0:	6922      	ldr	r2, [r4, #16]
 80190e2:	696b      	ldr	r3, [r5, #20]
 80190e4:	9207      	str	r2, [sp, #28]
 80190e6:	68db      	ldr	r3, [r3, #12]
 80190e8:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80190ea:	4798      	blx	r3
 80190ec:	6844      	ldr	r4, [r0, #4]
 80190ee:	4638      	mov	r0, r7
 80190f0:	6923      	ldr	r3, [r4, #16]
 80190f2:	4798      	blx	r3
 80190f4:	6932      	ldr	r2, [r6, #16]
 80190f6:	3018      	adds	r0, #24
 80190f8:	9000      	str	r0, [sp, #0]
 80190fa:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80190fc:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8019100:	ab08      	add	r3, sp, #32
 8019102:	692a      	ldr	r2, [r5, #16]
 8019104:	f7fc f91c 	bl	8015340 <uxr_prepare_output_stream>
 8019108:	b910      	cbnz	r0, 8019110 <rmw_send_response+0x78>
 801910a:	2001      	movs	r0, #1
 801910c:	b011      	add	sp, #68	; 0x44
 801910e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019110:	a902      	add	r1, sp, #8
 8019112:	a808      	add	r0, sp, #32
 8019114:	f7fd f88a 	bl	801622c <uxr_serialize_SampleIdentity>
 8019118:	68a3      	ldr	r3, [r4, #8]
 801911a:	4638      	mov	r0, r7
 801911c:	a908      	add	r1, sp, #32
 801911e:	4798      	blx	r3
 8019120:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8019124:	6930      	ldr	r0, [r6, #16]
 8019126:	2b01      	cmp	r3, #1
 8019128:	d00a      	beq.n	8019140 <rmw_send_response+0xa8>
 801912a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801912c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019130:	f7fb f876 	bl	8014220 <uxr_run_session_until_confirm_delivery>
 8019134:	2000      	movs	r0, #0
 8019136:	b011      	add	sp, #68	; 0x44
 8019138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801913a:	200c      	movs	r0, #12
 801913c:	b011      	add	sp, #68	; 0x44
 801913e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019140:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019144:	f7fa ffda 	bl	80140fc <uxr_flash_output_streams>
 8019148:	2000      	movs	r0, #0
 801914a:	b011      	add	sp, #68	; 0x44
 801914c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801914e:	bf00      	nop
 8019150:	0801d97c 	.word	0x0801d97c

08019154 <rmw_take_response>:
 8019154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019158:	4604      	mov	r4, r0
 801915a:	6800      	ldr	r0, [r0, #0]
 801915c:	4688      	mov	r8, r1
 801915e:	4617      	mov	r7, r2
 8019160:	461d      	mov	r5, r3
 8019162:	b089      	sub	sp, #36	; 0x24
 8019164:	b120      	cbz	r0, 8019170 <rmw_take_response+0x1c>
 8019166:	4b1f      	ldr	r3, [pc, #124]	; (80191e4 <rmw_take_response+0x90>)
 8019168:	6819      	ldr	r1, [r3, #0]
 801916a:	f7e7 f861 	bl	8000230 <strcmp>
 801916e:	bb88      	cbnz	r0, 80191d4 <rmw_take_response+0x80>
 8019170:	b10d      	cbz	r5, 8019176 <rmw_take_response+0x22>
 8019172:	2300      	movs	r3, #0
 8019174:	702b      	strb	r3, [r5, #0]
 8019176:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801917a:	f7f8 fb71 	bl	8011860 <rmw_uxrce_clean_expired_static_input_buffer>
 801917e:	4648      	mov	r0, r9
 8019180:	f7f8 fb44 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 8019184:	4606      	mov	r6, r0
 8019186:	b348      	cbz	r0, 80191dc <rmw_take_response+0x88>
 8019188:	68c4      	ldr	r4, [r0, #12]
 801918a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801918e:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8019192:	68d1      	ldr	r1, [r2, #12]
 8019194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019198:	e9c8 2308 	strd	r2, r3, [r8, #32]
 801919c:	4788      	blx	r1
 801919e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80191a2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80191a6:	f104 0110 	add.w	r1, r4, #16
 80191aa:	4668      	mov	r0, sp
 80191ac:	f7f5 fd04 	bl	800ebb8 <ucdr_init_buffer>
 80191b0:	4639      	mov	r1, r7
 80191b2:	4668      	mov	r0, sp
 80191b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80191b8:	4798      	blx	r3
 80191ba:	4631      	mov	r1, r6
 80191bc:	4604      	mov	r4, r0
 80191be:	480a      	ldr	r0, [pc, #40]	; (80191e8 <rmw_take_response+0x94>)
 80191c0:	f7ff fe3e 	bl	8018e40 <put_memory>
 80191c4:	b105      	cbz	r5, 80191c8 <rmw_take_response+0x74>
 80191c6:	702c      	strb	r4, [r5, #0]
 80191c8:	f084 0001 	eor.w	r0, r4, #1
 80191cc:	b2c0      	uxtb	r0, r0
 80191ce:	b009      	add	sp, #36	; 0x24
 80191d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191d4:	200c      	movs	r0, #12
 80191d6:	b009      	add	sp, #36	; 0x24
 80191d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191dc:	2001      	movs	r0, #1
 80191de:	b009      	add	sp, #36	; 0x24
 80191e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80191e4:	0801d97c 	.word	0x0801d97c
 80191e8:	200096b8 	.word	0x200096b8

080191ec <rmw_wait>:
 80191ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191f0:	4698      	mov	r8, r3
 80191f2:	4607      	mov	r7, r0
 80191f4:	460e      	mov	r6, r1
 80191f6:	4691      	mov	r9, r2
 80191f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191fa:	2a00      	cmp	r2, #0
 80191fc:	f000 8123 	beq.w	8019446 <rmw_wait+0x25a>
 8019200:	2b00      	cmp	r3, #0
 8019202:	f000 812c 	beq.w	801945e <rmw_wait+0x272>
 8019206:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920e:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8019212:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8019216:	ebbb 0b02 	subs.w	fp, fp, r2
 801921a:	ea4a 6ad2 	orr.w	sl, sl, r2, lsr #27
 801921e:	eb6a 0a03 	sbc.w	sl, sl, r3
 8019222:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
 8019226:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 801922a:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 801922e:	eb1c 0b02 	adds.w	fp, ip, r2
 8019232:	eb4a 0a03 	adc.w	sl, sl, r3
 8019236:	4aab      	ldr	r2, [pc, #684]	; (80194e4 <rmw_wait+0x2f8>)
 8019238:	2300      	movs	r3, #0
 801923a:	f7e8 f859 	bl	80012f0 <__aeabi_uldivmod>
 801923e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8019242:	2300      	movs	r3, #0
 8019244:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8019248:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 801924c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8019250:	eb1b 0400 	adds.w	r4, fp, r0
 8019254:	eb4a 0501 	adc.w	r5, sl, r1
 8019258:	42a2      	cmp	r2, r4
 801925a:	eb73 0105 	sbcs.w	r1, r3, r5
 801925e:	f2c0 80f0 	blt.w	8019442 <rmw_wait+0x256>
 8019262:	f7f8 fafd 	bl	8011860 <rmw_uxrce_clean_expired_static_input_buffer>
 8019266:	4ba0      	ldr	r3, [pc, #640]	; (80194e8 <rmw_wait+0x2fc>)
 8019268:	681d      	ldr	r5, [r3, #0]
 801926a:	b145      	cbz	r5, 801927e <rmw_wait+0x92>
 801926c:	462b      	mov	r3, r5
 801926e:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8019272:	2100      	movs	r1, #0
 8019274:	68da      	ldr	r2, [r3, #12]
 8019276:	689b      	ldr	r3, [r3, #8]
 8019278:	5411      	strb	r1, [r2, r0]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d1fa      	bne.n	8019274 <rmw_wait+0x88>
 801927e:	f1b9 0f00 	cmp.w	r9, #0
 8019282:	d012      	beq.n	80192aa <rmw_wait+0xbe>
 8019284:	f8d9 1000 	ldr.w	r1, [r9]
 8019288:	b179      	cbz	r1, 80192aa <rmw_wait+0xbe>
 801928a:	2300      	movs	r3, #0
 801928c:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8019290:	f04f 0c01 	mov.w	ip, #1
 8019294:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8019298:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801929c:	3301      	adds	r3, #1
 801929e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80192a0:	4299      	cmp	r1, r3
 80192a2:	6912      	ldr	r2, [r2, #16]
 80192a4:	f802 c00e 	strb.w	ip, [r2, lr]
 80192a8:	d1f6      	bne.n	8019298 <rmw_wait+0xac>
 80192aa:	f1b8 0f00 	cmp.w	r8, #0
 80192ae:	d012      	beq.n	80192d6 <rmw_wait+0xea>
 80192b0:	f8d8 1000 	ldr.w	r1, [r8]
 80192b4:	b179      	cbz	r1, 80192d6 <rmw_wait+0xea>
 80192b6:	2300      	movs	r3, #0
 80192b8:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 80192bc:	f04f 0c01 	mov.w	ip, #1
 80192c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80192c4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80192c8:	3301      	adds	r3, #1
 80192ca:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80192cc:	4299      	cmp	r1, r3
 80192ce:	6912      	ldr	r2, [r2, #16]
 80192d0:	f802 c00e 	strb.w	ip, [r2, lr]
 80192d4:	d1f6      	bne.n	80192c4 <rmw_wait+0xd8>
 80192d6:	b187      	cbz	r7, 80192fa <rmw_wait+0x10e>
 80192d8:	6839      	ldr	r1, [r7, #0]
 80192da:	b171      	cbz	r1, 80192fa <rmw_wait+0x10e>
 80192dc:	2300      	movs	r3, #0
 80192de:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 80192e2:	f04f 0c01 	mov.w	ip, #1
 80192e6:	6878      	ldr	r0, [r7, #4]
 80192e8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80192ec:	3301      	adds	r3, #1
 80192ee:	6a12      	ldr	r2, [r2, #32]
 80192f0:	4299      	cmp	r1, r3
 80192f2:	6912      	ldr	r2, [r2, #16]
 80192f4:	f802 c00e 	strb.w	ip, [r2, lr]
 80192f8:	d1f6      	bne.n	80192e8 <rmw_wait+0xfc>
 80192fa:	b355      	cbz	r5, 8019352 <rmw_wait+0x166>
 80192fc:	462b      	mov	r3, r5
 80192fe:	f04f 0a00 	mov.w	sl, #0
 8019302:	f241 51a4 	movw	r1, #5540	; 0x15a4
 8019306:	68da      	ldr	r2, [r3, #12]
 8019308:	689b      	ldr	r3, [r3, #8]
 801930a:	5c50      	ldrb	r0, [r2, r1]
 801930c:	4450      	add	r0, sl
 801930e:	fa5f fa80 	uxtb.w	sl, r0
 8019312:	2b00      	cmp	r3, #0
 8019314:	d1f7      	bne.n	8019306 <rmw_wait+0x11a>
 8019316:	f1ba 0f00 	cmp.w	sl, #0
 801931a:	d01a      	beq.n	8019352 <rmw_wait+0x166>
 801931c:	1c63      	adds	r3, r4, #1
 801931e:	d00d      	beq.n	801933c <rmw_wait+0x150>
 8019320:	4620      	mov	r0, r4
 8019322:	f7e7 fd55 	bl	8000dd0 <__aeabi_i2f>
 8019326:	4604      	mov	r4, r0
 8019328:	4650      	mov	r0, sl
 801932a:	f7e7 fd4d 	bl	8000dc8 <__aeabi_ui2f>
 801932e:	4601      	mov	r1, r0
 8019330:	4620      	mov	r0, r4
 8019332:	f7e7 fe55 	bl	8000fe0 <__aeabi_fdiv>
 8019336:	f7e7 ff65 	bl	8001204 <__aeabi_f2iz>
 801933a:	4604      	mov	r4, r0
 801933c:	f241 5aa4 	movw	sl, #5540	; 0x15a4
 8019340:	68e8      	ldr	r0, [r5, #12]
 8019342:	f810 300a 	ldrb.w	r3, [r0, sl]
 8019346:	2b00      	cmp	r3, #0
 8019348:	f040 808c 	bne.w	8019464 <rmw_wait+0x278>
 801934c:	68ad      	ldr	r5, [r5, #8]
 801934e:	2d00      	cmp	r5, #0
 8019350:	d1f6      	bne.n	8019340 <rmw_wait+0x154>
 8019352:	f1b9 0f00 	cmp.w	r9, #0
 8019356:	f000 80a3 	beq.w	80194a0 <rmw_wait+0x2b4>
 801935a:	f8d9 5000 	ldr.w	r5, [r9]
 801935e:	2d00      	cmp	r5, #0
 8019360:	f000 808a 	beq.w	8019478 <rmw_wait+0x28c>
 8019364:	2400      	movs	r4, #0
 8019366:	4625      	mov	r5, r4
 8019368:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801936c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019370:	f7f8 fa4c 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 8019374:	2800      	cmp	r0, #0
 8019376:	d054      	beq.n	8019422 <rmw_wait+0x236>
 8019378:	f8d9 3000 	ldr.w	r3, [r9]
 801937c:	3401      	adds	r4, #1
 801937e:	42a3      	cmp	r3, r4
 8019380:	f04f 0501 	mov.w	r5, #1
 8019384:	d8f0      	bhi.n	8019368 <rmw_wait+0x17c>
 8019386:	f1b8 0f00 	cmp.w	r8, #0
 801938a:	d012      	beq.n	80193b2 <rmw_wait+0x1c6>
 801938c:	f8d8 3000 	ldr.w	r3, [r8]
 8019390:	b17b      	cbz	r3, 80193b2 <rmw_wait+0x1c6>
 8019392:	2400      	movs	r4, #0
 8019394:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019398:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801939c:	f7f8 fa36 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 80193a0:	2800      	cmp	r0, #0
 80193a2:	d046      	beq.n	8019432 <rmw_wait+0x246>
 80193a4:	f8d8 3000 	ldr.w	r3, [r8]
 80193a8:	3401      	adds	r4, #1
 80193aa:	42a3      	cmp	r3, r4
 80193ac:	f04f 0501 	mov.w	r5, #1
 80193b0:	d8f0      	bhi.n	8019394 <rmw_wait+0x1a8>
 80193b2:	b1df      	cbz	r7, 80193ec <rmw_wait+0x200>
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	b1cb      	cbz	r3, 80193ec <rmw_wait+0x200>
 80193b8:	2400      	movs	r4, #0
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80193c0:	f7f8 fa24 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 80193c4:	b158      	cbz	r0, 80193de <rmw_wait+0x1f2>
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	3401      	adds	r4, #1
 80193ca:	42a3      	cmp	r3, r4
 80193cc:	d961      	bls.n	8019492 <rmw_wait+0x2a6>
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	2501      	movs	r5, #1
 80193d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80193d6:	f7f8 fa19 	bl	801180c <rmw_uxrce_find_static_input_buffer_by_owner>
 80193da:	2800      	cmp	r0, #0
 80193dc:	d1f3      	bne.n	80193c6 <rmw_wait+0x1da>
 80193de:	e9d7 3200 	ldrd	r3, r2, [r7]
 80193e2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80193e6:	3401      	adds	r4, #1
 80193e8:	42a3      	cmp	r3, r4
 80193ea:	d8e6      	bhi.n	80193ba <rmw_wait+0x1ce>
 80193ec:	b1a6      	cbz	r6, 8019418 <rmw_wait+0x22c>
 80193ee:	6834      	ldr	r4, [r6, #0]
 80193f0:	b194      	cbz	r4, 8019418 <rmw_wait+0x22c>
 80193f2:	2300      	movs	r3, #0
 80193f4:	461f      	mov	r7, r3
 80193f6:	e004      	b.n	8019402 <rmw_wait+0x216>
 80193f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80193fc:	3301      	adds	r3, #1
 80193fe:	42a3      	cmp	r3, r4
 8019400:	d00a      	beq.n	8019418 <rmw_wait+0x22c>
 8019402:	6870      	ldr	r0, [r6, #4]
 8019404:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019408:	7c0a      	ldrb	r2, [r1, #16]
 801940a:	2a00      	cmp	r2, #0
 801940c:	d0f4      	beq.n	80193f8 <rmw_wait+0x20c>
 801940e:	3301      	adds	r3, #1
 8019410:	42a3      	cmp	r3, r4
 8019412:	4615      	mov	r5, r2
 8019414:	740f      	strb	r7, [r1, #16]
 8019416:	d1f4      	bne.n	8019402 <rmw_wait+0x216>
 8019418:	2d00      	cmp	r5, #0
 801941a:	d037      	beq.n	801948c <rmw_wait+0x2a0>
 801941c:	2000      	movs	r0, #0
 801941e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019422:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019426:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801942a:	3401      	adds	r4, #1
 801942c:	42a3      	cmp	r3, r4
 801942e:	d89b      	bhi.n	8019368 <rmw_wait+0x17c>
 8019430:	e7a9      	b.n	8019386 <rmw_wait+0x19a>
 8019432:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019436:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801943a:	3401      	adds	r4, #1
 801943c:	429c      	cmp	r4, r3
 801943e:	d3a9      	bcc.n	8019394 <rmw_wait+0x1a8>
 8019440:	e7b7      	b.n	80193b2 <rmw_wait+0x1c6>
 8019442:	4614      	mov	r4, r2
 8019444:	e70d      	b.n	8019262 <rmw_wait+0x76>
 8019446:	f1b8 0f00 	cmp.w	r8, #0
 801944a:	f47f aed9 	bne.w	8019200 <rmw_wait+0x14>
 801944e:	2800      	cmp	r0, #0
 8019450:	f47f aed6 	bne.w	8019200 <rmw_wait+0x14>
 8019454:	2900      	cmp	r1, #0
 8019456:	d0e1      	beq.n	801941c <rmw_wait+0x230>
 8019458:	2b00      	cmp	r3, #0
 801945a:	f47f aed4 	bne.w	8019206 <rmw_wait+0x1a>
 801945e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019462:	e6fe      	b.n	8019262 <rmw_wait+0x76>
 8019464:	4621      	mov	r1, r4
 8019466:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801946a:	f7fa feb9 	bl	80141e0 <uxr_run_session_until_data>
 801946e:	68ad      	ldr	r5, [r5, #8]
 8019470:	2d00      	cmp	r5, #0
 8019472:	f47f af65 	bne.w	8019340 <rmw_wait+0x154>
 8019476:	e76c      	b.n	8019352 <rmw_wait+0x166>
 8019478:	f1b8 0f00 	cmp.w	r8, #0
 801947c:	d11d      	bne.n	80194ba <rmw_wait+0x2ce>
 801947e:	b34f      	cbz	r7, 80194d4 <rmw_wait+0x2e8>
 8019480:	683b      	ldr	r3, [r7, #0]
 8019482:	4645      	mov	r5, r8
 8019484:	2b00      	cmp	r3, #0
 8019486:	d197      	bne.n	80193b8 <rmw_wait+0x1cc>
 8019488:	2e00      	cmp	r6, #0
 801948a:	d1b0      	bne.n	80193ee <rmw_wait+0x202>
 801948c:	2002      	movs	r0, #2
 801948e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019492:	2e00      	cmp	r6, #0
 8019494:	d0c2      	beq.n	801941c <rmw_wait+0x230>
 8019496:	6834      	ldr	r4, [r6, #0]
 8019498:	2501      	movs	r5, #1
 801949a:	2c00      	cmp	r4, #0
 801949c:	d1a9      	bne.n	80193f2 <rmw_wait+0x206>
 801949e:	e7bd      	b.n	801941c <rmw_wait+0x230>
 80194a0:	f1b8 0f00 	cmp.w	r8, #0
 80194a4:	d0eb      	beq.n	801947e <rmw_wait+0x292>
 80194a6:	f8d8 3000 	ldr.w	r3, [r8]
 80194aa:	464d      	mov	r5, r9
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	f47f af70 	bne.w	8019392 <rmw_wait+0x1a6>
 80194b2:	2f00      	cmp	r7, #0
 80194b4:	f47f af7e 	bne.w	80193b4 <rmw_wait+0x1c8>
 80194b8:	e008      	b.n	80194cc <rmw_wait+0x2e0>
 80194ba:	f8d8 3000 	ldr.w	r3, [r8]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	f47f af67 	bne.w	8019392 <rmw_wait+0x1a6>
 80194c4:	461d      	mov	r5, r3
 80194c6:	2f00      	cmp	r7, #0
 80194c8:	f47f af74 	bne.w	80193b4 <rmw_wait+0x1c8>
 80194cc:	463d      	mov	r5, r7
 80194ce:	2e00      	cmp	r6, #0
 80194d0:	d18d      	bne.n	80193ee <rmw_wait+0x202>
 80194d2:	e7db      	b.n	801948c <rmw_wait+0x2a0>
 80194d4:	2e00      	cmp	r6, #0
 80194d6:	d0d9      	beq.n	801948c <rmw_wait+0x2a0>
 80194d8:	6834      	ldr	r4, [r6, #0]
 80194da:	463d      	mov	r5, r7
 80194dc:	2c00      	cmp	r4, #0
 80194de:	d188      	bne.n	80193f2 <rmw_wait+0x206>
 80194e0:	e7d4      	b.n	801948c <rmw_wait+0x2a0>
 80194e2:	bf00      	nop
 80194e4:	000f4240 	.word	0x000f4240
 80194e8:	2000c860 	.word	0x2000c860

080194ec <rmw_create_wait_set>:
 80194ec:	b508      	push	{r3, lr}
 80194ee:	4803      	ldr	r0, [pc, #12]	; (80194fc <rmw_create_wait_set+0x10>)
 80194f0:	f7ff fc96 	bl	8018e20 <get_memory>
 80194f4:	b108      	cbz	r0, 80194fa <rmw_create_wait_set+0xe>
 80194f6:	68c0      	ldr	r0, [r0, #12]
 80194f8:	3010      	adds	r0, #16
 80194fa:	bd08      	pop	{r3, pc}
 80194fc:	2000e038 	.word	0x2000e038

08019500 <rmw_destroy_wait_set>:
 8019500:	b508      	push	{r3, lr}
 8019502:	4b08      	ldr	r3, [pc, #32]	; (8019524 <rmw_destroy_wait_set+0x24>)
 8019504:	6819      	ldr	r1, [r3, #0]
 8019506:	b911      	cbnz	r1, 801950e <rmw_destroy_wait_set+0xe>
 8019508:	e00a      	b.n	8019520 <rmw_destroy_wait_set+0x20>
 801950a:	6889      	ldr	r1, [r1, #8]
 801950c:	b141      	cbz	r1, 8019520 <rmw_destroy_wait_set+0x20>
 801950e:	68cb      	ldr	r3, [r1, #12]
 8019510:	3310      	adds	r3, #16
 8019512:	4298      	cmp	r0, r3
 8019514:	d1f9      	bne.n	801950a <rmw_destroy_wait_set+0xa>
 8019516:	4803      	ldr	r0, [pc, #12]	; (8019524 <rmw_destroy_wait_set+0x24>)
 8019518:	f7ff fc92 	bl	8018e40 <put_memory>
 801951c:	2000      	movs	r0, #0
 801951e:	bd08      	pop	{r3, pc}
 8019520:	2001      	movs	r0, #1
 8019522:	bd08      	pop	{r3, pc}
 8019524:	2000e038 	.word	0x2000e038

08019528 <_MultiArrayDimension__cdr_serialize>:
 8019528:	b1d0      	cbz	r0, 8019560 <_MultiArrayDimension__cdr_serialize+0x38>
 801952a:	b570      	push	{r4, r5, r6, lr}
 801952c:	6806      	ldr	r6, [r0, #0]
 801952e:	460d      	mov	r5, r1
 8019530:	4604      	mov	r4, r0
 8019532:	b196      	cbz	r6, 801955a <_MultiArrayDimension__cdr_serialize+0x32>
 8019534:	4630      	mov	r0, r6
 8019536:	f7e6 fe85 	bl	8000244 <strlen>
 801953a:	1c42      	adds	r2, r0, #1
 801953c:	4631      	mov	r1, r6
 801953e:	6060      	str	r0, [r4, #4]
 8019540:	4628      	mov	r0, r5
 8019542:	f7f9 fc11 	bl	8012d68 <ucdr_serialize_sequence_char>
 8019546:	68e1      	ldr	r1, [r4, #12]
 8019548:	4628      	mov	r0, r5
 801954a:	f7f4 f939 	bl	800d7c0 <ucdr_serialize_uint32_t>
 801954e:	4628      	mov	r0, r5
 8019550:	6921      	ldr	r1, [r4, #16]
 8019552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019556:	f7f4 b933 	b.w	800d7c0 <ucdr_serialize_uint32_t>
 801955a:	4632      	mov	r2, r6
 801955c:	4630      	mov	r0, r6
 801955e:	e7ed      	b.n	801953c <_MultiArrayDimension__cdr_serialize+0x14>
 8019560:	4770      	bx	lr
 8019562:	bf00      	nop

08019564 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019564:	b570      	push	{r4, r5, r6, lr}
 8019566:	4604      	mov	r4, r0
 8019568:	b1b0      	cbz	r0, 8019598 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 801956a:	460d      	mov	r5, r1
 801956c:	2104      	movs	r1, #4
 801956e:	4628      	mov	r0, r5
 8019570:	f7f5 fb26 	bl	800ebc0 <ucdr_alignment>
 8019574:	6866      	ldr	r6, [r4, #4]
 8019576:	1d6c      	adds	r4, r5, #5
 8019578:	4434      	add	r4, r6
 801957a:	1826      	adds	r6, r4, r0
 801957c:	2104      	movs	r1, #4
 801957e:	4630      	mov	r0, r6
 8019580:	f7f5 fb1e 	bl	800ebc0 <ucdr_alignment>
 8019584:	1d04      	adds	r4, r0, #4
 8019586:	4434      	add	r4, r6
 8019588:	4620      	mov	r0, r4
 801958a:	2104      	movs	r1, #4
 801958c:	f7f5 fb18 	bl	800ebc0 <ucdr_alignment>
 8019590:	f1c5 0504 	rsb	r5, r5, #4
 8019594:	4428      	add	r0, r5
 8019596:	4420      	add	r0, r4
 8019598:	bd70      	pop	{r4, r5, r6, pc}
 801959a:	bf00      	nop

0801959c <_MultiArrayDimension__cdr_deserialize>:
 801959c:	b570      	push	{r4, r5, r6, lr}
 801959e:	460c      	mov	r4, r1
 80195a0:	b082      	sub	sp, #8
 80195a2:	b1d1      	cbz	r1, 80195da <_MultiArrayDimension__cdr_deserialize+0x3e>
 80195a4:	688e      	ldr	r6, [r1, #8]
 80195a6:	ab01      	add	r3, sp, #4
 80195a8:	4632      	mov	r2, r6
 80195aa:	6809      	ldr	r1, [r1, #0]
 80195ac:	4605      	mov	r5, r0
 80195ae:	f7f9 fbed 	bl	8012d8c <ucdr_deserialize_sequence_char>
 80195b2:	9b01      	ldr	r3, [sp, #4]
 80195b4:	b968      	cbnz	r0, 80195d2 <_MultiArrayDimension__cdr_deserialize+0x36>
 80195b6:	429e      	cmp	r6, r3
 80195b8:	d312      	bcc.n	80195e0 <_MultiArrayDimension__cdr_deserialize+0x44>
 80195ba:	f104 010c 	add.w	r1, r4, #12
 80195be:	4628      	mov	r0, r5
 80195c0:	f7f4 fa2e 	bl	800da20 <ucdr_deserialize_uint32_t>
 80195c4:	4628      	mov	r0, r5
 80195c6:	f104 0110 	add.w	r1, r4, #16
 80195ca:	f7f4 fa29 	bl	800da20 <ucdr_deserialize_uint32_t>
 80195ce:	b002      	add	sp, #8
 80195d0:	bd70      	pop	{r4, r5, r6, pc}
 80195d2:	b103      	cbz	r3, 80195d6 <_MultiArrayDimension__cdr_deserialize+0x3a>
 80195d4:	3b01      	subs	r3, #1
 80195d6:	6063      	str	r3, [r4, #4]
 80195d8:	e7ef      	b.n	80195ba <_MultiArrayDimension__cdr_deserialize+0x1e>
 80195da:	4608      	mov	r0, r1
 80195dc:	b002      	add	sp, #8
 80195de:	bd70      	pop	{r4, r5, r6, pc}
 80195e0:	2101      	movs	r1, #1
 80195e2:	75a8      	strb	r0, [r5, #22]
 80195e4:	7569      	strb	r1, [r5, #21]
 80195e6:	6060      	str	r0, [r4, #4]
 80195e8:	4628      	mov	r0, r5
 80195ea:	f7f5 fb01 	bl	800ebf0 <ucdr_align_to>
 80195ee:	4628      	mov	r0, r5
 80195f0:	9901      	ldr	r1, [sp, #4]
 80195f2:	f7f5 fb33 	bl	800ec5c <ucdr_advance_buffer>
 80195f6:	e7e0      	b.n	80195ba <_MultiArrayDimension__cdr_deserialize+0x1e>

080195f8 <_MultiArrayDimension__max_serialized_size>:
 80195f8:	b510      	push	{r4, lr}
 80195fa:	2104      	movs	r1, #4
 80195fc:	2000      	movs	r0, #0
 80195fe:	f7f5 fadf 	bl	800ebc0 <ucdr_alignment>
 8019602:	1d04      	adds	r4, r0, #4
 8019604:	4620      	mov	r0, r4
 8019606:	2104      	movs	r1, #4
 8019608:	f7f5 fada 	bl	800ebc0 <ucdr_alignment>
 801960c:	3004      	adds	r0, #4
 801960e:	4420      	add	r0, r4
 8019610:	bd10      	pop	{r4, pc}
 8019612:	bf00      	nop

08019614 <_MultiArrayDimension__get_serialized_size>:
 8019614:	b510      	push	{r4, lr}
 8019616:	4604      	mov	r4, r0
 8019618:	b190      	cbz	r0, 8019640 <_MultiArrayDimension__get_serialized_size+0x2c>
 801961a:	2104      	movs	r1, #4
 801961c:	2000      	movs	r0, #0
 801961e:	f7f5 facf 	bl	800ebc0 <ucdr_alignment>
 8019622:	6864      	ldr	r4, [r4, #4]
 8019624:	2104      	movs	r1, #4
 8019626:	3405      	adds	r4, #5
 8019628:	4404      	add	r4, r0
 801962a:	4620      	mov	r0, r4
 801962c:	f7f5 fac8 	bl	800ebc0 <ucdr_alignment>
 8019630:	3004      	adds	r0, #4
 8019632:	4404      	add	r4, r0
 8019634:	4620      	mov	r0, r4
 8019636:	2104      	movs	r1, #4
 8019638:	f7f5 fac2 	bl	800ebc0 <ucdr_alignment>
 801963c:	3004      	adds	r0, #4
 801963e:	4420      	add	r0, r4
 8019640:	bd10      	pop	{r4, pc}
 8019642:	bf00      	nop

08019644 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019644:	4800      	ldr	r0, [pc, #0]	; (8019648 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8019646:	4770      	bx	lr
 8019648:	2000026c 	.word	0x2000026c

0801964c <get_serialized_size_geometry_msgs__msg__Pose>:
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	4604      	mov	r4, r0
 8019650:	b148      	cbz	r0, 8019666 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8019652:	460d      	mov	r5, r1
 8019654:	f000 ff3a 	bl	801a4cc <get_serialized_size_geometry_msgs__msg__Point>
 8019658:	4606      	mov	r6, r0
 801965a:	f104 0018 	add.w	r0, r4, #24
 801965e:	19a9      	adds	r1, r5, r6
 8019660:	f7f8 ff2a 	bl	80124b8 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8019664:	4430      	add	r0, r6
 8019666:	bd70      	pop	{r4, r5, r6, pc}

08019668 <_Pose__cdr_deserialize>:
 8019668:	b570      	push	{r4, r5, r6, lr}
 801966a:	460c      	mov	r4, r1
 801966c:	b189      	cbz	r1, 8019692 <_Pose__cdr_deserialize+0x2a>
 801966e:	4605      	mov	r5, r0
 8019670:	f000 ffb8 	bl	801a5e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019674:	6843      	ldr	r3, [r0, #4]
 8019676:	4621      	mov	r1, r4
 8019678:	68db      	ldr	r3, [r3, #12]
 801967a:	4628      	mov	r0, r5
 801967c:	4798      	blx	r3
 801967e:	f7f8 ffd1 	bl	8012624 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019682:	6843      	ldr	r3, [r0, #4]
 8019684:	f104 0118 	add.w	r1, r4, #24
 8019688:	4628      	mov	r0, r5
 801968a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801968e:	68db      	ldr	r3, [r3, #12]
 8019690:	4718      	bx	r3
 8019692:	4608      	mov	r0, r1
 8019694:	bd70      	pop	{r4, r5, r6, pc}
 8019696:	bf00      	nop

08019698 <_Pose__cdr_serialize>:
 8019698:	b198      	cbz	r0, 80196c2 <_Pose__cdr_serialize+0x2a>
 801969a:	b570      	push	{r4, r5, r6, lr}
 801969c:	460d      	mov	r5, r1
 801969e:	4604      	mov	r4, r0
 80196a0:	f000 ffa0 	bl	801a5e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80196a4:	6843      	ldr	r3, [r0, #4]
 80196a6:	4629      	mov	r1, r5
 80196a8:	689b      	ldr	r3, [r3, #8]
 80196aa:	4620      	mov	r0, r4
 80196ac:	4798      	blx	r3
 80196ae:	f7f8 ffb9 	bl	8012624 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80196b2:	6843      	ldr	r3, [r0, #4]
 80196b4:	4629      	mov	r1, r5
 80196b6:	f104 0018 	add.w	r0, r4, #24
 80196ba:	689b      	ldr	r3, [r3, #8]
 80196bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196c0:	4718      	bx	r3
 80196c2:	4770      	bx	lr

080196c4 <_Pose__get_serialized_size>:
 80196c4:	b538      	push	{r3, r4, r5, lr}
 80196c6:	4604      	mov	r4, r0
 80196c8:	b148      	cbz	r0, 80196de <_Pose__get_serialized_size+0x1a>
 80196ca:	2100      	movs	r1, #0
 80196cc:	f000 fefe 	bl	801a4cc <get_serialized_size_geometry_msgs__msg__Point>
 80196d0:	4605      	mov	r5, r0
 80196d2:	f104 0018 	add.w	r0, r4, #24
 80196d6:	4629      	mov	r1, r5
 80196d8:	f7f8 feee 	bl	80124b8 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80196dc:	4428      	add	r0, r5
 80196de:	bd38      	pop	{r3, r4, r5, pc}

080196e0 <_Pose__max_serialized_size>:
 80196e0:	2301      	movs	r3, #1
 80196e2:	b510      	push	{r4, lr}
 80196e4:	b082      	sub	sp, #8
 80196e6:	2100      	movs	r1, #0
 80196e8:	f10d 0007 	add.w	r0, sp, #7
 80196ec:	f88d 3007 	strb.w	r3, [sp, #7]
 80196f0:	f000 ff5c 	bl	801a5ac <max_serialized_size_geometry_msgs__msg__Point>
 80196f4:	4604      	mov	r4, r0
 80196f6:	f10d 0007 	add.w	r0, sp, #7
 80196fa:	4621      	mov	r1, r4
 80196fc:	f7f8 ff6e 	bl	80125dc <max_serialized_size_geometry_msgs__msg__Quaternion>
 8019700:	4420      	add	r0, r4
 8019702:	b002      	add	sp, #8
 8019704:	bd10      	pop	{r4, pc}
 8019706:	bf00      	nop

08019708 <max_serialized_size_geometry_msgs__msg__Pose>:
 8019708:	2301      	movs	r3, #1
 801970a:	b570      	push	{r4, r5, r6, lr}
 801970c:	7003      	strb	r3, [r0, #0]
 801970e:	4605      	mov	r5, r0
 8019710:	460e      	mov	r6, r1
 8019712:	f000 ff4b 	bl	801a5ac <max_serialized_size_geometry_msgs__msg__Point>
 8019716:	4604      	mov	r4, r0
 8019718:	4628      	mov	r0, r5
 801971a:	1931      	adds	r1, r6, r4
 801971c:	f7f8 ff5e 	bl	80125dc <max_serialized_size_geometry_msgs__msg__Quaternion>
 8019720:	4420      	add	r0, r4
 8019722:	bd70      	pop	{r4, r5, r6, pc}

08019724 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8019724:	4800      	ldr	r0, [pc, #0]	; (8019728 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8019726:	4770      	bx	lr
 8019728:	20000294 	.word	0x20000294

0801972c <ucdr_serialize_string>:
 801972c:	b538      	push	{r3, r4, r5, lr}
 801972e:	4605      	mov	r5, r0
 8019730:	4608      	mov	r0, r1
 8019732:	460c      	mov	r4, r1
 8019734:	f7e6 fd86 	bl	8000244 <strlen>
 8019738:	4602      	mov	r2, r0
 801973a:	4621      	mov	r1, r4
 801973c:	4628      	mov	r0, r5
 801973e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019742:	3201      	adds	r2, #1
 8019744:	f7f9 bb10 	b.w	8012d68 <ucdr_serialize_sequence_char>

08019748 <ucdr_deserialize_string>:
 8019748:	b500      	push	{lr}
 801974a:	b083      	sub	sp, #12
 801974c:	ab01      	add	r3, sp, #4
 801974e:	f7f9 fb1d 	bl	8012d8c <ucdr_deserialize_sequence_char>
 8019752:	b003      	add	sp, #12
 8019754:	f85d fb04 	ldr.w	pc, [sp], #4

08019758 <uxr_init_input_best_effort_stream>:
 8019758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801975c:	8003      	strh	r3, [r0, #0]
 801975e:	4770      	bx	lr

08019760 <uxr_reset_input_best_effort_stream>:
 8019760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019764:	8003      	strh	r3, [r0, #0]
 8019766:	4770      	bx	lr

08019768 <uxr_receive_best_effort_message>:
 8019768:	b538      	push	{r3, r4, r5, lr}
 801976a:	4604      	mov	r4, r0
 801976c:	8800      	ldrh	r0, [r0, #0]
 801976e:	460d      	mov	r5, r1
 8019770:	f000 fd20 	bl	801a1b4 <uxr_seq_num_cmp>
 8019774:	4603      	mov	r3, r0
 8019776:	2b00      	cmp	r3, #0
 8019778:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801977c:	bfb8      	it	lt
 801977e:	8025      	strhlt	r5, [r4, #0]
 8019780:	bd38      	pop	{r3, r4, r5, pc}
 8019782:	bf00      	nop

08019784 <on_full_input_buffer>:
 8019784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019786:	890f      	ldrh	r7, [r1, #8]
 8019788:	460d      	mov	r5, r1
 801978a:	c912      	ldmia	r1, {r1, r4}
 801978c:	fbb4 f4f7 	udiv	r4, r4, r7
 8019790:	6802      	ldr	r2, [r0, #0]
 8019792:	4606      	mov	r6, r0
 8019794:	1a53      	subs	r3, r2, r1
 8019796:	fbb3 f3f4 	udiv	r3, r3, r4
 801979a:	3301      	adds	r3, #1
 801979c:	b29b      	uxth	r3, r3
 801979e:	fbb3 f2f7 	udiv	r2, r3, r7
 80197a2:	fb07 3312 	mls	r3, r7, r2, r3
 80197a6:	b29b      	uxth	r3, r3
 80197a8:	fb04 f403 	mul.w	r4, r4, r3
 80197ac:	7d28      	ldrb	r0, [r5, #20]
 80197ae:	1d23      	adds	r3, r4, #4
 80197b0:	440b      	add	r3, r1
 80197b2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80197b6:	b110      	cbz	r0, 80197be <on_full_input_buffer+0x3a>
 80197b8:	2000      	movs	r0, #0
 80197ba:	f843 0c04 	str.w	r0, [r3, #-4]
 80197be:	2a03      	cmp	r2, #3
 80197c0:	d801      	bhi.n	80197c6 <on_full_input_buffer+0x42>
 80197c2:	2001      	movs	r0, #1
 80197c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197c6:	3408      	adds	r4, #8
 80197c8:	4630      	mov	r0, r6
 80197ca:	6933      	ldr	r3, [r6, #16]
 80197cc:	4421      	add	r1, r4
 80197ce:	3a04      	subs	r2, #4
 80197d0:	f7f5 f9ea 	bl	800eba8 <ucdr_init_buffer_origin>
 80197d4:	4630      	mov	r0, r6
 80197d6:	462a      	mov	r2, r5
 80197d8:	4902      	ldr	r1, [pc, #8]	; (80197e4 <on_full_input_buffer+0x60>)
 80197da:	f7f5 f9c3 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 80197de:	2000      	movs	r0, #0
 80197e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197e2:	bf00      	nop
 80197e4:	08019785 	.word	0x08019785

080197e8 <uxr_init_input_reliable_stream>:
 80197e8:	b430      	push	{r4, r5}
 80197ea:	2500      	movs	r5, #0
 80197ec:	9c02      	ldr	r4, [sp, #8]
 80197ee:	6001      	str	r1, [r0, #0]
 80197f0:	8103      	strh	r3, [r0, #8]
 80197f2:	6042      	str	r2, [r0, #4]
 80197f4:	6104      	str	r4, [r0, #16]
 80197f6:	7505      	strb	r5, [r0, #20]
 80197f8:	b1ab      	cbz	r3, 8019826 <uxr_init_input_reliable_stream+0x3e>
 80197fa:	600d      	str	r5, [r1, #0]
 80197fc:	8901      	ldrh	r1, [r0, #8]
 80197fe:	2901      	cmp	r1, #1
 8019800:	d911      	bls.n	8019826 <uxr_init_input_reliable_stream+0x3e>
 8019802:	2201      	movs	r2, #1
 8019804:	fbb2 f3f1 	udiv	r3, r2, r1
 8019808:	6844      	ldr	r4, [r0, #4]
 801980a:	fb01 2313 	mls	r3, r1, r3, r2
 801980e:	fbb4 f1f1 	udiv	r1, r4, r1
 8019812:	b29b      	uxth	r3, r3
 8019814:	fb03 f301 	mul.w	r3, r3, r1
 8019818:	6801      	ldr	r1, [r0, #0]
 801981a:	3201      	adds	r2, #1
 801981c:	50cd      	str	r5, [r1, r3]
 801981e:	8901      	ldrh	r1, [r0, #8]
 8019820:	b292      	uxth	r2, r2
 8019822:	4291      	cmp	r1, r2
 8019824:	d8ee      	bhi.n	8019804 <uxr_init_input_reliable_stream+0x1c>
 8019826:	bc30      	pop	{r4, r5}
 8019828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801982c:	60c3      	str	r3, [r0, #12]
 801982e:	4770      	bx	lr

08019830 <uxr_reset_input_reliable_stream>:
 8019830:	8902      	ldrh	r2, [r0, #8]
 8019832:	b1ca      	cbz	r2, 8019868 <uxr_reset_input_reliable_stream+0x38>
 8019834:	b470      	push	{r4, r5, r6}
 8019836:	2500      	movs	r5, #0
 8019838:	4629      	mov	r1, r5
 801983a:	462e      	mov	r6, r5
 801983c:	fbb1 f3f2 	udiv	r3, r1, r2
 8019840:	6844      	ldr	r4, [r0, #4]
 8019842:	fb02 1313 	mls	r3, r2, r3, r1
 8019846:	fbb4 f2f2 	udiv	r2, r4, r2
 801984a:	b29b      	uxth	r3, r3
 801984c:	fb03 f302 	mul.w	r3, r3, r2
 8019850:	6802      	ldr	r2, [r0, #0]
 8019852:	3501      	adds	r5, #1
 8019854:	50d6      	str	r6, [r2, r3]
 8019856:	8902      	ldrh	r2, [r0, #8]
 8019858:	b2a9      	uxth	r1, r5
 801985a:	428a      	cmp	r2, r1
 801985c:	d8ee      	bhi.n	801983c <uxr_reset_input_reliable_stream+0xc>
 801985e:	bc70      	pop	{r4, r5, r6}
 8019860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019864:	60c3      	str	r3, [r0, #12]
 8019866:	4770      	bx	lr
 8019868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801986c:	60c3      	str	r3, [r0, #12]
 801986e:	4770      	bx	lr

08019870 <uxr_receive_reliable_message>:
 8019870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019874:	4604      	mov	r4, r0
 8019876:	460d      	mov	r5, r1
 8019878:	8901      	ldrh	r1, [r0, #8]
 801987a:	8980      	ldrh	r0, [r0, #12]
 801987c:	4690      	mov	r8, r2
 801987e:	461f      	mov	r7, r3
 8019880:	f000 fc90 	bl	801a1a4 <uxr_seq_num_add>
 8019884:	4629      	mov	r1, r5
 8019886:	4606      	mov	r6, r0
 8019888:	89a0      	ldrh	r0, [r4, #12]
 801988a:	f000 fc93 	bl	801a1b4 <uxr_seq_num_cmp>
 801988e:	2800      	cmp	r0, #0
 8019890:	db0a      	blt.n	80198a8 <uxr_receive_reliable_message+0x38>
 8019892:	2600      	movs	r6, #0
 8019894:	4629      	mov	r1, r5
 8019896:	89e0      	ldrh	r0, [r4, #14]
 8019898:	f000 fc8c 	bl	801a1b4 <uxr_seq_num_cmp>
 801989c:	2800      	cmp	r0, #0
 801989e:	bfb8      	it	lt
 80198a0:	81e5      	strhlt	r5, [r4, #14]
 80198a2:	4630      	mov	r0, r6
 80198a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198a8:	4630      	mov	r0, r6
 80198aa:	4629      	mov	r1, r5
 80198ac:	f000 fc82 	bl	801a1b4 <uxr_seq_num_cmp>
 80198b0:	2800      	cmp	r0, #0
 80198b2:	dbee      	blt.n	8019892 <uxr_receive_reliable_message+0x22>
 80198b4:	4640      	mov	r0, r8
 80198b6:	6923      	ldr	r3, [r4, #16]
 80198b8:	4798      	blx	r3
 80198ba:	4681      	mov	r9, r0
 80198bc:	2101      	movs	r1, #1
 80198be:	89a0      	ldrh	r0, [r4, #12]
 80198c0:	f000 fc70 	bl	801a1a4 <uxr_seq_num_add>
 80198c4:	f1b9 0f00 	cmp.w	r9, #0
 80198c8:	d101      	bne.n	80198ce <uxr_receive_reliable_message+0x5e>
 80198ca:	4285      	cmp	r5, r0
 80198cc:	d049      	beq.n	8019962 <uxr_receive_reliable_message+0xf2>
 80198ce:	8921      	ldrh	r1, [r4, #8]
 80198d0:	6862      	ldr	r2, [r4, #4]
 80198d2:	fbb5 f3f1 	udiv	r3, r5, r1
 80198d6:	fbb2 f2f1 	udiv	r2, r2, r1
 80198da:	fb01 5313 	mls	r3, r1, r3, r5
 80198de:	b29b      	uxth	r3, r3
 80198e0:	fb03 f302 	mul.w	r3, r3, r2
 80198e4:	6820      	ldr	r0, [r4, #0]
 80198e6:	3304      	adds	r3, #4
 80198e8:	4418      	add	r0, r3
 80198ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d1cf      	bne.n	8019892 <uxr_receive_reliable_message+0x22>
 80198f2:	4641      	mov	r1, r8
 80198f4:	463a      	mov	r2, r7
 80198f6:	f000 ff01 	bl	801a6fc <memcpy>
 80198fa:	8921      	ldrh	r1, [r4, #8]
 80198fc:	6862      	ldr	r2, [r4, #4]
 80198fe:	fbb5 f3f1 	udiv	r3, r5, r1
 8019902:	fbb2 f2f1 	udiv	r2, r2, r1
 8019906:	2001      	movs	r0, #1
 8019908:	fb01 5313 	mls	r3, r1, r3, r5
 801990c:	b29b      	uxth	r3, r3
 801990e:	fb03 f302 	mul.w	r3, r3, r2
 8019912:	6822      	ldr	r2, [r4, #0]
 8019914:	50d7      	str	r7, [r2, r3]
 8019916:	9b08      	ldr	r3, [sp, #32]
 8019918:	7018      	strb	r0, [r3, #0]
 801991a:	f1b9 0f00 	cmp.w	r9, #0
 801991e:	d0b8      	beq.n	8019892 <uxr_receive_reliable_message+0x22>
 8019920:	89a6      	ldrh	r6, [r4, #12]
 8019922:	e001      	b.n	8019928 <uxr_receive_reliable_message+0xb8>
 8019924:	2801      	cmp	r0, #1
 8019926:	d1b4      	bne.n	8019892 <uxr_receive_reliable_message+0x22>
 8019928:	4630      	mov	r0, r6
 801992a:	2101      	movs	r1, #1
 801992c:	f000 fc3a 	bl	801a1a4 <uxr_seq_num_add>
 8019930:	8921      	ldrh	r1, [r4, #8]
 8019932:	6862      	ldr	r2, [r4, #4]
 8019934:	fbb0 f3f1 	udiv	r3, r0, r1
 8019938:	fbb2 f2f1 	udiv	r2, r2, r1
 801993c:	fb01 0313 	mls	r3, r1, r3, r0
 8019940:	b29b      	uxth	r3, r3
 8019942:	fb03 f302 	mul.w	r3, r3, r2
 8019946:	4606      	mov	r6, r0
 8019948:	6820      	ldr	r0, [r4, #0]
 801994a:	3304      	adds	r3, #4
 801994c:	4418      	add	r0, r3
 801994e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d09d      	beq.n	8019892 <uxr_receive_reliable_message+0x22>
 8019956:	6923      	ldr	r3, [r4, #16]
 8019958:	4798      	blx	r3
 801995a:	2802      	cmp	r0, #2
 801995c:	d1e2      	bne.n	8019924 <uxr_receive_reliable_message+0xb4>
 801995e:	2601      	movs	r6, #1
 8019960:	e798      	b.n	8019894 <uxr_receive_reliable_message+0x24>
 8019962:	9b08      	ldr	r3, [sp, #32]
 8019964:	81a5      	strh	r5, [r4, #12]
 8019966:	2601      	movs	r6, #1
 8019968:	f883 9000 	strb.w	r9, [r3]
 801996c:	e792      	b.n	8019894 <uxr_receive_reliable_message+0x24>
 801996e:	bf00      	nop

08019970 <uxr_next_input_reliable_buffer_available>:
 8019970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019974:	4604      	mov	r4, r0
 8019976:	460e      	mov	r6, r1
 8019978:	8980      	ldrh	r0, [r0, #12]
 801997a:	2101      	movs	r1, #1
 801997c:	4617      	mov	r7, r2
 801997e:	f000 fc11 	bl	801a1a4 <uxr_seq_num_add>
 8019982:	8921      	ldrh	r1, [r4, #8]
 8019984:	6862      	ldr	r2, [r4, #4]
 8019986:	fbb0 f3f1 	udiv	r3, r0, r1
 801998a:	fbb2 f2f1 	udiv	r2, r2, r1
 801998e:	fb01 0313 	mls	r3, r1, r3, r0
 8019992:	b29b      	uxth	r3, r3
 8019994:	fb03 f302 	mul.w	r3, r3, r2
 8019998:	6822      	ldr	r2, [r4, #0]
 801999a:	3304      	adds	r3, #4
 801999c:	eb02 0803 	add.w	r8, r2, r3
 80199a0:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80199a4:	f1b9 0f00 	cmp.w	r9, #0
 80199a8:	d025      	beq.n	80199f6 <uxr_next_input_reliable_buffer_available+0x86>
 80199aa:	4605      	mov	r5, r0
 80199ac:	6923      	ldr	r3, [r4, #16]
 80199ae:	4640      	mov	r0, r8
 80199b0:	4798      	blx	r3
 80199b2:	4682      	mov	sl, r0
 80199b4:	b310      	cbz	r0, 80199fc <uxr_next_input_reliable_buffer_available+0x8c>
 80199b6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80199ba:	e005      	b.n	80199c8 <uxr_next_input_reliable_buffer_available+0x58>
 80199bc:	6923      	ldr	r3, [r4, #16]
 80199be:	4798      	blx	r3
 80199c0:	2802      	cmp	r0, #2
 80199c2:	d032      	beq.n	8019a2a <uxr_next_input_reliable_buffer_available+0xba>
 80199c4:	2801      	cmp	r0, #1
 80199c6:	d116      	bne.n	80199f6 <uxr_next_input_reliable_buffer_available+0x86>
 80199c8:	4650      	mov	r0, sl
 80199ca:	2101      	movs	r1, #1
 80199cc:	f000 fbea 	bl	801a1a4 <uxr_seq_num_add>
 80199d0:	4682      	mov	sl, r0
 80199d2:	8922      	ldrh	r2, [r4, #8]
 80199d4:	6860      	ldr	r0, [r4, #4]
 80199d6:	fbba f3f2 	udiv	r3, sl, r2
 80199da:	fbb0 f0f2 	udiv	r0, r0, r2
 80199de:	fb02 a313 	mls	r3, r2, r3, sl
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	fb03 f300 	mul.w	r3, r3, r0
 80199e8:	6820      	ldr	r0, [r4, #0]
 80199ea:	3304      	adds	r3, #4
 80199ec:	4418      	add	r0, r3
 80199ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d1e2      	bne.n	80199bc <uxr_next_input_reliable_buffer_available+0x4c>
 80199f6:	2000      	movs	r0, #0
 80199f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199fc:	464a      	mov	r2, r9
 80199fe:	4641      	mov	r1, r8
 8019a00:	4630      	mov	r0, r6
 8019a02:	f7f5 f8d9 	bl	800ebb8 <ucdr_init_buffer>
 8019a06:	8921      	ldrh	r1, [r4, #8]
 8019a08:	6862      	ldr	r2, [r4, #4]
 8019a0a:	fbb5 f3f1 	udiv	r3, r5, r1
 8019a0e:	fbb2 f2f1 	udiv	r2, r2, r1
 8019a12:	fb01 5313 	mls	r3, r1, r3, r5
 8019a16:	b29b      	uxth	r3, r3
 8019a18:	fb03 f302 	mul.w	r3, r3, r2
 8019a1c:	6822      	ldr	r2, [r4, #0]
 8019a1e:	2001      	movs	r0, #1
 8019a20:	f842 a003 	str.w	sl, [r2, r3]
 8019a24:	81a5      	strh	r5, [r4, #12]
 8019a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a2a:	8922      	ldrh	r2, [r4, #8]
 8019a2c:	6863      	ldr	r3, [r4, #4]
 8019a2e:	fbb5 f0f2 	udiv	r0, r5, r2
 8019a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8019a36:	f04f 0c00 	mov.w	ip, #0
 8019a3a:	fb02 5510 	mls	r5, r2, r0, r5
 8019a3e:	b2ad      	uxth	r5, r5
 8019a40:	fb05 f503 	mul.w	r5, r5, r3
 8019a44:	6823      	ldr	r3, [r4, #0]
 8019a46:	4630      	mov	r0, r6
 8019a48:	eba9 0207 	sub.w	r2, r9, r7
 8019a4c:	eb08 0107 	add.w	r1, r8, r7
 8019a50:	f843 c005 	str.w	ip, [r3, r5]
 8019a54:	f7f5 f8b0 	bl	800ebb8 <ucdr_init_buffer>
 8019a58:	4630      	mov	r0, r6
 8019a5a:	4622      	mov	r2, r4
 8019a5c:	4903      	ldr	r1, [pc, #12]	; (8019a6c <uxr_next_input_reliable_buffer_available+0xfc>)
 8019a5e:	f7f5 f881 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 8019a62:	2001      	movs	r0, #1
 8019a64:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019a68:	e7c6      	b.n	80199f8 <uxr_next_input_reliable_buffer_available+0x88>
 8019a6a:	bf00      	nop
 8019a6c:	08019785 	.word	0x08019785

08019a70 <uxr_process_heartbeat>:
 8019a70:	b538      	push	{r3, r4, r5, lr}
 8019a72:	4611      	mov	r1, r2
 8019a74:	4604      	mov	r4, r0
 8019a76:	89c0      	ldrh	r0, [r0, #14]
 8019a78:	4615      	mov	r5, r2
 8019a7a:	f000 fb9b 	bl	801a1b4 <uxr_seq_num_cmp>
 8019a7e:	2800      	cmp	r0, #0
 8019a80:	bfb8      	it	lt
 8019a82:	81e5      	strhlt	r5, [r4, #14]
 8019a84:	bd38      	pop	{r3, r4, r5, pc}
 8019a86:	bf00      	nop

08019a88 <uxr_compute_acknack>:
 8019a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a8c:	8903      	ldrh	r3, [r0, #8]
 8019a8e:	4604      	mov	r4, r0
 8019a90:	460d      	mov	r5, r1
 8019a92:	8986      	ldrh	r6, [r0, #12]
 8019a94:	b1d3      	cbz	r3, 8019acc <uxr_compute_acknack+0x44>
 8019a96:	4630      	mov	r0, r6
 8019a98:	2701      	movs	r7, #1
 8019a9a:	e003      	b.n	8019aa4 <uxr_compute_acknack+0x1c>
 8019a9c:	4567      	cmp	r7, ip
 8019a9e:	d215      	bcs.n	8019acc <uxr_compute_acknack+0x44>
 8019aa0:	89a0      	ldrh	r0, [r4, #12]
 8019aa2:	3701      	adds	r7, #1
 8019aa4:	b2b9      	uxth	r1, r7
 8019aa6:	f000 fb7d 	bl	801a1a4 <uxr_seq_num_add>
 8019aaa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019aae:	6863      	ldr	r3, [r4, #4]
 8019ab0:	fbb0 f2fc 	udiv	r2, r0, ip
 8019ab4:	fbb3 f3fc 	udiv	r3, r3, ip
 8019ab8:	fb0c 0212 	mls	r2, ip, r2, r0
 8019abc:	6821      	ldr	r1, [r4, #0]
 8019abe:	b292      	uxth	r2, r2
 8019ac0:	fb02 1303 	mla	r3, r2, r3, r1
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d1e8      	bne.n	8019a9c <uxr_compute_acknack+0x14>
 8019aca:	4606      	mov	r6, r0
 8019acc:	4630      	mov	r0, r6
 8019ace:	2101      	movs	r1, #1
 8019ad0:	802e      	strh	r6, [r5, #0]
 8019ad2:	89e6      	ldrh	r6, [r4, #14]
 8019ad4:	f000 fb6a 	bl	801a1ac <uxr_seq_num_sub>
 8019ad8:	4601      	mov	r1, r0
 8019ada:	4630      	mov	r0, r6
 8019adc:	f000 fb66 	bl	801a1ac <uxr_seq_num_sub>
 8019ae0:	4606      	mov	r6, r0
 8019ae2:	b310      	cbz	r0, 8019b2a <uxr_compute_acknack+0xa2>
 8019ae4:	f04f 0900 	mov.w	r9, #0
 8019ae8:	f04f 0801 	mov.w	r8, #1
 8019aec:	464f      	mov	r7, r9
 8019aee:	fa1f f189 	uxth.w	r1, r9
 8019af2:	8828      	ldrh	r0, [r5, #0]
 8019af4:	f000 fb56 	bl	801a1a4 <uxr_seq_num_add>
 8019af8:	8923      	ldrh	r3, [r4, #8]
 8019afa:	6862      	ldr	r2, [r4, #4]
 8019afc:	fbb0 fcf3 	udiv	ip, r0, r3
 8019b00:	fbb2 f1f3 	udiv	r1, r2, r3
 8019b04:	fb0c 0313 	mls	r3, ip, r3, r0
 8019b08:	6822      	ldr	r2, [r4, #0]
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	fb03 2201 	mla	r2, r3, r1, r2
 8019b10:	6812      	ldr	r2, [r2, #0]
 8019b12:	fa08 f309 	lsl.w	r3, r8, r9
 8019b16:	f109 0901 	add.w	r9, r9, #1
 8019b1a:	b90a      	cbnz	r2, 8019b20 <uxr_compute_acknack+0x98>
 8019b1c:	431f      	orrs	r7, r3
 8019b1e:	b2bf      	uxth	r7, r7
 8019b20:	454e      	cmp	r6, r9
 8019b22:	d1e4      	bne.n	8019aee <uxr_compute_acknack+0x66>
 8019b24:	4638      	mov	r0, r7
 8019b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b2a:	4607      	mov	r7, r0
 8019b2c:	4638      	mov	r0, r7
 8019b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b32:	bf00      	nop

08019b34 <uxr_init_output_best_effort_stream>:
 8019b34:	b410      	push	{r4}
 8019b36:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8019b3a:	e9c0 1300 	strd	r1, r3, [r0]
 8019b3e:	81c4      	strh	r4, [r0, #14]
 8019b40:	7303      	strb	r3, [r0, #12]
 8019b42:	bc10      	pop	{r4}
 8019b44:	6082      	str	r2, [r0, #8]
 8019b46:	4770      	bx	lr

08019b48 <uxr_reset_output_best_effort_stream>:
 8019b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b4c:	7b03      	ldrb	r3, [r0, #12]
 8019b4e:	81c2      	strh	r2, [r0, #14]
 8019b50:	6043      	str	r3, [r0, #4]
 8019b52:	4770      	bx	lr

08019b54 <uxr_prepare_best_effort_buffer_to_write>:
 8019b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b56:	4604      	mov	r4, r0
 8019b58:	b083      	sub	sp, #12
 8019b5a:	6840      	ldr	r0, [r0, #4]
 8019b5c:	460d      	mov	r5, r1
 8019b5e:	4616      	mov	r6, r2
 8019b60:	f7fb fb2a 	bl	80151b8 <uxr_submessage_padding>
 8019b64:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8019b68:	4410      	add	r0, r2
 8019b6a:	1942      	adds	r2, r0, r5
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	bf2c      	ite	cs
 8019b70:	2701      	movcs	r7, #1
 8019b72:	2700      	movcc	r7, #0
 8019b74:	d202      	bcs.n	8019b7c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019b76:	4638      	mov	r0, r7
 8019b78:	b003      	add	sp, #12
 8019b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b7c:	9000      	str	r0, [sp, #0]
 8019b7e:	6821      	ldr	r1, [r4, #0]
 8019b80:	4630      	mov	r0, r6
 8019b82:	2300      	movs	r3, #0
 8019b84:	f7f5 f806 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8019b88:	4638      	mov	r0, r7
 8019b8a:	6861      	ldr	r1, [r4, #4]
 8019b8c:	4429      	add	r1, r5
 8019b8e:	6061      	str	r1, [r4, #4]
 8019b90:	b003      	add	sp, #12
 8019b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b94 <uxr_prepare_best_effort_buffer_to_send>:
 8019b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b98:	6845      	ldr	r5, [r0, #4]
 8019b9a:	4604      	mov	r4, r0
 8019b9c:	7b00      	ldrb	r0, [r0, #12]
 8019b9e:	4285      	cmp	r5, r0
 8019ba0:	bf8c      	ite	hi
 8019ba2:	2701      	movhi	r7, #1
 8019ba4:	2700      	movls	r7, #0
 8019ba6:	d802      	bhi.n	8019bae <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8019ba8:	4638      	mov	r0, r7
 8019baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bae:	4688      	mov	r8, r1
 8019bb0:	89e0      	ldrh	r0, [r4, #14]
 8019bb2:	2101      	movs	r1, #1
 8019bb4:	4615      	mov	r5, r2
 8019bb6:	461e      	mov	r6, r3
 8019bb8:	f000 faf4 	bl	801a1a4 <uxr_seq_num_add>
 8019bbc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019bc0:	81e0      	strh	r0, [r4, #14]
 8019bc2:	8030      	strh	r0, [r6, #0]
 8019bc4:	f8c8 2000 	str.w	r2, [r8]
 8019bc8:	602b      	str	r3, [r5, #0]
 8019bca:	7b23      	ldrb	r3, [r4, #12]
 8019bcc:	4638      	mov	r0, r7
 8019bce:	6063      	str	r3, [r4, #4]
 8019bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019bd4 <on_full_output_buffer>:
 8019bd4:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8019bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bda:	460d      	mov	r5, r1
 8019bdc:	c90a      	ldmia	r1, {r1, r3}
 8019bde:	fbb3 f7fc 	udiv	r7, r3, ip
 8019be2:	6804      	ldr	r4, [r0, #0]
 8019be4:	4606      	mov	r6, r0
 8019be6:	1a63      	subs	r3, r4, r1
 8019be8:	fbb3 f3f7 	udiv	r3, r3, r7
 8019bec:	3301      	adds	r3, #1
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	fbb3 f4fc 	udiv	r4, r3, ip
 8019bf4:	fb0c 3314 	mls	r3, ip, r4, r3
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	fb07 f303 	mul.w	r3, r7, r3
 8019bfe:	7b2a      	ldrb	r2, [r5, #12]
 8019c00:	58cc      	ldr	r4, [r1, r3]
 8019c02:	4413      	add	r3, r2
 8019c04:	3308      	adds	r3, #8
 8019c06:	1aa2      	subs	r2, r4, r2
 8019c08:	4419      	add	r1, r3
 8019c0a:	3a04      	subs	r2, #4
 8019c0c:	6903      	ldr	r3, [r0, #16]
 8019c0e:	f7f4 ffcb 	bl	800eba8 <ucdr_init_buffer_origin>
 8019c12:	4630      	mov	r0, r6
 8019c14:	462a      	mov	r2, r5
 8019c16:	4902      	ldr	r1, [pc, #8]	; (8019c20 <on_full_output_buffer+0x4c>)
 8019c18:	f7f4 ffa4 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 8019c1c:	2000      	movs	r0, #0
 8019c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c20:	08019bd5 	.word	0x08019bd5

08019c24 <uxr_init_output_reliable_stream>:
 8019c24:	b430      	push	{r4, r5}
 8019c26:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8019c2a:	6001      	str	r1, [r0, #0]
 8019c2c:	8103      	strh	r3, [r0, #8]
 8019c2e:	6042      	str	r2, [r0, #4]
 8019c30:	7304      	strb	r4, [r0, #12]
 8019c32:	b1b3      	cbz	r3, 8019c62 <uxr_init_output_reliable_stream+0x3e>
 8019c34:	600c      	str	r4, [r1, #0]
 8019c36:	8901      	ldrh	r1, [r0, #8]
 8019c38:	2901      	cmp	r1, #1
 8019c3a:	d912      	bls.n	8019c62 <uxr_init_output_reliable_stream+0x3e>
 8019c3c:	2201      	movs	r2, #1
 8019c3e:	fbb2 f3f1 	udiv	r3, r2, r1
 8019c42:	6844      	ldr	r4, [r0, #4]
 8019c44:	fb01 2313 	mls	r3, r1, r3, r2
 8019c48:	fbb4 f1f1 	udiv	r1, r4, r1
 8019c4c:	b29b      	uxth	r3, r3
 8019c4e:	fb03 f301 	mul.w	r3, r3, r1
 8019c52:	7b04      	ldrb	r4, [r0, #12]
 8019c54:	6801      	ldr	r1, [r0, #0]
 8019c56:	3201      	adds	r2, #1
 8019c58:	50cc      	str	r4, [r1, r3]
 8019c5a:	8901      	ldrh	r1, [r0, #8]
 8019c5c:	b292      	uxth	r2, r2
 8019c5e:	4291      	cmp	r1, r2
 8019c60:	d8ed      	bhi.n	8019c3e <uxr_init_output_reliable_stream+0x1a>
 8019c62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019c66:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8019c6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019c6e:	2200      	movs	r2, #0
 8019c70:	4b04      	ldr	r3, [pc, #16]	; (8019c84 <uxr_init_output_reliable_stream+0x60>)
 8019c72:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8019c76:	bc30      	pop	{r4, r5}
 8019c78:	8241      	strh	r1, [r0, #18]
 8019c7a:	8402      	strh	r2, [r0, #32]
 8019c7c:	f8c0 300e 	str.w	r3, [r0, #14]
 8019c80:	4770      	bx	lr
 8019c82:	bf00      	nop
 8019c84:	ffff0000 	.word	0xffff0000

08019c88 <uxr_reset_output_reliable_stream>:
 8019c88:	8902      	ldrh	r2, [r0, #8]
 8019c8a:	b430      	push	{r4, r5}
 8019c8c:	b19a      	cbz	r2, 8019cb6 <uxr_reset_output_reliable_stream+0x2e>
 8019c8e:	2500      	movs	r5, #0
 8019c90:	4629      	mov	r1, r5
 8019c92:	fbb1 f3f2 	udiv	r3, r1, r2
 8019c96:	6844      	ldr	r4, [r0, #4]
 8019c98:	fb02 1313 	mls	r3, r2, r3, r1
 8019c9c:	fbb4 f2f2 	udiv	r2, r4, r2
 8019ca0:	b29b      	uxth	r3, r3
 8019ca2:	fb03 f302 	mul.w	r3, r3, r2
 8019ca6:	7b01      	ldrb	r1, [r0, #12]
 8019ca8:	6802      	ldr	r2, [r0, #0]
 8019caa:	3501      	adds	r5, #1
 8019cac:	50d1      	str	r1, [r2, r3]
 8019cae:	8902      	ldrh	r2, [r0, #8]
 8019cb0:	b2a9      	uxth	r1, r5
 8019cb2:	428a      	cmp	r2, r1
 8019cb4:	d8ed      	bhi.n	8019c92 <uxr_reset_output_reliable_stream+0xa>
 8019cb6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019cba:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8019cbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	4b04      	ldr	r3, [pc, #16]	; (8019cd8 <uxr_reset_output_reliable_stream+0x50>)
 8019cc6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8019cca:	bc30      	pop	{r4, r5}
 8019ccc:	8241      	strh	r1, [r0, #18]
 8019cce:	8402      	strh	r2, [r0, #32]
 8019cd0:	f8c0 300e 	str.w	r3, [r0, #14]
 8019cd4:	4770      	bx	lr
 8019cd6:	bf00      	nop
 8019cd8:	ffff0000 	.word	0xffff0000

08019cdc <uxr_prepare_reliable_buffer_to_write>:
 8019cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ce0:	4604      	mov	r4, r0
 8019ce2:	89c5      	ldrh	r5, [r0, #14]
 8019ce4:	8900      	ldrh	r0, [r0, #8]
 8019ce6:	6866      	ldr	r6, [r4, #4]
 8019ce8:	fbb5 f3f0 	udiv	r3, r5, r0
 8019cec:	fbb6 f6f0 	udiv	r6, r6, r0
 8019cf0:	fb00 5313 	mls	r3, r0, r3, r5
 8019cf4:	b29b      	uxth	r3, r3
 8019cf6:	fb06 f303 	mul.w	r3, r6, r3
 8019cfa:	4688      	mov	r8, r1
 8019cfc:	6821      	ldr	r1, [r4, #0]
 8019cfe:	3304      	adds	r3, #4
 8019d00:	b091      	sub	sp, #68	; 0x44
 8019d02:	18cb      	adds	r3, r1, r3
 8019d04:	9604      	str	r6, [sp, #16]
 8019d06:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8019d0a:	2104      	movs	r1, #4
 8019d0c:	4630      	mov	r0, r6
 8019d0e:	9305      	str	r3, [sp, #20]
 8019d10:	9206      	str	r2, [sp, #24]
 8019d12:	f7f4 ff55 	bl	800ebc0 <ucdr_alignment>
 8019d16:	1833      	adds	r3, r6, r0
 8019d18:	9e04      	ldr	r6, [sp, #16]
 8019d1a:	eb03 0708 	add.w	r7, r3, r8
 8019d1e:	3e04      	subs	r6, #4
 8019d20:	42b7      	cmp	r7, r6
 8019d22:	9303      	str	r3, [sp, #12]
 8019d24:	f240 80dd 	bls.w	8019ee2 <uxr_prepare_reliable_buffer_to_write+0x206>
 8019d28:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8019d2c:	eb0e 0308 	add.w	r3, lr, r8
 8019d30:	42b3      	cmp	r3, r6
 8019d32:	f240 80c3 	bls.w	8019ebc <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8019d36:	9b03      	ldr	r3, [sp, #12]
 8019d38:	3304      	adds	r3, #4
 8019d3a:	42b3      	cmp	r3, r6
 8019d3c:	f080 810d 	bcs.w	8019f5a <uxr_prepare_reliable_buffer_to_write+0x27e>
 8019d40:	8920      	ldrh	r0, [r4, #8]
 8019d42:	2800      	cmp	r0, #0
 8019d44:	f000 8123 	beq.w	8019f8e <uxr_prepare_reliable_buffer_to_write+0x2b2>
 8019d48:	f04f 0c00 	mov.w	ip, #0
 8019d4c:	6862      	ldr	r2, [r4, #4]
 8019d4e:	4661      	mov	r1, ip
 8019d50:	fbb2 f9f0 	udiv	r9, r2, r0
 8019d54:	4662      	mov	r2, ip
 8019d56:	6827      	ldr	r7, [r4, #0]
 8019d58:	fbb2 f3f0 	udiv	r3, r2, r0
 8019d5c:	fb00 2313 	mls	r3, r0, r3, r2
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	fb09 7303 	mla	r3, r9, r3, r7
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	f10c 0c01 	add.w	ip, ip, #1
 8019d6c:	459e      	cmp	lr, r3
 8019d6e:	bf08      	it	eq
 8019d70:	3101      	addeq	r1, #1
 8019d72:	fa1f f28c 	uxth.w	r2, ip
 8019d76:	bf08      	it	eq
 8019d78:	b289      	uxtheq	r1, r1
 8019d7a:	4282      	cmp	r2, r0
 8019d7c:	d3ec      	bcc.n	8019d58 <uxr_prepare_reliable_buffer_to_write+0x7c>
 8019d7e:	9b03      	ldr	r3, [sp, #12]
 8019d80:	1f37      	subs	r7, r6, #4
 8019d82:	b2bf      	uxth	r7, r7
 8019d84:	eba7 0903 	sub.w	r9, r7, r3
 8019d88:	fa1f f989 	uxth.w	r9, r9
 8019d8c:	eba7 070e 	sub.w	r7, r7, lr
 8019d90:	b2bf      	uxth	r7, r7
 8019d92:	eba8 0809 	sub.w	r8, r8, r9
 8019d96:	fbb8 faf7 	udiv	sl, r8, r7
 8019d9a:	fb07 831a 	mls	r3, r7, sl, r8
 8019d9e:	9707      	str	r7, [sp, #28]
 8019da0:	b113      	cbz	r3, 8019da8 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8019da2:	9307      	str	r3, [sp, #28]
 8019da4:	f10a 0a01 	add.w	sl, sl, #1
 8019da8:	fa1f fa8a 	uxth.w	sl, sl
 8019dac:	458a      	cmp	sl, r1
 8019dae:	f200 8094 	bhi.w	8019eda <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8019db2:	f10d 0b20 	add.w	fp, sp, #32
 8019db6:	f1ba 0f00 	cmp.w	sl, #0
 8019dba:	d039      	beq.n	8019e30 <uxr_prepare_reliable_buffer_to_write+0x154>
 8019dbc:	f04f 0800 	mov.w	r8, #0
 8019dc0:	f10d 0b20 	add.w	fp, sp, #32
 8019dc4:	e000      	b.n	8019dc8 <uxr_prepare_reliable_buffer_to_write+0xec>
 8019dc6:	46b9      	mov	r9, r7
 8019dc8:	fbb5 f1f0 	udiv	r1, r5, r0
 8019dcc:	6863      	ldr	r3, [r4, #4]
 8019dce:	fb00 5111 	mls	r1, r0, r1, r5
 8019dd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8019dd6:	b289      	uxth	r1, r1
 8019dd8:	fb01 f103 	mul.w	r1, r1, r3
 8019ddc:	6823      	ldr	r3, [r4, #0]
 8019dde:	3104      	adds	r1, #4
 8019de0:	4419      	add	r1, r3
 8019de2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019de6:	4632      	mov	r2, r6
 8019de8:	4658      	mov	r0, fp
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	2300      	movs	r3, #0
 8019dee:	f7f4 fed1 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8019df2:	464a      	mov	r2, r9
 8019df4:	2300      	movs	r3, #0
 8019df6:	210d      	movs	r1, #13
 8019df8:	4658      	mov	r0, fp
 8019dfa:	f7fb f99d 	bl	8015138 <uxr_buffer_submessage_header>
 8019dfe:	8921      	ldrh	r1, [r4, #8]
 8019e00:	6862      	ldr	r2, [r4, #4]
 8019e02:	fbb5 f3f1 	udiv	r3, r5, r1
 8019e06:	fbb2 f2f1 	udiv	r2, r2, r1
 8019e0a:	fb01 5313 	mls	r3, r1, r3, r5
 8019e0e:	b29b      	uxth	r3, r3
 8019e10:	fb03 f302 	mul.w	r3, r3, r2
 8019e14:	6822      	ldr	r2, [r4, #0]
 8019e16:	4628      	mov	r0, r5
 8019e18:	50d6      	str	r6, [r2, r3]
 8019e1a:	2101      	movs	r1, #1
 8019e1c:	f000 f9c2 	bl	801a1a4 <uxr_seq_num_add>
 8019e20:	f108 0801 	add.w	r8, r8, #1
 8019e24:	fa1f f388 	uxth.w	r3, r8
 8019e28:	459a      	cmp	sl, r3
 8019e2a:	4605      	mov	r5, r0
 8019e2c:	8920      	ldrh	r0, [r4, #8]
 8019e2e:	d8ca      	bhi.n	8019dc6 <uxr_prepare_reliable_buffer_to_write+0xea>
 8019e30:	fbb5 f1f0 	udiv	r1, r5, r0
 8019e34:	6863      	ldr	r3, [r4, #4]
 8019e36:	fb00 5111 	mls	r1, r0, r1, r5
 8019e3a:	fbb3 f0f0 	udiv	r0, r3, r0
 8019e3e:	b289      	uxth	r1, r1
 8019e40:	fb01 f100 	mul.w	r1, r1, r0
 8019e44:	6823      	ldr	r3, [r4, #0]
 8019e46:	3104      	adds	r1, #4
 8019e48:	4419      	add	r1, r3
 8019e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e4e:	4632      	mov	r2, r6
 8019e50:	4658      	mov	r0, fp
 8019e52:	9300      	str	r3, [sp, #0]
 8019e54:	2300      	movs	r3, #0
 8019e56:	f7f4 fe9d 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8019e5a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019e5e:	4658      	mov	r0, fp
 8019e60:	fa1f f288 	uxth.w	r2, r8
 8019e64:	2302      	movs	r3, #2
 8019e66:	210d      	movs	r1, #13
 8019e68:	f7fb f966 	bl	8015138 <uxr_buffer_submessage_header>
 8019e6c:	8922      	ldrh	r2, [r4, #8]
 8019e6e:	6863      	ldr	r3, [r4, #4]
 8019e70:	fbb5 f0f2 	udiv	r0, r5, r2
 8019e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e78:	fb02 5010 	mls	r0, r2, r0, r5
 8019e7c:	b280      	uxth	r0, r0
 8019e7e:	fb00 f003 	mul.w	r0, r0, r3
 8019e82:	6823      	ldr	r3, [r4, #0]
 8019e84:	9f03      	ldr	r7, [sp, #12]
 8019e86:	9307      	str	r3, [sp, #28]
 8019e88:	9b05      	ldr	r3, [sp, #20]
 8019e8a:	7b26      	ldrb	r6, [r4, #12]
 8019e8c:	1d39      	adds	r1, r7, #4
 8019e8e:	440b      	add	r3, r1
 8019e90:	4619      	mov	r1, r3
 8019e92:	3604      	adds	r6, #4
 8019e94:	9b07      	ldr	r3, [sp, #28]
 8019e96:	9a04      	ldr	r2, [sp, #16]
 8019e98:	4446      	add	r6, r8
 8019e9a:	501e      	str	r6, [r3, r0]
 8019e9c:	9e06      	ldr	r6, [sp, #24]
 8019e9e:	3a08      	subs	r2, #8
 8019ea0:	4630      	mov	r0, r6
 8019ea2:	1bd2      	subs	r2, r2, r7
 8019ea4:	f7f4 fe88 	bl	800ebb8 <ucdr_init_buffer>
 8019ea8:	4630      	mov	r0, r6
 8019eaa:	4622      	mov	r2, r4
 8019eac:	4939      	ldr	r1, [pc, #228]	; (8019f94 <uxr_prepare_reliable_buffer_to_write+0x2b8>)
 8019eae:	f7f4 fe59 	bl	800eb64 <ucdr_set_on_full_buffer_callback>
 8019eb2:	2001      	movs	r0, #1
 8019eb4:	81e5      	strh	r5, [r4, #14]
 8019eb6:	b011      	add	sp, #68	; 0x44
 8019eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ebc:	2101      	movs	r1, #1
 8019ebe:	89e0      	ldrh	r0, [r4, #14]
 8019ec0:	f000 f970 	bl	801a1a4 <uxr_seq_num_add>
 8019ec4:	8921      	ldrh	r1, [r4, #8]
 8019ec6:	4605      	mov	r5, r0
 8019ec8:	8a60      	ldrh	r0, [r4, #18]
 8019eca:	f000 f96b 	bl	801a1a4 <uxr_seq_num_add>
 8019ece:	4601      	mov	r1, r0
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	f000 f96f 	bl	801a1b4 <uxr_seq_num_cmp>
 8019ed6:	2800      	cmp	r0, #0
 8019ed8:	dd24      	ble.n	8019f24 <uxr_prepare_reliable_buffer_to_write+0x248>
 8019eda:	2000      	movs	r0, #0
 8019edc:	b011      	add	sp, #68	; 0x44
 8019ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ee2:	8921      	ldrh	r1, [r4, #8]
 8019ee4:	8a60      	ldrh	r0, [r4, #18]
 8019ee6:	f000 f95d 	bl	801a1a4 <uxr_seq_num_add>
 8019eea:	4601      	mov	r1, r0
 8019eec:	4628      	mov	r0, r5
 8019eee:	f000 f961 	bl	801a1b4 <uxr_seq_num_cmp>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	dcf1      	bgt.n	8019eda <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8019ef6:	8920      	ldrh	r0, [r4, #8]
 8019ef8:	6862      	ldr	r2, [r4, #4]
 8019efa:	fbb5 f3f0 	udiv	r3, r5, r0
 8019efe:	fbb2 f2f0 	udiv	r2, r2, r0
 8019f02:	fb00 5313 	mls	r3, r0, r3, r5
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	fb03 f302 	mul.w	r3, r3, r2
 8019f0c:	6822      	ldr	r2, [r4, #0]
 8019f0e:	9806      	ldr	r0, [sp, #24]
 8019f10:	50d7      	str	r7, [r2, r3]
 8019f12:	9b03      	ldr	r3, [sp, #12]
 8019f14:	463a      	mov	r2, r7
 8019f16:	9300      	str	r3, [sp, #0]
 8019f18:	9905      	ldr	r1, [sp, #20]
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	f7f4 fe3a 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8019f20:	2001      	movs	r0, #1
 8019f22:	e7db      	b.n	8019edc <uxr_prepare_reliable_buffer_to_write+0x200>
 8019f24:	8921      	ldrh	r1, [r4, #8]
 8019f26:	6862      	ldr	r2, [r4, #4]
 8019f28:	fbb5 f3f1 	udiv	r3, r5, r1
 8019f2c:	fbb2 f2f1 	udiv	r2, r2, r1
 8019f30:	fb01 5313 	mls	r3, r1, r3, r5
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	fb03 f302 	mul.w	r3, r3, r2
 8019f3a:	6821      	ldr	r1, [r4, #0]
 8019f3c:	7b22      	ldrb	r2, [r4, #12]
 8019f3e:	3304      	adds	r3, #4
 8019f40:	4419      	add	r1, r3
 8019f42:	4442      	add	r2, r8
 8019f44:	f841 2c04 	str.w	r2, [r1, #-4]
 8019f48:	7b23      	ldrb	r3, [r4, #12]
 8019f4a:	9806      	ldr	r0, [sp, #24]
 8019f4c:	9300      	str	r3, [sp, #0]
 8019f4e:	2300      	movs	r3, #0
 8019f50:	f7f4 fe20 	bl	800eb94 <ucdr_init_buffer_origin_offset>
 8019f54:	2001      	movs	r0, #1
 8019f56:	81e5      	strh	r5, [r4, #14]
 8019f58:	e7c0      	b.n	8019edc <uxr_prepare_reliable_buffer_to_write+0x200>
 8019f5a:	4628      	mov	r0, r5
 8019f5c:	2101      	movs	r1, #1
 8019f5e:	f000 f921 	bl	801a1a4 <uxr_seq_num_add>
 8019f62:	4605      	mov	r5, r0
 8019f64:	8920      	ldrh	r0, [r4, #8]
 8019f66:	6862      	ldr	r2, [r4, #4]
 8019f68:	fbb5 f3f0 	udiv	r3, r5, r0
 8019f6c:	fbb2 f2f0 	udiv	r2, r2, r0
 8019f70:	fb00 5313 	mls	r3, r0, r3, r5
 8019f74:	b29b      	uxth	r3, r3
 8019f76:	fb03 f302 	mul.w	r3, r3, r2
 8019f7a:	6822      	ldr	r2, [r4, #0]
 8019f7c:	3304      	adds	r3, #4
 8019f7e:	18d3      	adds	r3, r2, r3
 8019f80:	9305      	str	r3, [sp, #20]
 8019f82:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019f86:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8019f8a:	9303      	str	r3, [sp, #12]
 8019f8c:	e6d9      	b.n	8019d42 <uxr_prepare_reliable_buffer_to_write+0x66>
 8019f8e:	4601      	mov	r1, r0
 8019f90:	e6f5      	b.n	8019d7e <uxr_prepare_reliable_buffer_to_write+0xa2>
 8019f92:	bf00      	nop
 8019f94:	08019bd5 	.word	0x08019bd5

08019f98 <uxr_prepare_next_reliable_buffer_to_send>:
 8019f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	4689      	mov	r9, r1
 8019fa0:	8a00      	ldrh	r0, [r0, #16]
 8019fa2:	2101      	movs	r1, #1
 8019fa4:	4690      	mov	r8, r2
 8019fa6:	461f      	mov	r7, r3
 8019fa8:	f000 f8fc 	bl	801a1a4 <uxr_seq_num_add>
 8019fac:	8038      	strh	r0, [r7, #0]
 8019fae:	8932      	ldrh	r2, [r6, #8]
 8019fb0:	6873      	ldr	r3, [r6, #4]
 8019fb2:	fbb0 f5f2 	udiv	r5, r0, r2
 8019fb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8019fba:	fb02 0415 	mls	r4, r2, r5, r0
 8019fbe:	b2a4      	uxth	r4, r4
 8019fc0:	fb04 f403 	mul.w	r4, r4, r3
 8019fc4:	6833      	ldr	r3, [r6, #0]
 8019fc6:	3404      	adds	r4, #4
 8019fc8:	4423      	add	r3, r4
 8019fca:	f8c9 3000 	str.w	r3, [r9]
 8019fce:	6833      	ldr	r3, [r6, #0]
 8019fd0:	89f1      	ldrh	r1, [r6, #14]
 8019fd2:	441c      	add	r4, r3
 8019fd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019fd8:	f8c8 3000 	str.w	r3, [r8]
 8019fdc:	f000 f8ea 	bl	801a1b4 <uxr_seq_num_cmp>
 8019fe0:	2800      	cmp	r0, #0
 8019fe2:	dd02      	ble.n	8019fea <uxr_prepare_next_reliable_buffer_to_send+0x52>
 8019fe4:	2000      	movs	r0, #0
 8019fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fea:	f8d8 2000 	ldr.w	r2, [r8]
 8019fee:	7b33      	ldrb	r3, [r6, #12]
 8019ff0:	429a      	cmp	r2, r3
 8019ff2:	d9f7      	bls.n	8019fe4 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8019ff4:	8a71      	ldrh	r1, [r6, #18]
 8019ff6:	8a30      	ldrh	r0, [r6, #16]
 8019ff8:	f000 f8d8 	bl	801a1ac <uxr_seq_num_sub>
 8019ffc:	8933      	ldrh	r3, [r6, #8]
 8019ffe:	4283      	cmp	r3, r0
 801a000:	d0f0      	beq.n	8019fe4 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 801a002:	8838      	ldrh	r0, [r7, #0]
 801a004:	89f3      	ldrh	r3, [r6, #14]
 801a006:	8230      	strh	r0, [r6, #16]
 801a008:	4298      	cmp	r0, r3
 801a00a:	d002      	beq.n	801a012 <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 801a00c:	2001      	movs	r0, #1
 801a00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a012:	2101      	movs	r1, #1
 801a014:	f000 f8c6 	bl	801a1a4 <uxr_seq_num_add>
 801a018:	4603      	mov	r3, r0
 801a01a:	2001      	movs	r0, #1
 801a01c:	81f3      	strh	r3, [r6, #14]
 801a01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a022:	bf00      	nop

0801a024 <uxr_update_output_stream_heartbeat_timestamp>:
 801a024:	b5d0      	push	{r4, r6, r7, lr}
 801a026:	8a01      	ldrh	r1, [r0, #16]
 801a028:	4604      	mov	r4, r0
 801a02a:	8a40      	ldrh	r0, [r0, #18]
 801a02c:	4616      	mov	r6, r2
 801a02e:	461f      	mov	r7, r3
 801a030:	f000 f8c0 	bl	801a1b4 <uxr_seq_num_cmp>
 801a034:	2800      	cmp	r0, #0
 801a036:	db07      	blt.n	801a048 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a03c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a040:	2000      	movs	r0, #0
 801a042:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a046:	bdd0      	pop	{r4, r6, r7, pc}
 801a048:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a04c:	b948      	cbnz	r0, 801a062 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 801a04e:	2301      	movs	r3, #1
 801a050:	f884 3020 	strb.w	r3, [r4, #32]
 801a054:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 801a058:	f147 0200 	adc.w	r2, r7, #0
 801a05c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 801a060:	bdd0      	pop	{r4, r6, r7, pc}
 801a062:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a066:	4296      	cmp	r6, r2
 801a068:	eb77 0303 	sbcs.w	r3, r7, r3
 801a06c:	bfa5      	ittet	ge
 801a06e:	3001      	addge	r0, #1
 801a070:	f884 0020 	strbge.w	r0, [r4, #32]
 801a074:	2000      	movlt	r0, #0
 801a076:	2001      	movge	r0, #1
 801a078:	e7ec      	b.n	801a054 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a07a:	bf00      	nop

0801a07c <uxr_begin_output_nack_buffer_it>:
 801a07c:	8a40      	ldrh	r0, [r0, #18]
 801a07e:	4770      	bx	lr

0801a080 <uxr_next_reliable_nack_buffer_to_send>:
 801a080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a084:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 801a088:	f1b9 0f00 	cmp.w	r9, #0
 801a08c:	d011      	beq.n	801a0b2 <uxr_next_reliable_nack_buffer_to_send+0x32>
 801a08e:	460f      	mov	r7, r1
 801a090:	4690      	mov	r8, r2
 801a092:	461e      	mov	r6, r3
 801a094:	4605      	mov	r5, r0
 801a096:	8818      	ldrh	r0, [r3, #0]
 801a098:	2101      	movs	r1, #1
 801a09a:	f000 f883 	bl	801a1a4 <uxr_seq_num_add>
 801a09e:	8030      	strh	r0, [r6, #0]
 801a0a0:	8a29      	ldrh	r1, [r5, #16]
 801a0a2:	f000 f887 	bl	801a1b4 <uxr_seq_num_cmp>
 801a0a6:	2800      	cmp	r0, #0
 801a0a8:	dd06      	ble.n	801a0b8 <uxr_next_reliable_nack_buffer_to_send+0x38>
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	4699      	mov	r9, r3
 801a0ae:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 801a0b2:	4648      	mov	r0, r9
 801a0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0b8:	892a      	ldrh	r2, [r5, #8]
 801a0ba:	8830      	ldrh	r0, [r6, #0]
 801a0bc:	686b      	ldr	r3, [r5, #4]
 801a0be:	fbb0 f4f2 	udiv	r4, r0, r2
 801a0c2:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0c6:	fb02 0414 	mls	r4, r2, r4, r0
 801a0ca:	b2a4      	uxth	r4, r4
 801a0cc:	fb04 f403 	mul.w	r4, r4, r3
 801a0d0:	682b      	ldr	r3, [r5, #0]
 801a0d2:	3404      	adds	r4, #4
 801a0d4:	4423      	add	r3, r4
 801a0d6:	603b      	str	r3, [r7, #0]
 801a0d8:	682b      	ldr	r3, [r5, #0]
 801a0da:	441c      	add	r4, r3
 801a0dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a0e0:	f8c8 3000 	str.w	r3, [r8]
 801a0e4:	7b2a      	ldrb	r2, [r5, #12]
 801a0e6:	429a      	cmp	r2, r3
 801a0e8:	d0d6      	beq.n	801a098 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801a0ea:	4648      	mov	r0, r9
 801a0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a0f0 <uxr_process_acknack>:
 801a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0f2:	4604      	mov	r4, r0
 801a0f4:	460e      	mov	r6, r1
 801a0f6:	4610      	mov	r0, r2
 801a0f8:	2101      	movs	r1, #1
 801a0fa:	f000 f857 	bl	801a1ac <uxr_seq_num_sub>
 801a0fe:	8a61      	ldrh	r1, [r4, #18]
 801a100:	f000 f854 	bl	801a1ac <uxr_seq_num_sub>
 801a104:	b1b8      	cbz	r0, 801a136 <uxr_process_acknack+0x46>
 801a106:	4605      	mov	r5, r0
 801a108:	2700      	movs	r7, #0
 801a10a:	2101      	movs	r1, #1
 801a10c:	8a60      	ldrh	r0, [r4, #18]
 801a10e:	f000 f849 	bl	801a1a4 <uxr_seq_num_add>
 801a112:	8921      	ldrh	r1, [r4, #8]
 801a114:	6862      	ldr	r2, [r4, #4]
 801a116:	fbb0 f3f1 	udiv	r3, r0, r1
 801a11a:	fbb2 f2f1 	udiv	r2, r2, r1
 801a11e:	fb01 0313 	mls	r3, r1, r3, r0
 801a122:	b29b      	uxth	r3, r3
 801a124:	fb03 f302 	mul.w	r3, r3, r2
 801a128:	7b21      	ldrb	r1, [r4, #12]
 801a12a:	6822      	ldr	r2, [r4, #0]
 801a12c:	3701      	adds	r7, #1
 801a12e:	42bd      	cmp	r5, r7
 801a130:	8260      	strh	r0, [r4, #18]
 801a132:	50d1      	str	r1, [r2, r3]
 801a134:	d1e9      	bne.n	801a10a <uxr_process_acknack+0x1a>
 801a136:	3e00      	subs	r6, #0
 801a138:	f04f 0300 	mov.w	r3, #0
 801a13c:	bf18      	it	ne
 801a13e:	2601      	movne	r6, #1
 801a140:	f884 3020 	strb.w	r3, [r4, #32]
 801a144:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a14a:	bf00      	nop

0801a14c <uxr_is_output_up_to_date>:
 801a14c:	8a01      	ldrh	r1, [r0, #16]
 801a14e:	b508      	push	{r3, lr}
 801a150:	8a40      	ldrh	r0, [r0, #18]
 801a152:	f000 f82f 	bl	801a1b4 <uxr_seq_num_cmp>
 801a156:	fab0 f080 	clz	r0, r0
 801a15a:	0940      	lsrs	r0, r0, #5
 801a15c:	bd08      	pop	{r3, pc}
 801a15e:	bf00      	nop

0801a160 <get_available_free_slots>:
 801a160:	8901      	ldrh	r1, [r0, #8]
 801a162:	b1e1      	cbz	r1, 801a19e <get_available_free_slots+0x3e>
 801a164:	b4f0      	push	{r4, r5, r6, r7}
 801a166:	2400      	movs	r4, #0
 801a168:	4603      	mov	r3, r0
 801a16a:	6845      	ldr	r5, [r0, #4]
 801a16c:	4622      	mov	r2, r4
 801a16e:	4620      	mov	r0, r4
 801a170:	fbb5 f5f1 	udiv	r5, r5, r1
 801a174:	681f      	ldr	r7, [r3, #0]
 801a176:	7b1e      	ldrb	r6, [r3, #12]
 801a178:	fbb2 f3f1 	udiv	r3, r2, r1
 801a17c:	fb01 2313 	mls	r3, r1, r3, r2
 801a180:	b29b      	uxth	r3, r3
 801a182:	fb05 7303 	mla	r3, r5, r3, r7
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	3401      	adds	r4, #1
 801a18a:	429e      	cmp	r6, r3
 801a18c:	bf08      	it	eq
 801a18e:	3001      	addeq	r0, #1
 801a190:	b2a2      	uxth	r2, r4
 801a192:	bf08      	it	eq
 801a194:	b280      	uxtheq	r0, r0
 801a196:	428a      	cmp	r2, r1
 801a198:	d3ee      	bcc.n	801a178 <get_available_free_slots+0x18>
 801a19a:	bcf0      	pop	{r4, r5, r6, r7}
 801a19c:	4770      	bx	lr
 801a19e:	4608      	mov	r0, r1
 801a1a0:	4770      	bx	lr
 801a1a2:	bf00      	nop

0801a1a4 <uxr_seq_num_add>:
 801a1a4:	4408      	add	r0, r1
 801a1a6:	b280      	uxth	r0, r0
 801a1a8:	4770      	bx	lr
 801a1aa:	bf00      	nop

0801a1ac <uxr_seq_num_sub>:
 801a1ac:	1a40      	subs	r0, r0, r1
 801a1ae:	b280      	uxth	r0, r0
 801a1b0:	4770      	bx	lr
 801a1b2:	bf00      	nop

0801a1b4 <uxr_seq_num_cmp>:
 801a1b4:	4288      	cmp	r0, r1
 801a1b6:	d011      	beq.n	801a1dc <uxr_seq_num_cmp+0x28>
 801a1b8:	d309      	bcc.n	801a1ce <uxr_seq_num_cmp+0x1a>
 801a1ba:	4288      	cmp	r0, r1
 801a1bc:	d910      	bls.n	801a1e0 <uxr_seq_num_cmp+0x2c>
 801a1be:	1a40      	subs	r0, r0, r1
 801a1c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801a1c4:	bfd4      	ite	le
 801a1c6:	2001      	movle	r0, #1
 801a1c8:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801a1cc:	4770      	bx	lr
 801a1ce:	1a0b      	subs	r3, r1, r0
 801a1d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a1d4:	daf1      	bge.n	801a1ba <uxr_seq_num_cmp+0x6>
 801a1d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1da:	4770      	bx	lr
 801a1dc:	2000      	movs	r0, #0
 801a1de:	4770      	bx	lr
 801a1e0:	2001      	movs	r0, #1
 801a1e2:	4770      	bx	lr

0801a1e4 <rcl_get_default_domain_id>:
 801a1e4:	2300      	movs	r3, #0
 801a1e6:	b530      	push	{r4, r5, lr}
 801a1e8:	b083      	sub	sp, #12
 801a1ea:	9300      	str	r3, [sp, #0]
 801a1ec:	b1d0      	cbz	r0, 801a224 <rcl_get_default_domain_id+0x40>
 801a1ee:	4604      	mov	r4, r0
 801a1f0:	4669      	mov	r1, sp
 801a1f2:	4815      	ldr	r0, [pc, #84]	; (801a248 <rcl_get_default_domain_id+0x64>)
 801a1f4:	f7fe fb3c 	bl	8018870 <rcutils_get_env>
 801a1f8:	4602      	mov	r2, r0
 801a1fa:	b110      	cbz	r0, 801a202 <rcl_get_default_domain_id+0x1e>
 801a1fc:	2001      	movs	r0, #1
 801a1fe:	b003      	add	sp, #12
 801a200:	bd30      	pop	{r4, r5, pc}
 801a202:	9b00      	ldr	r3, [sp, #0]
 801a204:	b18b      	cbz	r3, 801a22a <rcl_get_default_domain_id+0x46>
 801a206:	7818      	ldrb	r0, [r3, #0]
 801a208:	2800      	cmp	r0, #0
 801a20a:	d0f8      	beq.n	801a1fe <rcl_get_default_domain_id+0x1a>
 801a20c:	4618      	mov	r0, r3
 801a20e:	a901      	add	r1, sp, #4
 801a210:	9201      	str	r2, [sp, #4]
 801a212:	f000 fd11 	bl	801ac38 <strtoul>
 801a216:	4605      	mov	r5, r0
 801a218:	b150      	cbz	r0, 801a230 <rcl_get_default_domain_id+0x4c>
 801a21a:	1c43      	adds	r3, r0, #1
 801a21c:	d00d      	beq.n	801a23a <rcl_get_default_domain_id+0x56>
 801a21e:	2000      	movs	r0, #0
 801a220:	6025      	str	r5, [r4, #0]
 801a222:	e7ec      	b.n	801a1fe <rcl_get_default_domain_id+0x1a>
 801a224:	200b      	movs	r0, #11
 801a226:	b003      	add	sp, #12
 801a228:	bd30      	pop	{r4, r5, pc}
 801a22a:	4618      	mov	r0, r3
 801a22c:	b003      	add	sp, #12
 801a22e:	bd30      	pop	{r4, r5, pc}
 801a230:	9b01      	ldr	r3, [sp, #4]
 801a232:	781b      	ldrb	r3, [r3, #0]
 801a234:	2b00      	cmp	r3, #0
 801a236:	d0f2      	beq.n	801a21e <rcl_get_default_domain_id+0x3a>
 801a238:	e7e0      	b.n	801a1fc <rcl_get_default_domain_id+0x18>
 801a23a:	f000 f9df 	bl	801a5fc <__errno>
 801a23e:	6803      	ldr	r3, [r0, #0]
 801a240:	2b22      	cmp	r3, #34	; 0x22
 801a242:	d1ec      	bne.n	801a21e <rcl_get_default_domain_id+0x3a>
 801a244:	e7da      	b.n	801a1fc <rcl_get_default_domain_id+0x18>
 801a246:	bf00      	nop
 801a248:	0801d99c 	.word	0x0801d99c

0801a24c <rcl_get_zero_initialized_guard_condition>:
 801a24c:	4603      	mov	r3, r0
 801a24e:	4a03      	ldr	r2, [pc, #12]	; (801a25c <rcl_get_zero_initialized_guard_condition+0x10>)
 801a250:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a254:	e883 0003 	stmia.w	r3, {r0, r1}
 801a258:	4618      	mov	r0, r3
 801a25a:	4770      	bx	lr
 801a25c:	0801d9ac 	.word	0x0801d9ac

0801a260 <rcl_guard_condition_init>:
 801a260:	b082      	sub	sp, #8
 801a262:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a264:	b087      	sub	sp, #28
 801a266:	ad0c      	add	r5, sp, #48	; 0x30
 801a268:	e9c5 2300 	strd	r2, r3, [r5]
 801a26c:	ac01      	add	r4, sp, #4
 801a26e:	4607      	mov	r7, r0
 801a270:	460e      	mov	r6, r1
 801a272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a276:	682b      	ldr	r3, [r5, #0]
 801a278:	a801      	add	r0, sp, #4
 801a27a:	6023      	str	r3, [r4, #0]
 801a27c:	f7f5 fe94 	bl	800ffa8 <rcutils_allocator_is_valid>
 801a280:	2800      	cmp	r0, #0
 801a282:	d032      	beq.n	801a2ea <rcl_guard_condition_init+0x8a>
 801a284:	463d      	mov	r5, r7
 801a286:	2f00      	cmp	r7, #0
 801a288:	d02f      	beq.n	801a2ea <rcl_guard_condition_init+0x8a>
 801a28a:	687f      	ldr	r7, [r7, #4]
 801a28c:	bb3f      	cbnz	r7, 801a2de <rcl_guard_condition_init+0x7e>
 801a28e:	2e00      	cmp	r6, #0
 801a290:	d02b      	beq.n	801a2ea <rcl_guard_condition_init+0x8a>
 801a292:	4630      	mov	r0, r6
 801a294:	f7fc f880 	bl	8016398 <rcl_context_is_valid>
 801a298:	2800      	cmp	r0, #0
 801a29a:	d02c      	beq.n	801a2f6 <rcl_guard_condition_init+0x96>
 801a29c:	201c      	movs	r0, #28
 801a29e:	9b01      	ldr	r3, [sp, #4]
 801a2a0:	9905      	ldr	r1, [sp, #20]
 801a2a2:	4798      	blx	r3
 801a2a4:	4604      	mov	r4, r0
 801a2a6:	6068      	str	r0, [r5, #4]
 801a2a8:	2800      	cmp	r0, #0
 801a2aa:	d02d      	beq.n	801a308 <rcl_guard_condition_init+0xa8>
 801a2ac:	6830      	ldr	r0, [r6, #0]
 801a2ae:	3028      	adds	r0, #40	; 0x28
 801a2b0:	f000 f8d4 	bl	801a45c <rmw_create_guard_condition>
 801a2b4:	686e      	ldr	r6, [r5, #4]
 801a2b6:	6020      	str	r0, [r4, #0]
 801a2b8:	6834      	ldr	r4, [r6, #0]
 801a2ba:	b1f4      	cbz	r4, 801a2fa <rcl_guard_condition_init+0x9a>
 801a2bc:	f04f 0c01 	mov.w	ip, #1
 801a2c0:	ac01      	add	r4, sp, #4
 801a2c2:	f106 0508 	add.w	r5, r6, #8
 801a2c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2c8:	f886 c004 	strb.w	ip, [r6, #4]
 801a2cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a2ce:	4638      	mov	r0, r7
 801a2d0:	6823      	ldr	r3, [r4, #0]
 801a2d2:	602b      	str	r3, [r5, #0]
 801a2d4:	b007      	add	sp, #28
 801a2d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a2da:	b002      	add	sp, #8
 801a2dc:	4770      	bx	lr
 801a2de:	2064      	movs	r0, #100	; 0x64
 801a2e0:	b007      	add	sp, #28
 801a2e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a2e6:	b002      	add	sp, #8
 801a2e8:	4770      	bx	lr
 801a2ea:	200b      	movs	r0, #11
 801a2ec:	b007      	add	sp, #28
 801a2ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801a2f2:	b002      	add	sp, #8
 801a2f4:	4770      	bx	lr
 801a2f6:	2065      	movs	r0, #101	; 0x65
 801a2f8:	e7f2      	b.n	801a2e0 <rcl_guard_condition_init+0x80>
 801a2fa:	4630      	mov	r0, r6
 801a2fc:	9b02      	ldr	r3, [sp, #8]
 801a2fe:	9905      	ldr	r1, [sp, #20]
 801a300:	4798      	blx	r3
 801a302:	2001      	movs	r0, #1
 801a304:	606c      	str	r4, [r5, #4]
 801a306:	e7eb      	b.n	801a2e0 <rcl_guard_condition_init+0x80>
 801a308:	200a      	movs	r0, #10
 801a30a:	e7e9      	b.n	801a2e0 <rcl_guard_condition_init+0x80>

0801a30c <rcl_guard_condition_init_from_rmw>:
 801a30c:	4684      	mov	ip, r0
 801a30e:	b082      	sub	sp, #8
 801a310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a314:	b086      	sub	sp, #24
 801a316:	ac0c      	add	r4, sp, #48	; 0x30
 801a318:	f844 3f04 	str.w	r3, [r4, #4]!
 801a31c:	ad01      	add	r5, sp, #4
 801a31e:	460f      	mov	r7, r1
 801a320:	4616      	mov	r6, r2
 801a322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a326:	6823      	ldr	r3, [r4, #0]
 801a328:	a801      	add	r0, sp, #4
 801a32a:	4664      	mov	r4, ip
 801a32c:	602b      	str	r3, [r5, #0]
 801a32e:	f7f5 fe3b 	bl	800ffa8 <rcutils_allocator_is_valid>
 801a332:	b338      	cbz	r0, 801a384 <rcl_guard_condition_init_from_rmw+0x78>
 801a334:	b334      	cbz	r4, 801a384 <rcl_guard_condition_init_from_rmw+0x78>
 801a336:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801a33a:	f1b8 0f00 	cmp.w	r8, #0
 801a33e:	d11b      	bne.n	801a378 <rcl_guard_condition_init_from_rmw+0x6c>
 801a340:	b306      	cbz	r6, 801a384 <rcl_guard_condition_init_from_rmw+0x78>
 801a342:	4630      	mov	r0, r6
 801a344:	f7fc f828 	bl	8016398 <rcl_context_is_valid>
 801a348:	b310      	cbz	r0, 801a390 <rcl_guard_condition_init_from_rmw+0x84>
 801a34a:	201c      	movs	r0, #28
 801a34c:	9b01      	ldr	r3, [sp, #4]
 801a34e:	9905      	ldr	r1, [sp, #20]
 801a350:	4798      	blx	r3
 801a352:	4605      	mov	r5, r0
 801a354:	6060      	str	r0, [r4, #4]
 801a356:	b340      	cbz	r0, 801a3aa <rcl_guard_condition_init_from_rmw+0x9e>
 801a358:	b1e7      	cbz	r7, 801a394 <rcl_guard_condition_init_from_rmw+0x88>
 801a35a:	6007      	str	r7, [r0, #0]
 801a35c:	f880 8004 	strb.w	r8, [r0, #4]
 801a360:	ac01      	add	r4, sp, #4
 801a362:	3508      	adds	r5, #8
 801a364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a368:	2000      	movs	r0, #0
 801a36a:	6823      	ldr	r3, [r4, #0]
 801a36c:	602b      	str	r3, [r5, #0]
 801a36e:	b006      	add	sp, #24
 801a370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a374:	b002      	add	sp, #8
 801a376:	4770      	bx	lr
 801a378:	2064      	movs	r0, #100	; 0x64
 801a37a:	b006      	add	sp, #24
 801a37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a380:	b002      	add	sp, #8
 801a382:	4770      	bx	lr
 801a384:	200b      	movs	r0, #11
 801a386:	b006      	add	sp, #24
 801a388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a38c:	b002      	add	sp, #8
 801a38e:	4770      	bx	lr
 801a390:	2065      	movs	r0, #101	; 0x65
 801a392:	e7f2      	b.n	801a37a <rcl_guard_condition_init_from_rmw+0x6e>
 801a394:	6830      	ldr	r0, [r6, #0]
 801a396:	3028      	adds	r0, #40	; 0x28
 801a398:	f000 f860 	bl	801a45c <rmw_create_guard_condition>
 801a39c:	6028      	str	r0, [r5, #0]
 801a39e:	6865      	ldr	r5, [r4, #4]
 801a3a0:	682e      	ldr	r6, [r5, #0]
 801a3a2:	b126      	cbz	r6, 801a3ae <rcl_guard_condition_init_from_rmw+0xa2>
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	712b      	strb	r3, [r5, #4]
 801a3a8:	e7da      	b.n	801a360 <rcl_guard_condition_init_from_rmw+0x54>
 801a3aa:	200a      	movs	r0, #10
 801a3ac:	e7e5      	b.n	801a37a <rcl_guard_condition_init_from_rmw+0x6e>
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	9b02      	ldr	r3, [sp, #8]
 801a3b2:	9905      	ldr	r1, [sp, #20]
 801a3b4:	4798      	blx	r3
 801a3b6:	2001      	movs	r0, #1
 801a3b8:	6066      	str	r6, [r4, #4]
 801a3ba:	e7de      	b.n	801a37a <rcl_guard_condition_init_from_rmw+0x6e>

0801a3bc <rcl_guard_condition_fini>:
 801a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3be:	b1e0      	cbz	r0, 801a3fa <rcl_guard_condition_fini+0x3e>
 801a3c0:	4604      	mov	r4, r0
 801a3c2:	6840      	ldr	r0, [r0, #4]
 801a3c4:	b158      	cbz	r0, 801a3de <rcl_guard_condition_fini+0x22>
 801a3c6:	6803      	ldr	r3, [r0, #0]
 801a3c8:	68c6      	ldr	r6, [r0, #12]
 801a3ca:	6987      	ldr	r7, [r0, #24]
 801a3cc:	b153      	cbz	r3, 801a3e4 <rcl_guard_condition_fini+0x28>
 801a3ce:	7905      	ldrb	r5, [r0, #4]
 801a3d0:	b955      	cbnz	r5, 801a3e8 <rcl_guard_condition_fini+0x2c>
 801a3d2:	4639      	mov	r1, r7
 801a3d4:	47b0      	blx	r6
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	4628      	mov	r0, r5
 801a3da:	6063      	str	r3, [r4, #4]
 801a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3de:	4605      	mov	r5, r0
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3e4:	461d      	mov	r5, r3
 801a3e6:	e7f4      	b.n	801a3d2 <rcl_guard_condition_fini+0x16>
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	f000 f84b 	bl	801a484 <rmw_destroy_guard_condition>
 801a3ee:	4605      	mov	r5, r0
 801a3f0:	3d00      	subs	r5, #0
 801a3f2:	bf18      	it	ne
 801a3f4:	2501      	movne	r5, #1
 801a3f6:	6860      	ldr	r0, [r4, #4]
 801a3f8:	e7eb      	b.n	801a3d2 <rcl_guard_condition_fini+0x16>
 801a3fa:	250b      	movs	r5, #11
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a400 <rcl_guard_condition_get_default_options>:
 801a400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a404:	4680      	mov	r8, r0
 801a406:	b086      	sub	sp, #24
 801a408:	466d      	mov	r5, sp
 801a40a:	4c08      	ldr	r4, [pc, #32]	; (801a42c <rcl_guard_condition_get_default_options+0x2c>)
 801a40c:	4646      	mov	r6, r8
 801a40e:	4627      	mov	r7, r4
 801a410:	4668      	mov	r0, sp
 801a412:	f7f5 fdbb 	bl	800ff8c <rcutils_get_default_allocator>
 801a416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a41a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a41c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a41e:	4640      	mov	r0, r8
 801a420:	682b      	ldr	r3, [r5, #0]
 801a422:	6023      	str	r3, [r4, #0]
 801a424:	6033      	str	r3, [r6, #0]
 801a426:	b006      	add	sp, #24
 801a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a42c:	20006948 	.word	0x20006948

0801a430 <rcl_trigger_guard_condition>:
 801a430:	b148      	cbz	r0, 801a446 <rcl_trigger_guard_condition+0x16>
 801a432:	b508      	push	{r3, lr}
 801a434:	6843      	ldr	r3, [r0, #4]
 801a436:	b143      	cbz	r3, 801a44a <rcl_trigger_guard_condition+0x1a>
 801a438:	6818      	ldr	r0, [r3, #0]
 801a43a:	f000 f837 	bl	801a4ac <rmw_trigger_guard_condition>
 801a43e:	3800      	subs	r0, #0
 801a440:	bf18      	it	ne
 801a442:	2001      	movne	r0, #1
 801a444:	bd08      	pop	{r3, pc}
 801a446:	200b      	movs	r0, #11
 801a448:	4770      	bx	lr
 801a44a:	200b      	movs	r0, #11
 801a44c:	bd08      	pop	{r3, pc}
 801a44e:	bf00      	nop

0801a450 <rcl_guard_condition_get_rmw_handle>:
 801a450:	b110      	cbz	r0, 801a458 <rcl_guard_condition_get_rmw_handle+0x8>
 801a452:	6840      	ldr	r0, [r0, #4]
 801a454:	b100      	cbz	r0, 801a458 <rcl_guard_condition_get_rmw_handle+0x8>
 801a456:	6800      	ldr	r0, [r0, #0]
 801a458:	4770      	bx	lr
 801a45a:	bf00      	nop

0801a45c <rmw_create_guard_condition>:
 801a45c:	b538      	push	{r3, r4, r5, lr}
 801a45e:	4605      	mov	r5, r0
 801a460:	4807      	ldr	r0, [pc, #28]	; (801a480 <rmw_create_guard_condition+0x24>)
 801a462:	f7fe fcdd 	bl	8018e20 <get_memory>
 801a466:	b148      	cbz	r0, 801a47c <rmw_create_guard_condition+0x20>
 801a468:	2300      	movs	r3, #0
 801a46a:	68c4      	ldr	r4, [r0, #12]
 801a46c:	61e5      	str	r5, [r4, #28]
 801a46e:	7423      	strb	r3, [r4, #16]
 801a470:	f7fe fd3e 	bl	8018ef0 <rmw_get_implementation_identifier>
 801a474:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a478:	f104 0014 	add.w	r0, r4, #20
 801a47c:	bd38      	pop	{r3, r4, r5, pc}
 801a47e:	bf00      	nop
 801a480:	2000c840 	.word	0x2000c840

0801a484 <rmw_destroy_guard_condition>:
 801a484:	b508      	push	{r3, lr}
 801a486:	4b08      	ldr	r3, [pc, #32]	; (801a4a8 <rmw_destroy_guard_condition+0x24>)
 801a488:	6819      	ldr	r1, [r3, #0]
 801a48a:	b911      	cbnz	r1, 801a492 <rmw_destroy_guard_condition+0xe>
 801a48c:	e00a      	b.n	801a4a4 <rmw_destroy_guard_condition+0x20>
 801a48e:	6889      	ldr	r1, [r1, #8]
 801a490:	b141      	cbz	r1, 801a4a4 <rmw_destroy_guard_condition+0x20>
 801a492:	68cb      	ldr	r3, [r1, #12]
 801a494:	3314      	adds	r3, #20
 801a496:	4298      	cmp	r0, r3
 801a498:	d1f9      	bne.n	801a48e <rmw_destroy_guard_condition+0xa>
 801a49a:	4803      	ldr	r0, [pc, #12]	; (801a4a8 <rmw_destroy_guard_condition+0x24>)
 801a49c:	f7fe fcd0 	bl	8018e40 <put_memory>
 801a4a0:	2000      	movs	r0, #0
 801a4a2:	bd08      	pop	{r3, pc}
 801a4a4:	2001      	movs	r0, #1
 801a4a6:	bd08      	pop	{r3, pc}
 801a4a8:	2000c840 	.word	0x2000c840

0801a4ac <rmw_trigger_guard_condition>:
 801a4ac:	b160      	cbz	r0, 801a4c8 <rmw_trigger_guard_condition+0x1c>
 801a4ae:	b510      	push	{r4, lr}
 801a4b0:	4604      	mov	r4, r0
 801a4b2:	6800      	ldr	r0, [r0, #0]
 801a4b4:	f7f7 fad0 	bl	8011a58 <is_uxrce_rmw_identifier_valid>
 801a4b8:	b908      	cbnz	r0, 801a4be <rmw_trigger_guard_condition+0x12>
 801a4ba:	2001      	movs	r0, #1
 801a4bc:	bd10      	pop	{r4, pc}
 801a4be:	2201      	movs	r2, #1
 801a4c0:	6863      	ldr	r3, [r4, #4]
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	741a      	strb	r2, [r3, #16]
 801a4c6:	bd10      	pop	{r4, pc}
 801a4c8:	2001      	movs	r0, #1
 801a4ca:	4770      	bx	lr

0801a4cc <get_serialized_size_geometry_msgs__msg__Point>:
 801a4cc:	b1b8      	cbz	r0, 801a4fe <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801a4ce:	b538      	push	{r3, r4, r5, lr}
 801a4d0:	460d      	mov	r5, r1
 801a4d2:	2108      	movs	r1, #8
 801a4d4:	4628      	mov	r0, r5
 801a4d6:	f7f4 fb73 	bl	800ebc0 <ucdr_alignment>
 801a4da:	f105 0408 	add.w	r4, r5, #8
 801a4de:	4404      	add	r4, r0
 801a4e0:	4620      	mov	r0, r4
 801a4e2:	2108      	movs	r1, #8
 801a4e4:	f7f4 fb6c 	bl	800ebc0 <ucdr_alignment>
 801a4e8:	3008      	adds	r0, #8
 801a4ea:	4404      	add	r4, r0
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	2108      	movs	r1, #8
 801a4f0:	f7f4 fb66 	bl	800ebc0 <ucdr_alignment>
 801a4f4:	f1c5 0508 	rsb	r5, r5, #8
 801a4f8:	4428      	add	r0, r5
 801a4fa:	4420      	add	r0, r4
 801a4fc:	bd38      	pop	{r3, r4, r5, pc}
 801a4fe:	4770      	bx	lr

0801a500 <_Point__cdr_deserialize>:
 801a500:	b538      	push	{r3, r4, r5, lr}
 801a502:	460c      	mov	r4, r1
 801a504:	b171      	cbz	r1, 801a524 <_Point__cdr_deserialize+0x24>
 801a506:	4605      	mov	r5, r0
 801a508:	f7f4 f96c 	bl	800e7e4 <ucdr_deserialize_double>
 801a50c:	f104 0108 	add.w	r1, r4, #8
 801a510:	4628      	mov	r0, r5
 801a512:	f7f4 f967 	bl	800e7e4 <ucdr_deserialize_double>
 801a516:	4628      	mov	r0, r5
 801a518:	f104 0110 	add.w	r1, r4, #16
 801a51c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a520:	f7f4 b960 	b.w	800e7e4 <ucdr_deserialize_double>
 801a524:	4608      	mov	r0, r1
 801a526:	bd38      	pop	{r3, r4, r5, pc}

0801a528 <_Point__cdr_serialize>:
 801a528:	b198      	cbz	r0, 801a552 <_Point__cdr_serialize+0x2a>
 801a52a:	e9d0 2300 	ldrd	r2, r3, [r0]
 801a52e:	b570      	push	{r4, r5, r6, lr}
 801a530:	460d      	mov	r5, r1
 801a532:	4604      	mov	r4, r0
 801a534:	4608      	mov	r0, r1
 801a536:	f7f3 ffb3 	bl	800e4a0 <ucdr_serialize_double>
 801a53a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 801a53e:	4628      	mov	r0, r5
 801a540:	f7f3 ffae 	bl	800e4a0 <ucdr_serialize_double>
 801a544:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801a548:	4628      	mov	r0, r5
 801a54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a54e:	f7f3 bfa7 	b.w	800e4a0 <ucdr_serialize_double>
 801a552:	4770      	bx	lr

0801a554 <_Point__get_serialized_size>:
 801a554:	b198      	cbz	r0, 801a57e <_Point__get_serialized_size+0x2a>
 801a556:	b510      	push	{r4, lr}
 801a558:	2108      	movs	r1, #8
 801a55a:	2000      	movs	r0, #0
 801a55c:	f7f4 fb30 	bl	800ebc0 <ucdr_alignment>
 801a560:	f100 0408 	add.w	r4, r0, #8
 801a564:	4620      	mov	r0, r4
 801a566:	2108      	movs	r1, #8
 801a568:	f7f4 fb2a 	bl	800ebc0 <ucdr_alignment>
 801a56c:	3008      	adds	r0, #8
 801a56e:	4404      	add	r4, r0
 801a570:	4620      	mov	r0, r4
 801a572:	2108      	movs	r1, #8
 801a574:	f7f4 fb24 	bl	800ebc0 <ucdr_alignment>
 801a578:	3008      	adds	r0, #8
 801a57a:	4420      	add	r0, r4
 801a57c:	bd10      	pop	{r4, pc}
 801a57e:	4770      	bx	lr

0801a580 <_Point__max_serialized_size>:
 801a580:	b538      	push	{r3, r4, r5, lr}
 801a582:	2108      	movs	r1, #8
 801a584:	2000      	movs	r0, #0
 801a586:	f7f4 fb1b 	bl	800ebc0 <ucdr_alignment>
 801a58a:	f100 0508 	add.w	r5, r0, #8
 801a58e:	4628      	mov	r0, r5
 801a590:	2108      	movs	r1, #8
 801a592:	f7f4 fb15 	bl	800ebc0 <ucdr_alignment>
 801a596:	f100 0408 	add.w	r4, r0, #8
 801a59a:	442c      	add	r4, r5
 801a59c:	4620      	mov	r0, r4
 801a59e:	2108      	movs	r1, #8
 801a5a0:	f7f4 fb0e 	bl	800ebc0 <ucdr_alignment>
 801a5a4:	3008      	adds	r0, #8
 801a5a6:	4420      	add	r0, r4
 801a5a8:	bd38      	pop	{r3, r4, r5, pc}
 801a5aa:	bf00      	nop

0801a5ac <max_serialized_size_geometry_msgs__msg__Point>:
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	2201      	movs	r2, #1
 801a5b0:	b570      	push	{r4, r5, r6, lr}
 801a5b2:	4608      	mov	r0, r1
 801a5b4:	701a      	strb	r2, [r3, #0]
 801a5b6:	460c      	mov	r4, r1
 801a5b8:	2108      	movs	r1, #8
 801a5ba:	f7f4 fb01 	bl	800ebc0 <ucdr_alignment>
 801a5be:	f104 0508 	add.w	r5, r4, #8
 801a5c2:	1946      	adds	r6, r0, r5
 801a5c4:	4630      	mov	r0, r6
 801a5c6:	2108      	movs	r1, #8
 801a5c8:	f7f4 fafa 	bl	800ebc0 <ucdr_alignment>
 801a5cc:	f100 0508 	add.w	r5, r0, #8
 801a5d0:	4435      	add	r5, r6
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	2108      	movs	r1, #8
 801a5d6:	f7f4 faf3 	bl	800ebc0 <ucdr_alignment>
 801a5da:	f1c4 0408 	rsb	r4, r4, #8
 801a5de:	4420      	add	r0, r4
 801a5e0:	4428      	add	r0, r5
 801a5e2:	bd70      	pop	{r4, r5, r6, pc}

0801a5e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801a5e4:	4800      	ldr	r0, [pc, #0]	; (801a5e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801a5e6:	4770      	bx	lr
 801a5e8:	200002bc 	.word	0x200002bc

0801a5ec <calloc>:
 801a5ec:	4b02      	ldr	r3, [pc, #8]	; (801a5f8 <calloc+0xc>)
 801a5ee:	460a      	mov	r2, r1
 801a5f0:	4601      	mov	r1, r0
 801a5f2:	6818      	ldr	r0, [r3, #0]
 801a5f4:	f000 b8b2 	b.w	801a75c <_calloc_r>
 801a5f8:	200002e4 	.word	0x200002e4

0801a5fc <__errno>:
 801a5fc:	4b01      	ldr	r3, [pc, #4]	; (801a604 <__errno+0x8>)
 801a5fe:	6818      	ldr	r0, [r3, #0]
 801a600:	4770      	bx	lr
 801a602:	bf00      	nop
 801a604:	200002e4 	.word	0x200002e4

0801a608 <getenv>:
 801a608:	b507      	push	{r0, r1, r2, lr}
 801a60a:	4b04      	ldr	r3, [pc, #16]	; (801a61c <getenv+0x14>)
 801a60c:	4601      	mov	r1, r0
 801a60e:	aa01      	add	r2, sp, #4
 801a610:	6818      	ldr	r0, [r3, #0]
 801a612:	f000 f805 	bl	801a620 <_findenv_r>
 801a616:	b003      	add	sp, #12
 801a618:	f85d fb04 	ldr.w	pc, [sp], #4
 801a61c:	200002e4 	.word	0x200002e4

0801a620 <_findenv_r>:
 801a620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a624:	4607      	mov	r7, r0
 801a626:	4689      	mov	r9, r1
 801a628:	4616      	mov	r6, r2
 801a62a:	f000 fb67 	bl	801acfc <__env_lock>
 801a62e:	4b18      	ldr	r3, [pc, #96]	; (801a690 <_findenv_r+0x70>)
 801a630:	681c      	ldr	r4, [r3, #0]
 801a632:	469a      	mov	sl, r3
 801a634:	b134      	cbz	r4, 801a644 <_findenv_r+0x24>
 801a636:	464b      	mov	r3, r9
 801a638:	4698      	mov	r8, r3
 801a63a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801a63e:	b139      	cbz	r1, 801a650 <_findenv_r+0x30>
 801a640:	293d      	cmp	r1, #61	; 0x3d
 801a642:	d1f9      	bne.n	801a638 <_findenv_r+0x18>
 801a644:	4638      	mov	r0, r7
 801a646:	f000 fb5f 	bl	801ad08 <__env_unlock>
 801a64a:	2000      	movs	r0, #0
 801a64c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a650:	eba8 0809 	sub.w	r8, r8, r9
 801a654:	46a3      	mov	fp, r4
 801a656:	f854 0b04 	ldr.w	r0, [r4], #4
 801a65a:	2800      	cmp	r0, #0
 801a65c:	d0f2      	beq.n	801a644 <_findenv_r+0x24>
 801a65e:	4642      	mov	r2, r8
 801a660:	4649      	mov	r1, r9
 801a662:	f000 fa36 	bl	801aad2 <strncmp>
 801a666:	2800      	cmp	r0, #0
 801a668:	d1f4      	bne.n	801a654 <_findenv_r+0x34>
 801a66a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a66e:	eb03 0508 	add.w	r5, r3, r8
 801a672:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a676:	2b3d      	cmp	r3, #61	; 0x3d
 801a678:	d1ec      	bne.n	801a654 <_findenv_r+0x34>
 801a67a:	f8da 3000 	ldr.w	r3, [sl]
 801a67e:	4638      	mov	r0, r7
 801a680:	ebab 0303 	sub.w	r3, fp, r3
 801a684:	109b      	asrs	r3, r3, #2
 801a686:	6033      	str	r3, [r6, #0]
 801a688:	f000 fb3e 	bl	801ad08 <__env_unlock>
 801a68c:	1c68      	adds	r0, r5, #1
 801a68e:	e7dd      	b.n	801a64c <_findenv_r+0x2c>
 801a690:	20000018 	.word	0x20000018

0801a694 <__libc_init_array>:
 801a694:	b570      	push	{r4, r5, r6, lr}
 801a696:	2600      	movs	r6, #0
 801a698:	4d0c      	ldr	r5, [pc, #48]	; (801a6cc <__libc_init_array+0x38>)
 801a69a:	4c0d      	ldr	r4, [pc, #52]	; (801a6d0 <__libc_init_array+0x3c>)
 801a69c:	1b64      	subs	r4, r4, r5
 801a69e:	10a4      	asrs	r4, r4, #2
 801a6a0:	42a6      	cmp	r6, r4
 801a6a2:	d109      	bne.n	801a6b8 <__libc_init_array+0x24>
 801a6a4:	f001 fcb8 	bl	801c018 <_init>
 801a6a8:	2600      	movs	r6, #0
 801a6aa:	4d0a      	ldr	r5, [pc, #40]	; (801a6d4 <__libc_init_array+0x40>)
 801a6ac:	4c0a      	ldr	r4, [pc, #40]	; (801a6d8 <__libc_init_array+0x44>)
 801a6ae:	1b64      	subs	r4, r4, r5
 801a6b0:	10a4      	asrs	r4, r4, #2
 801a6b2:	42a6      	cmp	r6, r4
 801a6b4:	d105      	bne.n	801a6c2 <__libc_init_array+0x2e>
 801a6b6:	bd70      	pop	{r4, r5, r6, pc}
 801a6b8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6bc:	4798      	blx	r3
 801a6be:	3601      	adds	r6, #1
 801a6c0:	e7ee      	b.n	801a6a0 <__libc_init_array+0xc>
 801a6c2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6c6:	4798      	blx	r3
 801a6c8:	3601      	adds	r6, #1
 801a6ca:	e7f2      	b.n	801a6b2 <__libc_init_array+0x1e>
 801a6cc:	0801dc10 	.word	0x0801dc10
 801a6d0:	0801dc10 	.word	0x0801dc10
 801a6d4:	0801dc10 	.word	0x0801dc10
 801a6d8:	0801dc14 	.word	0x0801dc14

0801a6dc <malloc>:
 801a6dc:	4b02      	ldr	r3, [pc, #8]	; (801a6e8 <malloc+0xc>)
 801a6de:	4601      	mov	r1, r0
 801a6e0:	6818      	ldr	r0, [r3, #0]
 801a6e2:	f000 b895 	b.w	801a810 <_malloc_r>
 801a6e6:	bf00      	nop
 801a6e8:	200002e4 	.word	0x200002e4

0801a6ec <free>:
 801a6ec:	4b02      	ldr	r3, [pc, #8]	; (801a6f8 <free+0xc>)
 801a6ee:	4601      	mov	r1, r0
 801a6f0:	6818      	ldr	r0, [r3, #0]
 801a6f2:	f000 b841 	b.w	801a778 <_free_r>
 801a6f6:	bf00      	nop
 801a6f8:	200002e4 	.word	0x200002e4

0801a6fc <memcpy>:
 801a6fc:	440a      	add	r2, r1
 801a6fe:	4291      	cmp	r1, r2
 801a700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a704:	d100      	bne.n	801a708 <memcpy+0xc>
 801a706:	4770      	bx	lr
 801a708:	b510      	push	{r4, lr}
 801a70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a70e:	4291      	cmp	r1, r2
 801a710:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a714:	d1f9      	bne.n	801a70a <memcpy+0xe>
 801a716:	bd10      	pop	{r4, pc}

0801a718 <memmove>:
 801a718:	4288      	cmp	r0, r1
 801a71a:	b510      	push	{r4, lr}
 801a71c:	eb01 0402 	add.w	r4, r1, r2
 801a720:	d902      	bls.n	801a728 <memmove+0x10>
 801a722:	4284      	cmp	r4, r0
 801a724:	4623      	mov	r3, r4
 801a726:	d807      	bhi.n	801a738 <memmove+0x20>
 801a728:	1e43      	subs	r3, r0, #1
 801a72a:	42a1      	cmp	r1, r4
 801a72c:	d008      	beq.n	801a740 <memmove+0x28>
 801a72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a732:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a736:	e7f8      	b.n	801a72a <memmove+0x12>
 801a738:	4601      	mov	r1, r0
 801a73a:	4402      	add	r2, r0
 801a73c:	428a      	cmp	r2, r1
 801a73e:	d100      	bne.n	801a742 <memmove+0x2a>
 801a740:	bd10      	pop	{r4, pc}
 801a742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a74a:	e7f7      	b.n	801a73c <memmove+0x24>

0801a74c <memset>:
 801a74c:	4603      	mov	r3, r0
 801a74e:	4402      	add	r2, r0
 801a750:	4293      	cmp	r3, r2
 801a752:	d100      	bne.n	801a756 <memset+0xa>
 801a754:	4770      	bx	lr
 801a756:	f803 1b01 	strb.w	r1, [r3], #1
 801a75a:	e7f9      	b.n	801a750 <memset+0x4>

0801a75c <_calloc_r>:
 801a75c:	b538      	push	{r3, r4, r5, lr}
 801a75e:	fb02 f501 	mul.w	r5, r2, r1
 801a762:	4629      	mov	r1, r5
 801a764:	f000 f854 	bl	801a810 <_malloc_r>
 801a768:	4604      	mov	r4, r0
 801a76a:	b118      	cbz	r0, 801a774 <_calloc_r+0x18>
 801a76c:	462a      	mov	r2, r5
 801a76e:	2100      	movs	r1, #0
 801a770:	f7ff ffec 	bl	801a74c <memset>
 801a774:	4620      	mov	r0, r4
 801a776:	bd38      	pop	{r3, r4, r5, pc}

0801a778 <_free_r>:
 801a778:	b538      	push	{r3, r4, r5, lr}
 801a77a:	4605      	mov	r5, r0
 801a77c:	2900      	cmp	r1, #0
 801a77e:	d043      	beq.n	801a808 <_free_r+0x90>
 801a780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a784:	1f0c      	subs	r4, r1, #4
 801a786:	2b00      	cmp	r3, #0
 801a788:	bfb8      	it	lt
 801a78a:	18e4      	addlt	r4, r4, r3
 801a78c:	f000 fbcc 	bl	801af28 <__malloc_lock>
 801a790:	4a1e      	ldr	r2, [pc, #120]	; (801a80c <_free_r+0x94>)
 801a792:	6813      	ldr	r3, [r2, #0]
 801a794:	4610      	mov	r0, r2
 801a796:	b933      	cbnz	r3, 801a7a6 <_free_r+0x2e>
 801a798:	6063      	str	r3, [r4, #4]
 801a79a:	6014      	str	r4, [r2, #0]
 801a79c:	4628      	mov	r0, r5
 801a79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a7a2:	f000 bbc7 	b.w	801af34 <__malloc_unlock>
 801a7a6:	42a3      	cmp	r3, r4
 801a7a8:	d90a      	bls.n	801a7c0 <_free_r+0x48>
 801a7aa:	6821      	ldr	r1, [r4, #0]
 801a7ac:	1862      	adds	r2, r4, r1
 801a7ae:	4293      	cmp	r3, r2
 801a7b0:	bf01      	itttt	eq
 801a7b2:	681a      	ldreq	r2, [r3, #0]
 801a7b4:	685b      	ldreq	r3, [r3, #4]
 801a7b6:	1852      	addeq	r2, r2, r1
 801a7b8:	6022      	streq	r2, [r4, #0]
 801a7ba:	6063      	str	r3, [r4, #4]
 801a7bc:	6004      	str	r4, [r0, #0]
 801a7be:	e7ed      	b.n	801a79c <_free_r+0x24>
 801a7c0:	461a      	mov	r2, r3
 801a7c2:	685b      	ldr	r3, [r3, #4]
 801a7c4:	b10b      	cbz	r3, 801a7ca <_free_r+0x52>
 801a7c6:	42a3      	cmp	r3, r4
 801a7c8:	d9fa      	bls.n	801a7c0 <_free_r+0x48>
 801a7ca:	6811      	ldr	r1, [r2, #0]
 801a7cc:	1850      	adds	r0, r2, r1
 801a7ce:	42a0      	cmp	r0, r4
 801a7d0:	d10b      	bne.n	801a7ea <_free_r+0x72>
 801a7d2:	6820      	ldr	r0, [r4, #0]
 801a7d4:	4401      	add	r1, r0
 801a7d6:	1850      	adds	r0, r2, r1
 801a7d8:	4283      	cmp	r3, r0
 801a7da:	6011      	str	r1, [r2, #0]
 801a7dc:	d1de      	bne.n	801a79c <_free_r+0x24>
 801a7de:	6818      	ldr	r0, [r3, #0]
 801a7e0:	685b      	ldr	r3, [r3, #4]
 801a7e2:	4401      	add	r1, r0
 801a7e4:	6011      	str	r1, [r2, #0]
 801a7e6:	6053      	str	r3, [r2, #4]
 801a7e8:	e7d8      	b.n	801a79c <_free_r+0x24>
 801a7ea:	d902      	bls.n	801a7f2 <_free_r+0x7a>
 801a7ec:	230c      	movs	r3, #12
 801a7ee:	602b      	str	r3, [r5, #0]
 801a7f0:	e7d4      	b.n	801a79c <_free_r+0x24>
 801a7f2:	6820      	ldr	r0, [r4, #0]
 801a7f4:	1821      	adds	r1, r4, r0
 801a7f6:	428b      	cmp	r3, r1
 801a7f8:	bf01      	itttt	eq
 801a7fa:	6819      	ldreq	r1, [r3, #0]
 801a7fc:	685b      	ldreq	r3, [r3, #4]
 801a7fe:	1809      	addeq	r1, r1, r0
 801a800:	6021      	streq	r1, [r4, #0]
 801a802:	6063      	str	r3, [r4, #4]
 801a804:	6054      	str	r4, [r2, #4]
 801a806:	e7c9      	b.n	801a79c <_free_r+0x24>
 801a808:	bd38      	pop	{r3, r4, r5, pc}
 801a80a:	bf00      	nop
 801a80c:	2000695c 	.word	0x2000695c

0801a810 <_malloc_r>:
 801a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a812:	1ccd      	adds	r5, r1, #3
 801a814:	f025 0503 	bic.w	r5, r5, #3
 801a818:	3508      	adds	r5, #8
 801a81a:	2d0c      	cmp	r5, #12
 801a81c:	bf38      	it	cc
 801a81e:	250c      	movcc	r5, #12
 801a820:	2d00      	cmp	r5, #0
 801a822:	4606      	mov	r6, r0
 801a824:	db01      	blt.n	801a82a <_malloc_r+0x1a>
 801a826:	42a9      	cmp	r1, r5
 801a828:	d903      	bls.n	801a832 <_malloc_r+0x22>
 801a82a:	230c      	movs	r3, #12
 801a82c:	6033      	str	r3, [r6, #0]
 801a82e:	2000      	movs	r0, #0
 801a830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a832:	f000 fb79 	bl	801af28 <__malloc_lock>
 801a836:	4921      	ldr	r1, [pc, #132]	; (801a8bc <_malloc_r+0xac>)
 801a838:	680a      	ldr	r2, [r1, #0]
 801a83a:	4614      	mov	r4, r2
 801a83c:	b99c      	cbnz	r4, 801a866 <_malloc_r+0x56>
 801a83e:	4f20      	ldr	r7, [pc, #128]	; (801a8c0 <_malloc_r+0xb0>)
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	b923      	cbnz	r3, 801a84e <_malloc_r+0x3e>
 801a844:	4621      	mov	r1, r4
 801a846:	4630      	mov	r0, r6
 801a848:	f000 f8ca 	bl	801a9e0 <_sbrk_r>
 801a84c:	6038      	str	r0, [r7, #0]
 801a84e:	4629      	mov	r1, r5
 801a850:	4630      	mov	r0, r6
 801a852:	f000 f8c5 	bl	801a9e0 <_sbrk_r>
 801a856:	1c43      	adds	r3, r0, #1
 801a858:	d123      	bne.n	801a8a2 <_malloc_r+0x92>
 801a85a:	230c      	movs	r3, #12
 801a85c:	4630      	mov	r0, r6
 801a85e:	6033      	str	r3, [r6, #0]
 801a860:	f000 fb68 	bl	801af34 <__malloc_unlock>
 801a864:	e7e3      	b.n	801a82e <_malloc_r+0x1e>
 801a866:	6823      	ldr	r3, [r4, #0]
 801a868:	1b5b      	subs	r3, r3, r5
 801a86a:	d417      	bmi.n	801a89c <_malloc_r+0x8c>
 801a86c:	2b0b      	cmp	r3, #11
 801a86e:	d903      	bls.n	801a878 <_malloc_r+0x68>
 801a870:	6023      	str	r3, [r4, #0]
 801a872:	441c      	add	r4, r3
 801a874:	6025      	str	r5, [r4, #0]
 801a876:	e004      	b.n	801a882 <_malloc_r+0x72>
 801a878:	6863      	ldr	r3, [r4, #4]
 801a87a:	42a2      	cmp	r2, r4
 801a87c:	bf0c      	ite	eq
 801a87e:	600b      	streq	r3, [r1, #0]
 801a880:	6053      	strne	r3, [r2, #4]
 801a882:	4630      	mov	r0, r6
 801a884:	f000 fb56 	bl	801af34 <__malloc_unlock>
 801a888:	f104 000b 	add.w	r0, r4, #11
 801a88c:	1d23      	adds	r3, r4, #4
 801a88e:	f020 0007 	bic.w	r0, r0, #7
 801a892:	1ac2      	subs	r2, r0, r3
 801a894:	d0cc      	beq.n	801a830 <_malloc_r+0x20>
 801a896:	1a1b      	subs	r3, r3, r0
 801a898:	50a3      	str	r3, [r4, r2]
 801a89a:	e7c9      	b.n	801a830 <_malloc_r+0x20>
 801a89c:	4622      	mov	r2, r4
 801a89e:	6864      	ldr	r4, [r4, #4]
 801a8a0:	e7cc      	b.n	801a83c <_malloc_r+0x2c>
 801a8a2:	1cc4      	adds	r4, r0, #3
 801a8a4:	f024 0403 	bic.w	r4, r4, #3
 801a8a8:	42a0      	cmp	r0, r4
 801a8aa:	d0e3      	beq.n	801a874 <_malloc_r+0x64>
 801a8ac:	1a21      	subs	r1, r4, r0
 801a8ae:	4630      	mov	r0, r6
 801a8b0:	f000 f896 	bl	801a9e0 <_sbrk_r>
 801a8b4:	3001      	adds	r0, #1
 801a8b6:	d1dd      	bne.n	801a874 <_malloc_r+0x64>
 801a8b8:	e7cf      	b.n	801a85a <_malloc_r+0x4a>
 801a8ba:	bf00      	nop
 801a8bc:	2000695c 	.word	0x2000695c
 801a8c0:	20006960 	.word	0x20006960

0801a8c4 <iprintf>:
 801a8c4:	b40f      	push	{r0, r1, r2, r3}
 801a8c6:	4b0a      	ldr	r3, [pc, #40]	; (801a8f0 <iprintf+0x2c>)
 801a8c8:	b513      	push	{r0, r1, r4, lr}
 801a8ca:	681c      	ldr	r4, [r3, #0]
 801a8cc:	b124      	cbz	r4, 801a8d8 <iprintf+0x14>
 801a8ce:	69a3      	ldr	r3, [r4, #24]
 801a8d0:	b913      	cbnz	r3, 801a8d8 <iprintf+0x14>
 801a8d2:	4620      	mov	r0, r4
 801a8d4:	f000 fa76 	bl	801adc4 <__sinit>
 801a8d8:	ab05      	add	r3, sp, #20
 801a8da:	4620      	mov	r0, r4
 801a8dc:	9a04      	ldr	r2, [sp, #16]
 801a8de:	68a1      	ldr	r1, [r4, #8]
 801a8e0:	9301      	str	r3, [sp, #4]
 801a8e2:	f000 fcd7 	bl	801b294 <_vfiprintf_r>
 801a8e6:	b002      	add	sp, #8
 801a8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8ec:	b004      	add	sp, #16
 801a8ee:	4770      	bx	lr
 801a8f0:	200002e4 	.word	0x200002e4

0801a8f4 <srand>:
 801a8f4:	b538      	push	{r3, r4, r5, lr}
 801a8f6:	4b10      	ldr	r3, [pc, #64]	; (801a938 <srand+0x44>)
 801a8f8:	4604      	mov	r4, r0
 801a8fa:	681d      	ldr	r5, [r3, #0]
 801a8fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a8fe:	b9b3      	cbnz	r3, 801a92e <srand+0x3a>
 801a900:	2018      	movs	r0, #24
 801a902:	f7ff feeb 	bl	801a6dc <malloc>
 801a906:	4602      	mov	r2, r0
 801a908:	63a8      	str	r0, [r5, #56]	; 0x38
 801a90a:	b920      	cbnz	r0, 801a916 <srand+0x22>
 801a90c:	2142      	movs	r1, #66	; 0x42
 801a90e:	4b0b      	ldr	r3, [pc, #44]	; (801a93c <srand+0x48>)
 801a910:	480b      	ldr	r0, [pc, #44]	; (801a940 <srand+0x4c>)
 801a912:	f000 f9d5 	bl	801acc0 <__assert_func>
 801a916:	490b      	ldr	r1, [pc, #44]	; (801a944 <srand+0x50>)
 801a918:	4b0b      	ldr	r3, [pc, #44]	; (801a948 <srand+0x54>)
 801a91a:	e9c0 1300 	strd	r1, r3, [r0]
 801a91e:	4b0b      	ldr	r3, [pc, #44]	; (801a94c <srand+0x58>)
 801a920:	2100      	movs	r1, #0
 801a922:	6083      	str	r3, [r0, #8]
 801a924:	230b      	movs	r3, #11
 801a926:	8183      	strh	r3, [r0, #12]
 801a928:	2001      	movs	r0, #1
 801a92a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a92e:	2200      	movs	r2, #0
 801a930:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a932:	611c      	str	r4, [r3, #16]
 801a934:	615a      	str	r2, [r3, #20]
 801a936:	bd38      	pop	{r3, r4, r5, pc}
 801a938:	200002e4 	.word	0x200002e4
 801a93c:	0801dac0 	.word	0x0801dac0
 801a940:	0801dad7 	.word	0x0801dad7
 801a944:	abcd330e 	.word	0xabcd330e
 801a948:	e66d1234 	.word	0xe66d1234
 801a94c:	0005deec 	.word	0x0005deec

0801a950 <rand>:
 801a950:	4b17      	ldr	r3, [pc, #92]	; (801a9b0 <rand+0x60>)
 801a952:	b510      	push	{r4, lr}
 801a954:	681c      	ldr	r4, [r3, #0]
 801a956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a958:	b9b3      	cbnz	r3, 801a988 <rand+0x38>
 801a95a:	2018      	movs	r0, #24
 801a95c:	f7ff febe 	bl	801a6dc <malloc>
 801a960:	4602      	mov	r2, r0
 801a962:	63a0      	str	r0, [r4, #56]	; 0x38
 801a964:	b920      	cbnz	r0, 801a970 <rand+0x20>
 801a966:	214e      	movs	r1, #78	; 0x4e
 801a968:	4b12      	ldr	r3, [pc, #72]	; (801a9b4 <rand+0x64>)
 801a96a:	4813      	ldr	r0, [pc, #76]	; (801a9b8 <rand+0x68>)
 801a96c:	f000 f9a8 	bl	801acc0 <__assert_func>
 801a970:	4912      	ldr	r1, [pc, #72]	; (801a9bc <rand+0x6c>)
 801a972:	4b13      	ldr	r3, [pc, #76]	; (801a9c0 <rand+0x70>)
 801a974:	e9c0 1300 	strd	r1, r3, [r0]
 801a978:	4b12      	ldr	r3, [pc, #72]	; (801a9c4 <rand+0x74>)
 801a97a:	2100      	movs	r1, #0
 801a97c:	6083      	str	r3, [r0, #8]
 801a97e:	230b      	movs	r3, #11
 801a980:	8183      	strh	r3, [r0, #12]
 801a982:	2001      	movs	r0, #1
 801a984:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a988:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a98a:	480f      	ldr	r0, [pc, #60]	; (801a9c8 <rand+0x78>)
 801a98c:	690a      	ldr	r2, [r1, #16]
 801a98e:	694b      	ldr	r3, [r1, #20]
 801a990:	4350      	muls	r0, r2
 801a992:	4c0e      	ldr	r4, [pc, #56]	; (801a9cc <rand+0x7c>)
 801a994:	fb04 0003 	mla	r0, r4, r3, r0
 801a998:	fba2 3404 	umull	r3, r4, r2, r4
 801a99c:	1c5a      	adds	r2, r3, #1
 801a99e:	4404      	add	r4, r0
 801a9a0:	f144 0000 	adc.w	r0, r4, #0
 801a9a4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a9a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a9ac:	bd10      	pop	{r4, pc}
 801a9ae:	bf00      	nop
 801a9b0:	200002e4 	.word	0x200002e4
 801a9b4:	0801dac0 	.word	0x0801dac0
 801a9b8:	0801dad7 	.word	0x0801dad7
 801a9bc:	abcd330e 	.word	0xabcd330e
 801a9c0:	e66d1234 	.word	0xe66d1234
 801a9c4:	0005deec 	.word	0x0005deec
 801a9c8:	5851f42d 	.word	0x5851f42d
 801a9cc:	4c957f2d 	.word	0x4c957f2d

0801a9d0 <realloc>:
 801a9d0:	4b02      	ldr	r3, [pc, #8]	; (801a9dc <realloc+0xc>)
 801a9d2:	460a      	mov	r2, r1
 801a9d4:	4601      	mov	r1, r0
 801a9d6:	6818      	ldr	r0, [r3, #0]
 801a9d8:	f000 bab2 	b.w	801af40 <_realloc_r>
 801a9dc:	200002e4 	.word	0x200002e4

0801a9e0 <_sbrk_r>:
 801a9e0:	b538      	push	{r3, r4, r5, lr}
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	4d05      	ldr	r5, [pc, #20]	; (801a9fc <_sbrk_r+0x1c>)
 801a9e6:	4604      	mov	r4, r0
 801a9e8:	4608      	mov	r0, r1
 801a9ea:	602b      	str	r3, [r5, #0]
 801a9ec:	f7ea f846 	bl	8004a7c <_sbrk>
 801a9f0:	1c43      	adds	r3, r0, #1
 801a9f2:	d102      	bne.n	801a9fa <_sbrk_r+0x1a>
 801a9f4:	682b      	ldr	r3, [r5, #0]
 801a9f6:	b103      	cbz	r3, 801a9fa <_sbrk_r+0x1a>
 801a9f8:	6023      	str	r3, [r4, #0]
 801a9fa:	bd38      	pop	{r3, r4, r5, pc}
 801a9fc:	2000e054 	.word	0x2000e054

0801aa00 <sniprintf>:
 801aa00:	b40c      	push	{r2, r3}
 801aa02:	b530      	push	{r4, r5, lr}
 801aa04:	4b17      	ldr	r3, [pc, #92]	; (801aa64 <sniprintf+0x64>)
 801aa06:	1e0c      	subs	r4, r1, #0
 801aa08:	681d      	ldr	r5, [r3, #0]
 801aa0a:	b09d      	sub	sp, #116	; 0x74
 801aa0c:	da08      	bge.n	801aa20 <sniprintf+0x20>
 801aa0e:	238b      	movs	r3, #139	; 0x8b
 801aa10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa14:	602b      	str	r3, [r5, #0]
 801aa16:	b01d      	add	sp, #116	; 0x74
 801aa18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa1c:	b002      	add	sp, #8
 801aa1e:	4770      	bx	lr
 801aa20:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aa24:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aa28:	bf0c      	ite	eq
 801aa2a:	4623      	moveq	r3, r4
 801aa2c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801aa30:	9304      	str	r3, [sp, #16]
 801aa32:	9307      	str	r3, [sp, #28]
 801aa34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa38:	9002      	str	r0, [sp, #8]
 801aa3a:	9006      	str	r0, [sp, #24]
 801aa3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aa40:	4628      	mov	r0, r5
 801aa42:	ab21      	add	r3, sp, #132	; 0x84
 801aa44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aa46:	a902      	add	r1, sp, #8
 801aa48:	9301      	str	r3, [sp, #4]
 801aa4a:	f000 fafb 	bl	801b044 <_svfiprintf_r>
 801aa4e:	1c43      	adds	r3, r0, #1
 801aa50:	bfbc      	itt	lt
 801aa52:	238b      	movlt	r3, #139	; 0x8b
 801aa54:	602b      	strlt	r3, [r5, #0]
 801aa56:	2c00      	cmp	r4, #0
 801aa58:	d0dd      	beq.n	801aa16 <sniprintf+0x16>
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	9b02      	ldr	r3, [sp, #8]
 801aa5e:	701a      	strb	r2, [r3, #0]
 801aa60:	e7d9      	b.n	801aa16 <sniprintf+0x16>
 801aa62:	bf00      	nop
 801aa64:	200002e4 	.word	0x200002e4

0801aa68 <siprintf>:
 801aa68:	b40e      	push	{r1, r2, r3}
 801aa6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aa6e:	b500      	push	{lr}
 801aa70:	b09c      	sub	sp, #112	; 0x70
 801aa72:	ab1d      	add	r3, sp, #116	; 0x74
 801aa74:	9002      	str	r0, [sp, #8]
 801aa76:	9006      	str	r0, [sp, #24]
 801aa78:	9107      	str	r1, [sp, #28]
 801aa7a:	9104      	str	r1, [sp, #16]
 801aa7c:	4808      	ldr	r0, [pc, #32]	; (801aaa0 <siprintf+0x38>)
 801aa7e:	4909      	ldr	r1, [pc, #36]	; (801aaa4 <siprintf+0x3c>)
 801aa80:	f853 2b04 	ldr.w	r2, [r3], #4
 801aa84:	9105      	str	r1, [sp, #20]
 801aa86:	6800      	ldr	r0, [r0, #0]
 801aa88:	a902      	add	r1, sp, #8
 801aa8a:	9301      	str	r3, [sp, #4]
 801aa8c:	f000 fada 	bl	801b044 <_svfiprintf_r>
 801aa90:	2200      	movs	r2, #0
 801aa92:	9b02      	ldr	r3, [sp, #8]
 801aa94:	701a      	strb	r2, [r3, #0]
 801aa96:	b01c      	add	sp, #112	; 0x70
 801aa98:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa9c:	b003      	add	sp, #12
 801aa9e:	4770      	bx	lr
 801aaa0:	200002e4 	.word	0x200002e4
 801aaa4:	ffff0208 	.word	0xffff0208

0801aaa8 <strchr>:
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	b2c9      	uxtb	r1, r1
 801aaac:	4618      	mov	r0, r3
 801aaae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aab2:	b112      	cbz	r2, 801aaba <strchr+0x12>
 801aab4:	428a      	cmp	r2, r1
 801aab6:	d1f9      	bne.n	801aaac <strchr+0x4>
 801aab8:	4770      	bx	lr
 801aaba:	2900      	cmp	r1, #0
 801aabc:	bf18      	it	ne
 801aabe:	2000      	movne	r0, #0
 801aac0:	4770      	bx	lr

0801aac2 <strcpy>:
 801aac2:	4603      	mov	r3, r0
 801aac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aac8:	f803 2b01 	strb.w	r2, [r3], #1
 801aacc:	2a00      	cmp	r2, #0
 801aace:	d1f9      	bne.n	801aac4 <strcpy+0x2>
 801aad0:	4770      	bx	lr

0801aad2 <strncmp>:
 801aad2:	b510      	push	{r4, lr}
 801aad4:	b16a      	cbz	r2, 801aaf2 <strncmp+0x20>
 801aad6:	3901      	subs	r1, #1
 801aad8:	1884      	adds	r4, r0, r2
 801aada:	f810 3b01 	ldrb.w	r3, [r0], #1
 801aade:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801aae2:	4293      	cmp	r3, r2
 801aae4:	d103      	bne.n	801aaee <strncmp+0x1c>
 801aae6:	42a0      	cmp	r0, r4
 801aae8:	d001      	beq.n	801aaee <strncmp+0x1c>
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d1f5      	bne.n	801aada <strncmp+0x8>
 801aaee:	1a98      	subs	r0, r3, r2
 801aaf0:	bd10      	pop	{r4, pc}
 801aaf2:	4610      	mov	r0, r2
 801aaf4:	e7fc      	b.n	801aaf0 <strncmp+0x1e>

0801aaf6 <strnlen>:
 801aaf6:	4602      	mov	r2, r0
 801aaf8:	b510      	push	{r4, lr}
 801aafa:	4401      	add	r1, r0
 801aafc:	428a      	cmp	r2, r1
 801aafe:	4613      	mov	r3, r2
 801ab00:	d101      	bne.n	801ab06 <strnlen+0x10>
 801ab02:	1a18      	subs	r0, r3, r0
 801ab04:	bd10      	pop	{r4, pc}
 801ab06:	781c      	ldrb	r4, [r3, #0]
 801ab08:	3201      	adds	r2, #1
 801ab0a:	2c00      	cmp	r4, #0
 801ab0c:	d1f6      	bne.n	801aafc <strnlen+0x6>
 801ab0e:	e7f8      	b.n	801ab02 <strnlen+0xc>

0801ab10 <strstr>:
 801ab10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab12:	780c      	ldrb	r4, [r1, #0]
 801ab14:	b164      	cbz	r4, 801ab30 <strstr+0x20>
 801ab16:	4603      	mov	r3, r0
 801ab18:	781a      	ldrb	r2, [r3, #0]
 801ab1a:	4618      	mov	r0, r3
 801ab1c:	1c5e      	adds	r6, r3, #1
 801ab1e:	b90a      	cbnz	r2, 801ab24 <strstr+0x14>
 801ab20:	4610      	mov	r0, r2
 801ab22:	e005      	b.n	801ab30 <strstr+0x20>
 801ab24:	4294      	cmp	r4, r2
 801ab26:	d108      	bne.n	801ab3a <strstr+0x2a>
 801ab28:	460d      	mov	r5, r1
 801ab2a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801ab2e:	b902      	cbnz	r2, 801ab32 <strstr+0x22>
 801ab30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab32:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801ab36:	4297      	cmp	r7, r2
 801ab38:	d0f7      	beq.n	801ab2a <strstr+0x1a>
 801ab3a:	4633      	mov	r3, r6
 801ab3c:	e7ec      	b.n	801ab18 <strstr+0x8>
	...

0801ab40 <_strtoul_l.isra.0>:
 801ab40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab44:	468c      	mov	ip, r1
 801ab46:	4686      	mov	lr, r0
 801ab48:	4e3a      	ldr	r6, [pc, #232]	; (801ac34 <_strtoul_l.isra.0+0xf4>)
 801ab4a:	4660      	mov	r0, ip
 801ab4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ab50:	5da5      	ldrb	r5, [r4, r6]
 801ab52:	f015 0508 	ands.w	r5, r5, #8
 801ab56:	d1f8      	bne.n	801ab4a <_strtoul_l.isra.0+0xa>
 801ab58:	2c2d      	cmp	r4, #45	; 0x2d
 801ab5a:	d134      	bne.n	801abc6 <_strtoul_l.isra.0+0x86>
 801ab5c:	f04f 0801 	mov.w	r8, #1
 801ab60:	f89c 4000 	ldrb.w	r4, [ip]
 801ab64:	f100 0c02 	add.w	ip, r0, #2
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d05e      	beq.n	801ac2a <_strtoul_l.isra.0+0xea>
 801ab6c:	2b10      	cmp	r3, #16
 801ab6e:	d10c      	bne.n	801ab8a <_strtoul_l.isra.0+0x4a>
 801ab70:	2c30      	cmp	r4, #48	; 0x30
 801ab72:	d10a      	bne.n	801ab8a <_strtoul_l.isra.0+0x4a>
 801ab74:	f89c 0000 	ldrb.w	r0, [ip]
 801ab78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ab7c:	2858      	cmp	r0, #88	; 0x58
 801ab7e:	d14f      	bne.n	801ac20 <_strtoul_l.isra.0+0xe0>
 801ab80:	2310      	movs	r3, #16
 801ab82:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801ab86:	f10c 0c02 	add.w	ip, ip, #2
 801ab8a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ab8e:	fbb7 f7f3 	udiv	r7, r7, r3
 801ab92:	2500      	movs	r5, #0
 801ab94:	fb03 f907 	mul.w	r9, r3, r7
 801ab98:	4628      	mov	r0, r5
 801ab9a:	ea6f 0909 	mvn.w	r9, r9
 801ab9e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801aba2:	2e09      	cmp	r6, #9
 801aba4:	d818      	bhi.n	801abd8 <_strtoul_l.isra.0+0x98>
 801aba6:	4634      	mov	r4, r6
 801aba8:	42a3      	cmp	r3, r4
 801abaa:	dd24      	ble.n	801abf6 <_strtoul_l.isra.0+0xb6>
 801abac:	2d00      	cmp	r5, #0
 801abae:	db1f      	blt.n	801abf0 <_strtoul_l.isra.0+0xb0>
 801abb0:	4287      	cmp	r7, r0
 801abb2:	d31d      	bcc.n	801abf0 <_strtoul_l.isra.0+0xb0>
 801abb4:	d101      	bne.n	801abba <_strtoul_l.isra.0+0x7a>
 801abb6:	45a1      	cmp	r9, r4
 801abb8:	db1a      	blt.n	801abf0 <_strtoul_l.isra.0+0xb0>
 801abba:	2501      	movs	r5, #1
 801abbc:	fb00 4003 	mla	r0, r0, r3, r4
 801abc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801abc4:	e7eb      	b.n	801ab9e <_strtoul_l.isra.0+0x5e>
 801abc6:	2c2b      	cmp	r4, #43	; 0x2b
 801abc8:	bf08      	it	eq
 801abca:	f89c 4000 	ldrbeq.w	r4, [ip]
 801abce:	46a8      	mov	r8, r5
 801abd0:	bf08      	it	eq
 801abd2:	f100 0c02 	addeq.w	ip, r0, #2
 801abd6:	e7c7      	b.n	801ab68 <_strtoul_l.isra.0+0x28>
 801abd8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801abdc:	2e19      	cmp	r6, #25
 801abde:	d801      	bhi.n	801abe4 <_strtoul_l.isra.0+0xa4>
 801abe0:	3c37      	subs	r4, #55	; 0x37
 801abe2:	e7e1      	b.n	801aba8 <_strtoul_l.isra.0+0x68>
 801abe4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801abe8:	2e19      	cmp	r6, #25
 801abea:	d804      	bhi.n	801abf6 <_strtoul_l.isra.0+0xb6>
 801abec:	3c57      	subs	r4, #87	; 0x57
 801abee:	e7db      	b.n	801aba8 <_strtoul_l.isra.0+0x68>
 801abf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801abf4:	e7e4      	b.n	801abc0 <_strtoul_l.isra.0+0x80>
 801abf6:	2d00      	cmp	r5, #0
 801abf8:	da07      	bge.n	801ac0a <_strtoul_l.isra.0+0xca>
 801abfa:	2322      	movs	r3, #34	; 0x22
 801abfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac00:	f8ce 3000 	str.w	r3, [lr]
 801ac04:	b942      	cbnz	r2, 801ac18 <_strtoul_l.isra.0+0xd8>
 801ac06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac0a:	f1b8 0f00 	cmp.w	r8, #0
 801ac0e:	d000      	beq.n	801ac12 <_strtoul_l.isra.0+0xd2>
 801ac10:	4240      	negs	r0, r0
 801ac12:	2a00      	cmp	r2, #0
 801ac14:	d0f7      	beq.n	801ac06 <_strtoul_l.isra.0+0xc6>
 801ac16:	b10d      	cbz	r5, 801ac1c <_strtoul_l.isra.0+0xdc>
 801ac18:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801ac1c:	6011      	str	r1, [r2, #0]
 801ac1e:	e7f2      	b.n	801ac06 <_strtoul_l.isra.0+0xc6>
 801ac20:	2430      	movs	r4, #48	; 0x30
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d1b1      	bne.n	801ab8a <_strtoul_l.isra.0+0x4a>
 801ac26:	2308      	movs	r3, #8
 801ac28:	e7af      	b.n	801ab8a <_strtoul_l.isra.0+0x4a>
 801ac2a:	2c30      	cmp	r4, #48	; 0x30
 801ac2c:	d0a2      	beq.n	801ab74 <_strtoul_l.isra.0+0x34>
 801ac2e:	230a      	movs	r3, #10
 801ac30:	e7ab      	b.n	801ab8a <_strtoul_l.isra.0+0x4a>
 801ac32:	bf00      	nop
 801ac34:	0801d9bb 	.word	0x0801d9bb

0801ac38 <strtoul>:
 801ac38:	4613      	mov	r3, r2
 801ac3a:	460a      	mov	r2, r1
 801ac3c:	4601      	mov	r1, r0
 801ac3e:	4802      	ldr	r0, [pc, #8]	; (801ac48 <strtoul+0x10>)
 801ac40:	6800      	ldr	r0, [r0, #0]
 801ac42:	f7ff bf7d 	b.w	801ab40 <_strtoul_l.isra.0>
 801ac46:	bf00      	nop
 801ac48:	200002e4 	.word	0x200002e4

0801ac4c <_vsniprintf_r>:
 801ac4c:	b530      	push	{r4, r5, lr}
 801ac4e:	1e14      	subs	r4, r2, #0
 801ac50:	4605      	mov	r5, r0
 801ac52:	b09b      	sub	sp, #108	; 0x6c
 801ac54:	4618      	mov	r0, r3
 801ac56:	da05      	bge.n	801ac64 <_vsniprintf_r+0x18>
 801ac58:	238b      	movs	r3, #139	; 0x8b
 801ac5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac5e:	602b      	str	r3, [r5, #0]
 801ac60:	b01b      	add	sp, #108	; 0x6c
 801ac62:	bd30      	pop	{r4, r5, pc}
 801ac64:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ac68:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ac6c:	bf0c      	ite	eq
 801ac6e:	4623      	moveq	r3, r4
 801ac70:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ac74:	9302      	str	r3, [sp, #8]
 801ac76:	9305      	str	r3, [sp, #20]
 801ac78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac7c:	4602      	mov	r2, r0
 801ac7e:	9100      	str	r1, [sp, #0]
 801ac80:	9104      	str	r1, [sp, #16]
 801ac82:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ac86:	4669      	mov	r1, sp
 801ac88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ac8a:	4628      	mov	r0, r5
 801ac8c:	f000 f9da 	bl	801b044 <_svfiprintf_r>
 801ac90:	1c43      	adds	r3, r0, #1
 801ac92:	bfbc      	itt	lt
 801ac94:	238b      	movlt	r3, #139	; 0x8b
 801ac96:	602b      	strlt	r3, [r5, #0]
 801ac98:	2c00      	cmp	r4, #0
 801ac9a:	d0e1      	beq.n	801ac60 <_vsniprintf_r+0x14>
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	9b00      	ldr	r3, [sp, #0]
 801aca0:	701a      	strb	r2, [r3, #0]
 801aca2:	e7dd      	b.n	801ac60 <_vsniprintf_r+0x14>

0801aca4 <vsniprintf>:
 801aca4:	b507      	push	{r0, r1, r2, lr}
 801aca6:	9300      	str	r3, [sp, #0]
 801aca8:	4613      	mov	r3, r2
 801acaa:	460a      	mov	r2, r1
 801acac:	4601      	mov	r1, r0
 801acae:	4803      	ldr	r0, [pc, #12]	; (801acbc <vsniprintf+0x18>)
 801acb0:	6800      	ldr	r0, [r0, #0]
 801acb2:	f7ff ffcb 	bl	801ac4c <_vsniprintf_r>
 801acb6:	b003      	add	sp, #12
 801acb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801acbc:	200002e4 	.word	0x200002e4

0801acc0 <__assert_func>:
 801acc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801acc2:	4614      	mov	r4, r2
 801acc4:	461a      	mov	r2, r3
 801acc6:	4b09      	ldr	r3, [pc, #36]	; (801acec <__assert_func+0x2c>)
 801acc8:	4605      	mov	r5, r0
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	68d8      	ldr	r0, [r3, #12]
 801acce:	b14c      	cbz	r4, 801ace4 <__assert_func+0x24>
 801acd0:	4b07      	ldr	r3, [pc, #28]	; (801acf0 <__assert_func+0x30>)
 801acd2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801acd6:	9100      	str	r1, [sp, #0]
 801acd8:	462b      	mov	r3, r5
 801acda:	4906      	ldr	r1, [pc, #24]	; (801acf4 <__assert_func+0x34>)
 801acdc:	f000 f8f0 	bl	801aec0 <fiprintf>
 801ace0:	f000 feb4 	bl	801ba4c <abort>
 801ace4:	4b04      	ldr	r3, [pc, #16]	; (801acf8 <__assert_func+0x38>)
 801ace6:	461c      	mov	r4, r3
 801ace8:	e7f3      	b.n	801acd2 <__assert_func+0x12>
 801acea:	bf00      	nop
 801acec:	200002e4 	.word	0x200002e4
 801acf0:	0801db36 	.word	0x0801db36
 801acf4:	0801db43 	.word	0x0801db43
 801acf8:	0801db71 	.word	0x0801db71

0801acfc <__env_lock>:
 801acfc:	4801      	ldr	r0, [pc, #4]	; (801ad04 <__env_lock+0x8>)
 801acfe:	f000 b911 	b.w	801af24 <__retarget_lock_acquire_recursive>
 801ad02:	bf00      	nop
 801ad04:	2000e04a 	.word	0x2000e04a

0801ad08 <__env_unlock>:
 801ad08:	4801      	ldr	r0, [pc, #4]	; (801ad10 <__env_unlock+0x8>)
 801ad0a:	f000 b90c 	b.w	801af26 <__retarget_lock_release_recursive>
 801ad0e:	bf00      	nop
 801ad10:	2000e04a 	.word	0x2000e04a

0801ad14 <std>:
 801ad14:	2300      	movs	r3, #0
 801ad16:	b510      	push	{r4, lr}
 801ad18:	4604      	mov	r4, r0
 801ad1a:	e9c0 3300 	strd	r3, r3, [r0]
 801ad1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ad22:	6083      	str	r3, [r0, #8]
 801ad24:	8181      	strh	r1, [r0, #12]
 801ad26:	6643      	str	r3, [r0, #100]	; 0x64
 801ad28:	81c2      	strh	r2, [r0, #14]
 801ad2a:	6183      	str	r3, [r0, #24]
 801ad2c:	4619      	mov	r1, r3
 801ad2e:	2208      	movs	r2, #8
 801ad30:	305c      	adds	r0, #92	; 0x5c
 801ad32:	f7ff fd0b 	bl	801a74c <memset>
 801ad36:	4b05      	ldr	r3, [pc, #20]	; (801ad4c <std+0x38>)
 801ad38:	6224      	str	r4, [r4, #32]
 801ad3a:	6263      	str	r3, [r4, #36]	; 0x24
 801ad3c:	4b04      	ldr	r3, [pc, #16]	; (801ad50 <std+0x3c>)
 801ad3e:	62a3      	str	r3, [r4, #40]	; 0x28
 801ad40:	4b04      	ldr	r3, [pc, #16]	; (801ad54 <std+0x40>)
 801ad42:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ad44:	4b04      	ldr	r3, [pc, #16]	; (801ad58 <std+0x44>)
 801ad46:	6323      	str	r3, [r4, #48]	; 0x30
 801ad48:	bd10      	pop	{r4, pc}
 801ad4a:	bf00      	nop
 801ad4c:	0801b821 	.word	0x0801b821
 801ad50:	0801b843 	.word	0x0801b843
 801ad54:	0801b87b 	.word	0x0801b87b
 801ad58:	0801b89f 	.word	0x0801b89f

0801ad5c <_cleanup_r>:
 801ad5c:	4901      	ldr	r1, [pc, #4]	; (801ad64 <_cleanup_r+0x8>)
 801ad5e:	f000 b8c1 	b.w	801aee4 <_fwalk_reent>
 801ad62:	bf00      	nop
 801ad64:	0801bb89 	.word	0x0801bb89

0801ad68 <__sfmoreglue>:
 801ad68:	b570      	push	{r4, r5, r6, lr}
 801ad6a:	2568      	movs	r5, #104	; 0x68
 801ad6c:	1e4a      	subs	r2, r1, #1
 801ad6e:	4355      	muls	r5, r2
 801ad70:	460e      	mov	r6, r1
 801ad72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ad76:	f7ff fd4b 	bl	801a810 <_malloc_r>
 801ad7a:	4604      	mov	r4, r0
 801ad7c:	b140      	cbz	r0, 801ad90 <__sfmoreglue+0x28>
 801ad7e:	2100      	movs	r1, #0
 801ad80:	e9c0 1600 	strd	r1, r6, [r0]
 801ad84:	300c      	adds	r0, #12
 801ad86:	60a0      	str	r0, [r4, #8]
 801ad88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ad8c:	f7ff fcde 	bl	801a74c <memset>
 801ad90:	4620      	mov	r0, r4
 801ad92:	bd70      	pop	{r4, r5, r6, pc}

0801ad94 <__sfp_lock_acquire>:
 801ad94:	4801      	ldr	r0, [pc, #4]	; (801ad9c <__sfp_lock_acquire+0x8>)
 801ad96:	f000 b8c5 	b.w	801af24 <__retarget_lock_acquire_recursive>
 801ad9a:	bf00      	nop
 801ad9c:	2000e050 	.word	0x2000e050

0801ada0 <__sfp_lock_release>:
 801ada0:	4801      	ldr	r0, [pc, #4]	; (801ada8 <__sfp_lock_release+0x8>)
 801ada2:	f000 b8c0 	b.w	801af26 <__retarget_lock_release_recursive>
 801ada6:	bf00      	nop
 801ada8:	2000e050 	.word	0x2000e050

0801adac <__sinit_lock_acquire>:
 801adac:	4801      	ldr	r0, [pc, #4]	; (801adb4 <__sinit_lock_acquire+0x8>)
 801adae:	f000 b8b9 	b.w	801af24 <__retarget_lock_acquire_recursive>
 801adb2:	bf00      	nop
 801adb4:	2000e04b 	.word	0x2000e04b

0801adb8 <__sinit_lock_release>:
 801adb8:	4801      	ldr	r0, [pc, #4]	; (801adc0 <__sinit_lock_release+0x8>)
 801adba:	f000 b8b4 	b.w	801af26 <__retarget_lock_release_recursive>
 801adbe:	bf00      	nop
 801adc0:	2000e04b 	.word	0x2000e04b

0801adc4 <__sinit>:
 801adc4:	b510      	push	{r4, lr}
 801adc6:	4604      	mov	r4, r0
 801adc8:	f7ff fff0 	bl	801adac <__sinit_lock_acquire>
 801adcc:	69a3      	ldr	r3, [r4, #24]
 801adce:	b11b      	cbz	r3, 801add8 <__sinit+0x14>
 801add0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801add4:	f7ff bff0 	b.w	801adb8 <__sinit_lock_release>
 801add8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801addc:	6523      	str	r3, [r4, #80]	; 0x50
 801adde:	4b13      	ldr	r3, [pc, #76]	; (801ae2c <__sinit+0x68>)
 801ade0:	4a13      	ldr	r2, [pc, #76]	; (801ae30 <__sinit+0x6c>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	62a2      	str	r2, [r4, #40]	; 0x28
 801ade6:	42a3      	cmp	r3, r4
 801ade8:	bf08      	it	eq
 801adea:	2301      	moveq	r3, #1
 801adec:	4620      	mov	r0, r4
 801adee:	bf08      	it	eq
 801adf0:	61a3      	streq	r3, [r4, #24]
 801adf2:	f000 f81f 	bl	801ae34 <__sfp>
 801adf6:	6060      	str	r0, [r4, #4]
 801adf8:	4620      	mov	r0, r4
 801adfa:	f000 f81b 	bl	801ae34 <__sfp>
 801adfe:	60a0      	str	r0, [r4, #8]
 801ae00:	4620      	mov	r0, r4
 801ae02:	f000 f817 	bl	801ae34 <__sfp>
 801ae06:	2200      	movs	r2, #0
 801ae08:	2104      	movs	r1, #4
 801ae0a:	60e0      	str	r0, [r4, #12]
 801ae0c:	6860      	ldr	r0, [r4, #4]
 801ae0e:	f7ff ff81 	bl	801ad14 <std>
 801ae12:	2201      	movs	r2, #1
 801ae14:	2109      	movs	r1, #9
 801ae16:	68a0      	ldr	r0, [r4, #8]
 801ae18:	f7ff ff7c 	bl	801ad14 <std>
 801ae1c:	2202      	movs	r2, #2
 801ae1e:	2112      	movs	r1, #18
 801ae20:	68e0      	ldr	r0, [r4, #12]
 801ae22:	f7ff ff77 	bl	801ad14 <std>
 801ae26:	2301      	movs	r3, #1
 801ae28:	61a3      	str	r3, [r4, #24]
 801ae2a:	e7d1      	b.n	801add0 <__sinit+0xc>
 801ae2c:	0801dabc 	.word	0x0801dabc
 801ae30:	0801ad5d 	.word	0x0801ad5d

0801ae34 <__sfp>:
 801ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae36:	4607      	mov	r7, r0
 801ae38:	f7ff ffac 	bl	801ad94 <__sfp_lock_acquire>
 801ae3c:	4b1e      	ldr	r3, [pc, #120]	; (801aeb8 <__sfp+0x84>)
 801ae3e:	681e      	ldr	r6, [r3, #0]
 801ae40:	69b3      	ldr	r3, [r6, #24]
 801ae42:	b913      	cbnz	r3, 801ae4a <__sfp+0x16>
 801ae44:	4630      	mov	r0, r6
 801ae46:	f7ff ffbd 	bl	801adc4 <__sinit>
 801ae4a:	3648      	adds	r6, #72	; 0x48
 801ae4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ae50:	3b01      	subs	r3, #1
 801ae52:	d503      	bpl.n	801ae5c <__sfp+0x28>
 801ae54:	6833      	ldr	r3, [r6, #0]
 801ae56:	b30b      	cbz	r3, 801ae9c <__sfp+0x68>
 801ae58:	6836      	ldr	r6, [r6, #0]
 801ae5a:	e7f7      	b.n	801ae4c <__sfp+0x18>
 801ae5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ae60:	b9d5      	cbnz	r5, 801ae98 <__sfp+0x64>
 801ae62:	4b16      	ldr	r3, [pc, #88]	; (801aebc <__sfp+0x88>)
 801ae64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ae68:	60e3      	str	r3, [r4, #12]
 801ae6a:	6665      	str	r5, [r4, #100]	; 0x64
 801ae6c:	f000 f859 	bl	801af22 <__retarget_lock_init_recursive>
 801ae70:	f7ff ff96 	bl	801ada0 <__sfp_lock_release>
 801ae74:	2208      	movs	r2, #8
 801ae76:	4629      	mov	r1, r5
 801ae78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ae7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ae80:	6025      	str	r5, [r4, #0]
 801ae82:	61a5      	str	r5, [r4, #24]
 801ae84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ae88:	f7ff fc60 	bl	801a74c <memset>
 801ae8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ae90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ae94:	4620      	mov	r0, r4
 801ae96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae98:	3468      	adds	r4, #104	; 0x68
 801ae9a:	e7d9      	b.n	801ae50 <__sfp+0x1c>
 801ae9c:	2104      	movs	r1, #4
 801ae9e:	4638      	mov	r0, r7
 801aea0:	f7ff ff62 	bl	801ad68 <__sfmoreglue>
 801aea4:	4604      	mov	r4, r0
 801aea6:	6030      	str	r0, [r6, #0]
 801aea8:	2800      	cmp	r0, #0
 801aeaa:	d1d5      	bne.n	801ae58 <__sfp+0x24>
 801aeac:	f7ff ff78 	bl	801ada0 <__sfp_lock_release>
 801aeb0:	230c      	movs	r3, #12
 801aeb2:	603b      	str	r3, [r7, #0]
 801aeb4:	e7ee      	b.n	801ae94 <__sfp+0x60>
 801aeb6:	bf00      	nop
 801aeb8:	0801dabc 	.word	0x0801dabc
 801aebc:	ffff0001 	.word	0xffff0001

0801aec0 <fiprintf>:
 801aec0:	b40e      	push	{r1, r2, r3}
 801aec2:	b503      	push	{r0, r1, lr}
 801aec4:	4601      	mov	r1, r0
 801aec6:	ab03      	add	r3, sp, #12
 801aec8:	4805      	ldr	r0, [pc, #20]	; (801aee0 <fiprintf+0x20>)
 801aeca:	f853 2b04 	ldr.w	r2, [r3], #4
 801aece:	6800      	ldr	r0, [r0, #0]
 801aed0:	9301      	str	r3, [sp, #4]
 801aed2:	f000 f9df 	bl	801b294 <_vfiprintf_r>
 801aed6:	b002      	add	sp, #8
 801aed8:	f85d eb04 	ldr.w	lr, [sp], #4
 801aedc:	b003      	add	sp, #12
 801aede:	4770      	bx	lr
 801aee0:	200002e4 	.word	0x200002e4

0801aee4 <_fwalk_reent>:
 801aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aee8:	4606      	mov	r6, r0
 801aeea:	4688      	mov	r8, r1
 801aeec:	2700      	movs	r7, #0
 801aeee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801aef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801aef6:	f1b9 0901 	subs.w	r9, r9, #1
 801aefa:	d505      	bpl.n	801af08 <_fwalk_reent+0x24>
 801aefc:	6824      	ldr	r4, [r4, #0]
 801aefe:	2c00      	cmp	r4, #0
 801af00:	d1f7      	bne.n	801aef2 <_fwalk_reent+0xe>
 801af02:	4638      	mov	r0, r7
 801af04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801af08:	89ab      	ldrh	r3, [r5, #12]
 801af0a:	2b01      	cmp	r3, #1
 801af0c:	d907      	bls.n	801af1e <_fwalk_reent+0x3a>
 801af0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801af12:	3301      	adds	r3, #1
 801af14:	d003      	beq.n	801af1e <_fwalk_reent+0x3a>
 801af16:	4629      	mov	r1, r5
 801af18:	4630      	mov	r0, r6
 801af1a:	47c0      	blx	r8
 801af1c:	4307      	orrs	r7, r0
 801af1e:	3568      	adds	r5, #104	; 0x68
 801af20:	e7e9      	b.n	801aef6 <_fwalk_reent+0x12>

0801af22 <__retarget_lock_init_recursive>:
 801af22:	4770      	bx	lr

0801af24 <__retarget_lock_acquire_recursive>:
 801af24:	4770      	bx	lr

0801af26 <__retarget_lock_release_recursive>:
 801af26:	4770      	bx	lr

0801af28 <__malloc_lock>:
 801af28:	4801      	ldr	r0, [pc, #4]	; (801af30 <__malloc_lock+0x8>)
 801af2a:	f7ff bffb 	b.w	801af24 <__retarget_lock_acquire_recursive>
 801af2e:	bf00      	nop
 801af30:	2000e04c 	.word	0x2000e04c

0801af34 <__malloc_unlock>:
 801af34:	4801      	ldr	r0, [pc, #4]	; (801af3c <__malloc_unlock+0x8>)
 801af36:	f7ff bff6 	b.w	801af26 <__retarget_lock_release_recursive>
 801af3a:	bf00      	nop
 801af3c:	2000e04c 	.word	0x2000e04c

0801af40 <_realloc_r>:
 801af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af42:	4607      	mov	r7, r0
 801af44:	4614      	mov	r4, r2
 801af46:	460e      	mov	r6, r1
 801af48:	b921      	cbnz	r1, 801af54 <_realloc_r+0x14>
 801af4a:	4611      	mov	r1, r2
 801af4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801af50:	f7ff bc5e 	b.w	801a810 <_malloc_r>
 801af54:	b922      	cbnz	r2, 801af60 <_realloc_r+0x20>
 801af56:	f7ff fc0f 	bl	801a778 <_free_r>
 801af5a:	4625      	mov	r5, r4
 801af5c:	4628      	mov	r0, r5
 801af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af60:	f000 fed2 	bl	801bd08 <_malloc_usable_size_r>
 801af64:	42a0      	cmp	r0, r4
 801af66:	d20f      	bcs.n	801af88 <_realloc_r+0x48>
 801af68:	4621      	mov	r1, r4
 801af6a:	4638      	mov	r0, r7
 801af6c:	f7ff fc50 	bl	801a810 <_malloc_r>
 801af70:	4605      	mov	r5, r0
 801af72:	2800      	cmp	r0, #0
 801af74:	d0f2      	beq.n	801af5c <_realloc_r+0x1c>
 801af76:	4631      	mov	r1, r6
 801af78:	4622      	mov	r2, r4
 801af7a:	f7ff fbbf 	bl	801a6fc <memcpy>
 801af7e:	4631      	mov	r1, r6
 801af80:	4638      	mov	r0, r7
 801af82:	f7ff fbf9 	bl	801a778 <_free_r>
 801af86:	e7e9      	b.n	801af5c <_realloc_r+0x1c>
 801af88:	4635      	mov	r5, r6
 801af8a:	e7e7      	b.n	801af5c <_realloc_r+0x1c>

0801af8c <__ssputs_r>:
 801af8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af90:	688e      	ldr	r6, [r1, #8]
 801af92:	4682      	mov	sl, r0
 801af94:	429e      	cmp	r6, r3
 801af96:	460c      	mov	r4, r1
 801af98:	4690      	mov	r8, r2
 801af9a:	461f      	mov	r7, r3
 801af9c:	d838      	bhi.n	801b010 <__ssputs_r+0x84>
 801af9e:	898a      	ldrh	r2, [r1, #12]
 801afa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801afa4:	d032      	beq.n	801b00c <__ssputs_r+0x80>
 801afa6:	6825      	ldr	r5, [r4, #0]
 801afa8:	6909      	ldr	r1, [r1, #16]
 801afaa:	3301      	adds	r3, #1
 801afac:	eba5 0901 	sub.w	r9, r5, r1
 801afb0:	6965      	ldr	r5, [r4, #20]
 801afb2:	444b      	add	r3, r9
 801afb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801afb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801afbc:	106d      	asrs	r5, r5, #1
 801afbe:	429d      	cmp	r5, r3
 801afc0:	bf38      	it	cc
 801afc2:	461d      	movcc	r5, r3
 801afc4:	0553      	lsls	r3, r2, #21
 801afc6:	d531      	bpl.n	801b02c <__ssputs_r+0xa0>
 801afc8:	4629      	mov	r1, r5
 801afca:	f7ff fc21 	bl	801a810 <_malloc_r>
 801afce:	4606      	mov	r6, r0
 801afd0:	b950      	cbnz	r0, 801afe8 <__ssputs_r+0x5c>
 801afd2:	230c      	movs	r3, #12
 801afd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afd8:	f8ca 3000 	str.w	r3, [sl]
 801afdc:	89a3      	ldrh	r3, [r4, #12]
 801afde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afe2:	81a3      	strh	r3, [r4, #12]
 801afe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afe8:	464a      	mov	r2, r9
 801afea:	6921      	ldr	r1, [r4, #16]
 801afec:	f7ff fb86 	bl	801a6fc <memcpy>
 801aff0:	89a3      	ldrh	r3, [r4, #12]
 801aff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801aff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801affa:	81a3      	strh	r3, [r4, #12]
 801affc:	6126      	str	r6, [r4, #16]
 801affe:	444e      	add	r6, r9
 801b000:	6026      	str	r6, [r4, #0]
 801b002:	463e      	mov	r6, r7
 801b004:	6165      	str	r5, [r4, #20]
 801b006:	eba5 0509 	sub.w	r5, r5, r9
 801b00a:	60a5      	str	r5, [r4, #8]
 801b00c:	42be      	cmp	r6, r7
 801b00e:	d900      	bls.n	801b012 <__ssputs_r+0x86>
 801b010:	463e      	mov	r6, r7
 801b012:	4632      	mov	r2, r6
 801b014:	4641      	mov	r1, r8
 801b016:	6820      	ldr	r0, [r4, #0]
 801b018:	f7ff fb7e 	bl	801a718 <memmove>
 801b01c:	68a3      	ldr	r3, [r4, #8]
 801b01e:	6822      	ldr	r2, [r4, #0]
 801b020:	1b9b      	subs	r3, r3, r6
 801b022:	4432      	add	r2, r6
 801b024:	2000      	movs	r0, #0
 801b026:	60a3      	str	r3, [r4, #8]
 801b028:	6022      	str	r2, [r4, #0]
 801b02a:	e7db      	b.n	801afe4 <__ssputs_r+0x58>
 801b02c:	462a      	mov	r2, r5
 801b02e:	f7ff ff87 	bl	801af40 <_realloc_r>
 801b032:	4606      	mov	r6, r0
 801b034:	2800      	cmp	r0, #0
 801b036:	d1e1      	bne.n	801affc <__ssputs_r+0x70>
 801b038:	4650      	mov	r0, sl
 801b03a:	6921      	ldr	r1, [r4, #16]
 801b03c:	f7ff fb9c 	bl	801a778 <_free_r>
 801b040:	e7c7      	b.n	801afd2 <__ssputs_r+0x46>
	...

0801b044 <_svfiprintf_r>:
 801b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b048:	4698      	mov	r8, r3
 801b04a:	898b      	ldrh	r3, [r1, #12]
 801b04c:	4607      	mov	r7, r0
 801b04e:	061b      	lsls	r3, r3, #24
 801b050:	460d      	mov	r5, r1
 801b052:	4614      	mov	r4, r2
 801b054:	b09d      	sub	sp, #116	; 0x74
 801b056:	d50e      	bpl.n	801b076 <_svfiprintf_r+0x32>
 801b058:	690b      	ldr	r3, [r1, #16]
 801b05a:	b963      	cbnz	r3, 801b076 <_svfiprintf_r+0x32>
 801b05c:	2140      	movs	r1, #64	; 0x40
 801b05e:	f7ff fbd7 	bl	801a810 <_malloc_r>
 801b062:	6028      	str	r0, [r5, #0]
 801b064:	6128      	str	r0, [r5, #16]
 801b066:	b920      	cbnz	r0, 801b072 <_svfiprintf_r+0x2e>
 801b068:	230c      	movs	r3, #12
 801b06a:	603b      	str	r3, [r7, #0]
 801b06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b070:	e0d1      	b.n	801b216 <_svfiprintf_r+0x1d2>
 801b072:	2340      	movs	r3, #64	; 0x40
 801b074:	616b      	str	r3, [r5, #20]
 801b076:	2300      	movs	r3, #0
 801b078:	9309      	str	r3, [sp, #36]	; 0x24
 801b07a:	2320      	movs	r3, #32
 801b07c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b080:	2330      	movs	r3, #48	; 0x30
 801b082:	f04f 0901 	mov.w	r9, #1
 801b086:	f8cd 800c 	str.w	r8, [sp, #12]
 801b08a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801b230 <_svfiprintf_r+0x1ec>
 801b08e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b092:	4623      	mov	r3, r4
 801b094:	469a      	mov	sl, r3
 801b096:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b09a:	b10a      	cbz	r2, 801b0a0 <_svfiprintf_r+0x5c>
 801b09c:	2a25      	cmp	r2, #37	; 0x25
 801b09e:	d1f9      	bne.n	801b094 <_svfiprintf_r+0x50>
 801b0a0:	ebba 0b04 	subs.w	fp, sl, r4
 801b0a4:	d00b      	beq.n	801b0be <_svfiprintf_r+0x7a>
 801b0a6:	465b      	mov	r3, fp
 801b0a8:	4622      	mov	r2, r4
 801b0aa:	4629      	mov	r1, r5
 801b0ac:	4638      	mov	r0, r7
 801b0ae:	f7ff ff6d 	bl	801af8c <__ssputs_r>
 801b0b2:	3001      	adds	r0, #1
 801b0b4:	f000 80aa 	beq.w	801b20c <_svfiprintf_r+0x1c8>
 801b0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b0ba:	445a      	add	r2, fp
 801b0bc:	9209      	str	r2, [sp, #36]	; 0x24
 801b0be:	f89a 3000 	ldrb.w	r3, [sl]
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	f000 80a2 	beq.w	801b20c <_svfiprintf_r+0x1c8>
 801b0c8:	2300      	movs	r3, #0
 801b0ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b0d2:	f10a 0a01 	add.w	sl, sl, #1
 801b0d6:	9304      	str	r3, [sp, #16]
 801b0d8:	9307      	str	r3, [sp, #28]
 801b0da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b0de:	931a      	str	r3, [sp, #104]	; 0x68
 801b0e0:	4654      	mov	r4, sl
 801b0e2:	2205      	movs	r2, #5
 801b0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0e8:	4851      	ldr	r0, [pc, #324]	; (801b230 <_svfiprintf_r+0x1ec>)
 801b0ea:	f000 fdff 	bl	801bcec <memchr>
 801b0ee:	9a04      	ldr	r2, [sp, #16]
 801b0f0:	b9d8      	cbnz	r0, 801b12a <_svfiprintf_r+0xe6>
 801b0f2:	06d0      	lsls	r0, r2, #27
 801b0f4:	bf44      	itt	mi
 801b0f6:	2320      	movmi	r3, #32
 801b0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b0fc:	0711      	lsls	r1, r2, #28
 801b0fe:	bf44      	itt	mi
 801b100:	232b      	movmi	r3, #43	; 0x2b
 801b102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b106:	f89a 3000 	ldrb.w	r3, [sl]
 801b10a:	2b2a      	cmp	r3, #42	; 0x2a
 801b10c:	d015      	beq.n	801b13a <_svfiprintf_r+0xf6>
 801b10e:	4654      	mov	r4, sl
 801b110:	2000      	movs	r0, #0
 801b112:	f04f 0c0a 	mov.w	ip, #10
 801b116:	9a07      	ldr	r2, [sp, #28]
 801b118:	4621      	mov	r1, r4
 801b11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b11e:	3b30      	subs	r3, #48	; 0x30
 801b120:	2b09      	cmp	r3, #9
 801b122:	d94e      	bls.n	801b1c2 <_svfiprintf_r+0x17e>
 801b124:	b1b0      	cbz	r0, 801b154 <_svfiprintf_r+0x110>
 801b126:	9207      	str	r2, [sp, #28]
 801b128:	e014      	b.n	801b154 <_svfiprintf_r+0x110>
 801b12a:	eba0 0308 	sub.w	r3, r0, r8
 801b12e:	fa09 f303 	lsl.w	r3, r9, r3
 801b132:	4313      	orrs	r3, r2
 801b134:	46a2      	mov	sl, r4
 801b136:	9304      	str	r3, [sp, #16]
 801b138:	e7d2      	b.n	801b0e0 <_svfiprintf_r+0x9c>
 801b13a:	9b03      	ldr	r3, [sp, #12]
 801b13c:	1d19      	adds	r1, r3, #4
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	9103      	str	r1, [sp, #12]
 801b142:	2b00      	cmp	r3, #0
 801b144:	bfbb      	ittet	lt
 801b146:	425b      	neglt	r3, r3
 801b148:	f042 0202 	orrlt.w	r2, r2, #2
 801b14c:	9307      	strge	r3, [sp, #28]
 801b14e:	9307      	strlt	r3, [sp, #28]
 801b150:	bfb8      	it	lt
 801b152:	9204      	strlt	r2, [sp, #16]
 801b154:	7823      	ldrb	r3, [r4, #0]
 801b156:	2b2e      	cmp	r3, #46	; 0x2e
 801b158:	d10c      	bne.n	801b174 <_svfiprintf_r+0x130>
 801b15a:	7863      	ldrb	r3, [r4, #1]
 801b15c:	2b2a      	cmp	r3, #42	; 0x2a
 801b15e:	d135      	bne.n	801b1cc <_svfiprintf_r+0x188>
 801b160:	9b03      	ldr	r3, [sp, #12]
 801b162:	3402      	adds	r4, #2
 801b164:	1d1a      	adds	r2, r3, #4
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	9203      	str	r2, [sp, #12]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	bfb8      	it	lt
 801b16e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b172:	9305      	str	r3, [sp, #20]
 801b174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b240 <_svfiprintf_r+0x1fc>
 801b178:	2203      	movs	r2, #3
 801b17a:	4650      	mov	r0, sl
 801b17c:	7821      	ldrb	r1, [r4, #0]
 801b17e:	f000 fdb5 	bl	801bcec <memchr>
 801b182:	b140      	cbz	r0, 801b196 <_svfiprintf_r+0x152>
 801b184:	2340      	movs	r3, #64	; 0x40
 801b186:	eba0 000a 	sub.w	r0, r0, sl
 801b18a:	fa03 f000 	lsl.w	r0, r3, r0
 801b18e:	9b04      	ldr	r3, [sp, #16]
 801b190:	3401      	adds	r4, #1
 801b192:	4303      	orrs	r3, r0
 801b194:	9304      	str	r3, [sp, #16]
 801b196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b19a:	2206      	movs	r2, #6
 801b19c:	4825      	ldr	r0, [pc, #148]	; (801b234 <_svfiprintf_r+0x1f0>)
 801b19e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b1a2:	f000 fda3 	bl	801bcec <memchr>
 801b1a6:	2800      	cmp	r0, #0
 801b1a8:	d038      	beq.n	801b21c <_svfiprintf_r+0x1d8>
 801b1aa:	4b23      	ldr	r3, [pc, #140]	; (801b238 <_svfiprintf_r+0x1f4>)
 801b1ac:	bb1b      	cbnz	r3, 801b1f6 <_svfiprintf_r+0x1b2>
 801b1ae:	9b03      	ldr	r3, [sp, #12]
 801b1b0:	3307      	adds	r3, #7
 801b1b2:	f023 0307 	bic.w	r3, r3, #7
 801b1b6:	3308      	adds	r3, #8
 801b1b8:	9303      	str	r3, [sp, #12]
 801b1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1bc:	4433      	add	r3, r6
 801b1be:	9309      	str	r3, [sp, #36]	; 0x24
 801b1c0:	e767      	b.n	801b092 <_svfiprintf_r+0x4e>
 801b1c2:	460c      	mov	r4, r1
 801b1c4:	2001      	movs	r0, #1
 801b1c6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b1ca:	e7a5      	b.n	801b118 <_svfiprintf_r+0xd4>
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	f04f 0c0a 	mov.w	ip, #10
 801b1d2:	4619      	mov	r1, r3
 801b1d4:	3401      	adds	r4, #1
 801b1d6:	9305      	str	r3, [sp, #20]
 801b1d8:	4620      	mov	r0, r4
 801b1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b1de:	3a30      	subs	r2, #48	; 0x30
 801b1e0:	2a09      	cmp	r2, #9
 801b1e2:	d903      	bls.n	801b1ec <_svfiprintf_r+0x1a8>
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d0c5      	beq.n	801b174 <_svfiprintf_r+0x130>
 801b1e8:	9105      	str	r1, [sp, #20]
 801b1ea:	e7c3      	b.n	801b174 <_svfiprintf_r+0x130>
 801b1ec:	4604      	mov	r4, r0
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b1f4:	e7f0      	b.n	801b1d8 <_svfiprintf_r+0x194>
 801b1f6:	ab03      	add	r3, sp, #12
 801b1f8:	9300      	str	r3, [sp, #0]
 801b1fa:	462a      	mov	r2, r5
 801b1fc:	4638      	mov	r0, r7
 801b1fe:	4b0f      	ldr	r3, [pc, #60]	; (801b23c <_svfiprintf_r+0x1f8>)
 801b200:	a904      	add	r1, sp, #16
 801b202:	f3af 8000 	nop.w
 801b206:	1c42      	adds	r2, r0, #1
 801b208:	4606      	mov	r6, r0
 801b20a:	d1d6      	bne.n	801b1ba <_svfiprintf_r+0x176>
 801b20c:	89ab      	ldrh	r3, [r5, #12]
 801b20e:	065b      	lsls	r3, r3, #25
 801b210:	f53f af2c 	bmi.w	801b06c <_svfiprintf_r+0x28>
 801b214:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b216:	b01d      	add	sp, #116	; 0x74
 801b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b21c:	ab03      	add	r3, sp, #12
 801b21e:	9300      	str	r3, [sp, #0]
 801b220:	462a      	mov	r2, r5
 801b222:	4638      	mov	r0, r7
 801b224:	4b05      	ldr	r3, [pc, #20]	; (801b23c <_svfiprintf_r+0x1f8>)
 801b226:	a904      	add	r1, sp, #16
 801b228:	f000 f9d4 	bl	801b5d4 <_printf_i>
 801b22c:	e7eb      	b.n	801b206 <_svfiprintf_r+0x1c2>
 801b22e:	bf00      	nop
 801b230:	0801dbd4 	.word	0x0801dbd4
 801b234:	0801dbde 	.word	0x0801dbde
 801b238:	00000000 	.word	0x00000000
 801b23c:	0801af8d 	.word	0x0801af8d
 801b240:	0801dbda 	.word	0x0801dbda

0801b244 <__sfputc_r>:
 801b244:	6893      	ldr	r3, [r2, #8]
 801b246:	b410      	push	{r4}
 801b248:	3b01      	subs	r3, #1
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	6093      	str	r3, [r2, #8]
 801b24e:	da07      	bge.n	801b260 <__sfputc_r+0x1c>
 801b250:	6994      	ldr	r4, [r2, #24]
 801b252:	42a3      	cmp	r3, r4
 801b254:	db01      	blt.n	801b25a <__sfputc_r+0x16>
 801b256:	290a      	cmp	r1, #10
 801b258:	d102      	bne.n	801b260 <__sfputc_r+0x1c>
 801b25a:	bc10      	pop	{r4}
 801b25c:	f000 bb24 	b.w	801b8a8 <__swbuf_r>
 801b260:	6813      	ldr	r3, [r2, #0]
 801b262:	1c58      	adds	r0, r3, #1
 801b264:	6010      	str	r0, [r2, #0]
 801b266:	7019      	strb	r1, [r3, #0]
 801b268:	4608      	mov	r0, r1
 801b26a:	bc10      	pop	{r4}
 801b26c:	4770      	bx	lr

0801b26e <__sfputs_r>:
 801b26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b270:	4606      	mov	r6, r0
 801b272:	460f      	mov	r7, r1
 801b274:	4614      	mov	r4, r2
 801b276:	18d5      	adds	r5, r2, r3
 801b278:	42ac      	cmp	r4, r5
 801b27a:	d101      	bne.n	801b280 <__sfputs_r+0x12>
 801b27c:	2000      	movs	r0, #0
 801b27e:	e007      	b.n	801b290 <__sfputs_r+0x22>
 801b280:	463a      	mov	r2, r7
 801b282:	4630      	mov	r0, r6
 801b284:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b288:	f7ff ffdc 	bl	801b244 <__sfputc_r>
 801b28c:	1c43      	adds	r3, r0, #1
 801b28e:	d1f3      	bne.n	801b278 <__sfputs_r+0xa>
 801b290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b294 <_vfiprintf_r>:
 801b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b298:	460d      	mov	r5, r1
 801b29a:	4614      	mov	r4, r2
 801b29c:	4698      	mov	r8, r3
 801b29e:	4606      	mov	r6, r0
 801b2a0:	b09d      	sub	sp, #116	; 0x74
 801b2a2:	b118      	cbz	r0, 801b2ac <_vfiprintf_r+0x18>
 801b2a4:	6983      	ldr	r3, [r0, #24]
 801b2a6:	b90b      	cbnz	r3, 801b2ac <_vfiprintf_r+0x18>
 801b2a8:	f7ff fd8c 	bl	801adc4 <__sinit>
 801b2ac:	4b89      	ldr	r3, [pc, #548]	; (801b4d4 <_vfiprintf_r+0x240>)
 801b2ae:	429d      	cmp	r5, r3
 801b2b0:	d11b      	bne.n	801b2ea <_vfiprintf_r+0x56>
 801b2b2:	6875      	ldr	r5, [r6, #4]
 801b2b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2b6:	07d9      	lsls	r1, r3, #31
 801b2b8:	d405      	bmi.n	801b2c6 <_vfiprintf_r+0x32>
 801b2ba:	89ab      	ldrh	r3, [r5, #12]
 801b2bc:	059a      	lsls	r2, r3, #22
 801b2be:	d402      	bmi.n	801b2c6 <_vfiprintf_r+0x32>
 801b2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b2c2:	f7ff fe2f 	bl	801af24 <__retarget_lock_acquire_recursive>
 801b2c6:	89ab      	ldrh	r3, [r5, #12]
 801b2c8:	071b      	lsls	r3, r3, #28
 801b2ca:	d501      	bpl.n	801b2d0 <_vfiprintf_r+0x3c>
 801b2cc:	692b      	ldr	r3, [r5, #16]
 801b2ce:	b9eb      	cbnz	r3, 801b30c <_vfiprintf_r+0x78>
 801b2d0:	4629      	mov	r1, r5
 801b2d2:	4630      	mov	r0, r6
 801b2d4:	f000 fb4c 	bl	801b970 <__swsetup_r>
 801b2d8:	b1c0      	cbz	r0, 801b30c <_vfiprintf_r+0x78>
 801b2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2dc:	07dc      	lsls	r4, r3, #31
 801b2de:	d50e      	bpl.n	801b2fe <_vfiprintf_r+0x6a>
 801b2e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2e4:	b01d      	add	sp, #116	; 0x74
 801b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2ea:	4b7b      	ldr	r3, [pc, #492]	; (801b4d8 <_vfiprintf_r+0x244>)
 801b2ec:	429d      	cmp	r5, r3
 801b2ee:	d101      	bne.n	801b2f4 <_vfiprintf_r+0x60>
 801b2f0:	68b5      	ldr	r5, [r6, #8]
 801b2f2:	e7df      	b.n	801b2b4 <_vfiprintf_r+0x20>
 801b2f4:	4b79      	ldr	r3, [pc, #484]	; (801b4dc <_vfiprintf_r+0x248>)
 801b2f6:	429d      	cmp	r5, r3
 801b2f8:	bf08      	it	eq
 801b2fa:	68f5      	ldreq	r5, [r6, #12]
 801b2fc:	e7da      	b.n	801b2b4 <_vfiprintf_r+0x20>
 801b2fe:	89ab      	ldrh	r3, [r5, #12]
 801b300:	0598      	lsls	r0, r3, #22
 801b302:	d4ed      	bmi.n	801b2e0 <_vfiprintf_r+0x4c>
 801b304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b306:	f7ff fe0e 	bl	801af26 <__retarget_lock_release_recursive>
 801b30a:	e7e9      	b.n	801b2e0 <_vfiprintf_r+0x4c>
 801b30c:	2300      	movs	r3, #0
 801b30e:	9309      	str	r3, [sp, #36]	; 0x24
 801b310:	2320      	movs	r3, #32
 801b312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b316:	2330      	movs	r3, #48	; 0x30
 801b318:	f04f 0901 	mov.w	r9, #1
 801b31c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b320:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801b4e0 <_vfiprintf_r+0x24c>
 801b324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b328:	4623      	mov	r3, r4
 801b32a:	469a      	mov	sl, r3
 801b32c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b330:	b10a      	cbz	r2, 801b336 <_vfiprintf_r+0xa2>
 801b332:	2a25      	cmp	r2, #37	; 0x25
 801b334:	d1f9      	bne.n	801b32a <_vfiprintf_r+0x96>
 801b336:	ebba 0b04 	subs.w	fp, sl, r4
 801b33a:	d00b      	beq.n	801b354 <_vfiprintf_r+0xc0>
 801b33c:	465b      	mov	r3, fp
 801b33e:	4622      	mov	r2, r4
 801b340:	4629      	mov	r1, r5
 801b342:	4630      	mov	r0, r6
 801b344:	f7ff ff93 	bl	801b26e <__sfputs_r>
 801b348:	3001      	adds	r0, #1
 801b34a:	f000 80aa 	beq.w	801b4a2 <_vfiprintf_r+0x20e>
 801b34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b350:	445a      	add	r2, fp
 801b352:	9209      	str	r2, [sp, #36]	; 0x24
 801b354:	f89a 3000 	ldrb.w	r3, [sl]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	f000 80a2 	beq.w	801b4a2 <_vfiprintf_r+0x20e>
 801b35e:	2300      	movs	r3, #0
 801b360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b368:	f10a 0a01 	add.w	sl, sl, #1
 801b36c:	9304      	str	r3, [sp, #16]
 801b36e:	9307      	str	r3, [sp, #28]
 801b370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b374:	931a      	str	r3, [sp, #104]	; 0x68
 801b376:	4654      	mov	r4, sl
 801b378:	2205      	movs	r2, #5
 801b37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b37e:	4858      	ldr	r0, [pc, #352]	; (801b4e0 <_vfiprintf_r+0x24c>)
 801b380:	f000 fcb4 	bl	801bcec <memchr>
 801b384:	9a04      	ldr	r2, [sp, #16]
 801b386:	b9d8      	cbnz	r0, 801b3c0 <_vfiprintf_r+0x12c>
 801b388:	06d1      	lsls	r1, r2, #27
 801b38a:	bf44      	itt	mi
 801b38c:	2320      	movmi	r3, #32
 801b38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b392:	0713      	lsls	r3, r2, #28
 801b394:	bf44      	itt	mi
 801b396:	232b      	movmi	r3, #43	; 0x2b
 801b398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b39c:	f89a 3000 	ldrb.w	r3, [sl]
 801b3a0:	2b2a      	cmp	r3, #42	; 0x2a
 801b3a2:	d015      	beq.n	801b3d0 <_vfiprintf_r+0x13c>
 801b3a4:	4654      	mov	r4, sl
 801b3a6:	2000      	movs	r0, #0
 801b3a8:	f04f 0c0a 	mov.w	ip, #10
 801b3ac:	9a07      	ldr	r2, [sp, #28]
 801b3ae:	4621      	mov	r1, r4
 801b3b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3b4:	3b30      	subs	r3, #48	; 0x30
 801b3b6:	2b09      	cmp	r3, #9
 801b3b8:	d94e      	bls.n	801b458 <_vfiprintf_r+0x1c4>
 801b3ba:	b1b0      	cbz	r0, 801b3ea <_vfiprintf_r+0x156>
 801b3bc:	9207      	str	r2, [sp, #28]
 801b3be:	e014      	b.n	801b3ea <_vfiprintf_r+0x156>
 801b3c0:	eba0 0308 	sub.w	r3, r0, r8
 801b3c4:	fa09 f303 	lsl.w	r3, r9, r3
 801b3c8:	4313      	orrs	r3, r2
 801b3ca:	46a2      	mov	sl, r4
 801b3cc:	9304      	str	r3, [sp, #16]
 801b3ce:	e7d2      	b.n	801b376 <_vfiprintf_r+0xe2>
 801b3d0:	9b03      	ldr	r3, [sp, #12]
 801b3d2:	1d19      	adds	r1, r3, #4
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	9103      	str	r1, [sp, #12]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	bfbb      	ittet	lt
 801b3dc:	425b      	neglt	r3, r3
 801b3de:	f042 0202 	orrlt.w	r2, r2, #2
 801b3e2:	9307      	strge	r3, [sp, #28]
 801b3e4:	9307      	strlt	r3, [sp, #28]
 801b3e6:	bfb8      	it	lt
 801b3e8:	9204      	strlt	r2, [sp, #16]
 801b3ea:	7823      	ldrb	r3, [r4, #0]
 801b3ec:	2b2e      	cmp	r3, #46	; 0x2e
 801b3ee:	d10c      	bne.n	801b40a <_vfiprintf_r+0x176>
 801b3f0:	7863      	ldrb	r3, [r4, #1]
 801b3f2:	2b2a      	cmp	r3, #42	; 0x2a
 801b3f4:	d135      	bne.n	801b462 <_vfiprintf_r+0x1ce>
 801b3f6:	9b03      	ldr	r3, [sp, #12]
 801b3f8:	3402      	adds	r4, #2
 801b3fa:	1d1a      	adds	r2, r3, #4
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	9203      	str	r2, [sp, #12]
 801b400:	2b00      	cmp	r3, #0
 801b402:	bfb8      	it	lt
 801b404:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b408:	9305      	str	r3, [sp, #20]
 801b40a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b4f0 <_vfiprintf_r+0x25c>
 801b40e:	2203      	movs	r2, #3
 801b410:	4650      	mov	r0, sl
 801b412:	7821      	ldrb	r1, [r4, #0]
 801b414:	f000 fc6a 	bl	801bcec <memchr>
 801b418:	b140      	cbz	r0, 801b42c <_vfiprintf_r+0x198>
 801b41a:	2340      	movs	r3, #64	; 0x40
 801b41c:	eba0 000a 	sub.w	r0, r0, sl
 801b420:	fa03 f000 	lsl.w	r0, r3, r0
 801b424:	9b04      	ldr	r3, [sp, #16]
 801b426:	3401      	adds	r4, #1
 801b428:	4303      	orrs	r3, r0
 801b42a:	9304      	str	r3, [sp, #16]
 801b42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b430:	2206      	movs	r2, #6
 801b432:	482c      	ldr	r0, [pc, #176]	; (801b4e4 <_vfiprintf_r+0x250>)
 801b434:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b438:	f000 fc58 	bl	801bcec <memchr>
 801b43c:	2800      	cmp	r0, #0
 801b43e:	d03f      	beq.n	801b4c0 <_vfiprintf_r+0x22c>
 801b440:	4b29      	ldr	r3, [pc, #164]	; (801b4e8 <_vfiprintf_r+0x254>)
 801b442:	bb1b      	cbnz	r3, 801b48c <_vfiprintf_r+0x1f8>
 801b444:	9b03      	ldr	r3, [sp, #12]
 801b446:	3307      	adds	r3, #7
 801b448:	f023 0307 	bic.w	r3, r3, #7
 801b44c:	3308      	adds	r3, #8
 801b44e:	9303      	str	r3, [sp, #12]
 801b450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b452:	443b      	add	r3, r7
 801b454:	9309      	str	r3, [sp, #36]	; 0x24
 801b456:	e767      	b.n	801b328 <_vfiprintf_r+0x94>
 801b458:	460c      	mov	r4, r1
 801b45a:	2001      	movs	r0, #1
 801b45c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b460:	e7a5      	b.n	801b3ae <_vfiprintf_r+0x11a>
 801b462:	2300      	movs	r3, #0
 801b464:	f04f 0c0a 	mov.w	ip, #10
 801b468:	4619      	mov	r1, r3
 801b46a:	3401      	adds	r4, #1
 801b46c:	9305      	str	r3, [sp, #20]
 801b46e:	4620      	mov	r0, r4
 801b470:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b474:	3a30      	subs	r2, #48	; 0x30
 801b476:	2a09      	cmp	r2, #9
 801b478:	d903      	bls.n	801b482 <_vfiprintf_r+0x1ee>
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	d0c5      	beq.n	801b40a <_vfiprintf_r+0x176>
 801b47e:	9105      	str	r1, [sp, #20]
 801b480:	e7c3      	b.n	801b40a <_vfiprintf_r+0x176>
 801b482:	4604      	mov	r4, r0
 801b484:	2301      	movs	r3, #1
 801b486:	fb0c 2101 	mla	r1, ip, r1, r2
 801b48a:	e7f0      	b.n	801b46e <_vfiprintf_r+0x1da>
 801b48c:	ab03      	add	r3, sp, #12
 801b48e:	9300      	str	r3, [sp, #0]
 801b490:	462a      	mov	r2, r5
 801b492:	4630      	mov	r0, r6
 801b494:	4b15      	ldr	r3, [pc, #84]	; (801b4ec <_vfiprintf_r+0x258>)
 801b496:	a904      	add	r1, sp, #16
 801b498:	f3af 8000 	nop.w
 801b49c:	4607      	mov	r7, r0
 801b49e:	1c78      	adds	r0, r7, #1
 801b4a0:	d1d6      	bne.n	801b450 <_vfiprintf_r+0x1bc>
 801b4a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4a4:	07d9      	lsls	r1, r3, #31
 801b4a6:	d405      	bmi.n	801b4b4 <_vfiprintf_r+0x220>
 801b4a8:	89ab      	ldrh	r3, [r5, #12]
 801b4aa:	059a      	lsls	r2, r3, #22
 801b4ac:	d402      	bmi.n	801b4b4 <_vfiprintf_r+0x220>
 801b4ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4b0:	f7ff fd39 	bl	801af26 <__retarget_lock_release_recursive>
 801b4b4:	89ab      	ldrh	r3, [r5, #12]
 801b4b6:	065b      	lsls	r3, r3, #25
 801b4b8:	f53f af12 	bmi.w	801b2e0 <_vfiprintf_r+0x4c>
 801b4bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b4be:	e711      	b.n	801b2e4 <_vfiprintf_r+0x50>
 801b4c0:	ab03      	add	r3, sp, #12
 801b4c2:	9300      	str	r3, [sp, #0]
 801b4c4:	462a      	mov	r2, r5
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	4b08      	ldr	r3, [pc, #32]	; (801b4ec <_vfiprintf_r+0x258>)
 801b4ca:	a904      	add	r1, sp, #16
 801b4cc:	f000 f882 	bl	801b5d4 <_printf_i>
 801b4d0:	e7e4      	b.n	801b49c <_vfiprintf_r+0x208>
 801b4d2:	bf00      	nop
 801b4d4:	0801db94 	.word	0x0801db94
 801b4d8:	0801dbb4 	.word	0x0801dbb4
 801b4dc:	0801db74 	.word	0x0801db74
 801b4e0:	0801dbd4 	.word	0x0801dbd4
 801b4e4:	0801dbde 	.word	0x0801dbde
 801b4e8:	00000000 	.word	0x00000000
 801b4ec:	0801b26f 	.word	0x0801b26f
 801b4f0:	0801dbda 	.word	0x0801dbda

0801b4f4 <_printf_common>:
 801b4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4f8:	4616      	mov	r6, r2
 801b4fa:	4699      	mov	r9, r3
 801b4fc:	688a      	ldr	r2, [r1, #8]
 801b4fe:	690b      	ldr	r3, [r1, #16]
 801b500:	4607      	mov	r7, r0
 801b502:	4293      	cmp	r3, r2
 801b504:	bfb8      	it	lt
 801b506:	4613      	movlt	r3, r2
 801b508:	6033      	str	r3, [r6, #0]
 801b50a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b50e:	460c      	mov	r4, r1
 801b510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b514:	b10a      	cbz	r2, 801b51a <_printf_common+0x26>
 801b516:	3301      	adds	r3, #1
 801b518:	6033      	str	r3, [r6, #0]
 801b51a:	6823      	ldr	r3, [r4, #0]
 801b51c:	0699      	lsls	r1, r3, #26
 801b51e:	bf42      	ittt	mi
 801b520:	6833      	ldrmi	r3, [r6, #0]
 801b522:	3302      	addmi	r3, #2
 801b524:	6033      	strmi	r3, [r6, #0]
 801b526:	6825      	ldr	r5, [r4, #0]
 801b528:	f015 0506 	ands.w	r5, r5, #6
 801b52c:	d106      	bne.n	801b53c <_printf_common+0x48>
 801b52e:	f104 0a19 	add.w	sl, r4, #25
 801b532:	68e3      	ldr	r3, [r4, #12]
 801b534:	6832      	ldr	r2, [r6, #0]
 801b536:	1a9b      	subs	r3, r3, r2
 801b538:	42ab      	cmp	r3, r5
 801b53a:	dc28      	bgt.n	801b58e <_printf_common+0x9a>
 801b53c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b540:	1e13      	subs	r3, r2, #0
 801b542:	6822      	ldr	r2, [r4, #0]
 801b544:	bf18      	it	ne
 801b546:	2301      	movne	r3, #1
 801b548:	0692      	lsls	r2, r2, #26
 801b54a:	d42d      	bmi.n	801b5a8 <_printf_common+0xb4>
 801b54c:	4649      	mov	r1, r9
 801b54e:	4638      	mov	r0, r7
 801b550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b554:	47c0      	blx	r8
 801b556:	3001      	adds	r0, #1
 801b558:	d020      	beq.n	801b59c <_printf_common+0xa8>
 801b55a:	6823      	ldr	r3, [r4, #0]
 801b55c:	68e5      	ldr	r5, [r4, #12]
 801b55e:	f003 0306 	and.w	r3, r3, #6
 801b562:	2b04      	cmp	r3, #4
 801b564:	bf18      	it	ne
 801b566:	2500      	movne	r5, #0
 801b568:	6832      	ldr	r2, [r6, #0]
 801b56a:	f04f 0600 	mov.w	r6, #0
 801b56e:	68a3      	ldr	r3, [r4, #8]
 801b570:	bf08      	it	eq
 801b572:	1aad      	subeq	r5, r5, r2
 801b574:	6922      	ldr	r2, [r4, #16]
 801b576:	bf08      	it	eq
 801b578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b57c:	4293      	cmp	r3, r2
 801b57e:	bfc4      	itt	gt
 801b580:	1a9b      	subgt	r3, r3, r2
 801b582:	18ed      	addgt	r5, r5, r3
 801b584:	341a      	adds	r4, #26
 801b586:	42b5      	cmp	r5, r6
 801b588:	d11a      	bne.n	801b5c0 <_printf_common+0xcc>
 801b58a:	2000      	movs	r0, #0
 801b58c:	e008      	b.n	801b5a0 <_printf_common+0xac>
 801b58e:	2301      	movs	r3, #1
 801b590:	4652      	mov	r2, sl
 801b592:	4649      	mov	r1, r9
 801b594:	4638      	mov	r0, r7
 801b596:	47c0      	blx	r8
 801b598:	3001      	adds	r0, #1
 801b59a:	d103      	bne.n	801b5a4 <_printf_common+0xb0>
 801b59c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5a4:	3501      	adds	r5, #1
 801b5a6:	e7c4      	b.n	801b532 <_printf_common+0x3e>
 801b5a8:	2030      	movs	r0, #48	; 0x30
 801b5aa:	18e1      	adds	r1, r4, r3
 801b5ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b5b0:	1c5a      	adds	r2, r3, #1
 801b5b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b5b6:	4422      	add	r2, r4
 801b5b8:	3302      	adds	r3, #2
 801b5ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b5be:	e7c5      	b.n	801b54c <_printf_common+0x58>
 801b5c0:	2301      	movs	r3, #1
 801b5c2:	4622      	mov	r2, r4
 801b5c4:	4649      	mov	r1, r9
 801b5c6:	4638      	mov	r0, r7
 801b5c8:	47c0      	blx	r8
 801b5ca:	3001      	adds	r0, #1
 801b5cc:	d0e6      	beq.n	801b59c <_printf_common+0xa8>
 801b5ce:	3601      	adds	r6, #1
 801b5d0:	e7d9      	b.n	801b586 <_printf_common+0x92>
	...

0801b5d4 <_printf_i>:
 801b5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b5d8:	460c      	mov	r4, r1
 801b5da:	7e27      	ldrb	r7, [r4, #24]
 801b5dc:	4691      	mov	r9, r2
 801b5de:	2f78      	cmp	r7, #120	; 0x78
 801b5e0:	4680      	mov	r8, r0
 801b5e2:	469a      	mov	sl, r3
 801b5e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b5e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b5ea:	d807      	bhi.n	801b5fc <_printf_i+0x28>
 801b5ec:	2f62      	cmp	r7, #98	; 0x62
 801b5ee:	d80a      	bhi.n	801b606 <_printf_i+0x32>
 801b5f0:	2f00      	cmp	r7, #0
 801b5f2:	f000 80d9 	beq.w	801b7a8 <_printf_i+0x1d4>
 801b5f6:	2f58      	cmp	r7, #88	; 0x58
 801b5f8:	f000 80a4 	beq.w	801b744 <_printf_i+0x170>
 801b5fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b604:	e03a      	b.n	801b67c <_printf_i+0xa8>
 801b606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b60a:	2b15      	cmp	r3, #21
 801b60c:	d8f6      	bhi.n	801b5fc <_printf_i+0x28>
 801b60e:	a001      	add	r0, pc, #4	; (adr r0, 801b614 <_printf_i+0x40>)
 801b610:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b614:	0801b66d 	.word	0x0801b66d
 801b618:	0801b681 	.word	0x0801b681
 801b61c:	0801b5fd 	.word	0x0801b5fd
 801b620:	0801b5fd 	.word	0x0801b5fd
 801b624:	0801b5fd 	.word	0x0801b5fd
 801b628:	0801b5fd 	.word	0x0801b5fd
 801b62c:	0801b681 	.word	0x0801b681
 801b630:	0801b5fd 	.word	0x0801b5fd
 801b634:	0801b5fd 	.word	0x0801b5fd
 801b638:	0801b5fd 	.word	0x0801b5fd
 801b63c:	0801b5fd 	.word	0x0801b5fd
 801b640:	0801b78f 	.word	0x0801b78f
 801b644:	0801b6b1 	.word	0x0801b6b1
 801b648:	0801b771 	.word	0x0801b771
 801b64c:	0801b5fd 	.word	0x0801b5fd
 801b650:	0801b5fd 	.word	0x0801b5fd
 801b654:	0801b7b1 	.word	0x0801b7b1
 801b658:	0801b5fd 	.word	0x0801b5fd
 801b65c:	0801b6b1 	.word	0x0801b6b1
 801b660:	0801b5fd 	.word	0x0801b5fd
 801b664:	0801b5fd 	.word	0x0801b5fd
 801b668:	0801b779 	.word	0x0801b779
 801b66c:	680b      	ldr	r3, [r1, #0]
 801b66e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b672:	1d1a      	adds	r2, r3, #4
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	600a      	str	r2, [r1, #0]
 801b678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b67c:	2301      	movs	r3, #1
 801b67e:	e0a4      	b.n	801b7ca <_printf_i+0x1f6>
 801b680:	6825      	ldr	r5, [r4, #0]
 801b682:	6808      	ldr	r0, [r1, #0]
 801b684:	062e      	lsls	r6, r5, #24
 801b686:	f100 0304 	add.w	r3, r0, #4
 801b68a:	d50a      	bpl.n	801b6a2 <_printf_i+0xce>
 801b68c:	6805      	ldr	r5, [r0, #0]
 801b68e:	600b      	str	r3, [r1, #0]
 801b690:	2d00      	cmp	r5, #0
 801b692:	da03      	bge.n	801b69c <_printf_i+0xc8>
 801b694:	232d      	movs	r3, #45	; 0x2d
 801b696:	426d      	negs	r5, r5
 801b698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b69c:	230a      	movs	r3, #10
 801b69e:	485e      	ldr	r0, [pc, #376]	; (801b818 <_printf_i+0x244>)
 801b6a0:	e019      	b.n	801b6d6 <_printf_i+0x102>
 801b6a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b6a6:	6805      	ldr	r5, [r0, #0]
 801b6a8:	600b      	str	r3, [r1, #0]
 801b6aa:	bf18      	it	ne
 801b6ac:	b22d      	sxthne	r5, r5
 801b6ae:	e7ef      	b.n	801b690 <_printf_i+0xbc>
 801b6b0:	680b      	ldr	r3, [r1, #0]
 801b6b2:	6825      	ldr	r5, [r4, #0]
 801b6b4:	1d18      	adds	r0, r3, #4
 801b6b6:	6008      	str	r0, [r1, #0]
 801b6b8:	0628      	lsls	r0, r5, #24
 801b6ba:	d501      	bpl.n	801b6c0 <_printf_i+0xec>
 801b6bc:	681d      	ldr	r5, [r3, #0]
 801b6be:	e002      	b.n	801b6c6 <_printf_i+0xf2>
 801b6c0:	0669      	lsls	r1, r5, #25
 801b6c2:	d5fb      	bpl.n	801b6bc <_printf_i+0xe8>
 801b6c4:	881d      	ldrh	r5, [r3, #0]
 801b6c6:	2f6f      	cmp	r7, #111	; 0x6f
 801b6c8:	bf0c      	ite	eq
 801b6ca:	2308      	moveq	r3, #8
 801b6cc:	230a      	movne	r3, #10
 801b6ce:	4852      	ldr	r0, [pc, #328]	; (801b818 <_printf_i+0x244>)
 801b6d0:	2100      	movs	r1, #0
 801b6d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b6d6:	6866      	ldr	r6, [r4, #4]
 801b6d8:	2e00      	cmp	r6, #0
 801b6da:	bfa8      	it	ge
 801b6dc:	6821      	ldrge	r1, [r4, #0]
 801b6de:	60a6      	str	r6, [r4, #8]
 801b6e0:	bfa4      	itt	ge
 801b6e2:	f021 0104 	bicge.w	r1, r1, #4
 801b6e6:	6021      	strge	r1, [r4, #0]
 801b6e8:	b90d      	cbnz	r5, 801b6ee <_printf_i+0x11a>
 801b6ea:	2e00      	cmp	r6, #0
 801b6ec:	d04d      	beq.n	801b78a <_printf_i+0x1b6>
 801b6ee:	4616      	mov	r6, r2
 801b6f0:	fbb5 f1f3 	udiv	r1, r5, r3
 801b6f4:	fb03 5711 	mls	r7, r3, r1, r5
 801b6f8:	5dc7      	ldrb	r7, [r0, r7]
 801b6fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b6fe:	462f      	mov	r7, r5
 801b700:	42bb      	cmp	r3, r7
 801b702:	460d      	mov	r5, r1
 801b704:	d9f4      	bls.n	801b6f0 <_printf_i+0x11c>
 801b706:	2b08      	cmp	r3, #8
 801b708:	d10b      	bne.n	801b722 <_printf_i+0x14e>
 801b70a:	6823      	ldr	r3, [r4, #0]
 801b70c:	07df      	lsls	r7, r3, #31
 801b70e:	d508      	bpl.n	801b722 <_printf_i+0x14e>
 801b710:	6923      	ldr	r3, [r4, #16]
 801b712:	6861      	ldr	r1, [r4, #4]
 801b714:	4299      	cmp	r1, r3
 801b716:	bfde      	ittt	le
 801b718:	2330      	movle	r3, #48	; 0x30
 801b71a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b71e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801b722:	1b92      	subs	r2, r2, r6
 801b724:	6122      	str	r2, [r4, #16]
 801b726:	464b      	mov	r3, r9
 801b728:	4621      	mov	r1, r4
 801b72a:	4640      	mov	r0, r8
 801b72c:	f8cd a000 	str.w	sl, [sp]
 801b730:	aa03      	add	r2, sp, #12
 801b732:	f7ff fedf 	bl	801b4f4 <_printf_common>
 801b736:	3001      	adds	r0, #1
 801b738:	d14c      	bne.n	801b7d4 <_printf_i+0x200>
 801b73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b73e:	b004      	add	sp, #16
 801b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b744:	4834      	ldr	r0, [pc, #208]	; (801b818 <_printf_i+0x244>)
 801b746:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b74a:	680e      	ldr	r6, [r1, #0]
 801b74c:	6823      	ldr	r3, [r4, #0]
 801b74e:	f856 5b04 	ldr.w	r5, [r6], #4
 801b752:	061f      	lsls	r7, r3, #24
 801b754:	600e      	str	r6, [r1, #0]
 801b756:	d514      	bpl.n	801b782 <_printf_i+0x1ae>
 801b758:	07d9      	lsls	r1, r3, #31
 801b75a:	bf44      	itt	mi
 801b75c:	f043 0320 	orrmi.w	r3, r3, #32
 801b760:	6023      	strmi	r3, [r4, #0]
 801b762:	b91d      	cbnz	r5, 801b76c <_printf_i+0x198>
 801b764:	6823      	ldr	r3, [r4, #0]
 801b766:	f023 0320 	bic.w	r3, r3, #32
 801b76a:	6023      	str	r3, [r4, #0]
 801b76c:	2310      	movs	r3, #16
 801b76e:	e7af      	b.n	801b6d0 <_printf_i+0xfc>
 801b770:	6823      	ldr	r3, [r4, #0]
 801b772:	f043 0320 	orr.w	r3, r3, #32
 801b776:	6023      	str	r3, [r4, #0]
 801b778:	2378      	movs	r3, #120	; 0x78
 801b77a:	4828      	ldr	r0, [pc, #160]	; (801b81c <_printf_i+0x248>)
 801b77c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b780:	e7e3      	b.n	801b74a <_printf_i+0x176>
 801b782:	065e      	lsls	r6, r3, #25
 801b784:	bf48      	it	mi
 801b786:	b2ad      	uxthmi	r5, r5
 801b788:	e7e6      	b.n	801b758 <_printf_i+0x184>
 801b78a:	4616      	mov	r6, r2
 801b78c:	e7bb      	b.n	801b706 <_printf_i+0x132>
 801b78e:	680b      	ldr	r3, [r1, #0]
 801b790:	6826      	ldr	r6, [r4, #0]
 801b792:	1d1d      	adds	r5, r3, #4
 801b794:	6960      	ldr	r0, [r4, #20]
 801b796:	600d      	str	r5, [r1, #0]
 801b798:	0635      	lsls	r5, r6, #24
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	d501      	bpl.n	801b7a2 <_printf_i+0x1ce>
 801b79e:	6018      	str	r0, [r3, #0]
 801b7a0:	e002      	b.n	801b7a8 <_printf_i+0x1d4>
 801b7a2:	0671      	lsls	r1, r6, #25
 801b7a4:	d5fb      	bpl.n	801b79e <_printf_i+0x1ca>
 801b7a6:	8018      	strh	r0, [r3, #0]
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	4616      	mov	r6, r2
 801b7ac:	6123      	str	r3, [r4, #16]
 801b7ae:	e7ba      	b.n	801b726 <_printf_i+0x152>
 801b7b0:	680b      	ldr	r3, [r1, #0]
 801b7b2:	1d1a      	adds	r2, r3, #4
 801b7b4:	600a      	str	r2, [r1, #0]
 801b7b6:	681e      	ldr	r6, [r3, #0]
 801b7b8:	2100      	movs	r1, #0
 801b7ba:	4630      	mov	r0, r6
 801b7bc:	6862      	ldr	r2, [r4, #4]
 801b7be:	f000 fa95 	bl	801bcec <memchr>
 801b7c2:	b108      	cbz	r0, 801b7c8 <_printf_i+0x1f4>
 801b7c4:	1b80      	subs	r0, r0, r6
 801b7c6:	6060      	str	r0, [r4, #4]
 801b7c8:	6863      	ldr	r3, [r4, #4]
 801b7ca:	6123      	str	r3, [r4, #16]
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7d2:	e7a8      	b.n	801b726 <_printf_i+0x152>
 801b7d4:	4632      	mov	r2, r6
 801b7d6:	4649      	mov	r1, r9
 801b7d8:	4640      	mov	r0, r8
 801b7da:	6923      	ldr	r3, [r4, #16]
 801b7dc:	47d0      	blx	sl
 801b7de:	3001      	adds	r0, #1
 801b7e0:	d0ab      	beq.n	801b73a <_printf_i+0x166>
 801b7e2:	6823      	ldr	r3, [r4, #0]
 801b7e4:	079b      	lsls	r3, r3, #30
 801b7e6:	d413      	bmi.n	801b810 <_printf_i+0x23c>
 801b7e8:	68e0      	ldr	r0, [r4, #12]
 801b7ea:	9b03      	ldr	r3, [sp, #12]
 801b7ec:	4298      	cmp	r0, r3
 801b7ee:	bfb8      	it	lt
 801b7f0:	4618      	movlt	r0, r3
 801b7f2:	e7a4      	b.n	801b73e <_printf_i+0x16a>
 801b7f4:	2301      	movs	r3, #1
 801b7f6:	4632      	mov	r2, r6
 801b7f8:	4649      	mov	r1, r9
 801b7fa:	4640      	mov	r0, r8
 801b7fc:	47d0      	blx	sl
 801b7fe:	3001      	adds	r0, #1
 801b800:	d09b      	beq.n	801b73a <_printf_i+0x166>
 801b802:	3501      	adds	r5, #1
 801b804:	68e3      	ldr	r3, [r4, #12]
 801b806:	9903      	ldr	r1, [sp, #12]
 801b808:	1a5b      	subs	r3, r3, r1
 801b80a:	42ab      	cmp	r3, r5
 801b80c:	dcf2      	bgt.n	801b7f4 <_printf_i+0x220>
 801b80e:	e7eb      	b.n	801b7e8 <_printf_i+0x214>
 801b810:	2500      	movs	r5, #0
 801b812:	f104 0619 	add.w	r6, r4, #25
 801b816:	e7f5      	b.n	801b804 <_printf_i+0x230>
 801b818:	0801dbe5 	.word	0x0801dbe5
 801b81c:	0801dbf6 	.word	0x0801dbf6

0801b820 <__sread>:
 801b820:	b510      	push	{r4, lr}
 801b822:	460c      	mov	r4, r1
 801b824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b828:	f000 fa76 	bl	801bd18 <_read_r>
 801b82c:	2800      	cmp	r0, #0
 801b82e:	bfab      	itete	ge
 801b830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b832:	89a3      	ldrhlt	r3, [r4, #12]
 801b834:	181b      	addge	r3, r3, r0
 801b836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b83a:	bfac      	ite	ge
 801b83c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b83e:	81a3      	strhlt	r3, [r4, #12]
 801b840:	bd10      	pop	{r4, pc}

0801b842 <__swrite>:
 801b842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b846:	461f      	mov	r7, r3
 801b848:	898b      	ldrh	r3, [r1, #12]
 801b84a:	4605      	mov	r5, r0
 801b84c:	05db      	lsls	r3, r3, #23
 801b84e:	460c      	mov	r4, r1
 801b850:	4616      	mov	r6, r2
 801b852:	d505      	bpl.n	801b860 <__swrite+0x1e>
 801b854:	2302      	movs	r3, #2
 801b856:	2200      	movs	r2, #0
 801b858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b85c:	f000 f9d0 	bl	801bc00 <_lseek_r>
 801b860:	89a3      	ldrh	r3, [r4, #12]
 801b862:	4632      	mov	r2, r6
 801b864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b868:	81a3      	strh	r3, [r4, #12]
 801b86a:	4628      	mov	r0, r5
 801b86c:	463b      	mov	r3, r7
 801b86e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b876:	f000 b869 	b.w	801b94c <_write_r>

0801b87a <__sseek>:
 801b87a:	b510      	push	{r4, lr}
 801b87c:	460c      	mov	r4, r1
 801b87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b882:	f000 f9bd 	bl	801bc00 <_lseek_r>
 801b886:	1c43      	adds	r3, r0, #1
 801b888:	89a3      	ldrh	r3, [r4, #12]
 801b88a:	bf15      	itete	ne
 801b88c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b896:	81a3      	strheq	r3, [r4, #12]
 801b898:	bf18      	it	ne
 801b89a:	81a3      	strhne	r3, [r4, #12]
 801b89c:	bd10      	pop	{r4, pc}

0801b89e <__sclose>:
 801b89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8a2:	f000 b8db 	b.w	801ba5c <_close_r>
	...

0801b8a8 <__swbuf_r>:
 801b8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8aa:	460e      	mov	r6, r1
 801b8ac:	4614      	mov	r4, r2
 801b8ae:	4605      	mov	r5, r0
 801b8b0:	b118      	cbz	r0, 801b8ba <__swbuf_r+0x12>
 801b8b2:	6983      	ldr	r3, [r0, #24]
 801b8b4:	b90b      	cbnz	r3, 801b8ba <__swbuf_r+0x12>
 801b8b6:	f7ff fa85 	bl	801adc4 <__sinit>
 801b8ba:	4b21      	ldr	r3, [pc, #132]	; (801b940 <__swbuf_r+0x98>)
 801b8bc:	429c      	cmp	r4, r3
 801b8be:	d12b      	bne.n	801b918 <__swbuf_r+0x70>
 801b8c0:	686c      	ldr	r4, [r5, #4]
 801b8c2:	69a3      	ldr	r3, [r4, #24]
 801b8c4:	60a3      	str	r3, [r4, #8]
 801b8c6:	89a3      	ldrh	r3, [r4, #12]
 801b8c8:	071a      	lsls	r2, r3, #28
 801b8ca:	d52f      	bpl.n	801b92c <__swbuf_r+0x84>
 801b8cc:	6923      	ldr	r3, [r4, #16]
 801b8ce:	b36b      	cbz	r3, 801b92c <__swbuf_r+0x84>
 801b8d0:	6923      	ldr	r3, [r4, #16]
 801b8d2:	6820      	ldr	r0, [r4, #0]
 801b8d4:	b2f6      	uxtb	r6, r6
 801b8d6:	1ac0      	subs	r0, r0, r3
 801b8d8:	6963      	ldr	r3, [r4, #20]
 801b8da:	4637      	mov	r7, r6
 801b8dc:	4283      	cmp	r3, r0
 801b8de:	dc04      	bgt.n	801b8ea <__swbuf_r+0x42>
 801b8e0:	4621      	mov	r1, r4
 801b8e2:	4628      	mov	r0, r5
 801b8e4:	f000 f950 	bl	801bb88 <_fflush_r>
 801b8e8:	bb30      	cbnz	r0, 801b938 <__swbuf_r+0x90>
 801b8ea:	68a3      	ldr	r3, [r4, #8]
 801b8ec:	3001      	adds	r0, #1
 801b8ee:	3b01      	subs	r3, #1
 801b8f0:	60a3      	str	r3, [r4, #8]
 801b8f2:	6823      	ldr	r3, [r4, #0]
 801b8f4:	1c5a      	adds	r2, r3, #1
 801b8f6:	6022      	str	r2, [r4, #0]
 801b8f8:	701e      	strb	r6, [r3, #0]
 801b8fa:	6963      	ldr	r3, [r4, #20]
 801b8fc:	4283      	cmp	r3, r0
 801b8fe:	d004      	beq.n	801b90a <__swbuf_r+0x62>
 801b900:	89a3      	ldrh	r3, [r4, #12]
 801b902:	07db      	lsls	r3, r3, #31
 801b904:	d506      	bpl.n	801b914 <__swbuf_r+0x6c>
 801b906:	2e0a      	cmp	r6, #10
 801b908:	d104      	bne.n	801b914 <__swbuf_r+0x6c>
 801b90a:	4621      	mov	r1, r4
 801b90c:	4628      	mov	r0, r5
 801b90e:	f000 f93b 	bl	801bb88 <_fflush_r>
 801b912:	b988      	cbnz	r0, 801b938 <__swbuf_r+0x90>
 801b914:	4638      	mov	r0, r7
 801b916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b918:	4b0a      	ldr	r3, [pc, #40]	; (801b944 <__swbuf_r+0x9c>)
 801b91a:	429c      	cmp	r4, r3
 801b91c:	d101      	bne.n	801b922 <__swbuf_r+0x7a>
 801b91e:	68ac      	ldr	r4, [r5, #8]
 801b920:	e7cf      	b.n	801b8c2 <__swbuf_r+0x1a>
 801b922:	4b09      	ldr	r3, [pc, #36]	; (801b948 <__swbuf_r+0xa0>)
 801b924:	429c      	cmp	r4, r3
 801b926:	bf08      	it	eq
 801b928:	68ec      	ldreq	r4, [r5, #12]
 801b92a:	e7ca      	b.n	801b8c2 <__swbuf_r+0x1a>
 801b92c:	4621      	mov	r1, r4
 801b92e:	4628      	mov	r0, r5
 801b930:	f000 f81e 	bl	801b970 <__swsetup_r>
 801b934:	2800      	cmp	r0, #0
 801b936:	d0cb      	beq.n	801b8d0 <__swbuf_r+0x28>
 801b938:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b93c:	e7ea      	b.n	801b914 <__swbuf_r+0x6c>
 801b93e:	bf00      	nop
 801b940:	0801db94 	.word	0x0801db94
 801b944:	0801dbb4 	.word	0x0801dbb4
 801b948:	0801db74 	.word	0x0801db74

0801b94c <_write_r>:
 801b94c:	b538      	push	{r3, r4, r5, lr}
 801b94e:	4604      	mov	r4, r0
 801b950:	4608      	mov	r0, r1
 801b952:	4611      	mov	r1, r2
 801b954:	2200      	movs	r2, #0
 801b956:	4d05      	ldr	r5, [pc, #20]	; (801b96c <_write_r+0x20>)
 801b958:	602a      	str	r2, [r5, #0]
 801b95a:	461a      	mov	r2, r3
 801b95c:	f7e9 f872 	bl	8004a44 <_write>
 801b960:	1c43      	adds	r3, r0, #1
 801b962:	d102      	bne.n	801b96a <_write_r+0x1e>
 801b964:	682b      	ldr	r3, [r5, #0]
 801b966:	b103      	cbz	r3, 801b96a <_write_r+0x1e>
 801b968:	6023      	str	r3, [r4, #0]
 801b96a:	bd38      	pop	{r3, r4, r5, pc}
 801b96c:	2000e054 	.word	0x2000e054

0801b970 <__swsetup_r>:
 801b970:	4b32      	ldr	r3, [pc, #200]	; (801ba3c <__swsetup_r+0xcc>)
 801b972:	b570      	push	{r4, r5, r6, lr}
 801b974:	681d      	ldr	r5, [r3, #0]
 801b976:	4606      	mov	r6, r0
 801b978:	460c      	mov	r4, r1
 801b97a:	b125      	cbz	r5, 801b986 <__swsetup_r+0x16>
 801b97c:	69ab      	ldr	r3, [r5, #24]
 801b97e:	b913      	cbnz	r3, 801b986 <__swsetup_r+0x16>
 801b980:	4628      	mov	r0, r5
 801b982:	f7ff fa1f 	bl	801adc4 <__sinit>
 801b986:	4b2e      	ldr	r3, [pc, #184]	; (801ba40 <__swsetup_r+0xd0>)
 801b988:	429c      	cmp	r4, r3
 801b98a:	d10f      	bne.n	801b9ac <__swsetup_r+0x3c>
 801b98c:	686c      	ldr	r4, [r5, #4]
 801b98e:	89a3      	ldrh	r3, [r4, #12]
 801b990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b994:	0719      	lsls	r1, r3, #28
 801b996:	d42c      	bmi.n	801b9f2 <__swsetup_r+0x82>
 801b998:	06dd      	lsls	r5, r3, #27
 801b99a:	d411      	bmi.n	801b9c0 <__swsetup_r+0x50>
 801b99c:	2309      	movs	r3, #9
 801b99e:	6033      	str	r3, [r6, #0]
 801b9a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b9a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9a8:	81a3      	strh	r3, [r4, #12]
 801b9aa:	e03e      	b.n	801ba2a <__swsetup_r+0xba>
 801b9ac:	4b25      	ldr	r3, [pc, #148]	; (801ba44 <__swsetup_r+0xd4>)
 801b9ae:	429c      	cmp	r4, r3
 801b9b0:	d101      	bne.n	801b9b6 <__swsetup_r+0x46>
 801b9b2:	68ac      	ldr	r4, [r5, #8]
 801b9b4:	e7eb      	b.n	801b98e <__swsetup_r+0x1e>
 801b9b6:	4b24      	ldr	r3, [pc, #144]	; (801ba48 <__swsetup_r+0xd8>)
 801b9b8:	429c      	cmp	r4, r3
 801b9ba:	bf08      	it	eq
 801b9bc:	68ec      	ldreq	r4, [r5, #12]
 801b9be:	e7e6      	b.n	801b98e <__swsetup_r+0x1e>
 801b9c0:	0758      	lsls	r0, r3, #29
 801b9c2:	d512      	bpl.n	801b9ea <__swsetup_r+0x7a>
 801b9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b9c6:	b141      	cbz	r1, 801b9da <__swsetup_r+0x6a>
 801b9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b9cc:	4299      	cmp	r1, r3
 801b9ce:	d002      	beq.n	801b9d6 <__swsetup_r+0x66>
 801b9d0:	4630      	mov	r0, r6
 801b9d2:	f7fe fed1 	bl	801a778 <_free_r>
 801b9d6:	2300      	movs	r3, #0
 801b9d8:	6363      	str	r3, [r4, #52]	; 0x34
 801b9da:	89a3      	ldrh	r3, [r4, #12]
 801b9dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b9e0:	81a3      	strh	r3, [r4, #12]
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	6063      	str	r3, [r4, #4]
 801b9e6:	6923      	ldr	r3, [r4, #16]
 801b9e8:	6023      	str	r3, [r4, #0]
 801b9ea:	89a3      	ldrh	r3, [r4, #12]
 801b9ec:	f043 0308 	orr.w	r3, r3, #8
 801b9f0:	81a3      	strh	r3, [r4, #12]
 801b9f2:	6923      	ldr	r3, [r4, #16]
 801b9f4:	b94b      	cbnz	r3, 801ba0a <__swsetup_r+0x9a>
 801b9f6:	89a3      	ldrh	r3, [r4, #12]
 801b9f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b9fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba00:	d003      	beq.n	801ba0a <__swsetup_r+0x9a>
 801ba02:	4621      	mov	r1, r4
 801ba04:	4630      	mov	r0, r6
 801ba06:	f000 f931 	bl	801bc6c <__smakebuf_r>
 801ba0a:	89a0      	ldrh	r0, [r4, #12]
 801ba0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba10:	f010 0301 	ands.w	r3, r0, #1
 801ba14:	d00a      	beq.n	801ba2c <__swsetup_r+0xbc>
 801ba16:	2300      	movs	r3, #0
 801ba18:	60a3      	str	r3, [r4, #8]
 801ba1a:	6963      	ldr	r3, [r4, #20]
 801ba1c:	425b      	negs	r3, r3
 801ba1e:	61a3      	str	r3, [r4, #24]
 801ba20:	6923      	ldr	r3, [r4, #16]
 801ba22:	b943      	cbnz	r3, 801ba36 <__swsetup_r+0xc6>
 801ba24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ba28:	d1ba      	bne.n	801b9a0 <__swsetup_r+0x30>
 801ba2a:	bd70      	pop	{r4, r5, r6, pc}
 801ba2c:	0781      	lsls	r1, r0, #30
 801ba2e:	bf58      	it	pl
 801ba30:	6963      	ldrpl	r3, [r4, #20]
 801ba32:	60a3      	str	r3, [r4, #8]
 801ba34:	e7f4      	b.n	801ba20 <__swsetup_r+0xb0>
 801ba36:	2000      	movs	r0, #0
 801ba38:	e7f7      	b.n	801ba2a <__swsetup_r+0xba>
 801ba3a:	bf00      	nop
 801ba3c:	200002e4 	.word	0x200002e4
 801ba40:	0801db94 	.word	0x0801db94
 801ba44:	0801dbb4 	.word	0x0801dbb4
 801ba48:	0801db74 	.word	0x0801db74

0801ba4c <abort>:
 801ba4c:	2006      	movs	r0, #6
 801ba4e:	b508      	push	{r3, lr}
 801ba50:	f000 f99c 	bl	801bd8c <raise>
 801ba54:	2001      	movs	r0, #1
 801ba56:	f7e8 ffce 	bl	80049f6 <_exit>
	...

0801ba5c <_close_r>:
 801ba5c:	b538      	push	{r3, r4, r5, lr}
 801ba5e:	2300      	movs	r3, #0
 801ba60:	4d05      	ldr	r5, [pc, #20]	; (801ba78 <_close_r+0x1c>)
 801ba62:	4604      	mov	r4, r0
 801ba64:	4608      	mov	r0, r1
 801ba66:	602b      	str	r3, [r5, #0]
 801ba68:	f7e9 f83e 	bl	8004ae8 <_close>
 801ba6c:	1c43      	adds	r3, r0, #1
 801ba6e:	d102      	bne.n	801ba76 <_close_r+0x1a>
 801ba70:	682b      	ldr	r3, [r5, #0]
 801ba72:	b103      	cbz	r3, 801ba76 <_close_r+0x1a>
 801ba74:	6023      	str	r3, [r4, #0]
 801ba76:	bd38      	pop	{r3, r4, r5, pc}
 801ba78:	2000e054 	.word	0x2000e054

0801ba7c <__sflush_r>:
 801ba7c:	898a      	ldrh	r2, [r1, #12]
 801ba7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba82:	4605      	mov	r5, r0
 801ba84:	0710      	lsls	r0, r2, #28
 801ba86:	460c      	mov	r4, r1
 801ba88:	d458      	bmi.n	801bb3c <__sflush_r+0xc0>
 801ba8a:	684b      	ldr	r3, [r1, #4]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	dc05      	bgt.n	801ba9c <__sflush_r+0x20>
 801ba90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	dc02      	bgt.n	801ba9c <__sflush_r+0x20>
 801ba96:	2000      	movs	r0, #0
 801ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba9e:	2e00      	cmp	r6, #0
 801baa0:	d0f9      	beq.n	801ba96 <__sflush_r+0x1a>
 801baa2:	2300      	movs	r3, #0
 801baa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801baa8:	682f      	ldr	r7, [r5, #0]
 801baaa:	602b      	str	r3, [r5, #0]
 801baac:	d032      	beq.n	801bb14 <__sflush_r+0x98>
 801baae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bab0:	89a3      	ldrh	r3, [r4, #12]
 801bab2:	075a      	lsls	r2, r3, #29
 801bab4:	d505      	bpl.n	801bac2 <__sflush_r+0x46>
 801bab6:	6863      	ldr	r3, [r4, #4]
 801bab8:	1ac0      	subs	r0, r0, r3
 801baba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801babc:	b10b      	cbz	r3, 801bac2 <__sflush_r+0x46>
 801babe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bac0:	1ac0      	subs	r0, r0, r3
 801bac2:	2300      	movs	r3, #0
 801bac4:	4602      	mov	r2, r0
 801bac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bac8:	4628      	mov	r0, r5
 801baca:	6a21      	ldr	r1, [r4, #32]
 801bacc:	47b0      	blx	r6
 801bace:	1c43      	adds	r3, r0, #1
 801bad0:	89a3      	ldrh	r3, [r4, #12]
 801bad2:	d106      	bne.n	801bae2 <__sflush_r+0x66>
 801bad4:	6829      	ldr	r1, [r5, #0]
 801bad6:	291d      	cmp	r1, #29
 801bad8:	d82c      	bhi.n	801bb34 <__sflush_r+0xb8>
 801bada:	4a2a      	ldr	r2, [pc, #168]	; (801bb84 <__sflush_r+0x108>)
 801badc:	40ca      	lsrs	r2, r1
 801bade:	07d6      	lsls	r6, r2, #31
 801bae0:	d528      	bpl.n	801bb34 <__sflush_r+0xb8>
 801bae2:	2200      	movs	r2, #0
 801bae4:	6062      	str	r2, [r4, #4]
 801bae6:	6922      	ldr	r2, [r4, #16]
 801bae8:	04d9      	lsls	r1, r3, #19
 801baea:	6022      	str	r2, [r4, #0]
 801baec:	d504      	bpl.n	801baf8 <__sflush_r+0x7c>
 801baee:	1c42      	adds	r2, r0, #1
 801baf0:	d101      	bne.n	801baf6 <__sflush_r+0x7a>
 801baf2:	682b      	ldr	r3, [r5, #0]
 801baf4:	b903      	cbnz	r3, 801baf8 <__sflush_r+0x7c>
 801baf6:	6560      	str	r0, [r4, #84]	; 0x54
 801baf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bafa:	602f      	str	r7, [r5, #0]
 801bafc:	2900      	cmp	r1, #0
 801bafe:	d0ca      	beq.n	801ba96 <__sflush_r+0x1a>
 801bb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb04:	4299      	cmp	r1, r3
 801bb06:	d002      	beq.n	801bb0e <__sflush_r+0x92>
 801bb08:	4628      	mov	r0, r5
 801bb0a:	f7fe fe35 	bl	801a778 <_free_r>
 801bb0e:	2000      	movs	r0, #0
 801bb10:	6360      	str	r0, [r4, #52]	; 0x34
 801bb12:	e7c1      	b.n	801ba98 <__sflush_r+0x1c>
 801bb14:	6a21      	ldr	r1, [r4, #32]
 801bb16:	2301      	movs	r3, #1
 801bb18:	4628      	mov	r0, r5
 801bb1a:	47b0      	blx	r6
 801bb1c:	1c41      	adds	r1, r0, #1
 801bb1e:	d1c7      	bne.n	801bab0 <__sflush_r+0x34>
 801bb20:	682b      	ldr	r3, [r5, #0]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d0c4      	beq.n	801bab0 <__sflush_r+0x34>
 801bb26:	2b1d      	cmp	r3, #29
 801bb28:	d001      	beq.n	801bb2e <__sflush_r+0xb2>
 801bb2a:	2b16      	cmp	r3, #22
 801bb2c:	d101      	bne.n	801bb32 <__sflush_r+0xb6>
 801bb2e:	602f      	str	r7, [r5, #0]
 801bb30:	e7b1      	b.n	801ba96 <__sflush_r+0x1a>
 801bb32:	89a3      	ldrh	r3, [r4, #12]
 801bb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb38:	81a3      	strh	r3, [r4, #12]
 801bb3a:	e7ad      	b.n	801ba98 <__sflush_r+0x1c>
 801bb3c:	690f      	ldr	r7, [r1, #16]
 801bb3e:	2f00      	cmp	r7, #0
 801bb40:	d0a9      	beq.n	801ba96 <__sflush_r+0x1a>
 801bb42:	0793      	lsls	r3, r2, #30
 801bb44:	bf18      	it	ne
 801bb46:	2300      	movne	r3, #0
 801bb48:	680e      	ldr	r6, [r1, #0]
 801bb4a:	bf08      	it	eq
 801bb4c:	694b      	ldreq	r3, [r1, #20]
 801bb4e:	eba6 0807 	sub.w	r8, r6, r7
 801bb52:	600f      	str	r7, [r1, #0]
 801bb54:	608b      	str	r3, [r1, #8]
 801bb56:	f1b8 0f00 	cmp.w	r8, #0
 801bb5a:	dd9c      	ble.n	801ba96 <__sflush_r+0x1a>
 801bb5c:	4643      	mov	r3, r8
 801bb5e:	463a      	mov	r2, r7
 801bb60:	4628      	mov	r0, r5
 801bb62:	6a21      	ldr	r1, [r4, #32]
 801bb64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bb66:	47b0      	blx	r6
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	dc06      	bgt.n	801bb7a <__sflush_r+0xfe>
 801bb6c:	89a3      	ldrh	r3, [r4, #12]
 801bb6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb76:	81a3      	strh	r3, [r4, #12]
 801bb78:	e78e      	b.n	801ba98 <__sflush_r+0x1c>
 801bb7a:	4407      	add	r7, r0
 801bb7c:	eba8 0800 	sub.w	r8, r8, r0
 801bb80:	e7e9      	b.n	801bb56 <__sflush_r+0xda>
 801bb82:	bf00      	nop
 801bb84:	20400001 	.word	0x20400001

0801bb88 <_fflush_r>:
 801bb88:	b538      	push	{r3, r4, r5, lr}
 801bb8a:	690b      	ldr	r3, [r1, #16]
 801bb8c:	4605      	mov	r5, r0
 801bb8e:	460c      	mov	r4, r1
 801bb90:	b913      	cbnz	r3, 801bb98 <_fflush_r+0x10>
 801bb92:	2500      	movs	r5, #0
 801bb94:	4628      	mov	r0, r5
 801bb96:	bd38      	pop	{r3, r4, r5, pc}
 801bb98:	b118      	cbz	r0, 801bba2 <_fflush_r+0x1a>
 801bb9a:	6983      	ldr	r3, [r0, #24]
 801bb9c:	b90b      	cbnz	r3, 801bba2 <_fflush_r+0x1a>
 801bb9e:	f7ff f911 	bl	801adc4 <__sinit>
 801bba2:	4b14      	ldr	r3, [pc, #80]	; (801bbf4 <_fflush_r+0x6c>)
 801bba4:	429c      	cmp	r4, r3
 801bba6:	d11b      	bne.n	801bbe0 <_fflush_r+0x58>
 801bba8:	686c      	ldr	r4, [r5, #4]
 801bbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d0ef      	beq.n	801bb92 <_fflush_r+0xa>
 801bbb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bbb4:	07d0      	lsls	r0, r2, #31
 801bbb6:	d404      	bmi.n	801bbc2 <_fflush_r+0x3a>
 801bbb8:	0599      	lsls	r1, r3, #22
 801bbba:	d402      	bmi.n	801bbc2 <_fflush_r+0x3a>
 801bbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bbbe:	f7ff f9b1 	bl	801af24 <__retarget_lock_acquire_recursive>
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	4621      	mov	r1, r4
 801bbc6:	f7ff ff59 	bl	801ba7c <__sflush_r>
 801bbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bbcc:	4605      	mov	r5, r0
 801bbce:	07da      	lsls	r2, r3, #31
 801bbd0:	d4e0      	bmi.n	801bb94 <_fflush_r+0xc>
 801bbd2:	89a3      	ldrh	r3, [r4, #12]
 801bbd4:	059b      	lsls	r3, r3, #22
 801bbd6:	d4dd      	bmi.n	801bb94 <_fflush_r+0xc>
 801bbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bbda:	f7ff f9a4 	bl	801af26 <__retarget_lock_release_recursive>
 801bbde:	e7d9      	b.n	801bb94 <_fflush_r+0xc>
 801bbe0:	4b05      	ldr	r3, [pc, #20]	; (801bbf8 <_fflush_r+0x70>)
 801bbe2:	429c      	cmp	r4, r3
 801bbe4:	d101      	bne.n	801bbea <_fflush_r+0x62>
 801bbe6:	68ac      	ldr	r4, [r5, #8]
 801bbe8:	e7df      	b.n	801bbaa <_fflush_r+0x22>
 801bbea:	4b04      	ldr	r3, [pc, #16]	; (801bbfc <_fflush_r+0x74>)
 801bbec:	429c      	cmp	r4, r3
 801bbee:	bf08      	it	eq
 801bbf0:	68ec      	ldreq	r4, [r5, #12]
 801bbf2:	e7da      	b.n	801bbaa <_fflush_r+0x22>
 801bbf4:	0801db94 	.word	0x0801db94
 801bbf8:	0801dbb4 	.word	0x0801dbb4
 801bbfc:	0801db74 	.word	0x0801db74

0801bc00 <_lseek_r>:
 801bc00:	b538      	push	{r3, r4, r5, lr}
 801bc02:	4604      	mov	r4, r0
 801bc04:	4608      	mov	r0, r1
 801bc06:	4611      	mov	r1, r2
 801bc08:	2200      	movs	r2, #0
 801bc0a:	4d05      	ldr	r5, [pc, #20]	; (801bc20 <_lseek_r+0x20>)
 801bc0c:	602a      	str	r2, [r5, #0]
 801bc0e:	461a      	mov	r2, r3
 801bc10:	f7e8 ff8e 	bl	8004b30 <_lseek>
 801bc14:	1c43      	adds	r3, r0, #1
 801bc16:	d102      	bne.n	801bc1e <_lseek_r+0x1e>
 801bc18:	682b      	ldr	r3, [r5, #0]
 801bc1a:	b103      	cbz	r3, 801bc1e <_lseek_r+0x1e>
 801bc1c:	6023      	str	r3, [r4, #0]
 801bc1e:	bd38      	pop	{r3, r4, r5, pc}
 801bc20:	2000e054 	.word	0x2000e054

0801bc24 <__swhatbuf_r>:
 801bc24:	b570      	push	{r4, r5, r6, lr}
 801bc26:	460e      	mov	r6, r1
 801bc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc2c:	4614      	mov	r4, r2
 801bc2e:	2900      	cmp	r1, #0
 801bc30:	461d      	mov	r5, r3
 801bc32:	b096      	sub	sp, #88	; 0x58
 801bc34:	da07      	bge.n	801bc46 <__swhatbuf_r+0x22>
 801bc36:	2300      	movs	r3, #0
 801bc38:	602b      	str	r3, [r5, #0]
 801bc3a:	89b3      	ldrh	r3, [r6, #12]
 801bc3c:	061a      	lsls	r2, r3, #24
 801bc3e:	d410      	bmi.n	801bc62 <__swhatbuf_r+0x3e>
 801bc40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc44:	e00e      	b.n	801bc64 <__swhatbuf_r+0x40>
 801bc46:	466a      	mov	r2, sp
 801bc48:	f000 f8bc 	bl	801bdc4 <_fstat_r>
 801bc4c:	2800      	cmp	r0, #0
 801bc4e:	dbf2      	blt.n	801bc36 <__swhatbuf_r+0x12>
 801bc50:	9a01      	ldr	r2, [sp, #4]
 801bc52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc5a:	425a      	negs	r2, r3
 801bc5c:	415a      	adcs	r2, r3
 801bc5e:	602a      	str	r2, [r5, #0]
 801bc60:	e7ee      	b.n	801bc40 <__swhatbuf_r+0x1c>
 801bc62:	2340      	movs	r3, #64	; 0x40
 801bc64:	2000      	movs	r0, #0
 801bc66:	6023      	str	r3, [r4, #0]
 801bc68:	b016      	add	sp, #88	; 0x58
 801bc6a:	bd70      	pop	{r4, r5, r6, pc}

0801bc6c <__smakebuf_r>:
 801bc6c:	898b      	ldrh	r3, [r1, #12]
 801bc6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc70:	079d      	lsls	r5, r3, #30
 801bc72:	4606      	mov	r6, r0
 801bc74:	460c      	mov	r4, r1
 801bc76:	d507      	bpl.n	801bc88 <__smakebuf_r+0x1c>
 801bc78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc7c:	6023      	str	r3, [r4, #0]
 801bc7e:	6123      	str	r3, [r4, #16]
 801bc80:	2301      	movs	r3, #1
 801bc82:	6163      	str	r3, [r4, #20]
 801bc84:	b002      	add	sp, #8
 801bc86:	bd70      	pop	{r4, r5, r6, pc}
 801bc88:	466a      	mov	r2, sp
 801bc8a:	ab01      	add	r3, sp, #4
 801bc8c:	f7ff ffca 	bl	801bc24 <__swhatbuf_r>
 801bc90:	9900      	ldr	r1, [sp, #0]
 801bc92:	4605      	mov	r5, r0
 801bc94:	4630      	mov	r0, r6
 801bc96:	f7fe fdbb 	bl	801a810 <_malloc_r>
 801bc9a:	b948      	cbnz	r0, 801bcb0 <__smakebuf_r+0x44>
 801bc9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bca0:	059a      	lsls	r2, r3, #22
 801bca2:	d4ef      	bmi.n	801bc84 <__smakebuf_r+0x18>
 801bca4:	f023 0303 	bic.w	r3, r3, #3
 801bca8:	f043 0302 	orr.w	r3, r3, #2
 801bcac:	81a3      	strh	r3, [r4, #12]
 801bcae:	e7e3      	b.n	801bc78 <__smakebuf_r+0xc>
 801bcb0:	4b0d      	ldr	r3, [pc, #52]	; (801bce8 <__smakebuf_r+0x7c>)
 801bcb2:	62b3      	str	r3, [r6, #40]	; 0x28
 801bcb4:	89a3      	ldrh	r3, [r4, #12]
 801bcb6:	6020      	str	r0, [r4, #0]
 801bcb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bcbc:	81a3      	strh	r3, [r4, #12]
 801bcbe:	9b00      	ldr	r3, [sp, #0]
 801bcc0:	6120      	str	r0, [r4, #16]
 801bcc2:	6163      	str	r3, [r4, #20]
 801bcc4:	9b01      	ldr	r3, [sp, #4]
 801bcc6:	b15b      	cbz	r3, 801bce0 <__smakebuf_r+0x74>
 801bcc8:	4630      	mov	r0, r6
 801bcca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bcce:	f000 f88b 	bl	801bde8 <_isatty_r>
 801bcd2:	b128      	cbz	r0, 801bce0 <__smakebuf_r+0x74>
 801bcd4:	89a3      	ldrh	r3, [r4, #12]
 801bcd6:	f023 0303 	bic.w	r3, r3, #3
 801bcda:	f043 0301 	orr.w	r3, r3, #1
 801bcde:	81a3      	strh	r3, [r4, #12]
 801bce0:	89a0      	ldrh	r0, [r4, #12]
 801bce2:	4305      	orrs	r5, r0
 801bce4:	81a5      	strh	r5, [r4, #12]
 801bce6:	e7cd      	b.n	801bc84 <__smakebuf_r+0x18>
 801bce8:	0801ad5d 	.word	0x0801ad5d

0801bcec <memchr>:
 801bcec:	4603      	mov	r3, r0
 801bcee:	b510      	push	{r4, lr}
 801bcf0:	b2c9      	uxtb	r1, r1
 801bcf2:	4402      	add	r2, r0
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	d101      	bne.n	801bcfe <memchr+0x12>
 801bcfa:	2000      	movs	r0, #0
 801bcfc:	e003      	b.n	801bd06 <memchr+0x1a>
 801bcfe:	7804      	ldrb	r4, [r0, #0]
 801bd00:	3301      	adds	r3, #1
 801bd02:	428c      	cmp	r4, r1
 801bd04:	d1f6      	bne.n	801bcf4 <memchr+0x8>
 801bd06:	bd10      	pop	{r4, pc}

0801bd08 <_malloc_usable_size_r>:
 801bd08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd0c:	1f18      	subs	r0, r3, #4
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	bfbc      	itt	lt
 801bd12:	580b      	ldrlt	r3, [r1, r0]
 801bd14:	18c0      	addlt	r0, r0, r3
 801bd16:	4770      	bx	lr

0801bd18 <_read_r>:
 801bd18:	b538      	push	{r3, r4, r5, lr}
 801bd1a:	4604      	mov	r4, r0
 801bd1c:	4608      	mov	r0, r1
 801bd1e:	4611      	mov	r1, r2
 801bd20:	2200      	movs	r2, #0
 801bd22:	4d05      	ldr	r5, [pc, #20]	; (801bd38 <_read_r+0x20>)
 801bd24:	602a      	str	r2, [r5, #0]
 801bd26:	461a      	mov	r2, r3
 801bd28:	f7e8 fe6f 	bl	8004a0a <_read>
 801bd2c:	1c43      	adds	r3, r0, #1
 801bd2e:	d102      	bne.n	801bd36 <_read_r+0x1e>
 801bd30:	682b      	ldr	r3, [r5, #0]
 801bd32:	b103      	cbz	r3, 801bd36 <_read_r+0x1e>
 801bd34:	6023      	str	r3, [r4, #0]
 801bd36:	bd38      	pop	{r3, r4, r5, pc}
 801bd38:	2000e054 	.word	0x2000e054

0801bd3c <_raise_r>:
 801bd3c:	291f      	cmp	r1, #31
 801bd3e:	b538      	push	{r3, r4, r5, lr}
 801bd40:	4604      	mov	r4, r0
 801bd42:	460d      	mov	r5, r1
 801bd44:	d904      	bls.n	801bd50 <_raise_r+0x14>
 801bd46:	2316      	movs	r3, #22
 801bd48:	6003      	str	r3, [r0, #0]
 801bd4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd4e:	bd38      	pop	{r3, r4, r5, pc}
 801bd50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bd52:	b112      	cbz	r2, 801bd5a <_raise_r+0x1e>
 801bd54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bd58:	b94b      	cbnz	r3, 801bd6e <_raise_r+0x32>
 801bd5a:	4620      	mov	r0, r4
 801bd5c:	f000 f830 	bl	801bdc0 <_getpid_r>
 801bd60:	462a      	mov	r2, r5
 801bd62:	4601      	mov	r1, r0
 801bd64:	4620      	mov	r0, r4
 801bd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd6a:	f000 b817 	b.w	801bd9c <_kill_r>
 801bd6e:	2b01      	cmp	r3, #1
 801bd70:	d00a      	beq.n	801bd88 <_raise_r+0x4c>
 801bd72:	1c59      	adds	r1, r3, #1
 801bd74:	d103      	bne.n	801bd7e <_raise_r+0x42>
 801bd76:	2316      	movs	r3, #22
 801bd78:	6003      	str	r3, [r0, #0]
 801bd7a:	2001      	movs	r0, #1
 801bd7c:	e7e7      	b.n	801bd4e <_raise_r+0x12>
 801bd7e:	2400      	movs	r4, #0
 801bd80:	4628      	mov	r0, r5
 801bd82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bd86:	4798      	blx	r3
 801bd88:	2000      	movs	r0, #0
 801bd8a:	e7e0      	b.n	801bd4e <_raise_r+0x12>

0801bd8c <raise>:
 801bd8c:	4b02      	ldr	r3, [pc, #8]	; (801bd98 <raise+0xc>)
 801bd8e:	4601      	mov	r1, r0
 801bd90:	6818      	ldr	r0, [r3, #0]
 801bd92:	f7ff bfd3 	b.w	801bd3c <_raise_r>
 801bd96:	bf00      	nop
 801bd98:	200002e4 	.word	0x200002e4

0801bd9c <_kill_r>:
 801bd9c:	b538      	push	{r3, r4, r5, lr}
 801bd9e:	2300      	movs	r3, #0
 801bda0:	4d06      	ldr	r5, [pc, #24]	; (801bdbc <_kill_r+0x20>)
 801bda2:	4604      	mov	r4, r0
 801bda4:	4608      	mov	r0, r1
 801bda6:	4611      	mov	r1, r2
 801bda8:	602b      	str	r3, [r5, #0]
 801bdaa:	f7e8 fe14 	bl	80049d6 <_kill>
 801bdae:	1c43      	adds	r3, r0, #1
 801bdb0:	d102      	bne.n	801bdb8 <_kill_r+0x1c>
 801bdb2:	682b      	ldr	r3, [r5, #0]
 801bdb4:	b103      	cbz	r3, 801bdb8 <_kill_r+0x1c>
 801bdb6:	6023      	str	r3, [r4, #0]
 801bdb8:	bd38      	pop	{r3, r4, r5, pc}
 801bdba:	bf00      	nop
 801bdbc:	2000e054 	.word	0x2000e054

0801bdc0 <_getpid_r>:
 801bdc0:	f7e8 be02 	b.w	80049c8 <_getpid>

0801bdc4 <_fstat_r>:
 801bdc4:	b538      	push	{r3, r4, r5, lr}
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	4d06      	ldr	r5, [pc, #24]	; (801bde4 <_fstat_r+0x20>)
 801bdca:	4604      	mov	r4, r0
 801bdcc:	4608      	mov	r0, r1
 801bdce:	4611      	mov	r1, r2
 801bdd0:	602b      	str	r3, [r5, #0]
 801bdd2:	f7e8 fe94 	bl	8004afe <_fstat>
 801bdd6:	1c43      	adds	r3, r0, #1
 801bdd8:	d102      	bne.n	801bde0 <_fstat_r+0x1c>
 801bdda:	682b      	ldr	r3, [r5, #0]
 801bddc:	b103      	cbz	r3, 801bde0 <_fstat_r+0x1c>
 801bdde:	6023      	str	r3, [r4, #0]
 801bde0:	bd38      	pop	{r3, r4, r5, pc}
 801bde2:	bf00      	nop
 801bde4:	2000e054 	.word	0x2000e054

0801bde8 <_isatty_r>:
 801bde8:	b538      	push	{r3, r4, r5, lr}
 801bdea:	2300      	movs	r3, #0
 801bdec:	4d05      	ldr	r5, [pc, #20]	; (801be04 <_isatty_r+0x1c>)
 801bdee:	4604      	mov	r4, r0
 801bdf0:	4608      	mov	r0, r1
 801bdf2:	602b      	str	r3, [r5, #0]
 801bdf4:	f7e8 fe92 	bl	8004b1c <_isatty>
 801bdf8:	1c43      	adds	r3, r0, #1
 801bdfa:	d102      	bne.n	801be02 <_isatty_r+0x1a>
 801bdfc:	682b      	ldr	r3, [r5, #0]
 801bdfe:	b103      	cbz	r3, 801be02 <_isatty_r+0x1a>
 801be00:	6023      	str	r3, [r4, #0]
 801be02:	bd38      	pop	{r3, r4, r5, pc}
 801be04:	2000e054 	.word	0x2000e054

0801be08 <trunc>:
 801be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be0a:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801be0e:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 801be12:	2a13      	cmp	r2, #19
 801be14:	4603      	mov	r3, r0
 801be16:	460c      	mov	r4, r1
 801be18:	dc10      	bgt.n	801be3c <trunc+0x34>
 801be1a:	2a00      	cmp	r2, #0
 801be1c:	bfb3      	iteet	lt
 801be1e:	2000      	movlt	r0, #0
 801be20:	2000      	movge	r0, #0
 801be22:	4b10      	ldrge	r3, [pc, #64]	; (801be64 <trunc+0x5c>)
 801be24:	f001 4100 	andlt.w	r1, r1, #2147483648	; 0x80000000
 801be28:	bfa4      	itt	ge
 801be2a:	fa43 f202 	asrge.w	r2, r3, r2
 801be2e:	ea24 0102 	bicge.w	r1, r4, r2
 801be32:	4603      	mov	r3, r0
 801be34:	460c      	mov	r4, r1
 801be36:	4618      	mov	r0, r3
 801be38:	4621      	mov	r1, r4
 801be3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be3c:	2a33      	cmp	r2, #51	; 0x33
 801be3e:	dd07      	ble.n	801be50 <trunc+0x48>
 801be40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801be44:	d1f7      	bne.n	801be36 <trunc+0x2e>
 801be46:	4602      	mov	r2, r0
 801be48:	460b      	mov	r3, r1
 801be4a:	f7e4 fa09 	bl	8000260 <__adddf3>
 801be4e:	e7f0      	b.n	801be32 <trunc+0x2a>
 801be50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801be54:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 801be58:	fa22 f505 	lsr.w	r5, r2, r5
 801be5c:	ea20 0005 	bic.w	r0, r0, r5
 801be60:	e7e7      	b.n	801be32 <trunc+0x2a>
 801be62:	bf00      	nop
 801be64:	000fffff 	.word	0x000fffff

0801be68 <sqrt>:
 801be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be6a:	4606      	mov	r6, r0
 801be6c:	460f      	mov	r7, r1
 801be6e:	f000 f827 	bl	801bec0 <__ieee754_sqrt>
 801be72:	4b12      	ldr	r3, [pc, #72]	; (801bebc <sqrt+0x54>)
 801be74:	4604      	mov	r4, r0
 801be76:	f993 3000 	ldrsb.w	r3, [r3]
 801be7a:	460d      	mov	r5, r1
 801be7c:	3301      	adds	r3, #1
 801be7e:	d019      	beq.n	801beb4 <sqrt+0x4c>
 801be80:	4632      	mov	r2, r6
 801be82:	463b      	mov	r3, r7
 801be84:	4630      	mov	r0, r6
 801be86:	4639      	mov	r1, r7
 801be88:	f7e4 fe3a 	bl	8000b00 <__aeabi_dcmpun>
 801be8c:	b990      	cbnz	r0, 801beb4 <sqrt+0x4c>
 801be8e:	2200      	movs	r2, #0
 801be90:	2300      	movs	r3, #0
 801be92:	4630      	mov	r0, r6
 801be94:	4639      	mov	r1, r7
 801be96:	f7e4 fe0b 	bl	8000ab0 <__aeabi_dcmplt>
 801be9a:	b158      	cbz	r0, 801beb4 <sqrt+0x4c>
 801be9c:	f7fe fbae 	bl	801a5fc <__errno>
 801bea0:	2321      	movs	r3, #33	; 0x21
 801bea2:	2200      	movs	r2, #0
 801bea4:	6003      	str	r3, [r0, #0]
 801bea6:	2300      	movs	r3, #0
 801bea8:	4610      	mov	r0, r2
 801beaa:	4619      	mov	r1, r3
 801beac:	f7e4 fcb8 	bl	8000820 <__aeabi_ddiv>
 801beb0:	4604      	mov	r4, r0
 801beb2:	460d      	mov	r5, r1
 801beb4:	4620      	mov	r0, r4
 801beb6:	4629      	mov	r1, r5
 801beb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801beba:	bf00      	nop
 801bebc:	20000348 	.word	0x20000348

0801bec0 <__ieee754_sqrt>:
 801bec0:	f8df c150 	ldr.w	ip, [pc, #336]	; 801c014 <__ieee754_sqrt+0x154>
 801bec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bec8:	ea3c 0c01 	bics.w	ip, ip, r1
 801becc:	460b      	mov	r3, r1
 801bece:	4606      	mov	r6, r0
 801bed0:	460d      	mov	r5, r1
 801bed2:	460a      	mov	r2, r1
 801bed4:	4607      	mov	r7, r0
 801bed6:	4604      	mov	r4, r0
 801bed8:	d10e      	bne.n	801bef8 <__ieee754_sqrt+0x38>
 801beda:	4602      	mov	r2, r0
 801bedc:	f7e4 fb76 	bl	80005cc <__aeabi_dmul>
 801bee0:	4602      	mov	r2, r0
 801bee2:	460b      	mov	r3, r1
 801bee4:	4630      	mov	r0, r6
 801bee6:	4629      	mov	r1, r5
 801bee8:	f7e4 f9ba 	bl	8000260 <__adddf3>
 801beec:	4606      	mov	r6, r0
 801beee:	460d      	mov	r5, r1
 801bef0:	4630      	mov	r0, r6
 801bef2:	4629      	mov	r1, r5
 801bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bef8:	2900      	cmp	r1, #0
 801befa:	dc0d      	bgt.n	801bf18 <__ieee754_sqrt+0x58>
 801befc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801bf00:	ea5c 0707 	orrs.w	r7, ip, r7
 801bf04:	d0f4      	beq.n	801bef0 <__ieee754_sqrt+0x30>
 801bf06:	b139      	cbz	r1, 801bf18 <__ieee754_sqrt+0x58>
 801bf08:	4602      	mov	r2, r0
 801bf0a:	f7e4 f9a7 	bl	800025c <__aeabi_dsub>
 801bf0e:	4602      	mov	r2, r0
 801bf10:	460b      	mov	r3, r1
 801bf12:	f7e4 fc85 	bl	8000820 <__aeabi_ddiv>
 801bf16:	e7e9      	b.n	801beec <__ieee754_sqrt+0x2c>
 801bf18:	1512      	asrs	r2, r2, #20
 801bf1a:	d074      	beq.n	801c006 <__ieee754_sqrt+0x146>
 801bf1c:	2000      	movs	r0, #0
 801bf1e:	07d5      	lsls	r5, r2, #31
 801bf20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bf24:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 801bf28:	bf5e      	ittt	pl
 801bf2a:	0fe3      	lsrpl	r3, r4, #31
 801bf2c:	0064      	lslpl	r4, r4, #1
 801bf2e:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 801bf32:	0fe3      	lsrs	r3, r4, #31
 801bf34:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801bf38:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801bf3c:	2516      	movs	r5, #22
 801bf3e:	4601      	mov	r1, r0
 801bf40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801bf44:	1076      	asrs	r6, r6, #1
 801bf46:	0064      	lsls	r4, r4, #1
 801bf48:	188f      	adds	r7, r1, r2
 801bf4a:	429f      	cmp	r7, r3
 801bf4c:	bfde      	ittt	le
 801bf4e:	1bdb      	suble	r3, r3, r7
 801bf50:	18b9      	addle	r1, r7, r2
 801bf52:	1880      	addle	r0, r0, r2
 801bf54:	005b      	lsls	r3, r3, #1
 801bf56:	3d01      	subs	r5, #1
 801bf58:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801bf5c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801bf60:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801bf64:	d1f0      	bne.n	801bf48 <__ieee754_sqrt+0x88>
 801bf66:	462a      	mov	r2, r5
 801bf68:	f04f 0e20 	mov.w	lr, #32
 801bf6c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 801bf70:	428b      	cmp	r3, r1
 801bf72:	eb07 0c05 	add.w	ip, r7, r5
 801bf76:	dc02      	bgt.n	801bf7e <__ieee754_sqrt+0xbe>
 801bf78:	d113      	bne.n	801bfa2 <__ieee754_sqrt+0xe2>
 801bf7a:	45a4      	cmp	ip, r4
 801bf7c:	d811      	bhi.n	801bfa2 <__ieee754_sqrt+0xe2>
 801bf7e:	f1bc 0f00 	cmp.w	ip, #0
 801bf82:	eb0c 0507 	add.w	r5, ip, r7
 801bf86:	da43      	bge.n	801c010 <__ieee754_sqrt+0x150>
 801bf88:	2d00      	cmp	r5, #0
 801bf8a:	db41      	blt.n	801c010 <__ieee754_sqrt+0x150>
 801bf8c:	f101 0801 	add.w	r8, r1, #1
 801bf90:	1a5b      	subs	r3, r3, r1
 801bf92:	4641      	mov	r1, r8
 801bf94:	45a4      	cmp	ip, r4
 801bf96:	bf88      	it	hi
 801bf98:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 801bf9c:	eba4 040c 	sub.w	r4, r4, ip
 801bfa0:	443a      	add	r2, r7
 801bfa2:	005b      	lsls	r3, r3, #1
 801bfa4:	f1be 0e01 	subs.w	lr, lr, #1
 801bfa8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 801bfac:	ea4f 0757 	mov.w	r7, r7, lsr #1
 801bfb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 801bfb4:	d1dc      	bne.n	801bf70 <__ieee754_sqrt+0xb0>
 801bfb6:	4323      	orrs	r3, r4
 801bfb8:	d006      	beq.n	801bfc8 <__ieee754_sqrt+0x108>
 801bfba:	1c54      	adds	r4, r2, #1
 801bfbc:	bf0b      	itete	eq
 801bfbe:	4672      	moveq	r2, lr
 801bfc0:	3201      	addne	r2, #1
 801bfc2:	3001      	addeq	r0, #1
 801bfc4:	f022 0201 	bicne.w	r2, r2, #1
 801bfc8:	1043      	asrs	r3, r0, #1
 801bfca:	07c1      	lsls	r1, r0, #31
 801bfcc:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801bfd0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801bfd4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801bfd8:	bf48      	it	mi
 801bfda:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801bfde:	4610      	mov	r0, r2
 801bfe0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 801bfe4:	e782      	b.n	801beec <__ieee754_sqrt+0x2c>
 801bfe6:	0ae3      	lsrs	r3, r4, #11
 801bfe8:	3915      	subs	r1, #21
 801bfea:	0564      	lsls	r4, r4, #21
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d0fa      	beq.n	801bfe6 <__ieee754_sqrt+0x126>
 801bff0:	02de      	lsls	r6, r3, #11
 801bff2:	d50a      	bpl.n	801c00a <__ieee754_sqrt+0x14a>
 801bff4:	f1c2 0020 	rsb	r0, r2, #32
 801bff8:	fa24 f000 	lsr.w	r0, r4, r0
 801bffc:	1e55      	subs	r5, r2, #1
 801bffe:	4094      	lsls	r4, r2
 801c000:	4303      	orrs	r3, r0
 801c002:	1b4a      	subs	r2, r1, r5
 801c004:	e78a      	b.n	801bf1c <__ieee754_sqrt+0x5c>
 801c006:	4611      	mov	r1, r2
 801c008:	e7f0      	b.n	801bfec <__ieee754_sqrt+0x12c>
 801c00a:	005b      	lsls	r3, r3, #1
 801c00c:	3201      	adds	r2, #1
 801c00e:	e7ef      	b.n	801bff0 <__ieee754_sqrt+0x130>
 801c010:	4688      	mov	r8, r1
 801c012:	e7bd      	b.n	801bf90 <__ieee754_sqrt+0xd0>
 801c014:	7ff00000 	.word	0x7ff00000

0801c018 <_init>:
 801c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c01a:	bf00      	nop
 801c01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c01e:	bc08      	pop	{r3}
 801c020:	469e      	mov	lr, r3
 801c022:	4770      	bx	lr

0801c024 <_fini>:
 801c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c026:	bf00      	nop
 801c028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c02a:	bc08      	pop	{r3}
 801c02c:	469e      	mov	lr, r3
 801c02e:	4770      	bx	lr
