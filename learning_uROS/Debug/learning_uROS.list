
learning_uROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001931c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb0  08019510  08019510  00029510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b1c0  0801b1c0  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b1c0  0801b1c0  0002b1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b1c8  0801b1c8  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b1c8  0801b1c8  0002b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b1cc  0801b1cc  0002b1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801b1d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d3e8  200002c0  0801b490  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  2000d6a8  0801b490  0003d6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002445b  00000000  00000000  000302e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005063  00000000  00000000  00054744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  000597a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0005b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211e3  00000000  00000000  0005c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020523  00000000  00000000  0007da83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7789  00000000  00000000  0009dfa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  0015572f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d4  00000000  00000000  001557dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200002c0 	.word	0x200002c0
 800020c:	00000000 	.word	0x00000000
 8000210:	080194f4 	.word	0x080194f4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200002c4 	.word	0x200002c4
 800022c:	080194f4 	.word	0x080194f4

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_frsub>:
 8000254:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__addsf3>
 800025a:	bf00      	nop

0800025c <__aeabi_fsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000260 <__addsf3>:
 8000260:	0042      	lsls	r2, r0, #1
 8000262:	bf1f      	itttt	ne
 8000264:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000268:	ea92 0f03 	teqne	r2, r3
 800026c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000270:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000274:	d06a      	beq.n	800034c <__addsf3+0xec>
 8000276:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800027a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800027e:	bfc1      	itttt	gt
 8000280:	18d2      	addgt	r2, r2, r3
 8000282:	4041      	eorgt	r1, r0
 8000284:	4048      	eorgt	r0, r1
 8000286:	4041      	eorgt	r1, r0
 8000288:	bfb8      	it	lt
 800028a:	425b      	neglt	r3, r3
 800028c:	2b19      	cmp	r3, #25
 800028e:	bf88      	it	hi
 8000290:	4770      	bxhi	lr
 8000292:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800029e:	bf18      	it	ne
 80002a0:	4240      	negne	r0, r0
 80002a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ae:	bf18      	it	ne
 80002b0:	4249      	negne	r1, r1
 80002b2:	ea92 0f03 	teq	r2, r3
 80002b6:	d03f      	beq.n	8000338 <__addsf3+0xd8>
 80002b8:	f1a2 0201 	sub.w	r2, r2, #1
 80002bc:	fa41 fc03 	asr.w	ip, r1, r3
 80002c0:	eb10 000c 	adds.w	r0, r0, ip
 80002c4:	f1c3 0320 	rsb	r3, r3, #32
 80002c8:	fa01 f103 	lsl.w	r1, r1, r3
 80002cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d0:	d502      	bpl.n	80002d8 <__addsf3+0x78>
 80002d2:	4249      	negs	r1, r1
 80002d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002dc:	d313      	bcc.n	8000306 <__addsf3+0xa6>
 80002de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e2:	d306      	bcc.n	80002f2 <__addsf3+0x92>
 80002e4:	0840      	lsrs	r0, r0, #1
 80002e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ea:	f102 0201 	add.w	r2, r2, #1
 80002ee:	2afe      	cmp	r2, #254	; 0xfe
 80002f0:	d251      	bcs.n	8000396 <__addsf3+0x136>
 80002f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002fa:	bf08      	it	eq
 80002fc:	f020 0001 	biceq.w	r0, r0, #1
 8000300:	ea40 0003 	orr.w	r0, r0, r3
 8000304:	4770      	bx	lr
 8000306:	0049      	lsls	r1, r1, #1
 8000308:	eb40 0000 	adc.w	r0, r0, r0
 800030c:	3a01      	subs	r2, #1
 800030e:	bf28      	it	cs
 8000310:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000314:	d2ed      	bcs.n	80002f2 <__addsf3+0x92>
 8000316:	fab0 fc80 	clz	ip, r0
 800031a:	f1ac 0c08 	sub.w	ip, ip, #8
 800031e:	ebb2 020c 	subs.w	r2, r2, ip
 8000322:	fa00 f00c 	lsl.w	r0, r0, ip
 8000326:	bfaa      	itet	ge
 8000328:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800032c:	4252      	neglt	r2, r2
 800032e:	4318      	orrge	r0, r3
 8000330:	bfbc      	itt	lt
 8000332:	40d0      	lsrlt	r0, r2
 8000334:	4318      	orrlt	r0, r3
 8000336:	4770      	bx	lr
 8000338:	f092 0f00 	teq	r2, #0
 800033c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000340:	bf06      	itte	eq
 8000342:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000346:	3201      	addeq	r2, #1
 8000348:	3b01      	subne	r3, #1
 800034a:	e7b5      	b.n	80002b8 <__addsf3+0x58>
 800034c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000350:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000354:	bf18      	it	ne
 8000356:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035a:	d021      	beq.n	80003a0 <__addsf3+0x140>
 800035c:	ea92 0f03 	teq	r2, r3
 8000360:	d004      	beq.n	800036c <__addsf3+0x10c>
 8000362:	f092 0f00 	teq	r2, #0
 8000366:	bf08      	it	eq
 8000368:	4608      	moveq	r0, r1
 800036a:	4770      	bx	lr
 800036c:	ea90 0f01 	teq	r0, r1
 8000370:	bf1c      	itt	ne
 8000372:	2000      	movne	r0, #0
 8000374:	4770      	bxne	lr
 8000376:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800037a:	d104      	bne.n	8000386 <__addsf3+0x126>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	bf28      	it	cs
 8000380:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000384:	4770      	bx	lr
 8000386:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800038a:	bf3c      	itt	cc
 800038c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000390:	4770      	bxcc	lr
 8000392:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000396:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800039a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039e:	4770      	bx	lr
 80003a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003a4:	bf16      	itet	ne
 80003a6:	4608      	movne	r0, r1
 80003a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003ac:	4601      	movne	r1, r0
 80003ae:	0242      	lsls	r2, r0, #9
 80003b0:	bf06      	itte	eq
 80003b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003b6:	ea90 0f01 	teqeq	r0, r1
 80003ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003be:	4770      	bx	lr

080003c0 <__aeabi_ui2f>:
 80003c0:	f04f 0300 	mov.w	r3, #0
 80003c4:	e004      	b.n	80003d0 <__aeabi_i2f+0x8>
 80003c6:	bf00      	nop

080003c8 <__aeabi_i2f>:
 80003c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	ea5f 0c00 	movs.w	ip, r0
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003dc:	4601      	mov	r1, r0
 80003de:	f04f 0000 	mov.w	r0, #0
 80003e2:	e01c      	b.n	800041e <__aeabi_l2f+0x2a>

080003e4 <__aeabi_ul2f>:
 80003e4:	ea50 0201 	orrs.w	r2, r0, r1
 80003e8:	bf08      	it	eq
 80003ea:	4770      	bxeq	lr
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e00a      	b.n	8000408 <__aeabi_l2f+0x14>
 80003f2:	bf00      	nop

080003f4 <__aeabi_l2f>:
 80003f4:	ea50 0201 	orrs.w	r2, r0, r1
 80003f8:	bf08      	it	eq
 80003fa:	4770      	bxeq	lr
 80003fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000400:	d502      	bpl.n	8000408 <__aeabi_l2f+0x14>
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	ea5f 0c01 	movs.w	ip, r1
 800040c:	bf02      	ittt	eq
 800040e:	4684      	moveq	ip, r0
 8000410:	4601      	moveq	r1, r0
 8000412:	2000      	moveq	r0, #0
 8000414:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000418:	bf08      	it	eq
 800041a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800041e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000422:	fabc f28c 	clz	r2, ip
 8000426:	3a08      	subs	r2, #8
 8000428:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800042c:	db10      	blt.n	8000450 <__aeabi_l2f+0x5c>
 800042e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000432:	4463      	add	r3, ip
 8000434:	fa00 fc02 	lsl.w	ip, r0, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	f020 0001 	biceq.w	r0, r0, #1
 800044e:	4770      	bx	lr
 8000450:	f102 0220 	add.w	r2, r2, #32
 8000454:	fa01 fc02 	lsl.w	ip, r1, r2
 8000458:	f1c2 0220 	rsb	r2, r2, #32
 800045c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000460:	fa21 f202 	lsr.w	r2, r1, r2
 8000464:	eb43 0002 	adc.w	r0, r3, r2
 8000468:	bf08      	it	eq
 800046a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046e:	4770      	bx	lr

08000470 <__aeabi_fmul>:
 8000470:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000474:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000478:	bf1e      	ittt	ne
 800047a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800047e:	ea92 0f0c 	teqne	r2, ip
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d06f      	beq.n	8000568 <__aeabi_fmul+0xf8>
 8000488:	441a      	add	r2, r3
 800048a:	ea80 0c01 	eor.w	ip, r0, r1
 800048e:	0240      	lsls	r0, r0, #9
 8000490:	bf18      	it	ne
 8000492:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000496:	d01e      	beq.n	80004d6 <__aeabi_fmul+0x66>
 8000498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800049c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004a4:	fba0 3101 	umull	r3, r1, r0, r1
 80004a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b0:	bf3e      	ittt	cc
 80004b2:	0049      	lslcc	r1, r1, #1
 80004b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004b8:	005b      	lslcc	r3, r3, #1
 80004ba:	ea40 0001 	orr.w	r0, r0, r1
 80004be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004c2:	2afd      	cmp	r2, #253	; 0xfd
 80004c4:	d81d      	bhi.n	8000502 <__aeabi_fmul+0x92>
 80004c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ce:	bf08      	it	eq
 80004d0:	f020 0001 	biceq.w	r0, r0, #1
 80004d4:	4770      	bx	lr
 80004d6:	f090 0f00 	teq	r0, #0
 80004da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004de:	bf08      	it	eq
 80004e0:	0249      	lsleq	r1, r1, #9
 80004e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ea:	3a7f      	subs	r2, #127	; 0x7f
 80004ec:	bfc2      	ittt	gt
 80004ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004f6:	4770      	bxgt	lr
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	3a01      	subs	r2, #1
 8000502:	dc5d      	bgt.n	80005c0 <__aeabi_fmul+0x150>
 8000504:	f112 0f19 	cmn.w	r2, #25
 8000508:	bfdc      	itt	le
 800050a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800050e:	4770      	bxle	lr
 8000510:	f1c2 0200 	rsb	r2, r2, #0
 8000514:	0041      	lsls	r1, r0, #1
 8000516:	fa21 f102 	lsr.w	r1, r1, r2
 800051a:	f1c2 0220 	rsb	r2, r2, #32
 800051e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000522:	ea5f 0031 	movs.w	r0, r1, rrx
 8000526:	f140 0000 	adc.w	r0, r0, #0
 800052a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800052e:	bf08      	it	eq
 8000530:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000534:	4770      	bx	lr
 8000536:	f092 0f00 	teq	r2, #0
 800053a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800053e:	bf02      	ittt	eq
 8000540:	0040      	lsleq	r0, r0, #1
 8000542:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000546:	3a01      	subeq	r2, #1
 8000548:	d0f9      	beq.n	800053e <__aeabi_fmul+0xce>
 800054a:	ea40 000c 	orr.w	r0, r0, ip
 800054e:	f093 0f00 	teq	r3, #0
 8000552:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000556:	bf02      	ittt	eq
 8000558:	0049      	lsleq	r1, r1, #1
 800055a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800055e:	3b01      	subeq	r3, #1
 8000560:	d0f9      	beq.n	8000556 <__aeabi_fmul+0xe6>
 8000562:	ea41 010c 	orr.w	r1, r1, ip
 8000566:	e78f      	b.n	8000488 <__aeabi_fmul+0x18>
 8000568:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800056c:	ea92 0f0c 	teq	r2, ip
 8000570:	bf18      	it	ne
 8000572:	ea93 0f0c 	teqne	r3, ip
 8000576:	d00a      	beq.n	800058e <__aeabi_fmul+0x11e>
 8000578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800057c:	bf18      	it	ne
 800057e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000582:	d1d8      	bne.n	8000536 <__aeabi_fmul+0xc6>
 8000584:	ea80 0001 	eor.w	r0, r0, r1
 8000588:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800058c:	4770      	bx	lr
 800058e:	f090 0f00 	teq	r0, #0
 8000592:	bf17      	itett	ne
 8000594:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000598:	4608      	moveq	r0, r1
 800059a:	f091 0f00 	teqne	r1, #0
 800059e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005a2:	d014      	beq.n	80005ce <__aeabi_fmul+0x15e>
 80005a4:	ea92 0f0c 	teq	r2, ip
 80005a8:	d101      	bne.n	80005ae <__aeabi_fmul+0x13e>
 80005aa:	0242      	lsls	r2, r0, #9
 80005ac:	d10f      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005ae:	ea93 0f0c 	teq	r3, ip
 80005b2:	d103      	bne.n	80005bc <__aeabi_fmul+0x14c>
 80005b4:	024b      	lsls	r3, r1, #9
 80005b6:	bf18      	it	ne
 80005b8:	4608      	movne	r0, r1
 80005ba:	d108      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005bc:	ea80 0001 	eor.w	r0, r0, r1
 80005c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005cc:	4770      	bx	lr
 80005ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005d6:	4770      	bx	lr

080005d8 <__aeabi_fdiv>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d069      	beq.n	80006c4 <__aeabi_fdiv+0xec>
 80005f0:	eba2 0203 	sub.w	r2, r2, r3
 80005f4:	ea80 0c01 	eor.w	ip, r0, r1
 80005f8:	0249      	lsls	r1, r1, #9
 80005fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005fe:	d037      	beq.n	8000670 <__aeabi_fdiv+0x98>
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000608:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800060c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000610:	428b      	cmp	r3, r1
 8000612:	bf38      	it	cc
 8000614:	005b      	lslcc	r3, r3, #1
 8000616:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800061a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800061e:	428b      	cmp	r3, r1
 8000620:	bf24      	itt	cs
 8000622:	1a5b      	subcs	r3, r3, r1
 8000624:	ea40 000c 	orrcs.w	r0, r0, ip
 8000628:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800062c:	bf24      	itt	cs
 800062e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000632:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000636:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800063a:	bf24      	itt	cs
 800063c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000644:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000648:	bf24      	itt	cs
 800064a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800064e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	bf18      	it	ne
 8000656:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800065a:	d1e0      	bne.n	800061e <__aeabi_fdiv+0x46>
 800065c:	2afd      	cmp	r2, #253	; 0xfd
 800065e:	f63f af50 	bhi.w	8000502 <__aeabi_fmul+0x92>
 8000662:	428b      	cmp	r3, r1
 8000664:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000668:	bf08      	it	eq
 800066a:	f020 0001 	biceq.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000674:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000678:	327f      	adds	r2, #127	; 0x7f
 800067a:	bfc2      	ittt	gt
 800067c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000680:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000684:	4770      	bxgt	lr
 8000686:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	3a01      	subs	r2, #1
 8000690:	e737      	b.n	8000502 <__aeabi_fmul+0x92>
 8000692:	f092 0f00 	teq	r2, #0
 8000696:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800069a:	bf02      	ittt	eq
 800069c:	0040      	lsleq	r0, r0, #1
 800069e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006a2:	3a01      	subeq	r2, #1
 80006a4:	d0f9      	beq.n	800069a <__aeabi_fdiv+0xc2>
 80006a6:	ea40 000c 	orr.w	r0, r0, ip
 80006aa:	f093 0f00 	teq	r3, #0
 80006ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006b2:	bf02      	ittt	eq
 80006b4:	0049      	lsleq	r1, r1, #1
 80006b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006ba:	3b01      	subeq	r3, #1
 80006bc:	d0f9      	beq.n	80006b2 <__aeabi_fdiv+0xda>
 80006be:	ea41 010c 	orr.w	r1, r1, ip
 80006c2:	e795      	b.n	80005f0 <__aeabi_fdiv+0x18>
 80006c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006c8:	ea92 0f0c 	teq	r2, ip
 80006cc:	d108      	bne.n	80006e0 <__aeabi_fdiv+0x108>
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	f47f af7d 	bne.w	80005ce <__aeabi_fmul+0x15e>
 80006d4:	ea93 0f0c 	teq	r3, ip
 80006d8:	f47f af70 	bne.w	80005bc <__aeabi_fmul+0x14c>
 80006dc:	4608      	mov	r0, r1
 80006de:	e776      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006e0:	ea93 0f0c 	teq	r3, ip
 80006e4:	d104      	bne.n	80006f0 <__aeabi_fdiv+0x118>
 80006e6:	024b      	lsls	r3, r1, #9
 80006e8:	f43f af4c 	beq.w	8000584 <__aeabi_fmul+0x114>
 80006ec:	4608      	mov	r0, r1
 80006ee:	e76e      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006f4:	bf18      	it	ne
 80006f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006fa:	d1ca      	bne.n	8000692 <__aeabi_fdiv+0xba>
 80006fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000700:	f47f af5c 	bne.w	80005bc <__aeabi_fmul+0x14c>
 8000704:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000708:	f47f af3c 	bne.w	8000584 <__aeabi_fmul+0x114>
 800070c:	e75f      	b.n	80005ce <__aeabi_fmul+0x15e>
 800070e:	bf00      	nop

08000710 <__aeabi_f2iz>:
 8000710:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000718:	d30f      	bcc.n	800073a <__aeabi_f2iz+0x2a>
 800071a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800071e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000722:	d90d      	bls.n	8000740 <__aeabi_f2iz+0x30>
 8000724:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000730:	fa23 f002 	lsr.w	r0, r3, r2
 8000734:	bf18      	it	ne
 8000736:	4240      	negne	r0, r0
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2iz+0x3a>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d105      	bne.n	8000756 <__aeabi_f2iz+0x46>
 800074a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_ldivmod>:
 800075c:	b97b      	cbnz	r3, 800077e <__aeabi_ldivmod+0x22>
 800075e:	b972      	cbnz	r2, 800077e <__aeabi_ldivmod+0x22>
 8000760:	2900      	cmp	r1, #0
 8000762:	bfbe      	ittt	lt
 8000764:	2000      	movlt	r0, #0
 8000766:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800076a:	e006      	blt.n	800077a <__aeabi_ldivmod+0x1e>
 800076c:	bf08      	it	eq
 800076e:	2800      	cmpeq	r0, #0
 8000770:	bf1c      	itt	ne
 8000772:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000776:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800077a:	f000 b9b9 	b.w	8000af0 <__aeabi_idiv0>
 800077e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000782:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000786:	2900      	cmp	r1, #0
 8000788:	db09      	blt.n	800079e <__aeabi_ldivmod+0x42>
 800078a:	2b00      	cmp	r3, #0
 800078c:	db1a      	blt.n	80007c4 <__aeabi_ldivmod+0x68>
 800078e:	f000 f84d 	bl	800082c <__udivmoddi4>
 8000792:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db1b      	blt.n	80007e0 <__aeabi_ldivmod+0x84>
 80007a8:	f000 f840 	bl	800082c <__udivmoddi4>
 80007ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b4:	b004      	add	sp, #16
 80007b6:	4240      	negs	r0, r0
 80007b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	4770      	bx	lr
 80007c4:	4252      	negs	r2, r2
 80007c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ca:	f000 f82f 	bl	800082c <__udivmoddi4>
 80007ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d6:	b004      	add	sp, #16
 80007d8:	4240      	negs	r0, r0
 80007da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007de:	4770      	bx	lr
 80007e0:	4252      	negs	r2, r2
 80007e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e6:	f000 f821 	bl	800082c <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4252      	negs	r2, r2
 80007f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007fa:	4770      	bx	lr

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 b96e 	b.w	8000af0 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	468e      	mov	lr, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8083 	bne.w	8000944 <__udivmoddi4+0x118>
 800083e:	428a      	cmp	r2, r1
 8000840:	4617      	mov	r7, r2
 8000842:	d947      	bls.n	80008d4 <__udivmoddi4+0xa8>
 8000844:	fab2 f382 	clz	r3, r2
 8000848:	b14b      	cbz	r3, 800085e <__udivmoddi4+0x32>
 800084a:	f1c3 0120 	rsb	r1, r3, #32
 800084e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000852:	fa20 f101 	lsr.w	r1, r0, r1
 8000856:	409f      	lsls	r7, r3
 8000858:	ea41 0e0e 	orr.w	lr, r1, lr
 800085c:	409c      	lsls	r4, r3
 800085e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000862:	fbbe fcf8 	udiv	ip, lr, r8
 8000866:	fa1f f987 	uxth.w	r9, r7
 800086a:	fb08 e21c 	mls	r2, r8, ip, lr
 800086e:	fb0c f009 	mul.w	r0, ip, r9
 8000872:	0c21      	lsrs	r1, r4, #16
 8000874:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000878:	4290      	cmp	r0, r2
 800087a:	d90a      	bls.n	8000892 <__udivmoddi4+0x66>
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000882:	f080 8118 	bcs.w	8000ab6 <__udivmoddi4+0x28a>
 8000886:	4290      	cmp	r0, r2
 8000888:	f240 8115 	bls.w	8000ab6 <__udivmoddi4+0x28a>
 800088c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000890:	443a      	add	r2, r7
 8000892:	1a12      	subs	r2, r2, r0
 8000894:	fbb2 f0f8 	udiv	r0, r2, r8
 8000898:	fb08 2210 	mls	r2, r8, r0, r2
 800089c:	fb00 f109 	mul.w	r1, r0, r9
 80008a0:	b2a4      	uxth	r4, r4
 80008a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008a6:	42a1      	cmp	r1, r4
 80008a8:	d909      	bls.n	80008be <__udivmoddi4+0x92>
 80008aa:	193c      	adds	r4, r7, r4
 80008ac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008b0:	f080 8103 	bcs.w	8000aba <__udivmoddi4+0x28e>
 80008b4:	42a1      	cmp	r1, r4
 80008b6:	f240 8100 	bls.w	8000aba <__udivmoddi4+0x28e>
 80008ba:	3802      	subs	r0, #2
 80008bc:	443c      	add	r4, r7
 80008be:	1a64      	subs	r4, r4, r1
 80008c0:	2100      	movs	r1, #0
 80008c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008c6:	b11e      	cbz	r6, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	2200      	movs	r2, #0
 80008ca:	40dc      	lsrs	r4, r3
 80008cc:	e9c6 4200 	strd	r4, r2, [r6]
 80008d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d4:	b902      	cbnz	r2, 80008d8 <__udivmoddi4+0xac>
 80008d6:	deff      	udf	#255	; 0xff
 80008d8:	fab2 f382 	clz	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d14f      	bne.n	8000980 <__udivmoddi4+0x154>
 80008e0:	1a8d      	subs	r5, r1, r2
 80008e2:	2101      	movs	r1, #1
 80008e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80008e8:	fa1f f882 	uxth.w	r8, r2
 80008ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80008f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80008f4:	fb08 f00c 	mul.w	r0, r8, ip
 80008f8:	0c22      	lsrs	r2, r4, #16
 80008fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80008fe:	42a8      	cmp	r0, r5
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0xe6>
 8000902:	197d      	adds	r5, r7, r5
 8000904:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000908:	d202      	bcs.n	8000910 <__udivmoddi4+0xe4>
 800090a:	42a8      	cmp	r0, r5
 800090c:	f200 80e9 	bhi.w	8000ae2 <__udivmoddi4+0x2b6>
 8000910:	4694      	mov	ip, r2
 8000912:	1a2d      	subs	r5, r5, r0
 8000914:	fbb5 f0fe 	udiv	r0, r5, lr
 8000918:	fb0e 5510 	mls	r5, lr, r0, r5
 800091c:	fb08 f800 	mul.w	r8, r8, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000926:	45a0      	cmp	r8, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x10e>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x10c>
 8000932:	45a0      	cmp	r8, r4
 8000934:	f200 80d9 	bhi.w	8000aea <__udivmoddi4+0x2be>
 8000938:	4610      	mov	r0, r2
 800093a:	eba4 0408 	sub.w	r4, r4, r8
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	e7c0      	b.n	80008c6 <__udivmoddi4+0x9a>
 8000944:	428b      	cmp	r3, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x12e>
 8000948:	2e00      	cmp	r6, #0
 800094a:	f000 80b1 	beq.w	8000ab0 <__udivmoddi4+0x284>
 800094e:	2100      	movs	r1, #0
 8000950:	e9c6 0500 	strd	r0, r5, [r6]
 8000954:	4608      	mov	r0, r1
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	fab3 f183 	clz	r1, r3
 800095e:	2900      	cmp	r1, #0
 8000960:	d14b      	bne.n	80009fa <__udivmoddi4+0x1ce>
 8000962:	42ab      	cmp	r3, r5
 8000964:	d302      	bcc.n	800096c <__udivmoddi4+0x140>
 8000966:	4282      	cmp	r2, r0
 8000968:	f200 80b9 	bhi.w	8000ade <__udivmoddi4+0x2b2>
 800096c:	1a84      	subs	r4, r0, r2
 800096e:	eb65 0303 	sbc.w	r3, r5, r3
 8000972:	2001      	movs	r0, #1
 8000974:	469e      	mov	lr, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0aa      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800097a:	e9c6 4e00 	strd	r4, lr, [r6]
 800097e:	e7a7      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000980:	409f      	lsls	r7, r3
 8000982:	f1c3 0220 	rsb	r2, r3, #32
 8000986:	40d1      	lsrs	r1, r2
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fa1f f887 	uxth.w	r8, r7
 8000994:	fb0e 1110 	mls	r1, lr, r0, r1
 8000998:	fa24 f202 	lsr.w	r2, r4, r2
 800099c:	409d      	lsls	r5, r3
 800099e:	fb00 fc08 	mul.w	ip, r0, r8
 80009a2:	432a      	orrs	r2, r5
 80009a4:	0c15      	lsrs	r5, r2, #16
 80009a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80009aa:	45ac      	cmp	ip, r5
 80009ac:	fa04 f403 	lsl.w	r4, r4, r3
 80009b0:	d909      	bls.n	80009c6 <__udivmoddi4+0x19a>
 80009b2:	197d      	adds	r5, r7, r5
 80009b4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009b8:	f080 808f 	bcs.w	8000ada <__udivmoddi4+0x2ae>
 80009bc:	45ac      	cmp	ip, r5
 80009be:	f240 808c 	bls.w	8000ada <__udivmoddi4+0x2ae>
 80009c2:	3802      	subs	r0, #2
 80009c4:	443d      	add	r5, r7
 80009c6:	eba5 050c 	sub.w	r5, r5, ip
 80009ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80009ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80009d2:	fb01 f908 	mul.w	r9, r1, r8
 80009d6:	b295      	uxth	r5, r2
 80009d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80009dc:	45a9      	cmp	r9, r5
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x1c4>
 80009e0:	197d      	adds	r5, r7, r5
 80009e2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80009e6:	d274      	bcs.n	8000ad2 <__udivmoddi4+0x2a6>
 80009e8:	45a9      	cmp	r9, r5
 80009ea:	d972      	bls.n	8000ad2 <__udivmoddi4+0x2a6>
 80009ec:	3902      	subs	r1, #2
 80009ee:	443d      	add	r5, r7
 80009f0:	eba5 0509 	sub.w	r5, r5, r9
 80009f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009f8:	e778      	b.n	80008ec <__udivmoddi4+0xc0>
 80009fa:	f1c1 0720 	rsb	r7, r1, #32
 80009fe:	408b      	lsls	r3, r1
 8000a00:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a04:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a08:	fa25 f407 	lsr.w	r4, r5, r7
 8000a0c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a10:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a14:	fa1f f88c 	uxth.w	r8, ip
 8000a18:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a1c:	fa20 f307 	lsr.w	r3, r0, r7
 8000a20:	fb09 fa08 	mul.w	sl, r9, r8
 8000a24:	408d      	lsls	r5, r1
 8000a26:	431d      	orrs	r5, r3
 8000a28:	0c2b      	lsrs	r3, r5, #16
 8000a2a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a2e:	45a2      	cmp	sl, r4
 8000a30:	fa02 f201 	lsl.w	r2, r2, r1
 8000a34:	fa00 f301 	lsl.w	r3, r0, r1
 8000a38:	d909      	bls.n	8000a4e <__udivmoddi4+0x222>
 8000a3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a42:	d248      	bcs.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a44:	45a2      	cmp	sl, r4
 8000a46:	d946      	bls.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a48:	f1a9 0902 	sub.w	r9, r9, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	eba4 040a 	sub.w	r4, r4, sl
 8000a52:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a56:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a5a:	fb00 fa08 	mul.w	sl, r0, r8
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	45a2      	cmp	sl, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x24e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000a70:	d22d      	bcs.n	8000ace <__udivmoddi4+0x2a2>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	d92b      	bls.n	8000ace <__udivmoddi4+0x2a2>
 8000a76:	3802      	subs	r0, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a82:	eba4 040a 	sub.w	r4, r4, sl
 8000a86:	454c      	cmp	r4, r9
 8000a88:	46c6      	mov	lr, r8
 8000a8a:	464d      	mov	r5, r9
 8000a8c:	d319      	bcc.n	8000ac2 <__udivmoddi4+0x296>
 8000a8e:	d016      	beq.n	8000abe <__udivmoddi4+0x292>
 8000a90:	b15e      	cbz	r6, 8000aaa <__udivmoddi4+0x27e>
 8000a92:	ebb3 020e 	subs.w	r2, r3, lr
 8000a96:	eb64 0405 	sbc.w	r4, r4, r5
 8000a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c6 7400 	strd	r7, r4, [r6]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e70c      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	e6eb      	b.n	8000892 <__udivmoddi4+0x66>
 8000aba:	4610      	mov	r0, r2
 8000abc:	e6ff      	b.n	80008be <__udivmoddi4+0x92>
 8000abe:	4543      	cmp	r3, r8
 8000ac0:	d2e6      	bcs.n	8000a90 <__udivmoddi4+0x264>
 8000ac2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ac6:	eb69 050c 	sbc.w	r5, r9, ip
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7e0      	b.n	8000a90 <__udivmoddi4+0x264>
 8000ace:	4628      	mov	r0, r5
 8000ad0:	e7d3      	b.n	8000a7a <__udivmoddi4+0x24e>
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	e78c      	b.n	80009f0 <__udivmoddi4+0x1c4>
 8000ad6:	4681      	mov	r9, r0
 8000ad8:	e7b9      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e773      	b.n	80009c6 <__udivmoddi4+0x19a>
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e749      	b.n	8000976 <__udivmoddi4+0x14a>
 8000ae2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae6:	443d      	add	r5, r7
 8000ae8:	e713      	b.n	8000912 <__udivmoddi4+0xe6>
 8000aea:	3802      	subs	r0, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	e724      	b.n	800093a <__udivmoddi4+0x10e>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_ADC1_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b34:	f002 fb78 	bl	8003228 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b3e:	f001 ff55 	bl	80029ec <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20006864 	.word	0x20006864
 8000b50:	40012400 	.word	0x40012400

08000b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_ADC_MspInit+0x98>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d137      	bne.n	8000be4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bbc:	23c0      	movs	r3, #192	; 0xc0
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <HAL_ADC_MspInit+0xa0>)
 8000bcc:	f004 fc16 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_ADC_MspInit+0xa4>)
 8000be0:	f004 fc0c 	bl	80053fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <MX_CAN_Init+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c08:	2212      	movs	r2, #18
 8000c0a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c4c:	f002 ff55 	bl	8003afa <HAL_CAN_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000c56:	f001 fec9 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20006894 	.word	0x20006894
 8000c64:	40006400 	.word	0x40006400

08000c68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_CAN_MspInit+0x9c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d139      	bne.n	8000cfc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <HAL_CAN_MspInit+0xa4>)
 8000cce:	f004 fb95 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_CAN_MspInit+0xa4>)
 8000ce8:	f004 fb88 	bl	80053fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2015      	movs	r0, #21
 8000cf2:	f003 fdf2 	bl	80048da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cf6:	2015      	movs	r0, #21
 8000cf8:	f003 fe0b 	bl	8004912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40006400 	.word	0x40006400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d1c:	f007 ff4e 	bl	8008bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d20:	4b58      	ldr	r3, [pc, #352]	; (8000e84 <pvPortMallocMicroROS+0x174>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d28:	f000 f98a 	bl	8001040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d2c:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <pvPortMallocMicroROS+0x178>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 808e 	bne.w	8000e56 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01d      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000d40:	2208      	movs	r2, #8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d014      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	3308      	adds	r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d78:	bf00      	nop
 8000d7a:	e7fe      	b.n	8000d7a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d069      	beq.n	8000e56 <pvPortMallocMicroROS+0x146>
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d864      	bhi.n	8000e56 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <pvPortMallocMicroROS+0x180>)
 8000d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <pvPortMallocMicroROS+0x180>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d96:	e004      	b.n	8000da2 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d903      	bls.n	8000db4 <pvPortMallocMicroROS+0xa4>
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f1      	bne.n	8000d98 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <pvPortMallocMicroROS+0x174>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d04b      	beq.n	8000e56 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4413      	add	r3, r2
 8000dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	2308      	movs	r3, #8
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91f      	bls.n	8000e20 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00a      	beq.n	8000e08 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	613b      	str	r3, [r7, #16]
}
 8000e04:	bf00      	nop
 8000e06:	e7fe      	b.n	8000e06 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	1ad2      	subs	r2, r2, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e1a:	69b8      	ldr	r0, [r7, #24]
 8000e1c:	f000 f972 	bl	8001104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <pvPortMallocMicroROS+0x184>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d203      	bcs.n	8000e42 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <pvPortMallocMicroROS+0x184>)
 8000e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <pvPortMallocMicroROS+0x178>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e56:	f007 febf 	bl	8008bd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00a      	beq.n	8000e7a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	60fb      	str	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	e7fe      	b.n	8000e78 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200029f4 	.word	0x200029f4
 8000e88:	20002a00 	.word	0x20002a00
 8000e8c:	200029f8 	.word	0x200029f8
 8000e90:	200029ec 	.word	0x200029ec
 8000e94:	200029fc 	.word	0x200029fc

08000e98 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d048      	beq.n	8000f3c <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	425b      	negs	r3, r3
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <vPortFreeMicroROS+0x44>
	__asm volatile
 8000ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eca:	f383 8811 	msr	BASEPRI, r3
 8000ece:	f3bf 8f6f 	isb	sy
 8000ed2:	f3bf 8f4f 	dsb	sy
 8000ed6:	60fb      	str	r3, [r7, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	e7fe      	b.n	8000eda <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00a      	beq.n	8000efa <vPortFreeMicroROS+0x62>
	__asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	60bb      	str	r3, [r7, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d019      	beq.n	8000f3c <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d115      	bne.n	8000f3c <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f20:	f007 fe4c 	bl	8008bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <vPortFreeMicroROS+0xb0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <vPortFreeMicroROS+0xb0>)
 8000f30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f32:	6938      	ldr	r0, [r7, #16]
 8000f34:	f000 f8e6 	bl	8001104 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f38:	f007 fe4e 	bl	8008bd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20002a00 	.word	0x20002a00
 8000f48:	200029f8 	.word	0x200029f8

08000f4c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <getBlockSize+0x34>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

	return count;
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20002a00 	.word	0x20002a00

08000f84 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f8e:	f007 fe15 	bl	8008bbc <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f7ff febc 	bl	8000d10 <pvPortMallocMicroROS>
 8000f98:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <pvPortReallocMicroROS+0x70>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	617b      	str	r3, [r7, #20]

  	while(count--)
 8000fc2:	e007      	b.n	8000fd4 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	1c53      	adds	r3, r2, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	61b9      	str	r1, [r7, #24]
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	617a      	str	r2, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f2      	bne.n	8000fc4 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff5a 	bl	8000e98 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8000fe4:	f007 fdf8 	bl	8008bd8 <xTaskResumeAll>

	return newmem;
 8000fe8:	693b      	ldr	r3, [r7, #16]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20002a00 	.word	0x20002a00

08000ff8 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001002:	f007 fddb 	bl	8008bbc <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fe7d 	bl	8000d10 <pvPortMallocMicroROS>
 8001016:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	613b      	str	r3, [r7, #16]

  	while(count--)
 800101c:	e004      	b.n	8001028 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	613a      	str	r2, [r7, #16]
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f5      	bne.n	800101e <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001032:	f007 fdd1 	bl	8008bd8 <xTaskResumeAll>
  	return mem;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001046:	f242 7310 	movw	r3, #10000	; 0x2710
 800104a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <prvHeapInit+0xac>)
 800104e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00c      	beq.n	8001074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3307      	adds	r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f023 0307 	bic.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <prvHeapInit+0xac>)
 8001070:	4413      	add	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <prvHeapInit+0xb0>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <prvHeapInit+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800108c:	2208      	movs	r2, #8
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f023 0307 	bic.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <prvHeapInit+0xb4>)
 80010a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <prvHeapInit+0xb4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <prvHeapInit+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <prvHeapInit+0xb4>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <prvHeapInit+0xb8>)
 80010ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <prvHeapInit+0xbc>)
 80010d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <prvHeapInit+0xc0>)
 80010da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200002dc 	.word	0x200002dc
 80010f0:	200029ec 	.word	0x200029ec
 80010f4:	200029f4 	.word	0x200029f4
 80010f8:	200029fc 	.word	0x200029fc
 80010fc:	200029f8 	.word	0x200029f8
 8001100:	20002a00 	.word	0x20002a00

08001104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <prvInsertBlockIntoFreeList+0xa8>)
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e002      	b.n	8001118 <prvInsertBlockIntoFreeList+0x14>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d8f7      	bhi.n	8001112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d108      	bne.n	8001146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	441a      	add	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	441a      	add	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d118      	bne.n	800118c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <prvInsertBlockIntoFreeList+0xac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d00d      	beq.n	8001182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	441a      	add	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e008      	b.n	8001194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <prvInsertBlockIntoFreeList+0xac>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e003      	b.n	8001194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d002      	beq.n	80011a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200029ec 	.word	0x200029ec
 80011b0:	200029f4 	.word	0x200029f4

080011b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DAC_Init+0x60>)
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_DAC_Init+0x64>)
 80011c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_DAC_Init+0x60>)
 80011ca:	f003 fbb0 	bl	800492e <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d4:	f001 fc0a 	bl	80029ec <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <MX_DAC_Init+0x60>)
 80011e8:	f003 fc38 	bl	8004a5c <HAL_DAC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011f2:	f001 fbfb 	bl	80029ec <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2210      	movs	r2, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DAC_Init+0x60>)
 80011fe:	f003 fc2d 	bl	8004a5c <HAL_DAC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001208:	f001 fbf0 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200068bc 	.word	0x200068bc
 8001218:	40007400 	.word	0x40007400

0800121c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_DAC_MspInit+0x6c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d121      	bne.n	8001280 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_DAC_MspInit+0x70>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_DAC_MspInit+0x70>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_DAC_MspInit+0x70>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800126c:	2330      	movs	r3, #48	; 0x30
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_DAC_MspInit+0x74>)
 800127c:	f004 f8be 	bl	80053fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40007400 	.word	0x40007400
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_DMA_Init+0x48>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_DMA_Init+0x48>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_DMA_Init+0x48>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2010      	movs	r0, #16
 80012b8:	f003 fb0f 	bl	80048da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012bc:	2010      	movs	r0, #16
 80012be:	f003 fb28 	bl	8004912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2011      	movs	r0, #17
 80012c8:	f003 fb07 	bl	80048da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012cc:	2011      	movs	r0, #17
 80012ce:	f003 fb20 	bl	8004912 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80012ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <cubemx_transport_open+0x28>)
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f005 fbe6 	bl	8006ac8 <HAL_UART_Receive_DMA>
    return true;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20002a04 	.word	0x20002a04

0800130c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800131a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f005 fc03 	bl	8006b28 <HAL_UART_DMAStop>
    return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001340:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d11c      	bne.n	8001388 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f005 fb4a 	bl	80069f0 <HAL_UART_Transmit_DMA>
 800135c:	4603      	mov	r3, r0
 800135e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001360:	e002      	b.n	8001368 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f006 fade 	bl	8007924 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001368:	7cfb      	ldrb	r3, [r7, #19]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <cubemx_transport_write+0x4e>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b20      	cmp	r3, #32
 8001378:	d1f3      	bne.n	8001362 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <cubemx_transport_write+0x58>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	e002      	b.n	800138a <cubemx_transport_write+0x5e>
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001388:	2300      	movs	r3, #0
    }
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013a8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ae:	b672      	cpsid	i
}
 80013b0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <cubemx_transport_read+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c2:	b662      	cpsie	i
}
 80013c4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f006 faa9 	bl	8007924 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <cubemx_transport_read+0xa0>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <cubemx_transport_read+0x9c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d103      	bne.n	80013e6 <cubemx_transport_read+0x52>
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbe3      	blt.n	80013ae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80013ea:	e011      	b.n	8001410 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <cubemx_transport_read+0xa0>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	440b      	add	r3, r1
 80013f6:	4910      	ldr	r1, [pc, #64]	; (8001438 <cubemx_transport_read+0xa4>)
 80013f8:	5c8a      	ldrb	r2, [r1, r2]
 80013fa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <cubemx_transport_read+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <cubemx_transport_read+0xa0>)
 8001408:	6013      	str	r3, [r2, #0]
        wrote++;
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <cubemx_transport_read+0xa0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <cubemx_transport_read+0x9c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d003      	beq.n	8001424 <cubemx_transport_read+0x90>
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e3      	bcc.n	80013ec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001424:	69bb      	ldr	r3, [r7, #24]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20003208 	.word	0x20003208
 8001434:	20003204 	.word	0x20003204
 8001438:	20002a04 	.word	0x20002a04

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of analog_mutex */
  analog_mutexHandle = osMutexNew(&analog_mutex_attributes);
 8001440:	4817      	ldr	r0, [pc, #92]	; (80014a0 <MX_FREERTOS_Init+0x64>)
 8001442:	f006 fa9d 	bl	8007980 <osMutexNew>
 8001446:	4603      	mov	r3, r0
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <MX_FREERTOS_Init+0x68>)
 800144a:	6013      	str	r3, [r2, #0]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800144c:	2100      	movs	r1, #0
 800144e:	4816      	ldr	r0, [pc, #88]	; (80014a8 <MX_FREERTOS_Init+0x6c>)
 8001450:	f003 fa8f 	bl	8004972 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001454:	2110      	movs	r1, #16
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_FREERTOS_Init+0x6c>)
 8001458:	f003 fa8b 	bl	8004972 <HAL_DAC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 800145c:	4a13      	ldr	r2, [pc, #76]	; (80014ac <MX_FREERTOS_Init+0x70>)
 800145e:	2100      	movs	r1, #0
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_FREERTOS_Init+0x74>)
 8001462:	f006 f9b5 	bl	80077d0 <osThreadNew>
 8001466:	4603      	mov	r3, r0
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_FREERTOS_Init+0x78>)
 800146a:	6013      	str	r3, [r2, #0]

  /* creation of digital_inputs */
  digital_inputsHandle = osThreadNew(digital_inputs_task, NULL, &digital_inputs_attributes);
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <MX_FREERTOS_Init+0x7c>)
 800146e:	2100      	movs	r1, #0
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_FREERTOS_Init+0x80>)
 8001472:	f006 f9ad 	bl	80077d0 <osThreadNew>
 8001476:	4603      	mov	r3, r0
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <MX_FREERTOS_Init+0x84>)
 800147a:	6013      	str	r3, [r2, #0]

  /* creation of analog_input */
  analog_inputHandle = osThreadNew(analog_input_task, NULL, &analog_input_attributes);
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <MX_FREERTOS_Init+0x88>)
 800147e:	2100      	movs	r1, #0
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <MX_FREERTOS_Init+0x8c>)
 8001482:	f006 f9a5 	bl	80077d0 <osThreadNew>
 8001486:	4603      	mov	r3, r0
 8001488:	4a10      	ldr	r2, [pc, #64]	; (80014cc <MX_FREERTOS_Init+0x90>)
 800148a:	6013      	str	r3, [r2, #0]

  /* creation of auto_man_mod */
  auto_man_modHandle = osThreadNew(automatic_manual_mode_Task, NULL, &auto_man_mod_attributes);
 800148c:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <MX_FREERTOS_Init+0x94>)
 800148e:	2100      	movs	r1, #0
 8001490:	4810      	ldr	r0, [pc, #64]	; (80014d4 <MX_FREERTOS_Init+0x98>)
 8001492:	f006 f99d 	bl	80077d0 <osThreadNew>
 8001496:	4603      	mov	r3, r0
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <MX_FREERTOS_Init+0x9c>)
 800149a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	0801a42c 	.word	0x0801a42c
 80014a4:	200082d0 	.word	0x200082d0
 80014a8:	200068bc 	.word	0x200068bc
 80014ac:	0801a39c 	.word	0x0801a39c
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	200068d4 	.word	0x200068d4
 80014b8:	0801a3c0 	.word	0x0801a3c0
 80014bc:	08001ca1 	.word	0x08001ca1
 80014c0:	200068d8 	.word	0x200068d8
 80014c4:	0801a3e4 	.word	0x0801a3e4
 80014c8:	08001d91 	.word	0x08001d91
 80014cc:	20008338 	.word	0x20008338
 80014d0:	0801a408 	.word	0x0801a408
 80014d4:	08001e41 	.word	0x08001e41
 80014d8:	200080d8 	.word	0x200080d8
 80014dc:	00000000 	.word	0x00000000

080014e0 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b0d4      	sub	sp, #336	; 0x150
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_ros2_function */
  /* Infinite loop */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 80014ec:	4baf      	ldr	r3, [pc, #700]	; (80017ac <task_ros2_function+0x2cc>)
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	4baf      	ldr	r3, [pc, #700]	; (80017b0 <task_ros2_function+0x2d0>)
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4baf      	ldr	r3, [pc, #700]	; (80017b4 <task_ros2_function+0x2d4>)
 80014f6:	4ab0      	ldr	r2, [pc, #704]	; (80017b8 <task_ros2_function+0x2d8>)
 80014f8:	49b0      	ldr	r1, [pc, #704]	; (80017bc <task_ros2_function+0x2dc>)
 80014fa:	2001      	movs	r0, #1
 80014fc:	f00a fb1e 	bl	800bb3c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001500:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001504:	4618      	mov	r0, r3
 8001506:	f009 ffa7 	bl	800b458 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800150a:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <task_ros2_function+0x2e0>)
 800150c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001510:	4bac      	ldr	r3, [pc, #688]	; (80017c4 <task_ros2_function+0x2e4>)
 8001512:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001516:	4bac      	ldr	r3, [pc, #688]	; (80017c8 <task_ros2_function+0x2e8>)
 8001518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800151c:	4bab      	ldr	r3, [pc, #684]	; (80017cc <task_ros2_function+0x2ec>)
 800151e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001522:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001526:	4618      	mov	r0, r3
 8001528:	f009 ffa4 	bl	800b474 <rcutils_set_default_allocator>
 800152c:	4603      	mov	r3, r0
 800152e:	f083 0301 	eor.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8001538:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800153c:	48a4      	ldr	r0, [pc, #656]	; (80017d0 <task_ros2_function+0x2f0>)
 800153e:	f016 fd39 	bl	8017fb4 <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 8001542:	463b      	mov	r3, r7
 8001544:	4618      	mov	r0, r3
 8001546:	f009 ffb5 	bl	800b4b4 <rcutils_get_default_allocator>
 800154a:	463b      	mov	r3, r7
 800154c:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	682b      	ldr	r3, [r5, #0]
 8001558:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 800155a:	f008 fef7 	bl	800a34c <rcl_get_zero_initialized_init_options>
 800155e:	4602      	mov	r2, r0
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8001566:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800156a:	466a      	mov	r2, sp
 800156c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001570:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001574:	e882 0003 	stmia.w	r2, {r0, r1}
 8001578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800157c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157e:	4620      	mov	r0, r4
 8001580:	f008 fee6 	bl	800a350 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001584:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001588:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800158c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4613      	mov	r3, r2
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	f009 fe44 	bl	800b224 <rclc_support_init_with_options>

	  // create node
	   rclc_node_init_default(&node, "golfinho", "acquisition_system", &support);
 800159c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015a0:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80015a4:	4a8b      	ldr	r2, [pc, #556]	; (80017d4 <task_ros2_function+0x2f4>)
 80015a6:	498c      	ldr	r1, [pc, #560]	; (80017d8 <task_ros2_function+0x2f8>)
 80015a8:	f009 fe7a 	bl	800b2a0 <rclc_node_init_default>

	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 80015ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b0:	f00b f9b4 	bl	800c91c <rmw_uros_sync_session>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <task_ros2_function+0xe4>
		  printf("Error on time sync (line %d)\n", __LINE__);
 80015ba:	f240 114f 	movw	r1, #335	; 0x14f
 80015be:	4887      	ldr	r0, [pc, #540]	; (80017dc <task_ros2_function+0x2fc>)
 80015c0:	f016 fcf8 	bl	8017fb4 <iprintf>

	  // ros2_gpio_input_pub
	  rclc_publisher_init_default(
 80015c4:	f00c f942 	bl	800d84c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015ce:	4b84      	ldr	r3, [pc, #528]	; (80017e0 <task_ros2_function+0x300>)
 80015d0:	4884      	ldr	r0, [pc, #528]	; (80017e4 <task_ros2_function+0x304>)
 80015d2:	f009 fea1 	bl	800b318 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt8MultiArray),
			  "/golfinho/diagnostics/status_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 80015d6:	f00c f935 	bl	800d844 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 80015da:	4602      	mov	r2, r0
 80015dc:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <task_ros2_function+0x308>)
 80015e2:	4882      	ldr	r0, [pc, #520]	; (80017ec <task_ros2_function+0x30c>)
 80015e4:	f009 fe98 	bl	800b318 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
			  "/golfinho/diagnostics/motion_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 80015e8:	f00b fd68 	bl	800d0bc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015f2:	4b7f      	ldr	r3, [pc, #508]	; (80017f0 <task_ros2_function+0x310>)
 80015f4:	487f      	ldr	r0, [pc, #508]	; (80017f4 <task_ros2_function+0x314>)
 80015f6:	f009 fe8f 	bl	800b318 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/golfinho/imu");

	  // ros2_joints_pub
	  rclc_publisher_init_default(
 80015fa:	f00b fd63 	bl	800d0c4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 80015fe:	4602      	mov	r2, r0
 8001600:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001604:	4b7c      	ldr	r3, [pc, #496]	; (80017f8 <task_ros2_function+0x318>)
 8001606:	487d      	ldr	r0, [pc, #500]	; (80017fc <task_ros2_function+0x31c>)
 8001608:	f009 fe86 	bl	800b318 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
			  "/golfinho/gps");

	  // ros2_joint_steering_pub
	  rclc_publisher_init_default(
 800160c:	f00b fd58 	bl	800d0c0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8001610:	4602      	mov	r2, r0
 8001612:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001616:	4b7a      	ldr	r3, [pc, #488]	; (8001800 <task_ros2_function+0x320>)
 8001618:	487a      	ldr	r0, [pc, #488]	; (8001804 <task_ros2_function+0x324>)
 800161a:	f009 fe7d 	bl	800b318 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
			  "/golfinho/joint_steering");

	  //create gpio_output_sub
	  receive_commands_from_ros_sub = rcl_get_zero_initialized_subscription();
 800161e:	f009 f90d 	bl	800a83c <rcl_get_zero_initialized_subscription>
 8001622:	4603      	mov	r3, r0
 8001624:	4a78      	ldr	r2, [pc, #480]	; (8001808 <task_ros2_function+0x328>)
 8001626:	6013      	str	r3, [r2, #0]

	  rclc_subscription_init_best_effort(
 8001628:	f00c f90e 	bl	800d848 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 800162c:	4602      	mov	r2, r0
 800162e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001632:	4b76      	ldr	r3, [pc, #472]	; (800180c <task_ros2_function+0x32c>)
 8001634:	4874      	ldr	r0, [pc, #464]	; (8001808 <task_ros2_function+0x328>)
 8001636:	f009 fea3 	bl	800b380 <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16MultiArray),
			  "/receive_commands_from_ros");


	  golfinho_check_status_msg.data.capacity = 5;
 800163a:	4b75      	ldr	r3, [pc, #468]	; (8001810 <task_ros2_function+0x330>)
 800163c:	2205      	movs	r2, #5
 800163e:	619a      	str	r2, [r3, #24]
	  golfinho_check_status_msg.data.size = 5;
 8001640:	4b73      	ldr	r3, [pc, #460]	; (8001810 <task_ros2_function+0x330>)
 8001642:	2205      	movs	r2, #5
 8001644:	615a      	str	r2, [r3, #20]
	  golfinho_check_status_msg.data.data = (uint8_t*) pvPortMalloc(golfinho_check_status_msg.data.capacity * sizeof(uint8_t));
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <task_ros2_function+0x330>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4618      	mov	r0, r3
 800164c:	f008 fca6 	bl	8009f9c <pvPortMalloc>
 8001650:	4603      	mov	r3, r0
 8001652:	4a6f      	ldr	r2, [pc, #444]	; (8001810 <task_ros2_function+0x330>)
 8001654:	6113      	str	r3, [r2, #16]
	  golfinho_check_status_msg.layout.dim.capacity = 5;
 8001656:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <task_ros2_function+0x330>)
 8001658:	2205      	movs	r2, #5
 800165a:	609a      	str	r2, [r3, #8]
	  golfinho_check_status_msg.layout.dim.size = 5;
 800165c:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <task_ros2_function+0x330>)
 800165e:	2205      	movs	r2, #5
 8001660:	605a      	str	r2, [r3, #4]
	  golfinho_check_status_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_check_status_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 8001662:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <task_ros2_function+0x330>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4618      	mov	r0, r3
 8001670:	f008 fc94 	bl	8009f9c <pvPortMalloc>
 8001674:	4603      	mov	r3, r0
 8001676:	4a66      	ldr	r2, [pc, #408]	; (8001810 <task_ros2_function+0x330>)
 8001678:	6013      	str	r3, [r2, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001680:	e031      	b.n	80016e6 <task_ros2_function+0x206>
	 		golfinho_check_status_msg.layout.dim.data[i].label.capacity = 7;
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <task_ros2_function+0x330>)
 8001684:	6819      	ldr	r1, [r3, #0]
 8001686:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	2207      	movs	r2, #7
 8001696:	609a      	str	r2, [r3, #8]
	 		golfinho_check_status_msg.layout.dim.data[i].label.size = 7;
 8001698:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <task_ros2_function+0x330>)
 800169a:	6819      	ldr	r1, [r3, #0]
 800169c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	2207      	movs	r2, #7
 80016ac:	605a      	str	r2, [r3, #4]
	 		golfinho_check_status_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_check_status_msg.layout.dim.data[i].label.capacity * sizeof(char));
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <task_ros2_function+0x330>)
 80016b0:	6819      	ldr	r1, [r3, #0]
 80016b2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	6898      	ldr	r0, [r3, #8]
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <task_ros2_function+0x330>)
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	18cc      	adds	r4, r1, r3
 80016d4:	f008 fc62 	bl	8009f9c <pvPortMalloc>
 80016d8:	4603      	mov	r3, r0
 80016da:	6023      	str	r3, [r4, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 80016dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <task_ros2_function+0x330>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d3c7      	bcc.n	8001682 <task_ros2_function+0x1a2>

	 	  }

	 	  strcpy(golfinho_check_status_msg.layout.dim.data[0].label.data, "reserved");
 80016f2:	4b47      	ldr	r3, [pc, #284]	; (8001810 <task_ros2_function+0x330>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4946      	ldr	r1, [pc, #280]	; (8001814 <task_ros2_function+0x334>)
 80016fa:	461a      	mov	r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	cb03      	ldmia	r3!, {r0, r1}
 8001700:	6010      	str	r0, [r2, #0]
 8001702:	6051      	str	r1, [r2, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	7213      	strb	r3, [r2, #8]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[1].label.data, "status");
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <task_ros2_function+0x330>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3314      	adds	r3, #20
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a41      	ldr	r2, [pc, #260]	; (8001818 <task_ros2_function+0x338>)
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	6018      	str	r0, [r3, #0]
 8001716:	8891      	ldrh	r1, [r2, #4]
 8001718:	7992      	ldrb	r2, [r2, #6]
 800171a:	8099      	strh	r1, [r3, #4]
 800171c:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[2].label.data, "op_mod");
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <task_ros2_function+0x330>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3328      	adds	r3, #40	; 0x28
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a3d      	ldr	r2, [pc, #244]	; (800181c <task_ros2_function+0x33c>)
 8001728:	6810      	ldr	r0, [r2, #0]
 800172a:	6018      	str	r0, [r3, #0]
 800172c:	8891      	ldrh	r1, [r2, #4]
 800172e:	7992      	ldrb	r2, [r2, #6]
 8001730:	8099      	strh	r1, [r3, #4]
 8001732:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[3].label.data, "key_th");
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <task_ros2_function+0x330>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	333c      	adds	r3, #60	; 0x3c
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a38      	ldr	r2, [pc, #224]	; (8001820 <task_ros2_function+0x340>)
 800173e:	6810      	ldr	r0, [r2, #0]
 8001740:	6018      	str	r0, [r3, #0]
 8001742:	8891      	ldrh	r1, [r2, #4]
 8001744:	7992      	ldrb	r2, [r2, #6]
 8001746:	8099      	strh	r1, [r3, #4]
 8001748:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[4].label.data, "key_br");
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <task_ros2_function+0x330>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3350      	adds	r3, #80	; 0x50
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <task_ros2_function+0x344>)
 8001754:	6810      	ldr	r0, [r2, #0]
 8001756:	6018      	str	r0, [r3, #0]
 8001758:	8891      	ldrh	r1, [r2, #4]
 800175a:	7992      	ldrb	r2, [r2, #6]
 800175c:	8099      	strh	r1, [r3, #4]
 800175e:	719a      	strb	r2, [r3, #6]


		 	golfinho_motion_info_gpio_output_msg.data.capacity = 6;
 8001760:	4b31      	ldr	r3, [pc, #196]	; (8001828 <task_ros2_function+0x348>)
 8001762:	2206      	movs	r2, #6
 8001764:	619a      	str	r2, [r3, #24]
		 	golfinho_motion_info_gpio_output_msg.data.size = 6;
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <task_ros2_function+0x348>)
 8001768:	2206      	movs	r2, #6
 800176a:	615a      	str	r2, [r3, #20]
		 	golfinho_motion_info_gpio_output_msg.data.data = (uint16_t*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.data.capacity * sizeof(uint16_t));
 800176c:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <task_ros2_function+0x348>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4618      	mov	r0, r3
 8001774:	f008 fc12 	bl	8009f9c <pvPortMalloc>
 8001778:	4603      	mov	r3, r0
 800177a:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <task_ros2_function+0x348>)
 800177c:	6113      	str	r3, [r2, #16]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.capacity = 6;
 800177e:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <task_ros2_function+0x348>)
 8001780:	2206      	movs	r2, #6
 8001782:	609a      	str	r2, [r3, #8]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.size = 6;
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <task_ros2_function+0x348>)
 8001786:	2206      	movs	r2, #6
 8001788:	605a      	str	r2, [r3, #4]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <task_ros2_function+0x348>)
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f008 fc00 	bl	8009f9c <pvPortMalloc>
 800179c:	4603      	mov	r3, r0
 800179e:	4a22      	ldr	r2, [pc, #136]	; (8001828 <task_ros2_function+0x348>)
 80017a0:	6013      	str	r3, [r2, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80017a8:	e072      	b.n	8001890 <task_ros2_function+0x3b0>
 80017aa:	bf00      	nop
 80017ac:	08001395 	.word	0x08001395
 80017b0:	0800132d 	.word	0x0800132d
 80017b4:	0800130d 	.word	0x0800130d
 80017b8:	080012e1 	.word	0x080012e1
 80017bc:	20008470 	.word	0x20008470
 80017c0:	080029f9 	.word	0x080029f9
 80017c4:	08002a3d 	.word	0x08002a3d
 80017c8:	08002a75 	.word	0x08002a75
 80017cc:	08002ae1 	.word	0x08002ae1
 80017d0:	0801955c 	.word	0x0801955c
 80017d4:	08019584 	.word	0x08019584
 80017d8:	08019598 	.word	0x08019598
 80017dc:	080195a4 	.word	0x080195a4
 80017e0:	080195c4 	.word	0x080195c4
 80017e4:	20008284 	.word	0x20008284
 80017e8:	080195e8 	.word	0x080195e8
 80017ec:	200080d4 	.word	0x200080d4
 80017f0:	0801960c 	.word	0x0801960c
 80017f4:	200068d0 	.word	0x200068d0
 80017f8:	0801961c 	.word	0x0801961c
 80017fc:	200082d4 	.word	0x200082d4
 8001800:	0801962c 	.word	0x0801962c
 8001804:	2000823c 	.word	0x2000823c
 8001808:	20008288 	.word	0x20008288
 800180c:	08019648 	.word	0x08019648
 8001810:	20008298 	.word	0x20008298
 8001814:	08019664 	.word	0x08019664
 8001818:	08019670 	.word	0x08019670
 800181c:	08019678 	.word	0x08019678
 8001820:	08019680 	.word	0x08019680
 8001824:	08019688 	.word	0x08019688
 8001828:	20008220 	.word	0x20008220
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity = 9;
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <task_ros2_function+0x488>)
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	2209      	movs	r2, #9
 8001840:	609a      	str	r2, [r3, #8]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.size = 9;
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <task_ros2_function+0x488>)
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	440b      	add	r3, r1
 8001854:	2209      	movs	r2, #9
 8001856:	605a      	str	r2, [r3, #4]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity * sizeof(char));
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <task_ros2_function+0x488>)
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	6898      	ldr	r0, [r3, #8]
 800186c:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <task_ros2_function+0x488>)
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	18cc      	adds	r4, r1, r3
 800187e:	f008 fb8d 	bl	8009f9c <pvPortMalloc>
 8001882:	4603      	mov	r3, r0
 8001884:	6023      	str	r3, [r4, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 8001886:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800188a:	3301      	adds	r3, #1
 800188c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <task_ros2_function+0x488>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001898:	429a      	cmp	r2, r3
 800189a:	d3c7      	bcc.n	800182c <task_ros2_function+0x34c>

			 	  }

			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[0].label.data, "reserved");
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <task_ros2_function+0x488>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4932      	ldr	r1, [pc, #200]	; (800196c <task_ros2_function+0x48c>)
 80018a4:	461a      	mov	r2, r3
 80018a6:	460b      	mov	r3, r1
 80018a8:	cb03      	ldmia	r3!, {r0, r1}
 80018aa:	6010      	str	r0, [r2, #0]
 80018ac:	6051      	str	r1, [r2, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[1].label.data, "steering");
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <task_ros2_function+0x488>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	3314      	adds	r3, #20
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	492d      	ldr	r1, [pc, #180]	; (8001970 <task_ros2_function+0x490>)
 80018bc:	461a      	mov	r2, r3
 80018be:	460b      	mov	r3, r1
 80018c0:	cb03      	ldmia	r3!, {r0, r1}
 80018c2:	6010      	str	r0, [r2, #0]
 80018c4:	6051      	str	r1, [r2, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[2].label.data, "throttle");
 80018ca:	4b27      	ldr	r3, [pc, #156]	; (8001968 <task_ros2_function+0x488>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3328      	adds	r3, #40	; 0x28
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4928      	ldr	r1, [pc, #160]	; (8001974 <task_ros2_function+0x494>)
 80018d4:	461a      	mov	r2, r3
 80018d6:	460b      	mov	r3, r1
 80018d8:	cb03      	ldmia	r3!, {r0, r1}
 80018da:	6010      	str	r0, [r2, #0]
 80018dc:	6051      	str	r1, [r2, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[3].label.data, "break");
 80018e2:	4b21      	ldr	r3, [pc, #132]	; (8001968 <task_ros2_function+0x488>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	333c      	adds	r3, #60	; 0x3c
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <task_ros2_function+0x498>)
 80018ec:	6810      	ldr	r0, [r2, #0]
 80018ee:	6018      	str	r0, [r3, #0]
 80018f0:	8892      	ldrh	r2, [r2, #4]
 80018f2:	809a      	strh	r2, [r3, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[4].label.data, "bat_car");
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <task_ros2_function+0x488>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3350      	adds	r3, #80	; 0x50
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	491f      	ldr	r1, [pc, #124]	; (800197c <task_ros2_function+0x49c>)
 80018fe:	461a      	mov	r2, r3
 8001900:	460b      	mov	r3, r1
 8001902:	cb03      	ldmia	r3!, {r0, r1}
 8001904:	6010      	str	r0, [r2, #0]
 8001906:	6051      	str	r1, [r2, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[5].label.data, "bat_sys");
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <task_ros2_function+0x488>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3364      	adds	r3, #100	; 0x64
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	491b      	ldr	r1, [pc, #108]	; (8001980 <task_ros2_function+0x4a0>)
 8001912:	461a      	mov	r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	cb03      	ldmia	r3!, {r0, r1}
 8001918:	6010      	str	r0, [r2, #0]
 800191a:	6051      	str	r1, [r2, #4]

		 	    receive.data.capacity = 6;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <task_ros2_function+0x4a4>)
 800191e:	2206      	movs	r2, #6
 8001920:	619a      	str	r2, [r3, #24]
		 	    receive.data.size = 6;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <task_ros2_function+0x4a4>)
 8001924:	2206      	movs	r2, #6
 8001926:	615a      	str	r2, [r3, #20]
		 	    receive.data.data = (uint16_t*) pvPortMalloc(receive.data.capacity * sizeof(uint16_t));
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <task_ros2_function+0x4a4>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f008 fb34 	bl	8009f9c <pvPortMalloc>
 8001934:	4603      	mov	r3, r0
 8001936:	4a13      	ldr	r2, [pc, #76]	; (8001984 <task_ros2_function+0x4a4>)
 8001938:	6113      	str	r3, [r2, #16]
		 	    receive.layout.dim.capacity = 6;
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <task_ros2_function+0x4a4>)
 800193c:	2206      	movs	r2, #6
 800193e:	609a      	str	r2, [r3, #8]
		 	    receive.layout.dim.size = 6;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <task_ros2_function+0x4a4>)
 8001942:	2206      	movs	r2, #6
 8001944:	605a      	str	r2, [r3, #4]
		 	    receive.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(receive.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <task_ros2_function+0x4a4>)
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4618      	mov	r0, r3
 8001954:	f008 fb22 	bl	8009f9c <pvPortMalloc>
 8001958:	4603      	mov	r3, r0
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <task_ros2_function+0x4a4>)
 800195c:	6013      	str	r3, [r2, #0]
				 	  for (size_t i =0; i< receive.layout.dim.capacity; i++){
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001964:	e042      	b.n	80019ec <task_ros2_function+0x50c>
 8001966:	bf00      	nop
 8001968:	20008220 	.word	0x20008220
 800196c:	08019664 	.word	0x08019664
 8001970:	08019690 	.word	0x08019690
 8001974:	0801969c 	.word	0x0801969c
 8001978:	080196a8 	.word	0x080196a8
 800197c:	080196b0 	.word	0x080196b0
 8001980:	080196b8 	.word	0x080196b8
 8001984:	200082b4 	.word	0x200082b4
				 	    receive.layout.dim.data[i].label.capacity = 6;
 8001988:	4baf      	ldr	r3, [pc, #700]	; (8001c48 <task_ros2_function+0x768>)
 800198a:	6819      	ldr	r1, [r3, #0]
 800198c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	2206      	movs	r2, #6
 800199c:	609a      	str	r2, [r3, #8]
				 		receive.layout.dim.data[i].label.size = 6;
 800199e:	4baa      	ldr	r3, [pc, #680]	; (8001c48 <task_ros2_function+0x768>)
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	2206      	movs	r2, #6
 80019b2:	605a      	str	r2, [r3, #4]
				 		receive.layout.dim.data[i].label.data = (char*) pvPortMalloc(receive.layout.dim.data[i].label.capacity * sizeof(char));
 80019b4:	4ba4      	ldr	r3, [pc, #656]	; (8001c48 <task_ros2_function+0x768>)
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	6898      	ldr	r0, [r3, #8]
 80019c8:	4b9f      	ldr	r3, [pc, #636]	; (8001c48 <task_ros2_function+0x768>)
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	18cc      	adds	r4, r1, r3
 80019da:	f008 fadf 	bl	8009f9c <pvPortMalloc>
 80019de:	4603      	mov	r3, r0
 80019e0:	6023      	str	r3, [r4, #0]
				 	  for (size_t i =0; i< receive.layout.dim.capacity; i++){
 80019e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80019e6:	3301      	adds	r3, #1
 80019e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80019ec:	4b96      	ldr	r3, [pc, #600]	; (8001c48 <task_ros2_function+0x768>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3c7      	bcc.n	8001988 <task_ros2_function+0x4a8>

				 	  }
				 	    strcpy(receive.layout.dim.data[0].label.data, "k_sw");
 80019f8:	4b93      	ldr	r3, [pc, #588]	; (8001c48 <task_ros2_function+0x768>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a93      	ldr	r2, [pc, #588]	; (8001c4c <task_ros2_function+0x76c>)
 8001a00:	6810      	ldr	r0, [r2, #0]
 8001a02:	6018      	str	r0, [r3, #0]
 8001a04:	7912      	ldrb	r2, [r2, #4]
 8001a06:	711a      	strb	r2, [r3, #4]
				 	    strcpy(receive.layout.dim.data[1].label.data, "op_mod");
 8001a08:	4b8f      	ldr	r3, [pc, #572]	; (8001c48 <task_ros2_function+0x768>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3314      	adds	r3, #20
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a8f      	ldr	r2, [pc, #572]	; (8001c50 <task_ros2_function+0x770>)
 8001a12:	6810      	ldr	r0, [r2, #0]
 8001a14:	6018      	str	r0, [r3, #0]
 8001a16:	8891      	ldrh	r1, [r2, #4]
 8001a18:	7992      	ldrb	r2, [r2, #6]
 8001a1a:	8099      	strh	r1, [r3, #4]
 8001a1c:	719a      	strb	r2, [r3, #6]
				    	strcpy(receive.layout.dim.data[2].label.data, "k_th");
 8001a1e:	4b8a      	ldr	r3, [pc, #552]	; (8001c48 <task_ros2_function+0x768>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3328      	adds	r3, #40	; 0x28
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a8b      	ldr	r2, [pc, #556]	; (8001c54 <task_ros2_function+0x774>)
 8001a28:	6810      	ldr	r0, [r2, #0]
 8001a2a:	6018      	str	r0, [r3, #0]
 8001a2c:	7912      	ldrb	r2, [r2, #4]
 8001a2e:	711a      	strb	r2, [r3, #4]
				    	strcpy(receive.layout.dim.data[3].label.data, "k_brk");
 8001a30:	4b85      	ldr	r3, [pc, #532]	; (8001c48 <task_ros2_function+0x768>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	333c      	adds	r3, #60	; 0x3c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a87      	ldr	r2, [pc, #540]	; (8001c58 <task_ros2_function+0x778>)
 8001a3a:	6810      	ldr	r0, [r2, #0]
 8001a3c:	6018      	str	r0, [r3, #0]
 8001a3e:	8892      	ldrh	r2, [r2, #4]
 8001a40:	809a      	strh	r2, [r3, #4]
				 	    strcpy(receive.layout.dim.data[4].label.data, "th_an");
 8001a42:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <task_ros2_function+0x768>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3350      	adds	r3, #80	; 0x50
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a84      	ldr	r2, [pc, #528]	; (8001c5c <task_ros2_function+0x77c>)
 8001a4c:	6810      	ldr	r0, [r2, #0]
 8001a4e:	6018      	str	r0, [r3, #0]
 8001a50:	8892      	ldrh	r2, [r2, #4]
 8001a52:	809a      	strh	r2, [r3, #4]
				    	strcpy(receive.layout.dim.data[5].label.data, "brk_an");
 8001a54:	4b7c      	ldr	r3, [pc, #496]	; (8001c48 <task_ros2_function+0x768>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3364      	adds	r3, #100	; 0x64
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a80      	ldr	r2, [pc, #512]	; (8001c60 <task_ros2_function+0x780>)
 8001a5e:	6810      	ldr	r0, [r2, #0]
 8001a60:	6018      	str	r0, [r3, #0]
 8001a62:	8891      	ldrh	r1, [r2, #4]
 8001a64:	7992      	ldrb	r2, [r2, #6]
 8001a66:	8099      	strh	r1, [r3, #4]
 8001a68:	719a      	strb	r2, [r3, #6]

	//imu
                        int STRING_BUFFER_LEN=10;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				    	char imu_buffer[STRING_BUFFER_LEN];
 8001a70:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001a74:	1e63      	subs	r3, r4, #1
 8001a76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	00cb      	lsls	r3, r1, #3
 8001a8c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a90:	00c2      	lsls	r2, r0, #3
 8001a92:	4623      	mov	r3, r4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	00cb      	lsls	r3, r1, #3
 8001aa4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aa8:	00c2      	lsls	r2, r0, #3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	3307      	adds	r3, #7
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ab6:	ab02      	add	r3, sp, #8
 8001ab8:	3300      	adds	r3, #0
 8001aba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				    	imu_.header.frame_id.data = imu_buffer;
 8001abe:	4a69      	ldr	r2, [pc, #420]	; (8001c64 <task_ros2_function+0x784>)
 8001ac0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ac4:	6093      	str	r3, [r2, #8]
				    	imu_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001ac6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001aca:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <task_ros2_function+0x784>)
 8001acc:	6113      	str	r3, [r2, #16]

	//gps
				    	char gps_buffer[STRING_BUFFER_LEN];
 8001ace:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001ad2:	1e63      	subs	r3, r4, #1
 8001ad4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ad8:	4623      	mov	r3, r4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f04f 0100 	mov.w	r1, #0
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	00cb      	lsls	r3, r1, #3
 8001aea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001aee:	00c2      	lsls	r2, r0, #3
 8001af0:	4623      	mov	r3, r4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f04f 0100 	mov.w	r1, #0
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00cb      	lsls	r3, r1, #3
 8001b02:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b06:	00c2      	lsls	r2, r0, #3
 8001b08:	4623      	mov	r3, r4
 8001b0a:	3307      	adds	r3, #7
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	ebad 0d03 	sub.w	sp, sp, r3
 8001b14:	ab02      	add	r3, sp, #8
 8001b16:	3300      	adds	r3, #0
 8001b18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				    	gps_.header.frame_id.data = gps_buffer;
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <task_ros2_function+0x788>)
 8001b1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b22:	6093      	str	r3, [r2, #8]
				    	gps_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001b24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b28:	4a4f      	ldr	r2, [pc, #316]	; (8001c68 <task_ros2_function+0x788>)
 8001b2a:	6113      	str	r3, [r2, #16]

	// joint_steering

				    	sensor_msgs__msg__JointState__init(&joint_steering);
 8001b2c:	484f      	ldr	r0, [pc, #316]	; (8001c6c <task_ros2_function+0x78c>)
 8001b2e:	f00b fa41 	bl	800cfb4 <sensor_msgs__msg__JointState__init>
				    	joint_steering=*sensor_msgs__msg__JointState__create();
 8001b32:	f00b fab1 	bl	800d098 <sensor_msgs__msg__JointState__create>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <task_ros2_function+0x78c>)
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	2344      	movs	r3, #68	; 0x44
 8001b40:	461a      	mov	r2, r3
 8001b42:	f016 f953 	bl	8017dec <memcpy>
					 	joint_steering.effort.capacity=1;
					 	joint_steering.effort.size=1;
					 	joint_steering.effort.data=(double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
*/
	  // Create a timer
	  rclc_timer_init_default(&golfinho_check_status_timer, &support, RCL_MS_TO_NS(500), golfinho_check_status_timer_callback);
 8001b46:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b4a:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <task_ros2_function+0x790>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	a336      	add	r3, pc, #216	; (adr r3, 8001c28 <task_ros2_function+0x748>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	4847      	ldr	r0, [pc, #284]	; (8001c74 <task_ros2_function+0x794>)
 8001b56:	f009 fc47 	bl	800b3e8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_motion_info_timer, &support, RCL_MS_TO_NS(100), golfinho_motion_info_timer_callback);
 8001b5a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <task_ros2_function+0x798>)
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	a333      	add	r3, pc, #204	; (adr r3, 8001c30 <task_ros2_function+0x750>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	4844      	ldr	r0, [pc, #272]	; (8001c7c <task_ros2_function+0x79c>)
 8001b6a:	f009 fc3d 	bl	800b3e8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_imu_timer, &support, RCL_MS_TO_NS(25), golfinho_imu_timer_callback);
 8001b6e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b72:	4b43      	ldr	r3, [pc, #268]	; (8001c80 <task_ros2_function+0x7a0>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	a330      	add	r3, pc, #192	; (adr r3, 8001c38 <task_ros2_function+0x758>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	4841      	ldr	r0, [pc, #260]	; (8001c84 <task_ros2_function+0x7a4>)
 8001b7e:	f009 fc33 	bl	800b3e8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_gps_timer, &support, RCL_MS_TO_NS(1000), golfinho_gps_timer_callback);
 8001b82:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <task_ros2_function+0x7a8>)
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	a32d      	add	r3, pc, #180	; (adr r3, 8001c40 <task_ros2_function+0x760>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	483e      	ldr	r0, [pc, #248]	; (8001c8c <task_ros2_function+0x7ac>)
 8001b92:	f009 fc29 	bl	800b3e8 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_joint_steering_timer, &support, RCL_MS_TO_NS(100), golfinho_joint_steering_timer_callback);
 8001b96:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001b9a:	4b3d      	ldr	r3, [pc, #244]	; (8001c90 <task_ros2_function+0x7b0>)
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	a324      	add	r3, pc, #144	; (adr r3, 8001c30 <task_ros2_function+0x750>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	483b      	ldr	r0, [pc, #236]	; (8001c94 <task_ros2_function+0x7b4>)
 8001ba6:	f009 fc1f 	bl	800b3e8 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context,6, &allocator);
 8001baa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001bae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bb2:	f103 0108 	add.w	r1, r3, #8
 8001bb6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001bba:	4613      	mov	r3, r2
 8001bbc:	2206      	movs	r2, #6
 8001bbe:	f009 f8ab 	bl	800ad18 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &receive_commands_from_ros_sub, &receive,
 8001bc2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <task_ros2_function+0x7b8>)
 8001bcc:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <task_ros2_function+0x768>)
 8001bce:	4933      	ldr	r1, [pc, #204]	; (8001c9c <task_ros2_function+0x7bc>)
 8001bd0:	f009 f916 	bl	800ae00 <rclc_executor_add_subscription>
	 	  			  &receive_commands_from_ros_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	  rclc_executor_add_timer(&executor, &golfinho_check_status_timer);
 8001bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd8:	4926      	ldr	r1, [pc, #152]	; (8001c74 <task_ros2_function+0x794>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f009 f948 	bl	800ae70 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_motion_info_timer);
 8001be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be4:	4925      	ldr	r1, [pc, #148]	; (8001c7c <task_ros2_function+0x79c>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f009 f942 	bl	800ae70 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_joint_steering_timer);
 8001bec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf0:	4928      	ldr	r1, [pc, #160]	; (8001c94 <task_ros2_function+0x7b4>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 f93c 	bl	800ae70 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_imu_timer);
 8001bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfc:	4921      	ldr	r1, [pc, #132]	; (8001c84 <task_ros2_function+0x7a4>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f009 f936 	bl	800ae70 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_gps_timer);
 8001c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c08:	4920      	ldr	r1, [pc, #128]	; (8001c8c <task_ros2_function+0x7ac>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f009 f930 	bl	800ae70 <rclc_executor_add_timer>

      // Run executor
	  rclc_executor_spin(&executor);
 8001c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c14:	4618      	mov	r0, r3
 8001c16:	f009 facd 	bl	800b1b4 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 8001c1a:	200a      	movs	r0, #10
 8001c1c:	f005 fe82 	bl	8007924 <osDelay>
 8001c20:	e7fb      	b.n	8001c1a <task_ros2_function+0x73a>
 8001c22:	bf00      	nop
 8001c24:	f3af 8000 	nop.w
 8001c28:	1dcd6500 	.word	0x1dcd6500
 8001c2c:	00000000 	.word	0x00000000
 8001c30:	05f5e100 	.word	0x05f5e100
 8001c34:	00000000 	.word	0x00000000
 8001c38:	017d7840 	.word	0x017d7840
 8001c3c:	00000000 	.word	0x00000000
 8001c40:	3b9aca00 	.word	0x3b9aca00
 8001c44:	00000000 	.word	0x00000000
 8001c48:	200082b4 	.word	0x200082b4
 8001c4c:	080196c0 	.word	0x080196c0
 8001c50:	08019678 	.word	0x08019678
 8001c54:	080196c8 	.word	0x080196c8
 8001c58:	080196d0 	.word	0x080196d0
 8001c5c:	080196d8 	.word	0x080196d8
 8001c60:	080196e0 	.word	0x080196e0
 8001c64:	200080e0 	.word	0x200080e0
 8001c68:	200068e0 	.word	0x200068e0
 8001c6c:	20008240 	.word	0x20008240
 8001c70:	0800209d 	.word	0x0800209d
 8001c74:	2000828c 	.word	0x2000828c
 8001c78:	08002165 	.word	0x08002165
 8001c7c:	20008290 	.word	0x20008290
 8001c80:	080023e5 	.word	0x080023e5
 8001c84:	20008294 	.word	0x20008294
 8001c88:	08002471 	.word	0x08002471
 8001c8c:	2000833c 	.word	0x2000833c
 8001c90:	080024fd 	.word	0x080024fd
 8001c94:	200080d0 	.word	0x200080d0
 8001c98:	08002369 	.word	0x08002369
 8001c9c:	20008288 	.word	0x20008288

08001ca0 <digital_inputs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_digital_inputs_task */
void digital_inputs_task(void *argument)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN digital_inputs_task */
  /* Infinite loop */
	 uint8_t stats[3]={0,0,0};
 8001ca8:	4a35      	ldr	r2, [pc, #212]	; (8001d80 <digital_inputs_task+0xe0>)
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	8019      	strh	r1, [r3, #0]
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	0c12      	lsrs	r2, r2, #16
 8001cb8:	701a      	strb	r2, [r3, #0]
	  for(;;){

		  // key switch
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8001cba:	2140      	movs	r1, #64	; 0x40
 8001cbc:	4831      	ldr	r0, [pc, #196]	; (8001d84 <digital_inputs_task+0xe4>)
 8001cbe:	f003 fd31 	bl	8005724 <HAL_GPIO_ReadPin>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	bf0c      	ite	eq
 8001cc8:	2301      	moveq	r3, #1
 8001cca:	2300      	movne	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	73bb      	strb	r3, [r7, #14]
		  stats[1]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 8001cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd4:	482c      	ldr	r0, [pc, #176]	; (8001d88 <digital_inputs_task+0xe8>)
 8001cd6:	f003 fd25 	bl	8005724 <HAL_GPIO_ReadPin>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf0c      	ite	eq
 8001ce0:	2301      	moveq	r3, #1
 8001ce2:	2300      	movne	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	737b      	strb	r3, [r7, #13]
		  stats[0]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8001ce8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cec:	4826      	ldr	r0, [pc, #152]	; (8001d88 <digital_inputs_task+0xe8>)
 8001cee:	f003 fd19 	bl	8005724 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	733b      	strb	r3, [r7, #12]

		  // break
		  digital_data_input_manual[4]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 8001d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d04:	4820      	ldr	r0, [pc, #128]	; (8001d88 <digital_inputs_task+0xe8>)
 8001d06:	f003 fd0d 	bl	8005724 <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <digital_inputs_task+0xec>)
 8001d1a:	711a      	strb	r2, [r3, #4]
		  // throttle
		  digital_data_input_manual[3]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8001d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d20:	4819      	ldr	r0, [pc, #100]	; (8001d88 <digital_inputs_task+0xe8>)
 8001d22:	f003 fcff 	bl	8005724 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <digital_inputs_task+0xec>)
 8001d36:	70da      	strb	r2, [r3, #3]

		  if(stats[0] || stats[1] || stats[2]){
 8001d38:	7b3b      	ldrb	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <digital_inputs_task+0xaa>
 8001d3e:	7b7b      	ldrb	r3, [r7, #13]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <digital_inputs_task+0xaa>
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <digital_inputs_task+0xd0>
			  if(stats[0])
 8001d4a:	7b3b      	ldrb	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <digital_inputs_task+0xb6>
			 	digital_data_input_manual[1]=2;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <digital_inputs_task+0xec>)
 8001d52:	2202      	movs	r2, #2
 8001d54:	705a      	strb	r2, [r3, #1]
			  if(stats[1])
 8001d56:	7b7b      	ldrb	r3, [r7, #13]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <digital_inputs_task+0xc2>
			 	digital_data_input_manual[1]=3;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <digital_inputs_task+0xec>)
 8001d5e:	2203      	movs	r2, #3
 8001d60:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <digital_inputs_task+0xd6>
			    digital_data_input_manual[1]=4;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <digital_inputs_task+0xec>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 8001d6e:	e002      	b.n	8001d76 <digital_inputs_task+0xd6>
		  }else
			  digital_data_input_manual[1]=1;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <digital_inputs_task+0xec>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	705a      	strb	r2, [r3, #1]

		  osDelay(100);
 8001d76:	2064      	movs	r0, #100	; 0x64
 8001d78:	f005 fdd4 	bl	8007924 <osDelay>
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8001d7c:	e79d      	b.n	8001cba <digital_inputs_task+0x1a>
 8001d7e:	bf00      	nop
 8001d80:	080196e8 	.word	0x080196e8
 8001d84:	40011000 	.word	0x40011000
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	20003210 	.word	0x20003210

08001d90 <analog_input_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_input_task */
void analog_input_task(void *argument)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_input_task */
  /* Infinite loop */
  for(;;)
  {
	  // Get ADC value
		  ADC_select_channel_Throttle();
 8001d98:	f000 fc1c 	bl	80025d4 <ADC_select_channel_Throttle>
		  HAL_ADC_Start(&hadc1);
 8001d9c:	4826      	ldr	r0, [pc, #152]	; (8001e38 <analog_input_task+0xa8>)
 8001d9e:	f001 fb2d 	bl	80033fc <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001da2:	210a      	movs	r1, #10
 8001da4:	4824      	ldr	r0, [pc, #144]	; (8001e38 <analog_input_task+0xa8>)
 8001da6:	f001 fc03 	bl	80035b0 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[3] = HAL_ADC_GetValue(&hadc1);
 8001daa:	4823      	ldr	r0, [pc, #140]	; (8001e38 <analog_input_task+0xa8>)
 8001dac:	f001 fd06 	bl	80037bc <HAL_ADC_GetValue>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b21      	ldr	r3, [pc, #132]	; (8001e3c <analog_input_task+0xac>)
 8001db6:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 8001db8:	481f      	ldr	r0, [pc, #124]	; (8001e38 <analog_input_task+0xa8>)
 8001dba:	f001 fbcd 	bl	8003558 <HAL_ADC_Stop>

	      ADC_select_channel_break();
 8001dbe:	f000 fbeb 	bl	8002598 <ADC_select_channel_break>
		  HAL_ADC_Start(&hadc1);
 8001dc2:	481d      	ldr	r0, [pc, #116]	; (8001e38 <analog_input_task+0xa8>)
 8001dc4:	f001 fb1a 	bl	80033fc <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001dc8:	210a      	movs	r1, #10
 8001dca:	481b      	ldr	r0, [pc, #108]	; (8001e38 <analog_input_task+0xa8>)
 8001dcc:	f001 fbf0 	bl	80035b0 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[2] = HAL_ADC_GetValue(&hadc1);
 8001dd0:	4819      	ldr	r0, [pc, #100]	; (8001e38 <analog_input_task+0xa8>)
 8001dd2:	f001 fcf3 	bl	80037bc <HAL_ADC_GetValue>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <analog_input_task+0xac>)
 8001ddc:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Stop(&hadc1);
 8001dde:	4816      	ldr	r0, [pc, #88]	; (8001e38 <analog_input_task+0xa8>)
 8001de0:	f001 fbba 	bl	8003558 <HAL_ADC_Stop>

		  ADC_select_channel_batery_car();
 8001de4:	f000 fc12 	bl	800260c <ADC_select_channel_batery_car>
		  HAL_ADC_Start(&hadc1);
 8001de8:	4813      	ldr	r0, [pc, #76]	; (8001e38 <analog_input_task+0xa8>)
 8001dea:	f001 fb07 	bl	80033fc <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001dee:	210a      	movs	r1, #10
 8001df0:	4811      	ldr	r0, [pc, #68]	; (8001e38 <analog_input_task+0xa8>)
 8001df2:	f001 fbdd 	bl	80035b0 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[4] = HAL_ADC_GetValue(&hadc1);
 8001df6:	4810      	ldr	r0, [pc, #64]	; (8001e38 <analog_input_task+0xa8>)
 8001df8:	f001 fce0 	bl	80037bc <HAL_ADC_GetValue>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <analog_input_task+0xac>)
 8001e02:	811a      	strh	r2, [r3, #8]
		  HAL_ADC_Stop(&hadc1);
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <analog_input_task+0xa8>)
 8001e06:	f001 fba7 	bl	8003558 <HAL_ADC_Stop>

		  ADC_select_channel_system_batery();
 8001e0a:	f000 fc1b 	bl	8002644 <ADC_select_channel_system_batery>
		  HAL_ADC_Start(&hadc1);
 8001e0e:	480a      	ldr	r0, [pc, #40]	; (8001e38 <analog_input_task+0xa8>)
 8001e10:	f001 faf4 	bl	80033fc <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001e14:	210a      	movs	r1, #10
 8001e16:	4808      	ldr	r0, [pc, #32]	; (8001e38 <analog_input_task+0xa8>)
 8001e18:	f001 fbca 	bl	80035b0 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[5] = HAL_ADC_GetValue(&hadc1);
 8001e1c:	4806      	ldr	r0, [pc, #24]	; (8001e38 <analog_input_task+0xa8>)
 8001e1e:	f001 fccd 	bl	80037bc <HAL_ADC_GetValue>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <analog_input_task+0xac>)
 8001e28:	815a      	strh	r2, [r3, #10]
		  HAL_ADC_Stop(&hadc1);
 8001e2a:	4803      	ldr	r0, [pc, #12]	; (8001e38 <analog_input_task+0xa8>)
 8001e2c:	f001 fb94 	bl	8003558 <HAL_ADC_Stop>

		  HAL_Delay(50);
 8001e30:	2032      	movs	r0, #50	; 0x32
 8001e32:	f001 f9d5 	bl	80031e0 <HAL_Delay>
		  ADC_select_channel_Throttle();
 8001e36:	e7af      	b.n	8001d98 <analog_input_task+0x8>
 8001e38:	20006864 	.word	0x20006864
 8001e3c:	20003218 	.word	0x20003218

08001e40 <automatic_manual_mode_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_automatic_manual_mode_Task */
void automatic_manual_mode_Task(void *argument)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN automatic_manual_mode_Task */
  /* Infinite loop */
  for(;;){

	  switch(flg){
 8001e48:	4b8d      	ldr	r3, [pc, #564]	; (8002080 <automatic_manual_mode_Task+0x240>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <automatic_manual_mode_Task+0x18>
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	f000 8088 	beq.w	8001f66 <automatic_manual_mode_Task+0x126>
 8001e56:	e10f      	b.n	8002078 <automatic_manual_mode_Task+0x238>

	  case 0:
      //KEY SWITCH
		  if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==3 || digital_data_input_manual[1]==4)
 8001e58:	4b8a      	ldr	r3, [pc, #552]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001e5a:	785b      	ldrb	r3, [r3, #1]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d007      	beq.n	8001e70 <automatic_manual_mode_Task+0x30>
 8001e60:	4b88      	ldr	r3, [pc, #544]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d003      	beq.n	8001e70 <automatic_manual_mode_Task+0x30>
 8001e68:	4b86      	ldr	r3, [pc, #536]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d105      	bne.n	8001e7c <automatic_manual_mode_Task+0x3c>
		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2104      	movs	r1, #4
 8001e74:	4884      	ldr	r0, [pc, #528]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001e76:	f003 fc6c 	bl	8005752 <HAL_GPIO_WritePin>
 8001e7a:	e008      	b.n	8001e8e <automatic_manual_mode_Task+0x4e>
         else
		     if(digital_data_input_manual[1]==2)
 8001e7c:	4b81      	ldr	r3, [pc, #516]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001e7e:	785b      	ldrb	r3, [r3, #1]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d104      	bne.n	8001e8e <automatic_manual_mode_Task+0x4e>
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 8001e84:	2201      	movs	r2, #1
 8001e86:	2104      	movs	r1, #4
 8001e88:	487f      	ldr	r0, [pc, #508]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001e8a:	f003 fc62 	bl	8005752 <HAL_GPIO_WritePin>



     	 if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==4)
 8001e8e:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001e90:	785b      	ldrb	r3, [r3, #1]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d007      	beq.n	8001ea6 <automatic_manual_mode_Task+0x66>
 8001e96:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001e98:	785b      	ldrb	r3, [r3, #1]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <automatic_manual_mode_Task+0x66>
 8001e9e:	4b79      	ldr	r3, [pc, #484]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001ea0:	785b      	ldrb	r3, [r3, #1]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d105      	bne.n	8001eb2 <automatic_manual_mode_Task+0x72>
     		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	4877      	ldr	r0, [pc, #476]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001eac:	f003 fc51 	bl	8005752 <HAL_GPIO_WritePin>
 8001eb0:	e008      	b.n	8001ec4 <automatic_manual_mode_Task+0x84>
     	 else
             if(digital_data_input_manual[1]==3)
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001eb4:	785b      	ldrb	r3, [r3, #1]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d104      	bne.n	8001ec4 <automatic_manual_mode_Task+0x84>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4872      	ldr	r0, [pc, #456]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001ec0:	f003 fc47 	bl	8005752 <HAL_GPIO_WritePin>

    	 if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==3)
 8001ec4:	4b6f      	ldr	r3, [pc, #444]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d007      	beq.n	8001edc <automatic_manual_mode_Task+0x9c>
 8001ecc:	4b6d      	ldr	r3, [pc, #436]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d003      	beq.n	8001edc <automatic_manual_mode_Task+0x9c>
 8001ed4:	4b6b      	ldr	r3, [pc, #428]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d105      	bne.n	8001ee8 <automatic_manual_mode_Task+0xa8>
    		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4869      	ldr	r0, [pc, #420]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001ee2:	f003 fc36 	bl	8005752 <HAL_GPIO_WritePin>
 8001ee6:	e008      	b.n	8001efa <automatic_manual_mode_Task+0xba>
    	 else
             if(digital_data_input_manual[1]==4)
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d104      	bne.n	8001efa <automatic_manual_mode_Task+0xba>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	4864      	ldr	r0, [pc, #400]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001ef6:	f003 fc2c 	bl	8005752 <HAL_GPIO_WritePin>


      // THROTTLE


             if(digital_data_input_manual[3]){
 8001efa:	4b62      	ldr	r3, [pc, #392]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001efc:	78db      	ldrb	r3, [r3, #3]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00c      	beq.n	8001f1c <automatic_manual_mode_Task+0xdc>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	2101      	movs	r1, #1
 8001f06:	4860      	ldr	r0, [pc, #384]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001f08:	f003 fc23 	bl	8005752 <HAL_GPIO_WritePin>
           	     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <automatic_manual_mode_Task+0x24c>)
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	485e      	ldr	r0, [pc, #376]	; (8002090 <automatic_manual_mode_Task+0x250>)
 8001f16:	f002 fd7d 	bl	8004a14 <HAL_DAC_SetValue>
 8001f1a:	e008      	b.n	8001f2e <automatic_manual_mode_Task+0xee>
               }else
            	 if(!digital_data_input_manual[3])
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001f1e:	78db      	ldrb	r3, [r3, #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <automatic_manual_mode_Task+0xee>
            		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2101      	movs	r1, #1
 8001f28:	4857      	ldr	r0, [pc, #348]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001f2a:	f003 fc12 	bl	8005752 <HAL_GPIO_WritePin>
      //  BREAK
             if(digital_data_input_manual[4]){
 8001f2e:	4b55      	ldr	r3, [pc, #340]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001f30:	791b      	ldrb	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00c      	beq.n	8001f50 <automatic_manual_mode_Task+0x110>
               	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4853      	ldr	r0, [pc, #332]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001f3c:	f003 fc09 	bl	8005752 <HAL_GPIO_WritePin>
                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[3]);
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <automatic_manual_mode_Task+0x24c>)
 8001f42:	88db      	ldrh	r3, [r3, #6]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2110      	movs	r1, #16
 8001f48:	4851      	ldr	r0, [pc, #324]	; (8002090 <automatic_manual_mode_Task+0x250>)
 8001f4a:	f002 fd63 	bl	8004a14 <HAL_DAC_SetValue>
            	}else
            	   if(!digital_data_input_manual[4])
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

		  break;
 8001f4e:	e090      	b.n	8002072 <automatic_manual_mode_Task+0x232>
            	   if(!digital_data_input_manual[4])
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <automatic_manual_mode_Task+0x244>)
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f040 808c 	bne.w	8002072 <automatic_manual_mode_Task+0x232>
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	484a      	ldr	r0, [pc, #296]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001f60:	f003 fbf7 	bl	8005752 <HAL_GPIO_WritePin>
		  break;
 8001f64:	e085      	b.n	8002072 <automatic_manual_mode_Task+0x232>

	  case 1:
		    //KEY SWITCH
     	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==3 || digital_data_input_auto[1]==4)
 8001f66:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d007      	beq.n	8001f7e <automatic_manual_mode_Task+0x13e>
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001f70:	785b      	ldrb	r3, [r3, #1]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d003      	beq.n	8001f7e <automatic_manual_mode_Task+0x13e>
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d105      	bne.n	8001f8a <automatic_manual_mode_Task+0x14a>
     		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2104      	movs	r1, #4
 8001f82:	4841      	ldr	r0, [pc, #260]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001f84:	f003 fbe5 	bl	8005752 <HAL_GPIO_WritePin>
 8001f88:	e008      	b.n	8001f9c <automatic_manual_mode_Task+0x15c>
  	      else
	        if(digital_data_input_auto[1]==2)
 8001f8a:	4b42      	ldr	r3, [pc, #264]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001f8c:	785b      	ldrb	r3, [r3, #1]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d104      	bne.n	8001f9c <automatic_manual_mode_Task+0x15c>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	2104      	movs	r1, #4
 8001f96:	483c      	ldr	r0, [pc, #240]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001f98:	f003 fbdb 	bl	8005752 <HAL_GPIO_WritePin>

    	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==2 || digital_data_input_auto[1]==4)
 8001f9c:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001f9e:	785b      	ldrb	r3, [r3, #1]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d007      	beq.n	8001fb4 <automatic_manual_mode_Task+0x174>
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d003      	beq.n	8001fb4 <automatic_manual_mode_Task+0x174>
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d105      	bne.n	8001fc0 <automatic_manual_mode_Task+0x180>
    		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	4833      	ldr	r0, [pc, #204]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001fba:	f003 fbca 	bl	8005752 <HAL_GPIO_WritePin>
 8001fbe:	e008      	b.n	8001fd2 <automatic_manual_mode_Task+0x192>
    	 else
		    if(digital_data_input_auto[1]==3)
 8001fc0:	4b34      	ldr	r3, [pc, #208]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d104      	bne.n	8001fd2 <automatic_manual_mode_Task+0x192>
		       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2108      	movs	r1, #8
 8001fcc:	482e      	ldr	r0, [pc, #184]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001fce:	f003 fbc0 	bl	8005752 <HAL_GPIO_WritePin>

      	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==2 || digital_data_input_auto[1]==3)
 8001fd2:	4b30      	ldr	r3, [pc, #192]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d007      	beq.n	8001fea <automatic_manual_mode_Task+0x1aa>
 8001fda:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <automatic_manual_mode_Task+0x1aa>
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001fe4:	785b      	ldrb	r3, [r3, #1]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d105      	bne.n	8001ff6 <automatic_manual_mode_Task+0x1b6>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2110      	movs	r1, #16
 8001fee:	4826      	ldr	r0, [pc, #152]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8001ff0:	f003 fbaf 	bl	8005752 <HAL_GPIO_WritePin>
 8001ff4:	e008      	b.n	8002008 <automatic_manual_mode_Task+0x1c8>
      	 else
	 	    if(digital_data_input_auto[1]==4)
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8001ff8:	785b      	ldrb	r3, [r3, #1]
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d104      	bne.n	8002008 <automatic_manual_mode_Task+0x1c8>
	       	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	2110      	movs	r1, #16
 8002002:	4821      	ldr	r0, [pc, #132]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8002004:	f003 fba5 	bl	8005752 <HAL_GPIO_WritePin>

		      // THROTTLE
		             if(digital_data_input_auto[3]){
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <automatic_manual_mode_Task+0x254>)
 800200a:	78db      	ldrb	r3, [r3, #3]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00c      	beq.n	800202a <automatic_manual_mode_Task+0x1ea>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	2101      	movs	r1, #1
 8002014:	481c      	ldr	r0, [pc, #112]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8002016:	f003 fb9c 	bl	8005752 <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_auto[2]);
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <automatic_manual_mode_Task+0x258>)
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	481b      	ldr	r0, [pc, #108]	; (8002090 <automatic_manual_mode_Task+0x250>)
 8002024:	f002 fcf6 	bl	8004a14 <HAL_DAC_SetValue>
 8002028:	e008      	b.n	800203c <automatic_manual_mode_Task+0x1fc>
	  	  	  	  	  }else
		            	 if(!digital_data_input_auto[3])
 800202a:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <automatic_manual_mode_Task+0x254>)
 800202c:	78db      	ldrb	r3, [r3, #3]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d104      	bne.n	800203c <automatic_manual_mode_Task+0x1fc>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2101      	movs	r1, #1
 8002036:	4814      	ldr	r0, [pc, #80]	; (8002088 <automatic_manual_mode_Task+0x248>)
 8002038:	f003 fb8b 	bl	8005752 <HAL_GPIO_WritePin>
            //  BREAK
		             if(digital_data_input_auto[4]){
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <automatic_manual_mode_Task+0x254>)
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00c      	beq.n	800205e <automatic_manual_mode_Task+0x21e>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	2102      	movs	r1, #2
 8002048:	480f      	ldr	r0, [pc, #60]	; (8002088 <automatic_manual_mode_Task+0x248>)
 800204a:	f003 fb82 	bl	8005752 <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_auto[3]);
 800204e:	4b12      	ldr	r3, [pc, #72]	; (8002098 <automatic_manual_mode_Task+0x258>)
 8002050:	88db      	ldrh	r3, [r3, #6]
 8002052:	2200      	movs	r2, #0
 8002054:	2110      	movs	r1, #16
 8002056:	480e      	ldr	r0, [pc, #56]	; (8002090 <automatic_manual_mode_Task+0x250>)
 8002058:	f002 fcdc 	bl	8004a14 <HAL_DAC_SetValue>
	  	  	  	  	  }else
	  	  	  	  		 if(!digital_data_input_auto[4])
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

	     break;
 800205c:	e00b      	b.n	8002076 <automatic_manual_mode_Task+0x236>
	  	  	  	  		 if(!digital_data_input_auto[4])
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <automatic_manual_mode_Task+0x254>)
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <automatic_manual_mode_Task+0x236>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2102      	movs	r1, #2
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <automatic_manual_mode_Task+0x248>)
 800206c:	f003 fb71 	bl	8005752 <HAL_GPIO_WritePin>
	     break;
 8002070:	e001      	b.n	8002076 <automatic_manual_mode_Task+0x236>
		  break;
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <automatic_manual_mode_Task+0x238>
	     break;
 8002076:	bf00      	nop

	  }


    osDelay(100);
 8002078:	2064      	movs	r0, #100	; 0x64
 800207a:	f005 fc53 	bl	8007924 <osDelay>
	  switch(flg){
 800207e:	e6e3      	b.n	8001e48 <automatic_manual_mode_Task+0x8>
 8002080:	2000320c 	.word	0x2000320c
 8002084:	20003210 	.word	0x20003210
 8002088:	40011000 	.word	0x40011000
 800208c:	20003218 	.word	0x20003218
 8002090:	200068bc 	.word	0x200068bc
 8002094:	20003224 	.word	0x20003224
 8002098:	2000322c 	.word	0x2000322c

0800209c <golfinho_check_status_timer_callback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* ROS CALLBACKS*/
void golfinho_check_status_timer_callback(rcl_timer_t * timer, int64_t last_call_time) // Envia os dados de estados do carrihno para o ros2
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modods de operação
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <golfinho_check_status_timer_callback+0xb0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01d      	beq.n	80020ec <golfinho_check_status_timer_callback+0x50>
     	        golfinho_check_status_msg.data.data[0]=digital_data_input_auto[0];
 80020b0:	4b27      	ldr	r3, [pc, #156]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <golfinho_check_status_timer_callback+0xb8>)
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	701a      	strb	r2, [r3, #0]
	         	golfinho_check_status_msg.data.data[1]=digital_data_input_auto[1]; // key_switch
 80020ba:	4b25      	ldr	r3, [pc, #148]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	3301      	adds	r3, #1
 80020c0:	4a24      	ldr	r2, [pc, #144]	; (8002154 <golfinho_check_status_timer_callback+0xb8>)
 80020c2:	7852      	ldrb	r2, [r2, #1]
 80020c4:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2]; // op_mode
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	3302      	adds	r3, #2
 80020cc:	4a21      	ldr	r2, [pc, #132]	; (8002154 <golfinho_check_status_timer_callback+0xb8>)
 80020ce:	7892      	ldrb	r2, [r2, #2]
 80020d0:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_auto[3]; // key_t
 80020d2:	4b1f      	ldr	r3, [pc, #124]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	3303      	adds	r3, #3
 80020d8:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <golfinho_check_status_timer_callback+0xb8>)
 80020da:	78d2      	ldrb	r2, [r2, #3]
 80020dc:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[4]=digital_data_input_auto[4]; // key_break
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	3304      	adds	r3, #4
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <golfinho_check_status_timer_callback+0xb8>)
 80020e6:	7912      	ldrb	r2, [r2, #4]
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e01c      	b.n	8002126 <golfinho_check_status_timer_callback+0x8a>
			}else {
				golfinho_check_status_msg.data.data[0]=digital_data_input_manual[0];
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <golfinho_check_status_timer_callback+0xbc>)
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[1]=digital_data_input_manual[1];// key_switch
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	3301      	adds	r3, #1
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <golfinho_check_status_timer_callback+0xbc>)
 80020fe:	7852      	ldrb	r2, [r2, #1]
 8002100:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2];  // op_mode
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	3302      	adds	r3, #2
 8002108:	4a12      	ldr	r2, [pc, #72]	; (8002154 <golfinho_check_status_timer_callback+0xb8>)
 800210a:	7892      	ldrb	r2, [r2, #2]
 800210c:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_manual[3];// key_t
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	3303      	adds	r3, #3
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <golfinho_check_status_timer_callback+0xbc>)
 8002116:	78d2      	ldrb	r2, [r2, #3]
 8002118:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[4]=digital_data_input_manual[4];// key_break
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	3304      	adds	r3, #4
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <golfinho_check_status_timer_callback+0xbc>)
 8002122:	7912      	ldrb	r2, [r2, #4]
 8002124:	701a      	strb	r2, [r3, #0]
   	         }

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub,&golfinho_check_status_msg, NULL);
 8002126:	2200      	movs	r2, #0
 8002128:	4909      	ldr	r1, [pc, #36]	; (8002150 <golfinho_check_status_timer_callback+0xb4>)
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <golfinho_check_status_timer_callback+0xc0>)
 800212c:	f008 fb62 	bl	800a7f4 <rcl_publish>
 8002130:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <golfinho_check_status_timer_callback+0xa6>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002138:	f240 21d1 	movw	r1, #721	; 0x2d1
 800213c:	4808      	ldr	r0, [pc, #32]	; (8002160 <golfinho_check_status_timer_callback+0xc4>)
 800213e:	f015 ff39 	bl	8017fb4 <iprintf>
		}
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000320c 	.word	0x2000320c
 8002150:	20008298 	.word	0x20008298
 8002154:	20003224 	.word	0x20003224
 8002158:	20003210 	.word	0x20003210
 800215c:	20008284 	.word	0x20008284
 8002160:	080196ec 	.word	0x080196ec

08002164 <golfinho_motion_info_timer_callback>:

void golfinho_motion_info_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modos de operação
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <golfinho_motion_info_timer_callback+0x1e4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d06a      	beq.n	800224e <golfinho_motion_info_timer_callback+0xea>

		if(digital_data_input_auto[3]) //acelerador
 8002178:	4b74      	ldr	r3, [pc, #464]	; (800234c <golfinho_motion_info_timer_callback+0x1e8>)
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <golfinho_motion_info_timer_callback+0x48>
		   golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_auto[2]*100/4096;
 8002180:	4b73      	ldr	r3, [pc, #460]	; (8002350 <golfinho_motion_info_timer_callback+0x1ec>)
 8002182:	889b      	ldrh	r3, [r3, #4]
 8002184:	461a      	mov	r2, r3
 8002186:	2364      	movs	r3, #100	; 0x64
 8002188:	fb03 f302 	mul.w	r3, r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	da01      	bge.n	8002194 <golfinho_motion_info_timer_callback+0x30>
 8002190:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002194:	131b      	asrs	r3, r3, #12
 8002196:	461a      	mov	r2, r3
 8002198:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f103 0408 	add.w	r4, r3, #8
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7fe f911 	bl	80003c8 <__aeabi_i2f>
 80021a6:	4603      	mov	r3, r0
 80021a8:	6023      	str	r3, [r4, #0]
 80021aa:	e005      	b.n	80021b8 <golfinho_motion_info_timer_callback+0x54>
		else
		   golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 80021ac:	4b69      	ldr	r3, [pc, #420]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	3308      	adds	r3, #8
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

		if(digital_data_input_auto[4]) //break
 80021b8:	4b64      	ldr	r3, [pc, #400]	; (800234c <golfinho_motion_info_timer_callback+0x1e8>)
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <golfinho_motion_info_timer_callback+0x88>
	    	golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_auto[3]*100/4096;
 80021c0:	4b63      	ldr	r3, [pc, #396]	; (8002350 <golfinho_motion_info_timer_callback+0x1ec>)
 80021c2:	88db      	ldrh	r3, [r3, #6]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2364      	movs	r3, #100	; 0x64
 80021c8:	fb03 f302 	mul.w	r3, r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da01      	bge.n	80021d4 <golfinho_motion_info_timer_callback+0x70>
 80021d0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80021d4:	131b      	asrs	r3, r3, #12
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f103 040c 	add.w	r4, r3, #12
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe f8f1 	bl	80003c8 <__aeabi_i2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	6023      	str	r3, [r4, #0]
 80021ea:	e005      	b.n	80021f8 <golfinho_motion_info_timer_callback+0x94>
		else
	    	golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 80021ec:	4b59      	ldr	r3, [pc, #356]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	330c      	adds	r3, #12
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

		golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 80021f8:	4b57      	ldr	r3, [pc, #348]	; (8002358 <golfinho_motion_info_timer_callback+0x1f4>)
 80021fa:	891b      	ldrh	r3, [r3, #8]
 80021fc:	461a      	mov	r2, r3
 80021fe:	2364      	movs	r3, #100	; 0x64
 8002200:	fb03 f302 	mul.w	r3, r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	da01      	bge.n	800220c <golfinho_motion_info_timer_callback+0xa8>
 8002208:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800220c:	131b      	asrs	r3, r3, #12
 800220e:	461a      	mov	r2, r3
 8002210:	4b50      	ldr	r3, [pc, #320]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f103 0410 	add.w	r4, r3, #16
 8002218:	4610      	mov	r0, r2
 800221a:	f7fe f8d5 	bl	80003c8 <__aeabi_i2f>
 800221e:	4603      	mov	r3, r0
 8002220:	6023      	str	r3, [r4, #0]
		golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <golfinho_motion_info_timer_callback+0x1f4>)
 8002224:	895b      	ldrh	r3, [r3, #10]
 8002226:	461a      	mov	r2, r3
 8002228:	2364      	movs	r3, #100	; 0x64
 800222a:	fb03 f302 	mul.w	r3, r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	da01      	bge.n	8002236 <golfinho_motion_info_timer_callback+0xd2>
 8002232:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002236:	131b      	asrs	r3, r3, #12
 8002238:	461a      	mov	r2, r3
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f103 0414 	add.w	r4, r3, #20
 8002242:	4610      	mov	r0, r2
 8002244:	f7fe f8c0 	bl	80003c8 <__aeabi_i2f>
 8002248:	4603      	mov	r3, r0
 800224a:	6023      	str	r3, [r4, #0]
 800224c:	e069      	b.n	8002322 <golfinho_motion_info_timer_callback+0x1be>
			}else {

				if(digital_data_input_manual[3]) //acelerador
 800224e:	4b43      	ldr	r3, [pc, #268]	; (800235c <golfinho_motion_info_timer_callback+0x1f8>)
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <golfinho_motion_info_timer_callback+0x11e>
			        golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_manual[2]*100/4096;
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <golfinho_motion_info_timer_callback+0x1f4>)
 8002258:	889b      	ldrh	r3, [r3, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	2364      	movs	r3, #100	; 0x64
 800225e:	fb03 f302 	mul.w	r3, r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	da01      	bge.n	800226a <golfinho_motion_info_timer_callback+0x106>
 8002266:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800226a:	131b      	asrs	r3, r3, #12
 800226c:	461a      	mov	r2, r3
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	f103 0408 	add.w	r4, r3, #8
 8002276:	4610      	mov	r0, r2
 8002278:	f7fe f8a6 	bl	80003c8 <__aeabi_i2f>
 800227c:	4603      	mov	r3, r0
 800227e:	6023      	str	r3, [r4, #0]
 8002280:	e005      	b.n	800228e <golfinho_motion_info_timer_callback+0x12a>
				else
			        golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	3308      	adds	r3, #8
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

			    if(digital_data_input_manual[4]) //freio
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <golfinho_motion_info_timer_callback+0x1f8>)
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d015      	beq.n	80022c2 <golfinho_motion_info_timer_callback+0x15e>
			    	golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_manual[3]*100/4096;
 8002296:	4b30      	ldr	r3, [pc, #192]	; (8002358 <golfinho_motion_info_timer_callback+0x1f4>)
 8002298:	88db      	ldrh	r3, [r3, #6]
 800229a:	461a      	mov	r2, r3
 800229c:	2364      	movs	r3, #100	; 0x64
 800229e:	fb03 f302 	mul.w	r3, r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da01      	bge.n	80022aa <golfinho_motion_info_timer_callback+0x146>
 80022a6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80022aa:	131b      	asrs	r3, r3, #12
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f103 040c 	add.w	r4, r3, #12
 80022b6:	4610      	mov	r0, r2
 80022b8:	f7fe f886 	bl	80003c8 <__aeabi_i2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	e005      	b.n	80022ce <golfinho_motion_info_timer_callback+0x16a>
			    else
			    	golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	330c      	adds	r3, #12
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]

				golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <golfinho_motion_info_timer_callback+0x1f4>)
 80022d0:	891b      	ldrh	r3, [r3, #8]
 80022d2:	461a      	mov	r2, r3
 80022d4:	2364      	movs	r3, #100	; 0x64
 80022d6:	fb03 f302 	mul.w	r3, r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	da01      	bge.n	80022e2 <golfinho_motion_info_timer_callback+0x17e>
 80022de:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80022e2:	131b      	asrs	r3, r3, #12
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f103 0410 	add.w	r4, r3, #16
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe f86a 	bl	80003c8 <__aeabi_i2f>
 80022f4:	4603      	mov	r3, r0
 80022f6:	6023      	str	r3, [r4, #0]
				golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 80022f8:	4b17      	ldr	r3, [pc, #92]	; (8002358 <golfinho_motion_info_timer_callback+0x1f4>)
 80022fa:	895b      	ldrh	r3, [r3, #10]
 80022fc:	461a      	mov	r2, r3
 80022fe:	2364      	movs	r3, #100	; 0x64
 8002300:	fb03 f302 	mul.w	r3, r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	da01      	bge.n	800230c <golfinho_motion_info_timer_callback+0x1a8>
 8002308:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800230c:	131b      	asrs	r3, r3, #12
 800230e:	461a      	mov	r2, r3
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f103 0414 	add.w	r4, r3, #20
 8002318:	4610      	mov	r0, r2
 800231a:	f7fe f855 	bl	80003c8 <__aeabi_i2f>
 800231e:	4603      	mov	r3, r0
 8002320:	6023      	str	r3, [r4, #0]
   	         }

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_motion_info_pub,&golfinho_motion_info_gpio_output_msg, NULL);
 8002322:	2200      	movs	r2, #0
 8002324:	490b      	ldr	r1, [pc, #44]	; (8002354 <golfinho_motion_info_timer_callback+0x1f0>)
 8002326:	480e      	ldr	r0, [pc, #56]	; (8002360 <golfinho_motion_info_timer_callback+0x1fc>)
 8002328:	f008 fa64 	bl	800a7f4 <rcl_publish>
 800232c:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <golfinho_motion_info_timer_callback+0x1da>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002334:	f240 21f9 	movw	r1, #761	; 0x2f9
 8002338:	480a      	ldr	r0, [pc, #40]	; (8002364 <golfinho_motion_info_timer_callback+0x200>)
 800233a:	f015 fe3b 	bl	8017fb4 <iprintf>
		}
}
 800233e:	bf00      	nop
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	2000320c 	.word	0x2000320c
 800234c:	20003224 	.word	0x20003224
 8002350:	2000322c 	.word	0x2000322c
 8002354:	20008220 	.word	0x20008220
 8002358:	20003218 	.word	0x20003218
 800235c:	20003210 	.word	0x20003210
 8002360:	200080d4 	.word	0x200080d4
 8002364:	080196ec 	.word	0x080196ec

08002368 <receive_commands_from_ros_callback>:

void receive_commands_from_ros_callback(const void * msgin){
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]


	const std_msgs__msg__UInt16MultiArray *receive_command_ros_msg;

	if (msgin != NULL){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02a      	beq.n	80023cc <receive_commands_from_ros_callback+0x64>
		receive_command_ros_msg = (const std_msgs__msg__UInt16MultiArray *)msgin;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

		digital_data_input_auto[1]= receive_command_ros_msg->data.data[0]; // key_switch
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <receive_commands_from_ros_callback+0x70>)
 8002384:	705a      	strb	r2, [r3, #1]
		digital_data_input_auto[2]= receive_command_ros_msg->data.data[1]; // operation_modo
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	3302      	adds	r3, #2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <receive_commands_from_ros_callback+0x70>)
 8002392:	709a      	strb	r2, [r3, #2]
		flg=digital_data_input_auto[2];
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <receive_commands_from_ros_callback+0x70>)
 8002396:	789a      	ldrb	r2, [r3, #2]
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <receive_commands_from_ros_callback+0x74>)
 800239a:	701a      	strb	r2, [r3, #0]
		digital_data_input_auto[3]= receive_command_ros_msg->data.data[2];  // throttle_ switch
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	3304      	adds	r3, #4
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <receive_commands_from_ros_callback+0x70>)
 80023a8:	70da      	strb	r2, [r3, #3]
		digital_data_input_auto[4]= receive_command_ros_msg->data.data[3];  // break_ switch
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	3306      	adds	r3, #6
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <receive_commands_from_ros_callback+0x70>)
 80023b6:	711a      	strb	r2, [r3, #4]

		analog_data_input_auto[2]= receive_command_ros_msg->data.data[4]; // throttle analog
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	891a      	ldrh	r2, [r3, #8]
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <receive_commands_from_ros_callback+0x78>)
 80023c0:	809a      	strh	r2, [r3, #4]
		analog_data_input_auto[3]= receive_command_ros_msg->data.data[5]; // break analog
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	895a      	ldrh	r2, [r3, #10]
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <receive_commands_from_ros_callback+0x78>)
 80023ca:	80da      	strh	r2, [r3, #6]

	}
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20003224 	.word	0x20003224
 80023dc:	2000320c 	.word	0x2000320c
 80023e0:	2000322c 	.word	0x2000322c

080023e4 <golfinho_imu_timer_callback>:

void golfinho_imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 80023f0:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=10;
 80023f6:	230a      	movs	r3, #10
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02a      	beq.n	8002456 <golfinho_imu_timer_callback+0x72>

		sprintf(imu_.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <golfinho_imu_timer_callback+0x7c>)
 8002402:	6898      	ldr	r0, [r3, #8]
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002408:	4916      	ldr	r1, [pc, #88]	; (8002464 <golfinho_imu_timer_callback+0x80>)
 800240a:	f015 fea5 	bl	8018158 <siprintf>
		imu_.header.frame_id.size = strlen(imu_.header.frame_id.data);
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <golfinho_imu_timer_callback+0x7c>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fd ff16 	bl	8000244 <strlen>
 8002418:	4603      	mov	r3, r0
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <golfinho_imu_timer_callback+0x7c>)
 800241c:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 800241e:	f107 0310 	add.w	r3, r7, #16
 8002422:	4619      	mov	r1, r3
 8002424:	2001      	movs	r0, #1
 8002426:	f000 fbd3 	bl	8002bd0 <clock_gettime>
		imu_.header.stamp.sec = ts.tv_sec;
 800242a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <golfinho_imu_timer_callback+0x7c>)
 8002430:	601a      	str	r2, [r3, #0]
		imu_.header.stamp.nanosec = ts.tv_nsec;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	461a      	mov	r2, r3
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <golfinho_imu_timer_callback+0x7c>)
 8002438:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_imu_pub,&imu_, NULL);
 800243a:	2200      	movs	r2, #0
 800243c:	4908      	ldr	r1, [pc, #32]	; (8002460 <golfinho_imu_timer_callback+0x7c>)
 800243e:	480a      	ldr	r0, [pc, #40]	; (8002468 <golfinho_imu_timer_callback+0x84>)
 8002440:	f008 f9d8 	bl	800a7f4 <rcl_publish>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d004      	beq.n	8002456 <golfinho_imu_timer_callback+0x72>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 800244c:	f240 3127 	movw	r1, #807	; 0x327
 8002450:	4806      	ldr	r0, [pc, #24]	; (800246c <golfinho_imu_timer_callback+0x88>)
 8002452:	f015 fdaf 	bl	8017fb4 <iprintf>
		}
}
}
 8002456:	bf00      	nop
 8002458:	3730      	adds	r7, #48	; 0x30
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200080e0 	.word	0x200080e0
 8002464:	08019714 	.word	0x08019714
 8002468:	200068d0 	.word	0x200068d0
 800246c:	080196ec 	.word	0x080196ec

08002470 <golfinho_gps_timer_callback>:



void golfinho_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	; 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 800247c:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=11;
 8002482:	230b      	movs	r3, #11
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02a      	beq.n	80024e2 <golfinho_gps_timer_callback+0x72>

		sprintf(gps_.header.frame_id.data, "%d_%d", seq_no, device_id);
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <golfinho_gps_timer_callback+0x7c>)
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002494:	4916      	ldr	r1, [pc, #88]	; (80024f0 <golfinho_gps_timer_callback+0x80>)
 8002496:	f015 fe5f 	bl	8018158 <siprintf>
		gps_.header.frame_id.size = strlen(gps_.header.frame_id.data);
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <golfinho_gps_timer_callback+0x7c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fd fed0 	bl	8000244 <strlen>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <golfinho_gps_timer_callback+0x7c>)
 80024a8:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	2001      	movs	r0, #1
 80024b2:	f000 fb8d 	bl	8002bd0 <clock_gettime>
		gps_.header.stamp.sec = ts.tv_sec;
 80024b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <golfinho_gps_timer_callback+0x7c>)
 80024bc:	601a      	str	r2, [r3, #0]
		gps_.header.stamp.nanosec = ts.tv_nsec;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <golfinho_gps_timer_callback+0x7c>)
 80024c4:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_gps_pub,&gps_, NULL);
 80024c6:	2200      	movs	r2, #0
 80024c8:	4908      	ldr	r1, [pc, #32]	; (80024ec <golfinho_gps_timer_callback+0x7c>)
 80024ca:	480a      	ldr	r0, [pc, #40]	; (80024f4 <golfinho_gps_timer_callback+0x84>)
 80024cc:	f008 f992 	bl	800a7f4 <rcl_publish>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <golfinho_gps_timer_callback+0x72>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 80024d8:	f44f 7151 	mov.w	r1, #836	; 0x344
 80024dc:	4806      	ldr	r0, [pc, #24]	; (80024f8 <golfinho_gps_timer_callback+0x88>)
 80024de:	f015 fd69 	bl	8017fb4 <iprintf>
		}
   }
}
 80024e2:	bf00      	nop
 80024e4:	3730      	adds	r7, #48	; 0x30
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200068e0 	.word	0x200068e0
 80024f0:	08019714 	.word	0x08019714
 80024f4:	200082d4 	.word	0x200082d4
 80024f8:	080196ec 	.word	0x080196ec

080024fc <golfinho_joint_steering_timer_callback>:


void golfinho_joint_steering_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=012;
 8002508:	230a      	movs	r3, #10
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=01;
 800250c:	2301      	movs	r3, #1
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
	double data0,data1,data2;

	(void) last_call_time;

	if (timer != NULL) {
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d033      	beq.n	800257e <golfinho_joint_steering_timer_callback+0x82>

		sprintf(joint_steering.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002518:	6898      	ldr	r0, [r3, #8]
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800251e:	491b      	ldr	r1, [pc, #108]	; (800258c <golfinho_joint_steering_timer_callback+0x90>)
 8002520:	f015 fe1a 	bl	8018158 <siprintf>
		joint_steering.header.frame_id.size = strlen(joint_steering.header.frame_id.data);
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd fe8b 	bl	8000244 <strlen>
 800252e:	4603      	mov	r3, r0
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002532:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002534:	f107 0310 	add.w	r3, r7, #16
 8002538:	4619      	mov	r1, r3
 800253a:	2001      	movs	r0, #1
 800253c:	f000 fb48 	bl	8002bd0 <clock_gettime>
		joint_steering.header.stamp.sec = ts.tv_sec;
 8002540:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002546:	601a      	str	r2, [r3, #0]
		joint_steering.header.stamp.nanosec = ts.tv_nsec;
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	461a      	mov	r2, r3
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 800254e:	605a      	str	r2, [r3, #4]

		joint_steering.position.data=1;
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002552:	2201      	movs	r2, #1
 8002554:	621a      	str	r2, [r3, #32]
		joint_steering.velocity.data=2;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002558:	2202      	movs	r2, #2
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
		joint_steering.effort.data=3;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 800255e:	2203      	movs	r2, #3
 8002560:	639a      	str	r2, [r3, #56]	; 0x38

		rcl_ret_t ret = rcl_publish(&ros2_joint_steering_pub,&joint_steering, NULL);
 8002562:	2200      	movs	r2, #0
 8002564:	4908      	ldr	r1, [pc, #32]	; (8002588 <golfinho_joint_steering_timer_callback+0x8c>)
 8002566:	480a      	ldr	r0, [pc, #40]	; (8002590 <golfinho_joint_steering_timer_callback+0x94>)
 8002568:	f008 f944 	bl	800a7f4 <rcl_publish>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <golfinho_joint_steering_timer_callback+0x82>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002574:	f240 3165 	movw	r1, #869	; 0x365
 8002578:	4806      	ldr	r0, [pc, #24]	; (8002594 <golfinho_joint_steering_timer_callback+0x98>)
 800257a:	f015 fd1b 	bl	8017fb4 <iprintf>
		}
	}

}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20008240 	.word	0x20008240
 800258c:	08019714 	.word	0x08019714
 8002590:	2000823c 	.word	0x2000823c
 8002594:	080196ec 	.word	0x080196ec

08002598 <ADC_select_channel_break>:




void ADC_select_channel_break (void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 80025a8:	2308      	movs	r3, #8
 80025aa:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <ADC_select_channel_break+0x38>)
 80025ba:	f001 f90b 	bl	80037d4 <HAL_ADC_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <ADC_select_channel_break+0x30>
	  {
	    Error_Handler();
 80025c4:	f000 fa12 	bl	80029ec <Error_Handler>
	  }
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20006864 	.word	0x20006864

080025d4 <ADC_select_channel_Throttle>:

void ADC_select_channel_Throttle (void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_9;
 80025e4:	2309      	movs	r3, #9
 80025e6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025e8:	2301      	movs	r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <ADC_select_channel_Throttle+0x34>)
 80025f2:	f001 f8ef 	bl	80037d4 <HAL_ADC_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <ADC_select_channel_Throttle+0x2c>
	  {
	    Error_Handler();
 80025fc:	f000 f9f6 	bl	80029ec <Error_Handler>
	  }
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20006864 	.word	0x20006864

0800260c <ADC_select_channel_batery_car>:

void ADC_select_channel_batery_car(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 800261c:	2306      	movs	r3, #6
 800261e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002620:	2301      	movs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <ADC_select_channel_batery_car+0x34>)
 800262a:	f001 f8d3 	bl	80037d4 <HAL_ADC_ConfigChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <ADC_select_channel_batery_car+0x2c>
	  {
	    Error_Handler();
 8002634:	f000 f9da 	bl	80029ec <Error_Handler>
	  }
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20006864 	.word	0x20006864

08002644 <ADC_select_channel_system_batery>:

void ADC_select_channel_system_batery(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 8002654:	2307      	movs	r3, #7
 8002656:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002658:	2301      	movs	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <ADC_select_channel_system_batery+0x34>)
 8002662:	f001 f8b7 	bl	80037d4 <HAL_ADC_ConfigChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <ADC_select_channel_system_batery+0x2c>
	  {
	    Error_Handler();
 800266c:	f000 f9be 	bl	80029ec <Error_Handler>
	  }
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20006864 	.word	0x20006864

0800267c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002682:	f107 0310 	add.w	r3, r7, #16
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002690:	4b41      	ldr	r3, [pc, #260]	; (8002798 <MX_GPIO_Init+0x11c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a40      	ldr	r2, [pc, #256]	; (8002798 <MX_GPIO_Init+0x11c>)
 8002696:	f043 0320 	orr.w	r3, r3, #32
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <MX_GPIO_Init+0x11c>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a8:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c0:	4b35      	ldr	r3, [pc, #212]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a34      	ldr	r2, [pc, #208]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026de:	f043 0308 	orr.w	r3, r3, #8
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <MX_GPIO_Init+0x11c>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80026f0:	2200      	movs	r2, #0
 80026f2:	213f      	movs	r1, #63	; 0x3f
 80026f4:	4829      	ldr	r0, [pc, #164]	; (800279c <MX_GPIO_Init+0x120>)
 80026f6:	f003 f82c 	bl	8005752 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	f640 4104 	movw	r1, #3076	; 0xc04
 8002700:	4827      	ldr	r0, [pc, #156]	; (80027a0 <MX_GPIO_Init+0x124>)
 8002702:	f003 f826 	bl	8005752 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002706:	233f      	movs	r3, #63	; 0x3f
 8002708:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2302      	movs	r3, #2
 8002714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 0310 	add.w	r3, r7, #16
 800271a:	4619      	mov	r1, r3
 800271c:	481f      	ldr	r0, [pc, #124]	; (800279c <MX_GPIO_Init+0x120>)
 800271e:	f002 fe6d 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002722:	f640 4304 	movw	r3, #3076	; 0xc04
 8002726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2302      	movs	r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	4619      	mov	r1, r3
 800273a:	4819      	ldr	r0, [pc, #100]	; (80027a0 <MX_GPIO_Init+0x124>)
 800273c:	f002 fe5e 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002740:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	4812      	ldr	r0, [pc, #72]	; (80027a0 <MX_GPIO_Init+0x124>)
 8002756:	f002 fe51 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800275a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800275e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4619      	mov	r1, r3
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <MX_GPIO_Init+0x120>)
 8002770:	f002 fe44 	bl	80053fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	4619      	mov	r1, r3
 8002788:	4806      	ldr	r0, [pc, #24]	; (80027a4 <MX_GPIO_Init+0x128>)
 800278a:	f002 fe37 	bl	80053fc <HAL_GPIO_Init>

}
 800278e:	bf00      	nop
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40011000 	.word	0x40011000
 80027a0:	40010c00 	.word	0x40010c00
 80027a4:	40010800 	.word	0x40010800

080027a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ae:	f000 fce5 	bl	800317c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027b2:	f000 f893 	bl	80028dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027b6:	f7ff ff61 	bl	800267c <MX_GPIO_Init>
  MX_DMA_Init();
 80027ba:	f7fe fd6b 	bl	8001294 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80027be:	f000 fc09 	bl	8002fd4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80027c2:	f7fe f997 	bl	8000af4 <MX_ADC1_Init>
  MX_DAC_Init();
 80027c6:	f7fe fcf5 	bl	80011b4 <MX_DAC_Init>
  MX_CAN_Init();
 80027ca:	f7fe fa17 	bl	8000bfc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  txHeader.DLC = 2;
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <main+0x118>)
 80027d0:	2202      	movs	r2, #2
 80027d2:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_STD; //CAN_ID_EXT
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <main+0x118>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <main+0x118>)
 80027dc:	2200      	movs	r2, #0
 80027de:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x2BC;
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <main+0x118>)
 80027e2:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80027e6:	601a      	str	r2, [r3, #0]

  canfil.FilterActivation = CAN_FILTER_ENABLE;
 80027e8:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <main+0x11c>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	621a      	str	r2, [r3, #32]
  canfil.FilterBank = 18;  // which filter bank to use from the assigned ones
 80027ee:	4b35      	ldr	r3, [pc, #212]	; (80028c4 <main+0x11c>)
 80027f0:	2212      	movs	r2, #18
 80027f2:	615a      	str	r2, [r3, #20]
  canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80027f4:	4b33      	ldr	r3, [pc, #204]	; (80028c4 <main+0x11c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh =0x2BC<<5;
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <main+0x11c>)
 80027fc:	f44f 42af 	mov.w	r2, #22400	; 0x5780
 8002800:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 8002802:	4b30      	ldr	r3, [pc, #192]	; (80028c4 <main+0x11c>)
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0x2BC<<5;
 8002808:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <main+0x11c>)
 800280a:	f44f 42af 	mov.w	r2, #22400	; 0x5780
 800280e:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0x0000;
 8002810:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <main+0x11c>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <main+0x11c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <main+0x11c>)
 800281e:	2201      	movs	r2, #1
 8002820:	61da      	str	r2, [r3, #28]
  canfil.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <main+0x11c>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	; 0x24
 HAL_CAN_ConfigFilter(&hcan,&canfil);
 8002828:	4926      	ldr	r1, [pc, #152]	; (80028c4 <main+0x11c>)
 800282a:	4827      	ldr	r0, [pc, #156]	; (80028c8 <main+0x120>)
 800282c:	f001 fa60 	bl	8003cf0 <HAL_CAN_ConfigFilter>

 HAL_CAN_Start(&hcan);
 8002830:	4825      	ldr	r0, [pc, #148]	; (80028c8 <main+0x120>)
 8002832:	f001 fb26 	bl	8003e82 <HAL_CAN_Start>

 if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002836:	2102      	movs	r1, #2
 8002838:	4823      	ldr	r0, [pc, #140]	; (80028c8 <main+0x120>)
 800283a:	f001 fd51 	bl	80042e0 <HAL_CAN_ActivateNotification>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <main+0xa0>
 {
	  Error_Handler();
 8002844:	f000 f8d2 	bl	80029ec <Error_Handler>
 }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002848:	f004 ff5c 	bl	8007704 <osKernelInitialize>
  MX_FREERTOS_Init();
 800284c:	f7fe fdf6 	bl	800143c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002850:	f004 ff8a 	bl	8007768 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){

	uint8_t csend[] = {0x0A,0x0B};
 8002854:	f640 330a 	movw	r3, #2826	; 0xb0a
 8002858:	80bb      	strh	r3, [r7, #4]
	HAL_CAN_AddTxMessage(&hcan,&txHeader,csend,&canMailbox);
 800285a:	1d3a      	adds	r2, r7, #4
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <main+0x124>)
 800285e:	4918      	ldr	r1, [pc, #96]	; (80028c0 <main+0x118>)
 8002860:	4819      	ldr	r0, [pc, #100]	; (80028c8 <main+0x120>)
 8002862:	f001 fb52 	bl	8003f0a <HAL_CAN_AddTxMessage>
	//	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, canRX);
        int i=0;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
		if(i<8)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b07      	cmp	r3, #7
 800286e:	dc03      	bgt.n	8002878 <main+0xd0>
			i++;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e001      	b.n	800287c <main+0xd4>
		else
		i=0;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]

        raw=canRX[i];
 800287c:	4a14      	ldr	r2, [pc, #80]	; (80028d0 <main+0x128>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	4413      	add	r3, r2
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	74fb      	strb	r3, [r7, #19]
	    sprintf(msg, "%hu\r\n", raw);
 8002886:	7cfa      	ldrb	r2, [r7, #19]
 8002888:	f107 0308 	add.w	r3, r7, #8
 800288c:	4911      	ldr	r1, [pc, #68]	; (80028d4 <main+0x12c>)
 800288e:	4618      	mov	r0, r3
 8002890:	f015 fc62 	bl	8018158 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	4618      	mov	r0, r3
 800289a:	f7fd fcd3 	bl	8000244 <strlen>
 800289e:	4603      	mov	r3, r0
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f107 0108 	add.w	r1, r7, #8
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028aa:	480b      	ldr	r0, [pc, #44]	; (80028d8 <main+0x130>)
 80028ac:	f004 f80d 	bl	80068ca <HAL_UART_Transmit>
		i++;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3301      	adds	r3, #1
 80028b4:	617b      	str	r3, [r7, #20]


		HAL_Delay(50);
 80028b6:	2032      	movs	r0, #50	; 0x32
 80028b8:	f000 fc92 	bl	80031e0 <HAL_Delay>
  while (1){
 80028bc:	e7ca      	b.n	8002854 <main+0xac>
 80028be:	bf00      	nop
 80028c0:	20008340 	.word	0x20008340
 80028c4:	20008374 	.word	0x20008374
 80028c8:	20006894 	.word	0x20006894
 80028cc:	2000839c 	.word	0x2000839c
 80028d0:	20000000 	.word	0x20000000
 80028d4:	0801971c 	.word	0x0801971c
 80028d8:	20008470 	.word	0x20008470

080028dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b096      	sub	sp, #88	; 0x58
 80028e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e6:	2228      	movs	r2, #40	; 0x28
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f015 faa6 	bl	8017e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002910:	2301      	movs	r3, #1
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800291e:	2301      	movs	r3, #1
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002922:	2302      	movs	r3, #2
 8002924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800292c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002930:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002932:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002936:	4618      	mov	r0, r3
 8002938:	f002 ff24 	bl	8005784 <HAL_RCC_OscConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002942:	f000 f853 	bl	80029ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002946:	230f      	movs	r3, #15
 8002948:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800294a:	2302      	movs	r3, #2
 800294c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002958:	2300      	movs	r3, #0
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	2102      	movs	r1, #2
 8002962:	4618      	mov	r0, r3
 8002964:	f003 f98e 	bl	8005c84 <HAL_RCC_ClockConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800296e:	f000 f83d 	bl	80029ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002972:	2302      	movs	r3, #2
 8002974:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	4618      	mov	r0, r3
 8002980:	f003 fb4a 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800298a:	f000 f82f 	bl	80029ec <Error_Handler>
  }
}
 800298e:	bf00      	nop
 8002990:	3758      	adds	r7, #88	; 0x58
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80029a4:	2100      	movs	r1, #0
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 fb89 	bl	80040be <HAL_CAN_GetRxMessage>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 80029b2:	f000 f81b 	bl	80029ec <Error_Handler>
  }
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20008358 	.word	0x20008358

080029c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029da:	f000 fbe5 	bl	80031a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40012c00 	.word	0x40012c00

080029ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <Error_Handler+0x8>
	...

080029f8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <microros_allocate+0x3c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <microros_allocate+0x3c>)
 8002a10:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <microros_allocate+0x40>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <microros_allocate+0x40>)
 8002a20:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe f974 	bl	8000d10 <pvPortMallocMicroROS>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20003238 	.word	0x20003238
 8002a38:	2000323c 	.word	0x2000323c

08002a3c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00c      	beq.n	8002a66 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7fe fa7d 	bl	8000f4c <getBlockSize>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <microros_deallocate+0x34>)
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <microros_deallocate+0x34>)
 8002a5e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe fa19 	bl	8000e98 <vPortFreeMicroROS>
  }
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000323c 	.word	0x2000323c

08002a74 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <microros_reallocate+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	4413      	add	r3, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <microros_reallocate+0x64>)
 8002a8e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <microros_reallocate+0x68>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4413      	add	r3, r2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <microros_reallocate+0x68>)
 8002a9e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002aa6:	68b8      	ldr	r0, [r7, #8]
 8002aa8:	f7fe f932 	bl	8000d10 <pvPortMallocMicroROS>
 8002aac:	4603      	mov	r3, r0
 8002aae:	e00e      	b.n	8002ace <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7fe fa4b 	bl	8000f4c <getBlockSize>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a08      	ldr	r2, [pc, #32]	; (8002adc <microros_reallocate+0x68>)
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <microros_reallocate+0x68>)
 8002ac2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f7fe fa5c 	bl	8000f84 <pvPortReallocMicroROS>
 8002acc:	4603      	mov	r3, r0
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20003238 	.word	0x20003238
 8002adc:	2000323c 	.word	0x2000323c

08002ae0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <microros_zero_allocate+0x48>)
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <microros_zero_allocate+0x48>)
 8002afe:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <microros_zero_allocate+0x4c>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <microros_zero_allocate+0x4c>)
 8002b12:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7fe fa6e 	bl	8000ff8 <pvPortCallocMicroROS>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20003238 	.word	0x20003238
 8002b2c:	2000323c 	.word	0x2000323c

08002b30 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002b40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b44:	a320      	add	r3, pc, #128	; (adr r3, 8002bc8 <UTILS_NanosecondsToTimespec+0x98>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fe07 	bl	800075c <__aeabi_ldivmod>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b5c:	a31a      	add	r3, pc, #104	; (adr r3, 8002bc8 <UTILS_NanosecondsToTimespec+0x98>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd fdfb 	bl	800075c <__aeabi_ldivmod>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da1f      	bge.n	8002bb2 <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <UTILS_NanosecondsToTimespec+0x90>)
 8002b78:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7c:	1712      	asrs	r2, r2, #28
 8002b7e:	17db      	asrs	r3, r3, #31
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	3301      	adds	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b94:	1a84      	subs	r4, r0, r2
 8002b96:	eb61 0503 	sbc.w	r5, r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4907      	ldr	r1, [pc, #28]	; (8002bc4 <UTILS_NanosecondsToTimespec+0x94>)
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	441a      	add	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
    }
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	44b82fa1 	.word	0x44b82fa1
 8002bc4:	3b9aca00 	.word	0x3b9aca00
 8002bc8:	3b9aca00 	.word	0x3b9aca00
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002bd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002bf2:	f107 0308 	add.w	r3, r7, #8
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f006 fa68 	bl	80090cc <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	2200      	movs	r2, #0
 8002c10:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c20:	1884      	adds	r4, r0, r2
 8002c22:	eb41 0503 	adc.w	r5, r1, r3
 8002c26:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002c2a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	f04f 0000 	mov.w	r0, #0
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	0159      	lsls	r1, r3, #5
 8002c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c40:	0150      	lsls	r0, r2, #5
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	1b12      	subs	r2, r2, r4
 8002c48:	eb63 0305 	sbc.w	r3, r3, r5
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0259      	lsls	r1, r3, #9
 8002c56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c5a:	0250      	lsls	r0, r2, #9
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	1912      	adds	r2, r2, r4
 8002c62:	eb45 0303 	adc.w	r3, r5, r3
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	0199      	lsls	r1, r3, #6
 8002c70:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002c74:	0190      	lsls	r0, r2, #6
 8002c76:	1a80      	subs	r0, r0, r2
 8002c78:	eb61 0103 	sbc.w	r1, r1, r3
 8002c7c:	eb10 0804 	adds.w	r8, r0, r4
 8002c80:	eb41 0905 	adc.w	r9, r1, r5
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	4640      	mov	r0, r8
 8002c88:	4649      	mov	r1, r9
 8002c8a:	f7ff ff51 	bl	8002b30 <UTILS_NanosecondsToTimespec>

    return 0;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_MspInit+0x68>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_MspInit+0x68>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6193      	str	r3, [r2, #24]
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_MspInit+0x68>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_MspInit+0x68>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_MspInit+0x68>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	61d3      	str	r3, [r2, #28]
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_MspInit+0x68>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	210f      	movs	r1, #15
 8002cd6:	f06f 0001 	mvn.w	r0, #1
 8002cda:	f001 fdfe 	bl	80048da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_MspInit+0x6c>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_MspInit+0x6c>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000

08002d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08c      	sub	sp, #48	; 0x30
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	2019      	movs	r0, #25
 8002d22:	f001 fdda 	bl	80048da <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002d26:	2019      	movs	r0, #25
 8002d28:	f001 fdf3 	bl	8004912 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_InitTick+0x9c>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <HAL_InitTick+0x9c>)
 8002d32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_InitTick+0x9c>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d44:	f107 0210 	add.w	r2, r7, #16
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 f914 	bl	8005f7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002d54:	f003 f8fe 	bl	8005f54 <HAL_RCC_GetPCLK2Freq>
 8002d58:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_InitTick+0xa0>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	3b01      	subs	r3, #1
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_InitTick+0xa8>)
 8002d6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d88:	4809      	ldr	r0, [pc, #36]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d8a:	f003 fae1 	bl	8006350 <HAL_TIM_Base_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002d94:	4806      	ldr	r0, [pc, #24]	; (8002db0 <HAL_InitTick+0xa4>)
 8002d96:	f003 fb33 	bl	8006400 <HAL_TIM_Base_Start_IT>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	e000      	b.n	8002da0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3730      	adds	r7, #48	; 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	431bde83 	.word	0x431bde83
 8002db0:	200083a0 	.word	0x200083a0
 8002db4:	40012c00 	.word	0x40012c00

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler+0x4>

08002dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <MemManage_Handler+0x4>

08002dca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dce:	e7fe      	b.n	8002dce <BusFault_Handler+0x4>

08002dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <UsageFault_Handler+0x4>

08002dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
	...

08002de4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002de8:	4802      	ldr	r0, [pc, #8]	; (8002df4 <DMA1_Channel6_IRQHandler+0x10>)
 8002dea:	f002 f89d 	bl	8004f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200083e8 	.word	0x200083e8

08002df8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002dfc:	4802      	ldr	r0, [pc, #8]	; (8002e08 <DMA1_Channel7_IRQHandler+0x10>)
 8002dfe:	f002 f893 	bl	8004f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	2000842c 	.word	0x2000842c

08002e0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <CAN1_RX1_IRQHandler+0x10>)
 8002e12:	f001 fa8a 	bl	800432a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20006894 	.word	0x20006894

08002e20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <TIM1_UP_IRQHandler+0x10>)
 8002e26:	f003 fb4b 	bl	80064c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200083a0 	.word	0x200083a0

08002e34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e38:	4802      	ldr	r0, [pc, #8]	; (8002e44 <USART2_IRQHandler+0x10>)
 8002e3a:	f003 fed1 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20008470 	.word	0x20008470

08002e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
	return 1;
 8002e4c:	2301      	movs	r3, #1
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <_kill>:

int _kill(int pid, int sig)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e60:	f014 febe 	bl	8017be0 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2216      	movs	r2, #22
 8002e68:	601a      	str	r2, [r3, #0]
	return -1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_exit>:

void _exit (int status)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffe7 	bl	8002e56 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e88:	e7fe      	b.n	8002e88 <_exit+0x12>

08002e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e00a      	b.n	8002eb2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e9c:	f3af 8000 	nop.w
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	60ba      	str	r2, [r7, #8]
 8002ea8:	b2ca      	uxtb	r2, r1
 8002eaa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	dbf0      	blt.n	8002e9c <_read+0x12>
	}

return len;
 8002eba:	687b      	ldr	r3, [r7, #4]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e009      	b.n	8002eea <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	60ba      	str	r2, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	dbf1      	blt.n	8002ed6 <_write+0x12>
	}
	return len;
 8002ef2:	687b      	ldr	r3, [r7, #4]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_sbrk>:

caddr_t _sbrk(int incr) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <_sbrk+0x5c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <_sbrk+0x16>
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <_sbrk+0x5c>)
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <_sbrk+0x60>)
 8002f10:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <_sbrk+0x5c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <_sbrk+0x5c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	441a      	add	r2, r3
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <_sbrk+0x64>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	425b      	negs	r3, r3
 8002f26:	490f      	ldr	r1, [pc, #60]	; (8002f64 <_sbrk+0x68>)
 8002f28:	440b      	add	r3, r1
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d908      	bls.n	8002f40 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002f2e:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002f30:	f014 fe56 	bl	8017be0 <__errno>
 8002f34:	4603      	mov	r3, r0
 8002f36:	220c      	movs	r2, #12
 8002f38:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8002f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3e:	e006      	b.n	8002f4e <_sbrk+0x52>

    }

    heap_end += incr;
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <_sbrk+0x5c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4413      	add	r3, r2
 8002f48:	4a03      	ldr	r2, [pc, #12]	; (8002f58 <_sbrk+0x5c>)
 8002f4a:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8002f4c:	68fb      	ldr	r3, [r7, #12]

}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20003244 	.word	0x20003244
 8002f5c:	2000d6a8 	.word	0x2000d6a8
 8002f60:	00000400 	.word	0x00000400
 8002f64:	20010000 	.word	0x20010000

08002f68 <_close>:

int _close(int file)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
	return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <_isatty>:

int _isatty(int file)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
	return 1;
 8002fa4:	2301      	movs	r3, #1
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
	return 0;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <MX_USART2_UART_Init+0x50>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_USART2_UART_Init+0x4c>)
 800300c:	f003 fc10 	bl	8006830 <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003016:	f7ff fce9 	bl	80029ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20008470 	.word	0x20008470
 8003024:	40004400 	.word	0x40004400

08003028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a47      	ldr	r2, [pc, #284]	; (8003160 <HAL_UART_MspInit+0x138>)
 8003044:	4293      	cmp	r3, r2
 8003046:	f040 8086 	bne.w	8003156 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800304a:	4b46      	ldr	r3, [pc, #280]	; (8003164 <HAL_UART_MspInit+0x13c>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_UART_MspInit+0x13c>)
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	61d3      	str	r3, [r2, #28]
 8003056:	4b43      	ldr	r3, [pc, #268]	; (8003164 <HAL_UART_MspInit+0x13c>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_UART_MspInit+0x13c>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4a3f      	ldr	r2, [pc, #252]	; (8003164 <HAL_UART_MspInit+0x13c>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6193      	str	r3, [r2, #24]
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_UART_MspInit+0x13c>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800307a:	2304      	movs	r3, #4
 800307c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307e:	2302      	movs	r3, #2
 8003080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	4619      	mov	r1, r3
 800308c:	4836      	ldr	r0, [pc, #216]	; (8003168 <HAL_UART_MspInit+0x140>)
 800308e:	f002 f9b5 	bl	80053fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003092:	2308      	movs	r3, #8
 8003094:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	4619      	mov	r1, r3
 80030a4:	4830      	ldr	r0, [pc, #192]	; (8003168 <HAL_UART_MspInit+0x140>)
 80030a6:	f002 f9a9 	bl	80053fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80030aa:	4b30      	ldr	r3, [pc, #192]	; (800316c <HAL_UART_MspInit+0x144>)
 80030ac:	4a30      	ldr	r2, [pc, #192]	; (8003170 <HAL_UART_MspInit+0x148>)
 80030ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b0:	4b2e      	ldr	r3, [pc, #184]	; (800316c <HAL_UART_MspInit+0x144>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b6:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_UART_MspInit+0x144>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030bc:	4b2b      	ldr	r3, [pc, #172]	; (800316c <HAL_UART_MspInit+0x144>)
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_UART_MspInit+0x144>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c8:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_UART_MspInit+0x144>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <HAL_UART_MspInit+0x144>)
 80030d0:	2220      	movs	r2, #32
 80030d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_UART_MspInit+0x144>)
 80030d6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80030da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030dc:	4823      	ldr	r0, [pc, #140]	; (800316c <HAL_UART_MspInit+0x144>)
 80030de:	f001 fd0b 	bl	8004af8 <HAL_DMA_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80030e8:	f7ff fc80 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	; (800316c <HAL_UART_MspInit+0x144>)
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38
 80030f2:	4a1e      	ldr	r2, [pc, #120]	; (800316c <HAL_UART_MspInit+0x144>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_UART_MspInit+0x14c>)
 80030fa:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <HAL_UART_MspInit+0x150>)
 80030fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <HAL_UART_MspInit+0x14c>)
 8003100:	2210      	movs	r2, #16
 8003102:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_UART_MspInit+0x14c>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <HAL_UART_MspInit+0x14c>)
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_UART_MspInit+0x14c>)
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_UART_MspInit+0x14c>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_UART_MspInit+0x14c>)
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_UART_MspInit+0x14c>)
 8003124:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003128:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800312a:	4812      	ldr	r0, [pc, #72]	; (8003174 <HAL_UART_MspInit+0x14c>)
 800312c:	f001 fce4 	bl	8004af8 <HAL_DMA_Init>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003136:	f7ff fc59 	bl	80029ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_UART_MspInit+0x14c>)
 800313e:	635a      	str	r2, [r3, #52]	; 0x34
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_UART_MspInit+0x14c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2105      	movs	r1, #5
 800314a:	2026      	movs	r0, #38	; 0x26
 800314c:	f001 fbc5 	bl	80048da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003150:	2026      	movs	r0, #38	; 0x26
 8003152:	f001 fbde 	bl	8004912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003156:	bf00      	nop
 8003158:	3720      	adds	r7, #32
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40004400 	.word	0x40004400
 8003164:	40021000 	.word	0x40021000
 8003168:	40010800 	.word	0x40010800
 800316c:	200083e8 	.word	0x200083e8
 8003170:	4002006c 	.word	0x4002006c
 8003174:	2000842c 	.word	0x2000842c
 8003178:	40020080 	.word	0x40020080

0800317c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <HAL_Init+0x28>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <HAL_Init+0x28>)
 8003186:	f043 0310 	orr.w	r3, r3, #16
 800318a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800318c:	2003      	movs	r0, #3
 800318e:	f001 fb99 	bl	80048c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003192:	200f      	movs	r0, #15
 8003194:	f7ff fdba 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003198:	f7ff fd80 	bl	8002c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40022000 	.word	0x40022000

080031a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_IncTick+0x1c>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_IncTick+0x20>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_IncTick+0x20>)
 80031ba:	6013      	str	r3, [r2, #0]
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	20000014 	.word	0x20000014
 80031c8:	200084b4 	.word	0x200084b4

080031cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return uwTick;
 80031d0:	4b02      	ldr	r3, [pc, #8]	; (80031dc <HAL_GetTick+0x10>)
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	200084b4 	.word	0x200084b4

080031e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e8:	f7ff fff0 	bl	80031cc <HAL_GetTick>
 80031ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f8:	d005      	beq.n	8003206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_Delay+0x44>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003206:	bf00      	nop
 8003208:	f7ff ffe0 	bl	80031cc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	429a      	cmp	r2, r3
 8003216:	d8f7      	bhi.n	8003208 <HAL_Delay+0x28>
  {
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000014 	.word	0x20000014

08003228 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0ce      	b.n	80033e8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fc74 	bl	8000b54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fc03 	bl	8003a78 <ADC_ConversionStop_Disable>
 8003272:	4603      	mov	r3, r0
 8003274:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 80a9 	bne.w	80033d6 <HAL_ADC_Init+0x1ae>
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 80a5 	bne.w	80033d6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003294:	f023 0302 	bic.w	r3, r3, #2
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4951      	ldr	r1, [pc, #324]	; (80033f0 <HAL_ADC_Init+0x1c8>)
 80032aa:	428b      	cmp	r3, r1
 80032ac:	d10a      	bne.n	80032c4 <HAL_ADC_Init+0x9c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032b6:	d002      	beq.n	80032be <HAL_ADC_Init+0x96>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	e004      	b.n	80032c8 <HAL_ADC_Init+0xa0>
 80032be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032c2:	e001      	b.n	80032c8 <HAL_ADC_Init+0xa0>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7b1b      	ldrb	r3, [r3, #12]
 80032ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80032d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e0:	d003      	beq.n	80032ea <HAL_ADC_Init+0xc2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_ADC_Init+0xc8>
 80032ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_Init+0xca>
 80032f0:	2300      	movs	r3, #0
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7d1b      	ldrb	r3, [r3, #20]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d119      	bne.n	8003334 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	7b1b      	ldrb	r3, [r3, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	3b01      	subs	r3, #1
 800330e:	035a      	lsls	r2, r3, #13
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	e00b      	b.n	8003334 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	430a      	orrs	r2, r1
 8003346:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b29      	ldr	r3, [pc, #164]	; (80033f4 <HAL_ADC_Init+0x1cc>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	430b      	orrs	r3, r1
 800335a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003364:	d003      	beq.n	800336e <HAL_ADC_Init+0x146>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d104      	bne.n	8003378 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	3b01      	subs	r3, #1
 8003374:	051b      	lsls	r3, r3, #20
 8003376:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	430a      	orrs	r2, r1
 800338a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_ADC_Init+0x1d0>)
 8003394:	4013      	ands	r3, r2
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	429a      	cmp	r2, r3
 800339a:	d10b      	bne.n	80033b4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033b2:	e018      	b.n	80033e6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f023 0312 	bic.w	r3, r3, #18
 80033bc:	f043 0210 	orr.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80033d4:	e007      	b.n	80033e6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	f043 0210 	orr.w	r2, r3, #16
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40013c00 	.word	0x40013c00
 80033f4:	ffe1f7fd 	.word	0xffe1f7fd
 80033f8:	ff1f0efe 	.word	0xff1f0efe

080033fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_ADC_Start+0x1a>
 8003412:	2302      	movs	r3, #2
 8003414:	e098      	b.n	8003548 <HAL_ADC_Start+0x14c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fad0 	bl	80039c4 <ADC_Enable>
 8003424:	4603      	mov	r3, r0
 8003426:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f040 8087 	bne.w	800353e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_ADC_Start+0x154>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d105      	bne.n	800345a <HAL_ADC_Start+0x5e>
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_ADC_Start+0x158>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	2b00      	cmp	r3, #0
 8003472:	d026      	beq.n	80034c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800347c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003484:	e01d      	b.n	80034c2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <HAL_ADC_Start+0x158>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_ADC_Start+0xaa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <HAL_ADC_Start+0x154>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <HAL_ADC_Start+0xc6>
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_ADC_Start+0x158>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f023 0206 	bic.w	r2, r3, #6
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034da:	e002      	b.n	80034e2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f06f 0202 	mvn.w	r2, #2
 80034f2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003502:	d113      	bne.n	800352c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <HAL_ADC_Start+0x154>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d105      	bne.n	800351a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_ADC_Start+0x158>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003528:	609a      	str	r2, [r3, #8]
 800352a:	e00c      	b.n	8003546 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e003      	b.n	8003546 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40012800 	.word	0x40012800
 8003554:	40012400 	.word	0x40012400

08003558 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Stop+0x1a>
 800356e:	2302      	movs	r3, #2
 8003570:	e01a      	b.n	80035a8 <HAL_ADC_Stop+0x50>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa7c 	bl	8003a78 <ADC_ConversionStop_Disable>
 8003580:	4603      	mov	r3, r0
 8003582:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f043 0201 	orr.w	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80035c6:	f7ff fe01 	bl	80031cc <HAL_GetTick>
 80035ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e0d3      	b.n	800379a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d131      	bne.n	8003664 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800360a:	2b00      	cmp	r3, #0
 800360c:	d12a      	bne.n	8003664 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800360e:	e021      	b.n	8003654 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003616:	d01d      	beq.n	8003654 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_ADC_PollForConversion+0x7e>
 800361e:	f7ff fdd5 	bl	80031cc <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d212      	bcs.n	8003654 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e0a2      	b.n	800379a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0d6      	beq.n	8003610 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003662:	e070      	b.n	8003746 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003664:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <HAL_ADC_PollForConversion+0x1f4>)
 8003666:	681c      	ldr	r4, [r3, #0]
 8003668:	2002      	movs	r0, #2
 800366a:	f002 fd8b 	bl	8006184 <HAL_RCCEx_GetPeriphCLKFreq>
 800366e:	4603      	mov	r3, r0
 8003670:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6919      	ldr	r1, [r3, #16]
 800367a:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_ADC_PollForConversion+0x1f8>)
 800367c:	400b      	ands	r3, r1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_ADC_PollForConversion+0x104>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68d9      	ldr	r1, [r3, #12]
 8003688:	4b48      	ldr	r3, [pc, #288]	; (80037ac <HAL_ADC_PollForConversion+0x1fc>)
 800368a:	400b      	ands	r3, r1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d111      	bne.n	80036b4 <HAL_ADC_PollForConversion+0x104>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6919      	ldr	r1, [r3, #16]
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_ADC_PollForConversion+0x200>)
 8003698:	400b      	ands	r3, r1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <HAL_ADC_PollForConversion+0x100>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68d9      	ldr	r1, [r3, #12]
 80036a4:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_ADC_PollForConversion+0x204>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_PollForConversion+0x100>
 80036ac:	2314      	movs	r3, #20
 80036ae:	e020      	b.n	80036f2 <HAL_ADC_PollForConversion+0x142>
 80036b0:	2329      	movs	r3, #41	; 0x29
 80036b2:	e01e      	b.n	80036f2 <HAL_ADC_PollForConversion+0x142>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6919      	ldr	r1, [r3, #16]
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <HAL_ADC_PollForConversion+0x200>)
 80036bc:	400b      	ands	r3, r1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_ADC_PollForConversion+0x120>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	4b3a      	ldr	r3, [pc, #232]	; (80037b4 <HAL_ADC_PollForConversion+0x204>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <HAL_ADC_PollForConversion+0x13c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6919      	ldr	r1, [r3, #16]
 80036d6:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <HAL_ADC_PollForConversion+0x208>)
 80036d8:	400b      	ands	r3, r1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HAL_ADC_PollForConversion+0x140>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68d9      	ldr	r1, [r3, #12]
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <HAL_ADC_PollForConversion+0x208>)
 80036e6:	400b      	ands	r3, r1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_ADC_PollForConversion+0x140>
 80036ec:	2354      	movs	r3, #84	; 0x54
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_PollForConversion+0x142>
 80036f0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80036f8:	e021      	b.n	800373e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003700:	d01a      	beq.n	8003738 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_ADC_PollForConversion+0x168>
 8003708:	f7ff fd60 	bl	80031cc <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d20f      	bcs.n	8003738 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	429a      	cmp	r2, r3
 800371e:	d90b      	bls.n	8003738 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e030      	b.n	800379a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3301      	adds	r3, #1
 800373c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	429a      	cmp	r2, r3
 8003744:	d8d9      	bhi.n	80036fa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f06f 0212 	mvn.w	r2, #18
 800374e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003754:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003766:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800376a:	d115      	bne.n	8003798 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c
 80037a8:	24924924 	.word	0x24924924
 80037ac:	00924924 	.word	0x00924924
 80037b0:	12492492 	.word	0x12492492
 80037b4:	00492492 	.word	0x00492492
 80037b8:	00249249 	.word	0x00249249

080037bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x20>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e0dc      	b.n	80039ae <HAL_ADC_ConfigChannel+0x1da>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b06      	cmp	r3, #6
 8003802:	d81c      	bhi.n	800383e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	3b05      	subs	r3, #5
 8003816:	221f      	movs	r2, #31
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	4019      	ands	r1, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	3b05      	subs	r3, #5
 8003830:	fa00 f203 	lsl.w	r2, r0, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	635a      	str	r2, [r3, #52]	; 0x34
 800383c:	e03c      	b.n	80038b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d81c      	bhi.n	8003880 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	3b23      	subs	r3, #35	; 0x23
 8003858:	221f      	movs	r2, #31
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	4019      	ands	r1, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	3b23      	subs	r3, #35	; 0x23
 8003872:	fa00 f203 	lsl.w	r2, r0, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
 800387e:	e01b      	b.n	80038b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	3b41      	subs	r3, #65	; 0x41
 8003892:	221f      	movs	r2, #31
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	4019      	ands	r1, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	3b41      	subs	r3, #65	; 0x41
 80038ac:	fa00 f203 	lsl.w	r2, r0, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b09      	cmp	r3, #9
 80038be:	d91c      	bls.n	80038fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68d9      	ldr	r1, [r3, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	3b1e      	subs	r3, #30
 80038d2:	2207      	movs	r2, #7
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	4019      	ands	r1, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6898      	ldr	r0, [r3, #8]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	3b1e      	subs	r3, #30
 80038ec:	fa00 f203 	lsl.w	r2, r0, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	60da      	str	r2, [r3, #12]
 80038f8:	e019      	b.n	800392e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6919      	ldr	r1, [r3, #16]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	2207      	movs	r2, #7
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	4019      	ands	r1, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	6898      	ldr	r0, [r3, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	fa00 f203 	lsl.w	r2, r0, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b10      	cmp	r3, #16
 8003934:	d003      	beq.n	800393e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800393a:	2b11      	cmp	r3, #17
 800393c:	d132      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d125      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d126      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003964:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d11a      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_ADC_ConfigChannel+0x1e8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003974:	fba2 2303 	umull	r2, r3, r2, r3
 8003978:	0c9a      	lsrs	r2, r3, #18
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003984:	e002      	b.n	800398c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3b01      	subs	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_ADC_ConfigChannel+0x1b2>
 8003992:	e007      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012400 	.word	0x40012400
 80039bc:	2000000c 	.word	0x2000000c
 80039c0:	431bde83 	.word	0x431bde83

080039c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d040      	beq.n	8003a64 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <ADC_Enable+0xac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <ADC_Enable+0xb0>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	0c9b      	lsrs	r3, r3, #18
 80039fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a00:	e002      	b.n	8003a08 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f9      	bne.n	8003a02 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a0e:	f7ff fbdd 	bl	80031cc <HAL_GetTick>
 8003a12:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a14:	e01f      	b.n	8003a56 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a16:	f7ff fbd9 	bl	80031cc <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d918      	bls.n	8003a56 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d011      	beq.n	8003a56 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a36:	f043 0210 	orr.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e007      	b.n	8003a66 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d1d8      	bne.n	8003a16 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	431bde83 	.word	0x431bde83

08003a78 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d12e      	bne.n	8003af0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0201 	bic.w	r2, r2, #1
 8003aa0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aa2:	f7ff fb93 	bl	80031cc <HAL_GetTick>
 8003aa6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003aa8:	e01b      	b.n	8003ae2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aaa:	f7ff fb8f 	bl	80031cc <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d914      	bls.n	8003ae2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d10d      	bne.n	8003ae2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f043 0210 	orr.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e007      	b.n	8003af2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d0dc      	beq.n	8003aaa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0ed      	b.n	8003ce8 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fd f8a5 	bl	8000c68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b2e:	f7ff fb4d 	bl	80031cc <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b34:	e012      	b.n	8003b5c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b36:	f7ff fb49 	bl	80031cc <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b0a      	cmp	r3, #10
 8003b42:	d90b      	bls.n	8003b5c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2205      	movs	r2, #5
 8003b54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0c5      	b.n	8003ce8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0e5      	beq.n	8003b36 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0202 	bic.w	r2, r2, #2
 8003b78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b7a:	f7ff fb27 	bl	80031cc <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003b80:	e012      	b.n	8003ba8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b82:	f7ff fb23 	bl	80031cc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b0a      	cmp	r3, #10
 8003b8e:	d90b      	bls.n	8003ba8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2205      	movs	r2, #5
 8003ba0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e09f      	b.n	8003ce8 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7e1b      	ldrb	r3, [r3, #24]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e007      	b.n	8003be0 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7e5b      	ldrb	r3, [r3, #25]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d108      	bne.n	8003bfa <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e007      	b.n	8003c0a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	7e9b      	ldrb	r3, [r3, #26]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d108      	bne.n	8003c24 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0220 	orr.w	r2, r2, #32
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e007      	b.n	8003c34 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0220 	bic.w	r2, r2, #32
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7edb      	ldrb	r3, [r3, #27]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d108      	bne.n	8003c4e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0210 	bic.w	r2, r2, #16
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e007      	b.n	8003c5e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0210 	orr.w	r2, r2, #16
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7f1b      	ldrb	r3, [r3, #28]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0208 	orr.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0208 	bic.w	r2, r2, #8
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7f5b      	ldrb	r3, [r3, #29]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d108      	bne.n	8003ca2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0204 	orr.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e007      	b.n	8003cb2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0204 	bic.w	r2, r2, #4
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	ea42 0103 	orr.w	r1, r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	1e5a      	subs	r2, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d06:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <HAL_CAN_ConfigFilter+0x26>
 8003d0e:	7cfb      	ldrb	r3, [r7, #19]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f040 80aa 	bne.w	8003e6a <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2201      	movs	r2, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	401a      	ands	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d123      	bne.n	8003d98 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3248      	adds	r2, #72	; 0x48
 8003d78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	3348      	adds	r3, #72	; 0x48
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	440b      	add	r3, r1
 8003d96:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d122      	bne.n	8003de6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dc0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3248      	adds	r2, #72	; 0x48
 8003dc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003dda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	3348      	adds	r3, #72	; 0x48
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	401a      	ands	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e00:	e007      	b.n	8003e12 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	401a      	ands	r2, r3
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e2c:	e007      	b.n	8003e3e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e5c:	f023 0201 	bic.w	r2, r3, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e006      	b.n	8003e78 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d12e      	bne.n	8003ef4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003eae:	f7ff f98d 	bl	80031cc <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003eb4:	e012      	b.n	8003edc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003eb6:	f7ff f989 	bl	80031cc <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b0a      	cmp	r3, #10
 8003ec2:	d90b      	bls.n	8003edc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e012      	b.n	8003f02 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e5      	bne.n	8003eb6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e006      	b.n	8003f02 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b089      	sub	sp, #36	; 0x24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d003      	beq.n	8003f36 <HAL_CAN_AddTxMessage+0x2c>
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	f040 80b8 	bne.w	80040a6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80a0 	beq.w	8004096 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	0e1b      	lsrs	r3, r3, #24
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d907      	bls.n	8003f76 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e09e      	b.n	80040b4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f76:	2201      	movs	r2, #1
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	6809      	ldr	r1, [r1, #0]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	440b      	add	r3, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e00f      	b.n	8003fc4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fb4:	68f9      	ldr	r1, [r7, #12]
 8003fb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	440b      	add	r3, r1
 8003fc2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	7d1b      	ldrb	r3, [r3, #20]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d111      	bne.n	8004004 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3318      	adds	r3, #24
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	4413      	add	r3, r2
 8003fec:	3304      	adds	r3, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	440b      	add	r3, r1
 8004000:	3304      	adds	r3, #4
 8004002:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3307      	adds	r3, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	061a      	lsls	r2, r3, #24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3306      	adds	r3, #6
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3305      	adds	r3, #5
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	4313      	orrs	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	3204      	adds	r2, #4
 8004024:	7812      	ldrb	r2, [r2, #0]
 8004026:	4610      	mov	r0, r2
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6811      	ldr	r1, [r2, #0]
 800402c:	ea43 0200 	orr.w	r2, r3, r0
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	440b      	add	r3, r1
 8004036:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800403a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3303      	adds	r3, #3
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	061a      	lsls	r2, r3, #24
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3302      	adds	r3, #2
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3301      	adds	r3, #1
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	4313      	orrs	r3, r2
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	7812      	ldrb	r2, [r2, #0]
 800405c:	4610      	mov	r0, r2
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	6811      	ldr	r1, [r2, #0]
 8004062:	ea43 0200 	orr.w	r2, r3, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	440b      	add	r3, r1
 800406c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004070:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	3318      	adds	r3, #24
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	4413      	add	r3, r2
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	6811      	ldr	r1, [r2, #0]
 8004084:	f043 0201 	orr.w	r2, r3, #1
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	3318      	adds	r3, #24
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	440b      	add	r3, r1
 8004090:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e00e      	b.n	80040b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e006      	b.n	80040b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3724      	adds	r7, #36	; 0x24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040be:	b480      	push	{r7}
 80040c0:	b087      	sub	sp, #28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d003      	beq.n	80040e2 <HAL_CAN_GetRxMessage+0x24>
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	f040 80f3 	bne.w	80042c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10e      	bne.n	8004106 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0e7      	b.n	80042d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0d8      	b.n	80042d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	331b      	adds	r3, #27
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4413      	add	r3, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0204 	and.w	r2, r3, #4
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	331b      	adds	r3, #27
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	4413      	add	r3, r2
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	0d5b      	lsrs	r3, r3, #21
 8004152:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e00b      	b.n	8004174 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	331b      	adds	r3, #27
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	4413      	add	r3, r2
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	08db      	lsrs	r3, r3, #3
 800416c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	331b      	adds	r3, #27
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	4413      	add	r3, r2
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0202 	and.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	331b      	adds	r3, #27
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 020f 	and.w	r2, r3, #15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	331b      	adds	r3, #27
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	331b      	adds	r3, #27
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	4413      	add	r3, r2
 80041dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0a1a      	lsrs	r2, r3, #8
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	3301      	adds	r3, #1
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	4413      	add	r3, r2
 800420c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0c1a      	lsrs	r2, r3, #16
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3302      	adds	r3, #2
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4413      	add	r3, r2
 8004226:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e1a      	lsrs	r2, r3, #24
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3303      	adds	r3, #3
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	3304      	adds	r3, #4
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4413      	add	r3, r2
 8004258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0a1a      	lsrs	r2, r3, #8
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	3305      	adds	r3, #5
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	4413      	add	r3, r2
 8004272:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0c1a      	lsrs	r2, r3, #16
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3306      	adds	r3, #6
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	4413      	add	r3, r2
 800428c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e1a      	lsrs	r2, r3, #24
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	3307      	adds	r3, #7
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0220 	orr.w	r2, r2, #32
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	e007      	b.n	80042c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0220 	orr.w	r2, r2, #32
 80042c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e006      	b.n	80042d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d002      	beq.n	80042fe <HAL_CAN_ActivateNotification+0x1e>
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d109      	bne.n	8004312 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6959      	ldr	r1, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e006      	b.n	8004320 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b08a      	sub	sp, #40	; 0x28
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004332:	2300      	movs	r3, #0
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d07c      	beq.n	800446a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f983 	bl	8004698 <HAL_CAN_TxMailbox0CompleteCallback>
 8004392:	e016      	b.n	80043c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	e00c      	b.n	80043c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d004      	beq.n	80043bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	e002      	b.n	80043c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f986 	bl	80046ce <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d024      	beq.n	8004416 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f962 	bl	80046aa <HAL_CAN_TxMailbox1CompleteCallback>
 80043e6:	e016      	b.n	8004416 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	e00c      	b.n	8004416 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e002      	b.n	8004416 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f965 	bl	80046e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d024      	beq.n	800446a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f941 	bl	80046bc <HAL_CAN_TxMailbox2CompleteCallback>
 800443a:	e016      	b.n	800446a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	e00c      	b.n	800446a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e002      	b.n	800446a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f944 	bl	80046f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004484:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d006      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2208      	movs	r2, #8
 80044a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f92a 	bl	8004704 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d002      	beq.n	80044ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7fe fa65 	bl	8002998 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f003 0320 	and.w	r3, r3, #32
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2208      	movs	r2, #8
 800450c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f90a 	bl	8004728 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8f2 	bl	8004716 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2210      	movs	r2, #16
 800454c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f8f3 	bl	800473a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8eb 	bl	800474c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07b      	beq.n	8004678 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d072      	beq.n	8004670 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d043      	beq.n	8004670 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03e      	beq.n	8004670 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f8:	2b60      	cmp	r3, #96	; 0x60
 80045fa:	d02b      	beq.n	8004654 <HAL_CAN_IRQHandler+0x32a>
 80045fc:	2b60      	cmp	r3, #96	; 0x60
 80045fe:	d82e      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004600:	2b50      	cmp	r3, #80	; 0x50
 8004602:	d022      	beq.n	800464a <HAL_CAN_IRQHandler+0x320>
 8004604:	2b50      	cmp	r3, #80	; 0x50
 8004606:	d82a      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d019      	beq.n	8004640 <HAL_CAN_IRQHandler+0x316>
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d826      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d010      	beq.n	8004636 <HAL_CAN_IRQHandler+0x30c>
 8004614:	2b30      	cmp	r3, #48	; 0x30
 8004616:	d822      	bhi.n	800465e <HAL_CAN_IRQHandler+0x334>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d002      	beq.n	8004622 <HAL_CAN_IRQHandler+0x2f8>
 800461c:	2b20      	cmp	r3, #32
 800461e:	d005      	beq.n	800462c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004620:	e01d      	b.n	800465e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f043 0308 	orr.w	r3, r3, #8
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800462a:	e019      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f043 0310 	orr.w	r3, r3, #16
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004634:	e014      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800463e:	e00f      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004648:	e00a      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004652:	e005      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800465c:	e000      	b.n	8004660 <HAL_CAN_IRQHandler+0x336>
            break;
 800465e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800466e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2204      	movs	r2, #4
 8004676:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f867 	bl	800475e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004690:	bf00      	nop
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr

080046bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	bc80      	pop	{r7}
 800475c:	4770      	bx	lr

0800475e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800478c:	4013      	ands	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <__NVIC_SetPriorityGrouping+0x44>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	60d3      	str	r3, [r2, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <__NVIC_GetPriorityGrouping+0x18>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	f003 0307 	and.w	r3, r3, #7
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	db0b      	blt.n	80047fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	f003 021f 	and.w	r2, r3, #31
 80047ec:	4906      	ldr	r1, [pc, #24]	; (8004808 <__NVIC_EnableIRQ+0x34>)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2001      	movs	r0, #1
 80047f6:	fa00 f202 	lsl.w	r2, r0, r2
 80047fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	e000e100 	.word	0xe000e100

0800480c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db0a      	blt.n	8004836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	b2da      	uxtb	r2, r3
 8004824:	490c      	ldr	r1, [pc, #48]	; (8004858 <__NVIC_SetPriority+0x4c>)
 8004826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482a:	0112      	lsls	r2, r2, #4
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	440b      	add	r3, r1
 8004830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004834:	e00a      	b.n	800484c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4908      	ldr	r1, [pc, #32]	; (800485c <__NVIC_SetPriority+0x50>)
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3b04      	subs	r3, #4
 8004844:	0112      	lsls	r2, r2, #4
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	440b      	add	r3, r1
 800484a:	761a      	strb	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	e000e100 	.word	0xe000e100
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f1c3 0307 	rsb	r3, r3, #7
 800487a:	2b04      	cmp	r3, #4
 800487c:	bf28      	it	cs
 800487e:	2304      	movcs	r3, #4
 8004880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	3304      	adds	r3, #4
 8004886:	2b06      	cmp	r3, #6
 8004888:	d902      	bls.n	8004890 <NVIC_EncodePriority+0x30>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3b03      	subs	r3, #3
 800488e:	e000      	b.n	8004892 <NVIC_EncodePriority+0x32>
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	401a      	ands	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	fa01 f303 	lsl.w	r3, r1, r3
 80048b2:	43d9      	mvns	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b8:	4313      	orrs	r3, r2
         );
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff ff4f 	bl	8004770 <__NVIC_SetPriorityGrouping>
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048da:	b580      	push	{r7, lr}
 80048dc:	b086      	sub	sp, #24
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	607a      	str	r2, [r7, #4]
 80048e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048ec:	f7ff ff64 	bl	80047b8 <__NVIC_GetPriorityGrouping>
 80048f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	6978      	ldr	r0, [r7, #20]
 80048f8:	f7ff ffb2 	bl	8004860 <NVIC_EncodePriority>
 80048fc:	4602      	mov	r2, r0
 80048fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004902:	4611      	mov	r1, r2
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff81 	bl	800480c <__NVIC_SetPriority>
}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff57 	bl	80047d4 <__NVIC_EnableIRQ>
}
 8004926:	bf00      	nop
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e014      	b.n	800496a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fc fc63 	bl	800121c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2202      	movs	r2, #2
 800495a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	795b      	ldrb	r3, [r3, #5]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_DAC_Start+0x16>
 8004984:	2302      	movs	r3, #2
 8004986:	e040      	b.n	8004a0a <HAL_DAC_Start+0x98>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2202      	movs	r2, #2
 8004992:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6819      	ldr	r1, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2201      	movs	r2, #1
 80049a2:	409a      	lsls	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80049bc:	2b3c      	cmp	r3, #60	; 0x3c
 80049be:	d11d      	bne.n	80049fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	e014      	b.n	80049fc <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f003 0310 	and.w	r3, r3, #16
 80049e2:	213c      	movs	r1, #60	; 0x3c
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d107      	bne.n	80049fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0202 	orr.w	r2, r2, #2
 80049fa:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d105      	bne.n	8004a3e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	3308      	adds	r3, #8
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e004      	b.n	8004a48 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	3314      	adds	r3, #20
 8004a46:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	795b      	ldrb	r3, [r3, #5]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_DAC_ConfigChannel+0x18>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e03c      	b.n	8004aee <HAL_DAC_ConfigChannel+0x92>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0310 	and.w	r3, r3, #16
 8004a8e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43db      	mvns	r3, r3
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	22c0      	movs	r2, #192	; 0xc0
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	400a      	ands	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e059      	b.n	8004bc2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <HAL_DMA_Init+0xd4>)
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d80f      	bhi.n	8004b3a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b2b      	ldr	r3, [pc, #172]	; (8004bd0 <HAL_DMA_Init+0xd8>)
 8004b22:	4413      	add	r3, r2
 8004b24:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <HAL_DMA_Init+0xdc>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	009a      	lsls	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <HAL_DMA_Init+0xe0>)
 8004b36:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b38:	e00e      	b.n	8004b58 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <HAL_DMA_Init+0xe4>)
 8004b42:	4413      	add	r3, r2
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <HAL_DMA_Init+0xdc>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	009a      	lsls	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <HAL_DMA_Init+0xe8>)
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	40020407 	.word	0x40020407
 8004bd0:	bffdfff8 	.word	0xbffdfff8
 8004bd4:	cccccccd 	.word	0xcccccccd
 8004bd8:	40020000 	.word	0x40020000
 8004bdc:	bffdfbf8 	.word	0xbffdfbf8
 8004be0:	40020400 	.word	0x40020400

08004be4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_DMA_Start_IT+0x20>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e04a      	b.n	8004c9a <HAL_DMA_Start_IT+0xb6>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d13a      	bne.n	8004c8c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fbb0 	bl	80053a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 020e 	orr.w	r2, r2, #14
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e00f      	b.n	8004c7a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 0204 	bic.w	r2, r2, #4
 8004c68:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 020a 	orr.w	r2, r2, #10
 8004c78:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e005      	b.n	8004c98 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
 8004c96:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d008      	beq.n	8004cca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2204      	movs	r2, #4
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e020      	b.n	8004d0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 020e 	bic.w	r2, r2, #14
 8004cd8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d005      	beq.n	8004d3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2204      	movs	r2, #4
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	73fb      	strb	r3, [r7, #15]
 8004d38:	e0d6      	b.n	8004ee8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 020e 	bic.w	r2, r2, #14
 8004d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4b64      	ldr	r3, [pc, #400]	; (8004ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d958      	bls.n	8004e18 <HAL_DMA_Abort_IT+0x100>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a63      	ldr	r2, [pc, #396]	; (8004ef8 <HAL_DMA_Abort_IT+0x1e0>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d04f      	beq.n	8004e10 <HAL_DMA_Abort_IT+0xf8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a61      	ldr	r2, [pc, #388]	; (8004efc <HAL_DMA_Abort_IT+0x1e4>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d048      	beq.n	8004e0c <HAL_DMA_Abort_IT+0xf4>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a60      	ldr	r2, [pc, #384]	; (8004f00 <HAL_DMA_Abort_IT+0x1e8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d040      	beq.n	8004e06 <HAL_DMA_Abort_IT+0xee>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a5e      	ldr	r2, [pc, #376]	; (8004f04 <HAL_DMA_Abort_IT+0x1ec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d038      	beq.n	8004e00 <HAL_DMA_Abort_IT+0xe8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5d      	ldr	r2, [pc, #372]	; (8004f08 <HAL_DMA_Abort_IT+0x1f0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d030      	beq.n	8004dfa <HAL_DMA_Abort_IT+0xe2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5b      	ldr	r2, [pc, #364]	; (8004f0c <HAL_DMA_Abort_IT+0x1f4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d028      	beq.n	8004df4 <HAL_DMA_Abort_IT+0xdc>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a53      	ldr	r2, [pc, #332]	; (8004ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d020      	beq.n	8004dee <HAL_DMA_Abort_IT+0xd6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a57      	ldr	r2, [pc, #348]	; (8004f10 <HAL_DMA_Abort_IT+0x1f8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <HAL_DMA_Abort_IT+0xd2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a56      	ldr	r2, [pc, #344]	; (8004f14 <HAL_DMA_Abort_IT+0x1fc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d012      	beq.n	8004de6 <HAL_DMA_Abort_IT+0xce>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a54      	ldr	r2, [pc, #336]	; (8004f18 <HAL_DMA_Abort_IT+0x200>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00a      	beq.n	8004de0 <HAL_DMA_Abort_IT+0xc8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a53      	ldr	r2, [pc, #332]	; (8004f1c <HAL_DMA_Abort_IT+0x204>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d102      	bne.n	8004dda <HAL_DMA_Abort_IT+0xc2>
 8004dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd8:	e01b      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004dda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dde:	e018      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de4:	e015      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004de6:	2310      	movs	r3, #16
 8004de8:	e013      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e011      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004dee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df2:	e00e      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004df4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004df8:	e00b      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dfe:	e008      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e04:	e005      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e0a:	e002      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	e000      	b.n	8004e12 <HAL_DMA_Abort_IT+0xfa>
 8004e10:	2301      	movs	r3, #1
 8004e12:	4a43      	ldr	r2, [pc, #268]	; (8004f20 <HAL_DMA_Abort_IT+0x208>)
 8004e14:	6053      	str	r3, [r2, #4]
 8004e16:	e057      	b.n	8004ec8 <HAL_DMA_Abort_IT+0x1b0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a36      	ldr	r2, [pc, #216]	; (8004ef8 <HAL_DMA_Abort_IT+0x1e0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d04f      	beq.n	8004ec2 <HAL_DMA_Abort_IT+0x1aa>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a35      	ldr	r2, [pc, #212]	; (8004efc <HAL_DMA_Abort_IT+0x1e4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d048      	beq.n	8004ebe <HAL_DMA_Abort_IT+0x1a6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a33      	ldr	r2, [pc, #204]	; (8004f00 <HAL_DMA_Abort_IT+0x1e8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d040      	beq.n	8004eb8 <HAL_DMA_Abort_IT+0x1a0>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a32      	ldr	r2, [pc, #200]	; (8004f04 <HAL_DMA_Abort_IT+0x1ec>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d038      	beq.n	8004eb2 <HAL_DMA_Abort_IT+0x19a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a30      	ldr	r2, [pc, #192]	; (8004f08 <HAL_DMA_Abort_IT+0x1f0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d030      	beq.n	8004eac <HAL_DMA_Abort_IT+0x194>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <HAL_DMA_Abort_IT+0x1f4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d028      	beq.n	8004ea6 <HAL_DMA_Abort_IT+0x18e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <HAL_DMA_Abort_IT+0x1dc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d020      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0x188>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2b      	ldr	r2, [pc, #172]	; (8004f10 <HAL_DMA_Abort_IT+0x1f8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d019      	beq.n	8004e9c <HAL_DMA_Abort_IT+0x184>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	; (8004f14 <HAL_DMA_Abort_IT+0x1fc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d012      	beq.n	8004e98 <HAL_DMA_Abort_IT+0x180>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a28      	ldr	r2, [pc, #160]	; (8004f18 <HAL_DMA_Abort_IT+0x200>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d00a      	beq.n	8004e92 <HAL_DMA_Abort_IT+0x17a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <HAL_DMA_Abort_IT+0x204>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d102      	bne.n	8004e8c <HAL_DMA_Abort_IT+0x174>
 8004e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e8a:	e01b      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e90:	e018      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e96:	e015      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	e013      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e011      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ea4:	e00e      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004ea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eaa:	e00b      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004eb0:	e008      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb6:	e005      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ebc:	e002      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	e000      	b.n	8004ec4 <HAL_DMA_Abort_IT+0x1ac>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <HAL_DMA_Abort_IT+0x20c>)
 8004ec6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
    } 
  }
  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40020080 	.word	0x40020080
 8004ef8:	40020008 	.word	0x40020008
 8004efc:	4002001c 	.word	0x4002001c
 8004f00:	40020030 	.word	0x40020030
 8004f04:	40020044 	.word	0x40020044
 8004f08:	40020058 	.word	0x40020058
 8004f0c:	4002006c 	.word	0x4002006c
 8004f10:	40020408 	.word	0x40020408
 8004f14:	4002041c 	.word	0x4002041c
 8004f18:	40020430 	.word	0x40020430
 8004f1c:	40020444 	.word	0x40020444
 8004f20:	40020400 	.word	0x40020400
 8004f24:	40020000 	.word	0x40020000

08004f28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2204      	movs	r2, #4
 8004f46:	409a      	lsls	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80d6 	beq.w	80050fe <HAL_DMA_IRQHandler+0x1d6>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80d0 	beq.w	80050fe <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0204 	bic.w	r2, r2, #4
 8004f7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	4b9b      	ldr	r3, [pc, #620]	; (80051f0 <HAL_DMA_IRQHandler+0x2c8>)
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d958      	bls.n	800503a <HAL_DMA_IRQHandler+0x112>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a99      	ldr	r2, [pc, #612]	; (80051f4 <HAL_DMA_IRQHandler+0x2cc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d04f      	beq.n	8005032 <HAL_DMA_IRQHandler+0x10a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a98      	ldr	r2, [pc, #608]	; (80051f8 <HAL_DMA_IRQHandler+0x2d0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d048      	beq.n	800502e <HAL_DMA_IRQHandler+0x106>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a96      	ldr	r2, [pc, #600]	; (80051fc <HAL_DMA_IRQHandler+0x2d4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d040      	beq.n	8005028 <HAL_DMA_IRQHandler+0x100>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a95      	ldr	r2, [pc, #596]	; (8005200 <HAL_DMA_IRQHandler+0x2d8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d038      	beq.n	8005022 <HAL_DMA_IRQHandler+0xfa>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a93      	ldr	r2, [pc, #588]	; (8005204 <HAL_DMA_IRQHandler+0x2dc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d030      	beq.n	800501c <HAL_DMA_IRQHandler+0xf4>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a92      	ldr	r2, [pc, #584]	; (8005208 <HAL_DMA_IRQHandler+0x2e0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d028      	beq.n	8005016 <HAL_DMA_IRQHandler+0xee>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a89      	ldr	r2, [pc, #548]	; (80051f0 <HAL_DMA_IRQHandler+0x2c8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d020      	beq.n	8005010 <HAL_DMA_IRQHandler+0xe8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a8e      	ldr	r2, [pc, #568]	; (800520c <HAL_DMA_IRQHandler+0x2e4>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d019      	beq.n	800500c <HAL_DMA_IRQHandler+0xe4>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a8c      	ldr	r2, [pc, #560]	; (8005210 <HAL_DMA_IRQHandler+0x2e8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d012      	beq.n	8005008 <HAL_DMA_IRQHandler+0xe0>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a8b      	ldr	r2, [pc, #556]	; (8005214 <HAL_DMA_IRQHandler+0x2ec>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00a      	beq.n	8005002 <HAL_DMA_IRQHandler+0xda>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a89      	ldr	r2, [pc, #548]	; (8005218 <HAL_DMA_IRQHandler+0x2f0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d102      	bne.n	8004ffc <HAL_DMA_IRQHandler+0xd4>
 8004ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ffa:	e01b      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8004ffc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005000:	e018      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005006:	e015      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005008:	2340      	movs	r3, #64	; 0x40
 800500a:	e013      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 800500c:	2304      	movs	r3, #4
 800500e:	e011      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005010:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005014:	e00e      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800501a:	e00b      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 800501c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005020:	e008      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005026:	e005      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800502c:	e002      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 800502e:	2340      	movs	r3, #64	; 0x40
 8005030:	e000      	b.n	8005034 <HAL_DMA_IRQHandler+0x10c>
 8005032:	2304      	movs	r3, #4
 8005034:	4a79      	ldr	r2, [pc, #484]	; (800521c <HAL_DMA_IRQHandler+0x2f4>)
 8005036:	6053      	str	r3, [r2, #4]
 8005038:	e057      	b.n	80050ea <HAL_DMA_IRQHandler+0x1c2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6d      	ldr	r2, [pc, #436]	; (80051f4 <HAL_DMA_IRQHandler+0x2cc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04f      	beq.n	80050e4 <HAL_DMA_IRQHandler+0x1bc>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a6b      	ldr	r2, [pc, #428]	; (80051f8 <HAL_DMA_IRQHandler+0x2d0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d048      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x1b8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6a      	ldr	r2, [pc, #424]	; (80051fc <HAL_DMA_IRQHandler+0x2d4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <HAL_DMA_IRQHandler+0x1b2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a68      	ldr	r2, [pc, #416]	; (8005200 <HAL_DMA_IRQHandler+0x2d8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d038      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x1ac>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a67      	ldr	r2, [pc, #412]	; (8005204 <HAL_DMA_IRQHandler+0x2dc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d030      	beq.n	80050ce <HAL_DMA_IRQHandler+0x1a6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a65      	ldr	r2, [pc, #404]	; (8005208 <HAL_DMA_IRQHandler+0x2e0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d028      	beq.n	80050c8 <HAL_DMA_IRQHandler+0x1a0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a5d      	ldr	r2, [pc, #372]	; (80051f0 <HAL_DMA_IRQHandler+0x2c8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d020      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x19a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a61      	ldr	r2, [pc, #388]	; (800520c <HAL_DMA_IRQHandler+0x2e4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d019      	beq.n	80050be <HAL_DMA_IRQHandler+0x196>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a60      	ldr	r2, [pc, #384]	; (8005210 <HAL_DMA_IRQHandler+0x2e8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d012      	beq.n	80050ba <HAL_DMA_IRQHandler+0x192>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5e      	ldr	r2, [pc, #376]	; (8005214 <HAL_DMA_IRQHandler+0x2ec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00a      	beq.n	80050b4 <HAL_DMA_IRQHandler+0x18c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_DMA_IRQHandler+0x2f0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d102      	bne.n	80050ae <HAL_DMA_IRQHandler+0x186>
 80050a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050ac:	e01b      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050b2:	e018      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b8:	e015      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050ba:	2340      	movs	r3, #64	; 0x40
 80050bc:	e013      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050be:	2304      	movs	r3, #4
 80050c0:	e011      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80050c6:	e00e      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050cc:	e00b      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80050d2:	e008      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050d8:	e005      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050de:	e002      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	e000      	b.n	80050e6 <HAL_DMA_IRQHandler+0x1be>
 80050e4:	2304      	movs	r3, #4
 80050e6:	4a4e      	ldr	r2, [pc, #312]	; (8005220 <HAL_DMA_IRQHandler+0x2f8>)
 80050e8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8136 	beq.w	8005360 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80050fc:	e130      	b.n	8005360 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	2202      	movs	r2, #2
 8005104:	409a      	lsls	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80f8 	beq.w	8005300 <HAL_DMA_IRQHandler+0x3d8>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80f2 	beq.w	8005300 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10b      	bne.n	8005142 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 020a 	bic.w	r2, r2, #10
 8005138:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	4b29      	ldr	r3, [pc, #164]	; (80051f0 <HAL_DMA_IRQHandler+0x2c8>)
 800514a:	429a      	cmp	r2, r3
 800514c:	d973      	bls.n	8005236 <HAL_DMA_IRQHandler+0x30e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <HAL_DMA_IRQHandler+0x2cc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d06a      	beq.n	800522e <HAL_DMA_IRQHandler+0x306>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a26      	ldr	r2, [pc, #152]	; (80051f8 <HAL_DMA_IRQHandler+0x2d0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d063      	beq.n	800522a <HAL_DMA_IRQHandler+0x302>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a25      	ldr	r2, [pc, #148]	; (80051fc <HAL_DMA_IRQHandler+0x2d4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d05b      	beq.n	8005224 <HAL_DMA_IRQHandler+0x2fc>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_DMA_IRQHandler+0x2d8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d038      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x2c0>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a22      	ldr	r2, [pc, #136]	; (8005204 <HAL_DMA_IRQHandler+0x2dc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d030      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x2ba>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a20      	ldr	r2, [pc, #128]	; (8005208 <HAL_DMA_IRQHandler+0x2e0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d028      	beq.n	80051dc <HAL_DMA_IRQHandler+0x2b4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_DMA_IRQHandler+0x2c8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d020      	beq.n	80051d6 <HAL_DMA_IRQHandler+0x2ae>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_DMA_IRQHandler+0x2e4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d019      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x2aa>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_DMA_IRQHandler+0x2e8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d012      	beq.n	80051ce <HAL_DMA_IRQHandler+0x2a6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_DMA_IRQHandler+0x2ec>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00a      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x2a0>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_DMA_IRQHandler+0x2f0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d102      	bne.n	80051c2 <HAL_DMA_IRQHandler+0x29a>
 80051bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051c0:	e036      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051c6:	e033      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051cc:	e030      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051ce:	2320      	movs	r3, #32
 80051d0:	e02e      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e02c      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051da:	e029      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051e0:	e026      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051e6:	e023      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051ec:	e020      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 80051ee:	bf00      	nop
 80051f0:	40020080 	.word	0x40020080
 80051f4:	40020008 	.word	0x40020008
 80051f8:	4002001c 	.word	0x4002001c
 80051fc:	40020030 	.word	0x40020030
 8005200:	40020044 	.word	0x40020044
 8005204:	40020058 	.word	0x40020058
 8005208:	4002006c 	.word	0x4002006c
 800520c:	40020408 	.word	0x40020408
 8005210:	4002041c 	.word	0x4002041c
 8005214:	40020430 	.word	0x40020430
 8005218:	40020444 	.word	0x40020444
 800521c:	40020400 	.word	0x40020400
 8005220:	40020000 	.word	0x40020000
 8005224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005228:	e002      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 800522a:	2320      	movs	r3, #32
 800522c:	e000      	b.n	8005230 <HAL_DMA_IRQHandler+0x308>
 800522e:	2302      	movs	r3, #2
 8005230:	4a4e      	ldr	r2, [pc, #312]	; (800536c <HAL_DMA_IRQHandler+0x444>)
 8005232:	6053      	str	r3, [r2, #4]
 8005234:	e057      	b.n	80052e6 <HAL_DMA_IRQHandler+0x3be>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4d      	ldr	r2, [pc, #308]	; (8005370 <HAL_DMA_IRQHandler+0x448>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d04f      	beq.n	80052e0 <HAL_DMA_IRQHandler+0x3b8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a4b      	ldr	r2, [pc, #300]	; (8005374 <HAL_DMA_IRQHandler+0x44c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d048      	beq.n	80052dc <HAL_DMA_IRQHandler+0x3b4>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4a      	ldr	r2, [pc, #296]	; (8005378 <HAL_DMA_IRQHandler+0x450>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d040      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x3ae>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a48      	ldr	r2, [pc, #288]	; (800537c <HAL_DMA_IRQHandler+0x454>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d038      	beq.n	80052d0 <HAL_DMA_IRQHandler+0x3a8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a47      	ldr	r2, [pc, #284]	; (8005380 <HAL_DMA_IRQHandler+0x458>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d030      	beq.n	80052ca <HAL_DMA_IRQHandler+0x3a2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a45      	ldr	r2, [pc, #276]	; (8005384 <HAL_DMA_IRQHandler+0x45c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d028      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x39c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a44      	ldr	r2, [pc, #272]	; (8005388 <HAL_DMA_IRQHandler+0x460>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d020      	beq.n	80052be <HAL_DMA_IRQHandler+0x396>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a42      	ldr	r2, [pc, #264]	; (800538c <HAL_DMA_IRQHandler+0x464>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_DMA_IRQHandler+0x392>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a41      	ldr	r2, [pc, #260]	; (8005390 <HAL_DMA_IRQHandler+0x468>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d012      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x38e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a3f      	ldr	r2, [pc, #252]	; (8005394 <HAL_DMA_IRQHandler+0x46c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00a      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x388>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3e      	ldr	r2, [pc, #248]	; (8005398 <HAL_DMA_IRQHandler+0x470>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d102      	bne.n	80052aa <HAL_DMA_IRQHandler+0x382>
 80052a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052a8:	e01b      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ae:	e018      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052b4:	e015      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052b6:	2320      	movs	r3, #32
 80052b8:	e013      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e011      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c2:	e00e      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052c8:	e00b      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052ce:	e008      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052d4:	e005      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052da:	e002      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052dc:	2320      	movs	r3, #32
 80052de:	e000      	b.n	80052e2 <HAL_DMA_IRQHandler+0x3ba>
 80052e0:	2302      	movs	r3, #2
 80052e2:	4a2e      	ldr	r2, [pc, #184]	; (800539c <HAL_DMA_IRQHandler+0x474>)
 80052e4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d034      	beq.n	8005360 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052fe:	e02f      	b.n	8005360 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	2208      	movs	r2, #8
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d028      	beq.n	8005362 <HAL_DMA_IRQHandler+0x43a>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d023      	beq.n	8005362 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 020e 	bic.w	r2, r2, #14
 8005328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f202 	lsl.w	r2, r1, r2
 8005338:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
    }
  }
  return;
 8005360:	bf00      	nop
 8005362:	bf00      	nop
}
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40020400 	.word	0x40020400
 8005370:	40020008 	.word	0x40020008
 8005374:	4002001c 	.word	0x4002001c
 8005378:	40020030 	.word	0x40020030
 800537c:	40020044 	.word	0x40020044
 8005380:	40020058 	.word	0x40020058
 8005384:	4002006c 	.word	0x4002006c
 8005388:	40020080 	.word	0x40020080
 800538c:	40020408 	.word	0x40020408
 8005390:	4002041c 	.word	0x4002041c
 8005394:	40020430 	.word	0x40020430
 8005398:	40020444 	.word	0x40020444
 800539c:	40020000 	.word	0x40020000

080053a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	2101      	movs	r1, #1
 80053b8:	fa01 f202 	lsl.w	r2, r1, r2
 80053bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d108      	bne.n	80053e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053de:	e007      	b.n	80053f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr
	...

080053fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b08b      	sub	sp, #44	; 0x2c
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800540a:	2300      	movs	r3, #0
 800540c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800540e:	e179      	b.n	8005704 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005410:	2201      	movs	r2, #1
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	4013      	ands	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	429a      	cmp	r2, r3
 800542a:	f040 8168 	bne.w	80056fe <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	4aa0      	ldr	r2, [pc, #640]	; (80056b4 <HAL_GPIO_Init+0x2b8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d05e      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005438:	4a9e      	ldr	r2, [pc, #632]	; (80056b4 <HAL_GPIO_Init+0x2b8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d875      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 800543e:	4a9e      	ldr	r2, [pc, #632]	; (80056b8 <HAL_GPIO_Init+0x2bc>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d058      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005444:	4a9c      	ldr	r2, [pc, #624]	; (80056b8 <HAL_GPIO_Init+0x2bc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d86f      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 800544a:	4a9c      	ldr	r2, [pc, #624]	; (80056bc <HAL_GPIO_Init+0x2c0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d052      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005450:	4a9a      	ldr	r2, [pc, #616]	; (80056bc <HAL_GPIO_Init+0x2c0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d869      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 8005456:	4a9a      	ldr	r2, [pc, #616]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d04c      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 800545c:	4a98      	ldr	r2, [pc, #608]	; (80056c0 <HAL_GPIO_Init+0x2c4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d863      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 8005462:	4a98      	ldr	r2, [pc, #608]	; (80056c4 <HAL_GPIO_Init+0x2c8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d046      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
 8005468:	4a96      	ldr	r2, [pc, #600]	; (80056c4 <HAL_GPIO_Init+0x2c8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d85d      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 800546e:	2b12      	cmp	r3, #18
 8005470:	d82a      	bhi.n	80054c8 <HAL_GPIO_Init+0xcc>
 8005472:	2b12      	cmp	r3, #18
 8005474:	d859      	bhi.n	800552a <HAL_GPIO_Init+0x12e>
 8005476:	a201      	add	r2, pc, #4	; (adr r2, 800547c <HAL_GPIO_Init+0x80>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	080054f7 	.word	0x080054f7
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054e3 	.word	0x080054e3
 8005488:	08005525 	.word	0x08005525
 800548c:	0800552b 	.word	0x0800552b
 8005490:	0800552b 	.word	0x0800552b
 8005494:	0800552b 	.word	0x0800552b
 8005498:	0800552b 	.word	0x0800552b
 800549c:	0800552b 	.word	0x0800552b
 80054a0:	0800552b 	.word	0x0800552b
 80054a4:	0800552b 	.word	0x0800552b
 80054a8:	0800552b 	.word	0x0800552b
 80054ac:	0800552b 	.word	0x0800552b
 80054b0:	0800552b 	.word	0x0800552b
 80054b4:	0800552b 	.word	0x0800552b
 80054b8:	0800552b 	.word	0x0800552b
 80054bc:	0800552b 	.word	0x0800552b
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	4a7f      	ldr	r2, [pc, #508]	; (80056c8 <HAL_GPIO_Init+0x2cc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054ce:	e02c      	b.n	800552a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	623b      	str	r3, [r7, #32]
          break;
 80054d6:	e029      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	3304      	adds	r3, #4
 80054de:	623b      	str	r3, [r7, #32]
          break;
 80054e0:	e024      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	3308      	adds	r3, #8
 80054e8:	623b      	str	r3, [r7, #32]
          break;
 80054ea:	e01f      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	330c      	adds	r3, #12
 80054f2:	623b      	str	r3, [r7, #32]
          break;
 80054f4:	e01a      	b.n	800552c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80054fe:	2304      	movs	r3, #4
 8005500:	623b      	str	r3, [r7, #32]
          break;
 8005502:	e013      	b.n	800552c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800550c:	2308      	movs	r3, #8
 800550e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	611a      	str	r2, [r3, #16]
          break;
 8005516:	e009      	b.n	800552c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005518:	2308      	movs	r3, #8
 800551a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	615a      	str	r2, [r3, #20]
          break;
 8005522:	e003      	b.n	800552c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005524:	2300      	movs	r3, #0
 8005526:	623b      	str	r3, [r7, #32]
          break;
 8005528:	e000      	b.n	800552c <HAL_GPIO_Init+0x130>
          break;
 800552a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2bff      	cmp	r3, #255	; 0xff
 8005530:	d801      	bhi.n	8005536 <HAL_GPIO_Init+0x13a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	e001      	b.n	800553a <HAL_GPIO_Init+0x13e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	d802      	bhi.n	8005548 <HAL_GPIO_Init+0x14c>
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	e002      	b.n	800554e <HAL_GPIO_Init+0x152>
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	3b08      	subs	r3, #8
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	210f      	movs	r1, #15
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	fa01 f303 	lsl.w	r3, r1, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	6a39      	ldr	r1, [r7, #32]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	fa01 f303 	lsl.w	r3, r1, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80c1 	beq.w	80056fe <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800557c:	4b53      	ldr	r3, [pc, #332]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	4a52      	ldr	r2, [pc, #328]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	6193      	str	r3, [r2, #24]
 8005588:	4b50      	ldr	r3, [pc, #320]	; (80056cc <HAL_GPIO_Init+0x2d0>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005594:	4a4e      	ldr	r2, [pc, #312]	; (80056d0 <HAL_GPIO_Init+0x2d4>)
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	3302      	adds	r3, #2
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	220f      	movs	r2, #15
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4013      	ands	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a46      	ldr	r2, [pc, #280]	; (80056d4 <HAL_GPIO_Init+0x2d8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01f      	beq.n	8005600 <HAL_GPIO_Init+0x204>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a45      	ldr	r2, [pc, #276]	; (80056d8 <HAL_GPIO_Init+0x2dc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d019      	beq.n	80055fc <HAL_GPIO_Init+0x200>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a44      	ldr	r2, [pc, #272]	; (80056dc <HAL_GPIO_Init+0x2e0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <HAL_GPIO_Init+0x1fc>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a43      	ldr	r2, [pc, #268]	; (80056e0 <HAL_GPIO_Init+0x2e4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00d      	beq.n	80055f4 <HAL_GPIO_Init+0x1f8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a42      	ldr	r2, [pc, #264]	; (80056e4 <HAL_GPIO_Init+0x2e8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d007      	beq.n	80055f0 <HAL_GPIO_Init+0x1f4>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a41      	ldr	r2, [pc, #260]	; (80056e8 <HAL_GPIO_Init+0x2ec>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_GPIO_Init+0x1f0>
 80055e8:	2305      	movs	r3, #5
 80055ea:	e00a      	b.n	8005602 <HAL_GPIO_Init+0x206>
 80055ec:	2306      	movs	r3, #6
 80055ee:	e008      	b.n	8005602 <HAL_GPIO_Init+0x206>
 80055f0:	2304      	movs	r3, #4
 80055f2:	e006      	b.n	8005602 <HAL_GPIO_Init+0x206>
 80055f4:	2303      	movs	r3, #3
 80055f6:	e004      	b.n	8005602 <HAL_GPIO_Init+0x206>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e002      	b.n	8005602 <HAL_GPIO_Init+0x206>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <HAL_GPIO_Init+0x206>
 8005600:	2300      	movs	r3, #0
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	f002 0203 	and.w	r2, r2, #3
 8005608:	0092      	lsls	r2, r2, #2
 800560a:	4093      	lsls	r3, r2
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005612:	492f      	ldr	r1, [pc, #188]	; (80056d0 <HAL_GPIO_Init+0x2d4>)
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	089b      	lsrs	r3, r3, #2
 8005618:	3302      	adds	r3, #2
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d006      	beq.n	800563a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800562c:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	492e      	ldr	r1, [pc, #184]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	4313      	orrs	r3, r2
 8005636:	600b      	str	r3, [r1, #0]
 8005638:	e006      	b.n	8005648 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800563a:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	43db      	mvns	r3, r3
 8005642:	492a      	ldr	r1, [pc, #168]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 8005644:	4013      	ands	r3, r2
 8005646:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d006      	beq.n	8005662 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	4924      	ldr	r1, [pc, #144]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	604b      	str	r3, [r1, #4]
 8005660:	e006      	b.n	8005670 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	43db      	mvns	r3, r3
 800566a:	4920      	ldr	r1, [pc, #128]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 800566c:	4013      	ands	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	491a      	ldr	r1, [pc, #104]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	608b      	str	r3, [r1, #8]
 8005688:	e006      	b.n	8005698 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800568a:	4b18      	ldr	r3, [pc, #96]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	43db      	mvns	r3, r3
 8005692:	4916      	ldr	r1, [pc, #88]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 8005694:	4013      	ands	r3, r2
 8005696:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d025      	beq.n	80056f0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80056a4:	4b11      	ldr	r3, [pc, #68]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	4910      	ldr	r1, [pc, #64]	; (80056ec <HAL_GPIO_Init+0x2f0>)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60cb      	str	r3, [r1, #12]
 80056b0:	e025      	b.n	80056fe <HAL_GPIO_Init+0x302>
 80056b2:	bf00      	nop
 80056b4:	10320000 	.word	0x10320000
 80056b8:	10310000 	.word	0x10310000
 80056bc:	10220000 	.word	0x10220000
 80056c0:	10210000 	.word	0x10210000
 80056c4:	10120000 	.word	0x10120000
 80056c8:	10110000 	.word	0x10110000
 80056cc:	40021000 	.word	0x40021000
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40010800 	.word	0x40010800
 80056d8:	40010c00 	.word	0x40010c00
 80056dc:	40011000 	.word	0x40011000
 80056e0:	40011400 	.word	0x40011400
 80056e4:	40011800 	.word	0x40011800
 80056e8:	40011c00 	.word	0x40011c00
 80056ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_GPIO_Init+0x324>)
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	4909      	ldr	r1, [pc, #36]	; (8005720 <HAL_GPIO_Init+0x324>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	3301      	adds	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	fa22 f303 	lsr.w	r3, r2, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f ae7e 	bne.w	8005410 <HAL_GPIO_Init+0x14>
  }
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	372c      	adds	r7, #44	; 0x2c
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr
 8005720:	40010400 	.word	0x40010400

08005724 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	887b      	ldrh	r3, [r7, #2]
 8005736:	4013      	ands	r3, r2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e001      	b.n	8005746 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr

08005752 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	807b      	strh	r3, [r7, #2]
 800575e:	4613      	mov	r3, r2
 8005760:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005762:	787b      	ldrb	r3, [r7, #1]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005768:	887a      	ldrh	r2, [r7, #2]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800576e:	e003      	b.n	8005778 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	041a      	lsls	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	611a      	str	r2, [r3, #16]
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr
	...

08005784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e26c      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8087 	beq.w	80058b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057a4:	4b92      	ldr	r3, [pc, #584]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d00c      	beq.n	80057ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057b0:	4b8f      	ldr	r3, [pc, #572]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d112      	bne.n	80057e2 <HAL_RCC_OscConfig+0x5e>
 80057bc:	4b8c      	ldr	r3, [pc, #560]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d10b      	bne.n	80057e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ca:	4b89      	ldr	r3, [pc, #548]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d06c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x12c>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d168      	bne.n	80058b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e246      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ea:	d106      	bne.n	80057fa <HAL_RCC_OscConfig+0x76>
 80057ec:	4b80      	ldr	r3, [pc, #512]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7f      	ldr	r2, [pc, #508]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80057f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	e02e      	b.n	8005858 <HAL_RCC_OscConfig+0xd4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10c      	bne.n	800581c <HAL_RCC_OscConfig+0x98>
 8005802:	4b7b      	ldr	r3, [pc, #492]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a7a      	ldr	r2, [pc, #488]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4b78      	ldr	r3, [pc, #480]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a77      	ldr	r2, [pc, #476]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e01d      	b.n	8005858 <HAL_RCC_OscConfig+0xd4>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005824:	d10c      	bne.n	8005840 <HAL_RCC_OscConfig+0xbc>
 8005826:	4b72      	ldr	r3, [pc, #456]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a71      	ldr	r2, [pc, #452]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 800582c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	4b6f      	ldr	r3, [pc, #444]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6e      	ldr	r2, [pc, #440]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e00b      	b.n	8005858 <HAL_RCC_OscConfig+0xd4>
 8005840:	4b6b      	ldr	r3, [pc, #428]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6a      	ldr	r2, [pc, #424]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	4b68      	ldr	r3, [pc, #416]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a67      	ldr	r2, [pc, #412]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d013      	beq.n	8005888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fd fcb4 	bl	80031cc <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd fcb0 	bl	80031cc <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	; 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1fa      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	4b5d      	ldr	r3, [pc, #372]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0xe4>
 8005886:	e014      	b.n	80058b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fd fca0 	bl	80031cc <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005890:	f7fd fc9c 	bl	80031cc <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	; 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e1e6      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a2:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x10c>
 80058ae:	e000      	b.n	80058b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d063      	beq.n	8005986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058be:	4b4c      	ldr	r3, [pc, #304]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058ca:	4b49      	ldr	r3, [pc, #292]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d11c      	bne.n	8005910 <HAL_RCC_OscConfig+0x18c>
 80058d6:	4b46      	ldr	r3, [pc, #280]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d116      	bne.n	8005910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e2:	4b43      	ldr	r3, [pc, #268]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_RCC_OscConfig+0x176>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d001      	beq.n	80058fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e1ba      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fa:	4b3d      	ldr	r3, [pc, #244]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4939      	ldr	r1, [pc, #228]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 800590a:	4313      	orrs	r3, r2
 800590c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800590e:	e03a      	b.n	8005986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d020      	beq.n	800595a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005918:	4b36      	ldr	r3, [pc, #216]	; (80059f4 <HAL_RCC_OscConfig+0x270>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591e:	f7fd fc55 	bl	80031cc <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005926:	f7fd fc51 	bl	80031cc <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e19b      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005938:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	4927      	ldr	r1, [pc, #156]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
 8005958:	e015      	b.n	8005986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800595a:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <HAL_RCC_OscConfig+0x270>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fd fc34 	bl	80031cc <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005968:	f7fd fc30 	bl	80031cc <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e17a      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d03a      	beq.n	8005a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d019      	beq.n	80059ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <HAL_RCC_OscConfig+0x274>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a0:	f7fd fc14 	bl	80031cc <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a8:	f7fd fc10 	bl	80031cc <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e15a      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059c6:	2001      	movs	r0, #1
 80059c8:	f000 fb08 	bl	8005fdc <RCC_Delay>
 80059cc:	e01c      	b.n	8005a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <HAL_RCC_OscConfig+0x274>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d4:	f7fd fbfa 	bl	80031cc <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059da:	e00f      	b.n	80059fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059dc:	f7fd fbf6 	bl	80031cc <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d908      	bls.n	80059fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e140      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
 80059ee:	bf00      	nop
 80059f0:	40021000 	.word	0x40021000
 80059f4:	42420000 	.word	0x42420000
 80059f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fc:	4b9e      	ldr	r3, [pc, #632]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e9      	bne.n	80059dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80a6 	beq.w	8005b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a1a:	4b97      	ldr	r3, [pc, #604]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10d      	bne.n	8005a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a26:	4b94      	ldr	r3, [pc, #592]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	4a93      	ldr	r2, [pc, #588]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a30:	61d3      	str	r3, [r2, #28]
 8005a32:	4b91      	ldr	r3, [pc, #580]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a42:	4b8e      	ldr	r3, [pc, #568]	; (8005c7c <HAL_RCC_OscConfig+0x4f8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d118      	bne.n	8005a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a4e:	4b8b      	ldr	r3, [pc, #556]	; (8005c7c <HAL_RCC_OscConfig+0x4f8>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a8a      	ldr	r2, [pc, #552]	; (8005c7c <HAL_RCC_OscConfig+0x4f8>)
 8005a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a5a:	f7fd fbb7 	bl	80031cc <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a62:	f7fd fbb3 	bl	80031cc <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b64      	cmp	r3, #100	; 0x64
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e0fd      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a74:	4b81      	ldr	r3, [pc, #516]	; (8005c7c <HAL_RCC_OscConfig+0x4f8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0f0      	beq.n	8005a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d106      	bne.n	8005a96 <HAL_RCC_OscConfig+0x312>
 8005a88:	4b7b      	ldr	r3, [pc, #492]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4a7a      	ldr	r2, [pc, #488]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	6213      	str	r3, [r2, #32]
 8005a94:	e02d      	b.n	8005af2 <HAL_RCC_OscConfig+0x36e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x334>
 8005a9e:	4b76      	ldr	r3, [pc, #472]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	4a75      	ldr	r2, [pc, #468]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	6213      	str	r3, [r2, #32]
 8005aaa:	4b73      	ldr	r3, [pc, #460]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4a72      	ldr	r2, [pc, #456]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	6213      	str	r3, [r2, #32]
 8005ab6:	e01c      	b.n	8005af2 <HAL_RCC_OscConfig+0x36e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b05      	cmp	r3, #5
 8005abe:	d10c      	bne.n	8005ada <HAL_RCC_OscConfig+0x356>
 8005ac0:	4b6d      	ldr	r3, [pc, #436]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	4a6c      	ldr	r2, [pc, #432]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ac6:	f043 0304 	orr.w	r3, r3, #4
 8005aca:	6213      	str	r3, [r2, #32]
 8005acc:	4b6a      	ldr	r3, [pc, #424]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	4a69      	ldr	r2, [pc, #420]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ad2:	f043 0301 	orr.w	r3, r3, #1
 8005ad6:	6213      	str	r3, [r2, #32]
 8005ad8:	e00b      	b.n	8005af2 <HAL_RCC_OscConfig+0x36e>
 8005ada:	4b67      	ldr	r3, [pc, #412]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	4a66      	ldr	r2, [pc, #408]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ae0:	f023 0301 	bic.w	r3, r3, #1
 8005ae4:	6213      	str	r3, [r2, #32]
 8005ae6:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	4a63      	ldr	r2, [pc, #396]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005aec:	f023 0304 	bic.w	r3, r3, #4
 8005af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d015      	beq.n	8005b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005afa:	f7fd fb67 	bl	80031cc <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b00:	e00a      	b.n	8005b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b02:	f7fd fb63 	bl	80031cc <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e0ab      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b18:	4b57      	ldr	r3, [pc, #348]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0ee      	beq.n	8005b02 <HAL_RCC_OscConfig+0x37e>
 8005b24:	e014      	b.n	8005b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b26:	f7fd fb51 	bl	80031cc <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2e:	f7fd fb4d 	bl	80031cc <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e095      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b44:	4b4c      	ldr	r3, [pc, #304]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1ee      	bne.n	8005b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d105      	bne.n	8005b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b56:	4b48      	ldr	r3, [pc, #288]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	4a47      	ldr	r2, [pc, #284]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8081 	beq.w	8005c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b6c:	4b42      	ldr	r3, [pc, #264]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f003 030c 	and.w	r3, r3, #12
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d061      	beq.n	8005c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d146      	bne.n	8005c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b80:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <HAL_RCC_OscConfig+0x4fc>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fd fb21 	bl	80031cc <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8e:	f7fd fb1d 	bl	80031cc <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e067      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba0:	4b35      	ldr	r3, [pc, #212]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f0      	bne.n	8005b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	d108      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bb6:	4b30      	ldr	r3, [pc, #192]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	492d      	ldr	r1, [pc, #180]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bc8:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a19      	ldr	r1, [r3, #32]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	4927      	ldr	r1, [pc, #156]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x4fc>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fd faf1 	bl	80031cc <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bee:	f7fd faed 	bl	80031cc <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e037      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x46a>
 8005c0c:	e02f      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	; (8005c80 <HAL_RCC_OscConfig+0x4fc>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fd fada 	bl	80031cc <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c1c:	f7fd fad6 	bl	80031cc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e020      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1f0      	bne.n	8005c1c <HAL_RCC_OscConfig+0x498>
 8005c3a:	e018      	b.n	8005c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e013      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_OscConfig+0x4f4>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d001      	beq.n	8005c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	42420060 	.word	0x42420060

08005c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0d0      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c98:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d910      	bls.n	8005cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 0207 	bic.w	r2, r3, #7
 8005cae:	4965      	ldr	r1, [pc, #404]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b63      	ldr	r3, [pc, #396]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0b8      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce0:	4b59      	ldr	r3, [pc, #356]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4a58      	ldr	r2, [pc, #352]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cf8:	4b53      	ldr	r3, [pc, #332]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a52      	ldr	r2, [pc, #328]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b50      	ldr	r3, [pc, #320]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	494d      	ldr	r1, [pc, #308]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d040      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d107      	bne.n	8005d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d115      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e07f      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d107      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d42:	4b41      	ldr	r3, [pc, #260]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e073      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d52:	4b3d      	ldr	r3, [pc, #244]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e06b      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d62:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f023 0203 	bic.w	r2, r3, #3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4936      	ldr	r1, [pc, #216]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d74:	f7fd fa2a 	bl	80031cc <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7c:	f7fd fa26 	bl	80031cc <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e053      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d92:	4b2d      	ldr	r3, [pc, #180]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f003 020c 	and.w	r2, r3, #12
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d1eb      	bne.n	8005d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005da4:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d210      	bcs.n	8005dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db2:	4b24      	ldr	r3, [pc, #144]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 0207 	bic.w	r2, r3, #7
 8005dba:	4922      	ldr	r1, [pc, #136]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d001      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e032      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	4916      	ldr	r1, [pc, #88]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dfe:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	490e      	ldr	r1, [pc, #56]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e12:	f000 f821 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005e16:	4602      	mov	r2, r0
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_RCC_ClockConfig+0x1c4>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	091b      	lsrs	r3, r3, #4
 8005e1e:	f003 030f 	and.w	r3, r3, #15
 8005e22:	490a      	ldr	r1, [pc, #40]	; (8005e4c <HAL_RCC_ClockConfig+0x1c8>)
 8005e24:	5ccb      	ldrb	r3, [r1, r3]
 8005e26:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <HAL_RCC_ClockConfig+0x1cc>)
 8005e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1d0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fc ff6a 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	0801a43c 	.word	0x0801a43c
 8005e50:	2000000c 	.word	0x2000000c
 8005e54:	20000010 	.word	0x20000010

08005e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	b490      	push	{r4, r7}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e5e:	4b2a      	ldr	r3, [pc, #168]	; (8005f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e60:	1d3c      	adds	r4, r7, #4
 8005e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e68:	f240 2301 	movw	r3, #513	; 0x201
 8005e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	2300      	movs	r3, #0
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e82:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d002      	beq.n	8005e98 <HAL_RCC_GetSysClockFreq+0x40>
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d003      	beq.n	8005e9e <HAL_RCC_GetSysClockFreq+0x46>
 8005e96:	e02d      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e98:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9a:	623b      	str	r3, [r7, #32]
      break;
 8005e9c:	e02d      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	0c9b      	lsrs	r3, r3, #18
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005eaa:	4413      	add	r3, r2
 8005eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ebc:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	0c5b      	lsrs	r3, r3, #17
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005eca:	4413      	add	r3, r2
 8005ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4a0e      	ldr	r2, [pc, #56]	; (8005f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ed6:	fb02 f203 	mul.w	r2, r2, r3
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	e004      	b.n	8005eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	4a0b      	ldr	r2, [pc, #44]	; (8005f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	623b      	str	r3, [r7, #32]
      break;
 8005ef2:	e002      	b.n	8005efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ef6:	623b      	str	r3, [r7, #32]
      break;
 8005ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005efa:	6a3b      	ldr	r3, [r7, #32]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3728      	adds	r7, #40	; 0x28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bc90      	pop	{r4, r7}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	08019724 	.word	0x08019724
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	007a1200 	.word	0x007a1200
 8005f14:	003d0900 	.word	0x003d0900

08005f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	2000000c 	.word	0x2000000c

08005f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f30:	f7ff fff2 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	4903      	ldr	r1, [pc, #12]	; (8005f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	0801a44c 	.word	0x0801a44c

08005f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f58:	f7ff ffde 	bl	8005f18 <HAL_RCC_GetHCLKFreq>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	0adb      	lsrs	r3, r3, #11
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	4903      	ldr	r1, [pc, #12]	; (8005f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f6a:	5ccb      	ldrb	r3, [r1, r3]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40021000 	.word	0x40021000
 8005f78:	0801a44c 	.word	0x0801a44c

08005f7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	220f      	movs	r2, #15
 8005f8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f8c:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <HAL_RCC_GetClockConfig+0x58>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f003 0203 	and.w	r2, r3, #3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f98:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <HAL_RCC_GetClockConfig+0x58>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005fa4:	4b0b      	ldr	r3, [pc, #44]	; (8005fd4 <HAL_RCC_GetClockConfig+0x58>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <HAL_RCC_GetClockConfig+0x58>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	08db      	lsrs	r3, r3, #3
 8005fb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0207 	and.w	r2, r3, #7
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40022000 	.word	0x40022000

08005fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <RCC_Delay+0x34>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <RCC_Delay+0x38>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	0a5b      	lsrs	r3, r3, #9
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ff8:	bf00      	nop
  }
  while (Delay --);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f9      	bne.n	8005ff8 <RCC_Delay+0x1c>
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	2000000c 	.word	0x2000000c
 8006014:	10624dd3 	.word	0x10624dd3

08006018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d07d      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006038:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10d      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006044:	4b4c      	ldr	r3, [pc, #304]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4a4b      	ldr	r2, [pc, #300]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604e:	61d3      	str	r3, [r2, #28]
 8006050:	4b49      	ldr	r3, [pc, #292]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006060:	4b46      	ldr	r3, [pc, #280]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d118      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606c:	4b43      	ldr	r3, [pc, #268]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006078:	f7fd f8a8 	bl	80031cc <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fd f8a4 	bl	80031cc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e06d      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006092:	4b3a      	ldr	r3, [pc, #232]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02e      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d027      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060bc:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060cc:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060d2:	4a29      	ldr	r2, [pc, #164]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d014      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e2:	f7fd f873 	bl	80031cc <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fd f86f 	bl	80031cc <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e036      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ee      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4917      	ldr	r1, [pc, #92]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611a:	4313      	orrs	r3, r2
 800611c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800613c:	4b0e      	ldr	r3, [pc, #56]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	490b      	ldr	r1, [pc, #44]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614a:	4313      	orrs	r3, r2
 800614c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	4904      	ldr	r1, [pc, #16]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006168:	4313      	orrs	r3, r2
 800616a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000
 800617c:	40007000 	.word	0x40007000
 8006180:	42420440 	.word	0x42420440

08006184 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b08d      	sub	sp, #52	; 0x34
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800618c:	4b6b      	ldr	r3, [pc, #428]	; (800633c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 800618e:	f107 040c 	add.w	r4, r7, #12
 8006192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006198:	f240 2301 	movw	r3, #513	; 0x201
 800619c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
 80061a2:	2300      	movs	r3, #0
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a6:	2300      	movs	r3, #0
 80061a8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	2300      	movs	r3, #0
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	f200 80b6 	bhi.w	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80061bc:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	080062a7 	.word	0x080062a7
 80061c8:	0800630d 	.word	0x0800630d
 80061cc:	08006329 	.word	0x08006329
 80061d0:	08006297 	.word	0x08006297
 80061d4:	08006329 	.word	0x08006329
 80061d8:	08006329 	.word	0x08006329
 80061dc:	08006329 	.word	0x08006329
 80061e0:	0800629f 	.word	0x0800629f
 80061e4:	08006329 	.word	0x08006329
 80061e8:	08006329 	.word	0x08006329
 80061ec:	08006329 	.word	0x08006329
 80061f0:	08006329 	.word	0x08006329
 80061f4:	08006329 	.word	0x08006329
 80061f8:	08006329 	.word	0x08006329
 80061fc:	08006329 	.word	0x08006329
 8006200:	08006205 	.word	0x08006205
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800620a:	4b4d      	ldr	r3, [pc, #308]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 808a 	beq.w	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	0c9b      	lsrs	r3, r3, #18
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006224:	4413      	add	r3, r2
 8006226:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800622a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d018      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006236:	4b42      	ldr	r3, [pc, #264]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	0c5b      	lsrs	r3, r3, #17
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006244:	4413      	add	r3, r2
 8006246:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006256:	4a3b      	ldr	r2, [pc, #236]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	fbb2 f2f3 	udiv	r2, r2, r3
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006266:	e004      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	4a37      	ldr	r2, [pc, #220]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 800626c:	fb02 f303 	mul.w	r3, r2, r3
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006272:	4b33      	ldr	r3, [pc, #204]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800627a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627e:	d102      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006284:	e052      	b.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4a30      	ldr	r2, [pc, #192]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	085b      	lsrs	r3, r3, #1
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006294:	e04a      	b.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006296:	f7ff fddf 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 800629a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800629c:	e049      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800629e:	f7ff fddb 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 80062a2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80062a4:	e045      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80062a6:	4b26      	ldr	r3, [pc, #152]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b6:	d108      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80062c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c8:	e01f      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d109      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80062d6:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80062e2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e8:	e00f      	b.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f4:	d11c      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8006302:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006308:	e012      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800630a:	e011      	b.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800630c:	f7ff fe22 	bl	8005f54 <HAL_RCC_GetPCLK2Freq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	0b9b      	lsrs	r3, r3, #14
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	3301      	adds	r3, #1
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8006330:	bf00      	nop
    }
  }
  return (frequency);
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006334:	4618      	mov	r0, r3
 8006336:	3734      	adds	r7, #52	; 0x34
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}
 800633c:	08019734 	.word	0x08019734
 8006340:	40021000 	.word	0x40021000
 8006344:	007a1200 	.word	0x007a1200
 8006348:	003d0900 	.word	0x003d0900
 800634c:	aaaaaaab 	.word	0xaaaaaaab

08006350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e041      	b.n	80063e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f839 	bl	80063ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	4619      	mov	r1, r3
 800638e:	4610      	mov	r0, r2
 8006390:	f000 f9c2 	bl	8006718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	d001      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e044      	b.n	80064a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1d      	ldr	r2, [pc, #116]	; (80064ac <HAL_TIM_Base_Start_IT+0xac>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d018      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x6c>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d013      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x6c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800644c:	d00e      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x6c>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d009      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x6c>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d004      	beq.n	800646c <HAL_TIM_Base_Start_IT+0x6c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a15      	ldr	r2, [pc, #84]	; (80064bc <HAL_TIM_Base_Start_IT+0xbc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d111      	bne.n	8006490 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b06      	cmp	r3, #6
 800647c:	d010      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648e:	e007      	b.n	80064a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40013400 	.word	0x40013400
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00

080064c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d122      	bne.n	800651c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d11b      	bne.n	800651c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0202 	mvn.w	r2, #2
 80064ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8ed 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8e0 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8ef 	bl	80066f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d122      	bne.n	8006570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d11b      	bne.n	8006570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0204 	mvn.w	r2, #4
 8006540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8c3 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f8b6 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8c5 	bl	80066f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b08      	cmp	r3, #8
 800657c:	d122      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d11b      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0208 	mvn.w	r2, #8
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2204      	movs	r2, #4
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f899 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f88c 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f89b 	bl	80066f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0210 	mvn.w	r2, #16
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2208      	movs	r2, #8
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f86f 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f862 	bl	80066d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f871 	bl	80066f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0201 	mvn.w	r2, #1
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fc f9c2 	bl	80029c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d10e      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b80      	cmp	r3, #128	; 0x80
 800665e:	d107      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f8d7 	bl	800681e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d10e      	bne.n	800669c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d107      	bne.n	800669c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f835 	bl	8006706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d10e      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d107      	bne.n	80066c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0220 	mvn.w	r2, #32
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8a2 	bl	800680c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a33      	ldr	r2, [pc, #204]	; (80067f8 <TIM_Base_SetConfig+0xe0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d013      	beq.n	8006758 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a32      	ldr	r2, [pc, #200]	; (80067fc <TIM_Base_SetConfig+0xe4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d00b      	beq.n	8006758 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a2f      	ldr	r2, [pc, #188]	; (8006800 <TIM_Base_SetConfig+0xe8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2e      	ldr	r2, [pc, #184]	; (8006804 <TIM_Base_SetConfig+0xec>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2d      	ldr	r2, [pc, #180]	; (8006808 <TIM_Base_SetConfig+0xf0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d108      	bne.n	800676a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <TIM_Base_SetConfig+0xe0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <TIM_Base_SetConfig+0x82>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a21      	ldr	r2, [pc, #132]	; (80067fc <TIM_Base_SetConfig+0xe4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_Base_SetConfig+0x82>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0x82>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <TIM_Base_SetConfig+0xe8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0x82>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <TIM_Base_SetConfig+0xec>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0x82>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1c      	ldr	r2, [pc, #112]	; (8006808 <TIM_Base_SetConfig+0xf0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <TIM_Base_SetConfig+0xe0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0xc8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a08      	ldr	r2, [pc, #32]	; (80067fc <TIM_Base_SetConfig+0xe4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d103      	bne.n	80067e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	40012c00 	.word	0x40012c00
 80067fc:	40013400 	.word	0x40013400
 8006800:	40000400 	.word	0x40000400
 8006804:	40000800 	.word	0x40000800
 8006808:	40000c00 	.word	0x40000c00

0800680c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e03f      	b.n	80068c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fc fbe6 	bl	8003028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2224      	movs	r2, #36	; 0x24
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68da      	ldr	r2, [r3, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fe91 	bl	800759c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b08a      	sub	sp, #40	; 0x28
 80068ce:	af02      	add	r7, sp, #8
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d17c      	bne.n	80069e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <HAL_UART_Transmit+0x2c>
 80068f0:	88fb      	ldrh	r3, [r7, #6]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e075      	b.n	80069e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006900:	2b01      	cmp	r3, #1
 8006902:	d101      	bne.n	8006908 <HAL_UART_Transmit+0x3e>
 8006904:	2302      	movs	r3, #2
 8006906:	e06e      	b.n	80069e6 <HAL_UART_Transmit+0x11c>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2221      	movs	r2, #33	; 0x21
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800691e:	f7fc fc55 	bl	80031cc <HAL_GetTick>
 8006922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	88fa      	ldrh	r2, [r7, #6]
 800692e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006938:	d108      	bne.n	800694c <HAL_UART_Transmit+0x82>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	61bb      	str	r3, [r7, #24]
 800694a:	e003      	b.n	8006954 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006950:	2300      	movs	r3, #0
 8006952:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800695c:	e02a      	b.n	80069b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	2180      	movs	r1, #128	; 0x80
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 fc02 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e036      	b.n	80069e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10b      	bne.n	8006996 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800698c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	3302      	adds	r3, #2
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e007      	b.n	80069a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1cf      	bne.n	800695e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2140      	movs	r1, #64	; 0x40
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fbd2 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e006      	b.n	80069e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d153      	bne.n	8006ab2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <HAL_UART_Transmit_DMA+0x26>
 8006a10:	88fb      	ldrh	r3, [r7, #6]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e04c      	b.n	8006ab4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Transmit_DMA+0x38>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e045      	b.n	8006ab4 <HAL_UART_Transmit_DMA+0xc4>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	88fa      	ldrh	r2, [r7, #6]
 8006a40:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2221      	movs	r2, #33	; 0x21
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a54:	4a19      	ldr	r2, [pc, #100]	; (8006abc <HAL_UART_Transmit_DMA+0xcc>)
 8006a56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5c:	4a18      	ldr	r2, [pc, #96]	; (8006ac0 <HAL_UART_Transmit_DMA+0xd0>)
 8006a5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a64:	4a17      	ldr	r2, [pc, #92]	; (8006ac4 <HAL_UART_Transmit_DMA+0xd4>)
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8006a70:	f107 0308 	add.w	r3, r7, #8
 8006a74:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6819      	ldr	r1, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3304      	adds	r3, #4
 8006a84:	461a      	mov	r2, r3
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	f7fe f8ac 	bl	8004be4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a94:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aac:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	e000      	b.n	8006ab4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006ab2:	2302      	movs	r3, #2
  }
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	08006fa5 	.word	0x08006fa5
 8006ac0:	08006ff7 	.word	0x08006ff7
 8006ac4:	080070df 	.word	0x080070df

08006ac8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d11d      	bne.n	8006b1e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_UART_Receive_DMA+0x26>
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e016      	b.n	8006b20 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_UART_Receive_DMA+0x38>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e00f      	b.n	8006b20 <HAL_UART_Receive_DMA+0x58>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	461a      	mov	r2, r3
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fb77 	bl	8007208 <UART_Start_Receive_DMA>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	e000      	b.n	8006b20 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
  }
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bf14      	ite	ne
 8006b42:	2301      	movne	r3, #1
 8006b44:	2300      	moveq	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b21      	cmp	r3, #33	; 0x21
 8006b54:	d116      	bne.n	8006b84 <HAL_UART_DMAStop+0x5c>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d013      	beq.n	8006b84 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695a      	ldr	r2, [r3, #20]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d004      	beq.n	8006b7e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe f892 	bl	8004ca2 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fba6 	bl	80072d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b22      	cmp	r3, #34	; 0x22
 8006ba4:	d116      	bne.n	8006bd4 <HAL_UART_DMAStop+0xac>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d013      	beq.n	8006bd4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bba:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d004      	beq.n	8006bce <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fe f86a 	bl	8004ca2 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fb93 	bl	80072fa <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10d      	bne.n	8006c32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_UART_IRQHandler+0x52>
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fc0c 	bl	8007448 <UART_Receive_IT>
      return;
 8006c30:	e17b      	b.n	8006f2a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80b1 	beq.w	8006d9c <HAL_UART_IRQHandler+0x1bc>
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <HAL_UART_IRQHandler+0x70>
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80a6 	beq.w	8006d9c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <HAL_UART_IRQHandler+0x90>
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	f043 0201 	orr.w	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <HAL_UART_IRQHandler+0xb0>
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	f043 0202 	orr.w	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_UART_IRQHandler+0xd0>
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d005      	beq.n	8006cb0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	f043 0204 	orr.w	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00f      	beq.n	8006cda <HAL_UART_IRQHandler+0xfa>
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <HAL_UART_IRQHandler+0xee>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	f043 0208 	orr.w	r2, r3, #8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 811e 	beq.w	8006f20 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_UART_IRQHandler+0x11e>
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fba5 	bl	8007448 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <HAL_UART_IRQHandler+0x146>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d031      	beq.n	8006d8a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fae7 	bl	80072fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d023      	beq.n	8006d82 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695a      	ldr	r2, [r3, #20]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d013      	beq.n	8006d7a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	4a76      	ldr	r2, [pc, #472]	; (8006f30 <HAL_UART_IRQHandler+0x350>)
 8006d58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fd ffda 	bl	8004d18 <HAL_DMA_Abort_IT>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d016      	beq.n	8006d98 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d74:	4610      	mov	r0, r2
 8006d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d78:	e00e      	b.n	8006d98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8fe 	bl	8006f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	e00a      	b.n	8006d98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8fa 	bl	8006f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	e006      	b.n	8006d98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8f6 	bl	8006f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d96:	e0c3      	b.n	8006f20 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d98:	bf00      	nop
    return;
 8006d9a:	e0c1      	b.n	8006f20 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	f040 80a1 	bne.w	8006ee8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 809b 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8095 	beq.w	8006ee8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d04e      	beq.n	8006e80 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006dec:	8a3b      	ldrh	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8098 	beq.w	8006f24 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006df8:	8a3a      	ldrh	r2, [r7, #16]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	f080 8092 	bcs.w	8006f24 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8a3a      	ldrh	r2, [r7, #16]
 8006e04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d02b      	beq.n	8006e68 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e1e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0201 	bic.w	r2, r2, #1
 8006e2e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e3e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0210 	bic.w	r2, r2, #16
 8006e5c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fd ff1d 	bl	8004ca2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f888 	bl	8006f8e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e7e:	e051      	b.n	8006f24 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d047      	beq.n	8006f28 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006e98:	8a7b      	ldrh	r3, [r7, #18]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d044      	beq.n	8006f28 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68da      	ldr	r2, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0210 	bic.w	r2, r2, #16
 8006eda:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006edc:	8a7b      	ldrh	r3, [r7, #18]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f854 	bl	8006f8e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ee6:	e01f      	b.n	8006f28 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d008      	beq.n	8006f04 <HAL_UART_IRQHandler+0x324>
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa3c 	bl	800737a <UART_Transmit_IT>
    return;
 8006f02:	e012      	b.n	8006f2a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00d      	beq.n	8006f2a <HAL_UART_IRQHandler+0x34a>
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa7d 	bl	8007418 <UART_EndTransmit_IT>
    return;
 8006f1e:	e004      	b.n	8006f2a <HAL_UART_IRQHandler+0x34a>
    return;
 8006f20:	bf00      	nop
 8006f22:	e002      	b.n	8006f2a <HAL_UART_IRQHandler+0x34a>
      return;
 8006f24:	bf00      	nop
 8006f26:	e000      	b.n	8006f2a <HAL_UART_IRQHandler+0x34a>
      return;
 8006f28:	bf00      	nop
  }
}
 8006f2a:	3728      	adds	r7, #40	; 0x28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	08007353 	.word	0x08007353

08006f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bc80      	pop	{r7}
 8006f44:	4770      	bx	lr

08006f46 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr

08006f58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr

08006f6a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr

08006f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr

08006f8e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f9a:	bf00      	nop
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bc80      	pop	{r7}
 8006fa2:	4770      	bx	lr

08006fa4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d113      	bne.n	8006fe8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695a      	ldr	r2, [r3, #20]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fe4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006fe6:	e002      	b.n	8006fee <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff ffa3 	bl	8006f34 <HAL_UART_TxCpltCallback>
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff ff9e 	bl	8006f46 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800700a:	bf00      	nop
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d12a      	bne.n	8007084 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007042:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695a      	ldr	r2, [r3, #20]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695a      	ldr	r2, [r3, #20]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007062:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	2b01      	cmp	r3, #1
 8007072:	d107      	bne.n	8007084 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0210 	bic.w	r2, r2, #16
 8007082:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	2b01      	cmp	r3, #1
 800708a:	d106      	bne.n	800709a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007090:	4619      	mov	r1, r3
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff ff7b 	bl	8006f8e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007098:	e002      	b.n	80070a0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff ff5c 	bl	8006f58 <HAL_UART_RxCpltCallback>
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d108      	bne.n	80070d0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070c2:	085b      	lsrs	r3, r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff ff60 	bl	8006f8e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ce:	e002      	b.n	80070d6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff ff4a 	bl	8006f6a <HAL_UART_RxHalfCpltCallback>
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	bf14      	ite	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	2300      	moveq	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b21      	cmp	r3, #33	; 0x21
 8007110:	d108      	bne.n	8007124 <UART_DMAError+0x46>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800711e:	68b8      	ldr	r0, [r7, #8]
 8007120:	f000 f8d6 	bl	80072d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	bf14      	ite	ne
 8007132:	2301      	movne	r3, #1
 8007134:	2300      	moveq	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b22      	cmp	r3, #34	; 0x22
 8007144:	d108      	bne.n	8007158 <UART_DMAError+0x7a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007152:	68b8      	ldr	r0, [r7, #8]
 8007154:	f000 f8d1 	bl	80072fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	f043 0210 	orr.w	r2, r3, #16
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f7ff ff09 	bl	8006f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007182:	e02c      	b.n	80071de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718a:	d028      	beq.n	80071de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007192:	f7fc f81b 	bl	80031cc <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d21d      	bcs.n	80071de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e00f      	b.n	80071fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4013      	ands	r3, r2
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	461a      	mov	r2, r3
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d0c3      	beq.n	8007184 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2222      	movs	r2, #34	; 0x22
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	4a23      	ldr	r2, [pc, #140]	; (80072c4 <UART_Start_Receive_DMA+0xbc>)
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	4a22      	ldr	r2, [pc, #136]	; (80072c8 <UART_Start_Receive_DMA+0xc0>)
 800723e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	4a21      	ldr	r2, [pc, #132]	; (80072cc <UART_Start_Receive_DMA+0xc4>)
 8007246:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	2200      	movs	r2, #0
 800724e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007250:	f107 0308 	add.w	r3, r7, #8
 8007254:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	f7fd fcbc 	bl	8004be4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	613b      	str	r3, [r7, #16]
 8007280:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007298:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695a      	ldr	r2, [r3, #20]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072b8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	08007013 	.word	0x08007013
 80072c8:	080070a9 	.word	0x080070a9
 80072cc:	080070df 	.word	0x080070df

080072d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80072e6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr

080072fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007310:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0201 	bic.w	r2, r2, #1
 8007320:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	2b01      	cmp	r3, #1
 8007328:	d107      	bne.n	800733a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0210 	bic.w	r2, r2, #16
 8007338:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2220      	movs	r2, #32
 800733e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fe05 	bl	8006f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b21      	cmp	r3, #33	; 0x21
 800738c:	d13e      	bne.n	800740c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	d114      	bne.n	80073c2 <UART_Transmit_IT+0x48>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d110      	bne.n	80073c2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	1c9a      	adds	r2, r3, #2
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	621a      	str	r2, [r3, #32]
 80073c0:	e008      	b.n	80073d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	1c59      	adds	r1, r3, #1
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6211      	str	r1, [r2, #32]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4619      	mov	r1, r3
 80073e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10f      	bne.n	8007408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	e000      	b.n	800740e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fd7b 	bl	8006f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b22      	cmp	r3, #34	; 0x22
 800745a:	f040 8099 	bne.w	8007590 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007466:	d117      	bne.n	8007498 <UART_Receive_IT+0x50>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d113      	bne.n	8007498 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007486:	b29a      	uxth	r2, r3
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	1c9a      	adds	r2, r3, #2
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	629a      	str	r2, [r3, #40]	; 0x28
 8007496:	e026      	b.n	80074e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074aa:	d007      	beq.n	80074bc <UART_Receive_IT+0x74>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10a      	bne.n	80074ca <UART_Receive_IT+0x82>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e008      	b.n	80074dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4619      	mov	r1, r3
 80074f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d148      	bne.n	800758c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0220 	bic.w	r2, r2, #32
 8007508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 0201 	bic.w	r2, r2, #1
 8007528:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	2b01      	cmp	r3, #1
 8007538:	d123      	bne.n	8007582 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f022 0210 	bic.w	r2, r2, #16
 800754e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0310 	and.w	r3, r3, #16
 800755a:	2b10      	cmp	r3, #16
 800755c:	d10a      	bne.n	8007574 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fd07 	bl	8006f8e <HAL_UARTEx_RxEventCallback>
 8007580:	e002      	b.n	8007588 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff fce8 	bl	8006f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	e002      	b.n	8007592 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	e000      	b.n	8007592 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
	...

0800759c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689a      	ldr	r2, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075d6:	f023 030c 	bic.w	r3, r3, #12
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	430b      	orrs	r3, r1
 80075e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2c      	ldr	r2, [pc, #176]	; (80076b0 <UART_SetConfig+0x114>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d103      	bne.n	800760c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007604:	f7fe fca6 	bl	8005f54 <HAL_RCC_GetPCLK2Freq>
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	e002      	b.n	8007612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800760c:	f7fe fc8e 	bl	8005f2c <HAL_RCC_GetPCLK1Freq>
 8007610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009a      	lsls	r2, r3, #2
 800761c:	441a      	add	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	fbb2 f3f3 	udiv	r3, r2, r3
 8007628:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <UART_SetConfig+0x118>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	095b      	lsrs	r3, r3, #5
 8007630:	0119      	lsls	r1, r3, #4
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4613      	mov	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	009a      	lsls	r2, r3, #2
 800763c:	441a      	add	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	fbb2 f2f3 	udiv	r2, r2, r3
 8007648:	4b1a      	ldr	r3, [pc, #104]	; (80076b4 <UART_SetConfig+0x118>)
 800764a:	fba3 0302 	umull	r0, r3, r3, r2
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	2064      	movs	r0, #100	; 0x64
 8007652:	fb00 f303 	mul.w	r3, r0, r3
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	3332      	adds	r3, #50	; 0x32
 800765c:	4a15      	ldr	r2, [pc, #84]	; (80076b4 <UART_SetConfig+0x118>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007668:	4419      	add	r1, r3
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009a      	lsls	r2, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007680:	4b0c      	ldr	r3, [pc, #48]	; (80076b4 <UART_SetConfig+0x118>)
 8007682:	fba3 0302 	umull	r0, r3, r3, r2
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	2064      	movs	r0, #100	; 0x64
 800768a:	fb00 f303 	mul.w	r3, r0, r3
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	3332      	adds	r3, #50	; 0x32
 8007694:	4a07      	ldr	r2, [pc, #28]	; (80076b4 <UART_SetConfig+0x118>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	f003 020f 	and.w	r2, r3, #15
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	440a      	add	r2, r1
 80076a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40013800 	.word	0x40013800
 80076b4:	51eb851f 	.word	0x51eb851f

080076b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80076b8:	480c      	ldr	r0, [pc, #48]	; (80076ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80076ba:	490d      	ldr	r1, [pc, #52]	; (80076f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80076bc:	4a0d      	ldr	r2, [pc, #52]	; (80076f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80076be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076c0:	e002      	b.n	80076c8 <LoopCopyDataInit>

080076c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076c6:	3304      	adds	r3, #4

080076c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076cc:	d3f9      	bcc.n	80076c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076ce:	4a0a      	ldr	r2, [pc, #40]	; (80076f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80076d0:	4c0a      	ldr	r4, [pc, #40]	; (80076fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80076d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076d4:	e001      	b.n	80076da <LoopFillZerobss>

080076d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076d8:	3204      	adds	r2, #4

080076da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076dc:	d3fb      	bcc.n	80076d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80076de:	f7fb fc73 	bl	8002fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076e2:	f010 fb4b 	bl	8017d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80076e6:	f7fb f85f 	bl	80027a8 <main>
  bx lr
 80076ea:	4770      	bx	lr
  ldr r0, =_sdata
 80076ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076f0:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80076f4:	0801b1d0 	.word	0x0801b1d0
  ldr r2, =_sbss
 80076f8:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80076fc:	2000d6a8 	.word	0x2000d6a8

08007700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007700:	e7fe      	b.n	8007700 <ADC1_2_IRQHandler>
	...

08007704 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800770a:	f3ef 8305 	mrs	r3, IPSR
 800770e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007710:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10f      	bne.n	8007736 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007716:	f3ef 8310 	mrs	r3, PRIMASK
 800771a:	607b      	str	r3, [r7, #4]
  return(result);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <osKernelInitialize+0x32>
 8007722:	4b10      	ldr	r3, [pc, #64]	; (8007764 <osKernelInitialize+0x60>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d109      	bne.n	800773e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800772a:	f3ef 8311 	mrs	r3, BASEPRI
 800772e:	603b      	str	r3, [r7, #0]
  return(result);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007736:	f06f 0305 	mvn.w	r3, #5
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e00c      	b.n	8007758 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <osKernelInitialize+0x60>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <osKernelInitialize+0x60>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	e002      	b.n	8007758 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007756:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007758:	68fb      	ldr	r3, [r7, #12]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr
 8007764:	20003248 	.word	0x20003248

08007768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776e:	f3ef 8305 	mrs	r3, IPSR
 8007772:	60bb      	str	r3, [r7, #8]
  return(result);
 8007774:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10f      	bne.n	800779a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800777a:	f3ef 8310 	mrs	r3, PRIMASK
 800777e:	607b      	str	r3, [r7, #4]
  return(result);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d109      	bne.n	800779a <osKernelStart+0x32>
 8007786:	4b11      	ldr	r3, [pc, #68]	; (80077cc <osKernelStart+0x64>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d109      	bne.n	80077a2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800778e:	f3ef 8311 	mrs	r3, BASEPRI
 8007792:	603b      	str	r3, [r7, #0]
  return(result);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800779a:	f06f 0305 	mvn.w	r3, #5
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	e00e      	b.n	80077c0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <osKernelStart+0x64>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d107      	bne.n	80077ba <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80077aa:	4b08      	ldr	r3, [pc, #32]	; (80077cc <osKernelStart+0x64>)
 80077ac:	2202      	movs	r2, #2
 80077ae:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80077b0:	f001 f99e 	bl	8008af0 <vTaskStartScheduler>
      stat = osOK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	e002      	b.n	80077c0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20003248 	.word	0x20003248

080077d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b092      	sub	sp, #72	; 0x48
 80077d4:	af04      	add	r7, sp, #16
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e0:	f3ef 8305 	mrs	r3, IPSR
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f040 8094 	bne.w	8007916 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077ee:	f3ef 8310 	mrs	r3, PRIMASK
 80077f2:	623b      	str	r3, [r7, #32]
  return(result);
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f040 808d 	bne.w	8007916 <osThreadNew+0x146>
 80077fc:	4b48      	ldr	r3, [pc, #288]	; (8007920 <osThreadNew+0x150>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d106      	bne.n	8007812 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007804:	f3ef 8311 	mrs	r3, BASEPRI
 8007808:	61fb      	str	r3, [r7, #28]
  return(result);
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8082 	bne.w	8007916 <osThreadNew+0x146>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d07e      	beq.n	8007916 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800781c:	2318      	movs	r3, #24
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007820:	2300      	movs	r3, #0
 8007822:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007824:	f107 031b 	add.w	r3, r7, #27
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800782a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d045      	beq.n	80078c2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <osThreadNew+0x74>
        name = attr->name;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <osThreadNew+0x9a>
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	2b38      	cmp	r3, #56	; 0x38
 800785c:	d805      	bhi.n	800786a <osThreadNew+0x9a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <osThreadNew+0x9e>
        return (NULL);
 800786a:	2300      	movs	r3, #0
 800786c:	e054      	b.n	8007918 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d003      	beq.n	800787e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	089b      	lsrs	r3, r3, #2
 800787c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <osThreadNew+0xd4>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b5b      	cmp	r3, #91	; 0x5b
 800788c:	d90a      	bls.n	80078a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007892:	2b00      	cmp	r3, #0
 8007894:	d006      	beq.n	80078a4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <osThreadNew+0xd4>
        mem = 1;
 800789e:	2301      	movs	r3, #1
 80078a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a2:	e010      	b.n	80078c6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10c      	bne.n	80078c6 <osThreadNew+0xf6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <osThreadNew+0xf6>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <osThreadNew+0xf6>
          mem = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c0:	e001      	b.n	80078c6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d110      	bne.n	80078ee <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078d4:	9202      	str	r2, [sp, #8]
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 ff38 	bl	8008758 <xTaskCreateStatic>
 80078e8:	4603      	mov	r3, r0
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	e013      	b.n	8007916 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80078ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d110      	bne.n	8007916 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f107 0314 	add.w	r3, r7, #20
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 ff82 	bl	8008810 <xTaskCreate>
 800790c:	4603      	mov	r3, r0
 800790e:	2b01      	cmp	r3, #1
 8007910:	d001      	beq.n	8007916 <osThreadNew+0x146>
          hTask = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007916:	697b      	ldr	r3, [r7, #20]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3738      	adds	r7, #56	; 0x38
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20003248 	.word	0x20003248

08007924 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800792c:	f3ef 8305 	mrs	r3, IPSR
 8007930:	613b      	str	r3, [r7, #16]
  return(result);
 8007932:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10f      	bne.n	8007958 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007938:	f3ef 8310 	mrs	r3, PRIMASK
 800793c:	60fb      	str	r3, [r7, #12]
  return(result);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <osDelay+0x34>
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <osDelay+0x58>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d109      	bne.n	8007960 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800794c:	f3ef 8311 	mrs	r3, BASEPRI
 8007950:	60bb      	str	r3, [r7, #8]
  return(result);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <osDelay+0x3c>
    stat = osErrorISR;
 8007958:	f06f 0305 	mvn.w	r3, #5
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e007      	b.n	8007970 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007960:	2300      	movs	r3, #0
 8007962:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <osDelay+0x4c>
      vTaskDelay(ticks);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 f88c 	bl	8008a88 <vTaskDelay>
    }
  }

  return (stat);
 8007970:	697b      	ldr	r3, [r7, #20]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20003248 	.word	0x20003248

08007980 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800798c:	f3ef 8305 	mrs	r3, IPSR
 8007990:	613b      	str	r3, [r7, #16]
  return(result);
 8007992:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8085 	bne.w	8007aa4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799a:	f3ef 8310 	mrs	r3, PRIMASK
 800799e:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d17e      	bne.n	8007aa4 <osMutexNew+0x124>
 80079a6:	4b42      	ldr	r3, [pc, #264]	; (8007ab0 <osMutexNew+0x130>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d105      	bne.n	80079ba <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079ae:	f3ef 8311 	mrs	r3, BASEPRI
 80079b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d174      	bne.n	8007aa4 <osMutexNew+0x124>
    if (attr != NULL) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <osMutexNew+0x48>
      type = attr->attr_bits;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	623b      	str	r3, [r7, #32]
 80079c6:	e001      	b.n	80079cc <osMutexNew+0x4c>
    } else {
      type = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <osMutexNew+0x5c>
      rmtx = 1U;
 80079d6:	2301      	movs	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	e001      	b.n	80079e0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d15c      	bne.n	8007aa4 <osMutexNew+0x124>
      mem = -1;
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ee:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d015      	beq.n	8007a22 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d006      	beq.n	8007a0c <osMutexNew+0x8c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	2b4f      	cmp	r3, #79	; 0x4f
 8007a04:	d902      	bls.n	8007a0c <osMutexNew+0x8c>
          mem = 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	61bb      	str	r3, [r7, #24]
 8007a0a:	e00c      	b.n	8007a26 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d108      	bne.n	8007a26 <osMutexNew+0xa6>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <osMutexNew+0xa6>
            mem = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	e001      	b.n	8007a26 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d112      	bne.n	8007a52 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	4619      	mov	r1, r3
 8007a38:	2004      	movs	r0, #4
 8007a3a:	f000 fa8f 	bl	8007f5c <xQueueCreateMutexStatic>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a40:	e016      	b.n	8007a70 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4619      	mov	r1, r3
 8007a48:	2001      	movs	r0, #1
 8007a4a:	f000 fa87 	bl	8007f5c <xQueueCreateMutexStatic>
 8007a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a50:	e00e      	b.n	8007a70 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10b      	bne.n	8007a70 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007a5e:	2004      	movs	r0, #4
 8007a60:	f000 fa64 	bl	8007f2c <xQueueCreateMutex>
 8007a64:	6278      	str	r0, [r7, #36]	; 0x24
 8007a66:	e003      	b.n	8007a70 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007a68:	2001      	movs	r0, #1
 8007a6a:	f000 fa5f 	bl	8007f2c <xQueueCreateMutex>
 8007a6e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00c      	beq.n	8007a90 <osMutexNew+0x110>
        if (attr != NULL) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <osMutexNew+0x104>
          name = attr->name;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	617b      	str	r3, [r7, #20]
 8007a82:	e001      	b.n	8007a88 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007a88:	6979      	ldr	r1, [r7, #20]
 8007a8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a8c:	f000 fe08 	bl	80086a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <osMutexNew+0x124>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3728      	adds	r7, #40	; 0x28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20003248 	.word	0x20003248

08007ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a06      	ldr	r2, [pc, #24]	; (8007adc <vApplicationGetIdleTaskMemory+0x28>)
 8007ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4a05      	ldr	r2, [pc, #20]	; (8007ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2280      	movs	r2, #128	; 0x80
 8007ad0:	601a      	str	r2, [r3, #0]
}
 8007ad2:	bf00      	nop
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bc80      	pop	{r7}
 8007ada:	4770      	bx	lr
 8007adc:	2000324c 	.word	0x2000324c
 8007ae0:	200032a8 	.word	0x200032a8

08007ae4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <vApplicationGetTimerTaskMemory+0x2c>)
 8007af4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	4a06      	ldr	r2, [pc, #24]	; (8007b14 <vApplicationGetTimerTaskMemory+0x30>)
 8007afa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	200034a8 	.word	0x200034a8
 8007b14:	20003504 	.word	0x20003504

08007b18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f103 0208 	add.w	r2, r3, #8
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f103 0208 	add.w	r2, r3, #8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0208 	add.w	r2, r3, #8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]
}
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bca:	d103      	bne.n	8007bd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e00c      	b.n	8007bee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e002      	b.n	8007be2 <vListInsert+0x2e>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d2f6      	bcs.n	8007bdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6892      	ldr	r2, [r2, #8]
 8007c3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	6852      	ldr	r2, [r2, #4]
 8007c44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d103      	bne.n	8007c58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	689a      	ldr	r2, [r3, #8]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	1e5a      	subs	r2, r3, #1
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
	...

08007c78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xQueueGenericReset+0x2a>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60bb      	str	r3, [r7, #8]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ca2:	f002 f87b 	bl	8009d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cb2:	fb01 f303 	mul.w	r3, r1, r3
 8007cb6:	441a      	add	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	68f9      	ldr	r1, [r7, #12]
 8007cd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cd8:	fb01 f303 	mul.w	r3, r1, r3
 8007cdc:	441a      	add	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	22ff      	movs	r2, #255	; 0xff
 8007ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	22ff      	movs	r2, #255	; 0xff
 8007cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d114      	bne.n	8007d22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01a      	beq.n	8007d36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3310      	adds	r3, #16
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f97d 	bl	8009004 <xTaskRemoveFromEventList>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d012      	beq.n	8007d36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <xQueueGenericReset+0xcc>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	e009      	b.n	8007d36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3310      	adds	r3, #16
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff fef6 	bl	8007b18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3324      	adds	r3, #36	; 0x24
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fef1 	bl	8007b18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d36:	f002 f861 	bl	8009dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d3a:	2301      	movs	r3, #1
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	; 0x38
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <xQueueGenericCreateStatic+0x52>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <xQueueGenericCreateStatic+0x56>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericCreateStatic+0x58>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	623b      	str	r3, [r7, #32]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <xQueueGenericCreateStatic+0x7e>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <xQueueGenericCreateStatic+0x82>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <xQueueGenericCreateStatic+0x84>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10a      	bne.n	8007de6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	61fb      	str	r3, [r7, #28]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007de6:	2350      	movs	r3, #80	; 0x50
 8007de8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	2b50      	cmp	r3, #80	; 0x50
 8007dee:	d00a      	beq.n	8007e06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	61bb      	str	r3, [r7, #24]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00d      	beq.n	8007e2c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e18:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	4613      	mov	r3, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f843 	bl	8007eb2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3730      	adds	r7, #48	; 0x30
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b08a      	sub	sp, #40	; 0x28
 8007e3a:	af02      	add	r7, sp, #8
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	4613      	mov	r3, r2
 8007e42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10a      	bne.n	8007e60 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	613b      	str	r3, [r7, #16]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	e004      	b.n	8007e76 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	fb02 f303 	mul.w	r3, r2, r3
 8007e74:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3350      	adds	r3, #80	; 0x50
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 f88e 	bl	8009f9c <pvPortMalloc>
 8007e80:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00f      	beq.n	8007ea8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	3350      	adds	r3, #80	; 0x50
 8007e8c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e96:	79fa      	ldrb	r2, [r7, #7]
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f805 	bl	8007eb2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
	}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3720      	adds	r7, #32
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	601a      	str	r2, [r3, #0]
 8007ecc:	e002      	b.n	8007ed4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	69b8      	ldr	r0, [r7, #24]
 8007ee4:	f7ff fec8 	bl	8007c78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00e      	beq.n	8007f24 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f838 	bl	8007f94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	4603      	mov	r3, r0
 8007f34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f36:	2301      	movs	r3, #1
 8007f38:	617b      	str	r3, [r7, #20]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6939      	ldr	r1, [r7, #16]
 8007f44:	6978      	ldr	r0, [r7, #20]
 8007f46:	f7ff ff76 	bl	8007e36 <xQueueGenericCreate>
 8007f4a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f7ff ffd3 	bl	8007ef8 <prvInitialiseMutex>

		return pxNewQueue;
 8007f52:	68fb      	ldr	r3, [r7, #12]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	4603      	mov	r3, r0
 8007f64:	6039      	str	r1, [r7, #0]
 8007f66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2200      	movs	r2, #0
 8007f78:	6939      	ldr	r1, [r7, #16]
 8007f7a:	6978      	ldr	r0, [r7, #20]
 8007f7c:	f7ff fee4 	bl	8007d48 <xQueueGenericCreateStatic>
 8007f80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff ffb8 	bl	8007ef8 <prvInitialiseMutex>

		return pxNewQueue;
 8007f88:	68fb      	ldr	r3, [r7, #12]
	}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3718      	adds	r7, #24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08e      	sub	sp, #56	; 0x38
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <xQueueGenericSend+0x32>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <xQueueGenericSend+0x40>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <xQueueGenericSend+0x44>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <xQueueGenericSend+0x46>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <xQueueGenericSend+0x60>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d103      	bne.n	8008002 <xQueueGenericSend+0x6e>
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d101      	bne.n	8008006 <xQueueGenericSend+0x72>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <xQueueGenericSend+0x74>
 8008006:	2300      	movs	r3, #0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <xQueueGenericSend+0x8e>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	623b      	str	r3, [r7, #32]
}
 800801e:	bf00      	nop
 8008020:	e7fe      	b.n	8008020 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008022:	f001 f9d7 	bl	80093d4 <xTaskGetSchedulerState>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <xQueueGenericSend+0x9e>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <xQueueGenericSend+0xa2>
 8008032:	2301      	movs	r3, #1
 8008034:	e000      	b.n	8008038 <xQueueGenericSend+0xa4>
 8008036:	2300      	movs	r3, #0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericSend+0xbe>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	61fb      	str	r3, [r7, #28]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008052:	f001 fea3 	bl	8009d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805e:	429a      	cmp	r2, r3
 8008060:	d302      	bcc.n	8008068 <xQueueGenericSend+0xd4>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b02      	cmp	r3, #2
 8008066:	d129      	bne.n	80080bc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	68b9      	ldr	r1, [r7, #8]
 800806c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800806e:	f000 fa07 	bl	8008480 <prvCopyDataToQueue>
 8008072:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d010      	beq.n	800809e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	3324      	adds	r3, #36	; 0x24
 8008080:	4618      	mov	r0, r3
 8008082:	f000 ffbf 	bl	8009004 <xTaskRemoveFromEventList>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d013      	beq.n	80080b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800808c:	4b3f      	ldr	r3, [pc, #252]	; (800818c <xQueueGenericSend+0x1f8>)
 800808e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	e00a      	b.n	80080b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80080a4:	4b39      	ldr	r3, [pc, #228]	; (800818c <xQueueGenericSend+0x1f8>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080b4:	f001 fea2 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e063      	b.n	8008184 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d103      	bne.n	80080ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080c2:	f001 fe9b 	bl	8009dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	e05c      	b.n	8008184 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d106      	bne.n	80080de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080d0:	f107 0314 	add.w	r3, r7, #20
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 f81f 	bl	8009118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080da:	2301      	movs	r3, #1
 80080dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080de:	f001 fe8d 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080e2:	f000 fd6b 	bl	8008bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080e6:	f001 fe59 	bl	8009d9c <vPortEnterCritical>
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080f0:	b25b      	sxtb	r3, r3
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080f6:	d103      	bne.n	8008100 <xQueueGenericSend+0x16c>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008106:	b25b      	sxtb	r3, r3
 8008108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800810c:	d103      	bne.n	8008116 <xQueueGenericSend+0x182>
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008116:	f001 fe71 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800811a:	1d3a      	adds	r2, r7, #4
 800811c:	f107 0314 	add.w	r3, r7, #20
 8008120:	4611      	mov	r1, r2
 8008122:	4618      	mov	r0, r3
 8008124:	f001 f80e 	bl	8009144 <xTaskCheckForTimeOut>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d124      	bne.n	8008178 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800812e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008130:	f000 fa9e 	bl	8008670 <prvIsQueueFull>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	3310      	adds	r3, #16
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4611      	mov	r1, r2
 8008142:	4618      	mov	r0, r3
 8008144:	f000 ff0e 	bl	8008f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800814a:	f000 fa29 	bl	80085a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800814e:	f000 fd43 	bl	8008bd8 <xTaskResumeAll>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	f47f af7c 	bne.w	8008052 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800815a:	4b0c      	ldr	r3, [pc, #48]	; (800818c <xQueueGenericSend+0x1f8>)
 800815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	e772      	b.n	8008052 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800816c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800816e:	f000 fa17 	bl	80085a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008172:	f000 fd31 	bl	8008bd8 <xTaskResumeAll>
 8008176:	e76c      	b.n	8008052 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800817a:	f000 fa11 	bl	80085a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800817e:	f000 fd2b 	bl	8008bd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008182:	2300      	movs	r3, #0
		}
	}
}
 8008184:	4618      	mov	r0, r3
 8008186:	3738      	adds	r7, #56	; 0x38
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08e      	sub	sp, #56	; 0x38
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <xQueueGenericSendFromISR+0x3c>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <xQueueGenericSendFromISR+0x40>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <xQueueGenericSendFromISR+0x42>
 80081d0:	2300      	movs	r3, #0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	623b      	str	r3, [r7, #32]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d103      	bne.n	80081fa <xQueueGenericSendFromISR+0x6a>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d101      	bne.n	80081fe <xQueueGenericSendFromISR+0x6e>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueGenericSendFromISR+0x70>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61fb      	str	r3, [r7, #28]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800821a:	f001 fe81 	bl	8009f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800821e:	f3ef 8211 	mrs	r2, BASEPRI
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	61ba      	str	r2, [r7, #24]
 8008234:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008236:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	429a      	cmp	r2, r3
 8008244:	d302      	bcc.n	800824c <xQueueGenericSendFromISR+0xbc>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d12c      	bne.n	80082a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	68b9      	ldr	r1, [r7, #8]
 800825a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825c:	f000 f910 	bl	8008480 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008260:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008268:	d112      	bne.n	8008290 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	d016      	beq.n	80082a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	3324      	adds	r3, #36	; 0x24
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fec4 	bl	8009004 <xTaskRemoveFromEventList>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00e      	beq.n	80082a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e007      	b.n	80082a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008294:	3301      	adds	r3, #1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	b25a      	sxtb	r2, r3
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80082a0:	2301      	movs	r3, #1
 80082a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80082a4:	e001      	b.n	80082aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	637b      	str	r3, [r7, #52]	; 0x34
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3738      	adds	r7, #56	; 0x38
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08c      	sub	sp, #48	; 0x30
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <xQueueReceive+0x30>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	623b      	str	r3, [r7, #32]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <xQueueReceive+0x3e>
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <xQueueReceive+0x42>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <xQueueReceive+0x44>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <xQueueReceive+0x5e>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	61fb      	str	r3, [r7, #28]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800831e:	f001 f859 	bl	80093d4 <xTaskGetSchedulerState>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d102      	bne.n	800832e <xQueueReceive+0x6e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <xQueueReceive+0x72>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <xQueueReceive+0x74>
 8008332:	2300      	movs	r3, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <xQueueReceive+0x8e>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	61bb      	str	r3, [r7, #24]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800834e:	f001 fd25 	bl	8009d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01f      	beq.n	800839e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008362:	f000 f8f7 	bl	8008554 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	1e5a      	subs	r2, r3, #1
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00f      	beq.n	8008396 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008378:	3310      	adds	r3, #16
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fe42 	bl	8009004 <xTaskRemoveFromEventList>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d007      	beq.n	8008396 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008386:	4b3d      	ldr	r3, [pc, #244]	; (800847c <xQueueReceive+0x1bc>)
 8008388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838c:	601a      	str	r2, [r3, #0]
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008396:	f001 fd31 	bl	8009dfc <vPortExitCritical>
				return pdPASS;
 800839a:	2301      	movs	r3, #1
 800839c:	e069      	b.n	8008472 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80083a4:	f001 fd2a 	bl	8009dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80083a8:	2300      	movs	r3, #0
 80083aa:	e062      	b.n	8008472 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d106      	bne.n	80083c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083b2:	f107 0310 	add.w	r3, r7, #16
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 feae 	bl	8009118 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083c0:	f001 fd1c 	bl	8009dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083c4:	f000 fbfa 	bl	8008bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083c8:	f001 fce8 	bl	8009d9c <vPortEnterCritical>
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083d2:	b25b      	sxtb	r3, r3
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d8:	d103      	bne.n	80083e2 <xQueueReceive+0x122>
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083e8:	b25b      	sxtb	r3, r3
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ee:	d103      	bne.n	80083f8 <xQueueReceive+0x138>
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f8:	f001 fd00 	bl	8009dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083fc:	1d3a      	adds	r2, r7, #4
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	4611      	mov	r1, r2
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fe9d 	bl	8009144 <xTaskCheckForTimeOut>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d123      	bne.n	8008458 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008412:	f000 f917 	bl	8008644 <prvIsQueueEmpty>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d017      	beq.n	800844c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800841c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841e:	3324      	adds	r3, #36	; 0x24
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	4611      	mov	r1, r2
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fd9d 	bl	8008f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800842a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800842c:	f000 f8b8 	bl	80085a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008430:	f000 fbd2 	bl	8008bd8 <xTaskResumeAll>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d189      	bne.n	800834e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800843a:	4b10      	ldr	r3, [pc, #64]	; (800847c <xQueueReceive+0x1bc>)
 800843c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	e780      	b.n	800834e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800844c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800844e:	f000 f8a7 	bl	80085a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008452:	f000 fbc1 	bl	8008bd8 <xTaskResumeAll>
 8008456:	e77a      	b.n	800834e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800845a:	f000 f8a1 	bl	80085a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800845e:	f000 fbbb 	bl	8008bd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008464:	f000 f8ee 	bl	8008644 <prvIsQueueEmpty>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	f43f af6f 	beq.w	800834e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008472:	4618      	mov	r0, r3
 8008474:	3730      	adds	r7, #48	; 0x30
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	e000ed04 	.word	0xe000ed04

08008480 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800848c:	2300      	movs	r3, #0
 800848e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10d      	bne.n	80084ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d14d      	bne.n	8008542 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 ffb0 	bl	8009410 <xTaskPriorityDisinherit>
 80084b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]
 80084b8:	e043      	b.n	8008542 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d119      	bne.n	80084f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6898      	ldr	r0, [r3, #8]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c8:	461a      	mov	r2, r3
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	f00f fc8e 	bl	8017dec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	441a      	add	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d32b      	bcc.n	8008542 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	609a      	str	r2, [r3, #8]
 80084f2:	e026      	b.n	8008542 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68d8      	ldr	r0, [r3, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	461a      	mov	r2, r3
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	f00f fc74 	bl	8017dec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	425b      	negs	r3, r3
 800850e:	441a      	add	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d207      	bcs.n	8008530 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685a      	ldr	r2, [r3, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	425b      	negs	r3, r3
 800852a:	441a      	add	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d105      	bne.n	8008542 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3b01      	subs	r3, #1
 8008540:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800854a:	697b      	ldr	r3, [r7, #20]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d018      	beq.n	8008598 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	441a      	add	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	429a      	cmp	r2, r3
 800857e:	d303      	bcc.n	8008588 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	68d9      	ldr	r1, [r3, #12]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	461a      	mov	r2, r3
 8008592:	6838      	ldr	r0, [r7, #0]
 8008594:	f00f fc2a 	bl	8017dec <memcpy>
	}
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085a8:	f001 fbf8 	bl	8009d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085b4:	e011      	b.n	80085da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d012      	beq.n	80085e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3324      	adds	r3, #36	; 0x24
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fd1e 	bl	8009004 <xTaskRemoveFromEventList>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085ce:	f000 fe1b 	bl	8009208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	dce9      	bgt.n	80085b6 <prvUnlockQueue+0x16>
 80085e2:	e000      	b.n	80085e6 <prvUnlockQueue+0x46>
					break;
 80085e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	22ff      	movs	r2, #255	; 0xff
 80085ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085ee:	f001 fc05 	bl	8009dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085f2:	f001 fbd3 	bl	8009d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085fe:	e011      	b.n	8008624 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d012      	beq.n	800862e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3310      	adds	r3, #16
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fcf9 	bl	8009004 <xTaskRemoveFromEventList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008618:	f000 fdf6 	bl	8009208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	3b01      	subs	r3, #1
 8008620:	b2db      	uxtb	r3, r3
 8008622:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008624:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	dce9      	bgt.n	8008600 <prvUnlockQueue+0x60>
 800862c:	e000      	b.n	8008630 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800862e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	22ff      	movs	r2, #255	; 0xff
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008638:	f001 fbe0 	bl	8009dfc <vPortExitCritical>
}
 800863c:	bf00      	nop
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800864c:	f001 fba6 	bl	8009d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	e001      	b.n	8008662 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008662:	f001 fbcb 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008666:	68fb      	ldr	r3, [r7, #12]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008678:	f001 fb90 	bl	8009d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008684:	429a      	cmp	r2, r3
 8008686:	d102      	bne.n	800868e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	e001      	b.n	8008692 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008692:	f001 fbb3 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 8008696:	68fb      	ldr	r3, [r7, #12]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086aa:	2300      	movs	r3, #0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	e014      	b.n	80086da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086b0:	4a0e      	ldr	r2, [pc, #56]	; (80086ec <vQueueAddToRegistry+0x4c>)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10b      	bne.n	80086d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086bc:	490b      	ldr	r1, [pc, #44]	; (80086ec <vQueueAddToRegistry+0x4c>)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <vQueueAddToRegistry+0x4c>)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	4413      	add	r3, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086d2:	e006      	b.n	80086e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b07      	cmp	r3, #7
 80086de:	d9e7      	bls.n	80086b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr
 80086ec:	200084b8 	.word	0x200084b8

080086f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b086      	sub	sp, #24
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008700:	f001 fb4c 	bl	8009d9c <vPortEnterCritical>
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800870a:	b25b      	sxtb	r3, r3
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008710:	d103      	bne.n	800871a <vQueueWaitForMessageRestricted+0x2a>
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008720:	b25b      	sxtb	r3, r3
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008726:	d103      	bne.n	8008730 <vQueueWaitForMessageRestricted+0x40>
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008730:	f001 fb64 	bl	8009dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	d106      	bne.n	800874a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	3324      	adds	r3, #36	; 0x24
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 fc31 	bl	8008fac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800874a:	6978      	ldr	r0, [r7, #20]
 800874c:	f7ff ff28 	bl	80085a0 <prvUnlockQueue>
	}
 8008750:	bf00      	nop
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08e      	sub	sp, #56	; 0x38
 800875c:	af04      	add	r7, sp, #16
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xTaskCreateStatic+0x2a>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	623b      	str	r3, [r7, #32]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xTaskCreateStatic+0x46>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	61fb      	str	r3, [r7, #28]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800879e:	235c      	movs	r3, #92	; 0x5c
 80087a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b5c      	cmp	r3, #92	; 0x5c
 80087a6:	d00a      	beq.n	80087be <xTaskCreateStatic+0x66>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	61bb      	str	r3, [r7, #24]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01e      	beq.n	8008802 <xTaskCreateStatic+0xaa>
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01b      	beq.n	8008802 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	9302      	str	r3, [sp, #8]
 80087e4:	f107 0314 	add.w	r3, r7, #20
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f850 	bl	800889a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087fc:	f000 f8d4 	bl	80089a8 <prvAddNewTaskToReadyList>
 8008800:	e001      	b.n	8008806 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008806:	697b      	ldr	r3, [r7, #20]
	}
 8008808:	4618      	mov	r0, r3
 800880a:	3728      	adds	r7, #40	; 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af04      	add	r7, sp, #16
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4618      	mov	r0, r3
 8008826:	f001 fbb9 	bl	8009f9c <pvPortMalloc>
 800882a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008832:	205c      	movs	r0, #92	; 0x5c
 8008834:	f001 fbb2 	bl	8009f9c <pvPortMalloc>
 8008838:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
 8008846:	e005      	b.n	8008854 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008848:	6978      	ldr	r0, [r7, #20]
 800884a:	f001 fc6b 	bl	800a124 <vPortFree>
 800884e:	e001      	b.n	8008854 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d017      	beq.n	800888a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	2300      	movs	r3, #0
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f80e 	bl	800889a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800887e:	69f8      	ldr	r0, [r7, #28]
 8008880:	f000 f892 	bl	80089a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	e002      	b.n	8008890 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800888a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800888e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008890:	69bb      	ldr	r3, [r7, #24]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	af00      	add	r7, sp, #0
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	607a      	str	r2, [r7, #4]
 80088a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	461a      	mov	r2, r3
 80088b2:	21a5      	movs	r1, #165	; 0xa5
 80088b4:	f00f fac2 	bl	8017e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088c2:	3b01      	subs	r3, #1
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	f023 0307 	bic.w	r3, r3, #7
 80088d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	f003 0307 	and.w	r3, r3, #7
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	617b      	str	r3, [r7, #20]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
 80088f6:	e012      	b.n	800891e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	7819      	ldrb	r1, [r3, #0]
 8008900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	3334      	adds	r3, #52	; 0x34
 8008908:	460a      	mov	r2, r1
 800890a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d006      	beq.n	8008926 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3301      	adds	r3, #1
 800891c:	61fb      	str	r3, [r7, #28]
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b0f      	cmp	r3, #15
 8008922:	d9e9      	bls.n	80088f8 <prvInitialiseNewTask+0x5e>
 8008924:	e000      	b.n	8008928 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008926:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2b37      	cmp	r3, #55	; 0x37
 8008934:	d901      	bls.n	800893a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008936:	2337      	movs	r3, #55	; 0x37
 8008938:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800893e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008944:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	2200      	movs	r2, #0
 800894a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	3304      	adds	r3, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff f900 	bl	8007b56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	3318      	adds	r3, #24
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff f8fb 	bl	8007b56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008964:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008974:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	2200      	movs	r2, #0
 800897a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	68f9      	ldr	r1, [r7, #12]
 8008988:	69b8      	ldr	r0, [r7, #24]
 800898a:	f001 f915 	bl	8009bb8 <pxPortInitialiseStack>
 800898e:	4602      	mov	r2, r0
 8008990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008992:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d002      	beq.n	80089a0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a0:	bf00      	nop
 80089a2:	3720      	adds	r7, #32
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089b0:	f001 f9f4 	bl	8009d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089b4:	4b2d      	ldr	r3, [pc, #180]	; (8008a6c <prvAddNewTaskToReadyList+0xc4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	4a2c      	ldr	r2, [pc, #176]	; (8008a6c <prvAddNewTaskToReadyList+0xc4>)
 80089bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089be:	4b2c      	ldr	r3, [pc, #176]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089c6:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089cc:	4b27      	ldr	r3, [pc, #156]	; (8008a6c <prvAddNewTaskToReadyList+0xc4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d110      	bne.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089d4:	f000 fc3c 	bl	8009250 <prvInitialiseTaskLists>
 80089d8:	e00d      	b.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089da:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <prvAddNewTaskToReadyList+0xcc>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089e2:	4b23      	ldr	r3, [pc, #140]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d802      	bhi.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089f0:	4a1f      	ldr	r2, [pc, #124]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089f6:	4b20      	ldr	r3, [pc, #128]	; (8008a78 <prvAddNewTaskToReadyList+0xd0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	4a1e      	ldr	r2, [pc, #120]	; (8008a78 <prvAddNewTaskToReadyList+0xd0>)
 80089fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a00:	4b1d      	ldr	r3, [pc, #116]	; (8008a78 <prvAddNewTaskToReadyList+0xd0>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0c:	4b1b      	ldr	r3, [pc, #108]	; (8008a7c <prvAddNewTaskToReadyList+0xd4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d903      	bls.n	8008a1c <prvAddNewTaskToReadyList+0x74>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <prvAddNewTaskToReadyList+0xd4>)
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <prvAddNewTaskToReadyList+0xd8>)
 8008a2a:	441a      	add	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7ff f89b 	bl	8007b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a38:	f001 f9e0 	bl	8009dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <prvAddNewTaskToReadyList+0xcc>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00e      	beq.n	8008a62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d207      	bcs.n	8008a62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <prvAddNewTaskToReadyList+0xdc>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20003dd8 	.word	0x20003dd8
 8008a70:	20003904 	.word	0x20003904
 8008a74:	20003de4 	.word	0x20003de4
 8008a78:	20003df4 	.word	0x20003df4
 8008a7c:	20003de0 	.word	0x20003de0
 8008a80:	20003908 	.word	0x20003908
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d017      	beq.n	8008aca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a9a:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <vTaskDelay+0x60>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <vTaskDelay+0x30>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60bb      	str	r3, [r7, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ab8:	f000 f880 	bl	8008bbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fd14 	bl	80094ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ac4:	f000 f888 	bl	8008bd8 <xTaskResumeAll>
 8008ac8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d107      	bne.n	8008ae0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ad0:	4b06      	ldr	r3, [pc, #24]	; (8008aec <vTaskDelay+0x64>)
 8008ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20003e00 	.word	0x20003e00
 8008aec:	e000ed04 	.word	0xe000ed04

08008af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008afe:	463a      	mov	r2, r7
 8008b00:	1d39      	adds	r1, r7, #4
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe ffd4 	bl	8007ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	9202      	str	r2, [sp, #8]
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	4921      	ldr	r1, [pc, #132]	; (8008ba4 <vTaskStartScheduler+0xb4>)
 8008b20:	4821      	ldr	r0, [pc, #132]	; (8008ba8 <vTaskStartScheduler+0xb8>)
 8008b22:	f7ff fe19 	bl	8008758 <xTaskCreateStatic>
 8008b26:	4603      	mov	r3, r0
 8008b28:	4a20      	ldr	r2, [pc, #128]	; (8008bac <vTaskStartScheduler+0xbc>)
 8008b2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b2c:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <vTaskStartScheduler+0xbc>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b34:	2301      	movs	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e001      	b.n	8008b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d102      	bne.n	8008b4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b44:	f000 fd26 	bl	8009594 <xTimerCreateTimerTask>
 8008b48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d116      	bne.n	8008b7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b64:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <vTaskStartScheduler+0xc0>)
 8008b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <vTaskStartScheduler+0xc4>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <vTaskStartScheduler+0xc8>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b78:	f001 f89e 	bl	8009cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b7c:	e00e      	b.n	8008b9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b84:	d10a      	bne.n	8008b9c <vTaskStartScheduler+0xac>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vTaskStartScheduler+0xaa>
}
 8008b9c:	bf00      	nop
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	08019744 	.word	0x08019744
 8008ba8:	08009221 	.word	0x08009221
 8008bac:	20003dfc 	.word	0x20003dfc
 8008bb0:	20003df8 	.word	0x20003df8
 8008bb4:	20003de4 	.word	0x20003de4
 8008bb8:	20003ddc 	.word	0x20003ddc

08008bbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <vTaskSuspendAll+0x18>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a03      	ldr	r2, [pc, #12]	; (8008bd4 <vTaskSuspendAll+0x18>)
 8008bc8:	6013      	str	r3, [r2, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bc80      	pop	{r7}
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	20003e00 	.word	0x20003e00

08008bd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008be6:	4b42      	ldr	r3, [pc, #264]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <xTaskResumeAll+0x2c>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	603b      	str	r3, [r7, #0]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c04:	f001 f8ca 	bl	8009d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c08:	4b39      	ldr	r3, [pc, #228]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4a38      	ldr	r2, [pc, #224]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008c10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c12:	4b37      	ldr	r3, [pc, #220]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d162      	bne.n	8008ce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c1a:	4b36      	ldr	r3, [pc, #216]	; (8008cf4 <xTaskResumeAll+0x11c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d05e      	beq.n	8008ce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c22:	e02f      	b.n	8008c84 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008c24:	4b34      	ldr	r3, [pc, #208]	; (8008cf8 <xTaskResumeAll+0x120>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3318      	adds	r3, #24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fff7 	bl	8007c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fff2 	bl	8007c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c44:	4b2d      	ldr	r3, [pc, #180]	; (8008cfc <xTaskResumeAll+0x124>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d903      	bls.n	8008c54 <xTaskResumeAll+0x7c>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	4a2a      	ldr	r2, [pc, #168]	; (8008cfc <xTaskResumeAll+0x124>)
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <xTaskResumeAll+0x128>)
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fe ff7f 	bl	8007b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <xTaskResumeAll+0x12c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d302      	bcc.n	8008c84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c7e:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <xTaskResumeAll+0x130>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c84:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <xTaskResumeAll+0x120>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1cb      	bne.n	8008c24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c92:	f000 fb7b 	bl	800938c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c96:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <xTaskResumeAll+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d010      	beq.n	8008cc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ca2:	f000 f845 	bl	8008d30 <xTaskIncrementTick>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008cac:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <xTaskResumeAll+0x130>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1f1      	bne.n	8008ca2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <xTaskResumeAll+0x134>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008cc4:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <xTaskResumeAll+0x130>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <xTaskResumeAll+0x138>)
 8008cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ce0:	f001 f88c 	bl	8009dfc <vPortExitCritical>

	return xAlreadyYielded;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20003e00 	.word	0x20003e00
 8008cf4:	20003dd8 	.word	0x20003dd8
 8008cf8:	20003d98 	.word	0x20003d98
 8008cfc:	20003de0 	.word	0x20003de0
 8008d00:	20003908 	.word	0x20003908
 8008d04:	20003904 	.word	0x20003904
 8008d08:	20003dec 	.word	0x20003dec
 8008d0c:	20003de8 	.word	0x20003de8
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d1a:	4b04      	ldr	r3, [pc, #16]	; (8008d2c <xTaskGetTickCount+0x18>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d20:	687b      	ldr	r3, [r7, #4]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	20003ddc 	.word	0x20003ddc

08008d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d3a:	4b51      	ldr	r3, [pc, #324]	; (8008e80 <xTaskIncrementTick+0x150>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f040 808e 	bne.w	8008e60 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d44:	4b4f      	ldr	r3, [pc, #316]	; (8008e84 <xTaskIncrementTick+0x154>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d4c:	4a4d      	ldr	r2, [pc, #308]	; (8008e84 <xTaskIncrementTick+0x154>)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d120      	bne.n	8008d9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d58:	4b4b      	ldr	r3, [pc, #300]	; (8008e88 <xTaskIncrementTick+0x158>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <xTaskIncrementTick+0x48>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	603b      	str	r3, [r7, #0]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <xTaskIncrementTick+0x46>
 8008d78:	4b43      	ldr	r3, [pc, #268]	; (8008e88 <xTaskIncrementTick+0x158>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	4b43      	ldr	r3, [pc, #268]	; (8008e8c <xTaskIncrementTick+0x15c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a41      	ldr	r2, [pc, #260]	; (8008e88 <xTaskIncrementTick+0x158>)
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	4a41      	ldr	r2, [pc, #260]	; (8008e8c <xTaskIncrementTick+0x15c>)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	4b40      	ldr	r3, [pc, #256]	; (8008e90 <xTaskIncrementTick+0x160>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	4a3f      	ldr	r2, [pc, #252]	; (8008e90 <xTaskIncrementTick+0x160>)
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	f000 faf9 	bl	800938c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d9a:	4b3e      	ldr	r3, [pc, #248]	; (8008e94 <xTaskIncrementTick+0x164>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d34e      	bcc.n	8008e42 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da4:	4b38      	ldr	r3, [pc, #224]	; (8008e88 <xTaskIncrementTick+0x158>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <xTaskIncrementTick+0x82>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <xTaskIncrementTick+0x84>
 8008db2:	2300      	movs	r3, #0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db8:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <xTaskIncrementTick+0x164>)
 8008dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dbe:	601a      	str	r2, [r3, #0]
					break;
 8008dc0:	e03f      	b.n	8008e42 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008dc2:	4b31      	ldr	r3, [pc, #196]	; (8008e88 <xTaskIncrementTick+0x158>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d203      	bcs.n	8008de2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008dda:	4a2e      	ldr	r2, [pc, #184]	; (8008e94 <xTaskIncrementTick+0x164>)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6013      	str	r3, [r2, #0]
						break;
 8008de0:	e02f      	b.n	8008e42 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe ff1c 	bl	8007c24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d004      	beq.n	8008dfe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3318      	adds	r3, #24
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe ff13 	bl	8007c24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e02:	4b25      	ldr	r3, [pc, #148]	; (8008e98 <xTaskIncrementTick+0x168>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d903      	bls.n	8008e12 <xTaskIncrementTick+0xe2>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	4a22      	ldr	r2, [pc, #136]	; (8008e98 <xTaskIncrementTick+0x168>)
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4a1f      	ldr	r2, [pc, #124]	; (8008e9c <xTaskIncrementTick+0x16c>)
 8008e20:	441a      	add	r2, r3
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4619      	mov	r1, r3
 8008e28:	4610      	mov	r0, r2
 8008e2a:	f7fe fea0 	bl	8007b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	4b1b      	ldr	r3, [pc, #108]	; (8008ea0 <xTaskIncrementTick+0x170>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d3b3      	bcc.n	8008da4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e40:	e7b0      	b.n	8008da4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e42:	4b17      	ldr	r3, [pc, #92]	; (8008ea0 <xTaskIncrementTick+0x170>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	4914      	ldr	r1, [pc, #80]	; (8008e9c <xTaskIncrementTick+0x16c>)
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	440b      	add	r3, r1
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d907      	bls.n	8008e6a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	e004      	b.n	8008e6a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <xTaskIncrementTick+0x174>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a0f      	ldr	r2, [pc, #60]	; (8008ea4 <xTaskIncrementTick+0x174>)
 8008e68:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <xTaskIncrementTick+0x178>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008e72:	2301      	movs	r3, #1
 8008e74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e76:	697b      	ldr	r3, [r7, #20]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3718      	adds	r7, #24
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	20003e00 	.word	0x20003e00
 8008e84:	20003ddc 	.word	0x20003ddc
 8008e88:	20003d90 	.word	0x20003d90
 8008e8c:	20003d94 	.word	0x20003d94
 8008e90:	20003df0 	.word	0x20003df0
 8008e94:	20003df8 	.word	0x20003df8
 8008e98:	20003de0 	.word	0x20003de0
 8008e9c:	20003908 	.word	0x20003908
 8008ea0:	20003904 	.word	0x20003904
 8008ea4:	20003de8 	.word	0x20003de8
 8008ea8:	20003dec 	.word	0x20003dec

08008eac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008eb2:	4b27      	ldr	r3, [pc, #156]	; (8008f50 <vTaskSwitchContext+0xa4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008eba:	4b26      	ldr	r3, [pc, #152]	; (8008f54 <vTaskSwitchContext+0xa8>)
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ec0:	e041      	b.n	8008f46 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008ec2:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <vTaskSwitchContext+0xa8>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008ec8:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <vTaskSwitchContext+0xac>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	e010      	b.n	8008ef2 <vTaskSwitchContext+0x46>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10a      	bne.n	8008eec <vTaskSwitchContext+0x40>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	607b      	str	r3, [r7, #4]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <vTaskSwitchContext+0x3e>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	491a      	ldr	r1, [pc, #104]	; (8008f5c <vTaskSwitchContext+0xb0>)
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0e4      	beq.n	8008ed0 <vTaskSwitchContext+0x24>
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4a12      	ldr	r2, [pc, #72]	; (8008f5c <vTaskSwitchContext+0xb0>)
 8008f12:	4413      	add	r3, r2
 8008f14:	60bb      	str	r3, [r7, #8]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	605a      	str	r2, [r3, #4]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3308      	adds	r3, #8
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d104      	bne.n	8008f36 <vTaskSwitchContext+0x8a>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4a08      	ldr	r2, [pc, #32]	; (8008f60 <vTaskSwitchContext+0xb4>)
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4a05      	ldr	r2, [pc, #20]	; (8008f58 <vTaskSwitchContext+0xac>)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6013      	str	r3, [r2, #0]
}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bc80      	pop	{r7}
 8008f4e:	4770      	bx	lr
 8008f50:	20003e00 	.word	0x20003e00
 8008f54:	20003dec 	.word	0x20003dec
 8008f58:	20003de0 	.word	0x20003de0
 8008f5c:	20003908 	.word	0x20003908
 8008f60:	20003904 	.word	0x20003904

08008f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	60fb      	str	r3, [r7, #12]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f8a:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <vTaskPlaceOnEventList+0x44>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3318      	adds	r3, #24
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7fe fe0e 	bl	8007bb4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f98:	2101      	movs	r1, #1
 8008f9a:	6838      	ldr	r0, [r7, #0]
 8008f9c:	f000 faa6 	bl	80094ec <prvAddCurrentTaskToDelayedList>
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20003904 	.word	0x20003904

08008fac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10a      	bne.n	8008fd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc2:	f383 8811 	msr	BASEPRI, r3
 8008fc6:	f3bf 8f6f 	isb	sy
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	617b      	str	r3, [r7, #20]
}
 8008fd0:	bf00      	nop
 8008fd2:	e7fe      	b.n	8008fd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fd4:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <vTaskPlaceOnEventListRestricted+0x54>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3318      	adds	r3, #24
 8008fda:	4619      	mov	r1, r3
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7fe fdc6 	bl	8007b6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	68b8      	ldr	r0, [r7, #8]
 8008ff2:	f000 fa7b 	bl	80094ec <prvAddCurrentTaskToDelayedList>
	}
 8008ff6:	bf00      	nop
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20003904 	.word	0x20003904

08009004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	60fb      	str	r3, [r7, #12]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	3318      	adds	r3, #24
 8009034:	4618      	mov	r0, r3
 8009036:	f7fe fdf5 	bl	8007c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800903a:	4b1e      	ldr	r3, [pc, #120]	; (80090b4 <xTaskRemoveFromEventList+0xb0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d11d      	bne.n	800907e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	3304      	adds	r3, #4
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fdec 	bl	8007c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009050:	4b19      	ldr	r3, [pc, #100]	; (80090b8 <xTaskRemoveFromEventList+0xb4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	429a      	cmp	r2, r3
 8009056:	d903      	bls.n	8009060 <xTaskRemoveFromEventList+0x5c>
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4a16      	ldr	r2, [pc, #88]	; (80090b8 <xTaskRemoveFromEventList+0xb4>)
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009064:	4613      	mov	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	4413      	add	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4a13      	ldr	r2, [pc, #76]	; (80090bc <xTaskRemoveFromEventList+0xb8>)
 800906e:	441a      	add	r2, r3
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3304      	adds	r3, #4
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f7fe fd79 	bl	8007b6e <vListInsertEnd>
 800907c:	e005      	b.n	800908a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	3318      	adds	r3, #24
 8009082:	4619      	mov	r1, r3
 8009084:	480e      	ldr	r0, [pc, #56]	; (80090c0 <xTaskRemoveFromEventList+0xbc>)
 8009086:	f7fe fd72 	bl	8007b6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <xTaskRemoveFromEventList+0xc0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	429a      	cmp	r2, r3
 8009096:	d905      	bls.n	80090a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009098:	2301      	movs	r3, #1
 800909a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800909c:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <xTaskRemoveFromEventList+0xc4>)
 800909e:	2201      	movs	r2, #1
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	e001      	b.n	80090a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80090a8:	697b      	ldr	r3, [r7, #20]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20003e00 	.word	0x20003e00
 80090b8:	20003de0 	.word	0x20003de0
 80090bc:	20003908 	.word	0x20003908
 80090c0:	20003d98 	.word	0x20003d98
 80090c4:	20003904 	.word	0x20003904
 80090c8:	20003dec 	.word	0x20003dec

080090cc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	60fb      	str	r3, [r7, #12]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80090f0:	f000 fe54 	bl	8009d9c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090f4:	4b06      	ldr	r3, [pc, #24]	; (8009110 <vTaskSetTimeOutState+0x44>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80090fc:	4b05      	ldr	r3, [pc, #20]	; (8009114 <vTaskSetTimeOutState+0x48>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009104:	f000 fe7a 	bl	8009dfc <vPortExitCritical>
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	20003df0 	.word	0x20003df0
 8009114:	20003ddc 	.word	0x20003ddc

08009118 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <vTaskInternalSetTimeOutState+0x24>)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <vTaskInternalSetTimeOutState+0x28>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	20003df0 	.word	0x20003df0
 8009140:	20003ddc 	.word	0x20003ddc

08009144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	613b      	str	r3, [r7, #16]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	60fb      	str	r3, [r7, #12]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009186:	f000 fe09 	bl	8009d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800918a:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <xTaskCheckForTimeOut+0xbc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091a2:	d102      	bne.n	80091aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e023      	b.n	80091f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b15      	ldr	r3, [pc, #84]	; (8009204 <xTaskCheckForTimeOut+0xc0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d007      	beq.n	80091c6 <xTaskCheckForTimeOut+0x82>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d302      	bcc.n	80091c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091c0:	2301      	movs	r3, #1
 80091c2:	61fb      	str	r3, [r7, #28]
 80091c4:	e015      	b.n	80091f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d20b      	bcs.n	80091e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	1ad2      	subs	r2, r2, r3
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ff9b 	bl	8009118 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	61fb      	str	r3, [r7, #28]
 80091e6:	e004      	b.n	80091f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091ee:	2301      	movs	r3, #1
 80091f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091f2:	f000 fe03 	bl	8009dfc <vPortExitCritical>

	return xReturn;
 80091f6:	69fb      	ldr	r3, [r7, #28]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20003ddc 	.word	0x20003ddc
 8009204:	20003df0 	.word	0x20003df0

08009208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800920c:	4b03      	ldr	r3, [pc, #12]	; (800921c <vTaskMissedYield+0x14>)
 800920e:	2201      	movs	r2, #1
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	46bd      	mov	sp, r7
 8009216:	bc80      	pop	{r7}
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20003dec 	.word	0x20003dec

08009220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009228:	f000 f852 	bl	80092d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <prvIdleTask+0x28>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d9f9      	bls.n	8009228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <prvIdleTask+0x2c>)
 8009236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009244:	e7f0      	b.n	8009228 <prvIdleTask+0x8>
 8009246:	bf00      	nop
 8009248:	20003908 	.word	0x20003908
 800924c:	e000ed04 	.word	0xe000ed04

08009250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	e00c      	b.n	8009276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4a12      	ldr	r2, [pc, #72]	; (80092b0 <prvInitialiseTaskLists+0x60>)
 8009268:	4413      	add	r3, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fc54 	bl	8007b18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3301      	adds	r3, #1
 8009274:	607b      	str	r3, [r7, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b37      	cmp	r3, #55	; 0x37
 800927a:	d9ef      	bls.n	800925c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800927c:	480d      	ldr	r0, [pc, #52]	; (80092b4 <prvInitialiseTaskLists+0x64>)
 800927e:	f7fe fc4b 	bl	8007b18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009282:	480d      	ldr	r0, [pc, #52]	; (80092b8 <prvInitialiseTaskLists+0x68>)
 8009284:	f7fe fc48 	bl	8007b18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009288:	480c      	ldr	r0, [pc, #48]	; (80092bc <prvInitialiseTaskLists+0x6c>)
 800928a:	f7fe fc45 	bl	8007b18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800928e:	480c      	ldr	r0, [pc, #48]	; (80092c0 <prvInitialiseTaskLists+0x70>)
 8009290:	f7fe fc42 	bl	8007b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009294:	480b      	ldr	r0, [pc, #44]	; (80092c4 <prvInitialiseTaskLists+0x74>)
 8009296:	f7fe fc3f 	bl	8007b18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <prvInitialiseTaskLists+0x78>)
 800929c:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <prvInitialiseTaskLists+0x64>)
 800929e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092a0:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <prvInitialiseTaskLists+0x7c>)
 80092a2:	4a05      	ldr	r2, [pc, #20]	; (80092b8 <prvInitialiseTaskLists+0x68>)
 80092a4:	601a      	str	r2, [r3, #0]
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20003908 	.word	0x20003908
 80092b4:	20003d68 	.word	0x20003d68
 80092b8:	20003d7c 	.word	0x20003d7c
 80092bc:	20003d98 	.word	0x20003d98
 80092c0:	20003dac 	.word	0x20003dac
 80092c4:	20003dc4 	.word	0x20003dc4
 80092c8:	20003d90 	.word	0x20003d90
 80092cc:	20003d94 	.word	0x20003d94

080092d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092d6:	e019      	b.n	800930c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092d8:	f000 fd60 	bl	8009d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80092dc:	4b10      	ldr	r3, [pc, #64]	; (8009320 <prvCheckTasksWaitingTermination+0x50>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fc9b 	bl	8007c24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <prvCheckTasksWaitingTermination+0x54>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3b01      	subs	r3, #1
 80092f4:	4a0b      	ldr	r2, [pc, #44]	; (8009324 <prvCheckTasksWaitingTermination+0x54>)
 80092f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092f8:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <prvCheckTasksWaitingTermination+0x58>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <prvCheckTasksWaitingTermination+0x58>)
 8009300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009302:	f000 fd7b 	bl	8009dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f810 	bl	800932c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <prvCheckTasksWaitingTermination+0x58>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e1      	bne.n	80092d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009314:	bf00      	nop
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20003dac 	.word	0x20003dac
 8009324:	20003dd8 	.word	0x20003dd8
 8009328:	20003dc0 	.word	0x20003dc0

0800932c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800933a:	2b00      	cmp	r3, #0
 800933c:	d108      	bne.n	8009350 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	4618      	mov	r0, r3
 8009344:	f000 feee 	bl	800a124 <vPortFree>
				vPortFree( pxTCB );
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 feeb 	bl	800a124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800934e:	e018      	b.n	8009382 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009356:	2b01      	cmp	r3, #1
 8009358:	d103      	bne.n	8009362 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fee2 	bl	800a124 <vPortFree>
	}
 8009360:	e00f      	b.n	8009382 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009368:	2b02      	cmp	r3, #2
 800936a:	d00a      	beq.n	8009382 <prvDeleteTCB+0x56>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60fb      	str	r3, [r7, #12]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <prvDeleteTCB+0x54>
	}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009392:	4b0e      	ldr	r3, [pc, #56]	; (80093cc <prvResetNextTaskUnblockTime+0x40>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <prvResetNextTaskUnblockTime+0x14>
 800939c:	2301      	movs	r3, #1
 800939e:	e000      	b.n	80093a2 <prvResetNextTaskUnblockTime+0x16>
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d004      	beq.n	80093b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <prvResetNextTaskUnblockTime+0x44>)
 80093a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093ae:	e008      	b.n	80093c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <prvResetNextTaskUnblockTime+0x40>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	4a04      	ldr	r2, [pc, #16]	; (80093d0 <prvResetNextTaskUnblockTime+0x44>)
 80093c0:	6013      	str	r3, [r2, #0]
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bc80      	pop	{r7}
 80093ca:	4770      	bx	lr
 80093cc:	20003d90 	.word	0x20003d90
 80093d0:	20003df8 	.word	0x20003df8

080093d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093da:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <xTaskGetSchedulerState+0x34>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093e2:	2301      	movs	r3, #1
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	e008      	b.n	80093fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093e8:	4b08      	ldr	r3, [pc, #32]	; (800940c <xTaskGetSchedulerState+0x38>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093f0:	2302      	movs	r3, #2
 80093f2:	607b      	str	r3, [r7, #4]
 80093f4:	e001      	b.n	80093fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093f6:	2300      	movs	r3, #0
 80093f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093fa:	687b      	ldr	r3, [r7, #4]
	}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	bc80      	pop	{r7}
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	20003de4 	.word	0x20003de4
 800940c:	20003e00 	.word	0x20003e00

08009410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800941c:	2300      	movs	r3, #0
 800941e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d056      	beq.n	80094d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009426:	4b2e      	ldr	r3, [pc, #184]	; (80094e0 <xTaskPriorityDisinherit+0xd0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	429a      	cmp	r2, r3
 800942e:	d00a      	beq.n	8009446 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	60fb      	str	r3, [r7, #12]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60bb      	str	r3, [r7, #8]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	1e5a      	subs	r2, r3, #1
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009476:	429a      	cmp	r2, r3
 8009478:	d02c      	beq.n	80094d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800947e:	2b00      	cmp	r3, #0
 8009480:	d128      	bne.n	80094d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	3304      	adds	r3, #4
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fbcc 	bl	8007c24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009498:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a4:	4b0f      	ldr	r3, [pc, #60]	; (80094e4 <xTaskPriorityDisinherit+0xd4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d903      	bls.n	80094b4 <xTaskPriorityDisinherit+0xa4>
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	4a0c      	ldr	r2, [pc, #48]	; (80094e4 <xTaskPriorityDisinherit+0xd4>)
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4a09      	ldr	r2, [pc, #36]	; (80094e8 <xTaskPriorityDisinherit+0xd8>)
 80094c2:	441a      	add	r2, r3
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7fe fb4f 	bl	8007b6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094d0:	2301      	movs	r3, #1
 80094d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094d4:	697b      	ldr	r3, [r7, #20]
	}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20003904 	.word	0x20003904
 80094e4:	20003de0 	.word	0x20003de0
 80094e8:	20003908 	.word	0x20003908

080094ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <prvAddCurrentTaskToDelayedList+0x90>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094fc:	4b20      	ldr	r3, [pc, #128]	; (8009580 <prvAddCurrentTaskToDelayedList+0x94>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3304      	adds	r3, #4
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fb8e 	bl	8007c24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800950e:	d10a      	bne.n	8009526 <prvAddCurrentTaskToDelayedList+0x3a>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d007      	beq.n	8009526 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009516:	4b1a      	ldr	r3, [pc, #104]	; (8009580 <prvAddCurrentTaskToDelayedList+0x94>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3304      	adds	r3, #4
 800951c:	4619      	mov	r1, r3
 800951e:	4819      	ldr	r0, [pc, #100]	; (8009584 <prvAddCurrentTaskToDelayedList+0x98>)
 8009520:	f7fe fb25 	bl	8007b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009524:	e026      	b.n	8009574 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800952e:	4b14      	ldr	r3, [pc, #80]	; (8009580 <prvAddCurrentTaskToDelayedList+0x94>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	429a      	cmp	r2, r3
 800953c:	d209      	bcs.n	8009552 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800953e:	4b12      	ldr	r3, [pc, #72]	; (8009588 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <prvAddCurrentTaskToDelayedList+0x94>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3304      	adds	r3, #4
 8009548:	4619      	mov	r1, r3
 800954a:	4610      	mov	r0, r2
 800954c:	f7fe fb32 	bl	8007bb4 <vListInsert>
}
 8009550:	e010      	b.n	8009574 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009552:	4b0e      	ldr	r3, [pc, #56]	; (800958c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <prvAddCurrentTaskToDelayedList+0x94>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f7fe fb28 	bl	8007bb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009564:	4b0a      	ldr	r3, [pc, #40]	; (8009590 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	429a      	cmp	r2, r3
 800956c:	d202      	bcs.n	8009574 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800956e:	4a08      	ldr	r2, [pc, #32]	; (8009590 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	6013      	str	r3, [r2, #0]
}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20003ddc 	.word	0x20003ddc
 8009580:	20003904 	.word	0x20003904
 8009584:	20003dc4 	.word	0x20003dc4
 8009588:	20003d94 	.word	0x20003d94
 800958c:	20003d90 	.word	0x20003d90
 8009590:	20003df8 	.word	0x20003df8

08009594 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08a      	sub	sp, #40	; 0x28
 8009598:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800959e:	f000 facb 	bl	8009b38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <xTimerCreateTimerTask+0x80>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d021      	beq.n	80095ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095b2:	1d3a      	adds	r2, r7, #4
 80095b4:	f107 0108 	add.w	r1, r7, #8
 80095b8:	f107 030c 	add.w	r3, r7, #12
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fa91 	bl	8007ae4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	9202      	str	r2, [sp, #8]
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	2302      	movs	r3, #2
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	2300      	movs	r3, #0
 80095d2:	460a      	mov	r2, r1
 80095d4:	4910      	ldr	r1, [pc, #64]	; (8009618 <xTimerCreateTimerTask+0x84>)
 80095d6:	4811      	ldr	r0, [pc, #68]	; (800961c <xTimerCreateTimerTask+0x88>)
 80095d8:	f7ff f8be 	bl	8008758 <xTaskCreateStatic>
 80095dc:	4603      	mov	r3, r0
 80095de:	4a10      	ldr	r2, [pc, #64]	; (8009620 <xTimerCreateTimerTask+0x8c>)
 80095e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <xTimerCreateTimerTask+0x8c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095ea:	2301      	movs	r3, #1
 80095ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	613b      	str	r3, [r7, #16]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800960a:	697b      	ldr	r3, [r7, #20]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	20003e34 	.word	0x20003e34
 8009618:	0801974c 	.word	0x0801974c
 800961c:	08009741 	.word	0x08009741
 8009620:	20003e38 	.word	0x20003e38

08009624 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08a      	sub	sp, #40	; 0x28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009632:	2300      	movs	r3, #0
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xTimerGenericCommand+0x2e>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	623b      	str	r3, [r7, #32]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009652:	4b1a      	ldr	r3, [pc, #104]	; (80096bc <xTimerGenericCommand+0x98>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d02a      	beq.n	80096b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b05      	cmp	r3, #5
 800966a:	dc18      	bgt.n	800969e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800966c:	f7ff feb2 	bl	80093d4 <xTaskGetSchedulerState>
 8009670:	4603      	mov	r3, r0
 8009672:	2b02      	cmp	r3, #2
 8009674:	d109      	bne.n	800968a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009676:	4b11      	ldr	r3, [pc, #68]	; (80096bc <xTimerGenericCommand+0x98>)
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	f107 0110 	add.w	r1, r7, #16
 800967e:	2300      	movs	r3, #0
 8009680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009682:	f7fe fc87 	bl	8007f94 <xQueueGenericSend>
 8009686:	6278      	str	r0, [r7, #36]	; 0x24
 8009688:	e012      	b.n	80096b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800968a:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <xTimerGenericCommand+0x98>)
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f107 0110 	add.w	r1, r7, #16
 8009692:	2300      	movs	r3, #0
 8009694:	2200      	movs	r2, #0
 8009696:	f7fe fc7d 	bl	8007f94 <xQueueGenericSend>
 800969a:	6278      	str	r0, [r7, #36]	; 0x24
 800969c:	e008      	b.n	80096b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800969e:	4b07      	ldr	r3, [pc, #28]	; (80096bc <xTimerGenericCommand+0x98>)
 80096a0:	6818      	ldr	r0, [r3, #0]
 80096a2:	f107 0110 	add.w	r1, r7, #16
 80096a6:	2300      	movs	r3, #0
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	f7fe fd71 	bl	8008190 <xQueueGenericSendFromISR>
 80096ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3728      	adds	r7, #40	; 0x28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20003e34 	.word	0x20003e34

080096c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b088      	sub	sp, #32
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096ca:	4b1c      	ldr	r3, [pc, #112]	; (800973c <prvProcessExpiredTimer+0x7c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe faa3 	bl	8007c24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d122      	bne.n	800972c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	18d1      	adds	r1, r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	6978      	ldr	r0, [r7, #20]
 80096f4:	f000 f8c8 	bl	8009888 <prvInsertTimerInActiveList>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d016      	beq.n	800972c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096fe:	2300      	movs	r3, #0
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	2100      	movs	r1, #0
 8009708:	6978      	ldr	r0, [r7, #20]
 800970a:	f7ff ff8b 	bl	8009624 <xTimerGenericCommand>
 800970e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	6978      	ldr	r0, [r7, #20]
 8009732:	4798      	blx	r3
}
 8009734:	bf00      	nop
 8009736:	3718      	adds	r7, #24
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20003e2c 	.word	0x20003e2c

08009740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009748:	f107 0308 	add.w	r3, r7, #8
 800974c:	4618      	mov	r0, r3
 800974e:	f000 f857 	bl	8009800 <prvGetNextExpireTime>
 8009752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4619      	mov	r1, r3
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f803 	bl	8009764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800975e:	f000 f8d5 	bl	800990c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009762:	e7f1      	b.n	8009748 <prvTimerTask+0x8>

08009764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800976e:	f7ff fa25 	bl	8008bbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009772:	f107 0308 	add.w	r3, r7, #8
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f866 	bl	8009848 <prvSampleTimeNow>
 800977c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d130      	bne.n	80097e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10a      	bne.n	80097a0 <prvProcessTimerOrBlockTask+0x3c>
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	429a      	cmp	r2, r3
 8009790:	d806      	bhi.n	80097a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009792:	f7ff fa21 	bl	8008bd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009796:	68f9      	ldr	r1, [r7, #12]
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ff91 	bl	80096c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800979e:	e024      	b.n	80097ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d008      	beq.n	80097b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <prvProcessTimerOrBlockTask+0x90>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf0c      	ite	eq
 80097b0:	2301      	moveq	r3, #1
 80097b2:	2300      	movne	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <prvProcessTimerOrBlockTask+0x94>)
 80097ba:	6818      	ldr	r0, [r3, #0]
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	4619      	mov	r1, r3
 80097c6:	f7fe ff93 	bl	80086f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097ca:	f7ff fa05 	bl	8008bd8 <xTaskResumeAll>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <prvProcessTimerOrBlockTask+0x98>)
 80097d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	f3bf 8f6f 	isb	sy
}
 80097e4:	e001      	b.n	80097ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097e6:	f7ff f9f7 	bl	8008bd8 <xTaskResumeAll>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20003e30 	.word	0x20003e30
 80097f8:	20003e34 	.word	0x20003e34
 80097fc:	e000ed04 	.word	0xe000ed04

08009800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009808:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <prvGetNextExpireTime+0x44>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	bf0c      	ite	eq
 8009812:	2301      	moveq	r3, #1
 8009814:	2300      	movne	r3, #0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	461a      	mov	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d105      	bne.n	8009832 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009826:	4b07      	ldr	r3, [pc, #28]	; (8009844 <prvGetNextExpireTime+0x44>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e001      	b.n	8009836 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009836:	68fb      	ldr	r3, [r7, #12]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	bc80      	pop	{r7}
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	20003e2c 	.word	0x20003e2c

08009848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009850:	f7ff fa60 	bl	8008d14 <xTaskGetTickCount>
 8009854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <prvSampleTimeNow+0x3c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	429a      	cmp	r2, r3
 800985e:	d205      	bcs.n	800986c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009860:	f000 f908 	bl	8009a74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e002      	b.n	8009872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009872:	4a04      	ldr	r2, [pc, #16]	; (8009884 <prvSampleTimeNow+0x3c>)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20003e3c 	.word	0x20003e3c

08009888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009896:	2300      	movs	r3, #0
 8009898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d812      	bhi.n	80098d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	1ad2      	subs	r2, r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098bc:	2301      	movs	r3, #1
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	e01b      	b.n	80098fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098c2:	4b10      	ldr	r3, [pc, #64]	; (8009904 <prvInsertTimerInActiveList+0x7c>)
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3304      	adds	r3, #4
 80098ca:	4619      	mov	r1, r3
 80098cc:	4610      	mov	r0, r2
 80098ce:	f7fe f971 	bl	8007bb4 <vListInsert>
 80098d2:	e012      	b.n	80098fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d206      	bcs.n	80098ea <prvInsertTimerInActiveList+0x62>
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d302      	bcc.n	80098ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098e4:	2301      	movs	r3, #1
 80098e6:	617b      	str	r3, [r7, #20]
 80098e8:	e007      	b.n	80098fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098ea:	4b07      	ldr	r3, [pc, #28]	; (8009908 <prvInsertTimerInActiveList+0x80>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3304      	adds	r3, #4
 80098f2:	4619      	mov	r1, r3
 80098f4:	4610      	mov	r0, r2
 80098f6:	f7fe f95d 	bl	8007bb4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098fa:	697b      	ldr	r3, [r7, #20]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20003e30 	.word	0x20003e30
 8009908:	20003e2c 	.word	0x20003e2c

0800990c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08e      	sub	sp, #56	; 0x38
 8009910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009912:	e09d      	b.n	8009a50 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	da18      	bge.n	800994c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800991a:	1d3b      	adds	r3, r7, #4
 800991c:	3304      	adds	r3, #4
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10a      	bne.n	800993c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	61fb      	str	r3, [r7, #28]
}
 8009938:	bf00      	nop
 800993a:	e7fe      	b.n	800993a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009942:	6850      	ldr	r0, [r2, #4]
 8009944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009946:	6892      	ldr	r2, [r2, #8]
 8009948:	4611      	mov	r1, r2
 800994a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	db7d      	blt.n	8009a4e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d004      	beq.n	8009968 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	3304      	adds	r3, #4
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe f95e 	bl	8007c24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009968:	463b      	mov	r3, r7
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff ff6c 	bl	8009848 <prvSampleTimeNow>
 8009970:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b09      	cmp	r3, #9
 8009976:	d86b      	bhi.n	8009a50 <prvProcessReceivedCommands+0x144>
 8009978:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <prvProcessReceivedCommands+0x74>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	080099a9 	.word	0x080099a9
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099a9 	.word	0x080099a9
 800998c:	08009a51 	.word	0x08009a51
 8009990:	08009a05 	.word	0x08009a05
 8009994:	08009a3d 	.word	0x08009a3d
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099a9 	.word	0x080099a9
 80099a0:	08009a51 	.word	0x08009a51
 80099a4:	08009a05 	.word	0x08009a05
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	18d1      	adds	r1, r2, r3
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099b6:	f7ff ff67 	bl	8009888 <prvInsertTimerInActiveList>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d047      	beq.n	8009a50 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d13f      	bne.n	8009a50 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	441a      	add	r2, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	2300      	movs	r3, #0
 80099de:	2100      	movs	r1, #0
 80099e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099e2:	f7ff fe1f 	bl	8009624 <xTimerGenericCommand>
 80099e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d130      	bne.n	8009a50 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	61bb      	str	r3, [r7, #24]
}
 8009a00:	bf00      	nop
 8009a02:	e7fe      	b.n	8009a02 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	617b      	str	r3, [r7, #20]
}
 8009a24:	bf00      	nop
 8009a26:	e7fe      	b.n	8009a26 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	18d1      	adds	r1, r2, r3
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a36:	f7ff ff27 	bl	8009888 <prvInsertTimerInActiveList>
					break;
 8009a3a:	e009      	b.n	8009a50 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	f000 fb6c 	bl	800a124 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a4c:	e000      	b.n	8009a50 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a4e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <prvProcessReceivedCommands+0x164>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	1d39      	adds	r1, r7, #4
 8009a56:	2200      	movs	r2, #0
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fc31 	bl	80082c0 <xQueueReceive>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f af57 	bne.w	8009914 <prvProcessReceivedCommands+0x8>
	}
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	3730      	adds	r7, #48	; 0x30
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	20003e34 	.word	0x20003e34

08009a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a7a:	e045      	b.n	8009b08 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a7c:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <prvSwitchTimerLists+0xbc>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a86:	4b2a      	ldr	r3, [pc, #168]	; (8009b30 <prvSwitchTimerLists+0xbc>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe f8c5 	bl	8007c24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d12e      	bne.n	8009b08 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4413      	add	r3, r2
 8009ab2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d90e      	bls.n	8009ada <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ac8:	4b19      	ldr	r3, [pc, #100]	; (8009b30 <prvSwitchTimerLists+0xbc>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	f7fe f86e 	bl	8007bb4 <vListInsert>
 8009ad8:	e016      	b.n	8009b08 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ada:	2300      	movs	r3, #0
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f7ff fd9d 	bl	8009624 <xTimerGenericCommand>
 8009aea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10a      	bne.n	8009b08 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	603b      	str	r3, [r7, #0]
}
 8009b04:	bf00      	nop
 8009b06:	e7fe      	b.n	8009b06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b08:	4b09      	ldr	r3, [pc, #36]	; (8009b30 <prvSwitchTimerLists+0xbc>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1b4      	bne.n	8009a7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b12:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <prvSwitchTimerLists+0xbc>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <prvSwitchTimerLists+0xc0>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a04      	ldr	r2, [pc, #16]	; (8009b30 <prvSwitchTimerLists+0xbc>)
 8009b1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b20:	4a04      	ldr	r2, [pc, #16]	; (8009b34 <prvSwitchTimerLists+0xc0>)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6013      	str	r3, [r2, #0]
}
 8009b26:	bf00      	nop
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20003e2c 	.word	0x20003e2c
 8009b34:	20003e30 	.word	0x20003e30

08009b38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b3e:	f000 f92d 	bl	8009d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b42:	4b15      	ldr	r3, [pc, #84]	; (8009b98 <prvCheckForValidListAndQueue+0x60>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d120      	bne.n	8009b8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b4a:	4814      	ldr	r0, [pc, #80]	; (8009b9c <prvCheckForValidListAndQueue+0x64>)
 8009b4c:	f7fd ffe4 	bl	8007b18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b50:	4813      	ldr	r0, [pc, #76]	; (8009ba0 <prvCheckForValidListAndQueue+0x68>)
 8009b52:	f7fd ffe1 	bl	8007b18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b56:	4b13      	ldr	r3, [pc, #76]	; (8009ba4 <prvCheckForValidListAndQueue+0x6c>)
 8009b58:	4a10      	ldr	r2, [pc, #64]	; (8009b9c <prvCheckForValidListAndQueue+0x64>)
 8009b5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b5c:	4b12      	ldr	r3, [pc, #72]	; (8009ba8 <prvCheckForValidListAndQueue+0x70>)
 8009b5e:	4a10      	ldr	r2, [pc, #64]	; (8009ba0 <prvCheckForValidListAndQueue+0x68>)
 8009b60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b62:	2300      	movs	r3, #0
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	4b11      	ldr	r3, [pc, #68]	; (8009bac <prvCheckForValidListAndQueue+0x74>)
 8009b68:	4a11      	ldr	r2, [pc, #68]	; (8009bb0 <prvCheckForValidListAndQueue+0x78>)
 8009b6a:	2110      	movs	r1, #16
 8009b6c:	200a      	movs	r0, #10
 8009b6e:	f7fe f8eb 	bl	8007d48 <xQueueGenericCreateStatic>
 8009b72:	4603      	mov	r3, r0
 8009b74:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <prvCheckForValidListAndQueue+0x60>)
 8009b76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <prvCheckForValidListAndQueue+0x60>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b80:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <prvCheckForValidListAndQueue+0x60>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	490b      	ldr	r1, [pc, #44]	; (8009bb4 <prvCheckForValidListAndQueue+0x7c>)
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7fe fd8a 	bl	80086a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b8c:	f000 f936 	bl	8009dfc <vPortExitCritical>
}
 8009b90:	bf00      	nop
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20003e34 	.word	0x20003e34
 8009b9c:	20003e04 	.word	0x20003e04
 8009ba0:	20003e18 	.word	0x20003e18
 8009ba4:	20003e2c 	.word	0x20003e2c
 8009ba8:	20003e30 	.word	0x20003e30
 8009bac:	20003ee0 	.word	0x20003ee0
 8009bb0:	20003e40 	.word	0x20003e40
 8009bb4:	08019754 	.word	0x08019754

08009bb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3b04      	subs	r3, #4
 8009bc8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3b04      	subs	r3, #4
 8009bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f023 0201 	bic.w	r2, r3, #1
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3b04      	subs	r3, #4
 8009be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009be8:	4a08      	ldr	r2, [pc, #32]	; (8009c0c <pxPortInitialiseStack+0x54>)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3b14      	subs	r3, #20
 8009bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	3b20      	subs	r3, #32
 8009bfe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c00:	68fb      	ldr	r3, [r7, #12]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bc80      	pop	{r7}
 8009c0a:	4770      	bx	lr
 8009c0c:	08009c11 	.word	0x08009c11

08009c10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c1a:	4b12      	ldr	r3, [pc, #72]	; (8009c64 <prvTaskExitError+0x54>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c22:	d00a      	beq.n	8009c3a <prvTaskExitError+0x2a>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60fb      	str	r3, [r7, #12]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <prvTaskExitError+0x28>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	60bb      	str	r3, [r7, #8]
}
 8009c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c4e:	bf00      	nop
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0fc      	beq.n	8009c50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc80      	pop	{r7}
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20000018 	.word	0x20000018
	...

08009c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c70:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <pxCurrentTCBConst2>)
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	6808      	ldr	r0, [r1, #0]
 8009c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c7a:	f380 8809 	msr	PSP, r0
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f04f 0000 	mov.w	r0, #0
 8009c86:	f380 8811 	msr	BASEPRI, r0
 8009c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009c8e:	4770      	bx	lr

08009c90 <pxCurrentTCBConst2>:
 8009c90:	20003904 	.word	0x20003904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop

08009c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009c98:	4806      	ldr	r0, [pc, #24]	; (8009cb4 <prvPortStartFirstTask+0x1c>)
 8009c9a:	6800      	ldr	r0, [r0, #0]
 8009c9c:	6800      	ldr	r0, [r0, #0]
 8009c9e:	f380 8808 	msr	MSP, r0
 8009ca2:	b662      	cpsie	i
 8009ca4:	b661      	cpsie	f
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	df00      	svc	0
 8009cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed08 	.word	0xe000ed08

08009cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cbe:	4b32      	ldr	r3, [pc, #200]	; (8009d88 <xPortStartScheduler+0xd0>)
 8009cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22ff      	movs	r2, #255	; 0xff
 8009cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cd8:	78fb      	ldrb	r3, [r7, #3]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4b2a      	ldr	r3, [pc, #168]	; (8009d8c <xPortStartScheduler+0xd4>)
 8009ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ce6:	4b2a      	ldr	r3, [pc, #168]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009ce8:	2207      	movs	r2, #7
 8009cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cec:	e009      	b.n	8009d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009cee:	4b28      	ldr	r3, [pc, #160]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	4a26      	ldr	r2, [pc, #152]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0a:	2b80      	cmp	r3, #128	; 0x80
 8009d0c:	d0ef      	beq.n	8009cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d0e:	4b20      	ldr	r3, [pc, #128]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f1c3 0307 	rsb	r3, r3, #7
 8009d16:	2b04      	cmp	r3, #4
 8009d18:	d00a      	beq.n	8009d30 <xPortStartScheduler+0x78>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	60bb      	str	r3, [r7, #8]
}
 8009d2c:	bf00      	nop
 8009d2e:	e7fe      	b.n	8009d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d30:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	021b      	lsls	r3, r3, #8
 8009d36:	4a16      	ldr	r2, [pc, #88]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d3a:	4b15      	ldr	r3, [pc, #84]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d42:	4a13      	ldr	r2, [pc, #76]	; (8009d90 <xPortStartScheduler+0xd8>)
 8009d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <xPortStartScheduler+0xdc>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a10      	ldr	r2, [pc, #64]	; (8009d94 <xPortStartScheduler+0xdc>)
 8009d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d5a:	4b0e      	ldr	r3, [pc, #56]	; (8009d94 <xPortStartScheduler+0xdc>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a0d      	ldr	r2, [pc, #52]	; (8009d94 <xPortStartScheduler+0xdc>)
 8009d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d66:	f000 f8b9 	bl	8009edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d6a:	4b0b      	ldr	r3, [pc, #44]	; (8009d98 <xPortStartScheduler+0xe0>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d70:	f7ff ff92 	bl	8009c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d74:	f7ff f89a 	bl	8008eac <vTaskSwitchContext>
	prvTaskExitError();
 8009d78:	f7ff ff4a 	bl	8009c10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	e000e400 	.word	0xe000e400
 8009d8c:	20003f30 	.word	0x20003f30
 8009d90:	20003f34 	.word	0x20003f34
 8009d94:	e000ed20 	.word	0xe000ed20
 8009d98:	20000018 	.word	0x20000018

08009d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	607b      	str	r3, [r7, #4]
}
 8009db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009db6:	4b0f      	ldr	r3, [pc, #60]	; (8009df4 <vPortEnterCritical+0x58>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	4a0d      	ldr	r2, [pc, #52]	; (8009df4 <vPortEnterCritical+0x58>)
 8009dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dc0:	4b0c      	ldr	r3, [pc, #48]	; (8009df4 <vPortEnterCritical+0x58>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d10f      	bne.n	8009de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <vPortEnterCritical+0x5c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	603b      	str	r3, [r7, #0]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <vPortEnterCritical+0x4a>
	}
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000018 	.word	0x20000018
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e02:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <vPortExitCritical+0x4c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <vPortExitCritical+0x24>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	607b      	str	r3, [r7, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e20:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <vPortExitCritical+0x4c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	4a08      	ldr	r2, [pc, #32]	; (8009e48 <vPortExitCritical+0x4c>)
 8009e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e2a:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <vPortExitCritical+0x4c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d105      	bne.n	8009e3e <vPortExitCritical+0x42>
 8009e32:	2300      	movs	r3, #0
 8009e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	f383 8811 	msr	BASEPRI, r3
}
 8009e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e3e:	bf00      	nop
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr
 8009e48:	20000018 	.word	0x20000018
 8009e4c:	00000000 	.word	0x00000000

08009e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e50:	f3ef 8009 	mrs	r0, PSP
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <pxCurrentTCBConst>)
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e60:	6010      	str	r0, [r2, #0]
 8009e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e6a:	f380 8811 	msr	BASEPRI, r0
 8009e6e:	f7ff f81d 	bl	8008eac <vTaskSwitchContext>
 8009e72:	f04f 0000 	mov.w	r0, #0
 8009e76:	f380 8811 	msr	BASEPRI, r0
 8009e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009e7e:	6819      	ldr	r1, [r3, #0]
 8009e80:	6808      	ldr	r0, [r1, #0]
 8009e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e86:	f380 8809 	msr	PSP, r0
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	4770      	bx	lr

08009e90 <pxCurrentTCBConst>:
 8009e90:	20003904 	.word	0x20003904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	607b      	str	r3, [r7, #4]
}
 8009eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb2:	f7fe ff3d 	bl	8008d30 <xTaskIncrementTick>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <SysTick_Handler+0x40>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <vPortSetupTimerInterrupt+0x30>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ee6:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <vPortSetupTimerInterrupt+0x34>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <vPortSetupTimerInterrupt+0x38>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a09      	ldr	r2, [pc, #36]	; (8009f18 <vPortSetupTimerInterrupt+0x3c>)
 8009ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef6:	099b      	lsrs	r3, r3, #6
 8009ef8:	4a08      	ldr	r2, [pc, #32]	; (8009f1c <vPortSetupTimerInterrupt+0x40>)
 8009efa:	3b01      	subs	r3, #1
 8009efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009efe:	4b03      	ldr	r3, [pc, #12]	; (8009f0c <vPortSetupTimerInterrupt+0x30>)
 8009f00:	2207      	movs	r2, #7
 8009f02:	601a      	str	r2, [r3, #0]
}
 8009f04:	bf00      	nop
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bc80      	pop	{r7}
 8009f0a:	4770      	bx	lr
 8009f0c:	e000e010 	.word	0xe000e010
 8009f10:	e000e018 	.word	0xe000e018
 8009f14:	2000000c 	.word	0x2000000c
 8009f18:	10624dd3 	.word	0x10624dd3
 8009f1c:	e000e014 	.word	0xe000e014

08009f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f26:	f3ef 8305 	mrs	r3, IPSR
 8009f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b0f      	cmp	r3, #15
 8009f30:	d914      	bls.n	8009f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f32:	4a16      	ldr	r2, [pc, #88]	; (8009f8c <vPortValidateInterruptPriority+0x6c>)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f3c:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <vPortValidateInterruptPriority+0x70>)
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	7afa      	ldrb	r2, [r7, #11]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d20a      	bcs.n	8009f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	607b      	str	r3, [r7, #4]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f5c:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <vPortValidateInterruptPriority+0x74>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f64:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <vPortValidateInterruptPriority+0x78>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d90a      	bls.n	8009f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	603b      	str	r3, [r7, #0]
}
 8009f7e:	bf00      	nop
 8009f80:	e7fe      	b.n	8009f80 <vPortValidateInterruptPriority+0x60>
	}
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr
 8009f8c:	e000e3f0 	.word	0xe000e3f0
 8009f90:	20003f30 	.word	0x20003f30
 8009f94:	e000ed0c 	.word	0xe000ed0c
 8009f98:	20003f34 	.word	0x20003f34

08009f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08a      	sub	sp, #40	; 0x28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fa8:	f7fe fe08 	bl	8008bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fac:	4b58      	ldr	r3, [pc, #352]	; (800a110 <pvPortMalloc+0x174>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fb4:	f000 f910 	bl	800a1d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fb8:	4b56      	ldr	r3, [pc, #344]	; (800a114 <pvPortMalloc+0x178>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f040 808e 	bne.w	800a0e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d01d      	beq.n	800a008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009fcc:	2208      	movs	r2, #8
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d014      	beq.n	800a008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f023 0307 	bic.w	r3, r3, #7
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f003 0307 	and.w	r3, r3, #7
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <pvPortMalloc+0x6c>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	617b      	str	r3, [r7, #20]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d069      	beq.n	800a0e2 <pvPortMalloc+0x146>
 800a00e:	4b42      	ldr	r3, [pc, #264]	; (800a118 <pvPortMalloc+0x17c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d864      	bhi.n	800a0e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a018:	4b40      	ldr	r3, [pc, #256]	; (800a11c <pvPortMalloc+0x180>)
 800a01a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a01c:	4b3f      	ldr	r3, [pc, #252]	; (800a11c <pvPortMalloc+0x180>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a022:	e004      	b.n	800a02e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	429a      	cmp	r2, r3
 800a036:	d903      	bls.n	800a040 <pvPortMalloc+0xa4>
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1f1      	bne.n	800a024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a040:	4b33      	ldr	r3, [pc, #204]	; (800a110 <pvPortMalloc+0x174>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a046:	429a      	cmp	r2, r3
 800a048:	d04b      	beq.n	800a0e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2208      	movs	r2, #8
 800a050:	4413      	add	r3, r2
 800a052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	1ad2      	subs	r2, r2, r3
 800a064:	2308      	movs	r3, #8
 800a066:	005b      	lsls	r3, r3, #1
 800a068:	429a      	cmp	r2, r3
 800a06a:	d91f      	bls.n	800a0ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a06c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <pvPortMalloc+0xf8>
	__asm volatile
 800a07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a082:	f383 8811 	msr	BASEPRI, r3
 800a086:	f3bf 8f6f 	isb	sy
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	613b      	str	r3, [r7, #16]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0a6:	69b8      	ldr	r0, [r7, #24]
 800a0a8:	f000 f8f8 	bl	800a29c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0ac:	4b1a      	ldr	r3, [pc, #104]	; (800a118 <pvPortMalloc+0x17c>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	1ad3      	subs	r3, r2, r3
 800a0b6:	4a18      	ldr	r2, [pc, #96]	; (800a118 <pvPortMalloc+0x17c>)
 800a0b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0ba:	4b17      	ldr	r3, [pc, #92]	; (800a118 <pvPortMalloc+0x17c>)
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	4b18      	ldr	r3, [pc, #96]	; (800a120 <pvPortMalloc+0x184>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d203      	bcs.n	800a0ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <pvPortMalloc+0x17c>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a15      	ldr	r2, [pc, #84]	; (800a120 <pvPortMalloc+0x184>)
 800a0cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d0:	685a      	ldr	r2, [r3, #4]
 800a0d2:	4b10      	ldr	r3, [pc, #64]	; (800a114 <pvPortMalloc+0x178>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a0e2:	f7fe fd79 	bl	8008bd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	f003 0307 	and.w	r3, r3, #7
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00a      	beq.n	800a106 <pvPortMalloc+0x16a>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	60fb      	str	r3, [r7, #12]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <pvPortMalloc+0x168>
	return pvReturn;
 800a106:	69fb      	ldr	r3, [r7, #28]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3728      	adds	r7, #40	; 0x28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20006650 	.word	0x20006650
 800a114:	2000665c 	.word	0x2000665c
 800a118:	20006654 	.word	0x20006654
 800a11c:	20006648 	.word	0x20006648
 800a120:	20006658 	.word	0x20006658

0800a124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d048      	beq.n	800a1c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a136:	2308      	movs	r3, #8
 800a138:	425b      	negs	r3, r3
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4413      	add	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	4b21      	ldr	r3, [pc, #132]	; (800a1d0 <vPortFree+0xac>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10a      	bne.n	800a168 <vPortFree+0x44>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	60fb      	str	r3, [r7, #12]
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00a      	beq.n	800a186 <vPortFree+0x62>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	60bb      	str	r3, [r7, #8]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	4b11      	ldr	r3, [pc, #68]	; (800a1d0 <vPortFree+0xac>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4013      	ands	r3, r2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d019      	beq.n	800a1c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d115      	bne.n	800a1c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <vPortFree+0xac>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	43db      	mvns	r3, r3
 800a1a6:	401a      	ands	r2, r3
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1ac:	f7fe fd06 	bl	8008bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	4b07      	ldr	r3, [pc, #28]	; (800a1d4 <vPortFree+0xb0>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	4a06      	ldr	r2, [pc, #24]	; (800a1d4 <vPortFree+0xb0>)
 800a1bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1be:	6938      	ldr	r0, [r7, #16]
 800a1c0:	f000 f86c 	bl	800a29c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a1c4:	f7fe fd08 	bl	8008bd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a1c8:	bf00      	nop
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	2000665c 	.word	0x2000665c
 800a1d4:	20006654 	.word	0x20006654

0800a1d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1de:	f242 7310 	movw	r3, #10000	; 0x2710
 800a1e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a1e4:	4b27      	ldr	r3, [pc, #156]	; (800a284 <prvHeapInit+0xac>)
 800a1e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f003 0307 	and.w	r3, r3, #7
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00c      	beq.n	800a20c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3307      	adds	r3, #7
 800a1f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f023 0307 	bic.w	r3, r3, #7
 800a1fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	4a1f      	ldr	r2, [pc, #124]	; (800a284 <prvHeapInit+0xac>)
 800a208:	4413      	add	r3, r2
 800a20a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a210:	4a1d      	ldr	r2, [pc, #116]	; (800a288 <prvHeapInit+0xb0>)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a216:	4b1c      	ldr	r3, [pc, #112]	; (800a288 <prvHeapInit+0xb0>)
 800a218:	2200      	movs	r2, #0
 800a21a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	4413      	add	r3, r2
 800a222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a224:	2208      	movs	r2, #8
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f023 0307 	bic.w	r3, r3, #7
 800a232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4a15      	ldr	r2, [pc, #84]	; (800a28c <prvHeapInit+0xb4>)
 800a238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a23a:	4b14      	ldr	r3, [pc, #80]	; (800a28c <prvHeapInit+0xb4>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2200      	movs	r2, #0
 800a240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <prvHeapInit+0xb4>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	1ad2      	subs	r2, r2, r3
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a258:	4b0c      	ldr	r3, [pc, #48]	; (800a28c <prvHeapInit+0xb4>)
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	4a0a      	ldr	r2, [pc, #40]	; (800a290 <prvHeapInit+0xb8>)
 800a266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	4a09      	ldr	r2, [pc, #36]	; (800a294 <prvHeapInit+0xbc>)
 800a26e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a270:	4b09      	ldr	r3, [pc, #36]	; (800a298 <prvHeapInit+0xc0>)
 800a272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a276:	601a      	str	r2, [r3, #0]
}
 800a278:	bf00      	nop
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bc80      	pop	{r7}
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	20003f38 	.word	0x20003f38
 800a288:	20006648 	.word	0x20006648
 800a28c:	20006650 	.word	0x20006650
 800a290:	20006658 	.word	0x20006658
 800a294:	20006654 	.word	0x20006654
 800a298:	2000665c 	.word	0x2000665c

0800a29c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2a4:	4b27      	ldr	r3, [pc, #156]	; (800a344 <prvInsertBlockIntoFreeList+0xa8>)
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e002      	b.n	800a2b0 <prvInsertBlockIntoFreeList+0x14>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d8f7      	bhi.n	800a2aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d108      	bne.n	800a2de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	441a      	add	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	441a      	add	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d118      	bne.n	800a324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	4b14      	ldr	r3, [pc, #80]	; (800a348 <prvInsertBlockIntoFreeList+0xac>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d00d      	beq.n	800a31a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	441a      	add	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	601a      	str	r2, [r3, #0]
 800a318:	e008      	b.n	800a32c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a31a:	4b0b      	ldr	r3, [pc, #44]	; (800a348 <prvInsertBlockIntoFreeList+0xac>)
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	e003      	b.n	800a32c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d002      	beq.n	800a33a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a33a:	bf00      	nop
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr
 800a344:	20006648 	.word	0x20006648
 800a348:	20006650 	.word	0x20006650

0800a34c <rcl_get_zero_initialized_init_options>:
 800a34c:	2000      	movs	r0, #0
 800a34e:	4770      	bx	lr

0800a350 <rcl_init_options_init>:
 800a350:	b084      	sub	sp, #16
 800a352:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a354:	b091      	sub	sp, #68	; 0x44
 800a356:	af17      	add	r7, sp, #92	; 0x5c
 800a358:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d045      	beq.n	800a3ec <rcl_init_options_init+0x9c>
 800a360:	6803      	ldr	r3, [r0, #0]
 800a362:	4606      	mov	r6, r0
 800a364:	b133      	cbz	r3, 800a374 <rcl_init_options_init+0x24>
 800a366:	2464      	movs	r4, #100	; 0x64
 800a368:	4620      	mov	r0, r4
 800a36a:	b011      	add	sp, #68	; 0x44
 800a36c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a370:	b004      	add	sp, #16
 800a372:	4770      	bx	lr
 800a374:	4638      	mov	r0, r7
 800a376:	f001 f8ab 	bl	800b4d0 <rcutils_allocator_is_valid>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d036      	beq.n	800a3ec <rcl_init_options_init+0x9c>
 800a37e:	2050      	movs	r0, #80	; 0x50
 800a380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a382:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a384:	4798      	blx	r3
 800a386:	4604      	mov	r4, r0
 800a388:	6030      	str	r0, [r6, #0]
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d030      	beq.n	800a3f0 <rcl_init_options_init+0xa0>
 800a38e:	4605      	mov	r5, r0
 800a390:	46bc      	mov	ip, r7
 800a392:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a398:	f8dc 3000 	ldr.w	r3, [ip]
 800a39c:	a802      	add	r0, sp, #8
 800a39e:	602b      	str	r3, [r5, #0]
 800a3a0:	3418      	adds	r4, #24
 800a3a2:	ad02      	add	r5, sp, #8
 800a3a4:	f001 fb16 	bl	800b9d4 <rmw_get_zero_initialized_init_options>
 800a3a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3b4:	f8d6 c000 	ldr.w	ip, [r6]
 800a3b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a3bc:	e884 0003 	stmia.w	r4, {r0, r1}
 800a3c0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a3c4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a3c8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a3cc:	f10c 0018 	add.w	r0, ip, #24
 800a3d0:	f001 fbcc 	bl	800bb6c <rmw_init_options_init>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d0c6      	beq.n	800a368 <rcl_init_options_init+0x18>
 800a3da:	6830      	ldr	r0, [r6, #0]
 800a3dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a3de:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a3e0:	4798      	blx	r3
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f009 fa94 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	e7bd      	b.n	800a368 <rcl_init_options_init+0x18>
 800a3ec:	240b      	movs	r4, #11
 800a3ee:	e7bb      	b.n	800a368 <rcl_init_options_init+0x18>
 800a3f0:	240a      	movs	r4, #10
 800a3f2:	e7b9      	b.n	800a368 <rcl_init_options_init+0x18>

0800a3f4 <rcl_init_options_fini>:
 800a3f4:	b570      	push	{r4, r5, r6, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	b1c0      	cbz	r0, 800a42c <rcl_init_options_fini+0x38>
 800a3fa:	6804      	ldr	r4, [r0, #0]
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	b1ac      	cbz	r4, 800a42c <rcl_init_options_fini+0x38>
 800a400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a402:	ad01      	add	r5, sp, #4
 800a404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	a801      	add	r0, sp, #4
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	f001 f860 	bl	800b4d0 <rcutils_allocator_is_valid>
 800a410:	b160      	cbz	r0, 800a42c <rcl_init_options_fini+0x38>
 800a412:	6830      	ldr	r0, [r6, #0]
 800a414:	3018      	adds	r0, #24
 800a416:	f001 fc43 	bl	800bca0 <rmw_init_options_fini>
 800a41a:	4604      	mov	r4, r0
 800a41c:	b950      	cbnz	r0, 800a434 <rcl_init_options_fini+0x40>
 800a41e:	6830      	ldr	r0, [r6, #0]
 800a420:	9b02      	ldr	r3, [sp, #8]
 800a422:	9905      	ldr	r1, [sp, #20]
 800a424:	4798      	blx	r3
 800a426:	4620      	mov	r0, r4
 800a428:	b006      	add	sp, #24
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	240b      	movs	r4, #11
 800a42e:	4620      	mov	r0, r4
 800a430:	b006      	add	sp, #24
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	f009 fa6c 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 800a438:	4604      	mov	r4, r0
 800a43a:	e7f8      	b.n	800a42e <rcl_init_options_fini+0x3a>

0800a43c <rcl_init_options_copy>:
 800a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800a444:	2800      	cmp	r0, #0
 800a446:	d070      	beq.n	800a52a <rcl_init_options_copy+0xee>
 800a448:	6806      	ldr	r6, [r0, #0]
 800a44a:	4605      	mov	r5, r0
 800a44c:	2e00      	cmp	r6, #0
 800a44e:	d06c      	beq.n	800a52a <rcl_init_options_copy+0xee>
 800a450:	460c      	mov	r4, r1
 800a452:	2900      	cmp	r1, #0
 800a454:	d069      	beq.n	800a52a <rcl_init_options_copy+0xee>
 800a456:	680b      	ldr	r3, [r1, #0]
 800a458:	b12b      	cbz	r3, 800a466 <rcl_init_options_copy+0x2a>
 800a45a:	2664      	movs	r6, #100	; 0x64
 800a45c:	4630      	mov	r0, r6
 800a45e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800a462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a466:	af10      	add	r7, sp, #64	; 0x40
 800a468:	46bc      	mov	ip, r7
 800a46a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a46c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a470:	6833      	ldr	r3, [r6, #0]
 800a472:	4638      	mov	r0, r7
 800a474:	f8cc 3000 	str.w	r3, [ip]
 800a478:	f001 f82a 	bl	800b4d0 <rcutils_allocator_is_valid>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d054      	beq.n	800a52a <rcl_init_options_copy+0xee>
 800a480:	2050      	movs	r0, #80	; 0x50
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	6939      	ldr	r1, [r7, #16]
 800a486:	4798      	blx	r3
 800a488:	4606      	mov	r6, r0
 800a48a:	6020      	str	r0, [r4, #0]
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f000 8089 	beq.w	800a5a4 <rcl_init_options_copy+0x168>
 800a492:	4684      	mov	ip, r0
 800a494:	46be      	mov	lr, r7
 800a496:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a49a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a49e:	f8de 3000 	ldr.w	r3, [lr]
 800a4a2:	a802      	add	r0, sp, #8
 800a4a4:	f8cc 3000 	str.w	r3, [ip]
 800a4a8:	f001 fa94 	bl	800b9d4 <rmw_get_zero_initialized_init_options>
 800a4ac:	3618      	adds	r6, #24
 800a4ae:	f10d 0c08 	add.w	ip, sp, #8
 800a4b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4c4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a4c8:	e886 0003 	stmia.w	r6, {r0, r1}
 800a4cc:	6826      	ldr	r6, [r4, #0]
 800a4ce:	ab13      	add	r3, sp, #76	; 0x4c
 800a4d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a4d4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a4d8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a4dc:	f106 0018 	add.w	r0, r6, #24
 800a4e0:	f001 fb44 	bl	800bb6c <rmw_init_options_init>
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	bb30      	cbnz	r0, 800a536 <rcl_init_options_copy+0xfa>
 800a4e8:	f8d4 e000 	ldr.w	lr, [r4]
 800a4ec:	f8d5 c000 	ldr.w	ip, [r5]
 800a4f0:	4676      	mov	r6, lr
 800a4f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a4f8:	f8dc 3000 	ldr.w	r3, [ip]
 800a4fc:	f10e 0018 	add.w	r0, lr, #24
 800a500:	6033      	str	r3, [r6, #0]
 800a502:	f001 fbcd 	bl	800bca0 <rmw_init_options_fini>
 800a506:	4680      	mov	r8, r0
 800a508:	b300      	cbz	r0, 800a54c <rcl_init_options_copy+0x110>
 800a50a:	4638      	mov	r0, r7
 800a50c:	f001 f8a8 	bl	800b660 <rcutils_get_error_string>
 800a510:	f001 f8ce 	bl	800b6b0 <rcutils_reset_error>
 800a514:	4620      	mov	r0, r4
 800a516:	f7ff ff6d 	bl	800a3f4 <rcl_init_options_fini>
 800a51a:	4606      	mov	r6, r0
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d19d      	bne.n	800a45c <rcl_init_options_copy+0x20>
 800a520:	4640      	mov	r0, r8
 800a522:	f009 f9f5 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 800a526:	4606      	mov	r6, r0
 800a528:	e798      	b.n	800a45c <rcl_init_options_copy+0x20>
 800a52a:	260b      	movs	r6, #11
 800a52c:	4630      	mov	r0, r6
 800a52e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800a532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6939      	ldr	r1, [r7, #16]
 800a53a:	6820      	ldr	r0, [r4, #0]
 800a53c:	4798      	blx	r3
 800a53e:	4630      	mov	r0, r6
 800a540:	f009 f9e6 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 800a544:	4606      	mov	r6, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	d0ce      	beq.n	800a4e8 <rcl_init_options_copy+0xac>
 800a54a:	e787      	b.n	800a45c <rcl_init_options_copy+0x20>
 800a54c:	f8d4 8000 	ldr.w	r8, [r4]
 800a550:	a802      	add	r0, sp, #8
 800a552:	f001 fa3f 	bl	800b9d4 <rmw_get_zero_initialized_init_options>
 800a556:	ae02      	add	r6, sp, #8
 800a558:	f108 0c18 	add.w	ip, r8, #24
 800a55c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a55e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a562:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a568:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a56a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a56e:	682a      	ldr	r2, [r5, #0]
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a576:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a57a:	f102 0018 	add.w	r0, r2, #24
 800a57e:	f103 0118 	add.w	r1, r3, #24
 800a582:	f001 fb4b 	bl	800bc1c <rmw_init_options_copy>
 800a586:	4606      	mov	r6, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	f43f af67 	beq.w	800a45c <rcl_init_options_copy+0x20>
 800a58e:	4638      	mov	r0, r7
 800a590:	f001 f866 	bl	800b660 <rcutils_get_error_string>
 800a594:	f001 f88c 	bl	800b6b0 <rcutils_reset_error>
 800a598:	4620      	mov	r0, r4
 800a59a:	f7ff ff2b 	bl	800a3f4 <rcl_init_options_fini>
 800a59e:	b118      	cbz	r0, 800a5a8 <rcl_init_options_copy+0x16c>
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	e75b      	b.n	800a45c <rcl_init_options_copy+0x20>
 800a5a4:	260a      	movs	r6, #10
 800a5a6:	e759      	b.n	800a45c <rcl_init_options_copy+0x20>
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f009 f9b1 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	e754      	b.n	800a45c <rcl_init_options_copy+0x20>
 800a5b2:	bf00      	nop

0800a5b4 <rcl_get_zero_initialized_publisher>:
 800a5b4:	4b01      	ldr	r3, [pc, #4]	; (800a5bc <rcl_get_zero_initialized_publisher+0x8>)
 800a5b6:	6818      	ldr	r0, [r3, #0]
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	0801a454 	.word	0x0801a454

0800a5c0 <rcl_publisher_init>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b08f      	sub	sp, #60	; 0x3c
 800a5c6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a5c8:	2f00      	cmp	r7, #0
 800a5ca:	d03a      	beq.n	800a642 <rcl_publisher_init+0x82>
 800a5cc:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4648      	mov	r0, r9
 800a5d4:	4688      	mov	r8, r1
 800a5d6:	4616      	mov	r6, r2
 800a5d8:	461d      	mov	r5, r3
 800a5da:	f000 ff79 	bl	800b4d0 <rcutils_allocator_is_valid>
 800a5de:	b380      	cbz	r0, 800a642 <rcl_publisher_init+0x82>
 800a5e0:	b37c      	cbz	r4, 800a642 <rcl_publisher_init+0x82>
 800a5e2:	f8d4 a000 	ldr.w	sl, [r4]
 800a5e6:	f1ba 0f00 	cmp.w	sl, #0
 800a5ea:	d004      	beq.n	800a5f6 <rcl_publisher_init+0x36>
 800a5ec:	2564      	movs	r5, #100	; 0x64
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	b00f      	add	sp, #60	; 0x3c
 800a5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	f009 fe3e 	bl	8014278 <rcl_node_is_valid>
 800a5fc:	b330      	cbz	r0, 800a64c <rcl_publisher_init+0x8c>
 800a5fe:	b306      	cbz	r6, 800a642 <rcl_publisher_init+0x82>
 800a600:	b1fd      	cbz	r5, 800a642 <rcl_publisher_init+0x82>
 800a602:	46ce      	mov	lr, r9
 800a604:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800a608:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a60c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a610:	f8de 3000 	ldr.w	r3, [lr]
 800a614:	f8cc 3000 	str.w	r3, [ip]
 800a618:	f001 f868 	bl	800b6ec <rcutils_get_zero_initialized_string_map>
 800a61c:	4684      	mov	ip, r0
 800a61e:	ab0e      	add	r3, sp, #56	; 0x38
 800a620:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a624:	f8cd c018 	str.w	ip, [sp, #24]
 800a628:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a62e:	4651      	mov	r1, sl
 800a630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a632:	a806      	add	r0, sp, #24
 800a634:	f001 f8d0 	bl	800b7d8 <rcutils_string_map_init>
 800a638:	b150      	cbz	r0, 800a650 <rcl_publisher_init+0x90>
 800a63a:	280a      	cmp	r0, #10
 800a63c:	d013      	beq.n	800a666 <rcl_publisher_init+0xa6>
 800a63e:	2501      	movs	r5, #1
 800a640:	e7d5      	b.n	800a5ee <rcl_publisher_init+0x2e>
 800a642:	250b      	movs	r5, #11
 800a644:	4628      	mov	r0, r5
 800a646:	b00f      	add	sp, #60	; 0x3c
 800a648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64c:	25c8      	movs	r5, #200	; 0xc8
 800a64e:	e7ce      	b.n	800a5ee <rcl_publisher_init+0x2e>
 800a650:	a806      	add	r0, sp, #24
 800a652:	f009 fb5f 	bl	8013d14 <rcl_get_default_topic_name_substitutions>
 800a656:	4682      	mov	sl, r0
 800a658:	b138      	cbz	r0, 800a66a <rcl_publisher_init+0xaa>
 800a65a:	a806      	add	r0, sp, #24
 800a65c:	f001 f8fa 	bl	800b854 <rcutils_string_map_fini>
 800a660:	f1ba 0f0a 	cmp.w	sl, #10
 800a664:	d1eb      	bne.n	800a63e <rcl_publisher_init+0x7e>
 800a666:	250a      	movs	r5, #10
 800a668:	e7c1      	b.n	800a5ee <rcl_publisher_init+0x2e>
 800a66a:	4640      	mov	r0, r8
 800a66c:	f8cd a01c 	str.w	sl, [sp, #28]
 800a670:	f009 fe0c 	bl	801428c <rcl_node_get_name>
 800a674:	4682      	mov	sl, r0
 800a676:	4640      	mov	r0, r8
 800a678:	f009 fe10 	bl	801429c <rcl_node_get_namespace>
 800a67c:	46ec      	mov	ip, sp
 800a67e:	4686      	mov	lr, r0
 800a680:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a684:	f10d 0b1c 	add.w	fp, sp, #28
 800a688:	f8cd b014 	str.w	fp, [sp, #20]
 800a68c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a690:	f8d9 3000 	ldr.w	r3, [r9]
 800a694:	4628      	mov	r0, r5
 800a696:	f8cc 3000 	str.w	r3, [ip]
 800a69a:	4651      	mov	r1, sl
 800a69c:	4672      	mov	r2, lr
 800a69e:	ab06      	add	r3, sp, #24
 800a6a0:	f009 f9d4 	bl	8013a4c <rcl_expand_topic_name>
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	a806      	add	r0, sp, #24
 800a6a8:	f001 f8d4 	bl	800b854 <rcutils_string_map_fini>
 800a6ac:	b920      	cbnz	r0, 800a6b8 <rcl_publisher_init+0xf8>
 800a6ae:	b15d      	cbz	r5, 800a6c8 <rcl_publisher_init+0x108>
 800a6b0:	2d67      	cmp	r5, #103	; 0x67
 800a6b2:	d002      	beq.n	800a6ba <rcl_publisher_init+0xfa>
 800a6b4:	2d69      	cmp	r5, #105	; 0x69
 800a6b6:	d05f      	beq.n	800a778 <rcl_publisher_init+0x1b8>
 800a6b8:	2501      	movs	r5, #1
 800a6ba:	9807      	ldr	r0, [sp, #28]
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d096      	beq.n	800a5ee <rcl_publisher_init+0x2e>
 800a6c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6c4:	4798      	blx	r3
 800a6c6:	e792      	b.n	800a5ee <rcl_publisher_init+0x2e>
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	f009 fdef 	bl	80142ac <rcl_node_get_options>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d0f2      	beq.n	800a6b8 <rcl_publisher_init+0xf8>
 800a6d2:	9807      	ldr	r0, [sp, #28]
 800a6d4:	f7f5 fdb6 	bl	8000244 <strlen>
 800a6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6dc:	3001      	adds	r0, #1
 800a6de:	4798      	blx	r3
 800a6e0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a6e4:	4681      	mov	r9, r0
 800a6e6:	4650      	mov	r0, sl
 800a6e8:	f7f5 fdac 	bl	8000244 <strlen>
 800a6ec:	4651      	mov	r1, sl
 800a6ee:	1c42      	adds	r2, r0, #1
 800a6f0:	4648      	mov	r0, r9
 800a6f2:	f00d fb7b 	bl	8017dec <memcpy>
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4648      	mov	r0, r9
 800a6fa:	a908      	add	r1, sp, #32
 800a6fc:	f001 f996 	bl	800ba2c <rmw_validate_full_topic_name>
 800a700:	2800      	cmp	r0, #0
 800a702:	d137      	bne.n	800a774 <rcl_publisher_init+0x1b4>
 800a704:	9b08      	ldr	r3, [sp, #32]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d138      	bne.n	800a77c <rcl_publisher_init+0x1bc>
 800a70a:	20c0      	movs	r0, #192	; 0xc0
 800a70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a70e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a710:	4798      	blx	r3
 800a712:	6020      	str	r0, [r4, #0]
 800a714:	b3a0      	cbz	r0, 800a780 <rcl_publisher_init+0x1c0>
 800a716:	4640      	mov	r0, r8
 800a718:	f009 fdd0 	bl	80142bc <rcl_node_get_rmw_handle>
 800a71c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	4631      	mov	r1, r6
 800a724:	463b      	mov	r3, r7
 800a726:	464a      	mov	r2, r9
 800a728:	6825      	ldr	r5, [r4, #0]
 800a72a:	f001 fdc7 	bl	800c2bc <rmw_create_publisher>
 800a72e:	6821      	ldr	r1, [r4, #0]
 800a730:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800a734:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800a738:	b388      	cbz	r0, 800a79e <rcl_publisher_init+0x1de>
 800a73a:	3168      	adds	r1, #104	; 0x68
 800a73c:	f001 fe9a 	bl	800c474 <rmw_publisher_get_actual_qos>
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	4605      	mov	r5, r0
 800a744:	b9f0      	cbnz	r0, 800a784 <rcl_publisher_init+0x1c4>
 800a746:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800a74a:	4618      	mov	r0, r3
 800a74c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800a750:	4639      	mov	r1, r7
 800a752:	2268      	movs	r2, #104	; 0x68
 800a754:	f00d fb4a 	bl	8017dec <memcpy>
 800a758:	f8d8 2000 	ldr.w	r2, [r8]
 800a75c:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800a760:	9807      	ldr	r0, [sp, #28]
 800a762:	b110      	cbz	r0, 800a76a <rcl_publisher_init+0x1aa>
 800a764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a766:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a768:	4798      	blx	r3
 800a76a:	4648      	mov	r0, r9
 800a76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a76e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a770:	4798      	blx	r3
 800a772:	e73c      	b.n	800a5ee <rcl_publisher_init+0x2e>
 800a774:	2501      	movs	r5, #1
 800a776:	e7f3      	b.n	800a760 <rcl_publisher_init+0x1a0>
 800a778:	2567      	movs	r5, #103	; 0x67
 800a77a:	e79e      	b.n	800a6ba <rcl_publisher_init+0xfa>
 800a77c:	2567      	movs	r5, #103	; 0x67
 800a77e:	e7ef      	b.n	800a760 <rcl_publisher_init+0x1a0>
 800a780:	250a      	movs	r5, #10
 800a782:	e7ed      	b.n	800a760 <rcl_publisher_init+0x1a0>
 800a784:	2b00      	cmp	r3, #0
 800a786:	d0f5      	beq.n	800a774 <rcl_publisher_init+0x1b4>
 800a788:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a78c:	b13b      	cbz	r3, 800a79e <rcl_publisher_init+0x1de>
 800a78e:	4640      	mov	r0, r8
 800a790:	f009 fd94 	bl	80142bc <rcl_node_get_rmw_handle>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800a79a:	f001 fe6d 	bl	800c478 <rmw_destroy_publisher>
 800a79e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a7a2:	6820      	ldr	r0, [r4, #0]
 800a7a4:	4798      	blx	r3
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2501      	movs	r5, #1
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	e7d8      	b.n	800a760 <rcl_publisher_init+0x1a0>
 800a7ae:	bf00      	nop

0800a7b0 <rcl_publisher_get_default_options>:
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	466c      	mov	r4, sp
 800a7b6:	4f0d      	ldr	r7, [pc, #52]	; (800a7ec <rcl_publisher_get_default_options+0x3c>)
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	2250      	movs	r2, #80	; 0x50
 800a7bc:	490c      	ldr	r1, [pc, #48]	; (800a7f0 <rcl_publisher_get_default_options+0x40>)
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f00d fb14 	bl	8017dec <memcpy>
 800a7c4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800a7c8:	4668      	mov	r0, sp
 800a7ca:	f000 fe73 	bl	800b4b4 <rcutils_get_default_allocator>
 800a7ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	602b      	str	r3, [r5, #0]
 800a7d6:	f001 f90d 	bl	800b9f4 <rmw_get_default_publisher_options>
 800a7da:	4639      	mov	r1, r7
 800a7dc:	6678      	str	r0, [r7, #100]	; 0x64
 800a7de:	2268      	movs	r2, #104	; 0x68
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f00d fb03 	bl	8017dec <memcpy>
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	b007      	add	sp, #28
 800a7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ec:	20006660 	.word	0x20006660
 800a7f0:	0801a458 	.word	0x0801a458

0800a7f4 <rcl_publish>:
 800a7f4:	b1f8      	cbz	r0, 800a836 <rcl_publish+0x42>
 800a7f6:	6803      	ldr	r3, [r0, #0]
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	b1b3      	cbz	r3, 800a82c <rcl_publish+0x38>
 800a7fe:	4616      	mov	r6, r2
 800a800:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800a804:	b192      	cbz	r2, 800a82c <rcl_publish+0x38>
 800a806:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800a80a:	460d      	mov	r5, r1
 800a80c:	f009 f8a4 	bl	8013958 <rcl_context_is_valid>
 800a810:	b160      	cbz	r0, 800a82c <rcl_publish+0x38>
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800a818:	b140      	cbz	r0, 800a82c <rcl_publish+0x38>
 800a81a:	b155      	cbz	r5, 800a832 <rcl_publish+0x3e>
 800a81c:	4632      	mov	r2, r6
 800a81e:	4629      	mov	r1, r5
 800a820:	f001 fcec 	bl	800c1fc <rmw_publish>
 800a824:	3800      	subs	r0, #0
 800a826:	bf18      	it	ne
 800a828:	2001      	movne	r0, #1
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a830:	bd70      	pop	{r4, r5, r6, pc}
 800a832:	200b      	movs	r0, #11
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a83a:	4770      	bx	lr

0800a83c <rcl_get_zero_initialized_subscription>:
 800a83c:	4b01      	ldr	r3, [pc, #4]	; (800a844 <rcl_get_zero_initialized_subscription+0x8>)
 800a83e:	6818      	ldr	r0, [r3, #0]
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	0801a4a8 	.word	0x0801a4a8

0800a848 <rcl_subscription_init>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	b08f      	sub	sp, #60	; 0x3c
 800a84e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a850:	b1d7      	cbz	r7, 800a888 <rcl_subscription_init+0x40>
 800a852:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800a856:	4604      	mov	r4, r0
 800a858:	4648      	mov	r0, r9
 800a85a:	4688      	mov	r8, r1
 800a85c:	4616      	mov	r6, r2
 800a85e:	461d      	mov	r5, r3
 800a860:	f000 fe36 	bl	800b4d0 <rcutils_allocator_is_valid>
 800a864:	b180      	cbz	r0, 800a888 <rcl_subscription_init+0x40>
 800a866:	b17c      	cbz	r4, 800a888 <rcl_subscription_init+0x40>
 800a868:	4640      	mov	r0, r8
 800a86a:	f009 fd05 	bl	8014278 <rcl_node_is_valid>
 800a86e:	b380      	cbz	r0, 800a8d2 <rcl_subscription_init+0x8a>
 800a870:	b156      	cbz	r6, 800a888 <rcl_subscription_init+0x40>
 800a872:	b14d      	cbz	r5, 800a888 <rcl_subscription_init+0x40>
 800a874:	f8d4 a000 	ldr.w	sl, [r4]
 800a878:	f1ba 0f00 	cmp.w	sl, #0
 800a87c:	d009      	beq.n	800a892 <rcl_subscription_init+0x4a>
 800a87e:	2564      	movs	r5, #100	; 0x64
 800a880:	4628      	mov	r0, r5
 800a882:	b00f      	add	sp, #60	; 0x3c
 800a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a888:	250b      	movs	r5, #11
 800a88a:	4628      	mov	r0, r5
 800a88c:	b00f      	add	sp, #60	; 0x3c
 800a88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a892:	46ce      	mov	lr, r9
 800a894:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800a898:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a89c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a8a0:	f8de 3000 	ldr.w	r3, [lr]
 800a8a4:	f8cc 3000 	str.w	r3, [ip]
 800a8a8:	f000 ff20 	bl	800b6ec <rcutils_get_zero_initialized_string_map>
 800a8ac:	4684      	mov	ip, r0
 800a8ae:	ab0e      	add	r3, sp, #56	; 0x38
 800a8b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a8b4:	f8cd c018 	str.w	ip, [sp, #24]
 800a8b8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8be:	4651      	mov	r1, sl
 800a8c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c2:	a806      	add	r0, sp, #24
 800a8c4:	f000 ff88 	bl	800b7d8 <rcutils_string_map_init>
 800a8c8:	b140      	cbz	r0, 800a8dc <rcl_subscription_init+0x94>
 800a8ca:	280a      	cmp	r0, #10
 800a8cc:	d011      	beq.n	800a8f2 <rcl_subscription_init+0xaa>
 800a8ce:	2501      	movs	r5, #1
 800a8d0:	e7db      	b.n	800a88a <rcl_subscription_init+0x42>
 800a8d2:	25c8      	movs	r5, #200	; 0xc8
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	b00f      	add	sp, #60	; 0x3c
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8dc:	a806      	add	r0, sp, #24
 800a8de:	f009 fa19 	bl	8013d14 <rcl_get_default_topic_name_substitutions>
 800a8e2:	4682      	mov	sl, r0
 800a8e4:	b138      	cbz	r0, 800a8f6 <rcl_subscription_init+0xae>
 800a8e6:	a806      	add	r0, sp, #24
 800a8e8:	f000 ffb4 	bl	800b854 <rcutils_string_map_fini>
 800a8ec:	f1ba 0f0a 	cmp.w	sl, #10
 800a8f0:	d1ed      	bne.n	800a8ce <rcl_subscription_init+0x86>
 800a8f2:	250a      	movs	r5, #10
 800a8f4:	e7c9      	b.n	800a88a <rcl_subscription_init+0x42>
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a8fc:	f009 fcc6 	bl	801428c <rcl_node_get_name>
 800a900:	4682      	mov	sl, r0
 800a902:	4640      	mov	r0, r8
 800a904:	f009 fcca 	bl	801429c <rcl_node_get_namespace>
 800a908:	46ec      	mov	ip, sp
 800a90a:	4686      	mov	lr, r0
 800a90c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a910:	f10d 0b1c 	add.w	fp, sp, #28
 800a914:	f8cd b014 	str.w	fp, [sp, #20]
 800a918:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a91c:	f8d9 3000 	ldr.w	r3, [r9]
 800a920:	4628      	mov	r0, r5
 800a922:	f8cc 3000 	str.w	r3, [ip]
 800a926:	4651      	mov	r1, sl
 800a928:	4672      	mov	r2, lr
 800a92a:	ab06      	add	r3, sp, #24
 800a92c:	f009 f88e 	bl	8013a4c <rcl_expand_topic_name>
 800a930:	4605      	mov	r5, r0
 800a932:	a806      	add	r0, sp, #24
 800a934:	f000 ff8e 	bl	800b854 <rcutils_string_map_fini>
 800a938:	b920      	cbnz	r0, 800a944 <rcl_subscription_init+0xfc>
 800a93a:	b15d      	cbz	r5, 800a954 <rcl_subscription_init+0x10c>
 800a93c:	2d67      	cmp	r5, #103	; 0x67
 800a93e:	d002      	beq.n	800a946 <rcl_subscription_init+0xfe>
 800a940:	2d69      	cmp	r5, #105	; 0x69
 800a942:	d05a      	beq.n	800a9fa <rcl_subscription_init+0x1b2>
 800a944:	2501      	movs	r5, #1
 800a946:	9807      	ldr	r0, [sp, #28]
 800a948:	2800      	cmp	r0, #0
 800a94a:	d09e      	beq.n	800a88a <rcl_subscription_init+0x42>
 800a94c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a94e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a950:	4798      	blx	r3
 800a952:	e79a      	b.n	800a88a <rcl_subscription_init+0x42>
 800a954:	4640      	mov	r0, r8
 800a956:	f009 fca9 	bl	80142ac <rcl_node_get_options>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0f2      	beq.n	800a944 <rcl_subscription_init+0xfc>
 800a95e:	9807      	ldr	r0, [sp, #28]
 800a960:	f7f5 fc70 	bl	8000244 <strlen>
 800a964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a966:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a968:	3001      	adds	r0, #1
 800a96a:	4798      	blx	r3
 800a96c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a970:	4681      	mov	r9, r0
 800a972:	4650      	mov	r0, sl
 800a974:	f7f5 fc66 	bl	8000244 <strlen>
 800a978:	4651      	mov	r1, sl
 800a97a:	1c42      	adds	r2, r0, #1
 800a97c:	4648      	mov	r0, r9
 800a97e:	f00d fa35 	bl	8017dec <memcpy>
 800a982:	462a      	mov	r2, r5
 800a984:	4648      	mov	r0, r9
 800a986:	a908      	add	r1, sp, #32
 800a988:	f001 f850 	bl	800ba2c <rmw_validate_full_topic_name>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d132      	bne.n	800a9f6 <rcl_subscription_init+0x1ae>
 800a990:	9b08      	ldr	r3, [sp, #32]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d133      	bne.n	800a9fe <rcl_subscription_init+0x1b6>
 800a996:	20c8      	movs	r0, #200	; 0xc8
 800a998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a99a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a99c:	4798      	blx	r3
 800a99e:	6020      	str	r0, [r4, #0]
 800a9a0:	b378      	cbz	r0, 800aa02 <rcl_subscription_init+0x1ba>
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	f009 fc8a 	bl	80142bc <rcl_node_get_rmw_handle>
 800a9a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	4631      	mov	r1, r6
 800a9b0:	463b      	mov	r3, r7
 800a9b2:	464a      	mov	r2, r9
 800a9b4:	6825      	ldr	r5, [r4, #0]
 800a9b6:	f001 fdf3 	bl	800c5a0 <rmw_create_subscription>
 800a9ba:	6821      	ldr	r1, [r4, #0]
 800a9bc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800a9c0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800a9c4:	b368      	cbz	r0, 800aa22 <rcl_subscription_init+0x1da>
 800a9c6:	3170      	adds	r1, #112	; 0x70
 800a9c8:	f001 fece 	bl	800c768 <rmw_subscription_get_actual_qos>
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	b9d0      	cbnz	r0, 800aa06 <rcl_subscription_init+0x1be>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a9d6:	2270      	movs	r2, #112	; 0x70
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800a9de:	f00d fa05 	bl	8017dec <memcpy>
 800a9e2:	9807      	ldr	r0, [sp, #28]
 800a9e4:	b110      	cbz	r0, 800a9ec <rcl_subscription_init+0x1a4>
 800a9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a9ea:	4798      	blx	r3
 800a9ec:	4648      	mov	r0, r9
 800a9ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a9f2:	4798      	blx	r3
 800a9f4:	e749      	b.n	800a88a <rcl_subscription_init+0x42>
 800a9f6:	2501      	movs	r5, #1
 800a9f8:	e7f3      	b.n	800a9e2 <rcl_subscription_init+0x19a>
 800a9fa:	2567      	movs	r5, #103	; 0x67
 800a9fc:	e7a3      	b.n	800a946 <rcl_subscription_init+0xfe>
 800a9fe:	2567      	movs	r5, #103	; 0x67
 800aa00:	e7ef      	b.n	800a9e2 <rcl_subscription_init+0x19a>
 800aa02:	250a      	movs	r5, #10
 800aa04:	e7ed      	b.n	800a9e2 <rcl_subscription_init+0x19a>
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0f4      	beq.n	800a9f6 <rcl_subscription_init+0x1ae>
 800aa0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800aa10:	b13b      	cbz	r3, 800aa22 <rcl_subscription_init+0x1da>
 800aa12:	4640      	mov	r0, r8
 800aa14:	f009 fc52 	bl	80142bc <rcl_node_get_rmw_handle>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800aa1e:	f001 fea5 	bl	800c76c <rmw_destroy_subscription>
 800aa22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aa26:	6820      	ldr	r0, [r4, #0]
 800aa28:	4798      	blx	r3
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	2501      	movs	r5, #1
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	e7d7      	b.n	800a9e2 <rcl_subscription_init+0x19a>
 800aa32:	bf00      	nop

0800aa34 <rcl_subscription_get_default_options>:
 800aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa36:	4f12      	ldr	r7, [pc, #72]	; (800aa80 <rcl_subscription_get_default_options+0x4c>)
 800aa38:	b089      	sub	sp, #36	; 0x24
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	2250      	movs	r2, #80	; 0x50
 800aa3e:	4911      	ldr	r1, [pc, #68]	; (800aa84 <rcl_subscription_get_default_options+0x50>)
 800aa40:	4638      	mov	r0, r7
 800aa42:	f00d f9d3 	bl	8017dec <memcpy>
 800aa46:	ac02      	add	r4, sp, #8
 800aa48:	a802      	add	r0, sp, #8
 800aa4a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800aa4e:	f000 fd31 	bl	800b4b4 <rcutils_get_default_allocator>
 800aa52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	466c      	mov	r4, sp
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	f000 ffcf 	bl	800ba00 <rmw_get_default_subscription_options>
 800aa62:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aa66:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800aa6a:	e883 0003 	stmia.w	r3, {r0, r1}
 800aa6e:	2270      	movs	r2, #112	; 0x70
 800aa70:	4639      	mov	r1, r7
 800aa72:	4630      	mov	r0, r6
 800aa74:	f00d f9ba 	bl	8017dec <memcpy>
 800aa78:	4630      	mov	r0, r6
 800aa7a:	b009      	add	sp, #36	; 0x24
 800aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	200066c8 	.word	0x200066c8
 800aa84:	0801a4b0 	.word	0x0801a4b0

0800aa88 <rcl_take>:
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d040      	beq.n	800ab0e <rcl_take+0x86>
 800aa8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa90:	4606      	mov	r6, r0
 800aa92:	6800      	ldr	r0, [r0, #0]
 800aa94:	b09d      	sub	sp, #116	; 0x74
 800aa96:	b390      	cbz	r0, 800aafe <rcl_take+0x76>
 800aa98:	4699      	mov	r9, r3
 800aa9a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800aa9e:	b373      	cbz	r3, 800aafe <rcl_take+0x76>
 800aaa0:	4688      	mov	r8, r1
 800aaa2:	b391      	cbz	r1, 800ab0a <rcl_take+0x82>
 800aaa4:	4617      	mov	r7, r2
 800aaa6:	2a00      	cmp	r2, #0
 800aaa8:	d035      	beq.n	800ab16 <rcl_take+0x8e>
 800aaaa:	463d      	mov	r5, r7
 800aaac:	a802      	add	r0, sp, #8
 800aaae:	f000 ffab 	bl	800ba08 <rmw_get_zero_initialized_message_info>
 800aab2:	f04f 0c00 	mov.w	ip, #0
 800aab6:	ac02      	add	r4, sp, #8
 800aab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aabc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aabe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aac0:	6836      	ldr	r6, [r6, #0]
 800aac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800aac6:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 800aaca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800aace:	463b      	mov	r3, r7
 800aad0:	4620      	mov	r0, r4
 800aad2:	4641      	mov	r1, r8
 800aad4:	f8cd 9000 	str.w	r9, [sp]
 800aad8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800aadc:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
 800aae0:	f001 fea2 	bl	800c828 <rmw_take_with_info>
 800aae4:	4603      	mov	r3, r0
 800aae6:	b9c0      	cbnz	r0, 800ab1a <rcl_take+0x92>
 800aae8:	f240 1291 	movw	r2, #401	; 0x191
 800aaec:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800aaf0:	2900      	cmp	r1, #0
 800aaf2:	bf08      	it	eq
 800aaf4:	4613      	moveq	r3, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	b01d      	add	sp, #116	; 0x74
 800aafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aafe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ab02:	4618      	mov	r0, r3
 800ab04:	b01d      	add	sp, #116	; 0x74
 800ab06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab0a:	230b      	movs	r3, #11
 800ab0c:	e7f3      	b.n	800aaf6 <rcl_take+0x6e>
 800ab0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ab12:	4618      	mov	r0, r3
 800ab14:	4770      	bx	lr
 800ab16:	af10      	add	r7, sp, #64	; 0x40
 800ab18:	e7c7      	b.n	800aaaa <rcl_take+0x22>
 800ab1a:	f008 fef9 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	e7e9      	b.n	800aaf6 <rcl_take+0x6e>
 800ab22:	bf00      	nop

0800ab24 <rcl_subscription_get_rmw_handle>:
 800ab24:	b118      	cbz	r0, 800ab2e <rcl_subscription_get_rmw_handle+0xa>
 800ab26:	6800      	ldr	r0, [r0, #0]
 800ab28:	b108      	cbz	r0, 800ab2e <rcl_subscription_get_rmw_handle+0xa>
 800ab2a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800ab2e:	4770      	bx	lr

0800ab30 <_rclc_check_for_new_data>:
 800ab30:	4603      	mov	r3, r0
 800ab32:	b1e0      	cbz	r0, 800ab6e <_rclc_check_for_new_data+0x3e>
 800ab34:	7802      	ldrb	r2, [r0, #0]
 800ab36:	2a08      	cmp	r2, #8
 800ab38:	d81b      	bhi.n	800ab72 <_rclc_check_for_new_data+0x42>
 800ab3a:	e8df f002 	tbb	[pc, r2]
 800ab3e:	1010      	.short	0x1010
 800ab40:	05121216 	.word	0x05121216
 800ab44:	0505      	.short	0x0505
 800ab46:	14          	.byte	0x14
 800ab47:	00          	.byte	0x00
 800ab48:	6a0a      	ldr	r2, [r1, #32]
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ab4e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ab52:	1a12      	subs	r2, r2, r0
 800ab54:	bf18      	it	ne
 800ab56:	2201      	movne	r2, #1
 800ab58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ab5c:	4770      	bx	lr
 800ab5e:	680a      	ldr	r2, [r1, #0]
 800ab60:	e7f3      	b.n	800ab4a <_rclc_check_for_new_data+0x1a>
 800ab62:	698a      	ldr	r2, [r1, #24]
 800ab64:	e7f1      	b.n	800ab4a <_rclc_check_for_new_data+0x1a>
 800ab66:	688a      	ldr	r2, [r1, #8]
 800ab68:	e7ef      	b.n	800ab4a <_rclc_check_for_new_data+0x1a>
 800ab6a:	690a      	ldr	r2, [r1, #16]
 800ab6c:	e7ed      	b.n	800ab4a <_rclc_check_for_new_data+0x1a>
 800ab6e:	200b      	movs	r0, #11
 800ab70:	4770      	bx	lr
 800ab72:	2200      	movs	r2, #0
 800ab74:	2001      	movs	r0, #1
 800ab76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800ab7a:	4770      	bx	lr

0800ab7c <_rclc_take_new_data>:
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d049      	beq.n	800ac14 <_rclc_take_new_data+0x98>
 800ab80:	b510      	push	{r4, lr}
 800ab82:	7803      	ldrb	r3, [r0, #0]
 800ab84:	4604      	mov	r4, r0
 800ab86:	b08e      	sub	sp, #56	; 0x38
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d84a      	bhi.n	800ac22 <_rclc_take_new_data+0xa6>
 800ab8c:	e8df f003 	tbb	[pc, r3]
 800ab90:	2b121515 	.word	0x2b121515
 800ab94:	0505052b 	.word	0x0505052b
 800ab98:	12          	.byte	0x12
 800ab99:	00          	.byte	0x00
 800ab9a:	6a0b      	ldr	r3, [r1, #32]
 800ab9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	b13b      	cbz	r3, 800abb4 <_rclc_take_new_data+0x38>
 800aba4:	6882      	ldr	r2, [r0, #8]
 800aba6:	f100 0110 	add.w	r1, r0, #16
 800abaa:	6840      	ldr	r0, [r0, #4]
 800abac:	f009 fcca 	bl	8014544 <rcl_take_request>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d131      	bne.n	800ac18 <_rclc_take_new_data+0x9c>
 800abb4:	2000      	movs	r0, #0
 800abb6:	b00e      	add	sp, #56	; 0x38
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	680b      	ldr	r3, [r1, #0]
 800abbc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800abbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d0f6      	beq.n	800abb4 <_rclc_take_new_data+0x38>
 800abc6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800abca:	2300      	movs	r3, #0
 800abcc:	aa02      	add	r2, sp, #8
 800abce:	f7ff ff5b 	bl	800aa88 <rcl_take>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d0ef      	beq.n	800abb6 <_rclc_take_new_data+0x3a>
 800abd6:	f240 1391 	movw	r3, #401	; 0x191
 800abda:	4298      	cmp	r0, r3
 800abdc:	d115      	bne.n	800ac0a <_rclc_take_new_data+0x8e>
 800abde:	2300      	movs	r3, #0
 800abe0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800abe4:	e7e7      	b.n	800abb6 <_rclc_take_new_data+0x3a>
 800abe6:	698b      	ldr	r3, [r1, #24]
 800abe8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800abea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0e0      	beq.n	800abb4 <_rclc_take_new_data+0x38>
 800abf2:	6882      	ldr	r2, [r0, #8]
 800abf4:	f100 0110 	add.w	r1, r0, #16
 800abf8:	6840      	ldr	r0, [r0, #4]
 800abfa:	f008 fe4d 	bl	8013898 <rcl_take_response>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d0d8      	beq.n	800abb4 <_rclc_take_new_data+0x38>
 800ac02:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ac06:	4298      	cmp	r0, r3
 800ac08:	d0d5      	beq.n	800abb6 <_rclc_take_new_data+0x3a>
 800ac0a:	9001      	str	r0, [sp, #4]
 800ac0c:	f000 fd50 	bl	800b6b0 <rcutils_reset_error>
 800ac10:	9801      	ldr	r0, [sp, #4]
 800ac12:	e7d0      	b.n	800abb6 <_rclc_take_new_data+0x3a>
 800ac14:	200b      	movs	r0, #11
 800ac16:	4770      	bx	lr
 800ac18:	f240 2359 	movw	r3, #601	; 0x259
 800ac1c:	4298      	cmp	r0, r3
 800ac1e:	d0de      	beq.n	800abde <_rclc_take_new_data+0x62>
 800ac20:	e7f3      	b.n	800ac0a <_rclc_take_new_data+0x8e>
 800ac22:	2001      	movs	r0, #1
 800ac24:	e7c7      	b.n	800abb6 <_rclc_take_new_data+0x3a>
 800ac26:	bf00      	nop

0800ac28 <rclc_executor_trigger_any>:
 800ac28:	4603      	mov	r3, r0
 800ac2a:	b178      	cbz	r0, 800ac4c <rclc_executor_trigger_any+0x24>
 800ac2c:	b179      	cbz	r1, 800ac4e <rclc_executor_trigger_any+0x26>
 800ac2e:	2200      	movs	r2, #0
 800ac30:	e005      	b.n	800ac3e <rclc_executor_trigger_any+0x16>
 800ac32:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800ac36:	3340      	adds	r3, #64	; 0x40
 800ac38:	b930      	cbnz	r0, 800ac48 <rclc_executor_trigger_any+0x20>
 800ac3a:	4291      	cmp	r1, r2
 800ac3c:	d005      	beq.n	800ac4a <rclc_executor_trigger_any+0x22>
 800ac3e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ac42:	3201      	adds	r2, #1
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d1f4      	bne.n	800ac32 <rclc_executor_trigger_any+0xa>
 800ac48:	4770      	bx	lr
 800ac4a:	4770      	bx	lr
 800ac4c:	4770      	bx	lr
 800ac4e:	4608      	mov	r0, r1
 800ac50:	e7fa      	b.n	800ac48 <rclc_executor_trigger_any+0x20>
 800ac52:	bf00      	nop

0800ac54 <_rclc_execute.part.0>:
 800ac54:	b530      	push	{r4, r5, lr}
 800ac56:	7803      	ldrb	r3, [r0, #0]
 800ac58:	4604      	mov	r4, r0
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	2b08      	cmp	r3, #8
 800ac5e:	d857      	bhi.n	800ad10 <_rclc_execute.part.0+0xbc>
 800ac60:	e8df f003 	tbb	[pc, r3]
 800ac64:	31372820 	.word	0x31372820
 800ac68:	05050540 	.word	0x05050540
 800ac6c:	1b          	.byte	0x1b
 800ac6d:	00          	.byte	0x00
 800ac6e:	2b06      	cmp	r3, #6
 800ac70:	d046      	beq.n	800ad00 <_rclc_execute.part.0+0xac>
 800ac72:	2b07      	cmp	r3, #7
 800ac74:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ac76:	d13d      	bne.n	800acf4 <_rclc_execute.part.0+0xa0>
 800ac78:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ac7c:	6880      	ldr	r0, [r0, #8]
 800ac7e:	4798      	blx	r3
 800ac80:	f104 0510 	add.w	r5, r4, #16
 800ac84:	4629      	mov	r1, r5
 800ac86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ac88:	6860      	ldr	r0, [r4, #4]
 800ac8a:	f009 fc93 	bl	80145b4 <rcl_send_response>
 800ac8e:	b138      	cbz	r0, 800aca0 <_rclc_execute.part.0+0x4c>
 800ac90:	9001      	str	r0, [sp, #4]
 800ac92:	f000 fd0d 	bl	800b6b0 <rcutils_reset_error>
 800ac96:	9801      	ldr	r0, [sp, #4]
 800ac98:	e002      	b.n	800aca0 <_rclc_execute.part.0+0x4c>
 800ac9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ac9c:	4798      	blx	r3
 800ac9e:	2000      	movs	r0, #0
 800aca0:	b003      	add	sp, #12
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800aca8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800acaa:	b96d      	cbnz	r5, 800acc8 <_rclc_execute.part.0+0x74>
 800acac:	4628      	mov	r0, r5
 800acae:	4798      	blx	r3
 800acb0:	4628      	mov	r0, r5
 800acb2:	e7f5      	b.n	800aca0 <_rclc_execute.part.0+0x4c>
 800acb4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800acb8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800acbc:	b9ad      	cbnz	r5, 800acea <_rclc_execute.part.0+0x96>
 800acbe:	4628      	mov	r0, r5
 800acc0:	4798      	blx	r3
 800acc2:	4628      	mov	r0, r5
 800acc4:	e7ec      	b.n	800aca0 <_rclc_execute.part.0+0x4c>
 800acc6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800acc8:	68a0      	ldr	r0, [r4, #8]
 800acca:	4798      	blx	r3
 800accc:	2000      	movs	r0, #0
 800acce:	b003      	add	sp, #12
 800acd0:	bd30      	pop	{r4, r5, pc}
 800acd2:	6840      	ldr	r0, [r0, #4]
 800acd4:	f009 ff32 	bl	8014b3c <rcl_timer_call>
 800acd8:	f240 3321 	movw	r3, #801	; 0x321
 800acdc:	4298      	cmp	r0, r3
 800acde:	d1d6      	bne.n	800ac8e <_rclc_execute.part.0+0x3a>
 800ace0:	2000      	movs	r0, #0
 800ace2:	e7dd      	b.n	800aca0 <_rclc_execute.part.0+0x4c>
 800ace4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ace6:	f100 0110 	add.w	r1, r0, #16
 800acea:	68a0      	ldr	r0, [r4, #8]
 800acec:	4798      	blx	r3
 800acee:	2000      	movs	r0, #0
 800acf0:	b003      	add	sp, #12
 800acf2:	bd30      	pop	{r4, r5, pc}
 800acf4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800acf6:	6880      	ldr	r0, [r0, #8]
 800acf8:	4798      	blx	r3
 800acfa:	f104 0510 	add.w	r5, r4, #16
 800acfe:	e7c1      	b.n	800ac84 <_rclc_execute.part.0+0x30>
 800ad00:	f100 0510 	add.w	r5, r0, #16
 800ad04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ad06:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ad08:	4629      	mov	r1, r5
 800ad0a:	6880      	ldr	r0, [r0, #8]
 800ad0c:	4798      	blx	r3
 800ad0e:	e7b9      	b.n	800ac84 <_rclc_execute.part.0+0x30>
 800ad10:	2001      	movs	r0, #1
 800ad12:	e7c5      	b.n	800aca0 <_rclc_execute.part.0+0x4c>
 800ad14:	0000      	movs	r0, r0
	...

0800ad18 <rclc_executor_init>:
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d064      	beq.n	800ade6 <rclc_executor_init+0xce>
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	460f      	mov	r7, r1
 800ad22:	b0ae      	sub	sp, #184	; 0xb8
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d056      	beq.n	800add6 <rclc_executor_init+0xbe>
 800ad28:	4605      	mov	r5, r0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	469a      	mov	sl, r3
 800ad30:	f000 fbce 	bl	800b4d0 <rcutils_allocator_is_valid>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d04e      	beq.n	800add6 <rclc_executor_init+0xbe>
 800ad38:	2e00      	cmp	r6, #0
 800ad3a:	d04c      	beq.n	800add6 <rclc_executor_init+0xbe>
 800ad3c:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 800ad40:	e9d9 8900 	ldrd	r8, r9, [r9]
 800ad44:	2280      	movs	r2, #128	; 0x80
 800ad46:	492a      	ldr	r1, [pc, #168]	; (800adf0 <rclc_executor_init+0xd8>)
 800ad48:	2400      	movs	r4, #0
 800ad4a:	a80e      	add	r0, sp, #56	; 0x38
 800ad4c:	f00d f84e 	bl	8017dec <memcpy>
 800ad50:	2280      	movs	r2, #128	; 0x80
 800ad52:	a90e      	add	r1, sp, #56	; 0x38
 800ad54:	4628      	mov	r0, r5
 800ad56:	f00d f849 	bl	8017dec <memcpy>
 800ad5a:	602f      	str	r7, [r5, #0]
 800ad5c:	466f      	mov	r7, sp
 800ad5e:	4668      	mov	r0, sp
 800ad60:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800ad64:	f00a f942 	bl	8014fec <rcl_get_zero_initialized_wait_set>
 800ad68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad6a:	f105 0c14 	add.w	ip, r5, #20
 800ad6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ad7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ad7e:	683a      	ldr	r2, [r7, #0]
 800ad80:	f8da 3000 	ldr.w	r3, [sl]
 800ad84:	f8da 1010 	ldr.w	r1, [sl, #16]
 800ad88:	f8cc 2000 	str.w	r2, [ip]
 800ad8c:	01b0      	lsls	r0, r6, #6
 800ad8e:	e9c5 8918 	strd	r8, r9, [r5, #96]	; 0x60
 800ad92:	f8c5 a010 	str.w	sl, [r5, #16]
 800ad96:	4798      	blx	r3
 800ad98:	6068      	str	r0, [r5, #4]
 800ad9a:	b908      	cbnz	r0, 800ada0 <rclc_executor_init+0x88>
 800ad9c:	e025      	b.n	800adea <rclc_executor_init+0xd2>
 800ad9e:	6868      	ldr	r0, [r5, #4]
 800ada0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ada4:	4631      	mov	r1, r6
 800ada6:	3401      	adds	r4, #1
 800ada8:	f000 fa28 	bl	800b1fc <rclc_executor_handle_init>
 800adac:	42a6      	cmp	r6, r4
 800adae:	d1f6      	bne.n	800ad9e <rclc_executor_init+0x86>
 800adb0:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800adb4:	f000 fa16 	bl	800b1e4 <rclc_executor_handle_counters_zero_init>
 800adb8:	2000      	movs	r0, #0
 800adba:	4a0e      	ldr	r2, [pc, #56]	; (800adf4 <rclc_executor_init+0xdc>)
 800adbc:	686b      	ldr	r3, [r5, #4]
 800adbe:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 800adc2:	b163      	cbz	r3, 800adde <rclc_executor_init+0xc6>
 800adc4:	692b      	ldr	r3, [r5, #16]
 800adc6:	b153      	cbz	r3, 800adde <rclc_executor_init+0xc6>
 800adc8:	68ab      	ldr	r3, [r5, #8]
 800adca:	b143      	cbz	r3, 800adde <rclc_executor_init+0xc6>
 800adcc:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800add0:	b02e      	add	sp, #184	; 0xb8
 800add2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add6:	200b      	movs	r0, #11
 800add8:	b02e      	add	sp, #184	; 0xb8
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	4618      	mov	r0, r3
 800ade0:	b02e      	add	sp, #184	; 0xb8
 800ade2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade6:	200b      	movs	r0, #11
 800ade8:	4770      	bx	lr
 800adea:	200a      	movs	r0, #10
 800adec:	e7f4      	b.n	800add8 <rclc_executor_init+0xc0>
 800adee:	bf00      	nop
 800adf0:	0801a500 	.word	0x0801a500
 800adf4:	0800ac29 	.word	0x0800ac29
 800adf8:	3b9aca00 	.word	0x3b9aca00
 800adfc:	00000000 	.word	0x00000000

0800ae00 <rclc_executor_add_subscription>:
 800ae00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae04:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800ae08:	b348      	cbz	r0, 800ae5e <rclc_executor_add_subscription+0x5e>
 800ae0a:	b341      	cbz	r1, 800ae5e <rclc_executor_add_subscription+0x5e>
 800ae0c:	b33a      	cbz	r2, 800ae5e <rclc_executor_add_subscription+0x5e>
 800ae0e:	b333      	cbz	r3, 800ae5e <rclc_executor_add_subscription+0x5e>
 800ae10:	4604      	mov	r4, r0
 800ae12:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
 800ae16:	4285      	cmp	r5, r0
 800ae18:	d302      	bcc.n	800ae20 <rclc_executor_add_subscription+0x20>
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae20:	2700      	movs	r7, #0
 800ae22:	f04f 0c01 	mov.w	ip, #1
 800ae26:	6860      	ldr	r0, [r4, #4]
 800ae28:	ea4f 1e85 	mov.w	lr, r5, lsl #6
 800ae2c:	f800 700e 	strb.w	r7, [r0, lr]
 800ae30:	f104 0814 	add.w	r8, r4, #20
 800ae34:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800ae38:	4465      	add	r5, ip
 800ae3a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800ae3e:	6303      	str	r3, [r0, #48]	; 0x30
 800ae40:	7046      	strb	r6, [r0, #1]
 800ae42:	62c7      	str	r7, [r0, #44]	; 0x2c
 800ae44:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800ae48:	4640      	mov	r0, r8
 800ae4a:	60e5      	str	r5, [r4, #12]
 800ae4c:	f00a f8e0 	bl	8015010 <rcl_wait_set_is_valid>
 800ae50:	b940      	cbnz	r0, 800ae64 <rclc_executor_add_subscription+0x64>
 800ae52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ae54:	2000      	movs	r0, #0
 800ae56:	3301      	adds	r3, #1
 800ae58:	64a3      	str	r3, [r4, #72]	; 0x48
 800ae5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5e:	200b      	movs	r0, #11
 800ae60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae64:	4640      	mov	r0, r8
 800ae66:	f00a f8d9 	bl	801501c <rcl_wait_set_fini>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d0f1      	beq.n	800ae52 <rclc_executor_add_subscription+0x52>
 800ae6e:	e7d5      	b.n	800ae1c <rclc_executor_add_subscription+0x1c>

0800ae70 <rclc_executor_add_timer>:
 800ae70:	b308      	cbz	r0, 800aeb6 <rclc_executor_add_timer+0x46>
 800ae72:	b301      	cbz	r1, 800aeb6 <rclc_executor_add_timer+0x46>
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	d301      	bcc.n	800ae84 <rclc_executor_add_timer+0x14>
 800ae80:	2001      	movs	r0, #1
 800ae82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae84:	2502      	movs	r5, #2
 800ae86:	2701      	movs	r7, #1
 800ae88:	2600      	movs	r6, #0
 800ae8a:	6840      	ldr	r0, [r0, #4]
 800ae8c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ae90:	6051      	str	r1, [r2, #4]
 800ae92:	0199      	lsls	r1, r3, #6
 800ae94:	5245      	strh	r5, [r0, r1]
 800ae96:	443b      	add	r3, r7
 800ae98:	f104 0514 	add.w	r5, r4, #20
 800ae9c:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 800aea0:	62d6      	str	r6, [r2, #44]	; 0x2c
 800aea2:	4628      	mov	r0, r5
 800aea4:	60e3      	str	r3, [r4, #12]
 800aea6:	f00a f8b3 	bl	8015010 <rcl_wait_set_is_valid>
 800aeaa:	b930      	cbnz	r0, 800aeba <rclc_executor_add_timer+0x4a>
 800aeac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800aeae:	2000      	movs	r0, #0
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb6:	200b      	movs	r0, #11
 800aeb8:	4770      	bx	lr
 800aeba:	4628      	mov	r0, r5
 800aebc:	f00a f8ae 	bl	801501c <rcl_wait_set_fini>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d0f3      	beq.n	800aeac <rclc_executor_add_timer+0x3c>
 800aec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec6:	bf00      	nop

0800aec8 <rclc_executor_prepare>:
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d03d      	beq.n	800af48 <rclc_executor_prepare+0x80>
 800aecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	f100 0814 	add.w	r8, r0, #20
 800aed4:	4604      	mov	r4, r0
 800aed6:	b09a      	sub	sp, #104	; 0x68
 800aed8:	4640      	mov	r0, r8
 800aeda:	f00a f899 	bl	8015010 <rcl_wait_set_is_valid>
 800aede:	b118      	cbz	r0, 800aee8 <rclc_executor_prepare+0x20>
 800aee0:	2000      	movs	r0, #0
 800aee2:	b01a      	add	sp, #104	; 0x68
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee8:	4640      	mov	r0, r8
 800aeea:	f00a f897 	bl	801501c <rcl_wait_set_fini>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d127      	bne.n	800af42 <rclc_executor_prepare+0x7a>
 800aef2:	4646      	mov	r6, r8
 800aef4:	a80c      	add	r0, sp, #48	; 0x30
 800aef6:	ad0c      	add	r5, sp, #48	; 0x30
 800aef8:	f00a f878 	bl	8014fec <rcl_get_zero_initialized_wait_set>
 800aefc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aefe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800af00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800af04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800af08:	6927      	ldr	r7, [r4, #16]
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	ad04      	add	r5, sp, #16
 800af0e:	6033      	str	r3, [r6, #0]
 800af10:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800af12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af14:	6838      	ldr	r0, [r7, #0]
 800af16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af18:	6826      	ldr	r6, [r4, #0]
 800af1a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800af1e:	6028      	str	r0, [r5, #0]
 800af20:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800af24:	e9cd 3200 	strd	r3, r2, [sp]
 800af28:	4640      	mov	r0, r8
 800af2a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800af2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800af2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af30:	f00a fb96 	bl	8015660 <rcl_wait_set_init>
 800af34:	2800      	cmp	r0, #0
 800af36:	d0d4      	beq.n	800aee2 <rclc_executor_prepare+0x1a>
 800af38:	900b      	str	r0, [sp, #44]	; 0x2c
 800af3a:	f000 fbb9 	bl	800b6b0 <rcutils_reset_error>
 800af3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af40:	e7cf      	b.n	800aee2 <rclc_executor_prepare+0x1a>
 800af42:	f000 fbb5 	bl	800b6b0 <rcutils_reset_error>
 800af46:	e7d4      	b.n	800aef2 <rclc_executor_prepare+0x2a>
 800af48:	200b      	movs	r0, #11
 800af4a:	4770      	bx	lr

0800af4c <rclc_executor_spin_some.part.0>:
 800af4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	f100 0814 	add.w	r8, r0, #20
 800af54:	b083      	sub	sp, #12
 800af56:	4692      	mov	sl, r2
 800af58:	4699      	mov	r9, r3
 800af5a:	4605      	mov	r5, r0
 800af5c:	f7ff ffb4 	bl	800aec8 <rclc_executor_prepare>
 800af60:	4640      	mov	r0, r8
 800af62:	f00a f92b 	bl	80151bc <rcl_wait_set_clear>
 800af66:	4607      	mov	r7, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	f040 80bb 	bne.w	800b0e4 <rclc_executor_spin_some.part.0+0x198>
 800af6e:	68ab      	ldr	r3, [r5, #8]
 800af70:	4604      	mov	r4, r0
 800af72:	b1eb      	cbz	r3, 800afb0 <rclc_executor_spin_some.part.0+0x64>
 800af74:	686e      	ldr	r6, [r5, #4]
 800af76:	01a2      	lsls	r2, r4, #6
 800af78:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800af7c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800af80:	b1b3      	cbz	r3, 800afb0 <rclc_executor_spin_some.part.0+0x64>
 800af82:	5cb3      	ldrb	r3, [r6, r2]
 800af84:	2b08      	cmp	r3, #8
 800af86:	f200 80a6 	bhi.w	800b0d6 <rclc_executor_spin_some.part.0+0x18a>
 800af8a:	e8df f003 	tbb	[pc, r3]
 800af8e:	8686      	.short	0x8686
 800af90:	05787890 	.word	0x05787890
 800af94:	0505      	.short	0x0505
 800af96:	9a          	.byte	0x9a
 800af97:	00          	.byte	0x00
 800af98:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800af9c:	4640      	mov	r0, r8
 800af9e:	6849      	ldr	r1, [r1, #4]
 800afa0:	f00a fc74 	bl	801588c <rcl_wait_set_add_service>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d172      	bne.n	800b08e <rclc_executor_spin_some.part.0+0x142>
 800afa8:	68ab      	ldr	r3, [r5, #8]
 800afaa:	3401      	adds	r4, #1
 800afac:	429c      	cmp	r4, r3
 800afae:	d3e1      	bcc.n	800af74 <rclc_executor_spin_some.part.0+0x28>
 800afb0:	464b      	mov	r3, r9
 800afb2:	4652      	mov	r2, sl
 800afb4:	4640      	mov	r0, r8
 800afb6:	f00a fc97 	bl	80158e8 <rcl_wait>
 800afba:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 8098 	beq.w	800b0f4 <rclc_executor_spin_some.part.0+0x1a8>
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	f040 8086 	bne.w	800b0d6 <rclc_executor_spin_some.part.0+0x18a>
 800afca:	68a9      	ldr	r1, [r5, #8]
 800afcc:	2900      	cmp	r1, #0
 800afce:	f000 80ea 	beq.w	800b1a6 <rclc_executor_spin_some.part.0+0x25a>
 800afd2:	2400      	movs	r4, #0
 800afd4:	f240 1991 	movw	r9, #401	; 0x191
 800afd8:	4626      	mov	r6, r4
 800afda:	e00b      	b.n	800aff4 <rclc_executor_spin_some.part.0+0xa8>
 800afdc:	4641      	mov	r1, r8
 800afde:	f7ff fda7 	bl	800ab30 <_rclc_check_for_new_data>
 800afe2:	4604      	mov	r4, r0
 800afe4:	b110      	cbz	r0, 800afec <rclc_executor_spin_some.part.0+0xa0>
 800afe6:	4548      	cmp	r0, r9
 800afe8:	f040 8082 	bne.w	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800afec:	68a9      	ldr	r1, [r5, #8]
 800afee:	428e      	cmp	r6, r1
 800aff0:	f080 80d5 	bcs.w	800b19e <rclc_executor_spin_some.part.0+0x252>
 800aff4:	686b      	ldr	r3, [r5, #4]
 800aff6:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800affa:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800affe:	3601      	adds	r6, #1
 800b000:	2a00      	cmp	r2, #0
 800b002:	d1eb      	bne.n	800afdc <rclc_executor_spin_some.part.0+0x90>
 800b004:	4618      	mov	r0, r3
 800b006:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800b00a:	4798      	blx	r3
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d06f      	beq.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b010:	68ab      	ldr	r3, [r5, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d06c      	beq.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b016:	2600      	movs	r6, #0
 800b018:	f240 1991 	movw	r9, #401	; 0x191
 800b01c:	e009      	b.n	800b032 <rclc_executor_spin_some.part.0+0xe6>
 800b01e:	4641      	mov	r1, r8
 800b020:	f7ff fdac 	bl	800ab7c <_rclc_take_new_data>
 800b024:	4604      	mov	r4, r0
 800b026:	b108      	cbz	r0, 800b02c <rclc_executor_spin_some.part.0+0xe0>
 800b028:	4548      	cmp	r0, r9
 800b02a:	d161      	bne.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b02c:	68ab      	ldr	r3, [r5, #8]
 800b02e:	429e      	cmp	r6, r3
 800b030:	d207      	bcs.n	800b042 <rclc_executor_spin_some.part.0+0xf6>
 800b032:	6868      	ldr	r0, [r5, #4]
 800b034:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800b038:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b03c:	3601      	adds	r6, #1
 800b03e:	2a00      	cmp	r2, #0
 800b040:	d1ed      	bne.n	800b01e <rclc_executor_spin_some.part.0+0xd2>
 800b042:	2600      	movs	r6, #0
 800b044:	b933      	cbnz	r3, 800b054 <rclc_executor_spin_some.part.0+0x108>
 800b046:	e053      	b.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b048:	2a01      	cmp	r2, #1
 800b04a:	d011      	beq.n	800b070 <rclc_executor_spin_some.part.0+0x124>
 800b04c:	3601      	adds	r6, #1
 800b04e:	429e      	cmp	r6, r3
 800b050:	d244      	bcs.n	800b0dc <rclc_executor_spin_some.part.0+0x190>
 800b052:	2400      	movs	r4, #0
 800b054:	6868      	ldr	r0, [r5, #4]
 800b056:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800b05a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b05e:	2a00      	cmp	r2, #0
 800b060:	d046      	beq.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b062:	7842      	ldrb	r2, [r0, #1]
 800b064:	2a00      	cmp	r2, #0
 800b066:	d1ef      	bne.n	800b048 <rclc_executor_spin_some.part.0+0xfc>
 800b068:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800b06c:	2a00      	cmp	r2, #0
 800b06e:	d0ed      	beq.n	800b04c <rclc_executor_spin_some.part.0+0x100>
 800b070:	f7ff fdf0 	bl	800ac54 <_rclc_execute.part.0>
 800b074:	2800      	cmp	r0, #0
 800b076:	f040 8094 	bne.w	800b1a2 <rclc_executor_spin_some.part.0+0x256>
 800b07a:	68ab      	ldr	r3, [r5, #8]
 800b07c:	e7e6      	b.n	800b04c <rclc_executor_spin_some.part.0+0x100>
 800b07e:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b082:	4640      	mov	r0, r8
 800b084:	6849      	ldr	r1, [r1, #4]
 800b086:	f00a fbd5 	bl	8015834 <rcl_wait_set_add_client>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d08c      	beq.n	800afa8 <rclc_executor_spin_some.part.0+0x5c>
 800b08e:	9001      	str	r0, [sp, #4]
 800b090:	f000 fb0e 	bl	800b6b0 <rcutils_reset_error>
 800b094:	9801      	ldr	r0, [sp, #4]
 800b096:	4607      	mov	r7, r0
 800b098:	e020      	b.n	800b0dc <rclc_executor_spin_some.part.0+0x190>
 800b09a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b09e:	4640      	mov	r0, r8
 800b0a0:	6849      	ldr	r1, [r1, #4]
 800b0a2:	f00a f85f 	bl	8015164 <rcl_wait_set_add_subscription>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f43f af7e 	beq.w	800afa8 <rclc_executor_spin_some.part.0+0x5c>
 800b0ac:	e7ef      	b.n	800b08e <rclc_executor_spin_some.part.0+0x142>
 800b0ae:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	6849      	ldr	r1, [r1, #4]
 800b0b6:	f00a fb8d 	bl	80157d4 <rcl_wait_set_add_timer>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	f43f af74 	beq.w	800afa8 <rclc_executor_spin_some.part.0+0x5c>
 800b0c0:	e7e5      	b.n	800b08e <rclc_executor_spin_some.part.0+0x142>
 800b0c2:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	6849      	ldr	r1, [r1, #4]
 800b0ca:	f00a fb57 	bl	801577c <rcl_wait_set_add_guard_condition>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f af6a 	beq.w	800afa8 <rclc_executor_spin_some.part.0+0x5c>
 800b0d4:	e7db      	b.n	800b08e <rclc_executor_spin_some.part.0+0x142>
 800b0d6:	f000 faeb 	bl	800b6b0 <rcutils_reset_error>
 800b0da:	2701      	movs	r7, #1
 800b0dc:	4638      	mov	r0, r7
 800b0de:	b003      	add	sp, #12
 800b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	f000 fae4 	bl	800b6b0 <rcutils_reset_error>
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	b003      	add	sp, #12
 800b0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f0:	4627      	mov	r7, r4
 800b0f2:	e7f3      	b.n	800b0dc <rclc_executor_spin_some.part.0+0x190>
 800b0f4:	68a9      	ldr	r1, [r5, #8]
 800b0f6:	2900      	cmp	r1, #0
 800b0f8:	d058      	beq.n	800b1ac <rclc_executor_spin_some.part.0+0x260>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	f240 1991 	movw	r9, #401	; 0x191
 800b100:	4626      	mov	r6, r4
 800b102:	e009      	b.n	800b118 <rclc_executor_spin_some.part.0+0x1cc>
 800b104:	4641      	mov	r1, r8
 800b106:	f7ff fd13 	bl	800ab30 <_rclc_check_for_new_data>
 800b10a:	4604      	mov	r4, r0
 800b10c:	b108      	cbz	r0, 800b112 <rclc_executor_spin_some.part.0+0x1c6>
 800b10e:	4548      	cmp	r0, r9
 800b110:	d1ee      	bne.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b112:	68a9      	ldr	r1, [r5, #8]
 800b114:	428e      	cmp	r6, r1
 800b116:	d240      	bcs.n	800b19a <rclc_executor_spin_some.part.0+0x24e>
 800b118:	686b      	ldr	r3, [r5, #4]
 800b11a:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800b11e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800b122:	3601      	adds	r6, #1
 800b124:	2a00      	cmp	r2, #0
 800b126:	d1ed      	bne.n	800b104 <rclc_executor_spin_some.part.0+0x1b8>
 800b128:	4618      	mov	r0, r3
 800b12a:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800b12e:	4798      	blx	r3
 800b130:	2800      	cmp	r0, #0
 800b132:	d0dd      	beq.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b134:	68ab      	ldr	r3, [r5, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0da      	beq.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b13a:	f04f 0a00 	mov.w	sl, #0
 800b13e:	f240 1691 	movw	r6, #401	; 0x191
 800b142:	f240 2959 	movw	r9, #601	; 0x259
 800b146:	e00b      	b.n	800b160 <rclc_executor_spin_some.part.0+0x214>
 800b148:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800b14c:	b113      	cbz	r3, 800b154 <rclc_executor_spin_some.part.0+0x208>
 800b14e:	f7ff fd81 	bl	800ac54 <_rclc_execute.part.0>
 800b152:	bb30      	cbnz	r0, 800b1a2 <rclc_executor_spin_some.part.0+0x256>
 800b154:	68ab      	ldr	r3, [r5, #8]
 800b156:	f10a 0a01 	add.w	sl, sl, #1
 800b15a:	459a      	cmp	sl, r3
 800b15c:	d2be      	bcs.n	800b0dc <rclc_executor_spin_some.part.0+0x190>
 800b15e:	2400      	movs	r4, #0
 800b160:	6868      	ldr	r0, [r5, #4]
 800b162:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800b166:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800b16a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0be      	beq.n	800b0f0 <rclc_executor_spin_some.part.0+0x1a4>
 800b172:	4641      	mov	r1, r8
 800b174:	f7ff fd02 	bl	800ab7c <_rclc_take_new_data>
 800b178:	b118      	cbz	r0, 800b182 <rclc_executor_spin_some.part.0+0x236>
 800b17a:	42b0      	cmp	r0, r6
 800b17c:	d001      	beq.n	800b182 <rclc_executor_spin_some.part.0+0x236>
 800b17e:	4548      	cmp	r0, r9
 800b180:	d10f      	bne.n	800b1a2 <rclc_executor_spin_some.part.0+0x256>
 800b182:	6868      	ldr	r0, [r5, #4]
 800b184:	eb10 000b 	adds.w	r0, r0, fp
 800b188:	d005      	beq.n	800b196 <rclc_executor_spin_some.part.0+0x24a>
 800b18a:	7843      	ldrb	r3, [r0, #1]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0db      	beq.n	800b148 <rclc_executor_spin_some.part.0+0x1fc>
 800b190:	2b01      	cmp	r3, #1
 800b192:	d1df      	bne.n	800b154 <rclc_executor_spin_some.part.0+0x208>
 800b194:	e7db      	b.n	800b14e <rclc_executor_spin_some.part.0+0x202>
 800b196:	270b      	movs	r7, #11
 800b198:	e7a0      	b.n	800b0dc <rclc_executor_spin_some.part.0+0x190>
 800b19a:	686b      	ldr	r3, [r5, #4]
 800b19c:	e7c4      	b.n	800b128 <rclc_executor_spin_some.part.0+0x1dc>
 800b19e:	686b      	ldr	r3, [r5, #4]
 800b1a0:	e730      	b.n	800b004 <rclc_executor_spin_some.part.0+0xb8>
 800b1a2:	4607      	mov	r7, r0
 800b1a4:	e79a      	b.n	800b0dc <rclc_executor_spin_some.part.0+0x190>
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	686b      	ldr	r3, [r5, #4]
 800b1aa:	e72b      	b.n	800b004 <rclc_executor_spin_some.part.0+0xb8>
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	686b      	ldr	r3, [r5, #4]
 800b1b0:	e7ba      	b.n	800b128 <rclc_executor_spin_some.part.0+0x1dc>
 800b1b2:	bf00      	nop

0800b1b4 <rclc_executor_spin>:
 800b1b4:	b1a0      	cbz	r0, 800b1e0 <rclc_executor_spin+0x2c>
 800b1b6:	b5d0      	push	{r4, r6, r7, lr}
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	f008 fbca 	bl	8013958 <rcl_context_is_valid>
 800b1c4:	b140      	cbz	r0, 800b1d8 <rclc_executor_spin+0x24>
 800b1c6:	463b      	mov	r3, r7
 800b1c8:	4632      	mov	r2, r6
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff febe 	bl	800af4c <rclc_executor_spin_some.part.0>
 800b1d0:	f030 0302 	bics.w	r3, r0, #2
 800b1d4:	d0f1      	beq.n	800b1ba <rclc_executor_spin+0x6>
 800b1d6:	bdd0      	pop	{r4, r6, r7, pc}
 800b1d8:	f000 fa6a 	bl	800b6b0 <rcutils_reset_error>
 800b1dc:	2001      	movs	r0, #1
 800b1de:	bdd0      	pop	{r4, r6, r7, pc}
 800b1e0:	200b      	movs	r0, #11
 800b1e2:	4770      	bx	lr

0800b1e4 <rclc_executor_handle_counters_zero_init>:
 800b1e4:	b140      	cbz	r0, 800b1f8 <rclc_executor_handle_counters_zero_init+0x14>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	6043      	str	r3, [r0, #4]
 800b1ec:	6083      	str	r3, [r0, #8]
 800b1ee:	60c3      	str	r3, [r0, #12]
 800b1f0:	6103      	str	r3, [r0, #16]
 800b1f2:	6143      	str	r3, [r0, #20]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	4770      	bx	lr
 800b1f8:	200b      	movs	r0, #11
 800b1fa:	4770      	bx	lr

0800b1fc <rclc_executor_handle_init>:
 800b1fc:	b178      	cbz	r0, 800b21e <rclc_executor_handle_init+0x22>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2209      	movs	r2, #9
 800b202:	b430      	push	{r4, r5}
 800b204:	2000      	movs	r0, #0
 800b206:	2400      	movs	r4, #0
 800b208:	2500      	movs	r5, #0
 800b20a:	801a      	strh	r2, [r3, #0]
 800b20c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800b210:	bc30      	pop	{r4, r5}
 800b212:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800b216:	6359      	str	r1, [r3, #52]	; 0x34
 800b218:	6318      	str	r0, [r3, #48]	; 0x30
 800b21a:	8718      	strh	r0, [r3, #56]	; 0x38
 800b21c:	4770      	bx	lr
 800b21e:	200b      	movs	r0, #11
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop

0800b224 <rclc_support_init_with_options>:
 800b224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b228:	b084      	sub	sp, #16
 800b22a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800b22e:	b390      	cbz	r0, 800b296 <rclc_support_init_with_options+0x72>
 800b230:	461c      	mov	r4, r3
 800b232:	b383      	cbz	r3, 800b296 <rclc_support_init_with_options+0x72>
 800b234:	f1b8 0f00 	cmp.w	r8, #0
 800b238:	d02d      	beq.n	800b296 <rclc_support_init_with_options+0x72>
 800b23a:	4605      	mov	r5, r0
 800b23c:	460e      	mov	r6, r1
 800b23e:	4617      	mov	r7, r2
 800b240:	f7ff f884 	bl	800a34c <rcl_get_zero_initialized_init_options>
 800b244:	4629      	mov	r1, r5
 800b246:	6028      	str	r0, [r5, #0]
 800b248:	4620      	mov	r0, r4
 800b24a:	f7ff f8f7 	bl	800a43c <rcl_init_options_copy>
 800b24e:	4604      	mov	r4, r0
 800b250:	b9d8      	cbnz	r0, 800b28a <rclc_support_init_with_options+0x66>
 800b252:	466c      	mov	r4, sp
 800b254:	4620      	mov	r0, r4
 800b256:	f008 fb6f 	bl	8013938 <rcl_get_zero_initialized_context>
 800b25a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b25e:	f105 0408 	add.w	r4, r5, #8
 800b262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b266:	4623      	mov	r3, r4
 800b268:	4639      	mov	r1, r7
 800b26a:	4630      	mov	r0, r6
 800b26c:	462a      	mov	r2, r5
 800b26e:	f008 fd57 	bl	8013d20 <rcl_init>
 800b272:	4604      	mov	r4, r0
 800b274:	b948      	cbnz	r0, 800b28a <rclc_support_init_with_options+0x66>
 800b276:	4642      	mov	r2, r8
 800b278:	2003      	movs	r0, #3
 800b27a:	f8c5 8018 	str.w	r8, [r5, #24]
 800b27e:	f105 011c 	add.w	r1, r5, #28
 800b282:	f009 f9c7 	bl	8014614 <rcl_clock_init>
 800b286:	4604      	mov	r4, r0
 800b288:	b108      	cbz	r0, 800b28e <rclc_support_init_with_options+0x6a>
 800b28a:	f000 fa11 	bl	800b6b0 <rcutils_reset_error>
 800b28e:	4620      	mov	r0, r4
 800b290:	b004      	add	sp, #16
 800b292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b296:	240b      	movs	r4, #11
 800b298:	4620      	mov	r0, r4
 800b29a:	b004      	add	sp, #16
 800b29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2a0 <rclc_node_init_default>:
 800b2a0:	b3c0      	cbz	r0, 800b314 <rclc_node_init_default+0x74>
 800b2a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	b08f      	sub	sp, #60	; 0x3c
 800b2aa:	b331      	cbz	r1, 800b2fa <rclc_node_init_default+0x5a>
 800b2ac:	4616      	mov	r6, r2
 800b2ae:	b322      	cbz	r2, 800b2fa <rclc_node_init_default+0x5a>
 800b2b0:	461f      	mov	r7, r3
 800b2b2:	b313      	cbz	r3, 800b2fa <rclc_node_init_default+0x5a>
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	f10d 0810 	add.w	r8, sp, #16
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	f10d 091c 	add.w	r9, sp, #28
 800b2c0:	f008 fe66 	bl	8013f90 <rcl_get_zero_initialized_node>
 800b2c4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b2c8:	e884 0003 	stmia.w	r4, {r0, r1}
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f008 fffb 	bl	80142c8 <rcl_node_get_default_options>
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f008 fe5c 	bl	8013f90 <rcl_get_zero_initialized_node>
 800b2d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b2dc:	4632      	mov	r2, r6
 800b2de:	f8cd 9000 	str.w	r9, [sp]
 800b2e2:	f107 0308 	add.w	r3, r7, #8
 800b2e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b2ea:	4629      	mov	r1, r5
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f008 fe59 	bl	8013fa4 <rcl_node_init>
 800b2f2:	b930      	cbnz	r0, 800b302 <rclc_node_init_default+0x62>
 800b2f4:	b00f      	add	sp, #60	; 0x3c
 800b2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2fa:	200b      	movs	r0, #11
 800b2fc:	b00f      	add	sp, #60	; 0x3c
 800b2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b302:	9003      	str	r0, [sp, #12]
 800b304:	f000 f9d4 	bl	800b6b0 <rcutils_reset_error>
 800b308:	f000 f9d2 	bl	800b6b0 <rcutils_reset_error>
 800b30c:	9803      	ldr	r0, [sp, #12]
 800b30e:	b00f      	add	sp, #60	; 0x3c
 800b310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b314:	200b      	movs	r0, #11
 800b316:	4770      	bx	lr

0800b318 <rclc_publisher_init_default>:
 800b318:	b368      	cbz	r0, 800b376 <rclc_publisher_init_default+0x5e>
 800b31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31e:	460d      	mov	r5, r1
 800b320:	b09e      	sub	sp, #120	; 0x78
 800b322:	b321      	cbz	r1, 800b36e <rclc_publisher_init_default+0x56>
 800b324:	4616      	mov	r6, r2
 800b326:	b312      	cbz	r2, 800b36e <rclc_publisher_init_default+0x56>
 800b328:	461f      	mov	r7, r3
 800b32a:	b303      	cbz	r3, 800b36e <rclc_publisher_init_default+0x56>
 800b32c:	4604      	mov	r4, r0
 800b32e:	f7ff f941 	bl	800a5b4 <rcl_get_zero_initialized_publisher>
 800b332:	f10d 0810 	add.w	r8, sp, #16
 800b336:	6020      	str	r0, [r4, #0]
 800b338:	4640      	mov	r0, r8
 800b33a:	f7ff fa39 	bl	800a7b0 <rcl_publisher_get_default_options>
 800b33e:	2250      	movs	r2, #80	; 0x50
 800b340:	490e      	ldr	r1, [pc, #56]	; (800b37c <rclc_publisher_init_default+0x64>)
 800b342:	4640      	mov	r0, r8
 800b344:	f00c fd52 	bl	8017dec <memcpy>
 800b348:	463b      	mov	r3, r7
 800b34a:	4632      	mov	r2, r6
 800b34c:	4629      	mov	r1, r5
 800b34e:	4620      	mov	r0, r4
 800b350:	f8cd 8000 	str.w	r8, [sp]
 800b354:	f7ff f934 	bl	800a5c0 <rcl_publisher_init>
 800b358:	b910      	cbnz	r0, 800b360 <rclc_publisher_init_default+0x48>
 800b35a:	b01e      	add	sp, #120	; 0x78
 800b35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b360:	9003      	str	r0, [sp, #12]
 800b362:	f000 f9a5 	bl	800b6b0 <rcutils_reset_error>
 800b366:	9803      	ldr	r0, [sp, #12]
 800b368:	b01e      	add	sp, #120	; 0x78
 800b36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36e:	200b      	movs	r0, #11
 800b370:	b01e      	add	sp, #120	; 0x78
 800b372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b376:	200b      	movs	r0, #11
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	0801a580 	.word	0x0801a580

0800b380 <rclc_subscription_init_best_effort>:
 800b380:	b368      	cbz	r0, 800b3de <rclc_subscription_init_best_effort+0x5e>
 800b382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	460d      	mov	r5, r1
 800b388:	b0a0      	sub	sp, #128	; 0x80
 800b38a:	b321      	cbz	r1, 800b3d6 <rclc_subscription_init_best_effort+0x56>
 800b38c:	4616      	mov	r6, r2
 800b38e:	b312      	cbz	r2, 800b3d6 <rclc_subscription_init_best_effort+0x56>
 800b390:	461f      	mov	r7, r3
 800b392:	b303      	cbz	r3, 800b3d6 <rclc_subscription_init_best_effort+0x56>
 800b394:	4604      	mov	r4, r0
 800b396:	f7ff fa51 	bl	800a83c <rcl_get_zero_initialized_subscription>
 800b39a:	f10d 0810 	add.w	r8, sp, #16
 800b39e:	6020      	str	r0, [r4, #0]
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	f7ff fb47 	bl	800aa34 <rcl_subscription_get_default_options>
 800b3a6:	2250      	movs	r2, #80	; 0x50
 800b3a8:	490e      	ldr	r1, [pc, #56]	; (800b3e4 <rclc_subscription_init_best_effort+0x64>)
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	f00c fd1e 	bl	8017dec <memcpy>
 800b3b0:	463b      	mov	r3, r7
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f8cd 8000 	str.w	r8, [sp]
 800b3bc:	f7ff fa44 	bl	800a848 <rcl_subscription_init>
 800b3c0:	b910      	cbnz	r0, 800b3c8 <rclc_subscription_init_best_effort+0x48>
 800b3c2:	b020      	add	sp, #128	; 0x80
 800b3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c8:	9003      	str	r0, [sp, #12]
 800b3ca:	f000 f971 	bl	800b6b0 <rcutils_reset_error>
 800b3ce:	9803      	ldr	r0, [sp, #12]
 800b3d0:	b020      	add	sp, #128	; 0x80
 800b3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d6:	200b      	movs	r0, #11
 800b3d8:	b020      	add	sp, #128	; 0x80
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3de:	200b      	movs	r0, #11
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	0801a5d0 	.word	0x0801a5d0

0800b3e8 <rclc_timer_init_default>:
 800b3e8:	b360      	cbz	r0, 800b444 <rclc_timer_init_default+0x5c>
 800b3ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	b08b      	sub	sp, #44	; 0x2c
 800b3f2:	b319      	cbz	r1, 800b43c <rclc_timer_init_default+0x54>
 800b3f4:	4691      	mov	r9, r2
 800b3f6:	4698      	mov	r8, r3
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	f009 faef 	bl	80149dc <rcl_get_zero_initialized_timer>
 800b3fe:	4684      	mov	ip, r0
 800b400:	69a6      	ldr	r6, [r4, #24]
 800b402:	ad03      	add	r5, sp, #12
 800b404:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	f8c7 c000 	str.w	ip, [r7]
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b412:	4638      	mov	r0, r7
 800b414:	e9cd 9800 	strd	r9, r8, [sp]
 800b418:	9302      	str	r3, [sp, #8]
 800b41a:	f104 0208 	add.w	r2, r4, #8
 800b41e:	f104 011c 	add.w	r1, r4, #28
 800b422:	f009 fae1 	bl	80149e8 <rcl_timer_init>
 800b426:	b910      	cbnz	r0, 800b42e <rclc_timer_init_default+0x46>
 800b428:	b00b      	add	sp, #44	; 0x2c
 800b42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b42e:	9009      	str	r0, [sp, #36]	; 0x24
 800b430:	f000 f93e 	bl	800b6b0 <rcutils_reset_error>
 800b434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b436:	b00b      	add	sp, #44	; 0x2c
 800b438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b43c:	200b      	movs	r0, #11
 800b43e:	b00b      	add	sp, #44	; 0x2c
 800b440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b444:	200b      	movs	r0, #11
 800b446:	4770      	bx	lr

0800b448 <__default_zero_allocate>:
 800b448:	f00c bbc2 	b.w	8017bd0 <calloc>

0800b44c <__default_reallocate>:
 800b44c:	f00c be38 	b.w	80180c0 <realloc>

0800b450 <__default_deallocate>:
 800b450:	f00c bcc4 	b.w	8017ddc <free>

0800b454 <__default_allocate>:
 800b454:	f00c bcba 	b.w	8017dcc <malloc>

0800b458 <rcutils_get_zero_initialized_allocator>:
 800b458:	b470      	push	{r4, r5, r6}
 800b45a:	4604      	mov	r4, r0
 800b45c:	4606      	mov	r6, r0
 800b45e:	4d04      	ldr	r5, [pc, #16]	; (800b470 <rcutils_get_zero_initialized_allocator+0x18>)
 800b460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	4630      	mov	r0, r6
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bc70      	pop	{r4, r5, r6}
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	0801a620 	.word	0x0801a620

0800b474 <rcutils_set_default_allocator>:
 800b474:	b1a0      	cbz	r0, 800b4a0 <rcutils_set_default_allocator+0x2c>
 800b476:	6802      	ldr	r2, [r0, #0]
 800b478:	b19a      	cbz	r2, 800b4a2 <rcutils_set_default_allocator+0x2e>
 800b47a:	6841      	ldr	r1, [r0, #4]
 800b47c:	b199      	cbz	r1, 800b4a6 <rcutils_set_default_allocator+0x32>
 800b47e:	b470      	push	{r4, r5, r6}
 800b480:	68c4      	ldr	r4, [r0, #12]
 800b482:	b15c      	cbz	r4, 800b49c <rcutils_set_default_allocator+0x28>
 800b484:	6885      	ldr	r5, [r0, #8]
 800b486:	b185      	cbz	r5, 800b4aa <rcutils_set_default_allocator+0x36>
 800b488:	2600      	movs	r6, #0
 800b48a:	2001      	movs	r0, #1
 800b48c:	4b08      	ldr	r3, [pc, #32]	; (800b4b0 <rcutils_set_default_allocator+0x3c>)
 800b48e:	e9c3 2100 	strd	r2, r1, [r3]
 800b492:	e9c3 5402 	strd	r5, r4, [r3, #8]
 800b496:	611e      	str	r6, [r3, #16]
 800b498:	bc70      	pop	{r4, r5, r6}
 800b49a:	4770      	bx	lr
 800b49c:	4620      	mov	r0, r4
 800b49e:	e7fb      	b.n	800b498 <rcutils_set_default_allocator+0x24>
 800b4a0:	4770      	bx	lr
 800b4a2:	4610      	mov	r0, r2
 800b4a4:	4770      	bx	lr
 800b4a6:	4608      	mov	r0, r1
 800b4a8:	4770      	bx	lr
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	e7f4      	b.n	800b498 <rcutils_set_default_allocator+0x24>
 800b4ae:	bf00      	nop
 800b4b0:	2000001c 	.word	0x2000001c

0800b4b4 <rcutils_get_default_allocator>:
 800b4b4:	b470      	push	{r4, r5, r6}
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	4d04      	ldr	r5, [pc, #16]	; (800b4cc <rcutils_get_default_allocator+0x18>)
 800b4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bc70      	pop	{r4, r5, r6}
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	2000001c 	.word	0x2000001c

0800b4d0 <rcutils_allocator_is_valid>:
 800b4d0:	b158      	cbz	r0, 800b4ea <rcutils_allocator_is_valid+0x1a>
 800b4d2:	6803      	ldr	r3, [r0, #0]
 800b4d4:	b143      	cbz	r3, 800b4e8 <rcutils_allocator_is_valid+0x18>
 800b4d6:	6843      	ldr	r3, [r0, #4]
 800b4d8:	b133      	cbz	r3, 800b4e8 <rcutils_allocator_is_valid+0x18>
 800b4da:	68c3      	ldr	r3, [r0, #12]
 800b4dc:	b123      	cbz	r3, 800b4e8 <rcutils_allocator_is_valid+0x18>
 800b4de:	6880      	ldr	r0, [r0, #8]
 800b4e0:	3800      	subs	r0, #0
 800b4e2:	bf18      	it	ne
 800b4e4:	2001      	movne	r0, #1
 800b4e6:	4770      	bx	lr
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	4770      	bx	lr

0800b4ec <__rcutils_format_error_string>:
 800b4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f0:	460f      	mov	r7, r1
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	b087      	sub	sp, #28
 800b4f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	f00c fe73 	bl	80181e6 <strnlen>
 800b500:	f240 39ff 	movw	r9, #1023	; 0x3ff
 800b504:	4548      	cmp	r0, r9
 800b506:	bf28      	it	cs
 800b508:	4648      	movcs	r0, r9
 800b50a:	4605      	mov	r5, r0
 800b50c:	4639      	mov	r1, r7
 800b50e:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800b512:	462a      	mov	r2, r5
 800b514:	4630      	mov	r0, r6
 800b516:	f00c fc77 	bl	8017e08 <memmove>
 800b51a:	2c05      	cmp	r4, #5
 800b51c:	46a0      	mov	r8, r4
 800b51e:	bf28      	it	cs
 800b520:	f04f 0805 	movcs.w	r8, #5
 800b524:	2300      	movs	r3, #0
 800b526:	4544      	cmp	r4, r8
 800b528:	bf98      	it	ls
 800b52a:	eba9 0805 	subls.w	r8, r9, r5
 800b52e:	5573      	strb	r3, [r6, r5]
 800b530:	442e      	add	r6, r5
 800b532:	2500      	movs	r5, #0
 800b534:	4642      	mov	r2, r8
 800b536:	4630      	mov	r0, r6
 800b538:	4947      	ldr	r1, [pc, #284]	; (800b658 <__rcutils_format_error_string+0x16c>)
 800b53a:	eba4 0408 	sub.w	r4, r4, r8
 800b53e:	f507 7a40 	add.w	sl, r7, #768	; 0x300
 800b542:	f00c fc53 	bl	8017dec <memcpy>
 800b546:	f806 5008 	strb.w	r5, [r6, r8]
 800b54a:	4621      	mov	r1, r4
 800b54c:	4650      	mov	r0, sl
 800b54e:	f00c fe4a 	bl	80181e6 <strnlen>
 800b552:	4284      	cmp	r4, r0
 800b554:	4683      	mov	fp, r0
 800b556:	4446      	add	r6, r8
 800b558:	d96b      	bls.n	800b632 <__rcutils_format_error_string+0x146>
 800b55a:	1a24      	subs	r4, r4, r0
 800b55c:	2c01      	cmp	r4, #1
 800b55e:	46a1      	mov	r9, r4
 800b560:	bf28      	it	cs
 800b562:	f04f 0901 	movcs.w	r9, #1
 800b566:	4602      	mov	r2, r0
 800b568:	4651      	mov	r1, sl
 800b56a:	4630      	mov	r0, r6
 800b56c:	f00c fc4c 	bl	8017e08 <memmove>
 800b570:	454c      	cmp	r4, r9
 800b572:	eb06 030b 	add.w	r3, r6, fp
 800b576:	f806 500b 	strb.w	r5, [r6, fp]
 800b57a:	bf88      	it	hi
 800b57c:	eba4 0809 	subhi.w	r8, r4, r9
 800b580:	d960      	bls.n	800b644 <__rcutils_format_error_string+0x158>
 800b582:	464a      	mov	r2, r9
 800b584:	4618      	mov	r0, r3
 800b586:	4935      	ldr	r1, [pc, #212]	; (800b65c <__rcutils_format_error_string+0x170>)
 800b588:	f00c fc30 	bl	8017dec <memcpy>
 800b58c:	2600      	movs	r6, #0
 800b58e:	f800 6009 	strb.w	r6, [r0, r9]
 800b592:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 800b596:	ea54 0305 	orrs.w	r3, r4, r5
 800b59a:	4481      	add	r9, r0
 800b59c:	d057      	beq.n	800b64e <__rcutils_format_error_string+0x162>
 800b59e:	466f      	mov	r7, sp
 800b5a0:	46ba      	mov	sl, r7
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f7f5 f927 	bl	80007fc <__aeabi_uldivmod>
 800b5ae:	3230      	adds	r2, #48	; 0x30
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f80a 2b01 	strb.w	r2, [sl], #1
 800b5ba:	220a      	movs	r2, #10
 800b5bc:	f7f5 f91e 	bl	80007fc <__aeabi_uldivmod>
 800b5c0:	462b      	mov	r3, r5
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bf08      	it	eq
 800b5c8:	2a0a      	cmpeq	r2, #10
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	460d      	mov	r5, r1
 800b5ce:	f106 0601 	add.w	r6, r6, #1
 800b5d2:	d2e6      	bcs.n	800b5a2 <__rcutils_format_error_string+0xb6>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	aa06      	add	r2, sp, #24
 800b5d8:	4416      	add	r6, r2
 800b5da:	2115      	movs	r1, #21
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f806 3c18 	strb.w	r3, [r6, #-24]
 800b5e2:	f00c fe00 	bl	80181e6 <strnlen>
 800b5e6:	2801      	cmp	r0, #1
 800b5e8:	d90f      	bls.n	800b60a <__rcutils_format_error_string+0x11e>
 800b5ea:	463a      	mov	r2, r7
 800b5ec:	1e43      	subs	r3, r0, #1
 800b5ee:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800b5f2:	443b      	add	r3, r7
 800b5f4:	4408      	add	r0, r1
 800b5f6:	7811      	ldrb	r1, [r2, #0]
 800b5f8:	781c      	ldrb	r4, [r3, #0]
 800b5fa:	f802 4b01 	strb.w	r4, [r2], #1
 800b5fe:	f803 1901 	strb.w	r1, [r3], #-1
 800b602:	1ac4      	subs	r4, r0, r3
 800b604:	1a81      	subs	r1, r0, r2
 800b606:	428c      	cmp	r4, r1
 800b608:	d3f5      	bcc.n	800b5f6 <__rcutils_format_error_string+0x10a>
 800b60a:	4641      	mov	r1, r8
 800b60c:	4638      	mov	r0, r7
 800b60e:	f00c fdea 	bl	80181e6 <strnlen>
 800b612:	4604      	mov	r4, r0
 800b614:	4540      	cmp	r0, r8
 800b616:	bf28      	it	cs
 800b618:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 800b61c:	4639      	mov	r1, r7
 800b61e:	4622      	mov	r2, r4
 800b620:	4648      	mov	r0, r9
 800b622:	f00c fbe3 	bl	8017dec <memcpy>
 800b626:	2300      	movs	r3, #0
 800b628:	f809 3004 	strb.w	r3, [r9, r4]
 800b62c:	b007      	add	sp, #28
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	3c01      	subs	r4, #1
 800b634:	4622      	mov	r2, r4
 800b636:	4651      	mov	r1, sl
 800b638:	4630      	mov	r0, r6
 800b63a:	f00c fbe5 	bl	8017e08 <memmove>
 800b63e:	1933      	adds	r3, r6, r4
 800b640:	5535      	strb	r5, [r6, r4]
 800b642:	2401      	movs	r4, #1
 800b644:	f04f 0801 	mov.w	r8, #1
 800b648:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800b64c:	e799      	b.n	800b582 <__rcutils_format_error_string+0x96>
 800b64e:	2330      	movs	r3, #48	; 0x30
 800b650:	466f      	mov	r7, sp
 800b652:	f8ad 3000 	strh.w	r3, [sp]
 800b656:	e7d8      	b.n	800b60a <__rcutils_format_error_string+0x11e>
 800b658:	0801a634 	.word	0x0801a634
 800b65c:	0801a63c 	.word	0x0801a63c

0800b660 <rcutils_get_error_string>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4b0e      	ldr	r3, [pc, #56]	; (800b69c <rcutils_get_error_string+0x3c>)
 800b664:	4604      	mov	r4, r0
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	b18b      	cbz	r3, 800b68e <rcutils_get_error_string+0x2e>
 800b66a:	4d0d      	ldr	r5, [pc, #52]	; (800b6a0 <rcutils_get_error_string+0x40>)
 800b66c:	782b      	ldrb	r3, [r5, #0]
 800b66e:	b13b      	cbz	r3, 800b680 <rcutils_get_error_string+0x20>
 800b670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b674:	4620      	mov	r0, r4
 800b676:	490b      	ldr	r1, [pc, #44]	; (800b6a4 <rcutils_get_error_string+0x44>)
 800b678:	f00c fbb8 	bl	8017dec <memcpy>
 800b67c:	4620      	mov	r0, r4
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	4909      	ldr	r1, [pc, #36]	; (800b6a8 <rcutils_get_error_string+0x48>)
 800b682:	4808      	ldr	r0, [pc, #32]	; (800b6a4 <rcutils_get_error_string+0x44>)
 800b684:	f7ff ff32 	bl	800b4ec <__rcutils_format_error_string>
 800b688:	2301      	movs	r3, #1
 800b68a:	702b      	strb	r3, [r5, #0]
 800b68c:	e7f0      	b.n	800b670 <rcutils_get_error_string+0x10>
 800b68e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b692:	4906      	ldr	r1, [pc, #24]	; (800b6ac <rcutils_get_error_string+0x4c>)
 800b694:	f00c fbaa 	bl	8017dec <memcpy>
 800b698:	4620      	mov	r0, r4
 800b69a:	bd38      	pop	{r3, r4, r5, pc}
 800b69c:	20006738 	.word	0x20006738
 800b6a0:	20006739 	.word	0x20006739
 800b6a4:	200084f8 	.word	0x200084f8
 800b6a8:	200088f8 	.word	0x200088f8
 800b6ac:	08019f5c 	.word	0x08019f5c

0800b6b0 <rcutils_reset_error>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	2400      	movs	r4, #0
 800b6b4:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4807      	ldr	r0, [pc, #28]	; (800b6d8 <rcutils_reset_error+0x28>)
 800b6bc:	f00c fbbe 	bl	8017e3c <memset>
 800b6c0:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <rcutils_reset_error+0x2c>)
 800b6c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6c6:	4906      	ldr	r1, [pc, #24]	; (800b6e0 <rcutils_reset_error+0x30>)
 800b6c8:	4806      	ldr	r0, [pc, #24]	; (800b6e4 <rcutils_reset_error+0x34>)
 800b6ca:	701c      	strb	r4, [r3, #0]
 800b6cc:	f00c fb8e 	bl	8017dec <memcpy>
 800b6d0:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <rcutils_reset_error+0x38>)
 800b6d2:	701c      	strb	r4, [r3, #0]
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	200088f8 	.word	0x200088f8
 800b6dc:	20006739 	.word	0x20006739
 800b6e0:	0801975c 	.word	0x0801975c
 800b6e4:	200084f8 	.word	0x200084f8
 800b6e8:	20006738 	.word	0x20006738

0800b6ec <rcutils_get_zero_initialized_string_map>:
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	4b01      	ldr	r3, [pc, #4]	; (800b6f4 <rcutils_get_zero_initialized_string_map+0x8>)
 800b6f0:	6018      	str	r0, [r3, #0]
 800b6f2:	4770      	bx	lr
 800b6f4:	2000673c 	.word	0x2000673c

0800b6f8 <rcutils_string_map_reserve>:
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d05d      	beq.n	800b7b8 <rcutils_string_map_reserve+0xc0>
 800b6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b700:	6805      	ldr	r5, [r0, #0]
 800b702:	4606      	mov	r6, r0
 800b704:	460c      	mov	r4, r1
 800b706:	b12d      	cbz	r5, 800b714 <rcutils_string_map_reserve+0x1c>
 800b708:	68eb      	ldr	r3, [r5, #12]
 800b70a:	42a3      	cmp	r3, r4
 800b70c:	d905      	bls.n	800b71a <rcutils_string_map_reserve+0x22>
 800b70e:	461c      	mov	r4, r3
 800b710:	2d00      	cmp	r5, #0
 800b712:	d1f9      	bne.n	800b708 <rcutils_string_map_reserve+0x10>
 800b714:	201f      	movs	r0, #31
 800b716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b71a:	68ab      	ldr	r3, [r5, #8]
 800b71c:	42a3      	cmp	r3, r4
 800b71e:	d047      	beq.n	800b7b0 <rcutils_string_map_reserve+0xb8>
 800b720:	6a2f      	ldr	r7, [r5, #32]
 800b722:	2c00      	cmp	r4, #0
 800b724:	d034      	beq.n	800b790 <rcutils_string_map_reserve+0x98>
 800b726:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b72a:	d243      	bcs.n	800b7b4 <rcutils_string_map_reserve+0xbc>
 800b72c:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800b730:	4641      	mov	r1, r8
 800b732:	463a      	mov	r2, r7
 800b734:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800b738:	6828      	ldr	r0, [r5, #0]
 800b73a:	47c8      	blx	r9
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d039      	beq.n	800b7b4 <rcutils_string_map_reserve+0xbc>
 800b740:	6833      	ldr	r3, [r6, #0]
 800b742:	463a      	mov	r2, r7
 800b744:	6018      	str	r0, [r3, #0]
 800b746:	4641      	mov	r1, r8
 800b748:	6858      	ldr	r0, [r3, #4]
 800b74a:	47c8      	blx	r9
 800b74c:	4603      	mov	r3, r0
 800b74e:	b388      	cbz	r0, 800b7b4 <rcutils_string_map_reserve+0xbc>
 800b750:	6835      	ldr	r5, [r6, #0]
 800b752:	68aa      	ldr	r2, [r5, #8]
 800b754:	6068      	str	r0, [r5, #4]
 800b756:	42a2      	cmp	r2, r4
 800b758:	d226      	bcs.n	800b7a8 <rcutils_string_map_reserve+0xb0>
 800b75a:	682e      	ldr	r6, [r5, #0]
 800b75c:	eb00 0c08 	add.w	ip, r0, r8
 800b760:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800b764:	4560      	cmp	r0, ip
 800b766:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800b76a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800b76e:	d203      	bcs.n	800b778 <rcutils_string_map_reserve+0x80>
 800b770:	eb06 0c08 	add.w	ip, r6, r8
 800b774:	4567      	cmp	r7, ip
 800b776:	d321      	bcc.n	800b7bc <rcutils_string_map_reserve+0xc4>
 800b778:	1aa2      	subs	r2, r4, r2
 800b77a:	0096      	lsls	r6, r2, #2
 800b77c:	4632      	mov	r2, r6
 800b77e:	2100      	movs	r1, #0
 800b780:	f00c fb5c 	bl	8017e3c <memset>
 800b784:	4632      	mov	r2, r6
 800b786:	4638      	mov	r0, r7
 800b788:	2100      	movs	r1, #0
 800b78a:	f00c fb57 	bl	8017e3c <memset>
 800b78e:	e00b      	b.n	800b7a8 <rcutils_string_map_reserve+0xb0>
 800b790:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800b794:	6828      	ldr	r0, [r5, #0]
 800b796:	4639      	mov	r1, r7
 800b798:	47c0      	blx	r8
 800b79a:	6833      	ldr	r3, [r6, #0]
 800b79c:	4639      	mov	r1, r7
 800b79e:	6858      	ldr	r0, [r3, #4]
 800b7a0:	601c      	str	r4, [r3, #0]
 800b7a2:	47c0      	blx	r8
 800b7a4:	6835      	ldr	r5, [r6, #0]
 800b7a6:	606c      	str	r4, [r5, #4]
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	60ac      	str	r4, [r5, #8]
 800b7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e7b0      	b.n	800b716 <rcutils_string_map_reserve+0x1e>
 800b7b4:	200a      	movs	r0, #10
 800b7b6:	e7ae      	b.n	800b716 <rcutils_string_map_reserve+0x1e>
 800b7b8:	200b      	movs	r0, #11
 800b7ba:	4770      	bx	lr
 800b7bc:	2000      	movs	r0, #0
 800b7be:	3904      	subs	r1, #4
 800b7c0:	1f32      	subs	r2, r6, #4
 800b7c2:	440b      	add	r3, r1
 800b7c4:	4490      	add	r8, r2
 800b7c6:	4431      	add	r1, r6
 800b7c8:	f841 0f04 	str.w	r0, [r1, #4]!
 800b7cc:	4541      	cmp	r1, r8
 800b7ce:	f843 0f04 	str.w	r0, [r3, #4]!
 800b7d2:	d1f9      	bne.n	800b7c8 <rcutils_string_map_reserve+0xd0>
 800b7d4:	e7e8      	b.n	800b7a8 <rcutils_string_map_reserve+0xb0>
 800b7d6:	bf00      	nop

0800b7d8 <rcutils_string_map_init>:
 800b7d8:	b082      	sub	sp, #8
 800b7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7dc:	ac06      	add	r4, sp, #24
 800b7de:	e884 000c 	stmia.w	r4, {r2, r3}
 800b7e2:	b370      	cbz	r0, 800b842 <rcutils_string_map_init+0x6a>
 800b7e4:	6806      	ldr	r6, [r0, #0]
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	b12e      	cbz	r6, 800b7f6 <rcutils_string_map_init+0x1e>
 800b7ea:	251e      	movs	r5, #30
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7f2:	b002      	add	sp, #8
 800b7f4:	4770      	bx	lr
 800b7f6:	a806      	add	r0, sp, #24
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	f7ff fe69 	bl	800b4d0 <rcutils_allocator_is_valid>
 800b7fe:	b300      	cbz	r0, 800b842 <rcutils_string_map_init+0x6a>
 800b800:	2024      	movs	r0, #36	; 0x24
 800b802:	9b06      	ldr	r3, [sp, #24]
 800b804:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b806:	4798      	blx	r3
 800b808:	6020      	str	r0, [r4, #0]
 800b80a:	b300      	cbz	r0, 800b84e <rcutils_string_map_init+0x76>
 800b80c:	f100 0710 	add.w	r7, r0, #16
 800b810:	f10d 0c18 	add.w	ip, sp, #24
 800b814:	e9c0 6600 	strd	r6, r6, [r0]
 800b818:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800b81c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b820:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b822:	f8dc 3000 	ldr.w	r3, [ip]
 800b826:	4629      	mov	r1, r5
 800b828:	4620      	mov	r0, r4
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	f7ff ff64 	bl	800b6f8 <rcutils_string_map_reserve>
 800b830:	4605      	mov	r5, r0
 800b832:	2800      	cmp	r0, #0
 800b834:	d0da      	beq.n	800b7ec <rcutils_string_map_init+0x14>
 800b836:	9b07      	ldr	r3, [sp, #28]
 800b838:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b83a:	6820      	ldr	r0, [r4, #0]
 800b83c:	4798      	blx	r3
 800b83e:	6026      	str	r6, [r4, #0]
 800b840:	e7d4      	b.n	800b7ec <rcutils_string_map_init+0x14>
 800b842:	250b      	movs	r5, #11
 800b844:	4628      	mov	r0, r5
 800b846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b84a:	b002      	add	sp, #8
 800b84c:	4770      	bx	lr
 800b84e:	250a      	movs	r5, #10
 800b850:	e7cc      	b.n	800b7ec <rcutils_string_map_init+0x14>
 800b852:	bf00      	nop

0800b854 <rcutils_string_map_fini>:
 800b854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b858:	2800      	cmp	r0, #0
 800b85a:	d036      	beq.n	800b8ca <rcutils_string_map_fini+0x76>
 800b85c:	6804      	ldr	r4, [r0, #0]
 800b85e:	4606      	mov	r6, r0
 800b860:	2c00      	cmp	r4, #0
 800b862:	d02f      	beq.n	800b8c4 <rcutils_string_map_fini+0x70>
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	b313      	cbz	r3, 800b8ae <rcutils_string_map_fini+0x5a>
 800b868:	2500      	movs	r5, #0
 800b86a:	46a8      	mov	r8, r5
 800b86c:	e017      	b.n	800b89e <rcutils_string_map_fini+0x4a>
 800b86e:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800b872:	6967      	ldr	r7, [r4, #20]
 800b874:	4649      	mov	r1, r9
 800b876:	47b8      	blx	r7
 800b878:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b87c:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800b880:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b884:	4649      	mov	r1, r9
 800b886:	47b8      	blx	r7
 800b888:	68e3      	ldr	r3, [r4, #12]
 800b88a:	6862      	ldr	r2, [r4, #4]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800b892:	60e3      	str	r3, [r4, #12]
 800b894:	6834      	ldr	r4, [r6, #0]
 800b896:	3501      	adds	r5, #1
 800b898:	68a3      	ldr	r3, [r4, #8]
 800b89a:	429d      	cmp	r5, r3
 800b89c:	d207      	bcs.n	800b8ae <rcutils_string_map_fini+0x5a>
 800b89e:	6822      	ldr	r2, [r4, #0]
 800b8a0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d1e2      	bne.n	800b86e <rcutils_string_map_fini+0x1a>
 800b8a8:	3501      	adds	r5, #1
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	d3f8      	bcc.n	800b8a0 <rcutils_string_map_fini+0x4c>
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f7ff ff21 	bl	800b6f8 <rcutils_string_map_reserve>
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	b920      	cbnz	r0, 800b8c4 <rcutils_string_map_fini+0x70>
 800b8ba:	6830      	ldr	r0, [r6, #0]
 800b8bc:	6943      	ldr	r3, [r0, #20]
 800b8be:	6a01      	ldr	r1, [r0, #32]
 800b8c0:	4798      	blx	r3
 800b8c2:	6034      	str	r4, [r6, #0]
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ca:	240b      	movs	r4, #11
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8d2:	bf00      	nop

0800b8d4 <rcutils_string_map_getn>:
 800b8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	b310      	cbz	r0, 800b920 <rcutils_string_map_getn+0x4c>
 800b8da:	6804      	ldr	r4, [r0, #0]
 800b8dc:	b30c      	cbz	r4, 800b922 <rcutils_string_map_getn+0x4e>
 800b8de:	460d      	mov	r5, r1
 800b8e0:	b1f1      	cbz	r1, 800b920 <rcutils_string_map_getn+0x4c>
 800b8e2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800b8e6:	6827      	ldr	r7, [r4, #0]
 800b8e8:	f1ba 0f00 	cmp.w	sl, #0
 800b8ec:	d018      	beq.n	800b920 <rcutils_string_map_getn+0x4c>
 800b8ee:	4690      	mov	r8, r2
 800b8f0:	2600      	movs	r6, #0
 800b8f2:	3f04      	subs	r7, #4
 800b8f4:	f857 9f04 	ldr.w	r9, [r7, #4]!
 800b8f8:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	f1b9 0f00 	cmp.w	r9, #0
 800b902:	d00b      	beq.n	800b91c <rcutils_string_map_getn+0x48>
 800b904:	4648      	mov	r0, r9
 800b906:	f7f4 fc9d 	bl	8000244 <strlen>
 800b90a:	4540      	cmp	r0, r8
 800b90c:	4602      	mov	r2, r0
 800b90e:	4649      	mov	r1, r9
 800b910:	bf38      	it	cc
 800b912:	4642      	movcc	r2, r8
 800b914:	4628      	mov	r0, r5
 800b916:	f00c fc54 	bl	80181c2 <strncmp>
 800b91a:	b128      	cbz	r0, 800b928 <rcutils_string_map_getn+0x54>
 800b91c:	45b2      	cmp	sl, r6
 800b91e:	d1e9      	bne.n	800b8f4 <rcutils_string_map_getn+0x20>
 800b920:	2400      	movs	r4, #0
 800b922:	4620      	mov	r0, r4
 800b924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b928:	6863      	ldr	r3, [r4, #4]
 800b92a:	f853 400b 	ldr.w	r4, [r3, fp]
 800b92e:	4620      	mov	r0, r4
 800b930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b934 <rcutils_system_time_now>:
 800b934:	b310      	cbz	r0, 800b97c <rcutils_system_time_now+0x48>
 800b936:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b938:	b085      	sub	sp, #20
 800b93a:	4604      	mov	r4, r0
 800b93c:	4669      	mov	r1, sp
 800b93e:	2001      	movs	r0, #1
 800b940:	f7f7 f946 	bl	8002bd0 <clock_gettime>
 800b944:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b948:	2e00      	cmp	r6, #0
 800b94a:	f177 0300 	sbcs.w	r3, r7, #0
 800b94e:	db12      	blt.n	800b976 <rcutils_system_time_now+0x42>
 800b950:	9902      	ldr	r1, [sp, #8]
 800b952:	2900      	cmp	r1, #0
 800b954:	db0c      	blt.n	800b970 <rcutils_system_time_now+0x3c>
 800b956:	2000      	movs	r0, #0
 800b958:	4d09      	ldr	r5, [pc, #36]	; (800b980 <rcutils_system_time_now+0x4c>)
 800b95a:	fba6 2305 	umull	r2, r3, r6, r5
 800b95e:	fb05 3307 	mla	r3, r5, r7, r3
 800b962:	1852      	adds	r2, r2, r1
 800b964:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b968:	e9c4 2300 	strd	r2, r3, [r4]
 800b96c:	b005      	add	sp, #20
 800b96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b970:	ea56 0307 	orrs.w	r3, r6, r7
 800b974:	d1ef      	bne.n	800b956 <rcutils_system_time_now+0x22>
 800b976:	2002      	movs	r0, #2
 800b978:	b005      	add	sp, #20
 800b97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b97c:	200b      	movs	r0, #11
 800b97e:	4770      	bx	lr
 800b980:	3b9aca00 	.word	0x3b9aca00

0800b984 <rcutils_steady_time_now>:
 800b984:	b310      	cbz	r0, 800b9cc <rcutils_steady_time_now+0x48>
 800b986:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b988:	b085      	sub	sp, #20
 800b98a:	4604      	mov	r4, r0
 800b98c:	4669      	mov	r1, sp
 800b98e:	2000      	movs	r0, #0
 800b990:	f7f7 f91e 	bl	8002bd0 <clock_gettime>
 800b994:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b998:	2e00      	cmp	r6, #0
 800b99a:	f177 0300 	sbcs.w	r3, r7, #0
 800b99e:	db12      	blt.n	800b9c6 <rcutils_steady_time_now+0x42>
 800b9a0:	9902      	ldr	r1, [sp, #8]
 800b9a2:	2900      	cmp	r1, #0
 800b9a4:	db0c      	blt.n	800b9c0 <rcutils_steady_time_now+0x3c>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	4d09      	ldr	r5, [pc, #36]	; (800b9d0 <rcutils_steady_time_now+0x4c>)
 800b9aa:	fba6 2305 	umull	r2, r3, r6, r5
 800b9ae:	fb05 3307 	mla	r3, r5, r7, r3
 800b9b2:	1852      	adds	r2, r2, r1
 800b9b4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b9b8:	e9c4 2300 	strd	r2, r3, [r4]
 800b9bc:	b005      	add	sp, #20
 800b9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c0:	ea56 0307 	orrs.w	r3, r6, r7
 800b9c4:	d1ef      	bne.n	800b9a6 <rcutils_steady_time_now+0x22>
 800b9c6:	2002      	movs	r0, #2
 800b9c8:	b005      	add	sp, #20
 800b9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9cc:	200b      	movs	r0, #11
 800b9ce:	4770      	bx	lr
 800b9d0:	3b9aca00 	.word	0x3b9aca00

0800b9d4 <rmw_get_zero_initialized_init_options>:
 800b9d4:	b510      	push	{r4, lr}
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	2238      	movs	r2, #56	; 0x38
 800b9da:	2100      	movs	r1, #0
 800b9dc:	f00c fa2e 	bl	8017e3c <memset>
 800b9e0:	f104 0010 	add.w	r0, r4, #16
 800b9e4:	f000 f808 	bl	800b9f8 <rmw_get_default_security_options>
 800b9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	60e3      	str	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}
 800b9f2:	bf00      	nop

0800b9f4 <rmw_get_default_publisher_options>:
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	4770      	bx	lr

0800b9f8 <rmw_get_default_security_options>:
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	7002      	strb	r2, [r0, #0]
 800b9fc:	6042      	str	r2, [r0, #4]
 800b9fe:	4770      	bx	lr

0800ba00 <rmw_get_default_subscription_options>:
 800ba00:	2200      	movs	r2, #0
 800ba02:	6002      	str	r2, [r0, #0]
 800ba04:	7102      	strb	r2, [r0, #4]
 800ba06:	4770      	bx	lr

0800ba08 <rmw_get_zero_initialized_message_info>:
 800ba08:	b470      	push	{r4, r5, r6}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	4d06      	ldr	r5, [pc, #24]	; (800ba28 <rmw_get_zero_initialized_message_info+0x20>)
 800ba10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ba20:	4630      	mov	r0, r6
 800ba22:	bc70      	pop	{r4, r5, r6}
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	0801a360 	.word	0x0801a360

0800ba2c <rmw_validate_full_topic_name>:
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d062      	beq.n	800baf6 <rmw_validate_full_topic_name+0xca>
 800ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba34:	460d      	mov	r5, r1
 800ba36:	2900      	cmp	r1, #0
 800ba38:	d05f      	beq.n	800bafa <rmw_validate_full_topic_name+0xce>
 800ba3a:	4616      	mov	r6, r2
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	f7f4 fc01 	bl	8000244 <strlen>
 800ba42:	b148      	cbz	r0, 800ba58 <rmw_validate_full_topic_name+0x2c>
 800ba44:	7823      	ldrb	r3, [r4, #0]
 800ba46:	2b2f      	cmp	r3, #47	; 0x2f
 800ba48:	d00d      	beq.n	800ba66 <rmw_validate_full_topic_name+0x3a>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	b13e      	cbz	r6, 800ba60 <rmw_validate_full_topic_name+0x34>
 800ba50:	2000      	movs	r0, #0
 800ba52:	6030      	str	r0, [r6, #0]
 800ba54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba58:	2301      	movs	r3, #1
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	2e00      	cmp	r6, #0
 800ba5e:	d1f7      	bne.n	800ba50 <rmw_validate_full_topic_name+0x24>
 800ba60:	2000      	movs	r0, #0
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800ba6a:	f814 300c 	ldrb.w	r3, [r4, ip]
 800ba6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ba70:	d045      	beq.n	800bafe <rmw_validate_full_topic_name+0xd2>
 800ba72:	4627      	mov	r7, r4
 800ba74:	1e63      	subs	r3, r4, #1
 800ba76:	eb03 0900 	add.w	r9, r3, r0
 800ba7a:	f1c4 0e01 	rsb	lr, r4, #1
 800ba7e:	eb0e 0803 	add.w	r8, lr, r3
 800ba82:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ba86:	f021 0220 	bic.w	r2, r1, #32
 800ba8a:	3a41      	subs	r2, #65	; 0x41
 800ba8c:	2a19      	cmp	r2, #25
 800ba8e:	f1a1 042f 	sub.w	r4, r1, #47	; 0x2f
 800ba92:	d90b      	bls.n	800baac <rmw_validate_full_topic_name+0x80>
 800ba94:	295f      	cmp	r1, #95	; 0x5f
 800ba96:	d009      	beq.n	800baac <rmw_validate_full_topic_name+0x80>
 800ba98:	2c0a      	cmp	r4, #10
 800ba9a:	d907      	bls.n	800baac <rmw_validate_full_topic_name+0x80>
 800ba9c:	2304      	movs	r3, #4
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	2e00      	cmp	r6, #0
 800baa2:	d0dd      	beq.n	800ba60 <rmw_validate_full_topic_name+0x34>
 800baa4:	2000      	movs	r0, #0
 800baa6:	f8c6 8000 	str.w	r8, [r6]
 800baaa:	e7d3      	b.n	800ba54 <rmw_validate_full_topic_name+0x28>
 800baac:	454b      	cmp	r3, r9
 800baae:	d1e6      	bne.n	800ba7e <rmw_validate_full_topic_name+0x52>
 800bab0:	2300      	movs	r3, #0
 800bab2:	f8df e084 	ldr.w	lr, [pc, #132]	; 800bb38 <rmw_validate_full_topic_name+0x10c>
 800bab6:	f10c 0801 	add.w	r8, ip, #1
 800baba:	e005      	b.n	800bac8 <rmw_validate_full_topic_name+0x9c>
 800babc:	4611      	mov	r1, r2
 800babe:	4288      	cmp	r0, r1
 800bac0:	4613      	mov	r3, r2
 800bac2:	f107 0701 	add.w	r7, r7, #1
 800bac6:	d925      	bls.n	800bb14 <rmw_validate_full_topic_name+0xe8>
 800bac8:	459c      	cmp	ip, r3
 800baca:	f103 0201 	add.w	r2, r3, #1
 800bace:	d01d      	beq.n	800bb0c <rmw_validate_full_topic_name+0xe0>
 800bad0:	7839      	ldrb	r1, [r7, #0]
 800bad2:	292f      	cmp	r1, #47	; 0x2f
 800bad4:	d1f2      	bne.n	800babc <rmw_validate_full_topic_name+0x90>
 800bad6:	787c      	ldrb	r4, [r7, #1]
 800bad8:	1c5a      	adds	r2, r3, #1
 800bada:	2c2f      	cmp	r4, #47	; 0x2f
 800badc:	4611      	mov	r1, r2
 800bade:	d026      	beq.n	800bb2e <rmw_validate_full_topic_name+0x102>
 800bae0:	f814 300e 	ldrb.w	r3, [r4, lr]
 800bae4:	075b      	lsls	r3, r3, #29
 800bae6:	d5ea      	bpl.n	800babe <rmw_validate_full_topic_name+0x92>
 800bae8:	2306      	movs	r3, #6
 800baea:	602b      	str	r3, [r5, #0]
 800baec:	2e00      	cmp	r6, #0
 800baee:	d0b7      	beq.n	800ba60 <rmw_validate_full_topic_name+0x34>
 800baf0:	2000      	movs	r0, #0
 800baf2:	6032      	str	r2, [r6, #0]
 800baf4:	e7ae      	b.n	800ba54 <rmw_validate_full_topic_name+0x28>
 800baf6:	200b      	movs	r0, #11
 800baf8:	4770      	bx	lr
 800bafa:	200b      	movs	r0, #11
 800bafc:	e7aa      	b.n	800ba54 <rmw_validate_full_topic_name+0x28>
 800bafe:	2303      	movs	r3, #3
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	2e00      	cmp	r6, #0
 800bb04:	d0ac      	beq.n	800ba60 <rmw_validate_full_topic_name+0x34>
 800bb06:	f8c6 c000 	str.w	ip, [r6]
 800bb0a:	e7a9      	b.n	800ba60 <rmw_validate_full_topic_name+0x34>
 800bb0c:	4641      	mov	r1, r8
 800bb0e:	f10c 0201 	add.w	r2, ip, #1
 800bb12:	e7d4      	b.n	800babe <rmw_validate_full_topic_name+0x92>
 800bb14:	28f7      	cmp	r0, #247	; 0xf7
 800bb16:	d802      	bhi.n	800bb1e <rmw_validate_full_topic_name+0xf2>
 800bb18:	2000      	movs	r0, #0
 800bb1a:	6028      	str	r0, [r5, #0]
 800bb1c:	e79a      	b.n	800ba54 <rmw_validate_full_topic_name+0x28>
 800bb1e:	2307      	movs	r3, #7
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	2e00      	cmp	r6, #0
 800bb24:	d09c      	beq.n	800ba60 <rmw_validate_full_topic_name+0x34>
 800bb26:	23f6      	movs	r3, #246	; 0xf6
 800bb28:	2000      	movs	r0, #0
 800bb2a:	6033      	str	r3, [r6, #0]
 800bb2c:	e792      	b.n	800ba54 <rmw_validate_full_topic_name+0x28>
 800bb2e:	2305      	movs	r3, #5
 800bb30:	602b      	str	r3, [r5, #0]
 800bb32:	2e00      	cmp	r6, #0
 800bb34:	d1dc      	bne.n	800baf0 <rmw_validate_full_topic_name+0xc4>
 800bb36:	e793      	b.n	800ba60 <rmw_validate_full_topic_name+0x34>
 800bb38:	0801af71 	.word	0x0801af71

0800bb3c <rmw_uros_set_custom_transport>:
 800bb3c:	b4f0      	push	{r4, r5, r6, r7}
 800bb3e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800bb42:	b16a      	cbz	r2, 800bb60 <rmw_uros_set_custom_transport+0x24>
 800bb44:	b163      	cbz	r3, 800bb60 <rmw_uros_set_custom_transport+0x24>
 800bb46:	b15e      	cbz	r6, 800bb60 <rmw_uros_set_custom_transport+0x24>
 800bb48:	b157      	cbz	r7, 800bb60 <rmw_uros_set_custom_transport+0x24>
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	4c06      	ldr	r4, [pc, #24]	; (800bb68 <rmw_uros_set_custom_transport+0x2c>)
 800bb4e:	2000      	movs	r0, #0
 800bb50:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bb54:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800bb58:	7025      	strb	r5, [r4, #0]
 800bb5a:	6167      	str	r7, [r4, #20]
 800bb5c:	bcf0      	pop	{r4, r5, r6, r7}
 800bb5e:	4770      	bx	lr
 800bb60:	200b      	movs	r0, #11
 800bb62:	bcf0      	pop	{r4, r5, r6, r7}
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	20008ce8 	.word	0x20008ce8

0800bb6c <rmw_init_options_init>:
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb72:	ad09      	add	r5, sp, #36	; 0x24
 800bb74:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800bb78:	b130      	cbz	r0, 800bb88 <rmw_init_options_init+0x1c>
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f7ff fca7 	bl	800b4d0 <rcutils_allocator_is_valid>
 800bb82:	b108      	cbz	r0, 800bb88 <rmw_init_options_init+0x1c>
 800bb84:	68a3      	ldr	r3, [r4, #8]
 800bb86:	b123      	cbz	r3, 800bb92 <rmw_init_options_init+0x26>
 800bb88:	200b      	movs	r0, #11
 800bb8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb8e:	b004      	add	sp, #16
 800bb90:	4770      	bx	lr
 800bb92:	f04f 0800 	mov.w	r8, #0
 800bb96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	4e1a      	ldr	r6, [pc, #104]	; (800bc08 <rmw_init_options_init+0x9c>)
 800bb9e:	e9c4 8900 	strd	r8, r9, [r4]
 800bba2:	6837      	ldr	r7, [r6, #0]
 800bba4:	f104 0620 	add.w	r6, r4, #32
 800bba8:	60a7      	str	r7, [r4, #8]
 800bbaa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800bbac:	682a      	ldr	r2, [r5, #0]
 800bbae:	4b17      	ldr	r3, [pc, #92]	; (800bc0c <rmw_init_options_init+0xa0>)
 800bbb0:	6032      	str	r2, [r6, #0]
 800bbb2:	4817      	ldr	r0, [pc, #92]	; (800bc10 <rmw_init_options_init+0xa4>)
 800bbb4:	2203      	movs	r2, #3
 800bbb6:	4917      	ldr	r1, [pc, #92]	; (800bc14 <rmw_init_options_init+0xa8>)
 800bbb8:	61e3      	str	r3, [r4, #28]
 800bbba:	f000 ff9d 	bl	800caf8 <rmw_uxrce_init_init_options_impl_memory>
 800bbbe:	4814      	ldr	r0, [pc, #80]	; (800bc10 <rmw_init_options_init+0xa4>)
 800bbc0:	f00a fc0e 	bl	80163e0 <get_memory>
 800bbc4:	b1e8      	cbz	r0, 800bc02 <rmw_init_options_init+0x96>
 800bbc6:	4a14      	ldr	r2, [pc, #80]	; (800bc18 <rmw_init_options_init+0xac>)
 800bbc8:	68c3      	ldr	r3, [r0, #12]
 800bbca:	6851      	ldr	r1, [r2, #4]
 800bbcc:	7810      	ldrb	r0, [r2, #0]
 800bbce:	6363      	str	r3, [r4, #52]	; 0x34
 800bbd0:	7418      	strb	r0, [r3, #16]
 800bbd2:	6159      	str	r1, [r3, #20]
 800bbd4:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800bbd8:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800bbdc:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800bbe0:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800bbe4:	f006 fdea 	bl	80127bc <uxr_nanos>
 800bbe8:	f00c f9fc 	bl	8017fe4 <srand>
 800bbec:	f00c fa28 	bl	8018040 <rand>
 800bbf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbf2:	6298      	str	r0, [r3, #40]	; 0x28
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0f9      	beq.n	800bbec <rmw_init_options_init+0x80>
 800bbf8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	b004      	add	sp, #16
 800bc00:	4770      	bx	lr
 800bc02:	2001      	movs	r0, #1
 800bc04:	e7c1      	b.n	800bb8a <rmw_init_options_init+0x1e>
 800bc06:	bf00      	nop
 800bc08:	0801ae4c 	.word	0x0801ae4c
 800bc0c:	0801a640 	.word	0x0801a640
 800bc10:	2000c004 	.word	0x2000c004
 800bc14:	2000bc58 	.word	0x2000bc58
 800bc18:	20008ce8 	.word	0x20008ce8

0800bc1c <rmw_init_options_copy>:
 800bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1e:	b158      	cbz	r0, 800bc38 <rmw_init_options_copy+0x1c>
 800bc20:	460d      	mov	r5, r1
 800bc22:	b149      	cbz	r1, 800bc38 <rmw_init_options_copy+0x1c>
 800bc24:	4604      	mov	r4, r0
 800bc26:	6880      	ldr	r0, [r0, #8]
 800bc28:	b120      	cbz	r0, 800bc34 <rmw_init_options_copy+0x18>
 800bc2a:	4b1b      	ldr	r3, [pc, #108]	; (800bc98 <rmw_init_options_copy+0x7c>)
 800bc2c:	6819      	ldr	r1, [r3, #0]
 800bc2e:	f7f4 faff 	bl	8000230 <strcmp>
 800bc32:	bb60      	cbnz	r0, 800bc8e <rmw_init_options_copy+0x72>
 800bc34:	68ab      	ldr	r3, [r5, #8]
 800bc36:	b113      	cbz	r3, 800bc3e <rmw_init_options_copy+0x22>
 800bc38:	260b      	movs	r6, #11
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc3e:	4623      	mov	r3, r4
 800bc40:	462a      	mov	r2, r5
 800bc42:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800bc46:	681f      	ldr	r7, [r3, #0]
 800bc48:	685e      	ldr	r6, [r3, #4]
 800bc4a:	6898      	ldr	r0, [r3, #8]
 800bc4c:	68d9      	ldr	r1, [r3, #12]
 800bc4e:	3310      	adds	r3, #16
 800bc50:	4563      	cmp	r3, ip
 800bc52:	6017      	str	r7, [r2, #0]
 800bc54:	6056      	str	r6, [r2, #4]
 800bc56:	6090      	str	r0, [r2, #8]
 800bc58:	60d1      	str	r1, [r2, #12]
 800bc5a:	f102 0210 	add.w	r2, r2, #16
 800bc5e:	d1f2      	bne.n	800bc46 <rmw_init_options_copy+0x2a>
 800bc60:	6819      	ldr	r1, [r3, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	480d      	ldr	r0, [pc, #52]	; (800bc9c <rmw_init_options_copy+0x80>)
 800bc66:	6011      	str	r1, [r2, #0]
 800bc68:	6053      	str	r3, [r2, #4]
 800bc6a:	f00a fbb9 	bl	80163e0 <get_memory>
 800bc6e:	b188      	cbz	r0, 800bc94 <rmw_init_options_copy+0x78>
 800bc70:	2600      	movs	r6, #0
 800bc72:	68c3      	ldr	r3, [r0, #12]
 800bc74:	636b      	str	r3, [r5, #52]	; 0x34
 800bc76:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800bc78:	f103 0410 	add.w	r4, r3, #16
 800bc7c:	3510      	adds	r5, #16
 800bc7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bc86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc8e:	260c      	movs	r6, #12
 800bc90:	4630      	mov	r0, r6
 800bc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc94:	2601      	movs	r6, #1
 800bc96:	e7d0      	b.n	800bc3a <rmw_init_options_copy+0x1e>
 800bc98:	0801ae4c 	.word	0x0801ae4c
 800bc9c:	2000c004 	.word	0x2000c004

0800bca0 <rmw_init_options_fini>:
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d036      	beq.n	800bd12 <rmw_init_options_fini+0x72>
 800bca4:	b530      	push	{r4, r5, lr}
 800bca6:	4604      	mov	r4, r0
 800bca8:	b08f      	sub	sp, #60	; 0x3c
 800bcaa:	3020      	adds	r0, #32
 800bcac:	f7ff fc10 	bl	800b4d0 <rcutils_allocator_is_valid>
 800bcb0:	b328      	cbz	r0, 800bcfe <rmw_init_options_fini+0x5e>
 800bcb2:	68a0      	ldr	r0, [r4, #8]
 800bcb4:	b120      	cbz	r0, 800bcc0 <rmw_init_options_fini+0x20>
 800bcb6:	4b18      	ldr	r3, [pc, #96]	; (800bd18 <rmw_init_options_fini+0x78>)
 800bcb8:	6819      	ldr	r1, [r3, #0]
 800bcba:	f7f4 fab9 	bl	8000230 <strcmp>
 800bcbe:	bb30      	cbnz	r0, 800bd0e <rmw_init_options_fini+0x6e>
 800bcc0:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <rmw_init_options_fini+0x7c>)
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	b1f9      	cbz	r1, 800bd06 <rmw_init_options_fini+0x66>
 800bcc6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bcc8:	e001      	b.n	800bcce <rmw_init_options_fini+0x2e>
 800bcca:	6889      	ldr	r1, [r1, #8]
 800bccc:	b1d9      	cbz	r1, 800bd06 <rmw_init_options_fini+0x66>
 800bcce:	68cb      	ldr	r3, [r1, #12]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d1fa      	bne.n	800bcca <rmw_init_options_fini+0x2a>
 800bcd4:	466d      	mov	r5, sp
 800bcd6:	4811      	ldr	r0, [pc, #68]	; (800bd1c <rmw_init_options_fini+0x7c>)
 800bcd8:	f00a fb92 	bl	8016400 <put_memory>
 800bcdc:	4668      	mov	r0, sp
 800bcde:	f7ff fe79 	bl	800b9d4 <rmw_get_zero_initialized_init_options>
 800bce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcee:	2300      	movs	r3, #0
 800bcf0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bcf4:	e884 0003 	stmia.w	r4, {r0, r1}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	b00f      	add	sp, #60	; 0x3c
 800bcfc:	bd30      	pop	{r4, r5, pc}
 800bcfe:	230b      	movs	r3, #11
 800bd00:	4618      	mov	r0, r3
 800bd02:	b00f      	add	sp, #60	; 0x3c
 800bd04:	bd30      	pop	{r4, r5, pc}
 800bd06:	2301      	movs	r3, #1
 800bd08:	4618      	mov	r0, r3
 800bd0a:	b00f      	add	sp, #60	; 0x3c
 800bd0c:	bd30      	pop	{r4, r5, pc}
 800bd0e:	230c      	movs	r3, #12
 800bd10:	e7f2      	b.n	800bcf8 <rmw_init_options_fini+0x58>
 800bd12:	230b      	movs	r3, #11
 800bd14:	4618      	mov	r0, r3
 800bd16:	4770      	bx	lr
 800bd18:	0801ae4c 	.word	0x0801ae4c
 800bd1c:	2000c004 	.word	0x2000c004

0800bd20 <rmw_init>:
 800bd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd24:	b083      	sub	sp, #12
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f000 8087 	beq.w	800be3a <rmw_init+0x11a>
 800bd2c:	460e      	mov	r6, r1
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	f000 8083 	beq.w	800be3a <rmw_init+0x11a>
 800bd34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bd36:	4605      	mov	r5, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d07e      	beq.n	800be3a <rmw_init+0x11a>
 800bd3c:	4b70      	ldr	r3, [pc, #448]	; (800bf00 <rmw_init+0x1e0>)
 800bd3e:	6880      	ldr	r0, [r0, #8]
 800bd40:	f8d3 8000 	ldr.w	r8, [r3]
 800bd44:	b120      	cbz	r0, 800bd50 <rmw_init+0x30>
 800bd46:	4641      	mov	r1, r8
 800bd48:	f7f4 fa72 	bl	8000230 <strcmp>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d17e      	bne.n	800be4e <rmw_init+0x12e>
 800bd50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd54:	68e9      	ldr	r1, [r5, #12]
 800bd56:	486b      	ldr	r0, [pc, #428]	; (800bf04 <rmw_init+0x1e4>)
 800bd58:	e9c6 2300 	strd	r2, r3, [r6]
 800bd5c:	61f1      	str	r1, [r6, #28]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	4969      	ldr	r1, [pc, #420]	; (800bf08 <rmw_init+0x1e8>)
 800bd62:	f8c6 8008 	str.w	r8, [r6, #8]
 800bd66:	f000 fe6d 	bl	800ca44 <rmw_uxrce_init_session_memory>
 800bd6a:	4868      	ldr	r0, [pc, #416]	; (800bf0c <rmw_init+0x1ec>)
 800bd6c:	2204      	movs	r2, #4
 800bd6e:	4968      	ldr	r1, [pc, #416]	; (800bf10 <rmw_init+0x1f0>)
 800bd70:	f000 fea4 	bl	800cabc <rmw_uxrce_init_static_input_buffer_memory>
 800bd74:	4863      	ldr	r0, [pc, #396]	; (800bf04 <rmw_init+0x1e4>)
 800bd76:	f00a fb33 	bl	80163e0 <get_memory>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d062      	beq.n	800be44 <rmw_init+0x124>
 800bd7e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800bd80:	68c4      	ldr	r4, [r0, #12]
 800bd82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bd88:	7c39      	ldrb	r1, [r7, #16]
 800bd8a:	9001      	str	r0, [sp, #4]
 800bd8c:	6a38      	ldr	r0, [r7, #32]
 800bd8e:	f104 0910 	add.w	r9, r4, #16
 800bd92:	9000      	str	r0, [sp, #0]
 800bd94:	4648      	mov	r0, r9
 800bd96:	f004 fe09 	bl	80109ac <uxr_set_custom_transport_callbacks>
 800bd9a:	2700      	movs	r7, #0
 800bd9c:	f241 5194 	movw	r1, #5524	; 0x1594
 800bda0:	f241 5398 	movw	r3, #5528	; 0x1598
 800bda4:	f241 509c 	movw	r0, #5532	; 0x159c
 800bda8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdac:	5067      	str	r7, [r4, r1]
 800bdae:	50e7      	str	r7, [r4, r3]
 800bdb0:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800bdb4:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800bdb8:	5027      	str	r7, [r4, r0]
 800bdba:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800bdbe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800bdc2:	4854      	ldr	r0, [pc, #336]	; (800bf14 <rmw_init+0x1f4>)
 800bdc4:	600f      	str	r7, [r1, #0]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	e9c4 87da 	strd	r8, r7, [r4, #872]	; 0x368
 800bdcc:	4952      	ldr	r1, [pc, #328]	; (800bf18 <rmw_init+0x1f8>)
 800bdce:	64b4      	str	r4, [r6, #72]	; 0x48
 800bdd0:	f000 fe1e 	bl	800ca10 <rmw_uxrce_init_node_memory>
 800bdd4:	2205      	movs	r2, #5
 800bdd6:	4951      	ldr	r1, [pc, #324]	; (800bf1c <rmw_init+0x1fc>)
 800bdd8:	4851      	ldr	r0, [pc, #324]	; (800bf20 <rmw_init+0x200>)
 800bdda:	f000 fdff 	bl	800c9dc <rmw_uxrce_init_subscription_memory>
 800bdde:	220a      	movs	r2, #10
 800bde0:	4950      	ldr	r1, [pc, #320]	; (800bf24 <rmw_init+0x204>)
 800bde2:	4851      	ldr	r0, [pc, #324]	; (800bf28 <rmw_init+0x208>)
 800bde4:	f000 fde0 	bl	800c9a8 <rmw_uxrce_init_publisher_memory>
 800bde8:	2201      	movs	r2, #1
 800bdea:	4950      	ldr	r1, [pc, #320]	; (800bf2c <rmw_init+0x20c>)
 800bdec:	4850      	ldr	r0, [pc, #320]	; (800bf30 <rmw_init+0x210>)
 800bdee:	f000 fda7 	bl	800c940 <rmw_uxrce_init_service_memory>
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	494f      	ldr	r1, [pc, #316]	; (800bf34 <rmw_init+0x214>)
 800bdf6:	4850      	ldr	r0, [pc, #320]	; (800bf38 <rmw_init+0x218>)
 800bdf8:	f000 fdbc 	bl	800c974 <rmw_uxrce_init_client_memory>
 800bdfc:	220f      	movs	r2, #15
 800bdfe:	494f      	ldr	r1, [pc, #316]	; (800bf3c <rmw_init+0x21c>)
 800be00:	484f      	ldr	r0, [pc, #316]	; (800bf40 <rmw_init+0x220>)
 800be02:	f000 fe3f 	bl	800ca84 <rmw_uxrce_init_topic_memory>
 800be06:	2203      	movs	r2, #3
 800be08:	494e      	ldr	r1, [pc, #312]	; (800bf44 <rmw_init+0x224>)
 800be0a:	484f      	ldr	r0, [pc, #316]	; (800bf48 <rmw_init+0x228>)
 800be0c:	f000 fe74 	bl	800caf8 <rmw_uxrce_init_init_options_impl_memory>
 800be10:	2204      	movs	r2, #4
 800be12:	494e      	ldr	r1, [pc, #312]	; (800bf4c <rmw_init+0x22c>)
 800be14:	484e      	ldr	r0, [pc, #312]	; (800bf50 <rmw_init+0x230>)
 800be16:	f000 fe89 	bl	800cb2c <rmw_uxrce_init_wait_set_memory>
 800be1a:	2204      	movs	r2, #4
 800be1c:	494d      	ldr	r1, [pc, #308]	; (800bf54 <rmw_init+0x234>)
 800be1e:	484e      	ldr	r0, [pc, #312]	; (800bf58 <rmw_init+0x238>)
 800be20:	f000 fea0 	bl	800cb64 <rmw_uxrce_init_guard_condition_memory>
 800be24:	463a      	mov	r2, r7
 800be26:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800be28:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800be2a:	f000 fd51 	bl	800c8d0 <rmw_uxrce_transport_init>
 800be2e:	4607      	mov	r7, r0
 800be30:	b190      	cbz	r0, 800be58 <rmw_init+0x138>
 800be32:	4638      	mov	r0, r7
 800be34:	b003      	add	sp, #12
 800be36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be3a:	270b      	movs	r7, #11
 800be3c:	4638      	mov	r0, r7
 800be3e:	b003      	add	sp, #12
 800be40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be44:	2701      	movs	r7, #1
 800be46:	4638      	mov	r0, r7
 800be48:	b003      	add	sp, #12
 800be4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4e:	270c      	movs	r7, #12
 800be50:	4638      	mov	r0, r7
 800be52:	b003      	add	sp, #12
 800be54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be58:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800be5a:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800be5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be60:	4628      	mov	r0, r5
 800be62:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800be66:	f005 fab5 	bl	80113d4 <uxr_init_session>
 800be6a:	4622      	mov	r2, r4
 800be6c:	4628      	mov	r0, r5
 800be6e:	493b      	ldr	r1, [pc, #236]	; (800bf5c <rmw_init+0x23c>)
 800be70:	f005 fad2 	bl	8011418 <uxr_set_topic_callback>
 800be74:	463a      	mov	r2, r7
 800be76:	4628      	mov	r0, r5
 800be78:	4939      	ldr	r1, [pc, #228]	; (800bf60 <rmw_init+0x240>)
 800be7a:	f005 fac9 	bl	8011410 <uxr_set_status_callback>
 800be7e:	463a      	mov	r2, r7
 800be80:	4628      	mov	r0, r5
 800be82:	4938      	ldr	r1, [pc, #224]	; (800bf64 <rmw_init+0x244>)
 800be84:	f005 facc 	bl	8011420 <uxr_set_request_callback>
 800be88:	463a      	mov	r2, r7
 800be8a:	4628      	mov	r0, r5
 800be8c:	4936      	ldr	r1, [pc, #216]	; (800bf68 <rmw_init+0x248>)
 800be8e:	f005 facb 	bl	8011428 <uxr_set_reply_callback>
 800be92:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800be96:	2304      	movs	r3, #4
 800be98:	0092      	lsls	r2, r2, #2
 800be9a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800be9e:	4628      	mov	r0, r5
 800bea0:	f005 fb90 	bl	80115c4 <uxr_create_input_reliable_stream>
 800bea4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800bea8:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800beac:	0092      	lsls	r2, r2, #2
 800beae:	2304      	movs	r3, #4
 800beb0:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800beb4:	4628      	mov	r0, r5
 800beb6:	f005 fb5b 	bl	8011570 <uxr_create_output_reliable_stream>
 800beba:	4603      	mov	r3, r0
 800bebc:	4628      	mov	r0, r5
 800bebe:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 800bec2:	f005 fb79 	bl	80115b8 <uxr_create_input_best_effort_stream>
 800bec6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800beca:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800bece:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800bed2:	4628      	mov	r0, r5
 800bed4:	3114      	adds	r1, #20
 800bed6:	f005 fb39 	bl	801154c <uxr_create_output_best_effort_stream>
 800beda:	4603      	mov	r3, r0
 800bedc:	4628      	mov	r0, r5
 800bede:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 800bee2:	f005 faa5 	bl	8011430 <uxr_create_session>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d1a3      	bne.n	800be32 <rmw_init+0x112>
 800beea:	4648      	mov	r0, r9
 800beec:	f004 fd9e 	bl	8010a2c <uxr_close_custom_transport>
 800bef0:	4621      	mov	r1, r4
 800bef2:	4804      	ldr	r0, [pc, #16]	; (800bf04 <rmw_init+0x1e4>)
 800bef4:	f00a fa84 	bl	8016400 <put_memory>
 800bef8:	64b7      	str	r7, [r6, #72]	; 0x48
 800befa:	2701      	movs	r7, #1
 800befc:	e799      	b.n	800be32 <rmw_init+0x112>
 800befe:	bf00      	nop
 800bf00:	0801ae4c 	.word	0x0801ae4c
 800bf04:	2000beb0 	.word	0x2000beb0
 800bf08:	2000c0e0 	.word	0x2000c0e0
 800bf0c:	20008d08 	.word	0x20008d08
 800bf10:	20009ae8 	.word	0x20009ae8
 800bf14:	2000bcdc 	.word	0x2000bcdc
 800bf18:	2000bec0 	.word	0x2000bec0
 800bf1c:	20009610 	.word	0x20009610
 800bf20:	2000bf74 	.word	0x2000bf74
 800bf24:	20008d28 	.word	0x20008d28
 800bf28:	20008d18 	.word	0x20008d18
 800bf2c:	2000c018 	.word	0x2000c018
 800bf30:	2000bf64 	.word	0x2000bf64
 800bf34:	20009a20 	.word	0x20009a20
 800bf38:	20009598 	.word	0x20009598
 800bf3c:	2000bcec 	.word	0x2000bcec
 800bf40:	2000bea0 	.word	0x2000bea0
 800bf44:	2000bc58 	.word	0x2000bc58
 800bf48:	2000c004 	.word	0x2000c004
 800bf4c:	2000bbe8 	.word	0x2000bbe8
 800bf50:	2000d688 	.word	0x2000d688
 800bf54:	2000bf84 	.word	0x2000bf84
 800bf58:	2000be90 	.word	0x2000be90
 800bf5c:	08016219 	.word	0x08016219
 800bf60:	08016211 	.word	0x08016211
 800bf64:	080162ad 	.word	0x080162ad
 800bf68:	08016349 	.word	0x08016349

0800bf6c <rmw_context_fini>:
 800bf6c:	4b17      	ldr	r3, [pc, #92]	; (800bfcc <rmw_context_fini+0x60>)
 800bf6e:	b570      	push	{r4, r5, r6, lr}
 800bf70:	681c      	ldr	r4, [r3, #0]
 800bf72:	4605      	mov	r5, r0
 800bf74:	b33c      	cbz	r4, 800bfc6 <rmw_context_fini+0x5a>
 800bf76:	2600      	movs	r6, #0
 800bf78:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bf7a:	68e0      	ldr	r0, [r4, #12]
 800bf7c:	68a4      	ldr	r4, [r4, #8]
 800bf7e:	6902      	ldr	r2, [r0, #16]
 800bf80:	428a      	cmp	r2, r1
 800bf82:	d018      	beq.n	800bfb6 <rmw_context_fini+0x4a>
 800bf84:	2c00      	cmp	r4, #0
 800bf86:	d1f8      	bne.n	800bf7a <rmw_context_fini+0xe>
 800bf88:	b189      	cbz	r1, 800bfae <rmw_context_fini+0x42>
 800bf8a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800bf8e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800bf92:	789b      	ldrb	r3, [r3, #2]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	bf14      	ite	ne
 800bf98:	210a      	movne	r1, #10
 800bf9a:	2100      	moveq	r1, #0
 800bf9c:	f005 fa8c 	bl	80114b8 <uxr_delete_session_retries>
 800bfa0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800bfa2:	f000 fdf9 	bl	800cb98 <rmw_uxrce_fini_session_memory>
 800bfa6:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800bfa8:	3010      	adds	r0, #16
 800bfaa:	f004 fd3f 	bl	8010a2c <uxr_close_custom_transport>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	64ab      	str	r3, [r5, #72]	; 0x48
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	3018      	adds	r0, #24
 800bfb8:	f000 f89c 	bl	800c0f4 <rmw_destroy_node>
 800bfbc:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	2c00      	cmp	r4, #0
 800bfc2:	d1da      	bne.n	800bf7a <rmw_context_fini+0xe>
 800bfc4:	e7e0      	b.n	800bf88 <rmw_context_fini+0x1c>
 800bfc6:	4626      	mov	r6, r4
 800bfc8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bfca:	e7dd      	b.n	800bf88 <rmw_context_fini+0x1c>
 800bfcc:	2000bcdc 	.word	0x2000bcdc

0800bfd0 <create_node>:
 800bfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	b083      	sub	sp, #12
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d05f      	beq.n	800c09a <create_node+0xca>
 800bfda:	4606      	mov	r6, r0
 800bfdc:	4835      	ldr	r0, [pc, #212]	; (800c0b4 <create_node+0xe4>)
 800bfde:	460f      	mov	r7, r1
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	461d      	mov	r5, r3
 800bfe4:	f00a f9fc 	bl	80163e0 <get_memory>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	d056      	beq.n	800c09a <create_node+0xca>
 800bfec:	68c4      	ldr	r4, [r0, #12]
 800bfee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800bff0:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	f00a fa5b 	bl	80164b0 <rmw_get_implementation_identifier>
 800bffa:	f8c4 9020 	str.w	r9, [r4, #32]
 800bffe:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c002:	4630      	mov	r0, r6
 800c004:	f7f4 f91e 	bl	8000244 <strlen>
 800c008:	1c42      	adds	r2, r0, #1
 800c00a:	2a3c      	cmp	r2, #60	; 0x3c
 800c00c:	f104 0518 	add.w	r5, r4, #24
 800c010:	d840      	bhi.n	800c094 <create_node+0xc4>
 800c012:	4648      	mov	r0, r9
 800c014:	4631      	mov	r1, r6
 800c016:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800c01a:	f00b fee7 	bl	8017dec <memcpy>
 800c01e:	4638      	mov	r0, r7
 800c020:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800c024:	f7f4 f90e 	bl	8000244 <strlen>
 800c028:	1c42      	adds	r2, r0, #1
 800c02a:	2a3c      	cmp	r2, #60	; 0x3c
 800c02c:	d832      	bhi.n	800c094 <create_node+0xc4>
 800c02e:	4639      	mov	r1, r7
 800c030:	4648      	mov	r0, r9
 800c032:	f00b fedb 	bl	8017dec <memcpy>
 800c036:	f241 5394 	movw	r3, #5524	; 0x1594
 800c03a:	2101      	movs	r1, #1
 800c03c:	6922      	ldr	r2, [r4, #16]
 800c03e:	5ad0      	ldrh	r0, [r2, r3]
 800c040:	eb00 0c01 	add.w	ip, r0, r1
 800c044:	f822 c003 	strh.w	ip, [r2, r3]
 800c048:	f004 fcf4 	bl	8010a34 <uxr_object_id>
 800c04c:	6160      	str	r0, [r4, #20]
 800c04e:	783b      	ldrb	r3, [r7, #0]
 800c050:	2b2f      	cmp	r3, #47	; 0x2f
 800c052:	d127      	bne.n	800c0a4 <create_node+0xd4>
 800c054:	787b      	ldrb	r3, [r7, #1]
 800c056:	bb2b      	cbnz	r3, 800c0a4 <create_node+0xd4>
 800c058:	4633      	mov	r3, r6
 800c05a:	213c      	movs	r1, #60	; 0x3c
 800c05c:	4a16      	ldr	r2, [pc, #88]	; (800c0b8 <create_node+0xe8>)
 800c05e:	4817      	ldr	r0, [pc, #92]	; (800c0bc <create_node+0xec>)
 800c060:	f00c f846 	bl	80180f0 <sniprintf>
 800c064:	2106      	movs	r1, #6
 800c066:	6920      	ldr	r0, [r4, #16]
 800c068:	4b14      	ldr	r3, [pc, #80]	; (800c0bc <create_node+0xec>)
 800c06a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800c06e:	e9cd 3100 	strd	r3, r1, [sp]
 800c072:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c076:	6811      	ldr	r1, [r2, #0]
 800c078:	fa1f f388 	uxth.w	r3, r8
 800c07c:	6962      	ldr	r2, [r4, #20]
 800c07e:	f004 fa51 	bl	8010524 <uxr_buffer_create_participant_bin>
 800c082:	4602      	mov	r2, r0
 800c084:	6920      	ldr	r0, [r4, #16]
 800c086:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c08a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c08e:	f000 fef3 	bl	800ce78 <run_xrce_session>
 800c092:	b918      	cbnz	r0, 800c09c <create_node+0xcc>
 800c094:	4628      	mov	r0, r5
 800c096:	f000 fd85 	bl	800cba4 <rmw_uxrce_fini_node_memory>
 800c09a:	2500      	movs	r5, #0
 800c09c:	4628      	mov	r0, r5
 800c09e:	b003      	add	sp, #12
 800c0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0a4:	463b      	mov	r3, r7
 800c0a6:	213c      	movs	r1, #60	; 0x3c
 800c0a8:	4a05      	ldr	r2, [pc, #20]	; (800c0c0 <create_node+0xf0>)
 800c0aa:	9600      	str	r6, [sp, #0]
 800c0ac:	4803      	ldr	r0, [pc, #12]	; (800c0bc <create_node+0xec>)
 800c0ae:	f00c f81f 	bl	80180f0 <sniprintf>
 800c0b2:	e7d7      	b.n	800c064 <create_node+0x94>
 800c0b4:	2000bcdc 	.word	0x2000bcdc
 800c0b8:	0801a680 	.word	0x0801a680
 800c0bc:	20006740 	.word	0x20006740
 800c0c0:	0801a644 	.word	0x0801a644

0800c0c4 <rmw_create_node>:
 800c0c4:	b199      	cbz	r1, 800c0ee <rmw_create_node+0x2a>
 800c0c6:	b430      	push	{r4, r5}
 800c0c8:	4614      	mov	r4, r2
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	780b      	ldrb	r3, [r1, #0]
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	b14b      	cbz	r3, 800c0e8 <rmw_create_node+0x24>
 800c0d4:	b144      	cbz	r4, 800c0e8 <rmw_create_node+0x24>
 800c0d6:	7823      	ldrb	r3, [r4, #0]
 800c0d8:	b133      	cbz	r3, 800c0e8 <rmw_create_node+0x24>
 800c0da:	b902      	cbnz	r2, 800c0de <rmw_create_node+0x1a>
 800c0dc:	69ea      	ldr	r2, [r5, #28]
 800c0de:	462b      	mov	r3, r5
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	bc30      	pop	{r4, r5}
 800c0e4:	f7ff bf74 	b.w	800bfd0 <create_node>
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	bc30      	pop	{r4, r5}
 800c0ec:	4770      	bx	lr
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop

0800c0f4 <rmw_destroy_node>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d067      	beq.n	800c1ca <rmw_destroy_node+0xd6>
 800c0fa:	4607      	mov	r7, r0
 800c0fc:	6800      	ldr	r0, [r0, #0]
 800c0fe:	b128      	cbz	r0, 800c10c <rmw_destroy_node+0x18>
 800c100:	4b34      	ldr	r3, [pc, #208]	; (800c1d4 <rmw_destroy_node+0xe0>)
 800c102:	6819      	ldr	r1, [r3, #0]
 800c104:	f7f4 f894 	bl	8000230 <strcmp>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d15e      	bne.n	800c1ca <rmw_destroy_node+0xd6>
 800c10c:	687c      	ldr	r4, [r7, #4]
 800c10e:	2c00      	cmp	r4, #0
 800c110:	d05b      	beq.n	800c1ca <rmw_destroy_node+0xd6>
 800c112:	4b31      	ldr	r3, [pc, #196]	; (800c1d8 <rmw_destroy_node+0xe4>)
 800c114:	681d      	ldr	r5, [r3, #0]
 800c116:	2d00      	cmp	r5, #0
 800c118:	d05a      	beq.n	800c1d0 <rmw_destroy_node+0xdc>
 800c11a:	2600      	movs	r6, #0
 800c11c:	68e9      	ldr	r1, [r5, #12]
 800c11e:	68ad      	ldr	r5, [r5, #8]
 800c120:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800c124:	429c      	cmp	r4, r3
 800c126:	d048      	beq.n	800c1ba <rmw_destroy_node+0xc6>
 800c128:	2d00      	cmp	r5, #0
 800c12a:	d1f7      	bne.n	800c11c <rmw_destroy_node+0x28>
 800c12c:	4b2b      	ldr	r3, [pc, #172]	; (800c1dc <rmw_destroy_node+0xe8>)
 800c12e:	681d      	ldr	r5, [r3, #0]
 800c130:	b15d      	cbz	r5, 800c14a <rmw_destroy_node+0x56>
 800c132:	68e9      	ldr	r1, [r5, #12]
 800c134:	68ad      	ldr	r5, [r5, #8]
 800c136:	6a0b      	ldr	r3, [r1, #32]
 800c138:	429c      	cmp	r4, r3
 800c13a:	d1f9      	bne.n	800c130 <rmw_destroy_node+0x3c>
 800c13c:	4638      	mov	r0, r7
 800c13e:	317c      	adds	r1, #124	; 0x7c
 800c140:	f000 fb14 	bl	800c76c <rmw_destroy_subscription>
 800c144:	4606      	mov	r6, r0
 800c146:	2d00      	cmp	r5, #0
 800c148:	d1f3      	bne.n	800c132 <rmw_destroy_node+0x3e>
 800c14a:	4b25      	ldr	r3, [pc, #148]	; (800c1e0 <rmw_destroy_node+0xec>)
 800c14c:	681d      	ldr	r5, [r3, #0]
 800c14e:	b15d      	cbz	r5, 800c168 <rmw_destroy_node+0x74>
 800c150:	68e9      	ldr	r1, [r5, #12]
 800c152:	68ad      	ldr	r5, [r5, #8]
 800c154:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800c156:	429c      	cmp	r4, r3
 800c158:	d1f9      	bne.n	800c14e <rmw_destroy_node+0x5a>
 800c15a:	4638      	mov	r0, r7
 800c15c:	317c      	adds	r1, #124	; 0x7c
 800c15e:	f000 f9db 	bl	800c518 <rmw_destroy_service>
 800c162:	4606      	mov	r6, r0
 800c164:	2d00      	cmp	r5, #0
 800c166:	d1f3      	bne.n	800c150 <rmw_destroy_node+0x5c>
 800c168:	4b1e      	ldr	r3, [pc, #120]	; (800c1e4 <rmw_destroy_node+0xf0>)
 800c16a:	681d      	ldr	r5, [r3, #0]
 800c16c:	b15d      	cbz	r5, 800c186 <rmw_destroy_node+0x92>
 800c16e:	68e9      	ldr	r1, [r5, #12]
 800c170:	68ad      	ldr	r5, [r5, #8]
 800c172:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800c174:	429c      	cmp	r4, r3
 800c176:	d1f9      	bne.n	800c16c <rmw_destroy_node+0x78>
 800c178:	4638      	mov	r0, r7
 800c17a:	317c      	adds	r1, #124	; 0x7c
 800c17c:	f00a f954 	bl	8016428 <rmw_destroy_client>
 800c180:	4606      	mov	r6, r0
 800c182:	2d00      	cmp	r5, #0
 800c184:	d1f3      	bne.n	800c16e <rmw_destroy_node+0x7a>
 800c186:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800c18a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c18e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c192:	6819      	ldr	r1, [r3, #0]
 800c194:	f004 f978 	bl	8010488 <uxr_buffer_delete_entity>
 800c198:	4602      	mov	r2, r0
 800c19a:	6920      	ldr	r0, [r4, #16]
 800c19c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c1a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c1a4:	f000 fe68 	bl	800ce78 <run_xrce_session>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	bf08      	it	eq
 800c1ae:	2602      	moveq	r6, #2
 800c1b0:	4638      	mov	r0, r7
 800c1b2:	f000 fcf7 	bl	800cba4 <rmw_uxrce_fini_node_memory>
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ba:	4638      	mov	r0, r7
 800c1bc:	3184      	adds	r1, #132	; 0x84
 800c1be:	f000 f95b 	bl	800c478 <rmw_destroy_publisher>
 800c1c2:	4606      	mov	r6, r0
 800c1c4:	2d00      	cmp	r5, #0
 800c1c6:	d1a9      	bne.n	800c11c <rmw_destroy_node+0x28>
 800c1c8:	e7b0      	b.n	800c12c <rmw_destroy_node+0x38>
 800c1ca:	2601      	movs	r6, #1
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d0:	462e      	mov	r6, r5
 800c1d2:	e7ab      	b.n	800c12c <rmw_destroy_node+0x38>
 800c1d4:	0801ae4c 	.word	0x0801ae4c
 800c1d8:	20008d18 	.word	0x20008d18
 800c1dc:	2000bf74 	.word	0x2000bf74
 800c1e0:	2000bf64 	.word	0x2000bf64
 800c1e4:	20009598 	.word	0x20009598

0800c1e8 <rmw_node_get_graph_guard_condition>:
 800c1e8:	6843      	ldr	r3, [r0, #4]
 800c1ea:	6918      	ldr	r0, [r3, #16]
 800c1ec:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop

0800c1f4 <flush_session>:
 800c1f4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800c1f6:	f005 baf3 	b.w	80117e0 <uxr_run_session_until_confirm_delivery>
 800c1fa:	bf00      	nop

0800c1fc <rmw_publish>:
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d053      	beq.n	800c2a8 <rmw_publish+0xac>
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	460d      	mov	r5, r1
 800c204:	b08e      	sub	sp, #56	; 0x38
 800c206:	2900      	cmp	r1, #0
 800c208:	d04b      	beq.n	800c2a2 <rmw_publish+0xa6>
 800c20a:	4604      	mov	r4, r0
 800c20c:	6800      	ldr	r0, [r0, #0]
 800c20e:	f000 feb7 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c212:	2800      	cmp	r0, #0
 800c214:	d045      	beq.n	800c2a2 <rmw_publish+0xa6>
 800c216:	6866      	ldr	r6, [r4, #4]
 800c218:	2e00      	cmp	r6, #0
 800c21a:	d042      	beq.n	800c2a2 <rmw_publish+0xa6>
 800c21c:	69b4      	ldr	r4, [r6, #24]
 800c21e:	4628      	mov	r0, r5
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	4798      	blx	r3
 800c224:	69f3      	ldr	r3, [r6, #28]
 800c226:	9005      	str	r0, [sp, #20]
 800c228:	b113      	cbz	r3, 800c230 <rmw_publish+0x34>
 800c22a:	a805      	add	r0, sp, #20
 800c22c:	4798      	blx	r3
 800c22e:	9805      	ldr	r0, [sp, #20]
 800c230:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	9000      	str	r0, [sp, #0]
 800c238:	6972      	ldr	r2, [r6, #20]
 800c23a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c23e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800c240:	ab06      	add	r3, sp, #24
 800c242:	f006 fb5d 	bl	8012900 <uxr_prepare_output_stream>
 800c246:	b1d8      	cbz	r0, 800c280 <rmw_publish+0x84>
 800c248:	68a3      	ldr	r3, [r4, #8]
 800c24a:	4628      	mov	r0, r5
 800c24c:	a906      	add	r1, sp, #24
 800c24e:	4798      	blx	r3
 800c250:	6a33      	ldr	r3, [r6, #32]
 800c252:	4604      	mov	r4, r0
 800c254:	b10b      	cbz	r3, 800c25a <rmw_publish+0x5e>
 800c256:	a806      	add	r0, sp, #24
 800c258:	4798      	blx	r3
 800c25a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800c25e:	2b01      	cmp	r3, #1
 800c260:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800c264:	d022      	beq.n	800c2ac <rmw_publish+0xb0>
 800c266:	6918      	ldr	r0, [r3, #16]
 800c268:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800c26a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c26e:	f005 fab7 	bl	80117e0 <uxr_run_session_until_confirm_delivery>
 800c272:	4004      	ands	r4, r0
 800c274:	b2e4      	uxtb	r4, r4
 800c276:	f084 0001 	eor.w	r0, r4, #1
 800c27a:	b2c0      	uxtb	r0, r0
 800c27c:	b00e      	add	sp, #56	; 0x38
 800c27e:	bd70      	pop	{r4, r5, r6, pc}
 800c280:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 800c284:	4a0c      	ldr	r2, [pc, #48]	; (800c2b8 <rmw_publish+0xbc>)
 800c286:	6908      	ldr	r0, [r1, #16]
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	6972      	ldr	r2, [r6, #20]
 800c292:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800c294:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c298:	ab06      	add	r3, sp, #24
 800c29a:	f006 fb61 	bl	8012960 <uxr_prepare_output_stream_fragmented>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d1d2      	bne.n	800c248 <rmw_publish+0x4c>
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	b00e      	add	sp, #56	; 0x38
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	4770      	bx	lr
 800c2ac:	6918      	ldr	r0, [r3, #16]
 800c2ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c2b2:	f005 fa03 	bl	80116bc <uxr_flash_output_streams>
 800c2b6:	e7de      	b.n	800c276 <rmw_publish+0x7a>
 800c2b8:	0800c1f5 	.word	0x0800c1f5

0800c2bc <rmw_create_publisher>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	b087      	sub	sp, #28
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	f000 80ca 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c2c8:	460e      	mov	r6, r1
 800c2ca:	2900      	cmp	r1, #0
 800c2cc:	f000 80c6 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	6800      	ldr	r0, [r0, #0]
 800c2d4:	4615      	mov	r5, r2
 800c2d6:	4698      	mov	r8, r3
 800c2d8:	f000 fe52 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f000 80bd 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	f000 80ba 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c2e8:	782b      	ldrb	r3, [r5, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80b6 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c2f0:	f1b8 0f00 	cmp.w	r8, #0
 800c2f4:	f000 80b2 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c2f8:	485b      	ldr	r0, [pc, #364]	; (800c468 <rmw_create_publisher+0x1ac>)
 800c2fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c2fe:	f00a f86f 	bl	80163e0 <get_memory>
 800c302:	2800      	cmp	r0, #0
 800c304:	f000 80aa 	beq.w	800c45c <rmw_create_publisher+0x1a0>
 800c308:	2300      	movs	r3, #0
 800c30a:	68c4      	ldr	r4, [r0, #12]
 800c30c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c310:	f00a f8ce 	bl	80164b0 <rmw_get_implementation_identifier>
 800c314:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800c318:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800c31c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800c320:	4628      	mov	r0, r5
 800c322:	f7f3 ff8f 	bl	8000244 <strlen>
 800c326:	3001      	adds	r0, #1
 800c328:	283c      	cmp	r0, #60	; 0x3c
 800c32a:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800c32e:	f200 8092 	bhi.w	800c456 <rmw_create_publisher+0x19a>
 800c332:	462b      	mov	r3, r5
 800c334:	213c      	movs	r1, #60	; 0x3c
 800c336:	4a4d      	ldr	r2, [pc, #308]	; (800c46c <rmw_create_publisher+0x1b0>)
 800c338:	4650      	mov	r0, sl
 800c33a:	f00b fed9 	bl	80180f0 <sniprintf>
 800c33e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c342:	4641      	mov	r1, r8
 800c344:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800c348:	2250      	movs	r2, #80	; 0x50
 800c34a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c34e:	f00b fd4d 	bl	8017dec <memcpy>
 800c352:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c356:	4630      	mov	r0, r6
 800c358:	2b02      	cmp	r3, #2
 800c35a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c35e:	4944      	ldr	r1, [pc, #272]	; (800c470 <rmw_create_publisher+0x1b4>)
 800c360:	bf0c      	ite	eq
 800c362:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800c366:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800c36a:	67a3      	str	r3, [r4, #120]	; 0x78
 800c36c:	2300      	movs	r3, #0
 800c36e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c372:	f000 fe13 	bl	800cf9c <get_message_typesupport_handle>
 800c376:	2800      	cmp	r0, #0
 800c378:	d06d      	beq.n	800c456 <rmw_create_publisher+0x19a>
 800c37a:	6842      	ldr	r2, [r0, #4]
 800c37c:	61a2      	str	r2, [r4, #24]
 800c37e:	2a00      	cmp	r2, #0
 800c380:	d069      	beq.n	800c456 <rmw_create_publisher+0x19a>
 800c382:	4629      	mov	r1, r5
 800c384:	4643      	mov	r3, r8
 800c386:	4648      	mov	r0, r9
 800c388:	f00a f898 	bl	80164bc <create_topic>
 800c38c:	6260      	str	r0, [r4, #36]	; 0x24
 800c38e:	2800      	cmp	r0, #0
 800c390:	d061      	beq.n	800c456 <rmw_create_publisher+0x19a>
 800c392:	f241 5398 	movw	r3, #5528	; 0x1598
 800c396:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c39a:	2103      	movs	r1, #3
 800c39c:	5ad0      	ldrh	r0, [r2, r3]
 800c39e:	2606      	movs	r6, #6
 800c3a0:	1c45      	adds	r5, r0, #1
 800c3a2:	52d5      	strh	r5, [r2, r3]
 800c3a4:	f004 fb46 	bl	8010a34 <uxr_object_id>
 800c3a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3ac:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c3b0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c3b4:	6912      	ldr	r2, [r2, #16]
 800c3b6:	6120      	str	r0, [r4, #16]
 800c3b8:	9600      	str	r6, [sp, #0]
 800c3ba:	6819      	ldr	r1, [r3, #0]
 800c3bc:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800c3c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c3c4:	6922      	ldr	r2, [r4, #16]
 800c3c6:	f004 f91b 	bl	8010600 <uxr_buffer_create_publisher_bin>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3d0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c3d4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c3d8:	f000 fd4e 	bl	800ce78 <run_xrce_session>
 800c3dc:	b3b8      	cbz	r0, 800c44e <rmw_create_publisher+0x192>
 800c3de:	f241 539a 	movw	r3, #5530	; 0x159a
 800c3e2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c3e6:	2105      	movs	r1, #5
 800c3e8:	5ad0      	ldrh	r0, [r2, r3]
 800c3ea:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800c3ee:	1c45      	adds	r5, r0, #1
 800c3f0:	52d5      	strh	r5, [r2, r3]
 800c3f2:	f004 fb1f 	bl	8010a34 <uxr_object_id>
 800c3f6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c3fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3fe:	f10d 0a10 	add.w	sl, sp, #16
 800c402:	6915      	ldr	r5, [r2, #16]
 800c404:	4641      	mov	r1, r8
 800c406:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c40a:	6160      	str	r0, [r4, #20]
 800c40c:	4650      	mov	r0, sl
 800c40e:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800c412:	f000 fd4d 	bl	800ceb0 <convert_qos_profile>
 800c416:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c41a:	9603      	str	r6, [sp, #12]
 800c41c:	9001      	str	r0, [sp, #4]
 800c41e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c422:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c426:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c430:	f8d8 1000 	ldr.w	r1, [r8]
 800c434:	4628      	mov	r0, r5
 800c436:	f004 f943 	bl	80106c0 <uxr_buffer_create_datawriter_bin>
 800c43a:	4602      	mov	r2, r0
 800c43c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c440:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c444:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c448:	f000 fd16 	bl	800ce78 <run_xrce_session>
 800c44c:	b938      	cbnz	r0, 800c45e <rmw_create_publisher+0x1a2>
 800c44e:	4621      	mov	r1, r4
 800c450:	4805      	ldr	r0, [pc, #20]	; (800c468 <rmw_create_publisher+0x1ac>)
 800c452:	f009 ffd5 	bl	8016400 <put_memory>
 800c456:	4638      	mov	r0, r7
 800c458:	f000 fbbc 	bl	800cbd4 <rmw_uxrce_fini_publisher_memory>
 800c45c:	2700      	movs	r7, #0
 800c45e:	4638      	mov	r0, r7
 800c460:	b007      	add	sp, #28
 800c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c466:	bf00      	nop
 800c468:	20008d18 	.word	0x20008d18
 800c46c:	0801a680 	.word	0x0801a680
 800c470:	0801a64c 	.word	0x0801a64c

0800c474 <rmw_publisher_get_actual_qos>:
 800c474:	2000      	movs	r0, #0
 800c476:	4770      	bx	lr

0800c478 <rmw_destroy_publisher>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	b128      	cbz	r0, 800c488 <rmw_destroy_publisher+0x10>
 800c47c:	4604      	mov	r4, r0
 800c47e:	6800      	ldr	r0, [r0, #0]
 800c480:	460d      	mov	r5, r1
 800c482:	f000 fd7d 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c486:	b910      	cbnz	r0, 800c48e <rmw_destroy_publisher+0x16>
 800c488:	2401      	movs	r4, #1
 800c48a:	4620      	mov	r0, r4
 800c48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d0f9      	beq.n	800c488 <rmw_destroy_publisher+0x10>
 800c494:	2d00      	cmp	r5, #0
 800c496:	d0f7      	beq.n	800c488 <rmw_destroy_publisher+0x10>
 800c498:	6828      	ldr	r0, [r5, #0]
 800c49a:	f000 fd71 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d0f2      	beq.n	800c488 <rmw_destroy_publisher+0x10>
 800c4a2:	686c      	ldr	r4, [r5, #4]
 800c4a4:	2c00      	cmp	r4, #0
 800c4a6:	d0ef      	beq.n	800c488 <rmw_destroy_publisher+0x10>
 800c4a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c4aa:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800c4ae:	f00a f853 	bl	8016558 <destroy_topic>
 800c4b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c4b6:	6962      	ldr	r2, [r4, #20]
 800c4b8:	6918      	ldr	r0, [r3, #16]
 800c4ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c4be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c4c2:	6819      	ldr	r1, [r3, #0]
 800c4c4:	f003 ffe0 	bl	8010488 <uxr_buffer_delete_entity>
 800c4c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c4cc:	6922      	ldr	r2, [r4, #16]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800c4d6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c4da:	6809      	ldr	r1, [r1, #0]
 800c4dc:	f003 ffd4 	bl	8010488 <uxr_buffer_delete_entity>
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	6938      	ldr	r0, [r7, #16]
 800c4e4:	4622      	mov	r2, r4
 800c4e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c4ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c4ee:	f000 fcc3 	bl	800ce78 <run_xrce_session>
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	6938      	ldr	r0, [r7, #16]
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c4fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c500:	f000 fcba 	bl	800ce78 <run_xrce_session>
 800c504:	b12c      	cbz	r4, 800c512 <rmw_destroy_publisher+0x9a>
 800c506:	b120      	cbz	r0, 800c512 <rmw_destroy_publisher+0x9a>
 800c508:	2400      	movs	r4, #0
 800c50a:	4628      	mov	r0, r5
 800c50c:	f000 fb62 	bl	800cbd4 <rmw_uxrce_fini_publisher_memory>
 800c510:	e7bb      	b.n	800c48a <rmw_destroy_publisher+0x12>
 800c512:	2402      	movs	r4, #2
 800c514:	e7f9      	b.n	800c50a <rmw_destroy_publisher+0x92>
 800c516:	bf00      	nop

0800c518 <rmw_destroy_service>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	b128      	cbz	r0, 800c528 <rmw_destroy_service+0x10>
 800c51c:	4604      	mov	r4, r0
 800c51e:	6800      	ldr	r0, [r0, #0]
 800c520:	460d      	mov	r5, r1
 800c522:	f000 fd2d 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c526:	b910      	cbnz	r0, 800c52e <rmw_destroy_service+0x16>
 800c528:	2401      	movs	r4, #1
 800c52a:	4620      	mov	r0, r4
 800c52c:	bd70      	pop	{r4, r5, r6, pc}
 800c52e:	6863      	ldr	r3, [r4, #4]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0f9      	beq.n	800c528 <rmw_destroy_service+0x10>
 800c534:	2d00      	cmp	r5, #0
 800c536:	d0f7      	beq.n	800c528 <rmw_destroy_service+0x10>
 800c538:	6828      	ldr	r0, [r5, #0]
 800c53a:	f000 fd21 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c53e:	2800      	cmp	r0, #0
 800c540:	d0f2      	beq.n	800c528 <rmw_destroy_service+0x10>
 800c542:	686e      	ldr	r6, [r5, #4]
 800c544:	2e00      	cmp	r6, #0
 800c546:	d0ef      	beq.n	800c528 <rmw_destroy_service+0x10>
 800c548:	6864      	ldr	r4, [r4, #4]
 800c54a:	6932      	ldr	r2, [r6, #16]
 800c54c:	6920      	ldr	r0, [r4, #16]
 800c54e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c552:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c556:	6819      	ldr	r1, [r3, #0]
 800c558:	f004 fad4 	bl	8010b04 <uxr_buffer_cancel_data>
 800c55c:	4602      	mov	r2, r0
 800c55e:	6920      	ldr	r0, [r4, #16]
 800c560:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c564:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c568:	f000 fc86 	bl	800ce78 <run_xrce_session>
 800c56c:	6920      	ldr	r0, [r4, #16]
 800c56e:	6932      	ldr	r2, [r6, #16]
 800c570:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c574:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c578:	6819      	ldr	r1, [r3, #0]
 800c57a:	f003 ff85 	bl	8010488 <uxr_buffer_delete_entity>
 800c57e:	4602      	mov	r2, r0
 800c580:	6920      	ldr	r0, [r4, #16]
 800c582:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c586:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c58a:	f000 fc75 	bl	800ce78 <run_xrce_session>
 800c58e:	4603      	mov	r3, r0
 800c590:	4628      	mov	r0, r5
 800c592:	2b00      	cmp	r3, #0
 800c594:	bf14      	ite	ne
 800c596:	2400      	movne	r4, #0
 800c598:	2402      	moveq	r4, #2
 800c59a:	f000 fb47 	bl	800cc2c <rmw_uxrce_fini_service_memory>
 800c59e:	e7c4      	b.n	800c52a <rmw_destroy_service+0x12>

0800c5a0 <rmw_create_subscription>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	b08d      	sub	sp, #52	; 0x34
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	f000 80d3 	beq.w	800c752 <rmw_create_subscription+0x1b2>
 800c5ac:	460e      	mov	r6, r1
 800c5ae:	2900      	cmp	r1, #0
 800c5b0:	f000 80cf 	beq.w	800c752 <rmw_create_subscription+0x1b2>
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	6800      	ldr	r0, [r0, #0]
 800c5b8:	4615      	mov	r5, r2
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	f000 fce0 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	f000 80c6 	beq.w	800c752 <rmw_create_subscription+0x1b2>
 800c5c6:	2d00      	cmp	r5, #0
 800c5c8:	f000 80c3 	beq.w	800c752 <rmw_create_subscription+0x1b2>
 800c5cc:	782b      	ldrb	r3, [r5, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 80bf 	beq.w	800c752 <rmw_create_subscription+0x1b2>
 800c5d4:	f1b8 0f00 	cmp.w	r8, #0
 800c5d8:	f000 80bb 	beq.w	800c752 <rmw_create_subscription+0x1b2>
 800c5dc:	485f      	ldr	r0, [pc, #380]	; (800c75c <rmw_create_subscription+0x1bc>)
 800c5de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c5e2:	f009 fefd 	bl	80163e0 <get_memory>
 800c5e6:	4604      	mov	r4, r0
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	f000 80b3 	beq.w	800c754 <rmw_create_subscription+0x1b4>
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	68c7      	ldr	r7, [r0, #12]
 800c5f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c5f6:	f009 ff5b 	bl	80164b0 <rmw_get_implementation_identifier>
 800c5fa:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800c5fe:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c600:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800c604:	4628      	mov	r0, r5
 800c606:	f7f3 fe1d 	bl	8000244 <strlen>
 800c60a:	3001      	adds	r0, #1
 800c60c:	283c      	cmp	r0, #60	; 0x3c
 800c60e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800c612:	f200 809b 	bhi.w	800c74c <rmw_create_subscription+0x1ac>
 800c616:	462b      	mov	r3, r5
 800c618:	213c      	movs	r1, #60	; 0x3c
 800c61a:	4a51      	ldr	r2, [pc, #324]	; (800c760 <rmw_create_subscription+0x1c0>)
 800c61c:	4650      	mov	r0, sl
 800c61e:	f00b fd67 	bl	80180f0 <sniprintf>
 800c622:	4641      	mov	r1, r8
 800c624:	2250      	movs	r2, #80	; 0x50
 800c626:	f8c7 9020 	str.w	r9, [r7, #32]
 800c62a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c62e:	f00b fbdd 	bl	8017dec <memcpy>
 800c632:	4630      	mov	r0, r6
 800c634:	494b      	ldr	r1, [pc, #300]	; (800c764 <rmw_create_subscription+0x1c4>)
 800c636:	f000 fcb1 	bl	800cf9c <get_message_typesupport_handle>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f000 8086 	beq.w	800c74c <rmw_create_subscription+0x1ac>
 800c640:	6842      	ldr	r2, [r0, #4]
 800c642:	61ba      	str	r2, [r7, #24]
 800c644:	2a00      	cmp	r2, #0
 800c646:	f000 8081 	beq.w	800c74c <rmw_create_subscription+0x1ac>
 800c64a:	4629      	mov	r1, r5
 800c64c:	4643      	mov	r3, r8
 800c64e:	4648      	mov	r0, r9
 800c650:	f009 ff34 	bl	80164bc <create_topic>
 800c654:	61f8      	str	r0, [r7, #28]
 800c656:	2800      	cmp	r0, #0
 800c658:	d078      	beq.n	800c74c <rmw_create_subscription+0x1ac>
 800c65a:	f241 539c 	movw	r3, #5532	; 0x159c
 800c65e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c662:	2104      	movs	r1, #4
 800c664:	5ad0      	ldrh	r0, [r2, r3]
 800c666:	2506      	movs	r5, #6
 800c668:	1c46      	adds	r6, r0, #1
 800c66a:	52d6      	strh	r6, [r2, r3]
 800c66c:	f004 f9e2 	bl	8010a34 <uxr_object_id>
 800c670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c674:	6138      	str	r0, [r7, #16]
 800c676:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800c67a:	9500      	str	r5, [sp, #0]
 800c67c:	6811      	ldr	r1, [r2, #0]
 800c67e:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c688:	f003 ffea 	bl	8010660 <uxr_buffer_create_subscriber_bin>
 800c68c:	4602      	mov	r2, r0
 800c68e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c692:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c696:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c69a:	f000 fbed 	bl	800ce78 <run_xrce_session>
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	d050      	beq.n	800c744 <rmw_create_subscription+0x1a4>
 800c6a2:	f241 539e 	movw	r3, #5534	; 0x159e
 800c6a6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	5ad0      	ldrh	r0, [r2, r3]
 800c6ae:	ae08      	add	r6, sp, #32
 800c6b0:	f100 0c01 	add.w	ip, r0, #1
 800c6b4:	f822 c003 	strh.w	ip, [r2, r3]
 800c6b8:	f004 f9bc 	bl	8010a34 <uxr_object_id>
 800c6bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	6178      	str	r0, [r7, #20]
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	f000 fbef 	bl	800ceb0 <convert_qos_profile>
 800c6d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c6d6:	9b05      	ldr	r3, [sp, #20]
 800c6d8:	9001      	str	r0, [sp, #4]
 800c6da:	9503      	str	r5, [sp, #12]
 800c6dc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c6ec:	f8db 1000 	ldr.w	r1, [fp]
 800c6f0:	f004 f862 	bl	80107b8 <uxr_buffer_create_datareader_bin>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c6fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c6fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c702:	f000 fbb9 	bl	800ce78 <run_xrce_session>
 800c706:	b1e8      	cbz	r0, 800c744 <rmw_create_subscription+0x1a4>
 800c708:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c70c:	2200      	movs	r2, #0
 800c70e:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800c712:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c716:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	bf0c      	ite	eq
 800c71e:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800c722:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800c726:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800c72a:	9307      	str	r3, [sp, #28]
 800c72c:	aa0a      	add	r2, sp, #40	; 0x28
 800c72e:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800c732:	9200      	str	r2, [sp, #0]
 800c734:	6819      	ldr	r1, [r3, #0]
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	9b07      	ldr	r3, [sp, #28]
 800c73a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c73e:	f004 f9a7 	bl	8010a90 <uxr_buffer_request_data>
 800c742:	e007      	b.n	800c754 <rmw_create_subscription+0x1b4>
 800c744:	4639      	mov	r1, r7
 800c746:	4805      	ldr	r0, [pc, #20]	; (800c75c <rmw_create_subscription+0x1bc>)
 800c748:	f009 fe5a 	bl	8016400 <put_memory>
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 fa57 	bl	800cc00 <rmw_uxrce_fini_subscription_memory>
 800c752:	2400      	movs	r4, #0
 800c754:	4620      	mov	r0, r4
 800c756:	b00d      	add	sp, #52	; 0x34
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	2000bf74 	.word	0x2000bf74
 800c760:	0801a680 	.word	0x0801a680
 800c764:	0801a64c 	.word	0x0801a64c

0800c768 <rmw_subscription_get_actual_qos>:
 800c768:	2000      	movs	r0, #0
 800c76a:	4770      	bx	lr

0800c76c <rmw_destroy_subscription>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	b128      	cbz	r0, 800c77c <rmw_destroy_subscription+0x10>
 800c770:	4604      	mov	r4, r0
 800c772:	6800      	ldr	r0, [r0, #0]
 800c774:	460d      	mov	r5, r1
 800c776:	f000 fc03 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c77a:	b910      	cbnz	r0, 800c782 <rmw_destroy_subscription+0x16>
 800c77c:	2401      	movs	r4, #1
 800c77e:	4620      	mov	r0, r4
 800c780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c782:	6863      	ldr	r3, [r4, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f9      	beq.n	800c77c <rmw_destroy_subscription+0x10>
 800c788:	2d00      	cmp	r5, #0
 800c78a:	d0f7      	beq.n	800c77c <rmw_destroy_subscription+0x10>
 800c78c:	6828      	ldr	r0, [r5, #0]
 800c78e:	f000 fbf7 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 800c792:	2800      	cmp	r0, #0
 800c794:	d0f2      	beq.n	800c77c <rmw_destroy_subscription+0x10>
 800c796:	686c      	ldr	r4, [r5, #4]
 800c798:	2c00      	cmp	r4, #0
 800c79a:	d0ef      	beq.n	800c77c <rmw_destroy_subscription+0x10>
 800c79c:	6a26      	ldr	r6, [r4, #32]
 800c79e:	6962      	ldr	r2, [r4, #20]
 800c7a0:	6930      	ldr	r0, [r6, #16]
 800c7a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c7a6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c7aa:	6819      	ldr	r1, [r3, #0]
 800c7ac:	f004 f9aa 	bl	8010b04 <uxr_buffer_cancel_data>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	6930      	ldr	r0, [r6, #16]
 800c7b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c7b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c7bc:	f000 fb5c 	bl	800ce78 <run_xrce_session>
 800c7c0:	69e0      	ldr	r0, [r4, #28]
 800c7c2:	f009 fec9 	bl	8016558 <destroy_topic>
 800c7c6:	6a23      	ldr	r3, [r4, #32]
 800c7c8:	6962      	ldr	r2, [r4, #20]
 800c7ca:	6918      	ldr	r0, [r3, #16]
 800c7cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c7d0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c7d4:	6819      	ldr	r1, [r3, #0]
 800c7d6:	f003 fe57 	bl	8010488 <uxr_buffer_delete_entity>
 800c7da:	6a23      	ldr	r3, [r4, #32]
 800c7dc:	6922      	ldr	r2, [r4, #16]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800c7e6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c7ea:	6809      	ldr	r1, [r1, #0]
 800c7ec:	f003 fe4c 	bl	8010488 <uxr_buffer_delete_entity>
 800c7f0:	4607      	mov	r7, r0
 800c7f2:	6930      	ldr	r0, [r6, #16]
 800c7f4:	4622      	mov	r2, r4
 800c7f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c7fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c7fe:	f000 fb3b 	bl	800ce78 <run_xrce_session>
 800c802:	4604      	mov	r4, r0
 800c804:	6930      	ldr	r0, [r6, #16]
 800c806:	463a      	mov	r2, r7
 800c808:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c80c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c810:	f000 fb32 	bl	800ce78 <run_xrce_session>
 800c814:	b12c      	cbz	r4, 800c822 <rmw_destroy_subscription+0xb6>
 800c816:	b120      	cbz	r0, 800c822 <rmw_destroy_subscription+0xb6>
 800c818:	2400      	movs	r4, #0
 800c81a:	4628      	mov	r0, r5
 800c81c:	f000 f9f0 	bl	800cc00 <rmw_uxrce_fini_subscription_memory>
 800c820:	e7ad      	b.n	800c77e <rmw_destroy_subscription+0x12>
 800c822:	2402      	movs	r4, #2
 800c824:	e7f9      	b.n	800c81a <rmw_destroy_subscription+0xae>
 800c826:	bf00      	nop

0800c828 <rmw_take_with_info>:
 800c828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82a:	4604      	mov	r4, r0
 800c82c:	6800      	ldr	r0, [r0, #0]
 800c82e:	460f      	mov	r7, r1
 800c830:	4615      	mov	r5, r2
 800c832:	b089      	sub	sp, #36	; 0x24
 800c834:	b128      	cbz	r0, 800c842 <rmw_take_with_info+0x1a>
 800c836:	4b24      	ldr	r3, [pc, #144]	; (800c8c8 <rmw_take_with_info+0xa0>)
 800c838:	6819      	ldr	r1, [r3, #0]
 800c83a:	f7f3 fcf9 	bl	8000230 <strcmp>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d13e      	bne.n	800c8c0 <rmw_take_with_info+0x98>
 800c842:	b305      	cbz	r5, 800c886 <rmw_take_with_info+0x5e>
 800c844:	2300      	movs	r3, #0
 800c846:	6864      	ldr	r4, [r4, #4]
 800c848:	702b      	strb	r3, [r5, #0]
 800c84a:	f000 fa9d 	bl	800cd88 <rmw_uxrce_clean_expired_static_input_buffer>
 800c84e:	4620      	mov	r0, r4
 800c850:	f000 fa70 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c854:	4606      	mov	r6, r0
 800c856:	b1f0      	cbz	r0, 800c896 <rmw_take_with_info+0x6e>
 800c858:	68c1      	ldr	r1, [r0, #12]
 800c85a:	4668      	mov	r0, sp
 800c85c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800c860:	3110      	adds	r1, #16
 800c862:	f003 fcc3 	bl	80101ec <ucdr_init_buffer>
 800c866:	69a3      	ldr	r3, [r4, #24]
 800c868:	4639      	mov	r1, r7
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	4668      	mov	r0, sp
 800c86e:	4798      	blx	r3
 800c870:	4604      	mov	r4, r0
 800c872:	4631      	mov	r1, r6
 800c874:	4815      	ldr	r0, [pc, #84]	; (800c8cc <rmw_take_with_info+0xa4>)
 800c876:	f009 fdc3 	bl	8016400 <put_memory>
 800c87a:	702c      	strb	r4, [r5, #0]
 800c87c:	f084 0001 	eor.w	r0, r4, #1
 800c880:	b2c0      	uxtb	r0, r0
 800c882:	b009      	add	sp, #36	; 0x24
 800c884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c886:	6864      	ldr	r4, [r4, #4]
 800c888:	f000 fa7e 	bl	800cd88 <rmw_uxrce_clean_expired_static_input_buffer>
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 fa51 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c892:	4605      	mov	r5, r0
 800c894:	b910      	cbnz	r0, 800c89c <rmw_take_with_info+0x74>
 800c896:	2001      	movs	r0, #1
 800c898:	b009      	add	sp, #36	; 0x24
 800c89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c89c:	68e9      	ldr	r1, [r5, #12]
 800c89e:	4668      	mov	r0, sp
 800c8a0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800c8a4:	3110      	adds	r1, #16
 800c8a6:	f003 fca1 	bl	80101ec <ucdr_init_buffer>
 800c8aa:	69a3      	ldr	r3, [r4, #24]
 800c8ac:	4639      	mov	r1, r7
 800c8ae:	4668      	mov	r0, sp
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	4798      	blx	r3
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4804      	ldr	r0, [pc, #16]	; (800c8cc <rmw_take_with_info+0xa4>)
 800c8ba:	f009 fda1 	bl	8016400 <put_memory>
 800c8be:	e7dd      	b.n	800c87c <rmw_take_with_info+0x54>
 800c8c0:	200c      	movs	r0, #12
 800c8c2:	b009      	add	sp, #36	; 0x24
 800c8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	0801ae4c 	.word	0x0801ae4c
 800c8cc:	20008d08 	.word	0x20008d08

0800c8d0 <rmw_uxrce_transport_init>:
 800c8d0:	b508      	push	{r3, lr}
 800c8d2:	b108      	cbz	r0, 800c8d8 <rmw_uxrce_transport_init+0x8>
 800c8d4:	f100 0210 	add.w	r2, r0, #16
 800c8d8:	b139      	cbz	r1, 800c8ea <rmw_uxrce_transport_init+0x1a>
 800c8da:	4610      	mov	r0, r2
 800c8dc:	6949      	ldr	r1, [r1, #20]
 800c8de:	f004 f871 	bl	80109c4 <uxr_init_custom_transport>
 800c8e2:	f080 0001 	eor.w	r0, r0, #1
 800c8e6:	b2c0      	uxtb	r0, r0
 800c8e8:	bd08      	pop	{r3, pc}
 800c8ea:	4b04      	ldr	r3, [pc, #16]	; (800c8fc <rmw_uxrce_transport_init+0x2c>)
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	6859      	ldr	r1, [r3, #4]
 800c8f0:	f004 f868 	bl	80109c4 <uxr_init_custom_transport>
 800c8f4:	f080 0001 	eor.w	r0, r0, #1
 800c8f8:	b2c0      	uxtb	r0, r0
 800c8fa:	bd08      	pop	{r3, pc}
 800c8fc:	20008ce8 	.word	0x20008ce8

0800c900 <rmw_uros_epoch_nanos>:
 800c900:	4b05      	ldr	r3, [pc, #20]	; (800c918 <rmw_uros_epoch_nanos+0x18>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	b123      	cbz	r3, 800c910 <rmw_uros_epoch_nanos+0x10>
 800c906:	68d8      	ldr	r0, [r3, #12]
 800c908:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c90c:	f004 becc 	b.w	80116a8 <uxr_epoch_nanos>
 800c910:	2000      	movs	r0, #0
 800c912:	2100      	movs	r1, #0
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	2000beb0 	.word	0x2000beb0

0800c91c <rmw_uros_sync_session>:
 800c91c:	b508      	push	{r3, lr}
 800c91e:	4b07      	ldr	r3, [pc, #28]	; (800c93c <rmw_uros_sync_session+0x20>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	b14b      	cbz	r3, 800c938 <rmw_uros_sync_session+0x1c>
 800c924:	4601      	mov	r1, r0
 800c926:	68d8      	ldr	r0, [r3, #12]
 800c928:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c92c:	f004 fe68 	bl	8011600 <uxr_sync_session>
 800c930:	f080 0001 	eor.w	r0, r0, #1
 800c934:	b2c0      	uxtb	r0, r0
 800c936:	bd08      	pop	{r3, pc}
 800c938:	2001      	movs	r0, #1
 800c93a:	bd08      	pop	{r3, pc}
 800c93c:	2000beb0 	.word	0x2000beb0

0800c940 <rmw_uxrce_init_service_memory>:
 800c940:	b1ba      	cbz	r2, 800c972 <rmw_uxrce_init_service_memory+0x32>
 800c942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c944:	7a03      	ldrb	r3, [r0, #8]
 800c946:	4605      	mov	r5, r0
 800c948:	b993      	cbnz	r3, 800c970 <rmw_uxrce_init_service_memory+0x30>
 800c94a:	460c      	mov	r4, r1
 800c94c:	21c8      	movs	r1, #200	; 0xc8
 800c94e:	2001      	movs	r0, #1
 800c950:	461f      	mov	r7, r3
 800c952:	fb01 4602 	mla	r6, r1, r2, r4
 800c956:	e9c5 3300 	strd	r3, r3, [r5]
 800c95a:	60e9      	str	r1, [r5, #12]
 800c95c:	7228      	strb	r0, [r5, #8]
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f009 fd4d 	bl	8016400 <put_memory>
 800c966:	60e4      	str	r4, [r4, #12]
 800c968:	f804 7bc8 	strb.w	r7, [r4], #200
 800c96c:	42a6      	cmp	r6, r4
 800c96e:	d1f6      	bne.n	800c95e <rmw_uxrce_init_service_memory+0x1e>
 800c970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c972:	4770      	bx	lr

0800c974 <rmw_uxrce_init_client_memory>:
 800c974:	b1ba      	cbz	r2, 800c9a6 <rmw_uxrce_init_client_memory+0x32>
 800c976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c978:	7a03      	ldrb	r3, [r0, #8]
 800c97a:	4605      	mov	r5, r0
 800c97c:	b993      	cbnz	r3, 800c9a4 <rmw_uxrce_init_client_memory+0x30>
 800c97e:	460c      	mov	r4, r1
 800c980:	21c8      	movs	r1, #200	; 0xc8
 800c982:	2001      	movs	r0, #1
 800c984:	461f      	mov	r7, r3
 800c986:	fb01 4602 	mla	r6, r1, r2, r4
 800c98a:	e9c5 3300 	strd	r3, r3, [r5]
 800c98e:	60e9      	str	r1, [r5, #12]
 800c990:	7228      	strb	r0, [r5, #8]
 800c992:	4621      	mov	r1, r4
 800c994:	4628      	mov	r0, r5
 800c996:	f009 fd33 	bl	8016400 <put_memory>
 800c99a:	60e4      	str	r4, [r4, #12]
 800c99c:	f804 7bc8 	strb.w	r7, [r4], #200
 800c9a0:	42a6      	cmp	r6, r4
 800c9a2:	d1f6      	bne.n	800c992 <rmw_uxrce_init_client_memory+0x1e>
 800c9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a6:	4770      	bx	lr

0800c9a8 <rmw_uxrce_init_publisher_memory>:
 800c9a8:	b1ba      	cbz	r2, 800c9da <rmw_uxrce_init_publisher_memory+0x32>
 800c9aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ac:	7a03      	ldrb	r3, [r0, #8]
 800c9ae:	4605      	mov	r5, r0
 800c9b0:	b993      	cbnz	r3, 800c9d8 <rmw_uxrce_init_publisher_memory+0x30>
 800c9b2:	460c      	mov	r4, r1
 800c9b4:	21d8      	movs	r1, #216	; 0xd8
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	461f      	mov	r7, r3
 800c9ba:	fb01 4602 	mla	r6, r1, r2, r4
 800c9be:	e9c5 3300 	strd	r3, r3, [r5]
 800c9c2:	60e9      	str	r1, [r5, #12]
 800c9c4:	7228      	strb	r0, [r5, #8]
 800c9c6:	4621      	mov	r1, r4
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	f009 fd19 	bl	8016400 <put_memory>
 800c9ce:	60e4      	str	r4, [r4, #12]
 800c9d0:	f804 7bd8 	strb.w	r7, [r4], #216
 800c9d4:	42a6      	cmp	r6, r4
 800c9d6:	d1f6      	bne.n	800c9c6 <rmw_uxrce_init_publisher_memory+0x1e>
 800c9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9da:	4770      	bx	lr

0800c9dc <rmw_uxrce_init_subscription_memory>:
 800c9dc:	b1ba      	cbz	r2, 800ca0e <rmw_uxrce_init_subscription_memory+0x32>
 800c9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e0:	7a03      	ldrb	r3, [r0, #8]
 800c9e2:	4605      	mov	r5, r0
 800c9e4:	b993      	cbnz	r3, 800ca0c <rmw_uxrce_init_subscription_memory+0x30>
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	21d0      	movs	r1, #208	; 0xd0
 800c9ea:	2001      	movs	r0, #1
 800c9ec:	461f      	mov	r7, r3
 800c9ee:	fb01 4602 	mla	r6, r1, r2, r4
 800c9f2:	e9c5 3300 	strd	r3, r3, [r5]
 800c9f6:	60e9      	str	r1, [r5, #12]
 800c9f8:	7228      	strb	r0, [r5, #8]
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	f009 fcff 	bl	8016400 <put_memory>
 800ca02:	60e4      	str	r4, [r4, #12]
 800ca04:	f804 7bd0 	strb.w	r7, [r4], #208
 800ca08:	42a6      	cmp	r6, r4
 800ca0a:	d1f6      	bne.n	800c9fa <rmw_uxrce_init_subscription_memory+0x1e>
 800ca0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0e:	4770      	bx	lr

0800ca10 <rmw_uxrce_init_node_memory>:
 800ca10:	b1ba      	cbz	r2, 800ca42 <rmw_uxrce_init_node_memory+0x32>
 800ca12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca14:	7a03      	ldrb	r3, [r0, #8]
 800ca16:	4605      	mov	r5, r0
 800ca18:	b993      	cbnz	r3, 800ca40 <rmw_uxrce_init_node_memory+0x30>
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	21a4      	movs	r1, #164	; 0xa4
 800ca1e:	2001      	movs	r0, #1
 800ca20:	461f      	mov	r7, r3
 800ca22:	fb01 4602 	mla	r6, r1, r2, r4
 800ca26:	e9c5 3300 	strd	r3, r3, [r5]
 800ca2a:	60e9      	str	r1, [r5, #12]
 800ca2c:	7228      	strb	r0, [r5, #8]
 800ca2e:	4621      	mov	r1, r4
 800ca30:	4628      	mov	r0, r5
 800ca32:	f009 fce5 	bl	8016400 <put_memory>
 800ca36:	60e4      	str	r4, [r4, #12]
 800ca38:	f804 7ba4 	strb.w	r7, [r4], #164
 800ca3c:	42a6      	cmp	r6, r4
 800ca3e:	d1f6      	bne.n	800ca2e <rmw_uxrce_init_node_memory+0x1e>
 800ca40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca42:	4770      	bx	lr

0800ca44 <rmw_uxrce_init_session_memory>:
 800ca44:	b1e2      	cbz	r2, 800ca80 <rmw_uxrce_init_session_memory+0x3c>
 800ca46:	7a03      	ldrb	r3, [r0, #8]
 800ca48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	b9ab      	cbnz	r3, 800ca7c <rmw_uxrce_init_session_memory+0x38>
 800ca50:	f241 50a8 	movw	r0, #5544	; 0x15a8
 800ca54:	460c      	mov	r4, r1
 800ca56:	2101      	movs	r1, #1
 800ca58:	4698      	mov	r8, r3
 800ca5a:	4607      	mov	r7, r0
 800ca5c:	fb00 4602 	mla	r6, r0, r2, r4
 800ca60:	e9c5 3300 	strd	r3, r3, [r5]
 800ca64:	60e8      	str	r0, [r5, #12]
 800ca66:	7229      	strb	r1, [r5, #8]
 800ca68:	4621      	mov	r1, r4
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f009 fcc8 	bl	8016400 <put_memory>
 800ca70:	60e4      	str	r4, [r4, #12]
 800ca72:	f884 8000 	strb.w	r8, [r4]
 800ca76:	443c      	add	r4, r7
 800ca78:	42a6      	cmp	r6, r4
 800ca7a:	d1f5      	bne.n	800ca68 <rmw_uxrce_init_session_memory+0x24>
 800ca7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop

0800ca84 <rmw_uxrce_init_topic_memory>:
 800ca84:	b1ca      	cbz	r2, 800caba <rmw_uxrce_init_topic_memory+0x36>
 800ca86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca88:	7a03      	ldrb	r3, [r0, #8]
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	b9a3      	cbnz	r3, 800cab8 <rmw_uxrce_init_topic_memory+0x34>
 800ca8e:	460c      	mov	r4, r1
 800ca90:	2001      	movs	r0, #1
 800ca92:	211c      	movs	r1, #28
 800ca94:	461f      	mov	r7, r3
 800ca96:	e9c6 3300 	strd	r3, r3, [r6]
 800ca9a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ca9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800caa2:	7230      	strb	r0, [r6, #8]
 800caa4:	60f1      	str	r1, [r6, #12]
 800caa6:	4621      	mov	r1, r4
 800caa8:	4630      	mov	r0, r6
 800caaa:	f009 fca9 	bl	8016400 <put_memory>
 800caae:	60e4      	str	r4, [r4, #12]
 800cab0:	f804 7b1c 	strb.w	r7, [r4], #28
 800cab4:	42a5      	cmp	r5, r4
 800cab6:	d1f6      	bne.n	800caa6 <rmw_uxrce_init_topic_memory+0x22>
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caba:	4770      	bx	lr

0800cabc <rmw_uxrce_init_static_input_buffer_memory>:
 800cabc:	b1da      	cbz	r2, 800caf6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac0:	7a03      	ldrb	r3, [r0, #8]
 800cac2:	4606      	mov	r6, r0
 800cac4:	b9b3      	cbnz	r3, 800caf4 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800cac6:	460c      	mov	r4, r1
 800cac8:	2001      	movs	r0, #1
 800caca:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800cace:	461f      	mov	r7, r3
 800cad0:	e9c6 3300 	strd	r3, r3, [r6]
 800cad4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800cad8:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800cadc:	7230      	strb	r0, [r6, #8]
 800cade:	60f1      	str	r1, [r6, #12]
 800cae0:	4621      	mov	r1, r4
 800cae2:	4630      	mov	r0, r6
 800cae4:	f009 fc8c 	bl	8016400 <put_memory>
 800cae8:	60e4      	str	r4, [r4, #12]
 800caea:	7027      	strb	r7, [r4, #0]
 800caec:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800caf0:	42a5      	cmp	r5, r4
 800caf2:	d1f5      	bne.n	800cae0 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 800caf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caf6:	4770      	bx	lr

0800caf8 <rmw_uxrce_init_init_options_impl_memory>:
 800caf8:	b1ba      	cbz	r2, 800cb2a <rmw_uxrce_init_init_options_impl_memory+0x32>
 800cafa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafc:	7a03      	ldrb	r3, [r0, #8]
 800cafe:	4605      	mov	r5, r0
 800cb00:	b993      	cbnz	r3, 800cb28 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800cb02:	460c      	mov	r4, r1
 800cb04:	212c      	movs	r1, #44	; 0x2c
 800cb06:	2001      	movs	r0, #1
 800cb08:	461f      	mov	r7, r3
 800cb0a:	fb01 4602 	mla	r6, r1, r2, r4
 800cb0e:	e9c5 3300 	strd	r3, r3, [r5]
 800cb12:	60e9      	str	r1, [r5, #12]
 800cb14:	7228      	strb	r0, [r5, #8]
 800cb16:	4621      	mov	r1, r4
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f009 fc71 	bl	8016400 <put_memory>
 800cb1e:	60e4      	str	r4, [r4, #12]
 800cb20:	f804 7b2c 	strb.w	r7, [r4], #44
 800cb24:	42a6      	cmp	r6, r4
 800cb26:	d1f6      	bne.n	800cb16 <rmw_uxrce_init_init_options_impl_memory+0x1e>
 800cb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb2a:	4770      	bx	lr

0800cb2c <rmw_uxrce_init_wait_set_memory>:
 800cb2c:	b1ca      	cbz	r2, 800cb62 <rmw_uxrce_init_wait_set_memory+0x36>
 800cb2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb30:	7a03      	ldrb	r3, [r0, #8]
 800cb32:	4606      	mov	r6, r0
 800cb34:	b9a3      	cbnz	r3, 800cb60 <rmw_uxrce_init_wait_set_memory+0x34>
 800cb36:	460c      	mov	r4, r1
 800cb38:	2001      	movs	r0, #1
 800cb3a:	211c      	movs	r1, #28
 800cb3c:	461f      	mov	r7, r3
 800cb3e:	e9c6 3300 	strd	r3, r3, [r6]
 800cb42:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800cb46:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb4a:	7230      	strb	r0, [r6, #8]
 800cb4c:	60f1      	str	r1, [r6, #12]
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4630      	mov	r0, r6
 800cb52:	f009 fc55 	bl	8016400 <put_memory>
 800cb56:	60e4      	str	r4, [r4, #12]
 800cb58:	f804 7b1c 	strb.w	r7, [r4], #28
 800cb5c:	42a5      	cmp	r5, r4
 800cb5e:	d1f6      	bne.n	800cb4e <rmw_uxrce_init_wait_set_memory+0x22>
 800cb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb62:	4770      	bx	lr

0800cb64 <rmw_uxrce_init_guard_condition_memory>:
 800cb64:	b1ba      	cbz	r2, 800cb96 <rmw_uxrce_init_guard_condition_memory+0x32>
 800cb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb68:	7a03      	ldrb	r3, [r0, #8]
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	b993      	cbnz	r3, 800cb94 <rmw_uxrce_init_guard_condition_memory+0x30>
 800cb6e:	460c      	mov	r4, r1
 800cb70:	2001      	movs	r0, #1
 800cb72:	2120      	movs	r1, #32
 800cb74:	461f      	mov	r7, r3
 800cb76:	e9c5 3300 	strd	r3, r3, [r5]
 800cb7a:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800cb7e:	7228      	strb	r0, [r5, #8]
 800cb80:	60e9      	str	r1, [r5, #12]
 800cb82:	4621      	mov	r1, r4
 800cb84:	4628      	mov	r0, r5
 800cb86:	f009 fc3b 	bl	8016400 <put_memory>
 800cb8a:	60e4      	str	r4, [r4, #12]
 800cb8c:	f804 7b20 	strb.w	r7, [r4], #32
 800cb90:	42a6      	cmp	r6, r4
 800cb92:	d1f6      	bne.n	800cb82 <rmw_uxrce_init_guard_condition_memory+0x1e>
 800cb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb96:	4770      	bx	lr

0800cb98 <rmw_uxrce_fini_session_memory>:
 800cb98:	4601      	mov	r1, r0
 800cb9a:	4801      	ldr	r0, [pc, #4]	; (800cba0 <rmw_uxrce_fini_session_memory+0x8>)
 800cb9c:	f009 bc30 	b.w	8016400 <put_memory>
 800cba0:	2000beb0 	.word	0x2000beb0

0800cba4 <rmw_uxrce_fini_node_memory>:
 800cba4:	b538      	push	{r3, r4, r5, lr}
 800cba6:	4604      	mov	r4, r0
 800cba8:	6800      	ldr	r0, [r0, #0]
 800cbaa:	b128      	cbz	r0, 800cbb8 <rmw_uxrce_fini_node_memory+0x14>
 800cbac:	4b07      	ldr	r3, [pc, #28]	; (800cbcc <rmw_uxrce_fini_node_memory+0x28>)
 800cbae:	6819      	ldr	r1, [r3, #0]
 800cbb0:	f7f3 fb3e 	bl	8000230 <strcmp>
 800cbb4:	b940      	cbnz	r0, 800cbc8 <rmw_uxrce_fini_node_memory+0x24>
 800cbb6:	6020      	str	r0, [r4, #0]
 800cbb8:	6861      	ldr	r1, [r4, #4]
 800cbba:	b129      	cbz	r1, 800cbc8 <rmw_uxrce_fini_node_memory+0x24>
 800cbbc:	2500      	movs	r5, #0
 800cbbe:	4804      	ldr	r0, [pc, #16]	; (800cbd0 <rmw_uxrce_fini_node_memory+0x2c>)
 800cbc0:	610d      	str	r5, [r1, #16]
 800cbc2:	f009 fc1d 	bl	8016400 <put_memory>
 800cbc6:	6065      	str	r5, [r4, #4]
 800cbc8:	bd38      	pop	{r3, r4, r5, pc}
 800cbca:	bf00      	nop
 800cbcc:	0801ae4c 	.word	0x0801ae4c
 800cbd0:	2000bcdc 	.word	0x2000bcdc

0800cbd4 <rmw_uxrce_fini_publisher_memory>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	6800      	ldr	r0, [r0, #0]
 800cbda:	b128      	cbz	r0, 800cbe8 <rmw_uxrce_fini_publisher_memory+0x14>
 800cbdc:	4b06      	ldr	r3, [pc, #24]	; (800cbf8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800cbde:	6819      	ldr	r1, [r3, #0]
 800cbe0:	f7f3 fb26 	bl	8000230 <strcmp>
 800cbe4:	b938      	cbnz	r0, 800cbf6 <rmw_uxrce_fini_publisher_memory+0x22>
 800cbe6:	6020      	str	r0, [r4, #0]
 800cbe8:	6861      	ldr	r1, [r4, #4]
 800cbea:	b121      	cbz	r1, 800cbf6 <rmw_uxrce_fini_publisher_memory+0x22>
 800cbec:	4803      	ldr	r0, [pc, #12]	; (800cbfc <rmw_uxrce_fini_publisher_memory+0x28>)
 800cbee:	f009 fc07 	bl	8016400 <put_memory>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	6063      	str	r3, [r4, #4]
 800cbf6:	bd10      	pop	{r4, pc}
 800cbf8:	0801ae4c 	.word	0x0801ae4c
 800cbfc:	20008d18 	.word	0x20008d18

0800cc00 <rmw_uxrce_fini_subscription_memory>:
 800cc00:	b510      	push	{r4, lr}
 800cc02:	4604      	mov	r4, r0
 800cc04:	6800      	ldr	r0, [r0, #0]
 800cc06:	b128      	cbz	r0, 800cc14 <rmw_uxrce_fini_subscription_memory+0x14>
 800cc08:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <rmw_uxrce_fini_subscription_memory+0x24>)
 800cc0a:	6819      	ldr	r1, [r3, #0]
 800cc0c:	f7f3 fb10 	bl	8000230 <strcmp>
 800cc10:	b938      	cbnz	r0, 800cc22 <rmw_uxrce_fini_subscription_memory+0x22>
 800cc12:	6020      	str	r0, [r4, #0]
 800cc14:	6861      	ldr	r1, [r4, #4]
 800cc16:	b121      	cbz	r1, 800cc22 <rmw_uxrce_fini_subscription_memory+0x22>
 800cc18:	4803      	ldr	r0, [pc, #12]	; (800cc28 <rmw_uxrce_fini_subscription_memory+0x28>)
 800cc1a:	f009 fbf1 	bl	8016400 <put_memory>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	6063      	str	r3, [r4, #4]
 800cc22:	bd10      	pop	{r4, pc}
 800cc24:	0801ae4c 	.word	0x0801ae4c
 800cc28:	2000bf74 	.word	0x2000bf74

0800cc2c <rmw_uxrce_fini_service_memory>:
 800cc2c:	b510      	push	{r4, lr}
 800cc2e:	4604      	mov	r4, r0
 800cc30:	6800      	ldr	r0, [r0, #0]
 800cc32:	b128      	cbz	r0, 800cc40 <rmw_uxrce_fini_service_memory+0x14>
 800cc34:	4b06      	ldr	r3, [pc, #24]	; (800cc50 <rmw_uxrce_fini_service_memory+0x24>)
 800cc36:	6819      	ldr	r1, [r3, #0]
 800cc38:	f7f3 fafa 	bl	8000230 <strcmp>
 800cc3c:	b938      	cbnz	r0, 800cc4e <rmw_uxrce_fini_service_memory+0x22>
 800cc3e:	6020      	str	r0, [r4, #0]
 800cc40:	6861      	ldr	r1, [r4, #4]
 800cc42:	b121      	cbz	r1, 800cc4e <rmw_uxrce_fini_service_memory+0x22>
 800cc44:	4803      	ldr	r0, [pc, #12]	; (800cc54 <rmw_uxrce_fini_service_memory+0x28>)
 800cc46:	f009 fbdb 	bl	8016400 <put_memory>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	6063      	str	r3, [r4, #4]
 800cc4e:	bd10      	pop	{r4, pc}
 800cc50:	0801ae4c 	.word	0x0801ae4c
 800cc54:	2000bf64 	.word	0x2000bf64

0800cc58 <rmw_uxrce_fini_client_memory>:
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	6800      	ldr	r0, [r0, #0]
 800cc5e:	b128      	cbz	r0, 800cc6c <rmw_uxrce_fini_client_memory+0x14>
 800cc60:	4b06      	ldr	r3, [pc, #24]	; (800cc7c <rmw_uxrce_fini_client_memory+0x24>)
 800cc62:	6819      	ldr	r1, [r3, #0]
 800cc64:	f7f3 fae4 	bl	8000230 <strcmp>
 800cc68:	b938      	cbnz	r0, 800cc7a <rmw_uxrce_fini_client_memory+0x22>
 800cc6a:	6020      	str	r0, [r4, #0]
 800cc6c:	6861      	ldr	r1, [r4, #4]
 800cc6e:	b121      	cbz	r1, 800cc7a <rmw_uxrce_fini_client_memory+0x22>
 800cc70:	4803      	ldr	r0, [pc, #12]	; (800cc80 <rmw_uxrce_fini_client_memory+0x28>)
 800cc72:	f009 fbc5 	bl	8016400 <put_memory>
 800cc76:	2300      	movs	r3, #0
 800cc78:	6063      	str	r3, [r4, #4]
 800cc7a:	bd10      	pop	{r4, pc}
 800cc7c:	0801ae4c 	.word	0x0801ae4c
 800cc80:	20009598 	.word	0x20009598

0800cc84 <rmw_uxrce_fini_topic_memory>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	4604      	mov	r4, r0
 800cc88:	4803      	ldr	r0, [pc, #12]	; (800cc98 <rmw_uxrce_fini_topic_memory+0x14>)
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	f009 fbb8 	bl	8016400 <put_memory>
 800cc90:	2300      	movs	r3, #0
 800cc92:	61a3      	str	r3, [r4, #24]
 800cc94:	bd10      	pop	{r4, pc}
 800cc96:	bf00      	nop
 800cc98:	2000bea0 	.word	0x2000bea0

0800cc9c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	b4f0      	push	{r4, r5, r6, r7}
 800cca0:	4923      	ldr	r1, [pc, #140]	; (800cd30 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800cca2:	ac04      	add	r4, sp, #16
 800cca4:	e884 000c 	stmia.w	r4, {r2, r3}
 800cca8:	680d      	ldr	r5, [r1, #0]
 800ccaa:	9c05      	ldr	r4, [sp, #20]
 800ccac:	4601      	mov	r1, r0
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	d03c      	beq.n	800cd2c <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800ccb2:	462b      	mov	r3, r5
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ccbe:	4291      	cmp	r1, r2
 800ccc0:	bf08      	it	eq
 800ccc2:	3001      	addeq	r0, #1
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1f6      	bne.n	800ccb6 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800ccc8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d025      	beq.n	800cd1c <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800ccd0:	d905      	bls.n	800ccde <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d003      	beq.n	800ccde <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	bcf0      	pop	{r4, r5, r6, r7}
 800ccda:	b002      	add	sp, #8
 800ccdc:	4770      	bx	lr
 800ccde:	b304      	cbz	r4, 800cd22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cce0:	4284      	cmp	r4, r0
 800cce2:	d81e      	bhi.n	800cd22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cce4:	2d00      	cmp	r5, #0
 800cce6:	d0f6      	beq.n	800ccd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cce8:	2000      	movs	r0, #0
 800ccea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ccee:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800ccf2:	e002      	b.n	800ccfa <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ccf4:	68ad      	ldr	r5, [r5, #8]
 800ccf6:	2d00      	cmp	r5, #0
 800ccf8:	d0ee      	beq.n	800ccd8 <rmw_uxrce_get_static_input_buffer_for_entity+0x3c>
 800ccfa:	68eb      	ldr	r3, [r5, #12]
 800ccfc:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800cd00:	4291      	cmp	r1, r2
 800cd02:	d1f7      	bne.n	800ccf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800cd04:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800cd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0c:	42b2      	cmp	r2, r6
 800cd0e:	eb73 0407 	sbcs.w	r4, r3, r7
 800cd12:	daef      	bge.n	800ccf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800cd14:	4616      	mov	r6, r2
 800cd16:	461f      	mov	r7, r3
 800cd18:	4628      	mov	r0, r5
 800cd1a:	e7eb      	b.n	800ccf4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800cd1c:	b10c      	cbz	r4, 800cd22 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cd1e:	4284      	cmp	r4, r0
 800cd20:	d9d9      	bls.n	800ccd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cd22:	bcf0      	pop	{r4, r5, r6, r7}
 800cd24:	4802      	ldr	r0, [pc, #8]	; (800cd30 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800cd26:	b002      	add	sp, #8
 800cd28:	f009 bb5a 	b.w	80163e0 <get_memory>
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	e7cb      	b.n	800ccc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x2c>
 800cd30:	20008d08 	.word	0x20008d08

0800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800cd34:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	b303      	cbz	r3, 800cd7c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>
 800cd3a:	e92d 03d0 	stmdb	sp!, {r4, r6, r7, r8, r9}
 800cd3e:	4604      	mov	r4, r0
 800cd40:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cd44:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e001      	b.n	800cd50 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	b193      	cbz	r3, 800cd76 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800cd50:	68da      	ldr	r2, [r3, #12]
 800cd52:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800cd56:	428c      	cmp	r4, r1
 800cd58:	d1f8      	bne.n	800cd4c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd5a:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800cd5e:	e9d2 8900 	ldrd	r8, r9, [r2]
 800cd62:	45b0      	cmp	r8, r6
 800cd64:	eb79 0207 	sbcs.w	r2, r9, r7
 800cd68:	daf0      	bge.n	800cd4c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	4646      	mov	r6, r8
 800cd70:	464f      	mov	r7, r9
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d1ec      	bne.n	800cd50 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800cd76:	e8bd 03d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9}
 800cd7a:	4770      	bx	lr
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	4770      	bx	lr
 800cd80:	20008d08 	.word	0x20008d08
 800cd84:	00000000 	.word	0x00000000

0800cd88 <rmw_uxrce_clean_expired_static_input_buffer>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	4e38      	ldr	r6, [pc, #224]	; (800ce70 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800cd8e:	b083      	sub	sp, #12
 800cd90:	f8d6 8000 	ldr.w	r8, [r6]
 800cd94:	f7ff fdb4 	bl	800c900 <rmw_uros_epoch_nanos>
 800cd98:	f1b8 0f00 	cmp.w	r8, #0
 800cd9c:	d05f      	beq.n	800ce5e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800cd9e:	46b1      	mov	r9, r6
 800cda0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800cda4:	4682      	mov	sl, r0
 800cda6:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800cdaa:	468b      	mov	fp, r1
 800cdac:	2b04      	cmp	r3, #4
 800cdae:	d02d      	beq.n	800ce0c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800cdb0:	2b05      	cmp	r3, #5
 800cdb2:	d041      	beq.n	800ce38 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d029      	beq.n	800ce0c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800cdb8:	2200      	movs	r2, #0
 800cdba:	2300      	movs	r3, #0
 800cdbc:	2001      	movs	r0, #1
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	e9cd 2300 	strd	r2, r3, [sp]
 800cdc4:	9b00      	ldr	r3, [sp, #0]
 800cdc6:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800cdca:	18c2      	adds	r2, r0, r3
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	cec0      	ldmia	r6, {r6, r7}
 800cdd0:	eb41 0303 	adc.w	r3, r1, r3
 800cdd4:	1994      	adds	r4, r2, r6
 800cdd6:	eb43 0507 	adc.w	r5, r3, r7
 800cdda:	4554      	cmp	r4, sl
 800cddc:	eb75 020b 	sbcs.w	r2, r5, fp
 800cde0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cde4:	db03      	blt.n	800cdee <rmw_uxrce_clean_expired_static_input_buffer+0x66>
 800cde6:	45b2      	cmp	sl, r6
 800cde8:	eb7b 0207 	sbcs.w	r2, fp, r7
 800cdec:	da05      	bge.n	800cdfa <rmw_uxrce_clean_expired_static_input_buffer+0x72>
 800cdee:	4641      	mov	r1, r8
 800cdf0:	4648      	mov	r0, r9
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	f009 fb04 	bl	8016400 <put_memory>
 800cdf8:	9b00      	ldr	r3, [sp, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d02f      	beq.n	800ce5e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800cdfe:	4698      	mov	r8, r3
 800ce00:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ce04:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	d1d1      	bne.n	800cdb0 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800ce0c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800ce10:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800ce14:	e9cd 2300 	strd	r2, r3, [sp]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800ce1e:	d015      	beq.n	800ce4c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ce20:	9a01      	ldr	r2, [sp, #4]
 800ce22:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800ce24:	fb03 f702 	mul.w	r7, r3, r2
 800ce28:	9a00      	ldr	r2, [sp, #0]
 800ce2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce2e:	e9cd 2300 	strd	r2, r3, [sp]
 800ce32:	443b      	add	r3, r7
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	e7c5      	b.n	800cdc4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ce38:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800ce3c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800ce40:	e9cd 2300 	strd	r2, r3, [sp]
 800ce44:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	d1e9      	bne.n	800ce20 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800ce4c:	ea50 0301 	orrs.w	r3, r0, r1
 800ce50:	d1b8      	bne.n	800cdc4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ce52:	a305      	add	r3, pc, #20	; (adr r3, 800ce68 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	e9cd 2300 	strd	r2, r3, [sp]
 800ce5c:	e7b2      	b.n	800cdc4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ce5e:	b003      	add	sp, #12
 800ce60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce64:	f3af 8000 	nop.w
 800ce68:	fc23ac00 	.word	0xfc23ac00
 800ce6c:	00000006 	.word	0x00000006
 800ce70:	20008d08 	.word	0x20008d08
 800ce74:	3b9aca00 	.word	0x3b9aca00

0800ce78 <run_xrce_session>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	788c      	ldrb	r4, [r1, #2]
 800ce7c:	b086      	sub	sp, #24
 800ce7e:	2c01      	cmp	r4, #1
 800ce80:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ce84:	d00c      	beq.n	800cea0 <run_xrce_session+0x28>
 800ce86:	4619      	mov	r1, r3
 800ce88:	2301      	movs	r3, #1
 800ce8a:	f10d 020e 	add.w	r2, sp, #14
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ce94:	f10d 0317 	add.w	r3, sp, #23
 800ce98:	f004 fcc6 	bl	8011828 <uxr_run_session_until_all_status>
 800ce9c:	b006      	add	sp, #24
 800ce9e:	bd10      	pop	{r4, pc}
 800cea0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cea4:	f004 fc0a 	bl	80116bc <uxr_flash_output_streams>
 800cea8:	4620      	mov	r0, r4
 800ceaa:	b006      	add	sp, #24
 800ceac:	bd10      	pop	{r4, pc}
 800ceae:	bf00      	nop

0800ceb0 <convert_qos_profile>:
 800ceb0:	b430      	push	{r4, r5}
 800ceb2:	7a0d      	ldrb	r5, [r1, #8]
 800ceb4:	780c      	ldrb	r4, [r1, #0]
 800ceb6:	7a4a      	ldrb	r2, [r1, #9]
 800ceb8:	f1a5 0502 	sub.w	r5, r5, #2
 800cebc:	f1a4 0402 	sub.w	r4, r4, #2
 800cec0:	fab5 f585 	clz	r5, r5
 800cec4:	fab4 f484 	clz	r4, r4
 800cec8:	2a02      	cmp	r2, #2
 800ceca:	bf18      	it	ne
 800cecc:	2200      	movne	r2, #0
 800cece:	8889      	ldrh	r1, [r1, #4]
 800ced0:	096d      	lsrs	r5, r5, #5
 800ced2:	0964      	lsrs	r4, r4, #5
 800ced4:	7045      	strb	r5, [r0, #1]
 800ced6:	7084      	strb	r4, [r0, #2]
 800ced8:	7002      	strb	r2, [r0, #0]
 800ceda:	8081      	strh	r1, [r0, #4]
 800cedc:	bc30      	pop	{r4, r5}
 800cede:	4770      	bx	lr

0800cee0 <generate_type_name>:
 800cee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee4:	4606      	mov	r6, r0
 800cee6:	b086      	sub	sp, #24
 800cee8:	6840      	ldr	r0, [r0, #4]
 800ceea:	4688      	mov	r8, r1
 800ceec:	4617      	mov	r7, r2
 800ceee:	f7f3 f9a9 	bl	8000244 <strlen>
 800cef2:	6834      	ldr	r4, [r6, #0]
 800cef4:	4605      	mov	r5, r0
 800cef6:	b11c      	cbz	r4, 800cf00 <generate_type_name+0x20>
 800cef8:	4620      	mov	r0, r4
 800cefa:	f7f3 f9a3 	bl	8000244 <strlen>
 800cefe:	4604      	mov	r4, r0
 800cf00:	2300      	movs	r3, #0
 800cf02:	f888 3000 	strb.w	r3, [r8]
 800cf06:	6833      	ldr	r3, [r6, #0]
 800cf08:	3508      	adds	r5, #8
 800cf0a:	442c      	add	r4, r5
 800cf0c:	b19b      	cbz	r3, 800cf36 <generate_type_name+0x56>
 800cf0e:	490c      	ldr	r1, [pc, #48]	; (800cf40 <generate_type_name+0x60>)
 800cf10:	4608      	mov	r0, r1
 800cf12:	6875      	ldr	r5, [r6, #4]
 800cf14:	4a0b      	ldr	r2, [pc, #44]	; (800cf44 <generate_type_name+0x64>)
 800cf16:	9504      	str	r5, [sp, #16]
 800cf18:	4d0b      	ldr	r5, [pc, #44]	; (800cf48 <generate_type_name+0x68>)
 800cf1a:	9103      	str	r1, [sp, #12]
 800cf1c:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800cf20:	9000      	str	r0, [sp, #0]
 800cf22:	9205      	str	r2, [sp, #20]
 800cf24:	4639      	mov	r1, r7
 800cf26:	4640      	mov	r0, r8
 800cf28:	4a08      	ldr	r2, [pc, #32]	; (800cf4c <generate_type_name+0x6c>)
 800cf2a:	f00b f8e1 	bl	80180f0 <sniprintf>
 800cf2e:	4620      	mov	r0, r4
 800cf30:	b006      	add	sp, #24
 800cf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf36:	4b06      	ldr	r3, [pc, #24]	; (800cf50 <generate_type_name+0x70>)
 800cf38:	4901      	ldr	r1, [pc, #4]	; (800cf40 <generate_type_name+0x60>)
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	e7e9      	b.n	800cf12 <generate_type_name+0x32>
 800cf3e:	bf00      	nop
 800cf40:	0801a670 	.word	0x0801a670
 800cf44:	0801a684 	.word	0x0801a684
 800cf48:	0801a688 	.word	0x0801a688
 800cf4c:	0801a674 	.word	0x0801a674
 800cf50:	0801ae9c 	.word	0x0801ae9c

0800cf54 <generate_topic_name>:
 800cf54:	b510      	push	{r4, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	9000      	str	r0, [sp, #0]
 800cf5a:	4614      	mov	r4, r2
 800cf5c:	4608      	mov	r0, r1
 800cf5e:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <generate_topic_name+0x24>)
 800cf60:	4611      	mov	r1, r2
 800cf62:	4a06      	ldr	r2, [pc, #24]	; (800cf7c <generate_topic_name+0x28>)
 800cf64:	f00b f8c4 	bl	80180f0 <sniprintf>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	da02      	bge.n	800cf72 <generate_topic_name+0x1e>
 800cf6c:	4284      	cmp	r4, r0
 800cf6e:	bfd8      	it	le
 800cf70:	2000      	movle	r0, #0
 800cf72:	b002      	add	sp, #8
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	0801a694 	.word	0x0801a694
 800cf7c:	0801a68c 	.word	0x0801a68c

0800cf80 <is_uxrce_rmw_identifier_valid>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	4604      	mov	r4, r0
 800cf84:	b140      	cbz	r0, 800cf98 <is_uxrce_rmw_identifier_valid+0x18>
 800cf86:	f009 fa93 	bl	80164b0 <rmw_get_implementation_identifier>
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	f7f3 f94f 	bl	8000230 <strcmp>
 800cf92:	fab0 f080 	clz	r0, r0
 800cf96:	0940      	lsrs	r0, r0, #5
 800cf98:	bd10      	pop	{r4, pc}
 800cf9a:	bf00      	nop

0800cf9c <get_message_typesupport_handle>:
 800cf9c:	6883      	ldr	r3, [r0, #8]
 800cf9e:	4718      	bx	r3

0800cfa0 <get_message_typesupport_handle_function>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	6800      	ldr	r0, [r0, #0]
 800cfa6:	f7f3 f943 	bl	8000230 <strcmp>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	bf0c      	ite	eq
 800cfae:	4620      	moveq	r0, r4
 800cfb0:	2000      	movne	r0, #0
 800cfb2:	bd10      	pop	{r4, pc}

0800cfb4 <sensor_msgs__msg__JointState__init>:
 800cfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfb8:	4605      	mov	r5, r0
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d04a      	beq.n	800d054 <sensor_msgs__msg__JointState__init+0xa0>
 800cfbe:	f000 fc11 	bl	800d7e4 <std_msgs__msg__Header__init>
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	b380      	cbz	r0, 800d028 <sensor_msgs__msg__JointState__init+0x74>
 800cfc6:	f105 0614 	add.w	r6, r5, #20
 800cfca:	4630      	mov	r0, r6
 800cfcc:	2100      	movs	r1, #0
 800cfce:	f009 fe03 	bl	8016bd8 <rosidl_runtime_c__String__Sequence__init>
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d049      	beq.n	800d06c <sensor_msgs__msg__JointState__init+0xb8>
 800cfd8:	f105 0720 	add.w	r7, r5, #32
 800cfdc:	4638      	mov	r0, r7
 800cfde:	2100      	movs	r1, #0
 800cfe0:	f009 fd82 	bl	8016ae8 <rosidl_runtime_c__double__Sequence__init>
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	b3c8      	cbz	r0, 800d05c <sensor_msgs__msg__JointState__init+0xa8>
 800cfe8:	f105 082c 	add.w	r8, r5, #44	; 0x2c
 800cfec:	4640      	mov	r0, r8
 800cfee:	2100      	movs	r1, #0
 800cff0:	f009 fd7a 	bl	8016ae8 <rosidl_runtime_c__double__Sequence__init>
 800cff4:	4604      	mov	r4, r0
 800cff6:	b3f0      	cbz	r0, 800d076 <sensor_msgs__msg__JointState__init+0xc2>
 800cff8:	f105 0938 	add.w	r9, r5, #56	; 0x38
 800cffc:	4648      	mov	r0, r9
 800cffe:	2100      	movs	r1, #0
 800d000:	f009 fd72 	bl	8016ae8 <rosidl_runtime_c__double__Sequence__init>
 800d004:	4604      	mov	r4, r0
 800d006:	bb10      	cbnz	r0, 800d04e <sensor_msgs__msg__JointState__init+0x9a>
 800d008:	4628      	mov	r0, r5
 800d00a:	f000 fc0f 	bl	800d82c <std_msgs__msg__Header__fini>
 800d00e:	4630      	mov	r0, r6
 800d010:	f009 fe20 	bl	8016c54 <rosidl_runtime_c__String__Sequence__fini>
 800d014:	4638      	mov	r0, r7
 800d016:	f009 fd7d 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d01a:	4640      	mov	r0, r8
 800d01c:	f009 fd7a 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d020:	4648      	mov	r0, r9
 800d022:	f009 fd77 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d026:	e012      	b.n	800d04e <sensor_msgs__msg__JointState__init+0x9a>
 800d028:	4628      	mov	r0, r5
 800d02a:	f000 fbff 	bl	800d82c <std_msgs__msg__Header__fini>
 800d02e:	f105 0014 	add.w	r0, r5, #20
 800d032:	f009 fe0f 	bl	8016c54 <rosidl_runtime_c__String__Sequence__fini>
 800d036:	f105 0020 	add.w	r0, r5, #32
 800d03a:	f009 fd6b 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d03e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 800d042:	f009 fd67 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d046:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d04a:	f009 fd63 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d04e:	4620      	mov	r0, r4
 800d050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d054:	4604      	mov	r4, r0
 800d056:	4620      	mov	r0, r4
 800d058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d05c:	4628      	mov	r0, r5
 800d05e:	f000 fbe5 	bl	800d82c <std_msgs__msg__Header__fini>
 800d062:	4630      	mov	r0, r6
 800d064:	f009 fdf6 	bl	8016c54 <rosidl_runtime_c__String__Sequence__fini>
 800d068:	4638      	mov	r0, r7
 800d06a:	e7e6      	b.n	800d03a <sensor_msgs__msg__JointState__init+0x86>
 800d06c:	4628      	mov	r0, r5
 800d06e:	f000 fbdd 	bl	800d82c <std_msgs__msg__Header__fini>
 800d072:	4630      	mov	r0, r6
 800d074:	e7dd      	b.n	800d032 <sensor_msgs__msg__JointState__init+0x7e>
 800d076:	4628      	mov	r0, r5
 800d078:	f000 fbd8 	bl	800d82c <std_msgs__msg__Header__fini>
 800d07c:	4630      	mov	r0, r6
 800d07e:	f009 fde9 	bl	8016c54 <rosidl_runtime_c__String__Sequence__fini>
 800d082:	4638      	mov	r0, r7
 800d084:	f009 fd46 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d088:	4640      	mov	r0, r8
 800d08a:	f009 fd43 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d08e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d092:	f009 fd3f 	bl	8016b14 <rosidl_runtime_c__double__Sequence__fini>
 800d096:	e7da      	b.n	800d04e <sensor_msgs__msg__JointState__init+0x9a>

0800d098 <sensor_msgs__msg__JointState__create>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	2101      	movs	r1, #1
 800d09c:	2044      	movs	r0, #68	; 0x44
 800d09e:	f00a fd97 	bl	8017bd0 <calloc>
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	b118      	cbz	r0, 800d0ae <sensor_msgs__msg__JointState__create+0x16>
 800d0a6:	f7ff ff85 	bl	800cfb4 <sensor_msgs__msg__JointState__init>
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	b108      	cbz	r0, 800d0b2 <sensor_msgs__msg__JointState__create+0x1a>
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f00a fe92 	bl	8017ddc <free>
 800d0b8:	462c      	mov	r4, r5
 800d0ba:	e7f8      	b.n	800d0ae <sensor_msgs__msg__JointState__create+0x16>

0800d0bc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d0bc:	f000 b8ea 	b.w	800d294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>

0800d0c0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800d0c0:	f000 ba46 	b.w	800d550 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>

0800d0c4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 800d0c4:	f000 bb22 	b.w	800d70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

0800d0c8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	4607      	mov	r7, r0
 800d0cc:	460e      	mov	r6, r1
 800d0ce:	f000 fc55 	bl	800d97c <get_serialized_size_std_msgs__msg__Header>
 800d0d2:	1835      	adds	r5, r6, r0
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	f107 0018 	add.w	r0, r7, #24
 800d0da:	f000 fef3 	bl	800dec4 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800d0de:	4405      	add	r5, r0
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	2108      	movs	r1, #8
 800d0e4:	f003 f886 	bl	80101f4 <ucdr_alignment>
 800d0e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0ec:	4425      	add	r5, r4
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800d0f4:	f000 ffa0 	bl	800e038 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d0f8:	4405      	add	r5, r0
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	2108      	movs	r1, #8
 800d0fe:	f003 f879 	bl	80101f4 <ucdr_alignment>
 800d102:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d106:	442c      	add	r4, r5
 800d108:	4621      	mov	r1, r4
 800d10a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800d10e:	f000 ff93 	bl	800e038 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d112:	4404      	add	r4, r0
 800d114:	4620      	mov	r0, r4
 800d116:	2108      	movs	r1, #8
 800d118:	f003 f86c 	bl	80101f4 <ucdr_alignment>
 800d11c:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 800d120:	4430      	add	r0, r6
 800d122:	4420      	add	r0, r4
 800d124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d126:	bf00      	nop

0800d128 <get_serialized_size_sensor_msgs__msg__Imu>:
 800d128:	b108      	cbz	r0, 800d12e <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800d12a:	f7ff bfcd 	b.w	800d0c8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d12e:	4770      	bx	lr

0800d130 <_Imu__get_serialized_size>:
 800d130:	b110      	cbz	r0, 800d138 <_Imu__get_serialized_size+0x8>
 800d132:	2100      	movs	r1, #0
 800d134:	f7ff bfc8 	b.w	800d0c8 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop

0800d13c <_Imu__cdr_deserialize>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	460c      	mov	r4, r1
 800d140:	b399      	cbz	r1, 800d1aa <_Imu__cdr_deserialize+0x6e>
 800d142:	4605      	mov	r5, r0
 800d144:	f000 fc9c 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d148:	6843      	ldr	r3, [r0, #4]
 800d14a:	4621      	mov	r1, r4
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	4628      	mov	r0, r5
 800d150:	4798      	blx	r3
 800d152:	f000 ff6d 	bl	800e030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d156:	6843      	ldr	r3, [r0, #4]
 800d158:	f104 0118 	add.w	r1, r4, #24
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	4628      	mov	r0, r5
 800d160:	4798      	blx	r3
 800d162:	2209      	movs	r2, #9
 800d164:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800d168:	4628      	mov	r0, r5
 800d16a:	f001 fb25 	bl	800e7b8 <ucdr_deserialize_array_double>
 800d16e:	f000 ffef 	bl	800e150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d172:	6843      	ldr	r3, [r0, #4]
 800d174:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	4628      	mov	r0, r5
 800d17c:	4798      	blx	r3
 800d17e:	2209      	movs	r2, #9
 800d180:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800d184:	4628      	mov	r0, r5
 800d186:	f001 fb17 	bl	800e7b8 <ucdr_deserialize_array_double>
 800d18a:	f000 ffe1 	bl	800e150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d18e:	6843      	ldr	r3, [r0, #4]
 800d190:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800d194:	4628      	mov	r0, r5
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	4798      	blx	r3
 800d19a:	4628      	mov	r0, r5
 800d19c:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800d1a0:	2209      	movs	r2, #9
 800d1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1a6:	f001 bb07 	b.w	800e7b8 <ucdr_deserialize_array_double>
 800d1aa:	4608      	mov	r0, r1
 800d1ac:	bd38      	pop	{r3, r4, r5, pc}
 800d1ae:	bf00      	nop

0800d1b0 <_Imu__cdr_serialize>:
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d035      	beq.n	800d220 <_Imu__cdr_serialize+0x70>
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	f000 fc61 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d1be:	6843      	ldr	r3, [r0, #4]
 800d1c0:	4629      	mov	r1, r5
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	4798      	blx	r3
 800d1c8:	f000 ff32 	bl	800e030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d1cc:	6843      	ldr	r3, [r0, #4]
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f104 0018 	add.w	r0, r4, #24
 800d1d6:	4798      	blx	r3
 800d1d8:	2209      	movs	r2, #9
 800d1da:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800d1de:	4628      	mov	r0, r5
 800d1e0:	f001 fa3e 	bl	800e660 <ucdr_serialize_array_double>
 800d1e4:	f000 ffb4 	bl	800e150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d1e8:	6843      	ldr	r3, [r0, #4]
 800d1ea:	4629      	mov	r1, r5
 800d1ec:	689b      	ldr	r3, [r3, #8]
 800d1ee:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800d1f2:	4798      	blx	r3
 800d1f4:	2209      	movs	r2, #9
 800d1f6:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f001 fa30 	bl	800e660 <ucdr_serialize_array_double>
 800d200:	f000 ffa6 	bl	800e150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d204:	6843      	ldr	r3, [r0, #4]
 800d206:	4629      	mov	r1, r5
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800d20e:	4798      	blx	r3
 800d210:	4628      	mov	r0, r5
 800d212:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800d216:	2209      	movs	r2, #9
 800d218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d21c:	f001 ba20 	b.w	800e660 <ucdr_serialize_array_double>
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop

0800d224 <max_serialized_size_sensor_msgs__msg__Imu>:
 800d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d226:	2301      	movs	r3, #1
 800d228:	7003      	strb	r3, [r0, #0]
 800d22a:	4607      	mov	r7, r0
 800d22c:	460e      	mov	r6, r1
 800d22e:	f000 fc1d 	bl	800da6c <max_serialized_size_std_msgs__msg__Header>
 800d232:	1835      	adds	r5, r6, r0
 800d234:	4629      	mov	r1, r5
 800d236:	4638      	mov	r0, r7
 800d238:	f000 fed6 	bl	800dfe8 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800d23c:	4405      	add	r5, r0
 800d23e:	4628      	mov	r0, r5
 800d240:	2108      	movs	r1, #8
 800d242:	f002 ffd7 	bl	80101f4 <ucdr_alignment>
 800d246:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d24a:	4425      	add	r5, r4
 800d24c:	4629      	mov	r1, r5
 800d24e:	4638      	mov	r0, r7
 800d250:	f000 ff62 	bl	800e118 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d254:	4405      	add	r5, r0
 800d256:	4628      	mov	r0, r5
 800d258:	2108      	movs	r1, #8
 800d25a:	f002 ffcb 	bl	80101f4 <ucdr_alignment>
 800d25e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d262:	442c      	add	r4, r5
 800d264:	4621      	mov	r1, r4
 800d266:	4638      	mov	r0, r7
 800d268:	f000 ff56 	bl	800e118 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d26c:	4404      	add	r4, r0
 800d26e:	4620      	mov	r0, r4
 800d270:	2108      	movs	r1, #8
 800d272:	f002 ffbf 	bl	80101f4 <ucdr_alignment>
 800d276:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 800d27a:	4430      	add	r0, r6
 800d27c:	4420      	add	r0, r4
 800d27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d280 <_Imu__max_serialized_size>:
 800d280:	b500      	push	{lr}
 800d282:	b083      	sub	sp, #12
 800d284:	2100      	movs	r1, #0
 800d286:	f10d 0007 	add.w	r0, sp, #7
 800d28a:	f7ff ffcb 	bl	800d224 <max_serialized_size_sensor_msgs__msg__Imu>
 800d28e:	b003      	add	sp, #12
 800d290:	f85d fb04 	ldr.w	pc, [sp], #4

0800d294 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d294:	4800      	ldr	r0, [pc, #0]	; (800d298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800d296:	4770      	bx	lr
 800d298:	20000030 	.word	0x20000030

0800d29c <_JointState__max_serialized_size>:
 800d29c:	2301      	movs	r3, #1
 800d29e:	b500      	push	{lr}
 800d2a0:	b083      	sub	sp, #12
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	f10d 0007 	add.w	r0, sp, #7
 800d2a8:	f88d 3007 	strb.w	r3, [sp, #7]
 800d2ac:	f000 fbde 	bl	800da6c <max_serialized_size_std_msgs__msg__Header>
 800d2b0:	b003      	add	sp, #12
 800d2b2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2b6:	bf00      	nop

0800d2b8 <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 800d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	4688      	mov	r8, r1
 800d2be:	4606      	mov	r6, r0
 800d2c0:	f000 fb5c 	bl	800d97c <get_serialized_size_std_msgs__msg__Header>
 800d2c4:	eb08 0400 	add.w	r4, r8, r0
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	2104      	movs	r1, #4
 800d2cc:	69b7      	ldr	r7, [r6, #24]
 800d2ce:	f002 ff91 	bl	80101f4 <ucdr_alignment>
 800d2d2:	1d03      	adds	r3, r0, #4
 800d2d4:	441c      	add	r4, r3
 800d2d6:	b187      	cbz	r7, 800d2fa <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x42>
 800d2d8:	2500      	movs	r5, #0
 800d2da:	4620      	mov	r0, r4
 800d2dc:	2104      	movs	r1, #4
 800d2de:	f002 ff89 	bl	80101f4 <ucdr_alignment>
 800d2e2:	6973      	ldr	r3, [r6, #20]
 800d2e4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800d2e8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d2ec:	3501      	adds	r5, #1
 800d2ee:	1903      	adds	r3, r0, r4
 800d2f0:	6854      	ldr	r4, [r2, #4]
 800d2f2:	3305      	adds	r3, #5
 800d2f4:	42af      	cmp	r7, r5
 800d2f6:	441c      	add	r4, r3
 800d2f8:	d1ef      	bne.n	800d2da <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 800d2fa:	2104      	movs	r1, #4
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d300:	f002 ff78 	bl	80101f4 <ucdr_alignment>
 800d304:	4404      	add	r4, r0
 800d306:	3404      	adds	r4, #4
 800d308:	4620      	mov	r0, r4
 800d30a:	2108      	movs	r1, #8
 800d30c:	f002 ff72 	bl	80101f4 <ucdr_alignment>
 800d310:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800d314:	442c      	add	r4, r5
 800d316:	4620      	mov	r0, r4
 800d318:	2104      	movs	r1, #4
 800d31a:	6b37      	ldr	r7, [r6, #48]	; 0x30
 800d31c:	f002 ff6a 	bl	80101f4 <ucdr_alignment>
 800d320:	1d05      	adds	r5, r0, #4
 800d322:	4425      	add	r5, r4
 800d324:	4628      	mov	r0, r5
 800d326:	2108      	movs	r1, #8
 800d328:	f002 ff64 	bl	80101f4 <ucdr_alignment>
 800d32c:	eb00 04c7 	add.w	r4, r0, r7, lsl #3
 800d330:	4425      	add	r5, r4
 800d332:	4628      	mov	r0, r5
 800d334:	2104      	movs	r1, #4
 800d336:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 800d338:	f002 ff5c 	bl	80101f4 <ucdr_alignment>
 800d33c:	1d04      	adds	r4, r0, #4
 800d33e:	442c      	add	r4, r5
 800d340:	4620      	mov	r0, r4
 800d342:	2108      	movs	r1, #8
 800d344:	f002 ff56 	bl	80101f4 <ucdr_alignment>
 800d348:	ebc8 08c6 	rsb	r8, r8, r6, lsl #3
 800d34c:	4440      	add	r0, r8
 800d34e:	4420      	add	r0, r4
 800d350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d354 <get_serialized_size_sensor_msgs__msg__JointState>:
 800d354:	b108      	cbz	r0, 800d35a <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 800d356:	f7ff bfaf 	b.w	800d2b8 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800d35a:	4770      	bx	lr

0800d35c <_JointState__get_serialized_size>:
 800d35c:	b110      	cbz	r0, 800d364 <_JointState__get_serialized_size+0x8>
 800d35e:	2100      	movs	r1, #0
 800d360:	f7ff bfaa 	b.w	800d2b8 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop

0800d368 <_JointState__cdr_deserialize>:
 800d368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d36c:	460d      	mov	r5, r1
 800d36e:	b083      	sub	sp, #12
 800d370:	2900      	cmp	r1, #0
 800d372:	d073      	beq.n	800d45c <_JointState__cdr_deserialize+0xf4>
 800d374:	4606      	mov	r6, r0
 800d376:	f000 fb83 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d37a:	6843      	ldr	r3, [r0, #4]
 800d37c:	4629      	mov	r1, r5
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	4630      	mov	r0, r6
 800d382:	4798      	blx	r3
 800d384:	4669      	mov	r1, sp
 800d386:	4630      	mov	r0, r6
 800d388:	f001 fe38 	bl	800effc <ucdr_deserialize_uint32_t>
 800d38c:	9b00      	ldr	r3, [sp, #0]
 800d38e:	69ea      	ldr	r2, [r5, #28]
 800d390:	429a      	cmp	r2, r3
 800d392:	d34d      	bcc.n	800d430 <_JointState__cdr_deserialize+0xc8>
 800d394:	61ab      	str	r3, [r5, #24]
 800d396:	f10d 0804 	add.w	r8, sp, #4
 800d39a:	b320      	cbz	r0, 800d3e6 <_JointState__cdr_deserialize+0x7e>
 800d39c:	2400      	movs	r4, #0
 800d39e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d3a2:	429c      	cmp	r4, r3
 800d3a4:	f10d 0804 	add.w	r8, sp, #4
 800d3a8:	ea4f 0781 	mov.w	r7, r1, lsl #2
 800d3ac:	d21b      	bcs.n	800d3e6 <_JointState__cdr_deserialize+0x7e>
 800d3ae:	696a      	ldr	r2, [r5, #20]
 800d3b0:	4643      	mov	r3, r8
 800d3b2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800d3b6:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d3ba:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d3be:	4630      	mov	r0, r6
 800d3c0:	464a      	mov	r2, r9
 800d3c2:	f002 ff97 	bl	80102f4 <ucdr_deserialize_sequence_char>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d037      	beq.n	800d43a <_JointState__cdr_deserialize+0xd2>
 800d3ca:	9901      	ldr	r1, [sp, #4]
 800d3cc:	b101      	cbz	r1, 800d3d0 <_JointState__cdr_deserialize+0x68>
 800d3ce:	3901      	subs	r1, #1
 800d3d0:	696a      	ldr	r2, [r5, #20]
 800d3d2:	9b00      	ldr	r3, [sp, #0]
 800d3d4:	4417      	add	r7, r2
 800d3d6:	3401      	adds	r4, #1
 800d3d8:	6079      	str	r1, [r7, #4]
 800d3da:	429c      	cmp	r4, r3
 800d3dc:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d3e0:	ea4f 0781 	mov.w	r7, r1, lsl #2
 800d3e4:	d3e3      	bcc.n	800d3ae <_JointState__cdr_deserialize+0x46>
 800d3e6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800d3e8:	4643      	mov	r3, r8
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	4630      	mov	r0, r6
 800d3ee:	6a29      	ldr	r1, [r5, #32]
 800d3f0:	f003 f830 	bl	8010454 <ucdr_deserialize_sequence_double>
 800d3f4:	9b01      	ldr	r3, [sp, #4]
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d055      	beq.n	800d4a6 <_JointState__cdr_deserialize+0x13e>
 800d3fa:	626b      	str	r3, [r5, #36]	; 0x24
 800d3fc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800d3fe:	4643      	mov	r3, r8
 800d400:	4622      	mov	r2, r4
 800d402:	4630      	mov	r0, r6
 800d404:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800d406:	f003 f825 	bl	8010454 <ucdr_deserialize_sequence_double>
 800d40a:	9b01      	ldr	r3, [sp, #4]
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d03a      	beq.n	800d486 <_JointState__cdr_deserialize+0x11e>
 800d410:	632b      	str	r3, [r5, #48]	; 0x30
 800d412:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800d414:	4643      	mov	r3, r8
 800d416:	463a      	mov	r2, r7
 800d418:	4630      	mov	r0, r6
 800d41a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d41c:	f003 f81a 	bl	8010454 <ucdr_deserialize_sequence_double>
 800d420:	9b01      	ldr	r3, [sp, #4]
 800d422:	4604      	mov	r4, r0
 800d424:	b1f8      	cbz	r0, 800d466 <_JointState__cdr_deserialize+0xfe>
 800d426:	4620      	mov	r0, r4
 800d428:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d42a:	b003      	add	sp, #12
 800d42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d430:	2400      	movs	r4, #0
 800d432:	4620      	mov	r0, r4
 800d434:	b003      	add	sp, #12
 800d436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	4599      	cmp	r9, r3
 800d43e:	d2d2      	bcs.n	800d3e6 <_JointState__cdr_deserialize+0x7e>
 800d440:	2101      	movs	r1, #1
 800d442:	7571      	strb	r1, [r6, #21]
 800d444:	696b      	ldr	r3, [r5, #20]
 800d446:	75b0      	strb	r0, [r6, #22]
 800d448:	441f      	add	r7, r3
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	4630      	mov	r0, r6
 800d44e:	f002 fee9 	bl	8010224 <ucdr_align_to>
 800d452:	4630      	mov	r0, r6
 800d454:	9901      	ldr	r1, [sp, #4]
 800d456:	f002 ff1b 	bl	8010290 <ucdr_advance_buffer>
 800d45a:	e7c4      	b.n	800d3e6 <_JointState__cdr_deserialize+0x7e>
 800d45c:	460c      	mov	r4, r1
 800d45e:	4620      	mov	r0, r4
 800d460:	b003      	add	sp, #12
 800d462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d466:	429f      	cmp	r7, r3
 800d468:	d2e3      	bcs.n	800d432 <_JointState__cdr_deserialize+0xca>
 800d46a:	2301      	movs	r3, #1
 800d46c:	75b0      	strb	r0, [r6, #22]
 800d46e:	7573      	strb	r3, [r6, #21]
 800d470:	2108      	movs	r1, #8
 800d472:	63e8      	str	r0, [r5, #60]	; 0x3c
 800d474:	4630      	mov	r0, r6
 800d476:	f002 fed5 	bl	8010224 <ucdr_align_to>
 800d47a:	9901      	ldr	r1, [sp, #4]
 800d47c:	4630      	mov	r0, r6
 800d47e:	00c9      	lsls	r1, r1, #3
 800d480:	f002 ff06 	bl	8010290 <ucdr_advance_buffer>
 800d484:	e7d5      	b.n	800d432 <_JointState__cdr_deserialize+0xca>
 800d486:	429c      	cmp	r4, r3
 800d488:	d2c3      	bcs.n	800d412 <_JointState__cdr_deserialize+0xaa>
 800d48a:	2301      	movs	r3, #1
 800d48c:	75b0      	strb	r0, [r6, #22]
 800d48e:	7573      	strb	r3, [r6, #21]
 800d490:	2108      	movs	r1, #8
 800d492:	6328      	str	r0, [r5, #48]	; 0x30
 800d494:	4630      	mov	r0, r6
 800d496:	f002 fec5 	bl	8010224 <ucdr_align_to>
 800d49a:	9901      	ldr	r1, [sp, #4]
 800d49c:	4630      	mov	r0, r6
 800d49e:	00c9      	lsls	r1, r1, #3
 800d4a0:	f002 fef6 	bl	8010290 <ucdr_advance_buffer>
 800d4a4:	e7b5      	b.n	800d412 <_JointState__cdr_deserialize+0xaa>
 800d4a6:	429c      	cmp	r4, r3
 800d4a8:	d2a8      	bcs.n	800d3fc <_JointState__cdr_deserialize+0x94>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	75b0      	strb	r0, [r6, #22]
 800d4ae:	7573      	strb	r3, [r6, #21]
 800d4b0:	2108      	movs	r1, #8
 800d4b2:	6268      	str	r0, [r5, #36]	; 0x24
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f002 feb5 	bl	8010224 <ucdr_align_to>
 800d4ba:	9901      	ldr	r1, [sp, #4]
 800d4bc:	4630      	mov	r0, r6
 800d4be:	00c9      	lsls	r1, r1, #3
 800d4c0:	f002 fee6 	bl	8010290 <ucdr_advance_buffer>
 800d4c4:	e79a      	b.n	800d3fc <_JointState__cdr_deserialize+0x94>
 800d4c6:	bf00      	nop

0800d4c8 <_JointState__cdr_serialize>:
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d040      	beq.n	800d54e <_JointState__cdr_serialize+0x86>
 800d4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d0:	4688      	mov	r8, r1
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	f000 fad4 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d4d8:	6843      	ldr	r3, [r0, #4]
 800d4da:	4641      	mov	r1, r8
 800d4dc:	4638      	mov	r0, r7
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	4798      	blx	r3
 800d4e2:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	f001 fc57 	bl	800ed9c <ucdr_serialize_uint32_t>
 800d4ee:	b1e8      	cbz	r0, 800d52c <_JointState__cdr_serialize+0x64>
 800d4f0:	f1b9 0f00 	cmp.w	r9, #0
 800d4f4:	d01a      	beq.n	800d52c <_JointState__cdr_serialize+0x64>
 800d4f6:	2400      	movs	r4, #0
 800d4f8:	e00c      	b.n	800d514 <_JointState__cdr_serialize+0x4c>
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7f2 fea2 	bl	8000244 <strlen>
 800d500:	1c42      	adds	r2, r0, #1
 800d502:	6068      	str	r0, [r5, #4]
 800d504:	4631      	mov	r1, r6
 800d506:	4640      	mov	r0, r8
 800d508:	f002 fee2 	bl	80102d0 <ucdr_serialize_sequence_char>
 800d50c:	3401      	adds	r4, #1
 800d50e:	b168      	cbz	r0, 800d52c <_JointState__cdr_serialize+0x64>
 800d510:	45a1      	cmp	r9, r4
 800d512:	d00b      	beq.n	800d52c <_JointState__cdr_serialize+0x64>
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d51a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d51e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d522:	2e00      	cmp	r6, #0
 800d524:	d1e9      	bne.n	800d4fa <_JointState__cdr_serialize+0x32>
 800d526:	4632      	mov	r2, r6
 800d528:	4630      	mov	r0, r6
 800d52a:	e7ea      	b.n	800d502 <_JointState__cdr_serialize+0x3a>
 800d52c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d530:	4640      	mov	r0, r8
 800d532:	f002 ff7d 	bl	8010430 <ucdr_serialize_sequence_double>
 800d536:	e9d7 120b 	ldrd	r1, r2, [r7, #44]	; 0x2c
 800d53a:	4640      	mov	r0, r8
 800d53c:	f002 ff78 	bl	8010430 <ucdr_serialize_sequence_double>
 800d540:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d544:	4640      	mov	r0, r8
 800d546:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d54a:	f002 bf71 	b.w	8010430 <ucdr_serialize_sequence_double>
 800d54e:	4770      	bx	lr

0800d550 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800d550:	4800      	ldr	r0, [pc, #0]	; (800d554 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800d552:	4770      	bx	lr
 800d554:	20000058 	.word	0x20000058

0800d558 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	460c      	mov	r4, r1
 800d55c:	4606      	mov	r6, r0
 800d55e:	f000 fa0d 	bl	800d97c <get_serialized_size_std_msgs__msg__Header>
 800d562:	1825      	adds	r5, r4, r0
 800d564:	4629      	mov	r1, r5
 800d566:	f106 0014 	add.w	r0, r6, #20
 800d56a:	f000 f8d3 	bl	800d714 <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 800d56e:	4405      	add	r5, r0
 800d570:	4628      	mov	r0, r5
 800d572:	2108      	movs	r1, #8
 800d574:	f002 fe3e 	bl	80101f4 <ucdr_alignment>
 800d578:	f100 0608 	add.w	r6, r0, #8
 800d57c:	4435      	add	r5, r6
 800d57e:	4628      	mov	r0, r5
 800d580:	2108      	movs	r1, #8
 800d582:	f002 fe37 	bl	80101f4 <ucdr_alignment>
 800d586:	f100 0608 	add.w	r6, r0, #8
 800d58a:	442e      	add	r6, r5
 800d58c:	4630      	mov	r0, r6
 800d58e:	2108      	movs	r1, #8
 800d590:	f002 fe30 	bl	80101f4 <ucdr_alignment>
 800d594:	f100 0508 	add.w	r5, r0, #8
 800d598:	442e      	add	r6, r5
 800d59a:	4630      	mov	r0, r6
 800d59c:	2108      	movs	r1, #8
 800d59e:	f002 fe29 	bl	80101f4 <ucdr_alignment>
 800d5a2:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800d5a6:	4435      	add	r5, r6
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	2101      	movs	r1, #1
 800d5ac:	f002 fe22 	bl	80101f4 <ucdr_alignment>
 800d5b0:	f1c4 0401 	rsb	r4, r4, #1
 800d5b4:	4420      	add	r0, r4
 800d5b6:	4428      	add	r0, r5
 800d5b8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ba:	bf00      	nop

0800d5bc <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 800d5bc:	b108      	cbz	r0, 800d5c2 <get_serialized_size_sensor_msgs__msg__NavSatFix+0x6>
 800d5be:	f7ff bfcb 	b.w	800d558 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 800d5c2:	4770      	bx	lr

0800d5c4 <_NavSatFix__get_serialized_size>:
 800d5c4:	b110      	cbz	r0, 800d5cc <_NavSatFix__get_serialized_size+0x8>
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	f7ff bfc6 	b.w	800d558 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop

0800d5d0 <_NavSatFix__cdr_deserialize>:
 800d5d0:	b538      	push	{r3, r4, r5, lr}
 800d5d2:	460c      	mov	r4, r1
 800d5d4:	b359      	cbz	r1, 800d62e <_NavSatFix__cdr_deserialize+0x5e>
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	f000 fa52 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d5dc:	6843      	ldr	r3, [r0, #4]
 800d5de:	4621      	mov	r1, r4
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	4798      	blx	r3
 800d5e6:	f000 f8f9 	bl	800d7dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 800d5ea:	6843      	ldr	r3, [r0, #4]
 800d5ec:	f104 0114 	add.w	r1, r4, #20
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	4798      	blx	r3
 800d5f6:	f104 0118 	add.w	r1, r4, #24
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f002 fc0c 	bl	800fe18 <ucdr_deserialize_double>
 800d600:	f104 0120 	add.w	r1, r4, #32
 800d604:	4628      	mov	r0, r5
 800d606:	f002 fc07 	bl	800fe18 <ucdr_deserialize_double>
 800d60a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800d60e:	4628      	mov	r0, r5
 800d610:	f002 fc02 	bl	800fe18 <ucdr_deserialize_double>
 800d614:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d618:	4628      	mov	r0, r5
 800d61a:	2209      	movs	r2, #9
 800d61c:	f001 f8cc 	bl	800e7b8 <ucdr_deserialize_array_double>
 800d620:	4628      	mov	r0, r5
 800d622:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800d626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d62a:	f001 b9b3 	b.w	800e994 <ucdr_deserialize_uint8_t>
 800d62e:	4608      	mov	r0, r1
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	bf00      	nop

0800d634 <_NavSatFix__cdr_serialize>:
 800d634:	b368      	cbz	r0, 800d692 <_NavSatFix__cdr_serialize+0x5e>
 800d636:	b538      	push	{r3, r4, r5, lr}
 800d638:	460d      	mov	r5, r1
 800d63a:	4604      	mov	r4, r0
 800d63c:	f000 fa20 	bl	800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d640:	6843      	ldr	r3, [r0, #4]
 800d642:	4629      	mov	r1, r5
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	4620      	mov	r0, r4
 800d648:	4798      	blx	r3
 800d64a:	f000 f8c7 	bl	800d7dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 800d64e:	6843      	ldr	r3, [r0, #4]
 800d650:	4629      	mov	r1, r5
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	f104 0014 	add.w	r0, r4, #20
 800d658:	4798      	blx	r3
 800d65a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800d65e:	4628      	mov	r0, r5
 800d660:	f002 fa38 	bl	800fad4 <ucdr_serialize_double>
 800d664:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800d668:	4628      	mov	r0, r5
 800d66a:	f002 fa33 	bl	800fad4 <ucdr_serialize_double>
 800d66e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800d672:	4628      	mov	r0, r5
 800d674:	f002 fa2e 	bl	800fad4 <ucdr_serialize_double>
 800d678:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d67c:	4628      	mov	r0, r5
 800d67e:	2209      	movs	r2, #9
 800d680:	f000 ffee 	bl	800e660 <ucdr_serialize_array_double>
 800d684:	4628      	mov	r0, r5
 800d686:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800d68a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d68e:	f001 b96b 	b.w	800e968 <ucdr_serialize_uint8_t>
 800d692:	4770      	bx	lr

0800d694 <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	2701      	movs	r7, #1
 800d698:	7007      	strb	r7, [r0, #0]
 800d69a:	460c      	mov	r4, r1
 800d69c:	4606      	mov	r6, r0
 800d69e:	f000 f9e5 	bl	800da6c <max_serialized_size_std_msgs__msg__Header>
 800d6a2:	1825      	adds	r5, r4, r0
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4630      	mov	r0, r6
 800d6a8:	f000 f884 	bl	800d7b4 <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 800d6ac:	4405      	add	r5, r0
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	2108      	movs	r1, #8
 800d6b2:	f002 fd9f 	bl	80101f4 <ucdr_alignment>
 800d6b6:	f100 0608 	add.w	r6, r0, #8
 800d6ba:	4435      	add	r5, r6
 800d6bc:	4628      	mov	r0, r5
 800d6be:	2108      	movs	r1, #8
 800d6c0:	f002 fd98 	bl	80101f4 <ucdr_alignment>
 800d6c4:	f100 0608 	add.w	r6, r0, #8
 800d6c8:	442e      	add	r6, r5
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	2108      	movs	r1, #8
 800d6ce:	f002 fd91 	bl	80101f4 <ucdr_alignment>
 800d6d2:	f100 0508 	add.w	r5, r0, #8
 800d6d6:	442e      	add	r6, r5
 800d6d8:	4630      	mov	r0, r6
 800d6da:	2108      	movs	r1, #8
 800d6dc:	f002 fd8a 	bl	80101f4 <ucdr_alignment>
 800d6e0:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800d6e4:	4435      	add	r5, r6
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f002 fd83 	bl	80101f4 <ucdr_alignment>
 800d6ee:	1b3c      	subs	r4, r7, r4
 800d6f0:	4420      	add	r0, r4
 800d6f2:	4428      	add	r0, r5
 800d6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f6:	bf00      	nop

0800d6f8 <_NavSatFix__max_serialized_size>:
 800d6f8:	b500      	push	{lr}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	f10d 0007 	add.w	r0, sp, #7
 800d702:	f7ff ffc7 	bl	800d694 <max_serialized_size_sensor_msgs__msg__NavSatFix>
 800d706:	b003      	add	sp, #12
 800d708:	f85d fb04 	ldr.w	pc, [sp], #4

0800d70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 800d70c:	4800      	ldr	r0, [pc, #0]	; (800d710 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 800d70e:	4770      	bx	lr
 800d710:	20000080 	.word	0x20000080

0800d714 <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 800d714:	b180      	cbz	r0, 800d738 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 800d716:	b538      	push	{r3, r4, r5, lr}
 800d718:	460d      	mov	r5, r1
 800d71a:	2101      	movs	r1, #1
 800d71c:	4628      	mov	r0, r5
 800d71e:	f002 fd69 	bl	80101f4 <ucdr_alignment>
 800d722:	1c6c      	adds	r4, r5, #1
 800d724:	4404      	add	r4, r0
 800d726:	4620      	mov	r0, r4
 800d728:	2102      	movs	r1, #2
 800d72a:	f002 fd63 	bl	80101f4 <ucdr_alignment>
 800d72e:	f1c5 0502 	rsb	r5, r5, #2
 800d732:	4428      	add	r0, r5
 800d734:	4420      	add	r0, r4
 800d736:	bd38      	pop	{r3, r4, r5, pc}
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop

0800d73c <_NavSatStatus__cdr_deserialize>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	460c      	mov	r4, r1
 800d740:	b141      	cbz	r1, 800d754 <_NavSatStatus__cdr_deserialize+0x18>
 800d742:	4605      	mov	r5, r0
 800d744:	f001 fe66 	bl	800f414 <ucdr_deserialize_int8_t>
 800d748:	4628      	mov	r0, r5
 800d74a:	1ca1      	adds	r1, r4, #2
 800d74c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d750:	f001 ba36 	b.w	800ebc0 <ucdr_deserialize_uint16_t>
 800d754:	4608      	mov	r0, r1
 800d756:	bd38      	pop	{r3, r4, r5, pc}

0800d758 <_NavSatStatus__cdr_serialize>:
 800d758:	b168      	cbz	r0, 800d776 <_NavSatStatus__cdr_serialize+0x1e>
 800d75a:	b538      	push	{r3, r4, r5, lr}
 800d75c:	460d      	mov	r5, r1
 800d75e:	4604      	mov	r4, r0
 800d760:	f990 1000 	ldrsb.w	r1, [r0]
 800d764:	4628      	mov	r0, r5
 800d766:	f001 fe3f 	bl	800f3e8 <ucdr_serialize_int8_t>
 800d76a:	4628      	mov	r0, r5
 800d76c:	8861      	ldrh	r1, [r4, #2]
 800d76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d772:	f001 b925 	b.w	800e9c0 <ucdr_serialize_uint16_t>
 800d776:	4770      	bx	lr

0800d778 <_NavSatStatus__get_serialized_size>:
 800d778:	b160      	cbz	r0, 800d794 <_NavSatStatus__get_serialized_size+0x1c>
 800d77a:	b510      	push	{r4, lr}
 800d77c:	2101      	movs	r1, #1
 800d77e:	2000      	movs	r0, #0
 800d780:	f002 fd38 	bl	80101f4 <ucdr_alignment>
 800d784:	1c44      	adds	r4, r0, #1
 800d786:	4620      	mov	r0, r4
 800d788:	2102      	movs	r1, #2
 800d78a:	f002 fd33 	bl	80101f4 <ucdr_alignment>
 800d78e:	3002      	adds	r0, #2
 800d790:	4420      	add	r0, r4
 800d792:	bd10      	pop	{r4, pc}
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop

0800d798 <_NavSatStatus__max_serialized_size>:
 800d798:	b510      	push	{r4, lr}
 800d79a:	2101      	movs	r1, #1
 800d79c:	2000      	movs	r0, #0
 800d79e:	f002 fd29 	bl	80101f4 <ucdr_alignment>
 800d7a2:	1c44      	adds	r4, r0, #1
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	2102      	movs	r1, #2
 800d7a8:	f002 fd24 	bl	80101f4 <ucdr_alignment>
 800d7ac:	3002      	adds	r0, #2
 800d7ae:	4420      	add	r0, r4
 800d7b0:	bd10      	pop	{r4, pc}
 800d7b2:	bf00      	nop

0800d7b4 <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 800d7b4:	b538      	push	{r3, r4, r5, lr}
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	4620      	mov	r0, r4
 800d7be:	7019      	strb	r1, [r3, #0]
 800d7c0:	f002 fd18 	bl	80101f4 <ucdr_alignment>
 800d7c4:	1c65      	adds	r5, r4, #1
 800d7c6:	4405      	add	r5, r0
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	2102      	movs	r1, #2
 800d7cc:	f002 fd12 	bl	80101f4 <ucdr_alignment>
 800d7d0:	f1c4 0402 	rsb	r4, r4, #2
 800d7d4:	4420      	add	r0, r4
 800d7d6:	4428      	add	r0, r5
 800d7d8:	bd38      	pop	{r3, r4, r5, pc}
 800d7da:	bf00      	nop

0800d7dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 800d7dc:	4800      	ldr	r0, [pc, #0]	; (800d7e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 800d7de:	4770      	bx	lr
 800d7e0:	200000a8 	.word	0x200000a8

0800d7e4 <std_msgs__msg__Header__init>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	4605      	mov	r5, r0
 800d7e8:	b1a8      	cbz	r0, 800d816 <std_msgs__msg__Header__init+0x32>
 800d7ea:	f000 fafd 	bl	800dde8 <builtin_interfaces__msg__Time__init>
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	b140      	cbz	r0, 800d804 <std_msgs__msg__Header__init+0x20>
 800d7f2:	f105 0608 	add.w	r6, r5, #8
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f009 f99a 	bl	8016b30 <rosidl_runtime_c__String__init>
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	b168      	cbz	r0, 800d81c <std_msgs__msg__Header__init+0x38>
 800d800:	4620      	mov	r0, r4
 800d802:	bd70      	pop	{r4, r5, r6, pc}
 800d804:	4628      	mov	r0, r5
 800d806:	f000 faf3 	bl	800ddf0 <builtin_interfaces__msg__Time__fini>
 800d80a:	f105 0008 	add.w	r0, r5, #8
 800d80e:	f009 f9a3 	bl	8016b58 <rosidl_runtime_c__String__fini>
 800d812:	4620      	mov	r0, r4
 800d814:	bd70      	pop	{r4, r5, r6, pc}
 800d816:	4604      	mov	r4, r0
 800d818:	4620      	mov	r0, r4
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 fae7 	bl	800ddf0 <builtin_interfaces__msg__Time__fini>
 800d822:	4630      	mov	r0, r6
 800d824:	f009 f998 	bl	8016b58 <rosidl_runtime_c__String__fini>
 800d828:	e7ea      	b.n	800d800 <std_msgs__msg__Header__init+0x1c>
 800d82a:	bf00      	nop

0800d82c <std_msgs__msg__Header__fini>:
 800d82c:	b148      	cbz	r0, 800d842 <std_msgs__msg__Header__fini+0x16>
 800d82e:	b510      	push	{r4, lr}
 800d830:	4604      	mov	r4, r0
 800d832:	f000 fadd 	bl	800ddf0 <builtin_interfaces__msg__Time__fini>
 800d836:	f104 0008 	add.w	r0, r4, #8
 800d83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d83e:	f009 b98b 	b.w	8016b58 <rosidl_runtime_c__String__fini>
 800d842:	4770      	bx	lr

0800d844 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d844:	f000 b888 	b.w	800d958 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>

0800d848 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 800d848:	f000 ba48 	b.w	800dcdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>

0800d84c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800d84c:	f000 bac8 	b.w	800dde0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>

0800d850 <_Float32MultiArray__max_serialized_size>:
 800d850:	2301      	movs	r3, #1
 800d852:	b500      	push	{lr}
 800d854:	b083      	sub	sp, #12
 800d856:	2100      	movs	r1, #0
 800d858:	f10d 0007 	add.w	r0, sp, #7
 800d85c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d860:	f000 f9aa 	bl	800dbb8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d864:	b003      	add	sp, #12
 800d866:	f85d fb04 	ldr.w	pc, [sp], #4
 800d86a:	bf00      	nop

0800d86c <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	4604      	mov	r4, r0
 800d870:	b190      	cbz	r0, 800d898 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x2c>
 800d872:	460d      	mov	r5, r1
 800d874:	f000 f944 	bl	800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d878:	182e      	adds	r6, r5, r0
 800d87a:	2104      	movs	r1, #4
 800d87c:	4630      	mov	r0, r6
 800d87e:	6967      	ldr	r7, [r4, #20]
 800d880:	f002 fcb8 	bl	80101f4 <ucdr_alignment>
 800d884:	1d04      	adds	r4, r0, #4
 800d886:	4434      	add	r4, r6
 800d888:	4620      	mov	r0, r4
 800d88a:	2104      	movs	r1, #4
 800d88c:	f002 fcb2 	bl	80101f4 <ucdr_alignment>
 800d890:	ebc5 0587 	rsb	r5, r5, r7, lsl #2
 800d894:	4428      	add	r0, r5
 800d896:	4420      	add	r0, r4
 800d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d89a:	bf00      	nop

0800d89c <_Float32MultiArray__cdr_deserialize>:
 800d89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89e:	460c      	mov	r4, r1
 800d8a0:	b083      	sub	sp, #12
 800d8a2:	b1d1      	cbz	r1, 800d8da <_Float32MultiArray__cdr_deserialize+0x3e>
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	f000 f991 	bl	800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d8aa:	6843      	ldr	r3, [r0, #4]
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	4798      	blx	r3
 800d8b4:	69a7      	ldr	r7, [r4, #24]
 800d8b6:	ab01      	add	r3, sp, #4
 800d8b8:	463a      	mov	r2, r7
 800d8ba:	4630      	mov	r0, r6
 800d8bc:	6921      	ldr	r1, [r4, #16]
 800d8be:	f002 fd9d 	bl	80103fc <ucdr_deserialize_sequence_float>
 800d8c2:	9b01      	ldr	r3, [sp, #4]
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	b920      	cbnz	r0, 800d8d2 <_Float32MultiArray__cdr_deserialize+0x36>
 800d8c8:	429f      	cmp	r7, r3
 800d8ca:	d30a      	bcc.n	800d8e2 <_Float32MultiArray__cdr_deserialize+0x46>
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	b003      	add	sp, #12
 800d8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	6163      	str	r3, [r4, #20]
 800d8d6:	b003      	add	sp, #12
 800d8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8da:	460d      	mov	r5, r1
 800d8dc:	4628      	mov	r0, r5
 800d8de:	b003      	add	sp, #12
 800d8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	75b0      	strb	r0, [r6, #22]
 800d8e6:	7573      	strb	r3, [r6, #21]
 800d8e8:	2104      	movs	r1, #4
 800d8ea:	6160      	str	r0, [r4, #20]
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	f002 fc99 	bl	8010224 <ucdr_align_to>
 800d8f2:	9901      	ldr	r1, [sp, #4]
 800d8f4:	4630      	mov	r0, r6
 800d8f6:	0089      	lsls	r1, r1, #2
 800d8f8:	f002 fcca 	bl	8010290 <ucdr_advance_buffer>
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	b003      	add	sp, #12
 800d900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d902:	bf00      	nop

0800d904 <_Float32MultiArray__cdr_serialize>:
 800d904:	b180      	cbz	r0, 800d928 <_Float32MultiArray__cdr_serialize+0x24>
 800d906:	b538      	push	{r3, r4, r5, lr}
 800d908:	460d      	mov	r5, r1
 800d90a:	4604      	mov	r4, r0
 800d90c:	f000 f95e 	bl	800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d910:	6843      	ldr	r3, [r0, #4]
 800d912:	4629      	mov	r1, r5
 800d914:	4620      	mov	r0, r4
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	4798      	blx	r3
 800d91a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d91e:	4628      	mov	r0, r5
 800d920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d924:	f002 bd58 	b.w	80103d8 <ucdr_serialize_sequence_float>
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop

0800d92c <_Float32MultiArray__get_serialized_size>:
 800d92c:	b538      	push	{r3, r4, r5, lr}
 800d92e:	4604      	mov	r4, r0
 800d930:	b180      	cbz	r0, 800d954 <_Float32MultiArray__get_serialized_size+0x28>
 800d932:	2100      	movs	r1, #0
 800d934:	f000 f8e4 	bl	800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d938:	2104      	movs	r1, #4
 800d93a:	6965      	ldr	r5, [r4, #20]
 800d93c:	4604      	mov	r4, r0
 800d93e:	f002 fc59 	bl	80101f4 <ucdr_alignment>
 800d942:	4404      	add	r4, r0
 800d944:	3404      	adds	r4, #4
 800d946:	4620      	mov	r0, r4
 800d948:	2104      	movs	r1, #4
 800d94a:	f002 fc53 	bl	80101f4 <ucdr_alignment>
 800d94e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800d952:	4420      	add	r0, r4
 800d954:	bd38      	pop	{r3, r4, r5, pc}
 800d956:	bf00      	nop

0800d958 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d958:	4800      	ldr	r0, [pc, #0]	; (800d95c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800d95a:	4770      	bx	lr
 800d95c:	200000d0 	.word	0x200000d0

0800d960 <_Header__max_serialized_size>:
 800d960:	2301      	movs	r3, #1
 800d962:	b500      	push	{lr}
 800d964:	b083      	sub	sp, #12
 800d966:	2100      	movs	r1, #0
 800d968:	f10d 0007 	add.w	r0, sp, #7
 800d96c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d970:	f000 fa90 	bl	800de94 <max_serialized_size_builtin_interfaces__msg__Time>
 800d974:	b003      	add	sp, #12
 800d976:	f85d fb04 	ldr.w	pc, [sp], #4
 800d97a:	bf00      	nop

0800d97c <get_serialized_size_std_msgs__msg__Header>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	4605      	mov	r5, r0
 800d980:	b168      	cbz	r0, 800d99e <get_serialized_size_std_msgs__msg__Header+0x22>
 800d982:	460c      	mov	r4, r1
 800d984:	f000 fa36 	bl	800ddf4 <get_serialized_size_builtin_interfaces__msg__Time>
 800d988:	1826      	adds	r6, r4, r0
 800d98a:	2104      	movs	r1, #4
 800d98c:	4630      	mov	r0, r6
 800d98e:	f002 fc31 	bl	80101f4 <ucdr_alignment>
 800d992:	68e9      	ldr	r1, [r5, #12]
 800d994:	f1c4 0405 	rsb	r4, r4, #5
 800d998:	440c      	add	r4, r1
 800d99a:	4404      	add	r4, r0
 800d99c:	19a0      	adds	r0, r4, r6
 800d99e:	bd70      	pop	{r4, r5, r6, pc}

0800d9a0 <_Header__cdr_deserialize>:
 800d9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	b1e1      	cbz	r1, 800d9e2 <_Header__cdr_deserialize+0x42>
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	f000 fa87 	bl	800debc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d9ae:	6843      	ldr	r3, [r0, #4]
 800d9b0:	4621      	mov	r1, r4
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	4798      	blx	r3
 800d9b8:	6927      	ldr	r7, [r4, #16]
 800d9ba:	ab01      	add	r3, sp, #4
 800d9bc:	463a      	mov	r2, r7
 800d9be:	4630      	mov	r0, r6
 800d9c0:	68a1      	ldr	r1, [r4, #8]
 800d9c2:	f002 fc97 	bl	80102f4 <ucdr_deserialize_sequence_char>
 800d9c6:	9b01      	ldr	r3, [sp, #4]
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	b920      	cbnz	r0, 800d9d6 <_Header__cdr_deserialize+0x36>
 800d9cc:	429f      	cmp	r7, r3
 800d9ce:	d30c      	bcc.n	800d9ea <_Header__cdr_deserialize+0x4a>
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	b003      	add	sp, #12
 800d9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9d6:	b103      	cbz	r3, 800d9da <_Header__cdr_deserialize+0x3a>
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	4628      	mov	r0, r5
 800d9dc:	60e3      	str	r3, [r4, #12]
 800d9de:	b003      	add	sp, #12
 800d9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e2:	460d      	mov	r5, r1
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	b003      	add	sp, #12
 800d9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	75b0      	strb	r0, [r6, #22]
 800d9ee:	7571      	strb	r1, [r6, #21]
 800d9f0:	60e0      	str	r0, [r4, #12]
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	f002 fc16 	bl	8010224 <ucdr_align_to>
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	9901      	ldr	r1, [sp, #4]
 800d9fc:	f002 fc48 	bl	8010290 <ucdr_advance_buffer>
 800da00:	4628      	mov	r0, r5
 800da02:	b003      	add	sp, #12
 800da04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da06:	bf00      	nop

0800da08 <_Header__cdr_serialize>:
 800da08:	b1f8      	cbz	r0, 800da4a <_Header__cdr_serialize+0x42>
 800da0a:	b570      	push	{r4, r5, r6, lr}
 800da0c:	4604      	mov	r4, r0
 800da0e:	460d      	mov	r5, r1
 800da10:	f000 fa54 	bl	800debc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800da14:	6843      	ldr	r3, [r0, #4]
 800da16:	4629      	mov	r1, r5
 800da18:	4620      	mov	r0, r4
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	4798      	blx	r3
 800da1e:	68a6      	ldr	r6, [r4, #8]
 800da20:	b156      	cbz	r6, 800da38 <_Header__cdr_serialize+0x30>
 800da22:	4630      	mov	r0, r6
 800da24:	f7f2 fc0e 	bl	8000244 <strlen>
 800da28:	4631      	mov	r1, r6
 800da2a:	60e0      	str	r0, [r4, #12]
 800da2c:	1c42      	adds	r2, r0, #1
 800da2e:	4628      	mov	r0, r5
 800da30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da34:	f002 bc4c 	b.w	80102d0 <ucdr_serialize_sequence_char>
 800da38:	4630      	mov	r0, r6
 800da3a:	4632      	mov	r2, r6
 800da3c:	60e0      	str	r0, [r4, #12]
 800da3e:	4631      	mov	r1, r6
 800da40:	4628      	mov	r0, r5
 800da42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da46:	f002 bc43 	b.w	80102d0 <ucdr_serialize_sequence_char>
 800da4a:	4770      	bx	lr

0800da4c <_Header__get_serialized_size>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4604      	mov	r4, r0
 800da50:	b150      	cbz	r0, 800da68 <_Header__get_serialized_size+0x1c>
 800da52:	2100      	movs	r1, #0
 800da54:	f000 f9ce 	bl	800ddf4 <get_serialized_size_builtin_interfaces__msg__Time>
 800da58:	2104      	movs	r1, #4
 800da5a:	4605      	mov	r5, r0
 800da5c:	f002 fbca 	bl	80101f4 <ucdr_alignment>
 800da60:	68e4      	ldr	r4, [r4, #12]
 800da62:	3405      	adds	r4, #5
 800da64:	442c      	add	r4, r5
 800da66:	4420      	add	r0, r4
 800da68:	bd38      	pop	{r3, r4, r5, pc}
 800da6a:	bf00      	nop

0800da6c <max_serialized_size_std_msgs__msg__Header>:
 800da6c:	2301      	movs	r3, #1
 800da6e:	b510      	push	{r4, lr}
 800da70:	7003      	strb	r3, [r0, #0]
 800da72:	4604      	mov	r4, r0
 800da74:	f000 fa0e 	bl	800de94 <max_serialized_size_builtin_interfaces__msg__Time>
 800da78:	2300      	movs	r3, #0
 800da7a:	7023      	strb	r3, [r4, #0]
 800da7c:	bd10      	pop	{r4, pc}
 800da7e:	bf00      	nop

0800da80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800da80:	4800      	ldr	r0, [pc, #0]	; (800da84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800da82:	4770      	bx	lr
 800da84:	200000f8 	.word	0x200000f8

0800da88 <_MultiArrayLayout__max_serialized_size>:
 800da88:	2104      	movs	r1, #4
 800da8a:	b508      	push	{r3, lr}
 800da8c:	2000      	movs	r0, #0
 800da8e:	f002 fbb1 	bl	80101f4 <ucdr_alignment>
 800da92:	3004      	adds	r0, #4
 800da94:	bd08      	pop	{r3, pc}
 800da96:	bf00      	nop

0800da98 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800da98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da9c:	4607      	mov	r7, r0
 800da9e:	4689      	mov	r9, r1
 800daa0:	4608      	mov	r0, r1
 800daa2:	2104      	movs	r1, #4
 800daa4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800daa8:	f002 fba4 	bl	80101f4 <ucdr_alignment>
 800daac:	f109 0304 	add.w	r3, r9, #4
 800dab0:	18c6      	adds	r6, r0, r3
 800dab2:	f1b8 0f00 	cmp.w	r8, #0
 800dab6:	d018      	beq.n	800daea <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800dab8:	2500      	movs	r5, #0
 800daba:	f009 f9b5 	bl	8016e28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	6843      	ldr	r3, [r0, #4]
 800dac2:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800dac6:	4631      	mov	r1, r6
 800dac8:	695b      	ldr	r3, [r3, #20]
 800daca:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800dace:	4798      	blx	r3
 800dad0:	4604      	mov	r4, r0
 800dad2:	2c04      	cmp	r4, #4
 800dad4:	4621      	mov	r1, r4
 800dad6:	4630      	mov	r0, r6
 800dad8:	bf28      	it	cs
 800dada:	2104      	movcs	r1, #4
 800dadc:	f002 fb8a 	bl	80101f4 <ucdr_alignment>
 800dae0:	3501      	adds	r5, #1
 800dae2:	4404      	add	r4, r0
 800dae4:	45a8      	cmp	r8, r5
 800dae6:	4426      	add	r6, r4
 800dae8:	d1e7      	bne.n	800daba <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800daea:	2104      	movs	r1, #4
 800daec:	4630      	mov	r0, r6
 800daee:	f002 fb81 	bl	80101f4 <ucdr_alignment>
 800daf2:	f1c9 0904 	rsb	r9, r9, #4
 800daf6:	444e      	add	r6, r9
 800daf8:	4430      	add	r0, r6
 800dafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dafe:	bf00      	nop

0800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800db00:	b108      	cbz	r0, 800db06 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800db02:	f7ff bfc9 	b.w	800da98 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800db06:	4770      	bx	lr

0800db08 <_MultiArrayLayout__get_serialized_size>:
 800db08:	b110      	cbz	r0, 800db10 <_MultiArrayLayout__get_serialized_size+0x8>
 800db0a:	2100      	movs	r1, #0
 800db0c:	f7ff bfc4 	b.w	800da98 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop

0800db14 <_MultiArrayLayout__cdr_deserialize>:
 800db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db16:	460d      	mov	r5, r1
 800db18:	b083      	sub	sp, #12
 800db1a:	b329      	cbz	r1, 800db68 <_MultiArrayLayout__cdr_deserialize+0x54>
 800db1c:	a901      	add	r1, sp, #4
 800db1e:	4607      	mov	r7, r0
 800db20:	f001 fa6c 	bl	800effc <ucdr_deserialize_uint32_t>
 800db24:	9b01      	ldr	r3, [sp, #4]
 800db26:	68aa      	ldr	r2, [r5, #8]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d31a      	bcc.n	800db62 <_MultiArrayLayout__cdr_deserialize+0x4e>
 800db2c:	606b      	str	r3, [r5, #4]
 800db2e:	b18b      	cbz	r3, 800db54 <_MultiArrayLayout__cdr_deserialize+0x40>
 800db30:	2400      	movs	r4, #0
 800db32:	4626      	mov	r6, r4
 800db34:	e002      	b.n	800db3c <_MultiArrayLayout__cdr_deserialize+0x28>
 800db36:	9b01      	ldr	r3, [sp, #4]
 800db38:	429e      	cmp	r6, r3
 800db3a:	d20b      	bcs.n	800db54 <_MultiArrayLayout__cdr_deserialize+0x40>
 800db3c:	f009 f974 	bl	8016e28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800db40:	6829      	ldr	r1, [r5, #0]
 800db42:	6843      	ldr	r3, [r0, #4]
 800db44:	4421      	add	r1, r4
 800db46:	4638      	mov	r0, r7
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	4798      	blx	r3
 800db4c:	3601      	adds	r6, #1
 800db4e:	3414      	adds	r4, #20
 800db50:	2800      	cmp	r0, #0
 800db52:	d1f0      	bne.n	800db36 <_MultiArrayLayout__cdr_deserialize+0x22>
 800db54:	4638      	mov	r0, r7
 800db56:	f105 010c 	add.w	r1, r5, #12
 800db5a:	f001 fa4f 	bl	800effc <ucdr_deserialize_uint32_t>
 800db5e:	b003      	add	sp, #12
 800db60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db62:	2000      	movs	r0, #0
 800db64:	b003      	add	sp, #12
 800db66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db68:	4608      	mov	r0, r1
 800db6a:	b003      	add	sp, #12
 800db6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6e:	bf00      	nop

0800db70 <_MultiArrayLayout__cdr_serialize>:
 800db70:	b308      	cbz	r0, 800dbb6 <_MultiArrayLayout__cdr_serialize+0x46>
 800db72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db74:	6847      	ldr	r7, [r0, #4]
 800db76:	460e      	mov	r6, r1
 800db78:	4605      	mov	r5, r0
 800db7a:	4608      	mov	r0, r1
 800db7c:	4639      	mov	r1, r7
 800db7e:	f001 f90d 	bl	800ed9c <ucdr_serialize_uint32_t>
 800db82:	b190      	cbz	r0, 800dbaa <_MultiArrayLayout__cdr_serialize+0x3a>
 800db84:	b18f      	cbz	r7, 800dbaa <_MultiArrayLayout__cdr_serialize+0x3a>
 800db86:	2400      	movs	r4, #0
 800db88:	e001      	b.n	800db8e <_MultiArrayLayout__cdr_serialize+0x1e>
 800db8a:	42a7      	cmp	r7, r4
 800db8c:	d00d      	beq.n	800dbaa <_MultiArrayLayout__cdr_serialize+0x3a>
 800db8e:	f009 f94b 	bl	8016e28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800db92:	682a      	ldr	r2, [r5, #0]
 800db94:	6843      	ldr	r3, [r0, #4]
 800db96:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800db9a:	4631      	mov	r1, r6
 800db9c:	689b      	ldr	r3, [r3, #8]
 800db9e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800dba2:	4798      	blx	r3
 800dba4:	3401      	adds	r4, #1
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d1ef      	bne.n	800db8a <_MultiArrayLayout__cdr_serialize+0x1a>
 800dbaa:	4630      	mov	r0, r6
 800dbac:	68e9      	ldr	r1, [r5, #12]
 800dbae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbb2:	f001 b8f3 	b.w	800ed9c <ucdr_serialize_uint32_t>
 800dbb6:	4770      	bx	lr

0800dbb8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800dbb8:	b508      	push	{r3, lr}
 800dbba:	2200      	movs	r2, #0
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	4608      	mov	r0, r1
 800dbc0:	701a      	strb	r2, [r3, #0]
 800dbc2:	2104      	movs	r1, #4
 800dbc4:	f002 fb16 	bl	80101f4 <ucdr_alignment>
 800dbc8:	3004      	adds	r0, #4
 800dbca:	bd08      	pop	{r3, pc}

0800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800dbcc:	4800      	ldr	r0, [pc, #0]	; (800dbd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800dbce:	4770      	bx	lr
 800dbd0:	20000120 	.word	0x20000120

0800dbd4 <_UInt16MultiArray__max_serialized_size>:
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	b500      	push	{lr}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	2100      	movs	r1, #0
 800dbdc:	f10d 0007 	add.w	r0, sp, #7
 800dbe0:	f88d 3007 	strb.w	r3, [sp, #7]
 800dbe4:	f7ff ffe8 	bl	800dbb8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dbe8:	b003      	add	sp, #12
 800dbea:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbee:	bf00      	nop

0800dbf0 <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 800dbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	b190      	cbz	r0, 800dc1c <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x2c>
 800dbf6:	460d      	mov	r5, r1
 800dbf8:	f7ff ff82 	bl	800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dbfc:	182e      	adds	r6, r5, r0
 800dbfe:	2104      	movs	r1, #4
 800dc00:	4630      	mov	r0, r6
 800dc02:	6967      	ldr	r7, [r4, #20]
 800dc04:	f002 faf6 	bl	80101f4 <ucdr_alignment>
 800dc08:	1d04      	adds	r4, r0, #4
 800dc0a:	4434      	add	r4, r6
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	2102      	movs	r1, #2
 800dc10:	f002 faf0 	bl	80101f4 <ucdr_alignment>
 800dc14:	ebc5 0547 	rsb	r5, r5, r7, lsl #1
 800dc18:	4428      	add	r0, r5
 800dc1a:	4420      	add	r0, r4
 800dc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc1e:	bf00      	nop

0800dc20 <_UInt16MultiArray__cdr_deserialize>:
 800dc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc22:	460c      	mov	r4, r1
 800dc24:	b083      	sub	sp, #12
 800dc26:	b1d1      	cbz	r1, 800dc5e <_UInt16MultiArray__cdr_deserialize+0x3e>
 800dc28:	4606      	mov	r6, r0
 800dc2a:	f7ff ffcf 	bl	800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dc2e:	6843      	ldr	r3, [r0, #4]
 800dc30:	4621      	mov	r1, r4
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	4630      	mov	r0, r6
 800dc36:	4798      	blx	r3
 800dc38:	69a7      	ldr	r7, [r4, #24]
 800dc3a:	ab01      	add	r3, sp, #4
 800dc3c:	463a      	mov	r2, r7
 800dc3e:	4630      	mov	r0, r6
 800dc40:	6921      	ldr	r1, [r4, #16]
 800dc42:	f002 fbaf 	bl	80103a4 <ucdr_deserialize_sequence_uint16_t>
 800dc46:	9b01      	ldr	r3, [sp, #4]
 800dc48:	4605      	mov	r5, r0
 800dc4a:	b920      	cbnz	r0, 800dc56 <_UInt16MultiArray__cdr_deserialize+0x36>
 800dc4c:	429f      	cmp	r7, r3
 800dc4e:	d30a      	bcc.n	800dc66 <_UInt16MultiArray__cdr_deserialize+0x46>
 800dc50:	4628      	mov	r0, r5
 800dc52:	b003      	add	sp, #12
 800dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc56:	4628      	mov	r0, r5
 800dc58:	6163      	str	r3, [r4, #20]
 800dc5a:	b003      	add	sp, #12
 800dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc5e:	460d      	mov	r5, r1
 800dc60:	4628      	mov	r0, r5
 800dc62:	b003      	add	sp, #12
 800dc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc66:	2301      	movs	r3, #1
 800dc68:	75b0      	strb	r0, [r6, #22]
 800dc6a:	7573      	strb	r3, [r6, #21]
 800dc6c:	2102      	movs	r1, #2
 800dc6e:	6160      	str	r0, [r4, #20]
 800dc70:	4630      	mov	r0, r6
 800dc72:	f002 fad7 	bl	8010224 <ucdr_align_to>
 800dc76:	9901      	ldr	r1, [sp, #4]
 800dc78:	4630      	mov	r0, r6
 800dc7a:	0049      	lsls	r1, r1, #1
 800dc7c:	f002 fb08 	bl	8010290 <ucdr_advance_buffer>
 800dc80:	4628      	mov	r0, r5
 800dc82:	b003      	add	sp, #12
 800dc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc86:	bf00      	nop

0800dc88 <_UInt16MultiArray__cdr_serialize>:
 800dc88:	b180      	cbz	r0, 800dcac <_UInt16MultiArray__cdr_serialize+0x24>
 800dc8a:	b538      	push	{r3, r4, r5, lr}
 800dc8c:	460d      	mov	r5, r1
 800dc8e:	4604      	mov	r4, r0
 800dc90:	f7ff ff9c 	bl	800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dc94:	6843      	ldr	r3, [r0, #4]
 800dc96:	4629      	mov	r1, r5
 800dc98:	4620      	mov	r0, r4
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	4798      	blx	r3
 800dc9e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800dca2:	4628      	mov	r0, r5
 800dca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca8:	f002 bb6a 	b.w	8010380 <ucdr_serialize_sequence_uint16_t>
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop

0800dcb0 <_UInt16MultiArray__get_serialized_size>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	b180      	cbz	r0, 800dcd8 <_UInt16MultiArray__get_serialized_size+0x28>
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	f7ff ff22 	bl	800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dcbc:	2104      	movs	r1, #4
 800dcbe:	6965      	ldr	r5, [r4, #20]
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	f002 fa97 	bl	80101f4 <ucdr_alignment>
 800dcc6:	4404      	add	r4, r0
 800dcc8:	3404      	adds	r4, #4
 800dcca:	4620      	mov	r0, r4
 800dccc:	2102      	movs	r1, #2
 800dcce:	f002 fa91 	bl	80101f4 <ucdr_alignment>
 800dcd2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800dcd6:	4420      	add	r0, r4
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	bf00      	nop

0800dcdc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 800dcdc:	4800      	ldr	r0, [pc, #0]	; (800dce0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 800dcde:	4770      	bx	lr
 800dce0:	20000148 	.word	0x20000148

0800dce4 <_UInt8MultiArray__max_serialized_size>:
 800dce4:	2301      	movs	r3, #1
 800dce6:	b500      	push	{lr}
 800dce8:	b083      	sub	sp, #12
 800dcea:	2100      	movs	r1, #0
 800dcec:	f10d 0007 	add.w	r0, sp, #7
 800dcf0:	f88d 3007 	strb.w	r3, [sp, #7]
 800dcf4:	f7ff ff60 	bl	800dbb8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dcf8:	b003      	add	sp, #12
 800dcfa:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcfe:	bf00      	nop

0800dd00 <get_serialized_size_std_msgs__msg__UInt8MultiArray>:
 800dd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd02:	4604      	mov	r4, r0
 800dd04:	b188      	cbz	r0, 800dd2a <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x2a>
 800dd06:	460e      	mov	r6, r1
 800dd08:	f7ff fefa 	bl	800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dd0c:	1837      	adds	r7, r6, r0
 800dd0e:	4638      	mov	r0, r7
 800dd10:	2104      	movs	r1, #4
 800dd12:	6965      	ldr	r5, [r4, #20]
 800dd14:	f002 fa6e 	bl	80101f4 <ucdr_alignment>
 800dd18:	3004      	adds	r0, #4
 800dd1a:	4407      	add	r7, r0
 800dd1c:	4638      	mov	r0, r7
 800dd1e:	2101      	movs	r1, #1
 800dd20:	f002 fa68 	bl	80101f4 <ucdr_alignment>
 800dd24:	1bad      	subs	r5, r5, r6
 800dd26:	4405      	add	r5, r0
 800dd28:	19e8      	adds	r0, r5, r7
 800dd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd2c <_UInt8MultiArray__cdr_deserialize>:
 800dd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd2e:	460c      	mov	r4, r1
 800dd30:	b083      	sub	sp, #12
 800dd32:	b1d1      	cbz	r1, 800dd6a <_UInt8MultiArray__cdr_deserialize+0x3e>
 800dd34:	4606      	mov	r6, r0
 800dd36:	f7ff ff49 	bl	800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dd3a:	6843      	ldr	r3, [r0, #4]
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	4630      	mov	r0, r6
 800dd42:	4798      	blx	r3
 800dd44:	69a7      	ldr	r7, [r4, #24]
 800dd46:	ab01      	add	r3, sp, #4
 800dd48:	463a      	mov	r2, r7
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	6921      	ldr	r1, [r4, #16]
 800dd4e:	f002 fafd 	bl	801034c <ucdr_deserialize_sequence_uint8_t>
 800dd52:	9b01      	ldr	r3, [sp, #4]
 800dd54:	4605      	mov	r5, r0
 800dd56:	b920      	cbnz	r0, 800dd62 <_UInt8MultiArray__cdr_deserialize+0x36>
 800dd58:	429f      	cmp	r7, r3
 800dd5a:	d30a      	bcc.n	800dd72 <_UInt8MultiArray__cdr_deserialize+0x46>
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	b003      	add	sp, #12
 800dd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd62:	4628      	mov	r0, r5
 800dd64:	6163      	str	r3, [r4, #20]
 800dd66:	b003      	add	sp, #12
 800dd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	b003      	add	sp, #12
 800dd70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd72:	2101      	movs	r1, #1
 800dd74:	75b0      	strb	r0, [r6, #22]
 800dd76:	7571      	strb	r1, [r6, #21]
 800dd78:	6160      	str	r0, [r4, #20]
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f002 fa52 	bl	8010224 <ucdr_align_to>
 800dd80:	4630      	mov	r0, r6
 800dd82:	9901      	ldr	r1, [sp, #4]
 800dd84:	f002 fa84 	bl	8010290 <ucdr_advance_buffer>
 800dd88:	4628      	mov	r0, r5
 800dd8a:	b003      	add	sp, #12
 800dd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd8e:	bf00      	nop

0800dd90 <_UInt8MultiArray__cdr_serialize>:
 800dd90:	b180      	cbz	r0, 800ddb4 <_UInt8MultiArray__cdr_serialize+0x24>
 800dd92:	b538      	push	{r3, r4, r5, lr}
 800dd94:	460d      	mov	r5, r1
 800dd96:	4604      	mov	r4, r0
 800dd98:	f7ff ff18 	bl	800dbcc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dd9c:	6843      	ldr	r3, [r0, #4]
 800dd9e:	4629      	mov	r1, r5
 800dda0:	4620      	mov	r0, r4
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	4798      	blx	r3
 800dda6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800ddaa:	4628      	mov	r0, r5
 800ddac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddb0:	f002 baba 	b.w	8010328 <ucdr_serialize_sequence_uint8_t>
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop

0800ddb8 <_UInt8MultiArray__get_serialized_size>:
 800ddb8:	b538      	push	{r3, r4, r5, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	b178      	cbz	r0, 800ddde <_UInt8MultiArray__get_serialized_size+0x26>
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	f7ff fe9e 	bl	800db00 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800ddc4:	2104      	movs	r1, #4
 800ddc6:	6965      	ldr	r5, [r4, #20]
 800ddc8:	4604      	mov	r4, r0
 800ddca:	f002 fa13 	bl	80101f4 <ucdr_alignment>
 800ddce:	4404      	add	r4, r0
 800ddd0:	3404      	adds	r4, #4
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	f002 fa0d 	bl	80101f4 <ucdr_alignment>
 800ddda:	4428      	add	r0, r5
 800dddc:	4420      	add	r0, r4
 800ddde:	bd38      	pop	{r3, r4, r5, pc}

0800dde0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800dde0:	4800      	ldr	r0, [pc, #0]	; (800dde4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x4>)
 800dde2:	4770      	bx	lr
 800dde4:	20000170 	.word	0x20000170

0800dde8 <builtin_interfaces__msg__Time__init>:
 800dde8:	3800      	subs	r0, #0
 800ddea:	bf18      	it	ne
 800ddec:	2001      	movne	r0, #1
 800ddee:	4770      	bx	lr

0800ddf0 <builtin_interfaces__msg__Time__fini>:
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop

0800ddf4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800ddf4:	b180      	cbz	r0, 800de18 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ddf6:	b538      	push	{r3, r4, r5, lr}
 800ddf8:	460d      	mov	r5, r1
 800ddfa:	2104      	movs	r1, #4
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f002 f9f9 	bl	80101f4 <ucdr_alignment>
 800de02:	1d2c      	adds	r4, r5, #4
 800de04:	4404      	add	r4, r0
 800de06:	4620      	mov	r0, r4
 800de08:	2104      	movs	r1, #4
 800de0a:	f002 f9f3 	bl	80101f4 <ucdr_alignment>
 800de0e:	f1c5 0504 	rsb	r5, r5, #4
 800de12:	4428      	add	r0, r5
 800de14:	4420      	add	r0, r4
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop

0800de1c <_Time__cdr_deserialize>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	460c      	mov	r4, r1
 800de20:	b141      	cbz	r1, 800de34 <_Time__cdr_deserialize+0x18>
 800de22:	4605      	mov	r5, r0
 800de24:	f001 fc98 	bl	800f758 <ucdr_deserialize_int32_t>
 800de28:	4628      	mov	r0, r5
 800de2a:	1d21      	adds	r1, r4, #4
 800de2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de30:	f001 b8e4 	b.w	800effc <ucdr_deserialize_uint32_t>
 800de34:	4608      	mov	r0, r1
 800de36:	bd38      	pop	{r3, r4, r5, pc}

0800de38 <_Time__cdr_serialize>:
 800de38:	b160      	cbz	r0, 800de54 <_Time__cdr_serialize+0x1c>
 800de3a:	b538      	push	{r3, r4, r5, lr}
 800de3c:	460d      	mov	r5, r1
 800de3e:	4604      	mov	r4, r0
 800de40:	6801      	ldr	r1, [r0, #0]
 800de42:	4628      	mov	r0, r5
 800de44:	f001 fbf0 	bl	800f628 <ucdr_serialize_int32_t>
 800de48:	4628      	mov	r0, r5
 800de4a:	6861      	ldr	r1, [r4, #4]
 800de4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de50:	f000 bfa4 	b.w	800ed9c <ucdr_serialize_uint32_t>
 800de54:	4770      	bx	lr
 800de56:	bf00      	nop

0800de58 <_Time__get_serialized_size>:
 800de58:	b160      	cbz	r0, 800de74 <_Time__get_serialized_size+0x1c>
 800de5a:	b510      	push	{r4, lr}
 800de5c:	2104      	movs	r1, #4
 800de5e:	2000      	movs	r0, #0
 800de60:	f002 f9c8 	bl	80101f4 <ucdr_alignment>
 800de64:	1d04      	adds	r4, r0, #4
 800de66:	4620      	mov	r0, r4
 800de68:	2104      	movs	r1, #4
 800de6a:	f002 f9c3 	bl	80101f4 <ucdr_alignment>
 800de6e:	3004      	adds	r0, #4
 800de70:	4420      	add	r0, r4
 800de72:	bd10      	pop	{r4, pc}
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop

0800de78 <_Time__max_serialized_size>:
 800de78:	b510      	push	{r4, lr}
 800de7a:	2104      	movs	r1, #4
 800de7c:	2000      	movs	r0, #0
 800de7e:	f002 f9b9 	bl	80101f4 <ucdr_alignment>
 800de82:	1d04      	adds	r4, r0, #4
 800de84:	4620      	mov	r0, r4
 800de86:	2104      	movs	r1, #4
 800de88:	f002 f9b4 	bl	80101f4 <ucdr_alignment>
 800de8c:	3004      	adds	r0, #4
 800de8e:	4420      	add	r0, r4
 800de90:	bd10      	pop	{r4, pc}
 800de92:	bf00      	nop

0800de94 <max_serialized_size_builtin_interfaces__msg__Time>:
 800de94:	b538      	push	{r3, r4, r5, lr}
 800de96:	2201      	movs	r2, #1
 800de98:	4603      	mov	r3, r0
 800de9a:	460c      	mov	r4, r1
 800de9c:	701a      	strb	r2, [r3, #0]
 800de9e:	4608      	mov	r0, r1
 800dea0:	2104      	movs	r1, #4
 800dea2:	f002 f9a7 	bl	80101f4 <ucdr_alignment>
 800dea6:	1d25      	adds	r5, r4, #4
 800dea8:	4405      	add	r5, r0
 800deaa:	4628      	mov	r0, r5
 800deac:	2104      	movs	r1, #4
 800deae:	f002 f9a1 	bl	80101f4 <ucdr_alignment>
 800deb2:	f1c4 0404 	rsb	r4, r4, #4
 800deb6:	4420      	add	r0, r4
 800deb8:	4428      	add	r0, r5
 800deba:	bd38      	pop	{r3, r4, r5, pc}

0800debc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800debc:	4800      	ldr	r0, [pc, #0]	; (800dec0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800debe:	4770      	bx	lr
 800dec0:	20000198 	.word	0x20000198

0800dec4 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800dec4:	b1f0      	cbz	r0, 800df04 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800dec6:	b570      	push	{r4, r5, r6, lr}
 800dec8:	460d      	mov	r5, r1
 800deca:	2108      	movs	r1, #8
 800decc:	4628      	mov	r0, r5
 800dece:	f002 f991 	bl	80101f4 <ucdr_alignment>
 800ded2:	f105 0408 	add.w	r4, r5, #8
 800ded6:	1826      	adds	r6, r4, r0
 800ded8:	4630      	mov	r0, r6
 800deda:	2108      	movs	r1, #8
 800dedc:	f002 f98a 	bl	80101f4 <ucdr_alignment>
 800dee0:	f100 0408 	add.w	r4, r0, #8
 800dee4:	4434      	add	r4, r6
 800dee6:	4620      	mov	r0, r4
 800dee8:	2108      	movs	r1, #8
 800deea:	f002 f983 	bl	80101f4 <ucdr_alignment>
 800deee:	3008      	adds	r0, #8
 800def0:	4404      	add	r4, r0
 800def2:	4620      	mov	r0, r4
 800def4:	2108      	movs	r1, #8
 800def6:	f002 f97d 	bl	80101f4 <ucdr_alignment>
 800defa:	f1c5 0508 	rsb	r5, r5, #8
 800defe:	4428      	add	r0, r5
 800df00:	4420      	add	r0, r4
 800df02:	bd70      	pop	{r4, r5, r6, pc}
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop

0800df08 <_Quaternion__cdr_deserialize>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	460c      	mov	r4, r1
 800df0c:	b199      	cbz	r1, 800df36 <_Quaternion__cdr_deserialize+0x2e>
 800df0e:	4605      	mov	r5, r0
 800df10:	f001 ff82 	bl	800fe18 <ucdr_deserialize_double>
 800df14:	f104 0108 	add.w	r1, r4, #8
 800df18:	4628      	mov	r0, r5
 800df1a:	f001 ff7d 	bl	800fe18 <ucdr_deserialize_double>
 800df1e:	f104 0110 	add.w	r1, r4, #16
 800df22:	4628      	mov	r0, r5
 800df24:	f001 ff78 	bl	800fe18 <ucdr_deserialize_double>
 800df28:	4628      	mov	r0, r5
 800df2a:	f104 0118 	add.w	r1, r4, #24
 800df2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df32:	f001 bf71 	b.w	800fe18 <ucdr_deserialize_double>
 800df36:	4608      	mov	r0, r1
 800df38:	bd38      	pop	{r3, r4, r5, pc}
 800df3a:	bf00      	nop

0800df3c <_Quaternion__cdr_serialize>:
 800df3c:	b1c0      	cbz	r0, 800df70 <_Quaternion__cdr_serialize+0x34>
 800df3e:	e9d0 2300 	ldrd	r2, r3, [r0]
 800df42:	b570      	push	{r4, r5, r6, lr}
 800df44:	460d      	mov	r5, r1
 800df46:	4604      	mov	r4, r0
 800df48:	4608      	mov	r0, r1
 800df4a:	f001 fdc3 	bl	800fad4 <ucdr_serialize_double>
 800df4e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800df52:	4628      	mov	r0, r5
 800df54:	f001 fdbe 	bl	800fad4 <ucdr_serialize_double>
 800df58:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800df5c:	4628      	mov	r0, r5
 800df5e:	f001 fdb9 	bl	800fad4 <ucdr_serialize_double>
 800df62:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800df66:	4628      	mov	r0, r5
 800df68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df6c:	f001 bdb2 	b.w	800fad4 <ucdr_serialize_double>
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop

0800df74 <_Quaternion__get_serialized_size>:
 800df74:	b1d0      	cbz	r0, 800dfac <_Quaternion__get_serialized_size+0x38>
 800df76:	b538      	push	{r3, r4, r5, lr}
 800df78:	2108      	movs	r1, #8
 800df7a:	2000      	movs	r0, #0
 800df7c:	f002 f93a 	bl	80101f4 <ucdr_alignment>
 800df80:	f100 0508 	add.w	r5, r0, #8
 800df84:	4628      	mov	r0, r5
 800df86:	2108      	movs	r1, #8
 800df88:	f002 f934 	bl	80101f4 <ucdr_alignment>
 800df8c:	f100 0408 	add.w	r4, r0, #8
 800df90:	442c      	add	r4, r5
 800df92:	4620      	mov	r0, r4
 800df94:	2108      	movs	r1, #8
 800df96:	f002 f92d 	bl	80101f4 <ucdr_alignment>
 800df9a:	3008      	adds	r0, #8
 800df9c:	4404      	add	r4, r0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	2108      	movs	r1, #8
 800dfa2:	f002 f927 	bl	80101f4 <ucdr_alignment>
 800dfa6:	3008      	adds	r0, #8
 800dfa8:	4420      	add	r0, r4
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop

0800dfb0 <_Quaternion__max_serialized_size>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	2108      	movs	r1, #8
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	f002 f91d 	bl	80101f4 <ucdr_alignment>
 800dfba:	f100 0508 	add.w	r5, r0, #8
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	2108      	movs	r1, #8
 800dfc2:	f002 f917 	bl	80101f4 <ucdr_alignment>
 800dfc6:	f100 0408 	add.w	r4, r0, #8
 800dfca:	4425      	add	r5, r4
 800dfcc:	4628      	mov	r0, r5
 800dfce:	2108      	movs	r1, #8
 800dfd0:	f002 f910 	bl	80101f4 <ucdr_alignment>
 800dfd4:	f100 0408 	add.w	r4, r0, #8
 800dfd8:	442c      	add	r4, r5
 800dfda:	4620      	mov	r0, r4
 800dfdc:	2108      	movs	r1, #8
 800dfde:	f002 f909 	bl	80101f4 <ucdr_alignment>
 800dfe2:	3008      	adds	r0, #8
 800dfe4:	4420      	add	r0, r4
 800dfe6:	bd38      	pop	{r3, r4, r5, pc}

0800dfe8 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2201      	movs	r2, #1
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	4608      	mov	r0, r1
 800dff0:	701a      	strb	r2, [r3, #0]
 800dff2:	460c      	mov	r4, r1
 800dff4:	2108      	movs	r1, #8
 800dff6:	f002 f8fd 	bl	80101f4 <ucdr_alignment>
 800dffa:	f104 0608 	add.w	r6, r4, #8
 800dffe:	4406      	add	r6, r0
 800e000:	4630      	mov	r0, r6
 800e002:	2108      	movs	r1, #8
 800e004:	f002 f8f6 	bl	80101f4 <ucdr_alignment>
 800e008:	f100 0508 	add.w	r5, r0, #8
 800e00c:	442e      	add	r6, r5
 800e00e:	4630      	mov	r0, r6
 800e010:	2108      	movs	r1, #8
 800e012:	f002 f8ef 	bl	80101f4 <ucdr_alignment>
 800e016:	f100 0508 	add.w	r5, r0, #8
 800e01a:	4435      	add	r5, r6
 800e01c:	4628      	mov	r0, r5
 800e01e:	2108      	movs	r1, #8
 800e020:	f002 f8e8 	bl	80101f4 <ucdr_alignment>
 800e024:	f1c4 0408 	rsb	r4, r4, #8
 800e028:	4420      	add	r0, r4
 800e02a:	4428      	add	r0, r5
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
 800e02e:	bf00      	nop

0800e030 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e030:	4800      	ldr	r0, [pc, #0]	; (800e034 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800e032:	4770      	bx	lr
 800e034:	200001c0 	.word	0x200001c0

0800e038 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800e038:	b1b8      	cbz	r0, 800e06a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800e03a:	b538      	push	{r3, r4, r5, lr}
 800e03c:	460d      	mov	r5, r1
 800e03e:	2108      	movs	r1, #8
 800e040:	4628      	mov	r0, r5
 800e042:	f002 f8d7 	bl	80101f4 <ucdr_alignment>
 800e046:	f105 0408 	add.w	r4, r5, #8
 800e04a:	4404      	add	r4, r0
 800e04c:	4620      	mov	r0, r4
 800e04e:	2108      	movs	r1, #8
 800e050:	f002 f8d0 	bl	80101f4 <ucdr_alignment>
 800e054:	3008      	adds	r0, #8
 800e056:	4404      	add	r4, r0
 800e058:	4620      	mov	r0, r4
 800e05a:	2108      	movs	r1, #8
 800e05c:	f002 f8ca 	bl	80101f4 <ucdr_alignment>
 800e060:	f1c5 0508 	rsb	r5, r5, #8
 800e064:	4428      	add	r0, r5
 800e066:	4420      	add	r0, r4
 800e068:	bd38      	pop	{r3, r4, r5, pc}
 800e06a:	4770      	bx	lr

0800e06c <_Vector3__cdr_deserialize>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	460c      	mov	r4, r1
 800e070:	b171      	cbz	r1, 800e090 <_Vector3__cdr_deserialize+0x24>
 800e072:	4605      	mov	r5, r0
 800e074:	f001 fed0 	bl	800fe18 <ucdr_deserialize_double>
 800e078:	f104 0108 	add.w	r1, r4, #8
 800e07c:	4628      	mov	r0, r5
 800e07e:	f001 fecb 	bl	800fe18 <ucdr_deserialize_double>
 800e082:	4628      	mov	r0, r5
 800e084:	f104 0110 	add.w	r1, r4, #16
 800e088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e08c:	f001 bec4 	b.w	800fe18 <ucdr_deserialize_double>
 800e090:	4608      	mov	r0, r1
 800e092:	bd38      	pop	{r3, r4, r5, pc}

0800e094 <_Vector3__cdr_serialize>:
 800e094:	b198      	cbz	r0, 800e0be <_Vector3__cdr_serialize+0x2a>
 800e096:	e9d0 2300 	ldrd	r2, r3, [r0]
 800e09a:	b570      	push	{r4, r5, r6, lr}
 800e09c:	460d      	mov	r5, r1
 800e09e:	4604      	mov	r4, r0
 800e0a0:	4608      	mov	r0, r1
 800e0a2:	f001 fd17 	bl	800fad4 <ucdr_serialize_double>
 800e0a6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	f001 fd12 	bl	800fad4 <ucdr_serialize_double>
 800e0b0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0ba:	f001 bd0b 	b.w	800fad4 <ucdr_serialize_double>
 800e0be:	4770      	bx	lr

0800e0c0 <_Vector3__get_serialized_size>:
 800e0c0:	b198      	cbz	r0, 800e0ea <_Vector3__get_serialized_size+0x2a>
 800e0c2:	b510      	push	{r4, lr}
 800e0c4:	2108      	movs	r1, #8
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	f002 f894 	bl	80101f4 <ucdr_alignment>
 800e0cc:	f100 0408 	add.w	r4, r0, #8
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	2108      	movs	r1, #8
 800e0d4:	f002 f88e 	bl	80101f4 <ucdr_alignment>
 800e0d8:	3008      	adds	r0, #8
 800e0da:	4404      	add	r4, r0
 800e0dc:	4620      	mov	r0, r4
 800e0de:	2108      	movs	r1, #8
 800e0e0:	f002 f888 	bl	80101f4 <ucdr_alignment>
 800e0e4:	3008      	adds	r0, #8
 800e0e6:	4420      	add	r0, r4
 800e0e8:	bd10      	pop	{r4, pc}
 800e0ea:	4770      	bx	lr

0800e0ec <_Vector3__max_serialized_size>:
 800e0ec:	b538      	push	{r3, r4, r5, lr}
 800e0ee:	2108      	movs	r1, #8
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	f002 f87f 	bl	80101f4 <ucdr_alignment>
 800e0f6:	f100 0508 	add.w	r5, r0, #8
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	2108      	movs	r1, #8
 800e0fe:	f002 f879 	bl	80101f4 <ucdr_alignment>
 800e102:	f100 0408 	add.w	r4, r0, #8
 800e106:	442c      	add	r4, r5
 800e108:	4620      	mov	r0, r4
 800e10a:	2108      	movs	r1, #8
 800e10c:	f002 f872 	bl	80101f4 <ucdr_alignment>
 800e110:	3008      	adds	r0, #8
 800e112:	4420      	add	r0, r4
 800e114:	bd38      	pop	{r3, r4, r5, pc}
 800e116:	bf00      	nop

0800e118 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800e118:	4603      	mov	r3, r0
 800e11a:	2201      	movs	r2, #1
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	4608      	mov	r0, r1
 800e120:	701a      	strb	r2, [r3, #0]
 800e122:	460c      	mov	r4, r1
 800e124:	2108      	movs	r1, #8
 800e126:	f002 f865 	bl	80101f4 <ucdr_alignment>
 800e12a:	f104 0508 	add.w	r5, r4, #8
 800e12e:	1946      	adds	r6, r0, r5
 800e130:	4630      	mov	r0, r6
 800e132:	2108      	movs	r1, #8
 800e134:	f002 f85e 	bl	80101f4 <ucdr_alignment>
 800e138:	f100 0508 	add.w	r5, r0, #8
 800e13c:	4435      	add	r5, r6
 800e13e:	4628      	mov	r0, r5
 800e140:	2108      	movs	r1, #8
 800e142:	f002 f857 	bl	80101f4 <ucdr_alignment>
 800e146:	f1c4 0408 	rsb	r4, r4, #8
 800e14a:	4420      	add	r0, r4
 800e14c:	4428      	add	r0, r5
 800e14e:	bd70      	pop	{r4, r5, r6, pc}

0800e150 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e150:	4800      	ldr	r0, [pc, #0]	; (800e154 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800e152:	4770      	bx	lr
 800e154:	200001e8 	.word	0x200001e8

0800e158 <ucdr_serialize_endian_array_char>:
 800e158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e15c:	4619      	mov	r1, r3
 800e15e:	461e      	mov	r6, r3
 800e160:	4690      	mov	r8, r2
 800e162:	4604      	mov	r4, r0
 800e164:	f001 fff0 	bl	8010148 <ucdr_check_buffer_available_for>
 800e168:	b9e0      	cbnz	r0, 800e1a4 <ucdr_serialize_endian_array_char+0x4c>
 800e16a:	4637      	mov	r7, r6
 800e16c:	e00a      	b.n	800e184 <ucdr_serialize_endian_array_char+0x2c>
 800e16e:	462a      	mov	r2, r5
 800e170:	68a0      	ldr	r0, [r4, #8]
 800e172:	f009 fe3b 	bl	8017dec <memcpy>
 800e176:	68a2      	ldr	r2, [r4, #8]
 800e178:	6923      	ldr	r3, [r4, #16]
 800e17a:	442a      	add	r2, r5
 800e17c:	442b      	add	r3, r5
 800e17e:	1b7f      	subs	r7, r7, r5
 800e180:	60a2      	str	r2, [r4, #8]
 800e182:	6123      	str	r3, [r4, #16]
 800e184:	4639      	mov	r1, r7
 800e186:	2201      	movs	r2, #1
 800e188:	4620      	mov	r0, r4
 800e18a:	f002 f865 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e18e:	1bf1      	subs	r1, r6, r7
 800e190:	4605      	mov	r5, r0
 800e192:	4441      	add	r1, r8
 800e194:	2800      	cmp	r0, #0
 800e196:	d1ea      	bne.n	800e16e <ucdr_serialize_endian_array_char+0x16>
 800e198:	2301      	movs	r3, #1
 800e19a:	7da0      	ldrb	r0, [r4, #22]
 800e19c:	7563      	strb	r3, [r4, #21]
 800e19e:	4058      	eors	r0, r3
 800e1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a4:	4632      	mov	r2, r6
 800e1a6:	4641      	mov	r1, r8
 800e1a8:	68a0      	ldr	r0, [r4, #8]
 800e1aa:	f009 fe1f 	bl	8017dec <memcpy>
 800e1ae:	68a2      	ldr	r2, [r4, #8]
 800e1b0:	6923      	ldr	r3, [r4, #16]
 800e1b2:	4432      	add	r2, r6
 800e1b4:	4433      	add	r3, r6
 800e1b6:	60a2      	str	r2, [r4, #8]
 800e1b8:	6123      	str	r3, [r4, #16]
 800e1ba:	e7ed      	b.n	800e198 <ucdr_serialize_endian_array_char+0x40>

0800e1bc <ucdr_deserialize_endian_array_char>:
 800e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	461e      	mov	r6, r3
 800e1c4:	4690      	mov	r8, r2
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	f001 ffbe 	bl	8010148 <ucdr_check_buffer_available_for>
 800e1cc:	b9e0      	cbnz	r0, 800e208 <ucdr_deserialize_endian_array_char+0x4c>
 800e1ce:	4637      	mov	r7, r6
 800e1d0:	e00a      	b.n	800e1e8 <ucdr_deserialize_endian_array_char+0x2c>
 800e1d2:	462a      	mov	r2, r5
 800e1d4:	68a1      	ldr	r1, [r4, #8]
 800e1d6:	f009 fe09 	bl	8017dec <memcpy>
 800e1da:	68a2      	ldr	r2, [r4, #8]
 800e1dc:	6923      	ldr	r3, [r4, #16]
 800e1de:	442a      	add	r2, r5
 800e1e0:	442b      	add	r3, r5
 800e1e2:	1b7f      	subs	r7, r7, r5
 800e1e4:	60a2      	str	r2, [r4, #8]
 800e1e6:	6123      	str	r3, [r4, #16]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	4639      	mov	r1, r7
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	f002 f833 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	1bf0      	subs	r0, r6, r7
 800e1f6:	4440      	add	r0, r8
 800e1f8:	2d00      	cmp	r5, #0
 800e1fa:	d1ea      	bne.n	800e1d2 <ucdr_deserialize_endian_array_char+0x16>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	7da0      	ldrb	r0, [r4, #22]
 800e200:	7563      	strb	r3, [r4, #21]
 800e202:	4058      	eors	r0, r3
 800e204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e208:	4632      	mov	r2, r6
 800e20a:	4640      	mov	r0, r8
 800e20c:	68a1      	ldr	r1, [r4, #8]
 800e20e:	f009 fded 	bl	8017dec <memcpy>
 800e212:	68a2      	ldr	r2, [r4, #8]
 800e214:	6923      	ldr	r3, [r4, #16]
 800e216:	4432      	add	r2, r6
 800e218:	4433      	add	r3, r6
 800e21a:	60a2      	str	r2, [r4, #8]
 800e21c:	6123      	str	r3, [r4, #16]
 800e21e:	e7ed      	b.n	800e1fc <ucdr_deserialize_endian_array_char+0x40>

0800e220 <ucdr_serialize_array_uint8_t>:
 800e220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e224:	4688      	mov	r8, r1
 800e226:	4611      	mov	r1, r2
 800e228:	4616      	mov	r6, r2
 800e22a:	4604      	mov	r4, r0
 800e22c:	f001 ff8c 	bl	8010148 <ucdr_check_buffer_available_for>
 800e230:	b9e0      	cbnz	r0, 800e26c <ucdr_serialize_array_uint8_t+0x4c>
 800e232:	4637      	mov	r7, r6
 800e234:	e00a      	b.n	800e24c <ucdr_serialize_array_uint8_t+0x2c>
 800e236:	462a      	mov	r2, r5
 800e238:	68a0      	ldr	r0, [r4, #8]
 800e23a:	f009 fdd7 	bl	8017dec <memcpy>
 800e23e:	68a2      	ldr	r2, [r4, #8]
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	442a      	add	r2, r5
 800e244:	442b      	add	r3, r5
 800e246:	1b7f      	subs	r7, r7, r5
 800e248:	60a2      	str	r2, [r4, #8]
 800e24a:	6123      	str	r3, [r4, #16]
 800e24c:	4639      	mov	r1, r7
 800e24e:	2201      	movs	r2, #1
 800e250:	4620      	mov	r0, r4
 800e252:	f002 f801 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e256:	1bf1      	subs	r1, r6, r7
 800e258:	4605      	mov	r5, r0
 800e25a:	4441      	add	r1, r8
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d1ea      	bne.n	800e236 <ucdr_serialize_array_uint8_t+0x16>
 800e260:	2301      	movs	r3, #1
 800e262:	7da0      	ldrb	r0, [r4, #22]
 800e264:	7563      	strb	r3, [r4, #21]
 800e266:	4058      	eors	r0, r3
 800e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26c:	4632      	mov	r2, r6
 800e26e:	4641      	mov	r1, r8
 800e270:	68a0      	ldr	r0, [r4, #8]
 800e272:	f009 fdbb 	bl	8017dec <memcpy>
 800e276:	68a3      	ldr	r3, [r4, #8]
 800e278:	6922      	ldr	r2, [r4, #16]
 800e27a:	4433      	add	r3, r6
 800e27c:	4432      	add	r2, r6
 800e27e:	60a3      	str	r3, [r4, #8]
 800e280:	6122      	str	r2, [r4, #16]
 800e282:	e7ed      	b.n	800e260 <ucdr_serialize_array_uint8_t+0x40>

0800e284 <ucdr_serialize_endian_array_uint8_t>:
 800e284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e288:	4619      	mov	r1, r3
 800e28a:	461e      	mov	r6, r3
 800e28c:	4690      	mov	r8, r2
 800e28e:	4604      	mov	r4, r0
 800e290:	f001 ff5a 	bl	8010148 <ucdr_check_buffer_available_for>
 800e294:	b9e0      	cbnz	r0, 800e2d0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e296:	4637      	mov	r7, r6
 800e298:	e00a      	b.n	800e2b0 <ucdr_serialize_endian_array_uint8_t+0x2c>
 800e29a:	462a      	mov	r2, r5
 800e29c:	68a0      	ldr	r0, [r4, #8]
 800e29e:	f009 fda5 	bl	8017dec <memcpy>
 800e2a2:	68a2      	ldr	r2, [r4, #8]
 800e2a4:	6923      	ldr	r3, [r4, #16]
 800e2a6:	442a      	add	r2, r5
 800e2a8:	442b      	add	r3, r5
 800e2aa:	1b7f      	subs	r7, r7, r5
 800e2ac:	60a2      	str	r2, [r4, #8]
 800e2ae:	6123      	str	r3, [r4, #16]
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	f001 ffcf 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e2ba:	1bf1      	subs	r1, r6, r7
 800e2bc:	4605      	mov	r5, r0
 800e2be:	4441      	add	r1, r8
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d1ea      	bne.n	800e29a <ucdr_serialize_endian_array_uint8_t+0x16>
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	7da0      	ldrb	r0, [r4, #22]
 800e2c8:	7563      	strb	r3, [r4, #21]
 800e2ca:	4058      	eors	r0, r3
 800e2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d0:	4632      	mov	r2, r6
 800e2d2:	4641      	mov	r1, r8
 800e2d4:	68a0      	ldr	r0, [r4, #8]
 800e2d6:	f009 fd89 	bl	8017dec <memcpy>
 800e2da:	68a2      	ldr	r2, [r4, #8]
 800e2dc:	6923      	ldr	r3, [r4, #16]
 800e2de:	4432      	add	r2, r6
 800e2e0:	4433      	add	r3, r6
 800e2e2:	60a2      	str	r2, [r4, #8]
 800e2e4:	6123      	str	r3, [r4, #16]
 800e2e6:	e7ed      	b.n	800e2c4 <ucdr_serialize_endian_array_uint8_t+0x40>

0800e2e8 <ucdr_deserialize_array_uint8_t>:
 800e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	4688      	mov	r8, r1
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	4616      	mov	r6, r2
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	f001 ff28 	bl	8010148 <ucdr_check_buffer_available_for>
 800e2f8:	b9e0      	cbnz	r0, 800e334 <ucdr_deserialize_array_uint8_t+0x4c>
 800e2fa:	4637      	mov	r7, r6
 800e2fc:	e00a      	b.n	800e314 <ucdr_deserialize_array_uint8_t+0x2c>
 800e2fe:	462a      	mov	r2, r5
 800e300:	68a1      	ldr	r1, [r4, #8]
 800e302:	f009 fd73 	bl	8017dec <memcpy>
 800e306:	68a2      	ldr	r2, [r4, #8]
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	442a      	add	r2, r5
 800e30c:	442b      	add	r3, r5
 800e30e:	1b7f      	subs	r7, r7, r5
 800e310:	60a2      	str	r2, [r4, #8]
 800e312:	6123      	str	r3, [r4, #16]
 800e314:	2201      	movs	r2, #1
 800e316:	4639      	mov	r1, r7
 800e318:	4620      	mov	r0, r4
 800e31a:	f001 ff9d 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e31e:	4605      	mov	r5, r0
 800e320:	1bf0      	subs	r0, r6, r7
 800e322:	4440      	add	r0, r8
 800e324:	2d00      	cmp	r5, #0
 800e326:	d1ea      	bne.n	800e2fe <ucdr_deserialize_array_uint8_t+0x16>
 800e328:	2301      	movs	r3, #1
 800e32a:	7da0      	ldrb	r0, [r4, #22]
 800e32c:	7563      	strb	r3, [r4, #21]
 800e32e:	4058      	eors	r0, r3
 800e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e334:	4632      	mov	r2, r6
 800e336:	4640      	mov	r0, r8
 800e338:	68a1      	ldr	r1, [r4, #8]
 800e33a:	f009 fd57 	bl	8017dec <memcpy>
 800e33e:	68a3      	ldr	r3, [r4, #8]
 800e340:	6922      	ldr	r2, [r4, #16]
 800e342:	4433      	add	r3, r6
 800e344:	4432      	add	r2, r6
 800e346:	60a3      	str	r3, [r4, #8]
 800e348:	6122      	str	r2, [r4, #16]
 800e34a:	e7ed      	b.n	800e328 <ucdr_deserialize_array_uint8_t+0x40>

0800e34c <ucdr_deserialize_endian_array_uint8_t>:
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	4619      	mov	r1, r3
 800e352:	461e      	mov	r6, r3
 800e354:	4690      	mov	r8, r2
 800e356:	4604      	mov	r4, r0
 800e358:	f001 fef6 	bl	8010148 <ucdr_check_buffer_available_for>
 800e35c:	b9e0      	cbnz	r0, 800e398 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e35e:	4637      	mov	r7, r6
 800e360:	e00a      	b.n	800e378 <ucdr_deserialize_endian_array_uint8_t+0x2c>
 800e362:	462a      	mov	r2, r5
 800e364:	68a1      	ldr	r1, [r4, #8]
 800e366:	f009 fd41 	bl	8017dec <memcpy>
 800e36a:	68a2      	ldr	r2, [r4, #8]
 800e36c:	6923      	ldr	r3, [r4, #16]
 800e36e:	442a      	add	r2, r5
 800e370:	442b      	add	r3, r5
 800e372:	1b7f      	subs	r7, r7, r5
 800e374:	60a2      	str	r2, [r4, #8]
 800e376:	6123      	str	r3, [r4, #16]
 800e378:	2201      	movs	r2, #1
 800e37a:	4639      	mov	r1, r7
 800e37c:	4620      	mov	r0, r4
 800e37e:	f001 ff6b 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e382:	4605      	mov	r5, r0
 800e384:	1bf0      	subs	r0, r6, r7
 800e386:	4440      	add	r0, r8
 800e388:	2d00      	cmp	r5, #0
 800e38a:	d1ea      	bne.n	800e362 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e38c:	2301      	movs	r3, #1
 800e38e:	7da0      	ldrb	r0, [r4, #22]
 800e390:	7563      	strb	r3, [r4, #21]
 800e392:	4058      	eors	r0, r3
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	4632      	mov	r2, r6
 800e39a:	4640      	mov	r0, r8
 800e39c:	68a1      	ldr	r1, [r4, #8]
 800e39e:	f009 fd25 	bl	8017dec <memcpy>
 800e3a2:	68a2      	ldr	r2, [r4, #8]
 800e3a4:	6923      	ldr	r3, [r4, #16]
 800e3a6:	4432      	add	r2, r6
 800e3a8:	4433      	add	r3, r6
 800e3aa:	60a2      	str	r2, [r4, #8]
 800e3ac:	6123      	str	r3, [r4, #16]
 800e3ae:	e7ed      	b.n	800e38c <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e3b0 <ucdr_serialize_endian_array_uint16_t>:
 800e3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b4:	460f      	mov	r7, r1
 800e3b6:	2102      	movs	r1, #2
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	4614      	mov	r4, r2
 800e3bc:	461e      	mov	r6, r3
 800e3be:	f001 ff21 	bl	8010204 <ucdr_buffer_alignment>
 800e3c2:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	f001 ff61 	bl	8010290 <ucdr_advance_buffer>
 800e3ce:	2f01      	cmp	r7, #1
 800e3d0:	f885 8015 	strb.w	r8, [r5, #21]
 800e3d4:	d010      	beq.n	800e3f8 <ucdr_serialize_endian_array_uint16_t+0x48>
 800e3d6:	b156      	cbz	r6, 800e3ee <ucdr_serialize_endian_array_uint16_t+0x3e>
 800e3d8:	3c02      	subs	r4, #2
 800e3da:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800e3de:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	f000 fb6b 	bl	800eac0 <ucdr_serialize_endian_uint16_t>
 800e3ea:	42b4      	cmp	r4, r6
 800e3ec:	d1f7      	bne.n	800e3de <ucdr_serialize_endian_array_uint16_t+0x2e>
 800e3ee:	7da8      	ldrb	r0, [r5, #22]
 800e3f0:	f080 0001 	eor.w	r0, r0, #1
 800e3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f8:	0076      	lsls	r6, r6, #1
 800e3fa:	4631      	mov	r1, r6
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	f001 fea3 	bl	8010148 <ucdr_check_buffer_available_for>
 800e402:	b9f8      	cbnz	r0, 800e444 <ucdr_serialize_endian_array_uint16_t+0x94>
 800e404:	46b0      	mov	r8, r6
 800e406:	e00b      	b.n	800e420 <ucdr_serialize_endian_array_uint16_t+0x70>
 800e408:	463a      	mov	r2, r7
 800e40a:	68a8      	ldr	r0, [r5, #8]
 800e40c:	f009 fcee 	bl	8017dec <memcpy>
 800e410:	68aa      	ldr	r2, [r5, #8]
 800e412:	692b      	ldr	r3, [r5, #16]
 800e414:	443a      	add	r2, r7
 800e416:	443b      	add	r3, r7
 800e418:	eba8 0807 	sub.w	r8, r8, r7
 800e41c:	60aa      	str	r2, [r5, #8]
 800e41e:	612b      	str	r3, [r5, #16]
 800e420:	4641      	mov	r1, r8
 800e422:	2202      	movs	r2, #2
 800e424:	4628      	mov	r0, r5
 800e426:	f001 ff17 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e42a:	eba6 0108 	sub.w	r1, r6, r8
 800e42e:	4607      	mov	r7, r0
 800e430:	4421      	add	r1, r4
 800e432:	2800      	cmp	r0, #0
 800e434:	d1e8      	bne.n	800e408 <ucdr_serialize_endian_array_uint16_t+0x58>
 800e436:	2302      	movs	r3, #2
 800e438:	7da8      	ldrb	r0, [r5, #22]
 800e43a:	756b      	strb	r3, [r5, #21]
 800e43c:	f080 0001 	eor.w	r0, r0, #1
 800e440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e444:	4632      	mov	r2, r6
 800e446:	4621      	mov	r1, r4
 800e448:	68a8      	ldr	r0, [r5, #8]
 800e44a:	f009 fccf 	bl	8017dec <memcpy>
 800e44e:	68aa      	ldr	r2, [r5, #8]
 800e450:	692b      	ldr	r3, [r5, #16]
 800e452:	4432      	add	r2, r6
 800e454:	441e      	add	r6, r3
 800e456:	60aa      	str	r2, [r5, #8]
 800e458:	612e      	str	r6, [r5, #16]
 800e45a:	e7ec      	b.n	800e436 <ucdr_serialize_endian_array_uint16_t+0x86>

0800e45c <ucdr_deserialize_endian_array_uint16_t>:
 800e45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e460:	460f      	mov	r7, r1
 800e462:	2102      	movs	r1, #2
 800e464:	4605      	mov	r5, r0
 800e466:	4614      	mov	r4, r2
 800e468:	461e      	mov	r6, r3
 800e46a:	f001 fecb 	bl	8010204 <ucdr_buffer_alignment>
 800e46e:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e472:	4601      	mov	r1, r0
 800e474:	4628      	mov	r0, r5
 800e476:	f001 ff0b 	bl	8010290 <ucdr_advance_buffer>
 800e47a:	2f01      	cmp	r7, #1
 800e47c:	f885 8015 	strb.w	r8, [r5, #21]
 800e480:	d00f      	beq.n	800e4a2 <ucdr_deserialize_endian_array_uint16_t+0x46>
 800e482:	b14e      	cbz	r6, 800e498 <ucdr_deserialize_endian_array_uint16_t+0x3c>
 800e484:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800e488:	4622      	mov	r2, r4
 800e48a:	4639      	mov	r1, r7
 800e48c:	4628      	mov	r0, r5
 800e48e:	3402      	adds	r4, #2
 800e490:	f000 fc0a 	bl	800eca8 <ucdr_deserialize_endian_uint16_t>
 800e494:	42a6      	cmp	r6, r4
 800e496:	d1f7      	bne.n	800e488 <ucdr_deserialize_endian_array_uint16_t+0x2c>
 800e498:	7da8      	ldrb	r0, [r5, #22]
 800e49a:	f080 0001 	eor.w	r0, r0, #1
 800e49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a2:	0076      	lsls	r6, r6, #1
 800e4a4:	4631      	mov	r1, r6
 800e4a6:	4628      	mov	r0, r5
 800e4a8:	f001 fe4e 	bl	8010148 <ucdr_check_buffer_available_for>
 800e4ac:	b9f8      	cbnz	r0, 800e4ee <ucdr_deserialize_endian_array_uint16_t+0x92>
 800e4ae:	46b0      	mov	r8, r6
 800e4b0:	e00b      	b.n	800e4ca <ucdr_deserialize_endian_array_uint16_t+0x6e>
 800e4b2:	463a      	mov	r2, r7
 800e4b4:	68a9      	ldr	r1, [r5, #8]
 800e4b6:	f009 fc99 	bl	8017dec <memcpy>
 800e4ba:	68aa      	ldr	r2, [r5, #8]
 800e4bc:	692b      	ldr	r3, [r5, #16]
 800e4be:	443a      	add	r2, r7
 800e4c0:	443b      	add	r3, r7
 800e4c2:	eba8 0807 	sub.w	r8, r8, r7
 800e4c6:	60aa      	str	r2, [r5, #8]
 800e4c8:	612b      	str	r3, [r5, #16]
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	4641      	mov	r1, r8
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f001 fec2 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	eba6 0008 	sub.w	r0, r6, r8
 800e4da:	4420      	add	r0, r4
 800e4dc:	2f00      	cmp	r7, #0
 800e4de:	d1e8      	bne.n	800e4b2 <ucdr_deserialize_endian_array_uint16_t+0x56>
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	7da8      	ldrb	r0, [r5, #22]
 800e4e4:	756b      	strb	r3, [r5, #21]
 800e4e6:	f080 0001 	eor.w	r0, r0, #1
 800e4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4ee:	4632      	mov	r2, r6
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	68a9      	ldr	r1, [r5, #8]
 800e4f4:	f009 fc7a 	bl	8017dec <memcpy>
 800e4f8:	68aa      	ldr	r2, [r5, #8]
 800e4fa:	692b      	ldr	r3, [r5, #16]
 800e4fc:	4432      	add	r2, r6
 800e4fe:	441e      	add	r6, r3
 800e500:	60aa      	str	r2, [r5, #8]
 800e502:	612e      	str	r6, [r5, #16]
 800e504:	e7ec      	b.n	800e4e0 <ucdr_deserialize_endian_array_uint16_t+0x84>
 800e506:	bf00      	nop

0800e508 <ucdr_serialize_endian_array_float>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	460f      	mov	r7, r1
 800e50e:	2104      	movs	r1, #4
 800e510:	4605      	mov	r5, r0
 800e512:	4614      	mov	r4, r2
 800e514:	461e      	mov	r6, r3
 800e516:	f001 fe75 	bl	8010204 <ucdr_buffer_alignment>
 800e51a:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e51e:	4601      	mov	r1, r0
 800e520:	4628      	mov	r0, r5
 800e522:	f001 feb5 	bl	8010290 <ucdr_advance_buffer>
 800e526:	2f01      	cmp	r7, #1
 800e528:	f885 8015 	strb.w	r8, [r5, #21]
 800e52c:	d010      	beq.n	800e550 <ucdr_serialize_endian_array_float+0x48>
 800e52e:	b156      	cbz	r6, 800e546 <ucdr_serialize_endian_array_float+0x3e>
 800e530:	3c04      	subs	r4, #4
 800e532:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e536:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800e53a:	4639      	mov	r1, r7
 800e53c:	4628      	mov	r0, r5
 800e53e:	f001 f99b 	bl	800f878 <ucdr_serialize_endian_float>
 800e542:	42b4      	cmp	r4, r6
 800e544:	d1f7      	bne.n	800e536 <ucdr_serialize_endian_array_float+0x2e>
 800e546:	7da8      	ldrb	r0, [r5, #22]
 800e548:	f080 0001 	eor.w	r0, r0, #1
 800e54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e550:	00b6      	lsls	r6, r6, #2
 800e552:	4631      	mov	r1, r6
 800e554:	4628      	mov	r0, r5
 800e556:	f001 fdf7 	bl	8010148 <ucdr_check_buffer_available_for>
 800e55a:	b9f8      	cbnz	r0, 800e59c <ucdr_serialize_endian_array_float+0x94>
 800e55c:	46b0      	mov	r8, r6
 800e55e:	e00b      	b.n	800e578 <ucdr_serialize_endian_array_float+0x70>
 800e560:	463a      	mov	r2, r7
 800e562:	68a8      	ldr	r0, [r5, #8]
 800e564:	f009 fc42 	bl	8017dec <memcpy>
 800e568:	68aa      	ldr	r2, [r5, #8]
 800e56a:	692b      	ldr	r3, [r5, #16]
 800e56c:	443a      	add	r2, r7
 800e56e:	443b      	add	r3, r7
 800e570:	eba8 0807 	sub.w	r8, r8, r7
 800e574:	60aa      	str	r2, [r5, #8]
 800e576:	612b      	str	r3, [r5, #16]
 800e578:	4641      	mov	r1, r8
 800e57a:	2204      	movs	r2, #4
 800e57c:	4628      	mov	r0, r5
 800e57e:	f001 fe6b 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e582:	eba6 0108 	sub.w	r1, r6, r8
 800e586:	4607      	mov	r7, r0
 800e588:	4421      	add	r1, r4
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d1e8      	bne.n	800e560 <ucdr_serialize_endian_array_float+0x58>
 800e58e:	2304      	movs	r3, #4
 800e590:	7da8      	ldrb	r0, [r5, #22]
 800e592:	756b      	strb	r3, [r5, #21]
 800e594:	f080 0001 	eor.w	r0, r0, #1
 800e598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e59c:	4632      	mov	r2, r6
 800e59e:	4621      	mov	r1, r4
 800e5a0:	68a8      	ldr	r0, [r5, #8]
 800e5a2:	f009 fc23 	bl	8017dec <memcpy>
 800e5a6:	68aa      	ldr	r2, [r5, #8]
 800e5a8:	692b      	ldr	r3, [r5, #16]
 800e5aa:	4432      	add	r2, r6
 800e5ac:	441e      	add	r6, r3
 800e5ae:	60aa      	str	r2, [r5, #8]
 800e5b0:	612e      	str	r6, [r5, #16]
 800e5b2:	e7ec      	b.n	800e58e <ucdr_serialize_endian_array_float+0x86>

0800e5b4 <ucdr_deserialize_endian_array_float>:
 800e5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b8:	460f      	mov	r7, r1
 800e5ba:	2104      	movs	r1, #4
 800e5bc:	4605      	mov	r5, r0
 800e5be:	4614      	mov	r4, r2
 800e5c0:	461e      	mov	r6, r3
 800e5c2:	f001 fe1f 	bl	8010204 <ucdr_buffer_alignment>
 800e5c6:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e5ca:	4601      	mov	r1, r0
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	f001 fe5f 	bl	8010290 <ucdr_advance_buffer>
 800e5d2:	2f01      	cmp	r7, #1
 800e5d4:	f885 8015 	strb.w	r8, [r5, #21]
 800e5d8:	d00f      	beq.n	800e5fa <ucdr_deserialize_endian_array_float+0x46>
 800e5da:	b14e      	cbz	r6, 800e5f0 <ucdr_deserialize_endian_array_float+0x3c>
 800e5dc:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e5e0:	4622      	mov	r2, r4
 800e5e2:	4639      	mov	r1, r7
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	3404      	adds	r4, #4
 800e5e8:	f001 f9de 	bl	800f9a8 <ucdr_deserialize_endian_float>
 800e5ec:	42a6      	cmp	r6, r4
 800e5ee:	d1f7      	bne.n	800e5e0 <ucdr_deserialize_endian_array_float+0x2c>
 800e5f0:	7da8      	ldrb	r0, [r5, #22]
 800e5f2:	f080 0001 	eor.w	r0, r0, #1
 800e5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5fa:	00b6      	lsls	r6, r6, #2
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	f001 fda2 	bl	8010148 <ucdr_check_buffer_available_for>
 800e604:	b9f8      	cbnz	r0, 800e646 <ucdr_deserialize_endian_array_float+0x92>
 800e606:	46b0      	mov	r8, r6
 800e608:	e00b      	b.n	800e622 <ucdr_deserialize_endian_array_float+0x6e>
 800e60a:	463a      	mov	r2, r7
 800e60c:	68a9      	ldr	r1, [r5, #8]
 800e60e:	f009 fbed 	bl	8017dec <memcpy>
 800e612:	68aa      	ldr	r2, [r5, #8]
 800e614:	692b      	ldr	r3, [r5, #16]
 800e616:	443a      	add	r2, r7
 800e618:	443b      	add	r3, r7
 800e61a:	eba8 0807 	sub.w	r8, r8, r7
 800e61e:	60aa      	str	r2, [r5, #8]
 800e620:	612b      	str	r3, [r5, #16]
 800e622:	2204      	movs	r2, #4
 800e624:	4641      	mov	r1, r8
 800e626:	4628      	mov	r0, r5
 800e628:	f001 fe16 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e62c:	4607      	mov	r7, r0
 800e62e:	eba6 0008 	sub.w	r0, r6, r8
 800e632:	4420      	add	r0, r4
 800e634:	2f00      	cmp	r7, #0
 800e636:	d1e8      	bne.n	800e60a <ucdr_deserialize_endian_array_float+0x56>
 800e638:	2304      	movs	r3, #4
 800e63a:	7da8      	ldrb	r0, [r5, #22]
 800e63c:	756b      	strb	r3, [r5, #21]
 800e63e:	f080 0001 	eor.w	r0, r0, #1
 800e642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e646:	4632      	mov	r2, r6
 800e648:	4620      	mov	r0, r4
 800e64a:	68a9      	ldr	r1, [r5, #8]
 800e64c:	f009 fbce 	bl	8017dec <memcpy>
 800e650:	68aa      	ldr	r2, [r5, #8]
 800e652:	692b      	ldr	r3, [r5, #16]
 800e654:	4432      	add	r2, r6
 800e656:	441e      	add	r6, r3
 800e658:	60aa      	str	r2, [r5, #8]
 800e65a:	612e      	str	r6, [r5, #16]
 800e65c:	e7ec      	b.n	800e638 <ucdr_deserialize_endian_array_float+0x84>
 800e65e:	bf00      	nop

0800e660 <ucdr_serialize_array_double>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	460d      	mov	r5, r1
 800e666:	2108      	movs	r1, #8
 800e668:	4604      	mov	r4, r0
 800e66a:	4616      	mov	r6, r2
 800e66c:	f001 fdca 	bl	8010204 <ucdr_buffer_alignment>
 800e670:	4601      	mov	r1, r0
 800e672:	4620      	mov	r0, r4
 800e674:	7d67      	ldrb	r7, [r4, #21]
 800e676:	f001 fe0b 	bl	8010290 <ucdr_advance_buffer>
 800e67a:	7d21      	ldrb	r1, [r4, #20]
 800e67c:	7567      	strb	r7, [r4, #21]
 800e67e:	2901      	cmp	r1, #1
 800e680:	d011      	beq.n	800e6a6 <ucdr_serialize_array_double+0x46>
 800e682:	b15e      	cbz	r6, 800e69c <ucdr_serialize_array_double+0x3c>
 800e684:	3d08      	subs	r5, #8
 800e686:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800e68a:	e000      	b.n	800e68e <ucdr_serialize_array_double+0x2e>
 800e68c:	7d21      	ldrb	r1, [r4, #20]
 800e68e:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800e692:	4620      	mov	r0, r4
 800e694:	f001 faee 	bl	800fc74 <ucdr_serialize_endian_double>
 800e698:	42b5      	cmp	r5, r6
 800e69a:	d1f7      	bne.n	800e68c <ucdr_serialize_array_double+0x2c>
 800e69c:	7da0      	ldrb	r0, [r4, #22]
 800e69e:	f080 0001 	eor.w	r0, r0, #1
 800e6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a6:	00f6      	lsls	r6, r6, #3
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f001 fd4c 	bl	8010148 <ucdr_check_buffer_available_for>
 800e6b0:	b9f8      	cbnz	r0, 800e6f2 <ucdr_serialize_array_double+0x92>
 800e6b2:	46b0      	mov	r8, r6
 800e6b4:	e00b      	b.n	800e6ce <ucdr_serialize_array_double+0x6e>
 800e6b6:	463a      	mov	r2, r7
 800e6b8:	68a0      	ldr	r0, [r4, #8]
 800e6ba:	f009 fb97 	bl	8017dec <memcpy>
 800e6be:	68a2      	ldr	r2, [r4, #8]
 800e6c0:	6923      	ldr	r3, [r4, #16]
 800e6c2:	443a      	add	r2, r7
 800e6c4:	443b      	add	r3, r7
 800e6c6:	eba8 0807 	sub.w	r8, r8, r7
 800e6ca:	60a2      	str	r2, [r4, #8]
 800e6cc:	6123      	str	r3, [r4, #16]
 800e6ce:	4641      	mov	r1, r8
 800e6d0:	2208      	movs	r2, #8
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f001 fdc0 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e6d8:	eba6 0108 	sub.w	r1, r6, r8
 800e6dc:	4607      	mov	r7, r0
 800e6de:	4429      	add	r1, r5
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d1e8      	bne.n	800e6b6 <ucdr_serialize_array_double+0x56>
 800e6e4:	2308      	movs	r3, #8
 800e6e6:	7da0      	ldrb	r0, [r4, #22]
 800e6e8:	7563      	strb	r3, [r4, #21]
 800e6ea:	f080 0001 	eor.w	r0, r0, #1
 800e6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f2:	4632      	mov	r2, r6
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	68a0      	ldr	r0, [r4, #8]
 800e6f8:	f009 fb78 	bl	8017dec <memcpy>
 800e6fc:	68a2      	ldr	r2, [r4, #8]
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	4432      	add	r2, r6
 800e702:	441e      	add	r6, r3
 800e704:	60a2      	str	r2, [r4, #8]
 800e706:	6126      	str	r6, [r4, #16]
 800e708:	e7ec      	b.n	800e6e4 <ucdr_serialize_array_double+0x84>
 800e70a:	bf00      	nop

0800e70c <ucdr_serialize_endian_array_double>:
 800e70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e710:	460f      	mov	r7, r1
 800e712:	2108      	movs	r1, #8
 800e714:	4605      	mov	r5, r0
 800e716:	4614      	mov	r4, r2
 800e718:	461e      	mov	r6, r3
 800e71a:	f001 fd73 	bl	8010204 <ucdr_buffer_alignment>
 800e71e:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e722:	4601      	mov	r1, r0
 800e724:	4628      	mov	r0, r5
 800e726:	f001 fdb3 	bl	8010290 <ucdr_advance_buffer>
 800e72a:	2f01      	cmp	r7, #1
 800e72c:	f885 8015 	strb.w	r8, [r5, #21]
 800e730:	d010      	beq.n	800e754 <ucdr_serialize_endian_array_double+0x48>
 800e732:	b156      	cbz	r6, 800e74a <ucdr_serialize_endian_array_double+0x3e>
 800e734:	3c08      	subs	r4, #8
 800e736:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e73a:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800e73e:	4639      	mov	r1, r7
 800e740:	4628      	mov	r0, r5
 800e742:	f001 fa97 	bl	800fc74 <ucdr_serialize_endian_double>
 800e746:	42b4      	cmp	r4, r6
 800e748:	d1f7      	bne.n	800e73a <ucdr_serialize_endian_array_double+0x2e>
 800e74a:	7da8      	ldrb	r0, [r5, #22]
 800e74c:	f080 0001 	eor.w	r0, r0, #1
 800e750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e754:	00f6      	lsls	r6, r6, #3
 800e756:	4631      	mov	r1, r6
 800e758:	4628      	mov	r0, r5
 800e75a:	f001 fcf5 	bl	8010148 <ucdr_check_buffer_available_for>
 800e75e:	b9f8      	cbnz	r0, 800e7a0 <ucdr_serialize_endian_array_double+0x94>
 800e760:	46b0      	mov	r8, r6
 800e762:	e00b      	b.n	800e77c <ucdr_serialize_endian_array_double+0x70>
 800e764:	463a      	mov	r2, r7
 800e766:	68a8      	ldr	r0, [r5, #8]
 800e768:	f009 fb40 	bl	8017dec <memcpy>
 800e76c:	68aa      	ldr	r2, [r5, #8]
 800e76e:	692b      	ldr	r3, [r5, #16]
 800e770:	443a      	add	r2, r7
 800e772:	443b      	add	r3, r7
 800e774:	eba8 0807 	sub.w	r8, r8, r7
 800e778:	60aa      	str	r2, [r5, #8]
 800e77a:	612b      	str	r3, [r5, #16]
 800e77c:	4641      	mov	r1, r8
 800e77e:	2208      	movs	r2, #8
 800e780:	4628      	mov	r0, r5
 800e782:	f001 fd69 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e786:	eba6 0108 	sub.w	r1, r6, r8
 800e78a:	4607      	mov	r7, r0
 800e78c:	4421      	add	r1, r4
 800e78e:	2800      	cmp	r0, #0
 800e790:	d1e8      	bne.n	800e764 <ucdr_serialize_endian_array_double+0x58>
 800e792:	2308      	movs	r3, #8
 800e794:	7da8      	ldrb	r0, [r5, #22]
 800e796:	756b      	strb	r3, [r5, #21]
 800e798:	f080 0001 	eor.w	r0, r0, #1
 800e79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7a0:	4632      	mov	r2, r6
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	68a8      	ldr	r0, [r5, #8]
 800e7a6:	f009 fb21 	bl	8017dec <memcpy>
 800e7aa:	68aa      	ldr	r2, [r5, #8]
 800e7ac:	692b      	ldr	r3, [r5, #16]
 800e7ae:	4432      	add	r2, r6
 800e7b0:	441e      	add	r6, r3
 800e7b2:	60aa      	str	r2, [r5, #8]
 800e7b4:	612e      	str	r6, [r5, #16]
 800e7b6:	e7ec      	b.n	800e792 <ucdr_serialize_endian_array_double+0x86>

0800e7b8 <ucdr_deserialize_array_double>:
 800e7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7bc:	460d      	mov	r5, r1
 800e7be:	2108      	movs	r1, #8
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	4616      	mov	r6, r2
 800e7c4:	f001 fd1e 	bl	8010204 <ucdr_buffer_alignment>
 800e7c8:	4601      	mov	r1, r0
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	7d67      	ldrb	r7, [r4, #21]
 800e7ce:	f001 fd5f 	bl	8010290 <ucdr_advance_buffer>
 800e7d2:	7d21      	ldrb	r1, [r4, #20]
 800e7d4:	7567      	strb	r7, [r4, #21]
 800e7d6:	2901      	cmp	r1, #1
 800e7d8:	d010      	beq.n	800e7fc <ucdr_deserialize_array_double+0x44>
 800e7da:	b156      	cbz	r6, 800e7f2 <ucdr_deserialize_array_double+0x3a>
 800e7dc:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800e7e0:	e000      	b.n	800e7e4 <ucdr_deserialize_array_double+0x2c>
 800e7e2:	7d21      	ldrb	r1, [r4, #20]
 800e7e4:	462a      	mov	r2, r5
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	3508      	adds	r5, #8
 800e7ea:	f001 fbdb 	bl	800ffa4 <ucdr_deserialize_endian_double>
 800e7ee:	42ae      	cmp	r6, r5
 800e7f0:	d1f7      	bne.n	800e7e2 <ucdr_deserialize_array_double+0x2a>
 800e7f2:	7da0      	ldrb	r0, [r4, #22]
 800e7f4:	f080 0001 	eor.w	r0, r0, #1
 800e7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7fc:	00f6      	lsls	r6, r6, #3
 800e7fe:	4631      	mov	r1, r6
 800e800:	4620      	mov	r0, r4
 800e802:	f001 fca1 	bl	8010148 <ucdr_check_buffer_available_for>
 800e806:	b9f8      	cbnz	r0, 800e848 <ucdr_deserialize_array_double+0x90>
 800e808:	46b0      	mov	r8, r6
 800e80a:	e00b      	b.n	800e824 <ucdr_deserialize_array_double+0x6c>
 800e80c:	463a      	mov	r2, r7
 800e80e:	68a1      	ldr	r1, [r4, #8]
 800e810:	f009 faec 	bl	8017dec <memcpy>
 800e814:	68a2      	ldr	r2, [r4, #8]
 800e816:	6923      	ldr	r3, [r4, #16]
 800e818:	443a      	add	r2, r7
 800e81a:	443b      	add	r3, r7
 800e81c:	eba8 0807 	sub.w	r8, r8, r7
 800e820:	60a2      	str	r2, [r4, #8]
 800e822:	6123      	str	r3, [r4, #16]
 800e824:	2208      	movs	r2, #8
 800e826:	4641      	mov	r1, r8
 800e828:	4620      	mov	r0, r4
 800e82a:	f001 fd15 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e82e:	4607      	mov	r7, r0
 800e830:	eba6 0008 	sub.w	r0, r6, r8
 800e834:	4428      	add	r0, r5
 800e836:	2f00      	cmp	r7, #0
 800e838:	d1e8      	bne.n	800e80c <ucdr_deserialize_array_double+0x54>
 800e83a:	2308      	movs	r3, #8
 800e83c:	7da0      	ldrb	r0, [r4, #22]
 800e83e:	7563      	strb	r3, [r4, #21]
 800e840:	f080 0001 	eor.w	r0, r0, #1
 800e844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e848:	4632      	mov	r2, r6
 800e84a:	4628      	mov	r0, r5
 800e84c:	68a1      	ldr	r1, [r4, #8]
 800e84e:	f009 facd 	bl	8017dec <memcpy>
 800e852:	68a2      	ldr	r2, [r4, #8]
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	4432      	add	r2, r6
 800e858:	441e      	add	r6, r3
 800e85a:	60a2      	str	r2, [r4, #8]
 800e85c:	6126      	str	r6, [r4, #16]
 800e85e:	e7ec      	b.n	800e83a <ucdr_deserialize_array_double+0x82>

0800e860 <ucdr_deserialize_endian_array_double>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	460f      	mov	r7, r1
 800e866:	2108      	movs	r1, #8
 800e868:	4605      	mov	r5, r0
 800e86a:	4614      	mov	r4, r2
 800e86c:	461e      	mov	r6, r3
 800e86e:	f001 fcc9 	bl	8010204 <ucdr_buffer_alignment>
 800e872:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e876:	4601      	mov	r1, r0
 800e878:	4628      	mov	r0, r5
 800e87a:	f001 fd09 	bl	8010290 <ucdr_advance_buffer>
 800e87e:	2f01      	cmp	r7, #1
 800e880:	f885 8015 	strb.w	r8, [r5, #21]
 800e884:	d00f      	beq.n	800e8a6 <ucdr_deserialize_endian_array_double+0x46>
 800e886:	b14e      	cbz	r6, 800e89c <ucdr_deserialize_endian_array_double+0x3c>
 800e888:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e88c:	4622      	mov	r2, r4
 800e88e:	4639      	mov	r1, r7
 800e890:	4628      	mov	r0, r5
 800e892:	3408      	adds	r4, #8
 800e894:	f001 fb86 	bl	800ffa4 <ucdr_deserialize_endian_double>
 800e898:	42a6      	cmp	r6, r4
 800e89a:	d1f7      	bne.n	800e88c <ucdr_deserialize_endian_array_double+0x2c>
 800e89c:	7da8      	ldrb	r0, [r5, #22]
 800e89e:	f080 0001 	eor.w	r0, r0, #1
 800e8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a6:	00f6      	lsls	r6, r6, #3
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f001 fc4c 	bl	8010148 <ucdr_check_buffer_available_for>
 800e8b0:	b9f8      	cbnz	r0, 800e8f2 <ucdr_deserialize_endian_array_double+0x92>
 800e8b2:	46b0      	mov	r8, r6
 800e8b4:	e00b      	b.n	800e8ce <ucdr_deserialize_endian_array_double+0x6e>
 800e8b6:	463a      	mov	r2, r7
 800e8b8:	68a9      	ldr	r1, [r5, #8]
 800e8ba:	f009 fa97 	bl	8017dec <memcpy>
 800e8be:	68aa      	ldr	r2, [r5, #8]
 800e8c0:	692b      	ldr	r3, [r5, #16]
 800e8c2:	443a      	add	r2, r7
 800e8c4:	443b      	add	r3, r7
 800e8c6:	eba8 0807 	sub.w	r8, r8, r7
 800e8ca:	60aa      	str	r2, [r5, #8]
 800e8cc:	612b      	str	r3, [r5, #16]
 800e8ce:	2208      	movs	r2, #8
 800e8d0:	4641      	mov	r1, r8
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	f001 fcc0 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 800e8d8:	4607      	mov	r7, r0
 800e8da:	eba6 0008 	sub.w	r0, r6, r8
 800e8de:	4420      	add	r0, r4
 800e8e0:	2f00      	cmp	r7, #0
 800e8e2:	d1e8      	bne.n	800e8b6 <ucdr_deserialize_endian_array_double+0x56>
 800e8e4:	2308      	movs	r3, #8
 800e8e6:	7da8      	ldrb	r0, [r5, #22]
 800e8e8:	756b      	strb	r3, [r5, #21]
 800e8ea:	f080 0001 	eor.w	r0, r0, #1
 800e8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f2:	4632      	mov	r2, r6
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	68a9      	ldr	r1, [r5, #8]
 800e8f8:	f009 fa78 	bl	8017dec <memcpy>
 800e8fc:	68aa      	ldr	r2, [r5, #8]
 800e8fe:	692b      	ldr	r3, [r5, #16]
 800e900:	4432      	add	r2, r6
 800e902:	441e      	add	r6, r3
 800e904:	60aa      	str	r2, [r5, #8]
 800e906:	612e      	str	r6, [r5, #16]
 800e908:	e7ec      	b.n	800e8e4 <ucdr_deserialize_endian_array_double+0x84>
 800e90a:	bf00      	nop

0800e90c <ucdr_serialize_bool>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	460d      	mov	r5, r1
 800e910:	2101      	movs	r1, #1
 800e912:	4604      	mov	r4, r0
 800e914:	f001 fc24 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800e918:	b148      	cbz	r0, 800e92e <ucdr_serialize_bool+0x22>
 800e91a:	2101      	movs	r1, #1
 800e91c:	68a3      	ldr	r3, [r4, #8]
 800e91e:	701d      	strb	r5, [r3, #0]
 800e920:	68a2      	ldr	r2, [r4, #8]
 800e922:	6923      	ldr	r3, [r4, #16]
 800e924:	440a      	add	r2, r1
 800e926:	440b      	add	r3, r1
 800e928:	60a2      	str	r2, [r4, #8]
 800e92a:	6123      	str	r3, [r4, #16]
 800e92c:	7561      	strb	r1, [r4, #21]
 800e92e:	7da0      	ldrb	r0, [r4, #22]
 800e930:	f080 0001 	eor.w	r0, r0, #1
 800e934:	bd38      	pop	{r3, r4, r5, pc}
 800e936:	bf00      	nop

0800e938 <ucdr_deserialize_bool>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	460d      	mov	r5, r1
 800e93c:	2101      	movs	r1, #1
 800e93e:	4604      	mov	r4, r0
 800e940:	f001 fc0e 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800e944:	b160      	cbz	r0, 800e960 <ucdr_deserialize_bool+0x28>
 800e946:	68a2      	ldr	r2, [r4, #8]
 800e948:	2001      	movs	r0, #1
 800e94a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	3900      	subs	r1, #0
 800e952:	bf18      	it	ne
 800e954:	2101      	movne	r1, #1
 800e956:	4403      	add	r3, r0
 800e958:	7029      	strb	r1, [r5, #0]
 800e95a:	60a2      	str	r2, [r4, #8]
 800e95c:	6123      	str	r3, [r4, #16]
 800e95e:	7560      	strb	r0, [r4, #21]
 800e960:	7da0      	ldrb	r0, [r4, #22]
 800e962:	f080 0001 	eor.w	r0, r0, #1
 800e966:	bd38      	pop	{r3, r4, r5, pc}

0800e968 <ucdr_serialize_uint8_t>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	460d      	mov	r5, r1
 800e96c:	2101      	movs	r1, #1
 800e96e:	4604      	mov	r4, r0
 800e970:	f001 fbf6 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800e974:	b148      	cbz	r0, 800e98a <ucdr_serialize_uint8_t+0x22>
 800e976:	2101      	movs	r1, #1
 800e978:	68a3      	ldr	r3, [r4, #8]
 800e97a:	701d      	strb	r5, [r3, #0]
 800e97c:	68a2      	ldr	r2, [r4, #8]
 800e97e:	6923      	ldr	r3, [r4, #16]
 800e980:	440a      	add	r2, r1
 800e982:	440b      	add	r3, r1
 800e984:	60a2      	str	r2, [r4, #8]
 800e986:	6123      	str	r3, [r4, #16]
 800e988:	7561      	strb	r1, [r4, #21]
 800e98a:	7da0      	ldrb	r0, [r4, #22]
 800e98c:	f080 0001 	eor.w	r0, r0, #1
 800e990:	bd38      	pop	{r3, r4, r5, pc}
 800e992:	bf00      	nop

0800e994 <ucdr_deserialize_uint8_t>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	460d      	mov	r5, r1
 800e998:	2101      	movs	r1, #1
 800e99a:	4604      	mov	r4, r0
 800e99c:	f001 fbe0 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800e9a0:	b150      	cbz	r0, 800e9b8 <ucdr_deserialize_uint8_t+0x24>
 800e9a2:	2101      	movs	r1, #1
 800e9a4:	68a3      	ldr	r3, [r4, #8]
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	702b      	strb	r3, [r5, #0]
 800e9aa:	68a2      	ldr	r2, [r4, #8]
 800e9ac:	6923      	ldr	r3, [r4, #16]
 800e9ae:	440a      	add	r2, r1
 800e9b0:	440b      	add	r3, r1
 800e9b2:	60a2      	str	r2, [r4, #8]
 800e9b4:	6123      	str	r3, [r4, #16]
 800e9b6:	7561      	strb	r1, [r4, #21]
 800e9b8:	7da0      	ldrb	r0, [r4, #22]
 800e9ba:	f080 0001 	eor.w	r0, r0, #1
 800e9be:	bd38      	pop	{r3, r4, r5, pc}

0800e9c0 <ucdr_serialize_uint16_t>:
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c6:	2102      	movs	r1, #2
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e9d0:	f001 fc18 	bl	8010204 <ucdr_buffer_alignment>
 800e9d4:	4601      	mov	r1, r0
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	7d67      	ldrb	r7, [r4, #21]
 800e9da:	f001 fc59 	bl	8010290 <ucdr_advance_buffer>
 800e9de:	4620      	mov	r0, r4
 800e9e0:	2102      	movs	r1, #2
 800e9e2:	f001 fbb1 	bl	8010148 <ucdr_check_buffer_available_for>
 800e9e6:	bb78      	cbnz	r0, 800ea48 <ucdr_serialize_uint16_t+0x88>
 800e9e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e9ec:	42ab      	cmp	r3, r5
 800e9ee:	d926      	bls.n	800ea3e <ucdr_serialize_uint16_t+0x7e>
 800e9f0:	6922      	ldr	r2, [r4, #16]
 800e9f2:	1b5e      	subs	r6, r3, r5
 800e9f4:	4432      	add	r2, r6
 800e9f6:	f1c6 0802 	rsb	r8, r6, #2
 800e9fa:	4641      	mov	r1, r8
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	60a3      	str	r3, [r4, #8]
 800ea00:	6122      	str	r2, [r4, #16]
 800ea02:	f001 fbad 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	d03b      	beq.n	800ea82 <ucdr_serialize_uint16_t+0xc2>
 800ea0a:	7d23      	ldrb	r3, [r4, #20]
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d04a      	beq.n	800eaa6 <ucdr_serialize_uint16_t+0xe6>
 800ea10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea14:	702b      	strb	r3, [r5, #0]
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	d040      	beq.n	800ea9c <ucdr_serialize_uint16_t+0xdc>
 800ea1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea1e:	706b      	strb	r3, [r5, #1]
 800ea20:	2102      	movs	r1, #2
 800ea22:	6923      	ldr	r3, [r4, #16]
 800ea24:	68a2      	ldr	r2, [r4, #8]
 800ea26:	7da0      	ldrb	r0, [r4, #22]
 800ea28:	440b      	add	r3, r1
 800ea2a:	1b9e      	subs	r6, r3, r6
 800ea2c:	4442      	add	r2, r8
 800ea2e:	f080 0001 	eor.w	r0, r0, #1
 800ea32:	6126      	str	r6, [r4, #16]
 800ea34:	60a2      	str	r2, [r4, #8]
 800ea36:	7561      	strb	r1, [r4, #21]
 800ea38:	b002      	add	sp, #8
 800ea3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea3e:	2102      	movs	r1, #2
 800ea40:	4620      	mov	r0, r4
 800ea42:	f001 fb8d 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ea46:	b190      	cbz	r0, 800ea6e <ucdr_serialize_uint16_t+0xae>
 800ea48:	7d23      	ldrb	r3, [r4, #20]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	68a3      	ldr	r3, [r4, #8]
 800ea4e:	d014      	beq.n	800ea7a <ucdr_serialize_uint16_t+0xba>
 800ea50:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea58:	7019      	strb	r1, [r3, #0]
 800ea5a:	68a3      	ldr	r3, [r4, #8]
 800ea5c:	705a      	strb	r2, [r3, #1]
 800ea5e:	2102      	movs	r1, #2
 800ea60:	68a2      	ldr	r2, [r4, #8]
 800ea62:	6923      	ldr	r3, [r4, #16]
 800ea64:	440a      	add	r2, r1
 800ea66:	440b      	add	r3, r1
 800ea68:	60a2      	str	r2, [r4, #8]
 800ea6a:	6123      	str	r3, [r4, #16]
 800ea6c:	7561      	strb	r1, [r4, #21]
 800ea6e:	7da0      	ldrb	r0, [r4, #22]
 800ea70:	f080 0001 	eor.w	r0, r0, #1
 800ea74:	b002      	add	sp, #8
 800ea76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ea7e:	801a      	strh	r2, [r3, #0]
 800ea80:	e7ed      	b.n	800ea5e <ucdr_serialize_uint16_t+0x9e>
 800ea82:	68a2      	ldr	r2, [r4, #8]
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	7da0      	ldrb	r0, [r4, #22]
 800ea88:	1b92      	subs	r2, r2, r6
 800ea8a:	f080 0001 	eor.w	r0, r0, #1
 800ea8e:	1b9e      	subs	r6, r3, r6
 800ea90:	7567      	strb	r7, [r4, #21]
 800ea92:	60a2      	str	r2, [r4, #8]
 800ea94:	6126      	str	r6, [r4, #16]
 800ea96:	b002      	add	sp, #8
 800ea98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9c:	68a3      	ldr	r3, [r4, #8]
 800ea9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eaa2:	701a      	strb	r2, [r3, #0]
 800eaa4:	e7bc      	b.n	800ea20 <ucdr_serialize_uint16_t+0x60>
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f10d 0506 	add.w	r5, sp, #6
 800eaac:	4629      	mov	r1, r5
 800eaae:	4632      	mov	r2, r6
 800eab0:	f009 f99c 	bl	8017dec <memcpy>
 800eab4:	4642      	mov	r2, r8
 800eab6:	68a0      	ldr	r0, [r4, #8]
 800eab8:	19a9      	adds	r1, r5, r6
 800eaba:	f009 f997 	bl	8017dec <memcpy>
 800eabe:	e7af      	b.n	800ea20 <ucdr_serialize_uint16_t+0x60>

0800eac0 <ucdr_serialize_endian_uint16_t>:
 800eac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eac4:	460d      	mov	r5, r1
 800eac6:	b083      	sub	sp, #12
 800eac8:	2102      	movs	r1, #2
 800eaca:	4604      	mov	r4, r0
 800eacc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ead0:	f001 fb98 	bl	8010204 <ucdr_buffer_alignment>
 800ead4:	4601      	mov	r1, r0
 800ead6:	4620      	mov	r0, r4
 800ead8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eadc:	f001 fbd8 	bl	8010290 <ucdr_advance_buffer>
 800eae0:	4620      	mov	r0, r4
 800eae2:	2102      	movs	r1, #2
 800eae4:	f001 fb30 	bl	8010148 <ucdr_check_buffer_available_for>
 800eae8:	bb70      	cbnz	r0, 800eb48 <ucdr_serialize_endian_uint16_t+0x88>
 800eaea:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800eaee:	42b3      	cmp	r3, r6
 800eaf0:	d925      	bls.n	800eb3e <ucdr_serialize_endian_uint16_t+0x7e>
 800eaf2:	6922      	ldr	r2, [r4, #16]
 800eaf4:	1b9f      	subs	r7, r3, r6
 800eaf6:	443a      	add	r2, r7
 800eaf8:	f1c7 0902 	rsb	r9, r7, #2
 800eafc:	4649      	mov	r1, r9
 800eafe:	4620      	mov	r0, r4
 800eb00:	60a3      	str	r3, [r4, #8]
 800eb02:	6122      	str	r2, [r4, #16]
 800eb04:	f001 fb2c 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d039      	beq.n	800eb80 <ucdr_serialize_endian_uint16_t+0xc0>
 800eb0c:	2d01      	cmp	r5, #1
 800eb0e:	d04a      	beq.n	800eba6 <ucdr_serialize_endian_uint16_t+0xe6>
 800eb10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb14:	7033      	strb	r3, [r6, #0]
 800eb16:	2f00      	cmp	r7, #0
 800eb18:	d040      	beq.n	800eb9c <ucdr_serialize_endian_uint16_t+0xdc>
 800eb1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb1e:	7073      	strb	r3, [r6, #1]
 800eb20:	2102      	movs	r1, #2
 800eb22:	6923      	ldr	r3, [r4, #16]
 800eb24:	68a2      	ldr	r2, [r4, #8]
 800eb26:	7da0      	ldrb	r0, [r4, #22]
 800eb28:	440b      	add	r3, r1
 800eb2a:	1bdf      	subs	r7, r3, r7
 800eb2c:	444a      	add	r2, r9
 800eb2e:	f080 0001 	eor.w	r0, r0, #1
 800eb32:	6127      	str	r7, [r4, #16]
 800eb34:	60a2      	str	r2, [r4, #8]
 800eb36:	7561      	strb	r1, [r4, #21]
 800eb38:	b003      	add	sp, #12
 800eb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb3e:	2102      	movs	r1, #2
 800eb40:	4620      	mov	r0, r4
 800eb42:	f001 fb0d 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800eb46:	b188      	cbz	r0, 800eb6c <ucdr_serialize_endian_uint16_t+0xac>
 800eb48:	2d01      	cmp	r5, #1
 800eb4a:	68a3      	ldr	r3, [r4, #8]
 800eb4c:	d014      	beq.n	800eb78 <ucdr_serialize_endian_uint16_t+0xb8>
 800eb4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eb52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb56:	7019      	strb	r1, [r3, #0]
 800eb58:	68a3      	ldr	r3, [r4, #8]
 800eb5a:	705a      	strb	r2, [r3, #1]
 800eb5c:	2102      	movs	r1, #2
 800eb5e:	68a2      	ldr	r2, [r4, #8]
 800eb60:	6923      	ldr	r3, [r4, #16]
 800eb62:	440a      	add	r2, r1
 800eb64:	440b      	add	r3, r1
 800eb66:	60a2      	str	r2, [r4, #8]
 800eb68:	6123      	str	r3, [r4, #16]
 800eb6a:	7561      	strb	r1, [r4, #21]
 800eb6c:	7da0      	ldrb	r0, [r4, #22]
 800eb6e:	f080 0001 	eor.w	r0, r0, #1
 800eb72:	b003      	add	sp, #12
 800eb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eb7c:	801a      	strh	r2, [r3, #0]
 800eb7e:	e7ed      	b.n	800eb5c <ucdr_serialize_endian_uint16_t+0x9c>
 800eb80:	68a2      	ldr	r2, [r4, #8]
 800eb82:	6923      	ldr	r3, [r4, #16]
 800eb84:	7da0      	ldrb	r0, [r4, #22]
 800eb86:	1bd2      	subs	r2, r2, r7
 800eb88:	f080 0001 	eor.w	r0, r0, #1
 800eb8c:	1bdf      	subs	r7, r3, r7
 800eb8e:	f884 8015 	strb.w	r8, [r4, #21]
 800eb92:	60a2      	str	r2, [r4, #8]
 800eb94:	6127      	str	r7, [r4, #16]
 800eb96:	b003      	add	sp, #12
 800eb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb9c:	68a3      	ldr	r3, [r4, #8]
 800eb9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eba2:	701a      	strb	r2, [r3, #0]
 800eba4:	e7bc      	b.n	800eb20 <ucdr_serialize_endian_uint16_t+0x60>
 800eba6:	f10d 0506 	add.w	r5, sp, #6
 800ebaa:	4629      	mov	r1, r5
 800ebac:	463a      	mov	r2, r7
 800ebae:	4630      	mov	r0, r6
 800ebb0:	f009 f91c 	bl	8017dec <memcpy>
 800ebb4:	464a      	mov	r2, r9
 800ebb6:	68a0      	ldr	r0, [r4, #8]
 800ebb8:	19e9      	adds	r1, r5, r7
 800ebba:	f009 f917 	bl	8017dec <memcpy>
 800ebbe:	e7af      	b.n	800eb20 <ucdr_serialize_endian_uint16_t+0x60>

0800ebc0 <ucdr_deserialize_uint16_t>:
 800ebc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebc4:	460d      	mov	r5, r1
 800ebc6:	2102      	movs	r1, #2
 800ebc8:	4604      	mov	r4, r0
 800ebca:	f001 fb1b 	bl	8010204 <ucdr_buffer_alignment>
 800ebce:	4601      	mov	r1, r0
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ebd6:	f001 fb5b 	bl	8010290 <ucdr_advance_buffer>
 800ebda:	4620      	mov	r0, r4
 800ebdc:	2102      	movs	r1, #2
 800ebde:	f001 fab3 	bl	8010148 <ucdr_check_buffer_available_for>
 800ebe2:	bb60      	cbnz	r0, 800ec3e <ucdr_deserialize_uint16_t+0x7e>
 800ebe4:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800ebe8:	42b3      	cmp	r3, r6
 800ebea:	d923      	bls.n	800ec34 <ucdr_deserialize_uint16_t+0x74>
 800ebec:	6922      	ldr	r2, [r4, #16]
 800ebee:	1b9f      	subs	r7, r3, r6
 800ebf0:	443a      	add	r2, r7
 800ebf2:	f1c7 0902 	rsb	r9, r7, #2
 800ebf6:	4649      	mov	r1, r9
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	60a3      	str	r3, [r4, #8]
 800ebfc:	6122      	str	r2, [r4, #16]
 800ebfe:	f001 faaf 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d034      	beq.n	800ec70 <ucdr_deserialize_uint16_t+0xb0>
 800ec06:	7d23      	ldrb	r3, [r4, #20]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d042      	beq.n	800ec92 <ucdr_deserialize_uint16_t+0xd2>
 800ec0c:	7873      	ldrb	r3, [r6, #1]
 800ec0e:	702b      	strb	r3, [r5, #0]
 800ec10:	2f00      	cmp	r7, #0
 800ec12:	d03a      	beq.n	800ec8a <ucdr_deserialize_uint16_t+0xca>
 800ec14:	7833      	ldrb	r3, [r6, #0]
 800ec16:	706b      	strb	r3, [r5, #1]
 800ec18:	2102      	movs	r1, #2
 800ec1a:	6923      	ldr	r3, [r4, #16]
 800ec1c:	68a2      	ldr	r2, [r4, #8]
 800ec1e:	7da0      	ldrb	r0, [r4, #22]
 800ec20:	440b      	add	r3, r1
 800ec22:	1bdf      	subs	r7, r3, r7
 800ec24:	444a      	add	r2, r9
 800ec26:	7561      	strb	r1, [r4, #21]
 800ec28:	6127      	str	r7, [r4, #16]
 800ec2a:	60a2      	str	r2, [r4, #8]
 800ec2c:	f080 0001 	eor.w	r0, r0, #1
 800ec30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec34:	2102      	movs	r1, #2
 800ec36:	4620      	mov	r0, r4
 800ec38:	f001 fa92 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ec3c:	b180      	cbz	r0, 800ec60 <ucdr_deserialize_uint16_t+0xa0>
 800ec3e:	7d23      	ldrb	r3, [r4, #20]
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	68a3      	ldr	r3, [r4, #8]
 800ec44:	d011      	beq.n	800ec6a <ucdr_deserialize_uint16_t+0xaa>
 800ec46:	785b      	ldrb	r3, [r3, #1]
 800ec48:	702b      	strb	r3, [r5, #0]
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	706b      	strb	r3, [r5, #1]
 800ec50:	2102      	movs	r1, #2
 800ec52:	68a2      	ldr	r2, [r4, #8]
 800ec54:	6923      	ldr	r3, [r4, #16]
 800ec56:	440a      	add	r2, r1
 800ec58:	440b      	add	r3, r1
 800ec5a:	60a2      	str	r2, [r4, #8]
 800ec5c:	6123      	str	r3, [r4, #16]
 800ec5e:	7561      	strb	r1, [r4, #21]
 800ec60:	7da0      	ldrb	r0, [r4, #22]
 800ec62:	f080 0001 	eor.w	r0, r0, #1
 800ec66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec6a:	881b      	ldrh	r3, [r3, #0]
 800ec6c:	802b      	strh	r3, [r5, #0]
 800ec6e:	e7ef      	b.n	800ec50 <ucdr_deserialize_uint16_t+0x90>
 800ec70:	68a2      	ldr	r2, [r4, #8]
 800ec72:	6923      	ldr	r3, [r4, #16]
 800ec74:	7da0      	ldrb	r0, [r4, #22]
 800ec76:	1bd2      	subs	r2, r2, r7
 800ec78:	f884 8015 	strb.w	r8, [r4, #21]
 800ec7c:	1bdf      	subs	r7, r3, r7
 800ec7e:	60a2      	str	r2, [r4, #8]
 800ec80:	6127      	str	r7, [r4, #16]
 800ec82:	f080 0001 	eor.w	r0, r0, #1
 800ec86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec8a:	68a3      	ldr	r3, [r4, #8]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	706b      	strb	r3, [r5, #1]
 800ec90:	e7c2      	b.n	800ec18 <ucdr_deserialize_uint16_t+0x58>
 800ec92:	4631      	mov	r1, r6
 800ec94:	463a      	mov	r2, r7
 800ec96:	4628      	mov	r0, r5
 800ec98:	f009 f8a8 	bl	8017dec <memcpy>
 800ec9c:	464a      	mov	r2, r9
 800ec9e:	68a1      	ldr	r1, [r4, #8]
 800eca0:	19e8      	adds	r0, r5, r7
 800eca2:	f009 f8a3 	bl	8017dec <memcpy>
 800eca6:	e7b7      	b.n	800ec18 <ucdr_deserialize_uint16_t+0x58>

0800eca8 <ucdr_deserialize_endian_uint16_t>:
 800eca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecac:	460e      	mov	r6, r1
 800ecae:	2102      	movs	r1, #2
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	4615      	mov	r5, r2
 800ecb4:	f001 faa6 	bl	8010204 <ucdr_buffer_alignment>
 800ecb8:	4601      	mov	r1, r0
 800ecba:	4620      	mov	r0, r4
 800ecbc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ecc0:	f001 fae6 	bl	8010290 <ucdr_advance_buffer>
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	2102      	movs	r1, #2
 800ecc8:	f001 fa3e 	bl	8010148 <ucdr_check_buffer_available_for>
 800eccc:	bb70      	cbnz	r0, 800ed2c <ucdr_deserialize_endian_uint16_t+0x84>
 800ecce:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ecd2:	42bb      	cmp	r3, r7
 800ecd4:	d925      	bls.n	800ed22 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ecd6:	6922      	ldr	r2, [r4, #16]
 800ecd8:	eba3 0807 	sub.w	r8, r3, r7
 800ecdc:	4442      	add	r2, r8
 800ecde:	f1c8 0a02 	rsb	sl, r8, #2
 800ece2:	4651      	mov	r1, sl
 800ece4:	4620      	mov	r0, r4
 800ece6:	60a3      	str	r3, [r4, #8]
 800ece8:	6122      	str	r2, [r4, #16]
 800ecea:	f001 fa39 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d034      	beq.n	800ed5c <ucdr_deserialize_endian_uint16_t+0xb4>
 800ecf2:	2e01      	cmp	r6, #1
 800ecf4:	d045      	beq.n	800ed82 <ucdr_deserialize_endian_uint16_t+0xda>
 800ecf6:	787b      	ldrb	r3, [r7, #1]
 800ecf8:	702b      	strb	r3, [r5, #0]
 800ecfa:	f1b8 0f00 	cmp.w	r8, #0
 800ecfe:	d03c      	beq.n	800ed7a <ucdr_deserialize_endian_uint16_t+0xd2>
 800ed00:	783b      	ldrb	r3, [r7, #0]
 800ed02:	706b      	strb	r3, [r5, #1]
 800ed04:	2102      	movs	r1, #2
 800ed06:	6923      	ldr	r3, [r4, #16]
 800ed08:	68a2      	ldr	r2, [r4, #8]
 800ed0a:	7da0      	ldrb	r0, [r4, #22]
 800ed0c:	440b      	add	r3, r1
 800ed0e:	eba3 0308 	sub.w	r3, r3, r8
 800ed12:	4452      	add	r2, sl
 800ed14:	7561      	strb	r1, [r4, #21]
 800ed16:	6123      	str	r3, [r4, #16]
 800ed18:	60a2      	str	r2, [r4, #8]
 800ed1a:	f080 0001 	eor.w	r0, r0, #1
 800ed1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed22:	2102      	movs	r1, #2
 800ed24:	4620      	mov	r0, r4
 800ed26:	f001 fa1b 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ed2a:	b178      	cbz	r0, 800ed4c <ucdr_deserialize_endian_uint16_t+0xa4>
 800ed2c:	2e01      	cmp	r6, #1
 800ed2e:	68a3      	ldr	r3, [r4, #8]
 800ed30:	d011      	beq.n	800ed56 <ucdr_deserialize_endian_uint16_t+0xae>
 800ed32:	785b      	ldrb	r3, [r3, #1]
 800ed34:	702b      	strb	r3, [r5, #0]
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	706b      	strb	r3, [r5, #1]
 800ed3c:	2102      	movs	r1, #2
 800ed3e:	68a2      	ldr	r2, [r4, #8]
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	440a      	add	r2, r1
 800ed44:	440b      	add	r3, r1
 800ed46:	60a2      	str	r2, [r4, #8]
 800ed48:	6123      	str	r3, [r4, #16]
 800ed4a:	7561      	strb	r1, [r4, #21]
 800ed4c:	7da0      	ldrb	r0, [r4, #22]
 800ed4e:	f080 0001 	eor.w	r0, r0, #1
 800ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed56:	881b      	ldrh	r3, [r3, #0]
 800ed58:	802b      	strh	r3, [r5, #0]
 800ed5a:	e7ef      	b.n	800ed3c <ucdr_deserialize_endian_uint16_t+0x94>
 800ed5c:	68a2      	ldr	r2, [r4, #8]
 800ed5e:	6923      	ldr	r3, [r4, #16]
 800ed60:	7da0      	ldrb	r0, [r4, #22]
 800ed62:	eba2 0208 	sub.w	r2, r2, r8
 800ed66:	eba3 0308 	sub.w	r3, r3, r8
 800ed6a:	f884 9015 	strb.w	r9, [r4, #21]
 800ed6e:	60a2      	str	r2, [r4, #8]
 800ed70:	6123      	str	r3, [r4, #16]
 800ed72:	f080 0001 	eor.w	r0, r0, #1
 800ed76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed7a:	68a3      	ldr	r3, [r4, #8]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	706b      	strb	r3, [r5, #1]
 800ed80:	e7c0      	b.n	800ed04 <ucdr_deserialize_endian_uint16_t+0x5c>
 800ed82:	4639      	mov	r1, r7
 800ed84:	4642      	mov	r2, r8
 800ed86:	4628      	mov	r0, r5
 800ed88:	f009 f830 	bl	8017dec <memcpy>
 800ed8c:	4652      	mov	r2, sl
 800ed8e:	68a1      	ldr	r1, [r4, #8]
 800ed90:	eb05 0008 	add.w	r0, r5, r8
 800ed94:	f009 f82a 	bl	8017dec <memcpy>
 800ed98:	e7b4      	b.n	800ed04 <ucdr_deserialize_endian_uint16_t+0x5c>
 800ed9a:	bf00      	nop

0800ed9c <ucdr_serialize_uint32_t>:
 800ed9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	9101      	str	r1, [sp, #4]
 800eda4:	2104      	movs	r1, #4
 800eda6:	4604      	mov	r4, r0
 800eda8:	f001 fa2c 	bl	8010204 <ucdr_buffer_alignment>
 800edac:	4601      	mov	r1, r0
 800edae:	4620      	mov	r0, r4
 800edb0:	7d67      	ldrb	r7, [r4, #21]
 800edb2:	f001 fa6d 	bl	8010290 <ucdr_advance_buffer>
 800edb6:	4620      	mov	r0, r4
 800edb8:	2104      	movs	r1, #4
 800edba:	f001 f9c5 	bl	8010148 <ucdr_check_buffer_available_for>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d139      	bne.n	800ee36 <ucdr_serialize_uint32_t+0x9a>
 800edc2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800edc6:	42ab      	cmp	r3, r5
 800edc8:	d930      	bls.n	800ee2c <ucdr_serialize_uint32_t+0x90>
 800edca:	6922      	ldr	r2, [r4, #16]
 800edcc:	1b5e      	subs	r6, r3, r5
 800edce:	4432      	add	r2, r6
 800edd0:	f1c6 0804 	rsb	r8, r6, #4
 800edd4:	4641      	mov	r1, r8
 800edd6:	4620      	mov	r0, r4
 800edd8:	60a3      	str	r3, [r4, #8]
 800edda:	6122      	str	r2, [r4, #16]
 800eddc:	f001 f9c0 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	d04c      	beq.n	800ee7e <ucdr_serialize_uint32_t+0xe2>
 800ede4:	7d23      	ldrb	r3, [r4, #20]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d063      	beq.n	800eeb2 <ucdr_serialize_uint32_t+0x116>
 800edea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800edee:	702b      	strb	r3, [r5, #0]
 800edf0:	2e00      	cmp	r6, #0
 800edf2:	d051      	beq.n	800ee98 <ucdr_serialize_uint32_t+0xfc>
 800edf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800edf8:	2e01      	cmp	r6, #1
 800edfa:	706b      	strb	r3, [r5, #1]
 800edfc:	d050      	beq.n	800eea0 <ucdr_serialize_uint32_t+0x104>
 800edfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee02:	2e02      	cmp	r6, #2
 800ee04:	70ab      	strb	r3, [r5, #2]
 800ee06:	d04f      	beq.n	800eea8 <ucdr_serialize_uint32_t+0x10c>
 800ee08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee0c:	70eb      	strb	r3, [r5, #3]
 800ee0e:	2104      	movs	r1, #4
 800ee10:	6923      	ldr	r3, [r4, #16]
 800ee12:	68a2      	ldr	r2, [r4, #8]
 800ee14:	7da0      	ldrb	r0, [r4, #22]
 800ee16:	440b      	add	r3, r1
 800ee18:	1b9e      	subs	r6, r3, r6
 800ee1a:	4442      	add	r2, r8
 800ee1c:	f080 0001 	eor.w	r0, r0, #1
 800ee20:	6126      	str	r6, [r4, #16]
 800ee22:	60a2      	str	r2, [r4, #8]
 800ee24:	7561      	strb	r1, [r4, #21]
 800ee26:	b002      	add	sp, #8
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	2104      	movs	r1, #4
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f001 f996 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ee34:	b1d0      	cbz	r0, 800ee6c <ucdr_serialize_uint32_t+0xd0>
 800ee36:	7d23      	ldrb	r3, [r4, #20]
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	d01c      	beq.n	800ee78 <ucdr_serialize_uint32_t+0xdc>
 800ee3e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ee42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee46:	7019      	strb	r1, [r3, #0]
 800ee48:	68a3      	ldr	r3, [r4, #8]
 800ee4a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ee4e:	705a      	strb	r2, [r3, #1]
 800ee50:	68a3      	ldr	r3, [r4, #8]
 800ee52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee56:	7099      	strb	r1, [r3, #2]
 800ee58:	68a3      	ldr	r3, [r4, #8]
 800ee5a:	70da      	strb	r2, [r3, #3]
 800ee5c:	2104      	movs	r1, #4
 800ee5e:	68a2      	ldr	r2, [r4, #8]
 800ee60:	6923      	ldr	r3, [r4, #16]
 800ee62:	440a      	add	r2, r1
 800ee64:	440b      	add	r3, r1
 800ee66:	60a2      	str	r2, [r4, #8]
 800ee68:	6123      	str	r3, [r4, #16]
 800ee6a:	7561      	strb	r1, [r4, #21]
 800ee6c:	7da0      	ldrb	r0, [r4, #22]
 800ee6e:	f080 0001 	eor.w	r0, r0, #1
 800ee72:	b002      	add	sp, #8
 800ee74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee78:	9a01      	ldr	r2, [sp, #4]
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	e7ee      	b.n	800ee5c <ucdr_serialize_uint32_t+0xc0>
 800ee7e:	68a2      	ldr	r2, [r4, #8]
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	7da0      	ldrb	r0, [r4, #22]
 800ee84:	1b92      	subs	r2, r2, r6
 800ee86:	f080 0001 	eor.w	r0, r0, #1
 800ee8a:	1b9e      	subs	r6, r3, r6
 800ee8c:	7567      	strb	r7, [r4, #21]
 800ee8e:	60a2      	str	r2, [r4, #8]
 800ee90:	6126      	str	r6, [r4, #16]
 800ee92:	b002      	add	sp, #8
 800ee94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee98:	68a3      	ldr	r3, [r4, #8]
 800ee9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee9e:	701a      	strb	r2, [r3, #0]
 800eea0:	68a3      	ldr	r3, [r4, #8]
 800eea2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eea6:	701a      	strb	r2, [r3, #0]
 800eea8:	68a3      	ldr	r3, [r4, #8]
 800eeaa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeae:	701a      	strb	r2, [r3, #0]
 800eeb0:	e7ad      	b.n	800ee0e <ucdr_serialize_uint32_t+0x72>
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	ad01      	add	r5, sp, #4
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	4632      	mov	r2, r6
 800eeba:	f008 ff97 	bl	8017dec <memcpy>
 800eebe:	4642      	mov	r2, r8
 800eec0:	68a0      	ldr	r0, [r4, #8]
 800eec2:	19a9      	adds	r1, r5, r6
 800eec4:	f008 ff92 	bl	8017dec <memcpy>
 800eec8:	e7a1      	b.n	800ee0e <ucdr_serialize_uint32_t+0x72>
 800eeca:	bf00      	nop

0800eecc <ucdr_serialize_endian_uint32_t>:
 800eecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eed0:	460d      	mov	r5, r1
 800eed2:	b083      	sub	sp, #12
 800eed4:	2104      	movs	r1, #4
 800eed6:	4604      	mov	r4, r0
 800eed8:	9201      	str	r2, [sp, #4]
 800eeda:	f001 f993 	bl	8010204 <ucdr_buffer_alignment>
 800eede:	4601      	mov	r1, r0
 800eee0:	4620      	mov	r0, r4
 800eee2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eee6:	f001 f9d3 	bl	8010290 <ucdr_advance_buffer>
 800eeea:	4620      	mov	r0, r4
 800eeec:	2104      	movs	r1, #4
 800eeee:	f001 f92b 	bl	8010148 <ucdr_check_buffer_available_for>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d138      	bne.n	800ef68 <ucdr_serialize_endian_uint32_t+0x9c>
 800eef6:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800eefa:	42b3      	cmp	r3, r6
 800eefc:	d92f      	bls.n	800ef5e <ucdr_serialize_endian_uint32_t+0x92>
 800eefe:	6922      	ldr	r2, [r4, #16]
 800ef00:	1b9f      	subs	r7, r3, r6
 800ef02:	443a      	add	r2, r7
 800ef04:	f1c7 0904 	rsb	r9, r7, #4
 800ef08:	4649      	mov	r1, r9
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	60a3      	str	r3, [r4, #8]
 800ef0e:	6122      	str	r2, [r4, #16]
 800ef10:	f001 f926 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d04a      	beq.n	800efae <ucdr_serialize_endian_uint32_t+0xe2>
 800ef18:	2d01      	cmp	r5, #1
 800ef1a:	d063      	beq.n	800efe4 <ucdr_serialize_endian_uint32_t+0x118>
 800ef1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef20:	7033      	strb	r3, [r6, #0]
 800ef22:	2f00      	cmp	r7, #0
 800ef24:	d051      	beq.n	800efca <ucdr_serialize_endian_uint32_t+0xfe>
 800ef26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ef2a:	2f01      	cmp	r7, #1
 800ef2c:	7073      	strb	r3, [r6, #1]
 800ef2e:	d050      	beq.n	800efd2 <ucdr_serialize_endian_uint32_t+0x106>
 800ef30:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ef34:	2f02      	cmp	r7, #2
 800ef36:	70b3      	strb	r3, [r6, #2]
 800ef38:	d04f      	beq.n	800efda <ucdr_serialize_endian_uint32_t+0x10e>
 800ef3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ef3e:	70f3      	strb	r3, [r6, #3]
 800ef40:	2104      	movs	r1, #4
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	68a2      	ldr	r2, [r4, #8]
 800ef46:	7da0      	ldrb	r0, [r4, #22]
 800ef48:	440b      	add	r3, r1
 800ef4a:	1bdf      	subs	r7, r3, r7
 800ef4c:	444a      	add	r2, r9
 800ef4e:	f080 0001 	eor.w	r0, r0, #1
 800ef52:	6127      	str	r7, [r4, #16]
 800ef54:	60a2      	str	r2, [r4, #8]
 800ef56:	7561      	strb	r1, [r4, #21]
 800ef58:	b003      	add	sp, #12
 800ef5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef5e:	2104      	movs	r1, #4
 800ef60:	4620      	mov	r0, r4
 800ef62:	f001 f8fd 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ef66:	b1c8      	cbz	r0, 800ef9c <ucdr_serialize_endian_uint32_t+0xd0>
 800ef68:	2d01      	cmp	r5, #1
 800ef6a:	68a3      	ldr	r3, [r4, #8]
 800ef6c:	d01c      	beq.n	800efa8 <ucdr_serialize_endian_uint32_t+0xdc>
 800ef6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ef72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef76:	7019      	strb	r1, [r3, #0]
 800ef78:	68a3      	ldr	r3, [r4, #8]
 800ef7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ef7e:	705a      	strb	r2, [r3, #1]
 800ef80:	68a3      	ldr	r3, [r4, #8]
 800ef82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef86:	7099      	strb	r1, [r3, #2]
 800ef88:	68a3      	ldr	r3, [r4, #8]
 800ef8a:	70da      	strb	r2, [r3, #3]
 800ef8c:	2104      	movs	r1, #4
 800ef8e:	68a2      	ldr	r2, [r4, #8]
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	440a      	add	r2, r1
 800ef94:	440b      	add	r3, r1
 800ef96:	60a2      	str	r2, [r4, #8]
 800ef98:	6123      	str	r3, [r4, #16]
 800ef9a:	7561      	strb	r1, [r4, #21]
 800ef9c:	7da0      	ldrb	r0, [r4, #22]
 800ef9e:	f080 0001 	eor.w	r0, r0, #1
 800efa2:	b003      	add	sp, #12
 800efa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa8:	9a01      	ldr	r2, [sp, #4]
 800efaa:	601a      	str	r2, [r3, #0]
 800efac:	e7ee      	b.n	800ef8c <ucdr_serialize_endian_uint32_t+0xc0>
 800efae:	68a2      	ldr	r2, [r4, #8]
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	7da0      	ldrb	r0, [r4, #22]
 800efb4:	1bd2      	subs	r2, r2, r7
 800efb6:	f080 0001 	eor.w	r0, r0, #1
 800efba:	1bdf      	subs	r7, r3, r7
 800efbc:	f884 8015 	strb.w	r8, [r4, #21]
 800efc0:	60a2      	str	r2, [r4, #8]
 800efc2:	6127      	str	r7, [r4, #16]
 800efc4:	b003      	add	sp, #12
 800efc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	68a3      	ldr	r3, [r4, #8]
 800efd4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efe0:	701a      	strb	r2, [r3, #0]
 800efe2:	e7ad      	b.n	800ef40 <ucdr_serialize_endian_uint32_t+0x74>
 800efe4:	ad01      	add	r5, sp, #4
 800efe6:	4629      	mov	r1, r5
 800efe8:	463a      	mov	r2, r7
 800efea:	4630      	mov	r0, r6
 800efec:	f008 fefe 	bl	8017dec <memcpy>
 800eff0:	464a      	mov	r2, r9
 800eff2:	68a0      	ldr	r0, [r4, #8]
 800eff4:	19e9      	adds	r1, r5, r7
 800eff6:	f008 fef9 	bl	8017dec <memcpy>
 800effa:	e7a1      	b.n	800ef40 <ucdr_serialize_endian_uint32_t+0x74>

0800effc <ucdr_deserialize_uint32_t>:
 800effc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f000:	460d      	mov	r5, r1
 800f002:	2104      	movs	r1, #4
 800f004:	4604      	mov	r4, r0
 800f006:	f001 f8fd 	bl	8010204 <ucdr_buffer_alignment>
 800f00a:	4601      	mov	r1, r0
 800f00c:	4620      	mov	r0, r4
 800f00e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f012:	f001 f93d 	bl	8010290 <ucdr_advance_buffer>
 800f016:	4620      	mov	r0, r4
 800f018:	2104      	movs	r1, #4
 800f01a:	f001 f895 	bl	8010148 <ucdr_check_buffer_available_for>
 800f01e:	2800      	cmp	r0, #0
 800f020:	d138      	bne.n	800f094 <ucdr_deserialize_uint32_t+0x98>
 800f022:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f026:	42b3      	cmp	r3, r6
 800f028:	d92f      	bls.n	800f08a <ucdr_deserialize_uint32_t+0x8e>
 800f02a:	6922      	ldr	r2, [r4, #16]
 800f02c:	1b9f      	subs	r7, r3, r6
 800f02e:	443a      	add	r2, r7
 800f030:	f1c7 0904 	rsb	r9, r7, #4
 800f034:	4649      	mov	r1, r9
 800f036:	4620      	mov	r0, r4
 800f038:	60a3      	str	r3, [r4, #8]
 800f03a:	6122      	str	r2, [r4, #16]
 800f03c:	f001 f890 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f040:	2800      	cmp	r0, #0
 800f042:	d046      	beq.n	800f0d2 <ucdr_deserialize_uint32_t+0xd6>
 800f044:	7d23      	ldrb	r3, [r4, #20]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d05c      	beq.n	800f104 <ucdr_deserialize_uint32_t+0x108>
 800f04a:	78f3      	ldrb	r3, [r6, #3]
 800f04c:	702b      	strb	r3, [r5, #0]
 800f04e:	2f00      	cmp	r7, #0
 800f050:	d04c      	beq.n	800f0ec <ucdr_deserialize_uint32_t+0xf0>
 800f052:	78b2      	ldrb	r2, [r6, #2]
 800f054:	2f01      	cmp	r7, #1
 800f056:	f105 0302 	add.w	r3, r5, #2
 800f05a:	706a      	strb	r2, [r5, #1]
 800f05c:	d04a      	beq.n	800f0f4 <ucdr_deserialize_uint32_t+0xf8>
 800f05e:	7872      	ldrb	r2, [r6, #1]
 800f060:	2f02      	cmp	r7, #2
 800f062:	f105 0303 	add.w	r3, r5, #3
 800f066:	70aa      	strb	r2, [r5, #2]
 800f068:	d048      	beq.n	800f0fc <ucdr_deserialize_uint32_t+0x100>
 800f06a:	7833      	ldrb	r3, [r6, #0]
 800f06c:	70eb      	strb	r3, [r5, #3]
 800f06e:	2104      	movs	r1, #4
 800f070:	6923      	ldr	r3, [r4, #16]
 800f072:	68a2      	ldr	r2, [r4, #8]
 800f074:	7da0      	ldrb	r0, [r4, #22]
 800f076:	440b      	add	r3, r1
 800f078:	1bdf      	subs	r7, r3, r7
 800f07a:	444a      	add	r2, r9
 800f07c:	7561      	strb	r1, [r4, #21]
 800f07e:	6127      	str	r7, [r4, #16]
 800f080:	60a2      	str	r2, [r4, #8]
 800f082:	f080 0001 	eor.w	r0, r0, #1
 800f086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f08a:	2104      	movs	r1, #4
 800f08c:	4620      	mov	r0, r4
 800f08e:	f001 f867 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f092:	b1b0      	cbz	r0, 800f0c2 <ucdr_deserialize_uint32_t+0xc6>
 800f094:	7d23      	ldrb	r3, [r4, #20]
 800f096:	2b01      	cmp	r3, #1
 800f098:	68a3      	ldr	r3, [r4, #8]
 800f09a:	d017      	beq.n	800f0cc <ucdr_deserialize_uint32_t+0xd0>
 800f09c:	78db      	ldrb	r3, [r3, #3]
 800f09e:	702b      	strb	r3, [r5, #0]
 800f0a0:	68a3      	ldr	r3, [r4, #8]
 800f0a2:	789b      	ldrb	r3, [r3, #2]
 800f0a4:	706b      	strb	r3, [r5, #1]
 800f0a6:	68a3      	ldr	r3, [r4, #8]
 800f0a8:	785b      	ldrb	r3, [r3, #1]
 800f0aa:	70ab      	strb	r3, [r5, #2]
 800f0ac:	68a3      	ldr	r3, [r4, #8]
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	70eb      	strb	r3, [r5, #3]
 800f0b2:	2104      	movs	r1, #4
 800f0b4:	68a2      	ldr	r2, [r4, #8]
 800f0b6:	6923      	ldr	r3, [r4, #16]
 800f0b8:	440a      	add	r2, r1
 800f0ba:	440b      	add	r3, r1
 800f0bc:	60a2      	str	r2, [r4, #8]
 800f0be:	6123      	str	r3, [r4, #16]
 800f0c0:	7561      	strb	r1, [r4, #21]
 800f0c2:	7da0      	ldrb	r0, [r4, #22]
 800f0c4:	f080 0001 	eor.w	r0, r0, #1
 800f0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	602b      	str	r3, [r5, #0]
 800f0d0:	e7ef      	b.n	800f0b2 <ucdr_deserialize_uint32_t+0xb6>
 800f0d2:	68a2      	ldr	r2, [r4, #8]
 800f0d4:	6923      	ldr	r3, [r4, #16]
 800f0d6:	7da0      	ldrb	r0, [r4, #22]
 800f0d8:	1bd2      	subs	r2, r2, r7
 800f0da:	f884 8015 	strb.w	r8, [r4, #21]
 800f0de:	1bdf      	subs	r7, r3, r7
 800f0e0:	60a2      	str	r2, [r4, #8]
 800f0e2:	6127      	str	r7, [r4, #16]
 800f0e4:	f080 0001 	eor.w	r0, r0, #1
 800f0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ec:	68a2      	ldr	r2, [r4, #8]
 800f0ee:	1cab      	adds	r3, r5, #2
 800f0f0:	7892      	ldrb	r2, [r2, #2]
 800f0f2:	706a      	strb	r2, [r5, #1]
 800f0f4:	68a2      	ldr	r2, [r4, #8]
 800f0f6:	7852      	ldrb	r2, [r2, #1]
 800f0f8:	f803 2b01 	strb.w	r2, [r3], #1
 800f0fc:	68a2      	ldr	r2, [r4, #8]
 800f0fe:	7812      	ldrb	r2, [r2, #0]
 800f100:	701a      	strb	r2, [r3, #0]
 800f102:	e7b4      	b.n	800f06e <ucdr_deserialize_uint32_t+0x72>
 800f104:	4631      	mov	r1, r6
 800f106:	463a      	mov	r2, r7
 800f108:	4628      	mov	r0, r5
 800f10a:	f008 fe6f 	bl	8017dec <memcpy>
 800f10e:	464a      	mov	r2, r9
 800f110:	68a1      	ldr	r1, [r4, #8]
 800f112:	19e8      	adds	r0, r5, r7
 800f114:	f008 fe6a 	bl	8017dec <memcpy>
 800f118:	e7a9      	b.n	800f06e <ucdr_deserialize_uint32_t+0x72>
 800f11a:	bf00      	nop

0800f11c <ucdr_deserialize_endian_uint32_t>:
 800f11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f120:	460e      	mov	r6, r1
 800f122:	2104      	movs	r1, #4
 800f124:	4604      	mov	r4, r0
 800f126:	4615      	mov	r5, r2
 800f128:	f001 f86c 	bl	8010204 <ucdr_buffer_alignment>
 800f12c:	4601      	mov	r1, r0
 800f12e:	4620      	mov	r0, r4
 800f130:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f134:	f001 f8ac 	bl	8010290 <ucdr_advance_buffer>
 800f138:	4620      	mov	r0, r4
 800f13a:	2104      	movs	r1, #4
 800f13c:	f001 f804 	bl	8010148 <ucdr_check_buffer_available_for>
 800f140:	2800      	cmp	r0, #0
 800f142:	d13c      	bne.n	800f1be <ucdr_deserialize_endian_uint32_t+0xa2>
 800f144:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f148:	42bb      	cmp	r3, r7
 800f14a:	d933      	bls.n	800f1b4 <ucdr_deserialize_endian_uint32_t+0x98>
 800f14c:	6922      	ldr	r2, [r4, #16]
 800f14e:	eba3 0807 	sub.w	r8, r3, r7
 800f152:	4442      	add	r2, r8
 800f154:	f1c8 0a04 	rsb	sl, r8, #4
 800f158:	4651      	mov	r1, sl
 800f15a:	4620      	mov	r0, r4
 800f15c:	60a3      	str	r3, [r4, #8]
 800f15e:	6122      	str	r2, [r4, #16]
 800f160:	f000 fffe 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f164:	2800      	cmp	r0, #0
 800f166:	d048      	beq.n	800f1fa <ucdr_deserialize_endian_uint32_t+0xde>
 800f168:	2e01      	cmp	r6, #1
 800f16a:	d061      	beq.n	800f230 <ucdr_deserialize_endian_uint32_t+0x114>
 800f16c:	78fb      	ldrb	r3, [r7, #3]
 800f16e:	702b      	strb	r3, [r5, #0]
 800f170:	f1b8 0f00 	cmp.w	r8, #0
 800f174:	d050      	beq.n	800f218 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f176:	78ba      	ldrb	r2, [r7, #2]
 800f178:	f1b8 0f01 	cmp.w	r8, #1
 800f17c:	f105 0302 	add.w	r3, r5, #2
 800f180:	706a      	strb	r2, [r5, #1]
 800f182:	d04d      	beq.n	800f220 <ucdr_deserialize_endian_uint32_t+0x104>
 800f184:	787a      	ldrb	r2, [r7, #1]
 800f186:	f1b8 0f02 	cmp.w	r8, #2
 800f18a:	f105 0303 	add.w	r3, r5, #3
 800f18e:	70aa      	strb	r2, [r5, #2]
 800f190:	d04a      	beq.n	800f228 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f192:	783b      	ldrb	r3, [r7, #0]
 800f194:	70eb      	strb	r3, [r5, #3]
 800f196:	2104      	movs	r1, #4
 800f198:	6923      	ldr	r3, [r4, #16]
 800f19a:	68a2      	ldr	r2, [r4, #8]
 800f19c:	7da0      	ldrb	r0, [r4, #22]
 800f19e:	440b      	add	r3, r1
 800f1a0:	eba3 0308 	sub.w	r3, r3, r8
 800f1a4:	4452      	add	r2, sl
 800f1a6:	7561      	strb	r1, [r4, #21]
 800f1a8:	6123      	str	r3, [r4, #16]
 800f1aa:	60a2      	str	r2, [r4, #8]
 800f1ac:	f080 0001 	eor.w	r0, r0, #1
 800f1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b4:	2104      	movs	r1, #4
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f000 ffd2 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f1bc:	b1a8      	cbz	r0, 800f1ea <ucdr_deserialize_endian_uint32_t+0xce>
 800f1be:	2e01      	cmp	r6, #1
 800f1c0:	68a3      	ldr	r3, [r4, #8]
 800f1c2:	d017      	beq.n	800f1f4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f1c4:	78db      	ldrb	r3, [r3, #3]
 800f1c6:	702b      	strb	r3, [r5, #0]
 800f1c8:	68a3      	ldr	r3, [r4, #8]
 800f1ca:	789b      	ldrb	r3, [r3, #2]
 800f1cc:	706b      	strb	r3, [r5, #1]
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	785b      	ldrb	r3, [r3, #1]
 800f1d2:	70ab      	strb	r3, [r5, #2]
 800f1d4:	68a3      	ldr	r3, [r4, #8]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	70eb      	strb	r3, [r5, #3]
 800f1da:	2104      	movs	r1, #4
 800f1dc:	68a2      	ldr	r2, [r4, #8]
 800f1de:	6923      	ldr	r3, [r4, #16]
 800f1e0:	440a      	add	r2, r1
 800f1e2:	440b      	add	r3, r1
 800f1e4:	60a2      	str	r2, [r4, #8]
 800f1e6:	6123      	str	r3, [r4, #16]
 800f1e8:	7561      	strb	r1, [r4, #21]
 800f1ea:	7da0      	ldrb	r0, [r4, #22]
 800f1ec:	f080 0001 	eor.w	r0, r0, #1
 800f1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	602b      	str	r3, [r5, #0]
 800f1f8:	e7ef      	b.n	800f1da <ucdr_deserialize_endian_uint32_t+0xbe>
 800f1fa:	68a2      	ldr	r2, [r4, #8]
 800f1fc:	6923      	ldr	r3, [r4, #16]
 800f1fe:	7da0      	ldrb	r0, [r4, #22]
 800f200:	eba2 0208 	sub.w	r2, r2, r8
 800f204:	eba3 0308 	sub.w	r3, r3, r8
 800f208:	f884 9015 	strb.w	r9, [r4, #21]
 800f20c:	60a2      	str	r2, [r4, #8]
 800f20e:	6123      	str	r3, [r4, #16]
 800f210:	f080 0001 	eor.w	r0, r0, #1
 800f214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f218:	68a2      	ldr	r2, [r4, #8]
 800f21a:	1cab      	adds	r3, r5, #2
 800f21c:	7892      	ldrb	r2, [r2, #2]
 800f21e:	706a      	strb	r2, [r5, #1]
 800f220:	68a2      	ldr	r2, [r4, #8]
 800f222:	7852      	ldrb	r2, [r2, #1]
 800f224:	f803 2b01 	strb.w	r2, [r3], #1
 800f228:	68a2      	ldr	r2, [r4, #8]
 800f22a:	7812      	ldrb	r2, [r2, #0]
 800f22c:	701a      	strb	r2, [r3, #0]
 800f22e:	e7b2      	b.n	800f196 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f230:	4639      	mov	r1, r7
 800f232:	4642      	mov	r2, r8
 800f234:	4628      	mov	r0, r5
 800f236:	f008 fdd9 	bl	8017dec <memcpy>
 800f23a:	4652      	mov	r2, sl
 800f23c:	68a1      	ldr	r1, [r4, #8]
 800f23e:	eb05 0008 	add.w	r0, r5, r8
 800f242:	f008 fdd3 	bl	8017dec <memcpy>
 800f246:	e7a6      	b.n	800f196 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f248 <ucdr_serialize_uint64_t>:
 800f248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24c:	2108      	movs	r1, #8
 800f24e:	b082      	sub	sp, #8
 800f250:	4604      	mov	r4, r0
 800f252:	e9cd 2300 	strd	r2, r3, [sp]
 800f256:	f000 ffd5 	bl	8010204 <ucdr_buffer_alignment>
 800f25a:	4601      	mov	r1, r0
 800f25c:	4620      	mov	r0, r4
 800f25e:	7d67      	ldrb	r7, [r4, #21]
 800f260:	f001 f816 	bl	8010290 <ucdr_advance_buffer>
 800f264:	4620      	mov	r0, r4
 800f266:	2108      	movs	r1, #8
 800f268:	f000 ff6e 	bl	8010148 <ucdr_check_buffer_available_for>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d14e      	bne.n	800f30e <ucdr_serialize_uint64_t+0xc6>
 800f270:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f274:	42ab      	cmp	r3, r5
 800f276:	d945      	bls.n	800f304 <ucdr_serialize_uint64_t+0xbc>
 800f278:	6922      	ldr	r2, [r4, #16]
 800f27a:	1b5e      	subs	r6, r3, r5
 800f27c:	4432      	add	r2, r6
 800f27e:	f1c6 0808 	rsb	r8, r6, #8
 800f282:	4641      	mov	r1, r8
 800f284:	4620      	mov	r0, r4
 800f286:	60a3      	str	r3, [r4, #8]
 800f288:	6122      	str	r2, [r4, #16]
 800f28a:	f000 ff69 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f28e:	2800      	cmp	r0, #0
 800f290:	d074      	beq.n	800f37c <ucdr_serialize_uint64_t+0x134>
 800f292:	7d23      	ldrb	r3, [r4, #20]
 800f294:	2b01      	cmp	r3, #1
 800f296:	f000 809b 	beq.w	800f3d0 <ucdr_serialize_uint64_t+0x188>
 800f29a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f29e:	702b      	strb	r3, [r5, #0]
 800f2a0:	2e00      	cmp	r6, #0
 800f2a2:	d078      	beq.n	800f396 <ucdr_serialize_uint64_t+0x14e>
 800f2a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2a8:	2e01      	cmp	r6, #1
 800f2aa:	706b      	strb	r3, [r5, #1]
 800f2ac:	d077      	beq.n	800f39e <ucdr_serialize_uint64_t+0x156>
 800f2ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f2b2:	2e02      	cmp	r6, #2
 800f2b4:	70ab      	strb	r3, [r5, #2]
 800f2b6:	d076      	beq.n	800f3a6 <ucdr_serialize_uint64_t+0x15e>
 800f2b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2bc:	2e03      	cmp	r6, #3
 800f2be:	70eb      	strb	r3, [r5, #3]
 800f2c0:	d075      	beq.n	800f3ae <ucdr_serialize_uint64_t+0x166>
 800f2c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f2c6:	2e04      	cmp	r6, #4
 800f2c8:	712b      	strb	r3, [r5, #4]
 800f2ca:	d074      	beq.n	800f3b6 <ucdr_serialize_uint64_t+0x16e>
 800f2cc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f2d0:	2e05      	cmp	r6, #5
 800f2d2:	716b      	strb	r3, [r5, #5]
 800f2d4:	d073      	beq.n	800f3be <ucdr_serialize_uint64_t+0x176>
 800f2d6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f2da:	2e06      	cmp	r6, #6
 800f2dc:	71ab      	strb	r3, [r5, #6]
 800f2de:	d072      	beq.n	800f3c6 <ucdr_serialize_uint64_t+0x17e>
 800f2e0:	f89d 3000 	ldrb.w	r3, [sp]
 800f2e4:	71eb      	strb	r3, [r5, #7]
 800f2e6:	2108      	movs	r1, #8
 800f2e8:	6923      	ldr	r3, [r4, #16]
 800f2ea:	68a2      	ldr	r2, [r4, #8]
 800f2ec:	7da0      	ldrb	r0, [r4, #22]
 800f2ee:	440b      	add	r3, r1
 800f2f0:	1b9e      	subs	r6, r3, r6
 800f2f2:	4442      	add	r2, r8
 800f2f4:	f080 0001 	eor.w	r0, r0, #1
 800f2f8:	6126      	str	r6, [r4, #16]
 800f2fa:	60a2      	str	r2, [r4, #8]
 800f2fc:	7561      	strb	r1, [r4, #21]
 800f2fe:	b002      	add	sp, #8
 800f300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f304:	2108      	movs	r1, #8
 800f306:	4620      	mov	r0, r4
 800f308:	f000 ff2a 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f30c:	b350      	cbz	r0, 800f364 <ucdr_serialize_uint64_t+0x11c>
 800f30e:	7d23      	ldrb	r3, [r4, #20]
 800f310:	2b01      	cmp	r3, #1
 800f312:	d02d      	beq.n	800f370 <ucdr_serialize_uint64_t+0x128>
 800f314:	68a3      	ldr	r3, [r4, #8]
 800f316:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f31a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f31e:	7019      	strb	r1, [r3, #0]
 800f320:	68a3      	ldr	r3, [r4, #8]
 800f322:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f326:	705a      	strb	r2, [r3, #1]
 800f328:	68a3      	ldr	r3, [r4, #8]
 800f32a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f32e:	7099      	strb	r1, [r3, #2]
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f336:	70da      	strb	r2, [r3, #3]
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f33e:	7119      	strb	r1, [r3, #4]
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f346:	715a      	strb	r2, [r3, #5]
 800f348:	68a3      	ldr	r3, [r4, #8]
 800f34a:	f89d 2000 	ldrb.w	r2, [sp]
 800f34e:	7199      	strb	r1, [r3, #6]
 800f350:	68a3      	ldr	r3, [r4, #8]
 800f352:	71da      	strb	r2, [r3, #7]
 800f354:	2108      	movs	r1, #8
 800f356:	68a2      	ldr	r2, [r4, #8]
 800f358:	6923      	ldr	r3, [r4, #16]
 800f35a:	440a      	add	r2, r1
 800f35c:	440b      	add	r3, r1
 800f35e:	60a2      	str	r2, [r4, #8]
 800f360:	6123      	str	r3, [r4, #16]
 800f362:	7561      	strb	r1, [r4, #21]
 800f364:	7da0      	ldrb	r0, [r4, #22]
 800f366:	f080 0001 	eor.w	r0, r0, #1
 800f36a:	b002      	add	sp, #8
 800f36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f370:	466b      	mov	r3, sp
 800f372:	68a2      	ldr	r2, [r4, #8]
 800f374:	cb03      	ldmia	r3!, {r0, r1}
 800f376:	6010      	str	r0, [r2, #0]
 800f378:	6051      	str	r1, [r2, #4]
 800f37a:	e7eb      	b.n	800f354 <ucdr_serialize_uint64_t+0x10c>
 800f37c:	68a2      	ldr	r2, [r4, #8]
 800f37e:	6923      	ldr	r3, [r4, #16]
 800f380:	7da0      	ldrb	r0, [r4, #22]
 800f382:	1b92      	subs	r2, r2, r6
 800f384:	f080 0001 	eor.w	r0, r0, #1
 800f388:	1b9e      	subs	r6, r3, r6
 800f38a:	7567      	strb	r7, [r4, #21]
 800f38c:	60a2      	str	r2, [r4, #8]
 800f38e:	6126      	str	r6, [r4, #16]
 800f390:	b002      	add	sp, #8
 800f392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f396:	68a3      	ldr	r3, [r4, #8]
 800f398:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f39c:	701a      	strb	r2, [r3, #0]
 800f39e:	68a3      	ldr	r3, [r4, #8]
 800f3a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f3a4:	701a      	strb	r2, [r3, #0]
 800f3a6:	68a3      	ldr	r3, [r4, #8]
 800f3a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3ac:	701a      	strb	r2, [r3, #0]
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f3b4:	701a      	strb	r2, [r3, #0]
 800f3b6:	68a3      	ldr	r3, [r4, #8]
 800f3b8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f3bc:	701a      	strb	r2, [r3, #0]
 800f3be:	68a3      	ldr	r3, [r4, #8]
 800f3c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	68a3      	ldr	r3, [r4, #8]
 800f3c8:	f89d 2000 	ldrb.w	r2, [sp]
 800f3cc:	701a      	strb	r2, [r3, #0]
 800f3ce:	e78a      	b.n	800f2e6 <ucdr_serialize_uint64_t+0x9e>
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	466d      	mov	r5, sp
 800f3d4:	4632      	mov	r2, r6
 800f3d6:	4629      	mov	r1, r5
 800f3d8:	f008 fd08 	bl	8017dec <memcpy>
 800f3dc:	4642      	mov	r2, r8
 800f3de:	68a0      	ldr	r0, [r4, #8]
 800f3e0:	19a9      	adds	r1, r5, r6
 800f3e2:	f008 fd03 	bl	8017dec <memcpy>
 800f3e6:	e77e      	b.n	800f2e6 <ucdr_serialize_uint64_t+0x9e>

0800f3e8 <ucdr_serialize_int8_t>:
 800f3e8:	b538      	push	{r3, r4, r5, lr}
 800f3ea:	460d      	mov	r5, r1
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	f000 feb6 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f3f4:	b148      	cbz	r0, 800f40a <ucdr_serialize_int8_t+0x22>
 800f3f6:	2101      	movs	r1, #1
 800f3f8:	68a3      	ldr	r3, [r4, #8]
 800f3fa:	701d      	strb	r5, [r3, #0]
 800f3fc:	68a2      	ldr	r2, [r4, #8]
 800f3fe:	6923      	ldr	r3, [r4, #16]
 800f400:	440a      	add	r2, r1
 800f402:	440b      	add	r3, r1
 800f404:	60a2      	str	r2, [r4, #8]
 800f406:	6123      	str	r3, [r4, #16]
 800f408:	7561      	strb	r1, [r4, #21]
 800f40a:	7da0      	ldrb	r0, [r4, #22]
 800f40c:	f080 0001 	eor.w	r0, r0, #1
 800f410:	bd38      	pop	{r3, r4, r5, pc}
 800f412:	bf00      	nop

0800f414 <ucdr_deserialize_int8_t>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	460d      	mov	r5, r1
 800f418:	2101      	movs	r1, #1
 800f41a:	4604      	mov	r4, r0
 800f41c:	f000 fea0 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f420:	b150      	cbz	r0, 800f438 <ucdr_deserialize_int8_t+0x24>
 800f422:	2101      	movs	r1, #1
 800f424:	68a3      	ldr	r3, [r4, #8]
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	702b      	strb	r3, [r5, #0]
 800f42a:	68a2      	ldr	r2, [r4, #8]
 800f42c:	6923      	ldr	r3, [r4, #16]
 800f42e:	440a      	add	r2, r1
 800f430:	440b      	add	r3, r1
 800f432:	60a2      	str	r2, [r4, #8]
 800f434:	6123      	str	r3, [r4, #16]
 800f436:	7561      	strb	r1, [r4, #21]
 800f438:	7da0      	ldrb	r0, [r4, #22]
 800f43a:	f080 0001 	eor.w	r0, r0, #1
 800f43e:	bd38      	pop	{r3, r4, r5, pc}

0800f440 <ucdr_serialize_int16_t>:
 800f440:	460b      	mov	r3, r1
 800f442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f446:	2102      	movs	r1, #2
 800f448:	b082      	sub	sp, #8
 800f44a:	4604      	mov	r4, r0
 800f44c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f450:	f000 fed8 	bl	8010204 <ucdr_buffer_alignment>
 800f454:	4601      	mov	r1, r0
 800f456:	4620      	mov	r0, r4
 800f458:	7d67      	ldrb	r7, [r4, #21]
 800f45a:	f000 ff19 	bl	8010290 <ucdr_advance_buffer>
 800f45e:	4620      	mov	r0, r4
 800f460:	2102      	movs	r1, #2
 800f462:	f000 fe71 	bl	8010148 <ucdr_check_buffer_available_for>
 800f466:	bb78      	cbnz	r0, 800f4c8 <ucdr_serialize_int16_t+0x88>
 800f468:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f46c:	42ab      	cmp	r3, r5
 800f46e:	d926      	bls.n	800f4be <ucdr_serialize_int16_t+0x7e>
 800f470:	6922      	ldr	r2, [r4, #16]
 800f472:	1b5e      	subs	r6, r3, r5
 800f474:	4432      	add	r2, r6
 800f476:	f1c6 0802 	rsb	r8, r6, #2
 800f47a:	4641      	mov	r1, r8
 800f47c:	4620      	mov	r0, r4
 800f47e:	60a3      	str	r3, [r4, #8]
 800f480:	6122      	str	r2, [r4, #16]
 800f482:	f000 fe6d 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f486:	2800      	cmp	r0, #0
 800f488:	d03b      	beq.n	800f502 <ucdr_serialize_int16_t+0xc2>
 800f48a:	7d23      	ldrb	r3, [r4, #20]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d04a      	beq.n	800f526 <ucdr_serialize_int16_t+0xe6>
 800f490:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f494:	702b      	strb	r3, [r5, #0]
 800f496:	2e00      	cmp	r6, #0
 800f498:	d040      	beq.n	800f51c <ucdr_serialize_int16_t+0xdc>
 800f49a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f49e:	706b      	strb	r3, [r5, #1]
 800f4a0:	2102      	movs	r1, #2
 800f4a2:	6923      	ldr	r3, [r4, #16]
 800f4a4:	68a2      	ldr	r2, [r4, #8]
 800f4a6:	7da0      	ldrb	r0, [r4, #22]
 800f4a8:	440b      	add	r3, r1
 800f4aa:	1b9e      	subs	r6, r3, r6
 800f4ac:	4442      	add	r2, r8
 800f4ae:	f080 0001 	eor.w	r0, r0, #1
 800f4b2:	6126      	str	r6, [r4, #16]
 800f4b4:	60a2      	str	r2, [r4, #8]
 800f4b6:	7561      	strb	r1, [r4, #21]
 800f4b8:	b002      	add	sp, #8
 800f4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4be:	2102      	movs	r1, #2
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	f000 fe4d 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f4c6:	b190      	cbz	r0, 800f4ee <ucdr_serialize_int16_t+0xae>
 800f4c8:	7d23      	ldrb	r3, [r4, #20]
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	68a3      	ldr	r3, [r4, #8]
 800f4ce:	d014      	beq.n	800f4fa <ucdr_serialize_int16_t+0xba>
 800f4d0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f4d4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4d8:	7019      	strb	r1, [r3, #0]
 800f4da:	68a3      	ldr	r3, [r4, #8]
 800f4dc:	705a      	strb	r2, [r3, #1]
 800f4de:	2102      	movs	r1, #2
 800f4e0:	68a2      	ldr	r2, [r4, #8]
 800f4e2:	6923      	ldr	r3, [r4, #16]
 800f4e4:	440a      	add	r2, r1
 800f4e6:	440b      	add	r3, r1
 800f4e8:	60a2      	str	r2, [r4, #8]
 800f4ea:	6123      	str	r3, [r4, #16]
 800f4ec:	7561      	strb	r1, [r4, #21]
 800f4ee:	7da0      	ldrb	r0, [r4, #22]
 800f4f0:	f080 0001 	eor.w	r0, r0, #1
 800f4f4:	b002      	add	sp, #8
 800f4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f4fe:	801a      	strh	r2, [r3, #0]
 800f500:	e7ed      	b.n	800f4de <ucdr_serialize_int16_t+0x9e>
 800f502:	68a2      	ldr	r2, [r4, #8]
 800f504:	6923      	ldr	r3, [r4, #16]
 800f506:	7da0      	ldrb	r0, [r4, #22]
 800f508:	1b92      	subs	r2, r2, r6
 800f50a:	f080 0001 	eor.w	r0, r0, #1
 800f50e:	1b9e      	subs	r6, r3, r6
 800f510:	7567      	strb	r7, [r4, #21]
 800f512:	60a2      	str	r2, [r4, #8]
 800f514:	6126      	str	r6, [r4, #16]
 800f516:	b002      	add	sp, #8
 800f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51c:	68a3      	ldr	r3, [r4, #8]
 800f51e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f522:	701a      	strb	r2, [r3, #0]
 800f524:	e7bc      	b.n	800f4a0 <ucdr_serialize_int16_t+0x60>
 800f526:	4628      	mov	r0, r5
 800f528:	f10d 0506 	add.w	r5, sp, #6
 800f52c:	4629      	mov	r1, r5
 800f52e:	4632      	mov	r2, r6
 800f530:	f008 fc5c 	bl	8017dec <memcpy>
 800f534:	4642      	mov	r2, r8
 800f536:	68a0      	ldr	r0, [r4, #8]
 800f538:	19a9      	adds	r1, r5, r6
 800f53a:	f008 fc57 	bl	8017dec <memcpy>
 800f53e:	e7af      	b.n	800f4a0 <ucdr_serialize_int16_t+0x60>

0800f540 <ucdr_deserialize_int16_t>:
 800f540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f544:	460d      	mov	r5, r1
 800f546:	2102      	movs	r1, #2
 800f548:	4604      	mov	r4, r0
 800f54a:	f000 fe5b 	bl	8010204 <ucdr_buffer_alignment>
 800f54e:	4601      	mov	r1, r0
 800f550:	4620      	mov	r0, r4
 800f552:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f556:	f000 fe9b 	bl	8010290 <ucdr_advance_buffer>
 800f55a:	4620      	mov	r0, r4
 800f55c:	2102      	movs	r1, #2
 800f55e:	f000 fdf3 	bl	8010148 <ucdr_check_buffer_available_for>
 800f562:	bb60      	cbnz	r0, 800f5be <ucdr_deserialize_int16_t+0x7e>
 800f564:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f568:	42b3      	cmp	r3, r6
 800f56a:	d923      	bls.n	800f5b4 <ucdr_deserialize_int16_t+0x74>
 800f56c:	6922      	ldr	r2, [r4, #16]
 800f56e:	1b9f      	subs	r7, r3, r6
 800f570:	443a      	add	r2, r7
 800f572:	f1c7 0902 	rsb	r9, r7, #2
 800f576:	4649      	mov	r1, r9
 800f578:	4620      	mov	r0, r4
 800f57a:	60a3      	str	r3, [r4, #8]
 800f57c:	6122      	str	r2, [r4, #16]
 800f57e:	f000 fdef 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f582:	2800      	cmp	r0, #0
 800f584:	d034      	beq.n	800f5f0 <ucdr_deserialize_int16_t+0xb0>
 800f586:	7d23      	ldrb	r3, [r4, #20]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d042      	beq.n	800f612 <ucdr_deserialize_int16_t+0xd2>
 800f58c:	7873      	ldrb	r3, [r6, #1]
 800f58e:	702b      	strb	r3, [r5, #0]
 800f590:	2f00      	cmp	r7, #0
 800f592:	d03a      	beq.n	800f60a <ucdr_deserialize_int16_t+0xca>
 800f594:	7833      	ldrb	r3, [r6, #0]
 800f596:	706b      	strb	r3, [r5, #1]
 800f598:	2102      	movs	r1, #2
 800f59a:	6923      	ldr	r3, [r4, #16]
 800f59c:	68a2      	ldr	r2, [r4, #8]
 800f59e:	7da0      	ldrb	r0, [r4, #22]
 800f5a0:	440b      	add	r3, r1
 800f5a2:	1bdf      	subs	r7, r3, r7
 800f5a4:	444a      	add	r2, r9
 800f5a6:	7561      	strb	r1, [r4, #21]
 800f5a8:	6127      	str	r7, [r4, #16]
 800f5aa:	60a2      	str	r2, [r4, #8]
 800f5ac:	f080 0001 	eor.w	r0, r0, #1
 800f5b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5b4:	2102      	movs	r1, #2
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	f000 fdd2 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f5bc:	b180      	cbz	r0, 800f5e0 <ucdr_deserialize_int16_t+0xa0>
 800f5be:	7d23      	ldrb	r3, [r4, #20]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	68a3      	ldr	r3, [r4, #8]
 800f5c4:	d011      	beq.n	800f5ea <ucdr_deserialize_int16_t+0xaa>
 800f5c6:	785b      	ldrb	r3, [r3, #1]
 800f5c8:	702b      	strb	r3, [r5, #0]
 800f5ca:	68a3      	ldr	r3, [r4, #8]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	706b      	strb	r3, [r5, #1]
 800f5d0:	2102      	movs	r1, #2
 800f5d2:	68a2      	ldr	r2, [r4, #8]
 800f5d4:	6923      	ldr	r3, [r4, #16]
 800f5d6:	440a      	add	r2, r1
 800f5d8:	440b      	add	r3, r1
 800f5da:	60a2      	str	r2, [r4, #8]
 800f5dc:	6123      	str	r3, [r4, #16]
 800f5de:	7561      	strb	r1, [r4, #21]
 800f5e0:	7da0      	ldrb	r0, [r4, #22]
 800f5e2:	f080 0001 	eor.w	r0, r0, #1
 800f5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	802b      	strh	r3, [r5, #0]
 800f5ee:	e7ef      	b.n	800f5d0 <ucdr_deserialize_int16_t+0x90>
 800f5f0:	68a2      	ldr	r2, [r4, #8]
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	7da0      	ldrb	r0, [r4, #22]
 800f5f6:	1bd2      	subs	r2, r2, r7
 800f5f8:	f884 8015 	strb.w	r8, [r4, #21]
 800f5fc:	1bdf      	subs	r7, r3, r7
 800f5fe:	60a2      	str	r2, [r4, #8]
 800f600:	6127      	str	r7, [r4, #16]
 800f602:	f080 0001 	eor.w	r0, r0, #1
 800f606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f60a:	68a3      	ldr	r3, [r4, #8]
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	706b      	strb	r3, [r5, #1]
 800f610:	e7c2      	b.n	800f598 <ucdr_deserialize_int16_t+0x58>
 800f612:	4631      	mov	r1, r6
 800f614:	463a      	mov	r2, r7
 800f616:	4628      	mov	r0, r5
 800f618:	f008 fbe8 	bl	8017dec <memcpy>
 800f61c:	464a      	mov	r2, r9
 800f61e:	68a1      	ldr	r1, [r4, #8]
 800f620:	19e8      	adds	r0, r5, r7
 800f622:	f008 fbe3 	bl	8017dec <memcpy>
 800f626:	e7b7      	b.n	800f598 <ucdr_deserialize_int16_t+0x58>

0800f628 <ucdr_serialize_int32_t>:
 800f628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	9101      	str	r1, [sp, #4]
 800f630:	2104      	movs	r1, #4
 800f632:	4604      	mov	r4, r0
 800f634:	f000 fde6 	bl	8010204 <ucdr_buffer_alignment>
 800f638:	4601      	mov	r1, r0
 800f63a:	4620      	mov	r0, r4
 800f63c:	7d67      	ldrb	r7, [r4, #21]
 800f63e:	f000 fe27 	bl	8010290 <ucdr_advance_buffer>
 800f642:	4620      	mov	r0, r4
 800f644:	2104      	movs	r1, #4
 800f646:	f000 fd7f 	bl	8010148 <ucdr_check_buffer_available_for>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d139      	bne.n	800f6c2 <ucdr_serialize_int32_t+0x9a>
 800f64e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f652:	42ab      	cmp	r3, r5
 800f654:	d930      	bls.n	800f6b8 <ucdr_serialize_int32_t+0x90>
 800f656:	6922      	ldr	r2, [r4, #16]
 800f658:	1b5e      	subs	r6, r3, r5
 800f65a:	4432      	add	r2, r6
 800f65c:	f1c6 0804 	rsb	r8, r6, #4
 800f660:	4641      	mov	r1, r8
 800f662:	4620      	mov	r0, r4
 800f664:	60a3      	str	r3, [r4, #8]
 800f666:	6122      	str	r2, [r4, #16]
 800f668:	f000 fd7a 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d04c      	beq.n	800f70a <ucdr_serialize_int32_t+0xe2>
 800f670:	7d23      	ldrb	r3, [r4, #20]
 800f672:	2b01      	cmp	r3, #1
 800f674:	d063      	beq.n	800f73e <ucdr_serialize_int32_t+0x116>
 800f676:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f67a:	702b      	strb	r3, [r5, #0]
 800f67c:	2e00      	cmp	r6, #0
 800f67e:	d051      	beq.n	800f724 <ucdr_serialize_int32_t+0xfc>
 800f680:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f684:	2e01      	cmp	r6, #1
 800f686:	706b      	strb	r3, [r5, #1]
 800f688:	d050      	beq.n	800f72c <ucdr_serialize_int32_t+0x104>
 800f68a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f68e:	2e02      	cmp	r6, #2
 800f690:	70ab      	strb	r3, [r5, #2]
 800f692:	d04f      	beq.n	800f734 <ucdr_serialize_int32_t+0x10c>
 800f694:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f698:	70eb      	strb	r3, [r5, #3]
 800f69a:	2104      	movs	r1, #4
 800f69c:	6923      	ldr	r3, [r4, #16]
 800f69e:	68a2      	ldr	r2, [r4, #8]
 800f6a0:	7da0      	ldrb	r0, [r4, #22]
 800f6a2:	440b      	add	r3, r1
 800f6a4:	1b9e      	subs	r6, r3, r6
 800f6a6:	4442      	add	r2, r8
 800f6a8:	f080 0001 	eor.w	r0, r0, #1
 800f6ac:	6126      	str	r6, [r4, #16]
 800f6ae:	60a2      	str	r2, [r4, #8]
 800f6b0:	7561      	strb	r1, [r4, #21]
 800f6b2:	b002      	add	sp, #8
 800f6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b8:	2104      	movs	r1, #4
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f000 fd50 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f6c0:	b1d0      	cbz	r0, 800f6f8 <ucdr_serialize_int32_t+0xd0>
 800f6c2:	7d23      	ldrb	r3, [r4, #20]
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	68a3      	ldr	r3, [r4, #8]
 800f6c8:	d01c      	beq.n	800f704 <ucdr_serialize_int32_t+0xdc>
 800f6ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f6ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6d2:	7019      	strb	r1, [r3, #0]
 800f6d4:	68a3      	ldr	r3, [r4, #8]
 800f6d6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f6da:	705a      	strb	r2, [r3, #1]
 800f6dc:	68a3      	ldr	r3, [r4, #8]
 800f6de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6e2:	7099      	strb	r1, [r3, #2]
 800f6e4:	68a3      	ldr	r3, [r4, #8]
 800f6e6:	70da      	strb	r2, [r3, #3]
 800f6e8:	2104      	movs	r1, #4
 800f6ea:	68a2      	ldr	r2, [r4, #8]
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	440a      	add	r2, r1
 800f6f0:	440b      	add	r3, r1
 800f6f2:	60a2      	str	r2, [r4, #8]
 800f6f4:	6123      	str	r3, [r4, #16]
 800f6f6:	7561      	strb	r1, [r4, #21]
 800f6f8:	7da0      	ldrb	r0, [r4, #22]
 800f6fa:	f080 0001 	eor.w	r0, r0, #1
 800f6fe:	b002      	add	sp, #8
 800f700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f704:	9a01      	ldr	r2, [sp, #4]
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	e7ee      	b.n	800f6e8 <ucdr_serialize_int32_t+0xc0>
 800f70a:	68a2      	ldr	r2, [r4, #8]
 800f70c:	6923      	ldr	r3, [r4, #16]
 800f70e:	7da0      	ldrb	r0, [r4, #22]
 800f710:	1b92      	subs	r2, r2, r6
 800f712:	f080 0001 	eor.w	r0, r0, #1
 800f716:	1b9e      	subs	r6, r3, r6
 800f718:	7567      	strb	r7, [r4, #21]
 800f71a:	60a2      	str	r2, [r4, #8]
 800f71c:	6126      	str	r6, [r4, #16]
 800f71e:	b002      	add	sp, #8
 800f720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f724:	68a3      	ldr	r3, [r4, #8]
 800f726:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f72a:	701a      	strb	r2, [r3, #0]
 800f72c:	68a3      	ldr	r3, [r4, #8]
 800f72e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f732:	701a      	strb	r2, [r3, #0]
 800f734:	68a3      	ldr	r3, [r4, #8]
 800f736:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f73a:	701a      	strb	r2, [r3, #0]
 800f73c:	e7ad      	b.n	800f69a <ucdr_serialize_int32_t+0x72>
 800f73e:	4628      	mov	r0, r5
 800f740:	ad01      	add	r5, sp, #4
 800f742:	4629      	mov	r1, r5
 800f744:	4632      	mov	r2, r6
 800f746:	f008 fb51 	bl	8017dec <memcpy>
 800f74a:	4642      	mov	r2, r8
 800f74c:	68a0      	ldr	r0, [r4, #8]
 800f74e:	19a9      	adds	r1, r5, r6
 800f750:	f008 fb4c 	bl	8017dec <memcpy>
 800f754:	e7a1      	b.n	800f69a <ucdr_serialize_int32_t+0x72>
 800f756:	bf00      	nop

0800f758 <ucdr_deserialize_int32_t>:
 800f758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f75c:	460d      	mov	r5, r1
 800f75e:	2104      	movs	r1, #4
 800f760:	4604      	mov	r4, r0
 800f762:	f000 fd4f 	bl	8010204 <ucdr_buffer_alignment>
 800f766:	4601      	mov	r1, r0
 800f768:	4620      	mov	r0, r4
 800f76a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f76e:	f000 fd8f 	bl	8010290 <ucdr_advance_buffer>
 800f772:	4620      	mov	r0, r4
 800f774:	2104      	movs	r1, #4
 800f776:	f000 fce7 	bl	8010148 <ucdr_check_buffer_available_for>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d138      	bne.n	800f7f0 <ucdr_deserialize_int32_t+0x98>
 800f77e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f782:	42b3      	cmp	r3, r6
 800f784:	d92f      	bls.n	800f7e6 <ucdr_deserialize_int32_t+0x8e>
 800f786:	6922      	ldr	r2, [r4, #16]
 800f788:	1b9f      	subs	r7, r3, r6
 800f78a:	443a      	add	r2, r7
 800f78c:	f1c7 0904 	rsb	r9, r7, #4
 800f790:	4649      	mov	r1, r9
 800f792:	4620      	mov	r0, r4
 800f794:	60a3      	str	r3, [r4, #8]
 800f796:	6122      	str	r2, [r4, #16]
 800f798:	f000 fce2 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d046      	beq.n	800f82e <ucdr_deserialize_int32_t+0xd6>
 800f7a0:	7d23      	ldrb	r3, [r4, #20]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d05c      	beq.n	800f860 <ucdr_deserialize_int32_t+0x108>
 800f7a6:	78f3      	ldrb	r3, [r6, #3]
 800f7a8:	702b      	strb	r3, [r5, #0]
 800f7aa:	2f00      	cmp	r7, #0
 800f7ac:	d04c      	beq.n	800f848 <ucdr_deserialize_int32_t+0xf0>
 800f7ae:	78b2      	ldrb	r2, [r6, #2]
 800f7b0:	2f01      	cmp	r7, #1
 800f7b2:	f105 0302 	add.w	r3, r5, #2
 800f7b6:	706a      	strb	r2, [r5, #1]
 800f7b8:	d04a      	beq.n	800f850 <ucdr_deserialize_int32_t+0xf8>
 800f7ba:	7872      	ldrb	r2, [r6, #1]
 800f7bc:	2f02      	cmp	r7, #2
 800f7be:	f105 0303 	add.w	r3, r5, #3
 800f7c2:	70aa      	strb	r2, [r5, #2]
 800f7c4:	d048      	beq.n	800f858 <ucdr_deserialize_int32_t+0x100>
 800f7c6:	7833      	ldrb	r3, [r6, #0]
 800f7c8:	70eb      	strb	r3, [r5, #3]
 800f7ca:	2104      	movs	r1, #4
 800f7cc:	6923      	ldr	r3, [r4, #16]
 800f7ce:	68a2      	ldr	r2, [r4, #8]
 800f7d0:	7da0      	ldrb	r0, [r4, #22]
 800f7d2:	440b      	add	r3, r1
 800f7d4:	1bdf      	subs	r7, r3, r7
 800f7d6:	444a      	add	r2, r9
 800f7d8:	7561      	strb	r1, [r4, #21]
 800f7da:	6127      	str	r7, [r4, #16]
 800f7dc:	60a2      	str	r2, [r4, #8]
 800f7de:	f080 0001 	eor.w	r0, r0, #1
 800f7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e6:	2104      	movs	r1, #4
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f000 fcb9 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f7ee:	b1b0      	cbz	r0, 800f81e <ucdr_deserialize_int32_t+0xc6>
 800f7f0:	7d23      	ldrb	r3, [r4, #20]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	d017      	beq.n	800f828 <ucdr_deserialize_int32_t+0xd0>
 800f7f8:	78db      	ldrb	r3, [r3, #3]
 800f7fa:	702b      	strb	r3, [r5, #0]
 800f7fc:	68a3      	ldr	r3, [r4, #8]
 800f7fe:	789b      	ldrb	r3, [r3, #2]
 800f800:	706b      	strb	r3, [r5, #1]
 800f802:	68a3      	ldr	r3, [r4, #8]
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	70ab      	strb	r3, [r5, #2]
 800f808:	68a3      	ldr	r3, [r4, #8]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	70eb      	strb	r3, [r5, #3]
 800f80e:	2104      	movs	r1, #4
 800f810:	68a2      	ldr	r2, [r4, #8]
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	440a      	add	r2, r1
 800f816:	440b      	add	r3, r1
 800f818:	60a2      	str	r2, [r4, #8]
 800f81a:	6123      	str	r3, [r4, #16]
 800f81c:	7561      	strb	r1, [r4, #21]
 800f81e:	7da0      	ldrb	r0, [r4, #22]
 800f820:	f080 0001 	eor.w	r0, r0, #1
 800f824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	e7ef      	b.n	800f80e <ucdr_deserialize_int32_t+0xb6>
 800f82e:	68a2      	ldr	r2, [r4, #8]
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	7da0      	ldrb	r0, [r4, #22]
 800f834:	1bd2      	subs	r2, r2, r7
 800f836:	f884 8015 	strb.w	r8, [r4, #21]
 800f83a:	1bdf      	subs	r7, r3, r7
 800f83c:	60a2      	str	r2, [r4, #8]
 800f83e:	6127      	str	r7, [r4, #16]
 800f840:	f080 0001 	eor.w	r0, r0, #1
 800f844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f848:	68a2      	ldr	r2, [r4, #8]
 800f84a:	1cab      	adds	r3, r5, #2
 800f84c:	7892      	ldrb	r2, [r2, #2]
 800f84e:	706a      	strb	r2, [r5, #1]
 800f850:	68a2      	ldr	r2, [r4, #8]
 800f852:	7852      	ldrb	r2, [r2, #1]
 800f854:	f803 2b01 	strb.w	r2, [r3], #1
 800f858:	68a2      	ldr	r2, [r4, #8]
 800f85a:	7812      	ldrb	r2, [r2, #0]
 800f85c:	701a      	strb	r2, [r3, #0]
 800f85e:	e7b4      	b.n	800f7ca <ucdr_deserialize_int32_t+0x72>
 800f860:	4631      	mov	r1, r6
 800f862:	463a      	mov	r2, r7
 800f864:	4628      	mov	r0, r5
 800f866:	f008 fac1 	bl	8017dec <memcpy>
 800f86a:	464a      	mov	r2, r9
 800f86c:	68a1      	ldr	r1, [r4, #8]
 800f86e:	19e8      	adds	r0, r5, r7
 800f870:	f008 fabc 	bl	8017dec <memcpy>
 800f874:	e7a9      	b.n	800f7ca <ucdr_deserialize_int32_t+0x72>
 800f876:	bf00      	nop

0800f878 <ucdr_serialize_endian_float>:
 800f878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f87c:	460d      	mov	r5, r1
 800f87e:	b083      	sub	sp, #12
 800f880:	2104      	movs	r1, #4
 800f882:	4604      	mov	r4, r0
 800f884:	9201      	str	r2, [sp, #4]
 800f886:	f000 fcbd 	bl	8010204 <ucdr_buffer_alignment>
 800f88a:	4601      	mov	r1, r0
 800f88c:	4620      	mov	r0, r4
 800f88e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f892:	f000 fcfd 	bl	8010290 <ucdr_advance_buffer>
 800f896:	4620      	mov	r0, r4
 800f898:	2104      	movs	r1, #4
 800f89a:	f000 fc55 	bl	8010148 <ucdr_check_buffer_available_for>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d138      	bne.n	800f914 <ucdr_serialize_endian_float+0x9c>
 800f8a2:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f8a6:	42b3      	cmp	r3, r6
 800f8a8:	d92f      	bls.n	800f90a <ucdr_serialize_endian_float+0x92>
 800f8aa:	6922      	ldr	r2, [r4, #16]
 800f8ac:	1b9f      	subs	r7, r3, r6
 800f8ae:	443a      	add	r2, r7
 800f8b0:	f1c7 0904 	rsb	r9, r7, #4
 800f8b4:	4649      	mov	r1, r9
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	60a3      	str	r3, [r4, #8]
 800f8ba:	6122      	str	r2, [r4, #16]
 800f8bc:	f000 fc50 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d04a      	beq.n	800f95a <ucdr_serialize_endian_float+0xe2>
 800f8c4:	2d01      	cmp	r5, #1
 800f8c6:	d063      	beq.n	800f990 <ucdr_serialize_endian_float+0x118>
 800f8c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8cc:	7033      	strb	r3, [r6, #0]
 800f8ce:	2f00      	cmp	r7, #0
 800f8d0:	d051      	beq.n	800f976 <ucdr_serialize_endian_float+0xfe>
 800f8d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8d6:	2f01      	cmp	r7, #1
 800f8d8:	7073      	strb	r3, [r6, #1]
 800f8da:	d050      	beq.n	800f97e <ucdr_serialize_endian_float+0x106>
 800f8dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8e0:	2f02      	cmp	r7, #2
 800f8e2:	70b3      	strb	r3, [r6, #2]
 800f8e4:	d04f      	beq.n	800f986 <ucdr_serialize_endian_float+0x10e>
 800f8e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8ea:	70f3      	strb	r3, [r6, #3]
 800f8ec:	2104      	movs	r1, #4
 800f8ee:	6923      	ldr	r3, [r4, #16]
 800f8f0:	68a2      	ldr	r2, [r4, #8]
 800f8f2:	7da0      	ldrb	r0, [r4, #22]
 800f8f4:	440b      	add	r3, r1
 800f8f6:	1bdf      	subs	r7, r3, r7
 800f8f8:	444a      	add	r2, r9
 800f8fa:	f080 0001 	eor.w	r0, r0, #1
 800f8fe:	6127      	str	r7, [r4, #16]
 800f900:	60a2      	str	r2, [r4, #8]
 800f902:	7561      	strb	r1, [r4, #21]
 800f904:	b003      	add	sp, #12
 800f906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f90a:	2104      	movs	r1, #4
 800f90c:	4620      	mov	r0, r4
 800f90e:	f000 fc27 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f912:	b1c8      	cbz	r0, 800f948 <ucdr_serialize_endian_float+0xd0>
 800f914:	2d01      	cmp	r5, #1
 800f916:	68a3      	ldr	r3, [r4, #8]
 800f918:	d01c      	beq.n	800f954 <ucdr_serialize_endian_float+0xdc>
 800f91a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f91e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f922:	7019      	strb	r1, [r3, #0]
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f92a:	705a      	strb	r2, [r3, #1]
 800f92c:	68a3      	ldr	r3, [r4, #8]
 800f92e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f932:	7099      	strb	r1, [r3, #2]
 800f934:	68a3      	ldr	r3, [r4, #8]
 800f936:	70da      	strb	r2, [r3, #3]
 800f938:	2104      	movs	r1, #4
 800f93a:	68a2      	ldr	r2, [r4, #8]
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	440a      	add	r2, r1
 800f940:	440b      	add	r3, r1
 800f942:	60a2      	str	r2, [r4, #8]
 800f944:	6123      	str	r3, [r4, #16]
 800f946:	7561      	strb	r1, [r4, #21]
 800f948:	7da0      	ldrb	r0, [r4, #22]
 800f94a:	f080 0001 	eor.w	r0, r0, #1
 800f94e:	b003      	add	sp, #12
 800f950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f954:	9a01      	ldr	r2, [sp, #4]
 800f956:	601a      	str	r2, [r3, #0]
 800f958:	e7ee      	b.n	800f938 <ucdr_serialize_endian_float+0xc0>
 800f95a:	68a2      	ldr	r2, [r4, #8]
 800f95c:	6923      	ldr	r3, [r4, #16]
 800f95e:	7da0      	ldrb	r0, [r4, #22]
 800f960:	1bd2      	subs	r2, r2, r7
 800f962:	f080 0001 	eor.w	r0, r0, #1
 800f966:	1bdf      	subs	r7, r3, r7
 800f968:	f884 8015 	strb.w	r8, [r4, #21]
 800f96c:	60a2      	str	r2, [r4, #8]
 800f96e:	6127      	str	r7, [r4, #16]
 800f970:	b003      	add	sp, #12
 800f972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f97c:	701a      	strb	r2, [r3, #0]
 800f97e:	68a3      	ldr	r3, [r4, #8]
 800f980:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f984:	701a      	strb	r2, [r3, #0]
 800f986:	68a3      	ldr	r3, [r4, #8]
 800f988:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f98c:	701a      	strb	r2, [r3, #0]
 800f98e:	e7ad      	b.n	800f8ec <ucdr_serialize_endian_float+0x74>
 800f990:	ad01      	add	r5, sp, #4
 800f992:	4629      	mov	r1, r5
 800f994:	463a      	mov	r2, r7
 800f996:	4630      	mov	r0, r6
 800f998:	f008 fa28 	bl	8017dec <memcpy>
 800f99c:	464a      	mov	r2, r9
 800f99e:	68a0      	ldr	r0, [r4, #8]
 800f9a0:	19e9      	adds	r1, r5, r7
 800f9a2:	f008 fa23 	bl	8017dec <memcpy>
 800f9a6:	e7a1      	b.n	800f8ec <ucdr_serialize_endian_float+0x74>

0800f9a8 <ucdr_deserialize_endian_float>:
 800f9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9ac:	460e      	mov	r6, r1
 800f9ae:	2104      	movs	r1, #4
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	4615      	mov	r5, r2
 800f9b4:	f000 fc26 	bl	8010204 <ucdr_buffer_alignment>
 800f9b8:	4601      	mov	r1, r0
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f9c0:	f000 fc66 	bl	8010290 <ucdr_advance_buffer>
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	2104      	movs	r1, #4
 800f9c8:	f000 fbbe 	bl	8010148 <ucdr_check_buffer_available_for>
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d13c      	bne.n	800fa4a <ucdr_deserialize_endian_float+0xa2>
 800f9d0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f9d4:	42bb      	cmp	r3, r7
 800f9d6:	d933      	bls.n	800fa40 <ucdr_deserialize_endian_float+0x98>
 800f9d8:	6922      	ldr	r2, [r4, #16]
 800f9da:	eba3 0807 	sub.w	r8, r3, r7
 800f9de:	4442      	add	r2, r8
 800f9e0:	f1c8 0a04 	rsb	sl, r8, #4
 800f9e4:	4651      	mov	r1, sl
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	60a3      	str	r3, [r4, #8]
 800f9ea:	6122      	str	r2, [r4, #16]
 800f9ec:	f000 fbb8 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d048      	beq.n	800fa86 <ucdr_deserialize_endian_float+0xde>
 800f9f4:	2e01      	cmp	r6, #1
 800f9f6:	d061      	beq.n	800fabc <ucdr_deserialize_endian_float+0x114>
 800f9f8:	78fb      	ldrb	r3, [r7, #3]
 800f9fa:	702b      	strb	r3, [r5, #0]
 800f9fc:	f1b8 0f00 	cmp.w	r8, #0
 800fa00:	d050      	beq.n	800faa4 <ucdr_deserialize_endian_float+0xfc>
 800fa02:	78ba      	ldrb	r2, [r7, #2]
 800fa04:	f1b8 0f01 	cmp.w	r8, #1
 800fa08:	f105 0302 	add.w	r3, r5, #2
 800fa0c:	706a      	strb	r2, [r5, #1]
 800fa0e:	d04d      	beq.n	800faac <ucdr_deserialize_endian_float+0x104>
 800fa10:	787a      	ldrb	r2, [r7, #1]
 800fa12:	f1b8 0f02 	cmp.w	r8, #2
 800fa16:	f105 0303 	add.w	r3, r5, #3
 800fa1a:	70aa      	strb	r2, [r5, #2]
 800fa1c:	d04a      	beq.n	800fab4 <ucdr_deserialize_endian_float+0x10c>
 800fa1e:	783b      	ldrb	r3, [r7, #0]
 800fa20:	70eb      	strb	r3, [r5, #3]
 800fa22:	2104      	movs	r1, #4
 800fa24:	6923      	ldr	r3, [r4, #16]
 800fa26:	68a2      	ldr	r2, [r4, #8]
 800fa28:	7da0      	ldrb	r0, [r4, #22]
 800fa2a:	440b      	add	r3, r1
 800fa2c:	eba3 0308 	sub.w	r3, r3, r8
 800fa30:	4452      	add	r2, sl
 800fa32:	7561      	strb	r1, [r4, #21]
 800fa34:	6123      	str	r3, [r4, #16]
 800fa36:	60a2      	str	r2, [r4, #8]
 800fa38:	f080 0001 	eor.w	r0, r0, #1
 800fa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa40:	2104      	movs	r1, #4
 800fa42:	4620      	mov	r0, r4
 800fa44:	f000 fb8c 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fa48:	b1a8      	cbz	r0, 800fa76 <ucdr_deserialize_endian_float+0xce>
 800fa4a:	2e01      	cmp	r6, #1
 800fa4c:	68a3      	ldr	r3, [r4, #8]
 800fa4e:	d017      	beq.n	800fa80 <ucdr_deserialize_endian_float+0xd8>
 800fa50:	78db      	ldrb	r3, [r3, #3]
 800fa52:	702b      	strb	r3, [r5, #0]
 800fa54:	68a3      	ldr	r3, [r4, #8]
 800fa56:	789b      	ldrb	r3, [r3, #2]
 800fa58:	706b      	strb	r3, [r5, #1]
 800fa5a:	68a3      	ldr	r3, [r4, #8]
 800fa5c:	785b      	ldrb	r3, [r3, #1]
 800fa5e:	70ab      	strb	r3, [r5, #2]
 800fa60:	68a3      	ldr	r3, [r4, #8]
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	70eb      	strb	r3, [r5, #3]
 800fa66:	2104      	movs	r1, #4
 800fa68:	68a2      	ldr	r2, [r4, #8]
 800fa6a:	6923      	ldr	r3, [r4, #16]
 800fa6c:	440a      	add	r2, r1
 800fa6e:	440b      	add	r3, r1
 800fa70:	60a2      	str	r2, [r4, #8]
 800fa72:	6123      	str	r3, [r4, #16]
 800fa74:	7561      	strb	r1, [r4, #21]
 800fa76:	7da0      	ldrb	r0, [r4, #22]
 800fa78:	f080 0001 	eor.w	r0, r0, #1
 800fa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	602b      	str	r3, [r5, #0]
 800fa84:	e7ef      	b.n	800fa66 <ucdr_deserialize_endian_float+0xbe>
 800fa86:	68a2      	ldr	r2, [r4, #8]
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	7da0      	ldrb	r0, [r4, #22]
 800fa8c:	eba2 0208 	sub.w	r2, r2, r8
 800fa90:	eba3 0308 	sub.w	r3, r3, r8
 800fa94:	f884 9015 	strb.w	r9, [r4, #21]
 800fa98:	60a2      	str	r2, [r4, #8]
 800fa9a:	6123      	str	r3, [r4, #16]
 800fa9c:	f080 0001 	eor.w	r0, r0, #1
 800faa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faa4:	68a2      	ldr	r2, [r4, #8]
 800faa6:	1cab      	adds	r3, r5, #2
 800faa8:	7892      	ldrb	r2, [r2, #2]
 800faaa:	706a      	strb	r2, [r5, #1]
 800faac:	68a2      	ldr	r2, [r4, #8]
 800faae:	7852      	ldrb	r2, [r2, #1]
 800fab0:	f803 2b01 	strb.w	r2, [r3], #1
 800fab4:	68a2      	ldr	r2, [r4, #8]
 800fab6:	7812      	ldrb	r2, [r2, #0]
 800fab8:	701a      	strb	r2, [r3, #0]
 800faba:	e7b2      	b.n	800fa22 <ucdr_deserialize_endian_float+0x7a>
 800fabc:	4639      	mov	r1, r7
 800fabe:	4642      	mov	r2, r8
 800fac0:	4628      	mov	r0, r5
 800fac2:	f008 f993 	bl	8017dec <memcpy>
 800fac6:	4652      	mov	r2, sl
 800fac8:	68a1      	ldr	r1, [r4, #8]
 800faca:	eb05 0008 	add.w	r0, r5, r8
 800face:	f008 f98d 	bl	8017dec <memcpy>
 800fad2:	e7a6      	b.n	800fa22 <ucdr_deserialize_endian_float+0x7a>

0800fad4 <ucdr_serialize_double>:
 800fad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad8:	2108      	movs	r1, #8
 800fada:	b082      	sub	sp, #8
 800fadc:	4604      	mov	r4, r0
 800fade:	e9cd 2300 	strd	r2, r3, [sp]
 800fae2:	f000 fb8f 	bl	8010204 <ucdr_buffer_alignment>
 800fae6:	4601      	mov	r1, r0
 800fae8:	4620      	mov	r0, r4
 800faea:	7d67      	ldrb	r7, [r4, #21]
 800faec:	f000 fbd0 	bl	8010290 <ucdr_advance_buffer>
 800faf0:	4620      	mov	r0, r4
 800faf2:	2108      	movs	r1, #8
 800faf4:	f000 fb28 	bl	8010148 <ucdr_check_buffer_available_for>
 800faf8:	2800      	cmp	r0, #0
 800fafa:	d14e      	bne.n	800fb9a <ucdr_serialize_double+0xc6>
 800fafc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fb00:	42ab      	cmp	r3, r5
 800fb02:	d945      	bls.n	800fb90 <ucdr_serialize_double+0xbc>
 800fb04:	6922      	ldr	r2, [r4, #16]
 800fb06:	1b5e      	subs	r6, r3, r5
 800fb08:	4432      	add	r2, r6
 800fb0a:	f1c6 0808 	rsb	r8, r6, #8
 800fb0e:	4641      	mov	r1, r8
 800fb10:	4620      	mov	r0, r4
 800fb12:	60a3      	str	r3, [r4, #8]
 800fb14:	6122      	str	r2, [r4, #16]
 800fb16:	f000 fb23 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	d074      	beq.n	800fc08 <ucdr_serialize_double+0x134>
 800fb1e:	7d23      	ldrb	r3, [r4, #20]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	f000 809b 	beq.w	800fc5c <ucdr_serialize_double+0x188>
 800fb26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb2a:	702b      	strb	r3, [r5, #0]
 800fb2c:	2e00      	cmp	r6, #0
 800fb2e:	d078      	beq.n	800fc22 <ucdr_serialize_double+0x14e>
 800fb30:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb34:	2e01      	cmp	r6, #1
 800fb36:	706b      	strb	r3, [r5, #1]
 800fb38:	d077      	beq.n	800fc2a <ucdr_serialize_double+0x156>
 800fb3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fb3e:	2e02      	cmp	r6, #2
 800fb40:	70ab      	strb	r3, [r5, #2]
 800fb42:	d076      	beq.n	800fc32 <ucdr_serialize_double+0x15e>
 800fb44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fb48:	2e03      	cmp	r6, #3
 800fb4a:	70eb      	strb	r3, [r5, #3]
 800fb4c:	d075      	beq.n	800fc3a <ucdr_serialize_double+0x166>
 800fb4e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fb52:	2e04      	cmp	r6, #4
 800fb54:	712b      	strb	r3, [r5, #4]
 800fb56:	d074      	beq.n	800fc42 <ucdr_serialize_double+0x16e>
 800fb58:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fb5c:	2e05      	cmp	r6, #5
 800fb5e:	716b      	strb	r3, [r5, #5]
 800fb60:	d073      	beq.n	800fc4a <ucdr_serialize_double+0x176>
 800fb62:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fb66:	2e06      	cmp	r6, #6
 800fb68:	71ab      	strb	r3, [r5, #6]
 800fb6a:	d072      	beq.n	800fc52 <ucdr_serialize_double+0x17e>
 800fb6c:	f89d 3000 	ldrb.w	r3, [sp]
 800fb70:	71eb      	strb	r3, [r5, #7]
 800fb72:	2108      	movs	r1, #8
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	68a2      	ldr	r2, [r4, #8]
 800fb78:	7da0      	ldrb	r0, [r4, #22]
 800fb7a:	440b      	add	r3, r1
 800fb7c:	1b9e      	subs	r6, r3, r6
 800fb7e:	4442      	add	r2, r8
 800fb80:	f080 0001 	eor.w	r0, r0, #1
 800fb84:	6126      	str	r6, [r4, #16]
 800fb86:	60a2      	str	r2, [r4, #8]
 800fb88:	7561      	strb	r1, [r4, #21]
 800fb8a:	b002      	add	sp, #8
 800fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb90:	2108      	movs	r1, #8
 800fb92:	4620      	mov	r0, r4
 800fb94:	f000 fae4 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fb98:	b350      	cbz	r0, 800fbf0 <ucdr_serialize_double+0x11c>
 800fb9a:	7d23      	ldrb	r3, [r4, #20]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d02d      	beq.n	800fbfc <ucdr_serialize_double+0x128>
 800fba0:	68a3      	ldr	r3, [r4, #8]
 800fba2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fba6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbaa:	7019      	strb	r1, [r3, #0]
 800fbac:	68a3      	ldr	r3, [r4, #8]
 800fbae:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fbb2:	705a      	strb	r2, [r3, #1]
 800fbb4:	68a3      	ldr	r3, [r4, #8]
 800fbb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fbba:	7099      	strb	r1, [r3, #2]
 800fbbc:	68a3      	ldr	r3, [r4, #8]
 800fbbe:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800fbc2:	70da      	strb	r2, [r3, #3]
 800fbc4:	68a3      	ldr	r3, [r4, #8]
 800fbc6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fbca:	7119      	strb	r1, [r3, #4]
 800fbcc:	68a3      	ldr	r3, [r4, #8]
 800fbce:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fbd2:	715a      	strb	r2, [r3, #5]
 800fbd4:	68a3      	ldr	r3, [r4, #8]
 800fbd6:	f89d 2000 	ldrb.w	r2, [sp]
 800fbda:	7199      	strb	r1, [r3, #6]
 800fbdc:	68a3      	ldr	r3, [r4, #8]
 800fbde:	71da      	strb	r2, [r3, #7]
 800fbe0:	2108      	movs	r1, #8
 800fbe2:	68a2      	ldr	r2, [r4, #8]
 800fbe4:	6923      	ldr	r3, [r4, #16]
 800fbe6:	440a      	add	r2, r1
 800fbe8:	440b      	add	r3, r1
 800fbea:	60a2      	str	r2, [r4, #8]
 800fbec:	6123      	str	r3, [r4, #16]
 800fbee:	7561      	strb	r1, [r4, #21]
 800fbf0:	7da0      	ldrb	r0, [r4, #22]
 800fbf2:	f080 0001 	eor.w	r0, r0, #1
 800fbf6:	b002      	add	sp, #8
 800fbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbfc:	466b      	mov	r3, sp
 800fbfe:	68a2      	ldr	r2, [r4, #8]
 800fc00:	cb03      	ldmia	r3!, {r0, r1}
 800fc02:	6010      	str	r0, [r2, #0]
 800fc04:	6051      	str	r1, [r2, #4]
 800fc06:	e7eb      	b.n	800fbe0 <ucdr_serialize_double+0x10c>
 800fc08:	68a2      	ldr	r2, [r4, #8]
 800fc0a:	6923      	ldr	r3, [r4, #16]
 800fc0c:	7da0      	ldrb	r0, [r4, #22]
 800fc0e:	1b92      	subs	r2, r2, r6
 800fc10:	f080 0001 	eor.w	r0, r0, #1
 800fc14:	1b9e      	subs	r6, r3, r6
 800fc16:	7567      	strb	r7, [r4, #21]
 800fc18:	60a2      	str	r2, [r4, #8]
 800fc1a:	6126      	str	r6, [r4, #16]
 800fc1c:	b002      	add	sp, #8
 800fc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc22:	68a3      	ldr	r3, [r4, #8]
 800fc24:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc28:	701a      	strb	r2, [r3, #0]
 800fc2a:	68a3      	ldr	r3, [r4, #8]
 800fc2c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc30:	701a      	strb	r2, [r3, #0]
 800fc32:	68a3      	ldr	r3, [r4, #8]
 800fc34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc38:	701a      	strb	r2, [r3, #0]
 800fc3a:	68a3      	ldr	r3, [r4, #8]
 800fc3c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fc40:	701a      	strb	r2, [r3, #0]
 800fc42:	68a3      	ldr	r3, [r4, #8]
 800fc44:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fc48:	701a      	strb	r2, [r3, #0]
 800fc4a:	68a3      	ldr	r3, [r4, #8]
 800fc4c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	68a3      	ldr	r3, [r4, #8]
 800fc54:	f89d 2000 	ldrb.w	r2, [sp]
 800fc58:	701a      	strb	r2, [r3, #0]
 800fc5a:	e78a      	b.n	800fb72 <ucdr_serialize_double+0x9e>
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	466d      	mov	r5, sp
 800fc60:	4632      	mov	r2, r6
 800fc62:	4629      	mov	r1, r5
 800fc64:	f008 f8c2 	bl	8017dec <memcpy>
 800fc68:	4642      	mov	r2, r8
 800fc6a:	68a0      	ldr	r0, [r4, #8]
 800fc6c:	19a9      	adds	r1, r5, r6
 800fc6e:	f008 f8bd 	bl	8017dec <memcpy>
 800fc72:	e77e      	b.n	800fb72 <ucdr_serialize_double+0x9e>

0800fc74 <ucdr_serialize_endian_double>:
 800fc74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc78:	460d      	mov	r5, r1
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	2108      	movs	r1, #8
 800fc7e:	4604      	mov	r4, r0
 800fc80:	e9cd 2300 	strd	r2, r3, [sp]
 800fc84:	f000 fabe 	bl	8010204 <ucdr_buffer_alignment>
 800fc88:	4601      	mov	r1, r0
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc90:	f000 fafe 	bl	8010290 <ucdr_advance_buffer>
 800fc94:	4620      	mov	r0, r4
 800fc96:	2108      	movs	r1, #8
 800fc98:	f000 fa56 	bl	8010148 <ucdr_check_buffer_available_for>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d14d      	bne.n	800fd3c <ucdr_serialize_endian_double+0xc8>
 800fca0:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800fca4:	42b3      	cmp	r3, r6
 800fca6:	d944      	bls.n	800fd32 <ucdr_serialize_endian_double+0xbe>
 800fca8:	6922      	ldr	r2, [r4, #16]
 800fcaa:	1b9f      	subs	r7, r3, r6
 800fcac:	443a      	add	r2, r7
 800fcae:	f1c7 0908 	rsb	r9, r7, #8
 800fcb2:	4649      	mov	r1, r9
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	60a3      	str	r3, [r4, #8]
 800fcb8:	6122      	str	r2, [r4, #16]
 800fcba:	f000 fa51 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	d072      	beq.n	800fda8 <ucdr_serialize_endian_double+0x134>
 800fcc2:	2d01      	cmp	r5, #1
 800fcc4:	f000 809b 	beq.w	800fdfe <ucdr_serialize_endian_double+0x18a>
 800fcc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fccc:	7033      	strb	r3, [r6, #0]
 800fcce:	2f00      	cmp	r7, #0
 800fcd0:	d078      	beq.n	800fdc4 <ucdr_serialize_endian_double+0x150>
 800fcd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fcd6:	2f01      	cmp	r7, #1
 800fcd8:	7073      	strb	r3, [r6, #1]
 800fcda:	d077      	beq.n	800fdcc <ucdr_serialize_endian_double+0x158>
 800fcdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fce0:	2f02      	cmp	r7, #2
 800fce2:	70b3      	strb	r3, [r6, #2]
 800fce4:	d076      	beq.n	800fdd4 <ucdr_serialize_endian_double+0x160>
 800fce6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fcea:	2f03      	cmp	r7, #3
 800fcec:	70f3      	strb	r3, [r6, #3]
 800fcee:	d075      	beq.n	800fddc <ucdr_serialize_endian_double+0x168>
 800fcf0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fcf4:	2f04      	cmp	r7, #4
 800fcf6:	7133      	strb	r3, [r6, #4]
 800fcf8:	d074      	beq.n	800fde4 <ucdr_serialize_endian_double+0x170>
 800fcfa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fcfe:	2f05      	cmp	r7, #5
 800fd00:	7173      	strb	r3, [r6, #5]
 800fd02:	d073      	beq.n	800fdec <ucdr_serialize_endian_double+0x178>
 800fd04:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fd08:	2f06      	cmp	r7, #6
 800fd0a:	71b3      	strb	r3, [r6, #6]
 800fd0c:	d072      	beq.n	800fdf4 <ucdr_serialize_endian_double+0x180>
 800fd0e:	f89d 3000 	ldrb.w	r3, [sp]
 800fd12:	71f3      	strb	r3, [r6, #7]
 800fd14:	2108      	movs	r1, #8
 800fd16:	6923      	ldr	r3, [r4, #16]
 800fd18:	68a2      	ldr	r2, [r4, #8]
 800fd1a:	7da0      	ldrb	r0, [r4, #22]
 800fd1c:	440b      	add	r3, r1
 800fd1e:	1bdf      	subs	r7, r3, r7
 800fd20:	444a      	add	r2, r9
 800fd22:	f080 0001 	eor.w	r0, r0, #1
 800fd26:	6127      	str	r7, [r4, #16]
 800fd28:	60a2      	str	r2, [r4, #8]
 800fd2a:	7561      	strb	r1, [r4, #21]
 800fd2c:	b003      	add	sp, #12
 800fd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd32:	2108      	movs	r1, #8
 800fd34:	4620      	mov	r0, r4
 800fd36:	f000 fa13 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fd3a:	b348      	cbz	r0, 800fd90 <ucdr_serialize_endian_double+0x11c>
 800fd3c:	2d01      	cmp	r5, #1
 800fd3e:	d02d      	beq.n	800fd9c <ucdr_serialize_endian_double+0x128>
 800fd40:	68a3      	ldr	r3, [r4, #8]
 800fd42:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fd46:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd4a:	7019      	strb	r1, [r3, #0]
 800fd4c:	68a3      	ldr	r3, [r4, #8]
 800fd4e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fd52:	705a      	strb	r2, [r3, #1]
 800fd54:	68a3      	ldr	r3, [r4, #8]
 800fd56:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd5a:	7099      	strb	r1, [r3, #2]
 800fd5c:	68a3      	ldr	r3, [r4, #8]
 800fd5e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800fd62:	70da      	strb	r2, [r3, #3]
 800fd64:	68a3      	ldr	r3, [r4, #8]
 800fd66:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fd6a:	7119      	strb	r1, [r3, #4]
 800fd6c:	68a3      	ldr	r3, [r4, #8]
 800fd6e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fd72:	715a      	strb	r2, [r3, #5]
 800fd74:	68a3      	ldr	r3, [r4, #8]
 800fd76:	f89d 2000 	ldrb.w	r2, [sp]
 800fd7a:	7199      	strb	r1, [r3, #6]
 800fd7c:	68a3      	ldr	r3, [r4, #8]
 800fd7e:	71da      	strb	r2, [r3, #7]
 800fd80:	2108      	movs	r1, #8
 800fd82:	68a2      	ldr	r2, [r4, #8]
 800fd84:	6923      	ldr	r3, [r4, #16]
 800fd86:	440a      	add	r2, r1
 800fd88:	440b      	add	r3, r1
 800fd8a:	60a2      	str	r2, [r4, #8]
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	7561      	strb	r1, [r4, #21]
 800fd90:	7da0      	ldrb	r0, [r4, #22]
 800fd92:	f080 0001 	eor.w	r0, r0, #1
 800fd96:	b003      	add	sp, #12
 800fd98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd9c:	466b      	mov	r3, sp
 800fd9e:	68a2      	ldr	r2, [r4, #8]
 800fda0:	cb03      	ldmia	r3!, {r0, r1}
 800fda2:	6010      	str	r0, [r2, #0]
 800fda4:	6051      	str	r1, [r2, #4]
 800fda6:	e7eb      	b.n	800fd80 <ucdr_serialize_endian_double+0x10c>
 800fda8:	68a2      	ldr	r2, [r4, #8]
 800fdaa:	6923      	ldr	r3, [r4, #16]
 800fdac:	7da0      	ldrb	r0, [r4, #22]
 800fdae:	1bd2      	subs	r2, r2, r7
 800fdb0:	f080 0001 	eor.w	r0, r0, #1
 800fdb4:	1bdf      	subs	r7, r3, r7
 800fdb6:	f884 8015 	strb.w	r8, [r4, #21]
 800fdba:	60a2      	str	r2, [r4, #8]
 800fdbc:	6127      	str	r7, [r4, #16]
 800fdbe:	b003      	add	sp, #12
 800fdc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdc4:	68a3      	ldr	r3, [r4, #8]
 800fdc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdca:	701a      	strb	r2, [r3, #0]
 800fdcc:	68a3      	ldr	r3, [r4, #8]
 800fdce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fdd2:	701a      	strb	r2, [r3, #0]
 800fdd4:	68a3      	ldr	r3, [r4, #8]
 800fdd6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdda:	701a      	strb	r2, [r3, #0]
 800fddc:	68a3      	ldr	r3, [r4, #8]
 800fdde:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	68a3      	ldr	r3, [r4, #8]
 800fde6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fdea:	701a      	strb	r2, [r3, #0]
 800fdec:	68a3      	ldr	r3, [r4, #8]
 800fdee:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fdf2:	701a      	strb	r2, [r3, #0]
 800fdf4:	68a3      	ldr	r3, [r4, #8]
 800fdf6:	f89d 2000 	ldrb.w	r2, [sp]
 800fdfa:	701a      	strb	r2, [r3, #0]
 800fdfc:	e78a      	b.n	800fd14 <ucdr_serialize_endian_double+0xa0>
 800fdfe:	466d      	mov	r5, sp
 800fe00:	463a      	mov	r2, r7
 800fe02:	4629      	mov	r1, r5
 800fe04:	4630      	mov	r0, r6
 800fe06:	f007 fff1 	bl	8017dec <memcpy>
 800fe0a:	464a      	mov	r2, r9
 800fe0c:	68a0      	ldr	r0, [r4, #8]
 800fe0e:	19e9      	adds	r1, r5, r7
 800fe10:	f007 ffec 	bl	8017dec <memcpy>
 800fe14:	e77e      	b.n	800fd14 <ucdr_serialize_endian_double+0xa0>
 800fe16:	bf00      	nop

0800fe18 <ucdr_deserialize_double>:
 800fe18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	2108      	movs	r1, #8
 800fe20:	4604      	mov	r4, r0
 800fe22:	f000 f9ef 	bl	8010204 <ucdr_buffer_alignment>
 800fe26:	4601      	mov	r1, r0
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fe2e:	f000 fa2f 	bl	8010290 <ucdr_advance_buffer>
 800fe32:	4620      	mov	r0, r4
 800fe34:	2108      	movs	r1, #8
 800fe36:	f000 f987 	bl	8010148 <ucdr_check_buffer_available_for>
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d151      	bne.n	800fee2 <ucdr_deserialize_double+0xca>
 800fe3e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800fe42:	42b3      	cmp	r3, r6
 800fe44:	d948      	bls.n	800fed8 <ucdr_deserialize_double+0xc0>
 800fe46:	6922      	ldr	r2, [r4, #16]
 800fe48:	1b9f      	subs	r7, r3, r6
 800fe4a:	443a      	add	r2, r7
 800fe4c:	f1c7 0808 	rsb	r8, r7, #8
 800fe50:	4641      	mov	r1, r8
 800fe52:	4620      	mov	r0, r4
 800fe54:	60a3      	str	r3, [r4, #8]
 800fe56:	6122      	str	r2, [r4, #16]
 800fe58:	f000 f982 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	d06d      	beq.n	800ff3c <ucdr_deserialize_double+0x124>
 800fe60:	7d23      	ldrb	r3, [r4, #20]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	f000 8093 	beq.w	800ff8e <ucdr_deserialize_double+0x176>
 800fe68:	79f3      	ldrb	r3, [r6, #7]
 800fe6a:	702b      	strb	r3, [r5, #0]
 800fe6c:	2f00      	cmp	r7, #0
 800fe6e:	d072      	beq.n	800ff56 <ucdr_deserialize_double+0x13e>
 800fe70:	79b2      	ldrb	r2, [r6, #6]
 800fe72:	2f01      	cmp	r7, #1
 800fe74:	f105 0302 	add.w	r3, r5, #2
 800fe78:	706a      	strb	r2, [r5, #1]
 800fe7a:	d070      	beq.n	800ff5e <ucdr_deserialize_double+0x146>
 800fe7c:	7972      	ldrb	r2, [r6, #5]
 800fe7e:	2f02      	cmp	r7, #2
 800fe80:	f105 0303 	add.w	r3, r5, #3
 800fe84:	70aa      	strb	r2, [r5, #2]
 800fe86:	d06e      	beq.n	800ff66 <ucdr_deserialize_double+0x14e>
 800fe88:	7932      	ldrb	r2, [r6, #4]
 800fe8a:	2f03      	cmp	r7, #3
 800fe8c:	f105 0304 	add.w	r3, r5, #4
 800fe90:	70ea      	strb	r2, [r5, #3]
 800fe92:	d06c      	beq.n	800ff6e <ucdr_deserialize_double+0x156>
 800fe94:	78f2      	ldrb	r2, [r6, #3]
 800fe96:	2f04      	cmp	r7, #4
 800fe98:	f105 0305 	add.w	r3, r5, #5
 800fe9c:	712a      	strb	r2, [r5, #4]
 800fe9e:	d06a      	beq.n	800ff76 <ucdr_deserialize_double+0x15e>
 800fea0:	78b2      	ldrb	r2, [r6, #2]
 800fea2:	2f05      	cmp	r7, #5
 800fea4:	f105 0306 	add.w	r3, r5, #6
 800fea8:	716a      	strb	r2, [r5, #5]
 800feaa:	d068      	beq.n	800ff7e <ucdr_deserialize_double+0x166>
 800feac:	7872      	ldrb	r2, [r6, #1]
 800feae:	2f06      	cmp	r7, #6
 800feb0:	f105 0307 	add.w	r3, r5, #7
 800feb4:	71aa      	strb	r2, [r5, #6]
 800feb6:	d066      	beq.n	800ff86 <ucdr_deserialize_double+0x16e>
 800feb8:	7833      	ldrb	r3, [r6, #0]
 800feba:	71eb      	strb	r3, [r5, #7]
 800febc:	2108      	movs	r1, #8
 800febe:	6923      	ldr	r3, [r4, #16]
 800fec0:	68a2      	ldr	r2, [r4, #8]
 800fec2:	7da0      	ldrb	r0, [r4, #22]
 800fec4:	440b      	add	r3, r1
 800fec6:	1bdf      	subs	r7, r3, r7
 800fec8:	4442      	add	r2, r8
 800feca:	7561      	strb	r1, [r4, #21]
 800fecc:	6127      	str	r7, [r4, #16]
 800fece:	60a2      	str	r2, [r4, #8]
 800fed0:	f080 0001 	eor.w	r0, r0, #1
 800fed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fed8:	2108      	movs	r1, #8
 800feda:	4620      	mov	r0, r4
 800fedc:	f000 f940 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800fee0:	b310      	cbz	r0, 800ff28 <ucdr_deserialize_double+0x110>
 800fee2:	7d23      	ldrb	r3, [r4, #20]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	d023      	beq.n	800ff32 <ucdr_deserialize_double+0x11a>
 800feea:	79db      	ldrb	r3, [r3, #7]
 800feec:	702b      	strb	r3, [r5, #0]
 800feee:	68a3      	ldr	r3, [r4, #8]
 800fef0:	799b      	ldrb	r3, [r3, #6]
 800fef2:	706b      	strb	r3, [r5, #1]
 800fef4:	68a3      	ldr	r3, [r4, #8]
 800fef6:	795b      	ldrb	r3, [r3, #5]
 800fef8:	70ab      	strb	r3, [r5, #2]
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	791b      	ldrb	r3, [r3, #4]
 800fefe:	70eb      	strb	r3, [r5, #3]
 800ff00:	68a3      	ldr	r3, [r4, #8]
 800ff02:	78db      	ldrb	r3, [r3, #3]
 800ff04:	712b      	strb	r3, [r5, #4]
 800ff06:	68a3      	ldr	r3, [r4, #8]
 800ff08:	789b      	ldrb	r3, [r3, #2]
 800ff0a:	716b      	strb	r3, [r5, #5]
 800ff0c:	68a3      	ldr	r3, [r4, #8]
 800ff0e:	785b      	ldrb	r3, [r3, #1]
 800ff10:	71ab      	strb	r3, [r5, #6]
 800ff12:	68a3      	ldr	r3, [r4, #8]
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	71eb      	strb	r3, [r5, #7]
 800ff18:	2108      	movs	r1, #8
 800ff1a:	68a2      	ldr	r2, [r4, #8]
 800ff1c:	6923      	ldr	r3, [r4, #16]
 800ff1e:	440a      	add	r2, r1
 800ff20:	440b      	add	r3, r1
 800ff22:	60a2      	str	r2, [r4, #8]
 800ff24:	6123      	str	r3, [r4, #16]
 800ff26:	7561      	strb	r1, [r4, #21]
 800ff28:	7da0      	ldrb	r0, [r4, #22]
 800ff2a:	f080 0001 	eor.w	r0, r0, #1
 800ff2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	602a      	str	r2, [r5, #0]
 800ff38:	606b      	str	r3, [r5, #4]
 800ff3a:	e7ed      	b.n	800ff18 <ucdr_deserialize_double+0x100>
 800ff3c:	68a2      	ldr	r2, [r4, #8]
 800ff3e:	6923      	ldr	r3, [r4, #16]
 800ff40:	7da0      	ldrb	r0, [r4, #22]
 800ff42:	1bd2      	subs	r2, r2, r7
 800ff44:	f884 9015 	strb.w	r9, [r4, #21]
 800ff48:	1bdf      	subs	r7, r3, r7
 800ff4a:	60a2      	str	r2, [r4, #8]
 800ff4c:	6127      	str	r7, [r4, #16]
 800ff4e:	f080 0001 	eor.w	r0, r0, #1
 800ff52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff56:	68a2      	ldr	r2, [r4, #8]
 800ff58:	1cab      	adds	r3, r5, #2
 800ff5a:	7992      	ldrb	r2, [r2, #6]
 800ff5c:	706a      	strb	r2, [r5, #1]
 800ff5e:	68a2      	ldr	r2, [r4, #8]
 800ff60:	7952      	ldrb	r2, [r2, #5]
 800ff62:	f803 2b01 	strb.w	r2, [r3], #1
 800ff66:	68a2      	ldr	r2, [r4, #8]
 800ff68:	7912      	ldrb	r2, [r2, #4]
 800ff6a:	f803 2b01 	strb.w	r2, [r3], #1
 800ff6e:	68a2      	ldr	r2, [r4, #8]
 800ff70:	78d2      	ldrb	r2, [r2, #3]
 800ff72:	f803 2b01 	strb.w	r2, [r3], #1
 800ff76:	68a2      	ldr	r2, [r4, #8]
 800ff78:	7892      	ldrb	r2, [r2, #2]
 800ff7a:	f803 2b01 	strb.w	r2, [r3], #1
 800ff7e:	68a2      	ldr	r2, [r4, #8]
 800ff80:	7852      	ldrb	r2, [r2, #1]
 800ff82:	f803 2b01 	strb.w	r2, [r3], #1
 800ff86:	68a2      	ldr	r2, [r4, #8]
 800ff88:	7812      	ldrb	r2, [r2, #0]
 800ff8a:	701a      	strb	r2, [r3, #0]
 800ff8c:	e796      	b.n	800febc <ucdr_deserialize_double+0xa4>
 800ff8e:	4631      	mov	r1, r6
 800ff90:	463a      	mov	r2, r7
 800ff92:	4628      	mov	r0, r5
 800ff94:	f007 ff2a 	bl	8017dec <memcpy>
 800ff98:	4642      	mov	r2, r8
 800ff9a:	68a1      	ldr	r1, [r4, #8]
 800ff9c:	19e8      	adds	r0, r5, r7
 800ff9e:	f007 ff25 	bl	8017dec <memcpy>
 800ffa2:	e78b      	b.n	800febc <ucdr_deserialize_double+0xa4>

0800ffa4 <ucdr_deserialize_endian_double>:
 800ffa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa8:	460e      	mov	r6, r1
 800ffaa:	2108      	movs	r1, #8
 800ffac:	4604      	mov	r4, r0
 800ffae:	4615      	mov	r5, r2
 800ffb0:	f000 f928 	bl	8010204 <ucdr_buffer_alignment>
 800ffb4:	4601      	mov	r1, r0
 800ffb6:	4620      	mov	r0, r4
 800ffb8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ffbc:	f000 f968 	bl	8010290 <ucdr_advance_buffer>
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	2108      	movs	r1, #8
 800ffc4:	f000 f8c0 	bl	8010148 <ucdr_check_buffer_available_for>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d159      	bne.n	8010080 <ucdr_deserialize_endian_double+0xdc>
 800ffcc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ffd0:	42bb      	cmp	r3, r7
 800ffd2:	d950      	bls.n	8010076 <ucdr_deserialize_endian_double+0xd2>
 800ffd4:	6922      	ldr	r2, [r4, #16]
 800ffd6:	eba3 0807 	sub.w	r8, r3, r7
 800ffda:	4442      	add	r2, r8
 800ffdc:	f1c8 0a08 	rsb	sl, r8, #8
 800ffe0:	4651      	mov	r1, sl
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	60a3      	str	r3, [r4, #8]
 800ffe6:	6122      	str	r2, [r4, #16]
 800ffe8:	f000 f8ba 	bl	8010160 <ucdr_check_final_buffer_behavior>
 800ffec:	2800      	cmp	r0, #0
 800ffee:	d073      	beq.n	80100d8 <ucdr_deserialize_endian_double+0x134>
 800fff0:	2e01      	cmp	r6, #1
 800fff2:	f000 809c 	beq.w	801012e <ucdr_deserialize_endian_double+0x18a>
 800fff6:	79fb      	ldrb	r3, [r7, #7]
 800fff8:	702b      	strb	r3, [r5, #0]
 800fffa:	f1b8 0f00 	cmp.w	r8, #0
 800fffe:	d07a      	beq.n	80100f6 <ucdr_deserialize_endian_double+0x152>
 8010000:	79ba      	ldrb	r2, [r7, #6]
 8010002:	f1b8 0f01 	cmp.w	r8, #1
 8010006:	f105 0302 	add.w	r3, r5, #2
 801000a:	706a      	strb	r2, [r5, #1]
 801000c:	d077      	beq.n	80100fe <ucdr_deserialize_endian_double+0x15a>
 801000e:	797a      	ldrb	r2, [r7, #5]
 8010010:	f1b8 0f02 	cmp.w	r8, #2
 8010014:	f105 0303 	add.w	r3, r5, #3
 8010018:	70aa      	strb	r2, [r5, #2]
 801001a:	d074      	beq.n	8010106 <ucdr_deserialize_endian_double+0x162>
 801001c:	793a      	ldrb	r2, [r7, #4]
 801001e:	f1b8 0f03 	cmp.w	r8, #3
 8010022:	f105 0304 	add.w	r3, r5, #4
 8010026:	70ea      	strb	r2, [r5, #3]
 8010028:	d071      	beq.n	801010e <ucdr_deserialize_endian_double+0x16a>
 801002a:	78fa      	ldrb	r2, [r7, #3]
 801002c:	f1b8 0f04 	cmp.w	r8, #4
 8010030:	f105 0305 	add.w	r3, r5, #5
 8010034:	712a      	strb	r2, [r5, #4]
 8010036:	d06e      	beq.n	8010116 <ucdr_deserialize_endian_double+0x172>
 8010038:	78ba      	ldrb	r2, [r7, #2]
 801003a:	f1b8 0f05 	cmp.w	r8, #5
 801003e:	f105 0306 	add.w	r3, r5, #6
 8010042:	716a      	strb	r2, [r5, #5]
 8010044:	d06b      	beq.n	801011e <ucdr_deserialize_endian_double+0x17a>
 8010046:	787a      	ldrb	r2, [r7, #1]
 8010048:	f1b8 0f06 	cmp.w	r8, #6
 801004c:	f105 0307 	add.w	r3, r5, #7
 8010050:	71aa      	strb	r2, [r5, #6]
 8010052:	d068      	beq.n	8010126 <ucdr_deserialize_endian_double+0x182>
 8010054:	783b      	ldrb	r3, [r7, #0]
 8010056:	71eb      	strb	r3, [r5, #7]
 8010058:	2108      	movs	r1, #8
 801005a:	6923      	ldr	r3, [r4, #16]
 801005c:	68a2      	ldr	r2, [r4, #8]
 801005e:	7da0      	ldrb	r0, [r4, #22]
 8010060:	440b      	add	r3, r1
 8010062:	eba3 0308 	sub.w	r3, r3, r8
 8010066:	4452      	add	r2, sl
 8010068:	7561      	strb	r1, [r4, #21]
 801006a:	6123      	str	r3, [r4, #16]
 801006c:	60a2      	str	r2, [r4, #8]
 801006e:	f080 0001 	eor.w	r0, r0, #1
 8010072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010076:	2108      	movs	r1, #8
 8010078:	4620      	mov	r0, r4
 801007a:	f000 f871 	bl	8010160 <ucdr_check_final_buffer_behavior>
 801007e:	b308      	cbz	r0, 80100c4 <ucdr_deserialize_endian_double+0x120>
 8010080:	2e01      	cmp	r6, #1
 8010082:	68a3      	ldr	r3, [r4, #8]
 8010084:	d023      	beq.n	80100ce <ucdr_deserialize_endian_double+0x12a>
 8010086:	79db      	ldrb	r3, [r3, #7]
 8010088:	702b      	strb	r3, [r5, #0]
 801008a:	68a3      	ldr	r3, [r4, #8]
 801008c:	799b      	ldrb	r3, [r3, #6]
 801008e:	706b      	strb	r3, [r5, #1]
 8010090:	68a3      	ldr	r3, [r4, #8]
 8010092:	795b      	ldrb	r3, [r3, #5]
 8010094:	70ab      	strb	r3, [r5, #2]
 8010096:	68a3      	ldr	r3, [r4, #8]
 8010098:	791b      	ldrb	r3, [r3, #4]
 801009a:	70eb      	strb	r3, [r5, #3]
 801009c:	68a3      	ldr	r3, [r4, #8]
 801009e:	78db      	ldrb	r3, [r3, #3]
 80100a0:	712b      	strb	r3, [r5, #4]
 80100a2:	68a3      	ldr	r3, [r4, #8]
 80100a4:	789b      	ldrb	r3, [r3, #2]
 80100a6:	716b      	strb	r3, [r5, #5]
 80100a8:	68a3      	ldr	r3, [r4, #8]
 80100aa:	785b      	ldrb	r3, [r3, #1]
 80100ac:	71ab      	strb	r3, [r5, #6]
 80100ae:	68a3      	ldr	r3, [r4, #8]
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	71eb      	strb	r3, [r5, #7]
 80100b4:	2108      	movs	r1, #8
 80100b6:	68a2      	ldr	r2, [r4, #8]
 80100b8:	6923      	ldr	r3, [r4, #16]
 80100ba:	440a      	add	r2, r1
 80100bc:	440b      	add	r3, r1
 80100be:	60a2      	str	r2, [r4, #8]
 80100c0:	6123      	str	r3, [r4, #16]
 80100c2:	7561      	strb	r1, [r4, #21]
 80100c4:	7da0      	ldrb	r0, [r4, #22]
 80100c6:	f080 0001 	eor.w	r0, r0, #1
 80100ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	602a      	str	r2, [r5, #0]
 80100d4:	606b      	str	r3, [r5, #4]
 80100d6:	e7ed      	b.n	80100b4 <ucdr_deserialize_endian_double+0x110>
 80100d8:	68a2      	ldr	r2, [r4, #8]
 80100da:	6923      	ldr	r3, [r4, #16]
 80100dc:	7da0      	ldrb	r0, [r4, #22]
 80100de:	eba2 0208 	sub.w	r2, r2, r8
 80100e2:	eba3 0308 	sub.w	r3, r3, r8
 80100e6:	f884 9015 	strb.w	r9, [r4, #21]
 80100ea:	60a2      	str	r2, [r4, #8]
 80100ec:	6123      	str	r3, [r4, #16]
 80100ee:	f080 0001 	eor.w	r0, r0, #1
 80100f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f6:	68a2      	ldr	r2, [r4, #8]
 80100f8:	1cab      	adds	r3, r5, #2
 80100fa:	7992      	ldrb	r2, [r2, #6]
 80100fc:	706a      	strb	r2, [r5, #1]
 80100fe:	68a2      	ldr	r2, [r4, #8]
 8010100:	7952      	ldrb	r2, [r2, #5]
 8010102:	f803 2b01 	strb.w	r2, [r3], #1
 8010106:	68a2      	ldr	r2, [r4, #8]
 8010108:	7912      	ldrb	r2, [r2, #4]
 801010a:	f803 2b01 	strb.w	r2, [r3], #1
 801010e:	68a2      	ldr	r2, [r4, #8]
 8010110:	78d2      	ldrb	r2, [r2, #3]
 8010112:	f803 2b01 	strb.w	r2, [r3], #1
 8010116:	68a2      	ldr	r2, [r4, #8]
 8010118:	7892      	ldrb	r2, [r2, #2]
 801011a:	f803 2b01 	strb.w	r2, [r3], #1
 801011e:	68a2      	ldr	r2, [r4, #8]
 8010120:	7852      	ldrb	r2, [r2, #1]
 8010122:	f803 2b01 	strb.w	r2, [r3], #1
 8010126:	68a2      	ldr	r2, [r4, #8]
 8010128:	7812      	ldrb	r2, [r2, #0]
 801012a:	701a      	strb	r2, [r3, #0]
 801012c:	e794      	b.n	8010058 <ucdr_deserialize_endian_double+0xb4>
 801012e:	4639      	mov	r1, r7
 8010130:	4642      	mov	r2, r8
 8010132:	4628      	mov	r0, r5
 8010134:	f007 fe5a 	bl	8017dec <memcpy>
 8010138:	4652      	mov	r2, sl
 801013a:	68a1      	ldr	r1, [r4, #8]
 801013c:	eb05 0008 	add.w	r0, r5, r8
 8010140:	f007 fe54 	bl	8017dec <memcpy>
 8010144:	e788      	b.n	8010058 <ucdr_deserialize_endian_double+0xb4>
 8010146:	bf00      	nop

08010148 <ucdr_check_buffer_available_for>:
 8010148:	7d83      	ldrb	r3, [r0, #22]
 801014a:	b93b      	cbnz	r3, 801015c <ucdr_check_buffer_available_for+0x14>
 801014c:	6883      	ldr	r3, [r0, #8]
 801014e:	6840      	ldr	r0, [r0, #4]
 8010150:	4419      	add	r1, r3
 8010152:	4288      	cmp	r0, r1
 8010154:	bf34      	ite	cc
 8010156:	2000      	movcc	r0, #0
 8010158:	2001      	movcs	r0, #1
 801015a:	4770      	bx	lr
 801015c:	2000      	movs	r0, #0
 801015e:	4770      	bx	lr

08010160 <ucdr_check_final_buffer_behavior>:
 8010160:	7d83      	ldrb	r3, [r0, #22]
 8010162:	b943      	cbnz	r3, 8010176 <ucdr_check_final_buffer_behavior+0x16>
 8010164:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010168:	4291      	cmp	r1, r2
 801016a:	b510      	push	{r4, lr}
 801016c:	4604      	mov	r4, r0
 801016e:	d205      	bcs.n	801017c <ucdr_check_final_buffer_behavior+0x1c>
 8010170:	2301      	movs	r3, #1
 8010172:	4618      	mov	r0, r3
 8010174:	bd10      	pop	{r4, pc}
 8010176:	2300      	movs	r3, #0
 8010178:	4618      	mov	r0, r3
 801017a:	4770      	bx	lr
 801017c:	6982      	ldr	r2, [r0, #24]
 801017e:	b13a      	cbz	r2, 8010190 <ucdr_check_final_buffer_behavior+0x30>
 8010180:	69c1      	ldr	r1, [r0, #28]
 8010182:	4790      	blx	r2
 8010184:	f080 0301 	eor.w	r3, r0, #1
 8010188:	b2db      	uxtb	r3, r3
 801018a:	75a0      	strb	r0, [r4, #22]
 801018c:	4618      	mov	r0, r3
 801018e:	bd10      	pop	{r4, pc}
 8010190:	2001      	movs	r0, #1
 8010192:	75a0      	strb	r0, [r4, #22]
 8010194:	e7fa      	b.n	801018c <ucdr_check_final_buffer_behavior+0x2c>
 8010196:	bf00      	nop

08010198 <ucdr_set_on_full_buffer_callback>:
 8010198:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801019c:	4770      	bx	lr
 801019e:	bf00      	nop

080101a0 <ucdr_init_buffer_origin_offset_endian>:
 80101a0:	b430      	push	{r4, r5}
 80101a2:	2400      	movs	r4, #0
 80101a4:	9d02      	ldr	r5, [sp, #8]
 80101a6:	440a      	add	r2, r1
 80101a8:	6001      	str	r1, [r0, #0]
 80101aa:	60c3      	str	r3, [r0, #12]
 80101ac:	4429      	add	r1, r5
 80101ae:	441d      	add	r5, r3
 80101b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80101b4:	e9c0 4406 	strd	r4, r4, [r0, #24]
 80101b8:	6105      	str	r5, [r0, #16]
 80101ba:	7544      	strb	r4, [r0, #21]
 80101bc:	7584      	strb	r4, [r0, #22]
 80101be:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80101c2:	bc30      	pop	{r4, r5}
 80101c4:	7503      	strb	r3, [r0, #20]
 80101c6:	4770      	bx	lr

080101c8 <ucdr_init_buffer_origin_offset>:
 80101c8:	b530      	push	{r4, r5, lr}
 80101ca:	2501      	movs	r5, #1
 80101cc:	b083      	sub	sp, #12
 80101ce:	9c06      	ldr	r4, [sp, #24]
 80101d0:	e9cd 4500 	strd	r4, r5, [sp]
 80101d4:	f7ff ffe4 	bl	80101a0 <ucdr_init_buffer_origin_offset_endian>
 80101d8:	b003      	add	sp, #12
 80101da:	bd30      	pop	{r4, r5, pc}

080101dc <ucdr_init_buffer_origin>:
 80101dc:	b510      	push	{r4, lr}
 80101de:	2400      	movs	r4, #0
 80101e0:	b082      	sub	sp, #8
 80101e2:	9400      	str	r4, [sp, #0]
 80101e4:	f7ff fff0 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 80101e8:	b002      	add	sp, #8
 80101ea:	bd10      	pop	{r4, pc}

080101ec <ucdr_init_buffer>:
 80101ec:	2300      	movs	r3, #0
 80101ee:	f7ff bff5 	b.w	80101dc <ucdr_init_buffer_origin>
 80101f2:	bf00      	nop

080101f4 <ucdr_alignment>:
 80101f4:	fbb0 f3f1 	udiv	r3, r0, r1
 80101f8:	fb03 0311 	mls	r3, r3, r1, r0
 80101fc:	1e48      	subs	r0, r1, #1
 80101fe:	1ac9      	subs	r1, r1, r3
 8010200:	4008      	ands	r0, r1
 8010202:	4770      	bx	lr

08010204 <ucdr_buffer_alignment>:
 8010204:	7d43      	ldrb	r3, [r0, #21]
 8010206:	428b      	cmp	r3, r1
 8010208:	d209      	bcs.n	801021e <ucdr_buffer_alignment+0x1a>
 801020a:	6903      	ldr	r3, [r0, #16]
 801020c:	1e4a      	subs	r2, r1, #1
 801020e:	fbb3 f0f1 	udiv	r0, r3, r1
 8010212:	fb01 3010 	mls	r0, r1, r0, r3
 8010216:	1a09      	subs	r1, r1, r0
 8010218:	ea01 0002 	and.w	r0, r1, r2
 801021c:	4770      	bx	lr
 801021e:	2000      	movs	r0, #0
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop

08010224 <ucdr_align_to>:
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	4604      	mov	r4, r0
 8010228:	460d      	mov	r5, r1
 801022a:	f7ff ffeb 	bl	8010204 <ucdr_buffer_alignment>
 801022e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8010232:	4402      	add	r2, r0
 8010234:	4293      	cmp	r3, r2
 8010236:	bf28      	it	cs
 8010238:	4613      	movcs	r3, r2
 801023a:	6922      	ldr	r2, [r4, #16]
 801023c:	7565      	strb	r5, [r4, #21]
 801023e:	4410      	add	r0, r2
 8010240:	6120      	str	r0, [r4, #16]
 8010242:	60a3      	str	r3, [r4, #8]
 8010244:	bd38      	pop	{r3, r4, r5, pc}
 8010246:	bf00      	nop

08010248 <ucdr_buffer_length>:
 8010248:	6882      	ldr	r2, [r0, #8]
 801024a:	6800      	ldr	r0, [r0, #0]
 801024c:	1a10      	subs	r0, r2, r0
 801024e:	4770      	bx	lr

08010250 <ucdr_buffer_remaining>:
 8010250:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010254:	1a10      	subs	r0, r2, r0
 8010256:	4770      	bx	lr

08010258 <ucdr_check_final_buffer_behavior_array>:
 8010258:	b538      	push	{r3, r4, r5, lr}
 801025a:	7d83      	ldrb	r3, [r0, #22]
 801025c:	b963      	cbnz	r3, 8010278 <ucdr_check_final_buffer_behavior_array+0x20>
 801025e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010262:	429a      	cmp	r2, r3
 8010264:	4604      	mov	r4, r0
 8010266:	460d      	mov	r5, r1
 8010268:	d308      	bcc.n	801027c <ucdr_check_final_buffer_behavior_array+0x24>
 801026a:	b139      	cbz	r1, 801027c <ucdr_check_final_buffer_behavior_array+0x24>
 801026c:	6983      	ldr	r3, [r0, #24]
 801026e:	b163      	cbz	r3, 801028a <ucdr_check_final_buffer_behavior_array+0x32>
 8010270:	69c1      	ldr	r1, [r0, #28]
 8010272:	4798      	blx	r3
 8010274:	75a0      	strb	r0, [r4, #22]
 8010276:	b108      	cbz	r0, 801027c <ucdr_check_final_buffer_behavior_array+0x24>
 8010278:	2000      	movs	r0, #0
 801027a:	bd38      	pop	{r3, r4, r5, pc}
 801027c:	4620      	mov	r0, r4
 801027e:	f7ff ffe7 	bl	8010250 <ucdr_buffer_remaining>
 8010282:	42a8      	cmp	r0, r5
 8010284:	bf28      	it	cs
 8010286:	4628      	movcs	r0, r5
 8010288:	bd38      	pop	{r3, r4, r5, pc}
 801028a:	2301      	movs	r3, #1
 801028c:	7583      	strb	r3, [r0, #22]
 801028e:	e7f3      	b.n	8010278 <ucdr_check_final_buffer_behavior_array+0x20>

08010290 <ucdr_advance_buffer>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4604      	mov	r4, r0
 8010294:	460d      	mov	r5, r1
 8010296:	f7ff ff57 	bl	8010148 <ucdr_check_buffer_available_for>
 801029a:	b178      	cbz	r0, 80102bc <ucdr_advance_buffer+0x2c>
 801029c:	68a3      	ldr	r3, [r4, #8]
 801029e:	6921      	ldr	r1, [r4, #16]
 80102a0:	442b      	add	r3, r5
 80102a2:	60a3      	str	r3, [r4, #8]
 80102a4:	2301      	movs	r3, #1
 80102a6:	4429      	add	r1, r5
 80102a8:	7563      	strb	r3, [r4, #21]
 80102aa:	6121      	str	r1, [r4, #16]
 80102ac:	bd38      	pop	{r3, r4, r5, pc}
 80102ae:	68a2      	ldr	r2, [r4, #8]
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	4402      	add	r2, r0
 80102b4:	4403      	add	r3, r0
 80102b6:	1a2d      	subs	r5, r5, r0
 80102b8:	60a2      	str	r2, [r4, #8]
 80102ba:	6123      	str	r3, [r4, #16]
 80102bc:	2201      	movs	r2, #1
 80102be:	4629      	mov	r1, r5
 80102c0:	4620      	mov	r0, r4
 80102c2:	f7ff ffc9 	bl	8010258 <ucdr_check_final_buffer_behavior_array>
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d1f1      	bne.n	80102ae <ucdr_advance_buffer+0x1e>
 80102ca:	2301      	movs	r3, #1
 80102cc:	7563      	strb	r3, [r4, #21]
 80102ce:	bd38      	pop	{r3, r4, r5, pc}

080102d0 <ucdr_serialize_sequence_char>:
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	4615      	mov	r5, r2
 80102d4:	460e      	mov	r6, r1
 80102d6:	7d01      	ldrb	r1, [r0, #20]
 80102d8:	4604      	mov	r4, r0
 80102da:	f7fe fdf7 	bl	800eecc <ucdr_serialize_endian_uint32_t>
 80102de:	b90d      	cbnz	r5, 80102e4 <ucdr_serialize_sequence_char+0x14>
 80102e0:	2001      	movs	r0, #1
 80102e2:	bd70      	pop	{r4, r5, r6, pc}
 80102e4:	462b      	mov	r3, r5
 80102e6:	4632      	mov	r2, r6
 80102e8:	4620      	mov	r0, r4
 80102ea:	7d21      	ldrb	r1, [r4, #20]
 80102ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102f0:	f7fd bf32 	b.w	800e158 <ucdr_serialize_endian_array_char>

080102f4 <ucdr_deserialize_sequence_char>:
 80102f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102f8:	461d      	mov	r5, r3
 80102fa:	4616      	mov	r6, r2
 80102fc:	460f      	mov	r7, r1
 80102fe:	461a      	mov	r2, r3
 8010300:	7d01      	ldrb	r1, [r0, #20]
 8010302:	4604      	mov	r4, r0
 8010304:	f7fe ff0a 	bl	800f11c <ucdr_deserialize_endian_uint32_t>
 8010308:	682b      	ldr	r3, [r5, #0]
 801030a:	429e      	cmp	r6, r3
 801030c:	bf3c      	itt	cc
 801030e:	2201      	movcc	r2, #1
 8010310:	75a2      	strbcc	r2, [r4, #22]
 8010312:	b913      	cbnz	r3, 801031a <ucdr_deserialize_sequence_char+0x26>
 8010314:	2001      	movs	r0, #1
 8010316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801031a:	463a      	mov	r2, r7
 801031c:	4620      	mov	r0, r4
 801031e:	7d21      	ldrb	r1, [r4, #20]
 8010320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010324:	f7fd bf4a 	b.w	800e1bc <ucdr_deserialize_endian_array_char>

08010328 <ucdr_serialize_sequence_uint8_t>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	4615      	mov	r5, r2
 801032c:	460e      	mov	r6, r1
 801032e:	7d01      	ldrb	r1, [r0, #20]
 8010330:	4604      	mov	r4, r0
 8010332:	f7fe fdcb 	bl	800eecc <ucdr_serialize_endian_uint32_t>
 8010336:	b90d      	cbnz	r5, 801033c <ucdr_serialize_sequence_uint8_t+0x14>
 8010338:	2001      	movs	r0, #1
 801033a:	bd70      	pop	{r4, r5, r6, pc}
 801033c:	462b      	mov	r3, r5
 801033e:	4632      	mov	r2, r6
 8010340:	4620      	mov	r0, r4
 8010342:	7d21      	ldrb	r1, [r4, #20]
 8010344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010348:	f7fd bf9c 	b.w	800e284 <ucdr_serialize_endian_array_uint8_t>

0801034c <ucdr_deserialize_sequence_uint8_t>:
 801034c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010350:	461d      	mov	r5, r3
 8010352:	4616      	mov	r6, r2
 8010354:	460f      	mov	r7, r1
 8010356:	461a      	mov	r2, r3
 8010358:	7d01      	ldrb	r1, [r0, #20]
 801035a:	4604      	mov	r4, r0
 801035c:	f7fe fede 	bl	800f11c <ucdr_deserialize_endian_uint32_t>
 8010360:	682b      	ldr	r3, [r5, #0]
 8010362:	429e      	cmp	r6, r3
 8010364:	bf3c      	itt	cc
 8010366:	2201      	movcc	r2, #1
 8010368:	75a2      	strbcc	r2, [r4, #22]
 801036a:	b913      	cbnz	r3, 8010372 <ucdr_deserialize_sequence_uint8_t+0x26>
 801036c:	2001      	movs	r0, #1
 801036e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010372:	463a      	mov	r2, r7
 8010374:	4620      	mov	r0, r4
 8010376:	7d21      	ldrb	r1, [r4, #20]
 8010378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801037c:	f7fd bfe6 	b.w	800e34c <ucdr_deserialize_endian_array_uint8_t>

08010380 <ucdr_serialize_sequence_uint16_t>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	4615      	mov	r5, r2
 8010384:	460e      	mov	r6, r1
 8010386:	7d01      	ldrb	r1, [r0, #20]
 8010388:	4604      	mov	r4, r0
 801038a:	f7fe fd9f 	bl	800eecc <ucdr_serialize_endian_uint32_t>
 801038e:	b90d      	cbnz	r5, 8010394 <ucdr_serialize_sequence_uint16_t+0x14>
 8010390:	2001      	movs	r0, #1
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	462b      	mov	r3, r5
 8010396:	4632      	mov	r2, r6
 8010398:	4620      	mov	r0, r4
 801039a:	7d21      	ldrb	r1, [r4, #20]
 801039c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103a0:	f7fe b806 	b.w	800e3b0 <ucdr_serialize_endian_array_uint16_t>

080103a4 <ucdr_deserialize_sequence_uint16_t>:
 80103a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a8:	461d      	mov	r5, r3
 80103aa:	4616      	mov	r6, r2
 80103ac:	460f      	mov	r7, r1
 80103ae:	461a      	mov	r2, r3
 80103b0:	7d01      	ldrb	r1, [r0, #20]
 80103b2:	4604      	mov	r4, r0
 80103b4:	f7fe feb2 	bl	800f11c <ucdr_deserialize_endian_uint32_t>
 80103b8:	682b      	ldr	r3, [r5, #0]
 80103ba:	429e      	cmp	r6, r3
 80103bc:	bf3c      	itt	cc
 80103be:	2201      	movcc	r2, #1
 80103c0:	75a2      	strbcc	r2, [r4, #22]
 80103c2:	b913      	cbnz	r3, 80103ca <ucdr_deserialize_sequence_uint16_t+0x26>
 80103c4:	2001      	movs	r0, #1
 80103c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ca:	463a      	mov	r2, r7
 80103cc:	4620      	mov	r0, r4
 80103ce:	7d21      	ldrb	r1, [r4, #20]
 80103d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103d4:	f7fe b842 	b.w	800e45c <ucdr_deserialize_endian_array_uint16_t>

080103d8 <ucdr_serialize_sequence_float>:
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	4615      	mov	r5, r2
 80103dc:	460e      	mov	r6, r1
 80103de:	7d01      	ldrb	r1, [r0, #20]
 80103e0:	4604      	mov	r4, r0
 80103e2:	f7fe fd73 	bl	800eecc <ucdr_serialize_endian_uint32_t>
 80103e6:	b90d      	cbnz	r5, 80103ec <ucdr_serialize_sequence_float+0x14>
 80103e8:	2001      	movs	r0, #1
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	462b      	mov	r3, r5
 80103ee:	4632      	mov	r2, r6
 80103f0:	4620      	mov	r0, r4
 80103f2:	7d21      	ldrb	r1, [r4, #20]
 80103f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103f8:	f7fe b886 	b.w	800e508 <ucdr_serialize_endian_array_float>

080103fc <ucdr_deserialize_sequence_float>:
 80103fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010400:	461d      	mov	r5, r3
 8010402:	4616      	mov	r6, r2
 8010404:	460f      	mov	r7, r1
 8010406:	461a      	mov	r2, r3
 8010408:	7d01      	ldrb	r1, [r0, #20]
 801040a:	4604      	mov	r4, r0
 801040c:	f7fe fe86 	bl	800f11c <ucdr_deserialize_endian_uint32_t>
 8010410:	682b      	ldr	r3, [r5, #0]
 8010412:	429e      	cmp	r6, r3
 8010414:	bf3c      	itt	cc
 8010416:	2201      	movcc	r2, #1
 8010418:	75a2      	strbcc	r2, [r4, #22]
 801041a:	b913      	cbnz	r3, 8010422 <ucdr_deserialize_sequence_float+0x26>
 801041c:	2001      	movs	r0, #1
 801041e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010422:	463a      	mov	r2, r7
 8010424:	4620      	mov	r0, r4
 8010426:	7d21      	ldrb	r1, [r4, #20]
 8010428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801042c:	f7fe b8c2 	b.w	800e5b4 <ucdr_deserialize_endian_array_float>

08010430 <ucdr_serialize_sequence_double>:
 8010430:	b570      	push	{r4, r5, r6, lr}
 8010432:	4615      	mov	r5, r2
 8010434:	460e      	mov	r6, r1
 8010436:	7d01      	ldrb	r1, [r0, #20]
 8010438:	4604      	mov	r4, r0
 801043a:	f7fe fd47 	bl	800eecc <ucdr_serialize_endian_uint32_t>
 801043e:	b90d      	cbnz	r5, 8010444 <ucdr_serialize_sequence_double+0x14>
 8010440:	2001      	movs	r0, #1
 8010442:	bd70      	pop	{r4, r5, r6, pc}
 8010444:	462b      	mov	r3, r5
 8010446:	4632      	mov	r2, r6
 8010448:	4620      	mov	r0, r4
 801044a:	7d21      	ldrb	r1, [r4, #20]
 801044c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010450:	f7fe b95c 	b.w	800e70c <ucdr_serialize_endian_array_double>

08010454 <ucdr_deserialize_sequence_double>:
 8010454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010458:	461d      	mov	r5, r3
 801045a:	4616      	mov	r6, r2
 801045c:	460f      	mov	r7, r1
 801045e:	461a      	mov	r2, r3
 8010460:	7d01      	ldrb	r1, [r0, #20]
 8010462:	4604      	mov	r4, r0
 8010464:	f7fe fe5a 	bl	800f11c <ucdr_deserialize_endian_uint32_t>
 8010468:	682b      	ldr	r3, [r5, #0]
 801046a:	429e      	cmp	r6, r3
 801046c:	bf3c      	itt	cc
 801046e:	2201      	movcc	r2, #1
 8010470:	75a2      	strbcc	r2, [r4, #22]
 8010472:	b913      	cbnz	r3, 801047a <ucdr_deserialize_sequence_double+0x26>
 8010474:	2001      	movs	r0, #1
 8010476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801047a:	463a      	mov	r2, r7
 801047c:	4620      	mov	r0, r4
 801047e:	7d21      	ldrb	r1, [r4, #20]
 8010480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010484:	f7fe b9ec 	b.w	800e860 <ucdr_deserialize_endian_array_double>

08010488 <uxr_buffer_delete_entity>:
 8010488:	b510      	push	{r4, lr}
 801048a:	2303      	movs	r3, #3
 801048c:	2400      	movs	r4, #0
 801048e:	b08e      	sub	sp, #56	; 0x38
 8010490:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	2204      	movs	r2, #4
 8010498:	ab06      	add	r3, sp, #24
 801049a:	4604      	mov	r4, r0
 801049c:	9103      	str	r1, [sp, #12]
 801049e:	f001 fa17 	bl	80118d0 <uxr_prepare_stream_to_write_submessage>
 80104a2:	b918      	cbnz	r0, 80104ac <uxr_buffer_delete_entity+0x24>
 80104a4:	4604      	mov	r4, r0
 80104a6:	4620      	mov	r0, r4
 80104a8:	b00e      	add	sp, #56	; 0x38
 80104aa:	bd10      	pop	{r4, pc}
 80104ac:	9902      	ldr	r1, [sp, #8]
 80104ae:	aa05      	add	r2, sp, #20
 80104b0:	4620      	mov	r0, r4
 80104b2:	f001 fb3f 	bl	8011b34 <uxr_init_base_object_request>
 80104b6:	4604      	mov	r4, r0
 80104b8:	a905      	add	r1, sp, #20
 80104ba:	a806      	add	r0, sp, #24
 80104bc:	f003 f88a 	bl	80135d4 <uxr_serialize_DELETE_Payload>
 80104c0:	4620      	mov	r0, r4
 80104c2:	b00e      	add	sp, #56	; 0x38
 80104c4:	bd10      	pop	{r4, pc}
 80104c6:	bf00      	nop

080104c8 <uxr_common_create_entity>:
 80104c8:	b530      	push	{r4, r5, lr}
 80104ca:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80104ce:	b08d      	sub	sp, #52	; 0x34
 80104d0:	2d01      	cmp	r5, #1
 80104d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80104d6:	bf18      	it	ne
 80104d8:	2200      	movne	r2, #0
 80104da:	4604      	mov	r4, r0
 80104dc:	f04f 0101 	mov.w	r1, #1
 80104e0:	bf08      	it	eq
 80104e2:	f003 0201 	andeq.w	r2, r3, #1
 80104e6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80104ea:	330e      	adds	r3, #14
 80104ec:	441a      	add	r2, r3
 80104ee:	e9cd 1000 	strd	r1, r0, [sp]
 80104f2:	b292      	uxth	r2, r2
 80104f4:	4620      	mov	r0, r4
 80104f6:	9903      	ldr	r1, [sp, #12]
 80104f8:	ab04      	add	r3, sp, #16
 80104fa:	f001 f9e9 	bl	80118d0 <uxr_prepare_stream_to_write_submessage>
 80104fe:	b918      	cbnz	r0, 8010508 <uxr_common_create_entity+0x40>
 8010500:	4604      	mov	r4, r0
 8010502:	4620      	mov	r0, r4
 8010504:	b00d      	add	sp, #52	; 0x34
 8010506:	bd30      	pop	{r4, r5, pc}
 8010508:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801050a:	9902      	ldr	r1, [sp, #8]
 801050c:	4620      	mov	r0, r4
 801050e:	f001 fb11 	bl	8011b34 <uxr_init_base_object_request>
 8010512:	4604      	mov	r4, r0
 8010514:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010516:	a804      	add	r0, sp, #16
 8010518:	f002 ffc4 	bl	80134a4 <uxr_serialize_CREATE_Payload>
 801051c:	4620      	mov	r0, r4
 801051e:	b00d      	add	sp, #52	; 0x34
 8010520:	bd30      	pop	{r4, r5, pc}
 8010522:	bf00      	nop

08010524 <uxr_buffer_create_participant_bin>:
 8010524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010528:	f04f 0c00 	mov.w	ip, #0
 801052c:	f04f 0e03 	mov.w	lr, #3
 8010530:	2701      	movs	r7, #1
 8010532:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010536:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8010538:	ac11      	add	r4, sp, #68	; 0x44
 801053a:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 801053e:	f884 e008 	strb.w	lr, [r4, #8]
 8010542:	7127      	strb	r7, [r4, #4]
 8010544:	4605      	mov	r5, r0
 8010546:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801054a:	f89d 8274 	ldrb.w	r8, [sp, #628]	; 0x274
 801054e:	f88d c014 	strb.w	ip, [sp, #20]
 8010552:	b1de      	cbz	r6, 801058c <uxr_buffer_create_participant_bin+0x68>
 8010554:	f88d 701c 	strb.w	r7, [sp, #28]
 8010558:	9608      	str	r6, [sp, #32]
 801055a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801055e:	a809      	add	r0, sp, #36	; 0x24
 8010560:	a915      	add	r1, sp, #84	; 0x54
 8010562:	f7ff fe43 	bl	80101ec <ucdr_init_buffer>
 8010566:	a905      	add	r1, sp, #20
 8010568:	a809      	add	r0, sp, #36	; 0x24
 801056a:	f002 fc2d 	bl	8012dc8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801056e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010572:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010574:	9401      	str	r4, [sp, #4]
 8010576:	f8cd 8000 	str.w	r8, [sp]
 801057a:	4628      	mov	r0, r5
 801057c:	b2b3      	uxth	r3, r6
 801057e:	60e6      	str	r6, [r4, #12]
 8010580:	f7ff ffa2 	bl	80104c8 <uxr_common_create_entity>
 8010584:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8010588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801058c:	f88d 601c 	strb.w	r6, [sp, #28]
 8010590:	e7e3      	b.n	801055a <uxr_buffer_create_participant_bin+0x36>
 8010592:	bf00      	nop

08010594 <uxr_buffer_create_topic_bin>:
 8010594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010596:	2602      	movs	r6, #2
 8010598:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801059c:	4605      	mov	r5, r0
 801059e:	9105      	str	r1, [sp, #20]
 80105a0:	4618      	mov	r0, r3
 80105a2:	a997      	add	r1, sp, #604	; 0x25c
 80105a4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80105a8:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 80105ac:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 80105b0:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 80105b2:	f000 fa61 	bl	8010a78 <uxr_object_id_to_raw>
 80105b6:	2203      	movs	r2, #3
 80105b8:	2101      	movs	r1, #1
 80105ba:	2300      	movs	r3, #0
 80105bc:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 80105c0:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 80105c2:	a80b      	add	r0, sp, #44	; 0x2c
 80105c4:	9206      	str	r2, [sp, #24]
 80105c6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80105ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105ce:	a917      	add	r1, sp, #92	; 0x5c
 80105d0:	f88d 301c 	strb.w	r3, [sp, #28]
 80105d4:	960a      	str	r6, [sp, #40]	; 0x28
 80105d6:	f7ff fe09 	bl	80101ec <ucdr_init_buffer>
 80105da:	a906      	add	r1, sp, #24
 80105dc:	a80b      	add	r0, sp, #44	; 0x2c
 80105de:	f002 fc15 	bl	8012e0c <uxr_serialize_OBJK_Topic_Binary>
 80105e2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80105e6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80105e8:	ac13      	add	r4, sp, #76	; 0x4c
 80105ea:	e9cd 7400 	strd	r7, r4, [sp]
 80105ee:	4628      	mov	r0, r5
 80105f0:	b2b3      	uxth	r3, r6
 80105f2:	60e6      	str	r6, [r4, #12]
 80105f4:	f7ff ff68 	bl	80104c8 <uxr_common_create_entity>
 80105f8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80105fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105fe:	bf00      	nop

08010600 <uxr_buffer_create_publisher_bin>:
 8010600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010602:	2603      	movs	r6, #3
 8010604:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010608:	4605      	mov	r5, r0
 801060a:	9105      	str	r1, [sp, #20]
 801060c:	4618      	mov	r0, r3
 801060e:	a992      	add	r1, sp, #584	; 0x248
 8010610:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010614:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010618:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801061c:	f000 fa2c 	bl	8010a78 <uxr_object_id_to_raw>
 8010620:	2300      	movs	r3, #0
 8010622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010626:	a806      	add	r0, sp, #24
 8010628:	a912      	add	r1, sp, #72	; 0x48
 801062a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801062e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010632:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010636:	f7ff fdd9 	bl	80101ec <ucdr_init_buffer>
 801063a:	a993      	add	r1, sp, #588	; 0x24c
 801063c:	a806      	add	r0, sp, #24
 801063e:	f002 fc99 	bl	8012f74 <uxr_serialize_OBJK_Publisher_Binary>
 8010642:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010646:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010648:	ac0e      	add	r4, sp, #56	; 0x38
 801064a:	9700      	str	r7, [sp, #0]
 801064c:	9401      	str	r4, [sp, #4]
 801064e:	4628      	mov	r0, r5
 8010650:	b2b3      	uxth	r3, r6
 8010652:	60e6      	str	r6, [r4, #12]
 8010654:	f7ff ff38 	bl	80104c8 <uxr_common_create_entity>
 8010658:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801065e:	bf00      	nop

08010660 <uxr_buffer_create_subscriber_bin>:
 8010660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010662:	2604      	movs	r6, #4
 8010664:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010668:	4605      	mov	r5, r0
 801066a:	9105      	str	r1, [sp, #20]
 801066c:	4618      	mov	r0, r3
 801066e:	a992      	add	r1, sp, #584	; 0x248
 8010670:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010674:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010678:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801067c:	f000 f9fc 	bl	8010a78 <uxr_object_id_to_raw>
 8010680:	2103      	movs	r1, #3
 8010682:	2300      	movs	r3, #0
 8010684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010688:	a806      	add	r0, sp, #24
 801068a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 801068e:	a912      	add	r1, sp, #72	; 0x48
 8010690:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010694:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010698:	f7ff fda8 	bl	80101ec <ucdr_init_buffer>
 801069c:	a993      	add	r1, sp, #588	; 0x24c
 801069e:	a806      	add	r0, sp, #24
 80106a0:	f002 fd18 	bl	80130d4 <uxr_serialize_OBJK_Subscriber_Binary>
 80106a4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80106a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80106aa:	ac0e      	add	r4, sp, #56	; 0x38
 80106ac:	9700      	str	r7, [sp, #0]
 80106ae:	9401      	str	r4, [sp, #4]
 80106b0:	4628      	mov	r0, r5
 80106b2:	b2b3      	uxth	r3, r6
 80106b4:	60e6      	str	r6, [r4, #12]
 80106b6:	f7ff ff07 	bl	80104c8 <uxr_common_create_entity>
 80106ba:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80106be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106c0 <uxr_buffer_create_datawriter_bin>:
 80106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c4:	2705      	movs	r7, #5
 80106c6:	2603      	movs	r6, #3
 80106c8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80106cc:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 80106d0:	9105      	str	r1, [sp, #20]
 80106d2:	4605      	mov	r5, r0
 80106d4:	a9a1      	add	r1, sp, #644	; 0x284
 80106d6:	4618      	mov	r0, r3
 80106d8:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 80106dc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106e0:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 80106e4:	f000 f9c8 	bl	8010a78 <uxr_object_id_to_raw>
 80106e8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80106ea:	a90e      	add	r1, sp, #56	; 0x38
 80106ec:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 80106f0:	f000 f9c2 	bl	8010a78 <uxr_object_id_to_raw>
 80106f4:	f1b8 0000 	subs.w	r0, r8, #0
 80106f8:	f04f 0300 	mov.w	r3, #0
 80106fc:	bf18      	it	ne
 80106fe:	2001      	movne	r0, #1
 8010700:	2201      	movs	r2, #1
 8010702:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8010706:	ac1d      	add	r4, sp, #116	; 0x74
 8010708:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801070c:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8010710:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8010714:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010718:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801071c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010720:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010724:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010728:	bb89      	cbnz	r1, 801078e <uxr_buffer_create_datawriter_bin+0xce>
 801072a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801072e:	f04f 0823 	mov.w	r8, #35	; 0x23
 8010732:	f04f 0e13 	mov.w	lr, #19
 8010736:	f04f 0c0b 	mov.w	ip, #11
 801073a:	2221      	movs	r2, #33	; 0x21
 801073c:	2111      	movs	r1, #17
 801073e:	2009      	movs	r0, #9
 8010740:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010744:	b923      	cbnz	r3, 8010750 <uxr_buffer_create_datawriter_bin+0x90>
 8010746:	4642      	mov	r2, r8
 8010748:	4671      	mov	r1, lr
 801074a:	4660      	mov	r0, ip
 801074c:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8010750:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010754:	2b01      	cmp	r3, #1
 8010756:	d025      	beq.n	80107a4 <uxr_buffer_create_datawriter_bin+0xe4>
 8010758:	2b03      	cmp	r3, #3
 801075a:	d029      	beq.n	80107b0 <uxr_buffer_create_datawriter_bin+0xf0>
 801075c:	b32b      	cbz	r3, 80107aa <uxr_buffer_create_datawriter_bin+0xea>
 801075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010762:	a806      	add	r0, sp, #24
 8010764:	a921      	add	r1, sp, #132	; 0x84
 8010766:	f7ff fd41 	bl	80101ec <ucdr_init_buffer>
 801076a:	a90e      	add	r1, sp, #56	; 0x38
 801076c:	a806      	add	r0, sp, #24
 801076e:	f002 fd53 	bl	8013218 <uxr_serialize_OBJK_DataWriter_Binary>
 8010772:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010776:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010778:	9401      	str	r4, [sp, #4]
 801077a:	9700      	str	r7, [sp, #0]
 801077c:	4628      	mov	r0, r5
 801077e:	b2b3      	uxth	r3, r6
 8010780:	60e6      	str	r6, [r4, #12]
 8010782:	f7ff fea1 	bl	80104c8 <uxr_common_create_entity>
 8010786:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078e:	f04f 0822 	mov.w	r8, #34	; 0x22
 8010792:	f04f 0e12 	mov.w	lr, #18
 8010796:	f04f 0c0a 	mov.w	ip, #10
 801079a:	2220      	movs	r2, #32
 801079c:	2110      	movs	r1, #16
 801079e:	2008      	movs	r0, #8
 80107a0:	2602      	movs	r6, #2
 80107a2:	e7cd      	b.n	8010740 <uxr_buffer_create_datawriter_bin+0x80>
 80107a4:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80107a8:	e7d9      	b.n	801075e <uxr_buffer_create_datawriter_bin+0x9e>
 80107aa:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80107ae:	e7d6      	b.n	801075e <uxr_buffer_create_datawriter_bin+0x9e>
 80107b0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80107b4:	e7d3      	b.n	801075e <uxr_buffer_create_datawriter_bin+0x9e>
 80107b6:	bf00      	nop

080107b8 <uxr_buffer_create_datareader_bin>:
 80107b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107bc:	2706      	movs	r7, #6
 80107be:	2603      	movs	r6, #3
 80107c0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80107c4:	f8bd 82b0 	ldrh.w	r8, [sp, #688]	; 0x2b0
 80107c8:	9105      	str	r1, [sp, #20]
 80107ca:	4605      	mov	r5, r0
 80107cc:	a9a3      	add	r1, sp, #652	; 0x28c
 80107ce:	4618      	mov	r0, r3
 80107d0:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 80107d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80107d8:	f89d 72b4 	ldrb.w	r7, [sp, #692]	; 0x2b4
 80107dc:	f000 f94c 	bl	8010a78 <uxr_object_id_to_raw>
 80107e0:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 80107e2:	a90e      	add	r1, sp, #56	; 0x38
 80107e4:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 80107e8:	f000 f946 	bl	8010a78 <uxr_object_id_to_raw>
 80107ec:	f1b8 0000 	subs.w	r0, r8, #0
 80107f0:	f04f 0300 	mov.w	r3, #0
 80107f4:	bf18      	it	ne
 80107f6:	2001      	movne	r0, #1
 80107f8:	2201      	movs	r2, #1
 80107fa:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 80107fe:	ac1f      	add	r4, sp, #124	; 0x7c
 8010800:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8010804:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8010808:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 801080c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8010810:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010814:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010818:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801081c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010820:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010824:	bb89      	cbnz	r1, 801088a <uxr_buffer_create_datareader_bin+0xd2>
 8010826:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801082a:	f04f 0823 	mov.w	r8, #35	; 0x23
 801082e:	f04f 0e13 	mov.w	lr, #19
 8010832:	f04f 0c0b 	mov.w	ip, #11
 8010836:	2221      	movs	r2, #33	; 0x21
 8010838:	2111      	movs	r1, #17
 801083a:	2009      	movs	r0, #9
 801083c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8010840:	b923      	cbnz	r3, 801084c <uxr_buffer_create_datareader_bin+0x94>
 8010842:	4642      	mov	r2, r8
 8010844:	4671      	mov	r1, lr
 8010846:	4660      	mov	r0, ip
 8010848:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801084c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8010850:	2b01      	cmp	r3, #1
 8010852:	d025      	beq.n	80108a0 <uxr_buffer_create_datareader_bin+0xe8>
 8010854:	2b03      	cmp	r3, #3
 8010856:	d029      	beq.n	80108ac <uxr_buffer_create_datareader_bin+0xf4>
 8010858:	b32b      	cbz	r3, 80108a6 <uxr_buffer_create_datareader_bin+0xee>
 801085a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801085e:	a806      	add	r0, sp, #24
 8010860:	a923      	add	r1, sp, #140	; 0x8c
 8010862:	f7ff fcc3 	bl	80101ec <ucdr_init_buffer>
 8010866:	a90e      	add	r1, sp, #56	; 0x38
 8010868:	a806      	add	r0, sp, #24
 801086a:	f002 fc99 	bl	80131a0 <uxr_serialize_OBJK_DataReader_Binary>
 801086e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010872:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010874:	9401      	str	r4, [sp, #4]
 8010876:	9700      	str	r7, [sp, #0]
 8010878:	4628      	mov	r0, r5
 801087a:	b2b3      	uxth	r3, r6
 801087c:	60e6      	str	r6, [r4, #12]
 801087e:	f7ff fe23 	bl	80104c8 <uxr_common_create_entity>
 8010882:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801088a:	f04f 0822 	mov.w	r8, #34	; 0x22
 801088e:	f04f 0e12 	mov.w	lr, #18
 8010892:	f04f 0c0a 	mov.w	ip, #10
 8010896:	2220      	movs	r2, #32
 8010898:	2110      	movs	r1, #16
 801089a:	2008      	movs	r0, #8
 801089c:	2602      	movs	r6, #2
 801089e:	e7cd      	b.n	801083c <uxr_buffer_create_datareader_bin+0x84>
 80108a0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80108a4:	e7d9      	b.n	801085a <uxr_buffer_create_datareader_bin+0xa2>
 80108a6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80108aa:	e7d6      	b.n	801085a <uxr_buffer_create_datareader_bin+0xa2>
 80108ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80108b0:	e7d3      	b.n	801085a <uxr_buffer_create_datareader_bin+0xa2>
 80108b2:	bf00      	nop

080108b4 <get_custom_error>:
 80108b4:	4b01      	ldr	r3, [pc, #4]	; (80108bc <get_custom_error+0x8>)
 80108b6:	7818      	ldrb	r0, [r3, #0]
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	2000677c 	.word	0x2000677c

080108c0 <recv_custom_msg>:
 80108c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	2600      	movs	r6, #0
 80108c6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80108ca:	b089      	sub	sp, #36	; 0x24
 80108cc:	4604      	mov	r4, r0
 80108ce:	468a      	mov	sl, r1
 80108d0:	4693      	mov	fp, r2
 80108d2:	9305      	str	r3, [sp, #20]
 80108d4:	f88d 601e 	strb.w	r6, [sp, #30]
 80108d8:	b325      	cbz	r5, 8010924 <recv_custom_msg+0x64>
 80108da:	f44f 7900 	mov.w	r9, #512	; 0x200
 80108de:	f200 2802 	addw	r8, r0, #514	; 0x202
 80108e2:	f10d 071f 	add.w	r7, sp, #31
 80108e6:	ae05      	add	r6, sp, #20
 80108e8:	f10d 051e 	add.w	r5, sp, #30
 80108ec:	e002      	b.n	80108f4 <recv_custom_msg+0x34>
 80108ee:	9b05      	ldr	r3, [sp, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	dd0f      	ble.n	8010914 <recv_custom_msg+0x54>
 80108f4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80108f8:	e9cd 9500 	strd	r9, r5, [sp]
 80108fc:	4623      	mov	r3, r4
 80108fe:	4622      	mov	r2, r4
 8010900:	4640      	mov	r0, r8
 8010902:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8010906:	f001 fb3d 	bl	8011f84 <uxr_read_framed_msg>
 801090a:	2800      	cmp	r0, #0
 801090c:	d0ef      	beq.n	80108ee <recv_custom_msg+0x2e>
 801090e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010912:	b1b3      	cbz	r3, 8010942 <recv_custom_msg+0x82>
 8010914:	2000      	movs	r0, #0
 8010916:	4b0f      	ldr	r3, [pc, #60]	; (8010954 <recv_custom_msg+0x94>)
 8010918:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	b009      	add	sp, #36	; 0x24
 8010920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010924:	f10d 021f 	add.w	r2, sp, #31
 8010928:	9200      	str	r2, [sp, #0]
 801092a:	4601      	mov	r1, r0
 801092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010930:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8010934:	47a8      	blx	r5
 8010936:	2800      	cmp	r0, #0
 8010938:	d0ec      	beq.n	8010914 <recv_custom_msg+0x54>
 801093a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d1e8      	bne.n	8010914 <recv_custom_msg+0x54>
 8010942:	f8cb 0000 	str.w	r0, [fp]
 8010946:	2001      	movs	r0, #1
 8010948:	f8ca 4000 	str.w	r4, [sl]
 801094c:	b009      	add	sp, #36	; 0x24
 801094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010952:	bf00      	nop
 8010954:	2000677c 	.word	0x2000677c

08010958 <send_custom_msg>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801095e:	4616      	mov	r6, r2
 8010960:	b086      	sub	sp, #24
 8010962:	b975      	cbnz	r5, 8010982 <send_custom_msg+0x2a>
 8010964:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8010968:	f10d 0317 	add.w	r3, sp, #23
 801096c:	47a0      	blx	r4
 801096e:	b108      	cbz	r0, 8010974 <send_custom_msg+0x1c>
 8010970:	42b0      	cmp	r0, r6
 8010972:	d015      	beq.n	80109a0 <send_custom_msg+0x48>
 8010974:	2000      	movs	r0, #0
 8010976:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <send_custom_msg+0x50>)
 8010978:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801097c:	701a      	strb	r2, [r3, #0]
 801097e:	b006      	add	sp, #24
 8010980:	bd70      	pop	{r4, r5, r6, pc}
 8010982:	460b      	mov	r3, r1
 8010984:	2100      	movs	r1, #0
 8010986:	e9cd 6100 	strd	r6, r1, [sp]
 801098a:	f10d 0217 	add.w	r2, sp, #23
 801098e:	9202      	str	r2, [sp, #8]
 8010990:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8010994:	4602      	mov	r2, r0
 8010996:	f200 2002 	addw	r0, r0, #514	; 0x202
 801099a:	f001 f901 	bl	8011ba0 <uxr_write_framed_msg>
 801099e:	e7e6      	b.n	801096e <send_custom_msg+0x16>
 80109a0:	2001      	movs	r0, #1
 80109a2:	b006      	add	sp, #24
 80109a4:	bd70      	pop	{r4, r5, r6, pc}
 80109a6:	bf00      	nop
 80109a8:	2000677c 	.word	0x2000677c

080109ac <uxr_set_custom_transport_callbacks>:
 80109ac:	b430      	push	{r4, r5}
 80109ae:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80109b2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80109b6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80109ba:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80109be:	bc30      	pop	{r4, r5}
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop

080109c4 <uxr_init_custom_transport>:
 80109c4:	b538      	push	{r3, r4, r5, lr}
 80109c6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80109ca:	b303      	cbz	r3, 8010a0e <uxr_init_custom_transport+0x4a>
 80109cc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80109d0:	4604      	mov	r4, r0
 80109d2:	b1e2      	cbz	r2, 8010a0e <uxr_init_custom_transport+0x4a>
 80109d4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80109d8:	b1ca      	cbz	r2, 8010a0e <uxr_init_custom_transport+0x4a>
 80109da:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80109de:	b1b2      	cbz	r2, 8010a0e <uxr_init_custom_transport+0x4a>
 80109e0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80109e4:	4798      	blx	r3
 80109e6:	4605      	mov	r5, r0
 80109e8:	b188      	cbz	r0, 8010a0e <uxr_init_custom_transport+0x4a>
 80109ea:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80109ee:	b98b      	cbnz	r3, 8010a14 <uxr_init_custom_transport+0x50>
 80109f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80109f4:	490a      	ldr	r1, [pc, #40]	; (8010a20 <uxr_init_custom_transport+0x5c>)
 80109f6:	4a0b      	ldr	r2, [pc, #44]	; (8010a24 <uxr_init_custom_transport+0x60>)
 80109f8:	4b0b      	ldr	r3, [pc, #44]	; (8010a28 <uxr_init_custom_transport+0x64>)
 80109fa:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
 80109fe:	e9c4 129f 	strd	r1, r2, [r4, #636]	; 0x27c
 8010a02:	4628      	mov	r0, r5
 8010a04:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8010a08:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 8010a0c:	bd38      	pop	{r3, r4, r5, pc}
 8010a0e:	2500      	movs	r5, #0
 8010a10:	4628      	mov	r0, r5
 8010a12:	bd38      	pop	{r3, r4, r5, pc}
 8010a14:	2100      	movs	r1, #0
 8010a16:	f204 2002 	addw	r0, r4, #514	; 0x202
 8010a1a:	f001 f8bb 	bl	8011b94 <uxr_init_framing_io>
 8010a1e:	e7e7      	b.n	80109f0 <uxr_init_custom_transport+0x2c>
 8010a20:	08010959 	.word	0x08010959
 8010a24:	080108c1 	.word	0x080108c1
 8010a28:	080108b5 	.word	0x080108b5

08010a2c <uxr_close_custom_transport>:
 8010a2c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8010a30:	4718      	bx	r3
 8010a32:	bf00      	nop

08010a34 <uxr_object_id>:
 8010a34:	2300      	movs	r3, #0
 8010a36:	b082      	sub	sp, #8
 8010a38:	f88d 1006 	strb.w	r1, [sp, #6]
 8010a3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a40:	f360 030f 	bfi	r3, r0, #0, #16
 8010a44:	f362 431f 	bfi	r3, r2, #16, #16
 8010a48:	4618      	mov	r0, r3
 8010a4a:	b002      	add	sp, #8
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop

08010a50 <uxr_object_id_from_raw>:
 8010a50:	4602      	mov	r2, r0
 8010a52:	2000      	movs	r0, #0
 8010a54:	7853      	ldrb	r3, [r2, #1]
 8010a56:	b082      	sub	sp, #8
 8010a58:	7812      	ldrb	r2, [r2, #0]
 8010a5a:	f003 010f 	and.w	r1, r3, #15
 8010a5e:	f88d 1006 	strb.w	r1, [sp, #6]
 8010a62:	091b      	lsrs	r3, r3, #4
 8010a64:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010a68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a6c:	f363 000f 	bfi	r0, r3, #0, #16
 8010a70:	f362 401f 	bfi	r0, r2, #16, #16
 8010a74:	b002      	add	sp, #8
 8010a76:	4770      	bx	lr

08010a78 <uxr_object_id_to_raw>:
 8010a78:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010a7c:	b082      	sub	sp, #8
 8010a7e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8010a82:	f3c0 100b 	ubfx	r0, r0, #4, #12
 8010a86:	7008      	strb	r0, [r1, #0]
 8010a88:	704b      	strb	r3, [r1, #1]
 8010a8a:	b002      	add	sp, #8
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop

08010a90 <uxr_buffer_request_data>:
 8010a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a92:	b095      	sub	sp, #84	; 0x54
 8010a94:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8010a96:	2600      	movs	r6, #0
 8010a98:	2d00      	cmp	r5, #0
 8010a9a:	bf14      	ite	ne
 8010a9c:	2701      	movne	r7, #1
 8010a9e:	2700      	moveq	r7, #0
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010aa6:	9303      	str	r3, [sp, #12]
 8010aa8:	f88d 301c 	strb.w	r3, [sp, #28]
 8010aac:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8010ab0:	f88d 601d 	strb.w	r6, [sp, #29]
 8010ab4:	f88d 601e 	strb.w	r6, [sp, #30]
 8010ab8:	d021      	beq.n	8010afe <uxr_buffer_request_data+0x6e>
 8010aba:	686a      	ldr	r2, [r5, #4]
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8010ac2:	2210      	movs	r2, #16
 8010ac4:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8010ac8:	2308      	movs	r3, #8
 8010aca:	2100      	movs	r1, #0
 8010acc:	4620      	mov	r0, r4
 8010ace:	e9cd 3100 	strd	r3, r1, [sp]
 8010ad2:	9905      	ldr	r1, [sp, #20]
 8010ad4:	ab0c      	add	r3, sp, #48	; 0x30
 8010ad6:	f000 fefb 	bl	80118d0 <uxr_prepare_stream_to_write_submessage>
 8010ada:	b918      	cbnz	r0, 8010ae4 <uxr_buffer_request_data+0x54>
 8010adc:	4604      	mov	r4, r0
 8010ade:	4620      	mov	r0, r4
 8010ae0:	b015      	add	sp, #84	; 0x54
 8010ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ae4:	9904      	ldr	r1, [sp, #16]
 8010ae6:	aa06      	add	r2, sp, #24
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f001 f823 	bl	8011b34 <uxr_init_base_object_request>
 8010aee:	4604      	mov	r4, r0
 8010af0:	a906      	add	r1, sp, #24
 8010af2:	a80c      	add	r0, sp, #48	; 0x30
 8010af4:	f002 fdcc 	bl	8013690 <uxr_serialize_READ_DATA_Payload>
 8010af8:	4620      	mov	r0, r4
 8010afa:	b015      	add	sp, #84	; 0x54
 8010afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010afe:	2208      	movs	r2, #8
 8010b00:	e7e2      	b.n	8010ac8 <uxr_buffer_request_data+0x38>
 8010b02:	bf00      	nop

08010b04 <uxr_buffer_cancel_data>:
 8010b04:	b530      	push	{r4, r5, lr}
 8010b06:	2308      	movs	r3, #8
 8010b08:	2400      	movs	r4, #0
 8010b0a:	2501      	movs	r5, #1
 8010b0c:	b095      	sub	sp, #84	; 0x54
 8010b0e:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010b12:	9300      	str	r3, [sp, #0]
 8010b14:	9205      	str	r2, [sp, #20]
 8010b16:	ab0c      	add	r3, sp, #48	; 0x30
 8010b18:	2210      	movs	r2, #16
 8010b1a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010b1e:	f88d 401e 	strb.w	r4, [sp, #30]
 8010b22:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8010b26:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8010b2a:	9103      	str	r1, [sp, #12]
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010b32:	f000 fecd 	bl	80118d0 <uxr_prepare_stream_to_write_submessage>
 8010b36:	b918      	cbnz	r0, 8010b40 <uxr_buffer_cancel_data+0x3c>
 8010b38:	4604      	mov	r4, r0
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	b015      	add	sp, #84	; 0x54
 8010b3e:	bd30      	pop	{r4, r5, pc}
 8010b40:	9905      	ldr	r1, [sp, #20]
 8010b42:	aa06      	add	r2, sp, #24
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fff5 	bl	8011b34 <uxr_init_base_object_request>
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	a906      	add	r1, sp, #24
 8010b4e:	a80c      	add	r0, sp, #48	; 0x30
 8010b50:	f002 fd9e 	bl	8013690 <uxr_serialize_READ_DATA_Payload>
 8010b54:	4620      	mov	r0, r4
 8010b56:	b015      	add	sp, #84	; 0x54
 8010b58:	bd30      	pop	{r4, r5, pc}
 8010b5a:	bf00      	nop

08010b5c <read_submessage_format>:
 8010b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b60:	b095      	sub	sp, #84	; 0x54
 8010b62:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8010b66:	b113      	cbz	r3, 8010b6e <read_submessage_format+0x12>
 8010b68:	b015      	add	sp, #84	; 0x54
 8010b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b6e:	460c      	mov	r4, r1
 8010b70:	4606      	mov	r6, r0
 8010b72:	4690      	mov	r8, r2
 8010b74:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010b78:	a80c      	add	r0, sp, #48	; 0x30
 8010b7a:	1a52      	subs	r2, r2, r1
 8010b7c:	461d      	mov	r5, r3
 8010b7e:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 8010b82:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8010b86:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 8010b8a:	f7ff fb2f 	bl	80101ec <ucdr_init_buffer>
 8010b8e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b92:	a80c      	add	r0, sp, #48	; 0x30
 8010b94:	f7ff fb00 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8010b98:	69e3      	ldr	r3, [r4, #28]
 8010b9a:	b17b      	cbz	r3, 8010bbc <read_submessage_format+0x60>
 8010b9c:	2f07      	cmp	r7, #7
 8010b9e:	751d      	strb	r5, [r3, #20]
 8010ba0:	d03a      	beq.n	8010c18 <read_submessage_format+0xbc>
 8010ba2:	2f08      	cmp	r7, #8
 8010ba4:	d029      	beq.n	8010bfa <read_submessage_format+0x9e>
 8010ba6:	2f06      	cmp	r7, #6
 8010ba8:	d00e      	beq.n	8010bc8 <read_submessage_format+0x6c>
 8010baa:	2201      	movs	r2, #1
 8010bac:	751a      	strb	r2, [r3, #20]
 8010bae:	4641      	mov	r1, r8
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f7ff fb6d 	bl	8010290 <ucdr_advance_buffer>
 8010bb6:	b015      	add	sp, #84	; 0x54
 8010bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bbc:	2f07      	cmp	r7, #7
 8010bbe:	d02b      	beq.n	8010c18 <read_submessage_format+0xbc>
 8010bc0:	2f08      	cmp	r7, #8
 8010bc2:	d01a      	beq.n	8010bfa <read_submessage_format+0x9e>
 8010bc4:	2f06      	cmp	r7, #6
 8010bc6:	d1f2      	bne.n	8010bae <read_submessage_format+0x52>
 8010bc8:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 8010bcc:	b195      	cbz	r5, 8010bf4 <read_submessage_format+0x98>
 8010bce:	2206      	movs	r2, #6
 8010bd0:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8010bd4:	f88d 2016 	strb.w	r2, [sp, #22]
 8010bd8:	aa0c      	add	r2, sp, #48	; 0x30
 8010bda:	9200      	str	r2, [sp, #0]
 8010bdc:	9302      	str	r3, [sp, #8]
 8010bde:	464a      	mov	r2, r9
 8010be0:	9b04      	ldr	r3, [sp, #16]
 8010be2:	4630      	mov	r0, r6
 8010be4:	9905      	ldr	r1, [sp, #20]
 8010be6:	f8cd 8004 	str.w	r8, [sp, #4]
 8010bea:	47a8      	blx	r5
 8010bec:	2201      	movs	r2, #1
 8010bee:	69e3      	ldr	r3, [r4, #28]
 8010bf0:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d1d8      	bne.n	8010baa <read_submessage_format+0x4e>
 8010bf8:	e7d9      	b.n	8010bae <read_submessage_format+0x52>
 8010bfa:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 8010bfe:	2a00      	cmp	r2, #0
 8010c00:	d0f8      	beq.n	8010bf4 <read_submessage_format+0x98>
 8010c02:	a906      	add	r1, sp, #24
 8010c04:	a80c      	add	r0, sp, #48	; 0x30
 8010c06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010c08:	f002 fe16 	bl	8013838 <uxr_deserialize_SampleIdentity>
 8010c0c:	2800      	cmp	r0, #0
 8010c0e:	d13c      	bne.n	8010c8a <read_submessage_format+0x12e>
 8010c10:	69e3      	ldr	r3, [r4, #28]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1c9      	bne.n	8010baa <read_submessage_format+0x4e>
 8010c16:	e7ca      	b.n	8010bae <read_submessage_format+0x52>
 8010c18:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 8010c1c:	b132      	cbz	r2, 8010c2c <read_submessage_format+0xd0>
 8010c1e:	a906      	add	r1, sp, #24
 8010c20:	a80c      	add	r0, sp, #48	; 0x30
 8010c22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010c24:	f002 fbd2 	bl	80133cc <uxr_deserialize_BaseObjectRequest>
 8010c28:	b930      	cbnz	r0, 8010c38 <read_submessage_format+0xdc>
 8010c2a:	69e3      	ldr	r3, [r4, #28]
 8010c2c:	68a2      	ldr	r2, [r4, #8]
 8010c2e:	4442      	add	r2, r8
 8010c30:	60a2      	str	r2, [r4, #8]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d1b9      	bne.n	8010baa <read_submessage_format+0x4e>
 8010c36:	e7ba      	b.n	8010bae <read_submessage_format+0x52>
 8010c38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c3a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010c3e:	a80c      	add	r0, sp, #48	; 0x30
 8010c40:	1a52      	subs	r2, r2, r1
 8010c42:	1aed      	subs	r5, r5, r3
 8010c44:	f7ff fad2 	bl	80101ec <ucdr_init_buffer>
 8010c48:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010c4c:	a80c      	add	r0, sp, #48	; 0x30
 8010c4e:	f7ff faa3 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8010c52:	2107      	movs	r1, #7
 8010c54:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8010c58:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010c5c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 8010c60:	4445      	add	r5, r8
 8010c62:	b2ad      	uxth	r5, r5
 8010c64:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010c68:	aa0c      	add	r2, sp, #48	; 0x30
 8010c6a:	9200      	str	r2, [sp, #0]
 8010c6c:	9002      	str	r0, [sp, #8]
 8010c6e:	f88d 1016 	strb.w	r1, [sp, #22]
 8010c72:	9501      	str	r5, [sp, #4]
 8010c74:	b29b      	uxth	r3, r3
 8010c76:	464a      	mov	r2, r9
 8010c78:	4630      	mov	r0, r6
 8010c7a:	9905      	ldr	r1, [sp, #20]
 8010c7c:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 8010c80:	47a8      	blx	r5
 8010c82:	2301      	movs	r3, #1
 8010c84:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8010c88:	e7cf      	b.n	8010c2a <read_submessage_format+0xce>
 8010c8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c8c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010c90:	a80c      	add	r0, sp, #48	; 0x30
 8010c92:	1a52      	subs	r2, r2, r1
 8010c94:	1aed      	subs	r5, r5, r3
 8010c96:	f7ff faa9 	bl	80101ec <ucdr_init_buffer>
 8010c9a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010c9e:	a80c      	add	r0, sp, #48	; 0x30
 8010ca0:	f7ff fa7a 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8010ca4:	2308      	movs	r3, #8
 8010ca6:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 8010caa:	4445      	add	r5, r8
 8010cac:	f88d 3016 	strb.w	r3, [sp, #22]
 8010cb0:	b2ad      	uxth	r5, r5
 8010cb2:	ab0c      	add	r3, sp, #48	; 0x30
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	9002      	str	r0, [sp, #8]
 8010cb8:	9501      	str	r5, [sp, #4]
 8010cba:	ab06      	add	r3, sp, #24
 8010cbc:	464a      	mov	r2, r9
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	9905      	ldr	r1, [sp, #20]
 8010cc2:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 8010cc6:	47a8      	blx	r5
 8010cc8:	2301      	movs	r3, #1
 8010cca:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8010cce:	e79f      	b.n	8010c10 <read_submessage_format+0xb4>

08010cd0 <on_get_fragmentation_info>:
 8010cd0:	b500      	push	{lr}
 8010cd2:	b08b      	sub	sp, #44	; 0x2c
 8010cd4:	4601      	mov	r1, r0
 8010cd6:	2204      	movs	r2, #4
 8010cd8:	a802      	add	r0, sp, #8
 8010cda:	f7ff fa87 	bl	80101ec <ucdr_init_buffer>
 8010cde:	f10d 0305 	add.w	r3, sp, #5
 8010ce2:	a802      	add	r0, sp, #8
 8010ce4:	f10d 0206 	add.w	r2, sp, #6
 8010ce8:	a901      	add	r1, sp, #4
 8010cea:	f001 fd1f 	bl	801272c <uxr_read_submessage_header>
 8010cee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010cf2:	2b0d      	cmp	r3, #13
 8010cf4:	d003      	beq.n	8010cfe <on_get_fragmentation_info+0x2e>
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	b00b      	add	sp, #44	; 0x2c
 8010cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cfe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010d02:	f013 0f02 	tst.w	r3, #2
 8010d06:	bf14      	ite	ne
 8010d08:	2002      	movne	r0, #2
 8010d0a:	2001      	moveq	r0, #1
 8010d0c:	b00b      	add	sp, #44	; 0x2c
 8010d0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d12:	bf00      	nop

08010d14 <write_submessage_acknack.isra.0>:
 8010d14:	b570      	push	{r4, r5, r6, lr}
 8010d16:	4614      	mov	r4, r2
 8010d18:	b092      	sub	sp, #72	; 0x48
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	460e      	mov	r6, r1
 8010d1e:	f000 ff01 	bl	8011b24 <uxr_session_header_offset>
 8010d22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010d26:	9000      	str	r0, [sp, #0]
 8010d28:	a905      	add	r1, sp, #20
 8010d2a:	a80a      	add	r0, sp, #40	; 0x28
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	2211      	movs	r2, #17
 8010d30:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8010d34:	f7ff fa48 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 8010d38:	3450      	adds	r4, #80	; 0x50
 8010d3a:	2205      	movs	r2, #5
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	210a      	movs	r1, #10
 8010d40:	a80a      	add	r0, sp, #40	; 0x28
 8010d42:	f001 fcd9 	bl	80126f8 <uxr_buffer_submessage_header>
 8010d46:	a903      	add	r1, sp, #12
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f006 fa1f 	bl	801718c <uxr_compute_acknack>
 8010d4e:	a903      	add	r1, sp, #12
 8010d50:	ba43      	rev16	r3, r0
 8010d52:	a80a      	add	r0, sp, #40	; 0x28
 8010d54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010d58:	f88d 6010 	strb.w	r6, [sp, #16]
 8010d5c:	f002 fcbc 	bl	80136d8 <uxr_serialize_ACKNACK_Payload>
 8010d60:	2200      	movs	r2, #0
 8010d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d64:	4611      	mov	r1, r2
 8010d66:	4628      	mov	r0, r5
 8010d68:	f000 fe88 	bl	8011a7c <uxr_stamp_session_header>
 8010d6c:	a80a      	add	r0, sp, #40	; 0x28
 8010d6e:	f7ff fa6b 	bl	8010248 <ucdr_buffer_length>
 8010d72:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010d74:	4602      	mov	r2, r0
 8010d76:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d7a:	a905      	add	r1, sp, #20
 8010d7c:	47a0      	blx	r4
 8010d7e:	b012      	add	sp, #72	; 0x48
 8010d80:	bd70      	pop	{r4, r5, r6, pc}
 8010d82:	bf00      	nop

08010d84 <uxr_acknack_pong.part.0>:
 8010d84:	b570      	push	{r4, r5, r6, lr}
 8010d86:	2400      	movs	r4, #0
 8010d88:	4605      	mov	r5, r0
 8010d8a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8010d8e:	f10d 0306 	add.w	r3, sp, #6
 8010d92:	a901      	add	r1, sp, #4
 8010d94:	f10d 0205 	add.w	r2, sp, #5
 8010d98:	f88d 4004 	strb.w	r4, [sp, #4]
 8010d9c:	f88d 4005 	strb.w	r4, [sp, #5]
 8010da0:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010da4:	f001 fef8 	bl	8012b98 <uxr_deserialize_submessage_header>
 8010da8:	4628      	mov	r0, r5
 8010daa:	f7ff fa51 	bl	8010250 <ucdr_buffer_remaining>
 8010dae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010db2:	4298      	cmp	r0, r3
 8010db4:	d31d      	bcc.n	8010df2 <uxr_acknack_pong.part.0+0x6e>
 8010db6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010dba:	2b06      	cmp	r3, #6
 8010dbc:	d003      	beq.n	8010dc6 <uxr_acknack_pong.part.0+0x42>
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8010dc4:	bd70      	pop	{r4, r5, r6, pc}
 8010dc6:	a902      	add	r1, sp, #8
 8010dc8:	4628      	mov	r0, r5
 8010dca:	f002 fb0f 	bl	80133ec <uxr_deserialize_BaseObjectReply>
 8010dce:	a904      	add	r1, sp, #16
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	f7fd fdb0 	bl	800e938 <ucdr_deserialize_bool>
 8010dd8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010ddc:	4004      	ands	r4, r0
 8010dde:	b2e4      	uxtb	r4, r4
 8010de0:	bb23      	cbnz	r3, 8010e2c <uxr_acknack_pong.part.0+0xa8>
 8010de2:	4628      	mov	r0, r5
 8010de4:	a989      	add	r1, sp, #548	; 0x224
 8010de6:	f7fd fda7 	bl	800e938 <ucdr_deserialize_bool>
 8010dea:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 8010dee:	4606      	mov	r6, r0
 8010df0:	b91b      	cbnz	r3, 8010dfa <uxr_acknack_pong.part.0+0x76>
 8010df2:	2000      	movs	r0, #0
 8010df4:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
 8010dfa:	4628      	mov	r0, r5
 8010dfc:	a98a      	add	r1, sp, #552	; 0x228
 8010dfe:	f7fd fdc9 	bl	800e994 <ucdr_deserialize_uint8_t>
 8010e02:	4226      	tst	r6, r4
 8010e04:	d0f5      	beq.n	8010df2 <uxr_acknack_pong.part.0+0x6e>
 8010e06:	2800      	cmp	r0, #0
 8010e08:	d0f3      	beq.n	8010df2 <uxr_acknack_pong.part.0+0x6e>
 8010e0a:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 8010e0e:	2b0d      	cmp	r3, #13
 8010e10:	d1ef      	bne.n	8010df2 <uxr_acknack_pong.part.0+0x6e>
 8010e12:	4628      	mov	r0, r5
 8010e14:	a98c      	add	r1, sp, #560	; 0x230
 8010e16:	f7fe fb93 	bl	800f540 <ucdr_deserialize_int16_t>
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d0ea      	beq.n	8010df4 <uxr_acknack_pong.part.0+0x70>
 8010e1e:	f9bd 4230 	ldrsh.w	r4, [sp, #560]	; 0x230
 8010e22:	2c00      	cmp	r4, #0
 8010e24:	bfd4      	ite	le
 8010e26:	2000      	movle	r0, #0
 8010e28:	2001      	movgt	r0, #1
 8010e2a:	e7e3      	b.n	8010df4 <uxr_acknack_pong.part.0+0x70>
 8010e2c:	4628      	mov	r0, r5
 8010e2e:	a905      	add	r1, sp, #20
 8010e30:	f002 fa1e 	bl	8013270 <uxr_deserialize_ObjectVariant>
 8010e34:	4004      	ands	r4, r0
 8010e36:	e7d4      	b.n	8010de2 <uxr_acknack_pong.part.0+0x5e>

08010e38 <read_submessage_list>:
 8010e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460d      	mov	r5, r1
 8010e40:	b099      	sub	sp, #100	; 0x64
 8010e42:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8011138 <read_submessage_list+0x300>
 8010e46:	920b      	str	r2, [sp, #44]	; 0x2c
 8010e48:	4628      	mov	r0, r5
 8010e4a:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8010e4e:	aa0e      	add	r2, sp, #56	; 0x38
 8010e50:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8010e54:	f001 fc6a 	bl	801272c <uxr_read_submessage_header>
 8010e58:	2800      	cmp	r0, #0
 8010e5a:	f000 810d 	beq.w	8011078 <read_submessage_list+0x240>
 8010e5e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8010e62:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8010e66:	3b04      	subs	r3, #4
 8010e68:	2b0b      	cmp	r3, #11
 8010e6a:	d8ed      	bhi.n	8010e48 <read_submessage_list+0x10>
 8010e6c:	a101      	add	r1, pc, #4	; (adr r1, 8010e74 <read_submessage_list+0x3c>)
 8010e6e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e72:	bf00      	nop
 8010e74:	08011069 	.word	0x08011069
 8010e78:	0801105d 	.word	0x0801105d
 8010e7c:	08010e49 	.word	0x08010e49
 8010e80:	08010e49 	.word	0x08010e49
 8010e84:	08010e49 	.word	0x08010e49
 8010e88:	08010fbd 	.word	0x08010fbd
 8010e8c:	08010f4d 	.word	0x08010f4d
 8010e90:	08010f0b 	.word	0x08010f0b
 8010e94:	08010e49 	.word	0x08010e49
 8010e98:	08010e49 	.word	0x08010e49
 8010e9c:	08010e49 	.word	0x08010e49
 8010ea0:	08010ea5 	.word	0x08010ea5
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	a912      	add	r1, sp, #72	; 0x48
 8010ea8:	f002 fc74 	bl	8013794 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010eac:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8010eb0:	2e00      	cmp	r6, #0
 8010eb2:	f000 8112 	beq.w	80110da <read_submessage_list+0x2a2>
 8010eb6:	f001 fc81 	bl	80127bc <uxr_nanos>
 8010eba:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8010ebc:	f04f 0900 	mov.w	r9, #0
 8010ec0:	46b8      	mov	r8, r7
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010ec6:	f04f 0c00 	mov.w	ip, #0
 8010eca:	4683      	mov	fp, r0
 8010ecc:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8010ece:	460b      	mov	r3, r1
 8010ed0:	fbca 8907 	smlal	r8, r9, sl, r7
 8010ed4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8010ed8:	46d8      	mov	r8, fp
 8010eda:	46e1      	mov	r9, ip
 8010edc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010ede:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8010ee0:	4608      	mov	r0, r1
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	fbca 8907 	smlal	r8, r9, sl, r7
 8010ee8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010eea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010eee:	fbca 0107 	smlal	r0, r1, sl, r7
 8010ef2:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 8010ef6:	e9cd 0100 	strd	r0, r1, [sp]
 8010efa:	9706      	str	r7, [sp, #24]
 8010efc:	4620      	mov	r0, r4
 8010efe:	47b0      	blx	r6
 8010f00:	f04f 0301 	mov.w	r3, #1
 8010f04:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010f08:	e79e      	b.n	8010e48 <read_submessage_list+0x10>
 8010f0a:	a912      	add	r1, sp, #72	; 0x48
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f002 fc21 	bl	8013754 <uxr_deserialize_HEARTBEAT_Payload>
 8010f12:	2100      	movs	r1, #0
 8010f14:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010f18:	f001 fade 	bl	80124d8 <uxr_stream_id_from_raw>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010f22:	4631      	mov	r1, r6
 8010f24:	f104 0008 	add.w	r0, r4, #8
 8010f28:	9311      	str	r3, [sp, #68]	; 0x44
 8010f2a:	f001 fbc3 	bl	80126b4 <uxr_get_input_reliable_stream>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d08a      	beq.n	8010e48 <read_submessage_list+0x10>
 8010f32:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8010f36:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8010f3a:	f006 f91b 	bl	8017174 <uxr_process_heartbeat>
 8010f3e:	4632      	mov	r2, r6
 8010f40:	4620      	mov	r0, r4
 8010f42:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8010f46:	f7ff fee5 	bl	8010d14 <write_submessage_acknack.isra.0>
 8010f4a:	e77d      	b.n	8010e48 <read_submessage_list+0x10>
 8010f4c:	a912      	add	r1, sp, #72	; 0x48
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f002 fbd8 	bl	8013704 <uxr_deserialize_ACKNACK_Payload>
 8010f54:	2100      	movs	r1, #0
 8010f56:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010f5a:	f001 fabd 	bl	80124d8 <uxr_stream_id_from_raw>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	f104 0008 	add.w	r0, r4, #8
 8010f64:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f6a:	f001 fb8d 	bl	8012688 <uxr_get_output_reliable_stream>
 8010f6e:	4606      	mov	r6, r0
 8010f70:	2800      	cmp	r0, #0
 8010f72:	f43f af69 	beq.w	8010e48 <read_submessage_list+0x10>
 8010f76:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8010f7a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8010f7e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8010f82:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010f86:	b289      	uxth	r1, r1
 8010f88:	f006 fc34 	bl	80177f4 <uxr_process_acknack>
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f006 fbf7 	bl	8017780 <uxr_begin_output_nack_buffer_it>
 8010f92:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010f96:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010f9a:	e005      	b.n	8010fa8 <read_submessage_list+0x170>
 8010f9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010f9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fa0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010fa2:	e9d3 0700 	ldrd	r0, r7, [r3]
 8010fa6:	47b8      	blx	r7
 8010fa8:	4641      	mov	r1, r8
 8010faa:	4630      	mov	r0, r6
 8010fac:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8010fb0:	aa11      	add	r2, sp, #68	; 0x44
 8010fb2:	f006 fbe7 	bl	8017784 <uxr_next_reliable_nack_buffer_to_send>
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	d1f0      	bne.n	8010f9c <read_submessage_list+0x164>
 8010fba:	e745      	b.n	8010e48 <read_submessage_list+0x10>
 8010fbc:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8010fc0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8010fc4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010fc8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010fcc:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 8010fd0:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8010fd4:	4641      	mov	r1, r8
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 8010fdc:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8010fe0:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8010fe4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010fe8:	f002 f9f0 	bl	80133cc <uxr_deserialize_BaseObjectRequest>
 8010fec:	4640      	mov	r0, r8
 8010fee:	a911      	add	r1, sp, #68	; 0x44
 8010ff0:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8010ff4:	f000 fdbc 	bl	8011b70 <uxr_parse_base_object_request>
 8010ff8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010ffa:	f8d4 9080 	ldr.w	r9, [r4, #128]	; 0x80
 8010ffe:	3e04      	subs	r6, #4
 8011000:	f8bd 803a 	ldrh.w	r8, [sp, #58]	; 0x3a
 8011004:	f007 070e 	and.w	r7, r7, #14
 8011008:	b2b6      	uxth	r6, r6
 801100a:	9112      	str	r1, [sp, #72]	; 0x48
 801100c:	f1b9 0f00 	cmp.w	r9, #0
 8011010:	d006      	beq.n	8011020 <read_submessage_list+0x1e8>
 8011012:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011016:	4642      	mov	r2, r8
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	4620      	mov	r0, r4
 801101c:	2300      	movs	r3, #0
 801101e:	47c8      	blx	r9
 8011020:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011022:	b168      	cbz	r0, 8011040 <read_submessage_list+0x208>
 8011024:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011026:	2300      	movs	r3, #0
 8011028:	3902      	subs	r1, #2
 801102a:	e002      	b.n	8011032 <read_submessage_list+0x1fa>
 801102c:	3301      	adds	r3, #1
 801102e:	4283      	cmp	r3, r0
 8011030:	d006      	beq.n	8011040 <read_submessage_list+0x208>
 8011032:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8011036:	4542      	cmp	r2, r8
 8011038:	d1f8      	bne.n	801102c <read_submessage_list+0x1f4>
 801103a:	2100      	movs	r1, #0
 801103c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801103e:	54d1      	strb	r1, [r2, r3]
 8011040:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 8011044:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011046:	463b      	mov	r3, r7
 8011048:	e9cd 0101 	strd	r0, r1, [sp, #4]
 801104c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801104e:	4632      	mov	r2, r6
 8011050:	9100      	str	r1, [sp, #0]
 8011052:	4620      	mov	r0, r4
 8011054:	4629      	mov	r1, r5
 8011056:	f7ff fd81 	bl	8010b5c <read_submessage_format>
 801105a:	e6f5      	b.n	8010e48 <read_submessage_list+0x10>
 801105c:	b97a      	cbnz	r2, 801107e <read_submessage_list+0x246>
 801105e:	4629      	mov	r1, r5
 8011060:	4620      	mov	r0, r4
 8011062:	f000 fcd9 	bl	8011a18 <uxr_read_delete_session_status>
 8011066:	e6ef      	b.n	8010e48 <read_submessage_list+0x10>
 8011068:	2a00      	cmp	r2, #0
 801106a:	f47f aeed 	bne.w	8010e48 <read_submessage_list+0x10>
 801106e:	4629      	mov	r1, r5
 8011070:	4620      	mov	r0, r4
 8011072:	f000 fcc5 	bl	8011a00 <uxr_read_create_session_status>
 8011076:	e6e7      	b.n	8010e48 <read_submessage_list+0x10>
 8011078:	b019      	add	sp, #100	; 0x64
 801107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107e:	a912      	add	r1, sp, #72	; 0x48
 8011080:	4628      	mov	r0, r5
 8011082:	f002 fae7 	bl	8013654 <uxr_deserialize_STATUS_Payload>
 8011086:	a910      	add	r1, sp, #64	; 0x40
 8011088:	aa0f      	add	r2, sp, #60	; 0x3c
 801108a:	a812      	add	r0, sp, #72	; 0x48
 801108c:	f000 fd70 	bl	8011b70 <uxr_parse_base_object_request>
 8011090:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011092:	f8d4 8080 	ldr.w	r8, [r4, #128]	; 0x80
 8011096:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801109a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801109e:	9111      	str	r1, [sp, #68]	; 0x44
 80110a0:	f1b8 0f00 	cmp.w	r8, #0
 80110a4:	d006      	beq.n	80110b4 <read_submessage_list+0x27c>
 80110a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80110aa:	4632      	mov	r2, r6
 80110ac:	9300      	str	r3, [sp, #0]
 80110ae:	4620      	mov	r0, r4
 80110b0:	463b      	mov	r3, r7
 80110b2:	47c0      	blx	r8
 80110b4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80110b6:	2a00      	cmp	r2, #0
 80110b8:	f43f aec6 	beq.w	8010e48 <read_submessage_list+0x10>
 80110bc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80110be:	2100      	movs	r1, #0
 80110c0:	3802      	subs	r0, #2
 80110c2:	e003      	b.n	80110cc <read_submessage_list+0x294>
 80110c4:	3101      	adds	r1, #1
 80110c6:	4291      	cmp	r1, r2
 80110c8:	f43f aebe 	beq.w	8010e48 <read_submessage_list+0x10>
 80110cc:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80110d0:	42b3      	cmp	r3, r6
 80110d2:	d1f7      	bne.n	80110c4 <read_submessage_list+0x28c>
 80110d4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80110d6:	545f      	strb	r7, [r3, r1]
 80110d8:	e6b6      	b.n	8010e48 <read_submessage_list+0x10>
 80110da:	f001 fb6f 	bl	80127bc <uxr_nanos>
 80110de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80110e0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80110e2:	4693      	mov	fp, r2
 80110e4:	f04f 0c00 	mov.w	ip, #0
 80110e8:	46b8      	mov	r8, r7
 80110ea:	f04f 0900 	mov.w	r9, #0
 80110ee:	2700      	movs	r7, #0
 80110f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80110f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110f4:	fbca bc03 	smlal	fp, ip, sl, r3
 80110f8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80110fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80110fc:	fbca 6702 	smlal	r6, r7, sl, r2
 8011100:	fbca 8903 	smlal	r8, r9, sl, r3
 8011104:	eb1b 0000 	adds.w	r0, fp, r0
 8011108:	eb4c 0101 	adc.w	r1, ip, r1
 801110c:	eb18 0306 	adds.w	r3, r8, r6
 8011110:	eb49 0207 	adc.w	r2, r9, r7
 8011114:	1ac3      	subs	r3, r0, r3
 8011116:	9308      	str	r3, [sp, #32]
 8011118:	eb61 0302 	sbc.w	r3, r1, r2
 801111c:	9309      	str	r3, [sp, #36]	; 0x24
 801111e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011122:	0fd3      	lsrs	r3, r2, #31
 8011124:	18c9      	adds	r1, r1, r3
 8011126:	f142 0200 	adc.w	r2, r2, #0
 801112a:	084b      	lsrs	r3, r1, #1
 801112c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011130:	1052      	asrs	r2, r2, #1
 8011132:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8011136:	e6e3      	b.n	8010f00 <read_submessage_list+0xc8>
 8011138:	3b9aca00 	.word	0x3b9aca00

0801113c <listen_message>:
 801113c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011140:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8011142:	b099      	sub	sp, #100	; 0x64
 8011144:	6894      	ldr	r4, [r2, #8]
 8011146:	460b      	mov	r3, r1
 8011148:	4605      	mov	r5, r0
 801114a:	a904      	add	r1, sp, #16
 801114c:	6810      	ldr	r0, [r2, #0]
 801114e:	aa05      	add	r2, sp, #20
 8011150:	47a0      	blx	r4
 8011152:	4604      	mov	r4, r0
 8011154:	b918      	cbnz	r0, 801115e <listen_message+0x22>
 8011156:	4620      	mov	r0, r4
 8011158:	b019      	add	sp, #100	; 0x64
 801115a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801115e:	2600      	movs	r6, #0
 8011160:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8011164:	a808      	add	r0, sp, #32
 8011166:	f7ff f841 	bl	80101ec <ucdr_init_buffer>
 801116a:	4628      	mov	r0, r5
 801116c:	a908      	add	r1, sp, #32
 801116e:	f10d 030e 	add.w	r3, sp, #14
 8011172:	aa03      	add	r2, sp, #12
 8011174:	f88d 600c 	strb.w	r6, [sp, #12]
 8011178:	f000 fc94 	bl	8011aa4 <uxr_read_session_header>
 801117c:	b1e8      	cbz	r0, 80111ba <listen_message+0x7e>
 801117e:	4631      	mov	r1, r6
 8011180:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8011184:	f001 f9a8 	bl	80124d8 <uxr_stream_id_from_raw>
 8011188:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801118c:	2f01      	cmp	r7, #1
 801118e:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 8011192:	9007      	str	r0, [sp, #28]
 8011194:	fa5f f880 	uxtb.w	r8, r0
 8011198:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801119c:	d01b      	beq.n	80111d6 <listen_message+0x9a>
 801119e:	2f02      	cmp	r7, #2
 80111a0:	d031      	beq.n	8011206 <listen_message+0xca>
 80111a2:	2f00      	cmp	r7, #0
 80111a4:	d1d7      	bne.n	8011156 <listen_message+0x1a>
 80111a6:	4639      	mov	r1, r7
 80111a8:	4638      	mov	r0, r7
 80111aa:	f001 f995 	bl	80124d8 <uxr_stream_id_from_raw>
 80111ae:	a908      	add	r1, sp, #32
 80111b0:	4602      	mov	r2, r0
 80111b2:	4628      	mov	r0, r5
 80111b4:	f7ff fe40 	bl	8010e38 <read_submessage_list>
 80111b8:	e7cd      	b.n	8011156 <listen_message+0x1a>
 80111ba:	a808      	add	r0, sp, #32
 80111bc:	f7ff f848 	bl	8010250 <ucdr_buffer_remaining>
 80111c0:	2804      	cmp	r0, #4
 80111c2:	d9c8      	bls.n	8011156 <listen_message+0x1a>
 80111c4:	a808      	add	r0, sp, #32
 80111c6:	f7ff fddd 	bl	8010d84 <uxr_acknack_pong.part.0>
 80111ca:	2800      	cmp	r0, #0
 80111cc:	d0c3      	beq.n	8011156 <listen_message+0x1a>
 80111ce:	2301      	movs	r3, #1
 80111d0:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 80111d4:	e7bf      	b.n	8011156 <listen_message+0x1a>
 80111d6:	4631      	mov	r1, r6
 80111d8:	f105 0008 	add.w	r0, r5, #8
 80111dc:	f001 fa60 	bl	80126a0 <uxr_get_input_best_effort_stream>
 80111e0:	2800      	cmp	r0, #0
 80111e2:	d0b8      	beq.n	8011156 <listen_message+0x1a>
 80111e4:	4651      	mov	r1, sl
 80111e6:	f005 fe41 	bl	8016e6c <uxr_receive_best_effort_message>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	d0b3      	beq.n	8011156 <listen_message+0x1a>
 80111ee:	f88d 801c 	strb.w	r8, [sp, #28]
 80111f2:	f88d 601d 	strb.w	r6, [sp, #29]
 80111f6:	f88d 701e 	strb.w	r7, [sp, #30]
 80111fa:	4628      	mov	r0, r5
 80111fc:	9a07      	ldr	r2, [sp, #28]
 80111fe:	a908      	add	r1, sp, #32
 8011200:	f7ff fe1a 	bl	8010e38 <read_submessage_list>
 8011204:	e7a7      	b.n	8011156 <listen_message+0x1a>
 8011206:	4631      	mov	r1, r6
 8011208:	f105 0008 	add.w	r0, r5, #8
 801120c:	f001 fa52 	bl	80126b4 <uxr_get_input_reliable_stream>
 8011210:	4681      	mov	r9, r0
 8011212:	b328      	cbz	r0, 8011260 <listen_message+0x124>
 8011214:	a808      	add	r0, sp, #32
 8011216:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801121a:	f7ff f819 	bl	8010250 <ucdr_buffer_remaining>
 801121e:	4603      	mov	r3, r0
 8011220:	f10d 000d 	add.w	r0, sp, #13
 8011224:	9000      	str	r0, [sp, #0]
 8011226:	465a      	mov	r2, fp
 8011228:	4651      	mov	r1, sl
 801122a:	4648      	mov	r0, r9
 801122c:	f005 fea2 	bl	8016f74 <uxr_receive_reliable_message>
 8011230:	b1b0      	cbz	r0, 8011260 <listen_message+0x124>
 8011232:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8011236:	b1cb      	cbz	r3, 801126c <listen_message+0x130>
 8011238:	2702      	movs	r7, #2
 801123a:	e00a      	b.n	8011252 <listen_message+0x116>
 801123c:	f88d 801c 	strb.w	r8, [sp, #28]
 8011240:	f88d 601d 	strb.w	r6, [sp, #29]
 8011244:	f88d 701e 	strb.w	r7, [sp, #30]
 8011248:	4628      	mov	r0, r5
 801124a:	9a07      	ldr	r2, [sp, #28]
 801124c:	a910      	add	r1, sp, #64	; 0x40
 801124e:	f7ff fdf3 	bl	8010e38 <read_submessage_list>
 8011252:	2204      	movs	r2, #4
 8011254:	4648      	mov	r0, r9
 8011256:	a910      	add	r1, sp, #64	; 0x40
 8011258:	f005 ff0c 	bl	8017074 <uxr_next_input_reliable_buffer_available>
 801125c:	2800      	cmp	r0, #0
 801125e:	d1ed      	bne.n	801123c <listen_message+0x100>
 8011260:	4632      	mov	r2, r6
 8011262:	4641      	mov	r1, r8
 8011264:	4628      	mov	r0, r5
 8011266:	f7ff fd55 	bl	8010d14 <write_submessage_acknack.isra.0>
 801126a:	e774      	b.n	8011156 <listen_message+0x1a>
 801126c:	f88d 801c 	strb.w	r8, [sp, #28]
 8011270:	f88d 601d 	strb.w	r6, [sp, #29]
 8011274:	f88d 701e 	strb.w	r7, [sp, #30]
 8011278:	4628      	mov	r0, r5
 801127a:	9a07      	ldr	r2, [sp, #28]
 801127c:	a908      	add	r1, sp, #32
 801127e:	f7ff fddb 	bl	8010e38 <read_submessage_list>
 8011282:	e7d9      	b.n	8011238 <listen_message+0xfc>

08011284 <listen_message_reliably>:
 8011284:	1e0b      	subs	r3, r1, #0
 8011286:	bfb8      	it	lt
 8011288:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011290:	4683      	mov	fp, r0
 8011292:	b095      	sub	sp, #84	; 0x54
 8011294:	9303      	str	r3, [sp, #12]
 8011296:	f001 fa75 	bl	8012784 <uxr_millis>
 801129a:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 801129e:	4688      	mov	r8, r1
 80112a0:	4607      	mov	r7, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	f000 8093 	beq.w	80113ce <listen_message_reliably+0x14a>
 80112a8:	2600      	movs	r6, #0
 80112aa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80112ae:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80112b2:	4630      	mov	r0, r6
 80112b4:	e00f      	b.n	80112d6 <listen_message_reliably+0x52>
 80112b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80112ba:	454a      	cmp	r2, r9
 80112bc:	eb73 010a 	sbcs.w	r1, r3, sl
 80112c0:	bfb8      	it	lt
 80112c2:	469a      	movlt	sl, r3
 80112c4:	f106 0601 	add.w	r6, r6, #1
 80112c8:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80112cc:	b2f0      	uxtb	r0, r6
 80112ce:	bfb8      	it	lt
 80112d0:	4691      	movlt	r9, r2
 80112d2:	4283      	cmp	r3, r0
 80112d4:	d953      	bls.n	801137e <listen_message_reliably+0xfa>
 80112d6:	2201      	movs	r2, #1
 80112d8:	2102      	movs	r1, #2
 80112da:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80112de:	f001 f8d1 	bl	8012484 <uxr_stream_id>
 80112e2:	4601      	mov	r1, r0
 80112e4:	00e4      	lsls	r4, r4, #3
 80112e6:	f104 0520 	add.w	r5, r4, #32
 80112ea:	445d      	add	r5, fp
 80112ec:	4643      	mov	r3, r8
 80112ee:	463a      	mov	r2, r7
 80112f0:	4628      	mov	r0, r5
 80112f2:	9104      	str	r1, [sp, #16]
 80112f4:	f006 fa18 	bl	8017728 <uxr_update_output_stream_heartbeat_timestamp>
 80112f8:	eb0b 0304 	add.w	r3, fp, r4
 80112fc:	2800      	cmp	r0, #0
 80112fe:	d0da      	beq.n	80112b6 <listen_message_reliably+0x32>
 8011300:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8011304:	4658      	mov	r0, fp
 8011306:	f89d 5011 	ldrb.w	r5, [sp, #17]
 801130a:	9302      	str	r3, [sp, #8]
 801130c:	f000 fc0a 	bl	8011b24 <uxr_session_header_offset>
 8011310:	3501      	adds	r5, #1
 8011312:	2300      	movs	r3, #0
 8011314:	2211      	movs	r2, #17
 8011316:	9000      	str	r0, [sp, #0]
 8011318:	a907      	add	r1, sp, #28
 801131a:	a80c      	add	r0, sp, #48	; 0x30
 801131c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011320:	f7fe ff52 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 8011324:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8011328:	2300      	movs	r3, #0
 801132a:	2205      	movs	r2, #5
 801132c:	210b      	movs	r1, #11
 801132e:	a80c      	add	r0, sp, #48	; 0x30
 8011330:	f001 f9e2 	bl	80126f8 <uxr_buffer_submessage_header>
 8011334:	2101      	movs	r1, #1
 8011336:	8968      	ldrh	r0, [r5, #10]
 8011338:	f006 fab6 	bl	80178a8 <uxr_seq_num_add>
 801133c:	4603      	mov	r3, r0
 801133e:	892a      	ldrh	r2, [r5, #8]
 8011340:	9d02      	ldr	r5, [sp, #8]
 8011342:	a905      	add	r1, sp, #20
 8011344:	a80c      	add	r0, sp, #48	; 0x30
 8011346:	f88d 5018 	strb.w	r5, [sp, #24]
 801134a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801134e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011352:	f002 f9eb 	bl	801372c <uxr_serialize_HEARTBEAT_Payload>
 8011356:	2200      	movs	r2, #0
 8011358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801135a:	4611      	mov	r1, r2
 801135c:	4658      	mov	r0, fp
 801135e:	f000 fb8d 	bl	8011a7c <uxr_stamp_session_header>
 8011362:	a80c      	add	r0, sp, #48	; 0x30
 8011364:	f7fe ff70 	bl	8010248 <ucdr_buffer_length>
 8011368:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 801136c:	4602      	mov	r2, r0
 801136e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011372:	a907      	add	r1, sp, #28
 8011374:	445c      	add	r4, fp
 8011376:	47a8      	blx	r5
 8011378:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801137c:	e79d      	b.n	80112ba <listen_message_reliably+0x36>
 801137e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8011382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011386:	45a2      	cmp	sl, r4
 8011388:	bf08      	it	eq
 801138a:	4599      	cmpeq	r9, r3
 801138c:	d01f      	beq.n	80113ce <listen_message_reliably+0x14a>
 801138e:	eba9 0107 	sub.w	r1, r9, r7
 8011392:	2900      	cmp	r1, #0
 8011394:	bf08      	it	eq
 8011396:	2101      	moveq	r1, #1
 8011398:	9c03      	ldr	r4, [sp, #12]
 801139a:	4658      	mov	r0, fp
 801139c:	428c      	cmp	r4, r1
 801139e:	4623      	mov	r3, r4
 80113a0:	bfa8      	it	ge
 80113a2:	460b      	movge	r3, r1
 80113a4:	4619      	mov	r1, r3
 80113a6:	461f      	mov	r7, r3
 80113a8:	f7ff fec8 	bl	801113c <listen_message>
 80113ac:	b110      	cbz	r0, 80113b4 <listen_message_reliably+0x130>
 80113ae:	b015      	add	sp, #84	; 0x54
 80113b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b4:	1be3      	subs	r3, r4, r7
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	9303      	str	r3, [sp, #12]
 80113ba:	ddf8      	ble.n	80113ae <listen_message_reliably+0x12a>
 80113bc:	f001 f9e2 	bl	8012784 <uxr_millis>
 80113c0:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80113c4:	4688      	mov	r8, r1
 80113c6:	4607      	mov	r7, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	f47f af6d 	bne.w	80112a8 <listen_message_reliably+0x24>
 80113ce:	9903      	ldr	r1, [sp, #12]
 80113d0:	e7df      	b.n	8011392 <listen_message_reliably+0x10e>
 80113d2:	bf00      	nop

080113d4 <uxr_init_session>:
 80113d4:	b5d0      	push	{r4, r6, r7, lr}
 80113d6:	2300      	movs	r3, #0
 80113d8:	2600      	movs	r6, #0
 80113da:	2700      	movs	r7, #0
 80113dc:	4604      	mov	r4, r0
 80113de:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 80113e2:	6701      	str	r1, [r0, #112]	; 0x70
 80113e4:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80113e8:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80113ec:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80113f0:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 80113f4:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80113f8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80113fc:	2181      	movs	r1, #129	; 0x81
 80113fe:	f000 faab 	bl	8011958 <uxr_init_session_info>
 8011402:	f104 0008 	add.w	r0, r4, #8
 8011406:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801140a:	f001 b891 	b.w	8012530 <uxr_init_stream_storage>
 801140e:	bf00      	nop

08011410 <uxr_set_status_callback>:
 8011410:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop

08011418 <uxr_set_topic_callback>:
 8011418:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop

08011420 <uxr_set_request_callback>:
 8011420:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop

08011428 <uxr_set_reply_callback>:
 8011428:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop

08011430 <uxr_create_session>:
 8011430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011434:	4604      	mov	r4, r0
 8011436:	f100 0708 	add.w	r7, r0, #8
 801143a:	b092      	sub	sp, #72	; 0x48
 801143c:	4638      	mov	r0, r7
 801143e:	f001 f881 	bl	8012544 <uxr_reset_stream_storage>
 8011442:	4620      	mov	r0, r4
 8011444:	f000 fb6e 	bl	8011b24 <uxr_session_header_offset>
 8011448:	2300      	movs	r3, #0
 801144a:	221c      	movs	r2, #28
 801144c:	9000      	str	r0, [sp, #0]
 801144e:	a903      	add	r1, sp, #12
 8011450:	a80a      	add	r0, sp, #40	; 0x28
 8011452:	f7fe feb9 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 8011456:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011458:	4620      	mov	r0, r4
 801145a:	8a1a      	ldrh	r2, [r3, #16]
 801145c:	a90a      	add	r1, sp, #40	; 0x28
 801145e:	3a04      	subs	r2, #4
 8011460:	b292      	uxth	r2, r2
 8011462:	f000 fa8b 	bl	801197c <uxr_buffer_create_session>
 8011466:	4620      	mov	r0, r4
 8011468:	990a      	ldr	r1, [sp, #40]	; 0x28
 801146a:	f000 faf3 	bl	8011a54 <uxr_stamp_create_session_header>
 801146e:	a80a      	add	r0, sp, #40	; 0x28
 8011470:	f7fe feea 	bl	8010248 <ucdr_buffer_length>
 8011474:	23ff      	movs	r3, #255	; 0xff
 8011476:	4606      	mov	r6, r0
 8011478:	250a      	movs	r5, #10
 801147a:	7163      	strb	r3, [r4, #5]
 801147c:	e001      	b.n	8011482 <uxr_create_session+0x52>
 801147e:	2bff      	cmp	r3, #255	; 0xff
 8011480:	d10d      	bne.n	801149e <uxr_create_session+0x6e>
 8011482:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011484:	4632      	mov	r2, r6
 8011486:	e9d3 0800 	ldrd	r0, r8, [r3]
 801148a:	a903      	add	r1, sp, #12
 801148c:	47c0      	blx	r8
 801148e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011492:	4620      	mov	r0, r4
 8011494:	f7ff fe52 	bl	801113c <listen_message>
 8011498:	3d01      	subs	r5, #1
 801149a:	7963      	ldrb	r3, [r4, #5]
 801149c:	d1ef      	bne.n	801147e <uxr_create_session+0x4e>
 801149e:	b11b      	cbz	r3, 80114a8 <uxr_create_session+0x78>
 80114a0:	2000      	movs	r0, #0
 80114a2:	b012      	add	sp, #72	; 0x48
 80114a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114a8:	4638      	mov	r0, r7
 80114aa:	f001 f84b 	bl	8012544 <uxr_reset_stream_storage>
 80114ae:	2001      	movs	r0, #1
 80114b0:	b012      	add	sp, #72	; 0x48
 80114b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b6:	bf00      	nop

080114b8 <uxr_delete_session_retries>:
 80114b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114bc:	b08e      	sub	sp, #56	; 0x38
 80114be:	4604      	mov	r4, r0
 80114c0:	460d      	mov	r5, r1
 80114c2:	f000 fb2f 	bl	8011b24 <uxr_session_header_offset>
 80114c6:	2300      	movs	r3, #0
 80114c8:	2210      	movs	r2, #16
 80114ca:	9000      	str	r0, [sp, #0]
 80114cc:	a902      	add	r1, sp, #8
 80114ce:	a806      	add	r0, sp, #24
 80114d0:	f7fe fe7a 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 80114d4:	4620      	mov	r0, r4
 80114d6:	a906      	add	r1, sp, #24
 80114d8:	f000 fa76 	bl	80119c8 <uxr_buffer_delete_session>
 80114dc:	2200      	movs	r2, #0
 80114de:	9b06      	ldr	r3, [sp, #24]
 80114e0:	4620      	mov	r0, r4
 80114e2:	4611      	mov	r1, r2
 80114e4:	f000 faca 	bl	8011a7c <uxr_stamp_session_header>
 80114e8:	a806      	add	r0, sp, #24
 80114ea:	f7fe fead 	bl	8010248 <ucdr_buffer_length>
 80114ee:	23ff      	movs	r3, #255	; 0xff
 80114f0:	4606      	mov	r6, r0
 80114f2:	7163      	strb	r3, [r4, #5]
 80114f4:	b1f5      	cbz	r5, 8011534 <uxr_delete_session_retries+0x7c>
 80114f6:	2700      	movs	r7, #0
 80114f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80114fa:	4632      	mov	r2, r6
 80114fc:	e9d3 0800 	ldrd	r0, r8, [r3]
 8011500:	a902      	add	r1, sp, #8
 8011502:	47c0      	blx	r8
 8011504:	3701      	adds	r7, #1
 8011506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801150a:	4620      	mov	r0, r4
 801150c:	f7ff fe16 	bl	801113c <listen_message>
 8011510:	42bd      	cmp	r5, r7
 8011512:	7963      	ldrb	r3, [r4, #5]
 8011514:	d007      	beq.n	8011526 <uxr_delete_session_retries+0x6e>
 8011516:	2bff      	cmp	r3, #255	; 0xff
 8011518:	d0ee      	beq.n	80114f8 <uxr_delete_session_retries+0x40>
 801151a:	fab3 f083 	clz	r0, r3
 801151e:	0940      	lsrs	r0, r0, #5
 8011520:	b00e      	add	sp, #56	; 0x38
 8011522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011526:	2bff      	cmp	r3, #255	; 0xff
 8011528:	bf08      	it	eq
 801152a:	2000      	moveq	r0, #0
 801152c:	d1f5      	bne.n	801151a <uxr_delete_session_retries+0x62>
 801152e:	b00e      	add	sp, #56	; 0x38
 8011530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011534:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011536:	4602      	mov	r2, r0
 8011538:	e9d3 0500 	ldrd	r0, r5, [r3]
 801153c:	a902      	add	r1, sp, #8
 801153e:	47a8      	blx	r5
 8011540:	7963      	ldrb	r3, [r4, #5]
 8011542:	fab3 f083 	clz	r0, r3
 8011546:	0940      	lsrs	r0, r0, #5
 8011548:	e7ea      	b.n	8011520 <uxr_delete_session_retries+0x68>
 801154a:	bf00      	nop

0801154c <uxr_create_output_best_effort_stream>:
 801154c:	b570      	push	{r4, r5, r6, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	4604      	mov	r4, r0
 8011552:	460d      	mov	r5, r1
 8011554:	4616      	mov	r6, r2
 8011556:	f000 fae5 	bl	8011b24 <uxr_session_header_offset>
 801155a:	4632      	mov	r2, r6
 801155c:	4603      	mov	r3, r0
 801155e:	4629      	mov	r1, r5
 8011560:	f104 0008 	add.w	r0, r4, #8
 8011564:	b002      	add	sp, #8
 8011566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801156a:	f001 b82b 	b.w	80125c4 <uxr_add_output_best_effort_buffer>
 801156e:	bf00      	nop

08011570 <uxr_create_output_reliable_stream>:
 8011570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011572:	b085      	sub	sp, #20
 8011574:	460d      	mov	r5, r1
 8011576:	4616      	mov	r6, r2
 8011578:	461f      	mov	r7, r3
 801157a:	4604      	mov	r4, r0
 801157c:	f000 fad2 	bl	8011b24 <uxr_session_header_offset>
 8011580:	4684      	mov	ip, r0
 8011582:	463b      	mov	r3, r7
 8011584:	4632      	mov	r2, r6
 8011586:	4629      	mov	r1, r5
 8011588:	f104 0008 	add.w	r0, r4, #8
 801158c:	f8cd c000 	str.w	ip, [sp]
 8011590:	f001 f82a 	bl	80125e8 <uxr_add_output_reliable_buffer>
 8011594:	4603      	mov	r3, r0
 8011596:	2000      	movs	r0, #0
 8011598:	b2da      	uxtb	r2, r3
 801159a:	f362 0007 	bfi	r0, r2, #0, #8
 801159e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80115a2:	f362 200f 	bfi	r0, r2, #8, #8
 80115a6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80115aa:	f362 4017 	bfi	r0, r2, #16, #8
 80115ae:	0e1b      	lsrs	r3, r3, #24
 80115b0:	f363 601f 	bfi	r0, r3, #24, #8
 80115b4:	b005      	add	sp, #20
 80115b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115b8 <uxr_create_input_best_effort_stream>:
 80115b8:	b082      	sub	sp, #8
 80115ba:	3008      	adds	r0, #8
 80115bc:	b002      	add	sp, #8
 80115be:	f001 b82d 	b.w	801261c <uxr_add_input_best_effort_buffer>
 80115c2:	bf00      	nop

080115c4 <uxr_create_input_reliable_stream>:
 80115c4:	b510      	push	{r4, lr}
 80115c6:	4c0c      	ldr	r4, [pc, #48]	; (80115f8 <uxr_create_input_reliable_stream+0x34>)
 80115c8:	b084      	sub	sp, #16
 80115ca:	9400      	str	r4, [sp, #0]
 80115cc:	3008      	adds	r0, #8
 80115ce:	f001 f83b 	bl	8012648 <uxr_add_input_reliable_buffer>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2000      	movs	r0, #0
 80115d6:	b2da      	uxtb	r2, r3
 80115d8:	f362 0007 	bfi	r0, r2, #0, #8
 80115dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80115e0:	f362 200f 	bfi	r0, r2, #8, #8
 80115e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80115e8:	f362 4017 	bfi	r0, r2, #16, #8
 80115ec:	0e1b      	lsrs	r3, r3, #24
 80115ee:	f363 601f 	bfi	r0, r3, #24, #8
 80115f2:	b004      	add	sp, #16
 80115f4:	bd10      	pop	{r4, pc}
 80115f6:	bf00      	nop
 80115f8:	08010cd1 	.word	0x08010cd1
 80115fc:	00000000 	.word	0x00000000

08011600 <uxr_sync_session>:
 8011600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011602:	b093      	sub	sp, #76	; 0x4c
 8011604:	4604      	mov	r4, r0
 8011606:	460d      	mov	r5, r1
 8011608:	f000 fa8c 	bl	8011b24 <uxr_session_header_offset>
 801160c:	2300      	movs	r3, #0
 801160e:	2214      	movs	r2, #20
 8011610:	9000      	str	r0, [sp, #0]
 8011612:	a905      	add	r1, sp, #20
 8011614:	a80a      	add	r0, sp, #40	; 0x28
 8011616:	f7fe fdd7 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 801161a:	2300      	movs	r3, #0
 801161c:	2208      	movs	r2, #8
 801161e:	210e      	movs	r1, #14
 8011620:	a80a      	add	r0, sp, #40	; 0x28
 8011622:	f001 f869 	bl	80126f8 <uxr_buffer_submessage_header>
 8011626:	f001 f8c9 	bl	80127bc <uxr_nanos>
 801162a:	a31d      	add	r3, pc, #116	; (adr r3, 80116a0 <uxr_sync_session+0xa0>)
 801162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011630:	4606      	mov	r6, r0
 8011632:	460f      	mov	r7, r1
 8011634:	f7ef f892 	bl	800075c <__aeabi_ldivmod>
 8011638:	a319      	add	r3, pc, #100	; (adr r3, 80116a0 <uxr_sync_session+0xa0>)
 801163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163e:	4684      	mov	ip, r0
 8011640:	4639      	mov	r1, r7
 8011642:	4630      	mov	r0, r6
 8011644:	f8cd c00c 	str.w	ip, [sp, #12]
 8011648:	f7ef f888 	bl	800075c <__aeabi_ldivmod>
 801164c:	a903      	add	r1, sp, #12
 801164e:	a80a      	add	r0, sp, #40	; 0x28
 8011650:	9204      	str	r2, [sp, #16]
 8011652:	f002 f891 	bl	8013778 <uxr_serialize_TIMESTAMP_Payload>
 8011656:	2200      	movs	r2, #0
 8011658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801165a:	4611      	mov	r1, r2
 801165c:	4620      	mov	r0, r4
 801165e:	f000 fa0d 	bl	8011a7c <uxr_stamp_session_header>
 8011662:	a80a      	add	r0, sp, #40	; 0x28
 8011664:	f7fe fdf0 	bl	8010248 <ucdr_buffer_length>
 8011668:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801166a:	4602      	mov	r2, r0
 801166c:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011670:	a905      	add	r1, sp, #20
 8011672:	47b0      	blx	r6
 8011674:	f001 f886 	bl	8012784 <uxr_millis>
 8011678:	2300      	movs	r3, #0
 801167a:	4606      	mov	r6, r0
 801167c:	4629      	mov	r1, r5
 801167e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8011682:	e000      	b.n	8011686 <uxr_sync_session+0x86>
 8011684:	b950      	cbnz	r0, 801169c <uxr_sync_session+0x9c>
 8011686:	4620      	mov	r0, r4
 8011688:	f7ff fdfc 	bl	8011284 <listen_message_reliably>
 801168c:	f001 f87a 	bl	8012784 <uxr_millis>
 8011690:	1b83      	subs	r3, r0, r6
 8011692:	1ae9      	subs	r1, r5, r3
 8011694:	2900      	cmp	r1, #0
 8011696:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 801169a:	dcf3      	bgt.n	8011684 <uxr_sync_session+0x84>
 801169c:	b013      	add	sp, #76	; 0x4c
 801169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a0:	3b9aca00 	.word	0x3b9aca00
 80116a4:	00000000 	.word	0x00000000

080116a8 <uxr_epoch_nanos>:
 80116a8:	b510      	push	{r4, lr}
 80116aa:	4604      	mov	r4, r0
 80116ac:	f001 f886 	bl	80127bc <uxr_nanos>
 80116b0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80116b4:	1ac0      	subs	r0, r0, r3
 80116b6:	eb61 0102 	sbc.w	r1, r1, r2
 80116ba:	bd10      	pop	{r4, pc}

080116bc <uxr_flash_output_streams>:
 80116bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116c0:	7e03      	ldrb	r3, [r0, #24]
 80116c2:	4604      	mov	r4, r0
 80116c4:	b084      	sub	sp, #16
 80116c6:	b1fb      	cbz	r3, 8011708 <uxr_flash_output_streams+0x4c>
 80116c8:	f04f 0900 	mov.w	r9, #0
 80116cc:	4648      	mov	r0, r9
 80116ce:	f10d 0802 	add.w	r8, sp, #2
 80116d2:	af03      	add	r7, sp, #12
 80116d4:	ae02      	add	r6, sp, #8
 80116d6:	2201      	movs	r2, #1
 80116d8:	4611      	mov	r1, r2
 80116da:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80116de:	f000 fed1 	bl	8012484 <uxr_stream_id>
 80116e2:	4684      	mov	ip, r0
 80116e4:	3508      	adds	r5, #8
 80116e6:	4643      	mov	r3, r8
 80116e8:	4628      	mov	r0, r5
 80116ea:	463a      	mov	r2, r7
 80116ec:	4631      	mov	r1, r6
 80116ee:	f8cd c004 	str.w	ip, [sp, #4]
 80116f2:	f005 fdd1 	bl	8017298 <uxr_prepare_best_effort_buffer_to_send>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d13c      	bne.n	8011774 <uxr_flash_output_streams+0xb8>
 80116fa:	7e23      	ldrb	r3, [r4, #24]
 80116fc:	f109 0901 	add.w	r9, r9, #1
 8011700:	fa5f f089 	uxtb.w	r0, r9
 8011704:	4283      	cmp	r3, r0
 8011706:	d8e6      	bhi.n	80116d6 <uxr_flash_output_streams+0x1a>
 8011708:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801170c:	b37b      	cbz	r3, 801176e <uxr_flash_output_streams+0xb2>
 801170e:	f04f 0900 	mov.w	r9, #0
 8011712:	4648      	mov	r0, r9
 8011714:	f10d 0802 	add.w	r8, sp, #2
 8011718:	af03      	add	r7, sp, #12
 801171a:	ae02      	add	r6, sp, #8
 801171c:	2201      	movs	r2, #1
 801171e:	2102      	movs	r1, #2
 8011720:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011724:	f000 feae 	bl	8012484 <uxr_stream_id>
 8011728:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801172c:	3520      	adds	r5, #32
 801172e:	9001      	str	r0, [sp, #4]
 8011730:	e00d      	b.n	801174e <uxr_flash_output_streams+0x92>
 8011732:	4620      	mov	r0, r4
 8011734:	9b02      	ldr	r3, [sp, #8]
 8011736:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801173a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801173e:	f000 f99d 	bl	8011a7c <uxr_stamp_session_header>
 8011742:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011744:	9a03      	ldr	r2, [sp, #12]
 8011746:	9902      	ldr	r1, [sp, #8]
 8011748:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801174c:	47d0      	blx	sl
 801174e:	4643      	mov	r3, r8
 8011750:	463a      	mov	r2, r7
 8011752:	4631      	mov	r1, r6
 8011754:	4628      	mov	r0, r5
 8011756:	f005 ffa1 	bl	801769c <uxr_prepare_next_reliable_buffer_to_send>
 801175a:	2800      	cmp	r0, #0
 801175c:	d1e9      	bne.n	8011732 <uxr_flash_output_streams+0x76>
 801175e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011762:	f109 0901 	add.w	r9, r9, #1
 8011766:	fa5f f089 	uxtb.w	r0, r9
 801176a:	4283      	cmp	r3, r0
 801176c:	d8d6      	bhi.n	801171c <uxr_flash_output_streams+0x60>
 801176e:	b004      	add	sp, #16
 8011770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011774:	4620      	mov	r0, r4
 8011776:	9b02      	ldr	r3, [sp, #8]
 8011778:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801177c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011780:	f000 f97c 	bl	8011a7c <uxr_stamp_session_header>
 8011784:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011786:	9a03      	ldr	r2, [sp, #12]
 8011788:	e9d3 0500 	ldrd	r0, r5, [r3]
 801178c:	9902      	ldr	r1, [sp, #8]
 801178e:	47a8      	blx	r5
 8011790:	f109 0901 	add.w	r9, r9, #1
 8011794:	7e23      	ldrb	r3, [r4, #24]
 8011796:	fa5f f089 	uxtb.w	r0, r9
 801179a:	4283      	cmp	r3, r0
 801179c:	d89b      	bhi.n	80116d6 <uxr_flash_output_streams+0x1a>
 801179e:	e7b3      	b.n	8011708 <uxr_flash_output_streams+0x4c>

080117a0 <uxr_run_session_until_data>:
 80117a0:	b570      	push	{r4, r5, r6, lr}
 80117a2:	4604      	mov	r4, r0
 80117a4:	460d      	mov	r5, r1
 80117a6:	f000 ffed 	bl	8012784 <uxr_millis>
 80117aa:	4606      	mov	r6, r0
 80117ac:	4620      	mov	r0, r4
 80117ae:	f7ff ff85 	bl	80116bc <uxr_flash_output_streams>
 80117b2:	2300      	movs	r3, #0
 80117b4:	4629      	mov	r1, r5
 80117b6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80117ba:	e005      	b.n	80117c8 <uxr_run_session_until_data+0x28>
 80117bc:	f000 ffe2 	bl	8012784 <uxr_millis>
 80117c0:	1b81      	subs	r1, r0, r6
 80117c2:	1a69      	subs	r1, r5, r1
 80117c4:	2900      	cmp	r1, #0
 80117c6:	dd07      	ble.n	80117d8 <uxr_run_session_until_data+0x38>
 80117c8:	4620      	mov	r0, r4
 80117ca:	f7ff fd5b 	bl	8011284 <listen_message_reliably>
 80117ce:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d0f2      	beq.n	80117bc <uxr_run_session_until_data+0x1c>
 80117d6:	bd70      	pop	{r4, r5, r6, pc}
 80117d8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80117dc:	bd70      	pop	{r4, r5, r6, pc}
 80117de:	bf00      	nop

080117e0 <uxr_run_session_until_confirm_delivery>:
 80117e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e4:	4606      	mov	r6, r0
 80117e6:	460d      	mov	r5, r1
 80117e8:	f000 ffcc 	bl	8012784 <uxr_millis>
 80117ec:	4607      	mov	r7, r0
 80117ee:	4630      	mov	r0, r6
 80117f0:	f7ff ff64 	bl	80116bc <uxr_flash_output_streams>
 80117f4:	2d00      	cmp	r5, #0
 80117f6:	bfa8      	it	ge
 80117f8:	462c      	movge	r4, r5
 80117fa:	f106 0808 	add.w	r8, r6, #8
 80117fe:	da09      	bge.n	8011814 <uxr_run_session_until_confirm_delivery+0x34>
 8011800:	e00d      	b.n	801181e <uxr_run_session_until_confirm_delivery+0x3e>
 8011802:	4621      	mov	r1, r4
 8011804:	4630      	mov	r0, r6
 8011806:	f7ff fd3d 	bl	8011284 <listen_message_reliably>
 801180a:	f000 ffbb 	bl	8012784 <uxr_millis>
 801180e:	1bc1      	subs	r1, r0, r7
 8011810:	1a6c      	subs	r4, r5, r1
 8011812:	d404      	bmi.n	801181e <uxr_run_session_until_confirm_delivery+0x3e>
 8011814:	4640      	mov	r0, r8
 8011816:	f000 ff59 	bl	80126cc <uxr_output_streams_confirmed>
 801181a:	2800      	cmp	r0, #0
 801181c:	d0f1      	beq.n	8011802 <uxr_run_session_until_confirm_delivery+0x22>
 801181e:	4640      	mov	r0, r8
 8011820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011824:	f000 bf52 	b.w	80126cc <uxr_output_streams_confirmed>

08011828 <uxr_run_session_until_all_status>:
 8011828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801182c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801182e:	4688      	mov	r8, r1
 8011830:	4615      	mov	r5, r2
 8011832:	461c      	mov	r4, r3
 8011834:	4607      	mov	r7, r0
 8011836:	f7ff ff41 	bl	80116bc <uxr_flash_output_streams>
 801183a:	b126      	cbz	r6, 8011846 <uxr_run_session_until_all_status+0x1e>
 801183c:	4632      	mov	r2, r6
 801183e:	21ff      	movs	r1, #255	; 0xff
 8011840:	4620      	mov	r0, r4
 8011842:	f006 fafb 	bl	8017e3c <memset>
 8011846:	e9c7 541d 	strd	r5, r4, [r7, #116]	; 0x74
 801184a:	67fe      	str	r6, [r7, #124]	; 0x7c
 801184c:	f000 ff9a 	bl	8012784 <uxr_millis>
 8011850:	4641      	mov	r1, r8
 8011852:	4681      	mov	r9, r0
 8011854:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8011858:	f1a5 0a02 	sub.w	sl, r5, #2
 801185c:	4638      	mov	r0, r7
 801185e:	f7ff fd11 	bl	8011284 <listen_message_reliably>
 8011862:	f000 ff8f 	bl	8012784 <uxr_millis>
 8011866:	eba0 0109 	sub.w	r1, r0, r9
 801186a:	eba8 0101 	sub.w	r1, r8, r1
 801186e:	b33e      	cbz	r6, 80118c0 <uxr_run_session_until_all_status+0x98>
 8011870:	4658      	mov	r0, fp
 8011872:	465c      	mov	r4, fp
 8011874:	2301      	movs	r3, #1
 8011876:	e002      	b.n	801187e <uxr_run_session_until_all_status+0x56>
 8011878:	42b3      	cmp	r3, r6
 801187a:	d20c      	bcs.n	8011896 <uxr_run_session_until_all_status+0x6e>
 801187c:	3301      	adds	r3, #1
 801187e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8011882:	2dff      	cmp	r5, #255	; 0xff
 8011884:	d1f8      	bne.n	8011878 <uxr_run_session_until_all_status+0x50>
 8011886:	42b3      	cmp	r3, r6
 8011888:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 801188c:	d213      	bcs.n	80118b6 <uxr_run_session_until_all_status+0x8e>
 801188e:	2a00      	cmp	r2, #0
 8011890:	d0f4      	beq.n	801187c <uxr_run_session_until_all_status+0x54>
 8011892:	2900      	cmp	r1, #0
 8011894:	dce2      	bgt.n	801185c <uxr_run_session_until_all_status+0x34>
 8011896:	2300      	movs	r3, #0
 8011898:	445e      	add	r6, fp
 801189a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801189c:	e001      	b.n	80118a2 <uxr_run_session_until_all_status+0x7a>
 801189e:	2b01      	cmp	r3, #1
 80118a0:	d812      	bhi.n	80118c8 <uxr_run_session_until_all_status+0xa0>
 80118a2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80118a6:	4286      	cmp	r6, r0
 80118a8:	d1f9      	bne.n	801189e <uxr_run_session_until_all_status+0x76>
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	bf8c      	ite	hi
 80118ae:	2000      	movhi	r0, #0
 80118b0:	2001      	movls	r0, #1
 80118b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b6:	2900      	cmp	r1, #0
 80118b8:	dded      	ble.n	8011896 <uxr_run_session_until_all_status+0x6e>
 80118ba:	2a00      	cmp	r2, #0
 80118bc:	d1ce      	bne.n	801185c <uxr_run_session_until_all_status+0x34>
 80118be:	e7ea      	b.n	8011896 <uxr_run_session_until_all_status+0x6e>
 80118c0:	2001      	movs	r0, #1
 80118c2:	67fe      	str	r6, [r7, #124]	; 0x7c
 80118c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c8:	2000      	movs	r0, #0
 80118ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118ce:	bf00      	nop

080118d0 <uxr_prepare_stream_to_write_submessage>:
 80118d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118d4:	4615      	mov	r5, r2
 80118d6:	b082      	sub	sp, #8
 80118d8:	4682      	mov	sl, r0
 80118da:	4610      	mov	r0, r2
 80118dc:	461e      	mov	r6, r3
 80118de:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80118e2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80118e6:	9101      	str	r1, [sp, #4]
 80118e8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80118ec:	f000 ff44 	bl	8012778 <uxr_submessage_padding>
 80118f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80118f4:	f105 0904 	add.w	r9, r5, #4
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	4481      	add	r9, r0
 80118fc:	d01d      	beq.n	801193a <uxr_prepare_stream_to_write_submessage+0x6a>
 80118fe:	2b02      	cmp	r3, #2
 8011900:	d116      	bne.n	8011930 <uxr_prepare_stream_to_write_submessage+0x60>
 8011902:	4621      	mov	r1, r4
 8011904:	f10a 0008 	add.w	r0, sl, #8
 8011908:	f000 febe 	bl	8012688 <uxr_get_output_reliable_stream>
 801190c:	4604      	mov	r4, r0
 801190e:	b158      	cbz	r0, 8011928 <uxr_prepare_stream_to_write_submessage+0x58>
 8011910:	4649      	mov	r1, r9
 8011912:	4632      	mov	r2, r6
 8011914:	f005 fd64 	bl	80173e0 <uxr_prepare_reliable_buffer_to_write>
 8011918:	4604      	mov	r4, r0
 801191a:	b12c      	cbz	r4, 8011928 <uxr_prepare_stream_to_write_submessage+0x58>
 801191c:	4643      	mov	r3, r8
 801191e:	4639      	mov	r1, r7
 8011920:	4630      	mov	r0, r6
 8011922:	b2aa      	uxth	r2, r5
 8011924:	f000 fee8 	bl	80126f8 <uxr_buffer_submessage_header>
 8011928:	4620      	mov	r0, r4
 801192a:	b002      	add	sp, #8
 801192c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011930:	2400      	movs	r4, #0
 8011932:	4620      	mov	r0, r4
 8011934:	b002      	add	sp, #8
 8011936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801193a:	4621      	mov	r1, r4
 801193c:	f10a 0008 	add.w	r0, sl, #8
 8011940:	f000 fe9a 	bl	8012678 <uxr_get_output_best_effort_stream>
 8011944:	4604      	mov	r4, r0
 8011946:	2800      	cmp	r0, #0
 8011948:	d0ee      	beq.n	8011928 <uxr_prepare_stream_to_write_submessage+0x58>
 801194a:	4649      	mov	r1, r9
 801194c:	4632      	mov	r2, r6
 801194e:	f005 fc83 	bl	8017258 <uxr_prepare_best_effort_buffer_to_write>
 8011952:	4604      	mov	r4, r0
 8011954:	e7e1      	b.n	801191a <uxr_prepare_stream_to_write_submessage+0x4a>
 8011956:	bf00      	nop

08011958 <uxr_init_session_info>:
 8011958:	b430      	push	{r4, r5}
 801195a:	23ff      	movs	r3, #255	; 0xff
 801195c:	2409      	movs	r4, #9
 801195e:	0e15      	lsrs	r5, r2, #24
 8011960:	7102      	strb	r2, [r0, #4]
 8011962:	7001      	strb	r1, [r0, #0]
 8011964:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8011968:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801196c:	7045      	strb	r5, [r0, #1]
 801196e:	80c4      	strh	r4, [r0, #6]
 8011970:	7081      	strb	r1, [r0, #2]
 8011972:	70c2      	strb	r2, [r0, #3]
 8011974:	7143      	strb	r3, [r0, #5]
 8011976:	bc30      	pop	{r4, r5}
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop

0801197c <uxr_buffer_create_session>:
 801197c:	b570      	push	{r4, r5, r6, lr}
 801197e:	460c      	mov	r4, r1
 8011980:	2101      	movs	r1, #1
 8011982:	2300      	movs	r3, #0
 8011984:	b088      	sub	sp, #32
 8011986:	4d0f      	ldr	r5, [pc, #60]	; (80119c4 <uxr_buffer_create_session+0x48>)
 8011988:	f8ad 201c 	strh.w	r2, [sp, #28]
 801198c:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011990:	80c1      	strh	r1, [r0, #6]
 8011992:	9202      	str	r2, [sp, #8]
 8011994:	7800      	ldrb	r0, [r0, #0]
 8011996:	88aa      	ldrh	r2, [r5, #4]
 8011998:	682e      	ldr	r6, [r5, #0]
 801199a:	f88d 000c 	strb.w	r0, [sp, #12]
 801199e:	f8ad 1004 	strh.w	r1, [sp, #4]
 80119a2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80119a6:	4619      	mov	r1, r3
 80119a8:	2210      	movs	r2, #16
 80119aa:	4620      	mov	r0, r4
 80119ac:	f88d 300d 	strb.w	r3, [sp, #13]
 80119b0:	9600      	str	r6, [sp, #0]
 80119b2:	f000 fea1 	bl	80126f8 <uxr_buffer_submessage_header>
 80119b6:	4620      	mov	r0, r4
 80119b8:	4669      	mov	r1, sp
 80119ba:	f001 fd71 	bl	80134a0 <uxr_serialize_CREATE_CLIENT_Payload>
 80119be:	b008      	add	sp, #32
 80119c0:	bd70      	pop	{r4, r5, r6, pc}
 80119c2:	bf00      	nop
 80119c4:	0801a390 	.word	0x0801a390

080119c8 <uxr_buffer_delete_session>:
 80119c8:	b530      	push	{r4, r5, lr}
 80119ca:	2202      	movs	r2, #2
 80119cc:	460c      	mov	r4, r1
 80119ce:	f44f 7500 	mov.w	r5, #512	; 0x200
 80119d2:	4b0a      	ldr	r3, [pc, #40]	; (80119fc <uxr_buffer_delete_session+0x34>)
 80119d4:	b083      	sub	sp, #12
 80119d6:	8919      	ldrh	r1, [r3, #8]
 80119d8:	80c2      	strh	r2, [r0, #6]
 80119da:	2300      	movs	r3, #0
 80119dc:	2204      	movs	r2, #4
 80119de:	f8ad 1006 	strh.w	r1, [sp, #6]
 80119e2:	4620      	mov	r0, r4
 80119e4:	2103      	movs	r1, #3
 80119e6:	f8ad 5004 	strh.w	r5, [sp, #4]
 80119ea:	f000 fe85 	bl	80126f8 <uxr_buffer_submessage_header>
 80119ee:	4620      	mov	r0, r4
 80119f0:	a901      	add	r1, sp, #4
 80119f2:	f001 fdef 	bl	80135d4 <uxr_serialize_DELETE_Payload>
 80119f6:	b003      	add	sp, #12
 80119f8:	bd30      	pop	{r4, r5, pc}
 80119fa:	bf00      	nop
 80119fc:	0801a390 	.word	0x0801a390

08011a00 <uxr_read_create_session_status>:
 8011a00:	b510      	push	{r4, lr}
 8011a02:	b088      	sub	sp, #32
 8011a04:	4604      	mov	r4, r0
 8011a06:	4608      	mov	r0, r1
 8011a08:	a901      	add	r1, sp, #4
 8011a0a:	f001 fdf3 	bl	80135f4 <uxr_deserialize_STATUS_AGENT_Payload>
 8011a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a12:	7163      	strb	r3, [r4, #5]
 8011a14:	b008      	add	sp, #32
 8011a16:	bd10      	pop	{r4, pc}

08011a18 <uxr_read_delete_session_status>:
 8011a18:	b510      	push	{r4, lr}
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	b084      	sub	sp, #16
 8011a1e:	4608      	mov	r0, r1
 8011a20:	a902      	add	r1, sp, #8
 8011a22:	f001 fe17 	bl	8013654 <uxr_deserialize_STATUS_Payload>
 8011a26:	88e3      	ldrh	r3, [r4, #6]
 8011a28:	2b02      	cmp	r3, #2
 8011a2a:	d001      	beq.n	8011a30 <uxr_read_delete_session_status+0x18>
 8011a2c:	b004      	add	sp, #16
 8011a2e:	bd10      	pop	{r4, pc}
 8011a30:	f10d 000a 	add.w	r0, sp, #10
 8011a34:	f7ff f80c 	bl	8010a50 <uxr_object_id_from_raw>
 8011a38:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011a3c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011a40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	bf04      	itt	eq
 8011a4a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011a4e:	7163      	strbeq	r3, [r4, #5]
 8011a50:	b004      	add	sp, #16
 8011a52:	bd10      	pop	{r4, pc}

08011a54 <uxr_stamp_create_session_header>:
 8011a54:	b510      	push	{r4, lr}
 8011a56:	4604      	mov	r4, r0
 8011a58:	b08a      	sub	sp, #40	; 0x28
 8011a5a:	a802      	add	r0, sp, #8
 8011a5c:	2208      	movs	r2, #8
 8011a5e:	f7fe fbc5 	bl	80101ec <ucdr_init_buffer>
 8011a62:	2300      	movs	r3, #0
 8011a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a68:	461a      	mov	r2, r3
 8011a6a:	a802      	add	r0, sp, #8
 8011a6c:	9400      	str	r4, [sp, #0]
 8011a6e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011a72:	f001 f841 	bl	8012af8 <uxr_serialize_message_header>
 8011a76:	b00a      	add	sp, #40	; 0x28
 8011a78:	bd10      	pop	{r4, pc}
 8011a7a:	bf00      	nop

08011a7c <uxr_stamp_session_header>:
 8011a7c:	b570      	push	{r4, r5, r6, lr}
 8011a7e:	4604      	mov	r4, r0
 8011a80:	460d      	mov	r5, r1
 8011a82:	4616      	mov	r6, r2
 8011a84:	b08a      	sub	sp, #40	; 0x28
 8011a86:	4619      	mov	r1, r3
 8011a88:	a802      	add	r0, sp, #8
 8011a8a:	2208      	movs	r2, #8
 8011a8c:	f7fe fbae 	bl	80101ec <ucdr_init_buffer>
 8011a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a94:	4633      	mov	r3, r6
 8011a96:	462a      	mov	r2, r5
 8011a98:	a802      	add	r0, sp, #8
 8011a9a:	9400      	str	r4, [sp, #0]
 8011a9c:	f001 f82c 	bl	8012af8 <uxr_serialize_message_header>
 8011aa0:	b00a      	add	sp, #40	; 0x28
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}

08011aa4 <uxr_read_session_header>:
 8011aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	b084      	sub	sp, #16
 8011aac:	4608      	mov	r0, r1
 8011aae:	460c      	mov	r4, r1
 8011ab0:	4615      	mov	r5, r2
 8011ab2:	461e      	mov	r6, r3
 8011ab4:	f7fe fbcc 	bl	8010250 <ucdr_buffer_remaining>
 8011ab8:	2808      	cmp	r0, #8
 8011aba:	d803      	bhi.n	8011ac4 <uxr_read_session_header+0x20>
 8011abc:	2000      	movs	r0, #0
 8011abe:	b004      	add	sp, #16
 8011ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ac4:	f10d 080c 	add.w	r8, sp, #12
 8011ac8:	4633      	mov	r3, r6
 8011aca:	462a      	mov	r2, r5
 8011acc:	4620      	mov	r0, r4
 8011ace:	f8cd 8000 	str.w	r8, [sp]
 8011ad2:	f10d 010b 	add.w	r1, sp, #11
 8011ad6:	f001 f82d 	bl	8012b34 <uxr_deserialize_message_header>
 8011ada:	783a      	ldrb	r2, [r7, #0]
 8011adc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d1eb      	bne.n	8011abc <uxr_read_session_header+0x18>
 8011ae4:	061b      	lsls	r3, r3, #24
 8011ae6:	d41b      	bmi.n	8011b20 <uxr_read_session_header+0x7c>
 8011ae8:	f898 2000 	ldrb.w	r2, [r8]
 8011aec:	787b      	ldrb	r3, [r7, #1]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d003      	beq.n	8011afa <uxr_read_session_header+0x56>
 8011af2:	2001      	movs	r0, #1
 8011af4:	f080 0001 	eor.w	r0, r0, #1
 8011af8:	e7e1      	b.n	8011abe <uxr_read_session_header+0x1a>
 8011afa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011afe:	78bb      	ldrb	r3, [r7, #2]
 8011b00:	1cb9      	adds	r1, r7, #2
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d1f5      	bne.n	8011af2 <uxr_read_session_header+0x4e>
 8011b06:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011b0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d1ef      	bne.n	8011af2 <uxr_read_session_header+0x4e>
 8011b12:	784b      	ldrb	r3, [r1, #1]
 8011b14:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d1ea      	bne.n	8011af2 <uxr_read_session_header+0x4e>
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	e7e9      	b.n	8011af4 <uxr_read_session_header+0x50>
 8011b20:	2001      	movs	r0, #1
 8011b22:	e7cc      	b.n	8011abe <uxr_read_session_header+0x1a>

08011b24 <uxr_session_header_offset>:
 8011b24:	f990 3000 	ldrsb.w	r3, [r0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	bfac      	ite	ge
 8011b2c:	2008      	movge	r0, #8
 8011b2e:	2004      	movlt	r0, #4
 8011b30:	4770      	bx	lr
 8011b32:	bf00      	nop

08011b34 <uxr_init_base_object_request>:
 8011b34:	b530      	push	{r4, r5, lr}
 8011b36:	f64f 75f4 	movw	r5, #65524	; 0xfff4
 8011b3a:	88c3      	ldrh	r3, [r0, #6]
 8011b3c:	b083      	sub	sp, #12
 8011b3e:	f1a3 040a 	sub.w	r4, r3, #10
 8011b42:	b2a4      	uxth	r4, r4
 8011b44:	42ac      	cmp	r4, r5
 8011b46:	9101      	str	r1, [sp, #4]
 8011b48:	d80e      	bhi.n	8011b68 <uxr_init_base_object_request+0x34>
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	b29c      	uxth	r4, r3
 8011b4e:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011b52:	b2db      	uxtb	r3, r3
 8011b54:	80c4      	strh	r4, [r0, #6]
 8011b56:	1c91      	adds	r1, r2, #2
 8011b58:	9801      	ldr	r0, [sp, #4]
 8011b5a:	7015      	strb	r5, [r2, #0]
 8011b5c:	7053      	strb	r3, [r2, #1]
 8011b5e:	f7fe ff8b 	bl	8010a78 <uxr_object_id_to_raw>
 8011b62:	4620      	mov	r0, r4
 8011b64:	b003      	add	sp, #12
 8011b66:	bd30      	pop	{r4, r5, pc}
 8011b68:	230a      	movs	r3, #10
 8011b6a:	2500      	movs	r5, #0
 8011b6c:	461c      	mov	r4, r3
 8011b6e:	e7f1      	b.n	8011b54 <uxr_init_base_object_request+0x20>

08011b70 <uxr_parse_base_object_request>:
 8011b70:	b570      	push	{r4, r5, r6, lr}
 8011b72:	4604      	mov	r4, r0
 8011b74:	3002      	adds	r0, #2
 8011b76:	460d      	mov	r5, r1
 8011b78:	4616      	mov	r6, r2
 8011b7a:	f7fe ff69 	bl	8010a50 <uxr_object_id_from_raw>
 8011b7e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011b82:	8028      	strh	r0, [r5, #0]
 8011b84:	806b      	strh	r3, [r5, #2]
 8011b86:	7822      	ldrb	r2, [r4, #0]
 8011b88:	7863      	ldrb	r3, [r4, #1]
 8011b8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011b8e:	8033      	strh	r3, [r6, #0]
 8011b90:	bd70      	pop	{r4, r5, r6, pc}
 8011b92:	bf00      	nop

08011b94 <uxr_init_framing_io>:
 8011b94:	2300      	movs	r3, #0
 8011b96:	7041      	strb	r1, [r0, #1]
 8011b98:	7003      	strb	r3, [r0, #0]
 8011b9a:	8583      	strh	r3, [r0, #44]	; 0x2c
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <uxr_write_framed_msg>:
 8011ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ba4:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8011ba8:	4604      	mov	r4, r0
 8011baa:	7840      	ldrb	r0, [r0, #1]
 8011bac:	b085      	sub	sp, #20
 8011bae:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 8011bb2:	2d01      	cmp	r5, #1
 8011bb4:	460e      	mov	r6, r1
 8011bb6:	4617      	mov	r7, r2
 8011bb8:	469b      	mov	fp, r3
 8011bba:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011bbe:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8011bc2:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
 8011bc6:	f240 8131 	bls.w	8011e2c <uxr_write_framed_msg+0x28c>
 8011bca:	2302      	movs	r3, #2
 8011bcc:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011bd0:	2a01      	cmp	r2, #1
 8011bd2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8011bd6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011bda:	f240 8092 	bls.w	8011d02 <uxr_write_framed_msg+0x162>
 8011bde:	2303      	movs	r3, #3
 8011be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011be2:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8011be6:	b2d0      	uxtb	r0, r2
 8011be8:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011bec:	2a01      	cmp	r2, #1
 8011bee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011bf2:	f240 809c 	bls.w	8011d2e <uxr_write_framed_msg+0x18e>
 8011bf6:	18e2      	adds	r2, r4, r3
 8011bf8:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8011bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011bfe:	3301      	adds	r3, #1
 8011c00:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011c04:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011c08:	2a01      	cmp	r2, #1
 8011c0a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011c0e:	f240 80a1 	bls.w	8011d54 <uxr_write_framed_msg+0x1b4>
 8011c12:	1c5a      	adds	r2, r3, #1
 8011c14:	4423      	add	r3, r4
 8011c16:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8011c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c1c:	b2d2      	uxtb	r2, r2
 8011c1e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f000 80a6 	beq.w	8011d74 <uxr_write_framed_msg+0x1d4>
 8011c28:	f04f 0a00 	mov.w	sl, #0
 8011c2c:	46d1      	mov	r9, sl
 8011c2e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011c32:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011c36:	2901      	cmp	r1, #1
 8011c38:	f240 80bf 	bls.w	8011dba <uxr_write_framed_msg+0x21a>
 8011c3c:	2a29      	cmp	r2, #41	; 0x29
 8011c3e:	f200 809c 	bhi.w	8011d7a <uxr_write_framed_msg+0x1da>
 8011c42:	1c50      	adds	r0, r2, #1
 8011c44:	18a1      	adds	r1, r4, r2
 8011c46:	b2c2      	uxtb	r2, r0
 8011c48:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8011c4c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011c50:	ea8a 0303 	eor.w	r3, sl, r3
 8011c54:	4988      	ldr	r1, [pc, #544]	; (8011e78 <uxr_write_framed_msg+0x2d8>)
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011c5c:	f109 0901 	add.w	r9, r9, #1
 8011c60:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8011c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c66:	454b      	cmp	r3, r9
 8011c68:	d8e1      	bhi.n	8011c2e <uxr_write_framed_msg+0x8e>
 8011c6a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011c6e:	fa5f f98a 	uxtb.w	r9, sl
 8011c72:	9301      	str	r3, [sp, #4]
 8011c74:	f04f 0b00 	mov.w	fp, #0
 8011c78:	f88d 900c 	strb.w	r9, [sp, #12]
 8011c7c:	f88d 300d 	strb.w	r3, [sp, #13]
 8011c80:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8011c84:	fa5f f18a 	uxtb.w	r1, sl
 8011c88:	2901      	cmp	r1, #1
 8011c8a:	d921      	bls.n	8011cd0 <uxr_write_framed_msg+0x130>
 8011c8c:	2a29      	cmp	r2, #41	; 0x29
 8011c8e:	f240 80a6 	bls.w	8011dde <uxr_write_framed_msg+0x23e>
 8011c92:	2500      	movs	r5, #0
 8011c94:	e000      	b.n	8011c98 <uxr_write_framed_msg+0xf8>
 8011c96:	b160      	cbz	r0, 8011cb2 <uxr_write_framed_msg+0x112>
 8011c98:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011c9c:	1b52      	subs	r2, r2, r5
 8011c9e:	4643      	mov	r3, r8
 8011ca0:	4638      	mov	r0, r7
 8011ca2:	4421      	add	r1, r4
 8011ca4:	47b0      	blx	r6
 8011ca6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011caa:	4405      	add	r5, r0
 8011cac:	4295      	cmp	r5, r2
 8011cae:	d3f2      	bcc.n	8011c96 <uxr_write_framed_msg+0xf6>
 8011cb0:	d003      	beq.n	8011cba <uxr_write_framed_msg+0x11a>
 8011cb2:	2000      	movs	r0, #0
 8011cb4:	b005      	add	sp, #20
 8011cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cba:	f04f 0300 	mov.w	r3, #0
 8011cbe:	fa5f f18a 	uxtb.w	r1, sl
 8011cc2:	2901      	cmp	r1, #1
 8011cc4:	f04f 0200 	mov.w	r2, #0
 8011cc8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011ccc:	f200 8087 	bhi.w	8011dde <uxr_write_framed_msg+0x23e>
 8011cd0:	1c51      	adds	r1, r2, #1
 8011cd2:	b2c9      	uxtb	r1, r1
 8011cd4:	2929      	cmp	r1, #41	; 0x29
 8011cd6:	d8dc      	bhi.n	8011c92 <uxr_write_framed_msg+0xf2>
 8011cd8:	1c91      	adds	r1, r2, #2
 8011cda:	18a0      	adds	r0, r4, r2
 8011cdc:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8011ce0:	b2ca      	uxtb	r2, r1
 8011ce2:	4659      	mov	r1, fp
 8011ce4:	f089 0920 	eor.w	r9, r9, #32
 8011ce8:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8011cec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011cf0:	f04f 0b01 	mov.w	fp, #1
 8011cf4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011cf8:	2900      	cmp	r1, #0
 8011cfa:	d17c      	bne.n	8011df6 <uxr_write_framed_msg+0x256>
 8011cfc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011d00:	e7be      	b.n	8011c80 <uxr_write_framed_msg+0xe0>
 8011d02:	461a      	mov	r2, r3
 8011d04:	2503      	movs	r5, #3
 8011d06:	2304      	movs	r3, #4
 8011d08:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8011d0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011d0e:	4422      	add	r2, r4
 8011d10:	b2c0      	uxtb	r0, r0
 8011d12:	f882 c038 	strb.w	ip, [r2, #56]	; 0x38
 8011d16:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011d1a:	4425      	add	r5, r4
 8011d1c:	f081 0120 	eor.w	r1, r1, #32
 8011d20:	2a01      	cmp	r2, #1
 8011d22:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
 8011d26:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011d2a:	f63f af64 	bhi.w	8011bf6 <uxr_write_framed_msg+0x56>
 8011d2e:	217d      	movs	r1, #125	; 0x7d
 8011d30:	18e2      	adds	r2, r4, r3
 8011d32:	f080 0020 	eor.w	r0, r0, #32
 8011d36:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8011d3a:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 8011d3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d40:	3302      	adds	r3, #2
 8011d42:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8011d46:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011d4a:	2a01      	cmp	r2, #1
 8011d4c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011d50:	f63f af5f 	bhi.w	8011c12 <uxr_write_framed_msg+0x72>
 8011d54:	257d      	movs	r5, #125	; 0x7d
 8011d56:	18e0      	adds	r0, r4, r3
 8011d58:	3302      	adds	r3, #2
 8011d5a:	b2da      	uxtb	r2, r3
 8011d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d5e:	f081 0120 	eor.w	r1, r1, #32
 8011d62:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8011d66:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011d6a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f47f af5a 	bne.w	8011c28 <uxr_write_framed_msg+0x88>
 8011d74:	4699      	mov	r9, r3
 8011d76:	9301      	str	r3, [sp, #4]
 8011d78:	e77c      	b.n	8011c74 <uxr_write_framed_msg+0xd4>
 8011d7a:	2500      	movs	r5, #0
 8011d7c:	e001      	b.n	8011d82 <uxr_write_framed_msg+0x1e2>
 8011d7e:	2800      	cmp	r0, #0
 8011d80:	d097      	beq.n	8011cb2 <uxr_write_framed_msg+0x112>
 8011d82:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011d86:	1b52      	subs	r2, r2, r5
 8011d88:	4643      	mov	r3, r8
 8011d8a:	4638      	mov	r0, r7
 8011d8c:	4421      	add	r1, r4
 8011d8e:	47b0      	blx	r6
 8011d90:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011d94:	4405      	add	r5, r0
 8011d96:	4295      	cmp	r5, r2
 8011d98:	d3f1      	bcc.n	8011d7e <uxr_write_framed_msg+0x1de>
 8011d9a:	d18a      	bne.n	8011cb2 <uxr_write_framed_msg+0x112>
 8011d9c:	f04f 0300 	mov.w	r3, #0
 8011da0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011da6:	454b      	cmp	r3, r9
 8011da8:	d95f      	bls.n	8011e6a <uxr_write_framed_msg+0x2ca>
 8011daa:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011db4:	2901      	cmp	r1, #1
 8011db6:	f63f af41 	bhi.w	8011c3c <uxr_write_framed_msg+0x9c>
 8011dba:	1c51      	adds	r1, r2, #1
 8011dbc:	b2c9      	uxtb	r1, r1
 8011dbe:	2929      	cmp	r1, #41	; 0x29
 8011dc0:	d8db      	bhi.n	8011d7a <uxr_write_framed_msg+0x1da>
 8011dc2:	1c95      	adds	r5, r2, #2
 8011dc4:	18a0      	adds	r0, r4, r2
 8011dc6:	b2ea      	uxtb	r2, r5
 8011dc8:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8011dcc:	f083 0120 	eor.w	r1, r3, #32
 8011dd0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011dd4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8011dd8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011ddc:	e738      	b.n	8011c50 <uxr_write_framed_msg+0xb0>
 8011dde:	4659      	mov	r1, fp
 8011de0:	1c55      	adds	r5, r2, #1
 8011de2:	18a0      	adds	r0, r4, r2
 8011de4:	b2ea      	uxtb	r2, r5
 8011de6:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8011dea:	f04f 0b01 	mov.w	fp, #1
 8011dee:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011df2:	2900      	cmp	r1, #0
 8011df4:	d082      	beq.n	8011cfc <uxr_write_framed_msg+0x15c>
 8011df6:	2500      	movs	r5, #0
 8011df8:	e002      	b.n	8011e00 <uxr_write_framed_msg+0x260>
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	f43f af59 	beq.w	8011cb2 <uxr_write_framed_msg+0x112>
 8011e00:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011e04:	1b52      	subs	r2, r2, r5
 8011e06:	4643      	mov	r3, r8
 8011e08:	4638      	mov	r0, r7
 8011e0a:	4421      	add	r1, r4
 8011e0c:	47b0      	blx	r6
 8011e0e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011e12:	4405      	add	r5, r0
 8011e14:	4295      	cmp	r5, r2
 8011e16:	d3f0      	bcc.n	8011dfa <uxr_write_framed_msg+0x25a>
 8011e18:	f47f af4b 	bne.w	8011cb2 <uxr_write_framed_msg+0x112>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e20:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011e24:	b290      	uxth	r0, r2
 8011e26:	b005      	add	sp, #20
 8011e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2c:	2303      	movs	r3, #3
 8011e2e:	257d      	movs	r5, #125	; 0x7d
 8011e30:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011e34:	f080 0020 	eor.w	r0, r0, #32
 8011e38:	2a01      	cmp	r2, #1
 8011e3a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8011e3e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011e42:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8011e46:	d803      	bhi.n	8011e50 <uxr_write_framed_msg+0x2b0>
 8011e48:	461a      	mov	r2, r3
 8011e4a:	2504      	movs	r5, #4
 8011e4c:	2305      	movs	r3, #5
 8011e4e:	e75b      	b.n	8011d08 <uxr_write_framed_msg+0x168>
 8011e50:	2304      	movs	r3, #4
 8011e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e54:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8011e58:	b2d0      	uxtb	r0, r2
 8011e5a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011e5e:	2a01      	cmp	r2, #1
 8011e60:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011e64:	f63f aec7 	bhi.w	8011bf6 <uxr_write_framed_msg+0x56>
 8011e68:	e761      	b.n	8011d2e <uxr_write_framed_msg+0x18e>
 8011e6a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011e6e:	2200      	movs	r2, #0
 8011e70:	fa5f f98a 	uxtb.w	r9, sl
 8011e74:	9301      	str	r3, [sp, #4]
 8011e76:	e6fd      	b.n	8011c74 <uxr_write_framed_msg+0xd4>
 8011e78:	0801a784 	.word	0x0801a784

08011e7c <uxr_framing_read_transport>:
 8011e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e80:	4604      	mov	r4, r0
 8011e82:	b083      	sub	sp, #12
 8011e84:	461f      	mov	r7, r3
 8011e86:	4689      	mov	r9, r1
 8011e88:	4692      	mov	sl, r2
 8011e8a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011e8e:	f000 fc79 	bl	8012784 <uxr_millis>
 8011e92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011e96:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8011e9a:	4680      	mov	r8, r0
 8011e9c:	42b3      	cmp	r3, r6
 8011e9e:	d060      	beq.n	8011f62 <uxr_framing_read_transport+0xe6>
 8011ea0:	d81c      	bhi.n	8011edc <uxr_framing_read_transport+0x60>
 8011ea2:	1e75      	subs	r5, r6, #1
 8011ea4:	2600      	movs	r6, #0
 8011ea6:	1aed      	subs	r5, r5, r3
 8011ea8:	b2ed      	uxtb	r5, r5
 8011eaa:	455d      	cmp	r5, fp
 8011eac:	d81f      	bhi.n	8011eee <uxr_framing_read_transport+0x72>
 8011eae:	19ab      	adds	r3, r5, r6
 8011eb0:	455b      	cmp	r3, fp
 8011eb2:	bf84      	itt	hi
 8011eb4:	ebab 0605 	subhi.w	r6, fp, r5
 8011eb8:	b2f6      	uxtbhi	r6, r6
 8011eba:	b9ed      	cbnz	r5, 8011ef8 <uxr_framing_read_transport+0x7c>
 8011ebc:	f04f 0b00 	mov.w	fp, #0
 8011ec0:	f000 fc60 	bl	8012784 <uxr_millis>
 8011ec4:	eba0 0808 	sub.w	r8, r0, r8
 8011ec8:	4658      	mov	r0, fp
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	eba3 0308 	sub.w	r3, r3, r8
 8011ed0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ed4:	603b      	str	r3, [r7, #0]
 8011ed6:	b003      	add	sp, #12
 8011ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011edc:	2e00      	cmp	r6, #0
 8011ede:	d048      	beq.n	8011f72 <uxr_framing_read_transport+0xf6>
 8011ee0:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8011ee4:	b2ed      	uxtb	r5, r5
 8011ee6:	3e01      	subs	r6, #1
 8011ee8:	455d      	cmp	r5, fp
 8011eea:	b2f6      	uxtb	r6, r6
 8011eec:	d9df      	bls.n	8011eae <uxr_framing_read_transport+0x32>
 8011eee:	fa5f f58b 	uxtb.w	r5, fp
 8011ef2:	2600      	movs	r6, #0
 8011ef4:	2d00      	cmp	r5, #0
 8011ef6:	d0e1      	beq.n	8011ebc <uxr_framing_read_transport+0x40>
 8011ef8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011efc:	3102      	adds	r1, #2
 8011efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f00:	462a      	mov	r2, r5
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	4421      	add	r1, r4
 8011f08:	4650      	mov	r0, sl
 8011f0a:	47c8      	blx	r9
 8011f0c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011f10:	4a1b      	ldr	r2, [pc, #108]	; (8011f80 <uxr_framing_read_transport+0x104>)
 8011f12:	4403      	add	r3, r0
 8011f14:	0859      	lsrs	r1, r3, #1
 8011f16:	fba2 2101 	umull	r2, r1, r2, r1
 8011f1a:	222a      	movs	r2, #42	; 0x2a
 8011f1c:	0889      	lsrs	r1, r1, #2
 8011f1e:	fb02 3111 	mls	r1, r2, r1, r3
 8011f22:	4683      	mov	fp, r0
 8011f24:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d0c7      	beq.n	8011ebc <uxr_framing_read_transport+0x40>
 8011f2c:	42a8      	cmp	r0, r5
 8011f2e:	d1c7      	bne.n	8011ec0 <uxr_framing_read_transport+0x44>
 8011f30:	b31e      	cbz	r6, 8011f7a <uxr_framing_read_transport+0xfe>
 8011f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f34:	3102      	adds	r1, #2
 8011f36:	4632      	mov	r2, r6
 8011f38:	4421      	add	r1, r4
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	4650      	mov	r0, sl
 8011f3e:	2300      	movs	r3, #0
 8011f40:	47c8      	blx	r9
 8011f42:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011f46:	4a0e      	ldr	r2, [pc, #56]	; (8011f80 <uxr_framing_read_transport+0x104>)
 8011f48:	1819      	adds	r1, r3, r0
 8011f4a:	084b      	lsrs	r3, r1, #1
 8011f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8011f50:	222a      	movs	r2, #42	; 0x2a
 8011f52:	089b      	lsrs	r3, r3, #2
 8011f54:	fb02 1313 	mls	r3, r2, r3, r1
 8011f58:	eb00 0b05 	add.w	fp, r0, r5
 8011f5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8011f60:	e7ae      	b.n	8011ec0 <uxr_framing_read_transport+0x44>
 8011f62:	2600      	movs	r6, #0
 8011f64:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8011f68:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8011f6a:	d9c0      	bls.n	8011eee <uxr_framing_read_transport+0x72>
 8011f6c:	2102      	movs	r1, #2
 8011f6e:	2529      	movs	r5, #41	; 0x29
 8011f70:	e7c5      	b.n	8011efe <uxr_framing_read_transport+0x82>
 8011f72:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8011f76:	b2ed      	uxtb	r5, r5
 8011f78:	e797      	b.n	8011eaa <uxr_framing_read_transport+0x2e>
 8011f7a:	46ab      	mov	fp, r5
 8011f7c:	e7a0      	b.n	8011ec0 <uxr_framing_read_transport+0x44>
 8011f7e:	bf00      	nop
 8011f80:	30c30c31 	.word	0x30c30c31

08011f84 <uxr_read_framed_msg>:
 8011f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f88:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8011f8c:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8011f90:	4604      	mov	r4, r0
 8011f92:	42ae      	cmp	r6, r5
 8011f94:	461f      	mov	r7, r3
 8011f96:	4689      	mov	r9, r1
 8011f98:	4692      	mov	sl, r2
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	f000 8176 	beq.w	801228c <uxr_read_framed_msg+0x308>
 8011fa0:	7823      	ldrb	r3, [r4, #0]
 8011fa2:	4ec7      	ldr	r6, [pc, #796]	; (80122c0 <uxr_read_framed_msg+0x33c>)
 8011fa4:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80122c4 <uxr_read_framed_msg+0x340>
 8011fa8:	2b07      	cmp	r3, #7
 8011faa:	d8fd      	bhi.n	8011fa8 <uxr_read_framed_msg+0x24>
 8011fac:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011fb0:	00ee010d 	.word	0x00ee010d
 8011fb4:	00b100ce 	.word	0x00b100ce
 8011fb8:	004d0088 	.word	0x004d0088
 8011fbc:	00080030 	.word	0x00080030
 8011fc0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011fc4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	f000 813a 	beq.w	8012242 <uxr_read_framed_msg+0x2be>
 8011fce:	18e1      	adds	r1, r4, r3
 8011fd0:	7889      	ldrb	r1, [r1, #2]
 8011fd2:	202a      	movs	r0, #42	; 0x2a
 8011fd4:	297d      	cmp	r1, #125	; 0x7d
 8011fd6:	f000 81b0 	beq.w	801233a <uxr_read_framed_msg+0x3b6>
 8011fda:	3301      	adds	r3, #1
 8011fdc:	085a      	lsrs	r2, r3, #1
 8011fde:	fba6 5202 	umull	r5, r2, r6, r2
 8011fe2:	0892      	lsrs	r2, r2, #2
 8011fe4:	fb00 3312 	mls	r3, r0, r2, r3
 8011fe8:	297e      	cmp	r1, #126	; 0x7e
 8011fea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011fee:	f000 8244 	beq.w	801247a <uxr_read_framed_msg+0x4f6>
 8011ff2:	2000      	movs	r0, #0
 8011ff4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011ff6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011ff8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	429a      	cmp	r2, r3
 8012000:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012002:	7020      	strb	r0, [r4, #0]
 8012004:	f000 8176 	beq.w	80122f4 <uxr_read_framed_msg+0x370>
 8012008:	2000      	movs	r0, #0
 801200a:	b003      	add	sp, #12
 801200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012010:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8012014:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012018:	429a      	cmp	r2, r3
 801201a:	f000 8121 	beq.w	8012260 <uxr_read_framed_msg+0x2dc>
 801201e:	18e1      	adds	r1, r4, r3
 8012020:	7889      	ldrb	r1, [r1, #2]
 8012022:	202a      	movs	r0, #42	; 0x2a
 8012024:	297d      	cmp	r1, #125	; 0x7d
 8012026:	f000 816d 	beq.w	8012304 <uxr_read_framed_msg+0x380>
 801202a:	3301      	adds	r3, #1
 801202c:	085a      	lsrs	r2, r3, #1
 801202e:	fba6 5202 	umull	r5, r2, r6, r2
 8012032:	0892      	lsrs	r2, r2, #2
 8012034:	fb00 3312 	mls	r3, r0, r2, r3
 8012038:	297e      	cmp	r1, #126	; 0x7e
 801203a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801203e:	f000 820c 	beq.w	801245a <uxr_read_framed_msg+0x4d6>
 8012042:	2307      	movs	r3, #7
 8012044:	86a1      	strh	r1, [r4, #52]	; 0x34
 8012046:	7023      	strb	r3, [r4, #0]
 8012048:	e7ae      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 801204a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801204c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8012050:	459e      	cmp	lr, r3
 8012052:	d930      	bls.n	80120b6 <uxr_read_framed_msg+0x132>
 8012054:	252a      	movs	r5, #42	; 0x2a
 8012056:	e021      	b.n	801209c <uxr_read_framed_msg+0x118>
 8012058:	7889      	ldrb	r1, [r1, #2]
 801205a:	297d      	cmp	r1, #125	; 0x7d
 801205c:	f000 80d1 	beq.w	8012202 <uxr_read_framed_msg+0x27e>
 8012060:	fba6 2000 	umull	r2, r0, r6, r0
 8012064:	0880      	lsrs	r0, r0, #2
 8012066:	fb05 c010 	mls	r0, r5, r0, ip
 801206a:	297e      	cmp	r1, #126	; 0x7e
 801206c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8012070:	f000 80c4 	beq.w	80121fc <uxr_read_framed_msg+0x278>
 8012074:	54f9      	strb	r1, [r7, r3]
 8012076:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 801207a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801207c:	ea8c 0001 	eor.w	r0, ip, r1
 8012080:	b2c0      	uxtb	r0, r0
 8012082:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
 8012086:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801208a:	3301      	adds	r3, #1
 801208c:	b29b      	uxth	r3, r3
 801208e:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 8012092:	4573      	cmp	r3, lr
 8012094:	86e2      	strh	r2, [r4, #54]	; 0x36
 8012096:	8663      	strh	r3, [r4, #50]	; 0x32
 8012098:	f080 8116 	bcs.w	80122c8 <uxr_read_framed_msg+0x344>
 801209c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80120a0:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 80120a4:	f102 0c01 	add.w	ip, r2, #1
 80120a8:	4593      	cmp	fp, r2
 80120aa:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80120ae:	eb04 0102 	add.w	r1, r4, r2
 80120b2:	d1d1      	bne.n	8012058 <uxr_read_framed_msg+0xd4>
 80120b4:	459e      	cmp	lr, r3
 80120b6:	f040 810b 	bne.w	80122d0 <uxr_read_framed_msg+0x34c>
 80120ba:	2306      	movs	r3, #6
 80120bc:	7023      	strb	r3, [r4, #0]
 80120be:	e773      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 80120c0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80120c4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80120c8:	429a      	cmp	r2, r3
 80120ca:	f000 80ba 	beq.w	8012242 <uxr_read_framed_msg+0x2be>
 80120ce:	18e1      	adds	r1, r4, r3
 80120d0:	7889      	ldrb	r1, [r1, #2]
 80120d2:	202a      	movs	r0, #42	; 0x2a
 80120d4:	297d      	cmp	r1, #125	; 0x7d
 80120d6:	f000 818a 	beq.w	80123ee <uxr_read_framed_msg+0x46a>
 80120da:	3301      	adds	r3, #1
 80120dc:	085a      	lsrs	r2, r3, #1
 80120de:	fba6 5202 	umull	r5, r2, r6, r2
 80120e2:	0892      	lsrs	r2, r2, #2
 80120e4:	fb00 3212 	mls	r2, r0, r2, r3
 80120e8:	297e      	cmp	r1, #126	; 0x7e
 80120ea:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80120ee:	f000 81c4 	beq.w	801247a <uxr_read_framed_msg+0x4f6>
 80120f2:	2000      	movs	r0, #0
 80120f4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80120f6:	8660      	strh	r0, [r4, #50]	; 0x32
 80120f8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80120fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80120fe:	b29b      	uxth	r3, r3
 8012100:	428b      	cmp	r3, r1
 8012102:	8623      	strh	r3, [r4, #48]	; 0x30
 8012104:	86e0      	strh	r0, [r4, #54]	; 0x36
 8012106:	f240 80d8 	bls.w	80122ba <uxr_read_framed_msg+0x336>
 801210a:	7020      	strb	r0, [r4, #0]
 801210c:	b003      	add	sp, #12
 801210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012112:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8012116:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801211a:	429a      	cmp	r2, r3
 801211c:	f000 80a0 	beq.w	8012260 <uxr_read_framed_msg+0x2dc>
 8012120:	18e1      	adds	r1, r4, r3
 8012122:	7889      	ldrb	r1, [r1, #2]
 8012124:	202a      	movs	r0, #42	; 0x2a
 8012126:	297d      	cmp	r1, #125	; 0x7d
 8012128:	f000 817c 	beq.w	8012424 <uxr_read_framed_msg+0x4a0>
 801212c:	3301      	adds	r3, #1
 801212e:	085a      	lsrs	r2, r3, #1
 8012130:	fba6 5202 	umull	r5, r2, r6, r2
 8012134:	0892      	lsrs	r2, r2, #2
 8012136:	fb00 3312 	mls	r3, r0, r2, r3
 801213a:	297e      	cmp	r1, #126	; 0x7e
 801213c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012140:	f000 818b 	beq.w	801245a <uxr_read_framed_msg+0x4d6>
 8012144:	2304      	movs	r3, #4
 8012146:	8621      	strh	r1, [r4, #48]	; 0x30
 8012148:	7023      	strb	r3, [r4, #0]
 801214a:	e72d      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 801214c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012150:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012154:	4291      	cmp	r1, r2
 8012156:	f000 80ae 	beq.w	80122b6 <uxr_read_framed_msg+0x332>
 801215a:	18a3      	adds	r3, r4, r2
 801215c:	7898      	ldrb	r0, [r3, #2]
 801215e:	287d      	cmp	r0, #125	; 0x7d
 8012160:	f000 8107 	beq.w	8012372 <uxr_read_framed_msg+0x3ee>
 8012164:	232a      	movs	r3, #42	; 0x2a
 8012166:	3201      	adds	r2, #1
 8012168:	0851      	lsrs	r1, r2, #1
 801216a:	fba6 5101 	umull	r5, r1, r6, r1
 801216e:	0889      	lsrs	r1, r1, #2
 8012170:	fb03 2211 	mls	r2, r3, r1, r2
 8012174:	287e      	cmp	r0, #126	; 0x7e
 8012176:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801217a:	f000 8180 	beq.w	801247e <uxr_read_framed_msg+0x4fa>
 801217e:	7863      	ldrb	r3, [r4, #1]
 8012180:	4283      	cmp	r3, r0
 8012182:	bf0c      	ite	eq
 8012184:	2303      	moveq	r3, #3
 8012186:	2300      	movne	r3, #0
 8012188:	7023      	strb	r3, [r4, #0]
 801218a:	e70d      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 801218c:	2200      	movs	r2, #0
 801218e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012192:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8012196:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801219a:	4288      	cmp	r0, r1
 801219c:	d062      	beq.n	8012264 <uxr_read_framed_msg+0x2e0>
 801219e:	1862      	adds	r2, r4, r1
 80121a0:	7892      	ldrb	r2, [r2, #2]
 80121a2:	2a7d      	cmp	r2, #125	; 0x7d
 80121a4:	f000 8100 	beq.w	80123a8 <uxr_read_framed_msg+0x424>
 80121a8:	202a      	movs	r0, #42	; 0x2a
 80121aa:	3101      	adds	r1, #1
 80121ac:	084b      	lsrs	r3, r1, #1
 80121ae:	fba6 5303 	umull	r5, r3, r6, r3
 80121b2:	089b      	lsrs	r3, r3, #2
 80121b4:	fb00 1313 	mls	r3, r0, r3, r1
 80121b8:	2a7e      	cmp	r2, #126	; 0x7e
 80121ba:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80121be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80121c2:	d04f      	beq.n	8012264 <uxr_read_framed_msg+0x2e0>
 80121c4:	2302      	movs	r3, #2
 80121c6:	7023      	strb	r3, [r4, #0]
 80121c8:	e6ee      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 80121ca:	252a      	movs	r5, #42	; 0x2a
 80121cc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80121d0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80121d4:	f103 0c01 	add.w	ip, r3, #1
 80121d8:	4298      	cmp	r0, r3
 80121da:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80121de:	eb04 0103 	add.w	r1, r4, r3
 80121e2:	f43f af11 	beq.w	8012008 <uxr_read_framed_msg+0x84>
 80121e6:	fba6 3202 	umull	r3, r2, r6, r2
 80121ea:	0892      	lsrs	r2, r2, #2
 80121ec:	fb05 c212 	mls	r2, r5, r2, ip
 80121f0:	7889      	ldrb	r1, [r1, #2]
 80121f2:	b2d3      	uxtb	r3, r2
 80121f4:	297e      	cmp	r1, #126	; 0x7e
 80121f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80121fa:	d1eb      	bne.n	80121d4 <uxr_read_framed_msg+0x250>
 80121fc:	2301      	movs	r3, #1
 80121fe:	7023      	strb	r3, [r4, #0]
 8012200:	e6d2      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 8012202:	f102 0c01 	add.w	ip, r2, #1
 8012206:	ea4f 015c 	mov.w	r1, ip, lsr #1
 801220a:	fba6 0101 	umull	r0, r1, r6, r1
 801220e:	0889      	lsrs	r1, r1, #2
 8012210:	fb05 c111 	mls	r1, r5, r1, ip
 8012214:	eb04 0c01 	add.w	ip, r4, r1
 8012218:	b2c9      	uxtb	r1, r1
 801221a:	3202      	adds	r2, #2
 801221c:	458b      	cmp	fp, r1
 801221e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8012222:	f43f af47 	beq.w	80120b4 <uxr_read_framed_msg+0x130>
 8012226:	fba6 1000 	umull	r1, r0, r6, r0
 801222a:	0880      	lsrs	r0, r0, #2
 801222c:	fb05 2210 	mls	r2, r5, r0, r2
 8012230:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8012234:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012238:	297e      	cmp	r1, #126	; 0x7e
 801223a:	d036      	beq.n	80122aa <uxr_read_framed_msg+0x326>
 801223c:	f081 0120 	eor.w	r1, r1, #32
 8012240:	e718      	b.n	8012074 <uxr_read_framed_msg+0xf0>
 8012242:	2301      	movs	r3, #1
 8012244:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012246:	4649      	mov	r1, r9
 8012248:	e9cd 2300 	strd	r2, r3, [sp]
 801224c:	4620      	mov	r0, r4
 801224e:	4652      	mov	r2, sl
 8012250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012252:	f7ff fe13 	bl	8011e7c <uxr_framing_read_transport>
 8012256:	2800      	cmp	r0, #0
 8012258:	f43f aed6 	beq.w	8012008 <uxr_read_framed_msg+0x84>
 801225c:	7823      	ldrb	r3, [r4, #0]
 801225e:	e6a3      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 8012260:	2302      	movs	r3, #2
 8012262:	e7ef      	b.n	8012244 <uxr_read_framed_msg+0x2c0>
 8012264:	2304      	movs	r3, #4
 8012266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012268:	4649      	mov	r1, r9
 801226a:	e9cd 2300 	strd	r2, r3, [sp]
 801226e:	4620      	mov	r0, r4
 8012270:	4652      	mov	r2, sl
 8012272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012274:	f7ff fe02 	bl	8011e7c <uxr_framing_read_transport>
 8012278:	2800      	cmp	r0, #0
 801227a:	d1ef      	bne.n	801225c <uxr_read_framed_msg+0x2d8>
 801227c:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8012280:	387e      	subs	r0, #126	; 0x7e
 8012282:	bf18      	it	ne
 8012284:	2001      	movne	r0, #1
 8012286:	2800      	cmp	r0, #0
 8012288:	d0e8      	beq.n	801225c <uxr_read_framed_msg+0x2d8>
 801228a:	e6bd      	b.n	8012008 <uxr_read_framed_msg+0x84>
 801228c:	2305      	movs	r3, #5
 801228e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012290:	e9cd 5300 	strd	r5, r3, [sp]
 8012294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012296:	f7ff fdf1 	bl	8011e7c <uxr_framing_read_transport>
 801229a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801229e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80122a2:	429a      	cmp	r2, r3
 80122a4:	f43f aeb0 	beq.w	8012008 <uxr_read_framed_msg+0x84>
 80122a8:	e67a      	b.n	8011fa0 <uxr_read_framed_msg+0x1c>
 80122aa:	459e      	cmp	lr, r3
 80122ac:	f43f af05 	beq.w	80120ba <uxr_read_framed_msg+0x136>
 80122b0:	2301      	movs	r3, #1
 80122b2:	7023      	strb	r3, [r4, #0]
 80122b4:	e678      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 80122b6:	2303      	movs	r3, #3
 80122b8:	e7c4      	b.n	8012244 <uxr_read_framed_msg+0x2c0>
 80122ba:	2305      	movs	r3, #5
 80122bc:	7023      	strb	r3, [r4, #0]
 80122be:	e673      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 80122c0:	30c30c31 	.word	0x30c30c31
 80122c4:	0801a784 	.word	0x0801a784
 80122c8:	f43f aef7 	beq.w	80120ba <uxr_read_framed_msg+0x136>
 80122cc:	297e      	cmp	r1, #126	; 0x7e
 80122ce:	d095      	beq.n	80121fc <uxr_read_framed_msg+0x278>
 80122d0:	ebae 0303 	sub.w	r3, lr, r3
 80122d4:	3302      	adds	r3, #2
 80122d6:	9301      	str	r3, [sp, #4]
 80122d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122da:	4652      	mov	r2, sl
 80122dc:	9300      	str	r3, [sp, #0]
 80122de:	4649      	mov	r1, r9
 80122e0:	4620      	mov	r0, r4
 80122e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122e4:	f7ff fdca 	bl	8011e7c <uxr_framing_read_transport>
 80122e8:	fab0 f080 	clz	r0, r0
 80122ec:	0940      	lsrs	r0, r0, #5
 80122ee:	2800      	cmp	r0, #0
 80122f0:	d0b4      	beq.n	801225c <uxr_read_framed_msg+0x2d8>
 80122f2:	e689      	b.n	8012008 <uxr_read_framed_msg+0x84>
 80122f4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80122f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122fa:	7013      	strb	r3, [r2, #0]
 80122fc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80122fe:	b003      	add	sp, #12
 8012300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012304:	1c5d      	adds	r5, r3, #1
 8012306:	0869      	lsrs	r1, r5, #1
 8012308:	fba6 c101 	umull	ip, r1, r6, r1
 801230c:	0889      	lsrs	r1, r1, #2
 801230e:	fb00 5111 	mls	r1, r0, r1, r5
 8012312:	b2cd      	uxtb	r5, r1
 8012314:	42aa      	cmp	r2, r5
 8012316:	d0a3      	beq.n	8012260 <uxr_read_framed_msg+0x2dc>
 8012318:	3302      	adds	r3, #2
 801231a:	085a      	lsrs	r2, r3, #1
 801231c:	fba6 5202 	umull	r5, r2, r6, r2
 8012320:	0892      	lsrs	r2, r2, #2
 8012322:	fb00 3212 	mls	r2, r0, r2, r3
 8012326:	1863      	adds	r3, r4, r1
 8012328:	7899      	ldrb	r1, [r3, #2]
 801232a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801232e:	297e      	cmp	r1, #126	; 0x7e
 8012330:	f000 8093 	beq.w	801245a <uxr_read_framed_msg+0x4d6>
 8012334:	f081 0120 	eor.w	r1, r1, #32
 8012338:	e683      	b.n	8012042 <uxr_read_framed_msg+0xbe>
 801233a:	1c5d      	adds	r5, r3, #1
 801233c:	0869      	lsrs	r1, r5, #1
 801233e:	fba6 c101 	umull	ip, r1, r6, r1
 8012342:	0889      	lsrs	r1, r1, #2
 8012344:	fb00 5111 	mls	r1, r0, r1, r5
 8012348:	b2cd      	uxtb	r5, r1
 801234a:	42aa      	cmp	r2, r5
 801234c:	f43f af79 	beq.w	8012242 <uxr_read_framed_msg+0x2be>
 8012350:	3302      	adds	r3, #2
 8012352:	085a      	lsrs	r2, r3, #1
 8012354:	fba6 5202 	umull	r5, r2, r6, r2
 8012358:	0892      	lsrs	r2, r2, #2
 801235a:	fb00 3212 	mls	r2, r0, r2, r3
 801235e:	1863      	adds	r3, r4, r1
 8012360:	789b      	ldrb	r3, [r3, #2]
 8012362:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012366:	2b7e      	cmp	r3, #126	; 0x7e
 8012368:	f000 8087 	beq.w	801247a <uxr_read_framed_msg+0x4f6>
 801236c:	f083 0120 	eor.w	r1, r3, #32
 8012370:	e63f      	b.n	8011ff2 <uxr_read_framed_msg+0x6e>
 8012372:	202a      	movs	r0, #42	; 0x2a
 8012374:	1c55      	adds	r5, r2, #1
 8012376:	086b      	lsrs	r3, r5, #1
 8012378:	fba6 c303 	umull	ip, r3, r6, r3
 801237c:	089b      	lsrs	r3, r3, #2
 801237e:	fb00 5313 	mls	r3, r0, r3, r5
 8012382:	b2dd      	uxtb	r5, r3
 8012384:	42a9      	cmp	r1, r5
 8012386:	d096      	beq.n	80122b6 <uxr_read_framed_msg+0x332>
 8012388:	3202      	adds	r2, #2
 801238a:	0851      	lsrs	r1, r2, #1
 801238c:	fba6 5101 	umull	r5, r1, r6, r1
 8012390:	0889      	lsrs	r1, r1, #2
 8012392:	fb00 2211 	mls	r2, r0, r1, r2
 8012396:	4423      	add	r3, r4
 8012398:	789b      	ldrb	r3, [r3, #2]
 801239a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801239e:	2b7e      	cmp	r3, #126	; 0x7e
 80123a0:	d06d      	beq.n	801247e <uxr_read_framed_msg+0x4fa>
 80123a2:	f083 0020 	eor.w	r0, r3, #32
 80123a6:	e6ea      	b.n	801217e <uxr_read_framed_msg+0x1fa>
 80123a8:	252a      	movs	r5, #42	; 0x2a
 80123aa:	f101 0c01 	add.w	ip, r1, #1
 80123ae:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80123b2:	fba6 2303 	umull	r2, r3, r6, r3
 80123b6:	089a      	lsrs	r2, r3, #2
 80123b8:	fb05 c212 	mls	r2, r5, r2, ip
 80123bc:	b2d3      	uxtb	r3, r2
 80123be:	4298      	cmp	r0, r3
 80123c0:	f43f af50 	beq.w	8012264 <uxr_read_framed_msg+0x2e0>
 80123c4:	1c8b      	adds	r3, r1, #2
 80123c6:	0859      	lsrs	r1, r3, #1
 80123c8:	fba6 0101 	umull	r0, r1, r6, r1
 80123cc:	0889      	lsrs	r1, r1, #2
 80123ce:	fb05 3111 	mls	r1, r5, r1, r3
 80123d2:	18a3      	adds	r3, r4, r2
 80123d4:	789b      	ldrb	r3, [r3, #2]
 80123d6:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80123da:	2b7e      	cmp	r3, #126	; 0x7e
 80123dc:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80123e0:	f43f af40 	beq.w	8012264 <uxr_read_framed_msg+0x2e0>
 80123e4:	f083 0320 	eor.w	r3, r3, #32
 80123e8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80123ec:	e6ea      	b.n	80121c4 <uxr_read_framed_msg+0x240>
 80123ee:	1c5d      	adds	r5, r3, #1
 80123f0:	0869      	lsrs	r1, r5, #1
 80123f2:	fba6 c101 	umull	ip, r1, r6, r1
 80123f6:	0889      	lsrs	r1, r1, #2
 80123f8:	fb00 5111 	mls	r1, r0, r1, r5
 80123fc:	b2cd      	uxtb	r5, r1
 80123fe:	42aa      	cmp	r2, r5
 8012400:	f43f af1f 	beq.w	8012242 <uxr_read_framed_msg+0x2be>
 8012404:	3302      	adds	r3, #2
 8012406:	085a      	lsrs	r2, r3, #1
 8012408:	fba6 5202 	umull	r5, r2, r6, r2
 801240c:	0892      	lsrs	r2, r2, #2
 801240e:	fb00 3212 	mls	r2, r0, r2, r3
 8012412:	1863      	adds	r3, r4, r1
 8012414:	789b      	ldrb	r3, [r3, #2]
 8012416:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801241a:	2b7e      	cmp	r3, #126	; 0x7e
 801241c:	d02d      	beq.n	801247a <uxr_read_framed_msg+0x4f6>
 801241e:	f083 0120 	eor.w	r1, r3, #32
 8012422:	e666      	b.n	80120f2 <uxr_read_framed_msg+0x16e>
 8012424:	1c5d      	adds	r5, r3, #1
 8012426:	0869      	lsrs	r1, r5, #1
 8012428:	fba6 c101 	umull	ip, r1, r6, r1
 801242c:	0889      	lsrs	r1, r1, #2
 801242e:	fb00 5111 	mls	r1, r0, r1, r5
 8012432:	b2cd      	uxtb	r5, r1
 8012434:	42aa      	cmp	r2, r5
 8012436:	f43f af13 	beq.w	8012260 <uxr_read_framed_msg+0x2dc>
 801243a:	3302      	adds	r3, #2
 801243c:	085a      	lsrs	r2, r3, #1
 801243e:	fba6 5202 	umull	r5, r2, r6, r2
 8012442:	0892      	lsrs	r2, r2, #2
 8012444:	fb00 3212 	mls	r2, r0, r2, r3
 8012448:	1863      	adds	r3, r4, r1
 801244a:	7899      	ldrb	r1, [r3, #2]
 801244c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012450:	297e      	cmp	r1, #126	; 0x7e
 8012452:	d002      	beq.n	801245a <uxr_read_framed_msg+0x4d6>
 8012454:	f081 0120 	eor.w	r1, r1, #32
 8012458:	e674      	b.n	8012144 <uxr_read_framed_msg+0x1c0>
 801245a:	2302      	movs	r3, #2
 801245c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801245e:	4649      	mov	r1, r9
 8012460:	e9cd 2300 	strd	r2, r3, [sp]
 8012464:	4620      	mov	r0, r4
 8012466:	4652      	mov	r2, sl
 8012468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801246a:	f7ff fd07 	bl	8011e7c <uxr_framing_read_transport>
 801246e:	2800      	cmp	r0, #0
 8012470:	f47f aef4 	bne.w	801225c <uxr_read_framed_msg+0x2d8>
 8012474:	2301      	movs	r3, #1
 8012476:	7023      	strb	r3, [r4, #0]
 8012478:	e596      	b.n	8011fa8 <uxr_read_framed_msg+0x24>
 801247a:	2301      	movs	r3, #1
 801247c:	e7ee      	b.n	801245c <uxr_read_framed_msg+0x4d8>
 801247e:	2303      	movs	r3, #3
 8012480:	e7ec      	b.n	801245c <uxr_read_framed_msg+0x4d8>
 8012482:	bf00      	nop

08012484 <uxr_stream_id>:
 8012484:	b430      	push	{r4, r5}
 8012486:	2901      	cmp	r1, #1
 8012488:	4604      	mov	r4, r0
 801248a:	b082      	sub	sp, #8
 801248c:	d01e      	beq.n	80124cc <uxr_stream_id+0x48>
 801248e:	2902      	cmp	r1, #2
 8012490:	f04f 0500 	mov.w	r5, #0
 8012494:	d01d      	beq.n	80124d2 <uxr_stream_id+0x4e>
 8012496:	2300      	movs	r3, #0
 8012498:	4618      	mov	r0, r3
 801249a:	f365 0307 	bfi	r3, r5, #0, #8
 801249e:	f364 230f 	bfi	r3, r4, #8, #8
 80124a2:	f361 4317 	bfi	r3, r1, #16, #8
 80124a6:	f362 631f 	bfi	r3, r2, #24, #8
 80124aa:	b2da      	uxtb	r2, r3
 80124ac:	f362 0007 	bfi	r0, r2, #0, #8
 80124b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80124b4:	f362 200f 	bfi	r0, r2, #8, #8
 80124b8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80124bc:	f362 4017 	bfi	r0, r2, #16, #8
 80124c0:	0e1b      	lsrs	r3, r3, #24
 80124c2:	f363 601f 	bfi	r0, r3, #24, #8
 80124c6:	b002      	add	sp, #8
 80124c8:	bc30      	pop	{r4, r5}
 80124ca:	4770      	bx	lr
 80124cc:	1c45      	adds	r5, r0, #1
 80124ce:	b2ed      	uxtb	r5, r5
 80124d0:	e7e1      	b.n	8012496 <uxr_stream_id+0x12>
 80124d2:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 80124d6:	e7de      	b.n	8012496 <uxr_stream_id+0x12>

080124d8 <uxr_stream_id_from_raw>:
 80124d8:	b430      	push	{r4, r5}
 80124da:	4602      	mov	r2, r0
 80124dc:	b082      	sub	sp, #8
 80124de:	b128      	cbz	r0, 80124ec <uxr_stream_id_from_raw+0x14>
 80124e0:	0603      	lsls	r3, r0, #24
 80124e2:	d420      	bmi.n	8012526 <uxr_stream_id_from_raw+0x4e>
 80124e4:	1e44      	subs	r4, r0, #1
 80124e6:	2501      	movs	r5, #1
 80124e8:	b2e4      	uxtb	r4, r4
 80124ea:	e001      	b.n	80124f0 <uxr_stream_id_from_raw+0x18>
 80124ec:	4605      	mov	r5, r0
 80124ee:	4604      	mov	r4, r0
 80124f0:	2300      	movs	r3, #0
 80124f2:	4618      	mov	r0, r3
 80124f4:	f362 0307 	bfi	r3, r2, #0, #8
 80124f8:	f364 230f 	bfi	r3, r4, #8, #8
 80124fc:	f365 4317 	bfi	r3, r5, #16, #8
 8012500:	f361 631f 	bfi	r3, r1, #24, #8
 8012504:	b2da      	uxtb	r2, r3
 8012506:	f362 0007 	bfi	r0, r2, #0, #8
 801250a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801250e:	f362 200f 	bfi	r0, r2, #8, #8
 8012512:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012516:	f362 4017 	bfi	r0, r2, #16, #8
 801251a:	0e1b      	lsrs	r3, r3, #24
 801251c:	f363 601f 	bfi	r0, r3, #24, #8
 8012520:	b002      	add	sp, #8
 8012522:	bc30      	pop	{r4, r5}
 8012524:	4770      	bx	lr
 8012526:	2502      	movs	r5, #2
 8012528:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 801252c:	e7e0      	b.n	80124f0 <uxr_stream_id_from_raw+0x18>
 801252e:	bf00      	nop

08012530 <uxr_init_stream_storage>:
 8012530:	2300      	movs	r3, #0
 8012532:	7403      	strb	r3, [r0, #16]
 8012534:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012538:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801253c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8012540:	4770      	bx	lr
 8012542:	bf00      	nop

08012544 <uxr_reset_stream_storage>:
 8012544:	b570      	push	{r4, r5, r6, lr}
 8012546:	7c03      	ldrb	r3, [r0, #16]
 8012548:	4604      	mov	r4, r0
 801254a:	b153      	cbz	r3, 8012562 <uxr_reset_stream_storage+0x1e>
 801254c:	4606      	mov	r6, r0
 801254e:	2500      	movs	r5, #0
 8012550:	4630      	mov	r0, r6
 8012552:	f004 fe7b 	bl	801724c <uxr_reset_output_best_effort_stream>
 8012556:	7c23      	ldrb	r3, [r4, #16]
 8012558:	3501      	adds	r5, #1
 801255a:	42ab      	cmp	r3, r5
 801255c:	f106 0610 	add.w	r6, r6, #16
 8012560:	d8f6      	bhi.n	8012550 <uxr_reset_stream_storage+0xc>
 8012562:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012566:	b163      	cbz	r3, 8012582 <uxr_reset_stream_storage+0x3e>
 8012568:	2600      	movs	r6, #0
 801256a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801256e:	4628      	mov	r0, r5
 8012570:	f004 fc78 	bl	8016e64 <uxr_reset_input_best_effort_stream>
 8012574:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012578:	3601      	adds	r6, #1
 801257a:	42b3      	cmp	r3, r6
 801257c:	f105 0502 	add.w	r5, r5, #2
 8012580:	d8f5      	bhi.n	801256e <uxr_reset_stream_storage+0x2a>
 8012582:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012586:	b163      	cbz	r3, 80125a2 <uxr_reset_stream_storage+0x5e>
 8012588:	2600      	movs	r6, #0
 801258a:	f104 0518 	add.w	r5, r4, #24
 801258e:	4628      	mov	r0, r5
 8012590:	f004 fefc 	bl	801738c <uxr_reset_output_reliable_stream>
 8012594:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012598:	3601      	adds	r6, #1
 801259a:	42b3      	cmp	r3, r6
 801259c:	f105 0528 	add.w	r5, r5, #40	; 0x28
 80125a0:	d8f5      	bhi.n	801258e <uxr_reset_stream_storage+0x4a>
 80125a2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80125a6:	b163      	cbz	r3, 80125c2 <uxr_reset_stream_storage+0x7e>
 80125a8:	2600      	movs	r6, #0
 80125aa:	f104 0548 	add.w	r5, r4, #72	; 0x48
 80125ae:	4628      	mov	r0, r5
 80125b0:	f004 fcc0 	bl	8016f34 <uxr_reset_input_reliable_stream>
 80125b4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80125b8:	3601      	adds	r6, #1
 80125ba:	42b3      	cmp	r3, r6
 80125bc:	f105 0518 	add.w	r5, r5, #24
 80125c0:	d8f5      	bhi.n	80125ae <uxr_reset_stream_storage+0x6a>
 80125c2:	bd70      	pop	{r4, r5, r6, pc}

080125c4 <uxr_add_output_best_effort_buffer>:
 80125c4:	b530      	push	{r4, r5, lr}
 80125c6:	7c04      	ldrb	r4, [r0, #16]
 80125c8:	b083      	sub	sp, #12
 80125ca:	1c65      	adds	r5, r4, #1
 80125cc:	7405      	strb	r5, [r0, #16]
 80125ce:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80125d2:	f004 fe31 	bl	8017238 <uxr_init_output_best_effort_stream>
 80125d6:	2201      	movs	r2, #1
 80125d8:	4620      	mov	r0, r4
 80125da:	4611      	mov	r1, r2
 80125dc:	b003      	add	sp, #12
 80125de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125e2:	f7ff bf4f 	b.w	8012484 <uxr_stream_id>
 80125e6:	bf00      	nop

080125e8 <uxr_add_output_reliable_buffer>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80125ee:	b084      	sub	sp, #16
 80125f0:	1c66      	adds	r6, r4, #1
 80125f2:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80125f6:	f89d 5020 	ldrb.w	r5, [sp, #32]
 80125fa:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 80125fe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8012602:	3018      	adds	r0, #24
 8012604:	9500      	str	r5, [sp, #0]
 8012606:	f004 fe8f 	bl	8017328 <uxr_init_output_reliable_stream>
 801260a:	4620      	mov	r0, r4
 801260c:	2201      	movs	r2, #1
 801260e:	2102      	movs	r1, #2
 8012610:	b004      	add	sp, #16
 8012612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012616:	f7ff bf35 	b.w	8012484 <uxr_stream_id>
 801261a:	bf00      	nop

0801261c <uxr_add_input_best_effort_buffer>:
 801261c:	b510      	push	{r4, lr}
 801261e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8012622:	b082      	sub	sp, #8
 8012624:	1c62      	adds	r2, r4, #1
 8012626:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801262a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801262e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012632:	f004 fc13 	bl	8016e5c <uxr_init_input_best_effort_stream>
 8012636:	4620      	mov	r0, r4
 8012638:	2200      	movs	r2, #0
 801263a:	2101      	movs	r1, #1
 801263c:	b002      	add	sp, #8
 801263e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012642:	f7ff bf1f 	b.w	8012484 <uxr_stream_id>
 8012646:	bf00      	nop

08012648 <uxr_add_input_reliable_buffer>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801264e:	b084      	sub	sp, #16
 8012650:	1c66      	adds	r6, r4, #1
 8012652:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8012656:	9d08      	ldr	r5, [sp, #32]
 8012658:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 801265c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8012660:	3048      	adds	r0, #72	; 0x48
 8012662:	9500      	str	r5, [sp, #0]
 8012664:	f004 fc42 	bl	8016eec <uxr_init_input_reliable_stream>
 8012668:	4620      	mov	r0, r4
 801266a:	2200      	movs	r2, #0
 801266c:	2102      	movs	r1, #2
 801266e:	b004      	add	sp, #16
 8012670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012674:	f7ff bf06 	b.w	8012484 <uxr_stream_id>

08012678 <uxr_get_output_best_effort_stream>:
 8012678:	7c03      	ldrb	r3, [r0, #16]
 801267a:	428b      	cmp	r3, r1
 801267c:	bf8c      	ite	hi
 801267e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012682:	2000      	movls	r0, #0
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop

08012688 <uxr_get_output_reliable_stream>:
 8012688:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801268c:	428b      	cmp	r3, r1
 801268e:	bf83      	ittte	hi
 8012690:	eb01 0181 	addhi.w	r1, r1, r1, lsl #2
 8012694:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 8012698:	3018      	addhi	r0, #24
 801269a:	2000      	movls	r0, #0
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop

080126a0 <uxr_get_input_best_effort_stream>:
 80126a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80126a4:	428b      	cmp	r3, r1
 80126a6:	bf86      	itte	hi
 80126a8:	3121      	addhi	r1, #33	; 0x21
 80126aa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80126ae:	2000      	movls	r0, #0
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop

080126b4 <uxr_get_input_reliable_stream>:
 80126b4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80126b8:	428b      	cmp	r3, r1
 80126ba:	bf83      	ittte	hi
 80126bc:	eb01 0141 	addhi.w	r1, r1, r1, lsl #1
 80126c0:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 80126c4:	3048      	addhi	r0, #72	; 0x48
 80126c6:	2000      	movls	r0, #0
 80126c8:	4770      	bx	lr
 80126ca:	bf00      	nop

080126cc <uxr_output_streams_confirmed>:
 80126cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80126d0:	b183      	cbz	r3, 80126f4 <uxr_output_streams_confirmed+0x28>
 80126d2:	b570      	push	{r4, r5, r6, lr}
 80126d4:	4606      	mov	r6, r0
 80126d6:	2400      	movs	r4, #0
 80126d8:	f100 0518 	add.w	r5, r0, #24
 80126dc:	e001      	b.n	80126e2 <uxr_output_streams_confirmed+0x16>
 80126de:	3528      	adds	r5, #40	; 0x28
 80126e0:	b138      	cbz	r0, 80126f2 <uxr_output_streams_confirmed+0x26>
 80126e2:	4628      	mov	r0, r5
 80126e4:	f005 f8b4 	bl	8017850 <uxr_is_output_up_to_date>
 80126e8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80126ec:	3401      	adds	r4, #1
 80126ee:	42a3      	cmp	r3, r4
 80126f0:	d8f5      	bhi.n	80126de <uxr_output_streams_confirmed+0x12>
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
 80126f4:	2001      	movs	r0, #1
 80126f6:	4770      	bx	lr

080126f8 <uxr_buffer_submessage_header>:
 80126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126fa:	460e      	mov	r6, r1
 80126fc:	2104      	movs	r1, #4
 80126fe:	4615      	mov	r5, r2
 8012700:	4604      	mov	r4, r0
 8012702:	461f      	mov	r7, r3
 8012704:	f7fd fd8e 	bl	8010224 <ucdr_align_to>
 8012708:	2301      	movs	r3, #1
 801270a:	4631      	mov	r1, r6
 801270c:	ea47 0203 	orr.w	r2, r7, r3
 8012710:	4620      	mov	r0, r4
 8012712:	7523      	strb	r3, [r4, #20]
 8012714:	462b      	mov	r3, r5
 8012716:	f000 fa2d 	bl	8012b74 <uxr_serialize_submessage_header>
 801271a:	4620      	mov	r0, r4
 801271c:	f7fd fd98 	bl	8010250 <ucdr_buffer_remaining>
 8012720:	42a8      	cmp	r0, r5
 8012722:	bf34      	ite	cc
 8012724:	2000      	movcc	r0, #0
 8012726:	2001      	movcs	r0, #1
 8012728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801272a:	bf00      	nop

0801272c <uxr_read_submessage_header>:
 801272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012730:	4604      	mov	r4, r0
 8012732:	460d      	mov	r5, r1
 8012734:	2104      	movs	r1, #4
 8012736:	4616      	mov	r6, r2
 8012738:	4698      	mov	r8, r3
 801273a:	f7fd fd73 	bl	8010224 <ucdr_align_to>
 801273e:	4620      	mov	r0, r4
 8012740:	f7fd fd86 	bl	8010250 <ucdr_buffer_remaining>
 8012744:	2803      	cmp	r0, #3
 8012746:	bf8c      	ite	hi
 8012748:	2701      	movhi	r7, #1
 801274a:	2700      	movls	r7, #0
 801274c:	d802      	bhi.n	8012754 <uxr_read_submessage_header+0x28>
 801274e:	4638      	mov	r0, r7
 8012750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012754:	4633      	mov	r3, r6
 8012756:	4642      	mov	r2, r8
 8012758:	4620      	mov	r0, r4
 801275a:	4629      	mov	r1, r5
 801275c:	f000 fa1c 	bl	8012b98 <uxr_deserialize_submessage_header>
 8012760:	f898 3000 	ldrb.w	r3, [r8]
 8012764:	4638      	mov	r0, r7
 8012766:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	f888 2000 	strb.w	r2, [r8]
 8012772:	7523      	strb	r3, [r4, #20]
 8012774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012778 <uxr_submessage_padding>:
 8012778:	f010 0003 	ands.w	r0, r0, #3
 801277c:	bf18      	it	ne
 801277e:	f1c0 0004 	rsbne	r0, r0, #4
 8012782:	4770      	bx	lr

08012784 <uxr_millis>:
 8012784:	b510      	push	{r4, lr}
 8012786:	b084      	sub	sp, #16
 8012788:	4669      	mov	r1, sp
 801278a:	2001      	movs	r0, #1
 801278c:	f7f0 fa20 	bl	8002bd0 <clock_gettime>
 8012790:	e9dd 0200 	ldrd	r0, r2, [sp]
 8012794:	4b07      	ldr	r3, [pc, #28]	; (80127b4 <uxr_millis+0x30>)
 8012796:	9c02      	ldr	r4, [sp, #8]
 8012798:	fba0 0103 	umull	r0, r1, r0, r3
 801279c:	fb03 1102 	mla	r1, r3, r2, r1
 80127a0:	1900      	adds	r0, r0, r4
 80127a2:	f04f 0300 	mov.w	r3, #0
 80127a6:	4a04      	ldr	r2, [pc, #16]	; (80127b8 <uxr_millis+0x34>)
 80127a8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80127ac:	f7ed ffd6 	bl	800075c <__aeabi_ldivmod>
 80127b0:	b004      	add	sp, #16
 80127b2:	bd10      	pop	{r4, pc}
 80127b4:	3b9aca00 	.word	0x3b9aca00
 80127b8:	000f4240 	.word	0x000f4240

080127bc <uxr_nanos>:
 80127bc:	b500      	push	{lr}
 80127be:	b085      	sub	sp, #20
 80127c0:	4669      	mov	r1, sp
 80127c2:	2001      	movs	r0, #1
 80127c4:	f7f0 fa04 	bl	8002bd0 <clock_gettime>
 80127c8:	e9dd 2000 	ldrd	r2, r0, [sp]
 80127cc:	4906      	ldr	r1, [pc, #24]	; (80127e8 <uxr_nanos+0x2c>)
 80127ce:	fba2 2301 	umull	r2, r3, r2, r1
 80127d2:	fb01 3300 	mla	r3, r1, r0, r3
 80127d6:	9802      	ldr	r0, [sp, #8]
 80127d8:	4684      	mov	ip, r0
 80127da:	1810      	adds	r0, r2, r0
 80127dc:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 80127e0:	b005      	add	sp, #20
 80127e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80127e6:	bf00      	nop
 80127e8:	3b9aca00 	.word	0x3b9aca00

080127ec <on_full_output_buffer_fragmented>:
 80127ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127f0:	460c      	mov	r4, r1
 80127f2:	b08a      	sub	sp, #40	; 0x28
 80127f4:	4606      	mov	r6, r0
 80127f6:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80127fa:	f104 0008 	add.w	r0, r4, #8
 80127fe:	f7ff ff43 	bl	8012688 <uxr_get_output_reliable_stream>
 8012802:	4605      	mov	r5, r0
 8012804:	f005 f82e 	bl	8017864 <get_available_free_slots>
 8012808:	b968      	cbnz	r0, 8012826 <on_full_output_buffer_fragmented+0x3a>
 801280a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801280e:	4620      	mov	r0, r4
 8012810:	4798      	blx	r3
 8012812:	b918      	cbnz	r0, 801281c <on_full_output_buffer_fragmented+0x30>
 8012814:	2001      	movs	r0, #1
 8012816:	b00a      	add	sp, #40	; 0x28
 8012818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801281c:	4628      	mov	r0, r5
 801281e:	f005 f821 	bl	8017864 <get_available_free_slots>
 8012822:	2800      	cmp	r0, #0
 8012824:	d0f6      	beq.n	8012814 <on_full_output_buffer_fragmented+0x28>
 8012826:	892a      	ldrh	r2, [r5, #8]
 8012828:	89e8      	ldrh	r0, [r5, #14]
 801282a:	686b      	ldr	r3, [r5, #4]
 801282c:	fbb0 f1f2 	udiv	r1, r0, r2
 8012830:	fbb3 f8f2 	udiv	r8, r3, r2
 8012834:	fb02 0111 	mls	r1, r2, r1, r0
 8012838:	7b2b      	ldrb	r3, [r5, #12]
 801283a:	b289      	uxth	r1, r1
 801283c:	fb08 f101 	mul.w	r1, r8, r1
 8012840:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8012844:	f1a8 0804 	sub.w	r8, r8, #4
 8012848:	33fc      	adds	r3, #252	; 0xfc
 801284a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 801284e:	4443      	add	r3, r8
 8012850:	682a      	ldr	r2, [r5, #0]
 8012852:	b29f      	uxth	r7, r3
 8012854:	1bc0      	subs	r0, r0, r7
 8012856:	3104      	adds	r1, #4
 8012858:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 801285c:	4411      	add	r1, r2
 801285e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012862:	4642      	mov	r2, r8
 8012864:	9300      	str	r3, [sp, #0]
 8012866:	a802      	add	r0, sp, #8
 8012868:	2300      	movs	r3, #0
 801286a:	f7fd fcad 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 801286e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012872:	f102 0308 	add.w	r3, r2, #8
 8012876:	4543      	cmp	r3, r8
 8012878:	d928      	bls.n	80128cc <on_full_output_buffer_fragmented+0xe0>
 801287a:	463a      	mov	r2, r7
 801287c:	2300      	movs	r3, #0
 801287e:	210d      	movs	r1, #13
 8012880:	a802      	add	r0, sp, #8
 8012882:	f7ff ff39 	bl	80126f8 <uxr_buffer_submessage_header>
 8012886:	8929      	ldrh	r1, [r5, #8]
 8012888:	89e8      	ldrh	r0, [r5, #14]
 801288a:	686b      	ldr	r3, [r5, #4]
 801288c:	fbb0 f2f1 	udiv	r2, r0, r1
 8012890:	fbb3 f3f1 	udiv	r3, r3, r1
 8012894:	fb01 0212 	mls	r2, r1, r2, r0
 8012898:	b292      	uxth	r2, r2
 801289a:	fb03 f302 	mul.w	r3, r3, r2
 801289e:	682a      	ldr	r2, [r5, #0]
 80128a0:	f842 8003 	str.w	r8, [r2, r3]
 80128a4:	2101      	movs	r1, #1
 80128a6:	89e8      	ldrh	r0, [r5, #14]
 80128a8:	f004 fffe 	bl	80178a8 <uxr_seq_num_add>
 80128ac:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80128b0:	81e8      	strh	r0, [r5, #14]
 80128b2:	1a52      	subs	r2, r2, r1
 80128b4:	4630      	mov	r0, r6
 80128b6:	f7fd fc99 	bl	80101ec <ucdr_init_buffer>
 80128ba:	4630      	mov	r0, r6
 80128bc:	4622      	mov	r2, r4
 80128be:	490f      	ldr	r1, [pc, #60]	; (80128fc <on_full_output_buffer_fragmented+0x110>)
 80128c0:	f7fd fc6a 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 80128c4:	2000      	movs	r0, #0
 80128c6:	b00a      	add	sp, #40	; 0x28
 80128c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128cc:	2302      	movs	r3, #2
 80128ce:	210d      	movs	r1, #13
 80128d0:	b292      	uxth	r2, r2
 80128d2:	a802      	add	r0, sp, #8
 80128d4:	f7ff ff10 	bl	80126f8 <uxr_buffer_submessage_header>
 80128d8:	8929      	ldrh	r1, [r5, #8]
 80128da:	89e8      	ldrh	r0, [r5, #14]
 80128dc:	686b      	ldr	r3, [r5, #4]
 80128de:	fbb0 f2f1 	udiv	r2, r0, r1
 80128e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80128e6:	fb01 0212 	mls	r2, r1, r2, r0
 80128ea:	b292      	uxth	r2, r2
 80128ec:	fb03 f302 	mul.w	r3, r3, r2
 80128f0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80128f4:	6829      	ldr	r1, [r5, #0]
 80128f6:	3208      	adds	r2, #8
 80128f8:	50ca      	str	r2, [r1, r3]
 80128fa:	e7d3      	b.n	80128a4 <on_full_output_buffer_fragmented+0xb8>
 80128fc:	080127ed 	.word	0x080127ed

08012900 <uxr_prepare_output_stream>:
 8012900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012902:	2407      	movs	r4, #7
 8012904:	2500      	movs	r5, #0
 8012906:	b087      	sub	sp, #28
 8012908:	9202      	str	r2, [sp, #8]
 801290a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801290c:	e9cd 4500 	strd	r4, r5, [sp]
 8012910:	3204      	adds	r2, #4
 8012912:	461c      	mov	r4, r3
 8012914:	4606      	mov	r6, r0
 8012916:	9103      	str	r1, [sp, #12]
 8012918:	f7fe ffda 	bl	80118d0 <uxr_prepare_stream_to_write_submessage>
 801291c:	f080 0201 	eor.w	r2, r0, #1
 8012920:	b2d2      	uxtb	r2, r2
 8012922:	75a2      	strb	r2, [r4, #22]
 8012924:	b112      	cbz	r2, 801292c <uxr_prepare_output_stream+0x2c>
 8012926:	4628      	mov	r0, r5
 8012928:	b007      	add	sp, #28
 801292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801292c:	aa05      	add	r2, sp, #20
 801292e:	9902      	ldr	r1, [sp, #8]
 8012930:	4630      	mov	r0, r6
 8012932:	f7ff f8ff 	bl	8011b34 <uxr_init_base_object_request>
 8012936:	4605      	mov	r5, r0
 8012938:	a905      	add	r1, sp, #20
 801293a:	4620      	mov	r0, r4
 801293c:	f000 febc 	bl	80136b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012940:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012944:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012948:	4620      	mov	r0, r4
 801294a:	1a52      	subs	r2, r2, r1
 801294c:	f7fd fc4e 	bl	80101ec <ucdr_init_buffer>
 8012950:	4620      	mov	r0, r4
 8012952:	463a      	mov	r2, r7
 8012954:	4631      	mov	r1, r6
 8012956:	f7fd fc1f 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 801295a:	4628      	mov	r0, r5
 801295c:	b007      	add	sp, #28
 801295e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012960 <uxr_prepare_output_stream_fragmented>:
 8012960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012964:	b093      	sub	sp, #76	; 0x4c
 8012966:	9107      	str	r1, [sp, #28]
 8012968:	4605      	mov	r5, r0
 801296a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801296e:	3008      	adds	r0, #8
 8012970:	9303      	str	r3, [sp, #12]
 8012972:	9206      	str	r2, [sp, #24]
 8012974:	f7ff fe88 	bl	8012688 <uxr_get_output_reliable_stream>
 8012978:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801297c:	2b01      	cmp	r3, #1
 801297e:	f000 8094 	beq.w	8012aaa <uxr_prepare_output_stream_fragmented+0x14a>
 8012982:	4604      	mov	r4, r0
 8012984:	2800      	cmp	r0, #0
 8012986:	f000 8090 	beq.w	8012aaa <uxr_prepare_output_stream_fragmented+0x14a>
 801298a:	f004 ff6b 	bl	8017864 <get_available_free_slots>
 801298e:	2800      	cmp	r0, #0
 8012990:	f000 8086 	beq.w	8012aa0 <uxr_prepare_output_stream_fragmented+0x140>
 8012994:	8923      	ldrh	r3, [r4, #8]
 8012996:	89e7      	ldrh	r7, [r4, #14]
 8012998:	6862      	ldr	r2, [r4, #4]
 801299a:	fbb7 f8f3 	udiv	r8, r7, r3
 801299e:	fbb2 f2f3 	udiv	r2, r2, r3
 80129a2:	fb03 7818 	mls	r8, r3, r8, r7
 80129a6:	fa1f f888 	uxth.w	r8, r8
 80129aa:	fb02 f808 	mul.w	r8, r2, r8
 80129ae:	6823      	ldr	r3, [r4, #0]
 80129b0:	f108 0804 	add.w	r8, r8, #4
 80129b4:	4498      	add	r8, r3
 80129b6:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80129ba:	7b23      	ldrb	r3, [r4, #12]
 80129bc:	9204      	str	r2, [sp, #16]
 80129be:	4553      	cmp	r3, sl
 80129c0:	f1a2 0b04 	sub.w	fp, r2, #4
 80129c4:	d37d      	bcc.n	8012ac2 <uxr_prepare_output_stream_fragmented+0x162>
 80129c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80129c8:	f1ab 0904 	sub.w	r9, fp, #4
 80129cc:	eba9 0903 	sub.w	r9, r9, r3
 80129d0:	3608      	adds	r6, #8
 80129d2:	2300      	movs	r3, #0
 80129d4:	465a      	mov	r2, fp
 80129d6:	4641      	mov	r1, r8
 80129d8:	a80a      	add	r0, sp, #40	; 0x28
 80129da:	f8cd a000 	str.w	sl, [sp]
 80129de:	fa1f f989 	uxth.w	r9, r9
 80129e2:	9605      	str	r6, [sp, #20]
 80129e4:	f7fd fbf0 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 80129e8:	455e      	cmp	r6, fp
 80129ea:	bf34      	ite	cc
 80129ec:	2302      	movcc	r3, #2
 80129ee:	2300      	movcs	r3, #0
 80129f0:	464a      	mov	r2, r9
 80129f2:	210d      	movs	r1, #13
 80129f4:	a80a      	add	r0, sp, #40	; 0x28
 80129f6:	f7ff fe7f 	bl	80126f8 <uxr_buffer_submessage_header>
 80129fa:	8921      	ldrh	r1, [r4, #8]
 80129fc:	6862      	ldr	r2, [r4, #4]
 80129fe:	fbb7 f3f1 	udiv	r3, r7, r1
 8012a02:	fbb2 f2f1 	udiv	r2, r2, r1
 8012a06:	fb01 7313 	mls	r3, r1, r3, r7
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	fb03 f302 	mul.w	r3, r3, r2
 8012a10:	6822      	ldr	r2, [r4, #0]
 8012a12:	4638      	mov	r0, r7
 8012a14:	f842 b003 	str.w	fp, [r2, r3]
 8012a18:	2101      	movs	r1, #1
 8012a1a:	f004 ff45 	bl	80178a8 <uxr_seq_num_add>
 8012a1e:	9b04      	ldr	r3, [sp, #16]
 8012a20:	9e03      	ldr	r6, [sp, #12]
 8012a22:	f1a3 0208 	sub.w	r2, r3, #8
 8012a26:	f10a 0104 	add.w	r1, sl, #4
 8012a2a:	4607      	mov	r7, r0
 8012a2c:	eba2 020a 	sub.w	r2, r2, sl
 8012a30:	4630      	mov	r0, r6
 8012a32:	4441      	add	r1, r8
 8012a34:	f7fd fbda 	bl	80101ec <ucdr_init_buffer>
 8012a38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012a3a:	2107      	movs	r1, #7
 8012a3c:	1d1a      	adds	r2, r3, #4
 8012a3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012a42:	bf28      	it	cs
 8012a44:	2200      	movcs	r2, #0
 8012a46:	2300      	movs	r3, #0
 8012a48:	81e7      	strh	r7, [r4, #14]
 8012a4a:	b292      	uxth	r2, r2
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f7ff fe53 	bl	80126f8 <uxr_buffer_submessage_header>
 8012a52:	4628      	mov	r0, r5
 8012a54:	9906      	ldr	r1, [sp, #24]
 8012a56:	aa09      	add	r2, sp, #36	; 0x24
 8012a58:	f7ff f86c 	bl	8011b34 <uxr_init_base_object_request>
 8012a5c:	4604      	mov	r4, r0
 8012a5e:	b328      	cbz	r0, 8012aac <uxr_prepare_output_stream_fragmented+0x14c>
 8012a60:	9e03      	ldr	r6, [sp, #12]
 8012a62:	a909      	add	r1, sp, #36	; 0x24
 8012a64:	4630      	mov	r0, r6
 8012a66:	f000 fe27 	bl	80136b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012a6a:	68b1      	ldr	r1, [r6, #8]
 8012a6c:	6872      	ldr	r2, [r6, #4]
 8012a6e:	4630      	mov	r0, r6
 8012a70:	1a52      	subs	r2, r2, r1
 8012a72:	f7fd fbbb 	bl	80101ec <ucdr_init_buffer>
 8012a76:	9a05      	ldr	r2, [sp, #20]
 8012a78:	9b07      	ldr	r3, [sp, #28]
 8012a7a:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012a7e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012a80:	4630      	mov	r0, r6
 8012a82:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8012a86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012a88:	491a      	ldr	r1, [pc, #104]	; (8012af4 <uxr_prepare_output_stream_fragmented+0x194>)
 8012a8a:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8012a8e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8012a92:	462a      	mov	r2, r5
 8012a94:	f7fd fb80 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8012a98:	4620      	mov	r0, r4
 8012a9a:	b013      	add	sp, #76	; 0x4c
 8012a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012aa6:	4798      	blx	r3
 8012aa8:	b920      	cbnz	r0, 8012ab4 <uxr_prepare_output_stream_fragmented+0x154>
 8012aaa:	2400      	movs	r4, #0
 8012aac:	4620      	mov	r0, r4
 8012aae:	b013      	add	sp, #76	; 0x4c
 8012ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f004 fed5 	bl	8017864 <get_available_free_slots>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	f47f af6a 	bne.w	8012994 <uxr_prepare_output_stream_fragmented+0x34>
 8012ac0:	e7f3      	b.n	8012aaa <uxr_prepare_output_stream_fragmented+0x14a>
 8012ac2:	4638      	mov	r0, r7
 8012ac4:	2101      	movs	r1, #1
 8012ac6:	f004 feef 	bl	80178a8 <uxr_seq_num_add>
 8012aca:	8922      	ldrh	r2, [r4, #8]
 8012acc:	6863      	ldr	r3, [r4, #4]
 8012ace:	fbb0 f8f2 	udiv	r8, r0, r2
 8012ad2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ad6:	fb02 0818 	mls	r8, r2, r8, r0
 8012ada:	fa1f f888 	uxth.w	r8, r8
 8012ade:	fb08 f803 	mul.w	r8, r8, r3
 8012ae2:	6823      	ldr	r3, [r4, #0]
 8012ae4:	f108 0804 	add.w	r8, r8, #4
 8012ae8:	4498      	add	r8, r3
 8012aea:	4607      	mov	r7, r0
 8012aec:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012af0:	7b23      	ldrb	r3, [r4, #12]
 8012af2:	e768      	b.n	80129c6 <uxr_prepare_output_stream_fragmented+0x66>
 8012af4:	080127ed 	.word	0x080127ed

08012af8 <uxr_serialize_message_header>:
 8012af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012afc:	4617      	mov	r7, r2
 8012afe:	4604      	mov	r4, r0
 8012b00:	461e      	mov	r6, r3
 8012b02:	460d      	mov	r5, r1
 8012b04:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012b08:	f7fb ff2e 	bl	800e968 <ucdr_serialize_uint8_t>
 8012b0c:	4639      	mov	r1, r7
 8012b0e:	4620      	mov	r0, r4
 8012b10:	f7fb ff2a 	bl	800e968 <ucdr_serialize_uint8_t>
 8012b14:	4632      	mov	r2, r6
 8012b16:	4620      	mov	r0, r4
 8012b18:	2101      	movs	r1, #1
 8012b1a:	f7fb ffd1 	bl	800eac0 <ucdr_serialize_endian_uint16_t>
 8012b1e:	062b      	lsls	r3, r5, #24
 8012b20:	d501      	bpl.n	8012b26 <uxr_serialize_message_header+0x2e>
 8012b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b26:	4641      	mov	r1, r8
 8012b28:	4620      	mov	r0, r4
 8012b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b2e:	2204      	movs	r2, #4
 8012b30:	f7fb bb76 	b.w	800e220 <ucdr_serialize_array_uint8_t>

08012b34 <uxr_deserialize_message_header>:
 8012b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b38:	4617      	mov	r7, r2
 8012b3a:	4604      	mov	r4, r0
 8012b3c:	461e      	mov	r6, r3
 8012b3e:	460d      	mov	r5, r1
 8012b40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012b44:	f7fb ff26 	bl	800e994 <ucdr_deserialize_uint8_t>
 8012b48:	4639      	mov	r1, r7
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f7fb ff22 	bl	800e994 <ucdr_deserialize_uint8_t>
 8012b50:	4632      	mov	r2, r6
 8012b52:	4620      	mov	r0, r4
 8012b54:	2101      	movs	r1, #1
 8012b56:	f7fc f8a7 	bl	800eca8 <ucdr_deserialize_endian_uint16_t>
 8012b5a:	f995 3000 	ldrsb.w	r3, [r5]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	da01      	bge.n	8012b66 <uxr_deserialize_message_header+0x32>
 8012b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b66:	4641      	mov	r1, r8
 8012b68:	4620      	mov	r0, r4
 8012b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6e:	2204      	movs	r2, #4
 8012b70:	f7fb bbba 	b.w	800e2e8 <ucdr_deserialize_array_uint8_t>

08012b74 <uxr_serialize_submessage_header>:
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	4616      	mov	r6, r2
 8012b78:	4604      	mov	r4, r0
 8012b7a:	461d      	mov	r5, r3
 8012b7c:	f7fb fef4 	bl	800e968 <ucdr_serialize_uint8_t>
 8012b80:	4631      	mov	r1, r6
 8012b82:	4620      	mov	r0, r4
 8012b84:	f7fb fef0 	bl	800e968 <ucdr_serialize_uint8_t>
 8012b88:	462a      	mov	r2, r5
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b90:	2101      	movs	r1, #1
 8012b92:	f7fb bf95 	b.w	800eac0 <ucdr_serialize_endian_uint16_t>
 8012b96:	bf00      	nop

08012b98 <uxr_deserialize_submessage_header>:
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	4616      	mov	r6, r2
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	461d      	mov	r5, r3
 8012ba0:	f7fb fef8 	bl	800e994 <ucdr_deserialize_uint8_t>
 8012ba4:	4631      	mov	r1, r6
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f7fb fef4 	bl	800e994 <ucdr_deserialize_uint8_t>
 8012bac:	462a      	mov	r2, r5
 8012bae:	4620      	mov	r0, r4
 8012bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bb4:	2101      	movs	r1, #1
 8012bb6:	f7fc b877 	b.w	800eca8 <ucdr_deserialize_endian_uint16_t>
 8012bba:	bf00      	nop

08012bbc <uxr_serialize_CLIENT_Representation>:
 8012bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bc0:	2204      	movs	r2, #4
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	f7fb fb2b 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012bca:	2202      	movs	r2, #2
 8012bcc:	4606      	mov	r6, r0
 8012bce:	1d21      	adds	r1, r4, #4
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f7fb fb25 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	1da1      	adds	r1, r4, #6
 8012bda:	4006      	ands	r6, r0
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7fb fb1f 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012be2:	4603      	mov	r3, r0
 8012be4:	2204      	movs	r2, #4
 8012be6:	f104 0108 	add.w	r1, r4, #8
 8012bea:	4628      	mov	r0, r5
 8012bec:	b2f6      	uxtb	r6, r6
 8012bee:	401e      	ands	r6, r3
 8012bf0:	f7fb fb16 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	7b21      	ldrb	r1, [r4, #12]
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	401e      	ands	r6, r3
 8012bfc:	f7fb feb4 	bl	800e968 <ucdr_serialize_uint8_t>
 8012c00:	4603      	mov	r3, r0
 8012c02:	7b61      	ldrb	r1, [r4, #13]
 8012c04:	4628      	mov	r0, r5
 8012c06:	401e      	ands	r6, r3
 8012c08:	f7fb fe80 	bl	800e90c <ucdr_serialize_bool>
 8012c0c:	7b63      	ldrb	r3, [r4, #13]
 8012c0e:	4006      	ands	r6, r0
 8012c10:	b933      	cbnz	r3, 8012c20 <uxr_serialize_CLIENT_Representation+0x64>
 8012c12:	4628      	mov	r0, r5
 8012c14:	8ba1      	ldrh	r1, [r4, #28]
 8012c16:	f7fb fed3 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8012c1a:	4030      	ands	r0, r6
 8012c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c20:	4628      	mov	r0, r5
 8012c22:	6921      	ldr	r1, [r4, #16]
 8012c24:	f7fc f8ba 	bl	800ed9c <ucdr_serialize_uint32_t>
 8012c28:	6923      	ldr	r3, [r4, #16]
 8012c2a:	b1cb      	cbz	r3, 8012c60 <uxr_serialize_CLIENT_Representation+0xa4>
 8012c2c:	b1d0      	cbz	r0, 8012c64 <uxr_serialize_CLIENT_Representation+0xa8>
 8012c2e:	46a0      	mov	r8, r4
 8012c30:	f04f 0900 	mov.w	r9, #0
 8012c34:	e002      	b.n	8012c3c <uxr_serialize_CLIENT_Representation+0x80>
 8012c36:	f108 0808 	add.w	r8, r8, #8
 8012c3a:	b198      	cbz	r0, 8012c64 <uxr_serialize_CLIENT_Representation+0xa8>
 8012c3c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012c40:	4628      	mov	r0, r5
 8012c42:	f004 f8f5 	bl	8016e30 <ucdr_serialize_string>
 8012c46:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012c4a:	4607      	mov	r7, r0
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f004 f8ef 	bl	8016e30 <ucdr_serialize_string>
 8012c52:	6923      	ldr	r3, [r4, #16]
 8012c54:	f109 0901 	add.w	r9, r9, #1
 8012c58:	4038      	ands	r0, r7
 8012c5a:	4599      	cmp	r9, r3
 8012c5c:	b2c0      	uxtb	r0, r0
 8012c5e:	d3ea      	bcc.n	8012c36 <uxr_serialize_CLIENT_Representation+0x7a>
 8012c60:	4006      	ands	r6, r0
 8012c62:	e7d6      	b.n	8012c12 <uxr_serialize_CLIENT_Representation+0x56>
 8012c64:	2600      	movs	r6, #0
 8012c66:	e7d4      	b.n	8012c12 <uxr_serialize_CLIENT_Representation+0x56>

08012c68 <uxr_deserialize_CLIENT_Representation>:
 8012c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c6c:	2204      	movs	r2, #4
 8012c6e:	460c      	mov	r4, r1
 8012c70:	4605      	mov	r5, r0
 8012c72:	f7fb fb39 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8012c76:	2202      	movs	r2, #2
 8012c78:	4606      	mov	r6, r0
 8012c7a:	1d21      	adds	r1, r4, #4
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f7fb fb33 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8012c82:	2202      	movs	r2, #2
 8012c84:	1da1      	adds	r1, r4, #6
 8012c86:	4006      	ands	r6, r0
 8012c88:	4628      	mov	r0, r5
 8012c8a:	f7fb fb2d 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2204      	movs	r2, #4
 8012c92:	f104 0108 	add.w	r1, r4, #8
 8012c96:	4628      	mov	r0, r5
 8012c98:	b2f6      	uxtb	r6, r6
 8012c9a:	401e      	ands	r6, r3
 8012c9c:	f7fb fb24 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	f104 010c 	add.w	r1, r4, #12
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	401e      	ands	r6, r3
 8012caa:	f7fb fe73 	bl	800e994 <ucdr_deserialize_uint8_t>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	f104 010d 	add.w	r1, r4, #13
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	401e      	ands	r6, r3
 8012cb8:	f7fb fe3e 	bl	800e938 <ucdr_deserialize_bool>
 8012cbc:	7b63      	ldrb	r3, [r4, #13]
 8012cbe:	4006      	ands	r6, r0
 8012cc0:	b93b      	cbnz	r3, 8012cd2 <uxr_deserialize_CLIENT_Representation+0x6a>
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f104 011c 	add.w	r1, r4, #28
 8012cc8:	f7fb ff7a 	bl	800ebc0 <ucdr_deserialize_uint16_t>
 8012ccc:	4030      	ands	r0, r6
 8012cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	f104 0110 	add.w	r1, r4, #16
 8012cd8:	f7fc f990 	bl	800effc <ucdr_deserialize_uint32_t>
 8012cdc:	6923      	ldr	r3, [r4, #16]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d903      	bls.n	8012cea <uxr_deserialize_CLIENT_Representation+0x82>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	2600      	movs	r6, #0
 8012ce6:	75ab      	strb	r3, [r5, #22]
 8012ce8:	e7eb      	b.n	8012cc2 <uxr_deserialize_CLIENT_Representation+0x5a>
 8012cea:	b1eb      	cbz	r3, 8012d28 <uxr_deserialize_CLIENT_Representation+0xc0>
 8012cec:	b1f0      	cbz	r0, 8012d2c <uxr_deserialize_CLIENT_Representation+0xc4>
 8012cee:	46a0      	mov	r8, r4
 8012cf0:	f04f 0900 	mov.w	r9, #0
 8012cf4:	e002      	b.n	8012cfc <uxr_deserialize_CLIENT_Representation+0x94>
 8012cf6:	f108 0808 	add.w	r8, r8, #8
 8012cfa:	b1b8      	cbz	r0, 8012d2c <uxr_deserialize_CLIENT_Representation+0xc4>
 8012cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d00:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012d04:	4628      	mov	r0, r5
 8012d06:	f004 f8a1 	bl	8016e4c <ucdr_deserialize_string>
 8012d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d0e:	4607      	mov	r7, r0
 8012d10:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012d14:	4628      	mov	r0, r5
 8012d16:	f004 f899 	bl	8016e4c <ucdr_deserialize_string>
 8012d1a:	6923      	ldr	r3, [r4, #16]
 8012d1c:	f109 0901 	add.w	r9, r9, #1
 8012d20:	4038      	ands	r0, r7
 8012d22:	4599      	cmp	r9, r3
 8012d24:	b2c0      	uxtb	r0, r0
 8012d26:	d3e6      	bcc.n	8012cf6 <uxr_deserialize_CLIENT_Representation+0x8e>
 8012d28:	4006      	ands	r6, r0
 8012d2a:	e7ca      	b.n	8012cc2 <uxr_deserialize_CLIENT_Representation+0x5a>
 8012d2c:	2600      	movs	r6, #0
 8012d2e:	e7c8      	b.n	8012cc2 <uxr_deserialize_CLIENT_Representation+0x5a>

08012d30 <uxr_serialize_AGENT_Representation>:
 8012d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d34:	2204      	movs	r2, #4
 8012d36:	460c      	mov	r4, r1
 8012d38:	4605      	mov	r5, r0
 8012d3a:	f7fb fa71 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012d3e:	2202      	movs	r2, #2
 8012d40:	4606      	mov	r6, r0
 8012d42:	1d21      	adds	r1, r4, #4
 8012d44:	4628      	mov	r0, r5
 8012d46:	f7fb fa6b 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012d4a:	2202      	movs	r2, #2
 8012d4c:	1da1      	adds	r1, r4, #6
 8012d4e:	4006      	ands	r6, r0
 8012d50:	4628      	mov	r0, r5
 8012d52:	f7fb fa65 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8012d56:	4603      	mov	r3, r0
 8012d58:	7a21      	ldrb	r1, [r4, #8]
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	b2f6      	uxtb	r6, r6
 8012d5e:	401e      	ands	r6, r3
 8012d60:	f7fb fdd4 	bl	800e90c <ucdr_serialize_bool>
 8012d64:	7a23      	ldrb	r3, [r4, #8]
 8012d66:	ea00 0706 	and.w	r7, r0, r6
 8012d6a:	b913      	cbnz	r3, 8012d72 <uxr_serialize_AGENT_Representation+0x42>
 8012d6c:	4638      	mov	r0, r7
 8012d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d72:	4628      	mov	r0, r5
 8012d74:	68e1      	ldr	r1, [r4, #12]
 8012d76:	f7fc f811 	bl	800ed9c <ucdr_serialize_uint32_t>
 8012d7a:	68e3      	ldr	r3, [r4, #12]
 8012d7c:	b313      	cbz	r3, 8012dc4 <uxr_serialize_AGENT_Representation+0x94>
 8012d7e:	b1e8      	cbz	r0, 8012dbc <uxr_serialize_AGENT_Representation+0x8c>
 8012d80:	46a0      	mov	r8, r4
 8012d82:	f04f 0900 	mov.w	r9, #0
 8012d86:	e002      	b.n	8012d8e <uxr_serialize_AGENT_Representation+0x5e>
 8012d88:	f108 0808 	add.w	r8, r8, #8
 8012d8c:	b1b3      	cbz	r3, 8012dbc <uxr_serialize_AGENT_Representation+0x8c>
 8012d8e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012d92:	4628      	mov	r0, r5
 8012d94:	f004 f84c 	bl	8016e30 <ucdr_serialize_string>
 8012d98:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012d9c:	4606      	mov	r6, r0
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f004 f846 	bl	8016e30 <ucdr_serialize_string>
 8012da4:	68e2      	ldr	r2, [r4, #12]
 8012da6:	f109 0901 	add.w	r9, r9, #1
 8012daa:	ea06 0300 	and.w	r3, r6, r0
 8012dae:	4591      	cmp	r9, r2
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	d3e9      	bcc.n	8012d88 <uxr_serialize_AGENT_Representation+0x58>
 8012db4:	401f      	ands	r7, r3
 8012db6:	4638      	mov	r0, r7
 8012db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dbc:	2700      	movs	r7, #0
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dc4:	4007      	ands	r7, r0
 8012dc6:	e7d1      	b.n	8012d6c <uxr_serialize_AGENT_Representation+0x3c>

08012dc8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012dc8:	b570      	push	{r4, r5, r6, lr}
 8012dca:	460d      	mov	r5, r1
 8012dcc:	7809      	ldrb	r1, [r1, #0]
 8012dce:	4606      	mov	r6, r0
 8012dd0:	f7fb fd9c 	bl	800e90c <ucdr_serialize_bool>
 8012dd4:	782b      	ldrb	r3, [r5, #0]
 8012dd6:	4604      	mov	r4, r0
 8012dd8:	b94b      	cbnz	r3, 8012dee <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012dda:	4630      	mov	r0, r6
 8012ddc:	7a29      	ldrb	r1, [r5, #8]
 8012dde:	f7fb fd95 	bl	800e90c <ucdr_serialize_bool>
 8012de2:	7a2b      	ldrb	r3, [r5, #8]
 8012de4:	4004      	ands	r4, r0
 8012de6:	b2e4      	uxtb	r4, r4
 8012de8:	b943      	cbnz	r3, 8012dfc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012dea:	4620      	mov	r0, r4
 8012dec:	bd70      	pop	{r4, r5, r6, pc}
 8012dee:	4630      	mov	r0, r6
 8012df0:	6869      	ldr	r1, [r5, #4]
 8012df2:	f004 f81d 	bl	8016e30 <ucdr_serialize_string>
 8012df6:	4004      	ands	r4, r0
 8012df8:	b2e4      	uxtb	r4, r4
 8012dfa:	e7ee      	b.n	8012dda <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012dfc:	4630      	mov	r0, r6
 8012dfe:	68e9      	ldr	r1, [r5, #12]
 8012e00:	f004 f816 	bl	8016e30 <ucdr_serialize_string>
 8012e04:	4004      	ands	r4, r0
 8012e06:	4620      	mov	r0, r4
 8012e08:	bd70      	pop	{r4, r5, r6, pc}
 8012e0a:	bf00      	nop

08012e0c <uxr_serialize_OBJK_Topic_Binary>:
 8012e0c:	b570      	push	{r4, r5, r6, lr}
 8012e0e:	460d      	mov	r5, r1
 8012e10:	6809      	ldr	r1, [r1, #0]
 8012e12:	4606      	mov	r6, r0
 8012e14:	f004 f80c 	bl	8016e30 <ucdr_serialize_string>
 8012e18:	7929      	ldrb	r1, [r5, #4]
 8012e1a:	4604      	mov	r4, r0
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7fb fd75 	bl	800e90c <ucdr_serialize_bool>
 8012e22:	792b      	ldrb	r3, [r5, #4]
 8012e24:	4004      	ands	r4, r0
 8012e26:	b2e4      	uxtb	r4, r4
 8012e28:	b943      	cbnz	r3, 8012e3c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	7b29      	ldrb	r1, [r5, #12]
 8012e2e:	f7fb fd6d 	bl	800e90c <ucdr_serialize_bool>
 8012e32:	7b2b      	ldrb	r3, [r5, #12]
 8012e34:	4004      	ands	r4, r0
 8012e36:	b93b      	cbnz	r3, 8012e48 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012e38:	4620      	mov	r0, r4
 8012e3a:	bd70      	pop	{r4, r5, r6, pc}
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	68a9      	ldr	r1, [r5, #8]
 8012e40:	f003 fff6 	bl	8016e30 <ucdr_serialize_string>
 8012e44:	4004      	ands	r4, r0
 8012e46:	e7f0      	b.n	8012e2a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012e48:	4630      	mov	r0, r6
 8012e4a:	6929      	ldr	r1, [r5, #16]
 8012e4c:	f003 fff0 	bl	8016e30 <ucdr_serialize_string>
 8012e50:	4004      	ands	r4, r0
 8012e52:	b2e4      	uxtb	r4, r4
 8012e54:	4620      	mov	r0, r4
 8012e56:	bd70      	pop	{r4, r5, r6, pc}

08012e58 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5c:	460c      	mov	r4, r1
 8012e5e:	7809      	ldrb	r1, [r1, #0]
 8012e60:	4606      	mov	r6, r0
 8012e62:	f7fb fd53 	bl	800e90c <ucdr_serialize_bool>
 8012e66:	7823      	ldrb	r3, [r4, #0]
 8012e68:	4605      	mov	r5, r0
 8012e6a:	b96b      	cbnz	r3, 8012e88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012e72:	f7fb fd4b 	bl	800e90c <ucdr_serialize_bool>
 8012e76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012e7a:	4005      	ands	r5, r0
 8012e7c:	b2ed      	uxtb	r5, r5
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d169      	bne.n	8012f56 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012e82:	4628      	mov	r0, r5
 8012e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e88:	4630      	mov	r0, r6
 8012e8a:	6861      	ldr	r1, [r4, #4]
 8012e8c:	f7fb ff86 	bl	800ed9c <ucdr_serialize_uint32_t>
 8012e90:	6863      	ldr	r3, [r4, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d06b      	beq.n	8012f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012e96:	2800      	cmp	r0, #0
 8012e98:	d067      	beq.n	8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012e9a:	4630      	mov	r0, r6
 8012e9c:	68a1      	ldr	r1, [r4, #8]
 8012e9e:	f003 ffc7 	bl	8016e30 <ucdr_serialize_string>
 8012ea2:	6863      	ldr	r3, [r4, #4]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d953      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	d05e      	beq.n	8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012eac:	4630      	mov	r0, r6
 8012eae:	68e1      	ldr	r1, [r4, #12]
 8012eb0:	f003 ffbe 	bl	8016e30 <ucdr_serialize_string>
 8012eb4:	6863      	ldr	r3, [r4, #4]
 8012eb6:	2b02      	cmp	r3, #2
 8012eb8:	d94a      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	d055      	beq.n	8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	6921      	ldr	r1, [r4, #16]
 8012ec2:	f003 ffb5 	bl	8016e30 <ucdr_serialize_string>
 8012ec6:	6863      	ldr	r3, [r4, #4]
 8012ec8:	2b03      	cmp	r3, #3
 8012eca:	d941      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d04c      	beq.n	8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	6961      	ldr	r1, [r4, #20]
 8012ed4:	f003 ffac 	bl	8016e30 <ucdr_serialize_string>
 8012ed8:	6863      	ldr	r3, [r4, #4]
 8012eda:	2b04      	cmp	r3, #4
 8012edc:	d938      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ede:	2800      	cmp	r0, #0
 8012ee0:	d043      	beq.n	8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ee2:	4630      	mov	r0, r6
 8012ee4:	69a1      	ldr	r1, [r4, #24]
 8012ee6:	f003 ffa3 	bl	8016e30 <ucdr_serialize_string>
 8012eea:	6863      	ldr	r3, [r4, #4]
 8012eec:	2b05      	cmp	r3, #5
 8012eee:	d92f      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	d03a      	beq.n	8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	69e1      	ldr	r1, [r4, #28]
 8012ef8:	f003 ff9a 	bl	8016e30 <ucdr_serialize_string>
 8012efc:	6863      	ldr	r3, [r4, #4]
 8012efe:	2b06      	cmp	r3, #6
 8012f00:	d926      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012f02:	b390      	cbz	r0, 8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012f04:	4630      	mov	r0, r6
 8012f06:	6a21      	ldr	r1, [r4, #32]
 8012f08:	f003 ff92 	bl	8016e30 <ucdr_serialize_string>
 8012f0c:	6863      	ldr	r3, [r4, #4]
 8012f0e:	2b07      	cmp	r3, #7
 8012f10:	d91e      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012f12:	b350      	cbz	r0, 8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012f14:	4630      	mov	r0, r6
 8012f16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012f18:	f003 ff8a 	bl	8016e30 <ucdr_serialize_string>
 8012f1c:	6863      	ldr	r3, [r4, #4]
 8012f1e:	2b08      	cmp	r3, #8
 8012f20:	d916      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012f22:	b310      	cbz	r0, 8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012f24:	4630      	mov	r0, r6
 8012f26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012f28:	f003 ff82 	bl	8016e30 <ucdr_serialize_string>
 8012f2c:	6863      	ldr	r3, [r4, #4]
 8012f2e:	2b09      	cmp	r3, #9
 8012f30:	d90e      	bls.n	8012f50 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012f32:	b1d0      	cbz	r0, 8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012f34:	2709      	movs	r7, #9
 8012f36:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012f3a:	e000      	b.n	8012f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012f3c:	b1a8      	cbz	r0, 8012f6a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f858 1b04 	ldr.w	r1, [r8], #4
 8012f44:	f003 ff74 	bl	8016e30 <ucdr_serialize_string>
 8012f48:	6862      	ldr	r2, [r4, #4]
 8012f4a:	3701      	adds	r7, #1
 8012f4c:	4297      	cmp	r7, r2
 8012f4e:	d3f5      	bcc.n	8012f3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012f50:	4005      	ands	r5, r0
 8012f52:	b2ed      	uxtb	r5, r5
 8012f54:	e78a      	b.n	8012e6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012f56:	4630      	mov	r0, r6
 8012f58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012f5a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012f5e:	f7fd f9e3 	bl	8010328 <ucdr_serialize_sequence_uint8_t>
 8012f62:	4005      	ands	r5, r0
 8012f64:	4628      	mov	r0, r5
 8012f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	e77e      	b.n	8012e6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012f6e:	4028      	ands	r0, r5
 8012f70:	b2c5      	uxtb	r5, r0
 8012f72:	e77b      	b.n	8012e6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012f74 <uxr_serialize_OBJK_Publisher_Binary>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	460d      	mov	r5, r1
 8012f78:	7809      	ldrb	r1, [r1, #0]
 8012f7a:	4606      	mov	r6, r0
 8012f7c:	f7fb fcc6 	bl	800e90c <ucdr_serialize_bool>
 8012f80:	782b      	ldrb	r3, [r5, #0]
 8012f82:	4604      	mov	r4, r0
 8012f84:	b94b      	cbnz	r3, 8012f9a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012f86:	4630      	mov	r0, r6
 8012f88:	7a29      	ldrb	r1, [r5, #8]
 8012f8a:	f7fb fcbf 	bl	800e90c <ucdr_serialize_bool>
 8012f8e:	7a2b      	ldrb	r3, [r5, #8]
 8012f90:	4004      	ands	r4, r0
 8012f92:	b2e4      	uxtb	r4, r4
 8012f94:	b943      	cbnz	r3, 8012fa8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012f96:	4620      	mov	r0, r4
 8012f98:	bd70      	pop	{r4, r5, r6, pc}
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	6869      	ldr	r1, [r5, #4]
 8012f9e:	f003 ff47 	bl	8016e30 <ucdr_serialize_string>
 8012fa2:	4004      	ands	r4, r0
 8012fa4:	b2e4      	uxtb	r4, r4
 8012fa6:	e7ee      	b.n	8012f86 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012fa8:	4630      	mov	r0, r6
 8012faa:	f105 010c 	add.w	r1, r5, #12
 8012fae:	f7ff ff53 	bl	8012e58 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012fb2:	4004      	ands	r4, r0
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	bd70      	pop	{r4, r5, r6, pc}

08012fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	7809      	ldrb	r1, [r1, #0]
 8012fc0:	4606      	mov	r6, r0
 8012fc2:	f7fb fca3 	bl	800e90c <ucdr_serialize_bool>
 8012fc6:	7823      	ldrb	r3, [r4, #0]
 8012fc8:	4605      	mov	r5, r0
 8012fca:	b96b      	cbnz	r3, 8012fe8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012fd2:	f7fb fc9b 	bl	800e90c <ucdr_serialize_bool>
 8012fd6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012fda:	4005      	ands	r5, r0
 8012fdc:	b2ed      	uxtb	r5, r5
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d169      	bne.n	80130b6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe8:	4630      	mov	r0, r6
 8012fea:	6861      	ldr	r1, [r4, #4]
 8012fec:	f7fb fed6 	bl	800ed9c <ucdr_serialize_uint32_t>
 8012ff0:	6863      	ldr	r3, [r4, #4]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d06b      	beq.n	80130ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	d067      	beq.n	80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ffa:	4630      	mov	r0, r6
 8012ffc:	68a1      	ldr	r1, [r4, #8]
 8012ffe:	f003 ff17 	bl	8016e30 <ucdr_serialize_string>
 8013002:	6863      	ldr	r3, [r4, #4]
 8013004:	2b01      	cmp	r3, #1
 8013006:	d953      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013008:	2800      	cmp	r0, #0
 801300a:	d05e      	beq.n	80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801300c:	4630      	mov	r0, r6
 801300e:	68e1      	ldr	r1, [r4, #12]
 8013010:	f003 ff0e 	bl	8016e30 <ucdr_serialize_string>
 8013014:	6863      	ldr	r3, [r4, #4]
 8013016:	2b02      	cmp	r3, #2
 8013018:	d94a      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801301a:	2800      	cmp	r0, #0
 801301c:	d055      	beq.n	80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801301e:	4630      	mov	r0, r6
 8013020:	6921      	ldr	r1, [r4, #16]
 8013022:	f003 ff05 	bl	8016e30 <ucdr_serialize_string>
 8013026:	6863      	ldr	r3, [r4, #4]
 8013028:	2b03      	cmp	r3, #3
 801302a:	d941      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801302c:	2800      	cmp	r0, #0
 801302e:	d04c      	beq.n	80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013030:	4630      	mov	r0, r6
 8013032:	6961      	ldr	r1, [r4, #20]
 8013034:	f003 fefc 	bl	8016e30 <ucdr_serialize_string>
 8013038:	6863      	ldr	r3, [r4, #4]
 801303a:	2b04      	cmp	r3, #4
 801303c:	d938      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801303e:	2800      	cmp	r0, #0
 8013040:	d043      	beq.n	80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013042:	4630      	mov	r0, r6
 8013044:	69a1      	ldr	r1, [r4, #24]
 8013046:	f003 fef3 	bl	8016e30 <ucdr_serialize_string>
 801304a:	6863      	ldr	r3, [r4, #4]
 801304c:	2b05      	cmp	r3, #5
 801304e:	d92f      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013050:	2800      	cmp	r0, #0
 8013052:	d03a      	beq.n	80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013054:	4630      	mov	r0, r6
 8013056:	69e1      	ldr	r1, [r4, #28]
 8013058:	f003 feea 	bl	8016e30 <ucdr_serialize_string>
 801305c:	6863      	ldr	r3, [r4, #4]
 801305e:	2b06      	cmp	r3, #6
 8013060:	d926      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013062:	b390      	cbz	r0, 80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013064:	4630      	mov	r0, r6
 8013066:	6a21      	ldr	r1, [r4, #32]
 8013068:	f003 fee2 	bl	8016e30 <ucdr_serialize_string>
 801306c:	6863      	ldr	r3, [r4, #4]
 801306e:	2b07      	cmp	r3, #7
 8013070:	d91e      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013072:	b350      	cbz	r0, 80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013074:	4630      	mov	r0, r6
 8013076:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013078:	f003 feda 	bl	8016e30 <ucdr_serialize_string>
 801307c:	6863      	ldr	r3, [r4, #4]
 801307e:	2b08      	cmp	r3, #8
 8013080:	d916      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013082:	b310      	cbz	r0, 80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013084:	4630      	mov	r0, r6
 8013086:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013088:	f003 fed2 	bl	8016e30 <ucdr_serialize_string>
 801308c:	6863      	ldr	r3, [r4, #4]
 801308e:	2b09      	cmp	r3, #9
 8013090:	d90e      	bls.n	80130b0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013092:	b1d0      	cbz	r0, 80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013094:	2709      	movs	r7, #9
 8013096:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801309a:	e000      	b.n	801309e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 801309c:	b1a8      	cbz	r0, 80130ca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801309e:	4630      	mov	r0, r6
 80130a0:	f858 1b04 	ldr.w	r1, [r8], #4
 80130a4:	f003 fec4 	bl	8016e30 <ucdr_serialize_string>
 80130a8:	6862      	ldr	r2, [r4, #4]
 80130aa:	3701      	adds	r7, #1
 80130ac:	4297      	cmp	r7, r2
 80130ae:	d3f5      	bcc.n	801309c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80130b0:	4005      	ands	r5, r0
 80130b2:	b2ed      	uxtb	r5, r5
 80130b4:	e78a      	b.n	8012fcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80130b6:	4630      	mov	r0, r6
 80130b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80130ba:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80130be:	f7fd f933 	bl	8010328 <ucdr_serialize_sequence_uint8_t>
 80130c2:	4005      	ands	r5, r0
 80130c4:	4628      	mov	r0, r5
 80130c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ca:	2500      	movs	r5, #0
 80130cc:	e77e      	b.n	8012fcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80130ce:	4028      	ands	r0, r5
 80130d0:	b2c5      	uxtb	r5, r0
 80130d2:	e77b      	b.n	8012fcc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080130d4 <uxr_serialize_OBJK_Subscriber_Binary>:
 80130d4:	b570      	push	{r4, r5, r6, lr}
 80130d6:	460d      	mov	r5, r1
 80130d8:	7809      	ldrb	r1, [r1, #0]
 80130da:	4606      	mov	r6, r0
 80130dc:	f7fb fc16 	bl	800e90c <ucdr_serialize_bool>
 80130e0:	782b      	ldrb	r3, [r5, #0]
 80130e2:	4604      	mov	r4, r0
 80130e4:	b94b      	cbnz	r3, 80130fa <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80130e6:	4630      	mov	r0, r6
 80130e8:	7a29      	ldrb	r1, [r5, #8]
 80130ea:	f7fb fc0f 	bl	800e90c <ucdr_serialize_bool>
 80130ee:	7a2b      	ldrb	r3, [r5, #8]
 80130f0:	4004      	ands	r4, r0
 80130f2:	b2e4      	uxtb	r4, r4
 80130f4:	b943      	cbnz	r3, 8013108 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80130f6:	4620      	mov	r0, r4
 80130f8:	bd70      	pop	{r4, r5, r6, pc}
 80130fa:	4630      	mov	r0, r6
 80130fc:	6869      	ldr	r1, [r5, #4]
 80130fe:	f003 fe97 	bl	8016e30 <ucdr_serialize_string>
 8013102:	4004      	ands	r4, r0
 8013104:	b2e4      	uxtb	r4, r4
 8013106:	e7ee      	b.n	80130e6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013108:	4630      	mov	r0, r6
 801310a:	f105 010c 	add.w	r1, r5, #12
 801310e:	f7ff ff53 	bl	8012fb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013112:	4004      	ands	r4, r0
 8013114:	4620      	mov	r0, r4
 8013116:	bd70      	pop	{r4, r5, r6, pc}

08013118 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013118:	b570      	push	{r4, r5, r6, lr}
 801311a:	460d      	mov	r5, r1
 801311c:	8809      	ldrh	r1, [r1, #0]
 801311e:	4606      	mov	r6, r0
 8013120:	f7fb fc4e 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8013124:	78a9      	ldrb	r1, [r5, #2]
 8013126:	4604      	mov	r4, r0
 8013128:	4630      	mov	r0, r6
 801312a:	f7fb fbef 	bl	800e90c <ucdr_serialize_bool>
 801312e:	78ab      	ldrb	r3, [r5, #2]
 8013130:	4004      	ands	r4, r0
 8013132:	b2e4      	uxtb	r4, r4
 8013134:	b9b3      	cbnz	r3, 8013164 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8013136:	4630      	mov	r0, r6
 8013138:	79a9      	ldrb	r1, [r5, #6]
 801313a:	f7fb fbe7 	bl	800e90c <ucdr_serialize_bool>
 801313e:	79ab      	ldrb	r3, [r5, #6]
 8013140:	4004      	ands	r4, r0
 8013142:	bb33      	cbnz	r3, 8013192 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8013144:	4630      	mov	r0, r6
 8013146:	7b29      	ldrb	r1, [r5, #12]
 8013148:	f7fb fbe0 	bl	800e90c <ucdr_serialize_bool>
 801314c:	7b2b      	ldrb	r3, [r5, #12]
 801314e:	4004      	ands	r4, r0
 8013150:	b9c3      	cbnz	r3, 8013184 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8013152:	4630      	mov	r0, r6
 8013154:	7d29      	ldrb	r1, [r5, #20]
 8013156:	f7fb fbd9 	bl	800e90c <ucdr_serialize_bool>
 801315a:	7d2b      	ldrb	r3, [r5, #20]
 801315c:	4004      	ands	r4, r0
 801315e:	b93b      	cbnz	r3, 8013170 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8013160:	4620      	mov	r0, r4
 8013162:	bd70      	pop	{r4, r5, r6, pc}
 8013164:	4630      	mov	r0, r6
 8013166:	88a9      	ldrh	r1, [r5, #4]
 8013168:	f7fb fc2a 	bl	800e9c0 <ucdr_serialize_uint16_t>
 801316c:	4004      	ands	r4, r0
 801316e:	e7e2      	b.n	8013136 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8013170:	4630      	mov	r0, r6
 8013172:	69aa      	ldr	r2, [r5, #24]
 8013174:	f105 011c 	add.w	r1, r5, #28
 8013178:	f7fd f8d6 	bl	8010328 <ucdr_serialize_sequence_uint8_t>
 801317c:	4004      	ands	r4, r0
 801317e:	b2e4      	uxtb	r4, r4
 8013180:	4620      	mov	r0, r4
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	4630      	mov	r0, r6
 8013186:	6929      	ldr	r1, [r5, #16]
 8013188:	f7fb fe08 	bl	800ed9c <ucdr_serialize_uint32_t>
 801318c:	4004      	ands	r4, r0
 801318e:	b2e4      	uxtb	r4, r4
 8013190:	e7df      	b.n	8013152 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8013192:	4630      	mov	r0, r6
 8013194:	68a9      	ldr	r1, [r5, #8]
 8013196:	f7fb fe01 	bl	800ed9c <ucdr_serialize_uint32_t>
 801319a:	4004      	ands	r4, r0
 801319c:	b2e4      	uxtb	r4, r4
 801319e:	e7d1      	b.n	8013144 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

080131a0 <uxr_serialize_OBJK_DataReader_Binary>:
 80131a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a2:	2202      	movs	r2, #2
 80131a4:	460c      	mov	r4, r1
 80131a6:	4606      	mov	r6, r0
 80131a8:	f7fb f83a 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80131ac:	78a1      	ldrb	r1, [r4, #2]
 80131ae:	4605      	mov	r5, r0
 80131b0:	4630      	mov	r0, r6
 80131b2:	f7fb fbab 	bl	800e90c <ucdr_serialize_bool>
 80131b6:	78a3      	ldrb	r3, [r4, #2]
 80131b8:	4005      	ands	r5, r0
 80131ba:	b2ed      	uxtb	r5, r5
 80131bc:	b90b      	cbnz	r3, 80131c2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80131be:	4628      	mov	r0, r5
 80131c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c2:	f104 0108 	add.w	r1, r4, #8
 80131c6:	4630      	mov	r0, r6
 80131c8:	f7ff ffa6 	bl	8013118 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80131cc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80131d0:	4607      	mov	r7, r0
 80131d2:	4630      	mov	r0, r6
 80131d4:	f7fb fb9a 	bl	800e90c <ucdr_serialize_bool>
 80131d8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80131dc:	4007      	ands	r7, r0
 80131de:	b2ff      	uxtb	r7, r7
 80131e0:	b95b      	cbnz	r3, 80131fa <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80131e2:	4630      	mov	r0, r6
 80131e4:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80131e8:	f7fb fb90 	bl	800e90c <ucdr_serialize_bool>
 80131ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80131f0:	4007      	ands	r7, r0
 80131f2:	b94b      	cbnz	r3, 8013208 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80131f4:	403d      	ands	r5, r7
 80131f6:	4628      	mov	r0, r5
 80131f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131fa:	4630      	mov	r0, r6
 80131fc:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8013200:	f7fc f822 	bl	800f248 <ucdr_serialize_uint64_t>
 8013204:	4007      	ands	r7, r0
 8013206:	e7ec      	b.n	80131e2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013208:	4630      	mov	r0, r6
 801320a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801320c:	f003 fe10 	bl	8016e30 <ucdr_serialize_string>
 8013210:	4007      	ands	r7, r0
 8013212:	b2ff      	uxtb	r7, r7
 8013214:	e7ee      	b.n	80131f4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013216:	bf00      	nop

08013218 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801321a:	2202      	movs	r2, #2
 801321c:	460d      	mov	r5, r1
 801321e:	4606      	mov	r6, r0
 8013220:	f7fa fffe 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8013224:	78a9      	ldrb	r1, [r5, #2]
 8013226:	4604      	mov	r4, r0
 8013228:	4630      	mov	r0, r6
 801322a:	f7fb fb6f 	bl	800e90c <ucdr_serialize_bool>
 801322e:	78ab      	ldrb	r3, [r5, #2]
 8013230:	4004      	ands	r4, r0
 8013232:	b2e4      	uxtb	r4, r4
 8013234:	b90b      	cbnz	r3, 801323a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013236:	4620      	mov	r0, r4
 8013238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801323a:	f105 0108 	add.w	r1, r5, #8
 801323e:	4630      	mov	r0, r6
 8013240:	f7ff ff6a 	bl	8013118 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013244:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8013248:	4607      	mov	r7, r0
 801324a:	4630      	mov	r0, r6
 801324c:	f7fb fb5e 	bl	800e90c <ucdr_serialize_bool>
 8013250:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013254:	4007      	ands	r7, r0
 8013256:	b2ff      	uxtb	r7, r7
 8013258:	b913      	cbnz	r3, 8013260 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801325a:	403c      	ands	r4, r7
 801325c:	4620      	mov	r0, r4
 801325e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013260:	4630      	mov	r0, r6
 8013262:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8013266:	f7fb ffef 	bl	800f248 <ucdr_serialize_uint64_t>
 801326a:	4007      	ands	r7, r0
 801326c:	e7f5      	b.n	801325a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801326e:	bf00      	nop

08013270 <uxr_deserialize_ObjectVariant>:
 8013270:	b570      	push	{r4, r5, r6, lr}
 8013272:	4605      	mov	r5, r0
 8013274:	460e      	mov	r6, r1
 8013276:	f7fb fb8d 	bl	800e994 <ucdr_deserialize_uint8_t>
 801327a:	b320      	cbz	r0, 80132c6 <uxr_deserialize_ObjectVariant+0x56>
 801327c:	7833      	ldrb	r3, [r6, #0]
 801327e:	4604      	mov	r4, r0
 8013280:	3b01      	subs	r3, #1
 8013282:	2b0d      	cmp	r3, #13
 8013284:	d81d      	bhi.n	80132c2 <uxr_deserialize_ObjectVariant+0x52>
 8013286:	e8df f003 	tbb	[pc, r3]
 801328a:	2107      	.short	0x2107
 801328c:	21214b4b 	.word	0x21214b4b
 8013290:	381c2121 	.word	0x381c2121
 8013294:	876a3838 	.word	0x876a3838
 8013298:	4628      	mov	r0, r5
 801329a:	1d31      	adds	r1, r6, #4
 801329c:	f7fb fb7a 	bl	800e994 <ucdr_deserialize_uint8_t>
 80132a0:	4604      	mov	r4, r0
 80132a2:	b138      	cbz	r0, 80132b4 <uxr_deserialize_ObjectVariant+0x44>
 80132a4:	7933      	ldrb	r3, [r6, #4]
 80132a6:	2b02      	cmp	r3, #2
 80132a8:	d07c      	beq.n	80133a4 <uxr_deserialize_ObjectVariant+0x134>
 80132aa:	2b03      	cmp	r3, #3
 80132ac:	f000 8082 	beq.w	80133b4 <uxr_deserialize_ObjectVariant+0x144>
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d077      	beq.n	80133a4 <uxr_deserialize_ObjectVariant+0x134>
 80132b4:	4628      	mov	r0, r5
 80132b6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80132ba:	f7fc f941 	bl	800f540 <ucdr_deserialize_int16_t>
 80132be:	4004      	ands	r4, r0
 80132c0:	b2e4      	uxtb	r4, r4
 80132c2:	4620      	mov	r0, r4
 80132c4:	bd70      	pop	{r4, r5, r6, pc}
 80132c6:	2400      	movs	r4, #0
 80132c8:	4620      	mov	r0, r4
 80132ca:	bd70      	pop	{r4, r5, r6, pc}
 80132cc:	4628      	mov	r0, r5
 80132ce:	1d31      	adds	r1, r6, #4
 80132d0:	f7fb fb60 	bl	800e994 <ucdr_deserialize_uint8_t>
 80132d4:	4604      	mov	r4, r0
 80132d6:	b130      	cbz	r0, 80132e6 <uxr_deserialize_ObjectVariant+0x76>
 80132d8:	7933      	ldrb	r3, [r6, #4]
 80132da:	2b02      	cmp	r3, #2
 80132dc:	d037      	beq.n	801334e <uxr_deserialize_ObjectVariant+0xde>
 80132de:	2b03      	cmp	r3, #3
 80132e0:	d02a      	beq.n	8013338 <uxr_deserialize_ObjectVariant+0xc8>
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d033      	beq.n	801334e <uxr_deserialize_ObjectVariant+0xde>
 80132e6:	4628      	mov	r0, r5
 80132e8:	2202      	movs	r2, #2
 80132ea:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80132ee:	f7fa fffb 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 80132f2:	4004      	ands	r4, r0
 80132f4:	b2e4      	uxtb	r4, r4
 80132f6:	4620      	mov	r0, r4
 80132f8:	bd70      	pop	{r4, r5, r6, pc}
 80132fa:	4628      	mov	r0, r5
 80132fc:	1d31      	adds	r1, r6, #4
 80132fe:	f7fb fb49 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013302:	2800      	cmp	r0, #0
 8013304:	d0df      	beq.n	80132c6 <uxr_deserialize_ObjectVariant+0x56>
 8013306:	7933      	ldrb	r3, [r6, #4]
 8013308:	2b01      	cmp	r3, #1
 801330a:	d001      	beq.n	8013310 <uxr_deserialize_ObjectVariant+0xa0>
 801330c:	2b02      	cmp	r3, #2
 801330e:	d1d8      	bne.n	80132c2 <uxr_deserialize_ObjectVariant+0x52>
 8013310:	4628      	mov	r0, r5
 8013312:	68b1      	ldr	r1, [r6, #8]
 8013314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801331c:	f003 bd96 	b.w	8016e4c <ucdr_deserialize_string>
 8013320:	4628      	mov	r0, r5
 8013322:	1d31      	adds	r1, r6, #4
 8013324:	f7fb fb36 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013328:	4604      	mov	r4, r0
 801332a:	2800      	cmp	r0, #0
 801332c:	d0db      	beq.n	80132e6 <uxr_deserialize_ObjectVariant+0x76>
 801332e:	7933      	ldrb	r3, [r6, #4]
 8013330:	2b02      	cmp	r3, #2
 8013332:	d00c      	beq.n	801334e <uxr_deserialize_ObjectVariant+0xde>
 8013334:	2b03      	cmp	r3, #3
 8013336:	d1d6      	bne.n	80132e6 <uxr_deserialize_ObjectVariant+0x76>
 8013338:	f44f 7200 	mov.w	r2, #512	; 0x200
 801333c:	4628      	mov	r0, r5
 801333e:	f106 0308 	add.w	r3, r6, #8
 8013342:	f106 010c 	add.w	r1, r6, #12
 8013346:	f7fd f801 	bl	801034c <ucdr_deserialize_sequence_uint8_t>
 801334a:	4604      	mov	r4, r0
 801334c:	e7cb      	b.n	80132e6 <uxr_deserialize_ObjectVariant+0x76>
 801334e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013352:	4628      	mov	r0, r5
 8013354:	68b1      	ldr	r1, [r6, #8]
 8013356:	f003 fd79 	bl	8016e4c <ucdr_deserialize_string>
 801335a:	4604      	mov	r4, r0
 801335c:	e7c3      	b.n	80132e6 <uxr_deserialize_ObjectVariant+0x76>
 801335e:	2204      	movs	r2, #4
 8013360:	4628      	mov	r0, r5
 8013362:	18b1      	adds	r1, r6, r2
 8013364:	f7fa ffc0 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013368:	2202      	movs	r2, #2
 801336a:	4604      	mov	r4, r0
 801336c:	f106 0108 	add.w	r1, r6, #8
 8013370:	4628      	mov	r0, r5
 8013372:	f7fa ffb9 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013376:	2202      	movs	r2, #2
 8013378:	4004      	ands	r4, r0
 801337a:	f106 010a 	add.w	r1, r6, #10
 801337e:	4628      	mov	r0, r5
 8013380:	f7fa ffb2 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013384:	4603      	mov	r3, r0
 8013386:	b2e4      	uxtb	r4, r4
 8013388:	4628      	mov	r0, r5
 801338a:	f106 010c 	add.w	r1, r6, #12
 801338e:	401c      	ands	r4, r3
 8013390:	f7fb fad2 	bl	800e938 <ucdr_deserialize_bool>
 8013394:	4004      	ands	r4, r0
 8013396:	e794      	b.n	80132c2 <uxr_deserialize_ObjectVariant+0x52>
 8013398:	4628      	mov	r0, r5
 801339a:	1d31      	adds	r1, r6, #4
 801339c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133a0:	f7ff bc62 	b.w	8012c68 <uxr_deserialize_CLIENT_Representation>
 80133a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133a8:	4628      	mov	r0, r5
 80133aa:	68b1      	ldr	r1, [r6, #8]
 80133ac:	f003 fd4e 	bl	8016e4c <ucdr_deserialize_string>
 80133b0:	4604      	mov	r4, r0
 80133b2:	e77f      	b.n	80132b4 <uxr_deserialize_ObjectVariant+0x44>
 80133b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133b8:	4628      	mov	r0, r5
 80133ba:	f106 0308 	add.w	r3, r6, #8
 80133be:	f106 010c 	add.w	r1, r6, #12
 80133c2:	f7fc ffc3 	bl	801034c <ucdr_deserialize_sequence_uint8_t>
 80133c6:	4604      	mov	r4, r0
 80133c8:	e774      	b.n	80132b4 <uxr_deserialize_ObjectVariant+0x44>
 80133ca:	bf00      	nop

080133cc <uxr_deserialize_BaseObjectRequest>:
 80133cc:	b570      	push	{r4, r5, r6, lr}
 80133ce:	2202      	movs	r2, #2
 80133d0:	4605      	mov	r5, r0
 80133d2:	460e      	mov	r6, r1
 80133d4:	f7fa ff88 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 80133d8:	2202      	movs	r2, #2
 80133da:	4604      	mov	r4, r0
 80133dc:	1cb1      	adds	r1, r6, #2
 80133de:	4628      	mov	r0, r5
 80133e0:	f7fa ff82 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 80133e4:	4020      	ands	r0, r4
 80133e6:	b2c0      	uxtb	r0, r0
 80133e8:	bd70      	pop	{r4, r5, r6, pc}
 80133ea:	bf00      	nop

080133ec <uxr_deserialize_BaseObjectReply>:
 80133ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f0:	2202      	movs	r2, #2
 80133f2:	4606      	mov	r6, r0
 80133f4:	460f      	mov	r7, r1
 80133f6:	f7fa ff77 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 80133fa:	2202      	movs	r2, #2
 80133fc:	1cb9      	adds	r1, r7, #2
 80133fe:	4605      	mov	r5, r0
 8013400:	4630      	mov	r0, r6
 8013402:	f7fa ff71 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013406:	1d39      	adds	r1, r7, #4
 8013408:	4680      	mov	r8, r0
 801340a:	4630      	mov	r0, r6
 801340c:	f7fb fac2 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013410:	1d79      	adds	r1, r7, #5
 8013412:	4604      	mov	r4, r0
 8013414:	4630      	mov	r0, r6
 8013416:	f7fb fabd 	bl	800e994 <ucdr_deserialize_uint8_t>
 801341a:	ea05 0508 	and.w	r5, r5, r8
 801341e:	402c      	ands	r4, r5
 8013420:	4020      	ands	r0, r4
 8013422:	b2c0      	uxtb	r0, r0
 8013424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013428 <uxr_serialize_ReadSpecification>:
 8013428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801342a:	460d      	mov	r5, r1
 801342c:	7809      	ldrb	r1, [r1, #0]
 801342e:	4606      	mov	r6, r0
 8013430:	f7fb fa9a 	bl	800e968 <ucdr_serialize_uint8_t>
 8013434:	7869      	ldrb	r1, [r5, #1]
 8013436:	4604      	mov	r4, r0
 8013438:	4630      	mov	r0, r6
 801343a:	f7fb fa95 	bl	800e968 <ucdr_serialize_uint8_t>
 801343e:	78a9      	ldrb	r1, [r5, #2]
 8013440:	4004      	ands	r4, r0
 8013442:	4630      	mov	r0, r6
 8013444:	f7fb fa62 	bl	800e90c <ucdr_serialize_bool>
 8013448:	78ab      	ldrb	r3, [r5, #2]
 801344a:	b2e4      	uxtb	r4, r4
 801344c:	4004      	ands	r4, r0
 801344e:	b943      	cbnz	r3, 8013462 <uxr_serialize_ReadSpecification+0x3a>
 8013450:	4630      	mov	r0, r6
 8013452:	7a29      	ldrb	r1, [r5, #8]
 8013454:	f7fb fa5a 	bl	800e90c <ucdr_serialize_bool>
 8013458:	7a2b      	ldrb	r3, [r5, #8]
 801345a:	4004      	ands	r4, r0
 801345c:	b93b      	cbnz	r3, 801346e <uxr_serialize_ReadSpecification+0x46>
 801345e:	4620      	mov	r0, r4
 8013460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013462:	4630      	mov	r0, r6
 8013464:	6869      	ldr	r1, [r5, #4]
 8013466:	f003 fce3 	bl	8016e30 <ucdr_serialize_string>
 801346a:	4004      	ands	r4, r0
 801346c:	e7f0      	b.n	8013450 <uxr_serialize_ReadSpecification+0x28>
 801346e:	8969      	ldrh	r1, [r5, #10]
 8013470:	4630      	mov	r0, r6
 8013472:	f7fb faa5 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8013476:	89a9      	ldrh	r1, [r5, #12]
 8013478:	4607      	mov	r7, r0
 801347a:	4630      	mov	r0, r6
 801347c:	f7fb faa0 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8013480:	89e9      	ldrh	r1, [r5, #14]
 8013482:	4007      	ands	r7, r0
 8013484:	4630      	mov	r0, r6
 8013486:	f7fb fa9b 	bl	800e9c0 <ucdr_serialize_uint16_t>
 801348a:	8a29      	ldrh	r1, [r5, #16]
 801348c:	4605      	mov	r5, r0
 801348e:	4630      	mov	r0, r6
 8013490:	f7fb fa96 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8013494:	b2ff      	uxtb	r7, r7
 8013496:	403c      	ands	r4, r7
 8013498:	402c      	ands	r4, r5
 801349a:	4004      	ands	r4, r0
 801349c:	4620      	mov	r0, r4
 801349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080134a0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80134a0:	f7ff bb8c 	b.w	8012bbc <uxr_serialize_CLIENT_Representation>

080134a4 <uxr_serialize_CREATE_Payload>:
 80134a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134a6:	2202      	movs	r2, #2
 80134a8:	4606      	mov	r6, r0
 80134aa:	460d      	mov	r5, r1
 80134ac:	f7fa feb8 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80134b0:	1ca9      	adds	r1, r5, #2
 80134b2:	4604      	mov	r4, r0
 80134b4:	2202      	movs	r2, #2
 80134b6:	4630      	mov	r0, r6
 80134b8:	f7fa feb2 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80134bc:	7929      	ldrb	r1, [r5, #4]
 80134be:	4607      	mov	r7, r0
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7fb fa51 	bl	800e968 <ucdr_serialize_uint8_t>
 80134c6:	b328      	cbz	r0, 8013514 <uxr_serialize_CREATE_Payload+0x70>
 80134c8:	792b      	ldrb	r3, [r5, #4]
 80134ca:	403c      	ands	r4, r7
 80134cc:	3b01      	subs	r3, #1
 80134ce:	b2e4      	uxtb	r4, r4
 80134d0:	2b0d      	cmp	r3, #13
 80134d2:	d81d      	bhi.n	8013510 <uxr_serialize_CREATE_Payload+0x6c>
 80134d4:	e8df f003 	tbb	[pc, r3]
 80134d8:	32320753 	.word	0x32320753
 80134dc:	07070707 	.word	0x07070707
 80134e0:	2121211c 	.word	0x2121211c
 80134e4:	684c      	.short	0x684c
 80134e6:	4630      	mov	r0, r6
 80134e8:	7a29      	ldrb	r1, [r5, #8]
 80134ea:	f7fb fa3d 	bl	800e968 <ucdr_serialize_uint8_t>
 80134ee:	4607      	mov	r7, r0
 80134f0:	b130      	cbz	r0, 8013500 <uxr_serialize_CREATE_Payload+0x5c>
 80134f2:	7a2b      	ldrb	r3, [r5, #8]
 80134f4:	2b02      	cmp	r3, #2
 80134f6:	d035      	beq.n	8013564 <uxr_serialize_CREATE_Payload+0xc0>
 80134f8:	2b03      	cmp	r3, #3
 80134fa:	d02b      	beq.n	8013554 <uxr_serialize_CREATE_Payload+0xb0>
 80134fc:	2b01      	cmp	r3, #1
 80134fe:	d031      	beq.n	8013564 <uxr_serialize_CREATE_Payload+0xc0>
 8013500:	4630      	mov	r0, r6
 8013502:	2202      	movs	r2, #2
 8013504:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8013508:	f7fa fe8a 	bl	800e220 <ucdr_serialize_array_uint8_t>
 801350c:	4038      	ands	r0, r7
 801350e:	4004      	ands	r4, r0
 8013510:	4620      	mov	r0, r4
 8013512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013514:	2400      	movs	r4, #0
 8013516:	4620      	mov	r0, r4
 8013518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801351a:	4630      	mov	r0, r6
 801351c:	7a29      	ldrb	r1, [r5, #8]
 801351e:	f7fb fa23 	bl	800e968 <ucdr_serialize_uint8_t>
 8013522:	2800      	cmp	r0, #0
 8013524:	d0f6      	beq.n	8013514 <uxr_serialize_CREATE_Payload+0x70>
 8013526:	7a2b      	ldrb	r3, [r5, #8]
 8013528:	2b01      	cmp	r3, #1
 801352a:	d001      	beq.n	8013530 <uxr_serialize_CREATE_Payload+0x8c>
 801352c:	2b02      	cmp	r3, #2
 801352e:	d1ef      	bne.n	8013510 <uxr_serialize_CREATE_Payload+0x6c>
 8013530:	4630      	mov	r0, r6
 8013532:	68e9      	ldr	r1, [r5, #12]
 8013534:	f003 fc7c 	bl	8016e30 <ucdr_serialize_string>
 8013538:	4004      	ands	r4, r0
 801353a:	e7e9      	b.n	8013510 <uxr_serialize_CREATE_Payload+0x6c>
 801353c:	4630      	mov	r0, r6
 801353e:	7a29      	ldrb	r1, [r5, #8]
 8013540:	f7fb fa12 	bl	800e968 <ucdr_serialize_uint8_t>
 8013544:	4607      	mov	r7, r0
 8013546:	2800      	cmp	r0, #0
 8013548:	d0da      	beq.n	8013500 <uxr_serialize_CREATE_Payload+0x5c>
 801354a:	7a2b      	ldrb	r3, [r5, #8]
 801354c:	2b02      	cmp	r3, #2
 801354e:	d009      	beq.n	8013564 <uxr_serialize_CREATE_Payload+0xc0>
 8013550:	2b03      	cmp	r3, #3
 8013552:	d1d5      	bne.n	8013500 <uxr_serialize_CREATE_Payload+0x5c>
 8013554:	4630      	mov	r0, r6
 8013556:	68ea      	ldr	r2, [r5, #12]
 8013558:	f105 0110 	add.w	r1, r5, #16
 801355c:	f7fc fee4 	bl	8010328 <ucdr_serialize_sequence_uint8_t>
 8013560:	4607      	mov	r7, r0
 8013562:	e7cd      	b.n	8013500 <uxr_serialize_CREATE_Payload+0x5c>
 8013564:	4630      	mov	r0, r6
 8013566:	68e9      	ldr	r1, [r5, #12]
 8013568:	f003 fc62 	bl	8016e30 <ucdr_serialize_string>
 801356c:	4607      	mov	r7, r0
 801356e:	e7c7      	b.n	8013500 <uxr_serialize_CREATE_Payload+0x5c>
 8013570:	4630      	mov	r0, r6
 8013572:	f105 0108 	add.w	r1, r5, #8
 8013576:	f7ff fbdb 	bl	8012d30 <uxr_serialize_AGENT_Representation>
 801357a:	4004      	ands	r4, r0
 801357c:	e7c8      	b.n	8013510 <uxr_serialize_CREATE_Payload+0x6c>
 801357e:	4630      	mov	r0, r6
 8013580:	7a29      	ldrb	r1, [r5, #8]
 8013582:	f7fb f9f1 	bl	800e968 <ucdr_serialize_uint8_t>
 8013586:	4607      	mov	r7, r0
 8013588:	b130      	cbz	r0, 8013598 <uxr_serialize_CREATE_Payload+0xf4>
 801358a:	7a2b      	ldrb	r3, [r5, #8]
 801358c:	2b02      	cmp	r3, #2
 801358e:	d012      	beq.n	80135b6 <uxr_serialize_CREATE_Payload+0x112>
 8013590:	2b03      	cmp	r3, #3
 8013592:	d016      	beq.n	80135c2 <uxr_serialize_CREATE_Payload+0x11e>
 8013594:	2b01      	cmp	r3, #1
 8013596:	d00e      	beq.n	80135b6 <uxr_serialize_CREATE_Payload+0x112>
 8013598:	4630      	mov	r0, r6
 801359a:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 801359e:	f7fb ff4f 	bl	800f440 <ucdr_serialize_int16_t>
 80135a2:	4038      	ands	r0, r7
 80135a4:	4004      	ands	r4, r0
 80135a6:	e7b3      	b.n	8013510 <uxr_serialize_CREATE_Payload+0x6c>
 80135a8:	4630      	mov	r0, r6
 80135aa:	f105 0108 	add.w	r1, r5, #8
 80135ae:	f7ff fb05 	bl	8012bbc <uxr_serialize_CLIENT_Representation>
 80135b2:	4004      	ands	r4, r0
 80135b4:	e7ac      	b.n	8013510 <uxr_serialize_CREATE_Payload+0x6c>
 80135b6:	4630      	mov	r0, r6
 80135b8:	68e9      	ldr	r1, [r5, #12]
 80135ba:	f003 fc39 	bl	8016e30 <ucdr_serialize_string>
 80135be:	4607      	mov	r7, r0
 80135c0:	e7ea      	b.n	8013598 <uxr_serialize_CREATE_Payload+0xf4>
 80135c2:	4630      	mov	r0, r6
 80135c4:	68ea      	ldr	r2, [r5, #12]
 80135c6:	f105 0110 	add.w	r1, r5, #16
 80135ca:	f7fc fead 	bl	8010328 <ucdr_serialize_sequence_uint8_t>
 80135ce:	4607      	mov	r7, r0
 80135d0:	e7e2      	b.n	8013598 <uxr_serialize_CREATE_Payload+0xf4>
 80135d2:	bf00      	nop

080135d4 <uxr_serialize_DELETE_Payload>:
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	2202      	movs	r2, #2
 80135d8:	4605      	mov	r5, r0
 80135da:	460e      	mov	r6, r1
 80135dc:	f7fa fe20 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80135e0:	2202      	movs	r2, #2
 80135e2:	4604      	mov	r4, r0
 80135e4:	1cb1      	adds	r1, r6, #2
 80135e6:	4628      	mov	r0, r5
 80135e8:	f7fa fe1a 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80135ec:	4020      	ands	r0, r4
 80135ee:	b2c0      	uxtb	r0, r0
 80135f0:	bd70      	pop	{r4, r5, r6, pc}
 80135f2:	bf00      	nop

080135f4 <uxr_deserialize_STATUS_AGENT_Payload>:
 80135f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135f8:	4606      	mov	r6, r0
 80135fa:	460f      	mov	r7, r1
 80135fc:	f7fb f9ca 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013600:	1c79      	adds	r1, r7, #1
 8013602:	4605      	mov	r5, r0
 8013604:	4630      	mov	r0, r6
 8013606:	f7fb f9c5 	bl	800e994 <ucdr_deserialize_uint8_t>
 801360a:	1d39      	adds	r1, r7, #4
 801360c:	4682      	mov	sl, r0
 801360e:	2204      	movs	r2, #4
 8013610:	4630      	mov	r0, r6
 8013612:	f7fa fe69 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013616:	f107 0108 	add.w	r1, r7, #8
 801361a:	4681      	mov	r9, r0
 801361c:	2202      	movs	r2, #2
 801361e:	4630      	mov	r0, r6
 8013620:	f7fa fe62 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013624:	2202      	movs	r2, #2
 8013626:	4680      	mov	r8, r0
 8013628:	f107 010a 	add.w	r1, r7, #10
 801362c:	4630      	mov	r0, r6
 801362e:	f7fa fe5b 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013632:	ea05 050a 	and.w	r5, r5, sl
 8013636:	b2ec      	uxtb	r4, r5
 8013638:	f107 010c 	add.w	r1, r7, #12
 801363c:	4605      	mov	r5, r0
 801363e:	4630      	mov	r0, r6
 8013640:	f7fb f97a 	bl	800e938 <ucdr_deserialize_bool>
 8013644:	ea04 0409 	and.w	r4, r4, r9
 8013648:	ea08 0404 	and.w	r4, r8, r4
 801364c:	4025      	ands	r5, r4
 801364e:	4028      	ands	r0, r5
 8013650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013654 <uxr_deserialize_STATUS_Payload>:
 8013654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013658:	2202      	movs	r2, #2
 801365a:	4606      	mov	r6, r0
 801365c:	460f      	mov	r7, r1
 801365e:	f7fa fe43 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013662:	2202      	movs	r2, #2
 8013664:	1cb9      	adds	r1, r7, #2
 8013666:	4605      	mov	r5, r0
 8013668:	4630      	mov	r0, r6
 801366a:	f7fa fe3d 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 801366e:	1d39      	adds	r1, r7, #4
 8013670:	4680      	mov	r8, r0
 8013672:	4630      	mov	r0, r6
 8013674:	f7fb f98e 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013678:	1d79      	adds	r1, r7, #5
 801367a:	4604      	mov	r4, r0
 801367c:	4630      	mov	r0, r6
 801367e:	f7fb f989 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013682:	ea05 0508 	and.w	r5, r5, r8
 8013686:	402c      	ands	r4, r5
 8013688:	4020      	ands	r0, r4
 801368a:	b2c0      	uxtb	r0, r0
 801368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013690 <uxr_serialize_READ_DATA_Payload>:
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	2202      	movs	r2, #2
 8013694:	4605      	mov	r5, r0
 8013696:	460e      	mov	r6, r1
 8013698:	f7fa fdc2 	bl	800e220 <ucdr_serialize_array_uint8_t>
 801369c:	2202      	movs	r2, #2
 801369e:	1cb1      	adds	r1, r6, #2
 80136a0:	4604      	mov	r4, r0
 80136a2:	4628      	mov	r0, r5
 80136a4:	f7fa fdbc 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80136a8:	1d31      	adds	r1, r6, #4
 80136aa:	4004      	ands	r4, r0
 80136ac:	4628      	mov	r0, r5
 80136ae:	f7ff febb 	bl	8013428 <uxr_serialize_ReadSpecification>
 80136b2:	b2e4      	uxtb	r4, r4
 80136b4:	4020      	ands	r0, r4
 80136b6:	bd70      	pop	{r4, r5, r6, pc}

080136b8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80136b8:	b570      	push	{r4, r5, r6, lr}
 80136ba:	2202      	movs	r2, #2
 80136bc:	4605      	mov	r5, r0
 80136be:	460e      	mov	r6, r1
 80136c0:	f7fa fdae 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80136c4:	2202      	movs	r2, #2
 80136c6:	4604      	mov	r4, r0
 80136c8:	1cb1      	adds	r1, r6, #2
 80136ca:	4628      	mov	r0, r5
 80136cc:	f7fa fda8 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80136d0:	4020      	ands	r0, r4
 80136d2:	b2c0      	uxtb	r0, r0
 80136d4:	bd70      	pop	{r4, r5, r6, pc}
 80136d6:	bf00      	nop

080136d8 <uxr_serialize_ACKNACK_Payload>:
 80136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136da:	460f      	mov	r7, r1
 80136dc:	460e      	mov	r6, r1
 80136de:	f837 1b02 	ldrh.w	r1, [r7], #2
 80136e2:	4605      	mov	r5, r0
 80136e4:	f7fb f96c 	bl	800e9c0 <ucdr_serialize_uint16_t>
 80136e8:	4639      	mov	r1, r7
 80136ea:	2202      	movs	r2, #2
 80136ec:	4604      	mov	r4, r0
 80136ee:	4628      	mov	r0, r5
 80136f0:	f7fa fd96 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80136f4:	7931      	ldrb	r1, [r6, #4]
 80136f6:	4004      	ands	r4, r0
 80136f8:	4628      	mov	r0, r5
 80136fa:	f7fb f935 	bl	800e968 <ucdr_serialize_uint8_t>
 80136fe:	b2e4      	uxtb	r4, r4
 8013700:	4020      	ands	r0, r4
 8013702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013704 <uxr_deserialize_ACKNACK_Payload>:
 8013704:	b570      	push	{r4, r5, r6, lr}
 8013706:	4605      	mov	r5, r0
 8013708:	460e      	mov	r6, r1
 801370a:	f7fb fa59 	bl	800ebc0 <ucdr_deserialize_uint16_t>
 801370e:	2202      	movs	r2, #2
 8013710:	1cb1      	adds	r1, r6, #2
 8013712:	4604      	mov	r4, r0
 8013714:	4628      	mov	r0, r5
 8013716:	f7fa fde7 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 801371a:	1d31      	adds	r1, r6, #4
 801371c:	4004      	ands	r4, r0
 801371e:	4628      	mov	r0, r5
 8013720:	f7fb f938 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013724:	b2e4      	uxtb	r4, r4
 8013726:	4020      	ands	r0, r4
 8013728:	bd70      	pop	{r4, r5, r6, pc}
 801372a:	bf00      	nop

0801372c <uxr_serialize_HEARTBEAT_Payload>:
 801372c:	b570      	push	{r4, r5, r6, lr}
 801372e:	460d      	mov	r5, r1
 8013730:	8809      	ldrh	r1, [r1, #0]
 8013732:	4606      	mov	r6, r0
 8013734:	f7fb f944 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8013738:	8869      	ldrh	r1, [r5, #2]
 801373a:	4604      	mov	r4, r0
 801373c:	4630      	mov	r0, r6
 801373e:	f7fb f93f 	bl	800e9c0 <ucdr_serialize_uint16_t>
 8013742:	7929      	ldrb	r1, [r5, #4]
 8013744:	4004      	ands	r4, r0
 8013746:	4630      	mov	r0, r6
 8013748:	f7fb f90e 	bl	800e968 <ucdr_serialize_uint8_t>
 801374c:	b2e4      	uxtb	r4, r4
 801374e:	4020      	ands	r0, r4
 8013750:	bd70      	pop	{r4, r5, r6, pc}
 8013752:	bf00      	nop

08013754 <uxr_deserialize_HEARTBEAT_Payload>:
 8013754:	b570      	push	{r4, r5, r6, lr}
 8013756:	4605      	mov	r5, r0
 8013758:	460e      	mov	r6, r1
 801375a:	f7fb fa31 	bl	800ebc0 <ucdr_deserialize_uint16_t>
 801375e:	1cb1      	adds	r1, r6, #2
 8013760:	4604      	mov	r4, r0
 8013762:	4628      	mov	r0, r5
 8013764:	f7fb fa2c 	bl	800ebc0 <ucdr_deserialize_uint16_t>
 8013768:	1d31      	adds	r1, r6, #4
 801376a:	4004      	ands	r4, r0
 801376c:	4628      	mov	r0, r5
 801376e:	f7fb f911 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013772:	b2e4      	uxtb	r4, r4
 8013774:	4020      	ands	r0, r4
 8013776:	bd70      	pop	{r4, r5, r6, pc}

08013778 <uxr_serialize_TIMESTAMP_Payload>:
 8013778:	b570      	push	{r4, r5, r6, lr}
 801377a:	460d      	mov	r5, r1
 801377c:	6809      	ldr	r1, [r1, #0]
 801377e:	4606      	mov	r6, r0
 8013780:	f7fb ff52 	bl	800f628 <ucdr_serialize_int32_t>
 8013784:	6869      	ldr	r1, [r5, #4]
 8013786:	4604      	mov	r4, r0
 8013788:	4630      	mov	r0, r6
 801378a:	f7fb fb07 	bl	800ed9c <ucdr_serialize_uint32_t>
 801378e:	4020      	ands	r0, r4
 8013790:	b2c0      	uxtb	r0, r0
 8013792:	bd70      	pop	{r4, r5, r6, pc}

08013794 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013798:	4605      	mov	r5, r0
 801379a:	460e      	mov	r6, r1
 801379c:	f7fb ffdc 	bl	800f758 <ucdr_deserialize_int32_t>
 80137a0:	1d31      	adds	r1, r6, #4
 80137a2:	4607      	mov	r7, r0
 80137a4:	4628      	mov	r0, r5
 80137a6:	f7fb fc29 	bl	800effc <ucdr_deserialize_uint32_t>
 80137aa:	f106 0108 	add.w	r1, r6, #8
 80137ae:	4680      	mov	r8, r0
 80137b0:	4628      	mov	r0, r5
 80137b2:	f7fb ffd1 	bl	800f758 <ucdr_deserialize_int32_t>
 80137b6:	f106 010c 	add.w	r1, r6, #12
 80137ba:	4604      	mov	r4, r0
 80137bc:	4628      	mov	r0, r5
 80137be:	f7fb fc1d 	bl	800effc <ucdr_deserialize_uint32_t>
 80137c2:	ea07 0708 	and.w	r7, r7, r8
 80137c6:	403c      	ands	r4, r7
 80137c8:	f106 0110 	add.w	r1, r6, #16
 80137cc:	4004      	ands	r4, r0
 80137ce:	4628      	mov	r0, r5
 80137d0:	f7fb ffc2 	bl	800f758 <ucdr_deserialize_int32_t>
 80137d4:	4603      	mov	r3, r0
 80137d6:	f106 0114 	add.w	r1, r6, #20
 80137da:	4628      	mov	r0, r5
 80137dc:	461d      	mov	r5, r3
 80137de:	f7fb fc0d 	bl	800effc <ucdr_deserialize_uint32_t>
 80137e2:	b2e4      	uxtb	r4, r4
 80137e4:	402c      	ands	r4, r5
 80137e6:	4020      	ands	r0, r4
 80137e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080137ec <uxr_serialize_SampleIdentity>:
 80137ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f0:	220c      	movs	r2, #12
 80137f2:	4604      	mov	r4, r0
 80137f4:	460d      	mov	r5, r1
 80137f6:	f7fa fd13 	bl	800e220 <ucdr_serialize_array_uint8_t>
 80137fa:	2203      	movs	r2, #3
 80137fc:	f105 010c 	add.w	r1, r5, #12
 8013800:	4607      	mov	r7, r0
 8013802:	4620      	mov	r0, r4
 8013804:	f7fa fd0c 	bl	800e220 <ucdr_serialize_array_uint8_t>
 8013808:	7be9      	ldrb	r1, [r5, #15]
 801380a:	4680      	mov	r8, r0
 801380c:	4620      	mov	r0, r4
 801380e:	f7fb f8ab 	bl	800e968 <ucdr_serialize_uint8_t>
 8013812:	6929      	ldr	r1, [r5, #16]
 8013814:	4606      	mov	r6, r0
 8013816:	4620      	mov	r0, r4
 8013818:	f7fb ff06 	bl	800f628 <ucdr_serialize_int32_t>
 801381c:	4603      	mov	r3, r0
 801381e:	6969      	ldr	r1, [r5, #20]
 8013820:	4620      	mov	r0, r4
 8013822:	461c      	mov	r4, r3
 8013824:	f7fb faba 	bl	800ed9c <ucdr_serialize_uint32_t>
 8013828:	ea07 0708 	and.w	r7, r7, r8
 801382c:	403e      	ands	r6, r7
 801382e:	4034      	ands	r4, r6
 8013830:	4020      	ands	r0, r4
 8013832:	b2c0      	uxtb	r0, r0
 8013834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013838 <uxr_deserialize_SampleIdentity>:
 8013838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801383c:	220c      	movs	r2, #12
 801383e:	4604      	mov	r4, r0
 8013840:	460d      	mov	r5, r1
 8013842:	f7fa fd51 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013846:	2203      	movs	r2, #3
 8013848:	f105 010c 	add.w	r1, r5, #12
 801384c:	4607      	mov	r7, r0
 801384e:	4620      	mov	r0, r4
 8013850:	f7fa fd4a 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8013854:	f105 010f 	add.w	r1, r5, #15
 8013858:	4680      	mov	r8, r0
 801385a:	4620      	mov	r0, r4
 801385c:	f7fb f89a 	bl	800e994 <ucdr_deserialize_uint8_t>
 8013860:	f105 0110 	add.w	r1, r5, #16
 8013864:	4606      	mov	r6, r0
 8013866:	4620      	mov	r0, r4
 8013868:	f7fb ff76 	bl	800f758 <ucdr_deserialize_int32_t>
 801386c:	4603      	mov	r3, r0
 801386e:	f105 0114 	add.w	r1, r5, #20
 8013872:	4620      	mov	r0, r4
 8013874:	461c      	mov	r4, r3
 8013876:	f7fb fbc1 	bl	800effc <ucdr_deserialize_uint32_t>
 801387a:	ea07 0708 	and.w	r7, r7, r8
 801387e:	403e      	ands	r6, r7
 8013880:	4034      	ands	r4, r6
 8013882:	4020      	ands	r0, r4
 8013884:	b2c0      	uxtb	r0, r0
 8013886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801388a:	bf00      	nop

0801388c <rcl_client_get_rmw_handle>:
 801388c:	b110      	cbz	r0, 8013894 <rcl_client_get_rmw_handle+0x8>
 801388e:	6800      	ldr	r0, [r0, #0]
 8013890:	b100      	cbz	r0, 8013894 <rcl_client_get_rmw_handle+0x8>
 8013892:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop

08013898 <rcl_take_response>:
 8013898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801389a:	460e      	mov	r6, r1
 801389c:	4607      	mov	r7, r0
 801389e:	b08d      	sub	sp, #52	; 0x34
 80138a0:	ad06      	add	r5, sp, #24
 80138a2:	460c      	mov	r4, r1
 80138a4:	4694      	mov	ip, r2
 80138a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80138a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80138aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80138ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80138b2:	b337      	cbz	r7, 8013902 <rcl_take_response+0x6a>
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	b323      	cbz	r3, 8013902 <rcl_take_response+0x6a>
 80138b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80138ba:	b310      	cbz	r0, 8013902 <rcl_take_response+0x6a>
 80138bc:	4662      	mov	r2, ip
 80138be:	b31a      	cbz	r2, 8013908 <rcl_take_response+0x70>
 80138c0:	2300      	movs	r3, #0
 80138c2:	2600      	movs	r6, #0
 80138c4:	2700      	movs	r7, #0
 80138c6:	f88d 3007 	strb.w	r3, [sp, #7]
 80138ca:	a902      	add	r1, sp, #8
 80138cc:	f10d 0307 	add.w	r3, sp, #7
 80138d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80138d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80138d8:	f002 ff1c 	bl	8016714 <rmw_take_response>
 80138dc:	4606      	mov	r6, r0
 80138de:	b9a8      	cbnz	r0, 801390c <rcl_take_response+0x74>
 80138e0:	f240 13f5 	movw	r3, #501	; 0x1f5
 80138e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138e8:	2a00      	cmp	r2, #0
 80138ea:	bf08      	it	eq
 80138ec:	461e      	moveq	r6, r3
 80138ee:	ad06      	add	r5, sp, #24
 80138f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80138f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80138fc:	4630      	mov	r0, r6
 80138fe:	b00d      	add	sp, #52	; 0x34
 8013900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013902:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8013906:	e7f2      	b.n	80138ee <rcl_take_response+0x56>
 8013908:	260b      	movs	r6, #11
 801390a:	e7f0      	b.n	80138ee <rcl_take_response+0x56>
 801390c:	2601      	movs	r6, #1
 801390e:	e7ee      	b.n	80138ee <rcl_take_response+0x56>

08013910 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013910:	280b      	cmp	r0, #11
 8013912:	dc0d      	bgt.n	8013930 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013914:	2800      	cmp	r0, #0
 8013916:	db09      	blt.n	801392c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013918:	280b      	cmp	r0, #11
 801391a:	d807      	bhi.n	801392c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801391c:	e8df f000 	tbb	[pc, r0]
 8013920:	07060607 	.word	0x07060607
 8013924:	06060606 	.word	0x06060606
 8013928:	07070606 	.word	0x07070606
 801392c:	2001      	movs	r0, #1
 801392e:	4770      	bx	lr
 8013930:	28cb      	cmp	r0, #203	; 0xcb
 8013932:	bf18      	it	ne
 8013934:	2001      	movne	r0, #1
 8013936:	4770      	bx	lr

08013938 <rcl_get_zero_initialized_context>:
 8013938:	b4d0      	push	{r4, r6, r7}
 801393a:	2600      	movs	r6, #0
 801393c:	2700      	movs	r7, #0
 801393e:	4604      	mov	r4, r0
 8013940:	4b04      	ldr	r3, [pc, #16]	; (8013954 <rcl_get_zero_initialized_context+0x1c>)
 8013942:	e9c3 6702 	strd	r6, r7, [r3, #8]
 8013946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801394c:	4620      	mov	r0, r4
 801394e:	bcd0      	pop	{r4, r6, r7}
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	20006780 	.word	0x20006780

08013958 <rcl_context_is_valid>:
 8013958:	b150      	cbz	r0, 8013970 <rcl_context_is_valid+0x18>
 801395a:	b508      	push	{r3, lr}
 801395c:	2105      	movs	r1, #5
 801395e:	3008      	adds	r0, #8
 8013960:	f002 f942 	bl	8015be8 <__atomic_load_8>
 8013964:	ea51 0300 	orrs.w	r3, r1, r0
 8013968:	bf14      	ite	ne
 801396a:	2001      	movne	r0, #1
 801396c:	2000      	moveq	r0, #0
 801396e:	bd08      	pop	{r3, pc}
 8013970:	4770      	bx	lr
 8013972:	bf00      	nop

08013974 <__cleanup_context>:
 8013974:	2305      	movs	r3, #5
 8013976:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801397a:	4606      	mov	r6, r0
 801397c:	b087      	sub	sp, #28
 801397e:	9300      	str	r3, [sp, #0]
 8013980:	3008      	adds	r0, #8
 8013982:	2200      	movs	r2, #0
 8013984:	2300      	movs	r3, #0
 8013986:	f002 f963 	bl	8015c50 <__atomic_store_8>
 801398a:	6830      	ldr	r0, [r6, #0]
 801398c:	2800      	cmp	r0, #0
 801398e:	d052      	beq.n	8013a36 <__cleanup_context+0xc2>
 8013990:	6947      	ldr	r7, [r0, #20]
 8013992:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013996:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801399a:	b137      	cbz	r7, 80139aa <__cleanup_context+0x36>
 801399c:	3014      	adds	r0, #20
 801399e:	f7f6 fd29 	bl	800a3f4 <rcl_init_options_fini>
 80139a2:	4607      	mov	r7, r0
 80139a4:	2800      	cmp	r0, #0
 80139a6:	d148      	bne.n	8013a3a <__cleanup_context+0xc6>
 80139a8:	6830      	ldr	r0, [r6, #0]
 80139aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80139ac:	b143      	cbz	r3, 80139c0 <__cleanup_context+0x4c>
 80139ae:	3028      	adds	r0, #40	; 0x28
 80139b0:	f7f8 fadc 	bl	800bf6c <rmw_context_fini>
 80139b4:	b118      	cbz	r0, 80139be <__cleanup_context+0x4a>
 80139b6:	2f00      	cmp	r7, #0
 80139b8:	d042      	beq.n	8013a40 <__cleanup_context+0xcc>
 80139ba:	f7f7 fe79 	bl	800b6b0 <rcutils_reset_error>
 80139be:	6830      	ldr	r0, [r6, #0]
 80139c0:	6a01      	ldr	r1, [r0, #32]
 80139c2:	b1d9      	cbz	r1, 80139fc <__cleanup_context+0x88>
 80139c4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80139c8:	2a01      	cmp	r2, #1
 80139ca:	f173 0000 	sbcs.w	r0, r3, #0
 80139ce:	db11      	blt.n	80139f4 <__cleanup_context+0x80>
 80139d0:	2400      	movs	r4, #0
 80139d2:	2500      	movs	r5, #0
 80139d4:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80139d8:	b308      	cbz	r0, 8013a1e <__cleanup_context+0xaa>
 80139da:	4649      	mov	r1, r9
 80139dc:	47c0      	blx	r8
 80139de:	6831      	ldr	r1, [r6, #0]
 80139e0:	3401      	adds	r4, #1
 80139e2:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80139e6:	f145 0500 	adc.w	r5, r5, #0
 80139ea:	4294      	cmp	r4, r2
 80139ec:	eb75 0003 	sbcs.w	r0, r5, r3
 80139f0:	6a09      	ldr	r1, [r1, #32]
 80139f2:	dbef      	blt.n	80139d4 <__cleanup_context+0x60>
 80139f4:	4608      	mov	r0, r1
 80139f6:	4649      	mov	r1, r9
 80139f8:	47c0      	blx	r8
 80139fa:	6830      	ldr	r0, [r6, #0]
 80139fc:	4649      	mov	r1, r9
 80139fe:	47c0      	blx	r8
 8013a00:	2000      	movs	r0, #0
 8013a02:	2100      	movs	r1, #0
 8013a04:	4b10      	ldr	r3, [pc, #64]	; (8013a48 <__cleanup_context+0xd4>)
 8013a06:	ac02      	add	r4, sp, #8
 8013a08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013a12:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8013a16:	4638      	mov	r0, r7
 8013a18:	b007      	add	sp, #28
 8013a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a1e:	3401      	adds	r4, #1
 8013a20:	f145 0500 	adc.w	r5, r5, #0
 8013a24:	4294      	cmp	r4, r2
 8013a26:	eb75 0003 	sbcs.w	r0, r5, r3
 8013a2a:	dbd3      	blt.n	80139d4 <__cleanup_context+0x60>
 8013a2c:	4608      	mov	r0, r1
 8013a2e:	4649      	mov	r1, r9
 8013a30:	47c0      	blx	r8
 8013a32:	6830      	ldr	r0, [r6, #0]
 8013a34:	e7e2      	b.n	80139fc <__cleanup_context+0x88>
 8013a36:	4607      	mov	r7, r0
 8013a38:	e7e2      	b.n	8013a00 <__cleanup_context+0x8c>
 8013a3a:	f7f7 fe39 	bl	800b6b0 <rcutils_reset_error>
 8013a3e:	e7b3      	b.n	80139a8 <__cleanup_context+0x34>
 8013a40:	f7ff ff66 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 8013a44:	4607      	mov	r7, r0
 8013a46:	e7b8      	b.n	80139ba <__cleanup_context+0x46>
 8013a48:	20006780 	.word	0x20006780

08013a4c <rcl_expand_topic_name>:
 8013a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a50:	b08b      	sub	sp, #44	; 0x2c
 8013a52:	9306      	str	r3, [sp, #24]
 8013a54:	2800      	cmp	r0, #0
 8013a56:	f000 80d6 	beq.w	8013c06 <rcl_expand_topic_name+0x1ba>
 8013a5a:	460e      	mov	r6, r1
 8013a5c:	2900      	cmp	r1, #0
 8013a5e:	f000 80d2 	beq.w	8013c06 <rcl_expand_topic_name+0x1ba>
 8013a62:	4617      	mov	r7, r2
 8013a64:	2a00      	cmp	r2, #0
 8013a66:	f000 80ce 	beq.w	8013c06 <rcl_expand_topic_name+0x1ba>
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f000 80cb 	beq.w	8013c06 <rcl_expand_topic_name+0x1ba>
 8013a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f000 80c7 	beq.w	8013c06 <rcl_expand_topic_name+0x1ba>
 8013a78:	2200      	movs	r2, #0
 8013a7a:	a909      	add	r1, sp, #36	; 0x24
 8013a7c:	4680      	mov	r8, r0
 8013a7e:	f001 f9cf 	bl	8014e20 <rcl_validate_topic_name>
 8013a82:	4604      	mov	r4, r0
 8013a84:	2800      	cmp	r0, #0
 8013a86:	f040 80ba 	bne.w	8013bfe <rcl_expand_topic_name+0x1b2>
 8013a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	f040 80c3 	bne.w	8013c18 <rcl_expand_topic_name+0x1cc>
 8013a92:	4602      	mov	r2, r0
 8013a94:	a909      	add	r1, sp, #36	; 0x24
 8013a96:	4630      	mov	r0, r6
 8013a98:	f002 fb5c 	bl	8016154 <rmw_validate_node_name>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	f040 80b7 	bne.w	8013c10 <rcl_expand_topic_name+0x1c4>
 8013aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013aa4:	2a00      	cmp	r2, #0
 8013aa6:	f040 80bc 	bne.w	8013c22 <rcl_expand_topic_name+0x1d6>
 8013aaa:	4638      	mov	r0, r7
 8013aac:	a909      	add	r1, sp, #36	; 0x24
 8013aae:	f002 fb33 	bl	8016118 <rmw_validate_namespace>
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	f040 80ac 	bne.w	8013c10 <rcl_expand_topic_name+0x1c4>
 8013ab8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8013aba:	2c00      	cmp	r4, #0
 8013abc:	f040 80f4 	bne.w	8013ca8 <rcl_expand_topic_name+0x25c>
 8013ac0:	217b      	movs	r1, #123	; 0x7b
 8013ac2:	4640      	mov	r0, r8
 8013ac4:	f004 fb68 	bl	8018198 <strchr>
 8013ac8:	f898 3000 	ldrb.w	r3, [r8]
 8013acc:	4683      	mov	fp, r0
 8013ace:	2b2f      	cmp	r3, #47	; 0x2f
 8013ad0:	f000 80a9 	beq.w	8013c26 <rcl_expand_topic_name+0x1da>
 8013ad4:	2b7e      	cmp	r3, #126	; 0x7e
 8013ad6:	f040 80ad 	bne.w	8013c34 <rcl_expand_topic_name+0x1e8>
 8013ada:	4638      	mov	r0, r7
 8013adc:	f7ec fbb2 	bl	8000244 <strlen>
 8013ae0:	4681      	mov	r9, r0
 8013ae2:	f8df e228 	ldr.w	lr, [pc, #552]	; 8013d0c <rcl_expand_topic_name+0x2c0>
 8013ae6:	f8df c228 	ldr.w	ip, [pc, #552]	; 8013d10 <rcl_expand_topic_name+0x2c4>
 8013aea:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013aec:	f1b9 0f01 	cmp.w	r9, #1
 8013af0:	bf18      	it	ne
 8013af2:	46f4      	movne	ip, lr
 8013af4:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8013af8:	ab14      	add	r3, sp, #80	; 0x50
 8013afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013afc:	e9cd c702 	strd	ip, r7, [sp, #8]
 8013b00:	f108 0c01 	add.w	ip, r8, #1
 8013b04:	9500      	str	r5, [sp, #0]
 8013b06:	9604      	str	r6, [sp, #16]
 8013b08:	f8cd e004 	str.w	lr, [sp, #4]
 8013b0c:	f8cd c014 	str.w	ip, [sp, #20]
 8013b10:	f002 f954 	bl	8015dbc <rcutils_format_string_limit>
 8013b14:	4605      	mov	r5, r0
 8013b16:	2800      	cmp	r0, #0
 8013b18:	f000 80c8 	beq.w	8013cac <rcl_expand_topic_name+0x260>
 8013b1c:	465b      	mov	r3, fp
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	f000 80a4 	beq.w	8013c6c <rcl_expand_topic_name+0x220>
 8013b24:	217b      	movs	r1, #123	; 0x7b
 8013b26:	f004 fb37 	bl	8018198 <strchr>
 8013b2a:	46a9      	mov	r9, r5
 8013b2c:	4683      	mov	fp, r0
 8013b2e:	46aa      	mov	sl, r5
 8013b30:	9407      	str	r4, [sp, #28]
 8013b32:	465d      	mov	r5, fp
 8013b34:	464c      	mov	r4, r9
 8013b36:	2d00      	cmp	r5, #0
 8013b38:	f000 80bd 	beq.w	8013cb6 <rcl_expand_topic_name+0x26a>
 8013b3c:	217d      	movs	r1, #125	; 0x7d
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f004 fb2a 	bl	8018198 <strchr>
 8013b44:	eba0 0905 	sub.w	r9, r0, r5
 8013b48:	f109 0b01 	add.w	fp, r9, #1
 8013b4c:	465a      	mov	r2, fp
 8013b4e:	4629      	mov	r1, r5
 8013b50:	4869      	ldr	r0, [pc, #420]	; (8013cf8 <rcl_expand_topic_name+0x2ac>)
 8013b52:	f004 fb36 	bl	80181c2 <strncmp>
 8013b56:	2800      	cmp	r0, #0
 8013b58:	d06a      	beq.n	8013c30 <rcl_expand_topic_name+0x1e4>
 8013b5a:	465a      	mov	r2, fp
 8013b5c:	4629      	mov	r1, r5
 8013b5e:	4867      	ldr	r0, [pc, #412]	; (8013cfc <rcl_expand_topic_name+0x2b0>)
 8013b60:	f004 fb2f 	bl	80181c2 <strncmp>
 8013b64:	b128      	cbz	r0, 8013b72 <rcl_expand_topic_name+0x126>
 8013b66:	465a      	mov	r2, fp
 8013b68:	4629      	mov	r1, r5
 8013b6a:	4865      	ldr	r0, [pc, #404]	; (8013d00 <rcl_expand_topic_name+0x2b4>)
 8013b6c:	f004 fb29 	bl	80181c2 <strncmp>
 8013b70:	bb38      	cbnz	r0, 8013bc2 <rcl_expand_topic_name+0x176>
 8013b72:	46b9      	mov	r9, r7
 8013b74:	ab16      	add	r3, sp, #88	; 0x58
 8013b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013b7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013b7e:	ab14      	add	r3, sp, #80	; 0x50
 8013b80:	4628      	mov	r0, r5
 8013b82:	cb0c      	ldmia	r3, {r2, r3}
 8013b84:	4659      	mov	r1, fp
 8013b86:	f002 fa55 	bl	8016034 <rcutils_strndup>
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	f000 809c 	beq.w	8013cca <rcl_expand_topic_name+0x27e>
 8013b92:	464a      	mov	r2, r9
 8013b94:	4620      	mov	r0, r4
 8013b96:	4629      	mov	r1, r5
 8013b98:	ab14      	add	r3, sp, #80	; 0x50
 8013b9a:	f002 f961 	bl	8015e60 <rcutils_repl_str>
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ba6:	4798      	blx	r3
 8013ba8:	4650      	mov	r0, sl
 8013baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bae:	4798      	blx	r3
 8013bb0:	2c00      	cmp	r4, #0
 8013bb2:	d07b      	beq.n	8013cac <rcl_expand_topic_name+0x260>
 8013bb4:	217b      	movs	r1, #123	; 0x7b
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f004 faee 	bl	8018198 <strchr>
 8013bbc:	46a2      	mov	sl, r4
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	e7b9      	b.n	8013b36 <rcl_expand_topic_name+0xea>
 8013bc2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8013bc6:	9806      	ldr	r0, [sp, #24]
 8013bc8:	1c69      	adds	r1, r5, #1
 8013bca:	f7f7 fe83 	bl	800b8d4 <rcutils_string_map_getn>
 8013bce:	4681      	mov	r9, r0
 8013bd0:	2800      	cmp	r0, #0
 8013bd2:	d1cf      	bne.n	8013b74 <rcl_expand_topic_name+0x128>
 8013bd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013bd6:	ab16      	add	r3, sp, #88	; 0x58
 8013bd8:	6010      	str	r0, [r2, #0]
 8013bda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013bde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013be2:	ab14      	add	r3, sp, #80	; 0x50
 8013be4:	cb0c      	ldmia	r3, {r2, r3}
 8013be6:	4659      	mov	r1, fp
 8013be8:	4628      	mov	r0, r5
 8013bea:	f002 fa23 	bl	8016034 <rcutils_strndup>
 8013bee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bf0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bf2:	4798      	blx	r3
 8013bf4:	4650      	mov	r0, sl
 8013bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bf8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bfa:	4798      	blx	r3
 8013bfc:	2469      	movs	r4, #105	; 0x69
 8013bfe:	4620      	mov	r0, r4
 8013c00:	b00b      	add	sp, #44	; 0x2c
 8013c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c06:	240b      	movs	r4, #11
 8013c08:	4620      	mov	r0, r4
 8013c0a:	b00b      	add	sp, #44	; 0x2c
 8013c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c10:	f7ff fe7e 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 8013c14:	4604      	mov	r4, r0
 8013c16:	e7f2      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013c18:	2467      	movs	r4, #103	; 0x67
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	b00b      	add	sp, #44	; 0x2c
 8013c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c22:	24c9      	movs	r4, #201	; 0xc9
 8013c24:	e7eb      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013c26:	2800      	cmp	r0, #0
 8013c28:	d057      	beq.n	8013cda <rcl_expand_topic_name+0x28e>
 8013c2a:	46c1      	mov	r9, r8
 8013c2c:	4625      	mov	r5, r4
 8013c2e:	e77e      	b.n	8013b2e <rcl_expand_topic_name+0xe2>
 8013c30:	46b1      	mov	r9, r6
 8013c32:	e79f      	b.n	8013b74 <rcl_expand_topic_name+0x128>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d1f8      	bne.n	8013c2a <rcl_expand_topic_name+0x1de>
 8013c38:	4638      	mov	r0, r7
 8013c3a:	f7ec fb03 	bl	8000244 <strlen>
 8013c3e:	4a31      	ldr	r2, [pc, #196]	; (8013d04 <rcl_expand_topic_name+0x2b8>)
 8013c40:	4b31      	ldr	r3, [pc, #196]	; (8013d08 <rcl_expand_topic_name+0x2bc>)
 8013c42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013c46:	2801      	cmp	r0, #1
 8013c48:	bf18      	it	ne
 8013c4a:	4613      	movne	r3, r2
 8013c4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c4e:	e9cd 3702 	strd	r3, r7, [sp, #8]
 8013c52:	e9cd 2100 	strd	r2, r1, [sp]
 8013c56:	f8cd 8010 	str.w	r8, [sp, #16]
 8013c5a:	ab14      	add	r3, sp, #80	; 0x50
 8013c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013c5e:	f002 f8ad 	bl	8015dbc <rcutils_format_string_limit>
 8013c62:	4605      	mov	r5, r0
 8013c64:	b315      	cbz	r5, 8013cac <rcl_expand_topic_name+0x260>
 8013c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013c68:	601d      	str	r5, [r3, #0]
 8013c6a:	e7c8      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013c6c:	782b      	ldrb	r3, [r5, #0]
 8013c6e:	2b2f      	cmp	r3, #47	; 0x2f
 8013c70:	d0f9      	beq.n	8013c66 <rcl_expand_topic_name+0x21a>
 8013c72:	4638      	mov	r0, r7
 8013c74:	f7ec fae6 	bl	8000244 <strlen>
 8013c78:	4a22      	ldr	r2, [pc, #136]	; (8013d04 <rcl_expand_topic_name+0x2b8>)
 8013c7a:	4b23      	ldr	r3, [pc, #140]	; (8013d08 <rcl_expand_topic_name+0x2bc>)
 8013c7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013c80:	2801      	cmp	r0, #1
 8013c82:	bf18      	it	ne
 8013c84:	4613      	movne	r3, r2
 8013c86:	e9cd 7503 	strd	r7, r5, [sp, #12]
 8013c8a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013c8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013c90:	ab14      	add	r3, sp, #80	; 0x50
 8013c92:	9200      	str	r2, [sp, #0]
 8013c94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013c96:	f002 f891 	bl	8015dbc <rcutils_format_string_limit>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c9e:	4628      	mov	r0, r5
 8013ca0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ca2:	461d      	mov	r5, r3
 8013ca4:	4790      	blx	r2
 8013ca6:	e7dd      	b.n	8013c64 <rcl_expand_topic_name+0x218>
 8013ca8:	24ca      	movs	r4, #202	; 0xca
 8013caa:	e7a8      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013cac:	2300      	movs	r3, #0
 8013cae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013cb0:	240a      	movs	r4, #10
 8013cb2:	6013      	str	r3, [r2, #0]
 8013cb4:	e7a3      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013cb6:	4653      	mov	r3, sl
 8013cb8:	4655      	mov	r5, sl
 8013cba:	9c07      	ldr	r4, [sp, #28]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d1d5      	bne.n	8013c6c <rcl_expand_topic_name+0x220>
 8013cc0:	f898 3000 	ldrb.w	r3, [r8]
 8013cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8013cc6:	d0ce      	beq.n	8013c66 <rcl_expand_topic_name+0x21a>
 8013cc8:	e7b6      	b.n	8013c38 <rcl_expand_topic_name+0x1ec>
 8013cca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ccc:	4650      	mov	r0, sl
 8013cce:	601d      	str	r5, [r3, #0]
 8013cd0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013cd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013cd4:	4798      	blx	r3
 8013cd6:	240a      	movs	r4, #10
 8013cd8:	e791      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013cda:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8013cde:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013ce2:	ab14      	add	r3, sp, #80	; 0x50
 8013ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013ce6:	4640      	mov	r0, r8
 8013ce8:	f002 f982 	bl	8015ff0 <rcutils_strdup>
 8013cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013cee:	2800      	cmp	r0, #0
 8013cf0:	bf08      	it	eq
 8013cf2:	240a      	moveq	r4, #10
 8013cf4:	6018      	str	r0, [r3, #0]
 8013cf6:	e782      	b.n	8013bfe <rcl_expand_topic_name+0x1b2>
 8013cf8:	0801a98c 	.word	0x0801a98c
 8013cfc:	0801a994 	.word	0x0801a994
 8013d00:	0801a99c 	.word	0x0801a99c
 8013d04:	0801a644 	.word	0x0801a644
 8013d08:	0801a68c 	.word	0x0801a68c
 8013d0c:	0801a984 	.word	0x0801a984
 8013d10:	0801a67c 	.word	0x0801a67c

08013d14 <rcl_get_default_topic_name_substitutions>:
 8013d14:	2800      	cmp	r0, #0
 8013d16:	bf0c      	ite	eq
 8013d18:	200b      	moveq	r0, #11
 8013d1a:	2000      	movne	r0, #0
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop

08013d20 <rcl_init>:
 8013d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d24:	1e07      	subs	r7, r0, #0
 8013d26:	4688      	mov	r8, r1
 8013d28:	4692      	mov	sl, r2
 8013d2a:	4699      	mov	r9, r3
 8013d2c:	b09f      	sub	sp, #124	; 0x7c
 8013d2e:	f340 8096 	ble.w	8013e5e <rcl_init+0x13e>
 8013d32:	2900      	cmp	r1, #0
 8013d34:	f000 8096 	beq.w	8013e64 <rcl_init+0x144>
 8013d38:	2400      	movs	r4, #0
 8013d3a:	1f0d      	subs	r5, r1, #4
 8013d3c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8013d40:	3401      	adds	r4, #1
 8013d42:	2e00      	cmp	r6, #0
 8013d44:	f000 808e 	beq.w	8013e64 <rcl_init+0x144>
 8013d48:	42a7      	cmp	r7, r4
 8013d4a:	d1f7      	bne.n	8013d3c <rcl_init+0x1c>
 8013d4c:	f1ba 0f00 	cmp.w	sl, #0
 8013d50:	f000 8088 	beq.w	8013e64 <rcl_init+0x144>
 8013d54:	f8da 4000 	ldr.w	r4, [sl]
 8013d58:	2c00      	cmp	r4, #0
 8013d5a:	f000 8083 	beq.w	8013e64 <rcl_init+0x144>
 8013d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d60:	ad19      	add	r5, sp, #100	; 0x64
 8013d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013d64:	6823      	ldr	r3, [r4, #0]
 8013d66:	a819      	add	r0, sp, #100	; 0x64
 8013d68:	602b      	str	r3, [r5, #0]
 8013d6a:	f7f7 fbb1 	bl	800b4d0 <rcutils_allocator_is_valid>
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	d078      	beq.n	8013e64 <rcl_init+0x144>
 8013d72:	f1b9 0f00 	cmp.w	r9, #0
 8013d76:	d075      	beq.n	8013e64 <rcl_init+0x144>
 8013d78:	f8d9 3000 	ldr.w	r3, [r9]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d176      	bne.n	8013e6e <rcl_init+0x14e>
 8013d80:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8013d84:	2178      	movs	r1, #120	; 0x78
 8013d86:	2001      	movs	r0, #1
 8013d88:	4798      	blx	r3
 8013d8a:	4604      	mov	r4, r0
 8013d8c:	f8c9 0000 	str.w	r0, [r9]
 8013d90:	2800      	cmp	r0, #0
 8013d92:	f000 80c6 	beq.w	8013f22 <rcl_init+0x202>
 8013d96:	a802      	add	r0, sp, #8
 8013d98:	f002 f968 	bl	801606c <rmw_get_zero_initialized_context>
 8013d9c:	2250      	movs	r2, #80	; 0x50
 8013d9e:	a902      	add	r1, sp, #8
 8013da0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013da4:	f004 f822 	bl	8017dec <memcpy>
 8013da8:	f8d9 6000 	ldr.w	r6, [r9]
 8013dac:	ac19      	add	r4, sp, #100	; 0x64
 8013dae:	4635      	mov	r5, r6
 8013db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013db4:	6823      	ldr	r3, [r4, #0]
 8013db6:	f106 0114 	add.w	r1, r6, #20
 8013dba:	4650      	mov	r0, sl
 8013dbc:	602b      	str	r3, [r5, #0]
 8013dbe:	f7f6 fb3d 	bl	800a43c <rcl_init_options_copy>
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d143      	bne.n	8013e50 <rcl_init+0x130>
 8013dc8:	463c      	mov	r4, r7
 8013dca:	f8d9 a000 	ldr.w	sl, [r9]
 8013dce:	17fd      	asrs	r5, r7, #31
 8013dd0:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8013dd4:	f8ca 0020 	str.w	r0, [sl, #32]
 8013dd8:	2f00      	cmp	r7, #0
 8013dda:	d04d      	beq.n	8013e78 <rcl_init+0x158>
 8013ddc:	f1b8 0f00 	cmp.w	r8, #0
 8013de0:	d04a      	beq.n	8013e78 <rcl_init+0x158>
 8013de2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8013de6:	4638      	mov	r0, r7
 8013de8:	2104      	movs	r1, #4
 8013dea:	4798      	blx	r3
 8013dec:	f8d9 b000 	ldr.w	fp, [r9]
 8013df0:	f8ca 0020 	str.w	r0, [sl, #32]
 8013df4:	f8db 3020 	ldr.w	r3, [fp, #32]
 8013df8:	b34b      	cbz	r3, 8013e4e <rcl_init+0x12e>
 8013dfa:	2f01      	cmp	r7, #1
 8013dfc:	f175 0300 	sbcs.w	r3, r5, #0
 8013e00:	db3a      	blt.n	8013e78 <rcl_init+0x158>
 8013e02:	2600      	movs	r6, #0
 8013e04:	2700      	movs	r7, #0
 8013e06:	f1a8 0804 	sub.w	r8, r8, #4
 8013e0a:	e00d      	b.n	8013e28 <rcl_init+0x108>
 8013e0c:	4652      	mov	r2, sl
 8013e0e:	f8d8 1000 	ldr.w	r1, [r8]
 8013e12:	f003 ffeb 	bl	8017dec <memcpy>
 8013e16:	3601      	adds	r6, #1
 8013e18:	f147 0700 	adc.w	r7, r7, #0
 8013e1c:	42bd      	cmp	r5, r7
 8013e1e:	bf08      	it	eq
 8013e20:	42b4      	cmpeq	r4, r6
 8013e22:	d029      	beq.n	8013e78 <rcl_init+0x158>
 8013e24:	f8d9 b000 	ldr.w	fp, [r9]
 8013e28:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8013e2c:	f7ec fa0a 	bl	8000244 <strlen>
 8013e30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013e32:	991d      	ldr	r1, [sp, #116]	; 0x74
 8013e34:	f8db b020 	ldr.w	fp, [fp, #32]
 8013e38:	4682      	mov	sl, r0
 8013e3a:	4798      	blx	r3
 8013e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8013e40:	00b3      	lsls	r3, r6, #2
 8013e42:	6a12      	ldr	r2, [r2, #32]
 8013e44:	f84b 0003 	str.w	r0, [fp, r3]
 8013e48:	58d0      	ldr	r0, [r2, r3]
 8013e4a:	2800      	cmp	r0, #0
 8013e4c:	d1de      	bne.n	8013e0c <rcl_init+0xec>
 8013e4e:	260a      	movs	r6, #10
 8013e50:	4648      	mov	r0, r9
 8013e52:	f7ff fd8f 	bl	8013974 <__cleanup_context>
 8013e56:	4630      	mov	r0, r6
 8013e58:	b01f      	add	sp, #124	; 0x7c
 8013e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5e:	2900      	cmp	r1, #0
 8013e60:	f43f af74 	beq.w	8013d4c <rcl_init+0x2c>
 8013e64:	260b      	movs	r6, #11
 8013e66:	4630      	mov	r0, r6
 8013e68:	b01f      	add	sp, #124	; 0x7c
 8013e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6e:	2664      	movs	r6, #100	; 0x64
 8013e70:	4630      	mov	r0, r6
 8013e72:	b01f      	add	sp, #124	; 0x7c
 8013e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e78:	2605      	movs	r6, #5
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	4832      	ldr	r0, [pc, #200]	; (8013f48 <rcl_init+0x228>)
 8013e80:	9600      	str	r6, [sp, #0]
 8013e82:	f001 ff51 	bl	8015d28 <__atomic_fetch_add_8>
 8013e86:	4604      	mov	r4, r0
 8013e88:	460d      	mov	r5, r1
 8013e8a:	ea54 0305 	orrs.w	r3, r4, r5
 8013e8e:	d03e      	beq.n	8013f0e <rcl_init+0x1ee>
 8013e90:	4602      	mov	r2, r0
 8013e92:	460b      	mov	r3, r1
 8013e94:	9600      	str	r6, [sp, #0]
 8013e96:	f109 0008 	add.w	r0, r9, #8
 8013e9a:	f001 fed9 	bl	8015c50 <__atomic_store_8>
 8013e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8013ea2:	695f      	ldr	r7, [r3, #20]
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	d03d      	beq.n	8013f2a <rcl_init+0x20a>
 8013eae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013eb2:	b94b      	cbnz	r3, 8013ec8 <rcl_init+0x1a8>
 8013eb4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8013eb8:	f000 f848 	bl	8013f4c <rcl_get_localhost_only>
 8013ebc:	4606      	mov	r6, r0
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	d1c6      	bne.n	8013e50 <rcl_init+0x130>
 8013ec2:	f8d9 3000 	ldr.w	r3, [r9]
 8013ec6:	695f      	ldr	r7, [r3, #20]
 8013ec8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013eca:	aa18      	add	r2, sp, #96	; 0x60
 8013ecc:	a917      	add	r1, sp, #92	; 0x5c
 8013ece:	f000 ff95 	bl	8014dfc <rcl_validate_enclave_name>
 8013ed2:	4606      	mov	r6, r0
 8013ed4:	2800      	cmp	r0, #0
 8013ed6:	d1bb      	bne.n	8013e50 <rcl_init+0x130>
 8013ed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013eda:	bb23      	cbnz	r3, 8013f26 <rcl_init+0x206>
 8013edc:	f8d9 1000 	ldr.w	r1, [r9]
 8013ee0:	694b      	ldr	r3, [r1, #20]
 8013ee2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013ee4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013ee8:	f000 fad6 	bl	8014498 <rcl_get_security_options_from_environment>
 8013eec:	4606      	mov	r6, r0
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	d1ae      	bne.n	8013e50 <rcl_init+0x130>
 8013ef2:	f8d9 1000 	ldr.w	r1, [r9]
 8013ef6:	6948      	ldr	r0, [r1, #20]
 8013ef8:	3128      	adds	r1, #40	; 0x28
 8013efa:	3018      	adds	r0, #24
 8013efc:	f7f7 ff10 	bl	800bd20 <rmw_init>
 8013f00:	4606      	mov	r6, r0
 8013f02:	2800      	cmp	r0, #0
 8013f04:	d0af      	beq.n	8013e66 <rcl_init+0x146>
 8013f06:	f7ff fd03 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	e7a0      	b.n	8013e50 <rcl_init+0x130>
 8013f0e:	9600      	str	r6, [sp, #0]
 8013f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f18:	480b      	ldr	r0, [pc, #44]	; (8013f48 <rcl_init+0x228>)
 8013f1a:	f001 fe99 	bl	8015c50 <__atomic_store_8>
 8013f1e:	2601      	movs	r6, #1
 8013f20:	e796      	b.n	8013e50 <rcl_init+0x130>
 8013f22:	260a      	movs	r6, #10
 8013f24:	e79f      	b.n	8013e66 <rcl_init+0x146>
 8013f26:	2601      	movs	r6, #1
 8013f28:	e792      	b.n	8013e50 <rcl_init+0x130>
 8013f2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013f2e:	f003 fcdb 	bl	80178e8 <rcl_get_default_domain_id>
 8013f32:	4606      	mov	r6, r0
 8013f34:	2800      	cmp	r0, #0
 8013f36:	d18b      	bne.n	8013e50 <rcl_init+0x130>
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	f8d9 3000 	ldr.w	r3, [r9]
 8013f40:	bf08      	it	eq
 8013f42:	6278      	streq	r0, [r7, #36]	; 0x24
 8013f44:	695f      	ldr	r7, [r3, #20]
 8013f46:	e7b2      	b.n	8013eae <rcl_init+0x18e>
 8013f48:	20000210 	.word	0x20000210

08013f4c <rcl_get_localhost_only>:
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	b510      	push	{r4, lr}
 8013f50:	b082      	sub	sp, #8
 8013f52:	9301      	str	r3, [sp, #4]
 8013f54:	b1b8      	cbz	r0, 8013f86 <rcl_get_localhost_only+0x3a>
 8013f56:	4604      	mov	r4, r0
 8013f58:	a901      	add	r1, sp, #4
 8013f5a:	480c      	ldr	r0, [pc, #48]	; (8013f8c <rcl_get_localhost_only+0x40>)
 8013f5c:	f001 ff68 	bl	8015e30 <rcutils_get_env>
 8013f60:	b110      	cbz	r0, 8013f68 <rcl_get_localhost_only+0x1c>
 8013f62:	2001      	movs	r0, #1
 8013f64:	b002      	add	sp, #8
 8013f66:	bd10      	pop	{r4, pc}
 8013f68:	9b01      	ldr	r3, [sp, #4]
 8013f6a:	b113      	cbz	r3, 8013f72 <rcl_get_localhost_only+0x26>
 8013f6c:	781a      	ldrb	r2, [r3, #0]
 8013f6e:	2a31      	cmp	r2, #49	; 0x31
 8013f70:	d004      	beq.n	8013f7c <rcl_get_localhost_only+0x30>
 8013f72:	2302      	movs	r3, #2
 8013f74:	2000      	movs	r0, #0
 8013f76:	7023      	strb	r3, [r4, #0]
 8013f78:	b002      	add	sp, #8
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	785b      	ldrb	r3, [r3, #1]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d1f7      	bne.n	8013f72 <rcl_get_localhost_only+0x26>
 8013f82:	2301      	movs	r3, #1
 8013f84:	e7f6      	b.n	8013f74 <rcl_get_localhost_only+0x28>
 8013f86:	200b      	movs	r0, #11
 8013f88:	b002      	add	sp, #8
 8013f8a:	bd10      	pop	{r4, pc}
 8013f8c:	0801a9a8 	.word	0x0801a9a8

08013f90 <rcl_get_zero_initialized_node>:
 8013f90:	4603      	mov	r3, r0
 8013f92:	4a03      	ldr	r2, [pc, #12]	; (8013fa0 <rcl_get_zero_initialized_node+0x10>)
 8013f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f98:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	4770      	bx	lr
 8013fa0:	0801a9c4 	.word	0x0801a9c4

08013fa4 <rcl_node_init>:
 8013fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa8:	2700      	movs	r7, #0
 8013faa:	b09b      	sub	sp, #108	; 0x6c
 8013fac:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8013fb0:	4604      	mov	r4, r0
 8013fb2:	a815      	add	r0, sp, #84	; 0x54
 8013fb4:	460e      	mov	r6, r1
 8013fb6:	4615      	mov	r5, r2
 8013fb8:	4698      	mov	r8, r3
 8013fba:	9713      	str	r7, [sp, #76]	; 0x4c
 8013fbc:	f003 fda2 	bl	8017b04 <rcl_guard_condition_get_default_options>
 8013fc0:	f1b9 0f00 	cmp.w	r9, #0
 8013fc4:	f000 80fa 	beq.w	80141bc <rcl_node_init+0x218>
 8013fc8:	f109 0a04 	add.w	sl, r9, #4
 8013fcc:	4650      	mov	r0, sl
 8013fce:	f7f7 fa7f 	bl	800b4d0 <rcutils_allocator_is_valid>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	f000 80f2 	beq.w	80141bc <rcl_node_init+0x218>
 8013fd8:	2e00      	cmp	r6, #0
 8013fda:	f000 80ef 	beq.w	80141bc <rcl_node_init+0x218>
 8013fde:	2d00      	cmp	r5, #0
 8013fe0:	f000 80ec 	beq.w	80141bc <rcl_node_init+0x218>
 8013fe4:	2c00      	cmp	r4, #0
 8013fe6:	f000 80e9 	beq.w	80141bc <rcl_node_init+0x218>
 8013fea:	6867      	ldr	r7, [r4, #4]
 8013fec:	2f00      	cmp	r7, #0
 8013fee:	f040 810f 	bne.w	8014210 <rcl_node_init+0x26c>
 8013ff2:	f1b8 0f00 	cmp.w	r8, #0
 8013ff6:	f000 80e1 	beq.w	80141bc <rcl_node_init+0x218>
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	f7ff fcac 	bl	8013958 <rcl_context_is_valid>
 8014000:	4683      	mov	fp, r0
 8014002:	2800      	cmp	r0, #0
 8014004:	f000 80df 	beq.w	80141c6 <rcl_node_init+0x222>
 8014008:	463a      	mov	r2, r7
 801400a:	4630      	mov	r0, r6
 801400c:	a914      	add	r1, sp, #80	; 0x50
 801400e:	9714      	str	r7, [sp, #80]	; 0x50
 8014010:	f002 f8a0 	bl	8016154 <rmw_validate_node_name>
 8014014:	4607      	mov	r7, r0
 8014016:	2800      	cmp	r0, #0
 8014018:	f040 80d1 	bne.w	80141be <rcl_node_init+0x21a>
 801401c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801401e:	2800      	cmp	r0, #0
 8014020:	f040 8100 	bne.w	8014224 <rcl_node_init+0x280>
 8014024:	4628      	mov	r0, r5
 8014026:	f7ec f90d 	bl	8000244 <strlen>
 801402a:	2800      	cmp	r0, #0
 801402c:	f040 80cd 	bne.w	80141ca <rcl_node_init+0x226>
 8014030:	4d8d      	ldr	r5, [pc, #564]	; (8014268 <rcl_node_init+0x2c4>)
 8014032:	2200      	movs	r2, #0
 8014034:	4628      	mov	r0, r5
 8014036:	a914      	add	r1, sp, #80	; 0x50
 8014038:	f002 f86e 	bl	8016118 <rmw_validate_namespace>
 801403c:	4607      	mov	r7, r0
 801403e:	2800      	cmp	r0, #0
 8014040:	f040 80bd 	bne.w	80141be <rcl_node_init+0x21a>
 8014044:	4683      	mov	fp, r0
 8014046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014048:	2b00      	cmp	r3, #0
 801404a:	f040 80ef 	bne.w	801422c <rcl_node_init+0x288>
 801404e:	2030      	movs	r0, #48	; 0x30
 8014050:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8014054:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8014058:	9307      	str	r3, [sp, #28]
 801405a:	4790      	blx	r2
 801405c:	4607      	mov	r7, r0
 801405e:	6060      	str	r0, [r4, #4]
 8014060:	2800      	cmp	r0, #0
 8014062:	f000 80da 	beq.w	801421a <rcl_node_init+0x276>
 8014066:	9b07      	ldr	r3, [sp, #28]
 8014068:	e9c0 3308 	strd	r3, r3, [r0, #32]
 801406c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8014070:	a80a      	add	r0, sp, #40	; 0x28
 8014072:	f000 f929 	bl	80142c8 <rcl_node_get_default_options>
 8014076:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801407a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801407e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014080:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8014084:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8014088:	4648      	mov	r0, r9
 801408a:	6861      	ldr	r1, [r4, #4]
 801408c:	f8c4 8000 	str.w	r8, [r4]
 8014090:	f000 f936 	bl	8014300 <rcl_node_options_copy>
 8014094:	2800      	cmp	r0, #0
 8014096:	d168      	bne.n	801416a <rcl_node_init+0x1c6>
 8014098:	4628      	mov	r0, r5
 801409a:	f7ec f8d3 	bl	8000244 <strlen>
 801409e:	4428      	add	r0, r5
 80140a0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80140a4:	2b2f      	cmp	r3, #47	; 0x2f
 80140a6:	f000 80c9 	beq.w	801423c <rcl_node_init+0x298>
 80140aa:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80140ae:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80140b2:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8014270 <rcl_node_init+0x2cc>
 80140b6:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80140ba:	9701      	str	r7, [sp, #4]
 80140bc:	f8da 7010 	ldr.w	r7, [sl, #16]
 80140c0:	f8cd c008 	str.w	ip, [sp, #8]
 80140c4:	9700      	str	r7, [sp, #0]
 80140c6:	6867      	ldr	r7, [r4, #4]
 80140c8:	f001 fe78 	bl	8015dbc <rcutils_format_string_limit>
 80140cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80140ce:	6867      	ldr	r7, [r4, #4]
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	1c59      	adds	r1, r3, #1
 80140d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80140d6:	f000 80ba 	beq.w	801424e <rcl_node_init+0x2aa>
 80140da:	f8d8 2000 	ldr.w	r2, [r8]
 80140de:	61fb      	str	r3, [r7, #28]
 80140e0:	6952      	ldr	r2, [r2, #20]
 80140e2:	6821      	ldr	r1, [r4, #0]
 80140e4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80140e8:	6808      	ldr	r0, [r1, #0]
 80140ea:	f1a2 0201 	sub.w	r2, r2, #1
 80140ee:	fab2 f282 	clz	r2, r2
 80140f2:	0952      	lsrs	r2, r2, #5
 80140f4:	9200      	str	r2, [sp, #0]
 80140f6:	4631      	mov	r1, r6
 80140f8:	462a      	mov	r2, r5
 80140fa:	3028      	adds	r0, #40	; 0x28
 80140fc:	f7f7 ffe2 	bl	800c0c4 <rmw_create_node>
 8014100:	6863      	ldr	r3, [r4, #4]
 8014102:	6238      	str	r0, [r7, #32]
 8014104:	6a18      	ldr	r0, [r3, #32]
 8014106:	2800      	cmp	r0, #0
 8014108:	d031      	beq.n	801416e <rcl_node_init+0x1ca>
 801410a:	f7f8 f86d 	bl	800c1e8 <rmw_node_get_graph_guard_condition>
 801410e:	4607      	mov	r7, r0
 8014110:	b358      	cbz	r0, 801416a <rcl_node_init+0x1c6>
 8014112:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014116:	2008      	movs	r0, #8
 8014118:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801411c:	6866      	ldr	r6, [r4, #4]
 801411e:	4798      	blx	r3
 8014120:	6863      	ldr	r3, [r4, #4]
 8014122:	6270      	str	r0, [r6, #36]	; 0x24
 8014124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014126:	9207      	str	r2, [sp, #28]
 8014128:	b30a      	cbz	r2, 801416e <rcl_node_init+0x1ca>
 801412a:	ae08      	add	r6, sp, #32
 801412c:	4630      	mov	r0, r6
 801412e:	f003 fc0f 	bl	8017950 <rcl_get_zero_initialized_guard_condition>
 8014132:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014136:	9a07      	ldr	r2, [sp, #28]
 8014138:	ae15      	add	r6, sp, #84	; 0x54
 801413a:	e882 0003 	stmia.w	r2, {r0, r1}
 801413e:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014142:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014144:	6862      	ldr	r2, [r4, #4]
 8014146:	f8da 3000 	ldr.w	r3, [sl]
 801414a:	f8d2 c024 	ldr.w	ip, [r2, #36]	; 0x24
 801414e:	6033      	str	r3, [r6, #0]
 8014150:	ab1a      	add	r3, sp, #104	; 0x68
 8014152:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014156:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801415a:	4639      	mov	r1, r7
 801415c:	4660      	mov	r0, ip
 801415e:	4642      	mov	r2, r8
 8014160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014162:	f003 fc55 	bl	8017a10 <rcl_guard_condition_init_from_rmw>
 8014166:	4607      	mov	r7, r0
 8014168:	b320      	cbz	r0, 80141b4 <rcl_node_init+0x210>
 801416a:	6863      	ldr	r3, [r4, #4]
 801416c:	b1f3      	cbz	r3, 80141ac <rcl_node_init+0x208>
 801416e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014170:	b128      	cbz	r0, 801417e <rcl_node_init+0x1da>
 8014172:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014176:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801417a:	4798      	blx	r3
 801417c:	6863      	ldr	r3, [r4, #4]
 801417e:	6a18      	ldr	r0, [r3, #32]
 8014180:	b110      	cbz	r0, 8014188 <rcl_node_init+0x1e4>
 8014182:	f7f7 ffb7 	bl	800c0f4 <rmw_destroy_node>
 8014186:	6863      	ldr	r3, [r4, #4]
 8014188:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801418a:	b148      	cbz	r0, 80141a0 <rcl_node_init+0x1fc>
 801418c:	f003 fc98 	bl	8017ac0 <rcl_guard_condition_fini>
 8014190:	6862      	ldr	r2, [r4, #4]
 8014192:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014196:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8014198:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801419c:	4798      	blx	r3
 801419e:	6863      	ldr	r3, [r4, #4]
 80141a0:	4618      	mov	r0, r3
 80141a2:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80141a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80141aa:	4798      	blx	r3
 80141ac:	2300      	movs	r3, #0
 80141ae:	2701      	movs	r7, #1
 80141b0:	e9c4 3300 	strd	r3, r3, [r4]
 80141b4:	f1bb 0f00 	cmp.w	fp, #0
 80141b8:	d123      	bne.n	8014202 <rcl_node_init+0x25e>
 80141ba:	e000      	b.n	80141be <rcl_node_init+0x21a>
 80141bc:	270b      	movs	r7, #11
 80141be:	4638      	mov	r0, r7
 80141c0:	b01b      	add	sp, #108	; 0x6c
 80141c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141c6:	2765      	movs	r7, #101	; 0x65
 80141c8:	e7f9      	b.n	80141be <rcl_node_init+0x21a>
 80141ca:	782b      	ldrb	r3, [r5, #0]
 80141cc:	2b2f      	cmp	r3, #47	; 0x2f
 80141ce:	f43f af30 	beq.w	8014032 <rcl_node_init+0x8e>
 80141d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80141d6:	4a25      	ldr	r2, [pc, #148]	; (801426c <rcl_node_init+0x2c8>)
 80141d8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80141dc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80141e0:	9503      	str	r5, [sp, #12]
 80141e2:	9300      	str	r3, [sp, #0]
 80141e4:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80141e8:	f001 fde8 	bl	8015dbc <rcutils_format_string_limit>
 80141ec:	4605      	mov	r5, r0
 80141ee:	b360      	cbz	r0, 801424a <rcl_node_init+0x2a6>
 80141f0:	2200      	movs	r2, #0
 80141f2:	a914      	add	r1, sp, #80	; 0x50
 80141f4:	9214      	str	r2, [sp, #80]	; 0x50
 80141f6:	f001 ff8f 	bl	8016118 <rmw_validate_namespace>
 80141fa:	4607      	mov	r7, r0
 80141fc:	2800      	cmp	r0, #0
 80141fe:	f43f af22 	beq.w	8014046 <rcl_node_init+0xa2>
 8014202:	4628      	mov	r0, r5
 8014204:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014208:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801420c:	4798      	blx	r3
 801420e:	e7d6      	b.n	80141be <rcl_node_init+0x21a>
 8014210:	2764      	movs	r7, #100	; 0x64
 8014212:	4638      	mov	r0, r7
 8014214:	b01b      	add	sp, #108	; 0x6c
 8014216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801421a:	270a      	movs	r7, #10
 801421c:	f1bb 0f00 	cmp.w	fp, #0
 8014220:	d1ef      	bne.n	8014202 <rcl_node_init+0x25e>
 8014222:	e7cc      	b.n	80141be <rcl_node_init+0x21a>
 8014224:	f001 ffe8 	bl	80161f8 <rmw_node_name_validation_result_string>
 8014228:	27c9      	movs	r7, #201	; 0xc9
 801422a:	e7c8      	b.n	80141be <rcl_node_init+0x21a>
 801422c:	4618      	mov	r0, r3
 801422e:	f001 ff85 	bl	801613c <rmw_namespace_validation_result_string>
 8014232:	27ca      	movs	r7, #202	; 0xca
 8014234:	f1bb 0f00 	cmp.w	fp, #0
 8014238:	d1e3      	bne.n	8014202 <rcl_node_init+0x25e>
 801423a:	e7c0      	b.n	80141be <rcl_node_init+0x21a>
 801423c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8014240:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8014244:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8014274 <rcl_node_init+0x2d0>
 8014248:	e735      	b.n	80140b6 <rcl_node_init+0x112>
 801424a:	270a      	movs	r7, #10
 801424c:	e7b7      	b.n	80141be <rcl_node_init+0x21a>
 801424e:	a813      	add	r0, sp, #76	; 0x4c
 8014250:	f003 fb4a 	bl	80178e8 <rcl_get_default_domain_id>
 8014254:	2800      	cmp	r0, #0
 8014256:	d188      	bne.n	801416a <rcl_node_init+0x1c6>
 8014258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801425a:	1c5a      	adds	r2, r3, #1
 801425c:	bf09      	itett	eq
 801425e:	4603      	moveq	r3, r0
 8014260:	6867      	ldrne	r7, [r4, #4]
 8014262:	6867      	ldreq	r7, [r4, #4]
 8014264:	9013      	streq	r0, [sp, #76]	; 0x4c
 8014266:	e738      	b.n	80140da <rcl_node_init+0x136>
 8014268:	0801a640 	.word	0x0801a640
 801426c:	0801a9c0 	.word	0x0801a9c0
 8014270:	0801a644 	.word	0x0801a644
 8014274:	0801a68c 	.word	0x0801a68c

08014278 <rcl_node_is_valid>:
 8014278:	b130      	cbz	r0, 8014288 <rcl_node_is_valid+0x10>
 801427a:	6843      	ldr	r3, [r0, #4]
 801427c:	b123      	cbz	r3, 8014288 <rcl_node_is_valid+0x10>
 801427e:	6a1b      	ldr	r3, [r3, #32]
 8014280:	b113      	cbz	r3, 8014288 <rcl_node_is_valid+0x10>
 8014282:	6800      	ldr	r0, [r0, #0]
 8014284:	f7ff bb68 	b.w	8013958 <rcl_context_is_valid>
 8014288:	2000      	movs	r0, #0
 801428a:	4770      	bx	lr

0801428c <rcl_node_get_name>:
 801428c:	b120      	cbz	r0, 8014298 <rcl_node_get_name+0xc>
 801428e:	6840      	ldr	r0, [r0, #4]
 8014290:	b110      	cbz	r0, 8014298 <rcl_node_get_name+0xc>
 8014292:	6a00      	ldr	r0, [r0, #32]
 8014294:	b100      	cbz	r0, 8014298 <rcl_node_get_name+0xc>
 8014296:	6880      	ldr	r0, [r0, #8]
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop

0801429c <rcl_node_get_namespace>:
 801429c:	b120      	cbz	r0, 80142a8 <rcl_node_get_namespace+0xc>
 801429e:	6840      	ldr	r0, [r0, #4]
 80142a0:	b110      	cbz	r0, 80142a8 <rcl_node_get_namespace+0xc>
 80142a2:	6a00      	ldr	r0, [r0, #32]
 80142a4:	b100      	cbz	r0, 80142a8 <rcl_node_get_namespace+0xc>
 80142a6:	68c0      	ldr	r0, [r0, #12]
 80142a8:	4770      	bx	lr
 80142aa:	bf00      	nop

080142ac <rcl_node_get_options>:
 80142ac:	b128      	cbz	r0, 80142ba <rcl_node_get_options+0xe>
 80142ae:	6840      	ldr	r0, [r0, #4]
 80142b0:	b118      	cbz	r0, 80142ba <rcl_node_get_options+0xe>
 80142b2:	6a03      	ldr	r3, [r0, #32]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	bf08      	it	eq
 80142b8:	2000      	moveq	r0, #0
 80142ba:	4770      	bx	lr

080142bc <rcl_node_get_rmw_handle>:
 80142bc:	b110      	cbz	r0, 80142c4 <rcl_node_get_rmw_handle+0x8>
 80142be:	6840      	ldr	r0, [r0, #4]
 80142c0:	b100      	cbz	r0, 80142c4 <rcl_node_get_rmw_handle+0x8>
 80142c2:	6a00      	ldr	r0, [r0, #32]
 80142c4:	4770      	bx	lr
 80142c6:	bf00      	nop

080142c8 <rcl_node_get_default_options>:
 80142c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142cc:	4680      	mov	r8, r0
 80142ce:	b086      	sub	sp, #24
 80142d0:	466d      	mov	r5, sp
 80142d2:	4c0a      	ldr	r4, [pc, #40]	; (80142fc <rcl_node_get_default_options+0x34>)
 80142d4:	4646      	mov	r6, r8
 80142d6:	4627      	mov	r7, r4
 80142d8:	4668      	mov	r0, sp
 80142da:	3404      	adds	r4, #4
 80142dc:	f7f7 f8ea 	bl	800b4b4 <rcutils_get_default_allocator>
 80142e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80142e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80142e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80142e8:	682b      	ldr	r3, [r5, #0]
 80142ea:	6023      	str	r3, [r4, #0]
 80142ec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80142f0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80142f4:	4640      	mov	r0, r8
 80142f6:	b006      	add	sp, #24
 80142f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142fc:	20000218 	.word	0x20000218

08014300 <rcl_node_options_copy>:
 8014300:	b1d8      	cbz	r0, 801433a <rcl_node_options_copy+0x3a>
 8014302:	b4f0      	push	{r4, r5, r6, r7}
 8014304:	460f      	mov	r7, r1
 8014306:	b1a9      	cbz	r1, 8014334 <rcl_node_options_copy+0x34>
 8014308:	4288      	cmp	r0, r1
 801430a:	4606      	mov	r6, r0
 801430c:	d012      	beq.n	8014334 <rcl_node_options_copy+0x34>
 801430e:	4605      	mov	r5, r0
 8014310:	460c      	mov	r4, r1
 8014312:	f855 3b04 	ldr.w	r3, [r5], #4
 8014316:	f890 c018 	ldrb.w	ip, [r0, #24]
 801431a:	f844 3b04 	str.w	r3, [r4], #4
 801431e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014322:	7e73      	ldrb	r3, [r6, #25]
 8014324:	682a      	ldr	r2, [r5, #0]
 8014326:	2000      	movs	r0, #0
 8014328:	6022      	str	r2, [r4, #0]
 801432a:	f887 c018 	strb.w	ip, [r7, #24]
 801432e:	767b      	strb	r3, [r7, #25]
 8014330:	bcf0      	pop	{r4, r5, r6, r7}
 8014332:	4770      	bx	lr
 8014334:	200b      	movs	r0, #11
 8014336:	bcf0      	pop	{r4, r5, r6, r7}
 8014338:	4770      	bx	lr
 801433a:	200b      	movs	r0, #11
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop

08014340 <exact_match_lookup>:
 8014340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014342:	460d      	mov	r5, r1
 8014344:	4614      	mov	r4, r2
 8014346:	b085      	sub	sp, #20
 8014348:	f102 0608 	add.w	r6, r2, #8
 801434c:	4607      	mov	r7, r0
 801434e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014352:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014356:	4628      	mov	r0, r5
 8014358:	e894 000c 	ldmia.w	r4, {r2, r3}
 801435c:	4917      	ldr	r1, [pc, #92]	; (80143bc <exact_match_lookup+0x7c>)
 801435e:	f001 fd1f 	bl	8015da0 <rcutils_join_path>
 8014362:	783b      	ldrb	r3, [r7, #0]
 8014364:	4605      	mov	r5, r0
 8014366:	2b2f      	cmp	r3, #47	; 0x2f
 8014368:	d021      	beq.n	80143ae <exact_match_lookup+0x6e>
 801436a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801436e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014372:	1c78      	adds	r0, r7, #1
 8014374:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014378:	f001 fd18 	bl	8015dac <rcutils_to_native_path>
 801437c:	4603      	mov	r3, r0
 801437e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014382:	461e      	mov	r6, r3
 8014384:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014388:	4631      	mov	r1, r6
 801438a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801438e:	4628      	mov	r0, r5
 8014390:	f001 fd06 	bl	8015da0 <rcutils_join_path>
 8014394:	4607      	mov	r7, r0
 8014396:	6863      	ldr	r3, [r4, #4]
 8014398:	4630      	mov	r0, r6
 801439a:	6921      	ldr	r1, [r4, #16]
 801439c:	4798      	blx	r3
 801439e:	4628      	mov	r0, r5
 80143a0:	463d      	mov	r5, r7
 80143a2:	6863      	ldr	r3, [r4, #4]
 80143a4:	6921      	ldr	r1, [r4, #16]
 80143a6:	4798      	blx	r3
 80143a8:	4628      	mov	r0, r5
 80143aa:	b005      	add	sp, #20
 80143ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ae:	787b      	ldrb	r3, [r7, #1]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d1da      	bne.n	801436a <exact_match_lookup+0x2a>
 80143b4:	4628      	mov	r0, r5
 80143b6:	b005      	add	sp, #20
 80143b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80143ba:	bf00      	nop
 80143bc:	0801aa08 	.word	0x0801aa08

080143c0 <rcl_get_secure_root>:
 80143c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143c4:	b085      	sub	sp, #20
 80143c6:	b168      	cbz	r0, 80143e4 <rcl_get_secure_root+0x24>
 80143c8:	4607      	mov	r7, r0
 80143ca:	4608      	mov	r0, r1
 80143cc:	460c      	mov	r4, r1
 80143ce:	f7f7 f87f 	bl	800b4d0 <rcutils_allocator_is_valid>
 80143d2:	b138      	cbz	r0, 80143e4 <rcl_get_secure_root+0x24>
 80143d4:	2300      	movs	r3, #0
 80143d6:	482e      	ldr	r0, [pc, #184]	; (8014490 <rcl_get_secure_root+0xd0>)
 80143d8:	a903      	add	r1, sp, #12
 80143da:	9303      	str	r3, [sp, #12]
 80143dc:	f001 fd28 	bl	8015e30 <rcutils_get_env>
 80143e0:	4605      	mov	r5, r0
 80143e2:	b120      	cbz	r0, 80143ee <rcl_get_secure_root+0x2e>
 80143e4:	2500      	movs	r5, #0
 80143e6:	4628      	mov	r0, r5
 80143e8:	b005      	add	sp, #20
 80143ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143ee:	9e03      	ldr	r6, [sp, #12]
 80143f0:	7833      	ldrb	r3, [r6, #0]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d0f6      	beq.n	80143e4 <rcl_get_secure_root+0x24>
 80143f6:	f104 090c 	add.w	r9, r4, #12
 80143fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80143fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014402:	4630      	mov	r0, r6
 8014404:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014408:	f001 fdf2 	bl	8015ff0 <rcutils_strdup>
 801440c:	4680      	mov	r8, r0
 801440e:	2800      	cmp	r0, #0
 8014410:	d0e8      	beq.n	80143e4 <rcl_get_secure_root+0x24>
 8014412:	4820      	ldr	r0, [pc, #128]	; (8014494 <rcl_get_secure_root+0xd4>)
 8014414:	a903      	add	r1, sp, #12
 8014416:	9503      	str	r5, [sp, #12]
 8014418:	f001 fd0a 	bl	8015e30 <rcutils_get_env>
 801441c:	b160      	cbz	r0, 8014438 <rcl_get_secure_root+0x78>
 801441e:	2600      	movs	r6, #0
 8014420:	4630      	mov	r0, r6
 8014422:	6863      	ldr	r3, [r4, #4]
 8014424:	6921      	ldr	r1, [r4, #16]
 8014426:	4798      	blx	r3
 8014428:	4640      	mov	r0, r8
 801442a:	6863      	ldr	r3, [r4, #4]
 801442c:	6921      	ldr	r1, [r4, #16]
 801442e:	4798      	blx	r3
 8014430:	4628      	mov	r0, r5
 8014432:	b005      	add	sp, #20
 8014434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014438:	f8dd c00c 	ldr.w	ip, [sp, #12]
 801443c:	f89c 6000 	ldrb.w	r6, [ip]
 8014440:	b1f6      	cbz	r6, 8014480 <rcl_get_secure_root+0xc0>
 8014442:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014446:	e88d 0003 	stmia.w	sp, {r0, r1}
 801444a:	4660      	mov	r0, ip
 801444c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014450:	f001 fdce 	bl	8015ff0 <rcutils_strdup>
 8014454:	4606      	mov	r6, r0
 8014456:	2800      	cmp	r0, #0
 8014458:	d0e1      	beq.n	801441e <rcl_get_secure_root+0x5e>
 801445a:	4622      	mov	r2, r4
 801445c:	4641      	mov	r1, r8
 801445e:	f7ff ff6f 	bl	8014340 <exact_match_lookup>
 8014462:	4605      	mov	r5, r0
 8014464:	2d00      	cmp	r5, #0
 8014466:	d0db      	beq.n	8014420 <rcl_get_secure_root+0x60>
 8014468:	4628      	mov	r0, r5
 801446a:	f001 fc97 	bl	8015d9c <rcutils_is_directory>
 801446e:	4603      	mov	r3, r0
 8014470:	2800      	cmp	r0, #0
 8014472:	d1d5      	bne.n	8014420 <rcl_get_secure_root+0x60>
 8014474:	4628      	mov	r0, r5
 8014476:	6862      	ldr	r2, [r4, #4]
 8014478:	6921      	ldr	r1, [r4, #16]
 801447a:	461d      	mov	r5, r3
 801447c:	4790      	blx	r2
 801447e:	e7cf      	b.n	8014420 <rcl_get_secure_root+0x60>
 8014480:	4638      	mov	r0, r7
 8014482:	4622      	mov	r2, r4
 8014484:	4641      	mov	r1, r8
 8014486:	f7ff ff5b 	bl	8014340 <exact_match_lookup>
 801448a:	4605      	mov	r5, r0
 801448c:	e7ea      	b.n	8014464 <rcl_get_secure_root+0xa4>
 801448e:	bf00      	nop
 8014490:	0801aa14 	.word	0x0801aa14
 8014494:	0801aa2c 	.word	0x0801aa2c

08014498 <rcl_get_security_options_from_environment>:
 8014498:	2300      	movs	r3, #0
 801449a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801449e:	b082      	sub	sp, #8
 80144a0:	4606      	mov	r6, r0
 80144a2:	460f      	mov	r7, r1
 80144a4:	4820      	ldr	r0, [pc, #128]	; (8014528 <rcl_get_security_options_from_environment+0x90>)
 80144a6:	a901      	add	r1, sp, #4
 80144a8:	4690      	mov	r8, r2
 80144aa:	9301      	str	r3, [sp, #4]
 80144ac:	f001 fcc0 	bl	8015e30 <rcutils_get_env>
 80144b0:	b120      	cbz	r0, 80144bc <rcl_get_security_options_from_environment+0x24>
 80144b2:	2501      	movs	r5, #1
 80144b4:	4628      	mov	r0, r5
 80144b6:	b002      	add	sp, #8
 80144b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144bc:	4604      	mov	r4, r0
 80144be:	491b      	ldr	r1, [pc, #108]	; (801452c <rcl_get_security_options_from_environment+0x94>)
 80144c0:	9801      	ldr	r0, [sp, #4]
 80144c2:	f7eb feb5 	bl	8000230 <strcmp>
 80144c6:	4605      	mov	r5, r0
 80144c8:	b9e8      	cbnz	r0, 8014506 <rcl_get_security_options_from_environment+0x6e>
 80144ca:	9001      	str	r0, [sp, #4]
 80144cc:	f1b8 0f00 	cmp.w	r8, #0
 80144d0:	d020      	beq.n	8014514 <rcl_get_security_options_from_environment+0x7c>
 80144d2:	4817      	ldr	r0, [pc, #92]	; (8014530 <rcl_get_security_options_from_environment+0x98>)
 80144d4:	a901      	add	r1, sp, #4
 80144d6:	f001 fcab 	bl	8015e30 <rcutils_get_env>
 80144da:	2800      	cmp	r0, #0
 80144dc:	d1e9      	bne.n	80144b2 <rcl_get_security_options_from_environment+0x1a>
 80144de:	4915      	ldr	r1, [pc, #84]	; (8014534 <rcl_get_security_options_from_environment+0x9c>)
 80144e0:	9801      	ldr	r0, [sp, #4]
 80144e2:	f7eb fea5 	bl	8000230 <strcmp>
 80144e6:	fab0 f080 	clz	r0, r0
 80144ea:	0940      	lsrs	r0, r0, #5
 80144ec:	f888 0000 	strb.w	r0, [r8]
 80144f0:	4639      	mov	r1, r7
 80144f2:	4630      	mov	r0, r6
 80144f4:	f7ff ff64 	bl	80143c0 <rcl_get_secure_root>
 80144f8:	b170      	cbz	r0, 8014518 <rcl_get_security_options_from_environment+0x80>
 80144fa:	f8c8 0004 	str.w	r0, [r8, #4]
 80144fe:	4628      	mov	r0, r5
 8014500:	b002      	add	sp, #8
 8014502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014506:	4625      	mov	r5, r4
 8014508:	4628      	mov	r0, r5
 801450a:	f888 4000 	strb.w	r4, [r8]
 801450e:	b002      	add	sp, #8
 8014510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014514:	250b      	movs	r5, #11
 8014516:	e7cd      	b.n	80144b4 <rcl_get_security_options_from_environment+0x1c>
 8014518:	f898 5000 	ldrb.w	r5, [r8]
 801451c:	f1a5 0501 	sub.w	r5, r5, #1
 8014520:	fab5 f585 	clz	r5, r5
 8014524:	096d      	lsrs	r5, r5, #5
 8014526:	e7c5      	b.n	80144b4 <rcl_get_security_options_from_environment+0x1c>
 8014528:	0801a9cc 	.word	0x0801a9cc
 801452c:	0801a9e0 	.word	0x0801a9e0
 8014530:	0801a9e8 	.word	0x0801a9e8
 8014534:	0801aa00 	.word	0x0801aa00

08014538 <rcl_service_get_rmw_handle>:
 8014538:	b110      	cbz	r0, 8014540 <rcl_service_get_rmw_handle+0x8>
 801453a:	6800      	ldr	r0, [r0, #0]
 801453c:	b100      	cbz	r0, 8014540 <rcl_service_get_rmw_handle+0x8>
 801453e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014540:	4770      	bx	lr
 8014542:	bf00      	nop

08014544 <rcl_take_request>:
 8014544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014546:	460e      	mov	r6, r1
 8014548:	4607      	mov	r7, r0
 801454a:	b08d      	sub	sp, #52	; 0x34
 801454c:	ad06      	add	r5, sp, #24
 801454e:	460c      	mov	r4, r1
 8014550:	4694      	mov	ip, r2
 8014552:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014556:	e896 0003 	ldmia.w	r6, {r0, r1}
 801455a:	e885 0003 	stmia.w	r5, {r0, r1}
 801455e:	b1e7      	cbz	r7, 801459a <rcl_take_request+0x56>
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	b1d3      	cbz	r3, 801459a <rcl_take_request+0x56>
 8014564:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014566:	b1c0      	cbz	r0, 801459a <rcl_take_request+0x56>
 8014568:	4662      	mov	r2, ip
 801456a:	b30a      	cbz	r2, 80145b0 <rcl_take_request+0x6c>
 801456c:	2500      	movs	r5, #0
 801456e:	f10d 0307 	add.w	r3, sp, #7
 8014572:	a902      	add	r1, sp, #8
 8014574:	f88d 5007 	strb.w	r5, [sp, #7]
 8014578:	f002 f810 	bl	801659c <rmw_take_request>
 801457c:	4606      	mov	r6, r0
 801457e:	b178      	cbz	r0, 80145a0 <rcl_take_request+0x5c>
 8014580:	280a      	cmp	r0, #10
 8014582:	bf18      	it	ne
 8014584:	2601      	movne	r6, #1
 8014586:	ad06      	add	r5, sp, #24
 8014588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801458a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801458c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014590:	e884 0003 	stmia.w	r4, {r0, r1}
 8014594:	4630      	mov	r0, r6
 8014596:	b00d      	add	sp, #52	; 0x34
 8014598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801459a:	f44f 7616 	mov.w	r6, #600	; 0x258
 801459e:	e7f2      	b.n	8014586 <rcl_take_request+0x42>
 80145a0:	f240 2359 	movw	r3, #601	; 0x259
 80145a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80145a8:	2a00      	cmp	r2, #0
 80145aa:	bf08      	it	eq
 80145ac:	461e      	moveq	r6, r3
 80145ae:	e7ea      	b.n	8014586 <rcl_take_request+0x42>
 80145b0:	260b      	movs	r6, #11
 80145b2:	e7e8      	b.n	8014586 <rcl_take_request+0x42>

080145b4 <rcl_send_response>:
 80145b4:	b160      	cbz	r0, 80145d0 <rcl_send_response+0x1c>
 80145b6:	6800      	ldr	r0, [r0, #0]
 80145b8:	b150      	cbz	r0, 80145d0 <rcl_send_response+0x1c>
 80145ba:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80145bc:	b140      	cbz	r0, 80145d0 <rcl_send_response+0x1c>
 80145be:	b151      	cbz	r1, 80145d6 <rcl_send_response+0x22>
 80145c0:	b510      	push	{r4, lr}
 80145c2:	b152      	cbz	r2, 80145da <rcl_send_response+0x26>
 80145c4:	f002 f848 	bl	8016658 <rmw_send_response>
 80145c8:	3800      	subs	r0, #0
 80145ca:	bf18      	it	ne
 80145cc:	2001      	movne	r0, #1
 80145ce:	bd10      	pop	{r4, pc}
 80145d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80145d4:	4770      	bx	lr
 80145d6:	200b      	movs	r0, #11
 80145d8:	4770      	bx	lr
 80145da:	200b      	movs	r0, #11
 80145dc:	bd10      	pop	{r4, pc}
 80145de:	bf00      	nop

080145e0 <rcl_get_system_time>:
 80145e0:	4608      	mov	r0, r1
 80145e2:	f7f7 b9a7 	b.w	800b934 <rcutils_system_time_now>
 80145e6:	bf00      	nop

080145e8 <rcl_get_steady_time>:
 80145e8:	4608      	mov	r0, r1
 80145ea:	f7f7 b9cb 	b.w	800b984 <rcutils_steady_time_now>
 80145ee:	bf00      	nop

080145f0 <rcl_get_ros_time>:
 80145f0:	7a03      	ldrb	r3, [r0, #8]
 80145f2:	b510      	push	{r4, lr}
 80145f4:	460c      	mov	r4, r1
 80145f6:	b143      	cbz	r3, 801460a <rcl_get_ros_time+0x1a>
 80145f8:	2105      	movs	r1, #5
 80145fa:	f001 faf5 	bl	8015be8 <__atomic_load_8>
 80145fe:	4602      	mov	r2, r0
 8014600:	460b      	mov	r3, r1
 8014602:	2000      	movs	r0, #0
 8014604:	e9c4 2300 	strd	r2, r3, [r4]
 8014608:	bd10      	pop	{r4, pc}
 801460a:	4608      	mov	r0, r1
 801460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014610:	f7f7 b990 	b.w	800b934 <rcutils_system_time_now>

08014614 <rcl_clock_init>:
 8014614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014618:	4605      	mov	r5, r0
 801461a:	4610      	mov	r0, r2
 801461c:	4614      	mov	r4, r2
 801461e:	460e      	mov	r6, r1
 8014620:	f7f6 ff56 	bl	800b4d0 <rcutils_allocator_is_valid>
 8014624:	b128      	cbz	r0, 8014632 <rcl_clock_init+0x1e>
 8014626:	2d03      	cmp	r5, #3
 8014628:	d803      	bhi.n	8014632 <rcl_clock_init+0x1e>
 801462a:	e8df f005 	tbb	[pc, r5]
 801462e:	2e1d      	.short	0x2e1d
 8014630:	0555      	.short	0x0555
 8014632:	200b      	movs	r0, #11
 8014634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014638:	2e00      	cmp	r6, #0
 801463a:	d0fa      	beq.n	8014632 <rcl_clock_init+0x1e>
 801463c:	2c00      	cmp	r4, #0
 801463e:	d0f8      	beq.n	8014632 <rcl_clock_init+0x1e>
 8014640:	2700      	movs	r7, #0
 8014642:	f04f 0c03 	mov.w	ip, #3
 8014646:	7037      	strb	r7, [r6, #0]
 8014648:	f106 0514 	add.w	r5, r6, #20
 801464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801464e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014652:	6137      	str	r7, [r6, #16]
 8014654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014656:	4b2a      	ldr	r3, [pc, #168]	; (8014700 <rcl_clock_init+0xec>)
 8014658:	6822      	ldr	r2, [r4, #0]
 801465a:	4638      	mov	r0, r7
 801465c:	602a      	str	r2, [r5, #0]
 801465e:	f886 c000 	strb.w	ip, [r6]
 8014662:	60f3      	str	r3, [r6, #12]
 8014664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014668:	2e00      	cmp	r6, #0
 801466a:	d0e2      	beq.n	8014632 <rcl_clock_init+0x1e>
 801466c:	2700      	movs	r7, #0
 801466e:	f106 0514 	add.w	r5, r6, #20
 8014672:	7037      	strb	r7, [r6, #0]
 8014674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014676:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801467a:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801467e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014680:	6823      	ldr	r3, [r4, #0]
 8014682:	4638      	mov	r0, r7
 8014684:	602b      	str	r3, [r5, #0]
 8014686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801468a:	2e00      	cmp	r6, #0
 801468c:	d0d1      	beq.n	8014632 <rcl_clock_init+0x1e>
 801468e:	2c00      	cmp	r4, #0
 8014690:	d0cf      	beq.n	8014632 <rcl_clock_init+0x1e>
 8014692:	f04f 0800 	mov.w	r8, #0
 8014696:	4627      	mov	r7, r4
 8014698:	f886 8000 	strb.w	r8, [r6]
 801469c:	f106 0514 	add.w	r5, r6, #20
 80146a0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80146a2:	e9c6 8801 	strd	r8, r8, [r6, #4]
 80146a6:	e9c6 8803 	strd	r8, r8, [r6, #12]
 80146aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80146ac:	683a      	ldr	r2, [r7, #0]
 80146ae:	6823      	ldr	r3, [r4, #0]
 80146b0:	602a      	str	r2, [r5, #0]
 80146b2:	2010      	movs	r0, #16
 80146b4:	6921      	ldr	r1, [r4, #16]
 80146b6:	4798      	blx	r3
 80146b8:	4603      	mov	r3, r0
 80146ba:	6130      	str	r0, [r6, #16]
 80146bc:	b1e8      	cbz	r0, 80146fa <rcl_clock_init+0xe6>
 80146be:	2400      	movs	r4, #0
 80146c0:	2500      	movs	r5, #0
 80146c2:	2201      	movs	r2, #1
 80146c4:	f880 8008 	strb.w	r8, [r0, #8]
 80146c8:	e9c3 4500 	strd	r4, r5, [r3]
 80146cc:	4b0d      	ldr	r3, [pc, #52]	; (8014704 <rcl_clock_init+0xf0>)
 80146ce:	7032      	strb	r2, [r6, #0]
 80146d0:	4640      	mov	r0, r8
 80146d2:	60f3      	str	r3, [r6, #12]
 80146d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146d8:	2e00      	cmp	r6, #0
 80146da:	d0aa      	beq.n	8014632 <rcl_clock_init+0x1e>
 80146dc:	2c00      	cmp	r4, #0
 80146de:	d0a8      	beq.n	8014632 <rcl_clock_init+0x1e>
 80146e0:	2700      	movs	r7, #0
 80146e2:	f106 0514 	add.w	r5, r6, #20
 80146e6:	7037      	strb	r7, [r6, #0]
 80146e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ea:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80146ee:	6137      	str	r7, [r6, #16]
 80146f0:	f04f 0c02 	mov.w	ip, #2
 80146f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80146f6:	4b04      	ldr	r3, [pc, #16]	; (8014708 <rcl_clock_init+0xf4>)
 80146f8:	e7ae      	b.n	8014658 <rcl_clock_init+0x44>
 80146fa:	200a      	movs	r0, #10
 80146fc:	e79a      	b.n	8014634 <rcl_clock_init+0x20>
 80146fe:	bf00      	nop
 8014700:	080145e9 	.word	0x080145e9
 8014704:	080145f1 	.word	0x080145f1
 8014708:	080145e1 	.word	0x080145e1

0801470c <rcl_clock_get_now>:
 801470c:	b140      	cbz	r0, 8014720 <rcl_clock_get_now+0x14>
 801470e:	b139      	cbz	r1, 8014720 <rcl_clock_get_now+0x14>
 8014710:	7803      	ldrb	r3, [r0, #0]
 8014712:	b11b      	cbz	r3, 801471c <rcl_clock_get_now+0x10>
 8014714:	68c3      	ldr	r3, [r0, #12]
 8014716:	b10b      	cbz	r3, 801471c <rcl_clock_get_now+0x10>
 8014718:	6900      	ldr	r0, [r0, #16]
 801471a:	4718      	bx	r3
 801471c:	2001      	movs	r0, #1
 801471e:	4770      	bx	lr
 8014720:	200b      	movs	r0, #11
 8014722:	4770      	bx	lr

08014724 <rcl_clock_add_jump_callback>:
 8014724:	b082      	sub	sp, #8
 8014726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801472a:	a906      	add	r1, sp, #24
 801472c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014730:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8014734:	b338      	cbz	r0, 8014786 <rcl_clock_add_jump_callback+0x62>
 8014736:	4604      	mov	r4, r0
 8014738:	3014      	adds	r0, #20
 801473a:	f7f6 fec9 	bl	800b4d0 <rcutils_allocator_is_valid>
 801473e:	b310      	cbz	r0, 8014786 <rcl_clock_add_jump_callback+0x62>
 8014740:	b30e      	cbz	r6, 8014786 <rcl_clock_add_jump_callback+0x62>
 8014742:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014746:	2a00      	cmp	r2, #0
 8014748:	f173 0300 	sbcs.w	r3, r3, #0
 801474c:	db1b      	blt.n	8014786 <rcl_clock_add_jump_callback+0x62>
 801474e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014752:	2a01      	cmp	r2, #1
 8014754:	f173 0300 	sbcs.w	r3, r3, #0
 8014758:	da15      	bge.n	8014786 <rcl_clock_add_jump_callback+0x62>
 801475a:	68a7      	ldr	r7, [r4, #8]
 801475c:	2f00      	cmp	r7, #0
 801475e:	d03f      	beq.n	80147e0 <rcl_clock_add_jump_callback+0xbc>
 8014760:	6860      	ldr	r0, [r4, #4]
 8014762:	2300      	movs	r3, #0
 8014764:	f100 0220 	add.w	r2, r0, #32
 8014768:	e003      	b.n	8014772 <rcl_clock_add_jump_callback+0x4e>
 801476a:	42bb      	cmp	r3, r7
 801476c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8014770:	d00e      	beq.n	8014790 <rcl_clock_add_jump_callback+0x6c>
 8014772:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8014776:	3301      	adds	r3, #1
 8014778:	42b1      	cmp	r1, r6
 801477a:	d1f6      	bne.n	801476a <rcl_clock_add_jump_callback+0x46>
 801477c:	6811      	ldr	r1, [r2, #0]
 801477e:	42a9      	cmp	r1, r5
 8014780:	d1f3      	bne.n	801476a <rcl_clock_add_jump_callback+0x46>
 8014782:	2001      	movs	r0, #1
 8014784:	e000      	b.n	8014788 <rcl_clock_add_jump_callback+0x64>
 8014786:	200b      	movs	r0, #11
 8014788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801478c:	b002      	add	sp, #8
 801478e:	4770      	bx	lr
 8014790:	3301      	adds	r3, #1
 8014792:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014796:	00d9      	lsls	r1, r3, #3
 8014798:	69e3      	ldr	r3, [r4, #28]
 801479a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801479c:	4798      	blx	r3
 801479e:	b1e8      	cbz	r0, 80147dc <rcl_clock_add_jump_callback+0xb8>
 80147a0:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80147a4:	f10d 0c18 	add.w	ip, sp, #24
 80147a8:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80147ac:	eb00 08c3 	add.w	r8, r0, r3, lsl #3
 80147b0:	f108 0708 	add.w	r7, r8, #8
 80147b4:	6060      	str	r0, [r4, #4]
 80147b6:	f840 6033 	str.w	r6, [r0, r3, lsl #3]
 80147ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80147be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80147c0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80147c4:	f10e 0301 	add.w	r3, lr, #1
 80147c8:	e887 0003 	stmia.w	r7, {r0, r1}
 80147cc:	f8c8 5020 	str.w	r5, [r8, #32]
 80147d0:	2000      	movs	r0, #0
 80147d2:	60a3      	str	r3, [r4, #8]
 80147d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147d8:	b002      	add	sp, #8
 80147da:	4770      	bx	lr
 80147dc:	200a      	movs	r0, #10
 80147de:	e7d3      	b.n	8014788 <rcl_clock_add_jump_callback+0x64>
 80147e0:	2128      	movs	r1, #40	; 0x28
 80147e2:	6860      	ldr	r0, [r4, #4]
 80147e4:	e7d8      	b.n	8014798 <rcl_clock_add_jump_callback+0x74>
 80147e6:	bf00      	nop

080147e8 <rcl_clock_remove_jump_callback>:
 80147e8:	2800      	cmp	r0, #0
 80147ea:	d057      	beq.n	801489c <rcl_clock_remove_jump_callback+0xb4>
 80147ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147f0:	4607      	mov	r7, r0
 80147f2:	3014      	adds	r0, #20
 80147f4:	460c      	mov	r4, r1
 80147f6:	4615      	mov	r5, r2
 80147f8:	f7f6 fe6a 	bl	800b4d0 <rcutils_allocator_is_valid>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d03a      	beq.n	8014876 <rcl_clock_remove_jump_callback+0x8e>
 8014800:	2c00      	cmp	r4, #0
 8014802:	d038      	beq.n	8014876 <rcl_clock_remove_jump_callback+0x8e>
 8014804:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8014808:	f1b8 0f00 	cmp.w	r8, #0
 801480c:	d00c      	beq.n	8014828 <rcl_clock_remove_jump_callback+0x40>
 801480e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8014812:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 8014816:	4676      	mov	r6, lr
 8014818:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 801481c:	6833      	ldr	r3, [r6, #0]
 801481e:	42a3      	cmp	r3, r4
 8014820:	d005      	beq.n	801482e <rcl_clock_remove_jump_callback+0x46>
 8014822:	3628      	adds	r6, #40	; 0x28
 8014824:	45b4      	cmp	ip, r6
 8014826:	d1f9      	bne.n	801481c <rcl_clock_remove_jump_callback+0x34>
 8014828:	2001      	movs	r0, #1
 801482a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801482e:	6a33      	ldr	r3, [r6, #32]
 8014830:	3628      	adds	r6, #40	; 0x28
 8014832:	4566      	cmp	r6, ip
 8014834:	d02a      	beq.n	801488c <rcl_clock_remove_jump_callback+0xa4>
 8014836:	42ab      	cmp	r3, r5
 8014838:	d1f0      	bne.n	801481c <rcl_clock_remove_jump_callback+0x34>
 801483a:	4635      	mov	r5, r6
 801483c:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 8014840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014848:	3628      	adds	r6, #40	; 0x28
 801484a:	4566      	cmp	r6, ip
 801484c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014850:	e884 0003 	stmia.w	r4, {r0, r1}
 8014854:	d1f1      	bne.n	801483a <rcl_clock_remove_jump_callback+0x52>
 8014856:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801485a:	60bc      	str	r4, [r7, #8]
 801485c:	b174      	cbz	r4, 801487c <rcl_clock_remove_jump_callback+0x94>
 801485e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8014862:	4670      	mov	r0, lr
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014868:	00e1      	lsls	r1, r4, #3
 801486a:	4798      	blx	r3
 801486c:	b1c0      	cbz	r0, 80148a0 <rcl_clock_remove_jump_callback+0xb8>
 801486e:	6078      	str	r0, [r7, #4]
 8014870:	2000      	movs	r0, #0
 8014872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014876:	200b      	movs	r0, #11
 8014878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487c:	4670      	mov	r0, lr
 801487e:	69bb      	ldr	r3, [r7, #24]
 8014880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014882:	4798      	blx	r3
 8014884:	4620      	mov	r0, r4
 8014886:	607c      	str	r4, [r7, #4]
 8014888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801488c:	42ab      	cmp	r3, r5
 801488e:	d1cb      	bne.n	8014828 <rcl_clock_remove_jump_callback+0x40>
 8014890:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8014894:	60bc      	str	r4, [r7, #8]
 8014896:	2c00      	cmp	r4, #0
 8014898:	d1e1      	bne.n	801485e <rcl_clock_remove_jump_callback+0x76>
 801489a:	e7ef      	b.n	801487c <rcl_clock_remove_jump_callback+0x94>
 801489c:	200b      	movs	r0, #11
 801489e:	4770      	bx	lr
 80148a0:	200a      	movs	r0, #10
 80148a2:	e7e9      	b.n	8014878 <rcl_clock_remove_jump_callback+0x90>

080148a4 <_rcl_timer_time_jump>:
 80148a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a8:	4683      	mov	fp, r0
 80148aa:	4614      	mov	r4, r2
 80148ac:	b085      	sub	sp, #20
 80148ae:	b131      	cbz	r1, 80148be <_rcl_timer_time_jump+0x1a>
 80148b0:	7803      	ldrb	r3, [r0, #0]
 80148b2:	3b02      	subs	r3, #2
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d940      	bls.n	801493a <_rcl_timer_time_jump+0x96>
 80148b8:	b005      	add	sp, #20
 80148ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148be:	6813      	ldr	r3, [r2, #0]
 80148c0:	a902      	add	r1, sp, #8
 80148c2:	6818      	ldr	r0, [r3, #0]
 80148c4:	f7ff ff22 	bl	801470c <rcl_clock_get_now>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	d1f5      	bne.n	80148b8 <_rcl_timer_time_jump+0x14>
 80148cc:	6820      	ldr	r0, [r4, #0]
 80148ce:	2105      	movs	r1, #5
 80148d0:	3020      	adds	r0, #32
 80148d2:	f001 f989 	bl	8015be8 <__atomic_load_8>
 80148d6:	460b      	mov	r3, r1
 80148d8:	4680      	mov	r8, r0
 80148da:	6820      	ldr	r0, [r4, #0]
 80148dc:	2105      	movs	r1, #5
 80148de:	3028      	adds	r0, #40	; 0x28
 80148e0:	4699      	mov	r9, r3
 80148e2:	f001 f981 	bl	8015be8 <__atomic_load_8>
 80148e6:	460b      	mov	r3, r1
 80148e8:	4606      	mov	r6, r0
 80148ea:	6820      	ldr	r0, [r4, #0]
 80148ec:	2105      	movs	r1, #5
 80148ee:	3018      	adds	r0, #24
 80148f0:	461f      	mov	r7, r3
 80148f2:	f001 f979 	bl	8015be8 <__atomic_load_8>
 80148f6:	f89b 3000 	ldrb.w	r3, [fp]
 80148fa:	4605      	mov	r5, r0
 80148fc:	3b02      	subs	r3, #2
 80148fe:	2b01      	cmp	r3, #1
 8014900:	468a      	mov	sl, r1
 8014902:	d937      	bls.n	8014974 <_rcl_timer_time_jump+0xd0>
 8014904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014908:	42b0      	cmp	r0, r6
 801490a:	eb71 0307 	sbcs.w	r3, r1, r7
 801490e:	da5f      	bge.n	80149d0 <_rcl_timer_time_jump+0x12c>
 8014910:	4540      	cmp	r0, r8
 8014912:	eb71 0309 	sbcs.w	r3, r1, r9
 8014916:	dacf      	bge.n	80148b8 <_rcl_timer_time_jump+0x14>
 8014918:	2605      	movs	r6, #5
 801491a:	182a      	adds	r2, r5, r0
 801491c:	6820      	ldr	r0, [r4, #0]
 801491e:	eb4a 0301 	adc.w	r3, sl, r1
 8014922:	9600      	str	r6, [sp, #0]
 8014924:	3028      	adds	r0, #40	; 0x28
 8014926:	f001 f993 	bl	8015c50 <__atomic_store_8>
 801492a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801492e:	6820      	ldr	r0, [r4, #0]
 8014930:	9600      	str	r6, [sp, #0]
 8014932:	3020      	adds	r0, #32
 8014934:	f001 f98c 	bl	8015c50 <__atomic_store_8>
 8014938:	e7be      	b.n	80148b8 <_rcl_timer_time_jump+0x14>
 801493a:	6813      	ldr	r3, [r2, #0]
 801493c:	a902      	add	r1, sp, #8
 801493e:	6818      	ldr	r0, [r3, #0]
 8014940:	f7ff fee4 	bl	801470c <rcl_clock_get_now>
 8014944:	2800      	cmp	r0, #0
 8014946:	d1b7      	bne.n	80148b8 <_rcl_timer_time_jump+0x14>
 8014948:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801494c:	4313      	orrs	r3, r2
 801494e:	d0b3      	beq.n	80148b8 <_rcl_timer_time_jump+0x14>
 8014950:	6820      	ldr	r0, [r4, #0]
 8014952:	2105      	movs	r1, #5
 8014954:	3028      	adds	r0, #40	; 0x28
 8014956:	f001 f947 	bl	8015be8 <__atomic_load_8>
 801495a:	2505      	movs	r5, #5
 801495c:	9a02      	ldr	r2, [sp, #8]
 801495e:	6824      	ldr	r4, [r4, #0]
 8014960:	9b03      	ldr	r3, [sp, #12]
 8014962:	1a82      	subs	r2, r0, r2
 8014964:	eb61 0303 	sbc.w	r3, r1, r3
 8014968:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801496c:	9500      	str	r5, [sp, #0]
 801496e:	f001 f96f 	bl	8015c50 <__atomic_store_8>
 8014972:	e7a1      	b.n	80148b8 <_rcl_timer_time_jump+0x14>
 8014974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014978:	4313      	orrs	r3, r2
 801497a:	d09d      	beq.n	80148b8 <_rcl_timer_time_jump+0x14>
 801497c:	f04f 0805 	mov.w	r8, #5
 8014980:	6820      	ldr	r0, [r4, #0]
 8014982:	2300      	movs	r3, #0
 8014984:	2200      	movs	r2, #0
 8014986:	f8cd 8000 	str.w	r8, [sp]
 801498a:	3030      	adds	r0, #48	; 0x30
 801498c:	f001 f994 	bl	8015cb8 <__atomic_exchange_8>
 8014990:	4606      	mov	r6, r0
 8014992:	460f      	mov	r7, r1
 8014994:	ea56 0307 	orrs.w	r3, r6, r7
 8014998:	d08e      	beq.n	80148b8 <_rcl_timer_time_jump+0x14>
 801499a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801499e:	1a12      	subs	r2, r2, r0
 80149a0:	6820      	ldr	r0, [r4, #0]
 80149a2:	eb63 0301 	sbc.w	r3, r3, r1
 80149a6:	1952      	adds	r2, r2, r5
 80149a8:	eb43 030a 	adc.w	r3, r3, sl
 80149ac:	f8cd 8000 	str.w	r8, [sp]
 80149b0:	3028      	adds	r0, #40	; 0x28
 80149b2:	f001 f94d 	bl	8015c50 <__atomic_store_8>
 80149b6:	9a02      	ldr	r2, [sp, #8]
 80149b8:	6820      	ldr	r0, [r4, #0]
 80149ba:	9b03      	ldr	r3, [sp, #12]
 80149bc:	1b92      	subs	r2, r2, r6
 80149be:	f100 0020 	add.w	r0, r0, #32
 80149c2:	f8cd 8000 	str.w	r8, [sp]
 80149c6:	eb63 0307 	sbc.w	r3, r3, r7
 80149ca:	f001 f941 	bl	8015c50 <__atomic_store_8>
 80149ce:	e773      	b.n	80148b8 <_rcl_timer_time_jump+0x14>
 80149d0:	6820      	ldr	r0, [r4, #0]
 80149d2:	3008      	adds	r0, #8
 80149d4:	f003 f8ae 	bl	8017b34 <rcl_trigger_guard_condition>
 80149d8:	e76e      	b.n	80148b8 <_rcl_timer_time_jump+0x14>
 80149da:	bf00      	nop

080149dc <rcl_get_zero_initialized_timer>:
 80149dc:	4b01      	ldr	r3, [pc, #4]	; (80149e4 <rcl_get_zero_initialized_timer+0x8>)
 80149de:	6818      	ldr	r0, [r3, #0]
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	0801aa4c 	.word	0x0801aa4c

080149e8 <rcl_timer_init>:
 80149e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ec:	b0ab      	sub	sp, #172	; 0xac
 80149ee:	4604      	mov	r4, r0
 80149f0:	a837      	add	r0, sp, #220	; 0xdc
 80149f2:	460d      	mov	r5, r1
 80149f4:	4617      	mov	r7, r2
 80149f6:	f7f6 fd6b 	bl	800b4d0 <rcutils_allocator_is_valid>
 80149fa:	2800      	cmp	r0, #0
 80149fc:	d06a      	beq.n	8014ad4 <rcl_timer_init+0xec>
 80149fe:	2c00      	cmp	r4, #0
 8014a00:	d068      	beq.n	8014ad4 <rcl_timer_init+0xec>
 8014a02:	2d00      	cmp	r5, #0
 8014a04:	d066      	beq.n	8014ad4 <rcl_timer_init+0xec>
 8014a06:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8014a0a:	2a00      	cmp	r2, #0
 8014a0c:	f173 0300 	sbcs.w	r3, r3, #0
 8014a10:	db60      	blt.n	8014ad4 <rcl_timer_init+0xec>
 8014a12:	6823      	ldr	r3, [r4, #0]
 8014a14:	b123      	cbz	r3, 8014a20 <rcl_timer_init+0x38>
 8014a16:	2664      	movs	r6, #100	; 0x64
 8014a18:	4630      	mov	r0, r6
 8014a1a:	b02b      	add	sp, #172	; 0xac
 8014a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a20:	4628      	mov	r0, r5
 8014a22:	a908      	add	r1, sp, #32
 8014a24:	f7ff fe72 	bl	801470c <rcl_clock_get_now>
 8014a28:	4606      	mov	r6, r0
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	d1f4      	bne.n	8014a18 <rcl_timer_init+0x30>
 8014a2e:	f10d 0b18 	add.w	fp, sp, #24
 8014a32:	ae0b      	add	r6, sp, #44	; 0x2c
 8014a34:	4658      	mov	r0, fp
 8014a36:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8014a3a:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
 8014a3e:	f002 ff87 	bl	8017950 <rcl_get_zero_initialized_guard_condition>
 8014a42:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8014a46:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014a4a:	4630      	mov	r0, r6
 8014a4c:	f003 f85a 	bl	8017b04 <rcl_guard_condition_get_default_options>
 8014a50:	ab0d      	add	r3, sp, #52	; 0x34
 8014a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a56:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014a5a:	4639      	mov	r1, r7
 8014a5c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014a60:	4650      	mov	r0, sl
 8014a62:	f002 ff7f 	bl	8017964 <rcl_guard_condition_init>
 8014a66:	4606      	mov	r6, r0
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d1d5      	bne.n	8014a18 <rcl_timer_init+0x30>
 8014a6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014a6e:	781f      	ldrb	r7, [r3, #0]
 8014a70:	2f01      	cmp	r7, #1
 8014a72:	d034      	beq.n	8014ade <rcl_timer_init+0xf6>
 8014a74:	9b08      	ldr	r3, [sp, #32]
 8014a76:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8014a78:	af37      	add	r7, sp, #220	; 0xdc
 8014a7a:	eb13 0802 	adds.w	r8, r3, r2
 8014a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a80:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8014a82:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 8014a86:	eb43 0902 	adc.w	r9, r3, r2
 8014a8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8014a94:	f04f 0e00 	mov.w	lr, #0
 8014a98:	921a      	str	r2, [sp, #104]	; 0x68
 8014a9a:	2100      	movs	r1, #0
 8014a9c:	f8cc 3000 	str.w	r3, [ip]
 8014aa0:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8014aa4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	4603      	mov	r3, r0
 8014aac:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
 8014ab0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014ab4:	2050      	movs	r0, #80	; 0x50
 8014ab6:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 8014aba:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8014abe:	993b      	ldr	r1, [sp, #236]	; 0xec
 8014ac0:	f88d e090 	strb.w	lr, [sp, #144]	; 0x90
 8014ac4:	4798      	blx	r3
 8014ac6:	6020      	str	r0, [r4, #0]
 8014ac8:	b358      	cbz	r0, 8014b22 <rcl_timer_init+0x13a>
 8014aca:	2250      	movs	r2, #80	; 0x50
 8014acc:	a916      	add	r1, sp, #88	; 0x58
 8014ace:	f003 f98d 	bl	8017dec <memcpy>
 8014ad2:	e7a1      	b.n	8014a18 <rcl_timer_init+0x30>
 8014ad4:	260b      	movs	r6, #11
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	b02b      	add	sp, #172	; 0xac
 8014ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ade:	2001      	movs	r0, #1
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8014aee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014af2:	f8df c044 	ldr.w	ip, [pc, #68]	; 8014b38 <rcl_timer_init+0x150>
 8014af6:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
 8014afa:	9405      	str	r4, [sp, #20]
 8014afc:	ab12      	add	r3, sp, #72	; 0x48
 8014afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b00:	f8cd c010 	str.w	ip, [sp, #16]
 8014b04:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014b08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	f7ff fe09 	bl	8014724 <rcl_clock_add_jump_callback>
 8014b12:	4607      	mov	r7, r0
 8014b14:	2800      	cmp	r0, #0
 8014b16:	d0ad      	beq.n	8014a74 <rcl_timer_init+0x8c>
 8014b18:	4650      	mov	r0, sl
 8014b1a:	f002 ffd1 	bl	8017ac0 <rcl_guard_condition_fini>
 8014b1e:	463e      	mov	r6, r7
 8014b20:	e77a      	b.n	8014a18 <rcl_timer_init+0x30>
 8014b22:	4650      	mov	r0, sl
 8014b24:	f002 ffcc 	bl	8017ac0 <rcl_guard_condition_fini>
 8014b28:	4622      	mov	r2, r4
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	4902      	ldr	r1, [pc, #8]	; (8014b38 <rcl_timer_init+0x150>)
 8014b2e:	f7ff fe5b 	bl	80147e8 <rcl_clock_remove_jump_callback>
 8014b32:	260a      	movs	r6, #10
 8014b34:	e770      	b.n	8014a18 <rcl_timer_init+0x30>
 8014b36:	bf00      	nop
 8014b38:	080148a5 	.word	0x080148a5

08014b3c <rcl_timer_call>:
 8014b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b40:	b08b      	sub	sp, #44	; 0x2c
 8014b42:	2800      	cmp	r0, #0
 8014b44:	d070      	beq.n	8014c28 <rcl_timer_call+0xec>
 8014b46:	6803      	ldr	r3, [r0, #0]
 8014b48:	f3bf 8f5b 	dmb	ish
 8014b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014b50:	4604      	mov	r4, r0
 8014b52:	f3bf 8f5b 	dmb	ish
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d15b      	bne.n	8014c12 <rcl_timer_call+0xd6>
 8014b5a:	6803      	ldr	r3, [r0, #0]
 8014b5c:	a908      	add	r1, sp, #32
 8014b5e:	6818      	ldr	r0, [r3, #0]
 8014b60:	f7ff fdd4 	bl	801470c <rcl_clock_get_now>
 8014b64:	4605      	mov	r5, r0
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d14f      	bne.n	8014c0a <rcl_timer_call+0xce>
 8014b6a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b6e:	2a00      	cmp	r2, #0
 8014b70:	f173 0100 	sbcs.w	r1, r3, #0
 8014b74:	db53      	blt.n	8014c1e <rcl_timer_call+0xe2>
 8014b76:	2605      	movs	r6, #5
 8014b78:	6820      	ldr	r0, [r4, #0]
 8014b7a:	9600      	str	r6, [sp, #0]
 8014b7c:	3020      	adds	r0, #32
 8014b7e:	f001 f89b 	bl	8015cb8 <__atomic_exchange_8>
 8014b82:	6822      	ldr	r2, [r4, #0]
 8014b84:	f3bf 8f5b 	dmb	ish
 8014b88:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8014b8c:	f3bf 8f5b 	dmb	ish
 8014b90:	460b      	mov	r3, r1
 8014b92:	4682      	mov	sl, r0
 8014b94:	6820      	ldr	r0, [r4, #0]
 8014b96:	4631      	mov	r1, r6
 8014b98:	3028      	adds	r0, #40	; 0x28
 8014b9a:	9305      	str	r3, [sp, #20]
 8014b9c:	f001 f824 	bl	8015be8 <__atomic_load_8>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	460a      	mov	r2, r1
 8014ba4:	6820      	ldr	r0, [r4, #0]
 8014ba6:	4631      	mov	r1, r6
 8014ba8:	3018      	adds	r0, #24
 8014baa:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8014bae:	f001 f81b 	bl	8015be8 <__atomic_load_8>
 8014bb2:	4684      	mov	ip, r0
 8014bb4:	468e      	mov	lr, r1
 8014bb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014bba:	9b04      	ldr	r3, [sp, #16]
 8014bbc:	9a03      	ldr	r2, [sp, #12]
 8014bbe:	eb13 080c 	adds.w	r8, r3, ip
 8014bc2:	eb42 090e 	adc.w	r9, r2, lr
 8014bc6:	4580      	cmp	r8, r0
 8014bc8:	eb79 0301 	sbcs.w	r3, r9, r1
 8014bcc:	4666      	mov	r6, ip
 8014bce:	4677      	mov	r7, lr
 8014bd0:	460a      	mov	r2, r1
 8014bd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014bd6:	da04      	bge.n	8014be2 <rcl_timer_call+0xa6>
 8014bd8:	ea56 0307 	orrs.w	r3, r6, r7
 8014bdc:	d129      	bne.n	8014c32 <rcl_timer_call+0xf6>
 8014bde:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8014be2:	2105      	movs	r1, #5
 8014be4:	6820      	ldr	r0, [r4, #0]
 8014be6:	4642      	mov	r2, r8
 8014be8:	464b      	mov	r3, r9
 8014bea:	9100      	str	r1, [sp, #0]
 8014bec:	3028      	adds	r0, #40	; 0x28
 8014bee:	f001 f82f 	bl	8015c50 <__atomic_store_8>
 8014bf2:	f1bb 0f00 	cmp.w	fp, #0
 8014bf6:	d008      	beq.n	8014c0a <rcl_timer_call+0xce>
 8014bf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014bfc:	9905      	ldr	r1, [sp, #20]
 8014bfe:	ebb2 020a 	subs.w	r2, r2, sl
 8014c02:	4620      	mov	r0, r4
 8014c04:	eb63 0301 	sbc.w	r3, r3, r1
 8014c08:	47d8      	blx	fp
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	b00b      	add	sp, #44	; 0x2c
 8014c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c12:	f240 3521 	movw	r5, #801	; 0x321
 8014c16:	4628      	mov	r0, r5
 8014c18:	b00b      	add	sp, #44	; 0x2c
 8014c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1e:	2501      	movs	r5, #1
 8014c20:	4628      	mov	r0, r5
 8014c22:	b00b      	add	sp, #44	; 0x2c
 8014c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c28:	250b      	movs	r5, #11
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	b00b      	add	sp, #44	; 0x2c
 8014c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c32:	ebb0 0008 	subs.w	r0, r0, r8
 8014c36:	eb62 0109 	sbc.w	r1, r2, r9
 8014c3a:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8014c3e:	4673      	mov	r3, lr
 8014c40:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8014c44:	4662      	mov	r2, ip
 8014c46:	f7eb fd89 	bl	800075c <__aeabi_ldivmod>
 8014c4a:	fb00 7307 	mla	r3, r0, r7, r7
 8014c4e:	3001      	adds	r0, #1
 8014c50:	f141 0100 	adc.w	r1, r1, #0
 8014c54:	fb06 3101 	mla	r1, r6, r1, r3
 8014c58:	fba0 6706 	umull	r6, r7, r0, r6
 8014c5c:	440f      	add	r7, r1
 8014c5e:	eb18 0806 	adds.w	r8, r8, r6
 8014c62:	eb49 0907 	adc.w	r9, r9, r7
 8014c66:	e7bc      	b.n	8014be2 <rcl_timer_call+0xa6>

08014c68 <rcl_timer_is_ready>:
 8014c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c6c:	b082      	sub	sp, #8
 8014c6e:	b310      	cbz	r0, 8014cb6 <rcl_timer_is_ready+0x4e>
 8014c70:	4688      	mov	r8, r1
 8014c72:	b301      	cbz	r1, 8014cb6 <rcl_timer_is_ready+0x4e>
 8014c74:	6803      	ldr	r3, [r0, #0]
 8014c76:	4604      	mov	r4, r0
 8014c78:	4669      	mov	r1, sp
 8014c7a:	6818      	ldr	r0, [r3, #0]
 8014c7c:	f7ff fd46 	bl	801470c <rcl_clock_get_now>
 8014c80:	4605      	mov	r5, r0
 8014c82:	b118      	cbz	r0, 8014c8c <rcl_timer_is_ready+0x24>
 8014c84:	4628      	mov	r0, r5
 8014c86:	b002      	add	sp, #8
 8014c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c8c:	6820      	ldr	r0, [r4, #0]
 8014c8e:	2105      	movs	r1, #5
 8014c90:	3028      	adds	r0, #40	; 0x28
 8014c92:	f000 ffa9 	bl	8015be8 <__atomic_load_8>
 8014c96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014c9a:	1ac6      	subs	r6, r0, r3
 8014c9c:	eb61 0702 	sbc.w	r7, r1, r2
 8014ca0:	2e01      	cmp	r6, #1
 8014ca2:	f177 0300 	sbcs.w	r3, r7, #0
 8014ca6:	db0b      	blt.n	8014cc0 <rcl_timer_is_ready+0x58>
 8014ca8:	462b      	mov	r3, r5
 8014caa:	4628      	mov	r0, r5
 8014cac:	f888 3000 	strb.w	r3, [r8]
 8014cb0:	b002      	add	sp, #8
 8014cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cb6:	250b      	movs	r5, #11
 8014cb8:	4628      	mov	r0, r5
 8014cba:	b002      	add	sp, #8
 8014cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cc0:	6823      	ldr	r3, [r4, #0]
 8014cc2:	f3bf 8f5b 	dmb	ish
 8014cc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014cca:	f3bf 8f5b 	dmb	ish
 8014cce:	fab3 f383 	clz	r3, r3
 8014cd2:	095b      	lsrs	r3, r3, #5
 8014cd4:	e7e9      	b.n	8014caa <rcl_timer_is_ready+0x42>
 8014cd6:	bf00      	nop

08014cd8 <rcl_timer_get_time_until_next_call>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	b1d8      	cbz	r0, 8014d16 <rcl_timer_get_time_until_next_call+0x3e>
 8014cde:	460d      	mov	r5, r1
 8014ce0:	b1c9      	cbz	r1, 8014d16 <rcl_timer_get_time_until_next_call+0x3e>
 8014ce2:	6803      	ldr	r3, [r0, #0]
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	4669      	mov	r1, sp
 8014ce8:	6818      	ldr	r0, [r3, #0]
 8014cea:	f7ff fd0f 	bl	801470c <rcl_clock_get_now>
 8014cee:	4606      	mov	r6, r0
 8014cf0:	b110      	cbz	r0, 8014cf8 <rcl_timer_get_time_until_next_call+0x20>
 8014cf2:	4630      	mov	r0, r6
 8014cf4:	b002      	add	sp, #8
 8014cf6:	bd70      	pop	{r4, r5, r6, pc}
 8014cf8:	6820      	ldr	r0, [r4, #0]
 8014cfa:	2105      	movs	r1, #5
 8014cfc:	3028      	adds	r0, #40	; 0x28
 8014cfe:	f000 ff73 	bl	8015be8 <__atomic_load_8>
 8014d02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014d06:	1ac0      	subs	r0, r0, r3
 8014d08:	eb61 0102 	sbc.w	r1, r1, r2
 8014d0c:	e9c5 0100 	strd	r0, r1, [r5]
 8014d10:	4630      	mov	r0, r6
 8014d12:	b002      	add	sp, #8
 8014d14:	bd70      	pop	{r4, r5, r6, pc}
 8014d16:	260b      	movs	r6, #11
 8014d18:	4630      	mov	r0, r6
 8014d1a:	b002      	add	sp, #8
 8014d1c:	bd70      	pop	{r4, r5, r6, pc}
 8014d1e:	bf00      	nop

08014d20 <rcl_timer_is_canceled>:
 8014d20:	b168      	cbz	r0, 8014d3e <rcl_timer_is_canceled+0x1e>
 8014d22:	b161      	cbz	r1, 8014d3e <rcl_timer_is_canceled+0x1e>
 8014d24:	6803      	ldr	r3, [r0, #0]
 8014d26:	f3bf 8f5b 	dmb	ish
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014d30:	f3bf 8f5b 	dmb	ish
 8014d34:	1a1b      	subs	r3, r3, r0
 8014d36:	bf18      	it	ne
 8014d38:	2301      	movne	r3, #1
 8014d3a:	700b      	strb	r3, [r1, #0]
 8014d3c:	4770      	bx	lr
 8014d3e:	200b      	movs	r0, #11
 8014d40:	4770      	bx	lr
 8014d42:	bf00      	nop

08014d44 <rcl_timer_get_guard_condition>:
 8014d44:	b130      	cbz	r0, 8014d54 <rcl_timer_get_guard_condition+0x10>
 8014d46:	6800      	ldr	r0, [r0, #0]
 8014d48:	b120      	cbz	r0, 8014d54 <rcl_timer_get_guard_condition+0x10>
 8014d4a:	68c3      	ldr	r3, [r0, #12]
 8014d4c:	b10b      	cbz	r3, 8014d52 <rcl_timer_get_guard_condition+0xe>
 8014d4e:	3008      	adds	r0, #8
 8014d50:	4770      	bx	lr
 8014d52:	4618      	mov	r0, r3
 8014d54:	4770      	bx	lr
 8014d56:	bf00      	nop

08014d58 <rcl_validate_enclave_name_with_size>:
 8014d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d5a:	b0c3      	sub	sp, #268	; 0x10c
 8014d5c:	b1d0      	cbz	r0, 8014d94 <rcl_validate_enclave_name_with_size+0x3c>
 8014d5e:	4615      	mov	r5, r2
 8014d60:	b1c2      	cbz	r2, 8014d94 <rcl_validate_enclave_name_with_size+0x3c>
 8014d62:	461f      	mov	r7, r3
 8014d64:	466a      	mov	r2, sp
 8014d66:	ab01      	add	r3, sp, #4
 8014d68:	460e      	mov	r6, r1
 8014d6a:	f001 f987 	bl	801607c <rmw_validate_namespace_with_size>
 8014d6e:	4604      	mov	r4, r0
 8014d70:	b9e0      	cbnz	r0, 8014dac <rcl_validate_enclave_name_with_size+0x54>
 8014d72:	9b00      	ldr	r3, [sp, #0]
 8014d74:	b923      	cbnz	r3, 8014d80 <rcl_validate_enclave_name_with_size+0x28>
 8014d76:	2300      	movs	r3, #0
 8014d78:	602b      	str	r3, [r5, #0]
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	b043      	add	sp, #268	; 0x10c
 8014d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d80:	2b07      	cmp	r3, #7
 8014d82:	d00b      	beq.n	8014d9c <rcl_validate_enclave_name_with_size+0x44>
 8014d84:	1e5a      	subs	r2, r3, #1
 8014d86:	2a05      	cmp	r2, #5
 8014d88:	d82e      	bhi.n	8014de8 <rcl_validate_enclave_name_with_size+0x90>
 8014d8a:	e8df f002 	tbb	[pc, r2]
 8014d8e:	211e      	.short	0x211e
 8014d90:	152a2724 	.word	0x152a2724
 8014d94:	240b      	movs	r4, #11
 8014d96:	4620      	mov	r0, r4
 8014d98:	b043      	add	sp, #268	; 0x10c
 8014d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d9c:	2eff      	cmp	r6, #255	; 0xff
 8014d9e:	d9ea      	bls.n	8014d76 <rcl_validate_enclave_name_with_size+0x1e>
 8014da0:	602b      	str	r3, [r5, #0]
 8014da2:	2f00      	cmp	r7, #0
 8014da4:	d0e9      	beq.n	8014d7a <rcl_validate_enclave_name_with_size+0x22>
 8014da6:	23fe      	movs	r3, #254	; 0xfe
 8014da8:	603b      	str	r3, [r7, #0]
 8014daa:	e7e6      	b.n	8014d7a <rcl_validate_enclave_name_with_size+0x22>
 8014dac:	f7fe fdb0 	bl	8013910 <rcl_convert_rmw_ret_to_rcl_ret>
 8014db0:	4604      	mov	r4, r0
 8014db2:	4620      	mov	r0, r4
 8014db4:	b043      	add	sp, #268	; 0x10c
 8014db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014db8:	2306      	movs	r3, #6
 8014dba:	602b      	str	r3, [r5, #0]
 8014dbc:	2f00      	cmp	r7, #0
 8014dbe:	d0dc      	beq.n	8014d7a <rcl_validate_enclave_name_with_size+0x22>
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	9b01      	ldr	r3, [sp, #4]
 8014dc4:	603b      	str	r3, [r7, #0]
 8014dc6:	b043      	add	sp, #268	; 0x10c
 8014dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014dca:	2301      	movs	r3, #1
 8014dcc:	602b      	str	r3, [r5, #0]
 8014dce:	e7f5      	b.n	8014dbc <rcl_validate_enclave_name_with_size+0x64>
 8014dd0:	2302      	movs	r3, #2
 8014dd2:	602b      	str	r3, [r5, #0]
 8014dd4:	e7f2      	b.n	8014dbc <rcl_validate_enclave_name_with_size+0x64>
 8014dd6:	2303      	movs	r3, #3
 8014dd8:	602b      	str	r3, [r5, #0]
 8014dda:	e7ef      	b.n	8014dbc <rcl_validate_enclave_name_with_size+0x64>
 8014ddc:	2304      	movs	r3, #4
 8014dde:	602b      	str	r3, [r5, #0]
 8014de0:	e7ec      	b.n	8014dbc <rcl_validate_enclave_name_with_size+0x64>
 8014de2:	2305      	movs	r3, #5
 8014de4:	602b      	str	r3, [r5, #0]
 8014de6:	e7e9      	b.n	8014dbc <rcl_validate_enclave_name_with_size+0x64>
 8014de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014dec:	4a02      	ldr	r2, [pc, #8]	; (8014df8 <rcl_validate_enclave_name_with_size+0xa0>)
 8014dee:	a802      	add	r0, sp, #8
 8014df0:	f001 f8d0 	bl	8015f94 <rcutils_snprintf>
 8014df4:	2401      	movs	r4, #1
 8014df6:	e7c0      	b.n	8014d7a <rcl_validate_enclave_name_with_size+0x22>
 8014df8:	0801aa50 	.word	0x0801aa50

08014dfc <rcl_validate_enclave_name>:
 8014dfc:	b168      	cbz	r0, 8014e1a <rcl_validate_enclave_name+0x1e>
 8014dfe:	b570      	push	{r4, r5, r6, lr}
 8014e00:	460d      	mov	r5, r1
 8014e02:	4616      	mov	r6, r2
 8014e04:	4604      	mov	r4, r0
 8014e06:	f7eb fa1d 	bl	8000244 <strlen>
 8014e0a:	4633      	mov	r3, r6
 8014e0c:	4601      	mov	r1, r0
 8014e0e:	462a      	mov	r2, r5
 8014e10:	4620      	mov	r0, r4
 8014e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e16:	f7ff bf9f 	b.w	8014d58 <rcl_validate_enclave_name_with_size>
 8014e1a:	200b      	movs	r0, #11
 8014e1c:	4770      	bx	lr
 8014e1e:	bf00      	nop

08014e20 <rcl_validate_topic_name>:
 8014e20:	2800      	cmp	r0, #0
 8014e22:	f000 808c 	beq.w	8014f3e <rcl_validate_topic_name+0x11e>
 8014e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e2a:	460e      	mov	r6, r1
 8014e2c:	2900      	cmp	r1, #0
 8014e2e:	f000 808d 	beq.w	8014f4c <rcl_validate_topic_name+0x12c>
 8014e32:	4617      	mov	r7, r2
 8014e34:	4605      	mov	r5, r0
 8014e36:	f7eb fa05 	bl	8000244 <strlen>
 8014e3a:	b1b0      	cbz	r0, 8014e6a <rcl_validate_topic_name+0x4a>
 8014e3c:	f895 9000 	ldrb.w	r9, [r5]
 8014e40:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8014fe8 <rcl_validate_topic_name+0x1c8>
 8014e44:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014e48:	f013 0304 	ands.w	r3, r3, #4
 8014e4c:	d179      	bne.n	8014f42 <rcl_validate_topic_name+0x122>
 8014e4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014e52:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014e56:	2a2f      	cmp	r2, #47	; 0x2f
 8014e58:	d10e      	bne.n	8014e78 <rcl_validate_topic_name+0x58>
 8014e5a:	2202      	movs	r2, #2
 8014e5c:	6032      	str	r2, [r6, #0]
 8014e5e:	b377      	cbz	r7, 8014ebe <rcl_validate_topic_name+0x9e>
 8014e60:	4618      	mov	r0, r3
 8014e62:	f8c7 8000 	str.w	r8, [r7]
 8014e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	6033      	str	r3, [r6, #0]
 8014e6e:	b337      	cbz	r7, 8014ebe <rcl_validate_topic_name+0x9e>
 8014e70:	2000      	movs	r0, #0
 8014e72:	6038      	str	r0, [r7, #0]
 8014e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e78:	461c      	mov	r4, r3
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8014e80:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014e84:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014e88:	f1be 0f09 	cmp.w	lr, #9
 8014e8c:	d947      	bls.n	8014f1e <rcl_validate_topic_name+0xfe>
 8014e8e:	f022 0e20 	bic.w	lr, r2, #32
 8014e92:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8014e96:	f1be 0f19 	cmp.w	lr, #25
 8014e9a:	d940      	bls.n	8014f1e <rcl_validate_topic_name+0xfe>
 8014e9c:	2a5f      	cmp	r2, #95	; 0x5f
 8014e9e:	d015      	beq.n	8014ecc <rcl_validate_topic_name+0xac>
 8014ea0:	2a2f      	cmp	r2, #47	; 0x2f
 8014ea2:	d072      	beq.n	8014f8a <rcl_validate_topic_name+0x16a>
 8014ea4:	2a7e      	cmp	r2, #126	; 0x7e
 8014ea6:	d053      	beq.n	8014f50 <rcl_validate_topic_name+0x130>
 8014ea8:	2a7b      	cmp	r2, #123	; 0x7b
 8014eaa:	d00b      	beq.n	8014ec4 <rcl_validate_topic_name+0xa4>
 8014eac:	2a7d      	cmp	r2, #125	; 0x7d
 8014eae:	f040 808a 	bne.w	8014fc6 <rcl_validate_topic_name+0x1a6>
 8014eb2:	2c00      	cmp	r4, #0
 8014eb4:	d174      	bne.n	8014fa0 <rcl_validate_topic_name+0x180>
 8014eb6:	2305      	movs	r3, #5
 8014eb8:	6033      	str	r3, [r6, #0]
 8014eba:	b107      	cbz	r7, 8014ebe <rcl_validate_topic_name+0x9e>
 8014ebc:	6039      	str	r1, [r7, #0]
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ec4:	2c00      	cmp	r4, #0
 8014ec6:	d162      	bne.n	8014f8e <rcl_validate_topic_name+0x16e>
 8014ec8:	460b      	mov	r3, r1
 8014eca:	2401      	movs	r4, #1
 8014ecc:	3101      	adds	r1, #1
 8014ece:	4288      	cmp	r0, r1
 8014ed0:	d1d6      	bne.n	8014e80 <rcl_validate_topic_name+0x60>
 8014ed2:	2c00      	cmp	r4, #0
 8014ed4:	d16c      	bne.n	8014fb0 <rcl_validate_topic_name+0x190>
 8014ed6:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014eda:	4620      	mov	r0, r4
 8014edc:	f108 0401 	add.w	r4, r8, #1
 8014ee0:	d108      	bne.n	8014ef4 <rcl_validate_topic_name+0xd4>
 8014ee2:	e044      	b.n	8014f6e <rcl_validate_topic_name+0x14e>
 8014ee4:	2801      	cmp	r0, #1
 8014ee6:	d05d      	beq.n	8014fa4 <rcl_validate_topic_name+0x184>
 8014ee8:	461a      	mov	r2, r3
 8014eea:	4291      	cmp	r1, r2
 8014eec:	4618      	mov	r0, r3
 8014eee:	f105 0501 	add.w	r5, r5, #1
 8014ef2:	d95a      	bls.n	8014faa <rcl_validate_topic_name+0x18a>
 8014ef4:	4580      	cmp	r8, r0
 8014ef6:	f100 0301 	add.w	r3, r0, #1
 8014efa:	d04d      	beq.n	8014f98 <rcl_validate_topic_name+0x178>
 8014efc:	782a      	ldrb	r2, [r5, #0]
 8014efe:	2a2f      	cmp	r2, #47	; 0x2f
 8014f00:	d1f0      	bne.n	8014ee4 <rcl_validate_topic_name+0xc4>
 8014f02:	786a      	ldrb	r2, [r5, #1]
 8014f04:	1c43      	adds	r3, r0, #1
 8014f06:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8014f0a:	461a      	mov	r2, r3
 8014f0c:	0740      	lsls	r0, r0, #29
 8014f0e:	d5ec      	bpl.n	8014eea <rcl_validate_topic_name+0xca>
 8014f10:	2304      	movs	r3, #4
 8014f12:	6033      	str	r3, [r6, #0]
 8014f14:	2f00      	cmp	r7, #0
 8014f16:	d0d2      	beq.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014f18:	2000      	movs	r0, #0
 8014f1a:	603a      	str	r2, [r7, #0]
 8014f1c:	e7aa      	b.n	8014e74 <rcl_validate_topic_name+0x54>
 8014f1e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014f22:	0752      	lsls	r2, r2, #29
 8014f24:	d5d2      	bpl.n	8014ecc <rcl_validate_topic_name+0xac>
 8014f26:	2c00      	cmp	r4, #0
 8014f28:	d0d0      	beq.n	8014ecc <rcl_validate_topic_name+0xac>
 8014f2a:	2900      	cmp	r1, #0
 8014f2c:	d0ce      	beq.n	8014ecc <rcl_validate_topic_name+0xac>
 8014f2e:	1e4a      	subs	r2, r1, #1
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d1cb      	bne.n	8014ecc <rcl_validate_topic_name+0xac>
 8014f34:	2309      	movs	r3, #9
 8014f36:	6033      	str	r3, [r6, #0]
 8014f38:	2f00      	cmp	r7, #0
 8014f3a:	d1bf      	bne.n	8014ebc <rcl_validate_topic_name+0x9c>
 8014f3c:	e7bf      	b.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014f3e:	200b      	movs	r0, #11
 8014f40:	4770      	bx	lr
 8014f42:	2304      	movs	r3, #4
 8014f44:	6033      	str	r3, [r6, #0]
 8014f46:	2f00      	cmp	r7, #0
 8014f48:	d192      	bne.n	8014e70 <rcl_validate_topic_name+0x50>
 8014f4a:	e7b8      	b.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014f4c:	200b      	movs	r0, #11
 8014f4e:	e791      	b.n	8014e74 <rcl_validate_topic_name+0x54>
 8014f50:	2900      	cmp	r1, #0
 8014f52:	d0bb      	beq.n	8014ecc <rcl_validate_topic_name+0xac>
 8014f54:	2306      	movs	r3, #6
 8014f56:	6033      	str	r3, [r6, #0]
 8014f58:	2f00      	cmp	r7, #0
 8014f5a:	d1af      	bne.n	8014ebc <rcl_validate_topic_name+0x9c>
 8014f5c:	e7af      	b.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014f5e:	2801      	cmp	r0, #1
 8014f60:	d03a      	beq.n	8014fd8 <rcl_validate_topic_name+0x1b8>
 8014f62:	461a      	mov	r2, r3
 8014f64:	4291      	cmp	r1, r2
 8014f66:	4618      	mov	r0, r3
 8014f68:	f105 0501 	add.w	r5, r5, #1
 8014f6c:	d91d      	bls.n	8014faa <rcl_validate_topic_name+0x18a>
 8014f6e:	4580      	cmp	r8, r0
 8014f70:	f100 0301 	add.w	r3, r0, #1
 8014f74:	d023      	beq.n	8014fbe <rcl_validate_topic_name+0x19e>
 8014f76:	782a      	ldrb	r2, [r5, #0]
 8014f78:	2a2f      	cmp	r2, #47	; 0x2f
 8014f7a:	d1f0      	bne.n	8014f5e <rcl_validate_topic_name+0x13e>
 8014f7c:	786a      	ldrb	r2, [r5, #1]
 8014f7e:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8014f82:	461a      	mov	r2, r3
 8014f84:	0740      	lsls	r0, r0, #29
 8014f86:	d5ed      	bpl.n	8014f64 <rcl_validate_topic_name+0x144>
 8014f88:	e7c2      	b.n	8014f10 <rcl_validate_topic_name+0xf0>
 8014f8a:	2c00      	cmp	r4, #0
 8014f8c:	d09e      	beq.n	8014ecc <rcl_validate_topic_name+0xac>
 8014f8e:	2308      	movs	r3, #8
 8014f90:	6033      	str	r3, [r6, #0]
 8014f92:	2f00      	cmp	r7, #0
 8014f94:	d192      	bne.n	8014ebc <rcl_validate_topic_name+0x9c>
 8014f96:	e792      	b.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014f98:	4622      	mov	r2, r4
 8014f9a:	f108 0301 	add.w	r3, r8, #1
 8014f9e:	e7a4      	b.n	8014eea <rcl_validate_topic_name+0xca>
 8014fa0:	2400      	movs	r4, #0
 8014fa2:	e793      	b.n	8014ecc <rcl_validate_topic_name+0xac>
 8014fa4:	2202      	movs	r2, #2
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	e79f      	b.n	8014eea <rcl_validate_topic_name+0xca>
 8014faa:	2000      	movs	r0, #0
 8014fac:	6030      	str	r0, [r6, #0]
 8014fae:	e761      	b.n	8014e74 <rcl_validate_topic_name+0x54>
 8014fb0:	2205      	movs	r2, #5
 8014fb2:	6032      	str	r2, [r6, #0]
 8014fb4:	2f00      	cmp	r7, #0
 8014fb6:	d082      	beq.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014fb8:	2000      	movs	r0, #0
 8014fba:	603b      	str	r3, [r7, #0]
 8014fbc:	e75a      	b.n	8014e74 <rcl_validate_topic_name+0x54>
 8014fbe:	4622      	mov	r2, r4
 8014fc0:	f108 0301 	add.w	r3, r8, #1
 8014fc4:	e7ce      	b.n	8014f64 <rcl_validate_topic_name+0x144>
 8014fc6:	2c00      	cmp	r4, #0
 8014fc8:	bf14      	ite	ne
 8014fca:	2308      	movne	r3, #8
 8014fcc:	2303      	moveq	r3, #3
 8014fce:	6033      	str	r3, [r6, #0]
 8014fd0:	2f00      	cmp	r7, #0
 8014fd2:	f47f af73 	bne.w	8014ebc <rcl_validate_topic_name+0x9c>
 8014fd6:	e772      	b.n	8014ebe <rcl_validate_topic_name+0x9e>
 8014fd8:	2307      	movs	r3, #7
 8014fda:	6033      	str	r3, [r6, #0]
 8014fdc:	2f00      	cmp	r7, #0
 8014fde:	f43f af6e 	beq.w	8014ebe <rcl_validate_topic_name+0x9e>
 8014fe2:	6038      	str	r0, [r7, #0]
 8014fe4:	2000      	movs	r0, #0
 8014fe6:	e745      	b.n	8014e74 <rcl_validate_topic_name+0x54>
 8014fe8:	0801af71 	.word	0x0801af71

08014fec <rcl_get_zero_initialized_wait_set>:
 8014fec:	b470      	push	{r4, r5, r6}
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	4d06      	ldr	r5, [pc, #24]	; (801500c <rcl_get_zero_initialized_wait_set+0x20>)
 8014ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015000:	682b      	ldr	r3, [r5, #0]
 8015002:	4630      	mov	r0, r6
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	bc70      	pop	{r4, r5, r6}
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	0801aab0 	.word	0x0801aab0

08015010 <rcl_wait_set_is_valid>:
 8015010:	b118      	cbz	r0, 801501a <rcl_wait_set_is_valid+0xa>
 8015012:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015014:	3800      	subs	r0, #0
 8015016:	bf18      	it	ne
 8015018:	2001      	movne	r0, #1
 801501a:	4770      	bx	lr

0801501c <rcl_wait_set_fini>:
 801501c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015020:	b083      	sub	sp, #12
 8015022:	2800      	cmp	r0, #0
 8015024:	f000 8098 	beq.w	8015158 <rcl_wait_set_fini+0x13c>
 8015028:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801502a:	4604      	mov	r4, r0
 801502c:	2e00      	cmp	r6, #0
 801502e:	f000 808f 	beq.w	8015150 <rcl_wait_set_fini+0x134>
 8015032:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015034:	f001 fd44 	bl	8016ac0 <rmw_destroy_wait_set>
 8015038:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801503a:	1e06      	subs	r6, r0, #0
 801503c:	bf18      	it	ne
 801503e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015042:	2d00      	cmp	r5, #0
 8015044:	f000 8084 	beq.w	8015150 <rcl_wait_set_fini+0x134>
 8015048:	2700      	movs	r7, #0
 801504a:	6820      	ldr	r0, [r4, #0]
 801504c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015050:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8015054:	6067      	str	r7, [r4, #4]
 8015056:	602f      	str	r7, [r5, #0]
 8015058:	b118      	cbz	r0, 8015062 <rcl_wait_set_fini+0x46>
 801505a:	4649      	mov	r1, r9
 801505c:	47c0      	blx	r8
 801505e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015060:	6027      	str	r7, [r4, #0]
 8015062:	68a8      	ldr	r0, [r5, #8]
 8015064:	b128      	cbz	r0, 8015072 <rcl_wait_set_fini+0x56>
 8015066:	4649      	mov	r1, r9
 8015068:	47c0      	blx	r8
 801506a:	2300      	movs	r3, #0
 801506c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801506e:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015072:	f04f 0800 	mov.w	r8, #0
 8015076:	68a0      	ldr	r0, [r4, #8]
 8015078:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801507a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801507c:	f8c4 800c 	str.w	r8, [r4, #12]
 8015080:	f8c5 800c 	str.w	r8, [r5, #12]
 8015084:	b128      	cbz	r0, 8015092 <rcl_wait_set_fini+0x76>
 8015086:	47b8      	blx	r7
 8015088:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801508a:	f8c4 8008 	str.w	r8, [r4, #8]
 801508e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015090:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015092:	f04f 0800 	mov.w	r8, #0
 8015096:	6968      	ldr	r0, [r5, #20]
 8015098:	f8c5 8010 	str.w	r8, [r5, #16]
 801509c:	b128      	cbz	r0, 80150aa <rcl_wait_set_fini+0x8e>
 801509e:	47b8      	blx	r7
 80150a0:	f8c5 8014 	str.w	r8, [r5, #20]
 80150a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80150a6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80150a8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80150aa:	f04f 0800 	mov.w	r8, #0
 80150ae:	6920      	ldr	r0, [r4, #16]
 80150b0:	f8c4 8014 	str.w	r8, [r4, #20]
 80150b4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80150b8:	b128      	cbz	r0, 80150c6 <rcl_wait_set_fini+0xaa>
 80150ba:	47b8      	blx	r7
 80150bc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80150be:	f8c4 8010 	str.w	r8, [r4, #16]
 80150c2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80150c4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80150c6:	f04f 0800 	mov.w	r8, #0
 80150ca:	69a0      	ldr	r0, [r4, #24]
 80150cc:	f8c4 801c 	str.w	r8, [r4, #28]
 80150d0:	f8c5 8018 	str.w	r8, [r5, #24]
 80150d4:	b128      	cbz	r0, 80150e2 <rcl_wait_set_fini+0xc6>
 80150d6:	9101      	str	r1, [sp, #4]
 80150d8:	47b8      	blx	r7
 80150da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80150dc:	9901      	ldr	r1, [sp, #4]
 80150de:	f8c4 8018 	str.w	r8, [r4, #24]
 80150e2:	6a28      	ldr	r0, [r5, #32]
 80150e4:	b120      	cbz	r0, 80150f0 <rcl_wait_set_fini+0xd4>
 80150e6:	47b8      	blx	r7
 80150e8:	2300      	movs	r3, #0
 80150ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80150ec:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80150f0:	2700      	movs	r7, #0
 80150f2:	6a20      	ldr	r0, [r4, #32]
 80150f4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80150f8:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 80150fc:	6267      	str	r7, [r4, #36]	; 0x24
 80150fe:	626f      	str	r7, [r5, #36]	; 0x24
 8015100:	b118      	cbz	r0, 801510a <rcl_wait_set_fini+0xee>
 8015102:	4649      	mov	r1, r9
 8015104:	47c0      	blx	r8
 8015106:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015108:	6227      	str	r7, [r4, #32]
 801510a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801510c:	b128      	cbz	r0, 801511a <rcl_wait_set_fini+0xfe>
 801510e:	4649      	mov	r1, r9
 8015110:	47c0      	blx	r8
 8015112:	2300      	movs	r3, #0
 8015114:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015116:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801511a:	2700      	movs	r7, #0
 801511c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801511e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015122:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8015126:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015128:	632f      	str	r7, [r5, #48]	; 0x30
 801512a:	b118      	cbz	r0, 8015134 <rcl_wait_set_fini+0x118>
 801512c:	4649      	mov	r1, r9
 801512e:	47c0      	blx	r8
 8015130:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015132:	62a7      	str	r7, [r4, #40]	; 0x28
 8015134:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015136:	b128      	cbz	r0, 8015144 <rcl_wait_set_fini+0x128>
 8015138:	4649      	mov	r1, r9
 801513a:	47c0      	blx	r8
 801513c:	2300      	movs	r3, #0
 801513e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015140:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015144:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015146:	4628      	mov	r0, r5
 8015148:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801514a:	4798      	blx	r3
 801514c:	2300      	movs	r3, #0
 801514e:	6323      	str	r3, [r4, #48]	; 0x30
 8015150:	4630      	mov	r0, r6
 8015152:	b003      	add	sp, #12
 8015154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015158:	260b      	movs	r6, #11
 801515a:	4630      	mov	r0, r6
 801515c:	b003      	add	sp, #12
 801515e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015162:	bf00      	nop

08015164 <rcl_wait_set_add_subscription>:
 8015164:	b320      	cbz	r0, 80151b0 <rcl_wait_set_add_subscription+0x4c>
 8015166:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015168:	b570      	push	{r4, r5, r6, lr}
 801516a:	4604      	mov	r4, r0
 801516c:	b1d3      	cbz	r3, 80151a4 <rcl_wait_set_add_subscription+0x40>
 801516e:	b319      	cbz	r1, 80151b8 <rcl_wait_set_add_subscription+0x54>
 8015170:	681d      	ldr	r5, [r3, #0]
 8015172:	6860      	ldr	r0, [r4, #4]
 8015174:	4285      	cmp	r5, r0
 8015176:	d218      	bcs.n	80151aa <rcl_wait_set_add_subscription+0x46>
 8015178:	6820      	ldr	r0, [r4, #0]
 801517a:	1c6e      	adds	r6, r5, #1
 801517c:	601e      	str	r6, [r3, #0]
 801517e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015182:	b102      	cbz	r2, 8015186 <rcl_wait_set_add_subscription+0x22>
 8015184:	6015      	str	r5, [r2, #0]
 8015186:	4608      	mov	r0, r1
 8015188:	f7f5 fccc 	bl	800ab24 <rcl_subscription_get_rmw_handle>
 801518c:	b190      	cbz	r0, 80151b4 <rcl_wait_set_add_subscription+0x50>
 801518e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015190:	6842      	ldr	r2, [r0, #4]
 8015192:	689b      	ldr	r3, [r3, #8]
 8015194:	2000      	movs	r0, #0
 8015196:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801519a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801519c:	6853      	ldr	r3, [r2, #4]
 801519e:	3301      	adds	r3, #1
 80151a0:	6053      	str	r3, [r2, #4]
 80151a2:	bd70      	pop	{r4, r5, r6, pc}
 80151a4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80151a8:	bd70      	pop	{r4, r5, r6, pc}
 80151aa:	f240 3086 	movw	r0, #902	; 0x386
 80151ae:	bd70      	pop	{r4, r5, r6, pc}
 80151b0:	200b      	movs	r0, #11
 80151b2:	4770      	bx	lr
 80151b4:	2001      	movs	r0, #1
 80151b6:	bd70      	pop	{r4, r5, r6, pc}
 80151b8:	200b      	movs	r0, #11
 80151ba:	bd70      	pop	{r4, r5, r6, pc}

080151bc <rcl_wait_set_clear>:
 80151bc:	2800      	cmp	r0, #0
 80151be:	d074      	beq.n	80152aa <rcl_wait_set_clear+0xee>
 80151c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80151c2:	b510      	push	{r4, lr}
 80151c4:	4604      	mov	r4, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d071      	beq.n	80152ae <rcl_wait_set_clear+0xf2>
 80151ca:	6800      	ldr	r0, [r0, #0]
 80151cc:	b138      	cbz	r0, 80151de <rcl_wait_set_clear+0x22>
 80151ce:	6862      	ldr	r2, [r4, #4]
 80151d0:	2100      	movs	r1, #0
 80151d2:	0092      	lsls	r2, r2, #2
 80151d4:	f002 fe32 	bl	8017e3c <memset>
 80151d8:	2200      	movs	r2, #0
 80151da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80151dc:	601a      	str	r2, [r3, #0]
 80151de:	68a0      	ldr	r0, [r4, #8]
 80151e0:	b138      	cbz	r0, 80151f2 <rcl_wait_set_clear+0x36>
 80151e2:	68e2      	ldr	r2, [r4, #12]
 80151e4:	2100      	movs	r1, #0
 80151e6:	0092      	lsls	r2, r2, #2
 80151e8:	f002 fe28 	bl	8017e3c <memset>
 80151ec:	2200      	movs	r2, #0
 80151ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80151f0:	60da      	str	r2, [r3, #12]
 80151f2:	69a0      	ldr	r0, [r4, #24]
 80151f4:	b138      	cbz	r0, 8015206 <rcl_wait_set_clear+0x4a>
 80151f6:	69e2      	ldr	r2, [r4, #28]
 80151f8:	2100      	movs	r1, #0
 80151fa:	0092      	lsls	r2, r2, #2
 80151fc:	f002 fe1e 	bl	8017e3c <memset>
 8015200:	2200      	movs	r2, #0
 8015202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015204:	619a      	str	r2, [r3, #24]
 8015206:	6a20      	ldr	r0, [r4, #32]
 8015208:	b138      	cbz	r0, 801521a <rcl_wait_set_clear+0x5e>
 801520a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801520c:	2100      	movs	r1, #0
 801520e:	0092      	lsls	r2, r2, #2
 8015210:	f002 fe14 	bl	8017e3c <memset>
 8015214:	2200      	movs	r2, #0
 8015216:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015218:	625a      	str	r2, [r3, #36]	; 0x24
 801521a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801521c:	b138      	cbz	r0, 801522e <rcl_wait_set_clear+0x72>
 801521e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015220:	2100      	movs	r1, #0
 8015222:	0092      	lsls	r2, r2, #2
 8015224:	f002 fe0a 	bl	8017e3c <memset>
 8015228:	2200      	movs	r2, #0
 801522a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801522c:	631a      	str	r2, [r3, #48]	; 0x30
 801522e:	6920      	ldr	r0, [r4, #16]
 8015230:	b138      	cbz	r0, 8015242 <rcl_wait_set_clear+0x86>
 8015232:	6962      	ldr	r2, [r4, #20]
 8015234:	2100      	movs	r1, #0
 8015236:	0092      	lsls	r2, r2, #2
 8015238:	f002 fe00 	bl	8017e3c <memset>
 801523c:	2200      	movs	r2, #0
 801523e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015240:	641a      	str	r2, [r3, #64]	; 0x40
 8015242:	6898      	ldr	r0, [r3, #8]
 8015244:	b138      	cbz	r0, 8015256 <rcl_wait_set_clear+0x9a>
 8015246:	685a      	ldr	r2, [r3, #4]
 8015248:	2100      	movs	r1, #0
 801524a:	0092      	lsls	r2, r2, #2
 801524c:	f002 fdf6 	bl	8017e3c <memset>
 8015250:	2200      	movs	r2, #0
 8015252:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015254:	605a      	str	r2, [r3, #4]
 8015256:	6958      	ldr	r0, [r3, #20]
 8015258:	b138      	cbz	r0, 801526a <rcl_wait_set_clear+0xae>
 801525a:	691a      	ldr	r2, [r3, #16]
 801525c:	2100      	movs	r1, #0
 801525e:	0092      	lsls	r2, r2, #2
 8015260:	f002 fdec 	bl	8017e3c <memset>
 8015264:	2200      	movs	r2, #0
 8015266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015268:	611a      	str	r2, [r3, #16]
 801526a:	6a18      	ldr	r0, [r3, #32]
 801526c:	b138      	cbz	r0, 801527e <rcl_wait_set_clear+0xc2>
 801526e:	69da      	ldr	r2, [r3, #28]
 8015270:	2100      	movs	r1, #0
 8015272:	0092      	lsls	r2, r2, #2
 8015274:	f002 fde2 	bl	8017e3c <memset>
 8015278:	2200      	movs	r2, #0
 801527a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801527c:	61da      	str	r2, [r3, #28]
 801527e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015280:	b138      	cbz	r0, 8015292 <rcl_wait_set_clear+0xd6>
 8015282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015284:	2100      	movs	r1, #0
 8015286:	0092      	lsls	r2, r2, #2
 8015288:	f002 fdd8 	bl	8017e3c <memset>
 801528c:	2200      	movs	r2, #0
 801528e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015290:	629a      	str	r2, [r3, #40]	; 0x28
 8015292:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015294:	b140      	cbz	r0, 80152a8 <rcl_wait_set_clear+0xec>
 8015296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015298:	2100      	movs	r1, #0
 801529a:	0092      	lsls	r2, r2, #2
 801529c:	f002 fdce 	bl	8017e3c <memset>
 80152a0:	2300      	movs	r3, #0
 80152a2:	4618      	mov	r0, r3
 80152a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80152a6:	6353      	str	r3, [r2, #52]	; 0x34
 80152a8:	bd10      	pop	{r4, pc}
 80152aa:	200b      	movs	r0, #11
 80152ac:	4770      	bx	lr
 80152ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 80152b2:	bd10      	pop	{r4, pc}

080152b4 <rcl_wait_set_resize>:
 80152b4:	2800      	cmp	r0, #0
 80152b6:	f000 81a7 	beq.w	8015608 <rcl_wait_set_resize+0x354>
 80152ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152be:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80152c2:	4604      	mov	r4, r0
 80152c4:	b083      	sub	sp, #12
 80152c6:	f1ba 0f00 	cmp.w	sl, #0
 80152ca:	f000 819f 	beq.w	801560c <rcl_wait_set_resize+0x358>
 80152ce:	f04f 0800 	mov.w	r8, #0
 80152d2:	461e      	mov	r6, r3
 80152d4:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80152d8:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80152dc:	460f      	mov	r7, r1
 80152de:	f8c0 8004 	str.w	r8, [r0, #4]
 80152e2:	4615      	mov	r5, r2
 80152e4:	9300      	str	r3, [sp, #0]
 80152e6:	f8ca 8000 	str.w	r8, [sl]
 80152ea:	2900      	cmp	r1, #0
 80152ec:	f000 80ca 	beq.w	8015484 <rcl_wait_set_resize+0x1d0>
 80152f0:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80152f4:	4651      	mov	r1, sl
 80152f6:	464a      	mov	r2, r9
 80152f8:	6800      	ldr	r0, [r0, #0]
 80152fa:	4798      	blx	r3
 80152fc:	6020      	str	r0, [r4, #0]
 80152fe:	2800      	cmp	r0, #0
 8015300:	f000 80d9 	beq.w	80154b6 <rcl_wait_set_resize+0x202>
 8015304:	4652      	mov	r2, sl
 8015306:	4641      	mov	r1, r8
 8015308:	f002 fd98 	bl	8017e3c <memset>
 801530c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801530e:	6067      	str	r7, [r4, #4]
 8015310:	464a      	mov	r2, r9
 8015312:	6898      	ldr	r0, [r3, #8]
 8015314:	f8c3 8004 	str.w	r8, [r3, #4]
 8015318:	9301      	str	r3, [sp, #4]
 801531a:	4651      	mov	r1, sl
 801531c:	9b00      	ldr	r3, [sp, #0]
 801531e:	4798      	blx	r3
 8015320:	9b01      	ldr	r3, [sp, #4]
 8015322:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015324:	6098      	str	r0, [r3, #8]
 8015326:	6897      	ldr	r7, [r2, #8]
 8015328:	2f00      	cmp	r7, #0
 801532a:	f000 80bf 	beq.w	80154ac <rcl_wait_set_resize+0x1f8>
 801532e:	4652      	mov	r2, sl
 8015330:	4641      	mov	r1, r8
 8015332:	4638      	mov	r0, r7
 8015334:	f002 fd82 	bl	8017e3c <memset>
 8015338:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801533c:	2700      	movs	r7, #0
 801533e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8015342:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015346:	60e7      	str	r7, [r4, #12]
 8015348:	f8ca 700c 	str.w	r7, [sl, #12]
 801534c:	2d00      	cmp	r5, #0
 801534e:	f040 80b6 	bne.w	80154be <rcl_wait_set_resize+0x20a>
 8015352:	68a0      	ldr	r0, [r4, #8]
 8015354:	b130      	cbz	r0, 8015364 <rcl_wait_set_resize+0xb0>
 8015356:	4641      	mov	r1, r8
 8015358:	4790      	blx	r2
 801535a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801535e:	60a5      	str	r5, [r4, #8]
 8015360:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015364:	2700      	movs	r7, #0
 8015366:	19ad      	adds	r5, r5, r6
 8015368:	f8ca 7010 	str.w	r7, [sl, #16]
 801536c:	f040 80bf 	bne.w	80154ee <rcl_wait_set_resize+0x23a>
 8015370:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015374:	b148      	cbz	r0, 801538a <rcl_wait_set_resize+0xd6>
 8015376:	4641      	mov	r1, r8
 8015378:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 801537c:	4798      	blx	r3
 801537e:	f8ca 5014 	str.w	r5, [sl, #20]
 8015382:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015386:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801538a:	2500      	movs	r5, #0
 801538c:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8015390:	6165      	str	r5, [r4, #20]
 8015392:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8015396:	2e00      	cmp	r6, #0
 8015398:	f040 80c0 	bne.w	801551c <rcl_wait_set_resize+0x268>
 801539c:	6920      	ldr	r0, [r4, #16]
 801539e:	b140      	cbz	r0, 80153b2 <rcl_wait_set_resize+0xfe>
 80153a0:	4641      	mov	r1, r8
 80153a2:	47c8      	blx	r9
 80153a4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80153a8:	6126      	str	r6, [r4, #16]
 80153aa:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80153ae:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80153b2:	2500      	movs	r5, #0
 80153b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153b6:	61e5      	str	r5, [r4, #28]
 80153b8:	f8ca 5018 	str.w	r5, [sl, #24]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	f040 80c2 	bne.w	8015546 <rcl_wait_set_resize+0x292>
 80153c2:	69a0      	ldr	r0, [r4, #24]
 80153c4:	b128      	cbz	r0, 80153d2 <rcl_wait_set_resize+0x11e>
 80153c6:	4641      	mov	r1, r8
 80153c8:	47c8      	blx	r9
 80153ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153cc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80153d0:	61a3      	str	r3, [r4, #24]
 80153d2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80153d6:	b130      	cbz	r0, 80153e6 <rcl_wait_set_resize+0x132>
 80153d8:	4641      	mov	r1, r8
 80153da:	47c8      	blx	r9
 80153dc:	2300      	movs	r3, #0
 80153de:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80153e2:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80153e6:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 80153ea:	2600      	movs	r6, #0
 80153ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ee:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 80153f2:	6266      	str	r6, [r4, #36]	; 0x24
 80153f4:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	f000 80c9 	beq.w	8015590 <rcl_wait_set_resize+0x2dc>
 80153fe:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015402:	4651      	mov	r1, sl
 8015404:	463a      	mov	r2, r7
 8015406:	6a20      	ldr	r0, [r4, #32]
 8015408:	47c8      	blx	r9
 801540a:	6220      	str	r0, [r4, #32]
 801540c:	2800      	cmp	r0, #0
 801540e:	d052      	beq.n	80154b6 <rcl_wait_set_resize+0x202>
 8015410:	4652      	mov	r2, sl
 8015412:	4631      	mov	r1, r6
 8015414:	f002 fd12 	bl	8017e3c <memset>
 8015418:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801541a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801541c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801541e:	6263      	str	r3, [r4, #36]	; 0x24
 8015420:	463a      	mov	r2, r7
 8015422:	62ae      	str	r6, [r5, #40]	; 0x28
 8015424:	4651      	mov	r1, sl
 8015426:	47c8      	blx	r9
 8015428:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801542a:	62e8      	str	r0, [r5, #44]	; 0x2c
 801542c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801542e:	2d00      	cmp	r5, #0
 8015430:	f000 8106 	beq.w	8015640 <rcl_wait_set_resize+0x38c>
 8015434:	4652      	mov	r2, sl
 8015436:	4631      	mov	r1, r6
 8015438:	4628      	mov	r0, r5
 801543a:	f002 fcff 	bl	8017e3c <memset>
 801543e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015442:	2500      	movs	r5, #0
 8015444:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8015448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801544a:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 801544e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8015450:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8015454:	2b00      	cmp	r3, #0
 8015456:	f040 80b0 	bne.w	80155ba <rcl_wait_set_resize+0x306>
 801545a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801545c:	b128      	cbz	r0, 801546a <rcl_wait_set_resize+0x1b6>
 801545e:	4631      	mov	r1, r6
 8015460:	47b8      	blx	r7
 8015462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015464:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015468:	62a3      	str	r3, [r4, #40]	; 0x28
 801546a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801546e:	b318      	cbz	r0, 80154b8 <rcl_wait_set_resize+0x204>
 8015470:	4631      	mov	r1, r6
 8015472:	47b8      	blx	r7
 8015474:	2300      	movs	r3, #0
 8015476:	4618      	mov	r0, r3
 8015478:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801547a:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801547e:	b003      	add	sp, #12
 8015480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015484:	6800      	ldr	r0, [r0, #0]
 8015486:	b120      	cbz	r0, 8015492 <rcl_wait_set_resize+0x1de>
 8015488:	4649      	mov	r1, r9
 801548a:	47d8      	blx	fp
 801548c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015490:	6027      	str	r7, [r4, #0]
 8015492:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015496:	2800      	cmp	r0, #0
 8015498:	f43f af50 	beq.w	801533c <rcl_wait_set_resize+0x88>
 801549c:	4649      	mov	r1, r9
 801549e:	47d8      	blx	fp
 80154a0:	2300      	movs	r3, #0
 80154a2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80154a6:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80154aa:	e747      	b.n	801533c <rcl_wait_set_resize+0x88>
 80154ac:	4649      	mov	r1, r9
 80154ae:	6820      	ldr	r0, [r4, #0]
 80154b0:	47d8      	blx	fp
 80154b2:	e9c4 7700 	strd	r7, r7, [r4]
 80154b6:	200a      	movs	r0, #10
 80154b8:	b003      	add	sp, #12
 80154ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154be:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80154c2:	4642      	mov	r2, r8
 80154c4:	4649      	mov	r1, r9
 80154c6:	68a0      	ldr	r0, [r4, #8]
 80154c8:	4798      	blx	r3
 80154ca:	60a0      	str	r0, [r4, #8]
 80154cc:	2800      	cmp	r0, #0
 80154ce:	d0f2      	beq.n	80154b6 <rcl_wait_set_resize+0x202>
 80154d0:	4639      	mov	r1, r7
 80154d2:	2700      	movs	r7, #0
 80154d4:	464a      	mov	r2, r9
 80154d6:	f002 fcb1 	bl	8017e3c <memset>
 80154da:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80154de:	60e5      	str	r5, [r4, #12]
 80154e0:	19ad      	adds	r5, r5, r6
 80154e2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80154e6:	f8ca 7010 	str.w	r7, [sl, #16]
 80154ea:	f43f af41 	beq.w	8015370 <rcl_wait_set_resize+0xbc>
 80154ee:	00ad      	lsls	r5, r5, #2
 80154f0:	4642      	mov	r2, r8
 80154f2:	4629      	mov	r1, r5
 80154f4:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80154f8:	f8da 0014 	ldr.w	r0, [sl, #20]
 80154fc:	4798      	blx	r3
 80154fe:	4680      	mov	r8, r0
 8015500:	f8ca 0014 	str.w	r0, [sl, #20]
 8015504:	2800      	cmp	r0, #0
 8015506:	f000 8084 	beq.w	8015612 <rcl_wait_set_resize+0x35e>
 801550a:	462a      	mov	r2, r5
 801550c:	4639      	mov	r1, r7
 801550e:	f002 fc95 	bl	8017e3c <memset>
 8015512:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015516:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801551a:	e736      	b.n	801538a <rcl_wait_set_resize+0xd6>
 801551c:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8015520:	4642      	mov	r2, r8
 8015522:	4649      	mov	r1, r9
 8015524:	6920      	ldr	r0, [r4, #16]
 8015526:	47b8      	blx	r7
 8015528:	6120      	str	r0, [r4, #16]
 801552a:	2800      	cmp	r0, #0
 801552c:	d0c3      	beq.n	80154b6 <rcl_wait_set_resize+0x202>
 801552e:	464a      	mov	r2, r9
 8015530:	4629      	mov	r1, r5
 8015532:	f002 fc83 	bl	8017e3c <memset>
 8015536:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801553a:	6166      	str	r6, [r4, #20]
 801553c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015540:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8015544:	e735      	b.n	80153b2 <rcl_wait_set_resize+0xfe>
 8015546:	009e      	lsls	r6, r3, #2
 8015548:	4631      	mov	r1, r6
 801554a:	4642      	mov	r2, r8
 801554c:	69a0      	ldr	r0, [r4, #24]
 801554e:	47b8      	blx	r7
 8015550:	61a0      	str	r0, [r4, #24]
 8015552:	2800      	cmp	r0, #0
 8015554:	d0af      	beq.n	80154b6 <rcl_wait_set_resize+0x202>
 8015556:	4632      	mov	r2, r6
 8015558:	4629      	mov	r1, r5
 801555a:	f002 fc6f 	bl	8017e3c <memset>
 801555e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015564:	4642      	mov	r2, r8
 8015566:	61e3      	str	r3, [r4, #28]
 8015568:	4631      	mov	r1, r6
 801556a:	f8da 0020 	ldr.w	r0, [sl, #32]
 801556e:	f8ca 501c 	str.w	r5, [sl, #28]
 8015572:	47b8      	blx	r7
 8015574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015576:	f8ca 0020 	str.w	r0, [sl, #32]
 801557a:	6a1f      	ldr	r7, [r3, #32]
 801557c:	2f00      	cmp	r7, #0
 801557e:	d058      	beq.n	8015632 <rcl_wait_set_resize+0x37e>
 8015580:	4632      	mov	r2, r6
 8015582:	4629      	mov	r1, r5
 8015584:	4638      	mov	r0, r7
 8015586:	f002 fc59 	bl	8017e3c <memset>
 801558a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801558e:	e72a      	b.n	80153e6 <rcl_wait_set_resize+0x132>
 8015590:	6a20      	ldr	r0, [r4, #32]
 8015592:	b128      	cbz	r0, 80155a0 <rcl_wait_set_resize+0x2ec>
 8015594:	4639      	mov	r1, r7
 8015596:	47c0      	blx	r8
 8015598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801559a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801559e:	6223      	str	r3, [r4, #32]
 80155a0:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80155a4:	2800      	cmp	r0, #0
 80155a6:	f43f af4c 	beq.w	8015442 <rcl_wait_set_resize+0x18e>
 80155aa:	4639      	mov	r1, r7
 80155ac:	47c0      	blx	r8
 80155ae:	2300      	movs	r3, #0
 80155b0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80155b4:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80155b8:	e743      	b.n	8015442 <rcl_wait_set_resize+0x18e>
 80155ba:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80155be:	4641      	mov	r1, r8
 80155c0:	4632      	mov	r2, r6
 80155c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80155c4:	47c8      	blx	r9
 80155c6:	62a0      	str	r0, [r4, #40]	; 0x28
 80155c8:	2800      	cmp	r0, #0
 80155ca:	f43f af74 	beq.w	80154b6 <rcl_wait_set_resize+0x202>
 80155ce:	4642      	mov	r2, r8
 80155d0:	4629      	mov	r1, r5
 80155d2:	f002 fc33 	bl	8017e3c <memset>
 80155d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80155da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155dc:	4632      	mov	r2, r6
 80155de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80155e0:	4641      	mov	r1, r8
 80155e2:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80155e6:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80155ea:	47c8      	blx	r9
 80155ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155ee:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80155f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155f4:	b35b      	cbz	r3, 801564e <rcl_wait_set_resize+0x39a>
 80155f6:	4642      	mov	r2, r8
 80155f8:	4618      	mov	r0, r3
 80155fa:	4629      	mov	r1, r5
 80155fc:	f002 fc1e 	bl	8017e3c <memset>
 8015600:	4628      	mov	r0, r5
 8015602:	b003      	add	sp, #12
 8015604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015608:	200b      	movs	r0, #11
 801560a:	4770      	bx	lr
 801560c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015610:	e752      	b.n	80154b8 <rcl_wait_set_resize+0x204>
 8015612:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015614:	68a0      	ldr	r0, [r4, #8]
 8015616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015618:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801561a:	4790      	blx	r2
 801561c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801561e:	6920      	ldr	r0, [r4, #16]
 8015620:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8015624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015626:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015628:	4790      	blx	r2
 801562a:	200a      	movs	r0, #10
 801562c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015630:	e742      	b.n	80154b8 <rcl_wait_set_resize+0x204>
 8015632:	69a0      	ldr	r0, [r4, #24]
 8015634:	4641      	mov	r1, r8
 8015636:	47c8      	blx	r9
 8015638:	200a      	movs	r0, #10
 801563a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801563e:	e73b      	b.n	80154b8 <rcl_wait_set_resize+0x204>
 8015640:	6a20      	ldr	r0, [r4, #32]
 8015642:	4639      	mov	r1, r7
 8015644:	47c0      	blx	r8
 8015646:	200a      	movs	r0, #10
 8015648:	e9c4 5508 	strd	r5, r5, [r4, #32]
 801564c:	e734      	b.n	80154b8 <rcl_wait_set_resize+0x204>
 801564e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015650:	4631      	mov	r1, r6
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	47b8      	blx	r7
 8015656:	9b00      	ldr	r3, [sp, #0]
 8015658:	200a      	movs	r0, #10
 801565a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801565e:	e72b      	b.n	80154b8 <rcl_wait_set_resize+0x204>

08015660 <rcl_wait_set_init>:
 8015660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015664:	b084      	sub	sp, #16
 8015666:	4604      	mov	r4, r0
 8015668:	a810      	add	r0, sp, #64	; 0x40
 801566a:	460f      	mov	r7, r1
 801566c:	4690      	mov	r8, r2
 801566e:	4699      	mov	r9, r3
 8015670:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8015674:	f7f5 ff2c 	bl	800b4d0 <rcutils_allocator_is_valid>
 8015678:	2800      	cmp	r0, #0
 801567a:	d06b      	beq.n	8015754 <rcl_wait_set_init+0xf4>
 801567c:	2c00      	cmp	r4, #0
 801567e:	d069      	beq.n	8015754 <rcl_wait_set_init+0xf4>
 8015680:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015682:	b125      	cbz	r5, 801568e <rcl_wait_set_init+0x2e>
 8015684:	2564      	movs	r5, #100	; 0x64
 8015686:	4628      	mov	r0, r5
 8015688:	b004      	add	sp, #16
 801568a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801568e:	f1ba 0f00 	cmp.w	sl, #0
 8015692:	d05f      	beq.n	8015754 <rcl_wait_set_init+0xf4>
 8015694:	4650      	mov	r0, sl
 8015696:	f7fe f95f 	bl	8013958 <rcl_context_is_valid>
 801569a:	2800      	cmp	r0, #0
 801569c:	d067      	beq.n	801576e <rcl_wait_set_init+0x10e>
 801569e:	205c      	movs	r0, #92	; 0x5c
 80156a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80156a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80156a4:	4798      	blx	r3
 80156a6:	6320      	str	r0, [r4, #48]	; 0x30
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d062      	beq.n	8015772 <rcl_wait_set_init+0x112>
 80156ac:	225c      	movs	r2, #92	; 0x5c
 80156ae:	4629      	mov	r1, r5
 80156b0:	f002 fbc4 	bl	8017e3c <memset>
 80156b4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80156b6:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 80156ba:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80156be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156c2:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80156c6:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80156ca:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80156ce:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80156d2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80156d6:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80156da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156de:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80156e2:	1899      	adds	r1, r3, r2
 80156e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156e6:	f8de 3000 	ldr.w	r3, [lr]
 80156ea:	f8da 0000 	ldr.w	r0, [sl]
 80156ee:	4411      	add	r1, r2
 80156f0:	4441      	add	r1, r8
 80156f2:	f8cc 3000 	str.w	r3, [ip]
 80156f6:	3028      	adds	r0, #40	; 0x28
 80156f8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80156fc:	f001 f9d6 	bl	8016aac <rmw_create_wait_set>
 8015700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015702:	63f0      	str	r0, [r6, #60]	; 0x3c
 8015704:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015706:	b350      	cbz	r0, 801575e <rcl_wait_set_init+0xfe>
 8015708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801570a:	4642      	mov	r2, r8
 801570c:	9302      	str	r3, [sp, #8]
 801570e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015710:	4639      	mov	r1, r7
 8015712:	9301      	str	r3, [sp, #4]
 8015714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015716:	4620      	mov	r0, r4
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	464b      	mov	r3, r9
 801571c:	f7ff fdca 	bl	80152b4 <rcl_wait_set_resize>
 8015720:	4605      	mov	r5, r0
 8015722:	2800      	cmp	r0, #0
 8015724:	d0af      	beq.n	8015686 <rcl_wait_set_init+0x26>
 8015726:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015728:	bb2b      	cbnz	r3, 8015776 <rcl_wait_set_init+0x116>
 801572a:	2600      	movs	r6, #0
 801572c:	4620      	mov	r0, r4
 801572e:	4633      	mov	r3, r6
 8015730:	4632      	mov	r2, r6
 8015732:	4631      	mov	r1, r6
 8015734:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015738:	9600      	str	r6, [sp, #0]
 801573a:	f7ff fdbb 	bl	80152b4 <rcl_wait_set_resize>
 801573e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015740:	2800      	cmp	r0, #0
 8015742:	d0a0      	beq.n	8015686 <rcl_wait_set_init+0x26>
 8015744:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015746:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8015748:	4798      	blx	r3
 801574a:	4628      	mov	r0, r5
 801574c:	6326      	str	r6, [r4, #48]	; 0x30
 801574e:	b004      	add	sp, #16
 8015750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015754:	250b      	movs	r5, #11
 8015756:	4628      	mov	r0, r5
 8015758:	b004      	add	sp, #16
 801575a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801575e:	2501      	movs	r5, #1
 8015760:	f001 f9ae 	bl	8016ac0 <rmw_destroy_wait_set>
 8015764:	2800      	cmp	r0, #0
 8015766:	bf18      	it	ne
 8015768:	f44f 7561 	movne.w	r5, #900	; 0x384
 801576c:	e7dd      	b.n	801572a <rcl_wait_set_init+0xca>
 801576e:	2565      	movs	r5, #101	; 0x65
 8015770:	e789      	b.n	8015686 <rcl_wait_set_init+0x26>
 8015772:	250a      	movs	r5, #10
 8015774:	e787      	b.n	8015686 <rcl_wait_set_init+0x26>
 8015776:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015778:	e7f2      	b.n	8015760 <rcl_wait_set_init+0x100>
 801577a:	bf00      	nop

0801577c <rcl_wait_set_add_guard_condition>:
 801577c:	b320      	cbz	r0, 80157c8 <rcl_wait_set_add_guard_condition+0x4c>
 801577e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	4604      	mov	r4, r0
 8015784:	b1d3      	cbz	r3, 80157bc <rcl_wait_set_add_guard_condition+0x40>
 8015786:	b319      	cbz	r1, 80157d0 <rcl_wait_set_add_guard_condition+0x54>
 8015788:	68dd      	ldr	r5, [r3, #12]
 801578a:	68e0      	ldr	r0, [r4, #12]
 801578c:	4285      	cmp	r5, r0
 801578e:	d218      	bcs.n	80157c2 <rcl_wait_set_add_guard_condition+0x46>
 8015790:	68a0      	ldr	r0, [r4, #8]
 8015792:	1c6e      	adds	r6, r5, #1
 8015794:	60de      	str	r6, [r3, #12]
 8015796:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801579a:	b102      	cbz	r2, 801579e <rcl_wait_set_add_guard_condition+0x22>
 801579c:	6015      	str	r5, [r2, #0]
 801579e:	4608      	mov	r0, r1
 80157a0:	f002 f9d8 	bl	8017b54 <rcl_guard_condition_get_rmw_handle>
 80157a4:	b190      	cbz	r0, 80157cc <rcl_wait_set_add_guard_condition+0x50>
 80157a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80157a8:	6842      	ldr	r2, [r0, #4]
 80157aa:	695b      	ldr	r3, [r3, #20]
 80157ac:	2000      	movs	r0, #0
 80157ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80157b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80157b4:	6913      	ldr	r3, [r2, #16]
 80157b6:	3301      	adds	r3, #1
 80157b8:	6113      	str	r3, [r2, #16]
 80157ba:	bd70      	pop	{r4, r5, r6, pc}
 80157bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80157c0:	bd70      	pop	{r4, r5, r6, pc}
 80157c2:	f240 3086 	movw	r0, #902	; 0x386
 80157c6:	bd70      	pop	{r4, r5, r6, pc}
 80157c8:	200b      	movs	r0, #11
 80157ca:	4770      	bx	lr
 80157cc:	2001      	movs	r0, #1
 80157ce:	bd70      	pop	{r4, r5, r6, pc}
 80157d0:	200b      	movs	r0, #11
 80157d2:	bd70      	pop	{r4, r5, r6, pc}

080157d4 <rcl_wait_set_add_timer>:
 80157d4:	b340      	cbz	r0, 8015828 <rcl_wait_set_add_timer+0x54>
 80157d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80157d8:	b570      	push	{r4, r5, r6, lr}
 80157da:	4604      	mov	r4, r0
 80157dc:	b1f3      	cbz	r3, 801581c <rcl_wait_set_add_timer+0x48>
 80157de:	b329      	cbz	r1, 801582c <rcl_wait_set_add_timer+0x58>
 80157e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80157e2:	6965      	ldr	r5, [r4, #20]
 80157e4:	42a8      	cmp	r0, r5
 80157e6:	d21c      	bcs.n	8015822 <rcl_wait_set_add_timer+0x4e>
 80157e8:	6925      	ldr	r5, [r4, #16]
 80157ea:	1c46      	adds	r6, r0, #1
 80157ec:	641e      	str	r6, [r3, #64]	; 0x40
 80157ee:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80157f2:	b102      	cbz	r2, 80157f6 <rcl_wait_set_add_timer+0x22>
 80157f4:	6010      	str	r0, [r2, #0]
 80157f6:	4608      	mov	r0, r1
 80157f8:	f7ff faa4 	bl	8014d44 <rcl_timer_get_guard_condition>
 80157fc:	b168      	cbz	r0, 801581a <rcl_wait_set_add_timer+0x46>
 80157fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015800:	68e3      	ldr	r3, [r4, #12]
 8015802:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8015804:	3b01      	subs	r3, #1
 8015806:	441d      	add	r5, r3
 8015808:	f002 f9a4 	bl	8017b54 <rcl_guard_condition_get_rmw_handle>
 801580c:	b180      	cbz	r0, 8015830 <rcl_wait_set_add_timer+0x5c>
 801580e:	6842      	ldr	r2, [r0, #4]
 8015810:	2000      	movs	r0, #0
 8015812:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015814:	695b      	ldr	r3, [r3, #20]
 8015816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801581a:	bd70      	pop	{r4, r5, r6, pc}
 801581c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015820:	bd70      	pop	{r4, r5, r6, pc}
 8015822:	f240 3086 	movw	r0, #902	; 0x386
 8015826:	bd70      	pop	{r4, r5, r6, pc}
 8015828:	200b      	movs	r0, #11
 801582a:	4770      	bx	lr
 801582c:	200b      	movs	r0, #11
 801582e:	bd70      	pop	{r4, r5, r6, pc}
 8015830:	2001      	movs	r0, #1
 8015832:	bd70      	pop	{r4, r5, r6, pc}

08015834 <rcl_wait_set_add_client>:
 8015834:	b320      	cbz	r0, 8015880 <rcl_wait_set_add_client+0x4c>
 8015836:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015838:	b570      	push	{r4, r5, r6, lr}
 801583a:	4604      	mov	r4, r0
 801583c:	b1d3      	cbz	r3, 8015874 <rcl_wait_set_add_client+0x40>
 801583e:	b319      	cbz	r1, 8015888 <rcl_wait_set_add_client+0x54>
 8015840:	699d      	ldr	r5, [r3, #24]
 8015842:	69e0      	ldr	r0, [r4, #28]
 8015844:	4285      	cmp	r5, r0
 8015846:	d218      	bcs.n	801587a <rcl_wait_set_add_client+0x46>
 8015848:	69a0      	ldr	r0, [r4, #24]
 801584a:	1c6e      	adds	r6, r5, #1
 801584c:	619e      	str	r6, [r3, #24]
 801584e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015852:	b102      	cbz	r2, 8015856 <rcl_wait_set_add_client+0x22>
 8015854:	6015      	str	r5, [r2, #0]
 8015856:	4608      	mov	r0, r1
 8015858:	f7fe f818 	bl	801388c <rcl_client_get_rmw_handle>
 801585c:	b190      	cbz	r0, 8015884 <rcl_wait_set_add_client+0x50>
 801585e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015860:	6842      	ldr	r2, [r0, #4]
 8015862:	6a1b      	ldr	r3, [r3, #32]
 8015864:	2000      	movs	r0, #0
 8015866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801586a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801586c:	69d3      	ldr	r3, [r2, #28]
 801586e:	3301      	adds	r3, #1
 8015870:	61d3      	str	r3, [r2, #28]
 8015872:	bd70      	pop	{r4, r5, r6, pc}
 8015874:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015878:	bd70      	pop	{r4, r5, r6, pc}
 801587a:	f240 3086 	movw	r0, #902	; 0x386
 801587e:	bd70      	pop	{r4, r5, r6, pc}
 8015880:	200b      	movs	r0, #11
 8015882:	4770      	bx	lr
 8015884:	2001      	movs	r0, #1
 8015886:	bd70      	pop	{r4, r5, r6, pc}
 8015888:	200b      	movs	r0, #11
 801588a:	bd70      	pop	{r4, r5, r6, pc}

0801588c <rcl_wait_set_add_service>:
 801588c:	b320      	cbz	r0, 80158d8 <rcl_wait_set_add_service+0x4c>
 801588e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015890:	b570      	push	{r4, r5, r6, lr}
 8015892:	4604      	mov	r4, r0
 8015894:	b1d3      	cbz	r3, 80158cc <rcl_wait_set_add_service+0x40>
 8015896:	b319      	cbz	r1, 80158e0 <rcl_wait_set_add_service+0x54>
 8015898:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801589a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801589c:	4285      	cmp	r5, r0
 801589e:	d218      	bcs.n	80158d2 <rcl_wait_set_add_service+0x46>
 80158a0:	6a20      	ldr	r0, [r4, #32]
 80158a2:	1c6e      	adds	r6, r5, #1
 80158a4:	625e      	str	r6, [r3, #36]	; 0x24
 80158a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80158aa:	b102      	cbz	r2, 80158ae <rcl_wait_set_add_service+0x22>
 80158ac:	6015      	str	r5, [r2, #0]
 80158ae:	4608      	mov	r0, r1
 80158b0:	f7fe fe42 	bl	8014538 <rcl_service_get_rmw_handle>
 80158b4:	b190      	cbz	r0, 80158dc <rcl_wait_set_add_service+0x50>
 80158b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80158b8:	6842      	ldr	r2, [r0, #4]
 80158ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158bc:	2000      	movs	r0, #0
 80158be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80158c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80158c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80158c6:	3301      	adds	r3, #1
 80158c8:	6293      	str	r3, [r2, #40]	; 0x28
 80158ca:	bd70      	pop	{r4, r5, r6, pc}
 80158cc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80158d0:	bd70      	pop	{r4, r5, r6, pc}
 80158d2:	f240 3086 	movw	r0, #902	; 0x386
 80158d6:	bd70      	pop	{r4, r5, r6, pc}
 80158d8:	200b      	movs	r0, #11
 80158da:	4770      	bx	lr
 80158dc:	2001      	movs	r0, #1
 80158de:	bd70      	pop	{r4, r5, r6, pc}
 80158e0:	200b      	movs	r0, #11
 80158e2:	bd70      	pop	{r4, r5, r6, pc}
 80158e4:	0000      	movs	r0, r0
	...

080158e8 <rcl_wait>:
 80158e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ec:	b08f      	sub	sp, #60	; 0x3c
 80158ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80158f2:	2800      	cmp	r0, #0
 80158f4:	f000 8152 	beq.w	8015b9c <rcl_wait+0x2b4>
 80158f8:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80158fa:	4604      	mov	r4, r0
 80158fc:	2d00      	cmp	r5, #0
 80158fe:	f000 80c0 	beq.w	8015a82 <rcl_wait+0x19a>
 8015902:	6843      	ldr	r3, [r0, #4]
 8015904:	b973      	cbnz	r3, 8015924 <rcl_wait+0x3c>
 8015906:	68e3      	ldr	r3, [r4, #12]
 8015908:	b963      	cbnz	r3, 8015924 <rcl_wait+0x3c>
 801590a:	6963      	ldr	r3, [r4, #20]
 801590c:	b953      	cbnz	r3, 8015924 <rcl_wait+0x3c>
 801590e:	69e3      	ldr	r3, [r4, #28]
 8015910:	b943      	cbnz	r3, 8015924 <rcl_wait+0x3c>
 8015912:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015914:	b933      	cbnz	r3, 8015924 <rcl_wait+0x3c>
 8015916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015918:	b923      	cbnz	r3, 8015924 <rcl_wait+0x3c>
 801591a:	f240 3085 	movw	r0, #901	; 0x385
 801591e:	b00f      	add	sp, #60	; 0x3c
 8015920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015924:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015928:	2a01      	cmp	r2, #1
 801592a:	f173 0300 	sbcs.w	r3, r3, #0
 801592e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8015930:	db56      	blt.n	80159e0 <rcl_wait+0xf8>
 8015932:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8015936:	2900      	cmp	r1, #0
 8015938:	f000 814f 	beq.w	8015bda <rcl_wait+0x2f2>
 801593c:	2300      	movs	r3, #0
 801593e:	f04f 0800 	mov.w	r8, #0
 8015942:	f04f 0900 	mov.w	r9, #0
 8015946:	469b      	mov	fp, r3
 8015948:	9307      	str	r3, [sp, #28]
 801594a:	e00d      	b.n	8015968 <rcl_wait+0x80>
 801594c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801594e:	6922      	ldr	r2, [r4, #16]
 8015950:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8015952:	f842 000a 	str.w	r0, [r2, sl]
 8015956:	2300      	movs	r3, #0
 8015958:	f118 0801 	adds.w	r8, r8, #1
 801595c:	f149 0900 	adc.w	r9, r9, #0
 8015960:	4599      	cmp	r9, r3
 8015962:	bf08      	it	eq
 8015964:	4588      	cmpeq	r8, r1
 8015966:	d243      	bcs.n	80159f0 <rcl_wait+0x108>
 8015968:	6922      	ldr	r2, [r4, #16]
 801596a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801596e:	f852 000a 	ldr.w	r0, [r2, sl]
 8015972:	2800      	cmp	r0, #0
 8015974:	d0ef      	beq.n	8015956 <rcl_wait+0x6e>
 8015976:	68e2      	ldr	r2, [r4, #12]
 8015978:	6969      	ldr	r1, [r5, #20]
 801597a:	4442      	add	r2, r8
 801597c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8015980:	b13b      	cbz	r3, 8015992 <rcl_wait+0xaa>
 8015982:	692a      	ldr	r2, [r5, #16]
 8015984:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015988:	6921      	ldr	r1, [r4, #16]
 801598a:	3201      	adds	r2, #1
 801598c:	f851 000a 	ldr.w	r0, [r1, sl]
 8015990:	612a      	str	r2, [r5, #16]
 8015992:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8015996:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 801599a:	f7ff f9c1 	bl	8014d20 <rcl_timer_is_canceled>
 801599e:	2800      	cmp	r0, #0
 80159a0:	d1bd      	bne.n	801591e <rcl_wait+0x36>
 80159a2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80159a6:	2a00      	cmp	r2, #0
 80159a8:	d1d0      	bne.n	801594c <rcl_wait+0x64>
 80159aa:	6922      	ldr	r2, [r4, #16]
 80159ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80159b0:	f852 000a 	ldr.w	r0, [r2, sl]
 80159b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159b8:	a90a      	add	r1, sp, #40	; 0x28
 80159ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80159be:	f7ff f98b 	bl	8014cd8 <rcl_timer_get_time_until_next_call>
 80159c2:	2800      	cmp	r0, #0
 80159c4:	d1ab      	bne.n	801591e <rcl_wait+0x36>
 80159c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80159ca:	42b2      	cmp	r2, r6
 80159cc:	eb73 0107 	sbcs.w	r1, r3, r7
 80159d0:	da03      	bge.n	80159da <rcl_wait+0xf2>
 80159d2:	461f      	mov	r7, r3
 80159d4:	2301      	movs	r3, #1
 80159d6:	4616      	mov	r6, r2
 80159d8:	9307      	str	r3, [sp, #28]
 80159da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80159dc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80159de:	e7ba      	b.n	8015956 <rcl_wait+0x6e>
 80159e0:	2900      	cmp	r1, #0
 80159e2:	f000 80e4 	beq.w	8015bae <rcl_wait+0x2c6>
 80159e6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80159ea:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80159ee:	e7a5      	b.n	801593c <rcl_wait+0x54>
 80159f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80159f4:	4313      	orrs	r3, r2
 80159f6:	d149      	bne.n	8015a8c <rcl_wait+0x1a4>
 80159f8:	2300      	movs	r3, #0
 80159fa:	2200      	movs	r2, #0
 80159fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015a00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015a04:	ab0a      	add	r3, sp, #40	; 0x28
 8015a06:	9302      	str	r3, [sp, #8]
 8015a08:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8015a0a:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8015a0e:	e9cd 3200 	strd	r3, r2, [sp]
 8015a12:	f105 0110 	add.w	r1, r5, #16
 8015a16:	f105 031c 	add.w	r3, r5, #28
 8015a1a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8015a1e:	1d28      	adds	r0, r5, #4
 8015a20:	f000 fec4 	bl	80167ac <rmw_wait>
 8015a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015a26:	4607      	mov	r7, r0
 8015a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015a2a:	b32a      	cbz	r2, 8015a78 <rcl_wait+0x190>
 8015a2c:	f04f 0800 	mov.w	r8, #0
 8015a30:	4646      	mov	r6, r8
 8015a32:	e005      	b.n	8015a40 <rcl_wait+0x158>
 8015a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015a38:	f108 0801 	add.w	r8, r8, #1
 8015a3c:	4542      	cmp	r2, r8
 8015a3e:	d91b      	bls.n	8015a78 <rcl_wait+0x190>
 8015a40:	6922      	ldr	r2, [r4, #16]
 8015a42:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8015a46:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d0f3      	beq.n	8015a36 <rcl_wait+0x14e>
 8015a4e:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8015a52:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8015a56:	f7ff f907 	bl	8014c68 <rcl_timer_is_ready>
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	f47f af5f 	bne.w	801591e <rcl_wait+0x36>
 8015a60:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8015a64:	2a00      	cmp	r2, #0
 8015a66:	d1e5      	bne.n	8015a34 <rcl_wait+0x14c>
 8015a68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015a6a:	6921      	ldr	r1, [r4, #16]
 8015a6c:	f108 0801 	add.w	r8, r8, #1
 8015a70:	514a      	str	r2, [r1, r5]
 8015a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015a74:	4542      	cmp	r2, r8
 8015a76:	d8e3      	bhi.n	8015a40 <rcl_wait+0x158>
 8015a78:	f037 0002 	bics.w	r0, r7, #2
 8015a7c:	d02c      	beq.n	8015ad8 <rcl_wait+0x1f0>
 8015a7e:	2001      	movs	r0, #1
 8015a80:	e74d      	b.n	801591e <rcl_wait+0x36>
 8015a82:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015a86:	b00f      	add	sp, #60	; 0x3c
 8015a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015a90:	2a01      	cmp	r2, #1
 8015a92:	f173 0300 	sbcs.w	r3, r3, #0
 8015a96:	f2c0 8085 	blt.w	8015ba4 <rcl_wait+0x2bc>
 8015a9a:	2e00      	cmp	r6, #0
 8015a9c:	f177 0300 	sbcs.w	r3, r7, #0
 8015aa0:	bfb8      	it	lt
 8015aa2:	2600      	movlt	r6, #0
 8015aa4:	a34e      	add	r3, pc, #312	; (adr r3, 8015be0 <rcl_wait+0x2f8>)
 8015aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aaa:	bfb8      	it	lt
 8015aac:	2700      	movlt	r7, #0
 8015aae:	4630      	mov	r0, r6
 8015ab0:	4639      	mov	r1, r7
 8015ab2:	f7ea fe53 	bl	800075c <__aeabi_ldivmod>
 8015ab6:	a34a      	add	r3, pc, #296	; (adr r3, 8015be0 <rcl_wait+0x2f8>)
 8015ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015abc:	4680      	mov	r8, r0
 8015abe:	4689      	mov	r9, r1
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	4639      	mov	r1, r7
 8015ac4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8015ac8:	f7ea fe48 	bl	800075c <__aeabi_ldivmod>
 8015acc:	4619      	mov	r1, r3
 8015ace:	4610      	mov	r0, r2
 8015ad0:	ab0a      	add	r3, sp, #40	; 0x28
 8015ad2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015ad6:	e796      	b.n	8015a06 <rcl_wait+0x11e>
 8015ad8:	6866      	ldr	r6, [r4, #4]
 8015ada:	4602      	mov	r2, r0
 8015adc:	b91e      	cbnz	r6, 8015ae6 <rcl_wait+0x1fe>
 8015ade:	e00d      	b.n	8015afc <rcl_wait+0x214>
 8015ae0:	3201      	adds	r2, #1
 8015ae2:	42b2      	cmp	r2, r6
 8015ae4:	d00a      	beq.n	8015afc <rcl_wait+0x214>
 8015ae6:	6899      	ldr	r1, [r3, #8]
 8015ae8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015aec:	2900      	cmp	r1, #0
 8015aee:	d1f7      	bne.n	8015ae0 <rcl_wait+0x1f8>
 8015af0:	6825      	ldr	r5, [r4, #0]
 8015af2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015af6:	3201      	adds	r2, #1
 8015af8:	42b2      	cmp	r2, r6
 8015afa:	d1f4      	bne.n	8015ae6 <rcl_wait+0x1fe>
 8015afc:	68e6      	ldr	r6, [r4, #12]
 8015afe:	2200      	movs	r2, #0
 8015b00:	b91e      	cbnz	r6, 8015b0a <rcl_wait+0x222>
 8015b02:	e00d      	b.n	8015b20 <rcl_wait+0x238>
 8015b04:	3201      	adds	r2, #1
 8015b06:	42b2      	cmp	r2, r6
 8015b08:	d00a      	beq.n	8015b20 <rcl_wait+0x238>
 8015b0a:	6959      	ldr	r1, [r3, #20]
 8015b0c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015b10:	2900      	cmp	r1, #0
 8015b12:	d1f7      	bne.n	8015b04 <rcl_wait+0x21c>
 8015b14:	68a5      	ldr	r5, [r4, #8]
 8015b16:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015b1a:	3201      	adds	r2, #1
 8015b1c:	42b2      	cmp	r2, r6
 8015b1e:	d1f4      	bne.n	8015b0a <rcl_wait+0x222>
 8015b20:	69e6      	ldr	r6, [r4, #28]
 8015b22:	2200      	movs	r2, #0
 8015b24:	b91e      	cbnz	r6, 8015b2e <rcl_wait+0x246>
 8015b26:	e00d      	b.n	8015b44 <rcl_wait+0x25c>
 8015b28:	3201      	adds	r2, #1
 8015b2a:	42b2      	cmp	r2, r6
 8015b2c:	d00a      	beq.n	8015b44 <rcl_wait+0x25c>
 8015b2e:	6a19      	ldr	r1, [r3, #32]
 8015b30:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015b34:	2900      	cmp	r1, #0
 8015b36:	d1f7      	bne.n	8015b28 <rcl_wait+0x240>
 8015b38:	69a5      	ldr	r5, [r4, #24]
 8015b3a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015b3e:	3201      	adds	r2, #1
 8015b40:	42b2      	cmp	r2, r6
 8015b42:	d1f4      	bne.n	8015b2e <rcl_wait+0x246>
 8015b44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b46:	2200      	movs	r2, #0
 8015b48:	b91e      	cbnz	r6, 8015b52 <rcl_wait+0x26a>
 8015b4a:	e00d      	b.n	8015b68 <rcl_wait+0x280>
 8015b4c:	3201      	adds	r2, #1
 8015b4e:	4296      	cmp	r6, r2
 8015b50:	d00a      	beq.n	8015b68 <rcl_wait+0x280>
 8015b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015b54:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015b58:	2900      	cmp	r1, #0
 8015b5a:	d1f7      	bne.n	8015b4c <rcl_wait+0x264>
 8015b5c:	6a25      	ldr	r5, [r4, #32]
 8015b5e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015b62:	3201      	adds	r2, #1
 8015b64:	4296      	cmp	r6, r2
 8015b66:	d1f4      	bne.n	8015b52 <rcl_wait+0x26a>
 8015b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	b91e      	cbnz	r6, 8015b76 <rcl_wait+0x28e>
 8015b6e:	e00d      	b.n	8015b8c <rcl_wait+0x2a4>
 8015b70:	3201      	adds	r2, #1
 8015b72:	42b2      	cmp	r2, r6
 8015b74:	d00a      	beq.n	8015b8c <rcl_wait+0x2a4>
 8015b76:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015b78:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015b7c:	2900      	cmp	r1, #0
 8015b7e:	d1f7      	bne.n	8015b70 <rcl_wait+0x288>
 8015b80:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8015b82:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015b86:	3201      	adds	r2, #1
 8015b88:	42b2      	cmp	r2, r6
 8015b8a:	d1f4      	bne.n	8015b76 <rcl_wait+0x28e>
 8015b8c:	2f02      	cmp	r7, #2
 8015b8e:	f47f aec6 	bne.w	801591e <rcl_wait+0x36>
 8015b92:	9b07      	ldr	r3, [sp, #28]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	bf08      	it	eq
 8015b98:	2002      	moveq	r0, #2
 8015b9a:	e6c0      	b.n	801591e <rcl_wait+0x36>
 8015b9c:	200b      	movs	r0, #11
 8015b9e:	b00f      	add	sp, #60	; 0x3c
 8015ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba4:	9b07      	ldr	r3, [sp, #28]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	f47f af77 	bne.w	8015a9a <rcl_wait+0x1b2>
 8015bac:	e72b      	b.n	8015a06 <rcl_wait+0x11e>
 8015bae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bb2:	4313      	orrs	r3, r2
 8015bb4:	bf08      	it	eq
 8015bb6:	9107      	streq	r1, [sp, #28]
 8015bb8:	f43f af1e 	beq.w	80159f8 <rcl_wait+0x110>
 8015bbc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bc4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8015bc8:	2a01      	cmp	r2, #1
 8015bca:	f173 0300 	sbcs.w	r3, r3, #0
 8015bce:	f04f 0300 	mov.w	r3, #0
 8015bd2:	9307      	str	r3, [sp, #28]
 8015bd4:	f6bf af61 	bge.w	8015a9a <rcl_wait+0x1b2>
 8015bd8:	e715      	b.n	8015a06 <rcl_wait+0x11e>
 8015bda:	4632      	mov	r2, r6
 8015bdc:	463b      	mov	r3, r7
 8015bde:	e7f3      	b.n	8015bc8 <rcl_wait+0x2e0>
 8015be0:	3b9aca00 	.word	0x3b9aca00
 8015be4:	00000000 	.word	0x00000000

08015be8 <__atomic_load_8>:
 8015be8:	f04f 0101 	mov.w	r1, #1
 8015bec:	ea80 4210 	eor.w	r2, r0, r0, lsr #16
 8015bf0:	f082 023d 	eor.w	r2, r2, #61	; 0x3d
 8015bf4:	4b13      	ldr	r3, [pc, #76]	; (8015c44 <__atomic_load_8+0x5c>)
 8015bf6:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8015bfa:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 8015bfe:	fb03 f302 	mul.w	r3, r3, r2
 8015c02:	4a11      	ldr	r2, [pc, #68]	; (8015c48 <__atomic_load_8+0x60>)
 8015c04:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8015c08:	b430      	push	{r4, r5}
 8015c0a:	fba2 4203 	umull	r4, r2, r2, r3
 8015c0e:	0912      	lsrs	r2, r2, #4
 8015c10:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8015c14:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
 8015c18:	4c0c      	ldr	r4, [pc, #48]	; (8015c4c <__atomic_load_8+0x64>)
 8015c1a:	1a9b      	subs	r3, r3, r2
 8015c1c:	18e5      	adds	r5, r4, r3
 8015c1e:	e8d5 2f4f 	ldrexb	r2, [r5]
 8015c22:	e8c5 1f4c 	strexb	ip, r1, [r5]
 8015c26:	f1bc 0f00 	cmp.w	ip, #0
 8015c2a:	d1f8      	bne.n	8015c1e <__atomic_load_8+0x36>
 8015c2c:	b2d2      	uxtb	r2, r2
 8015c2e:	f3bf 8f5b 	dmb	ish
 8015c32:	2a00      	cmp	r2, #0
 8015c34:	d1f3      	bne.n	8015c1e <__atomic_load_8+0x36>
 8015c36:	c803      	ldmia	r0, {r0, r1}
 8015c38:	f3bf 8f5b 	dmb	ish
 8015c3c:	54e2      	strb	r2, [r4, r3]
 8015c3e:	bc30      	pop	{r4, r5}
 8015c40:	4770      	bx	lr
 8015c42:	bf00      	nop
 8015c44:	27d4eb2d 	.word	0x27d4eb2d
 8015c48:	b21642c9 	.word	0xb21642c9
 8015c4c:	20006790 	.word	0x20006790

08015c50 <__atomic_store_8>:
 8015c50:	b4f0      	push	{r4, r5, r6, r7}
 8015c52:	f04f 0501 	mov.w	r5, #1
 8015c56:	ea80 4410 	eor.w	r4, r0, r0, lsr #16
 8015c5a:	f084 043d 	eor.w	r4, r4, #61	; 0x3d
 8015c5e:	4913      	ldr	r1, [pc, #76]	; (8015cac <__atomic_store_8+0x5c>)
 8015c60:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8015c64:	ea84 1414 	eor.w	r4, r4, r4, lsr #4
 8015c68:	fb01 f104 	mul.w	r1, r1, r4
 8015c6c:	4c10      	ldr	r4, [pc, #64]	; (8015cb0 <__atomic_store_8+0x60>)
 8015c6e:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015c72:	fba4 6401 	umull	r6, r4, r4, r1
 8015c76:	0924      	lsrs	r4, r4, #4
 8015c78:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8015c7c:	ebc4 04c6 	rsb	r4, r4, r6, lsl #3
 8015c80:	4e0c      	ldr	r6, [pc, #48]	; (8015cb4 <__atomic_store_8+0x64>)
 8015c82:	1b09      	subs	r1, r1, r4
 8015c84:	1877      	adds	r7, r6, r1
 8015c86:	e8d7 4f4f 	ldrexb	r4, [r7]
 8015c8a:	e8c7 5f4c 	strexb	ip, r5, [r7]
 8015c8e:	f1bc 0f00 	cmp.w	ip, #0
 8015c92:	d1f8      	bne.n	8015c86 <__atomic_store_8+0x36>
 8015c94:	b2e4      	uxtb	r4, r4
 8015c96:	f3bf 8f5b 	dmb	ish
 8015c9a:	2c00      	cmp	r4, #0
 8015c9c:	d1f3      	bne.n	8015c86 <__atomic_store_8+0x36>
 8015c9e:	e9c0 2300 	strd	r2, r3, [r0]
 8015ca2:	f3bf 8f5b 	dmb	ish
 8015ca6:	5474      	strb	r4, [r6, r1]
 8015ca8:	bcf0      	pop	{r4, r5, r6, r7}
 8015caa:	4770      	bx	lr
 8015cac:	27d4eb2d 	.word	0x27d4eb2d
 8015cb0:	b21642c9 	.word	0xb21642c9
 8015cb4:	20006790 	.word	0x20006790

08015cb8 <__atomic_exchange_8>:
 8015cb8:	b4f0      	push	{r4, r5, r6, r7}
 8015cba:	4605      	mov	r5, r0
 8015cbc:	f04f 0001 	mov.w	r0, #1
 8015cc0:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8015cc4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8015cc8:	4c14      	ldr	r4, [pc, #80]	; (8015d1c <__atomic_exchange_8+0x64>)
 8015cca:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015cce:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015cd2:	fb04 f401 	mul.w	r4, r4, r1
 8015cd6:	4912      	ldr	r1, [pc, #72]	; (8015d20 <__atomic_exchange_8+0x68>)
 8015cd8:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8015cdc:	fba1 6104 	umull	r6, r1, r1, r4
 8015ce0:	0909      	lsrs	r1, r1, #4
 8015ce2:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8015ce6:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8015cea:	4f0e      	ldr	r7, [pc, #56]	; (8015d24 <__atomic_exchange_8+0x6c>)
 8015cec:	1a64      	subs	r4, r4, r1
 8015cee:	1939      	adds	r1, r7, r4
 8015cf0:	e8d1 6f4f 	ldrexb	r6, [r1]
 8015cf4:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8015cf8:	f1bc 0f00 	cmp.w	ip, #0
 8015cfc:	d1f8      	bne.n	8015cf0 <__atomic_exchange_8+0x38>
 8015cfe:	b2f6      	uxtb	r6, r6
 8015d00:	f3bf 8f5b 	dmb	ish
 8015d04:	2e00      	cmp	r6, #0
 8015d06:	d1f3      	bne.n	8015cf0 <__atomic_exchange_8+0x38>
 8015d08:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015d0c:	e9c5 2300 	strd	r2, r3, [r5]
 8015d10:	f3bf 8f5b 	dmb	ish
 8015d14:	553e      	strb	r6, [r7, r4]
 8015d16:	bcf0      	pop	{r4, r5, r6, r7}
 8015d18:	4770      	bx	lr
 8015d1a:	bf00      	nop
 8015d1c:	27d4eb2d 	.word	0x27d4eb2d
 8015d20:	b21642c9 	.word	0xb21642c9
 8015d24:	20006790 	.word	0x20006790

08015d28 <__atomic_fetch_add_8>:
 8015d28:	b4f0      	push	{r4, r5, r6, r7}
 8015d2a:	4605      	mov	r5, r0
 8015d2c:	f04f 0001 	mov.w	r0, #1
 8015d30:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8015d34:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8015d38:	4c15      	ldr	r4, [pc, #84]	; (8015d90 <__atomic_fetch_add_8+0x68>)
 8015d3a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015d3e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015d42:	fb04 f401 	mul.w	r4, r4, r1
 8015d46:	4913      	ldr	r1, [pc, #76]	; (8015d94 <__atomic_fetch_add_8+0x6c>)
 8015d48:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8015d4c:	fba1 6104 	umull	r6, r1, r1, r4
 8015d50:	0909      	lsrs	r1, r1, #4
 8015d52:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8015d56:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8015d5a:	4f0f      	ldr	r7, [pc, #60]	; (8015d98 <__atomic_fetch_add_8+0x70>)
 8015d5c:	1a64      	subs	r4, r4, r1
 8015d5e:	1939      	adds	r1, r7, r4
 8015d60:	e8d1 6f4f 	ldrexb	r6, [r1]
 8015d64:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8015d68:	f1bc 0f00 	cmp.w	ip, #0
 8015d6c:	d1f8      	bne.n	8015d60 <__atomic_fetch_add_8+0x38>
 8015d6e:	b2f6      	uxtb	r6, r6
 8015d70:	f3bf 8f5b 	dmb	ish
 8015d74:	2e00      	cmp	r6, #0
 8015d76:	d1f3      	bne.n	8015d60 <__atomic_fetch_add_8+0x38>
 8015d78:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015d7c:	1882      	adds	r2, r0, r2
 8015d7e:	eb41 0303 	adc.w	r3, r1, r3
 8015d82:	e9c5 2300 	strd	r2, r3, [r5]
 8015d86:	f3bf 8f5b 	dmb	ish
 8015d8a:	553e      	strb	r6, [r7, r4]
 8015d8c:	bcf0      	pop	{r4, r5, r6, r7}
 8015d8e:	4770      	bx	lr
 8015d90:	27d4eb2d 	.word	0x27d4eb2d
 8015d94:	b21642c9 	.word	0xb21642c9
 8015d98:	20006790 	.word	0x20006790

08015d9c <rcutils_is_directory>:
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	4770      	bx	lr

08015da0 <rcutils_join_path>:
 8015da0:	b082      	sub	sp, #8
 8015da2:	2000      	movs	r0, #0
 8015da4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8015da8:	b002      	add	sp, #8
 8015daa:	4770      	bx	lr

08015dac <rcutils_to_native_path>:
 8015dac:	b084      	sub	sp, #16
 8015dae:	a801      	add	r0, sp, #4
 8015db0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8015db4:	b004      	add	sp, #16
 8015db6:	2000      	movs	r0, #0
 8015db8:	4770      	bx	lr
 8015dba:	bf00      	nop

08015dbc <rcutils_format_string_limit>:
 8015dbc:	b40f      	push	{r0, r1, r2, r3}
 8015dbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dc0:	b083      	sub	sp, #12
 8015dc2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015dc4:	ac08      	add	r4, sp, #32
 8015dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015dca:	b34e      	cbz	r6, 8015e20 <rcutils_format_string_limit+0x64>
 8015dcc:	a808      	add	r0, sp, #32
 8015dce:	f7f5 fb7f 	bl	800b4d0 <rcutils_allocator_is_valid>
 8015dd2:	b328      	cbz	r0, 8015e20 <rcutils_format_string_limit+0x64>
 8015dd4:	2100      	movs	r1, #0
 8015dd6:	ab0f      	add	r3, sp, #60	; 0x3c
 8015dd8:	4608      	mov	r0, r1
 8015dda:	4632      	mov	r2, r6
 8015ddc:	e9cd 3300 	strd	r3, r3, [sp]
 8015de0:	f000 f8f4 	bl	8015fcc <rcutils_vsnprintf>
 8015de4:	1c43      	adds	r3, r0, #1
 8015de6:	4605      	mov	r5, r0
 8015de8:	d01a      	beq.n	8015e20 <rcutils_format_string_limit+0x64>
 8015dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dec:	1c47      	adds	r7, r0, #1
 8015dee:	429f      	cmp	r7, r3
 8015df0:	bf84      	itt	hi
 8015df2:	461f      	movhi	r7, r3
 8015df4:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8015df8:	4638      	mov	r0, r7
 8015dfa:	9b08      	ldr	r3, [sp, #32]
 8015dfc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015dfe:	4798      	blx	r3
 8015e00:	4604      	mov	r4, r0
 8015e02:	b168      	cbz	r0, 8015e20 <rcutils_format_string_limit+0x64>
 8015e04:	4632      	mov	r2, r6
 8015e06:	4639      	mov	r1, r7
 8015e08:	9b01      	ldr	r3, [sp, #4]
 8015e0a:	f000 f8df 	bl	8015fcc <rcutils_vsnprintf>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	db02      	blt.n	8015e18 <rcutils_format_string_limit+0x5c>
 8015e12:	2300      	movs	r3, #0
 8015e14:	5563      	strb	r3, [r4, r5]
 8015e16:	e004      	b.n	8015e22 <rcutils_format_string_limit+0x66>
 8015e18:	4620      	mov	r0, r4
 8015e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015e1e:	4798      	blx	r3
 8015e20:	2400      	movs	r4, #0
 8015e22:	4620      	mov	r0, r4
 8015e24:	b003      	add	sp, #12
 8015e26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e2a:	b004      	add	sp, #16
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop

08015e30 <rcutils_get_env>:
 8015e30:	b168      	cbz	r0, 8015e4e <rcutils_get_env+0x1e>
 8015e32:	b510      	push	{r4, lr}
 8015e34:	460c      	mov	r4, r1
 8015e36:	b129      	cbz	r1, 8015e44 <rcutils_get_env+0x14>
 8015e38:	f001 ff5a 	bl	8017cf0 <getenv>
 8015e3c:	b120      	cbz	r0, 8015e48 <rcutils_get_env+0x18>
 8015e3e:	6020      	str	r0, [r4, #0]
 8015e40:	2000      	movs	r0, #0
 8015e42:	bd10      	pop	{r4, pc}
 8015e44:	4803      	ldr	r0, [pc, #12]	; (8015e54 <rcutils_get_env+0x24>)
 8015e46:	bd10      	pop	{r4, pc}
 8015e48:	4b03      	ldr	r3, [pc, #12]	; (8015e58 <rcutils_get_env+0x28>)
 8015e4a:	6023      	str	r3, [r4, #0]
 8015e4c:	bd10      	pop	{r4, pc}
 8015e4e:	4803      	ldr	r0, [pc, #12]	; (8015e5c <rcutils_get_env+0x2c>)
 8015e50:	4770      	bx	lr
 8015e52:	bf00      	nop
 8015e54:	0801ab00 	.word	0x0801ab00
 8015e58:	0801ae9c 	.word	0x0801ae9c
 8015e5c:	0801aae4 	.word	0x0801aae4

08015e60 <rcutils_repl_str>:
 8015e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e64:	4680      	mov	r8, r0
 8015e66:	b089      	sub	sp, #36	; 0x24
 8015e68:	4608      	mov	r0, r1
 8015e6a:	2600      	movs	r6, #0
 8015e6c:	468a      	mov	sl, r1
 8015e6e:	4699      	mov	r9, r3
 8015e70:	f8cd 8004 	str.w	r8, [sp, #4]
 8015e74:	9206      	str	r2, [sp, #24]
 8015e76:	f7ea f9e5 	bl	8000244 <strlen>
 8015e7a:	4637      	mov	r7, r6
 8015e7c:	46b3      	mov	fp, r6
 8015e7e:	2510      	movs	r5, #16
 8015e80:	9002      	str	r0, [sp, #8]
 8015e82:	e01e      	b.n	8015ec2 <rcutils_repl_str+0x62>
 8015e84:	f10b 0b01 	add.w	fp, fp, #1
 8015e88:	455e      	cmp	r6, fp
 8015e8a:	d211      	bcs.n	8015eb0 <rcutils_repl_str+0x50>
 8015e8c:	442e      	add	r6, r5
 8015e8e:	4638      	mov	r0, r7
 8015e90:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015e94:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015e98:	00b1      	lsls	r1, r6, #2
 8015e9a:	4798      	blx	r3
 8015e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d074      	beq.n	8015f8e <rcutils_repl_str+0x12e>
 8015ea4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015ea8:	bf28      	it	cs
 8015eaa:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8015eae:	4607      	mov	r7, r0
 8015eb0:	9a01      	ldr	r2, [sp, #4]
 8015eb2:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8015eb6:	1aa2      	subs	r2, r4, r2
 8015eb8:	f843 2c04 	str.w	r2, [r3, #-4]
 8015ebc:	9b02      	ldr	r3, [sp, #8]
 8015ebe:	eb04 0803 	add.w	r8, r4, r3
 8015ec2:	4651      	mov	r1, sl
 8015ec4:	4640      	mov	r0, r8
 8015ec6:	f002 f99b 	bl	8018200 <strstr>
 8015eca:	4604      	mov	r4, r0
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d1d9      	bne.n	8015e84 <rcutils_repl_str+0x24>
 8015ed0:	4640      	mov	r0, r8
 8015ed2:	f7ea f9b7 	bl	8000244 <strlen>
 8015ed6:	9b01      	ldr	r3, [sp, #4]
 8015ed8:	eba8 0303 	sub.w	r3, r8, r3
 8015edc:	181d      	adds	r5, r3, r0
 8015ede:	9505      	str	r5, [sp, #20]
 8015ee0:	f1bb 0f00 	cmp.w	fp, #0
 8015ee4:	d03d      	beq.n	8015f62 <rcutils_repl_str+0x102>
 8015ee6:	9806      	ldr	r0, [sp, #24]
 8015ee8:	f7ea f9ac 	bl	8000244 <strlen>
 8015eec:	9b02      	ldr	r3, [sp, #8]
 8015eee:	4682      	mov	sl, r0
 8015ef0:	1ac3      	subs	r3, r0, r3
 8015ef2:	fb0b 5303 	mla	r3, fp, r3, r5
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	9307      	str	r3, [sp, #28]
 8015efa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015efe:	f8d9 3000 	ldr.w	r3, [r9]
 8015f02:	1c50      	adds	r0, r2, #1
 8015f04:	4798      	blx	r3
 8015f06:	9004      	str	r0, [sp, #16]
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	d040      	beq.n	8015f8e <rcutils_repl_str+0x12e>
 8015f0c:	463e      	mov	r6, r7
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	9901      	ldr	r1, [sp, #4]
 8015f12:	f001 ff6b 	bl	8017dec <memcpy>
 8015f16:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8015f1a:	683d      	ldr	r5, [r7, #0]
 8015f1c:	9303      	str	r3, [sp, #12]
 8015f1e:	9b04      	ldr	r3, [sp, #16]
 8015f20:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015f24:	441d      	add	r5, r3
 8015f26:	4652      	mov	r2, sl
 8015f28:	4641      	mov	r1, r8
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	f001 ff5e 	bl	8017dec <memcpy>
 8015f30:	f856 2b04 	ldr.w	r2, [r6], #4
 8015f34:	9b02      	ldr	r3, [sp, #8]
 8015f36:	eb05 000a 	add.w	r0, r5, sl
 8015f3a:	441a      	add	r2, r3
 8015f3c:	9b01      	ldr	r3, [sp, #4]
 8015f3e:	1899      	adds	r1, r3, r2
 8015f40:	9b03      	ldr	r3, [sp, #12]
 8015f42:	429c      	cmp	r4, r3
 8015f44:	bf0c      	ite	eq
 8015f46:	9b05      	ldreq	r3, [sp, #20]
 8015f48:	6833      	ldrne	r3, [r6, #0]
 8015f4a:	3401      	adds	r4, #1
 8015f4c:	1a9a      	subs	r2, r3, r2
 8015f4e:	1885      	adds	r5, r0, r2
 8015f50:	f001 ff4c 	bl	8017dec <memcpy>
 8015f54:	455c      	cmp	r4, fp
 8015f56:	d3e6      	bcc.n	8015f26 <rcutils_repl_str+0xc6>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	9a04      	ldr	r2, [sp, #16]
 8015f5c:	9907      	ldr	r1, [sp, #28]
 8015f5e:	5453      	strb	r3, [r2, r1]
 8015f60:	e00b      	b.n	8015f7a <rcutils_repl_str+0x11a>
 8015f62:	4628      	mov	r0, r5
 8015f64:	f8d9 3000 	ldr.w	r3, [r9]
 8015f68:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015f6c:	3001      	adds	r0, #1
 8015f6e:	4798      	blx	r3
 8015f70:	9004      	str	r0, [sp, #16]
 8015f72:	b110      	cbz	r0, 8015f7a <rcutils_repl_str+0x11a>
 8015f74:	9901      	ldr	r1, [sp, #4]
 8015f76:	f002 f91c 	bl	80181b2 <strcpy>
 8015f7a:	4638      	mov	r0, r7
 8015f7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015f80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015f84:	4798      	blx	r3
 8015f86:	9804      	ldr	r0, [sp, #16]
 8015f88:	b009      	add	sp, #36	; 0x24
 8015f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f8e:	2300      	movs	r3, #0
 8015f90:	9304      	str	r3, [sp, #16]
 8015f92:	e7f2      	b.n	8015f7a <rcutils_repl_str+0x11a>

08015f94 <rcutils_snprintf>:
 8015f94:	b40c      	push	{r2, r3}
 8015f96:	b530      	push	{r4, r5, lr}
 8015f98:	b083      	sub	sp, #12
 8015f9a:	ab06      	add	r3, sp, #24
 8015f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fa0:	9301      	str	r3, [sp, #4]
 8015fa2:	b152      	cbz	r2, 8015fba <rcutils_snprintf+0x26>
 8015fa4:	b138      	cbz	r0, 8015fb6 <rcutils_snprintf+0x22>
 8015fa6:	b141      	cbz	r1, 8015fba <rcutils_snprintf+0x26>
 8015fa8:	f002 f9f4 	bl	8018394 <vsniprintf>
 8015fac:	b003      	add	sp, #12
 8015fae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fb2:	b002      	add	sp, #8
 8015fb4:	4770      	bx	lr
 8015fb6:	2900      	cmp	r1, #0
 8015fb8:	d0f6      	beq.n	8015fa8 <rcutils_snprintf+0x14>
 8015fba:	f001 fe11 	bl	8017be0 <__errno>
 8015fbe:	2216      	movs	r2, #22
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fc6:	601a      	str	r2, [r3, #0]
 8015fc8:	e7f0      	b.n	8015fac <rcutils_snprintf+0x18>
 8015fca:	bf00      	nop

08015fcc <rcutils_vsnprintf>:
 8015fcc:	b570      	push	{r4, r5, r6, lr}
 8015fce:	b13a      	cbz	r2, 8015fe0 <rcutils_vsnprintf+0x14>
 8015fd0:	b120      	cbz	r0, 8015fdc <rcutils_vsnprintf+0x10>
 8015fd2:	b129      	cbz	r1, 8015fe0 <rcutils_vsnprintf+0x14>
 8015fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fd8:	f002 b9dc 	b.w	8018394 <vsniprintf>
 8015fdc:	2900      	cmp	r1, #0
 8015fde:	d0f9      	beq.n	8015fd4 <rcutils_vsnprintf+0x8>
 8015fe0:	f001 fdfe 	bl	8017be0 <__errno>
 8015fe4:	2316      	movs	r3, #22
 8015fe6:	6003      	str	r3, [r0, #0]
 8015fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fec:	bd70      	pop	{r4, r5, r6, pc}
 8015fee:	bf00      	nop

08015ff0 <rcutils_strdup>:
 8015ff0:	b084      	sub	sp, #16
 8015ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ff4:	ac07      	add	r4, sp, #28
 8015ff6:	4605      	mov	r5, r0
 8015ff8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015ffc:	b1a0      	cbz	r0, 8016028 <rcutils_strdup+0x38>
 8015ffe:	f7ea f921 	bl	8000244 <strlen>
 8016002:	1c47      	adds	r7, r0, #1
 8016004:	4606      	mov	r6, r0
 8016006:	9b07      	ldr	r3, [sp, #28]
 8016008:	4638      	mov	r0, r7
 801600a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801600c:	4798      	blx	r3
 801600e:	4604      	mov	r4, r0
 8016010:	b128      	cbz	r0, 801601e <rcutils_strdup+0x2e>
 8016012:	463a      	mov	r2, r7
 8016014:	4629      	mov	r1, r5
 8016016:	f001 fee9 	bl	8017dec <memcpy>
 801601a:	2300      	movs	r3, #0
 801601c:	55a3      	strb	r3, [r4, r6]
 801601e:	4620      	mov	r0, r4
 8016020:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016024:	b004      	add	sp, #16
 8016026:	4770      	bx	lr
 8016028:	4604      	mov	r4, r0
 801602a:	4620      	mov	r0, r4
 801602c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016030:	b004      	add	sp, #16
 8016032:	4770      	bx	lr

08016034 <rcutils_strndup>:
 8016034:	b082      	sub	sp, #8
 8016036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016038:	ac06      	add	r4, sp, #24
 801603a:	4605      	mov	r5, r0
 801603c:	e884 000c 	stmia.w	r4, {r2, r3}
 8016040:	b188      	cbz	r0, 8016066 <rcutils_strndup+0x32>
 8016042:	1c4f      	adds	r7, r1, #1
 8016044:	460e      	mov	r6, r1
 8016046:	4638      	mov	r0, r7
 8016048:	990a      	ldr	r1, [sp, #40]	; 0x28
 801604a:	4790      	blx	r2
 801604c:	4604      	mov	r4, r0
 801604e:	b128      	cbz	r0, 801605c <rcutils_strndup+0x28>
 8016050:	463a      	mov	r2, r7
 8016052:	4629      	mov	r1, r5
 8016054:	f001 feca 	bl	8017dec <memcpy>
 8016058:	2300      	movs	r3, #0
 801605a:	55a3      	strb	r3, [r4, r6]
 801605c:	4620      	mov	r0, r4
 801605e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016062:	b002      	add	sp, #8
 8016064:	4770      	bx	lr
 8016066:	4604      	mov	r4, r0
 8016068:	e7f8      	b.n	801605c <rcutils_strndup+0x28>
 801606a:	bf00      	nop

0801606c <rmw_get_zero_initialized_context>:
 801606c:	b510      	push	{r4, lr}
 801606e:	4604      	mov	r4, r0
 8016070:	2250      	movs	r2, #80	; 0x50
 8016072:	2100      	movs	r1, #0
 8016074:	f001 fee2 	bl	8017e3c <memset>
 8016078:	4620      	mov	r0, r4
 801607a:	bd10      	pop	{r4, pc}

0801607c <rmw_validate_namespace_with_size>:
 801607c:	b340      	cbz	r0, 80160d0 <rmw_validate_namespace_with_size+0x54>
 801607e:	b5d0      	push	{r4, r6, r7, lr}
 8016080:	4614      	mov	r4, r2
 8016082:	b0c2      	sub	sp, #264	; 0x108
 8016084:	b332      	cbz	r2, 80160d4 <rmw_validate_namespace_with_size+0x58>
 8016086:	2901      	cmp	r1, #1
 8016088:	460f      	mov	r7, r1
 801608a:	461e      	mov	r6, r3
 801608c:	d102      	bne.n	8016094 <rmw_validate_namespace_with_size+0x18>
 801608e:	7803      	ldrb	r3, [r0, #0]
 8016090:	2b2f      	cmp	r3, #47	; 0x2f
 8016092:	d019      	beq.n	80160c8 <rmw_validate_namespace_with_size+0x4c>
 8016094:	4669      	mov	r1, sp
 8016096:	aa01      	add	r2, sp, #4
 8016098:	f7f5 fcc8 	bl	800ba2c <rmw_validate_full_topic_name>
 801609c:	b990      	cbnz	r0, 80160c4 <rmw_validate_namespace_with_size+0x48>
 801609e:	9b00      	ldr	r3, [sp, #0]
 80160a0:	b14b      	cbz	r3, 80160b6 <rmw_validate_namespace_with_size+0x3a>
 80160a2:	2b07      	cmp	r3, #7
 80160a4:	d007      	beq.n	80160b6 <rmw_validate_namespace_with_size+0x3a>
 80160a6:	1e5a      	subs	r2, r3, #1
 80160a8:	2a05      	cmp	r2, #5
 80160aa:	d82b      	bhi.n	8016104 <rmw_validate_namespace_with_size+0x88>
 80160ac:	e8df f002 	tbb	[pc, r2]
 80160b0:	24211e1b 	.word	0x24211e1b
 80160b4:	1427      	.short	0x1427
 80160b6:	2ff5      	cmp	r7, #245	; 0xf5
 80160b8:	d906      	bls.n	80160c8 <rmw_validate_namespace_with_size+0x4c>
 80160ba:	2307      	movs	r3, #7
 80160bc:	6023      	str	r3, [r4, #0]
 80160be:	b10e      	cbz	r6, 80160c4 <rmw_validate_namespace_with_size+0x48>
 80160c0:	23f4      	movs	r3, #244	; 0xf4
 80160c2:	6033      	str	r3, [r6, #0]
 80160c4:	b042      	add	sp, #264	; 0x108
 80160c6:	bdd0      	pop	{r4, r6, r7, pc}
 80160c8:	2000      	movs	r0, #0
 80160ca:	6020      	str	r0, [r4, #0]
 80160cc:	b042      	add	sp, #264	; 0x108
 80160ce:	bdd0      	pop	{r4, r6, r7, pc}
 80160d0:	200b      	movs	r0, #11
 80160d2:	4770      	bx	lr
 80160d4:	200b      	movs	r0, #11
 80160d6:	e7f5      	b.n	80160c4 <rmw_validate_namespace_with_size+0x48>
 80160d8:	2306      	movs	r3, #6
 80160da:	6023      	str	r3, [r4, #0]
 80160dc:	2e00      	cmp	r6, #0
 80160de:	d0f1      	beq.n	80160c4 <rmw_validate_namespace_with_size+0x48>
 80160e0:	9b01      	ldr	r3, [sp, #4]
 80160e2:	6033      	str	r3, [r6, #0]
 80160e4:	e7ee      	b.n	80160c4 <rmw_validate_namespace_with_size+0x48>
 80160e6:	2301      	movs	r3, #1
 80160e8:	6023      	str	r3, [r4, #0]
 80160ea:	e7f7      	b.n	80160dc <rmw_validate_namespace_with_size+0x60>
 80160ec:	2302      	movs	r3, #2
 80160ee:	6023      	str	r3, [r4, #0]
 80160f0:	e7f4      	b.n	80160dc <rmw_validate_namespace_with_size+0x60>
 80160f2:	2303      	movs	r3, #3
 80160f4:	6023      	str	r3, [r4, #0]
 80160f6:	e7f1      	b.n	80160dc <rmw_validate_namespace_with_size+0x60>
 80160f8:	2304      	movs	r3, #4
 80160fa:	6023      	str	r3, [r4, #0]
 80160fc:	e7ee      	b.n	80160dc <rmw_validate_namespace_with_size+0x60>
 80160fe:	2305      	movs	r3, #5
 8016100:	6023      	str	r3, [r4, #0]
 8016102:	e7eb      	b.n	80160dc <rmw_validate_namespace_with_size+0x60>
 8016104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016108:	4a02      	ldr	r2, [pc, #8]	; (8016114 <rmw_validate_namespace_with_size+0x98>)
 801610a:	a802      	add	r0, sp, #8
 801610c:	f7ff ff42 	bl	8015f94 <rcutils_snprintf>
 8016110:	2001      	movs	r0, #1
 8016112:	e7d7      	b.n	80160c4 <rmw_validate_namespace_with_size+0x48>
 8016114:	0801ab1c 	.word	0x0801ab1c

08016118 <rmw_validate_namespace>:
 8016118:	b168      	cbz	r0, 8016136 <rmw_validate_namespace+0x1e>
 801611a:	b570      	push	{r4, r5, r6, lr}
 801611c:	460d      	mov	r5, r1
 801611e:	4616      	mov	r6, r2
 8016120:	4604      	mov	r4, r0
 8016122:	f7ea f88f 	bl	8000244 <strlen>
 8016126:	4633      	mov	r3, r6
 8016128:	4601      	mov	r1, r0
 801612a:	462a      	mov	r2, r5
 801612c:	4620      	mov	r0, r4
 801612e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016132:	f7ff bfa3 	b.w	801607c <rmw_validate_namespace_with_size>
 8016136:	200b      	movs	r0, #11
 8016138:	4770      	bx	lr
 801613a:	bf00      	nop

0801613c <rmw_namespace_validation_result_string>:
 801613c:	2807      	cmp	r0, #7
 801613e:	bf9a      	itte	ls
 8016140:	4b02      	ldrls	r3, [pc, #8]	; (801614c <rmw_namespace_validation_result_string+0x10>)
 8016142:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016146:	4802      	ldrhi	r0, [pc, #8]	; (8016150 <rmw_namespace_validation_result_string+0x14>)
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	0801ad14 	.word	0x0801ad14
 8016150:	0801ab6c 	.word	0x0801ab6c

08016154 <rmw_validate_node_name>:
 8016154:	2800      	cmp	r0, #0
 8016156:	d03b      	beq.n	80161d0 <rmw_validate_node_name+0x7c>
 8016158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801615c:	460f      	mov	r7, r1
 801615e:	2900      	cmp	r1, #0
 8016160:	d038      	beq.n	80161d4 <rmw_validate_node_name+0x80>
 8016162:	4615      	mov	r5, r2
 8016164:	4604      	mov	r4, r0
 8016166:	f7ea f86d 	bl	8000244 <strlen>
 801616a:	b1e0      	cbz	r0, 80161a6 <rmw_validate_node_name+0x52>
 801616c:	1e63      	subs	r3, r4, #1
 801616e:	eb03 0e00 	add.w	lr, r3, r0
 8016172:	f1c4 0c01 	rsb	ip, r4, #1
 8016176:	eb0c 0803 	add.w	r8, ip, r3
 801617a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801617e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8016182:	f026 0220 	bic.w	r2, r6, #32
 8016186:	2909      	cmp	r1, #9
 8016188:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 801618c:	d913      	bls.n	80161b6 <rmw_validate_node_name+0x62>
 801618e:	2a19      	cmp	r2, #25
 8016190:	d911      	bls.n	80161b6 <rmw_validate_node_name+0x62>
 8016192:	2e5f      	cmp	r6, #95	; 0x5f
 8016194:	d00f      	beq.n	80161b6 <rmw_validate_node_name+0x62>
 8016196:	2302      	movs	r3, #2
 8016198:	603b      	str	r3, [r7, #0]
 801619a:	b10d      	cbz	r5, 80161a0 <rmw_validate_node_name+0x4c>
 801619c:	f8c5 8000 	str.w	r8, [r5]
 80161a0:	2000      	movs	r0, #0
 80161a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a6:	2301      	movs	r3, #1
 80161a8:	603b      	str	r3, [r7, #0]
 80161aa:	2d00      	cmp	r5, #0
 80161ac:	d0f8      	beq.n	80161a0 <rmw_validate_node_name+0x4c>
 80161ae:	2000      	movs	r0, #0
 80161b0:	6028      	str	r0, [r5, #0]
 80161b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161b6:	4573      	cmp	r3, lr
 80161b8:	d1dd      	bne.n	8016176 <rmw_validate_node_name+0x22>
 80161ba:	7822      	ldrb	r2, [r4, #0]
 80161bc:	4b0d      	ldr	r3, [pc, #52]	; (80161f4 <rmw_validate_node_name+0xa0>)
 80161be:	5cd3      	ldrb	r3, [r2, r3]
 80161c0:	f013 0304 	ands.w	r3, r3, #4
 80161c4:	d110      	bne.n	80161e8 <rmw_validate_node_name+0x94>
 80161c6:	28ff      	cmp	r0, #255	; 0xff
 80161c8:	d806      	bhi.n	80161d8 <rmw_validate_node_name+0x84>
 80161ca:	4618      	mov	r0, r3
 80161cc:	603b      	str	r3, [r7, #0]
 80161ce:	e7e8      	b.n	80161a2 <rmw_validate_node_name+0x4e>
 80161d0:	200b      	movs	r0, #11
 80161d2:	4770      	bx	lr
 80161d4:	200b      	movs	r0, #11
 80161d6:	e7e4      	b.n	80161a2 <rmw_validate_node_name+0x4e>
 80161d8:	2204      	movs	r2, #4
 80161da:	603a      	str	r2, [r7, #0]
 80161dc:	2d00      	cmp	r5, #0
 80161de:	d0df      	beq.n	80161a0 <rmw_validate_node_name+0x4c>
 80161e0:	22fe      	movs	r2, #254	; 0xfe
 80161e2:	4618      	mov	r0, r3
 80161e4:	602a      	str	r2, [r5, #0]
 80161e6:	e7dc      	b.n	80161a2 <rmw_validate_node_name+0x4e>
 80161e8:	2303      	movs	r3, #3
 80161ea:	603b      	str	r3, [r7, #0]
 80161ec:	2d00      	cmp	r5, #0
 80161ee:	d1de      	bne.n	80161ae <rmw_validate_node_name+0x5a>
 80161f0:	e7d6      	b.n	80161a0 <rmw_validate_node_name+0x4c>
 80161f2:	bf00      	nop
 80161f4:	0801af71 	.word	0x0801af71

080161f8 <rmw_node_name_validation_result_string>:
 80161f8:	2804      	cmp	r0, #4
 80161fa:	bf9a      	itte	ls
 80161fc:	4b02      	ldrls	r3, [pc, #8]	; (8016208 <rmw_node_name_validation_result_string+0x10>)
 80161fe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016202:	4802      	ldrhi	r0, [pc, #8]	; (801620c <rmw_node_name_validation_result_string+0x14>)
 8016204:	4770      	bx	lr
 8016206:	bf00      	nop
 8016208:	0801ae20 	.word	0x0801ae20
 801620c:	0801ad34 	.word	0x0801ad34

08016210 <on_status>:
 8016210:	b082      	sub	sp, #8
 8016212:	b002      	add	sp, #8
 8016214:	4770      	bx	lr
 8016216:	bf00      	nop

08016218 <on_topic>:
 8016218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801621c:	4a21      	ldr	r2, [pc, #132]	; (80162a4 <on_topic+0x8c>)
 801621e:	b094      	sub	sp, #80	; 0x50
 8016220:	6812      	ldr	r2, [r2, #0]
 8016222:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016224:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8016228:	9113      	str	r1, [sp, #76]	; 0x4c
 801622a:	9312      	str	r3, [sp, #72]	; 0x48
 801622c:	b3ba      	cbz	r2, 801629e <on_topic+0x86>
 801622e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8016232:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8016236:	e001      	b.n	801623c <on_topic+0x24>
 8016238:	6892      	ldr	r2, [r2, #8]
 801623a:	b382      	cbz	r2, 801629e <on_topic+0x86>
 801623c:	68d4      	ldr	r4, [r2, #12]
 801623e:	8aa3      	ldrh	r3, [r4, #20]
 8016240:	428b      	cmp	r3, r1
 8016242:	d1f9      	bne.n	8016238 <on_topic+0x20>
 8016244:	7da3      	ldrb	r3, [r4, #22]
 8016246:	4283      	cmp	r3, r0
 8016248:	d1f6      	bne.n	8016238 <on_topic+0x20>
 801624a:	2248      	movs	r2, #72	; 0x48
 801624c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016250:	4668      	mov	r0, sp
 8016252:	f001 fdcb 	bl	8017dec <memcpy>
 8016256:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801625a:	4620      	mov	r0, r4
 801625c:	f7f6 fd1e 	bl	800cc9c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016260:	4607      	mov	r7, r0
 8016262:	b1e0      	cbz	r0, 801629e <on_topic+0x86>
 8016264:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016268:	462a      	mov	r2, r5
 801626a:	4630      	mov	r0, r6
 801626c:	f108 0110 	add.w	r1, r8, #16
 8016270:	f7f8 f83a 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 8016274:	b930      	cbnz	r0, 8016284 <on_topic+0x6c>
 8016276:	4639      	mov	r1, r7
 8016278:	480b      	ldr	r0, [pc, #44]	; (80162a8 <on_topic+0x90>)
 801627a:	b014      	add	sp, #80	; 0x50
 801627c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016280:	f000 b8be 	b.w	8016400 <put_memory>
 8016284:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8016288:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801628c:	f7f6 fb38 	bl	800c900 <rmw_uros_epoch_nanos>
 8016290:	2305      	movs	r3, #5
 8016292:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8016296:	e9c2 0100 	strd	r0, r1, [r2]
 801629a:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801629e:	b014      	add	sp, #80	; 0x50
 80162a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a4:	2000bf74 	.word	0x2000bf74
 80162a8:	20008d08 	.word	0x20008d08

080162ac <on_request>:
 80162ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162b0:	4823      	ldr	r0, [pc, #140]	; (8016340 <on_request+0x94>)
 80162b2:	b095      	sub	sp, #84	; 0x54
 80162b4:	6800      	ldr	r0, [r0, #0]
 80162b6:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80162ba:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 80162be:	9113      	str	r1, [sp, #76]	; 0x4c
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d039      	beq.n	8016338 <on_request+0x8c>
 80162c4:	461d      	mov	r5, r3
 80162c6:	e001      	b.n	80162cc <on_request+0x20>
 80162c8:	6880      	ldr	r0, [r0, #8]
 80162ca:	b3a8      	cbz	r0, 8016338 <on_request+0x8c>
 80162cc:	68c4      	ldr	r4, [r0, #12]
 80162ce:	8b21      	ldrh	r1, [r4, #24]
 80162d0:	4291      	cmp	r1, r2
 80162d2:	d1f9      	bne.n	80162c8 <on_request+0x1c>
 80162d4:	2248      	movs	r2, #72	; 0x48
 80162d6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80162da:	4668      	mov	r0, sp
 80162dc:	f001 fd86 	bl	8017dec <memcpy>
 80162e0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80162e4:	4620      	mov	r0, r4
 80162e6:	f7f6 fcd9 	bl	800cc9c <rmw_uxrce_get_static_input_buffer_for_entity>
 80162ea:	4606      	mov	r6, r0
 80162ec:	b320      	cbz	r0, 8016338 <on_request+0x8c>
 80162ee:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80162f2:	463a      	mov	r2, r7
 80162f4:	4640      	mov	r0, r8
 80162f6:	f109 0110 	add.w	r1, r9, #16
 80162fa:	f7f7 fff5 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 80162fe:	b930      	cbnz	r0, 801630e <on_request+0x62>
 8016300:	4631      	mov	r1, r6
 8016302:	4810      	ldr	r0, [pc, #64]	; (8016344 <on_request+0x98>)
 8016304:	b015      	add	sp, #84	; 0x54
 8016306:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801630a:	f000 b879 	b.w	8016400 <put_memory>
 801630e:	f609 0628 	addw	r6, r9, #2088	; 0x828
 8016312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016314:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8016318:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 801631c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801631e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016322:	e886 0003 	stmia.w	r6, {r0, r1}
 8016326:	f7f6 faeb 	bl	800c900 <rmw_uros_epoch_nanos>
 801632a:	2303      	movs	r3, #3
 801632c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8016330:	e9c2 0100 	strd	r0, r1, [r2]
 8016334:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8016338:	b015      	add	sp, #84	; 0x54
 801633a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801633e:	bf00      	nop
 8016340:	2000bf64 	.word	0x2000bf64
 8016344:	20008d08 	.word	0x20008d08

08016348 <on_reply>:
 8016348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801634c:	4822      	ldr	r0, [pc, #136]	; (80163d8 <on_reply+0x90>)
 801634e:	b095      	sub	sp, #84	; 0x54
 8016350:	6800      	ldr	r0, [r0, #0]
 8016352:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8016356:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801635a:	9113      	str	r1, [sp, #76]	; 0x4c
 801635c:	2800      	cmp	r0, #0
 801635e:	d037      	beq.n	80163d0 <on_reply+0x88>
 8016360:	461d      	mov	r5, r3
 8016362:	e001      	b.n	8016368 <on_reply+0x20>
 8016364:	6880      	ldr	r0, [r0, #8]
 8016366:	b398      	cbz	r0, 80163d0 <on_reply+0x88>
 8016368:	68c4      	ldr	r4, [r0, #12]
 801636a:	8b21      	ldrh	r1, [r4, #24]
 801636c:	4291      	cmp	r1, r2
 801636e:	d1f9      	bne.n	8016364 <on_reply+0x1c>
 8016370:	2248      	movs	r2, #72	; 0x48
 8016372:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016376:	4668      	mov	r0, sp
 8016378:	f001 fd38 	bl	8017dec <memcpy>
 801637c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8016380:	4620      	mov	r0, r4
 8016382:	f7f6 fc8b 	bl	800cc9c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016386:	4606      	mov	r6, r0
 8016388:	b310      	cbz	r0, 80163d0 <on_reply+0x88>
 801638a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801638e:	463a      	mov	r2, r7
 8016390:	4640      	mov	r0, r8
 8016392:	f109 0110 	add.w	r1, r9, #16
 8016396:	f7f7 ffa7 	bl	800e2e8 <ucdr_deserialize_array_uint8_t>
 801639a:	b930      	cbnz	r0, 80163aa <on_reply+0x62>
 801639c:	4631      	mov	r1, r6
 801639e:	480f      	ldr	r0, [pc, #60]	; (80163dc <on_reply+0x94>)
 80163a0:	b015      	add	sp, #84	; 0x54
 80163a2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163a6:	f000 b82b 	b.w	8016400 <put_memory>
 80163aa:	2300      	movs	r3, #0
 80163ac:	b2aa      	uxth	r2, r5
 80163ae:	f609 0128 	addw	r1, r9, #2088	; 0x828
 80163b2:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80163b6:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 80163ba:	e9c1 2300 	strd	r2, r3, [r1]
 80163be:	f7f6 fa9f 	bl	800c900 <rmw_uros_epoch_nanos>
 80163c2:	2304      	movs	r3, #4
 80163c4:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80163c8:	e9c2 0100 	strd	r0, r1, [r2]
 80163cc:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80163d0:	b015      	add	sp, #84	; 0x54
 80163d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163d6:	bf00      	nop
 80163d8:	20009598 	.word	0x20009598
 80163dc:	20008d08 	.word	0x20008d08

080163e0 <get_memory>:
 80163e0:	4603      	mov	r3, r0
 80163e2:	6840      	ldr	r0, [r0, #4]
 80163e4:	b158      	cbz	r0, 80163fe <get_memory+0x1e>
 80163e6:	6882      	ldr	r2, [r0, #8]
 80163e8:	605a      	str	r2, [r3, #4]
 80163ea:	b10a      	cbz	r2, 80163f0 <get_memory+0x10>
 80163ec:	2100      	movs	r1, #0
 80163ee:	6051      	str	r1, [r2, #4]
 80163f0:	681a      	ldr	r2, [r3, #0]
 80163f2:	6082      	str	r2, [r0, #8]
 80163f4:	b102      	cbz	r2, 80163f8 <get_memory+0x18>
 80163f6:	6050      	str	r0, [r2, #4]
 80163f8:	2200      	movs	r2, #0
 80163fa:	6042      	str	r2, [r0, #4]
 80163fc:	6018      	str	r0, [r3, #0]
 80163fe:	4770      	bx	lr

08016400 <put_memory>:
 8016400:	684b      	ldr	r3, [r1, #4]
 8016402:	b10b      	cbz	r3, 8016408 <put_memory+0x8>
 8016404:	688a      	ldr	r2, [r1, #8]
 8016406:	609a      	str	r2, [r3, #8]
 8016408:	688a      	ldr	r2, [r1, #8]
 801640a:	b102      	cbz	r2, 801640e <put_memory+0xe>
 801640c:	6053      	str	r3, [r2, #4]
 801640e:	6803      	ldr	r3, [r0, #0]
 8016410:	428b      	cmp	r3, r1
 8016412:	6843      	ldr	r3, [r0, #4]
 8016414:	bf08      	it	eq
 8016416:	6002      	streq	r2, [r0, #0]
 8016418:	608b      	str	r3, [r1, #8]
 801641a:	b103      	cbz	r3, 801641e <put_memory+0x1e>
 801641c:	6059      	str	r1, [r3, #4]
 801641e:	2300      	movs	r3, #0
 8016420:	604b      	str	r3, [r1, #4]
 8016422:	6041      	str	r1, [r0, #4]
 8016424:	4770      	bx	lr
 8016426:	bf00      	nop

08016428 <rmw_destroy_client>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	b128      	cbz	r0, 8016438 <rmw_destroy_client+0x10>
 801642c:	4604      	mov	r4, r0
 801642e:	6800      	ldr	r0, [r0, #0]
 8016430:	460d      	mov	r5, r1
 8016432:	f7f6 fda5 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 8016436:	b910      	cbnz	r0, 801643e <rmw_destroy_client+0x16>
 8016438:	2401      	movs	r4, #1
 801643a:	4620      	mov	r0, r4
 801643c:	bd70      	pop	{r4, r5, r6, pc}
 801643e:	6863      	ldr	r3, [r4, #4]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d0f9      	beq.n	8016438 <rmw_destroy_client+0x10>
 8016444:	2d00      	cmp	r5, #0
 8016446:	d0f7      	beq.n	8016438 <rmw_destroy_client+0x10>
 8016448:	6828      	ldr	r0, [r5, #0]
 801644a:	f7f6 fd99 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 801644e:	2800      	cmp	r0, #0
 8016450:	d0f2      	beq.n	8016438 <rmw_destroy_client+0x10>
 8016452:	686e      	ldr	r6, [r5, #4]
 8016454:	2e00      	cmp	r6, #0
 8016456:	d0ef      	beq.n	8016438 <rmw_destroy_client+0x10>
 8016458:	6864      	ldr	r4, [r4, #4]
 801645a:	6932      	ldr	r2, [r6, #16]
 801645c:	6920      	ldr	r0, [r4, #16]
 801645e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016462:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016466:	6819      	ldr	r1, [r3, #0]
 8016468:	f7fa fb4c 	bl	8010b04 <uxr_buffer_cancel_data>
 801646c:	4602      	mov	r2, r0
 801646e:	6920      	ldr	r0, [r4, #16]
 8016470:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016474:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016478:	f7f6 fcfe 	bl	800ce78 <run_xrce_session>
 801647c:	6920      	ldr	r0, [r4, #16]
 801647e:	6932      	ldr	r2, [r6, #16]
 8016480:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016484:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016488:	6819      	ldr	r1, [r3, #0]
 801648a:	f7f9 fffd 	bl	8010488 <uxr_buffer_delete_entity>
 801648e:	4602      	mov	r2, r0
 8016490:	6920      	ldr	r0, [r4, #16]
 8016492:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016496:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801649a:	f7f6 fced 	bl	800ce78 <run_xrce_session>
 801649e:	4603      	mov	r3, r0
 80164a0:	4628      	mov	r0, r5
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	bf14      	ite	ne
 80164a6:	2400      	movne	r4, #0
 80164a8:	2402      	moveq	r4, #2
 80164aa:	f7f6 fbd5 	bl	800cc58 <rmw_uxrce_fini_client_memory>
 80164ae:	e7c4      	b.n	801643a <rmw_destroy_client+0x12>

080164b0 <rmw_get_implementation_identifier>:
 80164b0:	4b01      	ldr	r3, [pc, #4]	; (80164b8 <rmw_get_implementation_identifier+0x8>)
 80164b2:	6818      	ldr	r0, [r3, #0]
 80164b4:	4770      	bx	lr
 80164b6:	bf00      	nop
 80164b8:	0801ae4c 	.word	0x0801ae4c

080164bc <create_topic>:
 80164bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164c0:	4605      	mov	r5, r0
 80164c2:	b085      	sub	sp, #20
 80164c4:	4821      	ldr	r0, [pc, #132]	; (801654c <create_topic+0x90>)
 80164c6:	460f      	mov	r7, r1
 80164c8:	4616      	mov	r6, r2
 80164ca:	f7ff ff89 	bl	80163e0 <get_memory>
 80164ce:	4604      	mov	r4, r0
 80164d0:	b390      	cbz	r0, 8016538 <create_topic+0x7c>
 80164d2:	f241 5396 	movw	r3, #5526	; 0x1596
 80164d6:	692a      	ldr	r2, [r5, #16]
 80164d8:	68c4      	ldr	r4, [r0, #12]
 80164da:	5ad0      	ldrh	r0, [r2, r3]
 80164dc:	61a5      	str	r5, [r4, #24]
 80164de:	1c41      	adds	r1, r0, #1
 80164e0:	6166      	str	r6, [r4, #20]
 80164e2:	52d1      	strh	r1, [r2, r3]
 80164e4:	2102      	movs	r1, #2
 80164e6:	f7fa faa5 	bl	8010a34 <uxr_object_id>
 80164ea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8016550 <create_topic+0x94>
 80164ee:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8016554 <create_topic+0x98>
 80164f2:	4641      	mov	r1, r8
 80164f4:	223c      	movs	r2, #60	; 0x3c
 80164f6:	6120      	str	r0, [r4, #16]
 80164f8:	4638      	mov	r0, r7
 80164fa:	f7f6 fd2b 	bl	800cf54 <generate_topic_name>
 80164fe:	4649      	mov	r1, r9
 8016500:	2264      	movs	r2, #100	; 0x64
 8016502:	4630      	mov	r0, r6
 8016504:	f7f6 fcec 	bl	800cee0 <generate_type_name>
 8016508:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801650c:	2106      	movs	r1, #6
 801650e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8016512:	e9cd 8900 	strd	r8, r9, [sp]
 8016516:	9102      	str	r1, [sp, #8]
 8016518:	6811      	ldr	r1, [r2, #0]
 801651a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801651e:	6922      	ldr	r2, [r4, #16]
 8016520:	f7fa f838 	bl	8010594 <uxr_buffer_create_topic_bin>
 8016524:	4602      	mov	r2, r0
 8016526:	6928      	ldr	r0, [r5, #16]
 8016528:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801652c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016530:	f7f6 fca2 	bl	800ce78 <run_xrce_session>
 8016534:	4605      	mov	r5, r0
 8016536:	b118      	cbz	r0, 8016540 <create_topic+0x84>
 8016538:	4620      	mov	r0, r4
 801653a:	b005      	add	sp, #20
 801653c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016540:	4620      	mov	r0, r4
 8016542:	f7f6 fb9f 	bl	800cc84 <rmw_uxrce_fini_topic_memory>
 8016546:	462c      	mov	r4, r5
 8016548:	e7f6      	b.n	8016538 <create_topic+0x7c>
 801654a:	bf00      	nop
 801654c:	2000bea0 	.word	0x2000bea0
 8016550:	200067a8 	.word	0x200067a8
 8016554:	200067e4 	.word	0x200067e4

08016558 <destroy_topic>:
 8016558:	b538      	push	{r3, r4, r5, lr}
 801655a:	6985      	ldr	r5, [r0, #24]
 801655c:	b1dd      	cbz	r5, 8016596 <destroy_topic+0x3e>
 801655e:	4604      	mov	r4, r0
 8016560:	6928      	ldr	r0, [r5, #16]
 8016562:	6922      	ldr	r2, [r4, #16]
 8016564:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016568:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801656c:	6819      	ldr	r1, [r3, #0]
 801656e:	f7f9 ff8b 	bl	8010488 <uxr_buffer_delete_entity>
 8016572:	4602      	mov	r2, r0
 8016574:	6928      	ldr	r0, [r5, #16]
 8016576:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801657a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801657e:	f7f6 fc7b 	bl	800ce78 <run_xrce_session>
 8016582:	4603      	mov	r3, r0
 8016584:	2b00      	cmp	r3, #0
 8016586:	4620      	mov	r0, r4
 8016588:	bf14      	ite	ne
 801658a:	2400      	movne	r4, #0
 801658c:	2402      	moveq	r4, #2
 801658e:	f7f6 fb79 	bl	800cc84 <rmw_uxrce_fini_topic_memory>
 8016592:	4620      	mov	r0, r4
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	2401      	movs	r4, #1
 8016598:	4620      	mov	r0, r4
 801659a:	bd38      	pop	{r3, r4, r5, pc}

0801659c <rmw_take_request>:
 801659c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165a0:	4605      	mov	r5, r0
 80165a2:	6800      	ldr	r0, [r0, #0]
 80165a4:	460c      	mov	r4, r1
 80165a6:	4690      	mov	r8, r2
 80165a8:	461e      	mov	r6, r3
 80165aa:	b089      	sub	sp, #36	; 0x24
 80165ac:	b128      	cbz	r0, 80165ba <rmw_take_request+0x1e>
 80165ae:	4b28      	ldr	r3, [pc, #160]	; (8016650 <rmw_take_request+0xb4>)
 80165b0:	6819      	ldr	r1, [r3, #0]
 80165b2:	f7e9 fe3d 	bl	8000230 <strcmp>
 80165b6:	2800      	cmp	r0, #0
 80165b8:	d146      	bne.n	8016648 <rmw_take_request+0xac>
 80165ba:	b10e      	cbz	r6, 80165c0 <rmw_take_request+0x24>
 80165bc:	2300      	movs	r3, #0
 80165be:	7033      	strb	r3, [r6, #0]
 80165c0:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80165c4:	f7f6 fbe0 	bl	800cd88 <rmw_uxrce_clean_expired_static_input_buffer>
 80165c8:	4648      	mov	r0, r9
 80165ca:	f7f6 fbb3 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 80165ce:	4607      	mov	r7, r0
 80165d0:	b3b0      	cbz	r0, 8016640 <rmw_take_request+0xa4>
 80165d2:	68c5      	ldr	r5, [r0, #12]
 80165d4:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80165d8:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80165dc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80165e0:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80165e4:	7423      	strb	r3, [r4, #16]
 80165e6:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 80165ea:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 80165ee:	f8a4 2011 	strh.w	r2, [r4, #17]
 80165f2:	74e3      	strb	r3, [r4, #19]
 80165f4:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 80165f8:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 80165fc:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8016600:	6161      	str	r1, [r4, #20]
 8016602:	61a2      	str	r2, [r4, #24]
 8016604:	61e3      	str	r3, [r4, #28]
 8016606:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801660a:	689b      	ldr	r3, [r3, #8]
 801660c:	4798      	blx	r3
 801660e:	6844      	ldr	r4, [r0, #4]
 8016610:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8016614:	4668      	mov	r0, sp
 8016616:	f105 0110 	add.w	r1, r5, #16
 801661a:	f7f9 fde7 	bl	80101ec <ucdr_init_buffer>
 801661e:	4641      	mov	r1, r8
 8016620:	68e3      	ldr	r3, [r4, #12]
 8016622:	4668      	mov	r0, sp
 8016624:	4798      	blx	r3
 8016626:	4639      	mov	r1, r7
 8016628:	4604      	mov	r4, r0
 801662a:	480a      	ldr	r0, [pc, #40]	; (8016654 <rmw_take_request+0xb8>)
 801662c:	f7ff fee8 	bl	8016400 <put_memory>
 8016630:	b106      	cbz	r6, 8016634 <rmw_take_request+0x98>
 8016632:	7034      	strb	r4, [r6, #0]
 8016634:	f084 0001 	eor.w	r0, r4, #1
 8016638:	b2c0      	uxtb	r0, r0
 801663a:	b009      	add	sp, #36	; 0x24
 801663c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016640:	2001      	movs	r0, #1
 8016642:	b009      	add	sp, #36	; 0x24
 8016644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016648:	200c      	movs	r0, #12
 801664a:	b009      	add	sp, #36	; 0x24
 801664c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016650:	0801ae4c 	.word	0x0801ae4c
 8016654:	20008d08 	.word	0x20008d08

08016658 <rmw_send_response>:
 8016658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801665a:	4605      	mov	r5, r0
 801665c:	6800      	ldr	r0, [r0, #0]
 801665e:	460c      	mov	r4, r1
 8016660:	4617      	mov	r7, r2
 8016662:	b091      	sub	sp, #68	; 0x44
 8016664:	b128      	cbz	r0, 8016672 <rmw_send_response+0x1a>
 8016666:	4b2a      	ldr	r3, [pc, #168]	; (8016710 <rmw_send_response+0xb8>)
 8016668:	6819      	ldr	r1, [r3, #0]
 801666a:	f7e9 fde1 	bl	8000230 <strcmp>
 801666e:	2800      	cmp	r0, #0
 8016670:	d143      	bne.n	80166fa <rmw_send_response+0xa2>
 8016672:	4621      	mov	r1, r4
 8016674:	4622      	mov	r2, r4
 8016676:	f831 ef01 	ldrh.w	lr, [r1, #1]!
 801667a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801667e:	f891 c002 	ldrb.w	ip, [r1, #2]
 8016682:	686d      	ldr	r5, [r5, #4]
 8016684:	6851      	ldr	r1, [r2, #4]
 8016686:	6966      	ldr	r6, [r4, #20]
 8016688:	f88d c016 	strb.w	ip, [sp, #22]
 801668c:	6892      	ldr	r2, [r2, #8]
 801668e:	f894 c000 	ldrb.w	ip, [r4]
 8016692:	ab02      	add	r3, sp, #8
 8016694:	f8ad e014 	strh.w	lr, [sp, #20]
 8016698:	f88d c017 	strb.w	ip, [sp, #23]
 801669c:	9606      	str	r6, [sp, #24]
 801669e:	c307      	stmia	r3!, {r0, r1, r2}
 80166a0:	6922      	ldr	r2, [r4, #16]
 80166a2:	696b      	ldr	r3, [r5, #20]
 80166a4:	9207      	str	r2, [sp, #28]
 80166a6:	68db      	ldr	r3, [r3, #12]
 80166a8:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80166aa:	4798      	blx	r3
 80166ac:	6844      	ldr	r4, [r0, #4]
 80166ae:	4638      	mov	r0, r7
 80166b0:	6923      	ldr	r3, [r4, #16]
 80166b2:	4798      	blx	r3
 80166b4:	6932      	ldr	r2, [r6, #16]
 80166b6:	3018      	adds	r0, #24
 80166b8:	9000      	str	r0, [sp, #0]
 80166ba:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80166bc:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 80166c0:	ab08      	add	r3, sp, #32
 80166c2:	692a      	ldr	r2, [r5, #16]
 80166c4:	f7fc f91c 	bl	8012900 <uxr_prepare_output_stream>
 80166c8:	b910      	cbnz	r0, 80166d0 <rmw_send_response+0x78>
 80166ca:	2001      	movs	r0, #1
 80166cc:	b011      	add	sp, #68	; 0x44
 80166ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166d0:	a902      	add	r1, sp, #8
 80166d2:	a808      	add	r0, sp, #32
 80166d4:	f7fd f88a 	bl	80137ec <uxr_serialize_SampleIdentity>
 80166d8:	68a3      	ldr	r3, [r4, #8]
 80166da:	4638      	mov	r0, r7
 80166dc:	a908      	add	r1, sp, #32
 80166de:	4798      	blx	r3
 80166e0:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80166e4:	6930      	ldr	r0, [r6, #16]
 80166e6:	2b01      	cmp	r3, #1
 80166e8:	d00a      	beq.n	8016700 <rmw_send_response+0xa8>
 80166ea:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80166ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80166f0:	f7fb f876 	bl	80117e0 <uxr_run_session_until_confirm_delivery>
 80166f4:	2000      	movs	r0, #0
 80166f6:	b011      	add	sp, #68	; 0x44
 80166f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166fa:	200c      	movs	r0, #12
 80166fc:	b011      	add	sp, #68	; 0x44
 80166fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016700:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016704:	f7fa ffda 	bl	80116bc <uxr_flash_output_streams>
 8016708:	2000      	movs	r0, #0
 801670a:	b011      	add	sp, #68	; 0x44
 801670c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801670e:	bf00      	nop
 8016710:	0801ae4c 	.word	0x0801ae4c

08016714 <rmw_take_response>:
 8016714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016718:	4604      	mov	r4, r0
 801671a:	6800      	ldr	r0, [r0, #0]
 801671c:	4688      	mov	r8, r1
 801671e:	4617      	mov	r7, r2
 8016720:	461d      	mov	r5, r3
 8016722:	b089      	sub	sp, #36	; 0x24
 8016724:	b120      	cbz	r0, 8016730 <rmw_take_response+0x1c>
 8016726:	4b1f      	ldr	r3, [pc, #124]	; (80167a4 <rmw_take_response+0x90>)
 8016728:	6819      	ldr	r1, [r3, #0]
 801672a:	f7e9 fd81 	bl	8000230 <strcmp>
 801672e:	bb88      	cbnz	r0, 8016794 <rmw_take_response+0x80>
 8016730:	b10d      	cbz	r5, 8016736 <rmw_take_response+0x22>
 8016732:	2300      	movs	r3, #0
 8016734:	702b      	strb	r3, [r5, #0]
 8016736:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801673a:	f7f6 fb25 	bl	800cd88 <rmw_uxrce_clean_expired_static_input_buffer>
 801673e:	4648      	mov	r0, r9
 8016740:	f7f6 faf8 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016744:	4606      	mov	r6, r0
 8016746:	b348      	cbz	r0, 801679c <rmw_take_response+0x88>
 8016748:	68c4      	ldr	r4, [r0, #12]
 801674a:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801674e:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8016752:	68d1      	ldr	r1, [r2, #12]
 8016754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016758:	e9c8 2308 	strd	r2, r3, [r8, #32]
 801675c:	4788      	blx	r1
 801675e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016762:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8016766:	f104 0110 	add.w	r1, r4, #16
 801676a:	4668      	mov	r0, sp
 801676c:	f7f9 fd3e 	bl	80101ec <ucdr_init_buffer>
 8016770:	4639      	mov	r1, r7
 8016772:	4668      	mov	r0, sp
 8016774:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016778:	4798      	blx	r3
 801677a:	4631      	mov	r1, r6
 801677c:	4604      	mov	r4, r0
 801677e:	480a      	ldr	r0, [pc, #40]	; (80167a8 <rmw_take_response+0x94>)
 8016780:	f7ff fe3e 	bl	8016400 <put_memory>
 8016784:	b105      	cbz	r5, 8016788 <rmw_take_response+0x74>
 8016786:	702c      	strb	r4, [r5, #0]
 8016788:	f084 0001 	eor.w	r0, r4, #1
 801678c:	b2c0      	uxtb	r0, r0
 801678e:	b009      	add	sp, #36	; 0x24
 8016790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016794:	200c      	movs	r0, #12
 8016796:	b009      	add	sp, #36	; 0x24
 8016798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801679c:	2001      	movs	r0, #1
 801679e:	b009      	add	sp, #36	; 0x24
 80167a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167a4:	0801ae4c 	.word	0x0801ae4c
 80167a8:	20008d08 	.word	0x20008d08

080167ac <rmw_wait>:
 80167ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b0:	4698      	mov	r8, r3
 80167b2:	4607      	mov	r7, r0
 80167b4:	460e      	mov	r6, r1
 80167b6:	4691      	mov	r9, r2
 80167b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167ba:	2a00      	cmp	r2, #0
 80167bc:	f000 8123 	beq.w	8016a06 <rmw_wait+0x25a>
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	f000 812c 	beq.w	8016a1e <rmw_wait+0x272>
 80167c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80167ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167ce:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80167d2:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 80167d6:	ebbb 0b02 	subs.w	fp, fp, r2
 80167da:	ea4a 6ad2 	orr.w	sl, sl, r2, lsr #27
 80167de:	eb6a 0a03 	sbc.w	sl, sl, r3
 80167e2:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
 80167e6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80167ea:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 80167ee:	eb1c 0b02 	adds.w	fp, ip, r2
 80167f2:	eb4a 0a03 	adc.w	sl, sl, r3
 80167f6:	4aab      	ldr	r2, [pc, #684]	; (8016aa4 <rmw_wait+0x2f8>)
 80167f8:	2300      	movs	r3, #0
 80167fa:	f7e9 ffff 	bl	80007fc <__aeabi_uldivmod>
 80167fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8016802:	2300      	movs	r3, #0
 8016804:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8016808:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 801680c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016810:	eb1b 0400 	adds.w	r4, fp, r0
 8016814:	eb4a 0501 	adc.w	r5, sl, r1
 8016818:	42a2      	cmp	r2, r4
 801681a:	eb73 0105 	sbcs.w	r1, r3, r5
 801681e:	f2c0 80f0 	blt.w	8016a02 <rmw_wait+0x256>
 8016822:	f7f6 fab1 	bl	800cd88 <rmw_uxrce_clean_expired_static_input_buffer>
 8016826:	4ba0      	ldr	r3, [pc, #640]	; (8016aa8 <rmw_wait+0x2fc>)
 8016828:	681d      	ldr	r5, [r3, #0]
 801682a:	b145      	cbz	r5, 801683e <rmw_wait+0x92>
 801682c:	462b      	mov	r3, r5
 801682e:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8016832:	2100      	movs	r1, #0
 8016834:	68da      	ldr	r2, [r3, #12]
 8016836:	689b      	ldr	r3, [r3, #8]
 8016838:	5411      	strb	r1, [r2, r0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d1fa      	bne.n	8016834 <rmw_wait+0x88>
 801683e:	f1b9 0f00 	cmp.w	r9, #0
 8016842:	d012      	beq.n	801686a <rmw_wait+0xbe>
 8016844:	f8d9 1000 	ldr.w	r1, [r9]
 8016848:	b179      	cbz	r1, 801686a <rmw_wait+0xbe>
 801684a:	2300      	movs	r3, #0
 801684c:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8016850:	f04f 0c01 	mov.w	ip, #1
 8016854:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8016858:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801685c:	3301      	adds	r3, #1
 801685e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8016860:	4299      	cmp	r1, r3
 8016862:	6912      	ldr	r2, [r2, #16]
 8016864:	f802 c00e 	strb.w	ip, [r2, lr]
 8016868:	d1f6      	bne.n	8016858 <rmw_wait+0xac>
 801686a:	f1b8 0f00 	cmp.w	r8, #0
 801686e:	d012      	beq.n	8016896 <rmw_wait+0xea>
 8016870:	f8d8 1000 	ldr.w	r1, [r8]
 8016874:	b179      	cbz	r1, 8016896 <rmw_wait+0xea>
 8016876:	2300      	movs	r3, #0
 8016878:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 801687c:	f04f 0c01 	mov.w	ip, #1
 8016880:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016884:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016888:	3301      	adds	r3, #1
 801688a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801688c:	4299      	cmp	r1, r3
 801688e:	6912      	ldr	r2, [r2, #16]
 8016890:	f802 c00e 	strb.w	ip, [r2, lr]
 8016894:	d1f6      	bne.n	8016884 <rmw_wait+0xd8>
 8016896:	b187      	cbz	r7, 80168ba <rmw_wait+0x10e>
 8016898:	6839      	ldr	r1, [r7, #0]
 801689a:	b171      	cbz	r1, 80168ba <rmw_wait+0x10e>
 801689c:	2300      	movs	r3, #0
 801689e:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 80168a2:	f04f 0c01 	mov.w	ip, #1
 80168a6:	6878      	ldr	r0, [r7, #4]
 80168a8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80168ac:	3301      	adds	r3, #1
 80168ae:	6a12      	ldr	r2, [r2, #32]
 80168b0:	4299      	cmp	r1, r3
 80168b2:	6912      	ldr	r2, [r2, #16]
 80168b4:	f802 c00e 	strb.w	ip, [r2, lr]
 80168b8:	d1f6      	bne.n	80168a8 <rmw_wait+0xfc>
 80168ba:	b355      	cbz	r5, 8016912 <rmw_wait+0x166>
 80168bc:	462b      	mov	r3, r5
 80168be:	f04f 0a00 	mov.w	sl, #0
 80168c2:	f241 51a4 	movw	r1, #5540	; 0x15a4
 80168c6:	68da      	ldr	r2, [r3, #12]
 80168c8:	689b      	ldr	r3, [r3, #8]
 80168ca:	5c50      	ldrb	r0, [r2, r1]
 80168cc:	4450      	add	r0, sl
 80168ce:	fa5f fa80 	uxtb.w	sl, r0
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d1f7      	bne.n	80168c6 <rmw_wait+0x11a>
 80168d6:	f1ba 0f00 	cmp.w	sl, #0
 80168da:	d01a      	beq.n	8016912 <rmw_wait+0x166>
 80168dc:	1c63      	adds	r3, r4, #1
 80168de:	d00d      	beq.n	80168fc <rmw_wait+0x150>
 80168e0:	4620      	mov	r0, r4
 80168e2:	f7e9 fd71 	bl	80003c8 <__aeabi_i2f>
 80168e6:	4604      	mov	r4, r0
 80168e8:	4650      	mov	r0, sl
 80168ea:	f7e9 fd69 	bl	80003c0 <__aeabi_ui2f>
 80168ee:	4601      	mov	r1, r0
 80168f0:	4620      	mov	r0, r4
 80168f2:	f7e9 fe71 	bl	80005d8 <__aeabi_fdiv>
 80168f6:	f7e9 ff0b 	bl	8000710 <__aeabi_f2iz>
 80168fa:	4604      	mov	r4, r0
 80168fc:	f241 5aa4 	movw	sl, #5540	; 0x15a4
 8016900:	68e8      	ldr	r0, [r5, #12]
 8016902:	f810 300a 	ldrb.w	r3, [r0, sl]
 8016906:	2b00      	cmp	r3, #0
 8016908:	f040 808c 	bne.w	8016a24 <rmw_wait+0x278>
 801690c:	68ad      	ldr	r5, [r5, #8]
 801690e:	2d00      	cmp	r5, #0
 8016910:	d1f6      	bne.n	8016900 <rmw_wait+0x154>
 8016912:	f1b9 0f00 	cmp.w	r9, #0
 8016916:	f000 80a3 	beq.w	8016a60 <rmw_wait+0x2b4>
 801691a:	f8d9 5000 	ldr.w	r5, [r9]
 801691e:	2d00      	cmp	r5, #0
 8016920:	f000 808a 	beq.w	8016a38 <rmw_wait+0x28c>
 8016924:	2400      	movs	r4, #0
 8016926:	4625      	mov	r5, r4
 8016928:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801692c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016930:	f7f6 fa00 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016934:	2800      	cmp	r0, #0
 8016936:	d054      	beq.n	80169e2 <rmw_wait+0x236>
 8016938:	f8d9 3000 	ldr.w	r3, [r9]
 801693c:	3401      	adds	r4, #1
 801693e:	42a3      	cmp	r3, r4
 8016940:	f04f 0501 	mov.w	r5, #1
 8016944:	d8f0      	bhi.n	8016928 <rmw_wait+0x17c>
 8016946:	f1b8 0f00 	cmp.w	r8, #0
 801694a:	d012      	beq.n	8016972 <rmw_wait+0x1c6>
 801694c:	f8d8 3000 	ldr.w	r3, [r8]
 8016950:	b17b      	cbz	r3, 8016972 <rmw_wait+0x1c6>
 8016952:	2400      	movs	r4, #0
 8016954:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016958:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801695c:	f7f6 f9ea 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016960:	2800      	cmp	r0, #0
 8016962:	d046      	beq.n	80169f2 <rmw_wait+0x246>
 8016964:	f8d8 3000 	ldr.w	r3, [r8]
 8016968:	3401      	adds	r4, #1
 801696a:	42a3      	cmp	r3, r4
 801696c:	f04f 0501 	mov.w	r5, #1
 8016970:	d8f0      	bhi.n	8016954 <rmw_wait+0x1a8>
 8016972:	b1df      	cbz	r7, 80169ac <rmw_wait+0x200>
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	b1cb      	cbz	r3, 80169ac <rmw_wait+0x200>
 8016978:	2400      	movs	r4, #0
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016980:	f7f6 f9d8 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016984:	b158      	cbz	r0, 801699e <rmw_wait+0x1f2>
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	3401      	adds	r4, #1
 801698a:	42a3      	cmp	r3, r4
 801698c:	d961      	bls.n	8016a52 <rmw_wait+0x2a6>
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2501      	movs	r5, #1
 8016992:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016996:	f7f6 f9cd 	bl	800cd34 <rmw_uxrce_find_static_input_buffer_by_owner>
 801699a:	2800      	cmp	r0, #0
 801699c:	d1f3      	bne.n	8016986 <rmw_wait+0x1da>
 801699e:	e9d7 3200 	ldrd	r3, r2, [r7]
 80169a2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80169a6:	3401      	adds	r4, #1
 80169a8:	42a3      	cmp	r3, r4
 80169aa:	d8e6      	bhi.n	801697a <rmw_wait+0x1ce>
 80169ac:	b1a6      	cbz	r6, 80169d8 <rmw_wait+0x22c>
 80169ae:	6834      	ldr	r4, [r6, #0]
 80169b0:	b194      	cbz	r4, 80169d8 <rmw_wait+0x22c>
 80169b2:	2300      	movs	r3, #0
 80169b4:	461f      	mov	r7, r3
 80169b6:	e004      	b.n	80169c2 <rmw_wait+0x216>
 80169b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80169bc:	3301      	adds	r3, #1
 80169be:	42a3      	cmp	r3, r4
 80169c0:	d00a      	beq.n	80169d8 <rmw_wait+0x22c>
 80169c2:	6870      	ldr	r0, [r6, #4]
 80169c4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80169c8:	7c0a      	ldrb	r2, [r1, #16]
 80169ca:	2a00      	cmp	r2, #0
 80169cc:	d0f4      	beq.n	80169b8 <rmw_wait+0x20c>
 80169ce:	3301      	adds	r3, #1
 80169d0:	42a3      	cmp	r3, r4
 80169d2:	4615      	mov	r5, r2
 80169d4:	740f      	strb	r7, [r1, #16]
 80169d6:	d1f4      	bne.n	80169c2 <rmw_wait+0x216>
 80169d8:	2d00      	cmp	r5, #0
 80169da:	d037      	beq.n	8016a4c <rmw_wait+0x2a0>
 80169dc:	2000      	movs	r0, #0
 80169de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169e2:	e9d9 3200 	ldrd	r3, r2, [r9]
 80169e6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80169ea:	3401      	adds	r4, #1
 80169ec:	42a3      	cmp	r3, r4
 80169ee:	d89b      	bhi.n	8016928 <rmw_wait+0x17c>
 80169f0:	e7a9      	b.n	8016946 <rmw_wait+0x19a>
 80169f2:	e9d8 3200 	ldrd	r3, r2, [r8]
 80169f6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80169fa:	3401      	adds	r4, #1
 80169fc:	429c      	cmp	r4, r3
 80169fe:	d3a9      	bcc.n	8016954 <rmw_wait+0x1a8>
 8016a00:	e7b7      	b.n	8016972 <rmw_wait+0x1c6>
 8016a02:	4614      	mov	r4, r2
 8016a04:	e70d      	b.n	8016822 <rmw_wait+0x76>
 8016a06:	f1b8 0f00 	cmp.w	r8, #0
 8016a0a:	f47f aed9 	bne.w	80167c0 <rmw_wait+0x14>
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f47f aed6 	bne.w	80167c0 <rmw_wait+0x14>
 8016a14:	2900      	cmp	r1, #0
 8016a16:	d0e1      	beq.n	80169dc <rmw_wait+0x230>
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	f47f aed4 	bne.w	80167c6 <rmw_wait+0x1a>
 8016a1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016a22:	e6fe      	b.n	8016822 <rmw_wait+0x76>
 8016a24:	4621      	mov	r1, r4
 8016a26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016a2a:	f7fa feb9 	bl	80117a0 <uxr_run_session_until_data>
 8016a2e:	68ad      	ldr	r5, [r5, #8]
 8016a30:	2d00      	cmp	r5, #0
 8016a32:	f47f af65 	bne.w	8016900 <rmw_wait+0x154>
 8016a36:	e76c      	b.n	8016912 <rmw_wait+0x166>
 8016a38:	f1b8 0f00 	cmp.w	r8, #0
 8016a3c:	d11d      	bne.n	8016a7a <rmw_wait+0x2ce>
 8016a3e:	b34f      	cbz	r7, 8016a94 <rmw_wait+0x2e8>
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	4645      	mov	r5, r8
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d197      	bne.n	8016978 <rmw_wait+0x1cc>
 8016a48:	2e00      	cmp	r6, #0
 8016a4a:	d1b0      	bne.n	80169ae <rmw_wait+0x202>
 8016a4c:	2002      	movs	r0, #2
 8016a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a52:	2e00      	cmp	r6, #0
 8016a54:	d0c2      	beq.n	80169dc <rmw_wait+0x230>
 8016a56:	6834      	ldr	r4, [r6, #0]
 8016a58:	2501      	movs	r5, #1
 8016a5a:	2c00      	cmp	r4, #0
 8016a5c:	d1a9      	bne.n	80169b2 <rmw_wait+0x206>
 8016a5e:	e7bd      	b.n	80169dc <rmw_wait+0x230>
 8016a60:	f1b8 0f00 	cmp.w	r8, #0
 8016a64:	d0eb      	beq.n	8016a3e <rmw_wait+0x292>
 8016a66:	f8d8 3000 	ldr.w	r3, [r8]
 8016a6a:	464d      	mov	r5, r9
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	f47f af70 	bne.w	8016952 <rmw_wait+0x1a6>
 8016a72:	2f00      	cmp	r7, #0
 8016a74:	f47f af7e 	bne.w	8016974 <rmw_wait+0x1c8>
 8016a78:	e008      	b.n	8016a8c <rmw_wait+0x2e0>
 8016a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	f47f af67 	bne.w	8016952 <rmw_wait+0x1a6>
 8016a84:	461d      	mov	r5, r3
 8016a86:	2f00      	cmp	r7, #0
 8016a88:	f47f af74 	bne.w	8016974 <rmw_wait+0x1c8>
 8016a8c:	463d      	mov	r5, r7
 8016a8e:	2e00      	cmp	r6, #0
 8016a90:	d18d      	bne.n	80169ae <rmw_wait+0x202>
 8016a92:	e7db      	b.n	8016a4c <rmw_wait+0x2a0>
 8016a94:	2e00      	cmp	r6, #0
 8016a96:	d0d9      	beq.n	8016a4c <rmw_wait+0x2a0>
 8016a98:	6834      	ldr	r4, [r6, #0]
 8016a9a:	463d      	mov	r5, r7
 8016a9c:	2c00      	cmp	r4, #0
 8016a9e:	d188      	bne.n	80169b2 <rmw_wait+0x206>
 8016aa0:	e7d4      	b.n	8016a4c <rmw_wait+0x2a0>
 8016aa2:	bf00      	nop
 8016aa4:	000f4240 	.word	0x000f4240
 8016aa8:	2000beb0 	.word	0x2000beb0

08016aac <rmw_create_wait_set>:
 8016aac:	b508      	push	{r3, lr}
 8016aae:	4803      	ldr	r0, [pc, #12]	; (8016abc <rmw_create_wait_set+0x10>)
 8016ab0:	f7ff fc96 	bl	80163e0 <get_memory>
 8016ab4:	b108      	cbz	r0, 8016aba <rmw_create_wait_set+0xe>
 8016ab6:	68c0      	ldr	r0, [r0, #12]
 8016ab8:	3010      	adds	r0, #16
 8016aba:	bd08      	pop	{r3, pc}
 8016abc:	2000d688 	.word	0x2000d688

08016ac0 <rmw_destroy_wait_set>:
 8016ac0:	b508      	push	{r3, lr}
 8016ac2:	4b08      	ldr	r3, [pc, #32]	; (8016ae4 <rmw_destroy_wait_set+0x24>)
 8016ac4:	6819      	ldr	r1, [r3, #0]
 8016ac6:	b911      	cbnz	r1, 8016ace <rmw_destroy_wait_set+0xe>
 8016ac8:	e00a      	b.n	8016ae0 <rmw_destroy_wait_set+0x20>
 8016aca:	6889      	ldr	r1, [r1, #8]
 8016acc:	b141      	cbz	r1, 8016ae0 <rmw_destroy_wait_set+0x20>
 8016ace:	68cb      	ldr	r3, [r1, #12]
 8016ad0:	3310      	adds	r3, #16
 8016ad2:	4298      	cmp	r0, r3
 8016ad4:	d1f9      	bne.n	8016aca <rmw_destroy_wait_set+0xa>
 8016ad6:	4803      	ldr	r0, [pc, #12]	; (8016ae4 <rmw_destroy_wait_set+0x24>)
 8016ad8:	f7ff fc92 	bl	8016400 <put_memory>
 8016adc:	2000      	movs	r0, #0
 8016ade:	bd08      	pop	{r3, pc}
 8016ae0:	2001      	movs	r0, #1
 8016ae2:	bd08      	pop	{r3, pc}
 8016ae4:	2000d688 	.word	0x2000d688

08016ae8 <rosidl_runtime_c__double__Sequence__init>:
 8016ae8:	b188      	cbz	r0, 8016b0e <rosidl_runtime_c__double__Sequence__init+0x26>
 8016aea:	b538      	push	{r3, r4, r5, lr}
 8016aec:	4604      	mov	r4, r0
 8016aee:	460d      	mov	r5, r1
 8016af0:	b929      	cbnz	r1, 8016afe <rosidl_runtime_c__double__Sequence__init+0x16>
 8016af2:	460b      	mov	r3, r1
 8016af4:	2001      	movs	r0, #1
 8016af6:	e9c4 3500 	strd	r3, r5, [r4]
 8016afa:	60a5      	str	r5, [r4, #8]
 8016afc:	bd38      	pop	{r3, r4, r5, pc}
 8016afe:	00c8      	lsls	r0, r1, #3
 8016b00:	f001 f964 	bl	8017dcc <malloc>
 8016b04:	4603      	mov	r3, r0
 8016b06:	2800      	cmp	r0, #0
 8016b08:	d1f4      	bne.n	8016af4 <rosidl_runtime_c__double__Sequence__init+0xc>
 8016b0a:	2000      	movs	r0, #0
 8016b0c:	bd38      	pop	{r3, r4, r5, pc}
 8016b0e:	2000      	movs	r0, #0
 8016b10:	4770      	bx	lr
 8016b12:	bf00      	nop

08016b14 <rosidl_runtime_c__double__Sequence__fini>:
 8016b14:	b150      	cbz	r0, 8016b2c <rosidl_runtime_c__double__Sequence__fini+0x18>
 8016b16:	b510      	push	{r4, lr}
 8016b18:	4604      	mov	r4, r0
 8016b1a:	6800      	ldr	r0, [r0, #0]
 8016b1c:	b128      	cbz	r0, 8016b2a <rosidl_runtime_c__double__Sequence__fini+0x16>
 8016b1e:	f001 f95d 	bl	8017ddc <free>
 8016b22:	2300      	movs	r3, #0
 8016b24:	e9c4 3300 	strd	r3, r3, [r4]
 8016b28:	60a3      	str	r3, [r4, #8]
 8016b2a:	bd10      	pop	{r4, pc}
 8016b2c:	4770      	bx	lr
 8016b2e:	bf00      	nop

08016b30 <rosidl_runtime_c__String__init>:
 8016b30:	b180      	cbz	r0, 8016b54 <rosidl_runtime_c__String__init+0x24>
 8016b32:	b510      	push	{r4, lr}
 8016b34:	4604      	mov	r4, r0
 8016b36:	2001      	movs	r0, #1
 8016b38:	f001 f948 	bl	8017dcc <malloc>
 8016b3c:	4603      	mov	r3, r0
 8016b3e:	6020      	str	r0, [r4, #0]
 8016b40:	b130      	cbz	r0, 8016b50 <rosidl_runtime_c__String__init+0x20>
 8016b42:	2200      	movs	r2, #0
 8016b44:	2101      	movs	r1, #1
 8016b46:	701a      	strb	r2, [r3, #0]
 8016b48:	4608      	mov	r0, r1
 8016b4a:	60a1      	str	r1, [r4, #8]
 8016b4c:	6062      	str	r2, [r4, #4]
 8016b4e:	bd10      	pop	{r4, pc}
 8016b50:	2000      	movs	r0, #0
 8016b52:	bd10      	pop	{r4, pc}
 8016b54:	2000      	movs	r0, #0
 8016b56:	4770      	bx	lr

08016b58 <rosidl_runtime_c__String__fini>:
 8016b58:	b1e8      	cbz	r0, 8016b96 <rosidl_runtime_c__String__fini+0x3e>
 8016b5a:	b510      	push	{r4, lr}
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	6800      	ldr	r0, [r0, #0]
 8016b60:	b140      	cbz	r0, 8016b74 <rosidl_runtime_c__String__fini+0x1c>
 8016b62:	68a3      	ldr	r3, [r4, #8]
 8016b64:	b1c3      	cbz	r3, 8016b98 <rosidl_runtime_c__String__fini+0x40>
 8016b66:	f001 f939 	bl	8017ddc <free>
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e9c4 3300 	strd	r3, r3, [r4]
 8016b70:	60a3      	str	r3, [r4, #8]
 8016b72:	bd10      	pop	{r4, pc}
 8016b74:	6863      	ldr	r3, [r4, #4]
 8016b76:	b9db      	cbnz	r3, 8016bb0 <rosidl_runtime_c__String__fini+0x58>
 8016b78:	68a3      	ldr	r3, [r4, #8]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d0f9      	beq.n	8016b72 <rosidl_runtime_c__String__fini+0x1a>
 8016b7e:	4b12      	ldr	r3, [pc, #72]	; (8016bc8 <rosidl_runtime_c__String__fini+0x70>)
 8016b80:	2251      	movs	r2, #81	; 0x51
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	2101      	movs	r1, #1
 8016b86:	68db      	ldr	r3, [r3, #12]
 8016b88:	4810      	ldr	r0, [pc, #64]	; (8016bcc <rosidl_runtime_c__String__fini+0x74>)
 8016b8a:	f001 f8a3 	bl	8017cd4 <fwrite>
 8016b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b92:	f001 f82b 	bl	8017bec <exit>
 8016b96:	4770      	bx	lr
 8016b98:	4b0b      	ldr	r3, [pc, #44]	; (8016bc8 <rosidl_runtime_c__String__fini+0x70>)
 8016b9a:	224c      	movs	r2, #76	; 0x4c
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2101      	movs	r1, #1
 8016ba0:	68db      	ldr	r3, [r3, #12]
 8016ba2:	480b      	ldr	r0, [pc, #44]	; (8016bd0 <rosidl_runtime_c__String__fini+0x78>)
 8016ba4:	f001 f896 	bl	8017cd4 <fwrite>
 8016ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bac:	f001 f81e 	bl	8017bec <exit>
 8016bb0:	4b05      	ldr	r3, [pc, #20]	; (8016bc8 <rosidl_runtime_c__String__fini+0x70>)
 8016bb2:	224e      	movs	r2, #78	; 0x4e
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	4806      	ldr	r0, [pc, #24]	; (8016bd4 <rosidl_runtime_c__String__fini+0x7c>)
 8016bbc:	f001 f88a 	bl	8017cd4 <fwrite>
 8016bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bc4:	f001 f812 	bl	8017bec <exit>
 8016bc8:	2000025c 	.word	0x2000025c
 8016bcc:	0801aef0 	.word	0x0801aef0
 8016bd0:	0801ae50 	.word	0x0801ae50
 8016bd4:	0801aea0 	.word	0x0801aea0

08016bd8 <rosidl_runtime_c__String__Sequence__init>:
 8016bd8:	b3c8      	cbz	r0, 8016c4e <rosidl_runtime_c__String__Sequence__init+0x76>
 8016bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016bde:	4680      	mov	r8, r0
 8016be0:	460e      	mov	r6, r1
 8016be2:	b939      	cbnz	r1, 8016bf4 <rosidl_runtime_c__String__Sequence__init+0x1c>
 8016be4:	460f      	mov	r7, r1
 8016be6:	2001      	movs	r0, #1
 8016be8:	e9c8 7600 	strd	r7, r6, [r8]
 8016bec:	f8c8 6008 	str.w	r6, [r8, #8]
 8016bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bf4:	210c      	movs	r1, #12
 8016bf6:	4630      	mov	r0, r6
 8016bf8:	f000 ffea 	bl	8017bd0 <calloc>
 8016bfc:	4607      	mov	r7, r0
 8016bfe:	b318      	cbz	r0, 8016c48 <rosidl_runtime_c__String__Sequence__init+0x70>
 8016c00:	2400      	movs	r4, #0
 8016c02:	4605      	mov	r5, r0
 8016c04:	46a2      	mov	sl, r4
 8016c06:	f04f 0901 	mov.w	r9, #1
 8016c0a:	e008      	b.n	8016c1e <rosidl_runtime_c__String__Sequence__init+0x46>
 8016c0c:	3401      	adds	r4, #1
 8016c0e:	42a6      	cmp	r6, r4
 8016c10:	e9c5 a901 	strd	sl, r9, [r5, #4]
 8016c14:	f880 a000 	strb.w	sl, [r0]
 8016c18:	f105 050c 	add.w	r5, r5, #12
 8016c1c:	d0e3      	beq.n	8016be6 <rosidl_runtime_c__String__Sequence__init+0xe>
 8016c1e:	2001      	movs	r0, #1
 8016c20:	f001 f8d4 	bl	8017dcc <malloc>
 8016c24:	6028      	str	r0, [r5, #0]
 8016c26:	2800      	cmp	r0, #0
 8016c28:	d1f0      	bne.n	8016c0c <rosidl_runtime_c__String__Sequence__init+0x34>
 8016c2a:	b154      	cbz	r4, 8016c42 <rosidl_runtime_c__String__Sequence__init+0x6a>
 8016c2c:	230c      	movs	r3, #12
 8016c2e:	fb03 7404 	mla	r4, r3, r4, r7
 8016c32:	3c0c      	subs	r4, #12
 8016c34:	4620      	mov	r0, r4
 8016c36:	f7ff ff8f 	bl	8016b58 <rosidl_runtime_c__String__fini>
 8016c3a:	42bc      	cmp	r4, r7
 8016c3c:	f1a4 040c 	sub.w	r4, r4, #12
 8016c40:	d1f8      	bne.n	8016c34 <rosidl_runtime_c__String__Sequence__init+0x5c>
 8016c42:	4638      	mov	r0, r7
 8016c44:	f001 f8ca 	bl	8017ddc <free>
 8016c48:	2000      	movs	r0, #0
 8016c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c4e:	2000      	movs	r0, #0
 8016c50:	4770      	bx	lr
 8016c52:	bf00      	nop

08016c54 <rosidl_runtime_c__String__Sequence__fini>:
 8016c54:	2800      	cmp	r0, #0
 8016c56:	d037      	beq.n	8016cc8 <rosidl_runtime_c__String__Sequence__fini+0x74>
 8016c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c5a:	6803      	ldr	r3, [r0, #0]
 8016c5c:	4606      	mov	r6, r0
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d031      	beq.n	8016cc6 <rosidl_runtime_c__String__Sequence__fini+0x72>
 8016c62:	6881      	ldr	r1, [r0, #8]
 8016c64:	b341      	cbz	r1, 8016cb8 <rosidl_runtime_c__String__Sequence__fini+0x64>
 8016c66:	2400      	movs	r4, #0
 8016c68:	4627      	mov	r7, r4
 8016c6a:	e00b      	b.n	8016c84 <rosidl_runtime_c__String__Sequence__fini+0x30>
 8016c6c:	68ab      	ldr	r3, [r5, #8]
 8016c6e:	b363      	cbz	r3, 8016cca <rosidl_runtime_c__String__Sequence__fini+0x76>
 8016c70:	f001 f8b4 	bl	8017ddc <free>
 8016c74:	e9c5 7700 	strd	r7, r7, [r5]
 8016c78:	68b1      	ldr	r1, [r6, #8]
 8016c7a:	6833      	ldr	r3, [r6, #0]
 8016c7c:	60af      	str	r7, [r5, #8]
 8016c7e:	3401      	adds	r4, #1
 8016c80:	428c      	cmp	r4, r1
 8016c82:	d219      	bcs.n	8016cb8 <rosidl_runtime_c__String__Sequence__fini+0x64>
 8016c84:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8016c88:	eb13 0582 	adds.w	r5, r3, r2, lsl #2
 8016c8c:	d0f7      	beq.n	8016c7e <rosidl_runtime_c__String__Sequence__fini+0x2a>
 8016c8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016c92:	2800      	cmp	r0, #0
 8016c94:	d1ea      	bne.n	8016c6c <rosidl_runtime_c__String__Sequence__fini+0x18>
 8016c96:	686a      	ldr	r2, [r5, #4]
 8016c98:	bb1a      	cbnz	r2, 8016ce2 <rosidl_runtime_c__String__Sequence__fini+0x8e>
 8016c9a:	68aa      	ldr	r2, [r5, #8]
 8016c9c:	2a00      	cmp	r2, #0
 8016c9e:	d0ee      	beq.n	8016c7e <rosidl_runtime_c__String__Sequence__fini+0x2a>
 8016ca0:	4b16      	ldr	r3, [pc, #88]	; (8016cfc <rosidl_runtime_c__String__Sequence__fini+0xa8>)
 8016ca2:	2251      	movs	r2, #81	; 0x51
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	2101      	movs	r1, #1
 8016ca8:	68db      	ldr	r3, [r3, #12]
 8016caa:	4815      	ldr	r0, [pc, #84]	; (8016d00 <rosidl_runtime_c__String__Sequence__fini+0xac>)
 8016cac:	f001 f812 	bl	8017cd4 <fwrite>
 8016cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cb4:	f000 ff9a 	bl	8017bec <exit>
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f001 f88f 	bl	8017ddc <free>
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	e9c6 3300 	strd	r3, r3, [r6]
 8016cc4:	60b3      	str	r3, [r6, #8]
 8016cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cc8:	4770      	bx	lr
 8016cca:	4b0c      	ldr	r3, [pc, #48]	; (8016cfc <rosidl_runtime_c__String__Sequence__fini+0xa8>)
 8016ccc:	224c      	movs	r2, #76	; 0x4c
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	2101      	movs	r1, #1
 8016cd2:	68db      	ldr	r3, [r3, #12]
 8016cd4:	480b      	ldr	r0, [pc, #44]	; (8016d04 <rosidl_runtime_c__String__Sequence__fini+0xb0>)
 8016cd6:	f000 fffd 	bl	8017cd4 <fwrite>
 8016cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cde:	f000 ff85 	bl	8017bec <exit>
 8016ce2:	4b06      	ldr	r3, [pc, #24]	; (8016cfc <rosidl_runtime_c__String__Sequence__fini+0xa8>)
 8016ce4:	224e      	movs	r2, #78	; 0x4e
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	2101      	movs	r1, #1
 8016cea:	68db      	ldr	r3, [r3, #12]
 8016cec:	4806      	ldr	r0, [pc, #24]	; (8016d08 <rosidl_runtime_c__String__Sequence__fini+0xb4>)
 8016cee:	f000 fff1 	bl	8017cd4 <fwrite>
 8016cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cf6:	f000 ff79 	bl	8017bec <exit>
 8016cfa:	bf00      	nop
 8016cfc:	2000025c 	.word	0x2000025c
 8016d00:	0801aef0 	.word	0x0801aef0
 8016d04:	0801ae50 	.word	0x0801ae50
 8016d08:	0801aea0 	.word	0x0801aea0

08016d0c <_MultiArrayDimension__cdr_serialize>:
 8016d0c:	b1d0      	cbz	r0, 8016d44 <_MultiArrayDimension__cdr_serialize+0x38>
 8016d0e:	b570      	push	{r4, r5, r6, lr}
 8016d10:	6806      	ldr	r6, [r0, #0]
 8016d12:	460d      	mov	r5, r1
 8016d14:	4604      	mov	r4, r0
 8016d16:	b196      	cbz	r6, 8016d3e <_MultiArrayDimension__cdr_serialize+0x32>
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f7e9 fa93 	bl	8000244 <strlen>
 8016d1e:	1c42      	adds	r2, r0, #1
 8016d20:	4631      	mov	r1, r6
 8016d22:	6060      	str	r0, [r4, #4]
 8016d24:	4628      	mov	r0, r5
 8016d26:	f7f9 fad3 	bl	80102d0 <ucdr_serialize_sequence_char>
 8016d2a:	68e1      	ldr	r1, [r4, #12]
 8016d2c:	4628      	mov	r0, r5
 8016d2e:	f7f8 f835 	bl	800ed9c <ucdr_serialize_uint32_t>
 8016d32:	4628      	mov	r0, r5
 8016d34:	6921      	ldr	r1, [r4, #16]
 8016d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d3a:	f7f8 b82f 	b.w	800ed9c <ucdr_serialize_uint32_t>
 8016d3e:	4632      	mov	r2, r6
 8016d40:	4630      	mov	r0, r6
 8016d42:	e7ed      	b.n	8016d20 <_MultiArrayDimension__cdr_serialize+0x14>
 8016d44:	4770      	bx	lr
 8016d46:	bf00      	nop

08016d48 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8016d48:	b570      	push	{r4, r5, r6, lr}
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	b1b0      	cbz	r0, 8016d7c <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8016d4e:	460d      	mov	r5, r1
 8016d50:	2104      	movs	r1, #4
 8016d52:	4628      	mov	r0, r5
 8016d54:	f7f9 fa4e 	bl	80101f4 <ucdr_alignment>
 8016d58:	6866      	ldr	r6, [r4, #4]
 8016d5a:	1d6c      	adds	r4, r5, #5
 8016d5c:	4434      	add	r4, r6
 8016d5e:	1826      	adds	r6, r4, r0
 8016d60:	2104      	movs	r1, #4
 8016d62:	4630      	mov	r0, r6
 8016d64:	f7f9 fa46 	bl	80101f4 <ucdr_alignment>
 8016d68:	1d04      	adds	r4, r0, #4
 8016d6a:	4434      	add	r4, r6
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	2104      	movs	r1, #4
 8016d70:	f7f9 fa40 	bl	80101f4 <ucdr_alignment>
 8016d74:	f1c5 0504 	rsb	r5, r5, #4
 8016d78:	4428      	add	r0, r5
 8016d7a:	4420      	add	r0, r4
 8016d7c:	bd70      	pop	{r4, r5, r6, pc}
 8016d7e:	bf00      	nop

08016d80 <_MultiArrayDimension__cdr_deserialize>:
 8016d80:	b570      	push	{r4, r5, r6, lr}
 8016d82:	460c      	mov	r4, r1
 8016d84:	b082      	sub	sp, #8
 8016d86:	b1d1      	cbz	r1, 8016dbe <_MultiArrayDimension__cdr_deserialize+0x3e>
 8016d88:	688e      	ldr	r6, [r1, #8]
 8016d8a:	ab01      	add	r3, sp, #4
 8016d8c:	4632      	mov	r2, r6
 8016d8e:	6809      	ldr	r1, [r1, #0]
 8016d90:	4605      	mov	r5, r0
 8016d92:	f7f9 faaf 	bl	80102f4 <ucdr_deserialize_sequence_char>
 8016d96:	9b01      	ldr	r3, [sp, #4]
 8016d98:	b968      	cbnz	r0, 8016db6 <_MultiArrayDimension__cdr_deserialize+0x36>
 8016d9a:	429e      	cmp	r6, r3
 8016d9c:	d312      	bcc.n	8016dc4 <_MultiArrayDimension__cdr_deserialize+0x44>
 8016d9e:	f104 010c 	add.w	r1, r4, #12
 8016da2:	4628      	mov	r0, r5
 8016da4:	f7f8 f92a 	bl	800effc <ucdr_deserialize_uint32_t>
 8016da8:	4628      	mov	r0, r5
 8016daa:	f104 0110 	add.w	r1, r4, #16
 8016dae:	f7f8 f925 	bl	800effc <ucdr_deserialize_uint32_t>
 8016db2:	b002      	add	sp, #8
 8016db4:	bd70      	pop	{r4, r5, r6, pc}
 8016db6:	b103      	cbz	r3, 8016dba <_MultiArrayDimension__cdr_deserialize+0x3a>
 8016db8:	3b01      	subs	r3, #1
 8016dba:	6063      	str	r3, [r4, #4]
 8016dbc:	e7ef      	b.n	8016d9e <_MultiArrayDimension__cdr_deserialize+0x1e>
 8016dbe:	4608      	mov	r0, r1
 8016dc0:	b002      	add	sp, #8
 8016dc2:	bd70      	pop	{r4, r5, r6, pc}
 8016dc4:	2101      	movs	r1, #1
 8016dc6:	75a8      	strb	r0, [r5, #22]
 8016dc8:	7569      	strb	r1, [r5, #21]
 8016dca:	6060      	str	r0, [r4, #4]
 8016dcc:	4628      	mov	r0, r5
 8016dce:	f7f9 fa29 	bl	8010224 <ucdr_align_to>
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	9901      	ldr	r1, [sp, #4]
 8016dd6:	f7f9 fa5b 	bl	8010290 <ucdr_advance_buffer>
 8016dda:	e7e0      	b.n	8016d9e <_MultiArrayDimension__cdr_deserialize+0x1e>

08016ddc <_MultiArrayDimension__max_serialized_size>:
 8016ddc:	b510      	push	{r4, lr}
 8016dde:	2104      	movs	r1, #4
 8016de0:	2000      	movs	r0, #0
 8016de2:	f7f9 fa07 	bl	80101f4 <ucdr_alignment>
 8016de6:	1d04      	adds	r4, r0, #4
 8016de8:	4620      	mov	r0, r4
 8016dea:	2104      	movs	r1, #4
 8016dec:	f7f9 fa02 	bl	80101f4 <ucdr_alignment>
 8016df0:	3004      	adds	r0, #4
 8016df2:	4420      	add	r0, r4
 8016df4:	bd10      	pop	{r4, pc}
 8016df6:	bf00      	nop

08016df8 <_MultiArrayDimension__get_serialized_size>:
 8016df8:	b510      	push	{r4, lr}
 8016dfa:	4604      	mov	r4, r0
 8016dfc:	b190      	cbz	r0, 8016e24 <_MultiArrayDimension__get_serialized_size+0x2c>
 8016dfe:	2104      	movs	r1, #4
 8016e00:	2000      	movs	r0, #0
 8016e02:	f7f9 f9f7 	bl	80101f4 <ucdr_alignment>
 8016e06:	6864      	ldr	r4, [r4, #4]
 8016e08:	2104      	movs	r1, #4
 8016e0a:	3405      	adds	r4, #5
 8016e0c:	4404      	add	r4, r0
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7f9 f9f0 	bl	80101f4 <ucdr_alignment>
 8016e14:	3004      	adds	r0, #4
 8016e16:	4404      	add	r4, r0
 8016e18:	4620      	mov	r0, r4
 8016e1a:	2104      	movs	r1, #4
 8016e1c:	f7f9 f9ea 	bl	80101f4 <ucdr_alignment>
 8016e20:	3004      	adds	r0, #4
 8016e22:	4420      	add	r0, r4
 8016e24:	bd10      	pop	{r4, pc}
 8016e26:	bf00      	nop

08016e28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8016e28:	4800      	ldr	r0, [pc, #0]	; (8016e2c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8016e2a:	4770      	bx	lr
 8016e2c:	20000234 	.word	0x20000234

08016e30 <ucdr_serialize_string>:
 8016e30:	b538      	push	{r3, r4, r5, lr}
 8016e32:	4605      	mov	r5, r0
 8016e34:	4608      	mov	r0, r1
 8016e36:	460c      	mov	r4, r1
 8016e38:	f7e9 fa04 	bl	8000244 <strlen>
 8016e3c:	4602      	mov	r2, r0
 8016e3e:	4621      	mov	r1, r4
 8016e40:	4628      	mov	r0, r5
 8016e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016e46:	3201      	adds	r2, #1
 8016e48:	f7f9 ba42 	b.w	80102d0 <ucdr_serialize_sequence_char>

08016e4c <ucdr_deserialize_string>:
 8016e4c:	b500      	push	{lr}
 8016e4e:	b083      	sub	sp, #12
 8016e50:	ab01      	add	r3, sp, #4
 8016e52:	f7f9 fa4f 	bl	80102f4 <ucdr_deserialize_sequence_char>
 8016e56:	b003      	add	sp, #12
 8016e58:	f85d fb04 	ldr.w	pc, [sp], #4

08016e5c <uxr_init_input_best_effort_stream>:
 8016e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e60:	8003      	strh	r3, [r0, #0]
 8016e62:	4770      	bx	lr

08016e64 <uxr_reset_input_best_effort_stream>:
 8016e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016e68:	8003      	strh	r3, [r0, #0]
 8016e6a:	4770      	bx	lr

08016e6c <uxr_receive_best_effort_message>:
 8016e6c:	b538      	push	{r3, r4, r5, lr}
 8016e6e:	4604      	mov	r4, r0
 8016e70:	8800      	ldrh	r0, [r0, #0]
 8016e72:	460d      	mov	r5, r1
 8016e74:	f000 fd20 	bl	80178b8 <uxr_seq_num_cmp>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016e80:	bfb8      	it	lt
 8016e82:	8025      	strhlt	r5, [r4, #0]
 8016e84:	bd38      	pop	{r3, r4, r5, pc}
 8016e86:	bf00      	nop

08016e88 <on_full_input_buffer>:
 8016e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e8a:	890f      	ldrh	r7, [r1, #8]
 8016e8c:	460d      	mov	r5, r1
 8016e8e:	c912      	ldmia	r1, {r1, r4}
 8016e90:	fbb4 f4f7 	udiv	r4, r4, r7
 8016e94:	6802      	ldr	r2, [r0, #0]
 8016e96:	4606      	mov	r6, r0
 8016e98:	1a53      	subs	r3, r2, r1
 8016e9a:	fbb3 f3f4 	udiv	r3, r3, r4
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	b29b      	uxth	r3, r3
 8016ea2:	fbb3 f2f7 	udiv	r2, r3, r7
 8016ea6:	fb07 3312 	mls	r3, r7, r2, r3
 8016eaa:	b29b      	uxth	r3, r3
 8016eac:	fb04 f403 	mul.w	r4, r4, r3
 8016eb0:	7d28      	ldrb	r0, [r5, #20]
 8016eb2:	1d23      	adds	r3, r4, #4
 8016eb4:	440b      	add	r3, r1
 8016eb6:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8016eba:	b110      	cbz	r0, 8016ec2 <on_full_input_buffer+0x3a>
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	f843 0c04 	str.w	r0, [r3, #-4]
 8016ec2:	2a03      	cmp	r2, #3
 8016ec4:	d801      	bhi.n	8016eca <on_full_input_buffer+0x42>
 8016ec6:	2001      	movs	r0, #1
 8016ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eca:	3408      	adds	r4, #8
 8016ecc:	4630      	mov	r0, r6
 8016ece:	6933      	ldr	r3, [r6, #16]
 8016ed0:	4421      	add	r1, r4
 8016ed2:	3a04      	subs	r2, #4
 8016ed4:	f7f9 f982 	bl	80101dc <ucdr_init_buffer_origin>
 8016ed8:	4630      	mov	r0, r6
 8016eda:	462a      	mov	r2, r5
 8016edc:	4902      	ldr	r1, [pc, #8]	; (8016ee8 <on_full_input_buffer+0x60>)
 8016ede:	f7f9 f95b 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8016ee2:	2000      	movs	r0, #0
 8016ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ee6:	bf00      	nop
 8016ee8:	08016e89 	.word	0x08016e89

08016eec <uxr_init_input_reliable_stream>:
 8016eec:	b430      	push	{r4, r5}
 8016eee:	2500      	movs	r5, #0
 8016ef0:	9c02      	ldr	r4, [sp, #8]
 8016ef2:	6001      	str	r1, [r0, #0]
 8016ef4:	8103      	strh	r3, [r0, #8]
 8016ef6:	6042      	str	r2, [r0, #4]
 8016ef8:	6104      	str	r4, [r0, #16]
 8016efa:	7505      	strb	r5, [r0, #20]
 8016efc:	b1ab      	cbz	r3, 8016f2a <uxr_init_input_reliable_stream+0x3e>
 8016efe:	600d      	str	r5, [r1, #0]
 8016f00:	8901      	ldrh	r1, [r0, #8]
 8016f02:	2901      	cmp	r1, #1
 8016f04:	d911      	bls.n	8016f2a <uxr_init_input_reliable_stream+0x3e>
 8016f06:	2201      	movs	r2, #1
 8016f08:	fbb2 f3f1 	udiv	r3, r2, r1
 8016f0c:	6844      	ldr	r4, [r0, #4]
 8016f0e:	fb01 2313 	mls	r3, r1, r3, r2
 8016f12:	fbb4 f1f1 	udiv	r1, r4, r1
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	fb03 f301 	mul.w	r3, r3, r1
 8016f1c:	6801      	ldr	r1, [r0, #0]
 8016f1e:	3201      	adds	r2, #1
 8016f20:	50cd      	str	r5, [r1, r3]
 8016f22:	8901      	ldrh	r1, [r0, #8]
 8016f24:	b292      	uxth	r2, r2
 8016f26:	4291      	cmp	r1, r2
 8016f28:	d8ee      	bhi.n	8016f08 <uxr_init_input_reliable_stream+0x1c>
 8016f2a:	bc30      	pop	{r4, r5}
 8016f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f30:	60c3      	str	r3, [r0, #12]
 8016f32:	4770      	bx	lr

08016f34 <uxr_reset_input_reliable_stream>:
 8016f34:	8902      	ldrh	r2, [r0, #8]
 8016f36:	b1ca      	cbz	r2, 8016f6c <uxr_reset_input_reliable_stream+0x38>
 8016f38:	b470      	push	{r4, r5, r6}
 8016f3a:	2500      	movs	r5, #0
 8016f3c:	4629      	mov	r1, r5
 8016f3e:	462e      	mov	r6, r5
 8016f40:	fbb1 f3f2 	udiv	r3, r1, r2
 8016f44:	6844      	ldr	r4, [r0, #4]
 8016f46:	fb02 1313 	mls	r3, r2, r3, r1
 8016f4a:	fbb4 f2f2 	udiv	r2, r4, r2
 8016f4e:	b29b      	uxth	r3, r3
 8016f50:	fb03 f302 	mul.w	r3, r3, r2
 8016f54:	6802      	ldr	r2, [r0, #0]
 8016f56:	3501      	adds	r5, #1
 8016f58:	50d6      	str	r6, [r2, r3]
 8016f5a:	8902      	ldrh	r2, [r0, #8]
 8016f5c:	b2a9      	uxth	r1, r5
 8016f5e:	428a      	cmp	r2, r1
 8016f60:	d8ee      	bhi.n	8016f40 <uxr_reset_input_reliable_stream+0xc>
 8016f62:	bc70      	pop	{r4, r5, r6}
 8016f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f68:	60c3      	str	r3, [r0, #12]
 8016f6a:	4770      	bx	lr
 8016f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f70:	60c3      	str	r3, [r0, #12]
 8016f72:	4770      	bx	lr

08016f74 <uxr_receive_reliable_message>:
 8016f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f78:	4604      	mov	r4, r0
 8016f7a:	460d      	mov	r5, r1
 8016f7c:	8901      	ldrh	r1, [r0, #8]
 8016f7e:	8980      	ldrh	r0, [r0, #12]
 8016f80:	4690      	mov	r8, r2
 8016f82:	461f      	mov	r7, r3
 8016f84:	f000 fc90 	bl	80178a8 <uxr_seq_num_add>
 8016f88:	4629      	mov	r1, r5
 8016f8a:	4606      	mov	r6, r0
 8016f8c:	89a0      	ldrh	r0, [r4, #12]
 8016f8e:	f000 fc93 	bl	80178b8 <uxr_seq_num_cmp>
 8016f92:	2800      	cmp	r0, #0
 8016f94:	db0a      	blt.n	8016fac <uxr_receive_reliable_message+0x38>
 8016f96:	2600      	movs	r6, #0
 8016f98:	4629      	mov	r1, r5
 8016f9a:	89e0      	ldrh	r0, [r4, #14]
 8016f9c:	f000 fc8c 	bl	80178b8 <uxr_seq_num_cmp>
 8016fa0:	2800      	cmp	r0, #0
 8016fa2:	bfb8      	it	lt
 8016fa4:	81e5      	strhlt	r5, [r4, #14]
 8016fa6:	4630      	mov	r0, r6
 8016fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fac:	4630      	mov	r0, r6
 8016fae:	4629      	mov	r1, r5
 8016fb0:	f000 fc82 	bl	80178b8 <uxr_seq_num_cmp>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	dbee      	blt.n	8016f96 <uxr_receive_reliable_message+0x22>
 8016fb8:	4640      	mov	r0, r8
 8016fba:	6923      	ldr	r3, [r4, #16]
 8016fbc:	4798      	blx	r3
 8016fbe:	4681      	mov	r9, r0
 8016fc0:	2101      	movs	r1, #1
 8016fc2:	89a0      	ldrh	r0, [r4, #12]
 8016fc4:	f000 fc70 	bl	80178a8 <uxr_seq_num_add>
 8016fc8:	f1b9 0f00 	cmp.w	r9, #0
 8016fcc:	d101      	bne.n	8016fd2 <uxr_receive_reliable_message+0x5e>
 8016fce:	4285      	cmp	r5, r0
 8016fd0:	d049      	beq.n	8017066 <uxr_receive_reliable_message+0xf2>
 8016fd2:	8921      	ldrh	r1, [r4, #8]
 8016fd4:	6862      	ldr	r2, [r4, #4]
 8016fd6:	fbb5 f3f1 	udiv	r3, r5, r1
 8016fda:	fbb2 f2f1 	udiv	r2, r2, r1
 8016fde:	fb01 5313 	mls	r3, r1, r3, r5
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	fb03 f302 	mul.w	r3, r3, r2
 8016fe8:	6820      	ldr	r0, [r4, #0]
 8016fea:	3304      	adds	r3, #4
 8016fec:	4418      	add	r0, r3
 8016fee:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d1cf      	bne.n	8016f96 <uxr_receive_reliable_message+0x22>
 8016ff6:	4641      	mov	r1, r8
 8016ff8:	463a      	mov	r2, r7
 8016ffa:	f000 fef7 	bl	8017dec <memcpy>
 8016ffe:	8921      	ldrh	r1, [r4, #8]
 8017000:	6862      	ldr	r2, [r4, #4]
 8017002:	fbb5 f3f1 	udiv	r3, r5, r1
 8017006:	fbb2 f2f1 	udiv	r2, r2, r1
 801700a:	2001      	movs	r0, #1
 801700c:	fb01 5313 	mls	r3, r1, r3, r5
 8017010:	b29b      	uxth	r3, r3
 8017012:	fb03 f302 	mul.w	r3, r3, r2
 8017016:	6822      	ldr	r2, [r4, #0]
 8017018:	50d7      	str	r7, [r2, r3]
 801701a:	9b08      	ldr	r3, [sp, #32]
 801701c:	7018      	strb	r0, [r3, #0]
 801701e:	f1b9 0f00 	cmp.w	r9, #0
 8017022:	d0b8      	beq.n	8016f96 <uxr_receive_reliable_message+0x22>
 8017024:	89a6      	ldrh	r6, [r4, #12]
 8017026:	e001      	b.n	801702c <uxr_receive_reliable_message+0xb8>
 8017028:	2801      	cmp	r0, #1
 801702a:	d1b4      	bne.n	8016f96 <uxr_receive_reliable_message+0x22>
 801702c:	4630      	mov	r0, r6
 801702e:	2101      	movs	r1, #1
 8017030:	f000 fc3a 	bl	80178a8 <uxr_seq_num_add>
 8017034:	8921      	ldrh	r1, [r4, #8]
 8017036:	6862      	ldr	r2, [r4, #4]
 8017038:	fbb0 f3f1 	udiv	r3, r0, r1
 801703c:	fbb2 f2f1 	udiv	r2, r2, r1
 8017040:	fb01 0313 	mls	r3, r1, r3, r0
 8017044:	b29b      	uxth	r3, r3
 8017046:	fb03 f302 	mul.w	r3, r3, r2
 801704a:	4606      	mov	r6, r0
 801704c:	6820      	ldr	r0, [r4, #0]
 801704e:	3304      	adds	r3, #4
 8017050:	4418      	add	r0, r3
 8017052:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d09d      	beq.n	8016f96 <uxr_receive_reliable_message+0x22>
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	4798      	blx	r3
 801705e:	2802      	cmp	r0, #2
 8017060:	d1e2      	bne.n	8017028 <uxr_receive_reliable_message+0xb4>
 8017062:	2601      	movs	r6, #1
 8017064:	e798      	b.n	8016f98 <uxr_receive_reliable_message+0x24>
 8017066:	9b08      	ldr	r3, [sp, #32]
 8017068:	81a5      	strh	r5, [r4, #12]
 801706a:	2601      	movs	r6, #1
 801706c:	f883 9000 	strb.w	r9, [r3]
 8017070:	e792      	b.n	8016f98 <uxr_receive_reliable_message+0x24>
 8017072:	bf00      	nop

08017074 <uxr_next_input_reliable_buffer_available>:
 8017074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017078:	4604      	mov	r4, r0
 801707a:	460e      	mov	r6, r1
 801707c:	8980      	ldrh	r0, [r0, #12]
 801707e:	2101      	movs	r1, #1
 8017080:	4617      	mov	r7, r2
 8017082:	f000 fc11 	bl	80178a8 <uxr_seq_num_add>
 8017086:	8921      	ldrh	r1, [r4, #8]
 8017088:	6862      	ldr	r2, [r4, #4]
 801708a:	fbb0 f3f1 	udiv	r3, r0, r1
 801708e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017092:	fb01 0313 	mls	r3, r1, r3, r0
 8017096:	b29b      	uxth	r3, r3
 8017098:	fb03 f302 	mul.w	r3, r3, r2
 801709c:	6822      	ldr	r2, [r4, #0]
 801709e:	3304      	adds	r3, #4
 80170a0:	eb02 0803 	add.w	r8, r2, r3
 80170a4:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80170a8:	f1b9 0f00 	cmp.w	r9, #0
 80170ac:	d025      	beq.n	80170fa <uxr_next_input_reliable_buffer_available+0x86>
 80170ae:	4605      	mov	r5, r0
 80170b0:	6923      	ldr	r3, [r4, #16]
 80170b2:	4640      	mov	r0, r8
 80170b4:	4798      	blx	r3
 80170b6:	4682      	mov	sl, r0
 80170b8:	b310      	cbz	r0, 8017100 <uxr_next_input_reliable_buffer_available+0x8c>
 80170ba:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80170be:	e005      	b.n	80170cc <uxr_next_input_reliable_buffer_available+0x58>
 80170c0:	6923      	ldr	r3, [r4, #16]
 80170c2:	4798      	blx	r3
 80170c4:	2802      	cmp	r0, #2
 80170c6:	d032      	beq.n	801712e <uxr_next_input_reliable_buffer_available+0xba>
 80170c8:	2801      	cmp	r0, #1
 80170ca:	d116      	bne.n	80170fa <uxr_next_input_reliable_buffer_available+0x86>
 80170cc:	4650      	mov	r0, sl
 80170ce:	2101      	movs	r1, #1
 80170d0:	f000 fbea 	bl	80178a8 <uxr_seq_num_add>
 80170d4:	4682      	mov	sl, r0
 80170d6:	8922      	ldrh	r2, [r4, #8]
 80170d8:	6860      	ldr	r0, [r4, #4]
 80170da:	fbba f3f2 	udiv	r3, sl, r2
 80170de:	fbb0 f0f2 	udiv	r0, r0, r2
 80170e2:	fb02 a313 	mls	r3, r2, r3, sl
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	fb03 f300 	mul.w	r3, r3, r0
 80170ec:	6820      	ldr	r0, [r4, #0]
 80170ee:	3304      	adds	r3, #4
 80170f0:	4418      	add	r0, r3
 80170f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d1e2      	bne.n	80170c0 <uxr_next_input_reliable_buffer_available+0x4c>
 80170fa:	2000      	movs	r0, #0
 80170fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017100:	464a      	mov	r2, r9
 8017102:	4641      	mov	r1, r8
 8017104:	4630      	mov	r0, r6
 8017106:	f7f9 f871 	bl	80101ec <ucdr_init_buffer>
 801710a:	8921      	ldrh	r1, [r4, #8]
 801710c:	6862      	ldr	r2, [r4, #4]
 801710e:	fbb5 f3f1 	udiv	r3, r5, r1
 8017112:	fbb2 f2f1 	udiv	r2, r2, r1
 8017116:	fb01 5313 	mls	r3, r1, r3, r5
 801711a:	b29b      	uxth	r3, r3
 801711c:	fb03 f302 	mul.w	r3, r3, r2
 8017120:	6822      	ldr	r2, [r4, #0]
 8017122:	2001      	movs	r0, #1
 8017124:	f842 a003 	str.w	sl, [r2, r3]
 8017128:	81a5      	strh	r5, [r4, #12]
 801712a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801712e:	8922      	ldrh	r2, [r4, #8]
 8017130:	6863      	ldr	r3, [r4, #4]
 8017132:	fbb5 f0f2 	udiv	r0, r5, r2
 8017136:	fbb3 f3f2 	udiv	r3, r3, r2
 801713a:	f04f 0c00 	mov.w	ip, #0
 801713e:	fb02 5510 	mls	r5, r2, r0, r5
 8017142:	b2ad      	uxth	r5, r5
 8017144:	fb05 f503 	mul.w	r5, r5, r3
 8017148:	6823      	ldr	r3, [r4, #0]
 801714a:	4630      	mov	r0, r6
 801714c:	eba9 0207 	sub.w	r2, r9, r7
 8017150:	eb08 0107 	add.w	r1, r8, r7
 8017154:	f843 c005 	str.w	ip, [r3, r5]
 8017158:	f7f9 f848 	bl	80101ec <ucdr_init_buffer>
 801715c:	4630      	mov	r0, r6
 801715e:	4622      	mov	r2, r4
 8017160:	4903      	ldr	r1, [pc, #12]	; (8017170 <uxr_next_input_reliable_buffer_available+0xfc>)
 8017162:	f7f9 f819 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8017166:	2001      	movs	r0, #1
 8017168:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801716c:	e7c6      	b.n	80170fc <uxr_next_input_reliable_buffer_available+0x88>
 801716e:	bf00      	nop
 8017170:	08016e89 	.word	0x08016e89

08017174 <uxr_process_heartbeat>:
 8017174:	b538      	push	{r3, r4, r5, lr}
 8017176:	4611      	mov	r1, r2
 8017178:	4604      	mov	r4, r0
 801717a:	89c0      	ldrh	r0, [r0, #14]
 801717c:	4615      	mov	r5, r2
 801717e:	f000 fb9b 	bl	80178b8 <uxr_seq_num_cmp>
 8017182:	2800      	cmp	r0, #0
 8017184:	bfb8      	it	lt
 8017186:	81e5      	strhlt	r5, [r4, #14]
 8017188:	bd38      	pop	{r3, r4, r5, pc}
 801718a:	bf00      	nop

0801718c <uxr_compute_acknack>:
 801718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017190:	8903      	ldrh	r3, [r0, #8]
 8017192:	4604      	mov	r4, r0
 8017194:	460d      	mov	r5, r1
 8017196:	8986      	ldrh	r6, [r0, #12]
 8017198:	b1d3      	cbz	r3, 80171d0 <uxr_compute_acknack+0x44>
 801719a:	4630      	mov	r0, r6
 801719c:	2701      	movs	r7, #1
 801719e:	e003      	b.n	80171a8 <uxr_compute_acknack+0x1c>
 80171a0:	4567      	cmp	r7, ip
 80171a2:	d215      	bcs.n	80171d0 <uxr_compute_acknack+0x44>
 80171a4:	89a0      	ldrh	r0, [r4, #12]
 80171a6:	3701      	adds	r7, #1
 80171a8:	b2b9      	uxth	r1, r7
 80171aa:	f000 fb7d 	bl	80178a8 <uxr_seq_num_add>
 80171ae:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80171b2:	6863      	ldr	r3, [r4, #4]
 80171b4:	fbb0 f2fc 	udiv	r2, r0, ip
 80171b8:	fbb3 f3fc 	udiv	r3, r3, ip
 80171bc:	fb0c 0212 	mls	r2, ip, r2, r0
 80171c0:	6821      	ldr	r1, [r4, #0]
 80171c2:	b292      	uxth	r2, r2
 80171c4:	fb02 1303 	mla	r3, r2, r3, r1
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d1e8      	bne.n	80171a0 <uxr_compute_acknack+0x14>
 80171ce:	4606      	mov	r6, r0
 80171d0:	4630      	mov	r0, r6
 80171d2:	2101      	movs	r1, #1
 80171d4:	802e      	strh	r6, [r5, #0]
 80171d6:	89e6      	ldrh	r6, [r4, #14]
 80171d8:	f000 fb6a 	bl	80178b0 <uxr_seq_num_sub>
 80171dc:	4601      	mov	r1, r0
 80171de:	4630      	mov	r0, r6
 80171e0:	f000 fb66 	bl	80178b0 <uxr_seq_num_sub>
 80171e4:	4606      	mov	r6, r0
 80171e6:	b310      	cbz	r0, 801722e <uxr_compute_acknack+0xa2>
 80171e8:	f04f 0900 	mov.w	r9, #0
 80171ec:	f04f 0801 	mov.w	r8, #1
 80171f0:	464f      	mov	r7, r9
 80171f2:	fa1f f189 	uxth.w	r1, r9
 80171f6:	8828      	ldrh	r0, [r5, #0]
 80171f8:	f000 fb56 	bl	80178a8 <uxr_seq_num_add>
 80171fc:	8923      	ldrh	r3, [r4, #8]
 80171fe:	6862      	ldr	r2, [r4, #4]
 8017200:	fbb0 fcf3 	udiv	ip, r0, r3
 8017204:	fbb2 f1f3 	udiv	r1, r2, r3
 8017208:	fb0c 0313 	mls	r3, ip, r3, r0
 801720c:	6822      	ldr	r2, [r4, #0]
 801720e:	b29b      	uxth	r3, r3
 8017210:	fb03 2201 	mla	r2, r3, r1, r2
 8017214:	6812      	ldr	r2, [r2, #0]
 8017216:	fa08 f309 	lsl.w	r3, r8, r9
 801721a:	f109 0901 	add.w	r9, r9, #1
 801721e:	b90a      	cbnz	r2, 8017224 <uxr_compute_acknack+0x98>
 8017220:	431f      	orrs	r7, r3
 8017222:	b2bf      	uxth	r7, r7
 8017224:	454e      	cmp	r6, r9
 8017226:	d1e4      	bne.n	80171f2 <uxr_compute_acknack+0x66>
 8017228:	4638      	mov	r0, r7
 801722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801722e:	4607      	mov	r7, r0
 8017230:	4638      	mov	r0, r7
 8017232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017236:	bf00      	nop

08017238 <uxr_init_output_best_effort_stream>:
 8017238:	b410      	push	{r4}
 801723a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801723e:	e9c0 1300 	strd	r1, r3, [r0]
 8017242:	81c4      	strh	r4, [r0, #14]
 8017244:	7303      	strb	r3, [r0, #12]
 8017246:	bc10      	pop	{r4}
 8017248:	6082      	str	r2, [r0, #8]
 801724a:	4770      	bx	lr

0801724c <uxr_reset_output_best_effort_stream>:
 801724c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017250:	7b03      	ldrb	r3, [r0, #12]
 8017252:	81c2      	strh	r2, [r0, #14]
 8017254:	6043      	str	r3, [r0, #4]
 8017256:	4770      	bx	lr

08017258 <uxr_prepare_best_effort_buffer_to_write>:
 8017258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801725a:	4604      	mov	r4, r0
 801725c:	b083      	sub	sp, #12
 801725e:	6840      	ldr	r0, [r0, #4]
 8017260:	460d      	mov	r5, r1
 8017262:	4616      	mov	r6, r2
 8017264:	f7fb fa88 	bl	8012778 <uxr_submessage_padding>
 8017268:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801726c:	4410      	add	r0, r2
 801726e:	1942      	adds	r2, r0, r5
 8017270:	4293      	cmp	r3, r2
 8017272:	bf2c      	ite	cs
 8017274:	2701      	movcs	r7, #1
 8017276:	2700      	movcc	r7, #0
 8017278:	d202      	bcs.n	8017280 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801727a:	4638      	mov	r0, r7
 801727c:	b003      	add	sp, #12
 801727e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017280:	9000      	str	r0, [sp, #0]
 8017282:	6821      	ldr	r1, [r4, #0]
 8017284:	4630      	mov	r0, r6
 8017286:	2300      	movs	r3, #0
 8017288:	f7f8 ff9e 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 801728c:	4638      	mov	r0, r7
 801728e:	6861      	ldr	r1, [r4, #4]
 8017290:	4429      	add	r1, r5
 8017292:	6061      	str	r1, [r4, #4]
 8017294:	b003      	add	sp, #12
 8017296:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017298 <uxr_prepare_best_effort_buffer_to_send>:
 8017298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801729c:	6845      	ldr	r5, [r0, #4]
 801729e:	4604      	mov	r4, r0
 80172a0:	7b00      	ldrb	r0, [r0, #12]
 80172a2:	4285      	cmp	r5, r0
 80172a4:	bf8c      	ite	hi
 80172a6:	2701      	movhi	r7, #1
 80172a8:	2700      	movls	r7, #0
 80172aa:	d802      	bhi.n	80172b2 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80172ac:	4638      	mov	r0, r7
 80172ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172b2:	4688      	mov	r8, r1
 80172b4:	89e0      	ldrh	r0, [r4, #14]
 80172b6:	2101      	movs	r1, #1
 80172b8:	4615      	mov	r5, r2
 80172ba:	461e      	mov	r6, r3
 80172bc:	f000 faf4 	bl	80178a8 <uxr_seq_num_add>
 80172c0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80172c4:	81e0      	strh	r0, [r4, #14]
 80172c6:	8030      	strh	r0, [r6, #0]
 80172c8:	f8c8 2000 	str.w	r2, [r8]
 80172cc:	602b      	str	r3, [r5, #0]
 80172ce:	7b23      	ldrb	r3, [r4, #12]
 80172d0:	4638      	mov	r0, r7
 80172d2:	6063      	str	r3, [r4, #4]
 80172d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080172d8 <on_full_output_buffer>:
 80172d8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80172dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172de:	460d      	mov	r5, r1
 80172e0:	c90a      	ldmia	r1, {r1, r3}
 80172e2:	fbb3 f7fc 	udiv	r7, r3, ip
 80172e6:	6804      	ldr	r4, [r0, #0]
 80172e8:	4606      	mov	r6, r0
 80172ea:	1a63      	subs	r3, r4, r1
 80172ec:	fbb3 f3f7 	udiv	r3, r3, r7
 80172f0:	3301      	adds	r3, #1
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	fbb3 f4fc 	udiv	r4, r3, ip
 80172f8:	fb0c 3314 	mls	r3, ip, r4, r3
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	fb07 f303 	mul.w	r3, r7, r3
 8017302:	7b2a      	ldrb	r2, [r5, #12]
 8017304:	58cc      	ldr	r4, [r1, r3]
 8017306:	4413      	add	r3, r2
 8017308:	3308      	adds	r3, #8
 801730a:	1aa2      	subs	r2, r4, r2
 801730c:	4419      	add	r1, r3
 801730e:	3a04      	subs	r2, #4
 8017310:	6903      	ldr	r3, [r0, #16]
 8017312:	f7f8 ff63 	bl	80101dc <ucdr_init_buffer_origin>
 8017316:	4630      	mov	r0, r6
 8017318:	462a      	mov	r2, r5
 801731a:	4902      	ldr	r1, [pc, #8]	; (8017324 <on_full_output_buffer+0x4c>)
 801731c:	f7f8 ff3c 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 8017320:	2000      	movs	r0, #0
 8017322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017324:	080172d9 	.word	0x080172d9

08017328 <uxr_init_output_reliable_stream>:
 8017328:	b430      	push	{r4, r5}
 801732a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801732e:	6001      	str	r1, [r0, #0]
 8017330:	8103      	strh	r3, [r0, #8]
 8017332:	6042      	str	r2, [r0, #4]
 8017334:	7304      	strb	r4, [r0, #12]
 8017336:	b1b3      	cbz	r3, 8017366 <uxr_init_output_reliable_stream+0x3e>
 8017338:	600c      	str	r4, [r1, #0]
 801733a:	8901      	ldrh	r1, [r0, #8]
 801733c:	2901      	cmp	r1, #1
 801733e:	d912      	bls.n	8017366 <uxr_init_output_reliable_stream+0x3e>
 8017340:	2201      	movs	r2, #1
 8017342:	fbb2 f3f1 	udiv	r3, r2, r1
 8017346:	6844      	ldr	r4, [r0, #4]
 8017348:	fb01 2313 	mls	r3, r1, r3, r2
 801734c:	fbb4 f1f1 	udiv	r1, r4, r1
 8017350:	b29b      	uxth	r3, r3
 8017352:	fb03 f301 	mul.w	r3, r3, r1
 8017356:	7b04      	ldrb	r4, [r0, #12]
 8017358:	6801      	ldr	r1, [r0, #0]
 801735a:	3201      	adds	r2, #1
 801735c:	50cc      	str	r4, [r1, r3]
 801735e:	8901      	ldrh	r1, [r0, #8]
 8017360:	b292      	uxth	r2, r2
 8017362:	4291      	cmp	r1, r2
 8017364:	d8ed      	bhi.n	8017342 <uxr_init_output_reliable_stream+0x1a>
 8017366:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801736a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801736e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017372:	2200      	movs	r2, #0
 8017374:	4b04      	ldr	r3, [pc, #16]	; (8017388 <uxr_init_output_reliable_stream+0x60>)
 8017376:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801737a:	bc30      	pop	{r4, r5}
 801737c:	8241      	strh	r1, [r0, #18]
 801737e:	8402      	strh	r2, [r0, #32]
 8017380:	f8c0 300e 	str.w	r3, [r0, #14]
 8017384:	4770      	bx	lr
 8017386:	bf00      	nop
 8017388:	ffff0000 	.word	0xffff0000

0801738c <uxr_reset_output_reliable_stream>:
 801738c:	8902      	ldrh	r2, [r0, #8]
 801738e:	b430      	push	{r4, r5}
 8017390:	b19a      	cbz	r2, 80173ba <uxr_reset_output_reliable_stream+0x2e>
 8017392:	2500      	movs	r5, #0
 8017394:	4629      	mov	r1, r5
 8017396:	fbb1 f3f2 	udiv	r3, r1, r2
 801739a:	6844      	ldr	r4, [r0, #4]
 801739c:	fb02 1313 	mls	r3, r2, r3, r1
 80173a0:	fbb4 f2f2 	udiv	r2, r4, r2
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	fb03 f302 	mul.w	r3, r3, r2
 80173aa:	7b01      	ldrb	r1, [r0, #12]
 80173ac:	6802      	ldr	r2, [r0, #0]
 80173ae:	3501      	adds	r5, #1
 80173b0:	50d1      	str	r1, [r2, r3]
 80173b2:	8902      	ldrh	r2, [r0, #8]
 80173b4:	b2a9      	uxth	r1, r5
 80173b6:	428a      	cmp	r2, r1
 80173b8:	d8ed      	bhi.n	8017396 <uxr_reset_output_reliable_stream+0xa>
 80173ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80173be:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80173c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80173c6:	2200      	movs	r2, #0
 80173c8:	4b04      	ldr	r3, [pc, #16]	; (80173dc <uxr_reset_output_reliable_stream+0x50>)
 80173ca:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80173ce:	bc30      	pop	{r4, r5}
 80173d0:	8241      	strh	r1, [r0, #18]
 80173d2:	8402      	strh	r2, [r0, #32]
 80173d4:	f8c0 300e 	str.w	r3, [r0, #14]
 80173d8:	4770      	bx	lr
 80173da:	bf00      	nop
 80173dc:	ffff0000 	.word	0xffff0000

080173e0 <uxr_prepare_reliable_buffer_to_write>:
 80173e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e4:	4604      	mov	r4, r0
 80173e6:	89c5      	ldrh	r5, [r0, #14]
 80173e8:	8900      	ldrh	r0, [r0, #8]
 80173ea:	6866      	ldr	r6, [r4, #4]
 80173ec:	fbb5 f3f0 	udiv	r3, r5, r0
 80173f0:	fbb6 f6f0 	udiv	r6, r6, r0
 80173f4:	fb00 5313 	mls	r3, r0, r3, r5
 80173f8:	b29b      	uxth	r3, r3
 80173fa:	fb06 f303 	mul.w	r3, r6, r3
 80173fe:	4688      	mov	r8, r1
 8017400:	6821      	ldr	r1, [r4, #0]
 8017402:	3304      	adds	r3, #4
 8017404:	b091      	sub	sp, #68	; 0x44
 8017406:	18cb      	adds	r3, r1, r3
 8017408:	9604      	str	r6, [sp, #16]
 801740a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801740e:	2104      	movs	r1, #4
 8017410:	4630      	mov	r0, r6
 8017412:	9305      	str	r3, [sp, #20]
 8017414:	9206      	str	r2, [sp, #24]
 8017416:	f7f8 feed 	bl	80101f4 <ucdr_alignment>
 801741a:	1833      	adds	r3, r6, r0
 801741c:	9e04      	ldr	r6, [sp, #16]
 801741e:	eb03 0708 	add.w	r7, r3, r8
 8017422:	3e04      	subs	r6, #4
 8017424:	42b7      	cmp	r7, r6
 8017426:	9303      	str	r3, [sp, #12]
 8017428:	f240 80dd 	bls.w	80175e6 <uxr_prepare_reliable_buffer_to_write+0x206>
 801742c:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8017430:	eb0e 0308 	add.w	r3, lr, r8
 8017434:	42b3      	cmp	r3, r6
 8017436:	f240 80c3 	bls.w	80175c0 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801743a:	9b03      	ldr	r3, [sp, #12]
 801743c:	3304      	adds	r3, #4
 801743e:	42b3      	cmp	r3, r6
 8017440:	f080 810d 	bcs.w	801765e <uxr_prepare_reliable_buffer_to_write+0x27e>
 8017444:	8920      	ldrh	r0, [r4, #8]
 8017446:	2800      	cmp	r0, #0
 8017448:	f000 8123 	beq.w	8017692 <uxr_prepare_reliable_buffer_to_write+0x2b2>
 801744c:	f04f 0c00 	mov.w	ip, #0
 8017450:	6862      	ldr	r2, [r4, #4]
 8017452:	4661      	mov	r1, ip
 8017454:	fbb2 f9f0 	udiv	r9, r2, r0
 8017458:	4662      	mov	r2, ip
 801745a:	6827      	ldr	r7, [r4, #0]
 801745c:	fbb2 f3f0 	udiv	r3, r2, r0
 8017460:	fb00 2313 	mls	r3, r0, r3, r2
 8017464:	b29b      	uxth	r3, r3
 8017466:	fb09 7303 	mla	r3, r9, r3, r7
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	f10c 0c01 	add.w	ip, ip, #1
 8017470:	459e      	cmp	lr, r3
 8017472:	bf08      	it	eq
 8017474:	3101      	addeq	r1, #1
 8017476:	fa1f f28c 	uxth.w	r2, ip
 801747a:	bf08      	it	eq
 801747c:	b289      	uxtheq	r1, r1
 801747e:	4282      	cmp	r2, r0
 8017480:	d3ec      	bcc.n	801745c <uxr_prepare_reliable_buffer_to_write+0x7c>
 8017482:	9b03      	ldr	r3, [sp, #12]
 8017484:	1f37      	subs	r7, r6, #4
 8017486:	b2bf      	uxth	r7, r7
 8017488:	eba7 0903 	sub.w	r9, r7, r3
 801748c:	fa1f f989 	uxth.w	r9, r9
 8017490:	eba7 070e 	sub.w	r7, r7, lr
 8017494:	b2bf      	uxth	r7, r7
 8017496:	eba8 0809 	sub.w	r8, r8, r9
 801749a:	fbb8 faf7 	udiv	sl, r8, r7
 801749e:	fb07 831a 	mls	r3, r7, sl, r8
 80174a2:	9707      	str	r7, [sp, #28]
 80174a4:	b113      	cbz	r3, 80174ac <uxr_prepare_reliable_buffer_to_write+0xcc>
 80174a6:	9307      	str	r3, [sp, #28]
 80174a8:	f10a 0a01 	add.w	sl, sl, #1
 80174ac:	fa1f fa8a 	uxth.w	sl, sl
 80174b0:	458a      	cmp	sl, r1
 80174b2:	f200 8094 	bhi.w	80175de <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80174b6:	f10d 0b20 	add.w	fp, sp, #32
 80174ba:	f1ba 0f00 	cmp.w	sl, #0
 80174be:	d039      	beq.n	8017534 <uxr_prepare_reliable_buffer_to_write+0x154>
 80174c0:	f04f 0800 	mov.w	r8, #0
 80174c4:	f10d 0b20 	add.w	fp, sp, #32
 80174c8:	e000      	b.n	80174cc <uxr_prepare_reliable_buffer_to_write+0xec>
 80174ca:	46b9      	mov	r9, r7
 80174cc:	fbb5 f1f0 	udiv	r1, r5, r0
 80174d0:	6863      	ldr	r3, [r4, #4]
 80174d2:	fb00 5111 	mls	r1, r0, r1, r5
 80174d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80174da:	b289      	uxth	r1, r1
 80174dc:	fb01 f103 	mul.w	r1, r1, r3
 80174e0:	6823      	ldr	r3, [r4, #0]
 80174e2:	3104      	adds	r1, #4
 80174e4:	4419      	add	r1, r3
 80174e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174ea:	4632      	mov	r2, r6
 80174ec:	4658      	mov	r0, fp
 80174ee:	9300      	str	r3, [sp, #0]
 80174f0:	2300      	movs	r3, #0
 80174f2:	f7f8 fe69 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 80174f6:	464a      	mov	r2, r9
 80174f8:	2300      	movs	r3, #0
 80174fa:	210d      	movs	r1, #13
 80174fc:	4658      	mov	r0, fp
 80174fe:	f7fb f8fb 	bl	80126f8 <uxr_buffer_submessage_header>
 8017502:	8921      	ldrh	r1, [r4, #8]
 8017504:	6862      	ldr	r2, [r4, #4]
 8017506:	fbb5 f3f1 	udiv	r3, r5, r1
 801750a:	fbb2 f2f1 	udiv	r2, r2, r1
 801750e:	fb01 5313 	mls	r3, r1, r3, r5
 8017512:	b29b      	uxth	r3, r3
 8017514:	fb03 f302 	mul.w	r3, r3, r2
 8017518:	6822      	ldr	r2, [r4, #0]
 801751a:	4628      	mov	r0, r5
 801751c:	50d6      	str	r6, [r2, r3]
 801751e:	2101      	movs	r1, #1
 8017520:	f000 f9c2 	bl	80178a8 <uxr_seq_num_add>
 8017524:	f108 0801 	add.w	r8, r8, #1
 8017528:	fa1f f388 	uxth.w	r3, r8
 801752c:	459a      	cmp	sl, r3
 801752e:	4605      	mov	r5, r0
 8017530:	8920      	ldrh	r0, [r4, #8]
 8017532:	d8ca      	bhi.n	80174ca <uxr_prepare_reliable_buffer_to_write+0xea>
 8017534:	fbb5 f1f0 	udiv	r1, r5, r0
 8017538:	6863      	ldr	r3, [r4, #4]
 801753a:	fb00 5111 	mls	r1, r0, r1, r5
 801753e:	fbb3 f0f0 	udiv	r0, r3, r0
 8017542:	b289      	uxth	r1, r1
 8017544:	fb01 f100 	mul.w	r1, r1, r0
 8017548:	6823      	ldr	r3, [r4, #0]
 801754a:	3104      	adds	r1, #4
 801754c:	4419      	add	r1, r3
 801754e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017552:	4632      	mov	r2, r6
 8017554:	4658      	mov	r0, fp
 8017556:	9300      	str	r3, [sp, #0]
 8017558:	2300      	movs	r3, #0
 801755a:	f7f8 fe35 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 801755e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017562:	4658      	mov	r0, fp
 8017564:	fa1f f288 	uxth.w	r2, r8
 8017568:	2302      	movs	r3, #2
 801756a:	210d      	movs	r1, #13
 801756c:	f7fb f8c4 	bl	80126f8 <uxr_buffer_submessage_header>
 8017570:	8922      	ldrh	r2, [r4, #8]
 8017572:	6863      	ldr	r3, [r4, #4]
 8017574:	fbb5 f0f2 	udiv	r0, r5, r2
 8017578:	fbb3 f3f2 	udiv	r3, r3, r2
 801757c:	fb02 5010 	mls	r0, r2, r0, r5
 8017580:	b280      	uxth	r0, r0
 8017582:	fb00 f003 	mul.w	r0, r0, r3
 8017586:	6823      	ldr	r3, [r4, #0]
 8017588:	9f03      	ldr	r7, [sp, #12]
 801758a:	9307      	str	r3, [sp, #28]
 801758c:	9b05      	ldr	r3, [sp, #20]
 801758e:	7b26      	ldrb	r6, [r4, #12]
 8017590:	1d39      	adds	r1, r7, #4
 8017592:	440b      	add	r3, r1
 8017594:	4619      	mov	r1, r3
 8017596:	3604      	adds	r6, #4
 8017598:	9b07      	ldr	r3, [sp, #28]
 801759a:	9a04      	ldr	r2, [sp, #16]
 801759c:	4446      	add	r6, r8
 801759e:	501e      	str	r6, [r3, r0]
 80175a0:	9e06      	ldr	r6, [sp, #24]
 80175a2:	3a08      	subs	r2, #8
 80175a4:	4630      	mov	r0, r6
 80175a6:	1bd2      	subs	r2, r2, r7
 80175a8:	f7f8 fe20 	bl	80101ec <ucdr_init_buffer>
 80175ac:	4630      	mov	r0, r6
 80175ae:	4622      	mov	r2, r4
 80175b0:	4939      	ldr	r1, [pc, #228]	; (8017698 <uxr_prepare_reliable_buffer_to_write+0x2b8>)
 80175b2:	f7f8 fdf1 	bl	8010198 <ucdr_set_on_full_buffer_callback>
 80175b6:	2001      	movs	r0, #1
 80175b8:	81e5      	strh	r5, [r4, #14]
 80175ba:	b011      	add	sp, #68	; 0x44
 80175bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175c0:	2101      	movs	r1, #1
 80175c2:	89e0      	ldrh	r0, [r4, #14]
 80175c4:	f000 f970 	bl	80178a8 <uxr_seq_num_add>
 80175c8:	8921      	ldrh	r1, [r4, #8]
 80175ca:	4605      	mov	r5, r0
 80175cc:	8a60      	ldrh	r0, [r4, #18]
 80175ce:	f000 f96b 	bl	80178a8 <uxr_seq_num_add>
 80175d2:	4601      	mov	r1, r0
 80175d4:	4628      	mov	r0, r5
 80175d6:	f000 f96f 	bl	80178b8 <uxr_seq_num_cmp>
 80175da:	2800      	cmp	r0, #0
 80175dc:	dd24      	ble.n	8017628 <uxr_prepare_reliable_buffer_to_write+0x248>
 80175de:	2000      	movs	r0, #0
 80175e0:	b011      	add	sp, #68	; 0x44
 80175e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e6:	8921      	ldrh	r1, [r4, #8]
 80175e8:	8a60      	ldrh	r0, [r4, #18]
 80175ea:	f000 f95d 	bl	80178a8 <uxr_seq_num_add>
 80175ee:	4601      	mov	r1, r0
 80175f0:	4628      	mov	r0, r5
 80175f2:	f000 f961 	bl	80178b8 <uxr_seq_num_cmp>
 80175f6:	2800      	cmp	r0, #0
 80175f8:	dcf1      	bgt.n	80175de <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80175fa:	8920      	ldrh	r0, [r4, #8]
 80175fc:	6862      	ldr	r2, [r4, #4]
 80175fe:	fbb5 f3f0 	udiv	r3, r5, r0
 8017602:	fbb2 f2f0 	udiv	r2, r2, r0
 8017606:	fb00 5313 	mls	r3, r0, r3, r5
 801760a:	b29b      	uxth	r3, r3
 801760c:	fb03 f302 	mul.w	r3, r3, r2
 8017610:	6822      	ldr	r2, [r4, #0]
 8017612:	9806      	ldr	r0, [sp, #24]
 8017614:	50d7      	str	r7, [r2, r3]
 8017616:	9b03      	ldr	r3, [sp, #12]
 8017618:	463a      	mov	r2, r7
 801761a:	9300      	str	r3, [sp, #0]
 801761c:	9905      	ldr	r1, [sp, #20]
 801761e:	2300      	movs	r3, #0
 8017620:	f7f8 fdd2 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 8017624:	2001      	movs	r0, #1
 8017626:	e7db      	b.n	80175e0 <uxr_prepare_reliable_buffer_to_write+0x200>
 8017628:	8921      	ldrh	r1, [r4, #8]
 801762a:	6862      	ldr	r2, [r4, #4]
 801762c:	fbb5 f3f1 	udiv	r3, r5, r1
 8017630:	fbb2 f2f1 	udiv	r2, r2, r1
 8017634:	fb01 5313 	mls	r3, r1, r3, r5
 8017638:	b29b      	uxth	r3, r3
 801763a:	fb03 f302 	mul.w	r3, r3, r2
 801763e:	6821      	ldr	r1, [r4, #0]
 8017640:	7b22      	ldrb	r2, [r4, #12]
 8017642:	3304      	adds	r3, #4
 8017644:	4419      	add	r1, r3
 8017646:	4442      	add	r2, r8
 8017648:	f841 2c04 	str.w	r2, [r1, #-4]
 801764c:	7b23      	ldrb	r3, [r4, #12]
 801764e:	9806      	ldr	r0, [sp, #24]
 8017650:	9300      	str	r3, [sp, #0]
 8017652:	2300      	movs	r3, #0
 8017654:	f7f8 fdb8 	bl	80101c8 <ucdr_init_buffer_origin_offset>
 8017658:	2001      	movs	r0, #1
 801765a:	81e5      	strh	r5, [r4, #14]
 801765c:	e7c0      	b.n	80175e0 <uxr_prepare_reliable_buffer_to_write+0x200>
 801765e:	4628      	mov	r0, r5
 8017660:	2101      	movs	r1, #1
 8017662:	f000 f921 	bl	80178a8 <uxr_seq_num_add>
 8017666:	4605      	mov	r5, r0
 8017668:	8920      	ldrh	r0, [r4, #8]
 801766a:	6862      	ldr	r2, [r4, #4]
 801766c:	fbb5 f3f0 	udiv	r3, r5, r0
 8017670:	fbb2 f2f0 	udiv	r2, r2, r0
 8017674:	fb00 5313 	mls	r3, r0, r3, r5
 8017678:	b29b      	uxth	r3, r3
 801767a:	fb03 f302 	mul.w	r3, r3, r2
 801767e:	6822      	ldr	r2, [r4, #0]
 8017680:	3304      	adds	r3, #4
 8017682:	18d3      	adds	r3, r2, r3
 8017684:	9305      	str	r3, [sp, #20]
 8017686:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801768a:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801768e:	9303      	str	r3, [sp, #12]
 8017690:	e6d9      	b.n	8017446 <uxr_prepare_reliable_buffer_to_write+0x66>
 8017692:	4601      	mov	r1, r0
 8017694:	e6f5      	b.n	8017482 <uxr_prepare_reliable_buffer_to_write+0xa2>
 8017696:	bf00      	nop
 8017698:	080172d9 	.word	0x080172d9

0801769c <uxr_prepare_next_reliable_buffer_to_send>:
 801769c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80176a0:	4606      	mov	r6, r0
 80176a2:	4689      	mov	r9, r1
 80176a4:	8a00      	ldrh	r0, [r0, #16]
 80176a6:	2101      	movs	r1, #1
 80176a8:	4690      	mov	r8, r2
 80176aa:	461f      	mov	r7, r3
 80176ac:	f000 f8fc 	bl	80178a8 <uxr_seq_num_add>
 80176b0:	8038      	strh	r0, [r7, #0]
 80176b2:	8932      	ldrh	r2, [r6, #8]
 80176b4:	6873      	ldr	r3, [r6, #4]
 80176b6:	fbb0 f5f2 	udiv	r5, r0, r2
 80176ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80176be:	fb02 0415 	mls	r4, r2, r5, r0
 80176c2:	b2a4      	uxth	r4, r4
 80176c4:	fb04 f403 	mul.w	r4, r4, r3
 80176c8:	6833      	ldr	r3, [r6, #0]
 80176ca:	3404      	adds	r4, #4
 80176cc:	4423      	add	r3, r4
 80176ce:	f8c9 3000 	str.w	r3, [r9]
 80176d2:	6833      	ldr	r3, [r6, #0]
 80176d4:	89f1      	ldrh	r1, [r6, #14]
 80176d6:	441c      	add	r4, r3
 80176d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80176dc:	f8c8 3000 	str.w	r3, [r8]
 80176e0:	f000 f8ea 	bl	80178b8 <uxr_seq_num_cmp>
 80176e4:	2800      	cmp	r0, #0
 80176e6:	dd02      	ble.n	80176ee <uxr_prepare_next_reliable_buffer_to_send+0x52>
 80176e8:	2000      	movs	r0, #0
 80176ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176ee:	f8d8 2000 	ldr.w	r2, [r8]
 80176f2:	7b33      	ldrb	r3, [r6, #12]
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d9f7      	bls.n	80176e8 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 80176f8:	8a71      	ldrh	r1, [r6, #18]
 80176fa:	8a30      	ldrh	r0, [r6, #16]
 80176fc:	f000 f8d8 	bl	80178b0 <uxr_seq_num_sub>
 8017700:	8933      	ldrh	r3, [r6, #8]
 8017702:	4283      	cmp	r3, r0
 8017704:	d0f0      	beq.n	80176e8 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8017706:	8838      	ldrh	r0, [r7, #0]
 8017708:	89f3      	ldrh	r3, [r6, #14]
 801770a:	8230      	strh	r0, [r6, #16]
 801770c:	4298      	cmp	r0, r3
 801770e:	d002      	beq.n	8017716 <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 8017710:	2001      	movs	r0, #1
 8017712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017716:	2101      	movs	r1, #1
 8017718:	f000 f8c6 	bl	80178a8 <uxr_seq_num_add>
 801771c:	4603      	mov	r3, r0
 801771e:	2001      	movs	r0, #1
 8017720:	81f3      	strh	r3, [r6, #14]
 8017722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017726:	bf00      	nop

08017728 <uxr_update_output_stream_heartbeat_timestamp>:
 8017728:	b5d0      	push	{r4, r6, r7, lr}
 801772a:	8a01      	ldrh	r1, [r0, #16]
 801772c:	4604      	mov	r4, r0
 801772e:	8a40      	ldrh	r0, [r0, #18]
 8017730:	4616      	mov	r6, r2
 8017732:	461f      	mov	r7, r3
 8017734:	f000 f8c0 	bl	80178b8 <uxr_seq_num_cmp>
 8017738:	2800      	cmp	r0, #0
 801773a:	db07      	blt.n	801774c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801773c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017740:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017744:	2000      	movs	r0, #0
 8017746:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801774a:	bdd0      	pop	{r4, r6, r7, pc}
 801774c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017750:	b948      	cbnz	r0, 8017766 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8017752:	2301      	movs	r3, #1
 8017754:	f884 3020 	strb.w	r3, [r4, #32]
 8017758:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 801775c:	f147 0200 	adc.w	r2, r7, #0
 8017760:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8017764:	bdd0      	pop	{r4, r6, r7, pc}
 8017766:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801776a:	4296      	cmp	r6, r2
 801776c:	eb77 0303 	sbcs.w	r3, r7, r3
 8017770:	bfa5      	ittet	ge
 8017772:	3001      	addge	r0, #1
 8017774:	f884 0020 	strbge.w	r0, [r4, #32]
 8017778:	2000      	movlt	r0, #0
 801777a:	2001      	movge	r0, #1
 801777c:	e7ec      	b.n	8017758 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801777e:	bf00      	nop

08017780 <uxr_begin_output_nack_buffer_it>:
 8017780:	8a40      	ldrh	r0, [r0, #18]
 8017782:	4770      	bx	lr

08017784 <uxr_next_reliable_nack_buffer_to_send>:
 8017784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017788:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 801778c:	f1b9 0f00 	cmp.w	r9, #0
 8017790:	d011      	beq.n	80177b6 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8017792:	460f      	mov	r7, r1
 8017794:	4690      	mov	r8, r2
 8017796:	461e      	mov	r6, r3
 8017798:	4605      	mov	r5, r0
 801779a:	8818      	ldrh	r0, [r3, #0]
 801779c:	2101      	movs	r1, #1
 801779e:	f000 f883 	bl	80178a8 <uxr_seq_num_add>
 80177a2:	8030      	strh	r0, [r6, #0]
 80177a4:	8a29      	ldrh	r1, [r5, #16]
 80177a6:	f000 f887 	bl	80178b8 <uxr_seq_num_cmp>
 80177aa:	2800      	cmp	r0, #0
 80177ac:	dd06      	ble.n	80177bc <uxr_next_reliable_nack_buffer_to_send+0x38>
 80177ae:	2300      	movs	r3, #0
 80177b0:	4699      	mov	r9, r3
 80177b2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 80177b6:	4648      	mov	r0, r9
 80177b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177bc:	892a      	ldrh	r2, [r5, #8]
 80177be:	8830      	ldrh	r0, [r6, #0]
 80177c0:	686b      	ldr	r3, [r5, #4]
 80177c2:	fbb0 f4f2 	udiv	r4, r0, r2
 80177c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80177ca:	fb02 0414 	mls	r4, r2, r4, r0
 80177ce:	b2a4      	uxth	r4, r4
 80177d0:	fb04 f403 	mul.w	r4, r4, r3
 80177d4:	682b      	ldr	r3, [r5, #0]
 80177d6:	3404      	adds	r4, #4
 80177d8:	4423      	add	r3, r4
 80177da:	603b      	str	r3, [r7, #0]
 80177dc:	682b      	ldr	r3, [r5, #0]
 80177de:	441c      	add	r4, r3
 80177e0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80177e4:	f8c8 3000 	str.w	r3, [r8]
 80177e8:	7b2a      	ldrb	r2, [r5, #12]
 80177ea:	429a      	cmp	r2, r3
 80177ec:	d0d6      	beq.n	801779c <uxr_next_reliable_nack_buffer_to_send+0x18>
 80177ee:	4648      	mov	r0, r9
 80177f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080177f4 <uxr_process_acknack>:
 80177f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f6:	4604      	mov	r4, r0
 80177f8:	460e      	mov	r6, r1
 80177fa:	4610      	mov	r0, r2
 80177fc:	2101      	movs	r1, #1
 80177fe:	f000 f857 	bl	80178b0 <uxr_seq_num_sub>
 8017802:	8a61      	ldrh	r1, [r4, #18]
 8017804:	f000 f854 	bl	80178b0 <uxr_seq_num_sub>
 8017808:	b1b8      	cbz	r0, 801783a <uxr_process_acknack+0x46>
 801780a:	4605      	mov	r5, r0
 801780c:	2700      	movs	r7, #0
 801780e:	2101      	movs	r1, #1
 8017810:	8a60      	ldrh	r0, [r4, #18]
 8017812:	f000 f849 	bl	80178a8 <uxr_seq_num_add>
 8017816:	8921      	ldrh	r1, [r4, #8]
 8017818:	6862      	ldr	r2, [r4, #4]
 801781a:	fbb0 f3f1 	udiv	r3, r0, r1
 801781e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017822:	fb01 0313 	mls	r3, r1, r3, r0
 8017826:	b29b      	uxth	r3, r3
 8017828:	fb03 f302 	mul.w	r3, r3, r2
 801782c:	7b21      	ldrb	r1, [r4, #12]
 801782e:	6822      	ldr	r2, [r4, #0]
 8017830:	3701      	adds	r7, #1
 8017832:	42bd      	cmp	r5, r7
 8017834:	8260      	strh	r0, [r4, #18]
 8017836:	50d1      	str	r1, [r2, r3]
 8017838:	d1e9      	bne.n	801780e <uxr_process_acknack+0x1a>
 801783a:	3e00      	subs	r6, #0
 801783c:	f04f 0300 	mov.w	r3, #0
 8017840:	bf18      	it	ne
 8017842:	2601      	movne	r6, #1
 8017844:	f884 3020 	strb.w	r3, [r4, #32]
 8017848:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801784c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801784e:	bf00      	nop

08017850 <uxr_is_output_up_to_date>:
 8017850:	8a01      	ldrh	r1, [r0, #16]
 8017852:	b508      	push	{r3, lr}
 8017854:	8a40      	ldrh	r0, [r0, #18]
 8017856:	f000 f82f 	bl	80178b8 <uxr_seq_num_cmp>
 801785a:	fab0 f080 	clz	r0, r0
 801785e:	0940      	lsrs	r0, r0, #5
 8017860:	bd08      	pop	{r3, pc}
 8017862:	bf00      	nop

08017864 <get_available_free_slots>:
 8017864:	8901      	ldrh	r1, [r0, #8]
 8017866:	b1e1      	cbz	r1, 80178a2 <get_available_free_slots+0x3e>
 8017868:	b4f0      	push	{r4, r5, r6, r7}
 801786a:	2400      	movs	r4, #0
 801786c:	4603      	mov	r3, r0
 801786e:	6845      	ldr	r5, [r0, #4]
 8017870:	4622      	mov	r2, r4
 8017872:	4620      	mov	r0, r4
 8017874:	fbb5 f5f1 	udiv	r5, r5, r1
 8017878:	681f      	ldr	r7, [r3, #0]
 801787a:	7b1e      	ldrb	r6, [r3, #12]
 801787c:	fbb2 f3f1 	udiv	r3, r2, r1
 8017880:	fb01 2313 	mls	r3, r1, r3, r2
 8017884:	b29b      	uxth	r3, r3
 8017886:	fb05 7303 	mla	r3, r5, r3, r7
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	3401      	adds	r4, #1
 801788e:	429e      	cmp	r6, r3
 8017890:	bf08      	it	eq
 8017892:	3001      	addeq	r0, #1
 8017894:	b2a2      	uxth	r2, r4
 8017896:	bf08      	it	eq
 8017898:	b280      	uxtheq	r0, r0
 801789a:	428a      	cmp	r2, r1
 801789c:	d3ee      	bcc.n	801787c <get_available_free_slots+0x18>
 801789e:	bcf0      	pop	{r4, r5, r6, r7}
 80178a0:	4770      	bx	lr
 80178a2:	4608      	mov	r0, r1
 80178a4:	4770      	bx	lr
 80178a6:	bf00      	nop

080178a8 <uxr_seq_num_add>:
 80178a8:	4408      	add	r0, r1
 80178aa:	b280      	uxth	r0, r0
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop

080178b0 <uxr_seq_num_sub>:
 80178b0:	1a40      	subs	r0, r0, r1
 80178b2:	b280      	uxth	r0, r0
 80178b4:	4770      	bx	lr
 80178b6:	bf00      	nop

080178b8 <uxr_seq_num_cmp>:
 80178b8:	4288      	cmp	r0, r1
 80178ba:	d011      	beq.n	80178e0 <uxr_seq_num_cmp+0x28>
 80178bc:	d309      	bcc.n	80178d2 <uxr_seq_num_cmp+0x1a>
 80178be:	4288      	cmp	r0, r1
 80178c0:	d910      	bls.n	80178e4 <uxr_seq_num_cmp+0x2c>
 80178c2:	1a40      	subs	r0, r0, r1
 80178c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80178c8:	bfd4      	ite	le
 80178ca:	2001      	movle	r0, #1
 80178cc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80178d0:	4770      	bx	lr
 80178d2:	1a0b      	subs	r3, r1, r0
 80178d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80178d8:	daf1      	bge.n	80178be <uxr_seq_num_cmp+0x6>
 80178da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80178de:	4770      	bx	lr
 80178e0:	2000      	movs	r0, #0
 80178e2:	4770      	bx	lr
 80178e4:	2001      	movs	r0, #1
 80178e6:	4770      	bx	lr

080178e8 <rcl_get_default_domain_id>:
 80178e8:	2300      	movs	r3, #0
 80178ea:	b530      	push	{r4, r5, lr}
 80178ec:	b083      	sub	sp, #12
 80178ee:	9300      	str	r3, [sp, #0]
 80178f0:	b1d0      	cbz	r0, 8017928 <rcl_get_default_domain_id+0x40>
 80178f2:	4604      	mov	r4, r0
 80178f4:	4669      	mov	r1, sp
 80178f6:	4815      	ldr	r0, [pc, #84]	; (801794c <rcl_get_default_domain_id+0x64>)
 80178f8:	f7fe fa9a 	bl	8015e30 <rcutils_get_env>
 80178fc:	4602      	mov	r2, r0
 80178fe:	b110      	cbz	r0, 8017906 <rcl_get_default_domain_id+0x1e>
 8017900:	2001      	movs	r0, #1
 8017902:	b003      	add	sp, #12
 8017904:	bd30      	pop	{r4, r5, pc}
 8017906:	9b00      	ldr	r3, [sp, #0]
 8017908:	b18b      	cbz	r3, 801792e <rcl_get_default_domain_id+0x46>
 801790a:	7818      	ldrb	r0, [r3, #0]
 801790c:	2800      	cmp	r0, #0
 801790e:	d0f8      	beq.n	8017902 <rcl_get_default_domain_id+0x1a>
 8017910:	4618      	mov	r0, r3
 8017912:	a901      	add	r1, sp, #4
 8017914:	9201      	str	r2, [sp, #4]
 8017916:	f000 fd07 	bl	8018328 <strtoul>
 801791a:	4605      	mov	r5, r0
 801791c:	b150      	cbz	r0, 8017934 <rcl_get_default_domain_id+0x4c>
 801791e:	1c43      	adds	r3, r0, #1
 8017920:	d00d      	beq.n	801793e <rcl_get_default_domain_id+0x56>
 8017922:	2000      	movs	r0, #0
 8017924:	6025      	str	r5, [r4, #0]
 8017926:	e7ec      	b.n	8017902 <rcl_get_default_domain_id+0x1a>
 8017928:	200b      	movs	r0, #11
 801792a:	b003      	add	sp, #12
 801792c:	bd30      	pop	{r4, r5, pc}
 801792e:	4618      	mov	r0, r3
 8017930:	b003      	add	sp, #12
 8017932:	bd30      	pop	{r4, r5, pc}
 8017934:	9b01      	ldr	r3, [sp, #4]
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d0f2      	beq.n	8017922 <rcl_get_default_domain_id+0x3a>
 801793c:	e7e0      	b.n	8017900 <rcl_get_default_domain_id+0x18>
 801793e:	f000 f94f 	bl	8017be0 <__errno>
 8017942:	6803      	ldr	r3, [r0, #0]
 8017944:	2b22      	cmp	r3, #34	; 0x22
 8017946:	d1ec      	bne.n	8017922 <rcl_get_default_domain_id+0x3a>
 8017948:	e7da      	b.n	8017900 <rcl_get_default_domain_id+0x18>
 801794a:	bf00      	nop
 801794c:	0801af58 	.word	0x0801af58

08017950 <rcl_get_zero_initialized_guard_condition>:
 8017950:	4603      	mov	r3, r0
 8017952:	4a03      	ldr	r2, [pc, #12]	; (8017960 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017958:	e883 0003 	stmia.w	r3, {r0, r1}
 801795c:	4618      	mov	r0, r3
 801795e:	4770      	bx	lr
 8017960:	0801af68 	.word	0x0801af68

08017964 <rcl_guard_condition_init>:
 8017964:	b082      	sub	sp, #8
 8017966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017968:	b087      	sub	sp, #28
 801796a:	ad0c      	add	r5, sp, #48	; 0x30
 801796c:	e9c5 2300 	strd	r2, r3, [r5]
 8017970:	ac01      	add	r4, sp, #4
 8017972:	4607      	mov	r7, r0
 8017974:	460e      	mov	r6, r1
 8017976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801797a:	682b      	ldr	r3, [r5, #0]
 801797c:	a801      	add	r0, sp, #4
 801797e:	6023      	str	r3, [r4, #0]
 8017980:	f7f3 fda6 	bl	800b4d0 <rcutils_allocator_is_valid>
 8017984:	2800      	cmp	r0, #0
 8017986:	d032      	beq.n	80179ee <rcl_guard_condition_init+0x8a>
 8017988:	463d      	mov	r5, r7
 801798a:	2f00      	cmp	r7, #0
 801798c:	d02f      	beq.n	80179ee <rcl_guard_condition_init+0x8a>
 801798e:	687f      	ldr	r7, [r7, #4]
 8017990:	bb3f      	cbnz	r7, 80179e2 <rcl_guard_condition_init+0x7e>
 8017992:	2e00      	cmp	r6, #0
 8017994:	d02b      	beq.n	80179ee <rcl_guard_condition_init+0x8a>
 8017996:	4630      	mov	r0, r6
 8017998:	f7fb ffde 	bl	8013958 <rcl_context_is_valid>
 801799c:	2800      	cmp	r0, #0
 801799e:	d02c      	beq.n	80179fa <rcl_guard_condition_init+0x96>
 80179a0:	201c      	movs	r0, #28
 80179a2:	9b01      	ldr	r3, [sp, #4]
 80179a4:	9905      	ldr	r1, [sp, #20]
 80179a6:	4798      	blx	r3
 80179a8:	4604      	mov	r4, r0
 80179aa:	6068      	str	r0, [r5, #4]
 80179ac:	2800      	cmp	r0, #0
 80179ae:	d02d      	beq.n	8017a0c <rcl_guard_condition_init+0xa8>
 80179b0:	6830      	ldr	r0, [r6, #0]
 80179b2:	3028      	adds	r0, #40	; 0x28
 80179b4:	f000 f8d4 	bl	8017b60 <rmw_create_guard_condition>
 80179b8:	686e      	ldr	r6, [r5, #4]
 80179ba:	6020      	str	r0, [r4, #0]
 80179bc:	6834      	ldr	r4, [r6, #0]
 80179be:	b1f4      	cbz	r4, 80179fe <rcl_guard_condition_init+0x9a>
 80179c0:	f04f 0c01 	mov.w	ip, #1
 80179c4:	ac01      	add	r4, sp, #4
 80179c6:	f106 0508 	add.w	r5, r6, #8
 80179ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179cc:	f886 c004 	strb.w	ip, [r6, #4]
 80179d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80179d2:	4638      	mov	r0, r7
 80179d4:	6823      	ldr	r3, [r4, #0]
 80179d6:	602b      	str	r3, [r5, #0]
 80179d8:	b007      	add	sp, #28
 80179da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80179de:	b002      	add	sp, #8
 80179e0:	4770      	bx	lr
 80179e2:	2064      	movs	r0, #100	; 0x64
 80179e4:	b007      	add	sp, #28
 80179e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80179ea:	b002      	add	sp, #8
 80179ec:	4770      	bx	lr
 80179ee:	200b      	movs	r0, #11
 80179f0:	b007      	add	sp, #28
 80179f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80179f6:	b002      	add	sp, #8
 80179f8:	4770      	bx	lr
 80179fa:	2065      	movs	r0, #101	; 0x65
 80179fc:	e7f2      	b.n	80179e4 <rcl_guard_condition_init+0x80>
 80179fe:	4630      	mov	r0, r6
 8017a00:	9b02      	ldr	r3, [sp, #8]
 8017a02:	9905      	ldr	r1, [sp, #20]
 8017a04:	4798      	blx	r3
 8017a06:	2001      	movs	r0, #1
 8017a08:	606c      	str	r4, [r5, #4]
 8017a0a:	e7eb      	b.n	80179e4 <rcl_guard_condition_init+0x80>
 8017a0c:	200a      	movs	r0, #10
 8017a0e:	e7e9      	b.n	80179e4 <rcl_guard_condition_init+0x80>

08017a10 <rcl_guard_condition_init_from_rmw>:
 8017a10:	4684      	mov	ip, r0
 8017a12:	b082      	sub	sp, #8
 8017a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a18:	b086      	sub	sp, #24
 8017a1a:	ac0c      	add	r4, sp, #48	; 0x30
 8017a1c:	f844 3f04 	str.w	r3, [r4, #4]!
 8017a20:	ad01      	add	r5, sp, #4
 8017a22:	460f      	mov	r7, r1
 8017a24:	4616      	mov	r6, r2
 8017a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017a2a:	6823      	ldr	r3, [r4, #0]
 8017a2c:	a801      	add	r0, sp, #4
 8017a2e:	4664      	mov	r4, ip
 8017a30:	602b      	str	r3, [r5, #0]
 8017a32:	f7f3 fd4d 	bl	800b4d0 <rcutils_allocator_is_valid>
 8017a36:	b338      	cbz	r0, 8017a88 <rcl_guard_condition_init_from_rmw+0x78>
 8017a38:	b334      	cbz	r4, 8017a88 <rcl_guard_condition_init_from_rmw+0x78>
 8017a3a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017a3e:	f1b8 0f00 	cmp.w	r8, #0
 8017a42:	d11b      	bne.n	8017a7c <rcl_guard_condition_init_from_rmw+0x6c>
 8017a44:	b306      	cbz	r6, 8017a88 <rcl_guard_condition_init_from_rmw+0x78>
 8017a46:	4630      	mov	r0, r6
 8017a48:	f7fb ff86 	bl	8013958 <rcl_context_is_valid>
 8017a4c:	b310      	cbz	r0, 8017a94 <rcl_guard_condition_init_from_rmw+0x84>
 8017a4e:	201c      	movs	r0, #28
 8017a50:	9b01      	ldr	r3, [sp, #4]
 8017a52:	9905      	ldr	r1, [sp, #20]
 8017a54:	4798      	blx	r3
 8017a56:	4605      	mov	r5, r0
 8017a58:	6060      	str	r0, [r4, #4]
 8017a5a:	b340      	cbz	r0, 8017aae <rcl_guard_condition_init_from_rmw+0x9e>
 8017a5c:	b1e7      	cbz	r7, 8017a98 <rcl_guard_condition_init_from_rmw+0x88>
 8017a5e:	6007      	str	r7, [r0, #0]
 8017a60:	f880 8004 	strb.w	r8, [r0, #4]
 8017a64:	ac01      	add	r4, sp, #4
 8017a66:	3508      	adds	r5, #8
 8017a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017a6c:	2000      	movs	r0, #0
 8017a6e:	6823      	ldr	r3, [r4, #0]
 8017a70:	602b      	str	r3, [r5, #0]
 8017a72:	b006      	add	sp, #24
 8017a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a78:	b002      	add	sp, #8
 8017a7a:	4770      	bx	lr
 8017a7c:	2064      	movs	r0, #100	; 0x64
 8017a7e:	b006      	add	sp, #24
 8017a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a84:	b002      	add	sp, #8
 8017a86:	4770      	bx	lr
 8017a88:	200b      	movs	r0, #11
 8017a8a:	b006      	add	sp, #24
 8017a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a90:	b002      	add	sp, #8
 8017a92:	4770      	bx	lr
 8017a94:	2065      	movs	r0, #101	; 0x65
 8017a96:	e7f2      	b.n	8017a7e <rcl_guard_condition_init_from_rmw+0x6e>
 8017a98:	6830      	ldr	r0, [r6, #0]
 8017a9a:	3028      	adds	r0, #40	; 0x28
 8017a9c:	f000 f860 	bl	8017b60 <rmw_create_guard_condition>
 8017aa0:	6028      	str	r0, [r5, #0]
 8017aa2:	6865      	ldr	r5, [r4, #4]
 8017aa4:	682e      	ldr	r6, [r5, #0]
 8017aa6:	b126      	cbz	r6, 8017ab2 <rcl_guard_condition_init_from_rmw+0xa2>
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	712b      	strb	r3, [r5, #4]
 8017aac:	e7da      	b.n	8017a64 <rcl_guard_condition_init_from_rmw+0x54>
 8017aae:	200a      	movs	r0, #10
 8017ab0:	e7e5      	b.n	8017a7e <rcl_guard_condition_init_from_rmw+0x6e>
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	9b02      	ldr	r3, [sp, #8]
 8017ab6:	9905      	ldr	r1, [sp, #20]
 8017ab8:	4798      	blx	r3
 8017aba:	2001      	movs	r0, #1
 8017abc:	6066      	str	r6, [r4, #4]
 8017abe:	e7de      	b.n	8017a7e <rcl_guard_condition_init_from_rmw+0x6e>

08017ac0 <rcl_guard_condition_fini>:
 8017ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ac2:	b1e0      	cbz	r0, 8017afe <rcl_guard_condition_fini+0x3e>
 8017ac4:	4604      	mov	r4, r0
 8017ac6:	6840      	ldr	r0, [r0, #4]
 8017ac8:	b158      	cbz	r0, 8017ae2 <rcl_guard_condition_fini+0x22>
 8017aca:	6803      	ldr	r3, [r0, #0]
 8017acc:	68c6      	ldr	r6, [r0, #12]
 8017ace:	6987      	ldr	r7, [r0, #24]
 8017ad0:	b153      	cbz	r3, 8017ae8 <rcl_guard_condition_fini+0x28>
 8017ad2:	7905      	ldrb	r5, [r0, #4]
 8017ad4:	b955      	cbnz	r5, 8017aec <rcl_guard_condition_fini+0x2c>
 8017ad6:	4639      	mov	r1, r7
 8017ad8:	47b0      	blx	r6
 8017ada:	2300      	movs	r3, #0
 8017adc:	4628      	mov	r0, r5
 8017ade:	6063      	str	r3, [r4, #4]
 8017ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ae2:	4605      	mov	r5, r0
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ae8:	461d      	mov	r5, r3
 8017aea:	e7f4      	b.n	8017ad6 <rcl_guard_condition_fini+0x16>
 8017aec:	4618      	mov	r0, r3
 8017aee:	f000 f84b 	bl	8017b88 <rmw_destroy_guard_condition>
 8017af2:	4605      	mov	r5, r0
 8017af4:	3d00      	subs	r5, #0
 8017af6:	bf18      	it	ne
 8017af8:	2501      	movne	r5, #1
 8017afa:	6860      	ldr	r0, [r4, #4]
 8017afc:	e7eb      	b.n	8017ad6 <rcl_guard_condition_fini+0x16>
 8017afe:	250b      	movs	r5, #11
 8017b00:	4628      	mov	r0, r5
 8017b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017b04 <rcl_guard_condition_get_default_options>:
 8017b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b08:	4680      	mov	r8, r0
 8017b0a:	b086      	sub	sp, #24
 8017b0c:	466d      	mov	r5, sp
 8017b0e:	4c08      	ldr	r4, [pc, #32]	; (8017b30 <rcl_guard_condition_get_default_options+0x2c>)
 8017b10:	4646      	mov	r6, r8
 8017b12:	4627      	mov	r7, r4
 8017b14:	4668      	mov	r0, sp
 8017b16:	f7f3 fccd 	bl	800b4b4 <rcutils_get_default_allocator>
 8017b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b1e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017b20:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017b22:	4640      	mov	r0, r8
 8017b24:	682b      	ldr	r3, [r5, #0]
 8017b26:	6023      	str	r3, [r4, #0]
 8017b28:	6033      	str	r3, [r6, #0]
 8017b2a:	b006      	add	sp, #24
 8017b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b30:	20006848 	.word	0x20006848

08017b34 <rcl_trigger_guard_condition>:
 8017b34:	b148      	cbz	r0, 8017b4a <rcl_trigger_guard_condition+0x16>
 8017b36:	b508      	push	{r3, lr}
 8017b38:	6843      	ldr	r3, [r0, #4]
 8017b3a:	b143      	cbz	r3, 8017b4e <rcl_trigger_guard_condition+0x1a>
 8017b3c:	6818      	ldr	r0, [r3, #0]
 8017b3e:	f000 f837 	bl	8017bb0 <rmw_trigger_guard_condition>
 8017b42:	3800      	subs	r0, #0
 8017b44:	bf18      	it	ne
 8017b46:	2001      	movne	r0, #1
 8017b48:	bd08      	pop	{r3, pc}
 8017b4a:	200b      	movs	r0, #11
 8017b4c:	4770      	bx	lr
 8017b4e:	200b      	movs	r0, #11
 8017b50:	bd08      	pop	{r3, pc}
 8017b52:	bf00      	nop

08017b54 <rcl_guard_condition_get_rmw_handle>:
 8017b54:	b110      	cbz	r0, 8017b5c <rcl_guard_condition_get_rmw_handle+0x8>
 8017b56:	6840      	ldr	r0, [r0, #4]
 8017b58:	b100      	cbz	r0, 8017b5c <rcl_guard_condition_get_rmw_handle+0x8>
 8017b5a:	6800      	ldr	r0, [r0, #0]
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop

08017b60 <rmw_create_guard_condition>:
 8017b60:	b538      	push	{r3, r4, r5, lr}
 8017b62:	4605      	mov	r5, r0
 8017b64:	4807      	ldr	r0, [pc, #28]	; (8017b84 <rmw_create_guard_condition+0x24>)
 8017b66:	f7fe fc3b 	bl	80163e0 <get_memory>
 8017b6a:	b148      	cbz	r0, 8017b80 <rmw_create_guard_condition+0x20>
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	68c4      	ldr	r4, [r0, #12]
 8017b70:	61e5      	str	r5, [r4, #28]
 8017b72:	7423      	strb	r3, [r4, #16]
 8017b74:	f7fe fc9c 	bl	80164b0 <rmw_get_implementation_identifier>
 8017b78:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017b7c:	f104 0014 	add.w	r0, r4, #20
 8017b80:	bd38      	pop	{r3, r4, r5, pc}
 8017b82:	bf00      	nop
 8017b84:	2000be90 	.word	0x2000be90

08017b88 <rmw_destroy_guard_condition>:
 8017b88:	b508      	push	{r3, lr}
 8017b8a:	4b08      	ldr	r3, [pc, #32]	; (8017bac <rmw_destroy_guard_condition+0x24>)
 8017b8c:	6819      	ldr	r1, [r3, #0]
 8017b8e:	b911      	cbnz	r1, 8017b96 <rmw_destroy_guard_condition+0xe>
 8017b90:	e00a      	b.n	8017ba8 <rmw_destroy_guard_condition+0x20>
 8017b92:	6889      	ldr	r1, [r1, #8]
 8017b94:	b141      	cbz	r1, 8017ba8 <rmw_destroy_guard_condition+0x20>
 8017b96:	68cb      	ldr	r3, [r1, #12]
 8017b98:	3314      	adds	r3, #20
 8017b9a:	4298      	cmp	r0, r3
 8017b9c:	d1f9      	bne.n	8017b92 <rmw_destroy_guard_condition+0xa>
 8017b9e:	4803      	ldr	r0, [pc, #12]	; (8017bac <rmw_destroy_guard_condition+0x24>)
 8017ba0:	f7fe fc2e 	bl	8016400 <put_memory>
 8017ba4:	2000      	movs	r0, #0
 8017ba6:	bd08      	pop	{r3, pc}
 8017ba8:	2001      	movs	r0, #1
 8017baa:	bd08      	pop	{r3, pc}
 8017bac:	2000be90 	.word	0x2000be90

08017bb0 <rmw_trigger_guard_condition>:
 8017bb0:	b160      	cbz	r0, 8017bcc <rmw_trigger_guard_condition+0x1c>
 8017bb2:	b510      	push	{r4, lr}
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	6800      	ldr	r0, [r0, #0]
 8017bb8:	f7f5 f9e2 	bl	800cf80 <is_uxrce_rmw_identifier_valid>
 8017bbc:	b908      	cbnz	r0, 8017bc2 <rmw_trigger_guard_condition+0x12>
 8017bbe:	2001      	movs	r0, #1
 8017bc0:	bd10      	pop	{r4, pc}
 8017bc2:	2201      	movs	r2, #1
 8017bc4:	6863      	ldr	r3, [r4, #4]
 8017bc6:	2000      	movs	r0, #0
 8017bc8:	741a      	strb	r2, [r3, #16]
 8017bca:	bd10      	pop	{r4, pc}
 8017bcc:	2001      	movs	r0, #1
 8017bce:	4770      	bx	lr

08017bd0 <calloc>:
 8017bd0:	4b02      	ldr	r3, [pc, #8]	; (8017bdc <calloc+0xc>)
 8017bd2:	460a      	mov	r2, r1
 8017bd4:	4601      	mov	r1, r0
 8017bd6:	6818      	ldr	r0, [r3, #0]
 8017bd8:	f000 b938 	b.w	8017e4c <_calloc_r>
 8017bdc:	2000025c 	.word	0x2000025c

08017be0 <__errno>:
 8017be0:	4b01      	ldr	r3, [pc, #4]	; (8017be8 <__errno+0x8>)
 8017be2:	6818      	ldr	r0, [r3, #0]
 8017be4:	4770      	bx	lr
 8017be6:	bf00      	nop
 8017be8:	2000025c 	.word	0x2000025c

08017bec <exit>:
 8017bec:	b508      	push	{r3, lr}
 8017bee:	4b07      	ldr	r3, [pc, #28]	; (8017c0c <exit+0x20>)
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	b113      	cbz	r3, 8017bfa <exit+0xe>
 8017bf4:	2100      	movs	r1, #0
 8017bf6:	f3af 8000 	nop.w
 8017bfa:	4b05      	ldr	r3, [pc, #20]	; (8017c10 <exit+0x24>)
 8017bfc:	6818      	ldr	r0, [r3, #0]
 8017bfe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017c00:	b103      	cbz	r3, 8017c04 <exit+0x18>
 8017c02:	4798      	blx	r3
 8017c04:	4620      	mov	r0, r4
 8017c06:	f7eb f936 	bl	8002e76 <_exit>
 8017c0a:	bf00      	nop
 8017c0c:	00000000 	.word	0x00000000
 8017c10:	0801b074 	.word	0x0801b074

08017c14 <_fwrite_r>:
 8017c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c18:	9c08      	ldr	r4, [sp, #32]
 8017c1a:	4689      	mov	r9, r1
 8017c1c:	4617      	mov	r7, r2
 8017c1e:	4605      	mov	r5, r0
 8017c20:	fb02 f803 	mul.w	r8, r2, r3
 8017c24:	b118      	cbz	r0, 8017c2e <_fwrite_r+0x1a>
 8017c26:	6983      	ldr	r3, [r0, #24]
 8017c28:	b90b      	cbnz	r3, 8017c2e <_fwrite_r+0x1a>
 8017c2a:	f000 fdc5 	bl	80187b8 <__sinit>
 8017c2e:	4b26      	ldr	r3, [pc, #152]	; (8017cc8 <_fwrite_r+0xb4>)
 8017c30:	429c      	cmp	r4, r3
 8017c32:	d123      	bne.n	8017c7c <_fwrite_r+0x68>
 8017c34:	686c      	ldr	r4, [r5, #4]
 8017c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c38:	07de      	lsls	r6, r3, #31
 8017c3a:	d405      	bmi.n	8017c48 <_fwrite_r+0x34>
 8017c3c:	89a3      	ldrh	r3, [r4, #12]
 8017c3e:	0598      	lsls	r0, r3, #22
 8017c40:	d402      	bmi.n	8017c48 <_fwrite_r+0x34>
 8017c42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c44:	f000 f8bf 	bl	8017dc6 <__retarget_lock_acquire_recursive>
 8017c48:	89a3      	ldrh	r3, [r4, #12]
 8017c4a:	0719      	lsls	r1, r3, #28
 8017c4c:	d520      	bpl.n	8017c90 <_fwrite_r+0x7c>
 8017c4e:	6923      	ldr	r3, [r4, #16]
 8017c50:	b1f3      	cbz	r3, 8017c90 <_fwrite_r+0x7c>
 8017c52:	2600      	movs	r6, #0
 8017c54:	4546      	cmp	r6, r8
 8017c56:	d029      	beq.n	8017cac <_fwrite_r+0x98>
 8017c58:	68a0      	ldr	r0, [r4, #8]
 8017c5a:	f819 1006 	ldrb.w	r1, [r9, r6]
 8017c5e:	3801      	subs	r0, #1
 8017c60:	2800      	cmp	r0, #0
 8017c62:	60a0      	str	r0, [r4, #8]
 8017c64:	da04      	bge.n	8017c70 <_fwrite_r+0x5c>
 8017c66:	69a3      	ldr	r3, [r4, #24]
 8017c68:	4298      	cmp	r0, r3
 8017c6a:	db19      	blt.n	8017ca0 <_fwrite_r+0x8c>
 8017c6c:	290a      	cmp	r1, #10
 8017c6e:	d017      	beq.n	8017ca0 <_fwrite_r+0x8c>
 8017c70:	6823      	ldr	r3, [r4, #0]
 8017c72:	1c5a      	adds	r2, r3, #1
 8017c74:	6022      	str	r2, [r4, #0]
 8017c76:	7019      	strb	r1, [r3, #0]
 8017c78:	3601      	adds	r6, #1
 8017c7a:	e7eb      	b.n	8017c54 <_fwrite_r+0x40>
 8017c7c:	4b13      	ldr	r3, [pc, #76]	; (8017ccc <_fwrite_r+0xb8>)
 8017c7e:	429c      	cmp	r4, r3
 8017c80:	d101      	bne.n	8017c86 <_fwrite_r+0x72>
 8017c82:	68ac      	ldr	r4, [r5, #8]
 8017c84:	e7d7      	b.n	8017c36 <_fwrite_r+0x22>
 8017c86:	4b12      	ldr	r3, [pc, #72]	; (8017cd0 <_fwrite_r+0xbc>)
 8017c88:	429c      	cmp	r4, r3
 8017c8a:	bf08      	it	eq
 8017c8c:	68ec      	ldreq	r4, [r5, #12]
 8017c8e:	e7d2      	b.n	8017c36 <_fwrite_r+0x22>
 8017c90:	4621      	mov	r1, r4
 8017c92:	4628      	mov	r0, r5
 8017c94:	f000 fbde 	bl	8018454 <__swsetup_r>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	d0da      	beq.n	8017c52 <_fwrite_r+0x3e>
 8017c9c:	2600      	movs	r6, #0
 8017c9e:	e005      	b.n	8017cac <_fwrite_r+0x98>
 8017ca0:	4622      	mov	r2, r4
 8017ca2:	4628      	mov	r0, r5
 8017ca4:	f000 fb84 	bl	80183b0 <__swbuf_r>
 8017ca8:	3001      	adds	r0, #1
 8017caa:	d1e5      	bne.n	8017c78 <_fwrite_r+0x64>
 8017cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017cae:	07da      	lsls	r2, r3, #31
 8017cb0:	d405      	bmi.n	8017cbe <_fwrite_r+0xaa>
 8017cb2:	89a3      	ldrh	r3, [r4, #12]
 8017cb4:	059b      	lsls	r3, r3, #22
 8017cb6:	d402      	bmi.n	8017cbe <_fwrite_r+0xaa>
 8017cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cba:	f000 f885 	bl	8017dc8 <__retarget_lock_release_recursive>
 8017cbe:	fbb6 f0f7 	udiv	r0, r6, r7
 8017cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cc6:	bf00      	nop
 8017cc8:	0801b14c 	.word	0x0801b14c
 8017ccc:	0801b16c 	.word	0x0801b16c
 8017cd0:	0801b12c 	.word	0x0801b12c

08017cd4 <fwrite>:
 8017cd4:	b507      	push	{r0, r1, r2, lr}
 8017cd6:	9300      	str	r3, [sp, #0]
 8017cd8:	4613      	mov	r3, r2
 8017cda:	460a      	mov	r2, r1
 8017cdc:	4601      	mov	r1, r0
 8017cde:	4803      	ldr	r0, [pc, #12]	; (8017cec <fwrite+0x18>)
 8017ce0:	6800      	ldr	r0, [r0, #0]
 8017ce2:	f7ff ff97 	bl	8017c14 <_fwrite_r>
 8017ce6:	b003      	add	sp, #12
 8017ce8:	f85d fb04 	ldr.w	pc, [sp], #4
 8017cec:	2000025c 	.word	0x2000025c

08017cf0 <getenv>:
 8017cf0:	b507      	push	{r0, r1, r2, lr}
 8017cf2:	4b04      	ldr	r3, [pc, #16]	; (8017d04 <getenv+0x14>)
 8017cf4:	4601      	mov	r1, r0
 8017cf6:	aa01      	add	r2, sp, #4
 8017cf8:	6818      	ldr	r0, [r3, #0]
 8017cfa:	f000 f805 	bl	8017d08 <_findenv_r>
 8017cfe:	b003      	add	sp, #12
 8017d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d04:	2000025c 	.word	0x2000025c

08017d08 <_findenv_r>:
 8017d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0c:	4607      	mov	r7, r0
 8017d0e:	4689      	mov	r9, r1
 8017d10:	4616      	mov	r6, r2
 8017d12:	f000 fc2b 	bl	801856c <__env_lock>
 8017d16:	4b18      	ldr	r3, [pc, #96]	; (8017d78 <_findenv_r+0x70>)
 8017d18:	681c      	ldr	r4, [r3, #0]
 8017d1a:	469a      	mov	sl, r3
 8017d1c:	b134      	cbz	r4, 8017d2c <_findenv_r+0x24>
 8017d1e:	464b      	mov	r3, r9
 8017d20:	4698      	mov	r8, r3
 8017d22:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017d26:	b139      	cbz	r1, 8017d38 <_findenv_r+0x30>
 8017d28:	293d      	cmp	r1, #61	; 0x3d
 8017d2a:	d1f9      	bne.n	8017d20 <_findenv_r+0x18>
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	f000 fc23 	bl	8018578 <__env_unlock>
 8017d32:	2000      	movs	r0, #0
 8017d34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d38:	eba8 0809 	sub.w	r8, r8, r9
 8017d3c:	46a3      	mov	fp, r4
 8017d3e:	f854 0b04 	ldr.w	r0, [r4], #4
 8017d42:	2800      	cmp	r0, #0
 8017d44:	d0f2      	beq.n	8017d2c <_findenv_r+0x24>
 8017d46:	4642      	mov	r2, r8
 8017d48:	4649      	mov	r1, r9
 8017d4a:	f000 fa3a 	bl	80181c2 <strncmp>
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d1f4      	bne.n	8017d3c <_findenv_r+0x34>
 8017d52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017d56:	eb03 0508 	add.w	r5, r3, r8
 8017d5a:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017d5e:	2b3d      	cmp	r3, #61	; 0x3d
 8017d60:	d1ec      	bne.n	8017d3c <_findenv_r+0x34>
 8017d62:	f8da 3000 	ldr.w	r3, [sl]
 8017d66:	4638      	mov	r0, r7
 8017d68:	ebab 0303 	sub.w	r3, fp, r3
 8017d6c:	109b      	asrs	r3, r3, #2
 8017d6e:	6033      	str	r3, [r6, #0]
 8017d70:	f000 fc02 	bl	8018578 <__env_unlock>
 8017d74:	1c68      	adds	r0, r5, #1
 8017d76:	e7dd      	b.n	8017d34 <_findenv_r+0x2c>
 8017d78:	20000008 	.word	0x20000008

08017d7c <__libc_init_array>:
 8017d7c:	b570      	push	{r4, r5, r6, lr}
 8017d7e:	2600      	movs	r6, #0
 8017d80:	4d0c      	ldr	r5, [pc, #48]	; (8017db4 <__libc_init_array+0x38>)
 8017d82:	4c0d      	ldr	r4, [pc, #52]	; (8017db8 <__libc_init_array+0x3c>)
 8017d84:	1b64      	subs	r4, r4, r5
 8017d86:	10a4      	asrs	r4, r4, #2
 8017d88:	42a6      	cmp	r6, r4
 8017d8a:	d109      	bne.n	8017da0 <__libc_init_array+0x24>
 8017d8c:	f001 fbb2 	bl	80194f4 <_init>
 8017d90:	2600      	movs	r6, #0
 8017d92:	4d0a      	ldr	r5, [pc, #40]	; (8017dbc <__libc_init_array+0x40>)
 8017d94:	4c0a      	ldr	r4, [pc, #40]	; (8017dc0 <__libc_init_array+0x44>)
 8017d96:	1b64      	subs	r4, r4, r5
 8017d98:	10a4      	asrs	r4, r4, #2
 8017d9a:	42a6      	cmp	r6, r4
 8017d9c:	d105      	bne.n	8017daa <__libc_init_array+0x2e>
 8017d9e:	bd70      	pop	{r4, r5, r6, pc}
 8017da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017da4:	4798      	blx	r3
 8017da6:	3601      	adds	r6, #1
 8017da8:	e7ee      	b.n	8017d88 <__libc_init_array+0xc>
 8017daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8017dae:	4798      	blx	r3
 8017db0:	3601      	adds	r6, #1
 8017db2:	e7f2      	b.n	8017d9a <__libc_init_array+0x1e>
 8017db4:	0801b1c8 	.word	0x0801b1c8
 8017db8:	0801b1c8 	.word	0x0801b1c8
 8017dbc:	0801b1c8 	.word	0x0801b1c8
 8017dc0:	0801b1cc 	.word	0x0801b1cc

08017dc4 <__retarget_lock_init_recursive>:
 8017dc4:	4770      	bx	lr

08017dc6 <__retarget_lock_acquire_recursive>:
 8017dc6:	4770      	bx	lr

08017dc8 <__retarget_lock_release_recursive>:
 8017dc8:	4770      	bx	lr
	...

08017dcc <malloc>:
 8017dcc:	4b02      	ldr	r3, [pc, #8]	; (8017dd8 <malloc+0xc>)
 8017dce:	4601      	mov	r1, r0
 8017dd0:	6818      	ldr	r0, [r3, #0]
 8017dd2:	f000 b895 	b.w	8017f00 <_malloc_r>
 8017dd6:	bf00      	nop
 8017dd8:	2000025c 	.word	0x2000025c

08017ddc <free>:
 8017ddc:	4b02      	ldr	r3, [pc, #8]	; (8017de8 <free+0xc>)
 8017dde:	4601      	mov	r1, r0
 8017de0:	6818      	ldr	r0, [r3, #0]
 8017de2:	f000 b841 	b.w	8017e68 <_free_r>
 8017de6:	bf00      	nop
 8017de8:	2000025c 	.word	0x2000025c

08017dec <memcpy>:
 8017dec:	440a      	add	r2, r1
 8017dee:	4291      	cmp	r1, r2
 8017df0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017df4:	d100      	bne.n	8017df8 <memcpy+0xc>
 8017df6:	4770      	bx	lr
 8017df8:	b510      	push	{r4, lr}
 8017dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017dfe:	4291      	cmp	r1, r2
 8017e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e04:	d1f9      	bne.n	8017dfa <memcpy+0xe>
 8017e06:	bd10      	pop	{r4, pc}

08017e08 <memmove>:
 8017e08:	4288      	cmp	r0, r1
 8017e0a:	b510      	push	{r4, lr}
 8017e0c:	eb01 0402 	add.w	r4, r1, r2
 8017e10:	d902      	bls.n	8017e18 <memmove+0x10>
 8017e12:	4284      	cmp	r4, r0
 8017e14:	4623      	mov	r3, r4
 8017e16:	d807      	bhi.n	8017e28 <memmove+0x20>
 8017e18:	1e43      	subs	r3, r0, #1
 8017e1a:	42a1      	cmp	r1, r4
 8017e1c:	d008      	beq.n	8017e30 <memmove+0x28>
 8017e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e26:	e7f8      	b.n	8017e1a <memmove+0x12>
 8017e28:	4601      	mov	r1, r0
 8017e2a:	4402      	add	r2, r0
 8017e2c:	428a      	cmp	r2, r1
 8017e2e:	d100      	bne.n	8017e32 <memmove+0x2a>
 8017e30:	bd10      	pop	{r4, pc}
 8017e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e3a:	e7f7      	b.n	8017e2c <memmove+0x24>

08017e3c <memset>:
 8017e3c:	4603      	mov	r3, r0
 8017e3e:	4402      	add	r2, r0
 8017e40:	4293      	cmp	r3, r2
 8017e42:	d100      	bne.n	8017e46 <memset+0xa>
 8017e44:	4770      	bx	lr
 8017e46:	f803 1b01 	strb.w	r1, [r3], #1
 8017e4a:	e7f9      	b.n	8017e40 <memset+0x4>

08017e4c <_calloc_r>:
 8017e4c:	b538      	push	{r3, r4, r5, lr}
 8017e4e:	fb02 f501 	mul.w	r5, r2, r1
 8017e52:	4629      	mov	r1, r5
 8017e54:	f000 f854 	bl	8017f00 <_malloc_r>
 8017e58:	4604      	mov	r4, r0
 8017e5a:	b118      	cbz	r0, 8017e64 <_calloc_r+0x18>
 8017e5c:	462a      	mov	r2, r5
 8017e5e:	2100      	movs	r1, #0
 8017e60:	f7ff ffec 	bl	8017e3c <memset>
 8017e64:	4620      	mov	r0, r4
 8017e66:	bd38      	pop	{r3, r4, r5, pc}

08017e68 <_free_r>:
 8017e68:	b538      	push	{r3, r4, r5, lr}
 8017e6a:	4605      	mov	r5, r0
 8017e6c:	2900      	cmp	r1, #0
 8017e6e:	d043      	beq.n	8017ef8 <_free_r+0x90>
 8017e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e74:	1f0c      	subs	r4, r1, #4
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	bfb8      	it	lt
 8017e7a:	18e4      	addlt	r4, r4, r3
 8017e7c:	f000 fdb0 	bl	80189e0 <__malloc_lock>
 8017e80:	4a1e      	ldr	r2, [pc, #120]	; (8017efc <_free_r+0x94>)
 8017e82:	6813      	ldr	r3, [r2, #0]
 8017e84:	4610      	mov	r0, r2
 8017e86:	b933      	cbnz	r3, 8017e96 <_free_r+0x2e>
 8017e88:	6063      	str	r3, [r4, #4]
 8017e8a:	6014      	str	r4, [r2, #0]
 8017e8c:	4628      	mov	r0, r5
 8017e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e92:	f000 bdab 	b.w	80189ec <__malloc_unlock>
 8017e96:	42a3      	cmp	r3, r4
 8017e98:	d90a      	bls.n	8017eb0 <_free_r+0x48>
 8017e9a:	6821      	ldr	r1, [r4, #0]
 8017e9c:	1862      	adds	r2, r4, r1
 8017e9e:	4293      	cmp	r3, r2
 8017ea0:	bf01      	itttt	eq
 8017ea2:	681a      	ldreq	r2, [r3, #0]
 8017ea4:	685b      	ldreq	r3, [r3, #4]
 8017ea6:	1852      	addeq	r2, r2, r1
 8017ea8:	6022      	streq	r2, [r4, #0]
 8017eaa:	6063      	str	r3, [r4, #4]
 8017eac:	6004      	str	r4, [r0, #0]
 8017eae:	e7ed      	b.n	8017e8c <_free_r+0x24>
 8017eb0:	461a      	mov	r2, r3
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	b10b      	cbz	r3, 8017eba <_free_r+0x52>
 8017eb6:	42a3      	cmp	r3, r4
 8017eb8:	d9fa      	bls.n	8017eb0 <_free_r+0x48>
 8017eba:	6811      	ldr	r1, [r2, #0]
 8017ebc:	1850      	adds	r0, r2, r1
 8017ebe:	42a0      	cmp	r0, r4
 8017ec0:	d10b      	bne.n	8017eda <_free_r+0x72>
 8017ec2:	6820      	ldr	r0, [r4, #0]
 8017ec4:	4401      	add	r1, r0
 8017ec6:	1850      	adds	r0, r2, r1
 8017ec8:	4283      	cmp	r3, r0
 8017eca:	6011      	str	r1, [r2, #0]
 8017ecc:	d1de      	bne.n	8017e8c <_free_r+0x24>
 8017ece:	6818      	ldr	r0, [r3, #0]
 8017ed0:	685b      	ldr	r3, [r3, #4]
 8017ed2:	4401      	add	r1, r0
 8017ed4:	6011      	str	r1, [r2, #0]
 8017ed6:	6053      	str	r3, [r2, #4]
 8017ed8:	e7d8      	b.n	8017e8c <_free_r+0x24>
 8017eda:	d902      	bls.n	8017ee2 <_free_r+0x7a>
 8017edc:	230c      	movs	r3, #12
 8017ede:	602b      	str	r3, [r5, #0]
 8017ee0:	e7d4      	b.n	8017e8c <_free_r+0x24>
 8017ee2:	6820      	ldr	r0, [r4, #0]
 8017ee4:	1821      	adds	r1, r4, r0
 8017ee6:	428b      	cmp	r3, r1
 8017ee8:	bf01      	itttt	eq
 8017eea:	6819      	ldreq	r1, [r3, #0]
 8017eec:	685b      	ldreq	r3, [r3, #4]
 8017eee:	1809      	addeq	r1, r1, r0
 8017ef0:	6021      	streq	r1, [r4, #0]
 8017ef2:	6063      	str	r3, [r4, #4]
 8017ef4:	6054      	str	r4, [r2, #4]
 8017ef6:	e7c9      	b.n	8017e8c <_free_r+0x24>
 8017ef8:	bd38      	pop	{r3, r4, r5, pc}
 8017efa:	bf00      	nop
 8017efc:	2000685c 	.word	0x2000685c

08017f00 <_malloc_r>:
 8017f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f02:	1ccd      	adds	r5, r1, #3
 8017f04:	f025 0503 	bic.w	r5, r5, #3
 8017f08:	3508      	adds	r5, #8
 8017f0a:	2d0c      	cmp	r5, #12
 8017f0c:	bf38      	it	cc
 8017f0e:	250c      	movcc	r5, #12
 8017f10:	2d00      	cmp	r5, #0
 8017f12:	4606      	mov	r6, r0
 8017f14:	db01      	blt.n	8017f1a <_malloc_r+0x1a>
 8017f16:	42a9      	cmp	r1, r5
 8017f18:	d903      	bls.n	8017f22 <_malloc_r+0x22>
 8017f1a:	230c      	movs	r3, #12
 8017f1c:	6033      	str	r3, [r6, #0]
 8017f1e:	2000      	movs	r0, #0
 8017f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f22:	f000 fd5d 	bl	80189e0 <__malloc_lock>
 8017f26:	4921      	ldr	r1, [pc, #132]	; (8017fac <_malloc_r+0xac>)
 8017f28:	680a      	ldr	r2, [r1, #0]
 8017f2a:	4614      	mov	r4, r2
 8017f2c:	b99c      	cbnz	r4, 8017f56 <_malloc_r+0x56>
 8017f2e:	4f20      	ldr	r7, [pc, #128]	; (8017fb0 <_malloc_r+0xb0>)
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	b923      	cbnz	r3, 8017f3e <_malloc_r+0x3e>
 8017f34:	4621      	mov	r1, r4
 8017f36:	4630      	mov	r0, r6
 8017f38:	f000 f8ca 	bl	80180d0 <_sbrk_r>
 8017f3c:	6038      	str	r0, [r7, #0]
 8017f3e:	4629      	mov	r1, r5
 8017f40:	4630      	mov	r0, r6
 8017f42:	f000 f8c5 	bl	80180d0 <_sbrk_r>
 8017f46:	1c43      	adds	r3, r0, #1
 8017f48:	d123      	bne.n	8017f92 <_malloc_r+0x92>
 8017f4a:	230c      	movs	r3, #12
 8017f4c:	4630      	mov	r0, r6
 8017f4e:	6033      	str	r3, [r6, #0]
 8017f50:	f000 fd4c 	bl	80189ec <__malloc_unlock>
 8017f54:	e7e3      	b.n	8017f1e <_malloc_r+0x1e>
 8017f56:	6823      	ldr	r3, [r4, #0]
 8017f58:	1b5b      	subs	r3, r3, r5
 8017f5a:	d417      	bmi.n	8017f8c <_malloc_r+0x8c>
 8017f5c:	2b0b      	cmp	r3, #11
 8017f5e:	d903      	bls.n	8017f68 <_malloc_r+0x68>
 8017f60:	6023      	str	r3, [r4, #0]
 8017f62:	441c      	add	r4, r3
 8017f64:	6025      	str	r5, [r4, #0]
 8017f66:	e004      	b.n	8017f72 <_malloc_r+0x72>
 8017f68:	6863      	ldr	r3, [r4, #4]
 8017f6a:	42a2      	cmp	r2, r4
 8017f6c:	bf0c      	ite	eq
 8017f6e:	600b      	streq	r3, [r1, #0]
 8017f70:	6053      	strne	r3, [r2, #4]
 8017f72:	4630      	mov	r0, r6
 8017f74:	f000 fd3a 	bl	80189ec <__malloc_unlock>
 8017f78:	f104 000b 	add.w	r0, r4, #11
 8017f7c:	1d23      	adds	r3, r4, #4
 8017f7e:	f020 0007 	bic.w	r0, r0, #7
 8017f82:	1ac2      	subs	r2, r0, r3
 8017f84:	d0cc      	beq.n	8017f20 <_malloc_r+0x20>
 8017f86:	1a1b      	subs	r3, r3, r0
 8017f88:	50a3      	str	r3, [r4, r2]
 8017f8a:	e7c9      	b.n	8017f20 <_malloc_r+0x20>
 8017f8c:	4622      	mov	r2, r4
 8017f8e:	6864      	ldr	r4, [r4, #4]
 8017f90:	e7cc      	b.n	8017f2c <_malloc_r+0x2c>
 8017f92:	1cc4      	adds	r4, r0, #3
 8017f94:	f024 0403 	bic.w	r4, r4, #3
 8017f98:	42a0      	cmp	r0, r4
 8017f9a:	d0e3      	beq.n	8017f64 <_malloc_r+0x64>
 8017f9c:	1a21      	subs	r1, r4, r0
 8017f9e:	4630      	mov	r0, r6
 8017fa0:	f000 f896 	bl	80180d0 <_sbrk_r>
 8017fa4:	3001      	adds	r0, #1
 8017fa6:	d1dd      	bne.n	8017f64 <_malloc_r+0x64>
 8017fa8:	e7cf      	b.n	8017f4a <_malloc_r+0x4a>
 8017faa:	bf00      	nop
 8017fac:	2000685c 	.word	0x2000685c
 8017fb0:	20006860 	.word	0x20006860

08017fb4 <iprintf>:
 8017fb4:	b40f      	push	{r0, r1, r2, r3}
 8017fb6:	4b0a      	ldr	r3, [pc, #40]	; (8017fe0 <iprintf+0x2c>)
 8017fb8:	b513      	push	{r0, r1, r4, lr}
 8017fba:	681c      	ldr	r4, [r3, #0]
 8017fbc:	b124      	cbz	r4, 8017fc8 <iprintf+0x14>
 8017fbe:	69a3      	ldr	r3, [r4, #24]
 8017fc0:	b913      	cbnz	r3, 8017fc8 <iprintf+0x14>
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f000 fbf8 	bl	80187b8 <__sinit>
 8017fc8:	ab05      	add	r3, sp, #20
 8017fca:	4620      	mov	r0, r4
 8017fcc:	9a04      	ldr	r2, [sp, #16]
 8017fce:	68a1      	ldr	r1, [r4, #8]
 8017fd0:	9301      	str	r3, [sp, #4]
 8017fd2:	f000 febb 	bl	8018d4c <_vfiprintf_r>
 8017fd6:	b002      	add	sp, #8
 8017fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fdc:	b004      	add	sp, #16
 8017fde:	4770      	bx	lr
 8017fe0:	2000025c 	.word	0x2000025c

08017fe4 <srand>:
 8017fe4:	b538      	push	{r3, r4, r5, lr}
 8017fe6:	4b10      	ldr	r3, [pc, #64]	; (8018028 <srand+0x44>)
 8017fe8:	4604      	mov	r4, r0
 8017fea:	681d      	ldr	r5, [r3, #0]
 8017fec:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8017fee:	b9b3      	cbnz	r3, 801801e <srand+0x3a>
 8017ff0:	2018      	movs	r0, #24
 8017ff2:	f7ff feeb 	bl	8017dcc <malloc>
 8017ff6:	4602      	mov	r2, r0
 8017ff8:	63a8      	str	r0, [r5, #56]	; 0x38
 8017ffa:	b920      	cbnz	r0, 8018006 <srand+0x22>
 8017ffc:	2142      	movs	r1, #66	; 0x42
 8017ffe:	4b0b      	ldr	r3, [pc, #44]	; (801802c <srand+0x48>)
 8018000:	480b      	ldr	r0, [pc, #44]	; (8018030 <srand+0x4c>)
 8018002:	f000 fa95 	bl	8018530 <__assert_func>
 8018006:	490b      	ldr	r1, [pc, #44]	; (8018034 <srand+0x50>)
 8018008:	4b0b      	ldr	r3, [pc, #44]	; (8018038 <srand+0x54>)
 801800a:	e9c0 1300 	strd	r1, r3, [r0]
 801800e:	4b0b      	ldr	r3, [pc, #44]	; (801803c <srand+0x58>)
 8018010:	2100      	movs	r1, #0
 8018012:	6083      	str	r3, [r0, #8]
 8018014:	230b      	movs	r3, #11
 8018016:	8183      	strh	r3, [r0, #12]
 8018018:	2001      	movs	r0, #1
 801801a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801801e:	2200      	movs	r2, #0
 8018020:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018022:	611c      	str	r4, [r3, #16]
 8018024:	615a      	str	r2, [r3, #20]
 8018026:	bd38      	pop	{r3, r4, r5, pc}
 8018028:	2000025c 	.word	0x2000025c
 801802c:	0801b078 	.word	0x0801b078
 8018030:	0801b08f 	.word	0x0801b08f
 8018034:	abcd330e 	.word	0xabcd330e
 8018038:	e66d1234 	.word	0xe66d1234
 801803c:	0005deec 	.word	0x0005deec

08018040 <rand>:
 8018040:	4b17      	ldr	r3, [pc, #92]	; (80180a0 <rand+0x60>)
 8018042:	b510      	push	{r4, lr}
 8018044:	681c      	ldr	r4, [r3, #0]
 8018046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018048:	b9b3      	cbnz	r3, 8018078 <rand+0x38>
 801804a:	2018      	movs	r0, #24
 801804c:	f7ff febe 	bl	8017dcc <malloc>
 8018050:	4602      	mov	r2, r0
 8018052:	63a0      	str	r0, [r4, #56]	; 0x38
 8018054:	b920      	cbnz	r0, 8018060 <rand+0x20>
 8018056:	214e      	movs	r1, #78	; 0x4e
 8018058:	4b12      	ldr	r3, [pc, #72]	; (80180a4 <rand+0x64>)
 801805a:	4813      	ldr	r0, [pc, #76]	; (80180a8 <rand+0x68>)
 801805c:	f000 fa68 	bl	8018530 <__assert_func>
 8018060:	4912      	ldr	r1, [pc, #72]	; (80180ac <rand+0x6c>)
 8018062:	4b13      	ldr	r3, [pc, #76]	; (80180b0 <rand+0x70>)
 8018064:	e9c0 1300 	strd	r1, r3, [r0]
 8018068:	4b12      	ldr	r3, [pc, #72]	; (80180b4 <rand+0x74>)
 801806a:	2100      	movs	r1, #0
 801806c:	6083      	str	r3, [r0, #8]
 801806e:	230b      	movs	r3, #11
 8018070:	8183      	strh	r3, [r0, #12]
 8018072:	2001      	movs	r0, #1
 8018074:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018078:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801807a:	480f      	ldr	r0, [pc, #60]	; (80180b8 <rand+0x78>)
 801807c:	690a      	ldr	r2, [r1, #16]
 801807e:	694b      	ldr	r3, [r1, #20]
 8018080:	4350      	muls	r0, r2
 8018082:	4c0e      	ldr	r4, [pc, #56]	; (80180bc <rand+0x7c>)
 8018084:	fb04 0003 	mla	r0, r4, r3, r0
 8018088:	fba2 3404 	umull	r3, r4, r2, r4
 801808c:	1c5a      	adds	r2, r3, #1
 801808e:	4404      	add	r4, r0
 8018090:	f144 0000 	adc.w	r0, r4, #0
 8018094:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018098:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801809c:	bd10      	pop	{r4, pc}
 801809e:	bf00      	nop
 80180a0:	2000025c 	.word	0x2000025c
 80180a4:	0801b078 	.word	0x0801b078
 80180a8:	0801b08f 	.word	0x0801b08f
 80180ac:	abcd330e 	.word	0xabcd330e
 80180b0:	e66d1234 	.word	0xe66d1234
 80180b4:	0005deec 	.word	0x0005deec
 80180b8:	5851f42d 	.word	0x5851f42d
 80180bc:	4c957f2d 	.word	0x4c957f2d

080180c0 <realloc>:
 80180c0:	4b02      	ldr	r3, [pc, #8]	; (80180cc <realloc+0xc>)
 80180c2:	460a      	mov	r2, r1
 80180c4:	4601      	mov	r1, r0
 80180c6:	6818      	ldr	r0, [r3, #0]
 80180c8:	f000 bc96 	b.w	80189f8 <_realloc_r>
 80180cc:	2000025c 	.word	0x2000025c

080180d0 <_sbrk_r>:
 80180d0:	b538      	push	{r3, r4, r5, lr}
 80180d2:	2300      	movs	r3, #0
 80180d4:	4d05      	ldr	r5, [pc, #20]	; (80180ec <_sbrk_r+0x1c>)
 80180d6:	4604      	mov	r4, r0
 80180d8:	4608      	mov	r0, r1
 80180da:	602b      	str	r3, [r5, #0]
 80180dc:	f7ea ff0e 	bl	8002efc <_sbrk>
 80180e0:	1c43      	adds	r3, r0, #1
 80180e2:	d102      	bne.n	80180ea <_sbrk_r+0x1a>
 80180e4:	682b      	ldr	r3, [r5, #0]
 80180e6:	b103      	cbz	r3, 80180ea <_sbrk_r+0x1a>
 80180e8:	6023      	str	r3, [r4, #0]
 80180ea:	bd38      	pop	{r3, r4, r5, pc}
 80180ec:	2000d6a4 	.word	0x2000d6a4

080180f0 <sniprintf>:
 80180f0:	b40c      	push	{r2, r3}
 80180f2:	b530      	push	{r4, r5, lr}
 80180f4:	4b17      	ldr	r3, [pc, #92]	; (8018154 <sniprintf+0x64>)
 80180f6:	1e0c      	subs	r4, r1, #0
 80180f8:	681d      	ldr	r5, [r3, #0]
 80180fa:	b09d      	sub	sp, #116	; 0x74
 80180fc:	da08      	bge.n	8018110 <sniprintf+0x20>
 80180fe:	238b      	movs	r3, #139	; 0x8b
 8018100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018104:	602b      	str	r3, [r5, #0]
 8018106:	b01d      	add	sp, #116	; 0x74
 8018108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801810c:	b002      	add	sp, #8
 801810e:	4770      	bx	lr
 8018110:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018114:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018118:	bf0c      	ite	eq
 801811a:	4623      	moveq	r3, r4
 801811c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018120:	9304      	str	r3, [sp, #16]
 8018122:	9307      	str	r3, [sp, #28]
 8018124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018128:	9002      	str	r0, [sp, #8]
 801812a:	9006      	str	r0, [sp, #24]
 801812c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018130:	4628      	mov	r0, r5
 8018132:	ab21      	add	r3, sp, #132	; 0x84
 8018134:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018136:	a902      	add	r1, sp, #8
 8018138:	9301      	str	r3, [sp, #4]
 801813a:	f000 fcdf 	bl	8018afc <_svfiprintf_r>
 801813e:	1c43      	adds	r3, r0, #1
 8018140:	bfbc      	itt	lt
 8018142:	238b      	movlt	r3, #139	; 0x8b
 8018144:	602b      	strlt	r3, [r5, #0]
 8018146:	2c00      	cmp	r4, #0
 8018148:	d0dd      	beq.n	8018106 <sniprintf+0x16>
 801814a:	2200      	movs	r2, #0
 801814c:	9b02      	ldr	r3, [sp, #8]
 801814e:	701a      	strb	r2, [r3, #0]
 8018150:	e7d9      	b.n	8018106 <sniprintf+0x16>
 8018152:	bf00      	nop
 8018154:	2000025c 	.word	0x2000025c

08018158 <siprintf>:
 8018158:	b40e      	push	{r1, r2, r3}
 801815a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801815e:	b500      	push	{lr}
 8018160:	b09c      	sub	sp, #112	; 0x70
 8018162:	ab1d      	add	r3, sp, #116	; 0x74
 8018164:	9002      	str	r0, [sp, #8]
 8018166:	9006      	str	r0, [sp, #24]
 8018168:	9107      	str	r1, [sp, #28]
 801816a:	9104      	str	r1, [sp, #16]
 801816c:	4808      	ldr	r0, [pc, #32]	; (8018190 <siprintf+0x38>)
 801816e:	4909      	ldr	r1, [pc, #36]	; (8018194 <siprintf+0x3c>)
 8018170:	f853 2b04 	ldr.w	r2, [r3], #4
 8018174:	9105      	str	r1, [sp, #20]
 8018176:	6800      	ldr	r0, [r0, #0]
 8018178:	a902      	add	r1, sp, #8
 801817a:	9301      	str	r3, [sp, #4]
 801817c:	f000 fcbe 	bl	8018afc <_svfiprintf_r>
 8018180:	2200      	movs	r2, #0
 8018182:	9b02      	ldr	r3, [sp, #8]
 8018184:	701a      	strb	r2, [r3, #0]
 8018186:	b01c      	add	sp, #112	; 0x70
 8018188:	f85d eb04 	ldr.w	lr, [sp], #4
 801818c:	b003      	add	sp, #12
 801818e:	4770      	bx	lr
 8018190:	2000025c 	.word	0x2000025c
 8018194:	ffff0208 	.word	0xffff0208

08018198 <strchr>:
 8018198:	4603      	mov	r3, r0
 801819a:	b2c9      	uxtb	r1, r1
 801819c:	4618      	mov	r0, r3
 801819e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181a2:	b112      	cbz	r2, 80181aa <strchr+0x12>
 80181a4:	428a      	cmp	r2, r1
 80181a6:	d1f9      	bne.n	801819c <strchr+0x4>
 80181a8:	4770      	bx	lr
 80181aa:	2900      	cmp	r1, #0
 80181ac:	bf18      	it	ne
 80181ae:	2000      	movne	r0, #0
 80181b0:	4770      	bx	lr

080181b2 <strcpy>:
 80181b2:	4603      	mov	r3, r0
 80181b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181b8:	f803 2b01 	strb.w	r2, [r3], #1
 80181bc:	2a00      	cmp	r2, #0
 80181be:	d1f9      	bne.n	80181b4 <strcpy+0x2>
 80181c0:	4770      	bx	lr

080181c2 <strncmp>:
 80181c2:	b510      	push	{r4, lr}
 80181c4:	b16a      	cbz	r2, 80181e2 <strncmp+0x20>
 80181c6:	3901      	subs	r1, #1
 80181c8:	1884      	adds	r4, r0, r2
 80181ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80181ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80181d2:	4293      	cmp	r3, r2
 80181d4:	d103      	bne.n	80181de <strncmp+0x1c>
 80181d6:	42a0      	cmp	r0, r4
 80181d8:	d001      	beq.n	80181de <strncmp+0x1c>
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d1f5      	bne.n	80181ca <strncmp+0x8>
 80181de:	1a98      	subs	r0, r3, r2
 80181e0:	bd10      	pop	{r4, pc}
 80181e2:	4610      	mov	r0, r2
 80181e4:	e7fc      	b.n	80181e0 <strncmp+0x1e>

080181e6 <strnlen>:
 80181e6:	4602      	mov	r2, r0
 80181e8:	b510      	push	{r4, lr}
 80181ea:	4401      	add	r1, r0
 80181ec:	428a      	cmp	r2, r1
 80181ee:	4613      	mov	r3, r2
 80181f0:	d101      	bne.n	80181f6 <strnlen+0x10>
 80181f2:	1a18      	subs	r0, r3, r0
 80181f4:	bd10      	pop	{r4, pc}
 80181f6:	781c      	ldrb	r4, [r3, #0]
 80181f8:	3201      	adds	r2, #1
 80181fa:	2c00      	cmp	r4, #0
 80181fc:	d1f6      	bne.n	80181ec <strnlen+0x6>
 80181fe:	e7f8      	b.n	80181f2 <strnlen+0xc>

08018200 <strstr>:
 8018200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018202:	780c      	ldrb	r4, [r1, #0]
 8018204:	b164      	cbz	r4, 8018220 <strstr+0x20>
 8018206:	4603      	mov	r3, r0
 8018208:	781a      	ldrb	r2, [r3, #0]
 801820a:	4618      	mov	r0, r3
 801820c:	1c5e      	adds	r6, r3, #1
 801820e:	b90a      	cbnz	r2, 8018214 <strstr+0x14>
 8018210:	4610      	mov	r0, r2
 8018212:	e005      	b.n	8018220 <strstr+0x20>
 8018214:	4294      	cmp	r4, r2
 8018216:	d108      	bne.n	801822a <strstr+0x2a>
 8018218:	460d      	mov	r5, r1
 801821a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801821e:	b902      	cbnz	r2, 8018222 <strstr+0x22>
 8018220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018222:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8018226:	4297      	cmp	r7, r2
 8018228:	d0f7      	beq.n	801821a <strstr+0x1a>
 801822a:	4633      	mov	r3, r6
 801822c:	e7ec      	b.n	8018208 <strstr+0x8>
	...

08018230 <_strtoul_l.isra.0>:
 8018230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018234:	468c      	mov	ip, r1
 8018236:	4686      	mov	lr, r0
 8018238:	4e3a      	ldr	r6, [pc, #232]	; (8018324 <_strtoul_l.isra.0+0xf4>)
 801823a:	4660      	mov	r0, ip
 801823c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8018240:	5da5      	ldrb	r5, [r4, r6]
 8018242:	f015 0508 	ands.w	r5, r5, #8
 8018246:	d1f8      	bne.n	801823a <_strtoul_l.isra.0+0xa>
 8018248:	2c2d      	cmp	r4, #45	; 0x2d
 801824a:	d134      	bne.n	80182b6 <_strtoul_l.isra.0+0x86>
 801824c:	f04f 0801 	mov.w	r8, #1
 8018250:	f89c 4000 	ldrb.w	r4, [ip]
 8018254:	f100 0c02 	add.w	ip, r0, #2
 8018258:	2b00      	cmp	r3, #0
 801825a:	d05e      	beq.n	801831a <_strtoul_l.isra.0+0xea>
 801825c:	2b10      	cmp	r3, #16
 801825e:	d10c      	bne.n	801827a <_strtoul_l.isra.0+0x4a>
 8018260:	2c30      	cmp	r4, #48	; 0x30
 8018262:	d10a      	bne.n	801827a <_strtoul_l.isra.0+0x4a>
 8018264:	f89c 0000 	ldrb.w	r0, [ip]
 8018268:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801826c:	2858      	cmp	r0, #88	; 0x58
 801826e:	d14f      	bne.n	8018310 <_strtoul_l.isra.0+0xe0>
 8018270:	2310      	movs	r3, #16
 8018272:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8018276:	f10c 0c02 	add.w	ip, ip, #2
 801827a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801827e:	fbb7 f7f3 	udiv	r7, r7, r3
 8018282:	2500      	movs	r5, #0
 8018284:	fb03 f907 	mul.w	r9, r3, r7
 8018288:	4628      	mov	r0, r5
 801828a:	ea6f 0909 	mvn.w	r9, r9
 801828e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8018292:	2e09      	cmp	r6, #9
 8018294:	d818      	bhi.n	80182c8 <_strtoul_l.isra.0+0x98>
 8018296:	4634      	mov	r4, r6
 8018298:	42a3      	cmp	r3, r4
 801829a:	dd24      	ble.n	80182e6 <_strtoul_l.isra.0+0xb6>
 801829c:	2d00      	cmp	r5, #0
 801829e:	db1f      	blt.n	80182e0 <_strtoul_l.isra.0+0xb0>
 80182a0:	4287      	cmp	r7, r0
 80182a2:	d31d      	bcc.n	80182e0 <_strtoul_l.isra.0+0xb0>
 80182a4:	d101      	bne.n	80182aa <_strtoul_l.isra.0+0x7a>
 80182a6:	45a1      	cmp	r9, r4
 80182a8:	db1a      	blt.n	80182e0 <_strtoul_l.isra.0+0xb0>
 80182aa:	2501      	movs	r5, #1
 80182ac:	fb00 4003 	mla	r0, r0, r3, r4
 80182b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80182b4:	e7eb      	b.n	801828e <_strtoul_l.isra.0+0x5e>
 80182b6:	2c2b      	cmp	r4, #43	; 0x2b
 80182b8:	bf08      	it	eq
 80182ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80182be:	46a8      	mov	r8, r5
 80182c0:	bf08      	it	eq
 80182c2:	f100 0c02 	addeq.w	ip, r0, #2
 80182c6:	e7c7      	b.n	8018258 <_strtoul_l.isra.0+0x28>
 80182c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80182cc:	2e19      	cmp	r6, #25
 80182ce:	d801      	bhi.n	80182d4 <_strtoul_l.isra.0+0xa4>
 80182d0:	3c37      	subs	r4, #55	; 0x37
 80182d2:	e7e1      	b.n	8018298 <_strtoul_l.isra.0+0x68>
 80182d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80182d8:	2e19      	cmp	r6, #25
 80182da:	d804      	bhi.n	80182e6 <_strtoul_l.isra.0+0xb6>
 80182dc:	3c57      	subs	r4, #87	; 0x57
 80182de:	e7db      	b.n	8018298 <_strtoul_l.isra.0+0x68>
 80182e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80182e4:	e7e4      	b.n	80182b0 <_strtoul_l.isra.0+0x80>
 80182e6:	2d00      	cmp	r5, #0
 80182e8:	da07      	bge.n	80182fa <_strtoul_l.isra.0+0xca>
 80182ea:	2322      	movs	r3, #34	; 0x22
 80182ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182f0:	f8ce 3000 	str.w	r3, [lr]
 80182f4:	b942      	cbnz	r2, 8018308 <_strtoul_l.isra.0+0xd8>
 80182f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182fa:	f1b8 0f00 	cmp.w	r8, #0
 80182fe:	d000      	beq.n	8018302 <_strtoul_l.isra.0+0xd2>
 8018300:	4240      	negs	r0, r0
 8018302:	2a00      	cmp	r2, #0
 8018304:	d0f7      	beq.n	80182f6 <_strtoul_l.isra.0+0xc6>
 8018306:	b10d      	cbz	r5, 801830c <_strtoul_l.isra.0+0xdc>
 8018308:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 801830c:	6011      	str	r1, [r2, #0]
 801830e:	e7f2      	b.n	80182f6 <_strtoul_l.isra.0+0xc6>
 8018310:	2430      	movs	r4, #48	; 0x30
 8018312:	2b00      	cmp	r3, #0
 8018314:	d1b1      	bne.n	801827a <_strtoul_l.isra.0+0x4a>
 8018316:	2308      	movs	r3, #8
 8018318:	e7af      	b.n	801827a <_strtoul_l.isra.0+0x4a>
 801831a:	2c30      	cmp	r4, #48	; 0x30
 801831c:	d0a2      	beq.n	8018264 <_strtoul_l.isra.0+0x34>
 801831e:	230a      	movs	r3, #10
 8018320:	e7ab      	b.n	801827a <_strtoul_l.isra.0+0x4a>
 8018322:	bf00      	nop
 8018324:	0801af71 	.word	0x0801af71

08018328 <strtoul>:
 8018328:	4613      	mov	r3, r2
 801832a:	460a      	mov	r2, r1
 801832c:	4601      	mov	r1, r0
 801832e:	4802      	ldr	r0, [pc, #8]	; (8018338 <strtoul+0x10>)
 8018330:	6800      	ldr	r0, [r0, #0]
 8018332:	f7ff bf7d 	b.w	8018230 <_strtoul_l.isra.0>
 8018336:	bf00      	nop
 8018338:	2000025c 	.word	0x2000025c

0801833c <_vsniprintf_r>:
 801833c:	b530      	push	{r4, r5, lr}
 801833e:	1e14      	subs	r4, r2, #0
 8018340:	4605      	mov	r5, r0
 8018342:	b09b      	sub	sp, #108	; 0x6c
 8018344:	4618      	mov	r0, r3
 8018346:	da05      	bge.n	8018354 <_vsniprintf_r+0x18>
 8018348:	238b      	movs	r3, #139	; 0x8b
 801834a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801834e:	602b      	str	r3, [r5, #0]
 8018350:	b01b      	add	sp, #108	; 0x6c
 8018352:	bd30      	pop	{r4, r5, pc}
 8018354:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018358:	f8ad 300c 	strh.w	r3, [sp, #12]
 801835c:	bf0c      	ite	eq
 801835e:	4623      	moveq	r3, r4
 8018360:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018364:	9302      	str	r3, [sp, #8]
 8018366:	9305      	str	r3, [sp, #20]
 8018368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801836c:	4602      	mov	r2, r0
 801836e:	9100      	str	r1, [sp, #0]
 8018370:	9104      	str	r1, [sp, #16]
 8018372:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018376:	4669      	mov	r1, sp
 8018378:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801837a:	4628      	mov	r0, r5
 801837c:	f000 fbbe 	bl	8018afc <_svfiprintf_r>
 8018380:	1c43      	adds	r3, r0, #1
 8018382:	bfbc      	itt	lt
 8018384:	238b      	movlt	r3, #139	; 0x8b
 8018386:	602b      	strlt	r3, [r5, #0]
 8018388:	2c00      	cmp	r4, #0
 801838a:	d0e1      	beq.n	8018350 <_vsniprintf_r+0x14>
 801838c:	2200      	movs	r2, #0
 801838e:	9b00      	ldr	r3, [sp, #0]
 8018390:	701a      	strb	r2, [r3, #0]
 8018392:	e7dd      	b.n	8018350 <_vsniprintf_r+0x14>

08018394 <vsniprintf>:
 8018394:	b507      	push	{r0, r1, r2, lr}
 8018396:	9300      	str	r3, [sp, #0]
 8018398:	4613      	mov	r3, r2
 801839a:	460a      	mov	r2, r1
 801839c:	4601      	mov	r1, r0
 801839e:	4803      	ldr	r0, [pc, #12]	; (80183ac <vsniprintf+0x18>)
 80183a0:	6800      	ldr	r0, [r0, #0]
 80183a2:	f7ff ffcb 	bl	801833c <_vsniprintf_r>
 80183a6:	b003      	add	sp, #12
 80183a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80183ac:	2000025c 	.word	0x2000025c

080183b0 <__swbuf_r>:
 80183b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183b2:	460e      	mov	r6, r1
 80183b4:	4614      	mov	r4, r2
 80183b6:	4605      	mov	r5, r0
 80183b8:	b118      	cbz	r0, 80183c2 <__swbuf_r+0x12>
 80183ba:	6983      	ldr	r3, [r0, #24]
 80183bc:	b90b      	cbnz	r3, 80183c2 <__swbuf_r+0x12>
 80183be:	f000 f9fb 	bl	80187b8 <__sinit>
 80183c2:	4b21      	ldr	r3, [pc, #132]	; (8018448 <__swbuf_r+0x98>)
 80183c4:	429c      	cmp	r4, r3
 80183c6:	d12b      	bne.n	8018420 <__swbuf_r+0x70>
 80183c8:	686c      	ldr	r4, [r5, #4]
 80183ca:	69a3      	ldr	r3, [r4, #24]
 80183cc:	60a3      	str	r3, [r4, #8]
 80183ce:	89a3      	ldrh	r3, [r4, #12]
 80183d0:	071a      	lsls	r2, r3, #28
 80183d2:	d52f      	bpl.n	8018434 <__swbuf_r+0x84>
 80183d4:	6923      	ldr	r3, [r4, #16]
 80183d6:	b36b      	cbz	r3, 8018434 <__swbuf_r+0x84>
 80183d8:	6923      	ldr	r3, [r4, #16]
 80183da:	6820      	ldr	r0, [r4, #0]
 80183dc:	b2f6      	uxtb	r6, r6
 80183de:	1ac0      	subs	r0, r0, r3
 80183e0:	6963      	ldr	r3, [r4, #20]
 80183e2:	4637      	mov	r7, r6
 80183e4:	4283      	cmp	r3, r0
 80183e6:	dc04      	bgt.n	80183f2 <__swbuf_r+0x42>
 80183e8:	4621      	mov	r1, r4
 80183ea:	4628      	mov	r0, r5
 80183ec:	f000 f950 	bl	8018690 <_fflush_r>
 80183f0:	bb30      	cbnz	r0, 8018440 <__swbuf_r+0x90>
 80183f2:	68a3      	ldr	r3, [r4, #8]
 80183f4:	3001      	adds	r0, #1
 80183f6:	3b01      	subs	r3, #1
 80183f8:	60a3      	str	r3, [r4, #8]
 80183fa:	6823      	ldr	r3, [r4, #0]
 80183fc:	1c5a      	adds	r2, r3, #1
 80183fe:	6022      	str	r2, [r4, #0]
 8018400:	701e      	strb	r6, [r3, #0]
 8018402:	6963      	ldr	r3, [r4, #20]
 8018404:	4283      	cmp	r3, r0
 8018406:	d004      	beq.n	8018412 <__swbuf_r+0x62>
 8018408:	89a3      	ldrh	r3, [r4, #12]
 801840a:	07db      	lsls	r3, r3, #31
 801840c:	d506      	bpl.n	801841c <__swbuf_r+0x6c>
 801840e:	2e0a      	cmp	r6, #10
 8018410:	d104      	bne.n	801841c <__swbuf_r+0x6c>
 8018412:	4621      	mov	r1, r4
 8018414:	4628      	mov	r0, r5
 8018416:	f000 f93b 	bl	8018690 <_fflush_r>
 801841a:	b988      	cbnz	r0, 8018440 <__swbuf_r+0x90>
 801841c:	4638      	mov	r0, r7
 801841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018420:	4b0a      	ldr	r3, [pc, #40]	; (801844c <__swbuf_r+0x9c>)
 8018422:	429c      	cmp	r4, r3
 8018424:	d101      	bne.n	801842a <__swbuf_r+0x7a>
 8018426:	68ac      	ldr	r4, [r5, #8]
 8018428:	e7cf      	b.n	80183ca <__swbuf_r+0x1a>
 801842a:	4b09      	ldr	r3, [pc, #36]	; (8018450 <__swbuf_r+0xa0>)
 801842c:	429c      	cmp	r4, r3
 801842e:	bf08      	it	eq
 8018430:	68ec      	ldreq	r4, [r5, #12]
 8018432:	e7ca      	b.n	80183ca <__swbuf_r+0x1a>
 8018434:	4621      	mov	r1, r4
 8018436:	4628      	mov	r0, r5
 8018438:	f000 f80c 	bl	8018454 <__swsetup_r>
 801843c:	2800      	cmp	r0, #0
 801843e:	d0cb      	beq.n	80183d8 <__swbuf_r+0x28>
 8018440:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018444:	e7ea      	b.n	801841c <__swbuf_r+0x6c>
 8018446:	bf00      	nop
 8018448:	0801b14c 	.word	0x0801b14c
 801844c:	0801b16c 	.word	0x0801b16c
 8018450:	0801b12c 	.word	0x0801b12c

08018454 <__swsetup_r>:
 8018454:	4b32      	ldr	r3, [pc, #200]	; (8018520 <__swsetup_r+0xcc>)
 8018456:	b570      	push	{r4, r5, r6, lr}
 8018458:	681d      	ldr	r5, [r3, #0]
 801845a:	4606      	mov	r6, r0
 801845c:	460c      	mov	r4, r1
 801845e:	b125      	cbz	r5, 801846a <__swsetup_r+0x16>
 8018460:	69ab      	ldr	r3, [r5, #24]
 8018462:	b913      	cbnz	r3, 801846a <__swsetup_r+0x16>
 8018464:	4628      	mov	r0, r5
 8018466:	f000 f9a7 	bl	80187b8 <__sinit>
 801846a:	4b2e      	ldr	r3, [pc, #184]	; (8018524 <__swsetup_r+0xd0>)
 801846c:	429c      	cmp	r4, r3
 801846e:	d10f      	bne.n	8018490 <__swsetup_r+0x3c>
 8018470:	686c      	ldr	r4, [r5, #4]
 8018472:	89a3      	ldrh	r3, [r4, #12]
 8018474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018478:	0719      	lsls	r1, r3, #28
 801847a:	d42c      	bmi.n	80184d6 <__swsetup_r+0x82>
 801847c:	06dd      	lsls	r5, r3, #27
 801847e:	d411      	bmi.n	80184a4 <__swsetup_r+0x50>
 8018480:	2309      	movs	r3, #9
 8018482:	6033      	str	r3, [r6, #0]
 8018484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801848c:	81a3      	strh	r3, [r4, #12]
 801848e:	e03e      	b.n	801850e <__swsetup_r+0xba>
 8018490:	4b25      	ldr	r3, [pc, #148]	; (8018528 <__swsetup_r+0xd4>)
 8018492:	429c      	cmp	r4, r3
 8018494:	d101      	bne.n	801849a <__swsetup_r+0x46>
 8018496:	68ac      	ldr	r4, [r5, #8]
 8018498:	e7eb      	b.n	8018472 <__swsetup_r+0x1e>
 801849a:	4b24      	ldr	r3, [pc, #144]	; (801852c <__swsetup_r+0xd8>)
 801849c:	429c      	cmp	r4, r3
 801849e:	bf08      	it	eq
 80184a0:	68ec      	ldreq	r4, [r5, #12]
 80184a2:	e7e6      	b.n	8018472 <__swsetup_r+0x1e>
 80184a4:	0758      	lsls	r0, r3, #29
 80184a6:	d512      	bpl.n	80184ce <__swsetup_r+0x7a>
 80184a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80184aa:	b141      	cbz	r1, 80184be <__swsetup_r+0x6a>
 80184ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184b0:	4299      	cmp	r1, r3
 80184b2:	d002      	beq.n	80184ba <__swsetup_r+0x66>
 80184b4:	4630      	mov	r0, r6
 80184b6:	f7ff fcd7 	bl	8017e68 <_free_r>
 80184ba:	2300      	movs	r3, #0
 80184bc:	6363      	str	r3, [r4, #52]	; 0x34
 80184be:	89a3      	ldrh	r3, [r4, #12]
 80184c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80184c4:	81a3      	strh	r3, [r4, #12]
 80184c6:	2300      	movs	r3, #0
 80184c8:	6063      	str	r3, [r4, #4]
 80184ca:	6923      	ldr	r3, [r4, #16]
 80184cc:	6023      	str	r3, [r4, #0]
 80184ce:	89a3      	ldrh	r3, [r4, #12]
 80184d0:	f043 0308 	orr.w	r3, r3, #8
 80184d4:	81a3      	strh	r3, [r4, #12]
 80184d6:	6923      	ldr	r3, [r4, #16]
 80184d8:	b94b      	cbnz	r3, 80184ee <__swsetup_r+0x9a>
 80184da:	89a3      	ldrh	r3, [r4, #12]
 80184dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80184e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80184e4:	d003      	beq.n	80184ee <__swsetup_r+0x9a>
 80184e6:	4621      	mov	r1, r4
 80184e8:	4630      	mov	r0, r6
 80184ea:	f000 fa39 	bl	8018960 <__smakebuf_r>
 80184ee:	89a0      	ldrh	r0, [r4, #12]
 80184f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80184f4:	f010 0301 	ands.w	r3, r0, #1
 80184f8:	d00a      	beq.n	8018510 <__swsetup_r+0xbc>
 80184fa:	2300      	movs	r3, #0
 80184fc:	60a3      	str	r3, [r4, #8]
 80184fe:	6963      	ldr	r3, [r4, #20]
 8018500:	425b      	negs	r3, r3
 8018502:	61a3      	str	r3, [r4, #24]
 8018504:	6923      	ldr	r3, [r4, #16]
 8018506:	b943      	cbnz	r3, 801851a <__swsetup_r+0xc6>
 8018508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801850c:	d1ba      	bne.n	8018484 <__swsetup_r+0x30>
 801850e:	bd70      	pop	{r4, r5, r6, pc}
 8018510:	0781      	lsls	r1, r0, #30
 8018512:	bf58      	it	pl
 8018514:	6963      	ldrpl	r3, [r4, #20]
 8018516:	60a3      	str	r3, [r4, #8]
 8018518:	e7f4      	b.n	8018504 <__swsetup_r+0xb0>
 801851a:	2000      	movs	r0, #0
 801851c:	e7f7      	b.n	801850e <__swsetup_r+0xba>
 801851e:	bf00      	nop
 8018520:	2000025c 	.word	0x2000025c
 8018524:	0801b14c 	.word	0x0801b14c
 8018528:	0801b16c 	.word	0x0801b16c
 801852c:	0801b12c 	.word	0x0801b12c

08018530 <__assert_func>:
 8018530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018532:	4614      	mov	r4, r2
 8018534:	461a      	mov	r2, r3
 8018536:	4b09      	ldr	r3, [pc, #36]	; (801855c <__assert_func+0x2c>)
 8018538:	4605      	mov	r5, r0
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	68d8      	ldr	r0, [r3, #12]
 801853e:	b14c      	cbz	r4, 8018554 <__assert_func+0x24>
 8018540:	4b07      	ldr	r3, [pc, #28]	; (8018560 <__assert_func+0x30>)
 8018542:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018546:	9100      	str	r1, [sp, #0]
 8018548:	462b      	mov	r3, r5
 801854a:	4906      	ldr	r1, [pc, #24]	; (8018564 <__assert_func+0x34>)
 801854c:	f000 f9b2 	bl	80188b4 <fiprintf>
 8018550:	f000 ff18 	bl	8019384 <abort>
 8018554:	4b04      	ldr	r3, [pc, #16]	; (8018568 <__assert_func+0x38>)
 8018556:	461c      	mov	r4, r3
 8018558:	e7f3      	b.n	8018542 <__assert_func+0x12>
 801855a:	bf00      	nop
 801855c:	2000025c 	.word	0x2000025c
 8018560:	0801b0ee 	.word	0x0801b0ee
 8018564:	0801b0fb 	.word	0x0801b0fb
 8018568:	0801b129 	.word	0x0801b129

0801856c <__env_lock>:
 801856c:	4801      	ldr	r0, [pc, #4]	; (8018574 <__env_lock+0x8>)
 801856e:	f7ff bc2a 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 8018572:	bf00      	nop
 8018574:	2000d69a 	.word	0x2000d69a

08018578 <__env_unlock>:
 8018578:	4801      	ldr	r0, [pc, #4]	; (8018580 <__env_unlock+0x8>)
 801857a:	f7ff bc25 	b.w	8017dc8 <__retarget_lock_release_recursive>
 801857e:	bf00      	nop
 8018580:	2000d69a 	.word	0x2000d69a

08018584 <__sflush_r>:
 8018584:	898a      	ldrh	r2, [r1, #12]
 8018586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801858a:	4605      	mov	r5, r0
 801858c:	0710      	lsls	r0, r2, #28
 801858e:	460c      	mov	r4, r1
 8018590:	d458      	bmi.n	8018644 <__sflush_r+0xc0>
 8018592:	684b      	ldr	r3, [r1, #4]
 8018594:	2b00      	cmp	r3, #0
 8018596:	dc05      	bgt.n	80185a4 <__sflush_r+0x20>
 8018598:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801859a:	2b00      	cmp	r3, #0
 801859c:	dc02      	bgt.n	80185a4 <__sflush_r+0x20>
 801859e:	2000      	movs	r0, #0
 80185a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80185a6:	2e00      	cmp	r6, #0
 80185a8:	d0f9      	beq.n	801859e <__sflush_r+0x1a>
 80185aa:	2300      	movs	r3, #0
 80185ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80185b0:	682f      	ldr	r7, [r5, #0]
 80185b2:	602b      	str	r3, [r5, #0]
 80185b4:	d032      	beq.n	801861c <__sflush_r+0x98>
 80185b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80185b8:	89a3      	ldrh	r3, [r4, #12]
 80185ba:	075a      	lsls	r2, r3, #29
 80185bc:	d505      	bpl.n	80185ca <__sflush_r+0x46>
 80185be:	6863      	ldr	r3, [r4, #4]
 80185c0:	1ac0      	subs	r0, r0, r3
 80185c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80185c4:	b10b      	cbz	r3, 80185ca <__sflush_r+0x46>
 80185c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80185c8:	1ac0      	subs	r0, r0, r3
 80185ca:	2300      	movs	r3, #0
 80185cc:	4602      	mov	r2, r0
 80185ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80185d0:	4628      	mov	r0, r5
 80185d2:	6a21      	ldr	r1, [r4, #32]
 80185d4:	47b0      	blx	r6
 80185d6:	1c43      	adds	r3, r0, #1
 80185d8:	89a3      	ldrh	r3, [r4, #12]
 80185da:	d106      	bne.n	80185ea <__sflush_r+0x66>
 80185dc:	6829      	ldr	r1, [r5, #0]
 80185de:	291d      	cmp	r1, #29
 80185e0:	d82c      	bhi.n	801863c <__sflush_r+0xb8>
 80185e2:	4a2a      	ldr	r2, [pc, #168]	; (801868c <__sflush_r+0x108>)
 80185e4:	40ca      	lsrs	r2, r1
 80185e6:	07d6      	lsls	r6, r2, #31
 80185e8:	d528      	bpl.n	801863c <__sflush_r+0xb8>
 80185ea:	2200      	movs	r2, #0
 80185ec:	6062      	str	r2, [r4, #4]
 80185ee:	6922      	ldr	r2, [r4, #16]
 80185f0:	04d9      	lsls	r1, r3, #19
 80185f2:	6022      	str	r2, [r4, #0]
 80185f4:	d504      	bpl.n	8018600 <__sflush_r+0x7c>
 80185f6:	1c42      	adds	r2, r0, #1
 80185f8:	d101      	bne.n	80185fe <__sflush_r+0x7a>
 80185fa:	682b      	ldr	r3, [r5, #0]
 80185fc:	b903      	cbnz	r3, 8018600 <__sflush_r+0x7c>
 80185fe:	6560      	str	r0, [r4, #84]	; 0x54
 8018600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018602:	602f      	str	r7, [r5, #0]
 8018604:	2900      	cmp	r1, #0
 8018606:	d0ca      	beq.n	801859e <__sflush_r+0x1a>
 8018608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801860c:	4299      	cmp	r1, r3
 801860e:	d002      	beq.n	8018616 <__sflush_r+0x92>
 8018610:	4628      	mov	r0, r5
 8018612:	f7ff fc29 	bl	8017e68 <_free_r>
 8018616:	2000      	movs	r0, #0
 8018618:	6360      	str	r0, [r4, #52]	; 0x34
 801861a:	e7c1      	b.n	80185a0 <__sflush_r+0x1c>
 801861c:	6a21      	ldr	r1, [r4, #32]
 801861e:	2301      	movs	r3, #1
 8018620:	4628      	mov	r0, r5
 8018622:	47b0      	blx	r6
 8018624:	1c41      	adds	r1, r0, #1
 8018626:	d1c7      	bne.n	80185b8 <__sflush_r+0x34>
 8018628:	682b      	ldr	r3, [r5, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d0c4      	beq.n	80185b8 <__sflush_r+0x34>
 801862e:	2b1d      	cmp	r3, #29
 8018630:	d001      	beq.n	8018636 <__sflush_r+0xb2>
 8018632:	2b16      	cmp	r3, #22
 8018634:	d101      	bne.n	801863a <__sflush_r+0xb6>
 8018636:	602f      	str	r7, [r5, #0]
 8018638:	e7b1      	b.n	801859e <__sflush_r+0x1a>
 801863a:	89a3      	ldrh	r3, [r4, #12]
 801863c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018640:	81a3      	strh	r3, [r4, #12]
 8018642:	e7ad      	b.n	80185a0 <__sflush_r+0x1c>
 8018644:	690f      	ldr	r7, [r1, #16]
 8018646:	2f00      	cmp	r7, #0
 8018648:	d0a9      	beq.n	801859e <__sflush_r+0x1a>
 801864a:	0793      	lsls	r3, r2, #30
 801864c:	bf18      	it	ne
 801864e:	2300      	movne	r3, #0
 8018650:	680e      	ldr	r6, [r1, #0]
 8018652:	bf08      	it	eq
 8018654:	694b      	ldreq	r3, [r1, #20]
 8018656:	eba6 0807 	sub.w	r8, r6, r7
 801865a:	600f      	str	r7, [r1, #0]
 801865c:	608b      	str	r3, [r1, #8]
 801865e:	f1b8 0f00 	cmp.w	r8, #0
 8018662:	dd9c      	ble.n	801859e <__sflush_r+0x1a>
 8018664:	4643      	mov	r3, r8
 8018666:	463a      	mov	r2, r7
 8018668:	4628      	mov	r0, r5
 801866a:	6a21      	ldr	r1, [r4, #32]
 801866c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801866e:	47b0      	blx	r6
 8018670:	2800      	cmp	r0, #0
 8018672:	dc06      	bgt.n	8018682 <__sflush_r+0xfe>
 8018674:	89a3      	ldrh	r3, [r4, #12]
 8018676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801867a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801867e:	81a3      	strh	r3, [r4, #12]
 8018680:	e78e      	b.n	80185a0 <__sflush_r+0x1c>
 8018682:	4407      	add	r7, r0
 8018684:	eba8 0800 	sub.w	r8, r8, r0
 8018688:	e7e9      	b.n	801865e <__sflush_r+0xda>
 801868a:	bf00      	nop
 801868c:	20400001 	.word	0x20400001

08018690 <_fflush_r>:
 8018690:	b538      	push	{r3, r4, r5, lr}
 8018692:	690b      	ldr	r3, [r1, #16]
 8018694:	4605      	mov	r5, r0
 8018696:	460c      	mov	r4, r1
 8018698:	b913      	cbnz	r3, 80186a0 <_fflush_r+0x10>
 801869a:	2500      	movs	r5, #0
 801869c:	4628      	mov	r0, r5
 801869e:	bd38      	pop	{r3, r4, r5, pc}
 80186a0:	b118      	cbz	r0, 80186aa <_fflush_r+0x1a>
 80186a2:	6983      	ldr	r3, [r0, #24]
 80186a4:	b90b      	cbnz	r3, 80186aa <_fflush_r+0x1a>
 80186a6:	f000 f887 	bl	80187b8 <__sinit>
 80186aa:	4b14      	ldr	r3, [pc, #80]	; (80186fc <_fflush_r+0x6c>)
 80186ac:	429c      	cmp	r4, r3
 80186ae:	d11b      	bne.n	80186e8 <_fflush_r+0x58>
 80186b0:	686c      	ldr	r4, [r5, #4]
 80186b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d0ef      	beq.n	801869a <_fflush_r+0xa>
 80186ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80186bc:	07d0      	lsls	r0, r2, #31
 80186be:	d404      	bmi.n	80186ca <_fflush_r+0x3a>
 80186c0:	0599      	lsls	r1, r3, #22
 80186c2:	d402      	bmi.n	80186ca <_fflush_r+0x3a>
 80186c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186c6:	f7ff fb7e 	bl	8017dc6 <__retarget_lock_acquire_recursive>
 80186ca:	4628      	mov	r0, r5
 80186cc:	4621      	mov	r1, r4
 80186ce:	f7ff ff59 	bl	8018584 <__sflush_r>
 80186d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80186d4:	4605      	mov	r5, r0
 80186d6:	07da      	lsls	r2, r3, #31
 80186d8:	d4e0      	bmi.n	801869c <_fflush_r+0xc>
 80186da:	89a3      	ldrh	r3, [r4, #12]
 80186dc:	059b      	lsls	r3, r3, #22
 80186de:	d4dd      	bmi.n	801869c <_fflush_r+0xc>
 80186e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80186e2:	f7ff fb71 	bl	8017dc8 <__retarget_lock_release_recursive>
 80186e6:	e7d9      	b.n	801869c <_fflush_r+0xc>
 80186e8:	4b05      	ldr	r3, [pc, #20]	; (8018700 <_fflush_r+0x70>)
 80186ea:	429c      	cmp	r4, r3
 80186ec:	d101      	bne.n	80186f2 <_fflush_r+0x62>
 80186ee:	68ac      	ldr	r4, [r5, #8]
 80186f0:	e7df      	b.n	80186b2 <_fflush_r+0x22>
 80186f2:	4b04      	ldr	r3, [pc, #16]	; (8018704 <_fflush_r+0x74>)
 80186f4:	429c      	cmp	r4, r3
 80186f6:	bf08      	it	eq
 80186f8:	68ec      	ldreq	r4, [r5, #12]
 80186fa:	e7da      	b.n	80186b2 <_fflush_r+0x22>
 80186fc:	0801b14c 	.word	0x0801b14c
 8018700:	0801b16c 	.word	0x0801b16c
 8018704:	0801b12c 	.word	0x0801b12c

08018708 <std>:
 8018708:	2300      	movs	r3, #0
 801870a:	b510      	push	{r4, lr}
 801870c:	4604      	mov	r4, r0
 801870e:	e9c0 3300 	strd	r3, r3, [r0]
 8018712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018716:	6083      	str	r3, [r0, #8]
 8018718:	8181      	strh	r1, [r0, #12]
 801871a:	6643      	str	r3, [r0, #100]	; 0x64
 801871c:	81c2      	strh	r2, [r0, #14]
 801871e:	6183      	str	r3, [r0, #24]
 8018720:	4619      	mov	r1, r3
 8018722:	2208      	movs	r2, #8
 8018724:	305c      	adds	r0, #92	; 0x5c
 8018726:	f7ff fb89 	bl	8017e3c <memset>
 801872a:	4b05      	ldr	r3, [pc, #20]	; (8018740 <std+0x38>)
 801872c:	6224      	str	r4, [r4, #32]
 801872e:	6263      	str	r3, [r4, #36]	; 0x24
 8018730:	4b04      	ldr	r3, [pc, #16]	; (8018744 <std+0x3c>)
 8018732:	62a3      	str	r3, [r4, #40]	; 0x28
 8018734:	4b04      	ldr	r3, [pc, #16]	; (8018748 <std+0x40>)
 8018736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018738:	4b04      	ldr	r3, [pc, #16]	; (801874c <std+0x44>)
 801873a:	6323      	str	r3, [r4, #48]	; 0x30
 801873c:	bd10      	pop	{r4, pc}
 801873e:	bf00      	nop
 8018740:	080192d9 	.word	0x080192d9
 8018744:	080192fb 	.word	0x080192fb
 8018748:	08019333 	.word	0x08019333
 801874c:	08019357 	.word	0x08019357

08018750 <_cleanup_r>:
 8018750:	4901      	ldr	r1, [pc, #4]	; (8018758 <_cleanup_r+0x8>)
 8018752:	f000 b8c1 	b.w	80188d8 <_fwalk_reent>
 8018756:	bf00      	nop
 8018758:	08018691 	.word	0x08018691

0801875c <__sfmoreglue>:
 801875c:	b570      	push	{r4, r5, r6, lr}
 801875e:	2568      	movs	r5, #104	; 0x68
 8018760:	1e4a      	subs	r2, r1, #1
 8018762:	4355      	muls	r5, r2
 8018764:	460e      	mov	r6, r1
 8018766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801876a:	f7ff fbc9 	bl	8017f00 <_malloc_r>
 801876e:	4604      	mov	r4, r0
 8018770:	b140      	cbz	r0, 8018784 <__sfmoreglue+0x28>
 8018772:	2100      	movs	r1, #0
 8018774:	e9c0 1600 	strd	r1, r6, [r0]
 8018778:	300c      	adds	r0, #12
 801877a:	60a0      	str	r0, [r4, #8]
 801877c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018780:	f7ff fb5c 	bl	8017e3c <memset>
 8018784:	4620      	mov	r0, r4
 8018786:	bd70      	pop	{r4, r5, r6, pc}

08018788 <__sfp_lock_acquire>:
 8018788:	4801      	ldr	r0, [pc, #4]	; (8018790 <__sfp_lock_acquire+0x8>)
 801878a:	f7ff bb1c 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 801878e:	bf00      	nop
 8018790:	2000d6a0 	.word	0x2000d6a0

08018794 <__sfp_lock_release>:
 8018794:	4801      	ldr	r0, [pc, #4]	; (801879c <__sfp_lock_release+0x8>)
 8018796:	f7ff bb17 	b.w	8017dc8 <__retarget_lock_release_recursive>
 801879a:	bf00      	nop
 801879c:	2000d6a0 	.word	0x2000d6a0

080187a0 <__sinit_lock_acquire>:
 80187a0:	4801      	ldr	r0, [pc, #4]	; (80187a8 <__sinit_lock_acquire+0x8>)
 80187a2:	f7ff bb10 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 80187a6:	bf00      	nop
 80187a8:	2000d69b 	.word	0x2000d69b

080187ac <__sinit_lock_release>:
 80187ac:	4801      	ldr	r0, [pc, #4]	; (80187b4 <__sinit_lock_release+0x8>)
 80187ae:	f7ff bb0b 	b.w	8017dc8 <__retarget_lock_release_recursive>
 80187b2:	bf00      	nop
 80187b4:	2000d69b 	.word	0x2000d69b

080187b8 <__sinit>:
 80187b8:	b510      	push	{r4, lr}
 80187ba:	4604      	mov	r4, r0
 80187bc:	f7ff fff0 	bl	80187a0 <__sinit_lock_acquire>
 80187c0:	69a3      	ldr	r3, [r4, #24]
 80187c2:	b11b      	cbz	r3, 80187cc <__sinit+0x14>
 80187c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80187c8:	f7ff bff0 	b.w	80187ac <__sinit_lock_release>
 80187cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80187d0:	6523      	str	r3, [r4, #80]	; 0x50
 80187d2:	4b13      	ldr	r3, [pc, #76]	; (8018820 <__sinit+0x68>)
 80187d4:	4a13      	ldr	r2, [pc, #76]	; (8018824 <__sinit+0x6c>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80187da:	42a3      	cmp	r3, r4
 80187dc:	bf08      	it	eq
 80187de:	2301      	moveq	r3, #1
 80187e0:	4620      	mov	r0, r4
 80187e2:	bf08      	it	eq
 80187e4:	61a3      	streq	r3, [r4, #24]
 80187e6:	f000 f81f 	bl	8018828 <__sfp>
 80187ea:	6060      	str	r0, [r4, #4]
 80187ec:	4620      	mov	r0, r4
 80187ee:	f000 f81b 	bl	8018828 <__sfp>
 80187f2:	60a0      	str	r0, [r4, #8]
 80187f4:	4620      	mov	r0, r4
 80187f6:	f000 f817 	bl	8018828 <__sfp>
 80187fa:	2200      	movs	r2, #0
 80187fc:	2104      	movs	r1, #4
 80187fe:	60e0      	str	r0, [r4, #12]
 8018800:	6860      	ldr	r0, [r4, #4]
 8018802:	f7ff ff81 	bl	8018708 <std>
 8018806:	2201      	movs	r2, #1
 8018808:	2109      	movs	r1, #9
 801880a:	68a0      	ldr	r0, [r4, #8]
 801880c:	f7ff ff7c 	bl	8018708 <std>
 8018810:	2202      	movs	r2, #2
 8018812:	2112      	movs	r1, #18
 8018814:	68e0      	ldr	r0, [r4, #12]
 8018816:	f7ff ff77 	bl	8018708 <std>
 801881a:	2301      	movs	r3, #1
 801881c:	61a3      	str	r3, [r4, #24]
 801881e:	e7d1      	b.n	80187c4 <__sinit+0xc>
 8018820:	0801b074 	.word	0x0801b074
 8018824:	08018751 	.word	0x08018751

08018828 <__sfp>:
 8018828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882a:	4607      	mov	r7, r0
 801882c:	f7ff ffac 	bl	8018788 <__sfp_lock_acquire>
 8018830:	4b1e      	ldr	r3, [pc, #120]	; (80188ac <__sfp+0x84>)
 8018832:	681e      	ldr	r6, [r3, #0]
 8018834:	69b3      	ldr	r3, [r6, #24]
 8018836:	b913      	cbnz	r3, 801883e <__sfp+0x16>
 8018838:	4630      	mov	r0, r6
 801883a:	f7ff ffbd 	bl	80187b8 <__sinit>
 801883e:	3648      	adds	r6, #72	; 0x48
 8018840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018844:	3b01      	subs	r3, #1
 8018846:	d503      	bpl.n	8018850 <__sfp+0x28>
 8018848:	6833      	ldr	r3, [r6, #0]
 801884a:	b30b      	cbz	r3, 8018890 <__sfp+0x68>
 801884c:	6836      	ldr	r6, [r6, #0]
 801884e:	e7f7      	b.n	8018840 <__sfp+0x18>
 8018850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018854:	b9d5      	cbnz	r5, 801888c <__sfp+0x64>
 8018856:	4b16      	ldr	r3, [pc, #88]	; (80188b0 <__sfp+0x88>)
 8018858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801885c:	60e3      	str	r3, [r4, #12]
 801885e:	6665      	str	r5, [r4, #100]	; 0x64
 8018860:	f7ff fab0 	bl	8017dc4 <__retarget_lock_init_recursive>
 8018864:	f7ff ff96 	bl	8018794 <__sfp_lock_release>
 8018868:	2208      	movs	r2, #8
 801886a:	4629      	mov	r1, r5
 801886c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018874:	6025      	str	r5, [r4, #0]
 8018876:	61a5      	str	r5, [r4, #24]
 8018878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801887c:	f7ff fade 	bl	8017e3c <memset>
 8018880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018888:	4620      	mov	r0, r4
 801888a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801888c:	3468      	adds	r4, #104	; 0x68
 801888e:	e7d9      	b.n	8018844 <__sfp+0x1c>
 8018890:	2104      	movs	r1, #4
 8018892:	4638      	mov	r0, r7
 8018894:	f7ff ff62 	bl	801875c <__sfmoreglue>
 8018898:	4604      	mov	r4, r0
 801889a:	6030      	str	r0, [r6, #0]
 801889c:	2800      	cmp	r0, #0
 801889e:	d1d5      	bne.n	801884c <__sfp+0x24>
 80188a0:	f7ff ff78 	bl	8018794 <__sfp_lock_release>
 80188a4:	230c      	movs	r3, #12
 80188a6:	603b      	str	r3, [r7, #0]
 80188a8:	e7ee      	b.n	8018888 <__sfp+0x60>
 80188aa:	bf00      	nop
 80188ac:	0801b074 	.word	0x0801b074
 80188b0:	ffff0001 	.word	0xffff0001

080188b4 <fiprintf>:
 80188b4:	b40e      	push	{r1, r2, r3}
 80188b6:	b503      	push	{r0, r1, lr}
 80188b8:	4601      	mov	r1, r0
 80188ba:	ab03      	add	r3, sp, #12
 80188bc:	4805      	ldr	r0, [pc, #20]	; (80188d4 <fiprintf+0x20>)
 80188be:	f853 2b04 	ldr.w	r2, [r3], #4
 80188c2:	6800      	ldr	r0, [r0, #0]
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	f000 fa41 	bl	8018d4c <_vfiprintf_r>
 80188ca:	b002      	add	sp, #8
 80188cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80188d0:	b003      	add	sp, #12
 80188d2:	4770      	bx	lr
 80188d4:	2000025c 	.word	0x2000025c

080188d8 <_fwalk_reent>:
 80188d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188dc:	4606      	mov	r6, r0
 80188de:	4688      	mov	r8, r1
 80188e0:	2700      	movs	r7, #0
 80188e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80188e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80188ea:	f1b9 0901 	subs.w	r9, r9, #1
 80188ee:	d505      	bpl.n	80188fc <_fwalk_reent+0x24>
 80188f0:	6824      	ldr	r4, [r4, #0]
 80188f2:	2c00      	cmp	r4, #0
 80188f4:	d1f7      	bne.n	80188e6 <_fwalk_reent+0xe>
 80188f6:	4638      	mov	r0, r7
 80188f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188fc:	89ab      	ldrh	r3, [r5, #12]
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d907      	bls.n	8018912 <_fwalk_reent+0x3a>
 8018902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018906:	3301      	adds	r3, #1
 8018908:	d003      	beq.n	8018912 <_fwalk_reent+0x3a>
 801890a:	4629      	mov	r1, r5
 801890c:	4630      	mov	r0, r6
 801890e:	47c0      	blx	r8
 8018910:	4307      	orrs	r7, r0
 8018912:	3568      	adds	r5, #104	; 0x68
 8018914:	e7e9      	b.n	80188ea <_fwalk_reent+0x12>

08018916 <__swhatbuf_r>:
 8018916:	b570      	push	{r4, r5, r6, lr}
 8018918:	460e      	mov	r6, r1
 801891a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801891e:	4614      	mov	r4, r2
 8018920:	2900      	cmp	r1, #0
 8018922:	461d      	mov	r5, r3
 8018924:	b096      	sub	sp, #88	; 0x58
 8018926:	da07      	bge.n	8018938 <__swhatbuf_r+0x22>
 8018928:	2300      	movs	r3, #0
 801892a:	602b      	str	r3, [r5, #0]
 801892c:	89b3      	ldrh	r3, [r6, #12]
 801892e:	061a      	lsls	r2, r3, #24
 8018930:	d410      	bmi.n	8018954 <__swhatbuf_r+0x3e>
 8018932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018936:	e00e      	b.n	8018956 <__swhatbuf_r+0x40>
 8018938:	466a      	mov	r2, sp
 801893a:	f000 fd3b 	bl	80193b4 <_fstat_r>
 801893e:	2800      	cmp	r0, #0
 8018940:	dbf2      	blt.n	8018928 <__swhatbuf_r+0x12>
 8018942:	9a01      	ldr	r2, [sp, #4]
 8018944:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018948:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801894c:	425a      	negs	r2, r3
 801894e:	415a      	adcs	r2, r3
 8018950:	602a      	str	r2, [r5, #0]
 8018952:	e7ee      	b.n	8018932 <__swhatbuf_r+0x1c>
 8018954:	2340      	movs	r3, #64	; 0x40
 8018956:	2000      	movs	r0, #0
 8018958:	6023      	str	r3, [r4, #0]
 801895a:	b016      	add	sp, #88	; 0x58
 801895c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018960 <__smakebuf_r>:
 8018960:	898b      	ldrh	r3, [r1, #12]
 8018962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018964:	079d      	lsls	r5, r3, #30
 8018966:	4606      	mov	r6, r0
 8018968:	460c      	mov	r4, r1
 801896a:	d507      	bpl.n	801897c <__smakebuf_r+0x1c>
 801896c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018970:	6023      	str	r3, [r4, #0]
 8018972:	6123      	str	r3, [r4, #16]
 8018974:	2301      	movs	r3, #1
 8018976:	6163      	str	r3, [r4, #20]
 8018978:	b002      	add	sp, #8
 801897a:	bd70      	pop	{r4, r5, r6, pc}
 801897c:	466a      	mov	r2, sp
 801897e:	ab01      	add	r3, sp, #4
 8018980:	f7ff ffc9 	bl	8018916 <__swhatbuf_r>
 8018984:	9900      	ldr	r1, [sp, #0]
 8018986:	4605      	mov	r5, r0
 8018988:	4630      	mov	r0, r6
 801898a:	f7ff fab9 	bl	8017f00 <_malloc_r>
 801898e:	b948      	cbnz	r0, 80189a4 <__smakebuf_r+0x44>
 8018990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018994:	059a      	lsls	r2, r3, #22
 8018996:	d4ef      	bmi.n	8018978 <__smakebuf_r+0x18>
 8018998:	f023 0303 	bic.w	r3, r3, #3
 801899c:	f043 0302 	orr.w	r3, r3, #2
 80189a0:	81a3      	strh	r3, [r4, #12]
 80189a2:	e7e3      	b.n	801896c <__smakebuf_r+0xc>
 80189a4:	4b0d      	ldr	r3, [pc, #52]	; (80189dc <__smakebuf_r+0x7c>)
 80189a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80189a8:	89a3      	ldrh	r3, [r4, #12]
 80189aa:	6020      	str	r0, [r4, #0]
 80189ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189b0:	81a3      	strh	r3, [r4, #12]
 80189b2:	9b00      	ldr	r3, [sp, #0]
 80189b4:	6120      	str	r0, [r4, #16]
 80189b6:	6163      	str	r3, [r4, #20]
 80189b8:	9b01      	ldr	r3, [sp, #4]
 80189ba:	b15b      	cbz	r3, 80189d4 <__smakebuf_r+0x74>
 80189bc:	4630      	mov	r0, r6
 80189be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189c2:	f000 fd09 	bl	80193d8 <_isatty_r>
 80189c6:	b128      	cbz	r0, 80189d4 <__smakebuf_r+0x74>
 80189c8:	89a3      	ldrh	r3, [r4, #12]
 80189ca:	f023 0303 	bic.w	r3, r3, #3
 80189ce:	f043 0301 	orr.w	r3, r3, #1
 80189d2:	81a3      	strh	r3, [r4, #12]
 80189d4:	89a0      	ldrh	r0, [r4, #12]
 80189d6:	4305      	orrs	r5, r0
 80189d8:	81a5      	strh	r5, [r4, #12]
 80189da:	e7cd      	b.n	8018978 <__smakebuf_r+0x18>
 80189dc:	08018751 	.word	0x08018751

080189e0 <__malloc_lock>:
 80189e0:	4801      	ldr	r0, [pc, #4]	; (80189e8 <__malloc_lock+0x8>)
 80189e2:	f7ff b9f0 	b.w	8017dc6 <__retarget_lock_acquire_recursive>
 80189e6:	bf00      	nop
 80189e8:	2000d69c 	.word	0x2000d69c

080189ec <__malloc_unlock>:
 80189ec:	4801      	ldr	r0, [pc, #4]	; (80189f4 <__malloc_unlock+0x8>)
 80189ee:	f7ff b9eb 	b.w	8017dc8 <__retarget_lock_release_recursive>
 80189f2:	bf00      	nop
 80189f4:	2000d69c 	.word	0x2000d69c

080189f8 <_realloc_r>:
 80189f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189fa:	4607      	mov	r7, r0
 80189fc:	4614      	mov	r4, r2
 80189fe:	460e      	mov	r6, r1
 8018a00:	b921      	cbnz	r1, 8018a0c <_realloc_r+0x14>
 8018a02:	4611      	mov	r1, r2
 8018a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018a08:	f7ff ba7a 	b.w	8017f00 <_malloc_r>
 8018a0c:	b922      	cbnz	r2, 8018a18 <_realloc_r+0x20>
 8018a0e:	f7ff fa2b 	bl	8017e68 <_free_r>
 8018a12:	4625      	mov	r5, r4
 8018a14:	4628      	mov	r0, r5
 8018a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a18:	f000 fd0e 	bl	8019438 <_malloc_usable_size_r>
 8018a1c:	42a0      	cmp	r0, r4
 8018a1e:	d20f      	bcs.n	8018a40 <_realloc_r+0x48>
 8018a20:	4621      	mov	r1, r4
 8018a22:	4638      	mov	r0, r7
 8018a24:	f7ff fa6c 	bl	8017f00 <_malloc_r>
 8018a28:	4605      	mov	r5, r0
 8018a2a:	2800      	cmp	r0, #0
 8018a2c:	d0f2      	beq.n	8018a14 <_realloc_r+0x1c>
 8018a2e:	4631      	mov	r1, r6
 8018a30:	4622      	mov	r2, r4
 8018a32:	f7ff f9db 	bl	8017dec <memcpy>
 8018a36:	4631      	mov	r1, r6
 8018a38:	4638      	mov	r0, r7
 8018a3a:	f7ff fa15 	bl	8017e68 <_free_r>
 8018a3e:	e7e9      	b.n	8018a14 <_realloc_r+0x1c>
 8018a40:	4635      	mov	r5, r6
 8018a42:	e7e7      	b.n	8018a14 <_realloc_r+0x1c>

08018a44 <__ssputs_r>:
 8018a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a48:	688e      	ldr	r6, [r1, #8]
 8018a4a:	4682      	mov	sl, r0
 8018a4c:	429e      	cmp	r6, r3
 8018a4e:	460c      	mov	r4, r1
 8018a50:	4690      	mov	r8, r2
 8018a52:	461f      	mov	r7, r3
 8018a54:	d838      	bhi.n	8018ac8 <__ssputs_r+0x84>
 8018a56:	898a      	ldrh	r2, [r1, #12]
 8018a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018a5c:	d032      	beq.n	8018ac4 <__ssputs_r+0x80>
 8018a5e:	6825      	ldr	r5, [r4, #0]
 8018a60:	6909      	ldr	r1, [r1, #16]
 8018a62:	3301      	adds	r3, #1
 8018a64:	eba5 0901 	sub.w	r9, r5, r1
 8018a68:	6965      	ldr	r5, [r4, #20]
 8018a6a:	444b      	add	r3, r9
 8018a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018a74:	106d      	asrs	r5, r5, #1
 8018a76:	429d      	cmp	r5, r3
 8018a78:	bf38      	it	cc
 8018a7a:	461d      	movcc	r5, r3
 8018a7c:	0553      	lsls	r3, r2, #21
 8018a7e:	d531      	bpl.n	8018ae4 <__ssputs_r+0xa0>
 8018a80:	4629      	mov	r1, r5
 8018a82:	f7ff fa3d 	bl	8017f00 <_malloc_r>
 8018a86:	4606      	mov	r6, r0
 8018a88:	b950      	cbnz	r0, 8018aa0 <__ssputs_r+0x5c>
 8018a8a:	230c      	movs	r3, #12
 8018a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a90:	f8ca 3000 	str.w	r3, [sl]
 8018a94:	89a3      	ldrh	r3, [r4, #12]
 8018a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a9a:	81a3      	strh	r3, [r4, #12]
 8018a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aa0:	464a      	mov	r2, r9
 8018aa2:	6921      	ldr	r1, [r4, #16]
 8018aa4:	f7ff f9a2 	bl	8017dec <memcpy>
 8018aa8:	89a3      	ldrh	r3, [r4, #12]
 8018aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ab2:	81a3      	strh	r3, [r4, #12]
 8018ab4:	6126      	str	r6, [r4, #16]
 8018ab6:	444e      	add	r6, r9
 8018ab8:	6026      	str	r6, [r4, #0]
 8018aba:	463e      	mov	r6, r7
 8018abc:	6165      	str	r5, [r4, #20]
 8018abe:	eba5 0509 	sub.w	r5, r5, r9
 8018ac2:	60a5      	str	r5, [r4, #8]
 8018ac4:	42be      	cmp	r6, r7
 8018ac6:	d900      	bls.n	8018aca <__ssputs_r+0x86>
 8018ac8:	463e      	mov	r6, r7
 8018aca:	4632      	mov	r2, r6
 8018acc:	4641      	mov	r1, r8
 8018ace:	6820      	ldr	r0, [r4, #0]
 8018ad0:	f7ff f99a 	bl	8017e08 <memmove>
 8018ad4:	68a3      	ldr	r3, [r4, #8]
 8018ad6:	6822      	ldr	r2, [r4, #0]
 8018ad8:	1b9b      	subs	r3, r3, r6
 8018ada:	4432      	add	r2, r6
 8018adc:	2000      	movs	r0, #0
 8018ade:	60a3      	str	r3, [r4, #8]
 8018ae0:	6022      	str	r2, [r4, #0]
 8018ae2:	e7db      	b.n	8018a9c <__ssputs_r+0x58>
 8018ae4:	462a      	mov	r2, r5
 8018ae6:	f7ff ff87 	bl	80189f8 <_realloc_r>
 8018aea:	4606      	mov	r6, r0
 8018aec:	2800      	cmp	r0, #0
 8018aee:	d1e1      	bne.n	8018ab4 <__ssputs_r+0x70>
 8018af0:	4650      	mov	r0, sl
 8018af2:	6921      	ldr	r1, [r4, #16]
 8018af4:	f7ff f9b8 	bl	8017e68 <_free_r>
 8018af8:	e7c7      	b.n	8018a8a <__ssputs_r+0x46>
	...

08018afc <_svfiprintf_r>:
 8018afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b00:	4698      	mov	r8, r3
 8018b02:	898b      	ldrh	r3, [r1, #12]
 8018b04:	4607      	mov	r7, r0
 8018b06:	061b      	lsls	r3, r3, #24
 8018b08:	460d      	mov	r5, r1
 8018b0a:	4614      	mov	r4, r2
 8018b0c:	b09d      	sub	sp, #116	; 0x74
 8018b0e:	d50e      	bpl.n	8018b2e <_svfiprintf_r+0x32>
 8018b10:	690b      	ldr	r3, [r1, #16]
 8018b12:	b963      	cbnz	r3, 8018b2e <_svfiprintf_r+0x32>
 8018b14:	2140      	movs	r1, #64	; 0x40
 8018b16:	f7ff f9f3 	bl	8017f00 <_malloc_r>
 8018b1a:	6028      	str	r0, [r5, #0]
 8018b1c:	6128      	str	r0, [r5, #16]
 8018b1e:	b920      	cbnz	r0, 8018b2a <_svfiprintf_r+0x2e>
 8018b20:	230c      	movs	r3, #12
 8018b22:	603b      	str	r3, [r7, #0]
 8018b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b28:	e0d1      	b.n	8018cce <_svfiprintf_r+0x1d2>
 8018b2a:	2340      	movs	r3, #64	; 0x40
 8018b2c:	616b      	str	r3, [r5, #20]
 8018b2e:	2300      	movs	r3, #0
 8018b30:	9309      	str	r3, [sp, #36]	; 0x24
 8018b32:	2320      	movs	r3, #32
 8018b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b38:	2330      	movs	r3, #48	; 0x30
 8018b3a:	f04f 0901 	mov.w	r9, #1
 8018b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018ce8 <_svfiprintf_r+0x1ec>
 8018b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b4a:	4623      	mov	r3, r4
 8018b4c:	469a      	mov	sl, r3
 8018b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b52:	b10a      	cbz	r2, 8018b58 <_svfiprintf_r+0x5c>
 8018b54:	2a25      	cmp	r2, #37	; 0x25
 8018b56:	d1f9      	bne.n	8018b4c <_svfiprintf_r+0x50>
 8018b58:	ebba 0b04 	subs.w	fp, sl, r4
 8018b5c:	d00b      	beq.n	8018b76 <_svfiprintf_r+0x7a>
 8018b5e:	465b      	mov	r3, fp
 8018b60:	4622      	mov	r2, r4
 8018b62:	4629      	mov	r1, r5
 8018b64:	4638      	mov	r0, r7
 8018b66:	f7ff ff6d 	bl	8018a44 <__ssputs_r>
 8018b6a:	3001      	adds	r0, #1
 8018b6c:	f000 80aa 	beq.w	8018cc4 <_svfiprintf_r+0x1c8>
 8018b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b72:	445a      	add	r2, fp
 8018b74:	9209      	str	r2, [sp, #36]	; 0x24
 8018b76:	f89a 3000 	ldrb.w	r3, [sl]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	f000 80a2 	beq.w	8018cc4 <_svfiprintf_r+0x1c8>
 8018b80:	2300      	movs	r3, #0
 8018b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b8a:	f10a 0a01 	add.w	sl, sl, #1
 8018b8e:	9304      	str	r3, [sp, #16]
 8018b90:	9307      	str	r3, [sp, #28]
 8018b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b96:	931a      	str	r3, [sp, #104]	; 0x68
 8018b98:	4654      	mov	r4, sl
 8018b9a:	2205      	movs	r2, #5
 8018b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ba0:	4851      	ldr	r0, [pc, #324]	; (8018ce8 <_svfiprintf_r+0x1ec>)
 8018ba2:	f000 fc3b 	bl	801941c <memchr>
 8018ba6:	9a04      	ldr	r2, [sp, #16]
 8018ba8:	b9d8      	cbnz	r0, 8018be2 <_svfiprintf_r+0xe6>
 8018baa:	06d0      	lsls	r0, r2, #27
 8018bac:	bf44      	itt	mi
 8018bae:	2320      	movmi	r3, #32
 8018bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018bb4:	0711      	lsls	r1, r2, #28
 8018bb6:	bf44      	itt	mi
 8018bb8:	232b      	movmi	r3, #43	; 0x2b
 8018bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8018bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8018bc4:	d015      	beq.n	8018bf2 <_svfiprintf_r+0xf6>
 8018bc6:	4654      	mov	r4, sl
 8018bc8:	2000      	movs	r0, #0
 8018bca:	f04f 0c0a 	mov.w	ip, #10
 8018bce:	9a07      	ldr	r2, [sp, #28]
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bd6:	3b30      	subs	r3, #48	; 0x30
 8018bd8:	2b09      	cmp	r3, #9
 8018bda:	d94e      	bls.n	8018c7a <_svfiprintf_r+0x17e>
 8018bdc:	b1b0      	cbz	r0, 8018c0c <_svfiprintf_r+0x110>
 8018bde:	9207      	str	r2, [sp, #28]
 8018be0:	e014      	b.n	8018c0c <_svfiprintf_r+0x110>
 8018be2:	eba0 0308 	sub.w	r3, r0, r8
 8018be6:	fa09 f303 	lsl.w	r3, r9, r3
 8018bea:	4313      	orrs	r3, r2
 8018bec:	46a2      	mov	sl, r4
 8018bee:	9304      	str	r3, [sp, #16]
 8018bf0:	e7d2      	b.n	8018b98 <_svfiprintf_r+0x9c>
 8018bf2:	9b03      	ldr	r3, [sp, #12]
 8018bf4:	1d19      	adds	r1, r3, #4
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	9103      	str	r1, [sp, #12]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	bfbb      	ittet	lt
 8018bfe:	425b      	neglt	r3, r3
 8018c00:	f042 0202 	orrlt.w	r2, r2, #2
 8018c04:	9307      	strge	r3, [sp, #28]
 8018c06:	9307      	strlt	r3, [sp, #28]
 8018c08:	bfb8      	it	lt
 8018c0a:	9204      	strlt	r2, [sp, #16]
 8018c0c:	7823      	ldrb	r3, [r4, #0]
 8018c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8018c10:	d10c      	bne.n	8018c2c <_svfiprintf_r+0x130>
 8018c12:	7863      	ldrb	r3, [r4, #1]
 8018c14:	2b2a      	cmp	r3, #42	; 0x2a
 8018c16:	d135      	bne.n	8018c84 <_svfiprintf_r+0x188>
 8018c18:	9b03      	ldr	r3, [sp, #12]
 8018c1a:	3402      	adds	r4, #2
 8018c1c:	1d1a      	adds	r2, r3, #4
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	9203      	str	r2, [sp, #12]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	bfb8      	it	lt
 8018c26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018c2a:	9305      	str	r3, [sp, #20]
 8018c2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018cf8 <_svfiprintf_r+0x1fc>
 8018c30:	2203      	movs	r2, #3
 8018c32:	4650      	mov	r0, sl
 8018c34:	7821      	ldrb	r1, [r4, #0]
 8018c36:	f000 fbf1 	bl	801941c <memchr>
 8018c3a:	b140      	cbz	r0, 8018c4e <_svfiprintf_r+0x152>
 8018c3c:	2340      	movs	r3, #64	; 0x40
 8018c3e:	eba0 000a 	sub.w	r0, r0, sl
 8018c42:	fa03 f000 	lsl.w	r0, r3, r0
 8018c46:	9b04      	ldr	r3, [sp, #16]
 8018c48:	3401      	adds	r4, #1
 8018c4a:	4303      	orrs	r3, r0
 8018c4c:	9304      	str	r3, [sp, #16]
 8018c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c52:	2206      	movs	r2, #6
 8018c54:	4825      	ldr	r0, [pc, #148]	; (8018cec <_svfiprintf_r+0x1f0>)
 8018c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c5a:	f000 fbdf 	bl	801941c <memchr>
 8018c5e:	2800      	cmp	r0, #0
 8018c60:	d038      	beq.n	8018cd4 <_svfiprintf_r+0x1d8>
 8018c62:	4b23      	ldr	r3, [pc, #140]	; (8018cf0 <_svfiprintf_r+0x1f4>)
 8018c64:	bb1b      	cbnz	r3, 8018cae <_svfiprintf_r+0x1b2>
 8018c66:	9b03      	ldr	r3, [sp, #12]
 8018c68:	3307      	adds	r3, #7
 8018c6a:	f023 0307 	bic.w	r3, r3, #7
 8018c6e:	3308      	adds	r3, #8
 8018c70:	9303      	str	r3, [sp, #12]
 8018c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c74:	4433      	add	r3, r6
 8018c76:	9309      	str	r3, [sp, #36]	; 0x24
 8018c78:	e767      	b.n	8018b4a <_svfiprintf_r+0x4e>
 8018c7a:	460c      	mov	r4, r1
 8018c7c:	2001      	movs	r0, #1
 8018c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c82:	e7a5      	b.n	8018bd0 <_svfiprintf_r+0xd4>
 8018c84:	2300      	movs	r3, #0
 8018c86:	f04f 0c0a 	mov.w	ip, #10
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	3401      	adds	r4, #1
 8018c8e:	9305      	str	r3, [sp, #20]
 8018c90:	4620      	mov	r0, r4
 8018c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c96:	3a30      	subs	r2, #48	; 0x30
 8018c98:	2a09      	cmp	r2, #9
 8018c9a:	d903      	bls.n	8018ca4 <_svfiprintf_r+0x1a8>
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d0c5      	beq.n	8018c2c <_svfiprintf_r+0x130>
 8018ca0:	9105      	str	r1, [sp, #20]
 8018ca2:	e7c3      	b.n	8018c2c <_svfiprintf_r+0x130>
 8018ca4:	4604      	mov	r4, r0
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cac:	e7f0      	b.n	8018c90 <_svfiprintf_r+0x194>
 8018cae:	ab03      	add	r3, sp, #12
 8018cb0:	9300      	str	r3, [sp, #0]
 8018cb2:	462a      	mov	r2, r5
 8018cb4:	4638      	mov	r0, r7
 8018cb6:	4b0f      	ldr	r3, [pc, #60]	; (8018cf4 <_svfiprintf_r+0x1f8>)
 8018cb8:	a904      	add	r1, sp, #16
 8018cba:	f3af 8000 	nop.w
 8018cbe:	1c42      	adds	r2, r0, #1
 8018cc0:	4606      	mov	r6, r0
 8018cc2:	d1d6      	bne.n	8018c72 <_svfiprintf_r+0x176>
 8018cc4:	89ab      	ldrh	r3, [r5, #12]
 8018cc6:	065b      	lsls	r3, r3, #25
 8018cc8:	f53f af2c 	bmi.w	8018b24 <_svfiprintf_r+0x28>
 8018ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cce:	b01d      	add	sp, #116	; 0x74
 8018cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cd4:	ab03      	add	r3, sp, #12
 8018cd6:	9300      	str	r3, [sp, #0]
 8018cd8:	462a      	mov	r2, r5
 8018cda:	4638      	mov	r0, r7
 8018cdc:	4b05      	ldr	r3, [pc, #20]	; (8018cf4 <_svfiprintf_r+0x1f8>)
 8018cde:	a904      	add	r1, sp, #16
 8018ce0:	f000 f9d4 	bl	801908c <_printf_i>
 8018ce4:	e7eb      	b.n	8018cbe <_svfiprintf_r+0x1c2>
 8018ce6:	bf00      	nop
 8018ce8:	0801b18c 	.word	0x0801b18c
 8018cec:	0801b196 	.word	0x0801b196
 8018cf0:	00000000 	.word	0x00000000
 8018cf4:	08018a45 	.word	0x08018a45
 8018cf8:	0801b192 	.word	0x0801b192

08018cfc <__sfputc_r>:
 8018cfc:	6893      	ldr	r3, [r2, #8]
 8018cfe:	b410      	push	{r4}
 8018d00:	3b01      	subs	r3, #1
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	6093      	str	r3, [r2, #8]
 8018d06:	da07      	bge.n	8018d18 <__sfputc_r+0x1c>
 8018d08:	6994      	ldr	r4, [r2, #24]
 8018d0a:	42a3      	cmp	r3, r4
 8018d0c:	db01      	blt.n	8018d12 <__sfputc_r+0x16>
 8018d0e:	290a      	cmp	r1, #10
 8018d10:	d102      	bne.n	8018d18 <__sfputc_r+0x1c>
 8018d12:	bc10      	pop	{r4}
 8018d14:	f7ff bb4c 	b.w	80183b0 <__swbuf_r>
 8018d18:	6813      	ldr	r3, [r2, #0]
 8018d1a:	1c58      	adds	r0, r3, #1
 8018d1c:	6010      	str	r0, [r2, #0]
 8018d1e:	7019      	strb	r1, [r3, #0]
 8018d20:	4608      	mov	r0, r1
 8018d22:	bc10      	pop	{r4}
 8018d24:	4770      	bx	lr

08018d26 <__sfputs_r>:
 8018d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d28:	4606      	mov	r6, r0
 8018d2a:	460f      	mov	r7, r1
 8018d2c:	4614      	mov	r4, r2
 8018d2e:	18d5      	adds	r5, r2, r3
 8018d30:	42ac      	cmp	r4, r5
 8018d32:	d101      	bne.n	8018d38 <__sfputs_r+0x12>
 8018d34:	2000      	movs	r0, #0
 8018d36:	e007      	b.n	8018d48 <__sfputs_r+0x22>
 8018d38:	463a      	mov	r2, r7
 8018d3a:	4630      	mov	r0, r6
 8018d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d40:	f7ff ffdc 	bl	8018cfc <__sfputc_r>
 8018d44:	1c43      	adds	r3, r0, #1
 8018d46:	d1f3      	bne.n	8018d30 <__sfputs_r+0xa>
 8018d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018d4c <_vfiprintf_r>:
 8018d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d50:	460d      	mov	r5, r1
 8018d52:	4614      	mov	r4, r2
 8018d54:	4698      	mov	r8, r3
 8018d56:	4606      	mov	r6, r0
 8018d58:	b09d      	sub	sp, #116	; 0x74
 8018d5a:	b118      	cbz	r0, 8018d64 <_vfiprintf_r+0x18>
 8018d5c:	6983      	ldr	r3, [r0, #24]
 8018d5e:	b90b      	cbnz	r3, 8018d64 <_vfiprintf_r+0x18>
 8018d60:	f7ff fd2a 	bl	80187b8 <__sinit>
 8018d64:	4b89      	ldr	r3, [pc, #548]	; (8018f8c <_vfiprintf_r+0x240>)
 8018d66:	429d      	cmp	r5, r3
 8018d68:	d11b      	bne.n	8018da2 <_vfiprintf_r+0x56>
 8018d6a:	6875      	ldr	r5, [r6, #4]
 8018d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018d6e:	07d9      	lsls	r1, r3, #31
 8018d70:	d405      	bmi.n	8018d7e <_vfiprintf_r+0x32>
 8018d72:	89ab      	ldrh	r3, [r5, #12]
 8018d74:	059a      	lsls	r2, r3, #22
 8018d76:	d402      	bmi.n	8018d7e <_vfiprintf_r+0x32>
 8018d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018d7a:	f7ff f824 	bl	8017dc6 <__retarget_lock_acquire_recursive>
 8018d7e:	89ab      	ldrh	r3, [r5, #12]
 8018d80:	071b      	lsls	r3, r3, #28
 8018d82:	d501      	bpl.n	8018d88 <_vfiprintf_r+0x3c>
 8018d84:	692b      	ldr	r3, [r5, #16]
 8018d86:	b9eb      	cbnz	r3, 8018dc4 <_vfiprintf_r+0x78>
 8018d88:	4629      	mov	r1, r5
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f7ff fb62 	bl	8018454 <__swsetup_r>
 8018d90:	b1c0      	cbz	r0, 8018dc4 <_vfiprintf_r+0x78>
 8018d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018d94:	07dc      	lsls	r4, r3, #31
 8018d96:	d50e      	bpl.n	8018db6 <_vfiprintf_r+0x6a>
 8018d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d9c:	b01d      	add	sp, #116	; 0x74
 8018d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018da2:	4b7b      	ldr	r3, [pc, #492]	; (8018f90 <_vfiprintf_r+0x244>)
 8018da4:	429d      	cmp	r5, r3
 8018da6:	d101      	bne.n	8018dac <_vfiprintf_r+0x60>
 8018da8:	68b5      	ldr	r5, [r6, #8]
 8018daa:	e7df      	b.n	8018d6c <_vfiprintf_r+0x20>
 8018dac:	4b79      	ldr	r3, [pc, #484]	; (8018f94 <_vfiprintf_r+0x248>)
 8018dae:	429d      	cmp	r5, r3
 8018db0:	bf08      	it	eq
 8018db2:	68f5      	ldreq	r5, [r6, #12]
 8018db4:	e7da      	b.n	8018d6c <_vfiprintf_r+0x20>
 8018db6:	89ab      	ldrh	r3, [r5, #12]
 8018db8:	0598      	lsls	r0, r3, #22
 8018dba:	d4ed      	bmi.n	8018d98 <_vfiprintf_r+0x4c>
 8018dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018dbe:	f7ff f803 	bl	8017dc8 <__retarget_lock_release_recursive>
 8018dc2:	e7e9      	b.n	8018d98 <_vfiprintf_r+0x4c>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8018dc8:	2320      	movs	r3, #32
 8018dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018dce:	2330      	movs	r3, #48	; 0x30
 8018dd0:	f04f 0901 	mov.w	r9, #1
 8018dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8018dd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8018f98 <_vfiprintf_r+0x24c>
 8018ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018de0:	4623      	mov	r3, r4
 8018de2:	469a      	mov	sl, r3
 8018de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018de8:	b10a      	cbz	r2, 8018dee <_vfiprintf_r+0xa2>
 8018dea:	2a25      	cmp	r2, #37	; 0x25
 8018dec:	d1f9      	bne.n	8018de2 <_vfiprintf_r+0x96>
 8018dee:	ebba 0b04 	subs.w	fp, sl, r4
 8018df2:	d00b      	beq.n	8018e0c <_vfiprintf_r+0xc0>
 8018df4:	465b      	mov	r3, fp
 8018df6:	4622      	mov	r2, r4
 8018df8:	4629      	mov	r1, r5
 8018dfa:	4630      	mov	r0, r6
 8018dfc:	f7ff ff93 	bl	8018d26 <__sfputs_r>
 8018e00:	3001      	adds	r0, #1
 8018e02:	f000 80aa 	beq.w	8018f5a <_vfiprintf_r+0x20e>
 8018e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e08:	445a      	add	r2, fp
 8018e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8018e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	f000 80a2 	beq.w	8018f5a <_vfiprintf_r+0x20e>
 8018e16:	2300      	movs	r3, #0
 8018e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e20:	f10a 0a01 	add.w	sl, sl, #1
 8018e24:	9304      	str	r3, [sp, #16]
 8018e26:	9307      	str	r3, [sp, #28]
 8018e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8018e2e:	4654      	mov	r4, sl
 8018e30:	2205      	movs	r2, #5
 8018e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e36:	4858      	ldr	r0, [pc, #352]	; (8018f98 <_vfiprintf_r+0x24c>)
 8018e38:	f000 faf0 	bl	801941c <memchr>
 8018e3c:	9a04      	ldr	r2, [sp, #16]
 8018e3e:	b9d8      	cbnz	r0, 8018e78 <_vfiprintf_r+0x12c>
 8018e40:	06d1      	lsls	r1, r2, #27
 8018e42:	bf44      	itt	mi
 8018e44:	2320      	movmi	r3, #32
 8018e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e4a:	0713      	lsls	r3, r2, #28
 8018e4c:	bf44      	itt	mi
 8018e4e:	232b      	movmi	r3, #43	; 0x2b
 8018e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e54:	f89a 3000 	ldrb.w	r3, [sl]
 8018e58:	2b2a      	cmp	r3, #42	; 0x2a
 8018e5a:	d015      	beq.n	8018e88 <_vfiprintf_r+0x13c>
 8018e5c:	4654      	mov	r4, sl
 8018e5e:	2000      	movs	r0, #0
 8018e60:	f04f 0c0a 	mov.w	ip, #10
 8018e64:	9a07      	ldr	r2, [sp, #28]
 8018e66:	4621      	mov	r1, r4
 8018e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e6c:	3b30      	subs	r3, #48	; 0x30
 8018e6e:	2b09      	cmp	r3, #9
 8018e70:	d94e      	bls.n	8018f10 <_vfiprintf_r+0x1c4>
 8018e72:	b1b0      	cbz	r0, 8018ea2 <_vfiprintf_r+0x156>
 8018e74:	9207      	str	r2, [sp, #28]
 8018e76:	e014      	b.n	8018ea2 <_vfiprintf_r+0x156>
 8018e78:	eba0 0308 	sub.w	r3, r0, r8
 8018e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8018e80:	4313      	orrs	r3, r2
 8018e82:	46a2      	mov	sl, r4
 8018e84:	9304      	str	r3, [sp, #16]
 8018e86:	e7d2      	b.n	8018e2e <_vfiprintf_r+0xe2>
 8018e88:	9b03      	ldr	r3, [sp, #12]
 8018e8a:	1d19      	adds	r1, r3, #4
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	9103      	str	r1, [sp, #12]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	bfbb      	ittet	lt
 8018e94:	425b      	neglt	r3, r3
 8018e96:	f042 0202 	orrlt.w	r2, r2, #2
 8018e9a:	9307      	strge	r3, [sp, #28]
 8018e9c:	9307      	strlt	r3, [sp, #28]
 8018e9e:	bfb8      	it	lt
 8018ea0:	9204      	strlt	r2, [sp, #16]
 8018ea2:	7823      	ldrb	r3, [r4, #0]
 8018ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8018ea6:	d10c      	bne.n	8018ec2 <_vfiprintf_r+0x176>
 8018ea8:	7863      	ldrb	r3, [r4, #1]
 8018eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8018eac:	d135      	bne.n	8018f1a <_vfiprintf_r+0x1ce>
 8018eae:	9b03      	ldr	r3, [sp, #12]
 8018eb0:	3402      	adds	r4, #2
 8018eb2:	1d1a      	adds	r2, r3, #4
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	9203      	str	r2, [sp, #12]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	bfb8      	it	lt
 8018ebc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018ec0:	9305      	str	r3, [sp, #20]
 8018ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018fa8 <_vfiprintf_r+0x25c>
 8018ec6:	2203      	movs	r2, #3
 8018ec8:	4650      	mov	r0, sl
 8018eca:	7821      	ldrb	r1, [r4, #0]
 8018ecc:	f000 faa6 	bl	801941c <memchr>
 8018ed0:	b140      	cbz	r0, 8018ee4 <_vfiprintf_r+0x198>
 8018ed2:	2340      	movs	r3, #64	; 0x40
 8018ed4:	eba0 000a 	sub.w	r0, r0, sl
 8018ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8018edc:	9b04      	ldr	r3, [sp, #16]
 8018ede:	3401      	adds	r4, #1
 8018ee0:	4303      	orrs	r3, r0
 8018ee2:	9304      	str	r3, [sp, #16]
 8018ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ee8:	2206      	movs	r2, #6
 8018eea:	482c      	ldr	r0, [pc, #176]	; (8018f9c <_vfiprintf_r+0x250>)
 8018eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018ef0:	f000 fa94 	bl	801941c <memchr>
 8018ef4:	2800      	cmp	r0, #0
 8018ef6:	d03f      	beq.n	8018f78 <_vfiprintf_r+0x22c>
 8018ef8:	4b29      	ldr	r3, [pc, #164]	; (8018fa0 <_vfiprintf_r+0x254>)
 8018efa:	bb1b      	cbnz	r3, 8018f44 <_vfiprintf_r+0x1f8>
 8018efc:	9b03      	ldr	r3, [sp, #12]
 8018efe:	3307      	adds	r3, #7
 8018f00:	f023 0307 	bic.w	r3, r3, #7
 8018f04:	3308      	adds	r3, #8
 8018f06:	9303      	str	r3, [sp, #12]
 8018f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f0a:	443b      	add	r3, r7
 8018f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8018f0e:	e767      	b.n	8018de0 <_vfiprintf_r+0x94>
 8018f10:	460c      	mov	r4, r1
 8018f12:	2001      	movs	r0, #1
 8018f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f18:	e7a5      	b.n	8018e66 <_vfiprintf_r+0x11a>
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	f04f 0c0a 	mov.w	ip, #10
 8018f20:	4619      	mov	r1, r3
 8018f22:	3401      	adds	r4, #1
 8018f24:	9305      	str	r3, [sp, #20]
 8018f26:	4620      	mov	r0, r4
 8018f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f2c:	3a30      	subs	r2, #48	; 0x30
 8018f2e:	2a09      	cmp	r2, #9
 8018f30:	d903      	bls.n	8018f3a <_vfiprintf_r+0x1ee>
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d0c5      	beq.n	8018ec2 <_vfiprintf_r+0x176>
 8018f36:	9105      	str	r1, [sp, #20]
 8018f38:	e7c3      	b.n	8018ec2 <_vfiprintf_r+0x176>
 8018f3a:	4604      	mov	r4, r0
 8018f3c:	2301      	movs	r3, #1
 8018f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f42:	e7f0      	b.n	8018f26 <_vfiprintf_r+0x1da>
 8018f44:	ab03      	add	r3, sp, #12
 8018f46:	9300      	str	r3, [sp, #0]
 8018f48:	462a      	mov	r2, r5
 8018f4a:	4630      	mov	r0, r6
 8018f4c:	4b15      	ldr	r3, [pc, #84]	; (8018fa4 <_vfiprintf_r+0x258>)
 8018f4e:	a904      	add	r1, sp, #16
 8018f50:	f3af 8000 	nop.w
 8018f54:	4607      	mov	r7, r0
 8018f56:	1c78      	adds	r0, r7, #1
 8018f58:	d1d6      	bne.n	8018f08 <_vfiprintf_r+0x1bc>
 8018f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f5c:	07d9      	lsls	r1, r3, #31
 8018f5e:	d405      	bmi.n	8018f6c <_vfiprintf_r+0x220>
 8018f60:	89ab      	ldrh	r3, [r5, #12]
 8018f62:	059a      	lsls	r2, r3, #22
 8018f64:	d402      	bmi.n	8018f6c <_vfiprintf_r+0x220>
 8018f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f68:	f7fe ff2e 	bl	8017dc8 <__retarget_lock_release_recursive>
 8018f6c:	89ab      	ldrh	r3, [r5, #12]
 8018f6e:	065b      	lsls	r3, r3, #25
 8018f70:	f53f af12 	bmi.w	8018d98 <_vfiprintf_r+0x4c>
 8018f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f76:	e711      	b.n	8018d9c <_vfiprintf_r+0x50>
 8018f78:	ab03      	add	r3, sp, #12
 8018f7a:	9300      	str	r3, [sp, #0]
 8018f7c:	462a      	mov	r2, r5
 8018f7e:	4630      	mov	r0, r6
 8018f80:	4b08      	ldr	r3, [pc, #32]	; (8018fa4 <_vfiprintf_r+0x258>)
 8018f82:	a904      	add	r1, sp, #16
 8018f84:	f000 f882 	bl	801908c <_printf_i>
 8018f88:	e7e4      	b.n	8018f54 <_vfiprintf_r+0x208>
 8018f8a:	bf00      	nop
 8018f8c:	0801b14c 	.word	0x0801b14c
 8018f90:	0801b16c 	.word	0x0801b16c
 8018f94:	0801b12c 	.word	0x0801b12c
 8018f98:	0801b18c 	.word	0x0801b18c
 8018f9c:	0801b196 	.word	0x0801b196
 8018fa0:	00000000 	.word	0x00000000
 8018fa4:	08018d27 	.word	0x08018d27
 8018fa8:	0801b192 	.word	0x0801b192

08018fac <_printf_common>:
 8018fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fb0:	4616      	mov	r6, r2
 8018fb2:	4699      	mov	r9, r3
 8018fb4:	688a      	ldr	r2, [r1, #8]
 8018fb6:	690b      	ldr	r3, [r1, #16]
 8018fb8:	4607      	mov	r7, r0
 8018fba:	4293      	cmp	r3, r2
 8018fbc:	bfb8      	it	lt
 8018fbe:	4613      	movlt	r3, r2
 8018fc0:	6033      	str	r3, [r6, #0]
 8018fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018fc6:	460c      	mov	r4, r1
 8018fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018fcc:	b10a      	cbz	r2, 8018fd2 <_printf_common+0x26>
 8018fce:	3301      	adds	r3, #1
 8018fd0:	6033      	str	r3, [r6, #0]
 8018fd2:	6823      	ldr	r3, [r4, #0]
 8018fd4:	0699      	lsls	r1, r3, #26
 8018fd6:	bf42      	ittt	mi
 8018fd8:	6833      	ldrmi	r3, [r6, #0]
 8018fda:	3302      	addmi	r3, #2
 8018fdc:	6033      	strmi	r3, [r6, #0]
 8018fde:	6825      	ldr	r5, [r4, #0]
 8018fe0:	f015 0506 	ands.w	r5, r5, #6
 8018fe4:	d106      	bne.n	8018ff4 <_printf_common+0x48>
 8018fe6:	f104 0a19 	add.w	sl, r4, #25
 8018fea:	68e3      	ldr	r3, [r4, #12]
 8018fec:	6832      	ldr	r2, [r6, #0]
 8018fee:	1a9b      	subs	r3, r3, r2
 8018ff0:	42ab      	cmp	r3, r5
 8018ff2:	dc28      	bgt.n	8019046 <_printf_common+0x9a>
 8018ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018ff8:	1e13      	subs	r3, r2, #0
 8018ffa:	6822      	ldr	r2, [r4, #0]
 8018ffc:	bf18      	it	ne
 8018ffe:	2301      	movne	r3, #1
 8019000:	0692      	lsls	r2, r2, #26
 8019002:	d42d      	bmi.n	8019060 <_printf_common+0xb4>
 8019004:	4649      	mov	r1, r9
 8019006:	4638      	mov	r0, r7
 8019008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801900c:	47c0      	blx	r8
 801900e:	3001      	adds	r0, #1
 8019010:	d020      	beq.n	8019054 <_printf_common+0xa8>
 8019012:	6823      	ldr	r3, [r4, #0]
 8019014:	68e5      	ldr	r5, [r4, #12]
 8019016:	f003 0306 	and.w	r3, r3, #6
 801901a:	2b04      	cmp	r3, #4
 801901c:	bf18      	it	ne
 801901e:	2500      	movne	r5, #0
 8019020:	6832      	ldr	r2, [r6, #0]
 8019022:	f04f 0600 	mov.w	r6, #0
 8019026:	68a3      	ldr	r3, [r4, #8]
 8019028:	bf08      	it	eq
 801902a:	1aad      	subeq	r5, r5, r2
 801902c:	6922      	ldr	r2, [r4, #16]
 801902e:	bf08      	it	eq
 8019030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019034:	4293      	cmp	r3, r2
 8019036:	bfc4      	itt	gt
 8019038:	1a9b      	subgt	r3, r3, r2
 801903a:	18ed      	addgt	r5, r5, r3
 801903c:	341a      	adds	r4, #26
 801903e:	42b5      	cmp	r5, r6
 8019040:	d11a      	bne.n	8019078 <_printf_common+0xcc>
 8019042:	2000      	movs	r0, #0
 8019044:	e008      	b.n	8019058 <_printf_common+0xac>
 8019046:	2301      	movs	r3, #1
 8019048:	4652      	mov	r2, sl
 801904a:	4649      	mov	r1, r9
 801904c:	4638      	mov	r0, r7
 801904e:	47c0      	blx	r8
 8019050:	3001      	adds	r0, #1
 8019052:	d103      	bne.n	801905c <_printf_common+0xb0>
 8019054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801905c:	3501      	adds	r5, #1
 801905e:	e7c4      	b.n	8018fea <_printf_common+0x3e>
 8019060:	2030      	movs	r0, #48	; 0x30
 8019062:	18e1      	adds	r1, r4, r3
 8019064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019068:	1c5a      	adds	r2, r3, #1
 801906a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801906e:	4422      	add	r2, r4
 8019070:	3302      	adds	r3, #2
 8019072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019076:	e7c5      	b.n	8019004 <_printf_common+0x58>
 8019078:	2301      	movs	r3, #1
 801907a:	4622      	mov	r2, r4
 801907c:	4649      	mov	r1, r9
 801907e:	4638      	mov	r0, r7
 8019080:	47c0      	blx	r8
 8019082:	3001      	adds	r0, #1
 8019084:	d0e6      	beq.n	8019054 <_printf_common+0xa8>
 8019086:	3601      	adds	r6, #1
 8019088:	e7d9      	b.n	801903e <_printf_common+0x92>
	...

0801908c <_printf_i>:
 801908c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019090:	460c      	mov	r4, r1
 8019092:	7e27      	ldrb	r7, [r4, #24]
 8019094:	4691      	mov	r9, r2
 8019096:	2f78      	cmp	r7, #120	; 0x78
 8019098:	4680      	mov	r8, r0
 801909a:	469a      	mov	sl, r3
 801909c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801909e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80190a2:	d807      	bhi.n	80190b4 <_printf_i+0x28>
 80190a4:	2f62      	cmp	r7, #98	; 0x62
 80190a6:	d80a      	bhi.n	80190be <_printf_i+0x32>
 80190a8:	2f00      	cmp	r7, #0
 80190aa:	f000 80d9 	beq.w	8019260 <_printf_i+0x1d4>
 80190ae:	2f58      	cmp	r7, #88	; 0x58
 80190b0:	f000 80a4 	beq.w	80191fc <_printf_i+0x170>
 80190b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80190b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80190bc:	e03a      	b.n	8019134 <_printf_i+0xa8>
 80190be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80190c2:	2b15      	cmp	r3, #21
 80190c4:	d8f6      	bhi.n	80190b4 <_printf_i+0x28>
 80190c6:	a001      	add	r0, pc, #4	; (adr r0, 80190cc <_printf_i+0x40>)
 80190c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80190cc:	08019125 	.word	0x08019125
 80190d0:	08019139 	.word	0x08019139
 80190d4:	080190b5 	.word	0x080190b5
 80190d8:	080190b5 	.word	0x080190b5
 80190dc:	080190b5 	.word	0x080190b5
 80190e0:	080190b5 	.word	0x080190b5
 80190e4:	08019139 	.word	0x08019139
 80190e8:	080190b5 	.word	0x080190b5
 80190ec:	080190b5 	.word	0x080190b5
 80190f0:	080190b5 	.word	0x080190b5
 80190f4:	080190b5 	.word	0x080190b5
 80190f8:	08019247 	.word	0x08019247
 80190fc:	08019169 	.word	0x08019169
 8019100:	08019229 	.word	0x08019229
 8019104:	080190b5 	.word	0x080190b5
 8019108:	080190b5 	.word	0x080190b5
 801910c:	08019269 	.word	0x08019269
 8019110:	080190b5 	.word	0x080190b5
 8019114:	08019169 	.word	0x08019169
 8019118:	080190b5 	.word	0x080190b5
 801911c:	080190b5 	.word	0x080190b5
 8019120:	08019231 	.word	0x08019231
 8019124:	680b      	ldr	r3, [r1, #0]
 8019126:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801912a:	1d1a      	adds	r2, r3, #4
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	600a      	str	r2, [r1, #0]
 8019130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019134:	2301      	movs	r3, #1
 8019136:	e0a4      	b.n	8019282 <_printf_i+0x1f6>
 8019138:	6825      	ldr	r5, [r4, #0]
 801913a:	6808      	ldr	r0, [r1, #0]
 801913c:	062e      	lsls	r6, r5, #24
 801913e:	f100 0304 	add.w	r3, r0, #4
 8019142:	d50a      	bpl.n	801915a <_printf_i+0xce>
 8019144:	6805      	ldr	r5, [r0, #0]
 8019146:	600b      	str	r3, [r1, #0]
 8019148:	2d00      	cmp	r5, #0
 801914a:	da03      	bge.n	8019154 <_printf_i+0xc8>
 801914c:	232d      	movs	r3, #45	; 0x2d
 801914e:	426d      	negs	r5, r5
 8019150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019154:	230a      	movs	r3, #10
 8019156:	485e      	ldr	r0, [pc, #376]	; (80192d0 <_printf_i+0x244>)
 8019158:	e019      	b.n	801918e <_printf_i+0x102>
 801915a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801915e:	6805      	ldr	r5, [r0, #0]
 8019160:	600b      	str	r3, [r1, #0]
 8019162:	bf18      	it	ne
 8019164:	b22d      	sxthne	r5, r5
 8019166:	e7ef      	b.n	8019148 <_printf_i+0xbc>
 8019168:	680b      	ldr	r3, [r1, #0]
 801916a:	6825      	ldr	r5, [r4, #0]
 801916c:	1d18      	adds	r0, r3, #4
 801916e:	6008      	str	r0, [r1, #0]
 8019170:	0628      	lsls	r0, r5, #24
 8019172:	d501      	bpl.n	8019178 <_printf_i+0xec>
 8019174:	681d      	ldr	r5, [r3, #0]
 8019176:	e002      	b.n	801917e <_printf_i+0xf2>
 8019178:	0669      	lsls	r1, r5, #25
 801917a:	d5fb      	bpl.n	8019174 <_printf_i+0xe8>
 801917c:	881d      	ldrh	r5, [r3, #0]
 801917e:	2f6f      	cmp	r7, #111	; 0x6f
 8019180:	bf0c      	ite	eq
 8019182:	2308      	moveq	r3, #8
 8019184:	230a      	movne	r3, #10
 8019186:	4852      	ldr	r0, [pc, #328]	; (80192d0 <_printf_i+0x244>)
 8019188:	2100      	movs	r1, #0
 801918a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801918e:	6866      	ldr	r6, [r4, #4]
 8019190:	2e00      	cmp	r6, #0
 8019192:	bfa8      	it	ge
 8019194:	6821      	ldrge	r1, [r4, #0]
 8019196:	60a6      	str	r6, [r4, #8]
 8019198:	bfa4      	itt	ge
 801919a:	f021 0104 	bicge.w	r1, r1, #4
 801919e:	6021      	strge	r1, [r4, #0]
 80191a0:	b90d      	cbnz	r5, 80191a6 <_printf_i+0x11a>
 80191a2:	2e00      	cmp	r6, #0
 80191a4:	d04d      	beq.n	8019242 <_printf_i+0x1b6>
 80191a6:	4616      	mov	r6, r2
 80191a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80191ac:	fb03 5711 	mls	r7, r3, r1, r5
 80191b0:	5dc7      	ldrb	r7, [r0, r7]
 80191b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80191b6:	462f      	mov	r7, r5
 80191b8:	42bb      	cmp	r3, r7
 80191ba:	460d      	mov	r5, r1
 80191bc:	d9f4      	bls.n	80191a8 <_printf_i+0x11c>
 80191be:	2b08      	cmp	r3, #8
 80191c0:	d10b      	bne.n	80191da <_printf_i+0x14e>
 80191c2:	6823      	ldr	r3, [r4, #0]
 80191c4:	07df      	lsls	r7, r3, #31
 80191c6:	d508      	bpl.n	80191da <_printf_i+0x14e>
 80191c8:	6923      	ldr	r3, [r4, #16]
 80191ca:	6861      	ldr	r1, [r4, #4]
 80191cc:	4299      	cmp	r1, r3
 80191ce:	bfde      	ittt	le
 80191d0:	2330      	movle	r3, #48	; 0x30
 80191d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80191d6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80191da:	1b92      	subs	r2, r2, r6
 80191dc:	6122      	str	r2, [r4, #16]
 80191de:	464b      	mov	r3, r9
 80191e0:	4621      	mov	r1, r4
 80191e2:	4640      	mov	r0, r8
 80191e4:	f8cd a000 	str.w	sl, [sp]
 80191e8:	aa03      	add	r2, sp, #12
 80191ea:	f7ff fedf 	bl	8018fac <_printf_common>
 80191ee:	3001      	adds	r0, #1
 80191f0:	d14c      	bne.n	801928c <_printf_i+0x200>
 80191f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80191f6:	b004      	add	sp, #16
 80191f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191fc:	4834      	ldr	r0, [pc, #208]	; (80192d0 <_printf_i+0x244>)
 80191fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019202:	680e      	ldr	r6, [r1, #0]
 8019204:	6823      	ldr	r3, [r4, #0]
 8019206:	f856 5b04 	ldr.w	r5, [r6], #4
 801920a:	061f      	lsls	r7, r3, #24
 801920c:	600e      	str	r6, [r1, #0]
 801920e:	d514      	bpl.n	801923a <_printf_i+0x1ae>
 8019210:	07d9      	lsls	r1, r3, #31
 8019212:	bf44      	itt	mi
 8019214:	f043 0320 	orrmi.w	r3, r3, #32
 8019218:	6023      	strmi	r3, [r4, #0]
 801921a:	b91d      	cbnz	r5, 8019224 <_printf_i+0x198>
 801921c:	6823      	ldr	r3, [r4, #0]
 801921e:	f023 0320 	bic.w	r3, r3, #32
 8019222:	6023      	str	r3, [r4, #0]
 8019224:	2310      	movs	r3, #16
 8019226:	e7af      	b.n	8019188 <_printf_i+0xfc>
 8019228:	6823      	ldr	r3, [r4, #0]
 801922a:	f043 0320 	orr.w	r3, r3, #32
 801922e:	6023      	str	r3, [r4, #0]
 8019230:	2378      	movs	r3, #120	; 0x78
 8019232:	4828      	ldr	r0, [pc, #160]	; (80192d4 <_printf_i+0x248>)
 8019234:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019238:	e7e3      	b.n	8019202 <_printf_i+0x176>
 801923a:	065e      	lsls	r6, r3, #25
 801923c:	bf48      	it	mi
 801923e:	b2ad      	uxthmi	r5, r5
 8019240:	e7e6      	b.n	8019210 <_printf_i+0x184>
 8019242:	4616      	mov	r6, r2
 8019244:	e7bb      	b.n	80191be <_printf_i+0x132>
 8019246:	680b      	ldr	r3, [r1, #0]
 8019248:	6826      	ldr	r6, [r4, #0]
 801924a:	1d1d      	adds	r5, r3, #4
 801924c:	6960      	ldr	r0, [r4, #20]
 801924e:	600d      	str	r5, [r1, #0]
 8019250:	0635      	lsls	r5, r6, #24
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	d501      	bpl.n	801925a <_printf_i+0x1ce>
 8019256:	6018      	str	r0, [r3, #0]
 8019258:	e002      	b.n	8019260 <_printf_i+0x1d4>
 801925a:	0671      	lsls	r1, r6, #25
 801925c:	d5fb      	bpl.n	8019256 <_printf_i+0x1ca>
 801925e:	8018      	strh	r0, [r3, #0]
 8019260:	2300      	movs	r3, #0
 8019262:	4616      	mov	r6, r2
 8019264:	6123      	str	r3, [r4, #16]
 8019266:	e7ba      	b.n	80191de <_printf_i+0x152>
 8019268:	680b      	ldr	r3, [r1, #0]
 801926a:	1d1a      	adds	r2, r3, #4
 801926c:	600a      	str	r2, [r1, #0]
 801926e:	681e      	ldr	r6, [r3, #0]
 8019270:	2100      	movs	r1, #0
 8019272:	4630      	mov	r0, r6
 8019274:	6862      	ldr	r2, [r4, #4]
 8019276:	f000 f8d1 	bl	801941c <memchr>
 801927a:	b108      	cbz	r0, 8019280 <_printf_i+0x1f4>
 801927c:	1b80      	subs	r0, r0, r6
 801927e:	6060      	str	r0, [r4, #4]
 8019280:	6863      	ldr	r3, [r4, #4]
 8019282:	6123      	str	r3, [r4, #16]
 8019284:	2300      	movs	r3, #0
 8019286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801928a:	e7a8      	b.n	80191de <_printf_i+0x152>
 801928c:	4632      	mov	r2, r6
 801928e:	4649      	mov	r1, r9
 8019290:	4640      	mov	r0, r8
 8019292:	6923      	ldr	r3, [r4, #16]
 8019294:	47d0      	blx	sl
 8019296:	3001      	adds	r0, #1
 8019298:	d0ab      	beq.n	80191f2 <_printf_i+0x166>
 801929a:	6823      	ldr	r3, [r4, #0]
 801929c:	079b      	lsls	r3, r3, #30
 801929e:	d413      	bmi.n	80192c8 <_printf_i+0x23c>
 80192a0:	68e0      	ldr	r0, [r4, #12]
 80192a2:	9b03      	ldr	r3, [sp, #12]
 80192a4:	4298      	cmp	r0, r3
 80192a6:	bfb8      	it	lt
 80192a8:	4618      	movlt	r0, r3
 80192aa:	e7a4      	b.n	80191f6 <_printf_i+0x16a>
 80192ac:	2301      	movs	r3, #1
 80192ae:	4632      	mov	r2, r6
 80192b0:	4649      	mov	r1, r9
 80192b2:	4640      	mov	r0, r8
 80192b4:	47d0      	blx	sl
 80192b6:	3001      	adds	r0, #1
 80192b8:	d09b      	beq.n	80191f2 <_printf_i+0x166>
 80192ba:	3501      	adds	r5, #1
 80192bc:	68e3      	ldr	r3, [r4, #12]
 80192be:	9903      	ldr	r1, [sp, #12]
 80192c0:	1a5b      	subs	r3, r3, r1
 80192c2:	42ab      	cmp	r3, r5
 80192c4:	dcf2      	bgt.n	80192ac <_printf_i+0x220>
 80192c6:	e7eb      	b.n	80192a0 <_printf_i+0x214>
 80192c8:	2500      	movs	r5, #0
 80192ca:	f104 0619 	add.w	r6, r4, #25
 80192ce:	e7f5      	b.n	80192bc <_printf_i+0x230>
 80192d0:	0801b19d 	.word	0x0801b19d
 80192d4:	0801b1ae 	.word	0x0801b1ae

080192d8 <__sread>:
 80192d8:	b510      	push	{r4, lr}
 80192da:	460c      	mov	r4, r1
 80192dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80192e0:	f000 f8b2 	bl	8019448 <_read_r>
 80192e4:	2800      	cmp	r0, #0
 80192e6:	bfab      	itete	ge
 80192e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80192ea:	89a3      	ldrhlt	r3, [r4, #12]
 80192ec:	181b      	addge	r3, r3, r0
 80192ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80192f2:	bfac      	ite	ge
 80192f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80192f6:	81a3      	strhlt	r3, [r4, #12]
 80192f8:	bd10      	pop	{r4, pc}

080192fa <__swrite>:
 80192fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192fe:	461f      	mov	r7, r3
 8019300:	898b      	ldrh	r3, [r1, #12]
 8019302:	4605      	mov	r5, r0
 8019304:	05db      	lsls	r3, r3, #23
 8019306:	460c      	mov	r4, r1
 8019308:	4616      	mov	r6, r2
 801930a:	d505      	bpl.n	8019318 <__swrite+0x1e>
 801930c:	2302      	movs	r3, #2
 801930e:	2200      	movs	r2, #0
 8019310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019314:	f000 f870 	bl	80193f8 <_lseek_r>
 8019318:	89a3      	ldrh	r3, [r4, #12]
 801931a:	4632      	mov	r2, r6
 801931c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019320:	81a3      	strh	r3, [r4, #12]
 8019322:	4628      	mov	r0, r5
 8019324:	463b      	mov	r3, r7
 8019326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801932a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801932e:	f000 b817 	b.w	8019360 <_write_r>

08019332 <__sseek>:
 8019332:	b510      	push	{r4, lr}
 8019334:	460c      	mov	r4, r1
 8019336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801933a:	f000 f85d 	bl	80193f8 <_lseek_r>
 801933e:	1c43      	adds	r3, r0, #1
 8019340:	89a3      	ldrh	r3, [r4, #12]
 8019342:	bf15      	itete	ne
 8019344:	6560      	strne	r0, [r4, #84]	; 0x54
 8019346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801934a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801934e:	81a3      	strheq	r3, [r4, #12]
 8019350:	bf18      	it	ne
 8019352:	81a3      	strhne	r3, [r4, #12]
 8019354:	bd10      	pop	{r4, pc}

08019356 <__sclose>:
 8019356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801935a:	f000 b81b 	b.w	8019394 <_close_r>
	...

08019360 <_write_r>:
 8019360:	b538      	push	{r3, r4, r5, lr}
 8019362:	4604      	mov	r4, r0
 8019364:	4608      	mov	r0, r1
 8019366:	4611      	mov	r1, r2
 8019368:	2200      	movs	r2, #0
 801936a:	4d05      	ldr	r5, [pc, #20]	; (8019380 <_write_r+0x20>)
 801936c:	602a      	str	r2, [r5, #0]
 801936e:	461a      	mov	r2, r3
 8019370:	f7e9 fda8 	bl	8002ec4 <_write>
 8019374:	1c43      	adds	r3, r0, #1
 8019376:	d102      	bne.n	801937e <_write_r+0x1e>
 8019378:	682b      	ldr	r3, [r5, #0]
 801937a:	b103      	cbz	r3, 801937e <_write_r+0x1e>
 801937c:	6023      	str	r3, [r4, #0]
 801937e:	bd38      	pop	{r3, r4, r5, pc}
 8019380:	2000d6a4 	.word	0x2000d6a4

08019384 <abort>:
 8019384:	2006      	movs	r0, #6
 8019386:	b508      	push	{r3, lr}
 8019388:	f000 f898 	bl	80194bc <raise>
 801938c:	2001      	movs	r0, #1
 801938e:	f7e9 fd72 	bl	8002e76 <_exit>
	...

08019394 <_close_r>:
 8019394:	b538      	push	{r3, r4, r5, lr}
 8019396:	2300      	movs	r3, #0
 8019398:	4d05      	ldr	r5, [pc, #20]	; (80193b0 <_close_r+0x1c>)
 801939a:	4604      	mov	r4, r0
 801939c:	4608      	mov	r0, r1
 801939e:	602b      	str	r3, [r5, #0]
 80193a0:	f7e9 fde2 	bl	8002f68 <_close>
 80193a4:	1c43      	adds	r3, r0, #1
 80193a6:	d102      	bne.n	80193ae <_close_r+0x1a>
 80193a8:	682b      	ldr	r3, [r5, #0]
 80193aa:	b103      	cbz	r3, 80193ae <_close_r+0x1a>
 80193ac:	6023      	str	r3, [r4, #0]
 80193ae:	bd38      	pop	{r3, r4, r5, pc}
 80193b0:	2000d6a4 	.word	0x2000d6a4

080193b4 <_fstat_r>:
 80193b4:	b538      	push	{r3, r4, r5, lr}
 80193b6:	2300      	movs	r3, #0
 80193b8:	4d06      	ldr	r5, [pc, #24]	; (80193d4 <_fstat_r+0x20>)
 80193ba:	4604      	mov	r4, r0
 80193bc:	4608      	mov	r0, r1
 80193be:	4611      	mov	r1, r2
 80193c0:	602b      	str	r3, [r5, #0]
 80193c2:	f7e9 fddc 	bl	8002f7e <_fstat>
 80193c6:	1c43      	adds	r3, r0, #1
 80193c8:	d102      	bne.n	80193d0 <_fstat_r+0x1c>
 80193ca:	682b      	ldr	r3, [r5, #0]
 80193cc:	b103      	cbz	r3, 80193d0 <_fstat_r+0x1c>
 80193ce:	6023      	str	r3, [r4, #0]
 80193d0:	bd38      	pop	{r3, r4, r5, pc}
 80193d2:	bf00      	nop
 80193d4:	2000d6a4 	.word	0x2000d6a4

080193d8 <_isatty_r>:
 80193d8:	b538      	push	{r3, r4, r5, lr}
 80193da:	2300      	movs	r3, #0
 80193dc:	4d05      	ldr	r5, [pc, #20]	; (80193f4 <_isatty_r+0x1c>)
 80193de:	4604      	mov	r4, r0
 80193e0:	4608      	mov	r0, r1
 80193e2:	602b      	str	r3, [r5, #0]
 80193e4:	f7e9 fdda 	bl	8002f9c <_isatty>
 80193e8:	1c43      	adds	r3, r0, #1
 80193ea:	d102      	bne.n	80193f2 <_isatty_r+0x1a>
 80193ec:	682b      	ldr	r3, [r5, #0]
 80193ee:	b103      	cbz	r3, 80193f2 <_isatty_r+0x1a>
 80193f0:	6023      	str	r3, [r4, #0]
 80193f2:	bd38      	pop	{r3, r4, r5, pc}
 80193f4:	2000d6a4 	.word	0x2000d6a4

080193f8 <_lseek_r>:
 80193f8:	b538      	push	{r3, r4, r5, lr}
 80193fa:	4604      	mov	r4, r0
 80193fc:	4608      	mov	r0, r1
 80193fe:	4611      	mov	r1, r2
 8019400:	2200      	movs	r2, #0
 8019402:	4d05      	ldr	r5, [pc, #20]	; (8019418 <_lseek_r+0x20>)
 8019404:	602a      	str	r2, [r5, #0]
 8019406:	461a      	mov	r2, r3
 8019408:	f7e9 fdd2 	bl	8002fb0 <_lseek>
 801940c:	1c43      	adds	r3, r0, #1
 801940e:	d102      	bne.n	8019416 <_lseek_r+0x1e>
 8019410:	682b      	ldr	r3, [r5, #0]
 8019412:	b103      	cbz	r3, 8019416 <_lseek_r+0x1e>
 8019414:	6023      	str	r3, [r4, #0]
 8019416:	bd38      	pop	{r3, r4, r5, pc}
 8019418:	2000d6a4 	.word	0x2000d6a4

0801941c <memchr>:
 801941c:	4603      	mov	r3, r0
 801941e:	b510      	push	{r4, lr}
 8019420:	b2c9      	uxtb	r1, r1
 8019422:	4402      	add	r2, r0
 8019424:	4293      	cmp	r3, r2
 8019426:	4618      	mov	r0, r3
 8019428:	d101      	bne.n	801942e <memchr+0x12>
 801942a:	2000      	movs	r0, #0
 801942c:	e003      	b.n	8019436 <memchr+0x1a>
 801942e:	7804      	ldrb	r4, [r0, #0]
 8019430:	3301      	adds	r3, #1
 8019432:	428c      	cmp	r4, r1
 8019434:	d1f6      	bne.n	8019424 <memchr+0x8>
 8019436:	bd10      	pop	{r4, pc}

08019438 <_malloc_usable_size_r>:
 8019438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801943c:	1f18      	subs	r0, r3, #4
 801943e:	2b00      	cmp	r3, #0
 8019440:	bfbc      	itt	lt
 8019442:	580b      	ldrlt	r3, [r1, r0]
 8019444:	18c0      	addlt	r0, r0, r3
 8019446:	4770      	bx	lr

08019448 <_read_r>:
 8019448:	b538      	push	{r3, r4, r5, lr}
 801944a:	4604      	mov	r4, r0
 801944c:	4608      	mov	r0, r1
 801944e:	4611      	mov	r1, r2
 8019450:	2200      	movs	r2, #0
 8019452:	4d05      	ldr	r5, [pc, #20]	; (8019468 <_read_r+0x20>)
 8019454:	602a      	str	r2, [r5, #0]
 8019456:	461a      	mov	r2, r3
 8019458:	f7e9 fd17 	bl	8002e8a <_read>
 801945c:	1c43      	adds	r3, r0, #1
 801945e:	d102      	bne.n	8019466 <_read_r+0x1e>
 8019460:	682b      	ldr	r3, [r5, #0]
 8019462:	b103      	cbz	r3, 8019466 <_read_r+0x1e>
 8019464:	6023      	str	r3, [r4, #0]
 8019466:	bd38      	pop	{r3, r4, r5, pc}
 8019468:	2000d6a4 	.word	0x2000d6a4

0801946c <_raise_r>:
 801946c:	291f      	cmp	r1, #31
 801946e:	b538      	push	{r3, r4, r5, lr}
 8019470:	4604      	mov	r4, r0
 8019472:	460d      	mov	r5, r1
 8019474:	d904      	bls.n	8019480 <_raise_r+0x14>
 8019476:	2316      	movs	r3, #22
 8019478:	6003      	str	r3, [r0, #0]
 801947a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801947e:	bd38      	pop	{r3, r4, r5, pc}
 8019480:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019482:	b112      	cbz	r2, 801948a <_raise_r+0x1e>
 8019484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019488:	b94b      	cbnz	r3, 801949e <_raise_r+0x32>
 801948a:	4620      	mov	r0, r4
 801948c:	f000 f830 	bl	80194f0 <_getpid_r>
 8019490:	462a      	mov	r2, r5
 8019492:	4601      	mov	r1, r0
 8019494:	4620      	mov	r0, r4
 8019496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801949a:	f000 b817 	b.w	80194cc <_kill_r>
 801949e:	2b01      	cmp	r3, #1
 80194a0:	d00a      	beq.n	80194b8 <_raise_r+0x4c>
 80194a2:	1c59      	adds	r1, r3, #1
 80194a4:	d103      	bne.n	80194ae <_raise_r+0x42>
 80194a6:	2316      	movs	r3, #22
 80194a8:	6003      	str	r3, [r0, #0]
 80194aa:	2001      	movs	r0, #1
 80194ac:	e7e7      	b.n	801947e <_raise_r+0x12>
 80194ae:	2400      	movs	r4, #0
 80194b0:	4628      	mov	r0, r5
 80194b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80194b6:	4798      	blx	r3
 80194b8:	2000      	movs	r0, #0
 80194ba:	e7e0      	b.n	801947e <_raise_r+0x12>

080194bc <raise>:
 80194bc:	4b02      	ldr	r3, [pc, #8]	; (80194c8 <raise+0xc>)
 80194be:	4601      	mov	r1, r0
 80194c0:	6818      	ldr	r0, [r3, #0]
 80194c2:	f7ff bfd3 	b.w	801946c <_raise_r>
 80194c6:	bf00      	nop
 80194c8:	2000025c 	.word	0x2000025c

080194cc <_kill_r>:
 80194cc:	b538      	push	{r3, r4, r5, lr}
 80194ce:	2300      	movs	r3, #0
 80194d0:	4d06      	ldr	r5, [pc, #24]	; (80194ec <_kill_r+0x20>)
 80194d2:	4604      	mov	r4, r0
 80194d4:	4608      	mov	r0, r1
 80194d6:	4611      	mov	r1, r2
 80194d8:	602b      	str	r3, [r5, #0]
 80194da:	f7e9 fcbc 	bl	8002e56 <_kill>
 80194de:	1c43      	adds	r3, r0, #1
 80194e0:	d102      	bne.n	80194e8 <_kill_r+0x1c>
 80194e2:	682b      	ldr	r3, [r5, #0]
 80194e4:	b103      	cbz	r3, 80194e8 <_kill_r+0x1c>
 80194e6:	6023      	str	r3, [r4, #0]
 80194e8:	bd38      	pop	{r3, r4, r5, pc}
 80194ea:	bf00      	nop
 80194ec:	2000d6a4 	.word	0x2000d6a4

080194f0 <_getpid_r>:
 80194f0:	f7e9 bcaa 	b.w	8002e48 <_getpid>

080194f4 <_init>:
 80194f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194f6:	bf00      	nop
 80194f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194fa:	bc08      	pop	{r3}
 80194fc:	469e      	mov	lr, r3
 80194fe:	4770      	bx	lr

08019500 <_fini>:
 8019500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019502:	bf00      	nop
 8019504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019506:	bc08      	pop	{r3}
 8019508:	469e      	mov	lr, r3
 801950a:	4770      	bx	lr
