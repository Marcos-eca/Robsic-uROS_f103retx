
learning_uROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015318  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018a8  08015508  08015508  00025508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016db0  08016db0  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  08016db0  08016db0  00026db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016db8  08016db8  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016db8  08016db8  00026db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016dbc  08016dbc  00026dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08016dc0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d1a8  200000d8  08016e98  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  2000d280  08016e98  0003d280  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024667  00000000  00000000  00030101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051c4  00000000  00000000  00054768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00059930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001748  00000000  00000000  0005b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213e5  00000000  00000000  0005c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204ef  00000000  00000000  0007ddcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b704d  00000000  00000000  0009e2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  00155309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  001553b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000d8 	.word	0x200000d8
 800020c:	00000000 	.word	0x00000000
 8000210:	080154f0 	.word	0x080154f0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000dc 	.word	0x200000dc
 800022c:	080154f0 	.word	0x080154f0

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_frsub>:
 8000254:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__addsf3>
 800025a:	bf00      	nop

0800025c <__aeabi_fsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000260 <__addsf3>:
 8000260:	0042      	lsls	r2, r0, #1
 8000262:	bf1f      	itttt	ne
 8000264:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000268:	ea92 0f03 	teqne	r2, r3
 800026c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000270:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000274:	d06a      	beq.n	800034c <__addsf3+0xec>
 8000276:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800027a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800027e:	bfc1      	itttt	gt
 8000280:	18d2      	addgt	r2, r2, r3
 8000282:	4041      	eorgt	r1, r0
 8000284:	4048      	eorgt	r0, r1
 8000286:	4041      	eorgt	r1, r0
 8000288:	bfb8      	it	lt
 800028a:	425b      	neglt	r3, r3
 800028c:	2b19      	cmp	r3, #25
 800028e:	bf88      	it	hi
 8000290:	4770      	bxhi	lr
 8000292:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800029e:	bf18      	it	ne
 80002a0:	4240      	negne	r0, r0
 80002a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ae:	bf18      	it	ne
 80002b0:	4249      	negne	r1, r1
 80002b2:	ea92 0f03 	teq	r2, r3
 80002b6:	d03f      	beq.n	8000338 <__addsf3+0xd8>
 80002b8:	f1a2 0201 	sub.w	r2, r2, #1
 80002bc:	fa41 fc03 	asr.w	ip, r1, r3
 80002c0:	eb10 000c 	adds.w	r0, r0, ip
 80002c4:	f1c3 0320 	rsb	r3, r3, #32
 80002c8:	fa01 f103 	lsl.w	r1, r1, r3
 80002cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d0:	d502      	bpl.n	80002d8 <__addsf3+0x78>
 80002d2:	4249      	negs	r1, r1
 80002d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002dc:	d313      	bcc.n	8000306 <__addsf3+0xa6>
 80002de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e2:	d306      	bcc.n	80002f2 <__addsf3+0x92>
 80002e4:	0840      	lsrs	r0, r0, #1
 80002e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ea:	f102 0201 	add.w	r2, r2, #1
 80002ee:	2afe      	cmp	r2, #254	; 0xfe
 80002f0:	d251      	bcs.n	8000396 <__addsf3+0x136>
 80002f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002fa:	bf08      	it	eq
 80002fc:	f020 0001 	biceq.w	r0, r0, #1
 8000300:	ea40 0003 	orr.w	r0, r0, r3
 8000304:	4770      	bx	lr
 8000306:	0049      	lsls	r1, r1, #1
 8000308:	eb40 0000 	adc.w	r0, r0, r0
 800030c:	3a01      	subs	r2, #1
 800030e:	bf28      	it	cs
 8000310:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000314:	d2ed      	bcs.n	80002f2 <__addsf3+0x92>
 8000316:	fab0 fc80 	clz	ip, r0
 800031a:	f1ac 0c08 	sub.w	ip, ip, #8
 800031e:	ebb2 020c 	subs.w	r2, r2, ip
 8000322:	fa00 f00c 	lsl.w	r0, r0, ip
 8000326:	bfaa      	itet	ge
 8000328:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800032c:	4252      	neglt	r2, r2
 800032e:	4318      	orrge	r0, r3
 8000330:	bfbc      	itt	lt
 8000332:	40d0      	lsrlt	r0, r2
 8000334:	4318      	orrlt	r0, r3
 8000336:	4770      	bx	lr
 8000338:	f092 0f00 	teq	r2, #0
 800033c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000340:	bf06      	itte	eq
 8000342:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000346:	3201      	addeq	r2, #1
 8000348:	3b01      	subne	r3, #1
 800034a:	e7b5      	b.n	80002b8 <__addsf3+0x58>
 800034c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000350:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000354:	bf18      	it	ne
 8000356:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035a:	d021      	beq.n	80003a0 <__addsf3+0x140>
 800035c:	ea92 0f03 	teq	r2, r3
 8000360:	d004      	beq.n	800036c <__addsf3+0x10c>
 8000362:	f092 0f00 	teq	r2, #0
 8000366:	bf08      	it	eq
 8000368:	4608      	moveq	r0, r1
 800036a:	4770      	bx	lr
 800036c:	ea90 0f01 	teq	r0, r1
 8000370:	bf1c      	itt	ne
 8000372:	2000      	movne	r0, #0
 8000374:	4770      	bxne	lr
 8000376:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800037a:	d104      	bne.n	8000386 <__addsf3+0x126>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	bf28      	it	cs
 8000380:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000384:	4770      	bx	lr
 8000386:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800038a:	bf3c      	itt	cc
 800038c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000390:	4770      	bxcc	lr
 8000392:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000396:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800039a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039e:	4770      	bx	lr
 80003a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003a4:	bf16      	itet	ne
 80003a6:	4608      	movne	r0, r1
 80003a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003ac:	4601      	movne	r1, r0
 80003ae:	0242      	lsls	r2, r0, #9
 80003b0:	bf06      	itte	eq
 80003b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003b6:	ea90 0f01 	teqeq	r0, r1
 80003ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003be:	4770      	bx	lr

080003c0 <__aeabi_ui2f>:
 80003c0:	f04f 0300 	mov.w	r3, #0
 80003c4:	e004      	b.n	80003d0 <__aeabi_i2f+0x8>
 80003c6:	bf00      	nop

080003c8 <__aeabi_i2f>:
 80003c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	ea5f 0c00 	movs.w	ip, r0
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003dc:	4601      	mov	r1, r0
 80003de:	f04f 0000 	mov.w	r0, #0
 80003e2:	e01c      	b.n	800041e <__aeabi_l2f+0x2a>

080003e4 <__aeabi_ul2f>:
 80003e4:	ea50 0201 	orrs.w	r2, r0, r1
 80003e8:	bf08      	it	eq
 80003ea:	4770      	bxeq	lr
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e00a      	b.n	8000408 <__aeabi_l2f+0x14>
 80003f2:	bf00      	nop

080003f4 <__aeabi_l2f>:
 80003f4:	ea50 0201 	orrs.w	r2, r0, r1
 80003f8:	bf08      	it	eq
 80003fa:	4770      	bxeq	lr
 80003fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000400:	d502      	bpl.n	8000408 <__aeabi_l2f+0x14>
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	ea5f 0c01 	movs.w	ip, r1
 800040c:	bf02      	ittt	eq
 800040e:	4684      	moveq	ip, r0
 8000410:	4601      	moveq	r1, r0
 8000412:	2000      	moveq	r0, #0
 8000414:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000418:	bf08      	it	eq
 800041a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800041e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000422:	fabc f28c 	clz	r2, ip
 8000426:	3a08      	subs	r2, #8
 8000428:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800042c:	db10      	blt.n	8000450 <__aeabi_l2f+0x5c>
 800042e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000432:	4463      	add	r3, ip
 8000434:	fa00 fc02 	lsl.w	ip, r0, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	f020 0001 	biceq.w	r0, r0, #1
 800044e:	4770      	bx	lr
 8000450:	f102 0220 	add.w	r2, r2, #32
 8000454:	fa01 fc02 	lsl.w	ip, r1, r2
 8000458:	f1c2 0220 	rsb	r2, r2, #32
 800045c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000460:	fa21 f202 	lsr.w	r2, r1, r2
 8000464:	eb43 0002 	adc.w	r0, r3, r2
 8000468:	bf08      	it	eq
 800046a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046e:	4770      	bx	lr

08000470 <__aeabi_fmul>:
 8000470:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000474:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000478:	bf1e      	ittt	ne
 800047a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800047e:	ea92 0f0c 	teqne	r2, ip
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d06f      	beq.n	8000568 <__aeabi_fmul+0xf8>
 8000488:	441a      	add	r2, r3
 800048a:	ea80 0c01 	eor.w	ip, r0, r1
 800048e:	0240      	lsls	r0, r0, #9
 8000490:	bf18      	it	ne
 8000492:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000496:	d01e      	beq.n	80004d6 <__aeabi_fmul+0x66>
 8000498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800049c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004a4:	fba0 3101 	umull	r3, r1, r0, r1
 80004a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b0:	bf3e      	ittt	cc
 80004b2:	0049      	lslcc	r1, r1, #1
 80004b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004b8:	005b      	lslcc	r3, r3, #1
 80004ba:	ea40 0001 	orr.w	r0, r0, r1
 80004be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004c2:	2afd      	cmp	r2, #253	; 0xfd
 80004c4:	d81d      	bhi.n	8000502 <__aeabi_fmul+0x92>
 80004c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ce:	bf08      	it	eq
 80004d0:	f020 0001 	biceq.w	r0, r0, #1
 80004d4:	4770      	bx	lr
 80004d6:	f090 0f00 	teq	r0, #0
 80004da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004de:	bf08      	it	eq
 80004e0:	0249      	lsleq	r1, r1, #9
 80004e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ea:	3a7f      	subs	r2, #127	; 0x7f
 80004ec:	bfc2      	ittt	gt
 80004ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004f6:	4770      	bxgt	lr
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	3a01      	subs	r2, #1
 8000502:	dc5d      	bgt.n	80005c0 <__aeabi_fmul+0x150>
 8000504:	f112 0f19 	cmn.w	r2, #25
 8000508:	bfdc      	itt	le
 800050a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800050e:	4770      	bxle	lr
 8000510:	f1c2 0200 	rsb	r2, r2, #0
 8000514:	0041      	lsls	r1, r0, #1
 8000516:	fa21 f102 	lsr.w	r1, r1, r2
 800051a:	f1c2 0220 	rsb	r2, r2, #32
 800051e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000522:	ea5f 0031 	movs.w	r0, r1, rrx
 8000526:	f140 0000 	adc.w	r0, r0, #0
 800052a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800052e:	bf08      	it	eq
 8000530:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000534:	4770      	bx	lr
 8000536:	f092 0f00 	teq	r2, #0
 800053a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800053e:	bf02      	ittt	eq
 8000540:	0040      	lsleq	r0, r0, #1
 8000542:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000546:	3a01      	subeq	r2, #1
 8000548:	d0f9      	beq.n	800053e <__aeabi_fmul+0xce>
 800054a:	ea40 000c 	orr.w	r0, r0, ip
 800054e:	f093 0f00 	teq	r3, #0
 8000552:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000556:	bf02      	ittt	eq
 8000558:	0049      	lsleq	r1, r1, #1
 800055a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800055e:	3b01      	subeq	r3, #1
 8000560:	d0f9      	beq.n	8000556 <__aeabi_fmul+0xe6>
 8000562:	ea41 010c 	orr.w	r1, r1, ip
 8000566:	e78f      	b.n	8000488 <__aeabi_fmul+0x18>
 8000568:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800056c:	ea92 0f0c 	teq	r2, ip
 8000570:	bf18      	it	ne
 8000572:	ea93 0f0c 	teqne	r3, ip
 8000576:	d00a      	beq.n	800058e <__aeabi_fmul+0x11e>
 8000578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800057c:	bf18      	it	ne
 800057e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000582:	d1d8      	bne.n	8000536 <__aeabi_fmul+0xc6>
 8000584:	ea80 0001 	eor.w	r0, r0, r1
 8000588:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800058c:	4770      	bx	lr
 800058e:	f090 0f00 	teq	r0, #0
 8000592:	bf17      	itett	ne
 8000594:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000598:	4608      	moveq	r0, r1
 800059a:	f091 0f00 	teqne	r1, #0
 800059e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005a2:	d014      	beq.n	80005ce <__aeabi_fmul+0x15e>
 80005a4:	ea92 0f0c 	teq	r2, ip
 80005a8:	d101      	bne.n	80005ae <__aeabi_fmul+0x13e>
 80005aa:	0242      	lsls	r2, r0, #9
 80005ac:	d10f      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005ae:	ea93 0f0c 	teq	r3, ip
 80005b2:	d103      	bne.n	80005bc <__aeabi_fmul+0x14c>
 80005b4:	024b      	lsls	r3, r1, #9
 80005b6:	bf18      	it	ne
 80005b8:	4608      	movne	r0, r1
 80005ba:	d108      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005bc:	ea80 0001 	eor.w	r0, r0, r1
 80005c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005cc:	4770      	bx	lr
 80005ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005d6:	4770      	bx	lr

080005d8 <__aeabi_fdiv>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d069      	beq.n	80006c4 <__aeabi_fdiv+0xec>
 80005f0:	eba2 0203 	sub.w	r2, r2, r3
 80005f4:	ea80 0c01 	eor.w	ip, r0, r1
 80005f8:	0249      	lsls	r1, r1, #9
 80005fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005fe:	d037      	beq.n	8000670 <__aeabi_fdiv+0x98>
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000608:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800060c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000610:	428b      	cmp	r3, r1
 8000612:	bf38      	it	cc
 8000614:	005b      	lslcc	r3, r3, #1
 8000616:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800061a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800061e:	428b      	cmp	r3, r1
 8000620:	bf24      	itt	cs
 8000622:	1a5b      	subcs	r3, r3, r1
 8000624:	ea40 000c 	orrcs.w	r0, r0, ip
 8000628:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800062c:	bf24      	itt	cs
 800062e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000632:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000636:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800063a:	bf24      	itt	cs
 800063c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000644:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000648:	bf24      	itt	cs
 800064a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800064e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	bf18      	it	ne
 8000656:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800065a:	d1e0      	bne.n	800061e <__aeabi_fdiv+0x46>
 800065c:	2afd      	cmp	r2, #253	; 0xfd
 800065e:	f63f af50 	bhi.w	8000502 <__aeabi_fmul+0x92>
 8000662:	428b      	cmp	r3, r1
 8000664:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000668:	bf08      	it	eq
 800066a:	f020 0001 	biceq.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000674:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000678:	327f      	adds	r2, #127	; 0x7f
 800067a:	bfc2      	ittt	gt
 800067c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000680:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000684:	4770      	bxgt	lr
 8000686:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	3a01      	subs	r2, #1
 8000690:	e737      	b.n	8000502 <__aeabi_fmul+0x92>
 8000692:	f092 0f00 	teq	r2, #0
 8000696:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800069a:	bf02      	ittt	eq
 800069c:	0040      	lsleq	r0, r0, #1
 800069e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006a2:	3a01      	subeq	r2, #1
 80006a4:	d0f9      	beq.n	800069a <__aeabi_fdiv+0xc2>
 80006a6:	ea40 000c 	orr.w	r0, r0, ip
 80006aa:	f093 0f00 	teq	r3, #0
 80006ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006b2:	bf02      	ittt	eq
 80006b4:	0049      	lsleq	r1, r1, #1
 80006b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006ba:	3b01      	subeq	r3, #1
 80006bc:	d0f9      	beq.n	80006b2 <__aeabi_fdiv+0xda>
 80006be:	ea41 010c 	orr.w	r1, r1, ip
 80006c2:	e795      	b.n	80005f0 <__aeabi_fdiv+0x18>
 80006c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006c8:	ea92 0f0c 	teq	r2, ip
 80006cc:	d108      	bne.n	80006e0 <__aeabi_fdiv+0x108>
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	f47f af7d 	bne.w	80005ce <__aeabi_fmul+0x15e>
 80006d4:	ea93 0f0c 	teq	r3, ip
 80006d8:	f47f af70 	bne.w	80005bc <__aeabi_fmul+0x14c>
 80006dc:	4608      	mov	r0, r1
 80006de:	e776      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006e0:	ea93 0f0c 	teq	r3, ip
 80006e4:	d104      	bne.n	80006f0 <__aeabi_fdiv+0x118>
 80006e6:	024b      	lsls	r3, r1, #9
 80006e8:	f43f af4c 	beq.w	8000584 <__aeabi_fmul+0x114>
 80006ec:	4608      	mov	r0, r1
 80006ee:	e76e      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006f4:	bf18      	it	ne
 80006f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006fa:	d1ca      	bne.n	8000692 <__aeabi_fdiv+0xba>
 80006fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000700:	f47f af5c 	bne.w	80005bc <__aeabi_fmul+0x14c>
 8000704:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000708:	f47f af3c 	bne.w	8000584 <__aeabi_fmul+0x114>
 800070c:	e75f      	b.n	80005ce <__aeabi_fmul+0x15e>
 800070e:	bf00      	nop

08000710 <__aeabi_f2iz>:
 8000710:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000718:	d30f      	bcc.n	800073a <__aeabi_f2iz+0x2a>
 800071a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800071e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000722:	d90d      	bls.n	8000740 <__aeabi_f2iz+0x30>
 8000724:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000730:	fa23 f002 	lsr.w	r0, r3, r2
 8000734:	bf18      	it	ne
 8000736:	4240      	negne	r0, r0
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2iz+0x3a>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d105      	bne.n	8000756 <__aeabi_f2iz+0x46>
 800074a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_ldivmod>:
 800075c:	b97b      	cbnz	r3, 800077e <__aeabi_ldivmod+0x22>
 800075e:	b972      	cbnz	r2, 800077e <__aeabi_ldivmod+0x22>
 8000760:	2900      	cmp	r1, #0
 8000762:	bfbe      	ittt	lt
 8000764:	2000      	movlt	r0, #0
 8000766:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800076a:	e006      	blt.n	800077a <__aeabi_ldivmod+0x1e>
 800076c:	bf08      	it	eq
 800076e:	2800      	cmpeq	r0, #0
 8000770:	bf1c      	itt	ne
 8000772:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000776:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800077a:	f000 b9b9 	b.w	8000af0 <__aeabi_idiv0>
 800077e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000782:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000786:	2900      	cmp	r1, #0
 8000788:	db09      	blt.n	800079e <__aeabi_ldivmod+0x42>
 800078a:	2b00      	cmp	r3, #0
 800078c:	db1a      	blt.n	80007c4 <__aeabi_ldivmod+0x68>
 800078e:	f000 f84d 	bl	800082c <__udivmoddi4>
 8000792:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db1b      	blt.n	80007e0 <__aeabi_ldivmod+0x84>
 80007a8:	f000 f840 	bl	800082c <__udivmoddi4>
 80007ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b4:	b004      	add	sp, #16
 80007b6:	4240      	negs	r0, r0
 80007b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	4770      	bx	lr
 80007c4:	4252      	negs	r2, r2
 80007c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ca:	f000 f82f 	bl	800082c <__udivmoddi4>
 80007ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d6:	b004      	add	sp, #16
 80007d8:	4240      	negs	r0, r0
 80007da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007de:	4770      	bx	lr
 80007e0:	4252      	negs	r2, r2
 80007e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e6:	f000 f821 	bl	800082c <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4252      	negs	r2, r2
 80007f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007fa:	4770      	bx	lr

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 b96e 	b.w	8000af0 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	468e      	mov	lr, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8083 	bne.w	8000944 <__udivmoddi4+0x118>
 800083e:	428a      	cmp	r2, r1
 8000840:	4617      	mov	r7, r2
 8000842:	d947      	bls.n	80008d4 <__udivmoddi4+0xa8>
 8000844:	fab2 f382 	clz	r3, r2
 8000848:	b14b      	cbz	r3, 800085e <__udivmoddi4+0x32>
 800084a:	f1c3 0120 	rsb	r1, r3, #32
 800084e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000852:	fa20 f101 	lsr.w	r1, r0, r1
 8000856:	409f      	lsls	r7, r3
 8000858:	ea41 0e0e 	orr.w	lr, r1, lr
 800085c:	409c      	lsls	r4, r3
 800085e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000862:	fbbe fcf8 	udiv	ip, lr, r8
 8000866:	fa1f f987 	uxth.w	r9, r7
 800086a:	fb08 e21c 	mls	r2, r8, ip, lr
 800086e:	fb0c f009 	mul.w	r0, ip, r9
 8000872:	0c21      	lsrs	r1, r4, #16
 8000874:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000878:	4290      	cmp	r0, r2
 800087a:	d90a      	bls.n	8000892 <__udivmoddi4+0x66>
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000882:	f080 8118 	bcs.w	8000ab6 <__udivmoddi4+0x28a>
 8000886:	4290      	cmp	r0, r2
 8000888:	f240 8115 	bls.w	8000ab6 <__udivmoddi4+0x28a>
 800088c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000890:	443a      	add	r2, r7
 8000892:	1a12      	subs	r2, r2, r0
 8000894:	fbb2 f0f8 	udiv	r0, r2, r8
 8000898:	fb08 2210 	mls	r2, r8, r0, r2
 800089c:	fb00 f109 	mul.w	r1, r0, r9
 80008a0:	b2a4      	uxth	r4, r4
 80008a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008a6:	42a1      	cmp	r1, r4
 80008a8:	d909      	bls.n	80008be <__udivmoddi4+0x92>
 80008aa:	193c      	adds	r4, r7, r4
 80008ac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008b0:	f080 8103 	bcs.w	8000aba <__udivmoddi4+0x28e>
 80008b4:	42a1      	cmp	r1, r4
 80008b6:	f240 8100 	bls.w	8000aba <__udivmoddi4+0x28e>
 80008ba:	3802      	subs	r0, #2
 80008bc:	443c      	add	r4, r7
 80008be:	1a64      	subs	r4, r4, r1
 80008c0:	2100      	movs	r1, #0
 80008c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008c6:	b11e      	cbz	r6, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	2200      	movs	r2, #0
 80008ca:	40dc      	lsrs	r4, r3
 80008cc:	e9c6 4200 	strd	r4, r2, [r6]
 80008d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d4:	b902      	cbnz	r2, 80008d8 <__udivmoddi4+0xac>
 80008d6:	deff      	udf	#255	; 0xff
 80008d8:	fab2 f382 	clz	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d14f      	bne.n	8000980 <__udivmoddi4+0x154>
 80008e0:	1a8d      	subs	r5, r1, r2
 80008e2:	2101      	movs	r1, #1
 80008e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80008e8:	fa1f f882 	uxth.w	r8, r2
 80008ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80008f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80008f4:	fb08 f00c 	mul.w	r0, r8, ip
 80008f8:	0c22      	lsrs	r2, r4, #16
 80008fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80008fe:	42a8      	cmp	r0, r5
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0xe6>
 8000902:	197d      	adds	r5, r7, r5
 8000904:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000908:	d202      	bcs.n	8000910 <__udivmoddi4+0xe4>
 800090a:	42a8      	cmp	r0, r5
 800090c:	f200 80e9 	bhi.w	8000ae2 <__udivmoddi4+0x2b6>
 8000910:	4694      	mov	ip, r2
 8000912:	1a2d      	subs	r5, r5, r0
 8000914:	fbb5 f0fe 	udiv	r0, r5, lr
 8000918:	fb0e 5510 	mls	r5, lr, r0, r5
 800091c:	fb08 f800 	mul.w	r8, r8, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000926:	45a0      	cmp	r8, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x10e>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x10c>
 8000932:	45a0      	cmp	r8, r4
 8000934:	f200 80d9 	bhi.w	8000aea <__udivmoddi4+0x2be>
 8000938:	4610      	mov	r0, r2
 800093a:	eba4 0408 	sub.w	r4, r4, r8
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	e7c0      	b.n	80008c6 <__udivmoddi4+0x9a>
 8000944:	428b      	cmp	r3, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x12e>
 8000948:	2e00      	cmp	r6, #0
 800094a:	f000 80b1 	beq.w	8000ab0 <__udivmoddi4+0x284>
 800094e:	2100      	movs	r1, #0
 8000950:	e9c6 0500 	strd	r0, r5, [r6]
 8000954:	4608      	mov	r0, r1
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	fab3 f183 	clz	r1, r3
 800095e:	2900      	cmp	r1, #0
 8000960:	d14b      	bne.n	80009fa <__udivmoddi4+0x1ce>
 8000962:	42ab      	cmp	r3, r5
 8000964:	d302      	bcc.n	800096c <__udivmoddi4+0x140>
 8000966:	4282      	cmp	r2, r0
 8000968:	f200 80b9 	bhi.w	8000ade <__udivmoddi4+0x2b2>
 800096c:	1a84      	subs	r4, r0, r2
 800096e:	eb65 0303 	sbc.w	r3, r5, r3
 8000972:	2001      	movs	r0, #1
 8000974:	469e      	mov	lr, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0aa      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800097a:	e9c6 4e00 	strd	r4, lr, [r6]
 800097e:	e7a7      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000980:	409f      	lsls	r7, r3
 8000982:	f1c3 0220 	rsb	r2, r3, #32
 8000986:	40d1      	lsrs	r1, r2
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fa1f f887 	uxth.w	r8, r7
 8000994:	fb0e 1110 	mls	r1, lr, r0, r1
 8000998:	fa24 f202 	lsr.w	r2, r4, r2
 800099c:	409d      	lsls	r5, r3
 800099e:	fb00 fc08 	mul.w	ip, r0, r8
 80009a2:	432a      	orrs	r2, r5
 80009a4:	0c15      	lsrs	r5, r2, #16
 80009a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80009aa:	45ac      	cmp	ip, r5
 80009ac:	fa04 f403 	lsl.w	r4, r4, r3
 80009b0:	d909      	bls.n	80009c6 <__udivmoddi4+0x19a>
 80009b2:	197d      	adds	r5, r7, r5
 80009b4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009b8:	f080 808f 	bcs.w	8000ada <__udivmoddi4+0x2ae>
 80009bc:	45ac      	cmp	ip, r5
 80009be:	f240 808c 	bls.w	8000ada <__udivmoddi4+0x2ae>
 80009c2:	3802      	subs	r0, #2
 80009c4:	443d      	add	r5, r7
 80009c6:	eba5 050c 	sub.w	r5, r5, ip
 80009ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80009ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80009d2:	fb01 f908 	mul.w	r9, r1, r8
 80009d6:	b295      	uxth	r5, r2
 80009d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80009dc:	45a9      	cmp	r9, r5
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x1c4>
 80009e0:	197d      	adds	r5, r7, r5
 80009e2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80009e6:	d274      	bcs.n	8000ad2 <__udivmoddi4+0x2a6>
 80009e8:	45a9      	cmp	r9, r5
 80009ea:	d972      	bls.n	8000ad2 <__udivmoddi4+0x2a6>
 80009ec:	3902      	subs	r1, #2
 80009ee:	443d      	add	r5, r7
 80009f0:	eba5 0509 	sub.w	r5, r5, r9
 80009f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009f8:	e778      	b.n	80008ec <__udivmoddi4+0xc0>
 80009fa:	f1c1 0720 	rsb	r7, r1, #32
 80009fe:	408b      	lsls	r3, r1
 8000a00:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a04:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a08:	fa25 f407 	lsr.w	r4, r5, r7
 8000a0c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a10:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a14:	fa1f f88c 	uxth.w	r8, ip
 8000a18:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a1c:	fa20 f307 	lsr.w	r3, r0, r7
 8000a20:	fb09 fa08 	mul.w	sl, r9, r8
 8000a24:	408d      	lsls	r5, r1
 8000a26:	431d      	orrs	r5, r3
 8000a28:	0c2b      	lsrs	r3, r5, #16
 8000a2a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a2e:	45a2      	cmp	sl, r4
 8000a30:	fa02 f201 	lsl.w	r2, r2, r1
 8000a34:	fa00 f301 	lsl.w	r3, r0, r1
 8000a38:	d909      	bls.n	8000a4e <__udivmoddi4+0x222>
 8000a3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a42:	d248      	bcs.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a44:	45a2      	cmp	sl, r4
 8000a46:	d946      	bls.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a48:	f1a9 0902 	sub.w	r9, r9, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	eba4 040a 	sub.w	r4, r4, sl
 8000a52:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a56:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a5a:	fb00 fa08 	mul.w	sl, r0, r8
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	45a2      	cmp	sl, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x24e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000a70:	d22d      	bcs.n	8000ace <__udivmoddi4+0x2a2>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	d92b      	bls.n	8000ace <__udivmoddi4+0x2a2>
 8000a76:	3802      	subs	r0, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a82:	eba4 040a 	sub.w	r4, r4, sl
 8000a86:	454c      	cmp	r4, r9
 8000a88:	46c6      	mov	lr, r8
 8000a8a:	464d      	mov	r5, r9
 8000a8c:	d319      	bcc.n	8000ac2 <__udivmoddi4+0x296>
 8000a8e:	d016      	beq.n	8000abe <__udivmoddi4+0x292>
 8000a90:	b15e      	cbz	r6, 8000aaa <__udivmoddi4+0x27e>
 8000a92:	ebb3 020e 	subs.w	r2, r3, lr
 8000a96:	eb64 0405 	sbc.w	r4, r4, r5
 8000a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c6 7400 	strd	r7, r4, [r6]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e70c      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	e6eb      	b.n	8000892 <__udivmoddi4+0x66>
 8000aba:	4610      	mov	r0, r2
 8000abc:	e6ff      	b.n	80008be <__udivmoddi4+0x92>
 8000abe:	4543      	cmp	r3, r8
 8000ac0:	d2e6      	bcs.n	8000a90 <__udivmoddi4+0x264>
 8000ac2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ac6:	eb69 050c 	sbc.w	r5, r9, ip
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7e0      	b.n	8000a90 <__udivmoddi4+0x264>
 8000ace:	4628      	mov	r0, r5
 8000ad0:	e7d3      	b.n	8000a7a <__udivmoddi4+0x24e>
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	e78c      	b.n	80009f0 <__udivmoddi4+0x1c4>
 8000ad6:	4681      	mov	r9, r0
 8000ad8:	e7b9      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e773      	b.n	80009c6 <__udivmoddi4+0x19a>
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e749      	b.n	8000976 <__udivmoddi4+0x14a>
 8000ae2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae6:	443d      	add	r5, r7
 8000ae8:	e713      	b.n	8000912 <__udivmoddi4+0xe6>
 8000aea:	3802      	subs	r0, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	e724      	b.n	800093a <__udivmoddi4+0x10e>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b04:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <MX_ADC1_Init+0xd0>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b12:	4b2b      	ldr	r3, [pc, #172]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1e:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b34:	f001 fc9a 	bl	800246c <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b3e:	f000 fec7 	bl	80018d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b42:	2308      	movs	r3, #8
 8000b44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	481b      	ldr	r0, [pc, #108]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b54:	f001 fd74 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b5e:	f000 feb7 	bl	80018d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b62:	2309      	movs	r3, #9
 8000b64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b70:	f001 fd66 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 fea9 	bl	80018d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b7e:	2306      	movs	r3, #6
 8000b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b82:	2303      	movs	r3, #3
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000b8c:	f001 fd58 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b96:	f000 fe9b 	bl	80018d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <MX_ADC1_Init+0xcc>)
 8000ba8:	f001 fd4a 	bl	8002640 <HAL_ADC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000bb2:	f000 fe8d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20006654 	.word	0x20006654
 8000bc4:	40012400 	.word	0x40012400

08000bc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <HAL_ADC_MspInit+0x98>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d137      	bne.n	8000c58 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_ADC_MspInit+0x9c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c34:	2303      	movs	r3, #3
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <HAL_ADC_MspInit+0xa0>)
 8000c40:	f002 ff30 	bl	8003aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c44:	2303      	movs	r3, #3
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <HAL_ADC_MspInit+0xa4>)
 8000c54:	f002 ff26 	bl	8003aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40012400 	.word	0x40012400
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800
 8000c6c:	40010c00 	.word	0x40010c00

08000c70 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <MX_CAN_Init+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c7c:	2204      	movs	r2, #4
 8000c7e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c8e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000c92:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_CAN_Init+0x64>)
 8000cc0:	f001 fdf7 	bl	80028b2 <HAL_CAN_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000cca:	f000 fe01 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20006684 	.word	0x20006684
 8000cd8:	40006400 	.word	0x40006400

08000cdc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a20      	ldr	r2, [pc, #128]	; (8000d78 <HAL_CAN_MspInit+0x9c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d139      	bne.n	8000d70 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000cfe:	69db      	ldr	r3, [r3, #28]
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000d02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d06:	61d3      	str	r3, [r2, #28]
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_CAN_MspInit+0xa0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d42:	f002 feaf 	bl	8003aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_CAN_MspInit+0xa4>)
 8000d5c:	f002 fea2 	bl	8003aa4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2105      	movs	r1, #5
 8000d64:	2014      	movs	r0, #20
 8000d66:	f002 f980 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d6a:	2014      	movs	r0, #20
 8000d6c:	f002 f999 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40006400 	.word	0x40006400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010800 	.word	0x40010800

08000d84 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d90:	f006 fca2 	bl	80076d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d94:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <pvPortMallocMicroROS+0x174>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d9c:	f000 f98a 	bl	80010b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <pvPortMallocMicroROS+0x178>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 808e 	bne.w	8000eca <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d01d      	beq.n	8000df0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000db4:	2208      	movs	r2, #8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d014      	beq.n	8000df0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f023 0307 	bic.w	r3, r3, #7
 8000dcc:	3308      	adds	r3, #8
 8000dce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00a      	beq.n	8000df0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000dec:	bf00      	nop
 8000dee:	e7fe      	b.n	8000dee <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d069      	beq.n	8000eca <pvPortMallocMicroROS+0x146>
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <pvPortMallocMicroROS+0x17c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d864      	bhi.n	8000eca <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <pvPortMallocMicroROS+0x180>)
 8000e02:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000e04:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <pvPortMallocMicroROS+0x180>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e0a:	e004      	b.n	8000e16 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d903      	bls.n	8000e28 <pvPortMallocMicroROS+0xa4>
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f1      	bne.n	8000e0c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <pvPortMallocMicroROS+0x174>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d04b      	beq.n	8000eca <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2208      	movs	r2, #8
 8000e38:	4413      	add	r3, r2
 8000e3a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d91f      	bls.n	8000e94 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00a      	beq.n	8000e7c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e6a:	f383 8811 	msr	BASEPRI, r3
 8000e6e:	f3bf 8f6f 	isb	sy
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	613b      	str	r3, [r7, #16]
}
 8000e78:	bf00      	nop
 8000e7a:	e7fe      	b.n	8000e7a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	1ad2      	subs	r2, r2, r3
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e8e:	69b8      	ldr	r0, [r7, #24]
 8000e90:	f000 f972 	bl	8001178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <pvPortMallocMicroROS+0x17c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <pvPortMallocMicroROS+0x17c>)
 8000ea0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <pvPortMallocMicroROS+0x17c>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <pvPortMallocMicroROS+0x184>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d203      	bcs.n	8000eb6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <pvPortMallocMicroROS+0x17c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <pvPortMallocMicroROS+0x184>)
 8000eb4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <pvPortMallocMicroROS+0x178>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000eca:	f006 fc13 	bl	80076f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00a      	beq.n	8000eee <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000edc:	f383 8811 	msr	BASEPRI, r3
 8000ee0:	f3bf 8f6f 	isb	sy
 8000ee4:	f3bf 8f4f 	dsb	sy
 8000ee8:	60fb      	str	r3, [r7, #12]
}
 8000eea:	bf00      	nop
 8000eec:	e7fe      	b.n	8000eec <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000eee:	69fb      	ldr	r3, [r7, #28]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000280c 	.word	0x2000280c
 8000efc:	20002818 	.word	0x20002818
 8000f00:	20002810 	.word	0x20002810
 8000f04:	20002804 	.word	0x20002804
 8000f08:	20002814 	.word	0x20002814

08000f0c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d048      	beq.n	8000fb0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	425b      	negs	r3, r3
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	4413      	add	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <vPortFreeMicroROS+0xac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3e:	f383 8811 	msr	BASEPRI, r3
 8000f42:	f3bf 8f6f 	isb	sy
 8000f46:	f3bf 8f4f 	dsb	sy
 8000f4a:	60fb      	str	r3, [r7, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	e7fe      	b.n	8000f4e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00a      	beq.n	8000f6e <vPortFreeMicroROS+0x62>
	__asm volatile
 8000f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f5c:	f383 8811 	msr	BASEPRI, r3
 8000f60:	f3bf 8f6f 	isb	sy
 8000f64:	f3bf 8f4f 	dsb	sy
 8000f68:	60bb      	str	r3, [r7, #8]
}
 8000f6a:	bf00      	nop
 8000f6c:	e7fe      	b.n	8000f6c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <vPortFreeMicroROS+0xac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d019      	beq.n	8000fb0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d115      	bne.n	8000fb0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <vPortFreeMicroROS+0xac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f94:	f006 fba0 	bl	80076d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <vPortFreeMicroROS+0xb0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vPortFreeMicroROS+0xb0>)
 8000fa4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000fa6:	6938      	ldr	r0, [r7, #16]
 8000fa8:	f000 f8e6 	bl	8001178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000fac:	f006 fba2 	bl	80076f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20002818 	.word	0x20002818
 8000fbc:	20002810 	.word	0x20002810

08000fc0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	425b      	negs	r3, r3
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <getBlockSize+0x34>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

	return count;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	20002818 	.word	0x20002818

08000ff8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001002:	f006 fb69 	bl	80076d8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001006:	6838      	ldr	r0, [r7, #0]
 8001008:	f7ff febc 	bl	8000d84 <pvPortMallocMicroROS>
 800100c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001012:	2308      	movs	r3, #8
 8001014:	425b      	negs	r3, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <pvPortReallocMicroROS+0x70>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	43db      	mvns	r3, r3
 8001032:	4013      	ands	r3, r2
 8001034:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001036:	e007      	b.n	8001048 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	1c53      	adds	r3, r2, #1
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	1c59      	adds	r1, r3, #1
 8001042:	61b9      	str	r1, [r7, #24]
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	617a      	str	r2, [r7, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f2      	bne.n	8001038 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff5a 	bl	8000f0c <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001058:	f006 fb4c 	bl	80076f4 <xTaskResumeAll>

	return newmem;
 800105c:	693b      	ldr	r3, [r7, #16]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20002818 	.word	0x20002818

0800106c <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001076:	f006 fb2f 	bl	80076d8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff fe7d 	bl	8000d84 <pvPortMallocMicroROS>
 800108a:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001090:	e004      	b.n	800109c <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	613a      	str	r2, [r7, #16]
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1e5a      	subs	r2, r3, #1
 80010a0:	617a      	str	r2, [r7, #20]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f5      	bne.n	8001092 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80010a6:	f006 fb25 	bl	80076f4 <xTaskResumeAll>
  	return mem;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80010ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80010be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <prvHeapInit+0xac>)
 80010c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00c      	beq.n	80010e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3307      	adds	r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 0307 	bic.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <prvHeapInit+0xac>)
 80010e4:	4413      	add	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <prvHeapInit+0xb0>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <prvHeapInit+0xb0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001100:	2208      	movs	r2, #8
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f023 0307 	bic.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <prvHeapInit+0xb4>)
 8001114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <prvHeapInit+0xb4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <prvHeapInit+0xb4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <prvHeapInit+0xb4>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <prvHeapInit+0xb8>)
 8001142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a09      	ldr	r2, [pc, #36]	; (8001170 <prvHeapInit+0xbc>)
 800114a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <prvHeapInit+0xc0>)
 800114e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001152:	601a      	str	r2, [r3, #0]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	200000f4 	.word	0x200000f4
 8001164:	20002804 	.word	0x20002804
 8001168:	2000280c 	.word	0x2000280c
 800116c:	20002814 	.word	0x20002814
 8001170:	20002810 	.word	0x20002810
 8001174:	20002818 	.word	0x20002818

08001178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <prvInsertBlockIntoFreeList+0xa8>)
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	e002      	b.n	800118c <prvInsertBlockIntoFreeList+0x14>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d8f7      	bhi.n	8001186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	4413      	add	r3, r2
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d108      	bne.n	80011ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	441a      	add	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	441a      	add	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d118      	bne.n	8001200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <prvInsertBlockIntoFreeList+0xac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d00d      	beq.n	80011f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	441a      	add	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e008      	b.n	8001208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <prvInsertBlockIntoFreeList+0xac>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e003      	b.n	8001208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d002      	beq.n	8001216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	20002804 	.word	0x20002804
 8001224:	2000280c 	.word	0x2000280c

08001228 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_DAC_Init+0x60>)
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <MX_DAC_Init+0x64>)
 800123a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <MX_DAC_Init+0x60>)
 800123e:	f001 ff3e 	bl	80030be <HAL_DAC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001248:	f000 fb42 	bl	80018d0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <MX_DAC_Init+0x60>)
 800125c:	f001 ff51 	bl	8003102 <HAL_DAC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001266:	f000 fb33 	bl	80018d0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	2210      	movs	r2, #16
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_DAC_Init+0x60>)
 8001272:	f001 ff46 	bl	8003102 <HAL_DAC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800127c:	f000 fb28 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200066ac 	.word	0x200066ac
 800128c:	40007400 	.word	0x40007400

08001290 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_DAC_MspInit+0x6c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d121      	bne.n	80012f4 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_DAC_MspInit+0x70>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_DAC_MspInit+0x70>)
 80012b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012ba:	61d3      	str	r3, [r2, #28]
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_DAC_MspInit+0x70>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_DAC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_DAC_MspInit+0x70>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_DAC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e0:	2330      	movs	r3, #48	; 0x30
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_DAC_MspInit+0x74>)
 80012f0:	f002 fbd8 	bl	8003aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40007400 	.word	0x40007400
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_DMA_Init+0x48>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_DMA_Init+0x48>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x48>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	2010      	movs	r0, #16
 800132c:	f001 fe9d 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001330:	2010      	movs	r0, #16
 8001332:	f001 feb6 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	2011      	movs	r0, #17
 800133c:	f001 fe95 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001340:	2011      	movs	r0, #17
 8001342:	f001 feae 	bl	80030a2 <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000

08001354 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001362:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001368:	4904      	ldr	r1, [pc, #16]	; (800137c <cubemx_transport_open+0x28>)
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f004 faaa 	bl	80058c4 <HAL_UART_Receive_DMA>
    return true;
 8001370:	2301      	movs	r3, #1
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000281c 	.word	0x2000281c

08001380 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800138e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f004 fac7 	bl	8005924 <HAL_UART_DMAStop>
    return true;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013b4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d11c      	bne.n	80013fc <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f004 fa0e 	bl	80057ec <HAL_UART_Transmit_DMA>
 80013d0:	4603      	mov	r3, r0
 80013d2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80013d4:	e002      	b.n	80013dc <cubemx_transport_write+0x3c>
            osDelay(1);
 80013d6:	2001      	movs	r0, #1
 80013d8:	f005 f958 	bl	800668c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80013dc:	7cfb      	ldrb	r3, [r7, #19]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <cubemx_transport_write+0x4e>
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d1f3      	bne.n	80013d6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <cubemx_transport_write+0x58>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	e002      	b.n	80013fe <cubemx_transport_write+0x5e>
 80013f8:	2300      	movs	r3, #0
 80013fa:	e000      	b.n	80013fe <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80013fc:	2300      	movs	r3, #0
    }
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800141c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001422:	b672      	cpsid	i
}
 8001424:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <cubemx_transport_read+0x9c>)
 8001434:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001436:	b662      	cpsie	i
}
 8001438:	bf00      	nop
        __enable_irq();
        ms_used++;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001440:	2001      	movs	r0, #1
 8001442:	f005 f923 	bl	800668c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <cubemx_transport_read+0xa0>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <cubemx_transport_read+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d103      	bne.n	800145a <cubemx_transport_read+0x52>
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbe3      	blt.n	8001422 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800145e:	e011      	b.n	8001484 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <cubemx_transport_read+0xa0>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	440b      	add	r3, r1
 800146a:	4910      	ldr	r1, [pc, #64]	; (80014ac <cubemx_transport_read+0xa4>)
 800146c:	5c8a      	ldrb	r2, [r1, r2]
 800146e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <cubemx_transport_read+0xa0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <cubemx_transport_read+0xa0>)
 800147c:	6013      	str	r3, [r2, #0]
        wrote++;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	3301      	adds	r3, #1
 8001482:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <cubemx_transport_read+0xa0>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <cubemx_transport_read+0x9c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d003      	beq.n	8001498 <cubemx_transport_read+0x90>
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	d3e3      	bcc.n	8001460 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001498:	69bb      	ldr	r3, [r7, #24]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3720      	adds	r7, #32
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20003020 	.word	0x20003020
 80014a8:	2000301c 	.word	0x2000301c
 80014ac:	2000281c 	.word	0x2000281c

080014b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <MX_FREERTOS_Init+0x18>)
 80014b6:	2100      	movs	r1, #0
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_FREERTOS_Init+0x1c>)
 80014ba:	f005 f83d 	bl	8006538 <osThreadNew>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <MX_FREERTOS_Init+0x20>)
 80014c2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	080161e4 	.word	0x080161e4
 80014cc:	080014d5 	.word	0x080014d5
 80014d0:	200066c0 	.word	0x200066c0

080014d4 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 80014d4:	b5b0      	push	{r4, r5, r7, lr}
 80014d6:	b0cc      	sub	sp, #304	; 0x130
 80014d8:	af02      	add	r7, sp, #8
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_ros2_function */
  /* Infinite loop */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 80014e0:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <task_ros2_function+0x14c>)
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <task_ros2_function+0x150>)
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <task_ros2_function+0x154>)
 80014ea:	4a50      	ldr	r2, [pc, #320]	; (800162c <task_ros2_function+0x158>)
 80014ec:	4950      	ldr	r1, [pc, #320]	; (8001630 <task_ros2_function+0x15c>)
 80014ee:	2001      	movs	r0, #1
 80014f0:	f009 f858 	bl	800a5a4 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80014f4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80014f8:	4618      	mov	r0, r3
 80014fa:	f008 fce1 	bl	8009ec0 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 80014fe:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <task_ros2_function+0x160>)
 8001500:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001504:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <task_ros2_function+0x164>)
 8001506:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 800150a:	4b4c      	ldr	r3, [pc, #304]	; (800163c <task_ros2_function+0x168>)
 800150c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <task_ros2_function+0x16c>)
 8001512:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001516:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800151a:	4618      	mov	r0, r3
 800151c:	f008 fcde 	bl	8009edc <rcutils_set_default_allocator>
 8001520:	4603      	mov	r3, r0
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <task_ros2_function+0x60>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 800152c:	21d0      	movs	r1, #208	; 0xd0
 800152e:	4845      	ldr	r0, [pc, #276]	; (8001644 <task_ros2_function+0x170>)
 8001530:	f012 fd5c 	bl	8013fec <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 8001534:	463b      	mov	r3, r7
 8001536:	4618      	mov	r0, r3
 8001538:	f008 fcf0 	bl	8009f1c <rcutils_get_default_allocator>
 800153c:	463b      	mov	r3, r7
 800153e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8001542:	461d      	mov	r5, r3
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001548:	682b      	ldr	r3, [r5, #0]
 800154a:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 800154c:	f007 fc8e 	bl	8008e6c <rcl_get_zero_initialized_init_options>
 8001550:	4602      	mov	r2, r0
 8001552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001556:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 8001558:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800155c:	466a      	mov	r2, sp
 800155e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001562:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001566:	e882 0003 	stmia.w	r2, {r0, r1}
 800156a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800156e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001570:	4620      	mov	r0, r4
 8001572:	f007 fc7d 	bl	8008e70 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001576:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800157a:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800157e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	f008 fbaf 	bl	8009cec <rclc_support_init_with_options>

	  // create node
	   rclc_node_init_default(&node, "pong", "microros", &support);
 800158e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001592:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001596:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <task_ros2_function+0x174>)
 8001598:	492c      	ldr	r1, [pc, #176]	; (800164c <task_ros2_function+0x178>)
 800159a:	f008 fbe5 	bl	8009d68 <rclc_node_init_default>

	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 800159e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a2:	f009 feef 	bl	800b384 <rmw_uros_sync_session>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <task_ros2_function+0xe0>
		  printf("Error on time sync (line %d)\n", __LINE__);
 80015ac:	21e5      	movs	r1, #229	; 0xe5
 80015ae:	4828      	ldr	r0, [pc, #160]	; (8001650 <task_ros2_function+0x17c>)
 80015b0:	f012 fd1c 	bl	8013fec <iprintf>

	  //create gpio_output_sub
	  ping_sub = rcl_get_zero_initialized_subscription();
 80015b4:	f007 fed2 	bl	800935c <rcl_get_zero_initialized_subscription>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <task_ros2_function+0x180>)
 80015bc:	6013      	str	r3, [r2, #0]

	  rclc_subscription_init_best_effort(
 80015be:	f00a fa2d 	bl	800ba1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <task_ros2_function+0x184>)
 80015ca:	4822      	ldr	r0, [pc, #136]	; (8001654 <task_ros2_function+0x180>)
 80015cc:	f008 fc3c 	bl	8009e48 <rclc_subscription_init_best_effort>
			  &ping_sub,
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
			  "/ping");

      rclc_publisher_init_default(
 80015d0:	f00a fa24 	bl	800ba1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <task_ros2_function+0x188>)
 80015dc:	4820      	ldr	r0, [pc, #128]	; (8001660 <task_ros2_function+0x18c>)
 80015de:	f008 fbff 	bl	8009de0 <rclc_publisher_init_default>
              &node,
              ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt32),
              "/pong");

	  // Create executor
	  rclc_executor_init(&executor, &support.context, 1, &allocator);
 80015e2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80015e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015ea:	f103 0108 	add.w	r1, r3, #8
 80015ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015f2:	4613      	mov	r3, r2
 80015f4:	2201      	movs	r2, #1
 80015f6:	f008 f91f 	bl	8009838 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &ping_sub, &pong,
 80015fa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015fe:	2300      	movs	r3, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <task_ros2_function+0x190>)
 8001604:	4a18      	ldr	r2, [pc, #96]	; (8001668 <task_ros2_function+0x194>)
 8001606:	4913      	ldr	r1, [pc, #76]	; (8001654 <task_ros2_function+0x180>)
 8001608:	f008 f98a 	bl	8009920 <rclc_executor_add_subscription>
	 	  			  &onPingCallback, ON_NEW_DATA); // ON_NEW_DATA does not work properly

      // Run executor
	  rclc_executor_spin(&executor);
 800160c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001610:	4618      	mov	r0, r3
 8001612:	f008 fb33 	bl	8009c7c <rclc_executor_spin>

  /* USER CODE END task_ros2_function */
}
 8001616:	bf00      	nop
 8001618:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800161c:	46bd      	mov	sp, r7
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	08001409 	.word	0x08001409
 8001624:	080013a1 	.word	0x080013a1
 8001628:	08001381 	.word	0x08001381
 800162c:	08001355 	.word	0x08001355
 8001630:	20008048 	.word	0x20008048
 8001634:	080018dd 	.word	0x080018dd
 8001638:	08001921 	.word	0x08001921
 800163c:	08001959 	.word	0x08001959
 8001640:	080019c5 	.word	0x080019c5
 8001644:	08015514 	.word	0x08015514
 8001648:	0801553c 	.word	0x0801553c
 800164c:	08015548 	.word	0x08015548
 8001650:	08015550 	.word	0x08015550
 8001654:	200066c4 	.word	0x200066c4
 8001658:	08015570 	.word	0x08015570
 800165c:	08015578 	.word	0x08015578
 8001660:	20007e38 	.word	0x20007e38
 8001664:	0800166d 	.word	0x0800166d
 8001668:	20007e3c 	.word	0x20007e3c

0800166c <onPingCallback>:
/* USER CODE BEGIN Application */

/* ROS CALLBACKS*/


void onPingCallback(const void * msg){
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]


	const std_msgs__msg__UInt32 *ping_data;

	if (msg != NULL){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00e      	beq.n	8001698 <onPingCallback+0x2c>
		ping_data = (const std_msgs__msg__UInt32 *)msg;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

		osDelay(RCL_NS_TO_MS(2000000));
 800167e:	2002      	movs	r0, #2
 8001680:	f005 f804 	bl	800668c <osDelay>

        pong = *ping_data;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <onPingCallback+0x34>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6013      	str	r3, [r2, #0]

		rcl_ret_t ret = rcl_publish(&pong_pub,&pong, NULL);
 800168c:	2200      	movs	r2, #0
 800168e:	4904      	ldr	r1, [pc, #16]	; (80016a0 <onPingCallback+0x34>)
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <onPingCallback+0x38>)
 8001692:	f007 fe3f 	bl	8009314 <rcl_publish>
 8001696:	60b8      	str	r0, [r7, #8]

	}
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20007e3c 	.word	0x20007e3c
 80016a4:	20007e38 	.word	0x20007e38

080016a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a41      	ldr	r2, [pc, #260]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d4:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a3b      	ldr	r2, [pc, #236]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016da:	f043 0320 	orr.w	r3, r3, #32
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b36      	ldr	r3, [pc, #216]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <MX_GPIO_Init+0x120>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_GPIO_Init+0x120>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a2f      	ldr	r2, [pc, #188]	; (80017c8 <MX_GPIO_Init+0x120>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <MX_GPIO_Init+0x120>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800171c:	2200      	movs	r2, #0
 800171e:	f24e 013f 	movw	r1, #57407	; 0xe03f
 8001722:	482a      	ldr	r0, [pc, #168]	; (80017cc <MX_GPIO_Init+0x124>)
 8001724:	f002 fb52 	bl	8003dcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f640 4104 	movw	r1, #3076	; 0xc04
 800172e:	4828      	ldr	r0, [pc, #160]	; (80017d0 <MX_GPIO_Init+0x128>)
 8001730:	f002 fb4c 	bl	8003dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001734:	f24e 033f 	movw	r3, #57407	; 0xe03f
 8001738:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2302      	movs	r3, #2
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	4619      	mov	r1, r3
 800174c:	481f      	ldr	r0, [pc, #124]	; (80017cc <MX_GPIO_Init+0x124>)
 800174e:	f002 f9a9 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8001752:	f640 4304 	movw	r3, #3076	; 0xc04
 8001756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2302      	movs	r3, #2
 8001762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0310 	add.w	r3, r7, #16
 8001768:	4619      	mov	r1, r3
 800176a:	4819      	ldr	r0, [pc, #100]	; (80017d0 <MX_GPIO_Init+0x128>)
 800176c:	f002 f99a 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001770:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	4812      	ldr	r0, [pc, #72]	; (80017d0 <MX_GPIO_Init+0x128>)
 8001786:	f002 f98d 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800178a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800178e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4619      	mov	r1, r3
 800179e:	480b      	ldr	r0, [pc, #44]	; (80017cc <MX_GPIO_Init+0x124>)
 80017a0:	f002 f980 	bl	8003aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <MX_GPIO_Init+0x12c>)
 80017ba:	f002 f973 	bl	8003aa4 <HAL_GPIO_Init>

}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40010c00 	.word	0x40010c00
 80017d4:	40010800 	.word	0x40010800

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f000 fe26 	bl	800242c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e0:	f000 f819 	bl	8001816 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e4:	f7ff ff60 	bl	80016a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e8:	f7ff fd8e 	bl	8001308 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017ec:	f000 fd4a 	bl	8002284 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017f0:	f7ff f980 	bl	8000af4 <MX_ADC1_Init>
  MX_DAC_Init();
 80017f4:	f7ff fd18 	bl	8001228 <MX_DAC_Init>
  MX_CAN_Init();
 80017f8:	f7ff fa3a 	bl	8000c70 <MX_CAN_Init>
  MX_TIM3_Init();
 80017fc:	f000 fbe4 	bl	8001fc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001800:	f000 fc58 	bl	80020b4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001804:	f000 fb6e 	bl	8001ee4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001808:	f004 fe30 	bl	800646c <osKernelInitialize>
  MX_FREERTOS_Init();
 800180c:	f7ff fe50 	bl	80014b0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001810:	f004 fe5e 	bl	80064d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 8001814:	e7fe      	b.n	8001814 <main+0x3c>

08001816 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b096      	sub	sp, #88	; 0x58
 800181a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001820:	2228      	movs	r2, #40	; 0x28
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f012 fb25 	bl	8013e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184a:	2301      	movs	r3, #1
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800184e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001852:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185c:	2302      	movs	r3, #2
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001864:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001866:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fac3 	bl	8003dfc <HAL_RCC_OscConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800187c:	f000 f828 	bl	80018d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001880:	230f      	movs	r3, #15
 8001882:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2102      	movs	r1, #2
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fd2d 	bl	80042fc <HAL_RCC_ClockConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018a8:	f000 f812 	bl	80018d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ac:	2302      	movs	r3, #2
 80018ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f002 fee9 	bl	8004690 <HAL_RCCEx_PeriphCLKConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80018c4:	f000 f804 	bl	80018d0 <Error_Handler>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3758      	adds	r7, #88	; 0x58
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <microros_allocate+0x3c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <microros_allocate+0x3c>)
 80018f4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <microros_allocate+0x40>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <microros_allocate+0x40>)
 8001904:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fa3c 	bl	8000d84 <pvPortMallocMicroROS>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20003024 	.word	0x20003024
 800191c:	20003028 	.word	0x20003028

08001920 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00c      	beq.n	800194a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fb45 	bl	8000fc0 <getBlockSize>
 8001936:	4603      	mov	r3, r0
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <microros_deallocate+0x34>)
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	461a      	mov	r2, r3
 8001940:	4b04      	ldr	r3, [pc, #16]	; (8001954 <microros_deallocate+0x34>)
 8001942:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fae1 	bl	8000f0c <vPortFreeMicroROS>
  }
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20003028 	.word	0x20003028

08001958 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <microros_reallocate+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4413      	add	r3, r2
 800196e:	461a      	mov	r2, r3
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <microros_reallocate+0x64>)
 8001972:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <microros_reallocate+0x68>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	461a      	mov	r2, r3
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <microros_reallocate+0x68>)
 8001982:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d104      	bne.n	8001994 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800198a:	68b8      	ldr	r0, [r7, #8]
 800198c:	f7ff f9fa 	bl	8000d84 <pvPortMallocMicroROS>
 8001990:	4603      	mov	r3, r0
 8001992:	e00e      	b.n	80019b2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7ff fb13 	bl	8000fc0 <getBlockSize>
 800199a:	4603      	mov	r3, r0
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <microros_reallocate+0x68>)
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <microros_reallocate+0x68>)
 80019a6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fb24 	bl	8000ff8 <pvPortReallocMicroROS>
 80019b0:	4603      	mov	r3, r0
  }
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20003024 	.word	0x20003024
 80019c0:	20003028 	.word	0x20003028

080019c4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <microros_zero_allocate+0x48>)
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <microros_zero_allocate+0x48>)
 80019e2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <microros_zero_allocate+0x4c>)
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <microros_zero_allocate+0x4c>)
 80019f6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7ff fb36 	bl	800106c <pvPortCallocMicroROS>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20003024 	.word	0x20003024
 8001a10:	20003028 	.word	0x20003028
 8001a14:	00000000 	.word	0x00000000

08001a18 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001a28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a2c:	a320      	add	r3, pc, #128	; (adr r3, 8001ab0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fe93 	bl	800075c <__aeabi_ldivmod>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a44:	a31a      	add	r3, pc, #104	; (adr r3, 8001ab0 <UTILS_NanosecondsToTimespec+0x98>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	f7fe fe87 	bl	800075c <__aeabi_ldivmod>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da1f      	bge.n	8001a9a <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <UTILS_NanosecondsToTimespec+0x90>)
 8001a60:	fb82 1203 	smull	r1, r2, r2, r3
 8001a64:	1712      	asrs	r2, r2, #28
 8001a66:	17db      	asrs	r3, r3, #31
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	461a      	mov	r2, r3
 8001a78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001a7c:	1a84      	subs	r4, r0, r2
 8001a7e:	eb61 0503 	sbc.w	r5, r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	4907      	ldr	r1, [pc, #28]	; (8001aac <UTILS_NanosecondsToTimespec+0x94>)
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	441a      	add	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]
    }
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	44b82fa1 	.word	0x44b82fa1
 8001aac:	3b9aca00 	.word	0x3b9aca00
 8001ab0:	3b9aca00 	.word	0x3b9aca00
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001ab8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8001ac4:	f107 0308 	add.w	r3, r7, #8
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 f882 	bl	8007be8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	0003      	movs	r3, r0
 8001af6:	2200      	movs	r2, #0
 8001af8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b08:	1884      	adds	r4, r0, r2
 8001b0a:	eb41 0503 	adc.w	r5, r1, r3
 8001b0e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001b12:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b16:	4622      	mov	r2, r4
 8001b18:	462b      	mov	r3, r5
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	0159      	lsls	r1, r3, #5
 8001b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b28:	0150      	lsls	r0, r2, #5
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	1b12      	subs	r2, r2, r4
 8001b30:	eb63 0305 	sbc.w	r3, r3, r5
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0259      	lsls	r1, r3, #9
 8001b3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b42:	0250      	lsls	r0, r2, #9
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	1912      	adds	r2, r2, r4
 8001b4a:	eb45 0303 	adc.w	r3, r5, r3
 8001b4e:	f04f 0000 	mov.w	r0, #0
 8001b52:	f04f 0100 	mov.w	r1, #0
 8001b56:	0199      	lsls	r1, r3, #6
 8001b58:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001b5c:	0190      	lsls	r0, r2, #6
 8001b5e:	1a80      	subs	r0, r0, r2
 8001b60:	eb61 0103 	sbc.w	r1, r1, r3
 8001b64:	eb10 0804 	adds.w	r8, r0, r4
 8001b68:	eb41 0905 	adc.w	r9, r1, r5
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	4640      	mov	r0, r8
 8001b70:	4649      	mov	r1, r9
 8001b72:	f7ff ff51 	bl	8001a18 <UTILS_NanosecondsToTimespec>

    return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_MspInit+0x68>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_MspInit+0x68>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_MspInit+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_MspInit+0x68>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_MspInit+0x68>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_MspInit+0x68>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	f06f 0001 	mvn.w	r0, #1
 8001bc2:	f001 fa52 	bl	800306a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <HAL_MspInit+0x6c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <HAL_MspInit+0x6c>)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2019      	movs	r0, #25
 8001c0a:	f001 fa2e 	bl	800306a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c0e:	2019      	movs	r0, #25
 8001c10:	f001 fa47 	bl	80030a2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <HAL_InitTick+0x9c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c2c:	f107 0210 	add.w	r2, r7, #16
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fcdc 	bl	80045f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c3c:	f002 fcc6 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8001c40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c44:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_InitTick+0xa0>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_InitTick+0xa8>)
 8001c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001c70:	4809      	ldr	r0, [pc, #36]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c72:	f002 fdc3 	bl	80047fc <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d104      	bne.n	8001c86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c7c:	4806      	ldr	r0, [pc, #24]	; (8001c98 <HAL_InitTick+0xa4>)
 8001c7e:	f002 fe0d 	bl	800489c <HAL_TIM_Base_Start_IT>
 8001c82:	4603      	mov	r3, r0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3730      	adds	r7, #48	; 0x30
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	431bde83 	.word	0x431bde83
 8001c98:	20007ea0 	.word	0x20007ea0
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <DMA1_Channel6_IRQHandler+0x10>)
 8001cd2:	f001 fc7d 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20007fc0 	.word	0x20007fc0

08001ce0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ce4:	4802      	ldr	r0, [pc, #8]	; (8001cf0 <DMA1_Channel7_IRQHandler+0x10>)
 8001ce6:	f001 fc73 	bl	80035d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20008004 	.word	0x20008004

08001cf4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cf8:	4802      	ldr	r0, [pc, #8]	; (8001d04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001cfa:	f000 fed5 	bl	8002aa8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20006684 	.word	0x20006684

08001d08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <TIM1_UP_IRQHandler+0x10>)
 8001d0e:	f002 fed5 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20007ea0 	.word	0x20007ea0

08001d1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM2_IRQHandler+0x10>)
 8001d22:	f002 fecb 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20007f78 	.word	0x20007f78

08001d30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM3_IRQHandler+0x10>)
 8001d36:	f002 fec1 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20007f30 	.word	0x20007f30

08001d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART2_IRQHandler+0x10>)
 8001d4a:	f003 fe47 	bl	80059dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20008048 	.word	0x20008048

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_kill>:

int _kill(int pid, int sig)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d70:	f011 ffd8 	bl	8013d24 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2216      	movs	r2, #22
 8001d78:	601a      	str	r2, [r3, #0]
	return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_exit>:

void _exit (int status)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffe7 	bl	8001d66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d98:	e7fe      	b.n	8001d98 <_exit+0x12>

08001d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dac:	f3af 8000 	nop.w
 8001db0:	4601      	mov	r1, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf0      	blt.n	8001dac <_read+0x12>
	}

return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e009      	b.n	8001dfa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf1      	blt.n	8001de6 <_write+0x12>
	}
	return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_sbrk>:

caddr_t _sbrk(int incr) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <_sbrk+0x5c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x16>
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <_sbrk+0x5c>)
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <_sbrk+0x60>)
 8001e20:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x5c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <_sbrk+0x5c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	441a      	add	r2, r3
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <_sbrk+0x64>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	425b      	negs	r3, r3
 8001e36:	490f      	ldr	r1, [pc, #60]	; (8001e74 <_sbrk+0x68>)
 8001e38:	440b      	add	r3, r1
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d908      	bls.n	8001e50 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8001e3e:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8001e40:	f011 ff70 	bl	8013d24 <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e4e:	e006      	b.n	8001e5e <_sbrk+0x52>

    }

    heap_end += incr;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <_sbrk+0x5c>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <_sbrk+0x5c>)
 8001e5a:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8001e5c:	68fb      	ldr	r3, [r7, #12]

}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20003030 	.word	0x20003030
 8001e6c:	2000d280 	.word	0x2000d280
 8001e70:	00000400 	.word	0x00000400
 8001e74:	20010000 	.word	0x20010000

08001e78 <_close>:

int _close(int file)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <_isatty>:

int _isatty(int file)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	; 0x38
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	615a      	str	r2, [r3, #20]
 8001f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600;
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f1e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001f22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f2c:	2264      	movs	r2, #100	; 0x64
 8001f2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f3c:	4821      	ldr	r0, [pc, #132]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f3e:	f002 fc5d 	bl	80047fc <HAL_TIM_Base_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f48:	f7ff fcc2 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f56:	4619      	mov	r1, r3
 8001f58:	481a      	ldr	r0, [pc, #104]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f5a:	f002 ffcd 	bl	8004ef8 <HAL_TIM_ConfigClockSource>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f64:	f7ff fcb4 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001f68:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f6a:	f002 fcf7 	bl	800495c <HAL_TIM_OC_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f74:	f7ff fcac 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	4619      	mov	r1, r3
 8001f86:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001f88:	f003 fb64 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f92:	f7ff fc9d 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_TIM2_Init+0xe0>)
 8001fae:	f002 fe8d 	bl	8004ccc <HAL_TIM_OC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fb8:	f7ff fc8a 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3738      	adds	r7, #56	; 0x38
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20007f78 	.word	0x20007f78

08001fc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	; 0x38
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	; (80020ac <MX_TIM3_Init+0xe4>)
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	; (80020b0 <MX_TIM3_Init+0xe8>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <MX_TIM3_Init+0xe4>)
 8002000:	2224      	movs	r2, #36	; 0x24
 8002002:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b29      	ldr	r3, [pc, #164]	; (80020ac <MX_TIM3_Init+0xe4>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <MX_TIM3_Init+0xe4>)
 800200c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002010:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <MX_TIM3_Init+0xe4>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b24      	ldr	r3, [pc, #144]	; (80020ac <MX_TIM3_Init+0xe4>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800201e:	4823      	ldr	r0, [pc, #140]	; (80020ac <MX_TIM3_Init+0xe4>)
 8002020:	f002 fbec 	bl	80047fc <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800202a:	f7ff fc51 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002038:	4619      	mov	r1, r3
 800203a:	481c      	ldr	r0, [pc, #112]	; (80020ac <MX_TIM3_Init+0xe4>)
 800203c:	f002 ff5c 	bl	8004ef8 <HAL_TIM_ConfigClockSource>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002046:	f7ff fc43 	bl	80018d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800204a:	4818      	ldr	r0, [pc, #96]	; (80020ac <MX_TIM3_Init+0xe4>)
 800204c:	f002 fcde 	bl	8004a0c <HAL_TIM_PWM_Init>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002056:	f7ff fc3b 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002062:	f107 0320 	add.w	r3, r7, #32
 8002066:	4619      	mov	r1, r3
 8002068:	4810      	ldr	r0, [pc, #64]	; (80020ac <MX_TIM3_Init+0xe4>)
 800206a:	f003 faf3 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002074:	f7ff fc2c 	bl	80018d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002078:	2360      	movs	r3, #96	; 0x60
 800207a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250;
 800207c:	23fa      	movs	r3, #250	; 0xfa
 800207e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	4619      	mov	r1, r3
 800208e:	4807      	ldr	r0, [pc, #28]	; (80020ac <MX_TIM3_Init+0xe4>)
 8002090:	f002 fe74 	bl	8004d7c <HAL_TIM_PWM_ConfigChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800209a:	f7ff fc19 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <MX_TIM3_Init+0xe4>)
 80020a0:	f000 f8aa 	bl	80021f8 <HAL_TIM_MspPostInit>

}
 80020a4:	bf00      	nop
 80020a6:	3738      	adds	r7, #56	; 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20007f30 	.word	0x20007f30
 80020b0:	40000400 	.word	0x40000400

080020b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0308 	add.w	r3, r7, #8
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c8:	463b      	mov	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <MX_TIM4_Init+0x94>)
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <MX_TIM4_Init+0x98>)
 80020d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3600;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_TIM4_Init+0x94>)
 80020d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80020dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <MX_TIM4_Init+0x94>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 80020e4:	4b18      	ldr	r3, [pc, #96]	; (8002148 <MX_TIM4_Init+0x94>)
 80020e6:	2264      	movs	r2, #100	; 0x64
 80020e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <MX_TIM4_Init+0x94>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <MX_TIM4_Init+0x94>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020f6:	4814      	ldr	r0, [pc, #80]	; (8002148 <MX_TIM4_Init+0x94>)
 80020f8:	f002 fb80 	bl	80047fc <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002102:	f7ff fbe5 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4619      	mov	r1, r3
 8002112:	480d      	ldr	r0, [pc, #52]	; (8002148 <MX_TIM4_Init+0x94>)
 8002114:	f002 fef0 	bl	8004ef8 <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800211e:	f7ff fbd7 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4619      	mov	r1, r3
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <MX_TIM4_Init+0x94>)
 8002130:	f003 fa90 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800213a:	f7ff fbc9 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20007ee8 	.word	0x20007ee8
 800214c:	40000800 	.word	0x40000800

08002150 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d114      	bne.n	800218c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2105      	movs	r1, #5
 800217e:	201c      	movs	r0, #28
 8002180:	f000 ff73 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002184:	201c      	movs	r0, #28
 8002186:	f000 ff8c 	bl	80030a2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800218a:	e02a      	b.n	80021e2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d114      	bne.n	80021c0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	61d3      	str	r3, [r2, #28]
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2105      	movs	r1, #5
 80021b2:	201d      	movs	r0, #29
 80021b4:	f000 ff59 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021b8:	201d      	movs	r0, #29
 80021ba:	f000 ff72 	bl	80030a2 <HAL_NVIC_EnableIRQ>
}
 80021be:	e010      	b.n	80021e2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_TIM_Base_MspInit+0xa4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_TIM_Base_MspInit+0x9c>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800

080021f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a18      	ldr	r2, [pc, #96]	; (8002274 <HAL_TIM_MspPostInit+0x7c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d129      	bne.n	800226c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002218:	4b17      	ldr	r3, [pc, #92]	; (8002278 <HAL_TIM_MspPostInit+0x80>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a16      	ldr	r2, [pc, #88]	; (8002278 <HAL_TIM_MspPostInit+0x80>)
 800221e:	f043 0308 	orr.w	r3, r3, #8
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_TIM_MspPostInit+0x80>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002230:	2310      	movs	r3, #16
 8002232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2302      	movs	r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4619      	mov	r1, r3
 8002242:	480e      	ldr	r0, [pc, #56]	; (800227c <HAL_TIM_MspPostInit+0x84>)
 8002244:	f001 fc2e 	bl	8003aa4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002248:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_TIM_MspPostInit+0x88>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	4a06      	ldr	r2, [pc, #24]	; (8002280 <HAL_TIM_MspPostInit+0x88>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40000400 	.word	0x40000400
 8002278:	40021000 	.word	0x40021000
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40010000 	.word	0x40010000

08002284 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <MX_USART2_UART_Init+0x50>)
 800228c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_USART2_UART_Init+0x4c>)
 80022bc:	f003 fa48 	bl	8005750 <HAL_UART_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022c6:	f7ff fb03 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20008048 	.word	0x20008048
 80022d4:	40004400 	.word	0x40004400

080022d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a47      	ldr	r2, [pc, #284]	; (8002410 <HAL_UART_MspInit+0x138>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	f040 8086 	bne.w	8002406 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fa:	4b46      	ldr	r3, [pc, #280]	; (8002414 <HAL_UART_MspInit+0x13c>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a45      	ldr	r2, [pc, #276]	; (8002414 <HAL_UART_MspInit+0x13c>)
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	61d3      	str	r3, [r2, #28]
 8002306:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_UART_MspInit+0x13c>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_UART_MspInit+0x13c>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a3f      	ldr	r2, [pc, #252]	; (8002414 <HAL_UART_MspInit+0x13c>)
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	6193      	str	r3, [r2, #24]
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_UART_MspInit+0x13c>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800232a:	2304      	movs	r3, #4
 800232c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	4619      	mov	r1, r3
 800233c:	4836      	ldr	r0, [pc, #216]	; (8002418 <HAL_UART_MspInit+0x140>)
 800233e:	f001 fbb1 	bl	8003aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002342:	2308      	movs	r3, #8
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	4830      	ldr	r0, [pc, #192]	; (8002418 <HAL_UART_MspInit+0x140>)
 8002356:	f001 fba5 	bl	8003aa4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800235a:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_UART_MspInit+0x144>)
 800235c:	4a30      	ldr	r2, [pc, #192]	; (8002420 <HAL_UART_MspInit+0x148>)
 800235e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002360:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_UART_MspInit+0x144>)
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_UART_MspInit+0x144>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_UART_MspInit+0x144>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002372:	4b2a      	ldr	r3, [pc, #168]	; (800241c <HAL_UART_MspInit+0x144>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_UART_MspInit+0x144>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800237e:	4b27      	ldr	r3, [pc, #156]	; (800241c <HAL_UART_MspInit+0x144>)
 8002380:	2220      	movs	r2, #32
 8002382:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <HAL_UART_MspInit+0x144>)
 8002386:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800238a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800238c:	4823      	ldr	r0, [pc, #140]	; (800241c <HAL_UART_MspInit+0x144>)
 800238e:	f000 ff07 	bl	80031a0 <HAL_DMA_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002398:	f7ff fa9a 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_UART_MspInit+0x144>)
 80023a0:	639a      	str	r2, [r3, #56]	; 0x38
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_UART_MspInit+0x144>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <HAL_UART_MspInit+0x150>)
 80023ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023b0:	2210      	movs	r2, #16
 80023b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c0:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023d4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80023d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023da:	4812      	ldr	r0, [pc, #72]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023dc:	f000 fee0 	bl	80031a0 <HAL_DMA_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80023e6:	f7ff fa73 	bl	80018d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023ee:	635a      	str	r2, [r3, #52]	; 0x34
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_UART_MspInit+0x14c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2105      	movs	r1, #5
 80023fa:	2026      	movs	r0, #38	; 0x26
 80023fc:	f000 fe35 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002400:	2026      	movs	r0, #38	; 0x26
 8002402:	f000 fe4e 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40004400 	.word	0x40004400
 8002414:	40021000 	.word	0x40021000
 8002418:	40010800 	.word	0x40010800
 800241c:	20007fc0 	.word	0x20007fc0
 8002420:	4002006c 	.word	0x4002006c
 8002424:	20008004 	.word	0x20008004
 8002428:	40020080 	.word	0x40020080

0800242c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_Init+0x28>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_Init+0x28>)
 8002436:	f043 0310 	orr.w	r3, r3, #16
 800243a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 fe09 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002442:	200f      	movs	r0, #15
 8002444:	f7ff fbd6 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002448:	f7ff fb9c 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40022000 	.word	0x40022000

08002458 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_GetTick+0x10>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	2000808c 	.word	0x2000808c

0800246c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0ce      	b.n	800262c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fb8c 	bl	8000bc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f9bd 	bl	8002830 <ADC_ConversionStop_Disable>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80a9 	bne.w	800261a <HAL_ADC_Init+0x1ae>
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 80a5 	bne.w	800261a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024d8:	f023 0302 	bic.w	r3, r3, #2
 80024dc:	f043 0202 	orr.w	r2, r3, #2
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4951      	ldr	r1, [pc, #324]	; (8002634 <HAL_ADC_Init+0x1c8>)
 80024ee:	428b      	cmp	r3, r1
 80024f0:	d10a      	bne.n	8002508 <HAL_ADC_Init+0x9c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024fa:	d002      	beq.n	8002502 <HAL_ADC_Init+0x96>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	e004      	b.n	800250c <HAL_ADC_Init+0xa0>
 8002502:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002506:	e001      	b.n	800250c <HAL_ADC_Init+0xa0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800250c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7b1b      	ldrb	r3, [r3, #12]
 8002512:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002514:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	4313      	orrs	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002524:	d003      	beq.n	800252e <HAL_ADC_Init+0xc2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d102      	bne.n	8002534 <HAL_ADC_Init+0xc8>
 800252e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002532:	e000      	b.n	8002536 <HAL_ADC_Init+0xca>
 8002534:	2300      	movs	r3, #0
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	7d1b      	ldrb	r3, [r3, #20]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d119      	bne.n	8002578 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	7b1b      	ldrb	r3, [r3, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	3b01      	subs	r3, #1
 8002552:	035a      	lsls	r2, r3, #13
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e00b      	b.n	8002578 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_ADC_Init+0x1cc>)
 8002594:	4013      	ands	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	430b      	orrs	r3, r1
 800259e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a8:	d003      	beq.n	80025b2 <HAL_ADC_Init+0x146>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d104      	bne.n	80025bc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	051b      	lsls	r3, r3, #20
 80025ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_ADC_Init+0x1d0>)
 80025d8:	4013      	ands	r3, r2
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10b      	bne.n	80025f8 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025f6:	e018      	b.n	800262a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f023 0312 	bic.w	r3, r3, #18
 8002600:	f043 0210 	orr.w	r2, r3, #16
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	f043 0201 	orr.w	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002618:	e007      	b.n	800262a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800262a:	7dfb      	ldrb	r3, [r7, #23]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40013c00 	.word	0x40013c00
 8002638:	ffe1f7fd 	.word	0xffe1f7fd
 800263c:	ff1f0efe 	.word	0xff1f0efe

08002640 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x20>
 800265c:	2302      	movs	r3, #2
 800265e:	e0dc      	b.n	800281a <HAL_ADC_ConfigChannel+0x1da>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b06      	cmp	r3, #6
 800266e:	d81c      	bhi.n	80026aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	3b05      	subs	r3, #5
 8002682:	221f      	movs	r2, #31
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	4019      	ands	r1, r3
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b05      	subs	r3, #5
 800269c:	fa00 f203 	lsl.w	r2, r0, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34
 80026a8:	e03c      	b.n	8002724 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d81c      	bhi.n	80026ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	3b23      	subs	r3, #35	; 0x23
 80026c4:	221f      	movs	r2, #31
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4019      	ands	r1, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	3b23      	subs	r3, #35	; 0x23
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ea:	e01b      	b.n	8002724 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b41      	subs	r3, #65	; 0x41
 80026fe:	221f      	movs	r2, #31
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	4019      	ands	r1, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b41      	subs	r3, #65	; 0x41
 8002718:	fa00 f203 	lsl.w	r2, r0, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b09      	cmp	r3, #9
 800272a:	d91c      	bls.n	8002766 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68d9      	ldr	r1, [r3, #12]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	3b1e      	subs	r3, #30
 800273e:	2207      	movs	r2, #7
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	4019      	ands	r1, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6898      	ldr	r0, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	3b1e      	subs	r3, #30
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	e019      	b.n	800279a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	2207      	movs	r2, #7
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	4019      	ands	r1, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	fa00 f203 	lsl.w	r2, r0, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d003      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d132      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_ADC_ConfigChannel+0x1e4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d125      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d126      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d11a      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_ADC_ConfigChannel+0x1e8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_ADC_ConfigChannel+0x1ec>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	0c9a      	lsrs	r2, r3, #18
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027f0:	e002      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f9      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x1b2>
 80027fe:	e007      	b.n	8002810 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	f043 0220 	orr.w	r2, r3, #32
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002818:	7bfb      	ldrb	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012400 	.word	0x40012400
 8002828:	20000004 	.word	0x20000004
 800282c:	431bde83 	.word	0x431bde83

08002830 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d12e      	bne.n	80028a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800285a:	f7ff fdfd 	bl	8002458 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002860:	e01b      	b.n	800289a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002862:	f7ff fdf9 	bl	8002458 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d914      	bls.n	800289a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10d      	bne.n	800289a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e007      	b.n	80028aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d0dc      	beq.n	8002862 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e0ed      	b.n	8002aa0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7fe fa03 	bl	8000cdc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028e6:	f7ff fdb7 	bl	8002458 <HAL_GetTick>
 80028ea:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028ec:	e012      	b.n	8002914 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028ee:	f7ff fdb3 	bl	8002458 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b0a      	cmp	r3, #10
 80028fa:	d90b      	bls.n	8002914 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2205      	movs	r2, #5
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0c5      	b.n	8002aa0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0e5      	beq.n	80028ee <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0202 	bic.w	r2, r2, #2
 8002930:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002932:	f7ff fd91 	bl	8002458 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002938:	e012      	b.n	8002960 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800293a:	f7ff fd8d 	bl	8002458 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b0a      	cmp	r3, #10
 8002946:	d90b      	bls.n	8002960 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2205      	movs	r2, #5
 8002958:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e09f      	b.n	8002aa0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1e5      	bne.n	800293a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7e1b      	ldrb	r3, [r3, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e5b      	ldrb	r3, [r3, #25]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e007      	b.n	80029c2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	7e9b      	ldrb	r3, [r3, #26]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e007      	b.n	80029ec <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0220 	bic.w	r2, r2, #32
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7edb      	ldrb	r3, [r3, #27]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d108      	bne.n	8002a06 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0210 	bic.w	r2, r2, #16
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e007      	b.n	8002a16 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0210 	orr.w	r2, r2, #16
 8002a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7f1b      	ldrb	r3, [r3, #28]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0208 	orr.w	r2, r2, #8
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e007      	b.n	8002a40 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0208 	bic.w	r2, r2, #8
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7f5b      	ldrb	r3, [r3, #29]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d108      	bne.n	8002a5a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0204 	orr.w	r2, r2, #4
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e007      	b.n	8002a6a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0204 	bic.w	r2, r2, #4
 8002a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	ea42 0103 	orr.w	r1, r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d07c      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d023      	beq.n	8002b40 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f983 	bl	8002e16 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b10:	e016      	b.n	8002b40 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e00c      	b.n	8002b40 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	e002      	b.n	8002b40 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f986 	bl	8002e4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d024      	beq.n	8002b94 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f962 	bl	8002e28 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b64:	e016      	b.n	8002b94 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
 8002b78:	e00c      	b.n	8002b94 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	e002      	b.n	8002b94 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f965 	bl	8002e5e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f941 	bl	8002e3a <HAL_CAN_TxMailbox2CompleteCallback>
 8002bb8:	e016      	b.n	8002be8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
 8002bcc:	e00c      	b.n	8002be8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
 8002be0:	e002      	b.n	8002be8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f944 	bl	8002e70 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00c      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d007      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2210      	movs	r2, #16
 8002c0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d006      	beq.n	8002c2e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2208      	movs	r2, #8
 8002c26:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f933 	bl	8002e94 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f91b 	bl	8002e82 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d006      	beq.n	8002c92 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2208      	movs	r2, #8
 8002c8a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f913 	bl	8002eb8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8fb 	bl	8002ea6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f8fc 	bl	8002eca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00b      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2208      	movs	r2, #8
 8002cec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8f4 	bl	8002edc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07b      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d072      	beq.n	8002dee <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d008      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f043 0302 	orr.w	r3, r3, #2
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d043      	beq.n	8002dee <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03e      	beq.n	8002dee <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d76:	2b60      	cmp	r3, #96	; 0x60
 8002d78:	d02b      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x32a>
 8002d7a:	2b60      	cmp	r3, #96	; 0x60
 8002d7c:	d82e      	bhi.n	8002ddc <HAL_CAN_IRQHandler+0x334>
 8002d7e:	2b50      	cmp	r3, #80	; 0x50
 8002d80:	d022      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x320>
 8002d82:	2b50      	cmp	r3, #80	; 0x50
 8002d84:	d82a      	bhi.n	8002ddc <HAL_CAN_IRQHandler+0x334>
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d019      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x316>
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d826      	bhi.n	8002ddc <HAL_CAN_IRQHandler+0x334>
 8002d8e:	2b30      	cmp	r3, #48	; 0x30
 8002d90:	d010      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x30c>
 8002d92:	2b30      	cmp	r3, #48	; 0x30
 8002d94:	d822      	bhi.n	8002ddc <HAL_CAN_IRQHandler+0x334>
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d002      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x2f8>
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d005      	beq.n	8002daa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d9e:	e01d      	b.n	8002ddc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	f043 0308 	orr.w	r3, r3, #8
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da8:	e019      	b.n	8002dde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f043 0310 	orr.w	r3, r3, #16
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db2:	e014      	b.n	8002dde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f043 0320 	orr.w	r3, r3, #32
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dbc:	e00f      	b.n	8002dde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc6:	e00a      	b.n	8002dde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd0:	e005      	b.n	8002dde <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dda:	e000      	b.n	8002dde <HAL_CAN_IRQHandler+0x336>
            break;
 8002ddc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dec:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2204      	movs	r2, #4
 8002df4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f870 	bl	8002eee <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	; 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f32:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <__NVIC_SetPriorityGrouping+0x44>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	60d3      	str	r3, [r2, #12]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <__NVIC_GetPriorityGrouping+0x18>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 0307 	and.w	r3, r3, #7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db0b      	blt.n	8002f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4906      	ldr	r1, [pc, #24]	; (8002f98 <__NVIC_EnableIRQ+0x34>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	2001      	movs	r0, #1
 8002f86:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff4f 	bl	8002f00 <__NVIC_SetPriorityGrouping>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800307c:	f7ff ff64 	bl	8002f48 <__NVIC_GetPriorityGrouping>
 8003080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ffb2 	bl	8002ff0 <NVIC_EncodePriority>
 800308c:	4602      	mov	r2, r0
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff81 	bl	8002f9c <__NVIC_SetPriority>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff57 	bl	8002f64 <__NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e014      	b.n	80030fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	791b      	ldrb	r3, [r3, #4]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d105      	bne.n	80030e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe f8d5 	bl	8001290 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2202      	movs	r2, #2
 80030ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003102:	b480      	push	{r7}
 8003104:	b087      	sub	sp, #28
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	795b      	ldrb	r3, [r3, #5]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_DAC_ConfigChannel+0x18>
 8003116:	2302      	movs	r3, #2
 8003118:	e03c      	b.n	8003194 <HAL_DAC_ConfigChannel+0x92>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2202      	movs	r2, #2
 8003124:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4013      	ands	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	22c0      	movs	r2, #192	; 0xc0
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43da      	mvns	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	400a      	ands	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
	...

080031a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e059      	b.n	800326a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_DMA_Init+0xd4>)
 80031be:	429a      	cmp	r2, r3
 80031c0:	d80f      	bhi.n	80031e2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_DMA_Init+0xd8>)
 80031ca:	4413      	add	r3, r2
 80031cc:	4a2b      	ldr	r2, [pc, #172]	; (800327c <HAL_DMA_Init+0xdc>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	009a      	lsls	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_DMA_Init+0xe0>)
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
 80031e0:	e00e      	b.n	8003200 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_DMA_Init+0xe4>)
 80031ea:	4413      	add	r3, r2
 80031ec:	4a23      	ldr	r2, [pc, #140]	; (800327c <HAL_DMA_Init+0xdc>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a22      	ldr	r2, [pc, #136]	; (8003288 <HAL_DMA_Init+0xe8>)
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003216:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800321a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	40020407 	.word	0x40020407
 8003278:	bffdfff8 	.word	0xbffdfff8
 800327c:	cccccccd 	.word	0xcccccccd
 8003280:	40020000 	.word	0x40020000
 8003284:	bffdfbf8 	.word	0xbffdfbf8
 8003288:	40020400 	.word	0x40020400

0800328c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_DMA_Start_IT+0x20>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e04a      	b.n	8003342 <HAL_DMA_Start_IT+0xb6>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d13a      	bne.n	8003334 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0201 	bic.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fbb0 	bl	8003a48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 020e 	orr.w	r2, r2, #14
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e00f      	b.n	8003322 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0204 	bic.w	r2, r2, #4
 8003310:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 020a 	orr.w	r2, r2, #10
 8003320:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e005      	b.n	8003340 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003340:	7dfb      	ldrb	r3, [r7, #23]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800335c:	2b02      	cmp	r3, #2
 800335e:	d008      	beq.n	8003372 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2204      	movs	r2, #4
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e020      	b.n	80033b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 020e 	bic.w	r2, r2, #14
 8003380:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2101      	movs	r1, #1
 800339c:	fa01 f202 	lsl.w	r2, r1, r2
 80033a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d005      	beq.n	80033e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	e0d6      	b.n	8003590 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 020e 	bic.w	r2, r2, #14
 80033f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	4b64      	ldr	r3, [pc, #400]	; (800359c <HAL_DMA_Abort_IT+0x1dc>)
 800340a:	429a      	cmp	r2, r3
 800340c:	d958      	bls.n	80034c0 <HAL_DMA_Abort_IT+0x100>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a63      	ldr	r2, [pc, #396]	; (80035a0 <HAL_DMA_Abort_IT+0x1e0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d04f      	beq.n	80034b8 <HAL_DMA_Abort_IT+0xf8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <HAL_DMA_Abort_IT+0x1e4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d048      	beq.n	80034b4 <HAL_DMA_Abort_IT+0xf4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a60      	ldr	r2, [pc, #384]	; (80035a8 <HAL_DMA_Abort_IT+0x1e8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d040      	beq.n	80034ae <HAL_DMA_Abort_IT+0xee>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a5e      	ldr	r2, [pc, #376]	; (80035ac <HAL_DMA_Abort_IT+0x1ec>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d038      	beq.n	80034a8 <HAL_DMA_Abort_IT+0xe8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a5d      	ldr	r2, [pc, #372]	; (80035b0 <HAL_DMA_Abort_IT+0x1f0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d030      	beq.n	80034a2 <HAL_DMA_Abort_IT+0xe2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <HAL_DMA_Abort_IT+0x1f4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d028      	beq.n	800349c <HAL_DMA_Abort_IT+0xdc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	; (800359c <HAL_DMA_Abort_IT+0x1dc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d020      	beq.n	8003496 <HAL_DMA_Abort_IT+0xd6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a57      	ldr	r2, [pc, #348]	; (80035b8 <HAL_DMA_Abort_IT+0x1f8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d019      	beq.n	8003492 <HAL_DMA_Abort_IT+0xd2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a56      	ldr	r2, [pc, #344]	; (80035bc <HAL_DMA_Abort_IT+0x1fc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d012      	beq.n	800348e <HAL_DMA_Abort_IT+0xce>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a54      	ldr	r2, [pc, #336]	; (80035c0 <HAL_DMA_Abort_IT+0x200>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00a      	beq.n	8003488 <HAL_DMA_Abort_IT+0xc8>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <HAL_DMA_Abort_IT+0x204>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <HAL_DMA_Abort_IT+0xc2>
 800347c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003480:	e01b      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 8003482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003486:	e018      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 8003488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348c:	e015      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 800348e:	2310      	movs	r3, #16
 8003490:	e013      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 8003492:	2301      	movs	r3, #1
 8003494:	e011      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 8003496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800349a:	e00e      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 800349c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034a0:	e00b      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 80034a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034a6:	e008      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 80034a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ac:	e005      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 80034ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b2:	e002      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 80034b4:	2310      	movs	r3, #16
 80034b6:	e000      	b.n	80034ba <HAL_DMA_Abort_IT+0xfa>
 80034b8:	2301      	movs	r3, #1
 80034ba:	4a43      	ldr	r2, [pc, #268]	; (80035c8 <HAL_DMA_Abort_IT+0x208>)
 80034bc:	6053      	str	r3, [r2, #4]
 80034be:	e057      	b.n	8003570 <HAL_DMA_Abort_IT+0x1b0>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a36      	ldr	r2, [pc, #216]	; (80035a0 <HAL_DMA_Abort_IT+0x1e0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d04f      	beq.n	800356a <HAL_DMA_Abort_IT+0x1aa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a35      	ldr	r2, [pc, #212]	; (80035a4 <HAL_DMA_Abort_IT+0x1e4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d048      	beq.n	8003566 <HAL_DMA_Abort_IT+0x1a6>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a33      	ldr	r2, [pc, #204]	; (80035a8 <HAL_DMA_Abort_IT+0x1e8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d040      	beq.n	8003560 <HAL_DMA_Abort_IT+0x1a0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a32      	ldr	r2, [pc, #200]	; (80035ac <HAL_DMA_Abort_IT+0x1ec>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d038      	beq.n	800355a <HAL_DMA_Abort_IT+0x19a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <HAL_DMA_Abort_IT+0x1f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d030      	beq.n	8003554 <HAL_DMA_Abort_IT+0x194>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <HAL_DMA_Abort_IT+0x1f4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d028      	beq.n	800354e <HAL_DMA_Abort_IT+0x18e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a26      	ldr	r2, [pc, #152]	; (800359c <HAL_DMA_Abort_IT+0x1dc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d020      	beq.n	8003548 <HAL_DMA_Abort_IT+0x188>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2b      	ldr	r2, [pc, #172]	; (80035b8 <HAL_DMA_Abort_IT+0x1f8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d019      	beq.n	8003544 <HAL_DMA_Abort_IT+0x184>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a29      	ldr	r2, [pc, #164]	; (80035bc <HAL_DMA_Abort_IT+0x1fc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d012      	beq.n	8003540 <HAL_DMA_Abort_IT+0x180>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <HAL_DMA_Abort_IT+0x200>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00a      	beq.n	800353a <HAL_DMA_Abort_IT+0x17a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_DMA_Abort_IT+0x204>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d102      	bne.n	8003534 <HAL_DMA_Abort_IT+0x174>
 800352e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003532:	e01b      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003538:	e018      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 800353a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353e:	e015      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003540:	2310      	movs	r3, #16
 8003542:	e013      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003544:	2301      	movs	r3, #1
 8003546:	e011      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800354c:	e00e      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 800354e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003552:	e00b      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003558:	e008      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 800355a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355e:	e005      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003564:	e002      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 8003566:	2310      	movs	r3, #16
 8003568:	e000      	b.n	800356c <HAL_DMA_Abort_IT+0x1ac>
 800356a:	2301      	movs	r3, #1
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <HAL_DMA_Abort_IT+0x20c>)
 800356e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
    } 
  }
  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40020080 	.word	0x40020080
 80035a0:	40020008 	.word	0x40020008
 80035a4:	4002001c 	.word	0x4002001c
 80035a8:	40020030 	.word	0x40020030
 80035ac:	40020044 	.word	0x40020044
 80035b0:	40020058 	.word	0x40020058
 80035b4:	4002006c 	.word	0x4002006c
 80035b8:	40020408 	.word	0x40020408
 80035bc:	4002041c 	.word	0x4002041c
 80035c0:	40020430 	.word	0x40020430
 80035c4:	40020444 	.word	0x40020444
 80035c8:	40020400 	.word	0x40020400
 80035cc:	40020000 	.word	0x40020000

080035d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2204      	movs	r2, #4
 80035ee:	409a      	lsls	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80d6 	beq.w	80037a6 <HAL_DMA_IRQHandler+0x1d6>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80d0 	beq.w	80037a6 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0204 	bic.w	r2, r2, #4
 8003622:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	461a      	mov	r2, r3
 800362a:	4b9b      	ldr	r3, [pc, #620]	; (8003898 <HAL_DMA_IRQHandler+0x2c8>)
 800362c:	429a      	cmp	r2, r3
 800362e:	d958      	bls.n	80036e2 <HAL_DMA_IRQHandler+0x112>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a99      	ldr	r2, [pc, #612]	; (800389c <HAL_DMA_IRQHandler+0x2cc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d04f      	beq.n	80036da <HAL_DMA_IRQHandler+0x10a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a98      	ldr	r2, [pc, #608]	; (80038a0 <HAL_DMA_IRQHandler+0x2d0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d048      	beq.n	80036d6 <HAL_DMA_IRQHandler+0x106>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a96      	ldr	r2, [pc, #600]	; (80038a4 <HAL_DMA_IRQHandler+0x2d4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d040      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x100>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a95      	ldr	r2, [pc, #596]	; (80038a8 <HAL_DMA_IRQHandler+0x2d8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d038      	beq.n	80036ca <HAL_DMA_IRQHandler+0xfa>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a93      	ldr	r2, [pc, #588]	; (80038ac <HAL_DMA_IRQHandler+0x2dc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d030      	beq.n	80036c4 <HAL_DMA_IRQHandler+0xf4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a92      	ldr	r2, [pc, #584]	; (80038b0 <HAL_DMA_IRQHandler+0x2e0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d028      	beq.n	80036be <HAL_DMA_IRQHandler+0xee>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a89      	ldr	r2, [pc, #548]	; (8003898 <HAL_DMA_IRQHandler+0x2c8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d020      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xe8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a8e      	ldr	r2, [pc, #568]	; (80038b4 <HAL_DMA_IRQHandler+0x2e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d019      	beq.n	80036b4 <HAL_DMA_IRQHandler+0xe4>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a8c      	ldr	r2, [pc, #560]	; (80038b8 <HAL_DMA_IRQHandler+0x2e8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d012      	beq.n	80036b0 <HAL_DMA_IRQHandler+0xe0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a8b      	ldr	r2, [pc, #556]	; (80038bc <HAL_DMA_IRQHandler+0x2ec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00a      	beq.n	80036aa <HAL_DMA_IRQHandler+0xda>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a89      	ldr	r2, [pc, #548]	; (80038c0 <HAL_DMA_IRQHandler+0x2f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d102      	bne.n	80036a4 <HAL_DMA_IRQHandler+0xd4>
 800369e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036a2:	e01b      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036a8:	e018      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ae:	e015      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036b0:	2340      	movs	r3, #64	; 0x40
 80036b2:	e013      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036b4:	2304      	movs	r3, #4
 80036b6:	e011      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036bc:	e00e      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036c2:	e00b      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036c8:	e008      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036ce:	e005      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d4:	e002      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036d6:	2340      	movs	r3, #64	; 0x40
 80036d8:	e000      	b.n	80036dc <HAL_DMA_IRQHandler+0x10c>
 80036da:	2304      	movs	r3, #4
 80036dc:	4a79      	ldr	r2, [pc, #484]	; (80038c4 <HAL_DMA_IRQHandler+0x2f4>)
 80036de:	6053      	str	r3, [r2, #4]
 80036e0:	e057      	b.n	8003792 <HAL_DMA_IRQHandler+0x1c2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6d      	ldr	r2, [pc, #436]	; (800389c <HAL_DMA_IRQHandler+0x2cc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d04f      	beq.n	800378c <HAL_DMA_IRQHandler+0x1bc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a6b      	ldr	r2, [pc, #428]	; (80038a0 <HAL_DMA_IRQHandler+0x2d0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d048      	beq.n	8003788 <HAL_DMA_IRQHandler+0x1b8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6a      	ldr	r2, [pc, #424]	; (80038a4 <HAL_DMA_IRQHandler+0x2d4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_DMA_IRQHandler+0x1b2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <HAL_DMA_IRQHandler+0x2d8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d038      	beq.n	800377c <HAL_DMA_IRQHandler+0x1ac>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a67      	ldr	r2, [pc, #412]	; (80038ac <HAL_DMA_IRQHandler+0x2dc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d030      	beq.n	8003776 <HAL_DMA_IRQHandler+0x1a6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <HAL_DMA_IRQHandler+0x2e0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d028      	beq.n	8003770 <HAL_DMA_IRQHandler+0x1a0>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_DMA_IRQHandler+0x2c8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d020      	beq.n	800376a <HAL_DMA_IRQHandler+0x19a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a61      	ldr	r2, [pc, #388]	; (80038b4 <HAL_DMA_IRQHandler+0x2e4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d019      	beq.n	8003766 <HAL_DMA_IRQHandler+0x196>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a60      	ldr	r2, [pc, #384]	; (80038b8 <HAL_DMA_IRQHandler+0x2e8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d012      	beq.n	8003762 <HAL_DMA_IRQHandler+0x192>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a5e      	ldr	r2, [pc, #376]	; (80038bc <HAL_DMA_IRQHandler+0x2ec>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00a      	beq.n	800375c <HAL_DMA_IRQHandler+0x18c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a5d      	ldr	r2, [pc, #372]	; (80038c0 <HAL_DMA_IRQHandler+0x2f0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d102      	bne.n	8003756 <HAL_DMA_IRQHandler+0x186>
 8003750:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003754:	e01b      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003756:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800375a:	e018      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 800375c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003760:	e015      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003762:	2340      	movs	r3, #64	; 0x40
 8003764:	e013      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003766:	2304      	movs	r3, #4
 8003768:	e011      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 800376a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800376e:	e00e      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003770:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003774:	e00b      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003776:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800377a:	e008      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 800377c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003780:	e005      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003786:	e002      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	e000      	b.n	800378e <HAL_DMA_IRQHandler+0x1be>
 800378c:	2304      	movs	r3, #4
 800378e:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <HAL_DMA_IRQHandler+0x2f8>)
 8003790:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8136 	beq.w	8003a08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	e130      	b.n	8003a08 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2202      	movs	r2, #2
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80f8 	beq.w	80039a8 <HAL_DMA_IRQHandler+0x3d8>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80f2 	beq.w	80039a8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 020a 	bic.w	r2, r2, #10
 80037e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b29      	ldr	r3, [pc, #164]	; (8003898 <HAL_DMA_IRQHandler+0x2c8>)
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d973      	bls.n	80038de <HAL_DMA_IRQHandler+0x30e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a28      	ldr	r2, [pc, #160]	; (800389c <HAL_DMA_IRQHandler+0x2cc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d06a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x306>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <HAL_DMA_IRQHandler+0x2d0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d063      	beq.n	80038d2 <HAL_DMA_IRQHandler+0x302>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <HAL_DMA_IRQHandler+0x2d4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d05b      	beq.n	80038cc <HAL_DMA_IRQHandler+0x2fc>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a23      	ldr	r2, [pc, #140]	; (80038a8 <HAL_DMA_IRQHandler+0x2d8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d038      	beq.n	8003890 <HAL_DMA_IRQHandler+0x2c0>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_DMA_IRQHandler+0x2dc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d030      	beq.n	800388a <HAL_DMA_IRQHandler+0x2ba>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_DMA_IRQHandler+0x2e0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d028      	beq.n	8003884 <HAL_DMA_IRQHandler+0x2b4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_DMA_IRQHandler+0x2c8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d020      	beq.n	800387e <HAL_DMA_IRQHandler+0x2ae>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1c      	ldr	r2, [pc, #112]	; (80038b4 <HAL_DMA_IRQHandler+0x2e4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d019      	beq.n	800387a <HAL_DMA_IRQHandler+0x2aa>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_DMA_IRQHandler+0x2e8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d012      	beq.n	8003876 <HAL_DMA_IRQHandler+0x2a6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	; (80038bc <HAL_DMA_IRQHandler+0x2ec>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00a      	beq.n	8003870 <HAL_DMA_IRQHandler+0x2a0>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_DMA_IRQHandler+0x2f0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <HAL_DMA_IRQHandler+0x29a>
 8003864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003868:	e036      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 800386a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386e:	e033      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 8003870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003874:	e030      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 8003876:	2320      	movs	r3, #32
 8003878:	e02e      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 800387a:	2302      	movs	r3, #2
 800387c:	e02c      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 800387e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003882:	e029      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 8003884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003888:	e026      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 800388a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388e:	e023      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 8003890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003894:	e020      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 8003896:	bf00      	nop
 8003898:	40020080 	.word	0x40020080
 800389c:	40020008 	.word	0x40020008
 80038a0:	4002001c 	.word	0x4002001c
 80038a4:	40020030 	.word	0x40020030
 80038a8:	40020044 	.word	0x40020044
 80038ac:	40020058 	.word	0x40020058
 80038b0:	4002006c 	.word	0x4002006c
 80038b4:	40020408 	.word	0x40020408
 80038b8:	4002041c 	.word	0x4002041c
 80038bc:	40020430 	.word	0x40020430
 80038c0:	40020444 	.word	0x40020444
 80038c4:	40020400 	.word	0x40020400
 80038c8:	40020000 	.word	0x40020000
 80038cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038d0:	e002      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 80038d2:	2320      	movs	r3, #32
 80038d4:	e000      	b.n	80038d8 <HAL_DMA_IRQHandler+0x308>
 80038d6:	2302      	movs	r3, #2
 80038d8:	4a4e      	ldr	r2, [pc, #312]	; (8003a14 <HAL_DMA_IRQHandler+0x444>)
 80038da:	6053      	str	r3, [r2, #4]
 80038dc:	e057      	b.n	800398e <HAL_DMA_IRQHandler+0x3be>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a4d      	ldr	r2, [pc, #308]	; (8003a18 <HAL_DMA_IRQHandler+0x448>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d04f      	beq.n	8003988 <HAL_DMA_IRQHandler+0x3b8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a4b      	ldr	r2, [pc, #300]	; (8003a1c <HAL_DMA_IRQHandler+0x44c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d048      	beq.n	8003984 <HAL_DMA_IRQHandler+0x3b4>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a4a      	ldr	r2, [pc, #296]	; (8003a20 <HAL_DMA_IRQHandler+0x450>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d040      	beq.n	800397e <HAL_DMA_IRQHandler+0x3ae>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a48      	ldr	r2, [pc, #288]	; (8003a24 <HAL_DMA_IRQHandler+0x454>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d038      	beq.n	8003978 <HAL_DMA_IRQHandler+0x3a8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a47      	ldr	r2, [pc, #284]	; (8003a28 <HAL_DMA_IRQHandler+0x458>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d030      	beq.n	8003972 <HAL_DMA_IRQHandler+0x3a2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <HAL_DMA_IRQHandler+0x45c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d028      	beq.n	800396c <HAL_DMA_IRQHandler+0x39c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a44      	ldr	r2, [pc, #272]	; (8003a30 <HAL_DMA_IRQHandler+0x460>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d020      	beq.n	8003966 <HAL_DMA_IRQHandler+0x396>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a42      	ldr	r2, [pc, #264]	; (8003a34 <HAL_DMA_IRQHandler+0x464>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_DMA_IRQHandler+0x392>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a41      	ldr	r2, [pc, #260]	; (8003a38 <HAL_DMA_IRQHandler+0x468>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d012      	beq.n	800395e <HAL_DMA_IRQHandler+0x38e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <HAL_DMA_IRQHandler+0x46c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x388>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3e      	ldr	r2, [pc, #248]	; (8003a40 <HAL_DMA_IRQHandler+0x470>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d102      	bne.n	8003952 <HAL_DMA_IRQHandler+0x382>
 800394c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003950:	e01b      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003956:	e018      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800395c:	e015      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 800395e:	2320      	movs	r3, #32
 8003960:	e013      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003962:	2302      	movs	r3, #2
 8003964:	e011      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396a:	e00e      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 800396c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003970:	e00b      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003976:	e008      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397c:	e005      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 800397e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003982:	e002      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003984:	2320      	movs	r3, #32
 8003986:	e000      	b.n	800398a <HAL_DMA_IRQHandler+0x3ba>
 8003988:	2302      	movs	r3, #2
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_DMA_IRQHandler+0x474>)
 800398c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d034      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039a6:	e02f      	b.n	8003a08 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2208      	movs	r2, #8
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d028      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x43a>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d023      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 020e 	bic.w	r2, r2, #14
 80039d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	2101      	movs	r1, #1
 80039dc:	fa01 f202 	lsl.w	r2, r1, r2
 80039e0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
    }
  }
  return;
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
}
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40020008 	.word	0x40020008
 8003a1c:	4002001c 	.word	0x4002001c
 8003a20:	40020030 	.word	0x40020030
 8003a24:	40020044 	.word	0x40020044
 8003a28:	40020058 	.word	0x40020058
 8003a2c:	4002006c 	.word	0x4002006c
 8003a30:	40020080 	.word	0x40020080
 8003a34:	40020408 	.word	0x40020408
 8003a38:	4002041c 	.word	0x4002041c
 8003a3c:	40020430 	.word	0x40020430
 8003a40:	40020444 	.word	0x40020444
 8003a44:	40020000 	.word	0x40020000

08003a48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	2101      	movs	r1, #1
 8003a60:	fa01 f202 	lsl.w	r2, r1, r2
 8003a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d108      	bne.n	8003a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a86:	e007      	b.n	8003a98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b08b      	sub	sp, #44	; 0x2c
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ab6:	e179      	b.n	8003dac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f040 8168 	bne.w	8003da6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4aa0      	ldr	r2, [pc, #640]	; (8003d5c <HAL_GPIO_Init+0x2b8>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d05e      	beq.n	8003b9e <HAL_GPIO_Init+0xfa>
 8003ae0:	4a9e      	ldr	r2, [pc, #632]	; (8003d5c <HAL_GPIO_Init+0x2b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d875      	bhi.n	8003bd2 <HAL_GPIO_Init+0x12e>
 8003ae6:	4a9e      	ldr	r2, [pc, #632]	; (8003d60 <HAL_GPIO_Init+0x2bc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d058      	beq.n	8003b9e <HAL_GPIO_Init+0xfa>
 8003aec:	4a9c      	ldr	r2, [pc, #624]	; (8003d60 <HAL_GPIO_Init+0x2bc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d86f      	bhi.n	8003bd2 <HAL_GPIO_Init+0x12e>
 8003af2:	4a9c      	ldr	r2, [pc, #624]	; (8003d64 <HAL_GPIO_Init+0x2c0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d052      	beq.n	8003b9e <HAL_GPIO_Init+0xfa>
 8003af8:	4a9a      	ldr	r2, [pc, #616]	; (8003d64 <HAL_GPIO_Init+0x2c0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d869      	bhi.n	8003bd2 <HAL_GPIO_Init+0x12e>
 8003afe:	4a9a      	ldr	r2, [pc, #616]	; (8003d68 <HAL_GPIO_Init+0x2c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04c      	beq.n	8003b9e <HAL_GPIO_Init+0xfa>
 8003b04:	4a98      	ldr	r2, [pc, #608]	; (8003d68 <HAL_GPIO_Init+0x2c4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d863      	bhi.n	8003bd2 <HAL_GPIO_Init+0x12e>
 8003b0a:	4a98      	ldr	r2, [pc, #608]	; (8003d6c <HAL_GPIO_Init+0x2c8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d046      	beq.n	8003b9e <HAL_GPIO_Init+0xfa>
 8003b10:	4a96      	ldr	r2, [pc, #600]	; (8003d6c <HAL_GPIO_Init+0x2c8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d85d      	bhi.n	8003bd2 <HAL_GPIO_Init+0x12e>
 8003b16:	2b12      	cmp	r3, #18
 8003b18:	d82a      	bhi.n	8003b70 <HAL_GPIO_Init+0xcc>
 8003b1a:	2b12      	cmp	r3, #18
 8003b1c:	d859      	bhi.n	8003bd2 <HAL_GPIO_Init+0x12e>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_GPIO_Init+0x80>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003b79 	.word	0x08003b79
 8003b2c:	08003b8b 	.word	0x08003b8b
 8003b30:	08003bcd 	.word	0x08003bcd
 8003b34:	08003bd3 	.word	0x08003bd3
 8003b38:	08003bd3 	.word	0x08003bd3
 8003b3c:	08003bd3 	.word	0x08003bd3
 8003b40:	08003bd3 	.word	0x08003bd3
 8003b44:	08003bd3 	.word	0x08003bd3
 8003b48:	08003bd3 	.word	0x08003bd3
 8003b4c:	08003bd3 	.word	0x08003bd3
 8003b50:	08003bd3 	.word	0x08003bd3
 8003b54:	08003bd3 	.word	0x08003bd3
 8003b58:	08003bd3 	.word	0x08003bd3
 8003b5c:	08003bd3 	.word	0x08003bd3
 8003b60:	08003bd3 	.word	0x08003bd3
 8003b64:	08003bd3 	.word	0x08003bd3
 8003b68:	08003b81 	.word	0x08003b81
 8003b6c:	08003b95 	.word	0x08003b95
 8003b70:	4a7f      	ldr	r2, [pc, #508]	; (8003d70 <HAL_GPIO_Init+0x2cc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b76:	e02c      	b.n	8003bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	623b      	str	r3, [r7, #32]
          break;
 8003b7e:	e029      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	3304      	adds	r3, #4
 8003b86:	623b      	str	r3, [r7, #32]
          break;
 8003b88:	e024      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	623b      	str	r3, [r7, #32]
          break;
 8003b92:	e01f      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e01a      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	623b      	str	r3, [r7, #32]
          break;
 8003baa:	e013      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d105      	bne.n	8003bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	611a      	str	r2, [r3, #16]
          break;
 8003bbe:	e009      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	615a      	str	r2, [r3, #20]
          break;
 8003bca:	e003      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
          break;
 8003bd0:	e000      	b.n	8003bd4 <HAL_GPIO_Init+0x130>
          break;
 8003bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2bff      	cmp	r3, #255	; 0xff
 8003bd8:	d801      	bhi.n	8003bde <HAL_GPIO_Init+0x13a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_Init+0x13e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3304      	adds	r3, #4
 8003be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2bff      	cmp	r3, #255	; 0xff
 8003be8:	d802      	bhi.n	8003bf0 <HAL_GPIO_Init+0x14c>
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	e002      	b.n	8003bf6 <HAL_GPIO_Init+0x152>
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	3b08      	subs	r3, #8
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	210f      	movs	r1, #15
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	401a      	ands	r2, r3
 8003c08:	6a39      	ldr	r1, [r7, #32]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	431a      	orrs	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80c1 	beq.w	8003da6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_GPIO_Init+0x2d0>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	4a52      	ldr	r2, [pc, #328]	; (8003d74 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6193      	str	r3, [r2, #24]
 8003c30:	4b50      	ldr	r3, [pc, #320]	; (8003d74 <HAL_GPIO_Init+0x2d0>)
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	; (8003d78 <HAL_GPIO_Init+0x2d4>)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	089b      	lsrs	r3, r3, #2
 8003c42:	3302      	adds	r3, #2
 8003c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220f      	movs	r2, #15
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a46      	ldr	r2, [pc, #280]	; (8003d7c <HAL_GPIO_Init+0x2d8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d01f      	beq.n	8003ca8 <HAL_GPIO_Init+0x204>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a45      	ldr	r2, [pc, #276]	; (8003d80 <HAL_GPIO_Init+0x2dc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d019      	beq.n	8003ca4 <HAL_GPIO_Init+0x200>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a44      	ldr	r2, [pc, #272]	; (8003d84 <HAL_GPIO_Init+0x2e0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d013      	beq.n	8003ca0 <HAL_GPIO_Init+0x1fc>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <HAL_GPIO_Init+0x2e4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00d      	beq.n	8003c9c <HAL_GPIO_Init+0x1f8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <HAL_GPIO_Init+0x2e8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d007      	beq.n	8003c98 <HAL_GPIO_Init+0x1f4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <HAL_GPIO_Init+0x2ec>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_GPIO_Init+0x1f0>
 8003c90:	2305      	movs	r3, #5
 8003c92:	e00a      	b.n	8003caa <HAL_GPIO_Init+0x206>
 8003c94:	2306      	movs	r3, #6
 8003c96:	e008      	b.n	8003caa <HAL_GPIO_Init+0x206>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	e006      	b.n	8003caa <HAL_GPIO_Init+0x206>
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e004      	b.n	8003caa <HAL_GPIO_Init+0x206>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e002      	b.n	8003caa <HAL_GPIO_Init+0x206>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_GPIO_Init+0x206>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	f002 0203 	and.w	r2, r2, #3
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	4093      	lsls	r3, r2
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cba:	492f      	ldr	r1, [pc, #188]	; (8003d78 <HAL_GPIO_Init+0x2d4>)
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d006      	beq.n	8003ce2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	492e      	ldr	r1, [pc, #184]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	492a      	ldr	r1, [pc, #168]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	4924      	ldr	r1, [pc, #144]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
 8003d08:	e006      	b.n	8003d18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d0a:	4b22      	ldr	r3, [pc, #136]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	4920      	ldr	r1, [pc, #128]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d24:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	491a      	ldr	r1, [pc, #104]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]
 8003d30:	e006      	b.n	8003d40 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	4916      	ldr	r1, [pc, #88]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d025      	beq.n	8003d98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	4910      	ldr	r1, [pc, #64]	; (8003d94 <HAL_GPIO_Init+0x2f0>)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60cb      	str	r3, [r1, #12]
 8003d58:	e025      	b.n	8003da6 <HAL_GPIO_Init+0x302>
 8003d5a:	bf00      	nop
 8003d5c:	10320000 	.word	0x10320000
 8003d60:	10310000 	.word	0x10310000
 8003d64:	10220000 	.word	0x10220000
 8003d68:	10210000 	.word	0x10210000
 8003d6c:	10120000 	.word	0x10120000
 8003d70:	10110000 	.word	0x10110000
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40010800 	.word	0x40010800
 8003d80:	40010c00 	.word	0x40010c00
 8003d84:	40011000 	.word	0x40011000
 8003d88:	40011400 	.word	0x40011400
 8003d8c:	40011800 	.word	0x40011800
 8003d90:	40011c00 	.word	0x40011c00
 8003d94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	4909      	ldr	r1, [pc, #36]	; (8003dc8 <HAL_GPIO_Init+0x324>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	3301      	adds	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f47f ae7e 	bne.w	8003ab8 <HAL_GPIO_Init+0x14>
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	372c      	adds	r7, #44	; 0x2c
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	40010400 	.word	0x40010400

08003dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003de8:	e003      	b.n	8003df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	041a      	lsls	r2, r3, #16
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e26c      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8087 	beq.w	8003f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e1c:	4b92      	ldr	r3, [pc, #584]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x5e>
 8003e34:	4b8c      	ldr	r3, [pc, #560]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e42:	4b89      	ldr	r3, [pc, #548]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d06c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x12c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d168      	bne.n	8003f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e246      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x76>
 8003e64:	4b80      	ldr	r3, [pc, #512]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a7f      	ldr	r2, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e02e      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd4>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x98>
 8003e7a:	4b7b      	ldr	r3, [pc, #492]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7a      	ldr	r2, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b78      	ldr	r3, [pc, #480]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a77      	ldr	r2, [pc, #476]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e01d      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xbc>
 8003e9e:	4b72      	ldr	r3, [pc, #456]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a71      	ldr	r2, [pc, #452]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b6f      	ldr	r3, [pc, #444]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6e      	ldr	r2, [pc, #440]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd4>
 8003eb8:	4b6b      	ldr	r3, [pc, #428]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6a      	ldr	r2, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b68      	ldr	r3, [pc, #416]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a67      	ldr	r2, [pc, #412]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fabe 	bl	8002458 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee0:	f7fe faba 	bl	8002458 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e1fa      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe4>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fe faaa 	bl	8002458 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7fe faa6 	bl	8002458 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e1e6      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1a:	4b53      	ldr	r3, [pc, #332]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x10c>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d063      	beq.n	8003ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f36:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x18c>
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x176>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1ba      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f72:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4939      	ldr	r1, [pc, #228]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f86:	e03a      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f96:	f7fe fa5f 	bl	8002458 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fe fa5b 	bl	8002458 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e19b      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4927      	ldr	r1, [pc, #156]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fa3e 	bl	8002458 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fe fa3a 	bl	8002458 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e17a      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03a      	beq.n	8004080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_RCC_OscConfig+0x274>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7fe fa1e 	bl	8002458 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004020:	f7fe fa1a 	bl	8002458 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e15a      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800403e:	2001      	movs	r0, #1
 8004040:	f000 fb08 	bl	8004654 <RCC_Delay>
 8004044:	e01c      	b.n	8004080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <HAL_RCC_OscConfig+0x274>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404c:	f7fe fa04 	bl	8002458 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004052:	e00f      	b.n	8004074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004054:	f7fe fa00 	bl	8002458 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d908      	bls.n	8004074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e140      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	42420000 	.word	0x42420000
 8004070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004074:	4b9e      	ldr	r3, [pc, #632]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e9      	bne.n	8004054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80a6 	beq.w	80041da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004092:	4b97      	ldr	r3, [pc, #604]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10d      	bne.n	80040ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409e:	4b94      	ldr	r3, [pc, #592]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a93      	ldr	r2, [pc, #588]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a8:	61d3      	str	r3, [r2, #28]
 80040aa:	4b91      	ldr	r3, [pc, #580]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ba:	4b8e      	ldr	r3, [pc, #568]	; (80042f4 <HAL_RCC_OscConfig+0x4f8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d118      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <HAL_RCC_OscConfig+0x4f8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a8a      	ldr	r2, [pc, #552]	; (80042f4 <HAL_RCC_OscConfig+0x4f8>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d2:	f7fe f9c1 	bl	8002458 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040da:	f7fe f9bd 	bl	8002458 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b64      	cmp	r3, #100	; 0x64
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0fd      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <HAL_RCC_OscConfig+0x4f8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <HAL_RCC_OscConfig+0x312>
 8004100:	4b7b      	ldr	r3, [pc, #492]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4a7a      	ldr	r2, [pc, #488]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6213      	str	r3, [r2, #32]
 800410c:	e02d      	b.n	800416a <HAL_RCC_OscConfig+0x36e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x334>
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4a75      	ldr	r2, [pc, #468]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6213      	str	r3, [r2, #32]
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	6213      	str	r3, [r2, #32]
 800412e:	e01c      	b.n	800416a <HAL_RCC_OscConfig+0x36e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_OscConfig+0x356>
 8004138:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a6c      	ldr	r2, [pc, #432]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	4b6a      	ldr	r3, [pc, #424]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a69      	ldr	r2, [pc, #420]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6213      	str	r3, [r2, #32]
 8004150:	e00b      	b.n	800416a <HAL_RCC_OscConfig+0x36e>
 8004152:	4b67      	ldr	r3, [pc, #412]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4a66      	ldr	r2, [pc, #408]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6213      	str	r3, [r2, #32]
 800415e:	4b64      	ldr	r3, [pc, #400]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a63      	ldr	r2, [pc, #396]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d015      	beq.n	800419e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004172:	f7fe f971 	bl	8002458 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	e00a      	b.n	8004190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fe f96d 	bl	8002458 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e0ab      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004190:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ee      	beq.n	800417a <HAL_RCC_OscConfig+0x37e>
 800419c:	e014      	b.n	80041c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419e:	f7fe f95b 	bl	8002458 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fe f957 	bl	8002458 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e095      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ee      	bne.n	80041a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ce:	4b48      	ldr	r3, [pc, #288]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4a47      	ldr	r2, [pc, #284]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8081 	beq.w	80042e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e4:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d061      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d146      	bne.n	8004286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f8:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_RCC_OscConfig+0x4fc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fe f92b 	bl	8002458 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004206:	f7fe f927 	bl	8002458 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e067      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f0      	bne.n	8004206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d108      	bne.n	8004240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	492d      	ldr	r1, [pc, #180]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a19      	ldr	r1, [r3, #32]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	430b      	orrs	r3, r1
 8004252:	4927      	ldr	r1, [pc, #156]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <HAL_RCC_OscConfig+0x4fc>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fe f8fb 	bl	8002458 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fe f8f7 	bl	8002458 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e037      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004278:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x46a>
 8004284:	e02f      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <HAL_RCC_OscConfig+0x4fc>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fe f8e4 	bl	8002458 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fe f8e0 	bl	8002458 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e020      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x498>
 80042b2:	e018      	b.n	80042e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e013      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_OscConfig+0x4f4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d106      	bne.n	80042e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	429a      	cmp	r2, r3
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40007000 	.word	0x40007000
 80042f8:	42420060 	.word	0x42420060

080042fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0d0      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d910      	bls.n	8004340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 0207 	bic.w	r2, r3, #7
 8004326:	4965      	ldr	r1, [pc, #404]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b63      	ldr	r3, [pc, #396]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0b8      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004358:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004370:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a52      	ldr	r2, [pc, #328]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800437a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437c:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	494d      	ldr	r1, [pc, #308]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d040      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d115      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07f      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e073      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3d      	ldr	r3, [pc, #244]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e06b      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4936      	ldr	r1, [pc, #216]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fe f834 	bl	8002458 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fe f830 	bl	8002458 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e053      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d210      	bcs.n	800444c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 0207 	bic.w	r2, r3, #7
 8004432:	4922      	ldr	r1, [pc, #136]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e032      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4916      	ldr	r1, [pc, #88]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	490e      	ldr	r1, [pc, #56]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004486:	4313      	orrs	r3, r2
 8004488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800448a:	f000 f821 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 800448e:	4602      	mov	r2, r0
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	490a      	ldr	r1, [pc, #40]	; (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	5ccb      	ldrb	r3, [r1, r3]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_RCC_ClockConfig+0x1cc>)
 80044a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_ClockConfig+0x1d0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fba2 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40021000 	.word	0x40021000
 80044c4:	08016208 	.word	0x08016208
 80044c8:	20000004 	.word	0x20000004
 80044cc:	20000008 	.word	0x20000008

080044d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d0:	b490      	push	{r4, r7}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044d8:	1d3c      	adds	r4, r7, #4
 80044da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044e0:	f240 2301 	movw	r3, #513	; 0x201
 80044e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b04      	cmp	r3, #4
 8004508:	d002      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x40>
 800450a:	2b08      	cmp	r3, #8
 800450c:	d003      	beq.n	8004516 <HAL_RCC_GetSysClockFreq+0x46>
 800450e:	e02d      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004510:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004512:	623b      	str	r3, [r7, #32]
      break;
 8004514:	e02d      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	0c9b      	lsrs	r3, r3, #18
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004522:	4413      	add	r3, r2
 8004524:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004528:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d013      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	0c5b      	lsrs	r3, r3, #17
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004542:	4413      	add	r3, r2
 8004544:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004548:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800454e:	fb02 f203 	mul.w	r2, r2, r3
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e004      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	4a0b      	ldr	r2, [pc, #44]	; (800458c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004560:	fb02 f303 	mul.w	r3, r2, r3
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	623b      	str	r3, [r7, #32]
      break;
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800456e:	623b      	str	r3, [r7, #32]
      break;
 8004570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004572:	6a3b      	ldr	r3, [r7, #32]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc90      	pop	{r4, r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	08015580 	.word	0x08015580
 8004584:	40021000 	.word	0x40021000
 8004588:	007a1200 	.word	0x007a1200
 800458c:	003d0900 	.word	0x003d0900

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b02      	ldr	r3, [pc, #8]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	20000004 	.word	0x20000004

080045a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045a8:	f7ff fff2 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	4903      	ldr	r1, [pc, #12]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ba:	5ccb      	ldrb	r3, [r1, r3]
 80045bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	08016218 	.word	0x08016218

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d0:	f7ff ffde 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	0adb      	lsrs	r3, r3, #11
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40021000 	.word	0x40021000
 80045f0:	08016218 	.word	0x08016218

080045f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	220f      	movs	r2, #15
 8004602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCC_GetClockConfig+0x58>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0203 	and.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <HAL_RCC_GetClockConfig+0x58>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_GetClockConfig+0x58>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCC_GetClockConfig+0x58>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0207 	and.w	r2, r3, #7
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr
 800464c:	40021000 	.word	0x40021000
 8004650:	40022000 	.word	0x40022000

08004654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <RCC_Delay+0x34>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <RCC_Delay+0x38>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	0a5b      	lsrs	r3, r3, #9
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	fb02 f303 	mul.w	r3, r2, r3
 800466e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004670:	bf00      	nop
  }
  while (Delay --);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1e5a      	subs	r2, r3, #1
 8004676:	60fa      	str	r2, [r7, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f9      	bne.n	8004670 <RCC_Delay+0x1c>
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr
 8004688:	20000004 	.word	0x20000004
 800468c:	10624dd3 	.word	0x10624dd3

08004690 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d07d      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b0:	4b4f      	ldr	r3, [pc, #316]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046bc:	4b4c      	ldr	r3, [pc, #304]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	61d3      	str	r3, [r2, #28]
 80046c8:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d118      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e4:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a42      	ldr	r2, [pc, #264]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f0:	f7fd feb2 	bl	8002458 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f6:	e008      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fd feae 	bl	8002458 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	; 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e06d      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b3a      	ldr	r3, [pc, #232]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0f0      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004716:	4b36      	ldr	r3, [pc, #216]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800471e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d02e      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d027      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004734:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800473e:	4b2e      	ldr	r3, [pc, #184]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800474a:	4a29      	ldr	r2, [pc, #164]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d014      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7fd fe7d 	bl	8002458 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004760:	e00a      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fd fe79 	bl	8002458 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e036      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ee      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4917      	ldr	r1, [pc, #92]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004792:	4313      	orrs	r3, r2
 8004794:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	4a13      	ldr	r2, [pc, #76]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	490b      	ldr	r1, [pc, #44]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047d2:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	4904      	ldr	r1, [pc, #16]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40007000 	.word	0x40007000
 80047f8:	42420440 	.word	0x42420440

080047fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e041      	b.n	8004892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd fc94 	bl	8002150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fc4e 	bl	80050dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d001      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e044      	b.n	800493e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <HAL_TIM_Base_Start_IT+0xac>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1c      	ldr	r2, [pc, #112]	; (800494c <HAL_TIM_Base_Start_IT+0xb0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d013      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d00e      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_TIM_Base_Start_IT+0xb4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIM_Base_Start_IT+0xb8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x6c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a15      	ldr	r2, [pc, #84]	; (8004958 <HAL_TIM_Base_Start_IT+0xbc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d111      	bne.n	800492c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b06      	cmp	r3, #6
 8004918:	d010      	beq.n	800493c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492a:	e007      	b.n	800493c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40013400 	.word	0x40013400
 8004950:	40000400 	.word	0x40000400
 8004954:	40000800 	.word	0x40000800
 8004958:	40000c00 	.word	0x40000c00

0800495c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e041      	b.n	80049f2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f839 	bl	80049fa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fb9e 	bl	80050dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e041      	b.n	8004aa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f839 	bl	8004aaa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	f000 fb46 	bl	80050dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0202 	mvn.w	r2, #2
 8004ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fad0 	bl	80050a4 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fac3 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fad2 	bl	80050b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d122      	bne.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d11b      	bne.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0204 	mvn.w	r2, #4
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 faa6 	bl	80050a4 <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa99 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 faa8 	bl	80050b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0208 	mvn.w	r2, #8
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2204      	movs	r2, #4
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa7c 	bl	80050a4 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa6f 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fa7e 	bl	80050b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0210 	mvn.w	r2, #16
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2208      	movs	r2, #8
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa52 	bl	80050a4 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fa45 	bl	8005092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fa54 	bl	80050b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0201 	mvn.w	r2, #1
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa20 	bl	8005080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fd69 	bl	800573e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fa18 	bl	80050c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0220 	mvn.w	r2, #32
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fd34 	bl	800572c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e046      	b.n	8004d74 <HAL_TIM_OC_ConfigChannel+0xa8>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b0c      	cmp	r3, #12
 8004cf2:	d839      	bhi.n	8004d68 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_TIM_OC_ConfigChannel+0x30>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004d69 	.word	0x08004d69
 8004d04:	08004d69 	.word	0x08004d69
 8004d08:	08004d69 	.word	0x08004d69
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d69 	.word	0x08004d69
 8004d14:	08004d69 	.word	0x08004d69
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d69 	.word	0x08004d69
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d5b 	.word	0x08004d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa4a 	bl	80051d0 <TIM_OC1_SetConfig>
      break;
 8004d3c:	e015      	b.n	8004d6a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fab3 	bl	80052b0 <TIM_OC2_SetConfig>
      break;
 8004d4a:	e00e      	b.n	8004d6a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fb20 	bl	8005398 <TIM_OC3_SetConfig>
      break;
 8004d58:	e007      	b.n	8004d6a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fb8d 	bl	8005480 <TIM_OC4_SetConfig>
      break;
 8004d66:	e000      	b.n	8004d6a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8004d68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0ac      	b.n	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b0c      	cmp	r3, #12
 8004da2:	f200 809f 	bhi.w	8004ee4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004da6:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004ee5 	.word	0x08004ee5
 8004db4:	08004ee5 	.word	0x08004ee5
 8004db8:	08004ee5 	.word	0x08004ee5
 8004dbc:	08004e21 	.word	0x08004e21
 8004dc0:	08004ee5 	.word	0x08004ee5
 8004dc4:	08004ee5 	.word	0x08004ee5
 8004dc8:	08004ee5 	.word	0x08004ee5
 8004dcc:	08004e63 	.word	0x08004e63
 8004dd0:	08004ee5 	.word	0x08004ee5
 8004dd4:	08004ee5 	.word	0x08004ee5
 8004dd8:	08004ee5 	.word	0x08004ee5
 8004ddc:	08004ea3 	.word	0x08004ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f9f2 	bl	80051d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0208 	orr.w	r2, r2, #8
 8004dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0204 	bic.w	r2, r2, #4
 8004e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	619a      	str	r2, [r3, #24]
      break;
 8004e1e:	e062      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fa42 	bl	80052b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6999      	ldr	r1, [r3, #24]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	619a      	str	r2, [r3, #24]
      break;
 8004e60:	e041      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fa95 	bl	8005398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0208 	orr.w	r2, r2, #8
 8004e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0204 	bic.w	r2, r2, #4
 8004e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69d9      	ldr	r1, [r3, #28]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	61da      	str	r2, [r3, #28]
      break;
 8004ea0:	e021      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fae9 	bl	8005480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69d9      	ldr	r1, [r3, #28]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	021a      	lsls	r2, r3, #8
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	61da      	str	r2, [r3, #28]
      break;
 8004ee2:	e000      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_ConfigClockSource+0x18>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0b3      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x180>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d03e      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xd0>
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	f200 8087 	bhi.w	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	f000 8085 	beq.w	8005064 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d87f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d01a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xa2>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d87b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d050      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x116>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d877      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d03c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xf6>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d873      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d058      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x136>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d86f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d064      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x156>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d86b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d060      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x156>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d867      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05c      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x156>
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d05a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f98:	e062      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f000 fb34 	bl	8005616 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	609a      	str	r2, [r3, #8]
      break;
 8004fc6:	e04e      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f000 fb1d 	bl	8005616 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fea:	609a      	str	r2, [r3, #8]
      break;
 8004fec:	e03b      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fa94 	bl	8005528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2150      	movs	r1, #80	; 0x50
 8005006:	4618      	mov	r0, r3
 8005008:	f000 faeb 	bl	80055e2 <TIM_ITRx_SetConfig>
      break;
 800500c:	e02b      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fab2 	bl	8005584 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2160      	movs	r1, #96	; 0x60
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fadb 	bl	80055e2 <TIM_ITRx_SetConfig>
      break;
 800502c:	e01b      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fa74 	bl	8005528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	4618      	mov	r0, r3
 8005048:	f000 facb 	bl	80055e2 <TIM_ITRx_SetConfig>
      break;
 800504c:	e00b      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 fac2 	bl	80055e2 <TIM_ITRx_SetConfig>
        break;
 800505e:	e002      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005064:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bc80      	pop	{r7}
 80050a2:	4770      	bx	lr

080050a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
	...

080050dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a33      	ldr	r2, [pc, #204]	; (80051bc <TIM_Base_SetConfig+0xe0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <TIM_Base_SetConfig+0xe4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00f      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005102:	d00b      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2f      	ldr	r2, [pc, #188]	; (80051c4 <TIM_Base_SetConfig+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d007      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <TIM_Base_SetConfig+0xec>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d003      	beq.n	800511c <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <TIM_Base_SetConfig+0xf0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d108      	bne.n	800512e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <TIM_Base_SetConfig+0xe0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0x82>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_Base_SetConfig+0xe4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0x82>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0x82>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <TIM_Base_SetConfig+0xe8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <TIM_Base_SetConfig+0xec>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0x82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <TIM_Base_SetConfig+0xf0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a09      	ldr	r2, [pc, #36]	; (80051bc <TIM_Base_SetConfig+0xe0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d003      	beq.n	80051a4 <TIM_Base_SetConfig+0xc8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <TIM_Base_SetConfig+0xe4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40013400 	.word	0x40013400
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00

080051d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0302 	bic.w	r3, r3, #2
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <TIM_OC1_SetConfig+0xd8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC1_SetConfig+0x64>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <TIM_OC1_SetConfig+0xdc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0308 	bic.w	r3, r3, #8
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <TIM_OC1_SetConfig+0xd8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_OC1_SetConfig+0x8e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a14      	ldr	r2, [pc, #80]	; (80052ac <TIM_OC1_SetConfig+0xdc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d111      	bne.n	8005282 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400

080052b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f023 0320 	bic.w	r3, r3, #32
 80052fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a21      	ldr	r2, [pc, #132]	; (8005390 <TIM_OC2_SetConfig+0xe0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_OC2_SetConfig+0x68>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a20      	ldr	r2, [pc, #128]	; (8005394 <TIM_OC2_SetConfig+0xe4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d10d      	bne.n	8005334 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <TIM_OC2_SetConfig+0xe0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC2_SetConfig+0x94>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	; (8005394 <TIM_OC2_SetConfig+0xe4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d113      	bne.n	800536c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr
 8005390:	40012c00 	.word	0x40012c00
 8005394:	40013400 	.word	0x40013400

08005398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <TIM_OC3_SetConfig+0xe0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC3_SetConfig+0x66>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a20      	ldr	r2, [pc, #128]	; (800547c <TIM_OC3_SetConfig+0xe4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10d      	bne.n	800541a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005404:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a16      	ldr	r2, [pc, #88]	; (8005478 <TIM_OC3_SetConfig+0xe0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC3_SetConfig+0x92>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a15      	ldr	r2, [pc, #84]	; (800547c <TIM_OC3_SetConfig+0xe4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d113      	bne.n	8005452 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	621a      	str	r2, [r3, #32]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400

08005480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	021b      	lsls	r3, r3, #8
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	031b      	lsls	r3, r3, #12
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a11      	ldr	r2, [pc, #68]	; (8005520 <TIM_OC4_SetConfig+0xa0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_OC4_SetConfig+0x68>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a10      	ldr	r2, [pc, #64]	; (8005524 <TIM_OC4_SetConfig+0xa4>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d109      	bne.n	80054fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400

08005528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0201 	bic.w	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f023 030a 	bic.w	r3, r3, #10
 8005564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	621a      	str	r2, [r3, #32]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f023 0210 	bic.w	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	031b      	lsls	r3, r3, #12
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b085      	sub	sp, #20
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	f043 0307 	orr.w	r3, r3, #7
 8005604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	bc80      	pop	{r7}
 8005614:	4770      	bx	lr

08005616 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005616:	b480      	push	{r7}
 8005618:	b087      	sub	sp, #28
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
 8005622:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005630:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	021a      	lsls	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	431a      	orrs	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4313      	orrs	r3, r2
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	609a      	str	r2, [r3, #8]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e050      	b.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a19      	ldr	r2, [pc, #100]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a15      	ldr	r2, [pc, #84]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a14      	ldr	r2, [pc, #80]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a12      	ldr	r2, [pc, #72]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10c      	bne.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00
 800571c:	40013400 	.word	0x40013400
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00

0800572c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e03f      	b.n	80057e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc fdae 	bl	80022d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fdb5 	bl	8006304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695a      	ldr	r2, [r3, #20]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b20      	cmp	r3, #32
 8005804:	d153      	bne.n	80058ae <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_UART_Transmit_DMA+0x26>
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e04c      	b.n	80058b0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_UART_Transmit_DMA+0x38>
 8005820:	2302      	movs	r3, #2
 8005822:	e045      	b.n	80058b0 <HAL_UART_Transmit_DMA+0xc4>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2221      	movs	r2, #33	; 0x21
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <HAL_UART_Transmit_DMA+0xcc>)
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_UART_Transmit_DMA+0xd0>)
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <HAL_UART_Transmit_DMA+0xd4>)
 8005862:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	2200      	movs	r2, #0
 800586a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 800586c:	f107 0308 	add.w	r3, r7, #8
 8005870:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3304      	adds	r3, #4
 8005880:	461a      	mov	r2, r3
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	f7fd fd02 	bl	800328c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005890:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058a8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	08005da1 	.word	0x08005da1
 80058bc:	08005df3 	.word	0x08005df3
 80058c0:	08005edb 	.word	0x08005edb

080058c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	4613      	mov	r3, r2
 80058d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b20      	cmp	r3, #32
 80058dc:	d11d      	bne.n	800591a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_UART_Receive_DMA+0x26>
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e016      	b.n	800591c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Receive_DMA+0x38>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e00f      	b.n	800591c <HAL_UART_Receive_DMA+0x58>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	461a      	mov	r2, r3
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fb2d 	bl	8005f70 <UART_Start_Receive_DMA>
 8005916:	4603      	mov	r3, r0
 8005918:	e000      	b.n	800591c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b21      	cmp	r3, #33	; 0x21
 8005950:	d116      	bne.n	8005980 <HAL_UART_DMAStop+0x5c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005966:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	4618      	mov	r0, r3
 8005976:	f7fd fce8 	bl	800334a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb5c 	bl	8006038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	bf14      	ite	ne
 800598e:	2301      	movne	r3, #1
 8005990:	2300      	moveq	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b22      	cmp	r3, #34	; 0x22
 80059a0:	d116      	bne.n	80059d0 <HAL_UART_DMAStop+0xac>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d013      	beq.n	80059d0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d004      	beq.n	80059ca <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fd fcc0 	bl	800334a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fb49 	bl	8006062 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	f003 0320 	and.w	r3, r3, #32
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_UART_IRQHandler+0x52>
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fbc2 	bl	80061b0 <UART_Receive_IT>
      return;
 8005a2c:	e17b      	b.n	8005d26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80b1 	beq.w	8005b98 <HAL_UART_IRQHandler+0x1bc>
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d105      	bne.n	8005a4c <HAL_UART_IRQHandler+0x70>
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a6 	beq.w	8005b98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_UART_IRQHandler+0x90>
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f043 0201 	orr.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_UART_IRQHandler+0xb0>
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f043 0202 	orr.w	r2, r3, #2
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <HAL_UART_IRQHandler+0xd0>
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa4:	f043 0204 	orr.w	r2, r3, #4
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00f      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xfa>
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_UART_IRQHandler+0xee>
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0208 	orr.w	r2, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 811e 	beq.w	8005d1c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_UART_IRQHandler+0x11e>
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fb5b 	bl	80061b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bf14      	ite	ne
 8005b08:	2301      	movne	r3, #1
 8005b0a:	2300      	moveq	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d102      	bne.n	8005b22 <HAL_UART_IRQHandler+0x146>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d031      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa9d 	bl	8006062 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d023      	beq.n	8005b7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d013      	beq.n	8005b76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	4a76      	ldr	r2, [pc, #472]	; (8005d2c <HAL_UART_IRQHandler+0x350>)
 8005b54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd fc30 	bl	80033c0 <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d016      	beq.n	8005b94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	4610      	mov	r0, r2
 8005b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	e00e      	b.n	8005b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8fe 	bl	8005d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00a      	b.n	8005b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8fa 	bl	8005d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e006      	b.n	8005b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8f6 	bl	8005d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b92:	e0c3      	b.n	8005d1c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	bf00      	nop
    return;
 8005b96:	e0c1      	b.n	8005d1c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	f040 80a1 	bne.w	8005ce4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 809b 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8095 	beq.w	8005ce4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d04e      	beq.n	8005c7c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005be8:	8a3b      	ldrh	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8098 	beq.w	8005d20 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bf4:	8a3a      	ldrh	r2, [r7, #16]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	f080 8092 	bcs.w	8005d20 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8a3a      	ldrh	r2, [r7, #16]
 8005c00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d02b      	beq.n	8005c64 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c1a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0210 	bic.w	r2, r2, #16
 8005c58:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fd fb73 	bl	800334a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f888 	bl	8005d8a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c7a:	e051      	b.n	8005d20 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d047      	beq.n	8005d24 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005c94:	8a7b      	ldrh	r3, [r7, #18]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d044      	beq.n	8005d24 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ca8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0201 	bic.w	r2, r2, #1
 8005cb8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0210 	bic.w	r2, r2, #16
 8005cd6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cd8:	8a7b      	ldrh	r3, [r7, #18]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f854 	bl	8005d8a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ce2:	e01f      	b.n	8005d24 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_UART_IRQHandler+0x324>
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f9f2 	bl	80060e2 <UART_Transmit_IT>
    return;
 8005cfe:	e012      	b.n	8005d26 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00d      	beq.n	8005d26 <HAL_UART_IRQHandler+0x34a>
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fa33 	bl	8006180 <UART_EndTransmit_IT>
    return;
 8005d1a:	e004      	b.n	8005d26 <HAL_UART_IRQHandler+0x34a>
    return;
 8005d1c:	bf00      	nop
 8005d1e:	e002      	b.n	8005d26 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d20:	bf00      	nop
 8005d22:	e000      	b.n	8005d26 <HAL_UART_IRQHandler+0x34a>
      return;
 8005d24:	bf00      	nop
  }
}
 8005d26:	3728      	adds	r7, #40	; 0x28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	080060bb 	.word	0x080060bb

08005d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr

08005d42 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bc80      	pop	{r7}
 8005d76:	4770      	bx	lr

08005d78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d113      	bne.n	8005de4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dd0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005de2:	e002      	b.n	8005dea <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f7ff ffa3 	bl	8005d30 <HAL_UART_TxCpltCallback>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff ff9e 	bl	8005d42 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d12a      	bne.n	8005e80 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e3e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d107      	bne.n	8005e80 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68da      	ldr	r2, [r3, #12]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0210 	bic.w	r2, r2, #16
 8005e7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d106      	bne.n	8005e96 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff ff7b 	bl	8005d8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e94:	e002      	b.n	8005e9c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff ff5c 	bl	8005d54 <HAL_UART_RxCpltCallback>
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d108      	bne.n	8005ecc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff ff60 	bl	8005d8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005eca:	e002      	b.n	8005ed2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff4a 	bl	8005d66 <HAL_UART_RxHalfCpltCallback>
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b21      	cmp	r3, #33	; 0x21
 8005f0c:	d108      	bne.n	8005f20 <UART_DMAError+0x46>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f1a:	68b8      	ldr	r0, [r7, #8]
 8005f1c:	f000 f88c 	bl	8006038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bf14      	ite	ne
 8005f2e:	2301      	movne	r3, #1
 8005f30:	2300      	moveq	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b22      	cmp	r3, #34	; 0x22
 8005f40:	d108      	bne.n	8005f54 <UART_DMAError+0x7a>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f4e:	68b8      	ldr	r0, [r7, #8]
 8005f50:	f000 f887 	bl	8006062 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f043 0210 	orr.w	r2, r3, #16
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f60:	68b8      	ldr	r0, [r7, #8]
 8005f62:	f7ff ff09 	bl	8005d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f66:	bf00      	nop
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	88fa      	ldrh	r2, [r7, #6]
 8005f88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2222      	movs	r2, #34	; 0x22
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	4a23      	ldr	r2, [pc, #140]	; (800602c <UART_Start_Receive_DMA+0xbc>)
 8005f9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	4a22      	ldr	r2, [pc, #136]	; (8006030 <UART_Start_Receive_DMA+0xc0>)
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	4a21      	ldr	r2, [pc, #132]	; (8006034 <UART_Start_Receive_DMA+0xc4>)
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005fb8:	f107 0308 	add.w	r3, r7, #8
 8005fbc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	f7fd f95c 	bl	800328c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	613b      	str	r3, [r7, #16]
 8005fe8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006000:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695a      	ldr	r2, [r3, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006020:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	08005e0f 	.word	0x08005e0f
 8006030:	08005ea5 	.word	0x08005ea5
 8006034:	08005edb 	.word	0x08005edb

08006038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800604e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr

08006062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006078:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	2b01      	cmp	r3, #1
 8006090:	d107      	bne.n	80060a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68da      	ldr	r2, [r3, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0210 	bic.w	r2, r2, #16
 80060a0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff fe4f 	bl	8005d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b21      	cmp	r3, #33	; 0x21
 80060f4:	d13e      	bne.n	8006174 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	d114      	bne.n	800612a <UART_Transmit_IT+0x48>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d110      	bne.n	800612a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800611c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	621a      	str	r2, [r3, #32]
 8006128:	e008      	b.n	800613c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	1c59      	adds	r1, r3, #1
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6211      	str	r1, [r2, #32]
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29b      	uxth	r3, r3
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10f      	bne.n	8006170 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800615e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800616e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	e000      	b.n	8006176 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006174:	2302      	movs	r3, #2
  }
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fdc5 	bl	8005d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b22      	cmp	r3, #34	; 0x22
 80061c2:	f040 8099 	bne.w	80062f8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ce:	d117      	bne.n	8006200 <UART_Receive_IT+0x50>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d113      	bne.n	8006200 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	629a      	str	r2, [r3, #40]	; 0x28
 80061fe:	e026      	b.n	800624e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d007      	beq.n	8006224 <UART_Receive_IT+0x74>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <UART_Receive_IT+0x82>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b2da      	uxtb	r2, r3
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	e008      	b.n	8006244 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623e:	b2da      	uxtb	r2, r3
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29b      	uxth	r3, r3
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4619      	mov	r1, r3
 800625c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800625e:	2b00      	cmp	r3, #0
 8006260:	d148      	bne.n	80062f4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68da      	ldr	r2, [r3, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0220 	bic.w	r2, r2, #32
 8006270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 0201 	bic.w	r2, r2, #1
 8006290:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d123      	bne.n	80062ea <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0210 	bic.w	r2, r2, #16
 80062b6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	d10a      	bne.n	80062dc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fd51 	bl	8005d8a <HAL_UARTEx_RxEventCallback>
 80062e8:	e002      	b.n	80062f0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fd32 	bl	8005d54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e002      	b.n	80062fa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e000      	b.n	80062fa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800633e:	f023 030c 	bic.w	r3, r3, #12
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	430b      	orrs	r3, r1
 800634a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2c      	ldr	r2, [pc, #176]	; (8006418 <UART_SetConfig+0x114>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d103      	bne.n	8006374 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fe f92e 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	e002      	b.n	800637a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006374:	f7fe f916 	bl	80045a4 <HAL_RCC_GetPCLK1Freq>
 8006378:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009a      	lsls	r2, r3, #2
 8006384:	441a      	add	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006390:	4a22      	ldr	r2, [pc, #136]	; (800641c <UART_SetConfig+0x118>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	0119      	lsls	r1, r3, #4
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009a      	lsls	r2, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b0:	4b1a      	ldr	r3, [pc, #104]	; (800641c <UART_SetConfig+0x118>)
 80063b2:	fba3 0302 	umull	r0, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	2064      	movs	r0, #100	; 0x64
 80063ba:	fb00 f303 	mul.w	r3, r0, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	011b      	lsls	r3, r3, #4
 80063c2:	3332      	adds	r3, #50	; 0x32
 80063c4:	4a15      	ldr	r2, [pc, #84]	; (800641c <UART_SetConfig+0x118>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d0:	4419      	add	r1, r3
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009a      	lsls	r2, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <UART_SetConfig+0x118>)
 80063ea:	fba3 0302 	umull	r0, r3, r3, r2
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	2064      	movs	r0, #100	; 0x64
 80063f2:	fb00 f303 	mul.w	r3, r0, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	3332      	adds	r3, #50	; 0x32
 80063fc:	4a07      	ldr	r2, [pc, #28]	; (800641c <UART_SetConfig+0x118>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	f003 020f 	and.w	r2, r3, #15
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	440a      	add	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40013800 	.word	0x40013800
 800641c:	51eb851f 	.word	0x51eb851f

08006420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006420:	480c      	ldr	r0, [pc, #48]	; (8006454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006422:	490d      	ldr	r1, [pc, #52]	; (8006458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006424:	4a0d      	ldr	r2, [pc, #52]	; (800645c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006428:	e002      	b.n	8006430 <LoopCopyDataInit>

0800642a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800642a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800642c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800642e:	3304      	adds	r3, #4

08006430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006434:	d3f9      	bcc.n	800642a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006436:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006438:	4c0a      	ldr	r4, [pc, #40]	; (8006464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800643a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800643c:	e001      	b.n	8006442 <LoopFillZerobss>

0800643e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800643e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006440:	3204      	adds	r2, #4

08006442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006444:	d3fb      	bcc.n	800643e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006446:	f7fb fd47 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800644a:	f00d fcb7 	bl	8013dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800644e:	f7fb f9c3 	bl	80017d8 <main>
  bx lr
 8006452:	4770      	bx	lr
  ldr r0, =_sdata
 8006454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006458:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 800645c:	08016dc0 	.word	0x08016dc0
  ldr r2, =_sbss
 8006460:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8006464:	2000d280 	.word	0x2000d280

08006468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006468:	e7fe      	b.n	8006468 <ADC1_2_IRQHandler>
	...

0800646c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006472:	f3ef 8305 	mrs	r3, IPSR
 8006476:	60bb      	str	r3, [r7, #8]
  return(result);
 8006478:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10f      	bne.n	800649e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647e:	f3ef 8310 	mrs	r3, PRIMASK
 8006482:	607b      	str	r3, [r7, #4]
  return(result);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <osKernelInitialize+0x32>
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <osKernelInitialize+0x60>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d109      	bne.n	80064a6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006492:	f3ef 8311 	mrs	r3, BASEPRI
 8006496:	603b      	str	r3, [r7, #0]
  return(result);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800649e:	f06f 0305 	mvn.w	r3, #5
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e00c      	b.n	80064c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <osKernelInitialize+0x60>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d105      	bne.n	80064ba <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80064ae:	4b07      	ldr	r3, [pc, #28]	; (80064cc <osKernelInitialize+0x60>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e002      	b.n	80064c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064c0:	68fb      	ldr	r3, [r7, #12]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	20003034 	.word	0x20003034

080064d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d6:	f3ef 8305 	mrs	r3, IPSR
 80064da:	60bb      	str	r3, [r7, #8]
  return(result);
 80064dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10f      	bne.n	8006502 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e2:	f3ef 8310 	mrs	r3, PRIMASK
 80064e6:	607b      	str	r3, [r7, #4]
  return(result);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <osKernelStart+0x32>
 80064ee:	4b11      	ldr	r3, [pc, #68]	; (8006534 <osKernelStart+0x64>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d109      	bne.n	800650a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064f6:	f3ef 8311 	mrs	r3, BASEPRI
 80064fa:	603b      	str	r3, [r7, #0]
  return(result);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006502:	f06f 0305 	mvn.w	r3, #5
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	e00e      	b.n	8006528 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <osKernelStart+0x64>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006512:	4b08      	ldr	r3, [pc, #32]	; (8006534 <osKernelStart+0x64>)
 8006514:	2202      	movs	r2, #2
 8006516:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006518:	f001 f878 	bl	800760c <vTaskStartScheduler>
      stat = osOK;
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e002      	b.n	8006528 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006526:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006528:	68fb      	ldr	r3, [r7, #12]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20003034 	.word	0x20003034

08006538 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b092      	sub	sp, #72	; 0x48
 800653c:	af04      	add	r7, sp, #16
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006544:	2300      	movs	r3, #0
 8006546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006548:	f3ef 8305 	mrs	r3, IPSR
 800654c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006550:	2b00      	cmp	r3, #0
 8006552:	f040 8094 	bne.w	800667e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006556:	f3ef 8310 	mrs	r3, PRIMASK
 800655a:	623b      	str	r3, [r7, #32]
  return(result);
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 808d 	bne.w	800667e <osThreadNew+0x146>
 8006564:	4b48      	ldr	r3, [pc, #288]	; (8006688 <osThreadNew+0x150>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d106      	bne.n	800657a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800656c:	f3ef 8311 	mrs	r3, BASEPRI
 8006570:	61fb      	str	r3, [r7, #28]
  return(result);
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8082 	bne.w	800667e <osThreadNew+0x146>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d07e      	beq.n	800667e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006580:	2380      	movs	r3, #128	; 0x80
 8006582:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006584:	2318      	movs	r3, #24
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006588:	2300      	movs	r3, #0
 800658a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800658c:	f107 031b 	add.w	r3, r7, #27
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d045      	beq.n	800662a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <osThreadNew+0x74>
        name = attr->name;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <osThreadNew+0x9a>
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	2b38      	cmp	r3, #56	; 0x38
 80065c4:	d805      	bhi.n	80065d2 <osThreadNew+0x9a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <osThreadNew+0x9e>
        return (NULL);
 80065d2:	2300      	movs	r3, #0
 80065d4:	e054      	b.n	8006680 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <osThreadNew+0xd4>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2b5b      	cmp	r3, #91	; 0x5b
 80065f4:	d90a      	bls.n	800660c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <osThreadNew+0xd4>
        mem = 1;
 8006606:	2301      	movs	r3, #1
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
 800660a:	e010      	b.n	800662e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10c      	bne.n	800662e <osThreadNew+0xf6>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d108      	bne.n	800662e <osThreadNew+0xf6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d104      	bne.n	800662e <osThreadNew+0xf6>
          mem = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	62bb      	str	r3, [r7, #40]	; 0x28
 8006628:	e001      	b.n	800662e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	2b01      	cmp	r3, #1
 8006632:	d110      	bne.n	8006656 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800663c:	9202      	str	r2, [sp, #8]
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006648:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fe12 	bl	8007274 <xTaskCreateStatic>
 8006650:	4603      	mov	r3, r0
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	e013      	b.n	800667e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d110      	bne.n	800667e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	b29a      	uxth	r2, r3
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fe5c 	bl	800732c <xTaskCreate>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d001      	beq.n	800667e <osThreadNew+0x146>
          hTask = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800667e:	697b      	ldr	r3, [r7, #20]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3738      	adds	r7, #56	; 0x38
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20003034 	.word	0x20003034

0800668c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006694:	f3ef 8305 	mrs	r3, IPSR
 8006698:	613b      	str	r3, [r7, #16]
  return(result);
 800669a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10f      	bne.n	80066c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a0:	f3ef 8310 	mrs	r3, PRIMASK
 80066a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <osDelay+0x34>
 80066ac:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <osDelay+0x58>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d109      	bne.n	80066c8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066b4:	f3ef 8311 	mrs	r3, BASEPRI
 80066b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <osDelay+0x3c>
    stat = osErrorISR;
 80066c0:	f06f 0305 	mvn.w	r3, #5
 80066c4:	617b      	str	r3, [r7, #20]
 80066c6:	e007      	b.n	80066d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 ff66 	bl	80075a4 <vTaskDelay>
    }
  }

  return (stat);
 80066d8:	697b      	ldr	r3, [r7, #20]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20003034 	.word	0x20003034

080066e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a06      	ldr	r2, [pc, #24]	; (8006710 <vApplicationGetIdleTaskMemory+0x28>)
 80066f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a05      	ldr	r2, [pc, #20]	; (8006714 <vApplicationGetIdleTaskMemory+0x2c>)
 80066fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	20003038 	.word	0x20003038
 8006714:	20003094 	.word	0x20003094

08006718 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <vApplicationGetTimerTaskMemory+0x2c>)
 8006728:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a06      	ldr	r2, [pc, #24]	; (8006748 <vApplicationGetTimerTaskMemory+0x30>)
 800672e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006736:	601a      	str	r2, [r3, #0]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20003294 	.word	0x20003294
 8006748:	200032f0 	.word	0x200032f0

0800674c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f103 0208 	add.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f103 0208 	add.w	r2, r3, #8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067a2:	b480      	push	{r7}
 80067a4:	b085      	sub	sp, #20
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fe:	d103      	bne.n	8006808 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	60fb      	str	r3, [r7, #12]
 8006806:	e00c      	b.n	8006822 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3308      	adds	r3, #8
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	e002      	b.n	8006816 <vListInsert+0x2e>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	d2f6      	bcs.n	8006810 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	601a      	str	r2, [r3, #0]
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr

08006858 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6892      	ldr	r2, [r2, #8]
 800686e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6852      	ldr	r2, [r2, #4]
 8006878:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d103      	bne.n	800688c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1e5a      	subs	r2, r3, #1
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr
	...

080068ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueGenericReset+0x2a>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60bb      	str	r3, [r7, #8]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068d6:	f001 fff1 	bl	80088bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	441a      	add	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	3b01      	subs	r3, #1
 8006908:	68f9      	ldr	r1, [r7, #12]
 800690a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	22ff      	movs	r2, #255	; 0xff
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d114      	bne.n	8006956 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01a      	beq.n	800696a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3310      	adds	r3, #16
 8006938:	4618      	mov	r0, r3
 800693a:	f001 f8f1 	bl	8007b20 <xTaskRemoveFromEventList>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d012      	beq.n	800696a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <xQueueGenericReset+0xcc>)
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	e009      	b.n	800696a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3310      	adds	r3, #16
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fef6 	bl	800674c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fef1 	bl	800674c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800696a:	f001 ffd7 	bl	800891c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800696e:	2301      	movs	r3, #1
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08e      	sub	sp, #56	; 0x38
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <xQueueGenericCreateStatic+0x52>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <xQueueGenericCreateStatic+0x56>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericCreateStatic+0x58>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	623b      	str	r3, [r7, #32]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <xQueueGenericCreateStatic+0x7e>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <xQueueGenericCreateStatic+0x82>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <xQueueGenericCreateStatic+0x84>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	61fb      	str	r3, [r7, #28]
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a1a:	2350      	movs	r3, #80	; 0x50
 8006a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b50      	cmp	r3, #80	; 0x50
 8006a22:	d00a      	beq.n	8006a3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	61bb      	str	r3, [r7, #24]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	4613      	mov	r3, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 f805 	bl	8006a6a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3730      	adds	r7, #48	; 0x30
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	607a      	str	r2, [r7, #4]
 8006a76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e002      	b.n	8006a8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a98:	2101      	movs	r1, #1
 8006a9a:	69b8      	ldr	r0, [r7, #24]
 8006a9c:	f7ff ff06 	bl	80068ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08e      	sub	sp, #56	; 0x38
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <xQueueGenericSend+0x40>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <xQueueGenericSend+0x44>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <xQueueGenericSend+0x46>
 8006af4:	2300      	movs	r3, #0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <xQueueGenericSend+0x60>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d103      	bne.n	8006b1e <xQueueGenericSend+0x6e>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d101      	bne.n	8006b22 <xQueueGenericSend+0x72>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <xQueueGenericSend+0x74>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	623b      	str	r3, [r7, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b3e:	f001 f9d7 	bl	8007ef0 <xTaskGetSchedulerState>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d102      	bne.n	8006b4e <xQueueGenericSend+0x9e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <xQueueGenericSend+0xa2>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <xQueueGenericSend+0xa4>
 8006b52:	2300      	movs	r3, #0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	61fb      	str	r3, [r7, #28]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b6e:	f001 fea5 	bl	80088bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <xQueueGenericSend+0xd4>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d129      	bne.n	8006bd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b8a:	f000 fa07 	bl	8006f9c <prvCopyDataToQueue>
 8006b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d010      	beq.n	8006bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	3324      	adds	r3, #36	; 0x24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 ffbf 	bl	8007b20 <xTaskRemoveFromEventList>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d013      	beq.n	8006bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ba8:	4b3f      	ldr	r3, [pc, #252]	; (8006ca8 <xQueueGenericSend+0x1f8>)
 8006baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bae:	601a      	str	r2, [r3, #0]
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	e00a      	b.n	8006bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bc0:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <xQueueGenericSend+0x1f8>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bd0:	f001 fea4 	bl	800891c <vPortExitCritical>
				return pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e063      	b.n	8006ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d103      	bne.n	8006be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bde:	f001 fe9d 	bl	800891c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e05c      	b.n	8006ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f001 f81f 	bl	8007c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bfa:	f001 fe8f 	bl	800891c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bfe:	f000 fd6b 	bl	80076d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c02:	f001 fe5b 	bl	80088bc <vPortEnterCritical>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c12:	d103      	bne.n	8006c1c <xQueueGenericSend+0x16c>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c28:	d103      	bne.n	8006c32 <xQueueGenericSend+0x182>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c32:	f001 fe73 	bl	800891c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c36:	1d3a      	adds	r2, r7, #4
 8006c38:	f107 0314 	add.w	r3, r7, #20
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 f80e 	bl	8007c60 <xTaskCheckForTimeOut>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d124      	bne.n	8006c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c4c:	f000 fa9e 	bl	800718c <prvIsQueueFull>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d018      	beq.n	8006c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	3310      	adds	r3, #16
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 ff0e 	bl	8007a80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c66:	f000 fa29 	bl	80070bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c6a:	f000 fd43 	bl	80076f4 <xTaskResumeAll>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f47f af7c 	bne.w	8006b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <xQueueGenericSend+0x1f8>)
 8006c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	e772      	b.n	8006b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8a:	f000 fa17 	bl	80070bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c8e:	f000 fd31 	bl	80076f4 <xTaskResumeAll>
 8006c92:	e76c      	b.n	8006b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c96:	f000 fa11 	bl	80070bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c9a:	f000 fd2b 	bl	80076f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c9e:	2300      	movs	r3, #0
		}
	}
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3738      	adds	r7, #56	; 0x38
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08e      	sub	sp, #56	; 0x38
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d103      	bne.n	8006ce8 <xQueueGenericSendFromISR+0x3c>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <xQueueGenericSendFromISR+0x40>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <xQueueGenericSendFromISR+0x42>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	623b      	str	r3, [r7, #32]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d103      	bne.n	8006d16 <xQueueGenericSendFromISR+0x6a>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <xQueueGenericSendFromISR+0x6e>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <xQueueGenericSendFromISR+0x70>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	61fb      	str	r3, [r7, #28]
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d36:	f001 fe83 	bl	8008a40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	61ba      	str	r2, [r7, #24]
 8006d50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <xQueueGenericSendFromISR+0xbc>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d12c      	bne.n	8006dc2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d78:	f000 f910 	bl	8006f9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d84:	d112      	bne.n	8006dac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d016      	beq.n	8006dbc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	3324      	adds	r3, #36	; 0x24
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fec4 	bl	8007b20 <xTaskRemoveFromEventList>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00e      	beq.n	8006dbc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	e007      	b.n	8006dbc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006db0:	3301      	adds	r3, #1
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	b25a      	sxtb	r2, r3
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006dc0:	e001      	b.n	8006dc6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3738      	adds	r7, #56	; 0x38
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08c      	sub	sp, #48	; 0x30
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <xQueueReceive+0x30>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	623b      	str	r3, [r7, #32]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <xQueueReceive+0x3e>
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <xQueueReceive+0x42>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueReceive+0x44>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xQueueReceive+0x5e>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61fb      	str	r3, [r7, #28]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e3a:	f001 f859 	bl	8007ef0 <xTaskGetSchedulerState>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d102      	bne.n	8006e4a <xQueueReceive+0x6e>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <xQueueReceive+0x72>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <xQueueReceive+0x74>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <xQueueReceive+0x8e>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	61bb      	str	r3, [r7, #24]
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e6a:	f001 fd27 	bl	80088bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d01f      	beq.n	8006eba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7e:	f000 f8f7 	bl	8007070 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	1e5a      	subs	r2, r3, #1
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00f      	beq.n	8006eb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	3310      	adds	r3, #16
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fe42 	bl	8007b20 <xTaskRemoveFromEventList>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ea2:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <xQueueReceive+0x1bc>)
 8006ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006eb2:	f001 fd33 	bl	800891c <vPortExitCritical>
				return pdPASS;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e069      	b.n	8006f8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ec0:	f001 fd2c 	bl	800891c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e062      	b.n	8006f8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ece:	f107 0310 	add.w	r3, r7, #16
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 feae 	bl	8007c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006edc:	f001 fd1e 	bl	800891c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ee0:	f000 fbfa 	bl	80076d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ee4:	f001 fcea 	bl	80088bc <vPortEnterCritical>
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eee:	b25b      	sxtb	r3, r3
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef4:	d103      	bne.n	8006efe <xQueueReceive+0x122>
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f04:	b25b      	sxtb	r3, r3
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f0a:	d103      	bne.n	8006f14 <xQueueReceive+0x138>
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f14:	f001 fd02 	bl	800891c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f18:	1d3a      	adds	r2, r7, #4
 8006f1a:	f107 0310 	add.w	r3, r7, #16
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f000 fe9d 	bl	8007c60 <xTaskCheckForTimeOut>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d123      	bne.n	8006f74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2e:	f000 f917 	bl	8007160 <prvIsQueueEmpty>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	3324      	adds	r3, #36	; 0x24
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fd9d 	bl	8007a80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f48:	f000 f8b8 	bl	80070bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f4c:	f000 fbd2 	bl	80076f4 <xTaskResumeAll>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d189      	bne.n	8006e6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f56:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <xQueueReceive+0x1bc>)
 8006f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	e780      	b.n	8006e6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6a:	f000 f8a7 	bl	80070bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f6e:	f000 fbc1 	bl	80076f4 <xTaskResumeAll>
 8006f72:	e77a      	b.n	8006e6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f76:	f000 f8a1 	bl	80070bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f7a:	f000 fbbb 	bl	80076f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f80:	f000 f8ee 	bl	8007160 <prvIsQueueEmpty>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f43f af6f 	beq.w	8006e6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3730      	adds	r7, #48	; 0x30
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	e000ed04 	.word	0xe000ed04

08006f9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10d      	bne.n	8006fd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d14d      	bne.n	800705e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 ffb0 	bl	8007f2c <xTaskPriorityDisinherit>
 8006fcc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]
 8006fd4:	e043      	b.n	800705e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d119      	bne.n	8007010 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6898      	ldr	r0, [r3, #8]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	f00c ff1c 	bl	8013e24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	429a      	cmp	r2, r3
 8007004:	d32b      	bcc.n	800705e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	609a      	str	r2, [r3, #8]
 800700e:	e026      	b.n	800705e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68d8      	ldr	r0, [r3, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007018:	461a      	mov	r2, r3
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	f00c ff02 	bl	8013e24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	425b      	negs	r3, r3
 800702a:	441a      	add	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d207      	bcs.n	800704c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	425b      	negs	r3, r3
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d105      	bne.n	800705e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	3b01      	subs	r3, #1
 800705c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1c5a      	adds	r2, r3, #1
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007066:	697b      	ldr	r3, [r7, #20]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d018      	beq.n	80070b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	441a      	add	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	429a      	cmp	r2, r3
 800709a:	d303      	bcc.n	80070a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68d9      	ldr	r1, [r3, #12]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ac:	461a      	mov	r2, r3
 80070ae:	6838      	ldr	r0, [r7, #0]
 80070b0:	f00c feb8 	bl	8013e24 <memcpy>
	}
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070c4:	f001 fbfa 	bl	80088bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070d0:	e011      	b.n	80070f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d012      	beq.n	8007100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3324      	adds	r3, #36	; 0x24
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fd1e 	bl	8007b20 <xTaskRemoveFromEventList>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070ea:	f000 fe1b 	bl	8007d24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	dce9      	bgt.n	80070d2 <prvUnlockQueue+0x16>
 80070fe:	e000      	b.n	8007102 <prvUnlockQueue+0x46>
					break;
 8007100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800710a:	f001 fc07 	bl	800891c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800710e:	f001 fbd5 	bl	80088bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800711a:	e011      	b.n	8007140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d012      	beq.n	800714a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3310      	adds	r3, #16
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fcf9 	bl	8007b20 <xTaskRemoveFromEventList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007134:	f000 fdf6 	bl	8007d24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	3b01      	subs	r3, #1
 800713c:	b2db      	uxtb	r3, r3
 800713e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007144:	2b00      	cmp	r3, #0
 8007146:	dce9      	bgt.n	800711c <prvUnlockQueue+0x60>
 8007148:	e000      	b.n	800714c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800714a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007154:	f001 fbe2 	bl	800891c <vPortExitCritical>
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007168:	f001 fba8 	bl	80088bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	2b00      	cmp	r3, #0
 8007172:	d102      	bne.n	800717a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e001      	b.n	800717e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800717e:	f001 fbcd 	bl	800891c <vPortExitCritical>

	return xReturn;
 8007182:	68fb      	ldr	r3, [r7, #12]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007194:	f001 fb92 	bl	80088bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d102      	bne.n	80071aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e001      	b.n	80071ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ae:	f001 fbb5 	bl	800891c <vPortExitCritical>

	return xReturn;
 80071b2:	68fb      	ldr	r3, [r7, #12]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e014      	b.n	80071f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071cc:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <vQueueAddToRegistry+0x4c>)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071d8:	490b      	ldr	r1, [pc, #44]	; (8007208 <vQueueAddToRegistry+0x4c>)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071e2:	4a09      	ldr	r2, [pc, #36]	; (8007208 <vQueueAddToRegistry+0x4c>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	4413      	add	r3, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071ee:	e006      	b.n	80071fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b07      	cmp	r3, #7
 80071fa:	d9e7      	bls.n	80071cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr
 8007208:	20008090 	.word	0x20008090

0800720c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800721c:	f001 fb4e 	bl	80088bc <vPortEnterCritical>
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007226:	b25b      	sxtb	r3, r3
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800722c:	d103      	bne.n	8007236 <vQueueWaitForMessageRestricted+0x2a>
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723c:	b25b      	sxtb	r3, r3
 800723e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007242:	d103      	bne.n	800724c <vQueueWaitForMessageRestricted+0x40>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800724c:	f001 fb66 	bl	800891c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	3324      	adds	r3, #36	; 0x24
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fc31 	bl	8007ac8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	f7ff ff28 	bl	80070bc <prvUnlockQueue>
	}
 800726c:	bf00      	nop
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08e      	sub	sp, #56	; 0x38
 8007278:	af04      	add	r7, sp, #16
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	623b      	str	r3, [r7, #32]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <xTaskCreateStatic+0x46>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	61fb      	str	r3, [r7, #28]
}
 80072b6:	bf00      	nop
 80072b8:	e7fe      	b.n	80072b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072ba:	235c      	movs	r3, #92	; 0x5c
 80072bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b5c      	cmp	r3, #92	; 0x5c
 80072c2:	d00a      	beq.n	80072da <xTaskCreateStatic+0x66>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	61bb      	str	r3, [r7, #24]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01e      	beq.n	800731e <xTaskCreateStatic+0xaa>
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d01b      	beq.n	800731e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072f8:	2300      	movs	r3, #0
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	9302      	str	r3, [sp, #8]
 8007300:	f107 0314 	add.w	r3, r7, #20
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f850 	bl	80073b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007318:	f000 f8d4 	bl	80074c4 <prvAddNewTaskToReadyList>
 800731c:	e001      	b.n	8007322 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007322:	697b      	ldr	r3, [r7, #20]
	}
 8007324:	4618      	mov	r0, r3
 8007326:	3728      	adds	r7, #40	; 0x28
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08c      	sub	sp, #48	; 0x30
 8007330:	af04      	add	r7, sp, #16
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	4613      	mov	r3, r2
 800733a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fbbb 	bl	8008abc <pvPortMalloc>
 8007346:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00e      	beq.n	800736c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800734e:	205c      	movs	r0, #92	; 0x5c
 8007350:	f001 fbb4 	bl	8008abc <pvPortMalloc>
 8007354:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	631a      	str	r2, [r3, #48]	; 0x30
 8007362:	e005      	b.n	8007370 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007364:	6978      	ldr	r0, [r7, #20]
 8007366:	f001 fc6d 	bl	8008c44 <vPortFree>
 800736a:	e001      	b.n	8007370 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d017      	beq.n	80073a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	2300      	movs	r3, #0
 8007382:	9303      	str	r3, [sp, #12]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f80e 	bl	80073b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800739a:	69f8      	ldr	r0, [r7, #28]
 800739c:	f000 f892 	bl	80074c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073a0:	2301      	movs	r3, #1
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e002      	b.n	80073ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073ac:	69bb      	ldr	r3, [r7, #24]
	}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
 80073c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	461a      	mov	r2, r3
 80073ce:	21a5      	movs	r1, #165	; 0xa5
 80073d0:	f00c fd50 	bl	8013e74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073de:	3b01      	subs	r3, #1
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <prvInitialiseNewTask+0x58>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	617b      	str	r3, [r7, #20]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
 8007412:	e012      	b.n	800743a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	7819      	ldrb	r1, [r3, #0]
 800741c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	3334      	adds	r3, #52	; 0x34
 8007424:	460a      	mov	r2, r1
 8007426:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d006      	beq.n	8007442 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	3301      	adds	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d9e9      	bls.n	8007414 <prvInitialiseNewTask+0x5e>
 8007440:	e000      	b.n	8007444 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007442:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	2b37      	cmp	r3, #55	; 0x37
 8007450:	d901      	bls.n	8007456 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007452:	2337      	movs	r3, #55	; 0x37
 8007454:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007460:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2200      	movs	r2, #0
 8007466:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	3304      	adds	r3, #4
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff f98c 	bl	800678a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	3318      	adds	r3, #24
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff f987 	bl	800678a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007480:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007490:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	2200      	movs	r2, #0
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	69b8      	ldr	r0, [r7, #24]
 80074a6:	f001 f915 	bl	80086d4 <pxPortInitialiseStack>
 80074aa:	4602      	mov	r2, r0
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074bc:	bf00      	nop
 80074be:	3720      	adds	r7, #32
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074cc:	f001 f9f6 	bl	80088bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074d0:	4b2d      	ldr	r3, [pc, #180]	; (8007588 <prvAddNewTaskToReadyList+0xc4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3301      	adds	r3, #1
 80074d6:	4a2c      	ldr	r2, [pc, #176]	; (8007588 <prvAddNewTaskToReadyList+0xc4>)
 80074d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074da:	4b2c      	ldr	r3, [pc, #176]	; (800758c <prvAddNewTaskToReadyList+0xc8>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074e2:	4a2a      	ldr	r2, [pc, #168]	; (800758c <prvAddNewTaskToReadyList+0xc8>)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074e8:	4b27      	ldr	r3, [pc, #156]	; (8007588 <prvAddNewTaskToReadyList+0xc4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d110      	bne.n	8007512 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074f0:	f000 fc3c 	bl	8007d6c <prvInitialiseTaskLists>
 80074f4:	e00d      	b.n	8007512 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074f6:	4b26      	ldr	r3, [pc, #152]	; (8007590 <prvAddNewTaskToReadyList+0xcc>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074fe:	4b23      	ldr	r3, [pc, #140]	; (800758c <prvAddNewTaskToReadyList+0xc8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	429a      	cmp	r2, r3
 800750a:	d802      	bhi.n	8007512 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <prvAddNewTaskToReadyList+0xc8>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007512:	4b20      	ldr	r3, [pc, #128]	; (8007594 <prvAddNewTaskToReadyList+0xd0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a1e      	ldr	r2, [pc, #120]	; (8007594 <prvAddNewTaskToReadyList+0xd0>)
 800751a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <prvAddNewTaskToReadyList+0xd0>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007528:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <prvAddNewTaskToReadyList+0xd4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <prvAddNewTaskToReadyList+0x74>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	4a18      	ldr	r2, [pc, #96]	; (8007598 <prvAddNewTaskToReadyList+0xd4>)
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <prvAddNewTaskToReadyList+0xd8>)
 8007546:	441a      	add	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4610      	mov	r0, r2
 8007550:	f7ff f927 	bl	80067a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007554:	f001 f9e2 	bl	800891c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007558:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <prvAddNewTaskToReadyList+0xcc>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00e      	beq.n	800757e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <prvAddNewTaskToReadyList+0xc8>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	429a      	cmp	r2, r3
 800756c:	d207      	bcs.n	800757e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <prvAddNewTaskToReadyList+0xdc>)
 8007570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20003bc4 	.word	0x20003bc4
 800758c:	200036f0 	.word	0x200036f0
 8007590:	20003bd0 	.word	0x20003bd0
 8007594:	20003be0 	.word	0x20003be0
 8007598:	20003bcc 	.word	0x20003bcc
 800759c:	200036f4 	.word	0x200036f4
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d017      	beq.n	80075e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075b6:	4b13      	ldr	r3, [pc, #76]	; (8007604 <vTaskDelay+0x60>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <vTaskDelay+0x30>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075d4:	f000 f880 	bl	80076d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fd14 	bl	8008008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075e0:	f000 f888 	bl	80076f4 <xTaskResumeAll>
 80075e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <vTaskDelay+0x64>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20003bec 	.word	0x20003bec
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	; 0x28
 8007610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800761a:	463a      	mov	r2, r7
 800761c:	1d39      	adds	r1, r7, #4
 800761e:	f107 0308 	add.w	r3, r7, #8
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff f860 	bl	80066e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	9202      	str	r2, [sp, #8]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	460a      	mov	r2, r1
 800763a:	4921      	ldr	r1, [pc, #132]	; (80076c0 <vTaskStartScheduler+0xb4>)
 800763c:	4821      	ldr	r0, [pc, #132]	; (80076c4 <vTaskStartScheduler+0xb8>)
 800763e:	f7ff fe19 	bl	8007274 <xTaskCreateStatic>
 8007642:	4603      	mov	r3, r0
 8007644:	4a20      	ldr	r2, [pc, #128]	; (80076c8 <vTaskStartScheduler+0xbc>)
 8007646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007648:	4b1f      	ldr	r3, [pc, #124]	; (80076c8 <vTaskStartScheduler+0xbc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e001      	b.n	800765a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d102      	bne.n	8007666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007660:	f000 fd26 	bl	80080b0 <xTimerCreateTimerTask>
 8007664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d116      	bne.n	800769a <vTaskStartScheduler+0x8e>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	613b      	str	r3, [r7, #16]
}
 800767e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007680:	4b12      	ldr	r3, [pc, #72]	; (80076cc <vTaskStartScheduler+0xc0>)
 8007682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007686:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007688:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <vTaskStartScheduler+0xc4>)
 800768a:	2201      	movs	r2, #1
 800768c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800768e:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <vTaskStartScheduler+0xc8>)
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007694:	f001 f8a0 	bl	80087d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007698:	e00e      	b.n	80076b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076a0:	d10a      	bne.n	80076b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	60fb      	str	r3, [r7, #12]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vTaskStartScheduler+0xaa>
}
 80076b8:	bf00      	nop
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	08015590 	.word	0x08015590
 80076c4:	08007d3d 	.word	0x08007d3d
 80076c8:	20003be8 	.word	0x20003be8
 80076cc:	20003be4 	.word	0x20003be4
 80076d0:	20003bd0 	.word	0x20003bd0
 80076d4:	20003bc8 	.word	0x20003bc8

080076d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <vTaskSuspendAll+0x18>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	4a03      	ldr	r2, [pc, #12]	; (80076f0 <vTaskSuspendAll+0x18>)
 80076e4:	6013      	str	r3, [r2, #0]
}
 80076e6:	bf00      	nop
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20003bec 	.word	0x20003bec

080076f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007702:	4b42      	ldr	r3, [pc, #264]	; (800780c <xTaskResumeAll+0x118>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <xTaskResumeAll+0x2c>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	603b      	str	r3, [r7, #0]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007720:	f001 f8cc 	bl	80088bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007724:	4b39      	ldr	r3, [pc, #228]	; (800780c <xTaskResumeAll+0x118>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3b01      	subs	r3, #1
 800772a:	4a38      	ldr	r2, [pc, #224]	; (800780c <xTaskResumeAll+0x118>)
 800772c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800772e:	4b37      	ldr	r3, [pc, #220]	; (800780c <xTaskResumeAll+0x118>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d162      	bne.n	80077fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007736:	4b36      	ldr	r3, [pc, #216]	; (8007810 <xTaskResumeAll+0x11c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d05e      	beq.n	80077fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800773e:	e02f      	b.n	80077a0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007740:	4b34      	ldr	r3, [pc, #208]	; (8007814 <xTaskResumeAll+0x120>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3318      	adds	r3, #24
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff f883 	bl	8006858 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3304      	adds	r3, #4
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff f87e 	bl	8006858 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <xTaskResumeAll+0x124>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	429a      	cmp	r2, r3
 8007766:	d903      	bls.n	8007770 <xTaskResumeAll+0x7c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776c:	4a2a      	ldr	r2, [pc, #168]	; (8007818 <xTaskResumeAll+0x124>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4a27      	ldr	r2, [pc, #156]	; (800781c <xTaskResumeAll+0x128>)
 800777e:	441a      	add	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f7ff f80b 	bl	80067a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007790:	4b23      	ldr	r3, [pc, #140]	; (8007820 <xTaskResumeAll+0x12c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	429a      	cmp	r2, r3
 8007798:	d302      	bcc.n	80077a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800779a:	4b22      	ldr	r3, [pc, #136]	; (8007824 <xTaskResumeAll+0x130>)
 800779c:	2201      	movs	r2, #1
 800779e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077a0:	4b1c      	ldr	r3, [pc, #112]	; (8007814 <xTaskResumeAll+0x120>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1cb      	bne.n	8007740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077ae:	f000 fb7b 	bl	8007ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077b2:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <xTaskResumeAll+0x134>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d010      	beq.n	80077e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077be:	f000 f845 	bl	800784c <xTaskIncrementTick>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077c8:	4b16      	ldr	r3, [pc, #88]	; (8007824 <xTaskResumeAll+0x130>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f1      	bne.n	80077be <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80077da:	4b13      	ldr	r3, [pc, #76]	; (8007828 <xTaskResumeAll+0x134>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077e0:	4b10      	ldr	r3, [pc, #64]	; (8007824 <xTaskResumeAll+0x130>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d009      	beq.n	80077fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077e8:	2301      	movs	r3, #1
 80077ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <xTaskResumeAll+0x138>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077fc:	f001 f88e 	bl	800891c <vPortExitCritical>

	return xAlreadyYielded;
 8007800:	68bb      	ldr	r3, [r7, #8]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20003bec 	.word	0x20003bec
 8007810:	20003bc4 	.word	0x20003bc4
 8007814:	20003b84 	.word	0x20003b84
 8007818:	20003bcc 	.word	0x20003bcc
 800781c:	200036f4 	.word	0x200036f4
 8007820:	200036f0 	.word	0x200036f0
 8007824:	20003bd8 	.word	0x20003bd8
 8007828:	20003bd4 	.word	0x20003bd4
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007836:	4b04      	ldr	r3, [pc, #16]	; (8007848 <xTaskGetTickCount+0x18>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800783c:	687b      	ldr	r3, [r7, #4]
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	bc80      	pop	{r7}
 8007846:	4770      	bx	lr
 8007848:	20003bc8 	.word	0x20003bc8

0800784c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007856:	4b51      	ldr	r3, [pc, #324]	; (800799c <xTaskIncrementTick+0x150>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 808e 	bne.w	800797c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007860:	4b4f      	ldr	r3, [pc, #316]	; (80079a0 <xTaskIncrementTick+0x154>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	3301      	adds	r3, #1
 8007866:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007868:	4a4d      	ldr	r2, [pc, #308]	; (80079a0 <xTaskIncrementTick+0x154>)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d120      	bne.n	80078b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007874:	4b4b      	ldr	r3, [pc, #300]	; (80079a4 <xTaskIncrementTick+0x158>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <xTaskIncrementTick+0x48>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	603b      	str	r3, [r7, #0]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <xTaskIncrementTick+0x46>
 8007894:	4b43      	ldr	r3, [pc, #268]	; (80079a4 <xTaskIncrementTick+0x158>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	4b43      	ldr	r3, [pc, #268]	; (80079a8 <xTaskIncrementTick+0x15c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a41      	ldr	r2, [pc, #260]	; (80079a4 <xTaskIncrementTick+0x158>)
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	4a41      	ldr	r2, [pc, #260]	; (80079a8 <xTaskIncrementTick+0x15c>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	4b40      	ldr	r3, [pc, #256]	; (80079ac <xTaskIncrementTick+0x160>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	4a3f      	ldr	r2, [pc, #252]	; (80079ac <xTaskIncrementTick+0x160>)
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	f000 faf9 	bl	8007ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078b6:	4b3e      	ldr	r3, [pc, #248]	; (80079b0 <xTaskIncrementTick+0x164>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d34e      	bcc.n	800795e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078c0:	4b38      	ldr	r3, [pc, #224]	; (80079a4 <xTaskIncrementTick+0x158>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <xTaskIncrementTick+0x82>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <xTaskIncrementTick+0x84>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d004      	beq.n	80078de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078d4:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <xTaskIncrementTick+0x164>)
 80078d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078da:	601a      	str	r2, [r3, #0]
					break;
 80078dc:	e03f      	b.n	800795e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078de:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <xTaskIncrementTick+0x158>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d203      	bcs.n	80078fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078f6:	4a2e      	ldr	r2, [pc, #184]	; (80079b0 <xTaskIncrementTick+0x164>)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6013      	str	r3, [r2, #0]
						break;
 80078fc:	e02f      	b.n	800795e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	3304      	adds	r3, #4
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe ffa8 	bl	8006858 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	3318      	adds	r3, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe ff9f 	bl	8006858 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	4b25      	ldr	r3, [pc, #148]	; (80079b4 <xTaskIncrementTick+0x168>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	429a      	cmp	r2, r3
 8007924:	d903      	bls.n	800792e <xTaskIncrementTick+0xe2>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a22      	ldr	r2, [pc, #136]	; (80079b4 <xTaskIncrementTick+0x168>)
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4a1f      	ldr	r2, [pc, #124]	; (80079b8 <xTaskIncrementTick+0x16c>)
 800793c:	441a      	add	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	3304      	adds	r3, #4
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f7fe ff2c 	bl	80067a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794e:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <xTaskIncrementTick+0x170>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007954:	429a      	cmp	r2, r3
 8007956:	d3b3      	bcc.n	80078c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800795c:	e7b0      	b.n	80078c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800795e:	4b17      	ldr	r3, [pc, #92]	; (80079bc <xTaskIncrementTick+0x170>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007964:	4914      	ldr	r1, [pc, #80]	; (80079b8 <xTaskIncrementTick+0x16c>)
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d907      	bls.n	8007986 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e004      	b.n	8007986 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800797c:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <xTaskIncrementTick+0x174>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	4a0f      	ldr	r2, [pc, #60]	; (80079c0 <xTaskIncrementTick+0x174>)
 8007984:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <xTaskIncrementTick+0x178>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007992:	697b      	ldr	r3, [r7, #20]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20003bec 	.word	0x20003bec
 80079a0:	20003bc8 	.word	0x20003bc8
 80079a4:	20003b7c 	.word	0x20003b7c
 80079a8:	20003b80 	.word	0x20003b80
 80079ac:	20003bdc 	.word	0x20003bdc
 80079b0:	20003be4 	.word	0x20003be4
 80079b4:	20003bcc 	.word	0x20003bcc
 80079b8:	200036f4 	.word	0x200036f4
 80079bc:	200036f0 	.word	0x200036f0
 80079c0:	20003bd4 	.word	0x20003bd4
 80079c4:	20003bd8 	.word	0x20003bd8

080079c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079ce:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <vTaskSwitchContext+0xa4>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079d6:	4b26      	ldr	r3, [pc, #152]	; (8007a70 <vTaskSwitchContext+0xa8>)
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079dc:	e041      	b.n	8007a62 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80079de:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <vTaskSwitchContext+0xa8>)
 80079e0:	2200      	movs	r2, #0
 80079e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80079e4:	4b23      	ldr	r3, [pc, #140]	; (8007a74 <vTaskSwitchContext+0xac>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	e010      	b.n	8007a0e <vTaskSwitchContext+0x46>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <vTaskSwitchContext+0x40>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	607b      	str	r3, [r7, #4]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <vTaskSwitchContext+0x3e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	491a      	ldr	r1, [pc, #104]	; (8007a78 <vTaskSwitchContext+0xb0>)
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0e4      	beq.n	80079ec <vTaskSwitchContext+0x24>
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4a12      	ldr	r2, [pc, #72]	; (8007a78 <vTaskSwitchContext+0xb0>)
 8007a2e:	4413      	add	r3, r2
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	605a      	str	r2, [r3, #4]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	3308      	adds	r3, #8
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d104      	bne.n	8007a52 <vTaskSwitchContext+0x8a>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	4a08      	ldr	r2, [pc, #32]	; (8007a7c <vTaskSwitchContext+0xb4>)
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	4a05      	ldr	r2, [pc, #20]	; (8007a74 <vTaskSwitchContext+0xac>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6013      	str	r3, [r2, #0]
}
 8007a62:	bf00      	nop
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bc80      	pop	{r7}
 8007a6a:	4770      	bx	lr
 8007a6c:	20003bec 	.word	0x20003bec
 8007a70:	20003bd8 	.word	0x20003bd8
 8007a74:	20003bcc 	.word	0x20003bcc
 8007a78:	200036f4 	.word	0x200036f4
 8007a7c:	200036f0 	.word	0x200036f0

08007a80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	60fb      	str	r3, [r7, #12]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aa6:	4b07      	ldr	r3, [pc, #28]	; (8007ac4 <vTaskPlaceOnEventList+0x44>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3318      	adds	r3, #24
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fe fe9a 	bl	80067e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	6838      	ldr	r0, [r7, #0]
 8007ab8:	f000 faa6 	bl	8008008 <prvAddCurrentTaskToDelayedList>
}
 8007abc:	bf00      	nop
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	200036f0 	.word	0x200036f0

08007ac8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	617b      	str	r3, [r7, #20]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <vTaskPlaceOnEventListRestricted+0x54>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3318      	adds	r3, #24
 8007af6:	4619      	mov	r1, r3
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f7fe fe52 	bl	80067a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	68b8      	ldr	r0, [r7, #8]
 8007b0e:	f000 fa7b 	bl	8008008 <prvAddCurrentTaskToDelayedList>
	}
 8007b12:	bf00      	nop
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200036f0 	.word	0x200036f0

08007b20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	e7fe      	b.n	8007b4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3318      	adds	r3, #24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe fe81 	bl	8006858 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b56:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <xTaskRemoveFromEventList+0xb0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d11d      	bne.n	8007b9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	3304      	adds	r3, #4
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fe78 	bl	8006858 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <xTaskRemoveFromEventList+0xb4>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d903      	bls.n	8007b7c <xTaskRemoveFromEventList+0x5c>
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	4a16      	ldr	r2, [pc, #88]	; (8007bd4 <xTaskRemoveFromEventList+0xb4>)
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4a13      	ldr	r2, [pc, #76]	; (8007bd8 <xTaskRemoveFromEventList+0xb8>)
 8007b8a:	441a      	add	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f7fe fe05 	bl	80067a2 <vListInsertEnd>
 8007b98:	e005      	b.n	8007ba6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3318      	adds	r3, #24
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	480e      	ldr	r0, [pc, #56]	; (8007bdc <xTaskRemoveFromEventList+0xbc>)
 8007ba2:	f7fe fdfe 	bl	80067a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <xTaskRemoveFromEventList+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d905      	bls.n	8007bc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bb8:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <xTaskRemoveFromEventList+0xc4>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e001      	b.n	8007bc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bc4:	697b      	ldr	r3, [r7, #20]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20003bec 	.word	0x20003bec
 8007bd4:	20003bcc 	.word	0x20003bcc
 8007bd8:	200036f4 	.word	0x200036f4
 8007bdc:	20003b84 	.word	0x20003b84
 8007be0:	200036f0 	.word	0x200036f0
 8007be4:	20003bd8 	.word	0x20003bd8

08007be8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	60fb      	str	r3, [r7, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007c0c:	f000 fe56 	bl	80088bc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <vTaskSetTimeOutState+0x44>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007c18:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <vTaskSetTimeOutState+0x48>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007c20:	f000 fe7c 	bl	800891c <vPortExitCritical>
}
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	20003bdc 	.word	0x20003bdc
 8007c30:	20003bc8 	.word	0x20003bc8

08007c34 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <vTaskInternalSetTimeOutState+0x24>)
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <vTaskInternalSetTimeOutState+0x28>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bc80      	pop	{r7}
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	20003bdc 	.word	0x20003bdc
 8007c5c:	20003bc8 	.word	0x20003bc8

08007c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b088      	sub	sp, #32
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	e7fe      	b.n	8007c84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	60fb      	str	r3, [r7, #12]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ca2:	f000 fe0b 	bl	80088bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ca6:	4b1d      	ldr	r3, [pc, #116]	; (8007d1c <xTaskCheckForTimeOut+0xbc>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cbe:	d102      	bne.n	8007cc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	61fb      	str	r3, [r7, #28]
 8007cc4:	e023      	b.n	8007d0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <xTaskCheckForTimeOut+0xc0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d007      	beq.n	8007ce2 <xTaskCheckForTimeOut+0x82>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d302      	bcc.n	8007ce2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	e015      	b.n	8007d0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d20b      	bcs.n	8007d04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	1ad2      	subs	r2, r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ff9b 	bl	8007c34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	e004      	b.n	8007d0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d0e:	f000 fe05 	bl	800891c <vPortExitCritical>

	return xReturn;
 8007d12:	69fb      	ldr	r3, [r7, #28]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3720      	adds	r7, #32
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20003bc8 	.word	0x20003bc8
 8007d20:	20003bdc 	.word	0x20003bdc

08007d24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d28:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <vTaskMissedYield+0x14>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	20003bd8 	.word	0x20003bd8

08007d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d44:	f000 f852 	bl	8007dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <prvIdleTask+0x28>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d9f9      	bls.n	8007d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <prvIdleTask+0x2c>)
 8007d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d60:	e7f0      	b.n	8007d44 <prvIdleTask+0x8>
 8007d62:	bf00      	nop
 8007d64:	200036f4 	.word	0x200036f4
 8007d68:	e000ed04 	.word	0xe000ed04

08007d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d72:	2300      	movs	r3, #0
 8007d74:	607b      	str	r3, [r7, #4]
 8007d76:	e00c      	b.n	8007d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4a12      	ldr	r2, [pc, #72]	; (8007dcc <prvInitialiseTaskLists+0x60>)
 8007d84:	4413      	add	r3, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fce0 	bl	800674c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	607b      	str	r3, [r7, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b37      	cmp	r3, #55	; 0x37
 8007d96:	d9ef      	bls.n	8007d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d98:	480d      	ldr	r0, [pc, #52]	; (8007dd0 <prvInitialiseTaskLists+0x64>)
 8007d9a:	f7fe fcd7 	bl	800674c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d9e:	480d      	ldr	r0, [pc, #52]	; (8007dd4 <prvInitialiseTaskLists+0x68>)
 8007da0:	f7fe fcd4 	bl	800674c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007da4:	480c      	ldr	r0, [pc, #48]	; (8007dd8 <prvInitialiseTaskLists+0x6c>)
 8007da6:	f7fe fcd1 	bl	800674c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007daa:	480c      	ldr	r0, [pc, #48]	; (8007ddc <prvInitialiseTaskLists+0x70>)
 8007dac:	f7fe fcce 	bl	800674c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007db0:	480b      	ldr	r0, [pc, #44]	; (8007de0 <prvInitialiseTaskLists+0x74>)
 8007db2:	f7fe fccb 	bl	800674c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <prvInitialiseTaskLists+0x78>)
 8007db8:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <prvInitialiseTaskLists+0x64>)
 8007dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <prvInitialiseTaskLists+0x7c>)
 8007dbe:	4a05      	ldr	r2, [pc, #20]	; (8007dd4 <prvInitialiseTaskLists+0x68>)
 8007dc0:	601a      	str	r2, [r3, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	200036f4 	.word	0x200036f4
 8007dd0:	20003b54 	.word	0x20003b54
 8007dd4:	20003b68 	.word	0x20003b68
 8007dd8:	20003b84 	.word	0x20003b84
 8007ddc:	20003b98 	.word	0x20003b98
 8007de0:	20003bb0 	.word	0x20003bb0
 8007de4:	20003b7c 	.word	0x20003b7c
 8007de8:	20003b80 	.word	0x20003b80

08007dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007df2:	e019      	b.n	8007e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007df4:	f000 fd62 	bl	80088bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007df8:	4b10      	ldr	r3, [pc, #64]	; (8007e3c <prvCheckTasksWaitingTermination+0x50>)
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fd27 	bl	8006858 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e0a:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <prvCheckTasksWaitingTermination+0x54>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	4a0b      	ldr	r2, [pc, #44]	; (8007e40 <prvCheckTasksWaitingTermination+0x54>)
 8007e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e14:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <prvCheckTasksWaitingTermination+0x58>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	4a0a      	ldr	r2, [pc, #40]	; (8007e44 <prvCheckTasksWaitingTermination+0x58>)
 8007e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e1e:	f000 fd7d 	bl	800891c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f810 	bl	8007e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e28:	4b06      	ldr	r3, [pc, #24]	; (8007e44 <prvCheckTasksWaitingTermination+0x58>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e1      	bne.n	8007df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20003b98 	.word	0x20003b98
 8007e40:	20003bc4 	.word	0x20003bc4
 8007e44:	20003bac 	.word	0x20003bac

08007e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d108      	bne.n	8007e6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fef0 	bl	8008c44 <vPortFree>
				vPortFree( pxTCB );
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 feed 	bl	8008c44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e6a:	e018      	b.n	8007e9e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d103      	bne.n	8007e7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fee4 	bl	8008c44 <vPortFree>
	}
 8007e7c:	e00f      	b.n	8007e9e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d00a      	beq.n	8007e9e <prvDeleteTCB+0x56>
	__asm volatile
 8007e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	60fb      	str	r3, [r7, #12]
}
 8007e9a:	bf00      	nop
 8007e9c:	e7fe      	b.n	8007e9c <prvDeleteTCB+0x54>
	}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <prvResetNextTaskUnblockTime+0x40>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <prvResetNextTaskUnblockTime+0x14>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <prvResetNextTaskUnblockTime+0x16>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ec2:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <prvResetNextTaskUnblockTime+0x44>)
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eca:	e008      	b.n	8007ede <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <prvResetNextTaskUnblockTime+0x40>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	4a04      	ldr	r2, [pc, #16]	; (8007eec <prvResetNextTaskUnblockTime+0x44>)
 8007edc:	6013      	str	r3, [r2, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr
 8007ee8:	20003b7c 	.word	0x20003b7c
 8007eec:	20003be4 	.word	0x20003be4

08007ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <xTaskGetSchedulerState+0x34>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007efe:	2301      	movs	r3, #1
 8007f00:	607b      	str	r3, [r7, #4]
 8007f02:	e008      	b.n	8007f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <xTaskGetSchedulerState+0x38>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d102      	bne.n	8007f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	607b      	str	r3, [r7, #4]
 8007f10:	e001      	b.n	8007f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f12:	2300      	movs	r3, #0
 8007f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f16:	687b      	ldr	r3, [r7, #4]
	}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20003bd0 	.word	0x20003bd0
 8007f28:	20003bec 	.word	0x20003bec

08007f2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d056      	beq.n	8007ff0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f42:	4b2e      	ldr	r3, [pc, #184]	; (8007ffc <xTaskPriorityDisinherit+0xd0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d00a      	beq.n	8007f62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60fb      	str	r3, [r7, #12]
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10a      	bne.n	8007f80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6e:	f383 8811 	msr	BASEPRI, r3
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	60bb      	str	r3, [r7, #8]
}
 8007f7c:	bf00      	nop
 8007f7e:	e7fe      	b.n	8007f7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d02c      	beq.n	8007ff0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d128      	bne.n	8007ff0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fc58 	bl	8006858 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <xTaskPriorityDisinherit+0xd4>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d903      	bls.n	8007fd0 <xTaskPriorityDisinherit+0xa4>
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fcc:	4a0c      	ldr	r2, [pc, #48]	; (8008000 <xTaskPriorityDisinherit+0xd4>)
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4413      	add	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4a09      	ldr	r2, [pc, #36]	; (8008004 <xTaskPriorityDisinherit+0xd8>)
 8007fde:	441a      	add	r2, r3
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	f7fe fbdb 	bl	80067a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fec:	2301      	movs	r3, #1
 8007fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ff0:	697b      	ldr	r3, [r7, #20]
	}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200036f0 	.word	0x200036f0
 8008000:	20003bcc 	.word	0x20003bcc
 8008004:	200036f4 	.word	0x200036f4

08008008 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008012:	4b21      	ldr	r3, [pc, #132]	; (8008098 <prvAddCurrentTaskToDelayedList+0x90>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008018:	4b20      	ldr	r3, [pc, #128]	; (800809c <prvAddCurrentTaskToDelayedList+0x94>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3304      	adds	r3, #4
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe fc1a 	bl	8006858 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800802a:	d10a      	bne.n	8008042 <prvAddCurrentTaskToDelayedList+0x3a>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008032:	4b1a      	ldr	r3, [pc, #104]	; (800809c <prvAddCurrentTaskToDelayedList+0x94>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4819      	ldr	r0, [pc, #100]	; (80080a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800803c:	f7fe fbb1 	bl	80067a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008040:	e026      	b.n	8008090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4413      	add	r3, r2
 8008048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800804a:	4b14      	ldr	r3, [pc, #80]	; (800809c <prvAddCurrentTaskToDelayedList+0x94>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	429a      	cmp	r2, r3
 8008058:	d209      	bcs.n	800806e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805a:	4b12      	ldr	r3, [pc, #72]	; (80080a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4b0f      	ldr	r3, [pc, #60]	; (800809c <prvAddCurrentTaskToDelayedList+0x94>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3304      	adds	r3, #4
 8008064:	4619      	mov	r1, r3
 8008066:	4610      	mov	r0, r2
 8008068:	f7fe fbbe 	bl	80067e8 <vListInsert>
}
 800806c:	e010      	b.n	8008090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806e:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <prvAddCurrentTaskToDelayedList+0x94>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3304      	adds	r3, #4
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f7fe fbb4 	bl	80067e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d202      	bcs.n	8008090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800808a:	4a08      	ldr	r2, [pc, #32]	; (80080ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	6013      	str	r3, [r2, #0]
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20003bc8 	.word	0x20003bc8
 800809c:	200036f0 	.word	0x200036f0
 80080a0:	20003bb0 	.word	0x20003bb0
 80080a4:	20003b80 	.word	0x20003b80
 80080a8:	20003b7c 	.word	0x20003b7c
 80080ac:	20003be4 	.word	0x20003be4

080080b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080ba:	f000 facb 	bl	8008654 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080be:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <xTimerCreateTimerTask+0x80>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d021      	beq.n	800810a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080ce:	1d3a      	adds	r2, r7, #4
 80080d0:	f107 0108 	add.w	r1, r7, #8
 80080d4:	f107 030c 	add.w	r3, r7, #12
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fb1d 	bl	8006718 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	9202      	str	r2, [sp, #8]
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	2302      	movs	r3, #2
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	2300      	movs	r3, #0
 80080ee:	460a      	mov	r2, r1
 80080f0:	4910      	ldr	r1, [pc, #64]	; (8008134 <xTimerCreateTimerTask+0x84>)
 80080f2:	4811      	ldr	r0, [pc, #68]	; (8008138 <xTimerCreateTimerTask+0x88>)
 80080f4:	f7ff f8be 	bl	8007274 <xTaskCreateStatic>
 80080f8:	4603      	mov	r3, r0
 80080fa:	4a10      	ldr	r2, [pc, #64]	; (800813c <xTimerCreateTimerTask+0x8c>)
 80080fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <xTimerCreateTimerTask+0x8c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008106:	2301      	movs	r3, #1
 8008108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	613b      	str	r3, [r7, #16]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008126:	697b      	ldr	r3, [r7, #20]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20003c20 	.word	0x20003c20
 8008134:	08015598 	.word	0x08015598
 8008138:	0800825d 	.word	0x0800825d
 800813c:	20003c24 	.word	0x20003c24

08008140 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08a      	sub	sp, #40	; 0x28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800814e:	2300      	movs	r3, #0
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	623b      	str	r3, [r7, #32]
}
 800816a:	bf00      	nop
 800816c:	e7fe      	b.n	800816c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800816e:	4b1a      	ldr	r3, [pc, #104]	; (80081d8 <xTimerGenericCommand+0x98>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d02a      	beq.n	80081cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b05      	cmp	r3, #5
 8008186:	dc18      	bgt.n	80081ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008188:	f7ff feb2 	bl	8007ef0 <xTaskGetSchedulerState>
 800818c:	4603      	mov	r3, r0
 800818e:	2b02      	cmp	r3, #2
 8008190:	d109      	bne.n	80081a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008192:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <xTimerGenericCommand+0x98>)
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	f107 0110 	add.w	r1, r7, #16
 800819a:	2300      	movs	r3, #0
 800819c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800819e:	f7fe fc87 	bl	8006ab0 <xQueueGenericSend>
 80081a2:	6278      	str	r0, [r7, #36]	; 0x24
 80081a4:	e012      	b.n	80081cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081a6:	4b0c      	ldr	r3, [pc, #48]	; (80081d8 <xTimerGenericCommand+0x98>)
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	f107 0110 	add.w	r1, r7, #16
 80081ae:	2300      	movs	r3, #0
 80081b0:	2200      	movs	r2, #0
 80081b2:	f7fe fc7d 	bl	8006ab0 <xQueueGenericSend>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24
 80081b8:	e008      	b.n	80081cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081ba:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <xTimerGenericCommand+0x98>)
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	f107 0110 	add.w	r1, r7, #16
 80081c2:	2300      	movs	r3, #0
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	f7fe fd71 	bl	8006cac <xQueueGenericSendFromISR>
 80081ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3728      	adds	r7, #40	; 0x28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20003c20 	.word	0x20003c20

080081dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081e6:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <prvProcessExpiredTimer+0x7c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fb2f 	bl	8006858 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d122      	bne.n	8008248 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	699a      	ldr	r2, [r3, #24]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	18d1      	adds	r1, r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	683a      	ldr	r2, [r7, #0]
 800820e:	6978      	ldr	r0, [r7, #20]
 8008210:	f000 f8c8 	bl	80083a4 <prvInsertTimerInActiveList>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d016      	beq.n	8008248 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800821a:	2300      	movs	r3, #0
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	2300      	movs	r3, #0
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	2100      	movs	r1, #0
 8008224:	6978      	ldr	r0, [r7, #20]
 8008226:	f7ff ff8b 	bl	8008140 <xTimerGenericCommand>
 800822a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60fb      	str	r3, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	e7fe      	b.n	8008246 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	6978      	ldr	r0, [r7, #20]
 800824e:	4798      	blx	r3
}
 8008250:	bf00      	nop
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20003c18 	.word	0x20003c18

0800825c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008264:	f107 0308 	add.w	r3, r7, #8
 8008268:	4618      	mov	r0, r3
 800826a:	f000 f857 	bl	800831c <prvGetNextExpireTime>
 800826e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f803 	bl	8008280 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800827a:	f000 f8d5 	bl	8008428 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800827e:	e7f1      	b.n	8008264 <prvTimerTask+0x8>

08008280 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800828a:	f7ff fa25 	bl	80076d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800828e:	f107 0308 	add.w	r3, r7, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f866 	bl	8008364 <prvSampleTimeNow>
 8008298:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d130      	bne.n	8008302 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <prvProcessTimerOrBlockTask+0x3c>
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d806      	bhi.n	80082bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082ae:	f7ff fa21 	bl	80076f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff ff91 	bl	80081dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082ba:	e024      	b.n	8008306 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d008      	beq.n	80082d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082c2:	4b13      	ldr	r3, [pc, #76]	; (8008310 <prvProcessTimerOrBlockTask+0x90>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bf0c      	ite	eq
 80082cc:	2301      	moveq	r3, #1
 80082ce:	2300      	movne	r3, #0
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <prvProcessTimerOrBlockTask+0x94>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f7fe ff93 	bl	800720c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082e6:	f7ff fa05 	bl	80076f4 <xTaskResumeAll>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <prvProcessTimerOrBlockTask+0x98>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
}
 8008300:	e001      	b.n	8008306 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008302:	f7ff f9f7 	bl	80076f4 <xTaskResumeAll>
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20003c1c 	.word	0x20003c1c
 8008314:	20003c20 	.word	0x20003c20
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008324:	4b0e      	ldr	r3, [pc, #56]	; (8008360 <prvGetNextExpireTime+0x44>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	bf0c      	ite	eq
 800832e:	2301      	moveq	r3, #1
 8008330:	2300      	movne	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	461a      	mov	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d105      	bne.n	800834e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <prvGetNextExpireTime+0x44>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e001      	b.n	8008352 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008352:	68fb      	ldr	r3, [r7, #12]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20003c18 	.word	0x20003c18

08008364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800836c:	f7ff fa60 	bl	8007830 <xTaskGetTickCount>
 8008370:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008372:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <prvSampleTimeNow+0x3c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	429a      	cmp	r2, r3
 800837a:	d205      	bcs.n	8008388 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800837c:	f000 f908 	bl	8008590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e002      	b.n	800838e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800838e:	4a04      	ldr	r2, [pc, #16]	; (80083a0 <prvSampleTimeNow+0x3c>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008394:	68fb      	ldr	r3, [r7, #12]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20003c28 	.word	0x20003c28

080083a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d812      	bhi.n	80083f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d302      	bcc.n	80083de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e01b      	b.n	8008416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083de:	4b10      	ldr	r3, [pc, #64]	; (8008420 <prvInsertTimerInActiveList+0x7c>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7fe f9fd 	bl	80067e8 <vListInsert>
 80083ee:	e012      	b.n	8008416 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d206      	bcs.n	8008406 <prvInsertTimerInActiveList+0x62>
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e007      	b.n	8008416 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008406:	4b07      	ldr	r3, [pc, #28]	; (8008424 <prvInsertTimerInActiveList+0x80>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f7fe f9e9 	bl	80067e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008416:	697b      	ldr	r3, [r7, #20]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20003c1c 	.word	0x20003c1c
 8008424:	20003c18 	.word	0x20003c18

08008428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08e      	sub	sp, #56	; 0x38
 800842c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800842e:	e09d      	b.n	800856c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	da18      	bge.n	8008468 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008436:	1d3b      	adds	r3, r7, #4
 8008438:	3304      	adds	r3, #4
 800843a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	61fb      	str	r3, [r7, #28]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800845e:	6850      	ldr	r0, [r2, #4]
 8008460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008462:	6892      	ldr	r2, [r2, #8]
 8008464:	4611      	mov	r1, r2
 8008466:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	db7d      	blt.n	800856a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	3304      	adds	r3, #4
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe f9ea 	bl	8006858 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008484:	463b      	mov	r3, r7
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff ff6c 	bl	8008364 <prvSampleTimeNow>
 800848c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b09      	cmp	r3, #9
 8008492:	d86b      	bhi.n	800856c <prvProcessReceivedCommands+0x144>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <prvProcessReceivedCommands+0x74>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084c5 	.word	0x080084c5
 80084a4:	080084c5 	.word	0x080084c5
 80084a8:	0800856d 	.word	0x0800856d
 80084ac:	08008521 	.word	0x08008521
 80084b0:	08008559 	.word	0x08008559
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084c5 	.word	0x080084c5
 80084bc:	0800856d 	.word	0x0800856d
 80084c0:	08008521 	.word	0x08008521
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	18d1      	adds	r1, r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d2:	f7ff ff67 	bl	80083a4 <prvInsertTimerInActiveList>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d047      	beq.n	800856c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d13f      	bne.n	800856c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	441a      	add	r2, r3
 80084f4:	2300      	movs	r3, #0
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	2300      	movs	r3, #0
 80084fa:	2100      	movs	r1, #0
 80084fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084fe:	f7ff fe1f 	bl	8008140 <xTimerGenericCommand>
 8008502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d130      	bne.n	800856c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	61bb      	str	r3, [r7, #24]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	617b      	str	r3, [r7, #20]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	699a      	ldr	r2, [r3, #24]
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	18d1      	adds	r1, r2, r3
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008552:	f7ff ff27 	bl	80083a4 <prvInsertTimerInActiveList>
					break;
 8008556:	e009      	b.n	800856c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008564:	f000 fb6e 	bl	8008c44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008568:	e000      	b.n	800856c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800856a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800856c:	4b07      	ldr	r3, [pc, #28]	; (800858c <prvProcessReceivedCommands+0x164>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	1d39      	adds	r1, r7, #4
 8008572:	2200      	movs	r2, #0
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe fc31 	bl	8006ddc <xQueueReceive>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	f47f af57 	bne.w	8008430 <prvProcessReceivedCommands+0x8>
	}
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	3730      	adds	r7, #48	; 0x30
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	20003c20 	.word	0x20003c20

08008590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008596:	e045      	b.n	8008624 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008598:	4b2c      	ldr	r3, [pc, #176]	; (800864c <prvSwitchTimerLists+0xbc>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085a2:	4b2a      	ldr	r3, [pc, #168]	; (800864c <prvSwitchTimerLists+0xbc>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fe f951 	bl	8006858 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d12e      	bne.n	8008624 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4413      	add	r3, r2
 80085ce:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d90e      	bls.n	80085f6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085e4:	4b19      	ldr	r3, [pc, #100]	; (800864c <prvSwitchTimerLists+0xbc>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4619      	mov	r1, r3
 80085ee:	4610      	mov	r0, r2
 80085f0:	f7fe f8fa 	bl	80067e8 <vListInsert>
 80085f4:	e016      	b.n	8008624 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085f6:	2300      	movs	r3, #0
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	2100      	movs	r1, #0
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff fd9d 	bl	8008140 <xTimerGenericCommand>
 8008606:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <prvSwitchTimerLists+0x94>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	603b      	str	r3, [r7, #0]
}
 8008620:	bf00      	nop
 8008622:	e7fe      	b.n	8008622 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008624:	4b09      	ldr	r3, [pc, #36]	; (800864c <prvSwitchTimerLists+0xbc>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1b4      	bne.n	8008598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <prvSwitchTimerLists+0xbc>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <prvSwitchTimerLists+0xc0>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a04      	ldr	r2, [pc, #16]	; (800864c <prvSwitchTimerLists+0xbc>)
 800863a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800863c:	4a04      	ldr	r2, [pc, #16]	; (8008650 <prvSwitchTimerLists+0xc0>)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	6013      	str	r3, [r2, #0]
}
 8008642:	bf00      	nop
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20003c18 	.word	0x20003c18
 8008650:	20003c1c 	.word	0x20003c1c

08008654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800865a:	f000 f92f 	bl	80088bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <prvCheckForValidListAndQueue+0x60>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d120      	bne.n	80086a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008666:	4814      	ldr	r0, [pc, #80]	; (80086b8 <prvCheckForValidListAndQueue+0x64>)
 8008668:	f7fe f870 	bl	800674c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800866c:	4813      	ldr	r0, [pc, #76]	; (80086bc <prvCheckForValidListAndQueue+0x68>)
 800866e:	f7fe f86d 	bl	800674c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008672:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <prvCheckForValidListAndQueue+0x6c>)
 8008674:	4a10      	ldr	r2, [pc, #64]	; (80086b8 <prvCheckForValidListAndQueue+0x64>)
 8008676:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008678:	4b12      	ldr	r3, [pc, #72]	; (80086c4 <prvCheckForValidListAndQueue+0x70>)
 800867a:	4a10      	ldr	r2, [pc, #64]	; (80086bc <prvCheckForValidListAndQueue+0x68>)
 800867c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800867e:	2300      	movs	r3, #0
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <prvCheckForValidListAndQueue+0x74>)
 8008684:	4a11      	ldr	r2, [pc, #68]	; (80086cc <prvCheckForValidListAndQueue+0x78>)
 8008686:	2110      	movs	r1, #16
 8008688:	200a      	movs	r0, #10
 800868a:	f7fe f977 	bl	800697c <xQueueGenericCreateStatic>
 800868e:	4603      	mov	r3, r0
 8008690:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <prvCheckForValidListAndQueue+0x60>)
 8008692:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008694:	4b07      	ldr	r3, [pc, #28]	; (80086b4 <prvCheckForValidListAndQueue+0x60>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <prvCheckForValidListAndQueue+0x60>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	490b      	ldr	r1, [pc, #44]	; (80086d0 <prvCheckForValidListAndQueue+0x7c>)
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fd8a 	bl	80071bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086a8:	f000 f938 	bl	800891c <vPortExitCritical>
}
 80086ac:	bf00      	nop
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20003c20 	.word	0x20003c20
 80086b8:	20003bf0 	.word	0x20003bf0
 80086bc:	20003c04 	.word	0x20003c04
 80086c0:	20003c18 	.word	0x20003c18
 80086c4:	20003c1c 	.word	0x20003c1c
 80086c8:	20003ccc 	.word	0x20003ccc
 80086cc:	20003c2c 	.word	0x20003c2c
 80086d0:	080155a0 	.word	0x080155a0

080086d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3b04      	subs	r3, #4
 80086e4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b04      	subs	r3, #4
 80086f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f023 0201 	bic.w	r2, r3, #1
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3b04      	subs	r3, #4
 8008702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008704:	4a08      	ldr	r2, [pc, #32]	; (8008728 <pxPortInitialiseStack+0x54>)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3b14      	subs	r3, #20
 800870e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3b20      	subs	r3, #32
 800871a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800871c:	68fb      	ldr	r3, [r7, #12]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr
 8008728:	0800872d 	.word	0x0800872d

0800872c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008732:	2300      	movs	r3, #0
 8008734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008736:	4b12      	ldr	r3, [pc, #72]	; (8008780 <prvTaskExitError+0x54>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873e:	d00a      	beq.n	8008756 <prvTaskExitError+0x2a>
	__asm volatile
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
 800874c:	f3bf 8f4f 	dsb	sy
 8008750:	60fb      	str	r3, [r7, #12]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <prvTaskExitError+0x28>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60bb      	str	r3, [r7, #8]
}
 8008768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800876a:	bf00      	nop
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0fc      	beq.n	800876c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	2000000c 	.word	0x2000000c
	...

08008790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <pxCurrentTCBConst2>)
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	6808      	ldr	r0, [r1, #0]
 8008796:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800879a:	f380 8809 	msr	PSP, r0
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f380 8811 	msr	BASEPRI, r0
 80087aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80087ae:	4770      	bx	lr

080087b0 <pxCurrentTCBConst2>:
 80087b0:	200036f0 	.word	0x200036f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80087b8:	4806      	ldr	r0, [pc, #24]	; (80087d4 <prvPortStartFirstTask+0x1c>)
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	6800      	ldr	r0, [r0, #0]
 80087be:	f380 8808 	msr	MSP, r0
 80087c2:	b662      	cpsie	i
 80087c4:	b661      	cpsie	f
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	df00      	svc	0
 80087d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087d2:	bf00      	nop
 80087d4:	e000ed08 	.word	0xe000ed08

080087d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087de:	4b32      	ldr	r3, [pc, #200]	; (80088a8 <xPortStartScheduler+0xd0>)
 80087e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	22ff      	movs	r2, #255	; 0xff
 80087ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008800:	b2da      	uxtb	r2, r3
 8008802:	4b2a      	ldr	r3, [pc, #168]	; (80088ac <xPortStartScheduler+0xd4>)
 8008804:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008806:	4b2a      	ldr	r3, [pc, #168]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008808:	2207      	movs	r2, #7
 800880a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800880c:	e009      	b.n	8008822 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800880e:	4b28      	ldr	r3, [pc, #160]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3b01      	subs	r3, #1
 8008814:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008816:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	005b      	lsls	r3, r3, #1
 800881e:	b2db      	uxtb	r3, r3
 8008820:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882a:	2b80      	cmp	r3, #128	; 0x80
 800882c:	d0ef      	beq.n	800880e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800882e:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1c3 0307 	rsb	r3, r3, #7
 8008836:	2b04      	cmp	r3, #4
 8008838:	d00a      	beq.n	8008850 <xPortStartScheduler+0x78>
	__asm volatile
 800883a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883e:	f383 8811 	msr	BASEPRI, r3
 8008842:	f3bf 8f6f 	isb	sy
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	60bb      	str	r3, [r7, #8]
}
 800884c:	bf00      	nop
 800884e:	e7fe      	b.n	800884e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008850:	4b17      	ldr	r3, [pc, #92]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	021b      	lsls	r3, r3, #8
 8008856:	4a16      	ldr	r2, [pc, #88]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008858:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800885a:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <xPortStartScheduler+0xd8>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008862:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <xPortStartScheduler+0xd8>)
 8008864:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	b2da      	uxtb	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <xPortStartScheduler+0xdc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <xPortStartScheduler+0xdc>)
 8008874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800887a:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <xPortStartScheduler+0xdc>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a0d      	ldr	r2, [pc, #52]	; (80088b4 <xPortStartScheduler+0xdc>)
 8008880:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008884:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008886:	f000 f8b9 	bl	80089fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800888a:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <xPortStartScheduler+0xe0>)
 800888c:	2200      	movs	r2, #0
 800888e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008890:	f7ff ff92 	bl	80087b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008894:	f7ff f898 	bl	80079c8 <vTaskSwitchContext>
	prvTaskExitError();
 8008898:	f7ff ff48 	bl	800872c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	e000e400 	.word	0xe000e400
 80088ac:	20003d1c 	.word	0x20003d1c
 80088b0:	20003d20 	.word	0x20003d20
 80088b4:	e000ed20 	.word	0xe000ed20
 80088b8:	2000000c 	.word	0x2000000c

080088bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	607b      	str	r3, [r7, #4]
}
 80088d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <vPortEnterCritical+0x58>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3301      	adds	r3, #1
 80088dc:	4a0d      	ldr	r2, [pc, #52]	; (8008914 <vPortEnterCritical+0x58>)
 80088de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088e0:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <vPortEnterCritical+0x58>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d10f      	bne.n	8008908 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088e8:	4b0b      	ldr	r3, [pc, #44]	; (8008918 <vPortEnterCritical+0x5c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <vPortEnterCritical+0x4c>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	603b      	str	r3, [r7, #0]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <vPortEnterCritical+0x4a>
	}
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	bc80      	pop	{r7}
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	2000000c 	.word	0x2000000c
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <vPortExitCritical+0x4c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10a      	bne.n	8008940 <vPortExitCritical+0x24>
	__asm volatile
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	607b      	str	r3, [r7, #4]
}
 800893c:	bf00      	nop
 800893e:	e7fe      	b.n	800893e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008940:	4b09      	ldr	r3, [pc, #36]	; (8008968 <vPortExitCritical+0x4c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3b01      	subs	r3, #1
 8008946:	4a08      	ldr	r2, [pc, #32]	; (8008968 <vPortExitCritical+0x4c>)
 8008948:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800894a:	4b07      	ldr	r3, [pc, #28]	; (8008968 <vPortExitCritical+0x4c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <vPortExitCritical+0x42>
 8008952:	2300      	movs	r3, #0
 8008954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	f383 8811 	msr	BASEPRI, r3
}
 800895c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr
 8008968:	2000000c 	.word	0x2000000c
 800896c:	00000000 	.word	0x00000000

08008970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008970:	f3ef 8009 	mrs	r0, PSP
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <pxCurrentTCBConst>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008980:	6010      	str	r0, [r2, #0]
 8008982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008986:	f04f 0050 	mov.w	r0, #80	; 0x50
 800898a:	f380 8811 	msr	BASEPRI, r0
 800898e:	f7ff f81b 	bl	80079c8 <vTaskSwitchContext>
 8008992:	f04f 0000 	mov.w	r0, #0
 8008996:	f380 8811 	msr	BASEPRI, r0
 800899a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	6808      	ldr	r0, [r1, #0]
 80089a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80089a6:	f380 8809 	msr	PSP, r0
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	4770      	bx	lr

080089b0 <pxCurrentTCBConst>:
 80089b0:	200036f0 	.word	0x200036f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	607b      	str	r3, [r7, #4]
}
 80089d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089d2:	f7fe ff3b 	bl	800784c <xTaskIncrementTick>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <SysTick_Handler+0x40>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f383 8811 	msr	BASEPRI, r3
}
 80089ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a00:	4b0a      	ldr	r3, [pc, #40]	; (8008a2c <vPortSetupTimerInterrupt+0x30>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a06:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <vPortSetupTimerInterrupt+0x38>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <vPortSetupTimerInterrupt+0x3c>)
 8008a12:	fba2 2303 	umull	r2, r3, r2, r3
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <vPortSetupTimerInterrupt+0x40>)
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a1e:	4b03      	ldr	r3, [pc, #12]	; (8008a2c <vPortSetupTimerInterrupt+0x30>)
 8008a20:	2207      	movs	r2, #7
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	e000e010 	.word	0xe000e010
 8008a30:	e000e018 	.word	0xe000e018
 8008a34:	20000004 	.word	0x20000004
 8008a38:	10624dd3 	.word	0x10624dd3
 8008a3c:	e000e014 	.word	0xe000e014

08008a40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a46:	f3ef 8305 	mrs	r3, IPSR
 8008a4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b0f      	cmp	r3, #15
 8008a50:	d914      	bls.n	8008a7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a52:	4a16      	ldr	r2, [pc, #88]	; (8008aac <vPortValidateInterruptPriority+0x6c>)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a5c:	4b14      	ldr	r3, [pc, #80]	; (8008ab0 <vPortValidateInterruptPriority+0x70>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	7afa      	ldrb	r2, [r7, #11]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d20a      	bcs.n	8008a7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	607b      	str	r3, [r7, #4]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a7c:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <vPortValidateInterruptPriority+0x74>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a84:	4b0c      	ldr	r3, [pc, #48]	; (8008ab8 <vPortValidateInterruptPriority+0x78>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d90a      	bls.n	8008aa2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	603b      	str	r3, [r7, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <vPortValidateInterruptPriority+0x60>
	}
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	e000e3f0 	.word	0xe000e3f0
 8008ab0:	20003d1c 	.word	0x20003d1c
 8008ab4:	e000ed0c 	.word	0xe000ed0c
 8008ab8:	20003d20 	.word	0x20003d20

08008abc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08a      	sub	sp, #40	; 0x28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ac8:	f7fe fe06 	bl	80076d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008acc:	4b58      	ldr	r3, [pc, #352]	; (8008c30 <pvPortMalloc+0x174>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ad4:	f000 f910 	bl	8008cf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ad8:	4b56      	ldr	r3, [pc, #344]	; (8008c34 <pvPortMalloc+0x178>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f040 808e 	bne.w	8008c02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01d      	beq.n	8008b28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008aec:	2208      	movs	r2, #8
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4413      	add	r3, r2
 8008af2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d014      	beq.n	8008b28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f023 0307 	bic.w	r3, r3, #7
 8008b04:	3308      	adds	r3, #8
 8008b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f003 0307 	and.w	r3, r3, #7
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00a      	beq.n	8008b28 <pvPortMalloc+0x6c>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	617b      	str	r3, [r7, #20]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d069      	beq.n	8008c02 <pvPortMalloc+0x146>
 8008b2e:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <pvPortMalloc+0x17c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d864      	bhi.n	8008c02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b38:	4b40      	ldr	r3, [pc, #256]	; (8008c3c <pvPortMalloc+0x180>)
 8008b3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b3c:	4b3f      	ldr	r3, [pc, #252]	; (8008c3c <pvPortMalloc+0x180>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b42:	e004      	b.n	8008b4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d903      	bls.n	8008b60 <pvPortMalloc+0xa4>
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f1      	bne.n	8008b44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b60:	4b33      	ldr	r3, [pc, #204]	; (8008c30 <pvPortMalloc+0x174>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d04b      	beq.n	8008c02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2208      	movs	r2, #8
 8008b70:	4413      	add	r3, r2
 8008b72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	1ad2      	subs	r2, r2, r3
 8008b84:	2308      	movs	r3, #8
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d91f      	bls.n	8008bcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <pvPortMalloc+0xf8>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	613b      	str	r3, [r7, #16]
}
 8008bb0:	bf00      	nop
 8008bb2:	e7fe      	b.n	8008bb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	1ad2      	subs	r2, r2, r3
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bc6:	69b8      	ldr	r0, [r7, #24]
 8008bc8:	f000 f8f8 	bl	8008dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <pvPortMalloc+0x17c>)
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	4a18      	ldr	r2, [pc, #96]	; (8008c38 <pvPortMalloc+0x17c>)
 8008bd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bda:	4b17      	ldr	r3, [pc, #92]	; (8008c38 <pvPortMalloc+0x17c>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <pvPortMalloc+0x184>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d203      	bcs.n	8008bee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008be6:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <pvPortMalloc+0x17c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <pvPortMalloc+0x184>)
 8008bec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <pvPortMalloc+0x178>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c02:	f7fe fd77 	bl	80076f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <pvPortMalloc+0x16a>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	60fb      	str	r3, [r7, #12]
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <pvPortMalloc+0x168>
	return pvReturn;
 8008c26:	69fb      	ldr	r3, [r7, #28]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3728      	adds	r7, #40	; 0x28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	2000643c 	.word	0x2000643c
 8008c34:	20006448 	.word	0x20006448
 8008c38:	20006440 	.word	0x20006440
 8008c3c:	20006434 	.word	0x20006434
 8008c40:	20006444 	.word	0x20006444

08008c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d048      	beq.n	8008ce8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c56:	2308      	movs	r3, #8
 8008c58:	425b      	negs	r3, r3
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	4b21      	ldr	r3, [pc, #132]	; (8008cf0 <vPortFree+0xac>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <vPortFree+0x44>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	60fb      	str	r3, [r7, #12]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00a      	beq.n	8008ca6 <vPortFree+0x62>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60bb      	str	r3, [r7, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <vPortFree+0xac>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d019      	beq.n	8008ce8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d115      	bne.n	8008ce8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <vPortFree+0xac>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	401a      	ands	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ccc:	f7fe fd04 	bl	80076d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <vPortFree+0xb0>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4413      	add	r3, r2
 8008cda:	4a06      	ldr	r2, [pc, #24]	; (8008cf4 <vPortFree+0xb0>)
 8008cdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008cde:	6938      	ldr	r0, [r7, #16]
 8008ce0:	f000 f86c 	bl	8008dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ce4:	f7fe fd06 	bl	80076f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ce8:	bf00      	nop
 8008cea:	3718      	adds	r7, #24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20006448 	.word	0x20006448
 8008cf4:	20006440 	.word	0x20006440

08008cf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cfe:	f242 7310 	movw	r3, #10000	; 0x2710
 8008d02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d04:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <prvHeapInit+0xac>)
 8008d06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00c      	beq.n	8008d2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	3307      	adds	r3, #7
 8008d16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	4a1f      	ldr	r2, [pc, #124]	; (8008da4 <prvHeapInit+0xac>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d30:	4a1d      	ldr	r2, [pc, #116]	; (8008da8 <prvHeapInit+0xb0>)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d36:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <prvHeapInit+0xb0>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d44:	2208      	movs	r2, #8
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0307 	bic.w	r3, r3, #7
 8008d52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4a15      	ldr	r2, [pc, #84]	; (8008dac <prvHeapInit+0xb4>)
 8008d58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d5a:	4b14      	ldr	r3, [pc, #80]	; (8008dac <prvHeapInit+0xb4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <prvHeapInit+0xb4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2200      	movs	r2, #0
 8008d68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <prvHeapInit+0xb4>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4a0a      	ldr	r2, [pc, #40]	; (8008db0 <prvHeapInit+0xb8>)
 8008d86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <prvHeapInit+0xbc>)
 8008d8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <prvHeapInit+0xc0>)
 8008d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d96:	601a      	str	r2, [r3, #0]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20003d24 	.word	0x20003d24
 8008da8:	20006434 	.word	0x20006434
 8008dac:	2000643c 	.word	0x2000643c
 8008db0:	20006444 	.word	0x20006444
 8008db4:	20006440 	.word	0x20006440
 8008db8:	20006448 	.word	0x20006448

08008dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008dc4:	4b27      	ldr	r3, [pc, #156]	; (8008e64 <prvInsertBlockIntoFreeList+0xa8>)
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	e002      	b.n	8008dd0 <prvInsertBlockIntoFreeList+0x14>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d8f7      	bhi.n	8008dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4413      	add	r3, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d108      	bne.n	8008dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	441a      	add	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	441a      	add	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d118      	bne.n	8008e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <prvInsertBlockIntoFreeList+0xac>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d00d      	beq.n	8008e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	441a      	add	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e008      	b.n	8008e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <prvInsertBlockIntoFreeList+0xac>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e003      	b.n	8008e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d002      	beq.n	8008e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e5a:	bf00      	nop
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bc80      	pop	{r7}
 8008e62:	4770      	bx	lr
 8008e64:	20006434 	.word	0x20006434
 8008e68:	2000643c 	.word	0x2000643c

08008e6c <rcl_get_zero_initialized_init_options>:
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	4770      	bx	lr

08008e70 <rcl_init_options_init>:
 8008e70:	b084      	sub	sp, #16
 8008e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e74:	b091      	sub	sp, #68	; 0x44
 8008e76:	af17      	add	r7, sp, #92	; 0x5c
 8008e78:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d045      	beq.n	8008f0c <rcl_init_options_init+0x9c>
 8008e80:	6803      	ldr	r3, [r0, #0]
 8008e82:	4606      	mov	r6, r0
 8008e84:	b133      	cbz	r3, 8008e94 <rcl_init_options_init+0x24>
 8008e86:	2464      	movs	r4, #100	; 0x64
 8008e88:	4620      	mov	r0, r4
 8008e8a:	b011      	add	sp, #68	; 0x44
 8008e8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008e90:	b004      	add	sp, #16
 8008e92:	4770      	bx	lr
 8008e94:	4638      	mov	r0, r7
 8008e96:	f001 f84f 	bl	8009f38 <rcutils_allocator_is_valid>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d036      	beq.n	8008f0c <rcl_init_options_init+0x9c>
 8008e9e:	2050      	movs	r0, #80	; 0x50
 8008ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ea2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008ea4:	4798      	blx	r3
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	6030      	str	r0, [r6, #0]
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d030      	beq.n	8008f10 <rcl_init_options_init+0xa0>
 8008eae:	4605      	mov	r5, r0
 8008eb0:	46bc      	mov	ip, r7
 8008eb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008eb8:	f8dc 3000 	ldr.w	r3, [ip]
 8008ebc:	a802      	add	r0, sp, #8
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	3418      	adds	r4, #24
 8008ec2:	ad02      	add	r5, sp, #8
 8008ec4:	f001 faba 	bl	800a43c <rmw_get_zero_initialized_init_options>
 8008ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ed4:	f8d6 c000 	ldr.w	ip, [r6]
 8008ed8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008edc:	e884 0003 	stmia.w	r4, {r0, r1}
 8008ee0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8008ee4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008ee8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008eec:	f10c 0018 	add.w	r0, ip, #24
 8008ef0:	f001 fb70 	bl	800a5d4 <rmw_init_options_init>
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0c6      	beq.n	8008e88 <rcl_init_options_init+0x18>
 8008efa:	6830      	ldr	r0, [r6, #0]
 8008efc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008efe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008f00:	4798      	blx	r3
 8008f02:	4620      	mov	r0, r4
 8008f04:	f007 f848 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 8008f08:	4604      	mov	r4, r0
 8008f0a:	e7bd      	b.n	8008e88 <rcl_init_options_init+0x18>
 8008f0c:	240b      	movs	r4, #11
 8008f0e:	e7bb      	b.n	8008e88 <rcl_init_options_init+0x18>
 8008f10:	240a      	movs	r4, #10
 8008f12:	e7b9      	b.n	8008e88 <rcl_init_options_init+0x18>

08008f14 <rcl_init_options_fini>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	b1c0      	cbz	r0, 8008f4c <rcl_init_options_fini+0x38>
 8008f1a:	6804      	ldr	r4, [r0, #0]
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	b1ac      	cbz	r4, 8008f4c <rcl_init_options_fini+0x38>
 8008f20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f22:	ad01      	add	r5, sp, #4
 8008f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f26:	6823      	ldr	r3, [r4, #0]
 8008f28:	a801      	add	r0, sp, #4
 8008f2a:	602b      	str	r3, [r5, #0]
 8008f2c:	f001 f804 	bl	8009f38 <rcutils_allocator_is_valid>
 8008f30:	b160      	cbz	r0, 8008f4c <rcl_init_options_fini+0x38>
 8008f32:	6830      	ldr	r0, [r6, #0]
 8008f34:	3018      	adds	r0, #24
 8008f36:	f001 fbe7 	bl	800a708 <rmw_init_options_fini>
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	b950      	cbnz	r0, 8008f54 <rcl_init_options_fini+0x40>
 8008f3e:	6830      	ldr	r0, [r6, #0]
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	9905      	ldr	r1, [sp, #20]
 8008f44:	4798      	blx	r3
 8008f46:	4620      	mov	r0, r4
 8008f48:	b006      	add	sp, #24
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	240b      	movs	r4, #11
 8008f4e:	4620      	mov	r0, r4
 8008f50:	b006      	add	sp, #24
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f007 f820 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 8008f58:	4604      	mov	r4, r0
 8008f5a:	e7f8      	b.n	8008f4e <rcl_init_options_fini+0x3a>

08008f5c <rcl_init_options_copy>:
 8008f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f60:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d070      	beq.n	800904a <rcl_init_options_copy+0xee>
 8008f68:	6806      	ldr	r6, [r0, #0]
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	2e00      	cmp	r6, #0
 8008f6e:	d06c      	beq.n	800904a <rcl_init_options_copy+0xee>
 8008f70:	460c      	mov	r4, r1
 8008f72:	2900      	cmp	r1, #0
 8008f74:	d069      	beq.n	800904a <rcl_init_options_copy+0xee>
 8008f76:	680b      	ldr	r3, [r1, #0]
 8008f78:	b12b      	cbz	r3, 8008f86 <rcl_init_options_copy+0x2a>
 8008f7a:	2664      	movs	r6, #100	; 0x64
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 8008f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f86:	af10      	add	r7, sp, #64	; 0x40
 8008f88:	46bc      	mov	ip, r7
 8008f8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008f8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f90:	6833      	ldr	r3, [r6, #0]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f8cc 3000 	str.w	r3, [ip]
 8008f98:	f000 ffce 	bl	8009f38 <rcutils_allocator_is_valid>
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	d054      	beq.n	800904a <rcl_init_options_copy+0xee>
 8008fa0:	2050      	movs	r0, #80	; 0x50
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	6939      	ldr	r1, [r7, #16]
 8008fa6:	4798      	blx	r3
 8008fa8:	4606      	mov	r6, r0
 8008faa:	6020      	str	r0, [r4, #0]
 8008fac:	2800      	cmp	r0, #0
 8008fae:	f000 8089 	beq.w	80090c4 <rcl_init_options_copy+0x168>
 8008fb2:	4684      	mov	ip, r0
 8008fb4:	46be      	mov	lr, r7
 8008fb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008fba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008fbe:	f8de 3000 	ldr.w	r3, [lr]
 8008fc2:	a802      	add	r0, sp, #8
 8008fc4:	f8cc 3000 	str.w	r3, [ip]
 8008fc8:	f001 fa38 	bl	800a43c <rmw_get_zero_initialized_init_options>
 8008fcc:	3618      	adds	r6, #24
 8008fce:	f10d 0c08 	add.w	ip, sp, #8
 8008fd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008fd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008fde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008fe2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008fe4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8008fe8:	e886 0003 	stmia.w	r6, {r0, r1}
 8008fec:	6826      	ldr	r6, [r4, #0]
 8008fee:	ab13      	add	r3, sp, #76	; 0x4c
 8008ff0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ff4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008ff8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8008ffc:	f106 0018 	add.w	r0, r6, #24
 8009000:	f001 fae8 	bl	800a5d4 <rmw_init_options_init>
 8009004:	4606      	mov	r6, r0
 8009006:	bb30      	cbnz	r0, 8009056 <rcl_init_options_copy+0xfa>
 8009008:	f8d4 e000 	ldr.w	lr, [r4]
 800900c:	f8d5 c000 	ldr.w	ip, [r5]
 8009010:	4676      	mov	r6, lr
 8009012:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009016:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009018:	f8dc 3000 	ldr.w	r3, [ip]
 800901c:	f10e 0018 	add.w	r0, lr, #24
 8009020:	6033      	str	r3, [r6, #0]
 8009022:	f001 fb71 	bl	800a708 <rmw_init_options_fini>
 8009026:	4680      	mov	r8, r0
 8009028:	b300      	cbz	r0, 800906c <rcl_init_options_copy+0x110>
 800902a:	4638      	mov	r0, r7
 800902c:	f001 f84c 	bl	800a0c8 <rcutils_get_error_string>
 8009030:	f001 f872 	bl	800a118 <rcutils_reset_error>
 8009034:	4620      	mov	r0, r4
 8009036:	f7ff ff6d 	bl	8008f14 <rcl_init_options_fini>
 800903a:	4606      	mov	r6, r0
 800903c:	2800      	cmp	r0, #0
 800903e:	d19d      	bne.n	8008f7c <rcl_init_options_copy+0x20>
 8009040:	4640      	mov	r0, r8
 8009042:	f006 ffa9 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 8009046:	4606      	mov	r6, r0
 8009048:	e798      	b.n	8008f7c <rcl_init_options_copy+0x20>
 800904a:	260b      	movs	r6, #11
 800904c:	4630      	mov	r0, r6
 800904e:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 8009052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6939      	ldr	r1, [r7, #16]
 800905a:	6820      	ldr	r0, [r4, #0]
 800905c:	4798      	blx	r3
 800905e:	4630      	mov	r0, r6
 8009060:	f006 ff9a 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 8009064:	4606      	mov	r6, r0
 8009066:	2800      	cmp	r0, #0
 8009068:	d0ce      	beq.n	8009008 <rcl_init_options_copy+0xac>
 800906a:	e787      	b.n	8008f7c <rcl_init_options_copy+0x20>
 800906c:	f8d4 8000 	ldr.w	r8, [r4]
 8009070:	a802      	add	r0, sp, #8
 8009072:	f001 f9e3 	bl	800a43c <rmw_get_zero_initialized_init_options>
 8009076:	ae02      	add	r6, sp, #8
 8009078:	f108 0c18 	add.w	ip, r8, #24
 800907c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800907e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009082:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009088:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800908a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800908e:	682a      	ldr	r2, [r5, #0]
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009096:	e88c 0003 	stmia.w	ip, {r0, r1}
 800909a:	f102 0018 	add.w	r0, r2, #24
 800909e:	f103 0118 	add.w	r1, r3, #24
 80090a2:	f001 faef 	bl	800a684 <rmw_init_options_copy>
 80090a6:	4606      	mov	r6, r0
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f43f af67 	beq.w	8008f7c <rcl_init_options_copy+0x20>
 80090ae:	4638      	mov	r0, r7
 80090b0:	f001 f80a 	bl	800a0c8 <rcutils_get_error_string>
 80090b4:	f001 f830 	bl	800a118 <rcutils_reset_error>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f7ff ff2b 	bl	8008f14 <rcl_init_options_fini>
 80090be:	b118      	cbz	r0, 80090c8 <rcl_init_options_copy+0x16c>
 80090c0:	4606      	mov	r6, r0
 80090c2:	e75b      	b.n	8008f7c <rcl_init_options_copy+0x20>
 80090c4:	260a      	movs	r6, #10
 80090c6:	e759      	b.n	8008f7c <rcl_init_options_copy+0x20>
 80090c8:	4630      	mov	r0, r6
 80090ca:	f006 ff65 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 80090ce:	4606      	mov	r6, r0
 80090d0:	e754      	b.n	8008f7c <rcl_init_options_copy+0x20>
 80090d2:	bf00      	nop

080090d4 <rcl_get_zero_initialized_publisher>:
 80090d4:	4b01      	ldr	r3, [pc, #4]	; (80090dc <rcl_get_zero_initialized_publisher+0x8>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	08016220 	.word	0x08016220

080090e0 <rcl_publisher_init>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	b08f      	sub	sp, #60	; 0x3c
 80090e6:	9f18      	ldr	r7, [sp, #96]	; 0x60
 80090e8:	2f00      	cmp	r7, #0
 80090ea:	d03a      	beq.n	8009162 <rcl_publisher_init+0x82>
 80090ec:	f107 0950 	add.w	r9, r7, #80	; 0x50
 80090f0:	4604      	mov	r4, r0
 80090f2:	4648      	mov	r0, r9
 80090f4:	4688      	mov	r8, r1
 80090f6:	4616      	mov	r6, r2
 80090f8:	461d      	mov	r5, r3
 80090fa:	f000 ff1d 	bl	8009f38 <rcutils_allocator_is_valid>
 80090fe:	b380      	cbz	r0, 8009162 <rcl_publisher_init+0x82>
 8009100:	b37c      	cbz	r4, 8009162 <rcl_publisher_init+0x82>
 8009102:	f8d4 a000 	ldr.w	sl, [r4]
 8009106:	f1ba 0f00 	cmp.w	sl, #0
 800910a:	d004      	beq.n	8009116 <rcl_publisher_init+0x36>
 800910c:	2564      	movs	r5, #100	; 0x64
 800910e:	4628      	mov	r0, r5
 8009110:	b00f      	add	sp, #60	; 0x3c
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	4640      	mov	r0, r8
 8009118:	f007 fbf2 	bl	8010900 <rcl_node_is_valid>
 800911c:	b330      	cbz	r0, 800916c <rcl_publisher_init+0x8c>
 800911e:	b306      	cbz	r6, 8009162 <rcl_publisher_init+0x82>
 8009120:	b1fd      	cbz	r5, 8009162 <rcl_publisher_init+0x82>
 8009122:	46ce      	mov	lr, r9
 8009124:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 8009128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800912c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009130:	f8de 3000 	ldr.w	r3, [lr]
 8009134:	f8cc 3000 	str.w	r3, [ip]
 8009138:	f001 f80c 	bl	800a154 <rcutils_get_zero_initialized_string_map>
 800913c:	4684      	mov	ip, r0
 800913e:	ab0e      	add	r3, sp, #56	; 0x38
 8009140:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8009144:	f8cd c018 	str.w	ip, [sp, #24]
 8009148:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800914c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800914e:	4651      	mov	r1, sl
 8009150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009152:	a806      	add	r0, sp, #24
 8009154:	f001 f874 	bl	800a240 <rcutils_string_map_init>
 8009158:	b150      	cbz	r0, 8009170 <rcl_publisher_init+0x90>
 800915a:	280a      	cmp	r0, #10
 800915c:	d013      	beq.n	8009186 <rcl_publisher_init+0xa6>
 800915e:	2501      	movs	r5, #1
 8009160:	e7d5      	b.n	800910e <rcl_publisher_init+0x2e>
 8009162:	250b      	movs	r5, #11
 8009164:	4628      	mov	r0, r5
 8009166:	b00f      	add	sp, #60	; 0x3c
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	25c8      	movs	r5, #200	; 0xc8
 800916e:	e7ce      	b.n	800910e <rcl_publisher_init+0x2e>
 8009170:	a806      	add	r0, sp, #24
 8009172:	f007 f913 	bl	801039c <rcl_get_default_topic_name_substitutions>
 8009176:	4682      	mov	sl, r0
 8009178:	b138      	cbz	r0, 800918a <rcl_publisher_init+0xaa>
 800917a:	a806      	add	r0, sp, #24
 800917c:	f001 f89e 	bl	800a2bc <rcutils_string_map_fini>
 8009180:	f1ba 0f0a 	cmp.w	sl, #10
 8009184:	d1eb      	bne.n	800915e <rcl_publisher_init+0x7e>
 8009186:	250a      	movs	r5, #10
 8009188:	e7c1      	b.n	800910e <rcl_publisher_init+0x2e>
 800918a:	4640      	mov	r0, r8
 800918c:	f8cd a01c 	str.w	sl, [sp, #28]
 8009190:	f007 fbc0 	bl	8010914 <rcl_node_get_name>
 8009194:	4682      	mov	sl, r0
 8009196:	4640      	mov	r0, r8
 8009198:	f007 fbc4 	bl	8010924 <rcl_node_get_namespace>
 800919c:	46ec      	mov	ip, sp
 800919e:	4686      	mov	lr, r0
 80091a0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 80091a4:	f10d 0b1c 	add.w	fp, sp, #28
 80091a8:	f8cd b014 	str.w	fp, [sp, #20]
 80091ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80091b0:	f8d9 3000 	ldr.w	r3, [r9]
 80091b4:	4628      	mov	r0, r5
 80091b6:	f8cc 3000 	str.w	r3, [ip]
 80091ba:	4651      	mov	r1, sl
 80091bc:	4672      	mov	r2, lr
 80091be:	ab06      	add	r3, sp, #24
 80091c0:	f006 ff88 	bl	80100d4 <rcl_expand_topic_name>
 80091c4:	4605      	mov	r5, r0
 80091c6:	a806      	add	r0, sp, #24
 80091c8:	f001 f878 	bl	800a2bc <rcutils_string_map_fini>
 80091cc:	b920      	cbnz	r0, 80091d8 <rcl_publisher_init+0xf8>
 80091ce:	b15d      	cbz	r5, 80091e8 <rcl_publisher_init+0x108>
 80091d0:	2d67      	cmp	r5, #103	; 0x67
 80091d2:	d002      	beq.n	80091da <rcl_publisher_init+0xfa>
 80091d4:	2d69      	cmp	r5, #105	; 0x69
 80091d6:	d05f      	beq.n	8009298 <rcl_publisher_init+0x1b8>
 80091d8:	2501      	movs	r5, #1
 80091da:	9807      	ldr	r0, [sp, #28]
 80091dc:	2800      	cmp	r0, #0
 80091de:	d096      	beq.n	800910e <rcl_publisher_init+0x2e>
 80091e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80091e4:	4798      	blx	r3
 80091e6:	e792      	b.n	800910e <rcl_publisher_init+0x2e>
 80091e8:	4640      	mov	r0, r8
 80091ea:	f007 fba3 	bl	8010934 <rcl_node_get_options>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0f2      	beq.n	80091d8 <rcl_publisher_init+0xf8>
 80091f2:	9807      	ldr	r0, [sp, #28]
 80091f4:	f7f7 f826 	bl	8000244 <strlen>
 80091f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80091fc:	3001      	adds	r0, #1
 80091fe:	4798      	blx	r3
 8009200:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009204:	4681      	mov	r9, r0
 8009206:	4650      	mov	r0, sl
 8009208:	f7f7 f81c 	bl	8000244 <strlen>
 800920c:	4651      	mov	r1, sl
 800920e:	1c42      	adds	r2, r0, #1
 8009210:	4648      	mov	r0, r9
 8009212:	f00a fe07 	bl	8013e24 <memcpy>
 8009216:	462a      	mov	r2, r5
 8009218:	4648      	mov	r0, r9
 800921a:	a908      	add	r1, sp, #32
 800921c:	f001 f93a 	bl	800a494 <rmw_validate_full_topic_name>
 8009220:	2800      	cmp	r0, #0
 8009222:	d137      	bne.n	8009294 <rcl_publisher_init+0x1b4>
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d138      	bne.n	800929c <rcl_publisher_init+0x1bc>
 800922a:	20c0      	movs	r0, #192	; 0xc0
 800922c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800922e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009230:	4798      	blx	r3
 8009232:	6020      	str	r0, [r4, #0]
 8009234:	b3a0      	cbz	r0, 80092a0 <rcl_publisher_init+0x1c0>
 8009236:	4640      	mov	r0, r8
 8009238:	f007 fb84 	bl	8010944 <rcl_node_get_rmw_handle>
 800923c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	4631      	mov	r1, r6
 8009244:	463b      	mov	r3, r7
 8009246:	464a      	mov	r2, r9
 8009248:	6825      	ldr	r5, [r4, #0]
 800924a:	f001 fd6b 	bl	800ad24 <rmw_create_publisher>
 800924e:	6821      	ldr	r1, [r4, #0]
 8009250:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 8009254:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8009258:	b388      	cbz	r0, 80092be <rcl_publisher_init+0x1de>
 800925a:	3168      	adds	r1, #104	; 0x68
 800925c:	f001 fe3e 	bl	800aedc <rmw_publisher_get_actual_qos>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	4605      	mov	r5, r0
 8009264:	b9f0      	cbnz	r0, 80092a4 <rcl_publisher_init+0x1c4>
 8009266:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800926a:	4618      	mov	r0, r3
 800926c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8009270:	4639      	mov	r1, r7
 8009272:	2268      	movs	r2, #104	; 0x68
 8009274:	f00a fdd6 	bl	8013e24 <memcpy>
 8009278:	f8d8 2000 	ldr.w	r2, [r8]
 800927c:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 8009280:	9807      	ldr	r0, [sp, #28]
 8009282:	b110      	cbz	r0, 800928a <rcl_publisher_init+0x1aa>
 8009284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009286:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009288:	4798      	blx	r3
 800928a:	4648      	mov	r0, r9
 800928c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800928e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009290:	4798      	blx	r3
 8009292:	e73c      	b.n	800910e <rcl_publisher_init+0x2e>
 8009294:	2501      	movs	r5, #1
 8009296:	e7f3      	b.n	8009280 <rcl_publisher_init+0x1a0>
 8009298:	2567      	movs	r5, #103	; 0x67
 800929a:	e79e      	b.n	80091da <rcl_publisher_init+0xfa>
 800929c:	2567      	movs	r5, #103	; 0x67
 800929e:	e7ef      	b.n	8009280 <rcl_publisher_init+0x1a0>
 80092a0:	250a      	movs	r5, #10
 80092a2:	e7ed      	b.n	8009280 <rcl_publisher_init+0x1a0>
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d0f5      	beq.n	8009294 <rcl_publisher_init+0x1b4>
 80092a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80092ac:	b13b      	cbz	r3, 80092be <rcl_publisher_init+0x1de>
 80092ae:	4640      	mov	r0, r8
 80092b0:	f007 fb48 	bl	8010944 <rcl_node_get_rmw_handle>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 80092ba:	f001 fe11 	bl	800aee0 <rmw_destroy_publisher>
 80092be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80092c2:	6820      	ldr	r0, [r4, #0]
 80092c4:	4798      	blx	r3
 80092c6:	2300      	movs	r3, #0
 80092c8:	2501      	movs	r5, #1
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	e7d8      	b.n	8009280 <rcl_publisher_init+0x1a0>
 80092ce:	bf00      	nop

080092d0 <rcl_publisher_get_default_options>:
 80092d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d2:	b087      	sub	sp, #28
 80092d4:	466c      	mov	r4, sp
 80092d6:	4f0d      	ldr	r7, [pc, #52]	; (800930c <rcl_publisher_get_default_options+0x3c>)
 80092d8:	4606      	mov	r6, r0
 80092da:	2250      	movs	r2, #80	; 0x50
 80092dc:	490c      	ldr	r1, [pc, #48]	; (8009310 <rcl_publisher_get_default_options+0x40>)
 80092de:	4638      	mov	r0, r7
 80092e0:	f00a fda0 	bl	8013e24 <memcpy>
 80092e4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80092e8:	4668      	mov	r0, sp
 80092ea:	f000 fe17 	bl	8009f1c <rcutils_get_default_allocator>
 80092ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	f001 f8b1 	bl	800a45c <rmw_get_default_publisher_options>
 80092fa:	4639      	mov	r1, r7
 80092fc:	6678      	str	r0, [r7, #100]	; 0x64
 80092fe:	2268      	movs	r2, #104	; 0x68
 8009300:	4630      	mov	r0, r6
 8009302:	f00a fd8f 	bl	8013e24 <memcpy>
 8009306:	4630      	mov	r0, r6
 8009308:	b007      	add	sp, #28
 800930a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800930c:	20006450 	.word	0x20006450
 8009310:	08016228 	.word	0x08016228

08009314 <rcl_publish>:
 8009314:	b1f8      	cbz	r0, 8009356 <rcl_publish+0x42>
 8009316:	6803      	ldr	r3, [r0, #0]
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	4604      	mov	r4, r0
 800931c:	b1b3      	cbz	r3, 800934c <rcl_publish+0x38>
 800931e:	4616      	mov	r6, r2
 8009320:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8009324:	b192      	cbz	r2, 800934c <rcl_publish+0x38>
 8009326:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800932a:	460d      	mov	r5, r1
 800932c:	f006 fe58 	bl	800ffe0 <rcl_context_is_valid>
 8009330:	b160      	cbz	r0, 800934c <rcl_publish+0x38>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8009338:	b140      	cbz	r0, 800934c <rcl_publish+0x38>
 800933a:	b155      	cbz	r5, 8009352 <rcl_publish+0x3e>
 800933c:	4632      	mov	r2, r6
 800933e:	4629      	mov	r1, r5
 8009340:	f001 fc90 	bl	800ac64 <rmw_publish>
 8009344:	3800      	subs	r0, #0
 8009346:	bf18      	it	ne
 8009348:	2001      	movne	r0, #1
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009350:	bd70      	pop	{r4, r5, r6, pc}
 8009352:	200b      	movs	r0, #11
 8009354:	bd70      	pop	{r4, r5, r6, pc}
 8009356:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800935a:	4770      	bx	lr

0800935c <rcl_get_zero_initialized_subscription>:
 800935c:	4b01      	ldr	r3, [pc, #4]	; (8009364 <rcl_get_zero_initialized_subscription+0x8>)
 800935e:	6818      	ldr	r0, [r3, #0]
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	08016278 	.word	0x08016278

08009368 <rcl_subscription_init>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	b08f      	sub	sp, #60	; 0x3c
 800936e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8009370:	b1d7      	cbz	r7, 80093a8 <rcl_subscription_init+0x40>
 8009372:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8009376:	4604      	mov	r4, r0
 8009378:	4648      	mov	r0, r9
 800937a:	4688      	mov	r8, r1
 800937c:	4616      	mov	r6, r2
 800937e:	461d      	mov	r5, r3
 8009380:	f000 fdda 	bl	8009f38 <rcutils_allocator_is_valid>
 8009384:	b180      	cbz	r0, 80093a8 <rcl_subscription_init+0x40>
 8009386:	b17c      	cbz	r4, 80093a8 <rcl_subscription_init+0x40>
 8009388:	4640      	mov	r0, r8
 800938a:	f007 fab9 	bl	8010900 <rcl_node_is_valid>
 800938e:	b380      	cbz	r0, 80093f2 <rcl_subscription_init+0x8a>
 8009390:	b156      	cbz	r6, 80093a8 <rcl_subscription_init+0x40>
 8009392:	b14d      	cbz	r5, 80093a8 <rcl_subscription_init+0x40>
 8009394:	f8d4 a000 	ldr.w	sl, [r4]
 8009398:	f1ba 0f00 	cmp.w	sl, #0
 800939c:	d009      	beq.n	80093b2 <rcl_subscription_init+0x4a>
 800939e:	2564      	movs	r5, #100	; 0x64
 80093a0:	4628      	mov	r0, r5
 80093a2:	b00f      	add	sp, #60	; 0x3c
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	250b      	movs	r5, #11
 80093aa:	4628      	mov	r0, r5
 80093ac:	b00f      	add	sp, #60	; 0x3c
 80093ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b2:	46ce      	mov	lr, r9
 80093b4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 80093b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80093bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80093c0:	f8de 3000 	ldr.w	r3, [lr]
 80093c4:	f8cc 3000 	str.w	r3, [ip]
 80093c8:	f000 fec4 	bl	800a154 <rcutils_get_zero_initialized_string_map>
 80093cc:	4684      	mov	ip, r0
 80093ce:	ab0e      	add	r3, sp, #56	; 0x38
 80093d0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80093d4:	f8cd c018 	str.w	ip, [sp, #24]
 80093d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80093dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093de:	4651      	mov	r1, sl
 80093e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e2:	a806      	add	r0, sp, #24
 80093e4:	f000 ff2c 	bl	800a240 <rcutils_string_map_init>
 80093e8:	b140      	cbz	r0, 80093fc <rcl_subscription_init+0x94>
 80093ea:	280a      	cmp	r0, #10
 80093ec:	d011      	beq.n	8009412 <rcl_subscription_init+0xaa>
 80093ee:	2501      	movs	r5, #1
 80093f0:	e7db      	b.n	80093aa <rcl_subscription_init+0x42>
 80093f2:	25c8      	movs	r5, #200	; 0xc8
 80093f4:	4628      	mov	r0, r5
 80093f6:	b00f      	add	sp, #60	; 0x3c
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	a806      	add	r0, sp, #24
 80093fe:	f006 ffcd 	bl	801039c <rcl_get_default_topic_name_substitutions>
 8009402:	4682      	mov	sl, r0
 8009404:	b138      	cbz	r0, 8009416 <rcl_subscription_init+0xae>
 8009406:	a806      	add	r0, sp, #24
 8009408:	f000 ff58 	bl	800a2bc <rcutils_string_map_fini>
 800940c:	f1ba 0f0a 	cmp.w	sl, #10
 8009410:	d1ed      	bne.n	80093ee <rcl_subscription_init+0x86>
 8009412:	250a      	movs	r5, #10
 8009414:	e7c9      	b.n	80093aa <rcl_subscription_init+0x42>
 8009416:	4640      	mov	r0, r8
 8009418:	f8cd a01c 	str.w	sl, [sp, #28]
 800941c:	f007 fa7a 	bl	8010914 <rcl_node_get_name>
 8009420:	4682      	mov	sl, r0
 8009422:	4640      	mov	r0, r8
 8009424:	f007 fa7e 	bl	8010924 <rcl_node_get_namespace>
 8009428:	46ec      	mov	ip, sp
 800942a:	4686      	mov	lr, r0
 800942c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8009430:	f10d 0b1c 	add.w	fp, sp, #28
 8009434:	f8cd b014 	str.w	fp, [sp, #20]
 8009438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800943c:	f8d9 3000 	ldr.w	r3, [r9]
 8009440:	4628      	mov	r0, r5
 8009442:	f8cc 3000 	str.w	r3, [ip]
 8009446:	4651      	mov	r1, sl
 8009448:	4672      	mov	r2, lr
 800944a:	ab06      	add	r3, sp, #24
 800944c:	f006 fe42 	bl	80100d4 <rcl_expand_topic_name>
 8009450:	4605      	mov	r5, r0
 8009452:	a806      	add	r0, sp, #24
 8009454:	f000 ff32 	bl	800a2bc <rcutils_string_map_fini>
 8009458:	b920      	cbnz	r0, 8009464 <rcl_subscription_init+0xfc>
 800945a:	b15d      	cbz	r5, 8009474 <rcl_subscription_init+0x10c>
 800945c:	2d67      	cmp	r5, #103	; 0x67
 800945e:	d002      	beq.n	8009466 <rcl_subscription_init+0xfe>
 8009460:	2d69      	cmp	r5, #105	; 0x69
 8009462:	d05a      	beq.n	800951a <rcl_subscription_init+0x1b2>
 8009464:	2501      	movs	r5, #1
 8009466:	9807      	ldr	r0, [sp, #28]
 8009468:	2800      	cmp	r0, #0
 800946a:	d09e      	beq.n	80093aa <rcl_subscription_init+0x42>
 800946c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800946e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009470:	4798      	blx	r3
 8009472:	e79a      	b.n	80093aa <rcl_subscription_init+0x42>
 8009474:	4640      	mov	r0, r8
 8009476:	f007 fa5d 	bl	8010934 <rcl_node_get_options>
 800947a:	2800      	cmp	r0, #0
 800947c:	d0f2      	beq.n	8009464 <rcl_subscription_init+0xfc>
 800947e:	9807      	ldr	r0, [sp, #28]
 8009480:	f7f6 fee0 	bl	8000244 <strlen>
 8009484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009486:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009488:	3001      	adds	r0, #1
 800948a:	4798      	blx	r3
 800948c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009490:	4681      	mov	r9, r0
 8009492:	4650      	mov	r0, sl
 8009494:	f7f6 fed6 	bl	8000244 <strlen>
 8009498:	4651      	mov	r1, sl
 800949a:	1c42      	adds	r2, r0, #1
 800949c:	4648      	mov	r0, r9
 800949e:	f00a fcc1 	bl	8013e24 <memcpy>
 80094a2:	462a      	mov	r2, r5
 80094a4:	4648      	mov	r0, r9
 80094a6:	a908      	add	r1, sp, #32
 80094a8:	f000 fff4 	bl	800a494 <rmw_validate_full_topic_name>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d132      	bne.n	8009516 <rcl_subscription_init+0x1ae>
 80094b0:	9b08      	ldr	r3, [sp, #32]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d133      	bne.n	800951e <rcl_subscription_init+0x1b6>
 80094b6:	20c8      	movs	r0, #200	; 0xc8
 80094b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80094bc:	4798      	blx	r3
 80094be:	6020      	str	r0, [r4, #0]
 80094c0:	b378      	cbz	r0, 8009522 <rcl_subscription_init+0x1ba>
 80094c2:	4640      	mov	r0, r8
 80094c4:	f007 fa3e 	bl	8010944 <rcl_node_get_rmw_handle>
 80094c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	4631      	mov	r1, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	464a      	mov	r2, r9
 80094d4:	6825      	ldr	r5, [r4, #0]
 80094d6:	f001 fd97 	bl	800b008 <rmw_create_subscription>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 80094e0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 80094e4:	b368      	cbz	r0, 8009542 <rcl_subscription_init+0x1da>
 80094e6:	3170      	adds	r1, #112	; 0x70
 80094e8:	f001 fe72 	bl	800b1d0 <rmw_subscription_get_actual_qos>
 80094ec:	4605      	mov	r5, r0
 80094ee:	b9d0      	cbnz	r0, 8009526 <rcl_subscription_init+0x1be>
 80094f0:	6820      	ldr	r0, [r4, #0]
 80094f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80094f6:	2270      	movs	r2, #112	; 0x70
 80094f8:	4639      	mov	r1, r7
 80094fa:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 80094fe:	f00a fc91 	bl	8013e24 <memcpy>
 8009502:	9807      	ldr	r0, [sp, #28]
 8009504:	b110      	cbz	r0, 800950c <rcl_subscription_init+0x1a4>
 8009506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009508:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800950a:	4798      	blx	r3
 800950c:	4648      	mov	r0, r9
 800950e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009510:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009512:	4798      	blx	r3
 8009514:	e749      	b.n	80093aa <rcl_subscription_init+0x42>
 8009516:	2501      	movs	r5, #1
 8009518:	e7f3      	b.n	8009502 <rcl_subscription_init+0x19a>
 800951a:	2567      	movs	r5, #103	; 0x67
 800951c:	e7a3      	b.n	8009466 <rcl_subscription_init+0xfe>
 800951e:	2567      	movs	r5, #103	; 0x67
 8009520:	e7ef      	b.n	8009502 <rcl_subscription_init+0x19a>
 8009522:	250a      	movs	r5, #10
 8009524:	e7ed      	b.n	8009502 <rcl_subscription_init+0x19a>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0f4      	beq.n	8009516 <rcl_subscription_init+0x1ae>
 800952c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009530:	b13b      	cbz	r3, 8009542 <rcl_subscription_init+0x1da>
 8009532:	4640      	mov	r0, r8
 8009534:	f007 fa06 	bl	8010944 <rcl_node_get_rmw_handle>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800953e:	f001 fe49 	bl	800b1d4 <rmw_destroy_subscription>
 8009542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009544:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	4798      	blx	r3
 800954a:	2300      	movs	r3, #0
 800954c:	2501      	movs	r5, #1
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	e7d7      	b.n	8009502 <rcl_subscription_init+0x19a>
 8009552:	bf00      	nop

08009554 <rcl_subscription_get_default_options>:
 8009554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009556:	4f12      	ldr	r7, [pc, #72]	; (80095a0 <rcl_subscription_get_default_options+0x4c>)
 8009558:	b089      	sub	sp, #36	; 0x24
 800955a:	4606      	mov	r6, r0
 800955c:	2250      	movs	r2, #80	; 0x50
 800955e:	4911      	ldr	r1, [pc, #68]	; (80095a4 <rcl_subscription_get_default_options+0x50>)
 8009560:	4638      	mov	r0, r7
 8009562:	f00a fc5f 	bl	8013e24 <memcpy>
 8009566:	ac02      	add	r4, sp, #8
 8009568:	a802      	add	r0, sp, #8
 800956a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800956e:	f000 fcd5 	bl	8009f1c <rcutils_get_default_allocator>
 8009572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	466c      	mov	r4, sp
 800957a:	4620      	mov	r0, r4
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	f000 ff73 	bl	800a468 <rmw_get_default_subscription_options>
 8009582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009586:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800958a:	e883 0003 	stmia.w	r3, {r0, r1}
 800958e:	2270      	movs	r2, #112	; 0x70
 8009590:	4639      	mov	r1, r7
 8009592:	4630      	mov	r0, r6
 8009594:	f00a fc46 	bl	8013e24 <memcpy>
 8009598:	4630      	mov	r0, r6
 800959a:	b009      	add	sp, #36	; 0x24
 800959c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959e:	bf00      	nop
 80095a0:	200064b8 	.word	0x200064b8
 80095a4:	08016280 	.word	0x08016280

080095a8 <rcl_take>:
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d040      	beq.n	800962e <rcl_take+0x86>
 80095ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095b0:	4606      	mov	r6, r0
 80095b2:	6800      	ldr	r0, [r0, #0]
 80095b4:	b09d      	sub	sp, #116	; 0x74
 80095b6:	b390      	cbz	r0, 800961e <rcl_take+0x76>
 80095b8:	4699      	mov	r9, r3
 80095ba:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 80095be:	b373      	cbz	r3, 800961e <rcl_take+0x76>
 80095c0:	4688      	mov	r8, r1
 80095c2:	b391      	cbz	r1, 800962a <rcl_take+0x82>
 80095c4:	4617      	mov	r7, r2
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	d035      	beq.n	8009636 <rcl_take+0x8e>
 80095ca:	463d      	mov	r5, r7
 80095cc:	a802      	add	r0, sp, #8
 80095ce:	f000 ff4f 	bl	800a470 <rmw_get_zero_initialized_message_info>
 80095d2:	f04f 0c00 	mov.w	ip, #0
 80095d6:	ac02      	add	r4, sp, #8
 80095d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095e0:	6836      	ldr	r6, [r6, #0]
 80095e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80095e6:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 80095ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80095ee:	463b      	mov	r3, r7
 80095f0:	4620      	mov	r0, r4
 80095f2:	4641      	mov	r1, r8
 80095f4:	f8cd 9000 	str.w	r9, [sp]
 80095f8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 80095fc:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
 8009600:	f001 fe46 	bl	800b290 <rmw_take_with_info>
 8009604:	4603      	mov	r3, r0
 8009606:	b9c0      	cbnz	r0, 800963a <rcl_take+0x92>
 8009608:	f240 1291 	movw	r2, #401	; 0x191
 800960c:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8009610:	2900      	cmp	r1, #0
 8009612:	bf08      	it	eq
 8009614:	4613      	moveq	r3, r2
 8009616:	4618      	mov	r0, r3
 8009618:	b01d      	add	sp, #116	; 0x74
 800961a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800961e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009622:	4618      	mov	r0, r3
 8009624:	b01d      	add	sp, #116	; 0x74
 8009626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800962a:	230b      	movs	r3, #11
 800962c:	e7f3      	b.n	8009616 <rcl_take+0x6e>
 800962e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009632:	4618      	mov	r0, r3
 8009634:	4770      	bx	lr
 8009636:	af10      	add	r7, sp, #64	; 0x40
 8009638:	e7c7      	b.n	80095ca <rcl_take+0x22>
 800963a:	f006 fcad 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 800963e:	4603      	mov	r3, r0
 8009640:	e7e9      	b.n	8009616 <rcl_take+0x6e>
 8009642:	bf00      	nop

08009644 <rcl_subscription_get_rmw_handle>:
 8009644:	b118      	cbz	r0, 800964e <rcl_subscription_get_rmw_handle+0xa>
 8009646:	6800      	ldr	r0, [r0, #0]
 8009648:	b108      	cbz	r0, 800964e <rcl_subscription_get_rmw_handle+0xa>
 800964a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800964e:	4770      	bx	lr

08009650 <_rclc_check_for_new_data>:
 8009650:	4603      	mov	r3, r0
 8009652:	b1e0      	cbz	r0, 800968e <_rclc_check_for_new_data+0x3e>
 8009654:	7802      	ldrb	r2, [r0, #0]
 8009656:	2a08      	cmp	r2, #8
 8009658:	d81b      	bhi.n	8009692 <_rclc_check_for_new_data+0x42>
 800965a:	e8df f002 	tbb	[pc, r2]
 800965e:	1010      	.short	0x1010
 8009660:	05121216 	.word	0x05121216
 8009664:	0505      	.short	0x0505
 8009666:	14          	.byte	0x14
 8009667:	00          	.byte	0x00
 8009668:	6a0a      	ldr	r2, [r1, #32]
 800966a:	2000      	movs	r0, #0
 800966c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800966e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009672:	1a12      	subs	r2, r2, r0
 8009674:	bf18      	it	ne
 8009676:	2201      	movne	r2, #1
 8009678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800967c:	4770      	bx	lr
 800967e:	680a      	ldr	r2, [r1, #0]
 8009680:	e7f3      	b.n	800966a <_rclc_check_for_new_data+0x1a>
 8009682:	698a      	ldr	r2, [r1, #24]
 8009684:	e7f1      	b.n	800966a <_rclc_check_for_new_data+0x1a>
 8009686:	688a      	ldr	r2, [r1, #8]
 8009688:	e7ef      	b.n	800966a <_rclc_check_for_new_data+0x1a>
 800968a:	690a      	ldr	r2, [r1, #16]
 800968c:	e7ed      	b.n	800966a <_rclc_check_for_new_data+0x1a>
 800968e:	200b      	movs	r0, #11
 8009690:	4770      	bx	lr
 8009692:	2200      	movs	r2, #0
 8009694:	2001      	movs	r0, #1
 8009696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800969a:	4770      	bx	lr

0800969c <_rclc_take_new_data>:
 800969c:	2800      	cmp	r0, #0
 800969e:	d049      	beq.n	8009734 <_rclc_take_new_data+0x98>
 80096a0:	b510      	push	{r4, lr}
 80096a2:	7803      	ldrb	r3, [r0, #0]
 80096a4:	4604      	mov	r4, r0
 80096a6:	b08e      	sub	sp, #56	; 0x38
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d84a      	bhi.n	8009742 <_rclc_take_new_data+0xa6>
 80096ac:	e8df f003 	tbb	[pc, r3]
 80096b0:	2b121515 	.word	0x2b121515
 80096b4:	0505052b 	.word	0x0505052b
 80096b8:	12          	.byte	0x12
 80096b9:	00          	.byte	0x00
 80096ba:	6a0b      	ldr	r3, [r1, #32]
 80096bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80096be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c2:	b13b      	cbz	r3, 80096d4 <_rclc_take_new_data+0x38>
 80096c4:	6882      	ldr	r2, [r0, #8]
 80096c6:	f100 0110 	add.w	r1, r0, #16
 80096ca:	6840      	ldr	r0, [r0, #4]
 80096cc:	f007 fa7e 	bl	8010bcc <rcl_take_request>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d131      	bne.n	8009738 <_rclc_take_new_data+0x9c>
 80096d4:	2000      	movs	r0, #0
 80096d6:	b00e      	add	sp, #56	; 0x38
 80096d8:	bd10      	pop	{r4, pc}
 80096da:	680b      	ldr	r3, [r1, #0]
 80096dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80096de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0f6      	beq.n	80096d4 <_rclc_take_new_data+0x38>
 80096e6:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80096ea:	2300      	movs	r3, #0
 80096ec:	aa02      	add	r2, sp, #8
 80096ee:	f7ff ff5b 	bl	80095a8 <rcl_take>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d0ef      	beq.n	80096d6 <_rclc_take_new_data+0x3a>
 80096f6:	f240 1391 	movw	r3, #401	; 0x191
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d115      	bne.n	800972a <_rclc_take_new_data+0x8e>
 80096fe:	2300      	movs	r3, #0
 8009700:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009704:	e7e7      	b.n	80096d6 <_rclc_take_new_data+0x3a>
 8009706:	698b      	ldr	r3, [r1, #24]
 8009708:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0e0      	beq.n	80096d4 <_rclc_take_new_data+0x38>
 8009712:	6882      	ldr	r2, [r0, #8]
 8009714:	f100 0110 	add.w	r1, r0, #16
 8009718:	6840      	ldr	r0, [r0, #4]
 800971a:	f006 fc01 	bl	800ff20 <rcl_take_response>
 800971e:	2800      	cmp	r0, #0
 8009720:	d0d8      	beq.n	80096d4 <_rclc_take_new_data+0x38>
 8009722:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009726:	4298      	cmp	r0, r3
 8009728:	d0d5      	beq.n	80096d6 <_rclc_take_new_data+0x3a>
 800972a:	9001      	str	r0, [sp, #4]
 800972c:	f000 fcf4 	bl	800a118 <rcutils_reset_error>
 8009730:	9801      	ldr	r0, [sp, #4]
 8009732:	e7d0      	b.n	80096d6 <_rclc_take_new_data+0x3a>
 8009734:	200b      	movs	r0, #11
 8009736:	4770      	bx	lr
 8009738:	f240 2359 	movw	r3, #601	; 0x259
 800973c:	4298      	cmp	r0, r3
 800973e:	d0de      	beq.n	80096fe <_rclc_take_new_data+0x62>
 8009740:	e7f3      	b.n	800972a <_rclc_take_new_data+0x8e>
 8009742:	2001      	movs	r0, #1
 8009744:	e7c7      	b.n	80096d6 <_rclc_take_new_data+0x3a>
 8009746:	bf00      	nop

08009748 <rclc_executor_trigger_any>:
 8009748:	4603      	mov	r3, r0
 800974a:	b178      	cbz	r0, 800976c <rclc_executor_trigger_any+0x24>
 800974c:	b179      	cbz	r1, 800976e <rclc_executor_trigger_any+0x26>
 800974e:	2200      	movs	r2, #0
 8009750:	e005      	b.n	800975e <rclc_executor_trigger_any+0x16>
 8009752:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8009756:	3340      	adds	r3, #64	; 0x40
 8009758:	b930      	cbnz	r0, 8009768 <rclc_executor_trigger_any+0x20>
 800975a:	4291      	cmp	r1, r2
 800975c:	d005      	beq.n	800976a <rclc_executor_trigger_any+0x22>
 800975e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8009762:	3201      	adds	r2, #1
 8009764:	2800      	cmp	r0, #0
 8009766:	d1f4      	bne.n	8009752 <rclc_executor_trigger_any+0xa>
 8009768:	4770      	bx	lr
 800976a:	4770      	bx	lr
 800976c:	4770      	bx	lr
 800976e:	4608      	mov	r0, r1
 8009770:	e7fa      	b.n	8009768 <rclc_executor_trigger_any+0x20>
 8009772:	bf00      	nop

08009774 <_rclc_execute.part.0>:
 8009774:	b530      	push	{r4, r5, lr}
 8009776:	7803      	ldrb	r3, [r0, #0]
 8009778:	4604      	mov	r4, r0
 800977a:	b083      	sub	sp, #12
 800977c:	2b08      	cmp	r3, #8
 800977e:	d857      	bhi.n	8009830 <_rclc_execute.part.0+0xbc>
 8009780:	e8df f003 	tbb	[pc, r3]
 8009784:	31372820 	.word	0x31372820
 8009788:	05050540 	.word	0x05050540
 800978c:	1b          	.byte	0x1b
 800978d:	00          	.byte	0x00
 800978e:	2b06      	cmp	r3, #6
 8009790:	d046      	beq.n	8009820 <_rclc_execute.part.0+0xac>
 8009792:	2b07      	cmp	r3, #7
 8009794:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009796:	d13d      	bne.n	8009814 <_rclc_execute.part.0+0xa0>
 8009798:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800979c:	6880      	ldr	r0, [r0, #8]
 800979e:	4798      	blx	r3
 80097a0:	f104 0510 	add.w	r5, r4, #16
 80097a4:	4629      	mov	r1, r5
 80097a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80097a8:	6860      	ldr	r0, [r4, #4]
 80097aa:	f007 fa47 	bl	8010c3c <rcl_send_response>
 80097ae:	b138      	cbz	r0, 80097c0 <_rclc_execute.part.0+0x4c>
 80097b0:	9001      	str	r0, [sp, #4]
 80097b2:	f000 fcb1 	bl	800a118 <rcutils_reset_error>
 80097b6:	9801      	ldr	r0, [sp, #4]
 80097b8:	e002      	b.n	80097c0 <_rclc_execute.part.0+0x4c>
 80097ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80097bc:	4798      	blx	r3
 80097be:	2000      	movs	r0, #0
 80097c0:	b003      	add	sp, #12
 80097c2:	bd30      	pop	{r4, r5, pc}
 80097c4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 80097c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80097ca:	b96d      	cbnz	r5, 80097e8 <_rclc_execute.part.0+0x74>
 80097cc:	4628      	mov	r0, r5
 80097ce:	4798      	blx	r3
 80097d0:	4628      	mov	r0, r5
 80097d2:	e7f5      	b.n	80097c0 <_rclc_execute.part.0+0x4c>
 80097d4:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 80097d8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 80097dc:	b9ad      	cbnz	r5, 800980a <_rclc_execute.part.0+0x96>
 80097de:	4628      	mov	r0, r5
 80097e0:	4798      	blx	r3
 80097e2:	4628      	mov	r0, r5
 80097e4:	e7ec      	b.n	80097c0 <_rclc_execute.part.0+0x4c>
 80097e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80097e8:	68a0      	ldr	r0, [r4, #8]
 80097ea:	4798      	blx	r3
 80097ec:	2000      	movs	r0, #0
 80097ee:	b003      	add	sp, #12
 80097f0:	bd30      	pop	{r4, r5, pc}
 80097f2:	6840      	ldr	r0, [r0, #4]
 80097f4:	f007 fada 	bl	8010dac <rcl_timer_call>
 80097f8:	f240 3321 	movw	r3, #801	; 0x321
 80097fc:	4298      	cmp	r0, r3
 80097fe:	d1d6      	bne.n	80097ae <_rclc_execute.part.0+0x3a>
 8009800:	2000      	movs	r0, #0
 8009802:	e7dd      	b.n	80097c0 <_rclc_execute.part.0+0x4c>
 8009804:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009806:	f100 0110 	add.w	r1, r0, #16
 800980a:	68a0      	ldr	r0, [r4, #8]
 800980c:	4798      	blx	r3
 800980e:	2000      	movs	r0, #0
 8009810:	b003      	add	sp, #12
 8009812:	bd30      	pop	{r4, r5, pc}
 8009814:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009816:	6880      	ldr	r0, [r0, #8]
 8009818:	4798      	blx	r3
 800981a:	f104 0510 	add.w	r5, r4, #16
 800981e:	e7c1      	b.n	80097a4 <_rclc_execute.part.0+0x30>
 8009820:	f100 0510 	add.w	r5, r0, #16
 8009824:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009826:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009828:	4629      	mov	r1, r5
 800982a:	6880      	ldr	r0, [r0, #8]
 800982c:	4798      	blx	r3
 800982e:	e7b9      	b.n	80097a4 <_rclc_execute.part.0+0x30>
 8009830:	2001      	movs	r0, #1
 8009832:	e7c5      	b.n	80097c0 <_rclc_execute.part.0+0x4c>
 8009834:	0000      	movs	r0, r0
	...

08009838 <rclc_executor_init>:
 8009838:	2800      	cmp	r0, #0
 800983a:	d064      	beq.n	8009906 <rclc_executor_init+0xce>
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	460f      	mov	r7, r1
 8009842:	b0ae      	sub	sp, #184	; 0xb8
 8009844:	2900      	cmp	r1, #0
 8009846:	d056      	beq.n	80098f6 <rclc_executor_init+0xbe>
 8009848:	4605      	mov	r5, r0
 800984a:	4618      	mov	r0, r3
 800984c:	4616      	mov	r6, r2
 800984e:	469a      	mov	sl, r3
 8009850:	f000 fb72 	bl	8009f38 <rcutils_allocator_is_valid>
 8009854:	2800      	cmp	r0, #0
 8009856:	d04e      	beq.n	80098f6 <rclc_executor_init+0xbe>
 8009858:	2e00      	cmp	r6, #0
 800985a:	d04c      	beq.n	80098f6 <rclc_executor_init+0xbe>
 800985c:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 8009860:	e9d9 8900 	ldrd	r8, r9, [r9]
 8009864:	2280      	movs	r2, #128	; 0x80
 8009866:	492a      	ldr	r1, [pc, #168]	; (8009910 <rclc_executor_init+0xd8>)
 8009868:	2400      	movs	r4, #0
 800986a:	a80e      	add	r0, sp, #56	; 0x38
 800986c:	f00a fada 	bl	8013e24 <memcpy>
 8009870:	2280      	movs	r2, #128	; 0x80
 8009872:	a90e      	add	r1, sp, #56	; 0x38
 8009874:	4628      	mov	r0, r5
 8009876:	f00a fad5 	bl	8013e24 <memcpy>
 800987a:	602f      	str	r7, [r5, #0]
 800987c:	466f      	mov	r7, sp
 800987e:	4668      	mov	r0, sp
 8009880:	e9c5 6402 	strd	r6, r4, [r5, #8]
 8009884:	f007 fcea 	bl	801125c <rcl_get_zero_initialized_wait_set>
 8009888:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800988a:	f105 0c14 	add.w	ip, r5, #20
 800988e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009892:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009894:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009898:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800989a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	f8da 3000 	ldr.w	r3, [sl]
 80098a4:	f8da 1010 	ldr.w	r1, [sl, #16]
 80098a8:	f8cc 2000 	str.w	r2, [ip]
 80098ac:	01b0      	lsls	r0, r6, #6
 80098ae:	e9c5 8918 	strd	r8, r9, [r5, #96]	; 0x60
 80098b2:	f8c5 a010 	str.w	sl, [r5, #16]
 80098b6:	4798      	blx	r3
 80098b8:	6068      	str	r0, [r5, #4]
 80098ba:	b908      	cbnz	r0, 80098c0 <rclc_executor_init+0x88>
 80098bc:	e025      	b.n	800990a <rclc_executor_init+0xd2>
 80098be:	6868      	ldr	r0, [r5, #4]
 80098c0:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 80098c4:	4631      	mov	r1, r6
 80098c6:	3401      	adds	r4, #1
 80098c8:	f000 f9fc 	bl	8009cc4 <rclc_executor_handle_init>
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	d1f6      	bne.n	80098be <rclc_executor_init+0x86>
 80098d0:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80098d4:	f000 f9ea 	bl	8009cac <rclc_executor_handle_counters_zero_init>
 80098d8:	2000      	movs	r0, #0
 80098da:	4a0e      	ldr	r2, [pc, #56]	; (8009914 <rclc_executor_init+0xdc>)
 80098dc:	686b      	ldr	r3, [r5, #4]
 80098de:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 80098e2:	b163      	cbz	r3, 80098fe <rclc_executor_init+0xc6>
 80098e4:	692b      	ldr	r3, [r5, #16]
 80098e6:	b153      	cbz	r3, 80098fe <rclc_executor_init+0xc6>
 80098e8:	68ab      	ldr	r3, [r5, #8]
 80098ea:	b143      	cbz	r3, 80098fe <rclc_executor_init+0xc6>
 80098ec:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 80098f0:	b02e      	add	sp, #184	; 0xb8
 80098f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f6:	200b      	movs	r0, #11
 80098f8:	b02e      	add	sp, #184	; 0xb8
 80098fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fe:	4618      	mov	r0, r3
 8009900:	b02e      	add	sp, #184	; 0xb8
 8009902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009906:	200b      	movs	r0, #11
 8009908:	4770      	bx	lr
 800990a:	200a      	movs	r0, #10
 800990c:	e7f4      	b.n	80098f8 <rclc_executor_init+0xc0>
 800990e:	bf00      	nop
 8009910:	080162d0 	.word	0x080162d0
 8009914:	08009749 	.word	0x08009749
 8009918:	3b9aca00 	.word	0x3b9aca00
 800991c:	00000000 	.word	0x00000000

08009920 <rclc_executor_add_subscription>:
 8009920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009924:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8009928:	b348      	cbz	r0, 800997e <rclc_executor_add_subscription+0x5e>
 800992a:	b341      	cbz	r1, 800997e <rclc_executor_add_subscription+0x5e>
 800992c:	b33a      	cbz	r2, 800997e <rclc_executor_add_subscription+0x5e>
 800992e:	b333      	cbz	r3, 800997e <rclc_executor_add_subscription+0x5e>
 8009930:	4604      	mov	r4, r0
 8009932:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
 8009936:	4285      	cmp	r5, r0
 8009938:	d302      	bcc.n	8009940 <rclc_executor_add_subscription+0x20>
 800993a:	2001      	movs	r0, #1
 800993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009940:	2700      	movs	r7, #0
 8009942:	f04f 0c01 	mov.w	ip, #1
 8009946:	6860      	ldr	r0, [r4, #4]
 8009948:	ea4f 1e85 	mov.w	lr, r5, lsl #6
 800994c:	f800 700e 	strb.w	r7, [r0, lr]
 8009950:	f104 0814 	add.w	r8, r4, #20
 8009954:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8009958:	4465      	add	r5, ip
 800995a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800995e:	6303      	str	r3, [r0, #48]	; 0x30
 8009960:	7046      	strb	r6, [r0, #1]
 8009962:	62c7      	str	r7, [r0, #44]	; 0x2c
 8009964:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8009968:	4640      	mov	r0, r8
 800996a:	60e5      	str	r5, [r4, #12]
 800996c:	f007 fc88 	bl	8011280 <rcl_wait_set_is_valid>
 8009970:	b940      	cbnz	r0, 8009984 <rclc_executor_add_subscription+0x64>
 8009972:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009974:	2000      	movs	r0, #0
 8009976:	3301      	adds	r3, #1
 8009978:	64a3      	str	r3, [r4, #72]	; 0x48
 800997a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800997e:	200b      	movs	r0, #11
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	4640      	mov	r0, r8
 8009986:	f007 fc81 	bl	801128c <rcl_wait_set_fini>
 800998a:	2800      	cmp	r0, #0
 800998c:	d0f1      	beq.n	8009972 <rclc_executor_add_subscription+0x52>
 800998e:	e7d5      	b.n	800993c <rclc_executor_add_subscription+0x1c>

08009990 <rclc_executor_prepare>:
 8009990:	2800      	cmp	r0, #0
 8009992:	d03d      	beq.n	8009a10 <rclc_executor_prepare+0x80>
 8009994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009998:	f100 0814 	add.w	r8, r0, #20
 800999c:	4604      	mov	r4, r0
 800999e:	b09a      	sub	sp, #104	; 0x68
 80099a0:	4640      	mov	r0, r8
 80099a2:	f007 fc6d 	bl	8011280 <rcl_wait_set_is_valid>
 80099a6:	b118      	cbz	r0, 80099b0 <rclc_executor_prepare+0x20>
 80099a8:	2000      	movs	r0, #0
 80099aa:	b01a      	add	sp, #104	; 0x68
 80099ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b0:	4640      	mov	r0, r8
 80099b2:	f007 fc6b 	bl	801128c <rcl_wait_set_fini>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d127      	bne.n	8009a0a <rclc_executor_prepare+0x7a>
 80099ba:	4646      	mov	r6, r8
 80099bc:	a80c      	add	r0, sp, #48	; 0x30
 80099be:	ad0c      	add	r5, sp, #48	; 0x30
 80099c0:	f007 fc4c 	bl	801125c <rcl_get_zero_initialized_wait_set>
 80099c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80099c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80099cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80099d0:	6927      	ldr	r7, [r4, #16]
 80099d2:	682b      	ldr	r3, [r5, #0]
 80099d4:	ad04      	add	r5, sp, #16
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80099da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099dc:	6838      	ldr	r0, [r7, #0]
 80099de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80099e0:	6826      	ldr	r6, [r4, #0]
 80099e2:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 80099e6:	6028      	str	r0, [r5, #0]
 80099e8:	e9cd 1602 	strd	r1, r6, [sp, #8]
 80099ec:	e9cd 3200 	strd	r3, r2, [sp]
 80099f0:	4640      	mov	r0, r8
 80099f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80099f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80099f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80099f8:	f007 ff6a 	bl	80118d0 <rcl_wait_set_init>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d0d4      	beq.n	80099aa <rclc_executor_prepare+0x1a>
 8009a00:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a02:	f000 fb89 	bl	800a118 <rcutils_reset_error>
 8009a06:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a08:	e7cf      	b.n	80099aa <rclc_executor_prepare+0x1a>
 8009a0a:	f000 fb85 	bl	800a118 <rcutils_reset_error>
 8009a0e:	e7d4      	b.n	80099ba <rclc_executor_prepare+0x2a>
 8009a10:	200b      	movs	r0, #11
 8009a12:	4770      	bx	lr

08009a14 <rclc_executor_spin_some.part.0>:
 8009a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	f100 0814 	add.w	r8, r0, #20
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	4692      	mov	sl, r2
 8009a20:	4699      	mov	r9, r3
 8009a22:	4605      	mov	r5, r0
 8009a24:	f7ff ffb4 	bl	8009990 <rclc_executor_prepare>
 8009a28:	4640      	mov	r0, r8
 8009a2a:	f007 fcff 	bl	801142c <rcl_wait_set_clear>
 8009a2e:	4607      	mov	r7, r0
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f040 80bb 	bne.w	8009bac <rclc_executor_spin_some.part.0+0x198>
 8009a36:	68ab      	ldr	r3, [r5, #8]
 8009a38:	4604      	mov	r4, r0
 8009a3a:	b1eb      	cbz	r3, 8009a78 <rclc_executor_spin_some.part.0+0x64>
 8009a3c:	686e      	ldr	r6, [r5, #4]
 8009a3e:	01a2      	lsls	r2, r4, #6
 8009a40:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 8009a44:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8009a48:	b1b3      	cbz	r3, 8009a78 <rclc_executor_spin_some.part.0+0x64>
 8009a4a:	5cb3      	ldrb	r3, [r6, r2]
 8009a4c:	2b08      	cmp	r3, #8
 8009a4e:	f200 80a6 	bhi.w	8009b9e <rclc_executor_spin_some.part.0+0x18a>
 8009a52:	e8df f003 	tbb	[pc, r3]
 8009a56:	8686      	.short	0x8686
 8009a58:	05787890 	.word	0x05787890
 8009a5c:	0505      	.short	0x0505
 8009a5e:	9a          	.byte	0x9a
 8009a5f:	00          	.byte	0x00
 8009a60:	f101 0234 	add.w	r2, r1, #52	; 0x34
 8009a64:	4640      	mov	r0, r8
 8009a66:	6849      	ldr	r1, [r1, #4]
 8009a68:	f008 f848 	bl	8011afc <rcl_wait_set_add_service>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d172      	bne.n	8009b56 <rclc_executor_spin_some.part.0+0x142>
 8009a70:	68ab      	ldr	r3, [r5, #8]
 8009a72:	3401      	adds	r4, #1
 8009a74:	429c      	cmp	r4, r3
 8009a76:	d3e1      	bcc.n	8009a3c <rclc_executor_spin_some.part.0+0x28>
 8009a78:	464b      	mov	r3, r9
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	4640      	mov	r0, r8
 8009a7e:	f008 f86b 	bl	8011b58 <rcl_wait>
 8009a82:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 8098 	beq.w	8009bbc <rclc_executor_spin_some.part.0+0x1a8>
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	f040 8086 	bne.w	8009b9e <rclc_executor_spin_some.part.0+0x18a>
 8009a92:	68a9      	ldr	r1, [r5, #8]
 8009a94:	2900      	cmp	r1, #0
 8009a96:	f000 80ea 	beq.w	8009c6e <rclc_executor_spin_some.part.0+0x25a>
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	f240 1991 	movw	r9, #401	; 0x191
 8009aa0:	4626      	mov	r6, r4
 8009aa2:	e00b      	b.n	8009abc <rclc_executor_spin_some.part.0+0xa8>
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	f7ff fdd3 	bl	8009650 <_rclc_check_for_new_data>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	b110      	cbz	r0, 8009ab4 <rclc_executor_spin_some.part.0+0xa0>
 8009aae:	4548      	cmp	r0, r9
 8009ab0:	f040 8082 	bne.w	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009ab4:	68a9      	ldr	r1, [r5, #8]
 8009ab6:	428e      	cmp	r6, r1
 8009ab8:	f080 80d5 	bcs.w	8009c66 <rclc_executor_spin_some.part.0+0x252>
 8009abc:	686b      	ldr	r3, [r5, #4]
 8009abe:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 8009ac2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	d1eb      	bne.n	8009aa4 <rclc_executor_spin_some.part.0+0x90>
 8009acc:	4618      	mov	r0, r3
 8009ace:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8009ad2:	4798      	blx	r3
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d06f      	beq.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009ad8:	68ab      	ldr	r3, [r5, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d06c      	beq.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009ade:	2600      	movs	r6, #0
 8009ae0:	f240 1991 	movw	r9, #401	; 0x191
 8009ae4:	e009      	b.n	8009afa <rclc_executor_spin_some.part.0+0xe6>
 8009ae6:	4641      	mov	r1, r8
 8009ae8:	f7ff fdd8 	bl	800969c <_rclc_take_new_data>
 8009aec:	4604      	mov	r4, r0
 8009aee:	b108      	cbz	r0, 8009af4 <rclc_executor_spin_some.part.0+0xe0>
 8009af0:	4548      	cmp	r0, r9
 8009af2:	d161      	bne.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009af4:	68ab      	ldr	r3, [r5, #8]
 8009af6:	429e      	cmp	r6, r3
 8009af8:	d207      	bcs.n	8009b0a <rclc_executor_spin_some.part.0+0xf6>
 8009afa:	6868      	ldr	r0, [r5, #4]
 8009afc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8009b00:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009b04:	3601      	adds	r6, #1
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	d1ed      	bne.n	8009ae6 <rclc_executor_spin_some.part.0+0xd2>
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	b933      	cbnz	r3, 8009b1c <rclc_executor_spin_some.part.0+0x108>
 8009b0e:	e053      	b.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009b10:	2a01      	cmp	r2, #1
 8009b12:	d011      	beq.n	8009b38 <rclc_executor_spin_some.part.0+0x124>
 8009b14:	3601      	adds	r6, #1
 8009b16:	429e      	cmp	r6, r3
 8009b18:	d244      	bcs.n	8009ba4 <rclc_executor_spin_some.part.0+0x190>
 8009b1a:	2400      	movs	r4, #0
 8009b1c:	6868      	ldr	r0, [r5, #4]
 8009b1e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8009b22:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	d046      	beq.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009b2a:	7842      	ldrb	r2, [r0, #1]
 8009b2c:	2a00      	cmp	r2, #0
 8009b2e:	d1ef      	bne.n	8009b10 <rclc_executor_spin_some.part.0+0xfc>
 8009b30:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	d0ed      	beq.n	8009b14 <rclc_executor_spin_some.part.0+0x100>
 8009b38:	f7ff fe1c 	bl	8009774 <_rclc_execute.part.0>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f040 8094 	bne.w	8009c6a <rclc_executor_spin_some.part.0+0x256>
 8009b42:	68ab      	ldr	r3, [r5, #8]
 8009b44:	e7e6      	b.n	8009b14 <rclc_executor_spin_some.part.0+0x100>
 8009b46:	f101 0234 	add.w	r2, r1, #52	; 0x34
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	6849      	ldr	r1, [r1, #4]
 8009b4e:	f007 ffa9 	bl	8011aa4 <rcl_wait_set_add_client>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d08c      	beq.n	8009a70 <rclc_executor_spin_some.part.0+0x5c>
 8009b56:	9001      	str	r0, [sp, #4]
 8009b58:	f000 fade 	bl	800a118 <rcutils_reset_error>
 8009b5c:	9801      	ldr	r0, [sp, #4]
 8009b5e:	4607      	mov	r7, r0
 8009b60:	e020      	b.n	8009ba4 <rclc_executor_spin_some.part.0+0x190>
 8009b62:	f101 0234 	add.w	r2, r1, #52	; 0x34
 8009b66:	4640      	mov	r0, r8
 8009b68:	6849      	ldr	r1, [r1, #4]
 8009b6a:	f007 fc33 	bl	80113d4 <rcl_wait_set_add_subscription>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	f43f af7e 	beq.w	8009a70 <rclc_executor_spin_some.part.0+0x5c>
 8009b74:	e7ef      	b.n	8009b56 <rclc_executor_spin_some.part.0+0x142>
 8009b76:	f101 0234 	add.w	r2, r1, #52	; 0x34
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	6849      	ldr	r1, [r1, #4]
 8009b7e:	f007 ff61 	bl	8011a44 <rcl_wait_set_add_timer>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	f43f af74 	beq.w	8009a70 <rclc_executor_spin_some.part.0+0x5c>
 8009b88:	e7e5      	b.n	8009b56 <rclc_executor_spin_some.part.0+0x142>
 8009b8a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 8009b8e:	4640      	mov	r0, r8
 8009b90:	6849      	ldr	r1, [r1, #4]
 8009b92:	f007 ff2b 	bl	80119ec <rcl_wait_set_add_guard_condition>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f43f af6a 	beq.w	8009a70 <rclc_executor_spin_some.part.0+0x5c>
 8009b9c:	e7db      	b.n	8009b56 <rclc_executor_spin_some.part.0+0x142>
 8009b9e:	f000 fabb 	bl	800a118 <rcutils_reset_error>
 8009ba2:	2701      	movs	r7, #1
 8009ba4:	4638      	mov	r0, r7
 8009ba6:	b003      	add	sp, #12
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	f000 fab4 	bl	800a118 <rcutils_reset_error>
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	b003      	add	sp, #12
 8009bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb8:	4627      	mov	r7, r4
 8009bba:	e7f3      	b.n	8009ba4 <rclc_executor_spin_some.part.0+0x190>
 8009bbc:	68a9      	ldr	r1, [r5, #8]
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	d058      	beq.n	8009c74 <rclc_executor_spin_some.part.0+0x260>
 8009bc2:	2400      	movs	r4, #0
 8009bc4:	f240 1991 	movw	r9, #401	; 0x191
 8009bc8:	4626      	mov	r6, r4
 8009bca:	e009      	b.n	8009be0 <rclc_executor_spin_some.part.0+0x1cc>
 8009bcc:	4641      	mov	r1, r8
 8009bce:	f7ff fd3f 	bl	8009650 <_rclc_check_for_new_data>
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	b108      	cbz	r0, 8009bda <rclc_executor_spin_some.part.0+0x1c6>
 8009bd6:	4548      	cmp	r0, r9
 8009bd8:	d1ee      	bne.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009bda:	68a9      	ldr	r1, [r5, #8]
 8009bdc:	428e      	cmp	r6, r1
 8009bde:	d240      	bcs.n	8009c62 <rclc_executor_spin_some.part.0+0x24e>
 8009be0:	686b      	ldr	r3, [r5, #4]
 8009be2:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 8009be6:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009bea:	3601      	adds	r6, #1
 8009bec:	2a00      	cmp	r2, #0
 8009bee:	d1ed      	bne.n	8009bcc <rclc_executor_spin_some.part.0+0x1b8>
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 8009bf6:	4798      	blx	r3
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d0dd      	beq.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009bfc:	68ab      	ldr	r3, [r5, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d0da      	beq.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009c02:	f04f 0a00 	mov.w	sl, #0
 8009c06:	f240 1691 	movw	r6, #401	; 0x191
 8009c0a:	f240 2959 	movw	r9, #601	; 0x259
 8009c0e:	e00b      	b.n	8009c28 <rclc_executor_spin_some.part.0+0x214>
 8009c10:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009c14:	b113      	cbz	r3, 8009c1c <rclc_executor_spin_some.part.0+0x208>
 8009c16:	f7ff fdad 	bl	8009774 <_rclc_execute.part.0>
 8009c1a:	bb30      	cbnz	r0, 8009c6a <rclc_executor_spin_some.part.0+0x256>
 8009c1c:	68ab      	ldr	r3, [r5, #8]
 8009c1e:	f10a 0a01 	add.w	sl, sl, #1
 8009c22:	459a      	cmp	sl, r3
 8009c24:	d2be      	bcs.n	8009ba4 <rclc_executor_spin_some.part.0+0x190>
 8009c26:	2400      	movs	r4, #0
 8009c28:	6868      	ldr	r0, [r5, #4]
 8009c2a:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8009c2e:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8009c32:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0be      	beq.n	8009bb8 <rclc_executor_spin_some.part.0+0x1a4>
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	f7ff fd2e 	bl	800969c <_rclc_take_new_data>
 8009c40:	b118      	cbz	r0, 8009c4a <rclc_executor_spin_some.part.0+0x236>
 8009c42:	42b0      	cmp	r0, r6
 8009c44:	d001      	beq.n	8009c4a <rclc_executor_spin_some.part.0+0x236>
 8009c46:	4548      	cmp	r0, r9
 8009c48:	d10f      	bne.n	8009c6a <rclc_executor_spin_some.part.0+0x256>
 8009c4a:	6868      	ldr	r0, [r5, #4]
 8009c4c:	eb10 000b 	adds.w	r0, r0, fp
 8009c50:	d005      	beq.n	8009c5e <rclc_executor_spin_some.part.0+0x24a>
 8009c52:	7843      	ldrb	r3, [r0, #1]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0db      	beq.n	8009c10 <rclc_executor_spin_some.part.0+0x1fc>
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d1df      	bne.n	8009c1c <rclc_executor_spin_some.part.0+0x208>
 8009c5c:	e7db      	b.n	8009c16 <rclc_executor_spin_some.part.0+0x202>
 8009c5e:	270b      	movs	r7, #11
 8009c60:	e7a0      	b.n	8009ba4 <rclc_executor_spin_some.part.0+0x190>
 8009c62:	686b      	ldr	r3, [r5, #4]
 8009c64:	e7c4      	b.n	8009bf0 <rclc_executor_spin_some.part.0+0x1dc>
 8009c66:	686b      	ldr	r3, [r5, #4]
 8009c68:	e730      	b.n	8009acc <rclc_executor_spin_some.part.0+0xb8>
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	e79a      	b.n	8009ba4 <rclc_executor_spin_some.part.0+0x190>
 8009c6e:	460c      	mov	r4, r1
 8009c70:	686b      	ldr	r3, [r5, #4]
 8009c72:	e72b      	b.n	8009acc <rclc_executor_spin_some.part.0+0xb8>
 8009c74:	460c      	mov	r4, r1
 8009c76:	686b      	ldr	r3, [r5, #4]
 8009c78:	e7ba      	b.n	8009bf0 <rclc_executor_spin_some.part.0+0x1dc>
 8009c7a:	bf00      	nop

08009c7c <rclc_executor_spin>:
 8009c7c:	b1a0      	cbz	r0, 8009ca8 <rclc_executor_spin+0x2c>
 8009c7e:	b5d0      	push	{r4, r6, r7, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	f006 f9aa 	bl	800ffe0 <rcl_context_is_valid>
 8009c8c:	b140      	cbz	r0, 8009ca0 <rclc_executor_spin+0x24>
 8009c8e:	463b      	mov	r3, r7
 8009c90:	4632      	mov	r2, r6
 8009c92:	4620      	mov	r0, r4
 8009c94:	f7ff febe 	bl	8009a14 <rclc_executor_spin_some.part.0>
 8009c98:	f030 0302 	bics.w	r3, r0, #2
 8009c9c:	d0f1      	beq.n	8009c82 <rclc_executor_spin+0x6>
 8009c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8009ca0:	f000 fa3a 	bl	800a118 <rcutils_reset_error>
 8009ca4:	2001      	movs	r0, #1
 8009ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8009ca8:	200b      	movs	r0, #11
 8009caa:	4770      	bx	lr

08009cac <rclc_executor_handle_counters_zero_init>:
 8009cac:	b140      	cbz	r0, 8009cc0 <rclc_executor_handle_counters_zero_init+0x14>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6003      	str	r3, [r0, #0]
 8009cb2:	6043      	str	r3, [r0, #4]
 8009cb4:	6083      	str	r3, [r0, #8]
 8009cb6:	60c3      	str	r3, [r0, #12]
 8009cb8:	6103      	str	r3, [r0, #16]
 8009cba:	6143      	str	r3, [r0, #20]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	4770      	bx	lr
 8009cc0:	200b      	movs	r0, #11
 8009cc2:	4770      	bx	lr

08009cc4 <rclc_executor_handle_init>:
 8009cc4:	b178      	cbz	r0, 8009ce6 <rclc_executor_handle_init+0x22>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2209      	movs	r2, #9
 8009cca:	b430      	push	{r4, r5}
 8009ccc:	2000      	movs	r0, #0
 8009cce:	2400      	movs	r4, #0
 8009cd0:	2500      	movs	r5, #0
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 8009cd8:	bc30      	pop	{r4, r5}
 8009cda:	e9c3 0001 	strd	r0, r0, [r3, #4]
 8009cde:	6359      	str	r1, [r3, #52]	; 0x34
 8009ce0:	6318      	str	r0, [r3, #48]	; 0x30
 8009ce2:	8718      	strh	r0, [r3, #56]	; 0x38
 8009ce4:	4770      	bx	lr
 8009ce6:	200b      	movs	r0, #11
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <rclc_support_init_with_options>:
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8009cf6:	b390      	cbz	r0, 8009d5e <rclc_support_init_with_options+0x72>
 8009cf8:	461c      	mov	r4, r3
 8009cfa:	b383      	cbz	r3, 8009d5e <rclc_support_init_with_options+0x72>
 8009cfc:	f1b8 0f00 	cmp.w	r8, #0
 8009d00:	d02d      	beq.n	8009d5e <rclc_support_init_with_options+0x72>
 8009d02:	4605      	mov	r5, r0
 8009d04:	460e      	mov	r6, r1
 8009d06:	4617      	mov	r7, r2
 8009d08:	f7ff f8b0 	bl	8008e6c <rcl_get_zero_initialized_init_options>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	6028      	str	r0, [r5, #0]
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff f923 	bl	8008f5c <rcl_init_options_copy>
 8009d16:	4604      	mov	r4, r0
 8009d18:	b9d8      	cbnz	r0, 8009d52 <rclc_support_init_with_options+0x66>
 8009d1a:	466c      	mov	r4, sp
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f006 f94f 	bl	800ffc0 <rcl_get_zero_initialized_context>
 8009d22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009d26:	f105 0408 	add.w	r4, r5, #8
 8009d2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009d2e:	4623      	mov	r3, r4
 8009d30:	4639      	mov	r1, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	462a      	mov	r2, r5
 8009d36:	f006 fb37 	bl	80103a8 <rcl_init>
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	b948      	cbnz	r0, 8009d52 <rclc_support_init_with_options+0x66>
 8009d3e:	4642      	mov	r2, r8
 8009d40:	2003      	movs	r0, #3
 8009d42:	f8c5 8018 	str.w	r8, [r5, #24]
 8009d46:	f105 011c 	add.w	r1, r5, #28
 8009d4a:	f006 ffa7 	bl	8010c9c <rcl_clock_init>
 8009d4e:	4604      	mov	r4, r0
 8009d50:	b108      	cbz	r0, 8009d56 <rclc_support_init_with_options+0x6a>
 8009d52:	f000 f9e1 	bl	800a118 <rcutils_reset_error>
 8009d56:	4620      	mov	r0, r4
 8009d58:	b004      	add	sp, #16
 8009d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5e:	240b      	movs	r4, #11
 8009d60:	4620      	mov	r0, r4
 8009d62:	b004      	add	sp, #16
 8009d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009d68 <rclc_node_init_default>:
 8009d68:	b3c0      	cbz	r0, 8009ddc <rclc_node_init_default+0x74>
 8009d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d6e:	460d      	mov	r5, r1
 8009d70:	b08f      	sub	sp, #60	; 0x3c
 8009d72:	b331      	cbz	r1, 8009dc2 <rclc_node_init_default+0x5a>
 8009d74:	4616      	mov	r6, r2
 8009d76:	b322      	cbz	r2, 8009dc2 <rclc_node_init_default+0x5a>
 8009d78:	461f      	mov	r7, r3
 8009d7a:	b313      	cbz	r3, 8009dc2 <rclc_node_init_default+0x5a>
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	f10d 0810 	add.w	r8, sp, #16
 8009d82:	4640      	mov	r0, r8
 8009d84:	f10d 091c 	add.w	r9, sp, #28
 8009d88:	f006 fc46 	bl	8010618 <rcl_get_zero_initialized_node>
 8009d8c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009d90:	e884 0003 	stmia.w	r4, {r0, r1}
 8009d94:	4648      	mov	r0, r9
 8009d96:	f006 fddb 	bl	8010950 <rcl_node_get_default_options>
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f006 fc3c 	bl	8010618 <rcl_get_zero_initialized_node>
 8009da0:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009da4:	4632      	mov	r2, r6
 8009da6:	f8cd 9000 	str.w	r9, [sp]
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	e884 0003 	stmia.w	r4, {r0, r1}
 8009db2:	4629      	mov	r1, r5
 8009db4:	4620      	mov	r0, r4
 8009db6:	f006 fc39 	bl	801062c <rcl_node_init>
 8009dba:	b930      	cbnz	r0, 8009dca <rclc_node_init_default+0x62>
 8009dbc:	b00f      	add	sp, #60	; 0x3c
 8009dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dc2:	200b      	movs	r0, #11
 8009dc4:	b00f      	add	sp, #60	; 0x3c
 8009dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dca:	9003      	str	r0, [sp, #12]
 8009dcc:	f000 f9a4 	bl	800a118 <rcutils_reset_error>
 8009dd0:	f000 f9a2 	bl	800a118 <rcutils_reset_error>
 8009dd4:	9803      	ldr	r0, [sp, #12]
 8009dd6:	b00f      	add	sp, #60	; 0x3c
 8009dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ddc:	200b      	movs	r0, #11
 8009dde:	4770      	bx	lr

08009de0 <rclc_publisher_init_default>:
 8009de0:	b368      	cbz	r0, 8009e3e <rclc_publisher_init_default+0x5e>
 8009de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de6:	460d      	mov	r5, r1
 8009de8:	b09e      	sub	sp, #120	; 0x78
 8009dea:	b321      	cbz	r1, 8009e36 <rclc_publisher_init_default+0x56>
 8009dec:	4616      	mov	r6, r2
 8009dee:	b312      	cbz	r2, 8009e36 <rclc_publisher_init_default+0x56>
 8009df0:	461f      	mov	r7, r3
 8009df2:	b303      	cbz	r3, 8009e36 <rclc_publisher_init_default+0x56>
 8009df4:	4604      	mov	r4, r0
 8009df6:	f7ff f96d 	bl	80090d4 <rcl_get_zero_initialized_publisher>
 8009dfa:	f10d 0810 	add.w	r8, sp, #16
 8009dfe:	6020      	str	r0, [r4, #0]
 8009e00:	4640      	mov	r0, r8
 8009e02:	f7ff fa65 	bl	80092d0 <rcl_publisher_get_default_options>
 8009e06:	2250      	movs	r2, #80	; 0x50
 8009e08:	490e      	ldr	r1, [pc, #56]	; (8009e44 <rclc_publisher_init_default+0x64>)
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	f00a f80a 	bl	8013e24 <memcpy>
 8009e10:	463b      	mov	r3, r7
 8009e12:	4632      	mov	r2, r6
 8009e14:	4629      	mov	r1, r5
 8009e16:	4620      	mov	r0, r4
 8009e18:	f8cd 8000 	str.w	r8, [sp]
 8009e1c:	f7ff f960 	bl	80090e0 <rcl_publisher_init>
 8009e20:	b910      	cbnz	r0, 8009e28 <rclc_publisher_init_default+0x48>
 8009e22:	b01e      	add	sp, #120	; 0x78
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	9003      	str	r0, [sp, #12]
 8009e2a:	f000 f975 	bl	800a118 <rcutils_reset_error>
 8009e2e:	9803      	ldr	r0, [sp, #12]
 8009e30:	b01e      	add	sp, #120	; 0x78
 8009e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e36:	200b      	movs	r0, #11
 8009e38:	b01e      	add	sp, #120	; 0x78
 8009e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e3e:	200b      	movs	r0, #11
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	08016350 	.word	0x08016350

08009e48 <rclc_subscription_init_best_effort>:
 8009e48:	b368      	cbz	r0, 8009ea6 <rclc_subscription_init_best_effort+0x5e>
 8009e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4e:	460d      	mov	r5, r1
 8009e50:	b0a0      	sub	sp, #128	; 0x80
 8009e52:	b321      	cbz	r1, 8009e9e <rclc_subscription_init_best_effort+0x56>
 8009e54:	4616      	mov	r6, r2
 8009e56:	b312      	cbz	r2, 8009e9e <rclc_subscription_init_best_effort+0x56>
 8009e58:	461f      	mov	r7, r3
 8009e5a:	b303      	cbz	r3, 8009e9e <rclc_subscription_init_best_effort+0x56>
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	f7ff fa7d 	bl	800935c <rcl_get_zero_initialized_subscription>
 8009e62:	f10d 0810 	add.w	r8, sp, #16
 8009e66:	6020      	str	r0, [r4, #0]
 8009e68:	4640      	mov	r0, r8
 8009e6a:	f7ff fb73 	bl	8009554 <rcl_subscription_get_default_options>
 8009e6e:	2250      	movs	r2, #80	; 0x50
 8009e70:	490e      	ldr	r1, [pc, #56]	; (8009eac <rclc_subscription_init_best_effort+0x64>)
 8009e72:	4640      	mov	r0, r8
 8009e74:	f009 ffd6 	bl	8013e24 <memcpy>
 8009e78:	463b      	mov	r3, r7
 8009e7a:	4632      	mov	r2, r6
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f8cd 8000 	str.w	r8, [sp]
 8009e84:	f7ff fa70 	bl	8009368 <rcl_subscription_init>
 8009e88:	b910      	cbnz	r0, 8009e90 <rclc_subscription_init_best_effort+0x48>
 8009e8a:	b020      	add	sp, #128	; 0x80
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	9003      	str	r0, [sp, #12]
 8009e92:	f000 f941 	bl	800a118 <rcutils_reset_error>
 8009e96:	9803      	ldr	r0, [sp, #12]
 8009e98:	b020      	add	sp, #128	; 0x80
 8009e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e9e:	200b      	movs	r0, #11
 8009ea0:	b020      	add	sp, #128	; 0x80
 8009ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea6:	200b      	movs	r0, #11
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	080163a0 	.word	0x080163a0

08009eb0 <__default_zero_allocate>:
 8009eb0:	f009 bf30 	b.w	8013d14 <calloc>

08009eb4 <__default_reallocate>:
 8009eb4:	f00a b920 	b.w	80140f8 <realloc>

08009eb8 <__default_deallocate>:
 8009eb8:	f009 bfac 	b.w	8013e14 <free>

08009ebc <__default_allocate>:
 8009ebc:	f009 bfa2 	b.w	8013e04 <malloc>

08009ec0 <rcutils_get_zero_initialized_allocator>:
 8009ec0:	b470      	push	{r4, r5, r6}
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	4d04      	ldr	r5, [pc, #16]	; (8009ed8 <rcutils_get_zero_initialized_allocator+0x18>)
 8009ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	4630      	mov	r0, r6
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bc70      	pop	{r4, r5, r6}
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	080163f0 	.word	0x080163f0

08009edc <rcutils_set_default_allocator>:
 8009edc:	b1a0      	cbz	r0, 8009f08 <rcutils_set_default_allocator+0x2c>
 8009ede:	6802      	ldr	r2, [r0, #0]
 8009ee0:	b19a      	cbz	r2, 8009f0a <rcutils_set_default_allocator+0x2e>
 8009ee2:	6841      	ldr	r1, [r0, #4]
 8009ee4:	b199      	cbz	r1, 8009f0e <rcutils_set_default_allocator+0x32>
 8009ee6:	b470      	push	{r4, r5, r6}
 8009ee8:	68c4      	ldr	r4, [r0, #12]
 8009eea:	b15c      	cbz	r4, 8009f04 <rcutils_set_default_allocator+0x28>
 8009eec:	6885      	ldr	r5, [r0, #8]
 8009eee:	b185      	cbz	r5, 8009f12 <rcutils_set_default_allocator+0x36>
 8009ef0:	2600      	movs	r6, #0
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <rcutils_set_default_allocator+0x3c>)
 8009ef6:	e9c3 2100 	strd	r2, r1, [r3]
 8009efa:	e9c3 5402 	strd	r5, r4, [r3, #8]
 8009efe:	611e      	str	r6, [r3, #16]
 8009f00:	bc70      	pop	{r4, r5, r6}
 8009f02:	4770      	bx	lr
 8009f04:	4620      	mov	r0, r4
 8009f06:	e7fb      	b.n	8009f00 <rcutils_set_default_allocator+0x24>
 8009f08:	4770      	bx	lr
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	4770      	bx	lr
 8009f0e:	4608      	mov	r0, r1
 8009f10:	4770      	bx	lr
 8009f12:	4628      	mov	r0, r5
 8009f14:	e7f4      	b.n	8009f00 <rcutils_set_default_allocator+0x24>
 8009f16:	bf00      	nop
 8009f18:	20000010 	.word	0x20000010

08009f1c <rcutils_get_default_allocator>:
 8009f1c:	b470      	push	{r4, r5, r6}
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4606      	mov	r6, r0
 8009f22:	4d04      	ldr	r5, [pc, #16]	; (8009f34 <rcutils_get_default_allocator+0x18>)
 8009f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bc70      	pop	{r4, r5, r6}
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	20000010 	.word	0x20000010

08009f38 <rcutils_allocator_is_valid>:
 8009f38:	b158      	cbz	r0, 8009f52 <rcutils_allocator_is_valid+0x1a>
 8009f3a:	6803      	ldr	r3, [r0, #0]
 8009f3c:	b143      	cbz	r3, 8009f50 <rcutils_allocator_is_valid+0x18>
 8009f3e:	6843      	ldr	r3, [r0, #4]
 8009f40:	b133      	cbz	r3, 8009f50 <rcutils_allocator_is_valid+0x18>
 8009f42:	68c3      	ldr	r3, [r0, #12]
 8009f44:	b123      	cbz	r3, 8009f50 <rcutils_allocator_is_valid+0x18>
 8009f46:	6880      	ldr	r0, [r0, #8]
 8009f48:	3800      	subs	r0, #0
 8009f4a:	bf18      	it	ne
 8009f4c:	2001      	movne	r0, #1
 8009f4e:	4770      	bx	lr
 8009f50:	4618      	mov	r0, r3
 8009f52:	4770      	bx	lr

08009f54 <__rcutils_format_error_string>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	460f      	mov	r7, r1
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f62:	4638      	mov	r0, r7
 8009f64:	f00a f93b 	bl	80141de <strnlen>
 8009f68:	f240 39ff 	movw	r9, #1023	; 0x3ff
 8009f6c:	4548      	cmp	r0, r9
 8009f6e:	bf28      	it	cs
 8009f70:	4648      	movcs	r0, r9
 8009f72:	4605      	mov	r5, r0
 8009f74:	4639      	mov	r1, r7
 8009f76:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 8009f7a:	462a      	mov	r2, r5
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f009 ff5f 	bl	8013e40 <memmove>
 8009f82:	2c05      	cmp	r4, #5
 8009f84:	46a0      	mov	r8, r4
 8009f86:	bf28      	it	cs
 8009f88:	f04f 0805 	movcs.w	r8, #5
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4544      	cmp	r4, r8
 8009f90:	bf98      	it	ls
 8009f92:	eba9 0805 	subls.w	r8, r9, r5
 8009f96:	5573      	strb	r3, [r6, r5]
 8009f98:	442e      	add	r6, r5
 8009f9a:	2500      	movs	r5, #0
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	4947      	ldr	r1, [pc, #284]	; (800a0c0 <__rcutils_format_error_string+0x16c>)
 8009fa2:	eba4 0408 	sub.w	r4, r4, r8
 8009fa6:	f507 7a40 	add.w	sl, r7, #768	; 0x300
 8009faa:	f009 ff3b 	bl	8013e24 <memcpy>
 8009fae:	f806 5008 	strb.w	r5, [r6, r8]
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	f00a f912 	bl	80141de <strnlen>
 8009fba:	4284      	cmp	r4, r0
 8009fbc:	4683      	mov	fp, r0
 8009fbe:	4446      	add	r6, r8
 8009fc0:	d96b      	bls.n	800a09a <__rcutils_format_error_string+0x146>
 8009fc2:	1a24      	subs	r4, r4, r0
 8009fc4:	2c01      	cmp	r4, #1
 8009fc6:	46a1      	mov	r9, r4
 8009fc8:	bf28      	it	cs
 8009fca:	f04f 0901 	movcs.w	r9, #1
 8009fce:	4602      	mov	r2, r0
 8009fd0:	4651      	mov	r1, sl
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f009 ff34 	bl	8013e40 <memmove>
 8009fd8:	454c      	cmp	r4, r9
 8009fda:	eb06 030b 	add.w	r3, r6, fp
 8009fde:	f806 500b 	strb.w	r5, [r6, fp]
 8009fe2:	bf88      	it	hi
 8009fe4:	eba4 0809 	subhi.w	r8, r4, r9
 8009fe8:	d960      	bls.n	800a0ac <__rcutils_format_error_string+0x158>
 8009fea:	464a      	mov	r2, r9
 8009fec:	4618      	mov	r0, r3
 8009fee:	4935      	ldr	r1, [pc, #212]	; (800a0c4 <__rcutils_format_error_string+0x170>)
 8009ff0:	f009 ff18 	bl	8013e24 <memcpy>
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	f800 6009 	strb.w	r6, [r0, r9]
 8009ffa:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 8009ffe:	ea54 0305 	orrs.w	r3, r4, r5
 800a002:	4481      	add	r9, r0
 800a004:	d057      	beq.n	800a0b6 <__rcutils_format_error_string+0x162>
 800a006:	466f      	mov	r7, sp
 800a008:	46ba      	mov	sl, r7
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	220a      	movs	r2, #10
 800a010:	2300      	movs	r3, #0
 800a012:	f7f6 fbf3 	bl	80007fc <__aeabi_uldivmod>
 800a016:	3230      	adds	r2, #48	; 0x30
 800a018:	2300      	movs	r3, #0
 800a01a:	4620      	mov	r0, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	f80a 2b01 	strb.w	r2, [sl], #1
 800a022:	220a      	movs	r2, #10
 800a024:	f7f6 fbea 	bl	80007fc <__aeabi_uldivmod>
 800a028:	462b      	mov	r3, r5
 800a02a:	4622      	mov	r2, r4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	bf08      	it	eq
 800a030:	2a0a      	cmpeq	r2, #10
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	f106 0601 	add.w	r6, r6, #1
 800a03a:	d2e6      	bcs.n	800a00a <__rcutils_format_error_string+0xb6>
 800a03c:	2300      	movs	r3, #0
 800a03e:	aa06      	add	r2, sp, #24
 800a040:	4416      	add	r6, r2
 800a042:	2115      	movs	r1, #21
 800a044:	4638      	mov	r0, r7
 800a046:	f806 3c18 	strb.w	r3, [r6, #-24]
 800a04a:	f00a f8c8 	bl	80141de <strnlen>
 800a04e:	2801      	cmp	r0, #1
 800a050:	d90f      	bls.n	800a072 <__rcutils_format_error_string+0x11e>
 800a052:	463a      	mov	r2, r7
 800a054:	1e43      	subs	r3, r0, #1
 800a056:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800a05a:	443b      	add	r3, r7
 800a05c:	4408      	add	r0, r1
 800a05e:	7811      	ldrb	r1, [r2, #0]
 800a060:	781c      	ldrb	r4, [r3, #0]
 800a062:	f802 4b01 	strb.w	r4, [r2], #1
 800a066:	f803 1901 	strb.w	r1, [r3], #-1
 800a06a:	1ac4      	subs	r4, r0, r3
 800a06c:	1a81      	subs	r1, r0, r2
 800a06e:	428c      	cmp	r4, r1
 800a070:	d3f5      	bcc.n	800a05e <__rcutils_format_error_string+0x10a>
 800a072:	4641      	mov	r1, r8
 800a074:	4638      	mov	r0, r7
 800a076:	f00a f8b2 	bl	80141de <strnlen>
 800a07a:	4604      	mov	r4, r0
 800a07c:	4540      	cmp	r0, r8
 800a07e:	bf28      	it	cs
 800a080:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 800a084:	4639      	mov	r1, r7
 800a086:	4622      	mov	r2, r4
 800a088:	4648      	mov	r0, r9
 800a08a:	f009 fecb 	bl	8013e24 <memcpy>
 800a08e:	2300      	movs	r3, #0
 800a090:	f809 3004 	strb.w	r3, [r9, r4]
 800a094:	b007      	add	sp, #28
 800a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09a:	3c01      	subs	r4, #1
 800a09c:	4622      	mov	r2, r4
 800a09e:	4651      	mov	r1, sl
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f009 fecd 	bl	8013e40 <memmove>
 800a0a6:	1933      	adds	r3, r6, r4
 800a0a8:	5535      	strb	r5, [r6, r4]
 800a0aa:	2401      	movs	r4, #1
 800a0ac:	f04f 0801 	mov.w	r8, #1
 800a0b0:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800a0b4:	e799      	b.n	8009fea <__rcutils_format_error_string+0x96>
 800a0b6:	2330      	movs	r3, #48	; 0x30
 800a0b8:	466f      	mov	r7, sp
 800a0ba:	f8ad 3000 	strh.w	r3, [sp]
 800a0be:	e7d8      	b.n	800a072 <__rcutils_format_error_string+0x11e>
 800a0c0:	08016404 	.word	0x08016404
 800a0c4:	0801640c 	.word	0x0801640c

0800a0c8 <rcutils_get_error_string>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <rcutils_get_error_string+0x3c>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	b18b      	cbz	r3, 800a0f6 <rcutils_get_error_string+0x2e>
 800a0d2:	4d0d      	ldr	r5, [pc, #52]	; (800a108 <rcutils_get_error_string+0x40>)
 800a0d4:	782b      	ldrb	r3, [r5, #0]
 800a0d6:	b13b      	cbz	r3, 800a0e8 <rcutils_get_error_string+0x20>
 800a0d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0dc:	4620      	mov	r0, r4
 800a0de:	490b      	ldr	r1, [pc, #44]	; (800a10c <rcutils_get_error_string+0x44>)
 800a0e0:	f009 fea0 	bl	8013e24 <memcpy>
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	4909      	ldr	r1, [pc, #36]	; (800a110 <rcutils_get_error_string+0x48>)
 800a0ea:	4808      	ldr	r0, [pc, #32]	; (800a10c <rcutils_get_error_string+0x44>)
 800a0ec:	f7ff ff32 	bl	8009f54 <__rcutils_format_error_string>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	702b      	strb	r3, [r5, #0]
 800a0f4:	e7f0      	b.n	800a0d8 <rcutils_get_error_string+0x10>
 800a0f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0fa:	4906      	ldr	r1, [pc, #24]	; (800a114 <rcutils_get_error_string+0x4c>)
 800a0fc:	f009 fe92 	bl	8013e24 <memcpy>
 800a100:	4620      	mov	r0, r4
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20006528 	.word	0x20006528
 800a108:	20006529 	.word	0x20006529
 800a10c:	200080d0 	.word	0x200080d0
 800a110:	200084d0 	.word	0x200084d0
 800a114:	08015da8 	.word	0x08015da8

0800a118 <rcutils_reset_error>:
 800a118:	b510      	push	{r4, lr}
 800a11a:	2400      	movs	r4, #0
 800a11c:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a120:	4621      	mov	r1, r4
 800a122:	4807      	ldr	r0, [pc, #28]	; (800a140 <rcutils_reset_error+0x28>)
 800a124:	f009 fea6 	bl	8013e74 <memset>
 800a128:	4b06      	ldr	r3, [pc, #24]	; (800a144 <rcutils_reset_error+0x2c>)
 800a12a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a12e:	4906      	ldr	r1, [pc, #24]	; (800a148 <rcutils_reset_error+0x30>)
 800a130:	4806      	ldr	r0, [pc, #24]	; (800a14c <rcutils_reset_error+0x34>)
 800a132:	701c      	strb	r4, [r3, #0]
 800a134:	f009 fe76 	bl	8013e24 <memcpy>
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <rcutils_reset_error+0x38>)
 800a13a:	701c      	strb	r4, [r3, #0]
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	bf00      	nop
 800a140:	200084d0 	.word	0x200084d0
 800a144:	20006529 	.word	0x20006529
 800a148:	080155a8 	.word	0x080155a8
 800a14c:	200080d0 	.word	0x200080d0
 800a150:	20006528 	.word	0x20006528

0800a154 <rcutils_get_zero_initialized_string_map>:
 800a154:	2000      	movs	r0, #0
 800a156:	4b01      	ldr	r3, [pc, #4]	; (800a15c <rcutils_get_zero_initialized_string_map+0x8>)
 800a158:	6018      	str	r0, [r3, #0]
 800a15a:	4770      	bx	lr
 800a15c:	2000652c 	.word	0x2000652c

0800a160 <rcutils_string_map_reserve>:
 800a160:	2800      	cmp	r0, #0
 800a162:	d05d      	beq.n	800a220 <rcutils_string_map_reserve+0xc0>
 800a164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a168:	6805      	ldr	r5, [r0, #0]
 800a16a:	4606      	mov	r6, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	b12d      	cbz	r5, 800a17c <rcutils_string_map_reserve+0x1c>
 800a170:	68eb      	ldr	r3, [r5, #12]
 800a172:	42a3      	cmp	r3, r4
 800a174:	d905      	bls.n	800a182 <rcutils_string_map_reserve+0x22>
 800a176:	461c      	mov	r4, r3
 800a178:	2d00      	cmp	r5, #0
 800a17a:	d1f9      	bne.n	800a170 <rcutils_string_map_reserve+0x10>
 800a17c:	201f      	movs	r0, #31
 800a17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a182:	68ab      	ldr	r3, [r5, #8]
 800a184:	42a3      	cmp	r3, r4
 800a186:	d047      	beq.n	800a218 <rcutils_string_map_reserve+0xb8>
 800a188:	6a2f      	ldr	r7, [r5, #32]
 800a18a:	2c00      	cmp	r4, #0
 800a18c:	d034      	beq.n	800a1f8 <rcutils_string_map_reserve+0x98>
 800a18e:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a192:	d243      	bcs.n	800a21c <rcutils_string_map_reserve+0xbc>
 800a194:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800a198:	4641      	mov	r1, r8
 800a19a:	463a      	mov	r2, r7
 800a19c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800a1a0:	6828      	ldr	r0, [r5, #0]
 800a1a2:	47c8      	blx	r9
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d039      	beq.n	800a21c <rcutils_string_map_reserve+0xbc>
 800a1a8:	6833      	ldr	r3, [r6, #0]
 800a1aa:	463a      	mov	r2, r7
 800a1ac:	6018      	str	r0, [r3, #0]
 800a1ae:	4641      	mov	r1, r8
 800a1b0:	6858      	ldr	r0, [r3, #4]
 800a1b2:	47c8      	blx	r9
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	b388      	cbz	r0, 800a21c <rcutils_string_map_reserve+0xbc>
 800a1b8:	6835      	ldr	r5, [r6, #0]
 800a1ba:	68aa      	ldr	r2, [r5, #8]
 800a1bc:	6068      	str	r0, [r5, #4]
 800a1be:	42a2      	cmp	r2, r4
 800a1c0:	d226      	bcs.n	800a210 <rcutils_string_map_reserve+0xb0>
 800a1c2:	682e      	ldr	r6, [r5, #0]
 800a1c4:	eb00 0c08 	add.w	ip, r0, r8
 800a1c8:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800a1cc:	4560      	cmp	r0, ip
 800a1ce:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800a1d2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800a1d6:	d203      	bcs.n	800a1e0 <rcutils_string_map_reserve+0x80>
 800a1d8:	eb06 0c08 	add.w	ip, r6, r8
 800a1dc:	4567      	cmp	r7, ip
 800a1de:	d321      	bcc.n	800a224 <rcutils_string_map_reserve+0xc4>
 800a1e0:	1aa2      	subs	r2, r4, r2
 800a1e2:	0096      	lsls	r6, r2, #2
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	f009 fe44 	bl	8013e74 <memset>
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	f009 fe3f 	bl	8013e74 <memset>
 800a1f6:	e00b      	b.n	800a210 <rcutils_string_map_reserve+0xb0>
 800a1f8:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800a1fc:	6828      	ldr	r0, [r5, #0]
 800a1fe:	4639      	mov	r1, r7
 800a200:	47c0      	blx	r8
 800a202:	6833      	ldr	r3, [r6, #0]
 800a204:	4639      	mov	r1, r7
 800a206:	6858      	ldr	r0, [r3, #4]
 800a208:	601c      	str	r4, [r3, #0]
 800a20a:	47c0      	blx	r8
 800a20c:	6835      	ldr	r5, [r6, #0]
 800a20e:	606c      	str	r4, [r5, #4]
 800a210:	2000      	movs	r0, #0
 800a212:	60ac      	str	r4, [r5, #8]
 800a214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a218:	2000      	movs	r0, #0
 800a21a:	e7b0      	b.n	800a17e <rcutils_string_map_reserve+0x1e>
 800a21c:	200a      	movs	r0, #10
 800a21e:	e7ae      	b.n	800a17e <rcutils_string_map_reserve+0x1e>
 800a220:	200b      	movs	r0, #11
 800a222:	4770      	bx	lr
 800a224:	2000      	movs	r0, #0
 800a226:	3904      	subs	r1, #4
 800a228:	1f32      	subs	r2, r6, #4
 800a22a:	440b      	add	r3, r1
 800a22c:	4490      	add	r8, r2
 800a22e:	4431      	add	r1, r6
 800a230:	f841 0f04 	str.w	r0, [r1, #4]!
 800a234:	4541      	cmp	r1, r8
 800a236:	f843 0f04 	str.w	r0, [r3, #4]!
 800a23a:	d1f9      	bne.n	800a230 <rcutils_string_map_reserve+0xd0>
 800a23c:	e7e8      	b.n	800a210 <rcutils_string_map_reserve+0xb0>
 800a23e:	bf00      	nop

0800a240 <rcutils_string_map_init>:
 800a240:	b082      	sub	sp, #8
 800a242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a244:	ac06      	add	r4, sp, #24
 800a246:	e884 000c 	stmia.w	r4, {r2, r3}
 800a24a:	b370      	cbz	r0, 800a2aa <rcutils_string_map_init+0x6a>
 800a24c:	6806      	ldr	r6, [r0, #0]
 800a24e:	4604      	mov	r4, r0
 800a250:	b12e      	cbz	r6, 800a25e <rcutils_string_map_init+0x1e>
 800a252:	251e      	movs	r5, #30
 800a254:	4628      	mov	r0, r5
 800a256:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a25a:	b002      	add	sp, #8
 800a25c:	4770      	bx	lr
 800a25e:	a806      	add	r0, sp, #24
 800a260:	460d      	mov	r5, r1
 800a262:	f7ff fe69 	bl	8009f38 <rcutils_allocator_is_valid>
 800a266:	b300      	cbz	r0, 800a2aa <rcutils_string_map_init+0x6a>
 800a268:	2024      	movs	r0, #36	; 0x24
 800a26a:	9b06      	ldr	r3, [sp, #24]
 800a26c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a26e:	4798      	blx	r3
 800a270:	6020      	str	r0, [r4, #0]
 800a272:	b300      	cbz	r0, 800a2b6 <rcutils_string_map_init+0x76>
 800a274:	f100 0710 	add.w	r7, r0, #16
 800a278:	f10d 0c18 	add.w	ip, sp, #24
 800a27c:	e9c0 6600 	strd	r6, r6, [r0]
 800a280:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800a284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a288:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a28a:	f8dc 3000 	ldr.w	r3, [ip]
 800a28e:	4629      	mov	r1, r5
 800a290:	4620      	mov	r0, r4
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	f7ff ff64 	bl	800a160 <rcutils_string_map_reserve>
 800a298:	4605      	mov	r5, r0
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d0da      	beq.n	800a254 <rcutils_string_map_init+0x14>
 800a29e:	9b07      	ldr	r3, [sp, #28]
 800a2a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2a2:	6820      	ldr	r0, [r4, #0]
 800a2a4:	4798      	blx	r3
 800a2a6:	6026      	str	r6, [r4, #0]
 800a2a8:	e7d4      	b.n	800a254 <rcutils_string_map_init+0x14>
 800a2aa:	250b      	movs	r5, #11
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2b2:	b002      	add	sp, #8
 800a2b4:	4770      	bx	lr
 800a2b6:	250a      	movs	r5, #10
 800a2b8:	e7cc      	b.n	800a254 <rcutils_string_map_init+0x14>
 800a2ba:	bf00      	nop

0800a2bc <rcutils_string_map_fini>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d036      	beq.n	800a332 <rcutils_string_map_fini+0x76>
 800a2c4:	6804      	ldr	r4, [r0, #0]
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	d02f      	beq.n	800a32c <rcutils_string_map_fini+0x70>
 800a2cc:	68a3      	ldr	r3, [r4, #8]
 800a2ce:	b313      	cbz	r3, 800a316 <rcutils_string_map_fini+0x5a>
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	46a8      	mov	r8, r5
 800a2d4:	e017      	b.n	800a306 <rcutils_string_map_fini+0x4a>
 800a2d6:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800a2da:	6967      	ldr	r7, [r4, #20]
 800a2dc:	4649      	mov	r1, r9
 800a2de:	47b8      	blx	r7
 800a2e0:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2e4:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800a2e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	47b8      	blx	r7
 800a2f0:	68e3      	ldr	r3, [r4, #12]
 800a2f2:	6862      	ldr	r2, [r4, #4]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800a2fa:	60e3      	str	r3, [r4, #12]
 800a2fc:	6834      	ldr	r4, [r6, #0]
 800a2fe:	3501      	adds	r5, #1
 800a300:	68a3      	ldr	r3, [r4, #8]
 800a302:	429d      	cmp	r5, r3
 800a304:	d207      	bcs.n	800a316 <rcutils_string_map_fini+0x5a>
 800a306:	6822      	ldr	r2, [r4, #0]
 800a308:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1e2      	bne.n	800a2d6 <rcutils_string_map_fini+0x1a>
 800a310:	3501      	adds	r5, #1
 800a312:	429d      	cmp	r5, r3
 800a314:	d3f8      	bcc.n	800a308 <rcutils_string_map_fini+0x4c>
 800a316:	2100      	movs	r1, #0
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ff21 	bl	800a160 <rcutils_string_map_reserve>
 800a31e:	4604      	mov	r4, r0
 800a320:	b920      	cbnz	r0, 800a32c <rcutils_string_map_fini+0x70>
 800a322:	6830      	ldr	r0, [r6, #0]
 800a324:	6943      	ldr	r3, [r0, #20]
 800a326:	6a01      	ldr	r1, [r0, #32]
 800a328:	4798      	blx	r3
 800a32a:	6034      	str	r4, [r6, #0]
 800a32c:	4620      	mov	r0, r4
 800a32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a332:	240b      	movs	r4, #11
 800a334:	4620      	mov	r0, r4
 800a336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a33a:	bf00      	nop

0800a33c <rcutils_string_map_getn>:
 800a33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	b310      	cbz	r0, 800a388 <rcutils_string_map_getn+0x4c>
 800a342:	6804      	ldr	r4, [r0, #0]
 800a344:	b30c      	cbz	r4, 800a38a <rcutils_string_map_getn+0x4e>
 800a346:	460d      	mov	r5, r1
 800a348:	b1f1      	cbz	r1, 800a388 <rcutils_string_map_getn+0x4c>
 800a34a:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800a34e:	6827      	ldr	r7, [r4, #0]
 800a350:	f1ba 0f00 	cmp.w	sl, #0
 800a354:	d018      	beq.n	800a388 <rcutils_string_map_getn+0x4c>
 800a356:	4690      	mov	r8, r2
 800a358:	2600      	movs	r6, #0
 800a35a:	3f04      	subs	r7, #4
 800a35c:	f857 9f04 	ldr.w	r9, [r7, #4]!
 800a360:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800a364:	3601      	adds	r6, #1
 800a366:	f1b9 0f00 	cmp.w	r9, #0
 800a36a:	d00b      	beq.n	800a384 <rcutils_string_map_getn+0x48>
 800a36c:	4648      	mov	r0, r9
 800a36e:	f7f5 ff69 	bl	8000244 <strlen>
 800a372:	4540      	cmp	r0, r8
 800a374:	4602      	mov	r2, r0
 800a376:	4649      	mov	r1, r9
 800a378:	bf38      	it	cc
 800a37a:	4642      	movcc	r2, r8
 800a37c:	4628      	mov	r0, r5
 800a37e:	f009 ff1c 	bl	80141ba <strncmp>
 800a382:	b128      	cbz	r0, 800a390 <rcutils_string_map_getn+0x54>
 800a384:	45b2      	cmp	sl, r6
 800a386:	d1e9      	bne.n	800a35c <rcutils_string_map_getn+0x20>
 800a388:	2400      	movs	r4, #0
 800a38a:	4620      	mov	r0, r4
 800a38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	f853 400b 	ldr.w	r4, [r3, fp]
 800a396:	4620      	mov	r0, r4
 800a398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a39c <rcutils_system_time_now>:
 800a39c:	b310      	cbz	r0, 800a3e4 <rcutils_system_time_now+0x48>
 800a39e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	4669      	mov	r1, sp
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	f7f7 fb86 	bl	8001ab8 <clock_gettime>
 800a3ac:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a3b0:	2e00      	cmp	r6, #0
 800a3b2:	f177 0300 	sbcs.w	r3, r7, #0
 800a3b6:	db12      	blt.n	800a3de <rcutils_system_time_now+0x42>
 800a3b8:	9902      	ldr	r1, [sp, #8]
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	db0c      	blt.n	800a3d8 <rcutils_system_time_now+0x3c>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	4d09      	ldr	r5, [pc, #36]	; (800a3e8 <rcutils_system_time_now+0x4c>)
 800a3c2:	fba6 2305 	umull	r2, r3, r6, r5
 800a3c6:	fb05 3307 	mla	r3, r5, r7, r3
 800a3ca:	1852      	adds	r2, r2, r1
 800a3cc:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800a3d0:	e9c4 2300 	strd	r2, r3, [r4]
 800a3d4:	b005      	add	sp, #20
 800a3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d8:	ea56 0307 	orrs.w	r3, r6, r7
 800a3dc:	d1ef      	bne.n	800a3be <rcutils_system_time_now+0x22>
 800a3de:	2002      	movs	r0, #2
 800a3e0:	b005      	add	sp, #20
 800a3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3e4:	200b      	movs	r0, #11
 800a3e6:	4770      	bx	lr
 800a3e8:	3b9aca00 	.word	0x3b9aca00

0800a3ec <rcutils_steady_time_now>:
 800a3ec:	b310      	cbz	r0, 800a434 <rcutils_steady_time_now+0x48>
 800a3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f0:	b085      	sub	sp, #20
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4669      	mov	r1, sp
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f7f7 fb5e 	bl	8001ab8 <clock_gettime>
 800a3fc:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a400:	2e00      	cmp	r6, #0
 800a402:	f177 0300 	sbcs.w	r3, r7, #0
 800a406:	db12      	blt.n	800a42e <rcutils_steady_time_now+0x42>
 800a408:	9902      	ldr	r1, [sp, #8]
 800a40a:	2900      	cmp	r1, #0
 800a40c:	db0c      	blt.n	800a428 <rcutils_steady_time_now+0x3c>
 800a40e:	2000      	movs	r0, #0
 800a410:	4d09      	ldr	r5, [pc, #36]	; (800a438 <rcutils_steady_time_now+0x4c>)
 800a412:	fba6 2305 	umull	r2, r3, r6, r5
 800a416:	fb05 3307 	mla	r3, r5, r7, r3
 800a41a:	1852      	adds	r2, r2, r1
 800a41c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800a420:	e9c4 2300 	strd	r2, r3, [r4]
 800a424:	b005      	add	sp, #20
 800a426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a428:	ea56 0307 	orrs.w	r3, r6, r7
 800a42c:	d1ef      	bne.n	800a40e <rcutils_steady_time_now+0x22>
 800a42e:	2002      	movs	r0, #2
 800a430:	b005      	add	sp, #20
 800a432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a434:	200b      	movs	r0, #11
 800a436:	4770      	bx	lr
 800a438:	3b9aca00 	.word	0x3b9aca00

0800a43c <rmw_get_zero_initialized_init_options>:
 800a43c:	b510      	push	{r4, lr}
 800a43e:	4604      	mov	r4, r0
 800a440:	2238      	movs	r2, #56	; 0x38
 800a442:	2100      	movs	r1, #0
 800a444:	f009 fd16 	bl	8013e74 <memset>
 800a448:	f104 0010 	add.w	r0, r4, #16
 800a44c:	f000 f808 	bl	800a460 <rmw_get_default_security_options>
 800a450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a454:	4620      	mov	r0, r4
 800a456:	60e3      	str	r3, [r4, #12]
 800a458:	bd10      	pop	{r4, pc}
 800a45a:	bf00      	nop

0800a45c <rmw_get_default_publisher_options>:
 800a45c:	2000      	movs	r0, #0
 800a45e:	4770      	bx	lr

0800a460 <rmw_get_default_security_options>:
 800a460:	2200      	movs	r2, #0
 800a462:	7002      	strb	r2, [r0, #0]
 800a464:	6042      	str	r2, [r0, #4]
 800a466:	4770      	bx	lr

0800a468 <rmw_get_default_subscription_options>:
 800a468:	2200      	movs	r2, #0
 800a46a:	6002      	str	r2, [r0, #0]
 800a46c:	7102      	strb	r2, [r0, #4]
 800a46e:	4770      	bx	lr

0800a470 <rmw_get_zero_initialized_message_info>:
 800a470:	b470      	push	{r4, r5, r6}
 800a472:	4604      	mov	r4, r0
 800a474:	4606      	mov	r6, r0
 800a476:	4d06      	ldr	r5, [pc, #24]	; (800a490 <rmw_get_zero_initialized_message_info+0x20>)
 800a478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a47a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a47c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a47e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a480:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a488:	4630      	mov	r0, r6
 800a48a:	bc70      	pop	{r4, r5, r6}
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	080161a8 	.word	0x080161a8

0800a494 <rmw_validate_full_topic_name>:
 800a494:	2800      	cmp	r0, #0
 800a496:	d062      	beq.n	800a55e <rmw_validate_full_topic_name+0xca>
 800a498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a49c:	460d      	mov	r5, r1
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d05f      	beq.n	800a562 <rmw_validate_full_topic_name+0xce>
 800a4a2:	4616      	mov	r6, r2
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	f7f5 fecd 	bl	8000244 <strlen>
 800a4aa:	b148      	cbz	r0, 800a4c0 <rmw_validate_full_topic_name+0x2c>
 800a4ac:	7823      	ldrb	r3, [r4, #0]
 800a4ae:	2b2f      	cmp	r3, #47	; 0x2f
 800a4b0:	d00d      	beq.n	800a4ce <rmw_validate_full_topic_name+0x3a>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	602b      	str	r3, [r5, #0]
 800a4b6:	b13e      	cbz	r6, 800a4c8 <rmw_validate_full_topic_name+0x34>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	6030      	str	r0, [r6, #0]
 800a4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	2e00      	cmp	r6, #0
 800a4c6:	d1f7      	bne.n	800a4b8 <rmw_validate_full_topic_name+0x24>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ce:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800a4d2:	f814 300c 	ldrb.w	r3, [r4, ip]
 800a4d6:	2b2f      	cmp	r3, #47	; 0x2f
 800a4d8:	d045      	beq.n	800a566 <rmw_validate_full_topic_name+0xd2>
 800a4da:	4627      	mov	r7, r4
 800a4dc:	1e63      	subs	r3, r4, #1
 800a4de:	eb03 0900 	add.w	r9, r3, r0
 800a4e2:	f1c4 0e01 	rsb	lr, r4, #1
 800a4e6:	eb0e 0803 	add.w	r8, lr, r3
 800a4ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a4ee:	f021 0220 	bic.w	r2, r1, #32
 800a4f2:	3a41      	subs	r2, #65	; 0x41
 800a4f4:	2a19      	cmp	r2, #25
 800a4f6:	f1a1 042f 	sub.w	r4, r1, #47	; 0x2f
 800a4fa:	d90b      	bls.n	800a514 <rmw_validate_full_topic_name+0x80>
 800a4fc:	295f      	cmp	r1, #95	; 0x5f
 800a4fe:	d009      	beq.n	800a514 <rmw_validate_full_topic_name+0x80>
 800a500:	2c0a      	cmp	r4, #10
 800a502:	d907      	bls.n	800a514 <rmw_validate_full_topic_name+0x80>
 800a504:	2304      	movs	r3, #4
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	2e00      	cmp	r6, #0
 800a50a:	d0dd      	beq.n	800a4c8 <rmw_validate_full_topic_name+0x34>
 800a50c:	2000      	movs	r0, #0
 800a50e:	f8c6 8000 	str.w	r8, [r6]
 800a512:	e7d3      	b.n	800a4bc <rmw_validate_full_topic_name+0x28>
 800a514:	454b      	cmp	r3, r9
 800a516:	d1e6      	bne.n	800a4e6 <rmw_validate_full_topic_name+0x52>
 800a518:	2300      	movs	r3, #0
 800a51a:	f8df e084 	ldr.w	lr, [pc, #132]	; 800a5a0 <rmw_validate_full_topic_name+0x10c>
 800a51e:	f10c 0801 	add.w	r8, ip, #1
 800a522:	e005      	b.n	800a530 <rmw_validate_full_topic_name+0x9c>
 800a524:	4611      	mov	r1, r2
 800a526:	4288      	cmp	r0, r1
 800a528:	4613      	mov	r3, r2
 800a52a:	f107 0701 	add.w	r7, r7, #1
 800a52e:	d925      	bls.n	800a57c <rmw_validate_full_topic_name+0xe8>
 800a530:	459c      	cmp	ip, r3
 800a532:	f103 0201 	add.w	r2, r3, #1
 800a536:	d01d      	beq.n	800a574 <rmw_validate_full_topic_name+0xe0>
 800a538:	7839      	ldrb	r1, [r7, #0]
 800a53a:	292f      	cmp	r1, #47	; 0x2f
 800a53c:	d1f2      	bne.n	800a524 <rmw_validate_full_topic_name+0x90>
 800a53e:	787c      	ldrb	r4, [r7, #1]
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	2c2f      	cmp	r4, #47	; 0x2f
 800a544:	4611      	mov	r1, r2
 800a546:	d026      	beq.n	800a596 <rmw_validate_full_topic_name+0x102>
 800a548:	f814 300e 	ldrb.w	r3, [r4, lr]
 800a54c:	075b      	lsls	r3, r3, #29
 800a54e:	d5ea      	bpl.n	800a526 <rmw_validate_full_topic_name+0x92>
 800a550:	2306      	movs	r3, #6
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	2e00      	cmp	r6, #0
 800a556:	d0b7      	beq.n	800a4c8 <rmw_validate_full_topic_name+0x34>
 800a558:	2000      	movs	r0, #0
 800a55a:	6032      	str	r2, [r6, #0]
 800a55c:	e7ae      	b.n	800a4bc <rmw_validate_full_topic_name+0x28>
 800a55e:	200b      	movs	r0, #11
 800a560:	4770      	bx	lr
 800a562:	200b      	movs	r0, #11
 800a564:	e7aa      	b.n	800a4bc <rmw_validate_full_topic_name+0x28>
 800a566:	2303      	movs	r3, #3
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	2e00      	cmp	r6, #0
 800a56c:	d0ac      	beq.n	800a4c8 <rmw_validate_full_topic_name+0x34>
 800a56e:	f8c6 c000 	str.w	ip, [r6]
 800a572:	e7a9      	b.n	800a4c8 <rmw_validate_full_topic_name+0x34>
 800a574:	4641      	mov	r1, r8
 800a576:	f10c 0201 	add.w	r2, ip, #1
 800a57a:	e7d4      	b.n	800a526 <rmw_validate_full_topic_name+0x92>
 800a57c:	28f7      	cmp	r0, #247	; 0xf7
 800a57e:	d802      	bhi.n	800a586 <rmw_validate_full_topic_name+0xf2>
 800a580:	2000      	movs	r0, #0
 800a582:	6028      	str	r0, [r5, #0]
 800a584:	e79a      	b.n	800a4bc <rmw_validate_full_topic_name+0x28>
 800a586:	2307      	movs	r3, #7
 800a588:	602b      	str	r3, [r5, #0]
 800a58a:	2e00      	cmp	r6, #0
 800a58c:	d09c      	beq.n	800a4c8 <rmw_validate_full_topic_name+0x34>
 800a58e:	23f6      	movs	r3, #246	; 0xf6
 800a590:	2000      	movs	r0, #0
 800a592:	6033      	str	r3, [r6, #0]
 800a594:	e792      	b.n	800a4bc <rmw_validate_full_topic_name+0x28>
 800a596:	2305      	movs	r3, #5
 800a598:	602b      	str	r3, [r5, #0]
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d1dc      	bne.n	800a558 <rmw_validate_full_topic_name+0xc4>
 800a59e:	e793      	b.n	800a4c8 <rmw_validate_full_topic_name+0x34>
 800a5a0:	08016b61 	.word	0x08016b61

0800a5a4 <rmw_uros_set_custom_transport>:
 800a5a4:	b4f0      	push	{r4, r5, r6, r7}
 800a5a6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800a5aa:	b16a      	cbz	r2, 800a5c8 <rmw_uros_set_custom_transport+0x24>
 800a5ac:	b163      	cbz	r3, 800a5c8 <rmw_uros_set_custom_transport+0x24>
 800a5ae:	b15e      	cbz	r6, 800a5c8 <rmw_uros_set_custom_transport+0x24>
 800a5b0:	b157      	cbz	r7, 800a5c8 <rmw_uros_set_custom_transport+0x24>
 800a5b2:	4605      	mov	r5, r0
 800a5b4:	4c06      	ldr	r4, [pc, #24]	; (800a5d0 <rmw_uros_set_custom_transport+0x2c>)
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a5bc:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800a5c0:	7025      	strb	r5, [r4, #0]
 800a5c2:	6167      	str	r7, [r4, #20]
 800a5c4:	bcf0      	pop	{r4, r5, r6, r7}
 800a5c6:	4770      	bx	lr
 800a5c8:	200b      	movs	r0, #11
 800a5ca:	bcf0      	pop	{r4, r5, r6, r7}
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	200088c0 	.word	0x200088c0

0800a5d4 <rmw_init_options_init>:
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5da:	ad09      	add	r5, sp, #36	; 0x24
 800a5dc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800a5e0:	b130      	cbz	r0, 800a5f0 <rmw_init_options_init+0x1c>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	f7ff fca7 	bl	8009f38 <rcutils_allocator_is_valid>
 800a5ea:	b108      	cbz	r0, 800a5f0 <rmw_init_options_init+0x1c>
 800a5ec:	68a3      	ldr	r3, [r4, #8]
 800a5ee:	b123      	cbz	r3, 800a5fa <rmw_init_options_init+0x26>
 800a5f0:	200b      	movs	r0, #11
 800a5f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f6:	b004      	add	sp, #16
 800a5f8:	4770      	bx	lr
 800a5fa:	f04f 0800 	mov.w	r8, #0
 800a5fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a600:	f04f 0900 	mov.w	r9, #0
 800a604:	4e1a      	ldr	r6, [pc, #104]	; (800a670 <rmw_init_options_init+0x9c>)
 800a606:	e9c4 8900 	strd	r8, r9, [r4]
 800a60a:	6837      	ldr	r7, [r6, #0]
 800a60c:	f104 0620 	add.w	r6, r4, #32
 800a610:	60a7      	str	r7, [r4, #8]
 800a612:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a614:	682a      	ldr	r2, [r5, #0]
 800a616:	4b17      	ldr	r3, [pc, #92]	; (800a674 <rmw_init_options_init+0xa0>)
 800a618:	6032      	str	r2, [r6, #0]
 800a61a:	4817      	ldr	r0, [pc, #92]	; (800a678 <rmw_init_options_init+0xa4>)
 800a61c:	2203      	movs	r2, #3
 800a61e:	4917      	ldr	r1, [pc, #92]	; (800a67c <rmw_init_options_init+0xa8>)
 800a620:	61e3      	str	r3, [r4, #28]
 800a622:	f000 ff9d 	bl	800b560 <rmw_uxrce_init_init_options_impl_memory>
 800a626:	4814      	ldr	r0, [pc, #80]	; (800a678 <rmw_init_options_init+0xa4>)
 800a628:	f008 f812 	bl	8012650 <get_memory>
 800a62c:	b1e8      	cbz	r0, 800a66a <rmw_init_options_init+0x96>
 800a62e:	4a14      	ldr	r2, [pc, #80]	; (800a680 <rmw_init_options_init+0xac>)
 800a630:	68c3      	ldr	r3, [r0, #12]
 800a632:	6851      	ldr	r1, [r2, #4]
 800a634:	7810      	ldrb	r0, [r2, #0]
 800a636:	6363      	str	r3, [r4, #52]	; 0x34
 800a638:	7418      	strb	r0, [r3, #16]
 800a63a:	6159      	str	r1, [r3, #20]
 800a63c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800a640:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800a644:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800a648:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800a64c:	f004 fbfa 	bl	800ee44 <uxr_nanos>
 800a650:	f009 fce4 	bl	801401c <srand>
 800a654:	f009 fd10 	bl	8014078 <rand>
 800a658:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a65a:	6298      	str	r0, [r3, #40]	; 0x28
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d0f9      	beq.n	800a654 <rmw_init_options_init+0x80>
 800a660:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a664:	2000      	movs	r0, #0
 800a666:	b004      	add	sp, #16
 800a668:	4770      	bx	lr
 800a66a:	2001      	movs	r0, #1
 800a66c:	e7c1      	b.n	800a5f2 <rmw_init_options_init+0x1e>
 800a66e:	bf00      	nop
 800a670:	08016b44 	.word	0x08016b44
 800a674:	08016410 	.word	0x08016410
 800a678:	2000bbdc 	.word	0x2000bbdc
 800a67c:	2000b830 	.word	0x2000b830
 800a680:	200088c0 	.word	0x200088c0

0800a684 <rmw_init_options_copy>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	b158      	cbz	r0, 800a6a0 <rmw_init_options_copy+0x1c>
 800a688:	460d      	mov	r5, r1
 800a68a:	b149      	cbz	r1, 800a6a0 <rmw_init_options_copy+0x1c>
 800a68c:	4604      	mov	r4, r0
 800a68e:	6880      	ldr	r0, [r0, #8]
 800a690:	b120      	cbz	r0, 800a69c <rmw_init_options_copy+0x18>
 800a692:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <rmw_init_options_copy+0x7c>)
 800a694:	6819      	ldr	r1, [r3, #0]
 800a696:	f7f5 fdcb 	bl	8000230 <strcmp>
 800a69a:	bb60      	cbnz	r0, 800a6f6 <rmw_init_options_copy+0x72>
 800a69c:	68ab      	ldr	r3, [r5, #8]
 800a69e:	b113      	cbz	r3, 800a6a6 <rmw_init_options_copy+0x22>
 800a6a0:	260b      	movs	r6, #11
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800a6ae:	681f      	ldr	r7, [r3, #0]
 800a6b0:	685e      	ldr	r6, [r3, #4]
 800a6b2:	6898      	ldr	r0, [r3, #8]
 800a6b4:	68d9      	ldr	r1, [r3, #12]
 800a6b6:	3310      	adds	r3, #16
 800a6b8:	4563      	cmp	r3, ip
 800a6ba:	6017      	str	r7, [r2, #0]
 800a6bc:	6056      	str	r6, [r2, #4]
 800a6be:	6090      	str	r0, [r2, #8]
 800a6c0:	60d1      	str	r1, [r2, #12]
 800a6c2:	f102 0210 	add.w	r2, r2, #16
 800a6c6:	d1f2      	bne.n	800a6ae <rmw_init_options_copy+0x2a>
 800a6c8:	6819      	ldr	r1, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	480d      	ldr	r0, [pc, #52]	; (800a704 <rmw_init_options_copy+0x80>)
 800a6ce:	6011      	str	r1, [r2, #0]
 800a6d0:	6053      	str	r3, [r2, #4]
 800a6d2:	f007 ffbd 	bl	8012650 <get_memory>
 800a6d6:	b188      	cbz	r0, 800a6fc <rmw_init_options_copy+0x78>
 800a6d8:	2600      	movs	r6, #0
 800a6da:	68c3      	ldr	r3, [r0, #12]
 800a6dc:	636b      	str	r3, [r5, #52]	; 0x34
 800a6de:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a6e0:	f103 0410 	add.w	r4, r3, #16
 800a6e4:	3510      	adds	r5, #16
 800a6e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a6ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6f6:	260c      	movs	r6, #12
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fc:	2601      	movs	r6, #1
 800a6fe:	e7d0      	b.n	800a6a2 <rmw_init_options_copy+0x1e>
 800a700:	08016b44 	.word	0x08016b44
 800a704:	2000bbdc 	.word	0x2000bbdc

0800a708 <rmw_init_options_fini>:
 800a708:	2800      	cmp	r0, #0
 800a70a:	d036      	beq.n	800a77a <rmw_init_options_fini+0x72>
 800a70c:	b530      	push	{r4, r5, lr}
 800a70e:	4604      	mov	r4, r0
 800a710:	b08f      	sub	sp, #60	; 0x3c
 800a712:	3020      	adds	r0, #32
 800a714:	f7ff fc10 	bl	8009f38 <rcutils_allocator_is_valid>
 800a718:	b328      	cbz	r0, 800a766 <rmw_init_options_fini+0x5e>
 800a71a:	68a0      	ldr	r0, [r4, #8]
 800a71c:	b120      	cbz	r0, 800a728 <rmw_init_options_fini+0x20>
 800a71e:	4b18      	ldr	r3, [pc, #96]	; (800a780 <rmw_init_options_fini+0x78>)
 800a720:	6819      	ldr	r1, [r3, #0]
 800a722:	f7f5 fd85 	bl	8000230 <strcmp>
 800a726:	bb30      	cbnz	r0, 800a776 <rmw_init_options_fini+0x6e>
 800a728:	4b16      	ldr	r3, [pc, #88]	; (800a784 <rmw_init_options_fini+0x7c>)
 800a72a:	6819      	ldr	r1, [r3, #0]
 800a72c:	b1f9      	cbz	r1, 800a76e <rmw_init_options_fini+0x66>
 800a72e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a730:	e001      	b.n	800a736 <rmw_init_options_fini+0x2e>
 800a732:	6889      	ldr	r1, [r1, #8]
 800a734:	b1d9      	cbz	r1, 800a76e <rmw_init_options_fini+0x66>
 800a736:	68cb      	ldr	r3, [r1, #12]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d1fa      	bne.n	800a732 <rmw_init_options_fini+0x2a>
 800a73c:	466d      	mov	r5, sp
 800a73e:	4811      	ldr	r0, [pc, #68]	; (800a784 <rmw_init_options_fini+0x7c>)
 800a740:	f007 ff96 	bl	8012670 <put_memory>
 800a744:	4668      	mov	r0, sp
 800a746:	f7ff fe79 	bl	800a43c <rmw_get_zero_initialized_init_options>
 800a74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a74e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a756:	2300      	movs	r3, #0
 800a758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a75c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a760:	4618      	mov	r0, r3
 800a762:	b00f      	add	sp, #60	; 0x3c
 800a764:	bd30      	pop	{r4, r5, pc}
 800a766:	230b      	movs	r3, #11
 800a768:	4618      	mov	r0, r3
 800a76a:	b00f      	add	sp, #60	; 0x3c
 800a76c:	bd30      	pop	{r4, r5, pc}
 800a76e:	2301      	movs	r3, #1
 800a770:	4618      	mov	r0, r3
 800a772:	b00f      	add	sp, #60	; 0x3c
 800a774:	bd30      	pop	{r4, r5, pc}
 800a776:	230c      	movs	r3, #12
 800a778:	e7f2      	b.n	800a760 <rmw_init_options_fini+0x58>
 800a77a:	230b      	movs	r3, #11
 800a77c:	4618      	mov	r0, r3
 800a77e:	4770      	bx	lr
 800a780:	08016b44 	.word	0x08016b44
 800a784:	2000bbdc 	.word	0x2000bbdc

0800a788 <rmw_init>:
 800a788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a78c:	b083      	sub	sp, #12
 800a78e:	2800      	cmp	r0, #0
 800a790:	f000 8087 	beq.w	800a8a2 <rmw_init+0x11a>
 800a794:	460e      	mov	r6, r1
 800a796:	2900      	cmp	r1, #0
 800a798:	f000 8083 	beq.w	800a8a2 <rmw_init+0x11a>
 800a79c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a79e:	4605      	mov	r5, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d07e      	beq.n	800a8a2 <rmw_init+0x11a>
 800a7a4:	4b70      	ldr	r3, [pc, #448]	; (800a968 <rmw_init+0x1e0>)
 800a7a6:	6880      	ldr	r0, [r0, #8]
 800a7a8:	f8d3 8000 	ldr.w	r8, [r3]
 800a7ac:	b120      	cbz	r0, 800a7b8 <rmw_init+0x30>
 800a7ae:	4641      	mov	r1, r8
 800a7b0:	f7f5 fd3e 	bl	8000230 <strcmp>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d17e      	bne.n	800a8b6 <rmw_init+0x12e>
 800a7b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7bc:	68e9      	ldr	r1, [r5, #12]
 800a7be:	486b      	ldr	r0, [pc, #428]	; (800a96c <rmw_init+0x1e4>)
 800a7c0:	e9c6 2300 	strd	r2, r3, [r6]
 800a7c4:	61f1      	str	r1, [r6, #28]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	4969      	ldr	r1, [pc, #420]	; (800a970 <rmw_init+0x1e8>)
 800a7ca:	f8c6 8008 	str.w	r8, [r6, #8]
 800a7ce:	f000 fe6d 	bl	800b4ac <rmw_uxrce_init_session_memory>
 800a7d2:	4868      	ldr	r0, [pc, #416]	; (800a974 <rmw_init+0x1ec>)
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	4968      	ldr	r1, [pc, #416]	; (800a978 <rmw_init+0x1f0>)
 800a7d8:	f000 fea4 	bl	800b524 <rmw_uxrce_init_static_input_buffer_memory>
 800a7dc:	4863      	ldr	r0, [pc, #396]	; (800a96c <rmw_init+0x1e4>)
 800a7de:	f007 ff37 	bl	8012650 <get_memory>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d062      	beq.n	800a8ac <rmw_init+0x124>
 800a7e6:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800a7e8:	68c4      	ldr	r4, [r0, #12]
 800a7ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7f0:	7c39      	ldrb	r1, [r7, #16]
 800a7f2:	9001      	str	r0, [sp, #4]
 800a7f4:	6a38      	ldr	r0, [r7, #32]
 800a7f6:	f104 0910 	add.w	r9, r4, #16
 800a7fa:	9000      	str	r0, [sp, #0]
 800a7fc:	4648      	mov	r0, r9
 800a7fe:	f002 fc1b 	bl	800d038 <uxr_set_custom_transport_callbacks>
 800a802:	2700      	movs	r7, #0
 800a804:	f241 5194 	movw	r1, #5524	; 0x1594
 800a808:	f241 5398 	movw	r3, #5528	; 0x1598
 800a80c:	f241 509c 	movw	r0, #5532	; 0x159c
 800a810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a814:	5067      	str	r7, [r4, r1]
 800a816:	50e7      	str	r7, [r4, r3]
 800a818:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800a81c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800a820:	5027      	str	r7, [r4, r0]
 800a822:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800a826:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800a82a:	4854      	ldr	r0, [pc, #336]	; (800a97c <rmw_init+0x1f4>)
 800a82c:	600f      	str	r7, [r1, #0]
 800a82e:	2201      	movs	r2, #1
 800a830:	e9c4 87da 	strd	r8, r7, [r4, #872]	; 0x368
 800a834:	4952      	ldr	r1, [pc, #328]	; (800a980 <rmw_init+0x1f8>)
 800a836:	64b4      	str	r4, [r6, #72]	; 0x48
 800a838:	f000 fe1e 	bl	800b478 <rmw_uxrce_init_node_memory>
 800a83c:	2205      	movs	r2, #5
 800a83e:	4951      	ldr	r1, [pc, #324]	; (800a984 <rmw_init+0x1fc>)
 800a840:	4851      	ldr	r0, [pc, #324]	; (800a988 <rmw_init+0x200>)
 800a842:	f000 fdff 	bl	800b444 <rmw_uxrce_init_subscription_memory>
 800a846:	220a      	movs	r2, #10
 800a848:	4950      	ldr	r1, [pc, #320]	; (800a98c <rmw_init+0x204>)
 800a84a:	4851      	ldr	r0, [pc, #324]	; (800a990 <rmw_init+0x208>)
 800a84c:	f000 fde0 	bl	800b410 <rmw_uxrce_init_publisher_memory>
 800a850:	2201      	movs	r2, #1
 800a852:	4950      	ldr	r1, [pc, #320]	; (800a994 <rmw_init+0x20c>)
 800a854:	4850      	ldr	r0, [pc, #320]	; (800a998 <rmw_init+0x210>)
 800a856:	f000 fda7 	bl	800b3a8 <rmw_uxrce_init_service_memory>
 800a85a:	2201      	movs	r2, #1
 800a85c:	494f      	ldr	r1, [pc, #316]	; (800a99c <rmw_init+0x214>)
 800a85e:	4850      	ldr	r0, [pc, #320]	; (800a9a0 <rmw_init+0x218>)
 800a860:	f000 fdbc 	bl	800b3dc <rmw_uxrce_init_client_memory>
 800a864:	220f      	movs	r2, #15
 800a866:	494f      	ldr	r1, [pc, #316]	; (800a9a4 <rmw_init+0x21c>)
 800a868:	484f      	ldr	r0, [pc, #316]	; (800a9a8 <rmw_init+0x220>)
 800a86a:	f000 fe3f 	bl	800b4ec <rmw_uxrce_init_topic_memory>
 800a86e:	2203      	movs	r2, #3
 800a870:	494e      	ldr	r1, [pc, #312]	; (800a9ac <rmw_init+0x224>)
 800a872:	484f      	ldr	r0, [pc, #316]	; (800a9b0 <rmw_init+0x228>)
 800a874:	f000 fe74 	bl	800b560 <rmw_uxrce_init_init_options_impl_memory>
 800a878:	2204      	movs	r2, #4
 800a87a:	494e      	ldr	r1, [pc, #312]	; (800a9b4 <rmw_init+0x22c>)
 800a87c:	484e      	ldr	r0, [pc, #312]	; (800a9b8 <rmw_init+0x230>)
 800a87e:	f000 fe89 	bl	800b594 <rmw_uxrce_init_wait_set_memory>
 800a882:	2204      	movs	r2, #4
 800a884:	494d      	ldr	r1, [pc, #308]	; (800a9bc <rmw_init+0x234>)
 800a886:	484e      	ldr	r0, [pc, #312]	; (800a9c0 <rmw_init+0x238>)
 800a888:	f000 fea0 	bl	800b5cc <rmw_uxrce_init_guard_condition_memory>
 800a88c:	463a      	mov	r2, r7
 800a88e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800a890:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800a892:	f000 fd51 	bl	800b338 <rmw_uxrce_transport_init>
 800a896:	4607      	mov	r7, r0
 800a898:	b190      	cbz	r0, 800a8c0 <rmw_init+0x138>
 800a89a:	4638      	mov	r0, r7
 800a89c:	b003      	add	sp, #12
 800a89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8a2:	270b      	movs	r7, #11
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	b003      	add	sp, #12
 800a8a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ac:	2701      	movs	r7, #1
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	b003      	add	sp, #12
 800a8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b6:	270c      	movs	r7, #12
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a8c2:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800a8c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800a8ce:	f003 f8c7 	bl	800da60 <uxr_init_session>
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	493b      	ldr	r1, [pc, #236]	; (800a9c4 <rmw_init+0x23c>)
 800a8d8:	f003 f8e4 	bl	800daa4 <uxr_set_topic_callback>
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4628      	mov	r0, r5
 800a8e0:	4939      	ldr	r1, [pc, #228]	; (800a9c8 <rmw_init+0x240>)
 800a8e2:	f003 f8db 	bl	800da9c <uxr_set_status_callback>
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	4938      	ldr	r1, [pc, #224]	; (800a9cc <rmw_init+0x244>)
 800a8ec:	f003 f8de 	bl	800daac <uxr_set_request_callback>
 800a8f0:	463a      	mov	r2, r7
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	4936      	ldr	r1, [pc, #216]	; (800a9d0 <rmw_init+0x248>)
 800a8f6:	f003 f8dd 	bl	800dab4 <uxr_set_reply_callback>
 800a8fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800a8fe:	2304      	movs	r3, #4
 800a900:	0092      	lsls	r2, r2, #2
 800a902:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800a906:	4628      	mov	r0, r5
 800a908:	f003 f9a2 	bl	800dc50 <uxr_create_input_reliable_stream>
 800a90c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800a910:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800a914:	0092      	lsls	r2, r2, #2
 800a916:	2304      	movs	r3, #4
 800a918:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800a91c:	4628      	mov	r0, r5
 800a91e:	f003 f96d 	bl	800dbfc <uxr_create_output_reliable_stream>
 800a922:	4603      	mov	r3, r0
 800a924:	4628      	mov	r0, r5
 800a926:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 800a92a:	f003 f98b 	bl	800dc44 <uxr_create_input_best_effort_stream>
 800a92e:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800a932:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800a936:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800a93a:	4628      	mov	r0, r5
 800a93c:	3114      	adds	r1, #20
 800a93e:	f003 f94b 	bl	800dbd8 <uxr_create_output_best_effort_stream>
 800a942:	4603      	mov	r3, r0
 800a944:	4628      	mov	r0, r5
 800a946:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 800a94a:	f003 f8b7 	bl	800dabc <uxr_create_session>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d1a3      	bne.n	800a89a <rmw_init+0x112>
 800a952:	4648      	mov	r0, r9
 800a954:	f002 fbb0 	bl	800d0b8 <uxr_close_custom_transport>
 800a958:	4621      	mov	r1, r4
 800a95a:	4804      	ldr	r0, [pc, #16]	; (800a96c <rmw_init+0x1e4>)
 800a95c:	f007 fe88 	bl	8012670 <put_memory>
 800a960:	64b7      	str	r7, [r6, #72]	; 0x48
 800a962:	2701      	movs	r7, #1
 800a964:	e799      	b.n	800a89a <rmw_init+0x112>
 800a966:	bf00      	nop
 800a968:	08016b44 	.word	0x08016b44
 800a96c:	2000ba88 	.word	0x2000ba88
 800a970:	2000bcb8 	.word	0x2000bcb8
 800a974:	200088e0 	.word	0x200088e0
 800a978:	200096c0 	.word	0x200096c0
 800a97c:	2000b8b4 	.word	0x2000b8b4
 800a980:	2000ba98 	.word	0x2000ba98
 800a984:	200091e8 	.word	0x200091e8
 800a988:	2000bb4c 	.word	0x2000bb4c
 800a98c:	20008900 	.word	0x20008900
 800a990:	200088f0 	.word	0x200088f0
 800a994:	2000bbf0 	.word	0x2000bbf0
 800a998:	2000bb3c 	.word	0x2000bb3c
 800a99c:	200095f8 	.word	0x200095f8
 800a9a0:	20009170 	.word	0x20009170
 800a9a4:	2000b8c4 	.word	0x2000b8c4
 800a9a8:	2000ba78 	.word	0x2000ba78
 800a9ac:	2000b830 	.word	0x2000b830
 800a9b0:	2000bbdc 	.word	0x2000bbdc
 800a9b4:	2000b7c0 	.word	0x2000b7c0
 800a9b8:	2000d260 	.word	0x2000d260
 800a9bc:	2000bb5c 	.word	0x2000bb5c
 800a9c0:	2000ba68 	.word	0x2000ba68
 800a9c4:	08012489 	.word	0x08012489
 800a9c8:	08012481 	.word	0x08012481
 800a9cc:	0801251d 	.word	0x0801251d
 800a9d0:	080125b9 	.word	0x080125b9

0800a9d4 <rmw_context_fini>:
 800a9d4:	4b17      	ldr	r3, [pc, #92]	; (800aa34 <rmw_context_fini+0x60>)
 800a9d6:	b570      	push	{r4, r5, r6, lr}
 800a9d8:	681c      	ldr	r4, [r3, #0]
 800a9da:	4605      	mov	r5, r0
 800a9dc:	b33c      	cbz	r4, 800aa2e <rmw_context_fini+0x5a>
 800a9de:	2600      	movs	r6, #0
 800a9e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a9e2:	68e0      	ldr	r0, [r4, #12]
 800a9e4:	68a4      	ldr	r4, [r4, #8]
 800a9e6:	6902      	ldr	r2, [r0, #16]
 800a9e8:	428a      	cmp	r2, r1
 800a9ea:	d018      	beq.n	800aa1e <rmw_context_fini+0x4a>
 800a9ec:	2c00      	cmp	r4, #0
 800a9ee:	d1f8      	bne.n	800a9e2 <rmw_context_fini+0xe>
 800a9f0:	b189      	cbz	r1, 800aa16 <rmw_context_fini+0x42>
 800a9f2:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800a9f6:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800a9fa:	789b      	ldrb	r3, [r3, #2]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	bf14      	ite	ne
 800aa00:	210a      	movne	r1, #10
 800aa02:	2100      	moveq	r1, #0
 800aa04:	f003 f89e 	bl	800db44 <uxr_delete_session_retries>
 800aa08:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800aa0a:	f000 fdf9 	bl	800b600 <rmw_uxrce_fini_session_memory>
 800aa0e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800aa10:	3010      	adds	r0, #16
 800aa12:	f002 fb51 	bl	800d0b8 <uxr_close_custom_transport>
 800aa16:	2300      	movs	r3, #0
 800aa18:	4630      	mov	r0, r6
 800aa1a:	64ab      	str	r3, [r5, #72]	; 0x48
 800aa1c:	bd70      	pop	{r4, r5, r6, pc}
 800aa1e:	3018      	adds	r0, #24
 800aa20:	f000 f89c 	bl	800ab5c <rmw_destroy_node>
 800aa24:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800aa26:	4606      	mov	r6, r0
 800aa28:	2c00      	cmp	r4, #0
 800aa2a:	d1da      	bne.n	800a9e2 <rmw_context_fini+0xe>
 800aa2c:	e7e0      	b.n	800a9f0 <rmw_context_fini+0x1c>
 800aa2e:	4626      	mov	r6, r4
 800aa30:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800aa32:	e7dd      	b.n	800a9f0 <rmw_context_fini+0x1c>
 800aa34:	2000b8b4 	.word	0x2000b8b4

0800aa38 <create_node>:
 800aa38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d05f      	beq.n	800ab02 <create_node+0xca>
 800aa42:	4606      	mov	r6, r0
 800aa44:	4835      	ldr	r0, [pc, #212]	; (800ab1c <create_node+0xe4>)
 800aa46:	460f      	mov	r7, r1
 800aa48:	4690      	mov	r8, r2
 800aa4a:	461d      	mov	r5, r3
 800aa4c:	f007 fe00 	bl	8012650 <get_memory>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d056      	beq.n	800ab02 <create_node+0xca>
 800aa54:	68c4      	ldr	r4, [r0, #12]
 800aa56:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800aa58:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	f007 fe5f 	bl	8012720 <rmw_get_implementation_identifier>
 800aa62:	f8c4 9020 	str.w	r9, [r4, #32]
 800aa66:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7f5 fbea 	bl	8000244 <strlen>
 800aa70:	1c42      	adds	r2, r0, #1
 800aa72:	2a3c      	cmp	r2, #60	; 0x3c
 800aa74:	f104 0518 	add.w	r5, r4, #24
 800aa78:	d840      	bhi.n	800aafc <create_node+0xc4>
 800aa7a:	4648      	mov	r0, r9
 800aa7c:	4631      	mov	r1, r6
 800aa7e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800aa82:	f009 f9cf 	bl	8013e24 <memcpy>
 800aa86:	4638      	mov	r0, r7
 800aa88:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800aa8c:	f7f5 fbda 	bl	8000244 <strlen>
 800aa90:	1c42      	adds	r2, r0, #1
 800aa92:	2a3c      	cmp	r2, #60	; 0x3c
 800aa94:	d832      	bhi.n	800aafc <create_node+0xc4>
 800aa96:	4639      	mov	r1, r7
 800aa98:	4648      	mov	r0, r9
 800aa9a:	f009 f9c3 	bl	8013e24 <memcpy>
 800aa9e:	f241 5394 	movw	r3, #5524	; 0x1594
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	6922      	ldr	r2, [r4, #16]
 800aaa6:	5ad0      	ldrh	r0, [r2, r3]
 800aaa8:	eb00 0c01 	add.w	ip, r0, r1
 800aaac:	f822 c003 	strh.w	ip, [r2, r3]
 800aab0:	f002 fb06 	bl	800d0c0 <uxr_object_id>
 800aab4:	6160      	str	r0, [r4, #20]
 800aab6:	783b      	ldrb	r3, [r7, #0]
 800aab8:	2b2f      	cmp	r3, #47	; 0x2f
 800aaba:	d127      	bne.n	800ab0c <create_node+0xd4>
 800aabc:	787b      	ldrb	r3, [r7, #1]
 800aabe:	bb2b      	cbnz	r3, 800ab0c <create_node+0xd4>
 800aac0:	4633      	mov	r3, r6
 800aac2:	213c      	movs	r1, #60	; 0x3c
 800aac4:	4a16      	ldr	r2, [pc, #88]	; (800ab20 <create_node+0xe8>)
 800aac6:	4817      	ldr	r0, [pc, #92]	; (800ab24 <create_node+0xec>)
 800aac8:	f009 fb2e 	bl	8014128 <sniprintf>
 800aacc:	2106      	movs	r1, #6
 800aace:	6920      	ldr	r0, [r4, #16]
 800aad0:	4b14      	ldr	r3, [pc, #80]	; (800ab24 <create_node+0xec>)
 800aad2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800aad6:	e9cd 3100 	strd	r3, r1, [sp]
 800aada:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800aade:	6811      	ldr	r1, [r2, #0]
 800aae0:	fa1f f388 	uxth.w	r3, r8
 800aae4:	6962      	ldr	r2, [r4, #20]
 800aae6:	f002 f863 	bl	800cbb0 <uxr_buffer_create_participant_bin>
 800aaea:	4602      	mov	r2, r0
 800aaec:	6920      	ldr	r0, [r4, #16]
 800aaee:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800aaf2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800aaf6:	f000 fef3 	bl	800b8e0 <run_xrce_session>
 800aafa:	b918      	cbnz	r0, 800ab04 <create_node+0xcc>
 800aafc:	4628      	mov	r0, r5
 800aafe:	f000 fd85 	bl	800b60c <rmw_uxrce_fini_node_memory>
 800ab02:	2500      	movs	r5, #0
 800ab04:	4628      	mov	r0, r5
 800ab06:	b003      	add	sp, #12
 800ab08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	213c      	movs	r1, #60	; 0x3c
 800ab10:	4a05      	ldr	r2, [pc, #20]	; (800ab28 <create_node+0xf0>)
 800ab12:	9600      	str	r6, [sp, #0]
 800ab14:	4803      	ldr	r0, [pc, #12]	; (800ab24 <create_node+0xec>)
 800ab16:	f009 fb07 	bl	8014128 <sniprintf>
 800ab1a:	e7d7      	b.n	800aacc <create_node+0x94>
 800ab1c:	2000b8b4 	.word	0x2000b8b4
 800ab20:	08016450 	.word	0x08016450
 800ab24:	20006530 	.word	0x20006530
 800ab28:	08016414 	.word	0x08016414

0800ab2c <rmw_create_node>:
 800ab2c:	b199      	cbz	r1, 800ab56 <rmw_create_node+0x2a>
 800ab2e:	b430      	push	{r4, r5}
 800ab30:	4614      	mov	r4, r2
 800ab32:	461a      	mov	r2, r3
 800ab34:	780b      	ldrb	r3, [r1, #0]
 800ab36:	4605      	mov	r5, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	b14b      	cbz	r3, 800ab50 <rmw_create_node+0x24>
 800ab3c:	b144      	cbz	r4, 800ab50 <rmw_create_node+0x24>
 800ab3e:	7823      	ldrb	r3, [r4, #0]
 800ab40:	b133      	cbz	r3, 800ab50 <rmw_create_node+0x24>
 800ab42:	b902      	cbnz	r2, 800ab46 <rmw_create_node+0x1a>
 800ab44:	69ea      	ldr	r2, [r5, #28]
 800ab46:	462b      	mov	r3, r5
 800ab48:	4621      	mov	r1, r4
 800ab4a:	bc30      	pop	{r4, r5}
 800ab4c:	f7ff bf74 	b.w	800aa38 <create_node>
 800ab50:	2000      	movs	r0, #0
 800ab52:	bc30      	pop	{r4, r5}
 800ab54:	4770      	bx	lr
 800ab56:	2000      	movs	r0, #0
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop

0800ab5c <rmw_destroy_node>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d067      	beq.n	800ac32 <rmw_destroy_node+0xd6>
 800ab62:	4607      	mov	r7, r0
 800ab64:	6800      	ldr	r0, [r0, #0]
 800ab66:	b128      	cbz	r0, 800ab74 <rmw_destroy_node+0x18>
 800ab68:	4b34      	ldr	r3, [pc, #208]	; (800ac3c <rmw_destroy_node+0xe0>)
 800ab6a:	6819      	ldr	r1, [r3, #0]
 800ab6c:	f7f5 fb60 	bl	8000230 <strcmp>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d15e      	bne.n	800ac32 <rmw_destroy_node+0xd6>
 800ab74:	687c      	ldr	r4, [r7, #4]
 800ab76:	2c00      	cmp	r4, #0
 800ab78:	d05b      	beq.n	800ac32 <rmw_destroy_node+0xd6>
 800ab7a:	4b31      	ldr	r3, [pc, #196]	; (800ac40 <rmw_destroy_node+0xe4>)
 800ab7c:	681d      	ldr	r5, [r3, #0]
 800ab7e:	2d00      	cmp	r5, #0
 800ab80:	d05a      	beq.n	800ac38 <rmw_destroy_node+0xdc>
 800ab82:	2600      	movs	r6, #0
 800ab84:	68e9      	ldr	r1, [r5, #12]
 800ab86:	68ad      	ldr	r5, [r5, #8]
 800ab88:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	d048      	beq.n	800ac22 <rmw_destroy_node+0xc6>
 800ab90:	2d00      	cmp	r5, #0
 800ab92:	d1f7      	bne.n	800ab84 <rmw_destroy_node+0x28>
 800ab94:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <rmw_destroy_node+0xe8>)
 800ab96:	681d      	ldr	r5, [r3, #0]
 800ab98:	b15d      	cbz	r5, 800abb2 <rmw_destroy_node+0x56>
 800ab9a:	68e9      	ldr	r1, [r5, #12]
 800ab9c:	68ad      	ldr	r5, [r5, #8]
 800ab9e:	6a0b      	ldr	r3, [r1, #32]
 800aba0:	429c      	cmp	r4, r3
 800aba2:	d1f9      	bne.n	800ab98 <rmw_destroy_node+0x3c>
 800aba4:	4638      	mov	r0, r7
 800aba6:	317c      	adds	r1, #124	; 0x7c
 800aba8:	f000 fb14 	bl	800b1d4 <rmw_destroy_subscription>
 800abac:	4606      	mov	r6, r0
 800abae:	2d00      	cmp	r5, #0
 800abb0:	d1f3      	bne.n	800ab9a <rmw_destroy_node+0x3e>
 800abb2:	4b25      	ldr	r3, [pc, #148]	; (800ac48 <rmw_destroy_node+0xec>)
 800abb4:	681d      	ldr	r5, [r3, #0]
 800abb6:	b15d      	cbz	r5, 800abd0 <rmw_destroy_node+0x74>
 800abb8:	68e9      	ldr	r1, [r5, #12]
 800abba:	68ad      	ldr	r5, [r5, #8]
 800abbc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800abbe:	429c      	cmp	r4, r3
 800abc0:	d1f9      	bne.n	800abb6 <rmw_destroy_node+0x5a>
 800abc2:	4638      	mov	r0, r7
 800abc4:	317c      	adds	r1, #124	; 0x7c
 800abc6:	f000 f9db 	bl	800af80 <rmw_destroy_service>
 800abca:	4606      	mov	r6, r0
 800abcc:	2d00      	cmp	r5, #0
 800abce:	d1f3      	bne.n	800abb8 <rmw_destroy_node+0x5c>
 800abd0:	4b1e      	ldr	r3, [pc, #120]	; (800ac4c <rmw_destroy_node+0xf0>)
 800abd2:	681d      	ldr	r5, [r3, #0]
 800abd4:	b15d      	cbz	r5, 800abee <rmw_destroy_node+0x92>
 800abd6:	68e9      	ldr	r1, [r5, #12]
 800abd8:	68ad      	ldr	r5, [r5, #8]
 800abda:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800abdc:	429c      	cmp	r4, r3
 800abde:	d1f9      	bne.n	800abd4 <rmw_destroy_node+0x78>
 800abe0:	4638      	mov	r0, r7
 800abe2:	317c      	adds	r1, #124	; 0x7c
 800abe4:	f007 fd58 	bl	8012698 <rmw_destroy_client>
 800abe8:	4606      	mov	r6, r0
 800abea:	2d00      	cmp	r5, #0
 800abec:	d1f3      	bne.n	800abd6 <rmw_destroy_node+0x7a>
 800abee:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800abf2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800abf6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800abfa:	6819      	ldr	r1, [r3, #0]
 800abfc:	f001 ff8a 	bl	800cb14 <uxr_buffer_delete_entity>
 800ac00:	4602      	mov	r2, r0
 800ac02:	6920      	ldr	r0, [r4, #16]
 800ac04:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ac08:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ac0c:	f000 fe68 	bl	800b8e0 <run_xrce_session>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bf08      	it	eq
 800ac16:	2602      	moveq	r6, #2
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f000 fcf7 	bl	800b60c <rmw_uxrce_fini_node_memory>
 800ac1e:	4630      	mov	r0, r6
 800ac20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac22:	4638      	mov	r0, r7
 800ac24:	3184      	adds	r1, #132	; 0x84
 800ac26:	f000 f95b 	bl	800aee0 <rmw_destroy_publisher>
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	2d00      	cmp	r5, #0
 800ac2e:	d1a9      	bne.n	800ab84 <rmw_destroy_node+0x28>
 800ac30:	e7b0      	b.n	800ab94 <rmw_destroy_node+0x38>
 800ac32:	2601      	movs	r6, #1
 800ac34:	4630      	mov	r0, r6
 800ac36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac38:	462e      	mov	r6, r5
 800ac3a:	e7ab      	b.n	800ab94 <rmw_destroy_node+0x38>
 800ac3c:	08016b44 	.word	0x08016b44
 800ac40:	200088f0 	.word	0x200088f0
 800ac44:	2000bb4c 	.word	0x2000bb4c
 800ac48:	2000bb3c 	.word	0x2000bb3c
 800ac4c:	20009170 	.word	0x20009170

0800ac50 <rmw_node_get_graph_guard_condition>:
 800ac50:	6843      	ldr	r3, [r0, #4]
 800ac52:	6918      	ldr	r0, [r3, #16]
 800ac54:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop

0800ac5c <flush_session>:
 800ac5c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800ac5e:	f003 b903 	b.w	800de68 <uxr_run_session_until_confirm_delivery>
 800ac62:	bf00      	nop

0800ac64 <rmw_publish>:
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d053      	beq.n	800ad10 <rmw_publish+0xac>
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	460d      	mov	r5, r1
 800ac6c:	b08e      	sub	sp, #56	; 0x38
 800ac6e:	2900      	cmp	r1, #0
 800ac70:	d04b      	beq.n	800ad0a <rmw_publish+0xa6>
 800ac72:	4604      	mov	r4, r0
 800ac74:	6800      	ldr	r0, [r0, #0]
 800ac76:	f000 feb7 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d045      	beq.n	800ad0a <rmw_publish+0xa6>
 800ac7e:	6866      	ldr	r6, [r4, #4]
 800ac80:	2e00      	cmp	r6, #0
 800ac82:	d042      	beq.n	800ad0a <rmw_publish+0xa6>
 800ac84:	69b4      	ldr	r4, [r6, #24]
 800ac86:	4628      	mov	r0, r5
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	4798      	blx	r3
 800ac8c:	69f3      	ldr	r3, [r6, #28]
 800ac8e:	9005      	str	r0, [sp, #20]
 800ac90:	b113      	cbz	r3, 800ac98 <rmw_publish+0x34>
 800ac92:	a805      	add	r0, sp, #20
 800ac94:	4798      	blx	r3
 800ac96:	9805      	ldr	r0, [sp, #20]
 800ac98:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	9000      	str	r0, [sp, #0]
 800aca0:	6972      	ldr	r2, [r6, #20]
 800aca2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800aca6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800aca8:	ab06      	add	r3, sp, #24
 800acaa:	f004 f96d 	bl	800ef88 <uxr_prepare_output_stream>
 800acae:	b1d8      	cbz	r0, 800ace8 <rmw_publish+0x84>
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	4628      	mov	r0, r5
 800acb4:	a906      	add	r1, sp, #24
 800acb6:	4798      	blx	r3
 800acb8:	6a33      	ldr	r3, [r6, #32]
 800acba:	4604      	mov	r4, r0
 800acbc:	b10b      	cbz	r3, 800acc2 <rmw_publish+0x5e>
 800acbe:	a806      	add	r0, sp, #24
 800acc0:	4798      	blx	r3
 800acc2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800accc:	d022      	beq.n	800ad14 <rmw_publish+0xb0>
 800acce:	6918      	ldr	r0, [r3, #16]
 800acd0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800acd2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800acd6:	f003 f8c7 	bl	800de68 <uxr_run_session_until_confirm_delivery>
 800acda:	4004      	ands	r4, r0
 800acdc:	b2e4      	uxtb	r4, r4
 800acde:	f084 0001 	eor.w	r0, r4, #1
 800ace2:	b2c0      	uxtb	r0, r0
 800ace4:	b00e      	add	sp, #56	; 0x38
 800ace6:	bd70      	pop	{r4, r5, r6, pc}
 800ace8:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 800acec:	4a0c      	ldr	r2, [pc, #48]	; (800ad20 <rmw_publish+0xbc>)
 800acee:	6908      	ldr	r0, [r1, #16]
 800acf0:	9b05      	ldr	r3, [sp, #20]
 800acf2:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	6972      	ldr	r2, [r6, #20]
 800acfa:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800acfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ad00:	ab06      	add	r3, sp, #24
 800ad02:	f004 f971 	bl	800efe8 <uxr_prepare_output_stream_fragmented>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d1d2      	bne.n	800acb0 <rmw_publish+0x4c>
 800ad0a:	2001      	movs	r0, #1
 800ad0c:	b00e      	add	sp, #56	; 0x38
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	2001      	movs	r0, #1
 800ad12:	4770      	bx	lr
 800ad14:	6918      	ldr	r0, [r3, #16]
 800ad16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ad1a:	f003 f813 	bl	800dd44 <uxr_flash_output_streams>
 800ad1e:	e7de      	b.n	800acde <rmw_publish+0x7a>
 800ad20:	0800ac5d 	.word	0x0800ac5d

0800ad24 <rmw_create_publisher>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	b087      	sub	sp, #28
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f000 80ca 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad30:	460e      	mov	r6, r1
 800ad32:	2900      	cmp	r1, #0
 800ad34:	f000 80c6 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	4615      	mov	r5, r2
 800ad3e:	4698      	mov	r8, r3
 800ad40:	f000 fe52 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	f000 80bd 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad4a:	2d00      	cmp	r5, #0
 800ad4c:	f000 80ba 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad50:	782b      	ldrb	r3, [r5, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 80b6 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad58:	f1b8 0f00 	cmp.w	r8, #0
 800ad5c:	f000 80b2 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad60:	485b      	ldr	r0, [pc, #364]	; (800aed0 <rmw_create_publisher+0x1ac>)
 800ad62:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ad66:	f007 fc73 	bl	8012650 <get_memory>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	f000 80aa 	beq.w	800aec4 <rmw_create_publisher+0x1a0>
 800ad70:	2300      	movs	r3, #0
 800ad72:	68c4      	ldr	r4, [r0, #12]
 800ad74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800ad78:	f007 fcd2 	bl	8012720 <rmw_get_implementation_identifier>
 800ad7c:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800ad80:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ad84:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f7f5 fa5b 	bl	8000244 <strlen>
 800ad8e:	3001      	adds	r0, #1
 800ad90:	283c      	cmp	r0, #60	; 0x3c
 800ad92:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800ad96:	f200 8092 	bhi.w	800aebe <rmw_create_publisher+0x19a>
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	213c      	movs	r1, #60	; 0x3c
 800ad9e:	4a4d      	ldr	r2, [pc, #308]	; (800aed4 <rmw_create_publisher+0x1b0>)
 800ada0:	4650      	mov	r0, sl
 800ada2:	f009 f9c1 	bl	8014128 <sniprintf>
 800ada6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800adaa:	4641      	mov	r1, r8
 800adac:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800adb0:	2250      	movs	r2, #80	; 0x50
 800adb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800adb6:	f009 f835 	bl	8013e24 <memcpy>
 800adba:	f898 3008 	ldrb.w	r3, [r8, #8]
 800adbe:	4630      	mov	r0, r6
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adc6:	4944      	ldr	r1, [pc, #272]	; (800aed8 <rmw_create_publisher+0x1b4>)
 800adc8:	bf0c      	ite	eq
 800adca:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800adce:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800add2:	67a3      	str	r3, [r4, #120]	; 0x78
 800add4:	2300      	movs	r3, #0
 800add6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800adda:	f000 fe13 	bl	800ba04 <get_message_typesupport_handle>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d06d      	beq.n	800aebe <rmw_create_publisher+0x19a>
 800ade2:	6842      	ldr	r2, [r0, #4]
 800ade4:	61a2      	str	r2, [r4, #24]
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d069      	beq.n	800aebe <rmw_create_publisher+0x19a>
 800adea:	4629      	mov	r1, r5
 800adec:	4643      	mov	r3, r8
 800adee:	4648      	mov	r0, r9
 800adf0:	f007 fc9c 	bl	801272c <create_topic>
 800adf4:	6260      	str	r0, [r4, #36]	; 0x24
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d061      	beq.n	800aebe <rmw_create_publisher+0x19a>
 800adfa:	f241 5398 	movw	r3, #5528	; 0x1598
 800adfe:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ae02:	2103      	movs	r1, #3
 800ae04:	5ad0      	ldrh	r0, [r2, r3]
 800ae06:	2606      	movs	r6, #6
 800ae08:	1c45      	adds	r5, r0, #1
 800ae0a:	52d5      	strh	r5, [r2, r3]
 800ae0c:	f002 f958 	bl	800d0c0 <uxr_object_id>
 800ae10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae14:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ae18:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800ae1c:	6912      	ldr	r2, [r2, #16]
 800ae1e:	6120      	str	r0, [r4, #16]
 800ae20:	9600      	str	r6, [sp, #0]
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800ae28:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ae2c:	6922      	ldr	r2, [r4, #16]
 800ae2e:	f001 ff2d 	bl	800cc8c <uxr_buffer_create_publisher_bin>
 800ae32:	4602      	mov	r2, r0
 800ae34:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ae38:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ae3c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ae40:	f000 fd4e 	bl	800b8e0 <run_xrce_session>
 800ae44:	b3b8      	cbz	r0, 800aeb6 <rmw_create_publisher+0x192>
 800ae46:	f241 539a 	movw	r3, #5530	; 0x159a
 800ae4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ae4e:	2105      	movs	r1, #5
 800ae50:	5ad0      	ldrh	r0, [r2, r3]
 800ae52:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800ae56:	1c45      	adds	r5, r0, #1
 800ae58:	52d5      	strh	r5, [r2, r3]
 800ae5a:	f002 f931 	bl	800d0c0 <uxr_object_id>
 800ae5e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ae62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae66:	f10d 0a10 	add.w	sl, sp, #16
 800ae6a:	6915      	ldr	r5, [r2, #16]
 800ae6c:	4641      	mov	r1, r8
 800ae6e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ae72:	6160      	str	r0, [r4, #20]
 800ae74:	4650      	mov	r0, sl
 800ae76:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800ae7a:	f000 fd4d 	bl	800b918 <convert_qos_profile>
 800ae7e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ae82:	9603      	str	r6, [sp, #12]
 800ae84:	9001      	str	r0, [sp, #4]
 800ae86:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ae8a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ae8e:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ae98:	f8d8 1000 	ldr.w	r1, [r8]
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f001 ff55 	bl	800cd4c <uxr_buffer_create_datawriter_bin>
 800aea2:	4602      	mov	r2, r0
 800aea4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aea8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800aeac:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800aeb0:	f000 fd16 	bl	800b8e0 <run_xrce_session>
 800aeb4:	b938      	cbnz	r0, 800aec6 <rmw_create_publisher+0x1a2>
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	4805      	ldr	r0, [pc, #20]	; (800aed0 <rmw_create_publisher+0x1ac>)
 800aeba:	f007 fbd9 	bl	8012670 <put_memory>
 800aebe:	4638      	mov	r0, r7
 800aec0:	f000 fbbc 	bl	800b63c <rmw_uxrce_fini_publisher_memory>
 800aec4:	2700      	movs	r7, #0
 800aec6:	4638      	mov	r0, r7
 800aec8:	b007      	add	sp, #28
 800aeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aece:	bf00      	nop
 800aed0:	200088f0 	.word	0x200088f0
 800aed4:	08016450 	.word	0x08016450
 800aed8:	0801641c 	.word	0x0801641c

0800aedc <rmw_publisher_get_actual_qos>:
 800aedc:	2000      	movs	r0, #0
 800aede:	4770      	bx	lr

0800aee0 <rmw_destroy_publisher>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	b128      	cbz	r0, 800aef0 <rmw_destroy_publisher+0x10>
 800aee4:	4604      	mov	r4, r0
 800aee6:	6800      	ldr	r0, [r0, #0]
 800aee8:	460d      	mov	r5, r1
 800aeea:	f000 fd7d 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800aeee:	b910      	cbnz	r0, 800aef6 <rmw_destroy_publisher+0x16>
 800aef0:	2401      	movs	r4, #1
 800aef2:	4620      	mov	r0, r4
 800aef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef6:	6863      	ldr	r3, [r4, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d0f9      	beq.n	800aef0 <rmw_destroy_publisher+0x10>
 800aefc:	2d00      	cmp	r5, #0
 800aefe:	d0f7      	beq.n	800aef0 <rmw_destroy_publisher+0x10>
 800af00:	6828      	ldr	r0, [r5, #0]
 800af02:	f000 fd71 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800af06:	2800      	cmp	r0, #0
 800af08:	d0f2      	beq.n	800aef0 <rmw_destroy_publisher+0x10>
 800af0a:	686c      	ldr	r4, [r5, #4]
 800af0c:	2c00      	cmp	r4, #0
 800af0e:	d0ef      	beq.n	800aef0 <rmw_destroy_publisher+0x10>
 800af10:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af12:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800af16:	f007 fc57 	bl	80127c8 <destroy_topic>
 800af1a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800af1e:	6962      	ldr	r2, [r4, #20]
 800af20:	6918      	ldr	r0, [r3, #16]
 800af22:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800af26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800af2a:	6819      	ldr	r1, [r3, #0]
 800af2c:	f001 fdf2 	bl	800cb14 <uxr_buffer_delete_entity>
 800af30:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800af34:	6922      	ldr	r2, [r4, #16]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	4604      	mov	r4, r0
 800af3a:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800af3e:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800af42:	6809      	ldr	r1, [r1, #0]
 800af44:	f001 fde6 	bl	800cb14 <uxr_buffer_delete_entity>
 800af48:	4606      	mov	r6, r0
 800af4a:	6938      	ldr	r0, [r7, #16]
 800af4c:	4622      	mov	r2, r4
 800af4e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800af52:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800af56:	f000 fcc3 	bl	800b8e0 <run_xrce_session>
 800af5a:	4604      	mov	r4, r0
 800af5c:	6938      	ldr	r0, [r7, #16]
 800af5e:	4632      	mov	r2, r6
 800af60:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800af64:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800af68:	f000 fcba 	bl	800b8e0 <run_xrce_session>
 800af6c:	b12c      	cbz	r4, 800af7a <rmw_destroy_publisher+0x9a>
 800af6e:	b120      	cbz	r0, 800af7a <rmw_destroy_publisher+0x9a>
 800af70:	2400      	movs	r4, #0
 800af72:	4628      	mov	r0, r5
 800af74:	f000 fb62 	bl	800b63c <rmw_uxrce_fini_publisher_memory>
 800af78:	e7bb      	b.n	800aef2 <rmw_destroy_publisher+0x12>
 800af7a:	2402      	movs	r4, #2
 800af7c:	e7f9      	b.n	800af72 <rmw_destroy_publisher+0x92>
 800af7e:	bf00      	nop

0800af80 <rmw_destroy_service>:
 800af80:	b570      	push	{r4, r5, r6, lr}
 800af82:	b128      	cbz	r0, 800af90 <rmw_destroy_service+0x10>
 800af84:	4604      	mov	r4, r0
 800af86:	6800      	ldr	r0, [r0, #0]
 800af88:	460d      	mov	r5, r1
 800af8a:	f000 fd2d 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800af8e:	b910      	cbnz	r0, 800af96 <rmw_destroy_service+0x16>
 800af90:	2401      	movs	r4, #1
 800af92:	4620      	mov	r0, r4
 800af94:	bd70      	pop	{r4, r5, r6, pc}
 800af96:	6863      	ldr	r3, [r4, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0f9      	beq.n	800af90 <rmw_destroy_service+0x10>
 800af9c:	2d00      	cmp	r5, #0
 800af9e:	d0f7      	beq.n	800af90 <rmw_destroy_service+0x10>
 800afa0:	6828      	ldr	r0, [r5, #0]
 800afa2:	f000 fd21 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800afa6:	2800      	cmp	r0, #0
 800afa8:	d0f2      	beq.n	800af90 <rmw_destroy_service+0x10>
 800afaa:	686e      	ldr	r6, [r5, #4]
 800afac:	2e00      	cmp	r6, #0
 800afae:	d0ef      	beq.n	800af90 <rmw_destroy_service+0x10>
 800afb0:	6864      	ldr	r4, [r4, #4]
 800afb2:	6932      	ldr	r2, [r6, #16]
 800afb4:	6920      	ldr	r0, [r4, #16]
 800afb6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800afba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800afbe:	6819      	ldr	r1, [r3, #0]
 800afc0:	f002 f8e6 	bl	800d190 <uxr_buffer_cancel_data>
 800afc4:	4602      	mov	r2, r0
 800afc6:	6920      	ldr	r0, [r4, #16]
 800afc8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800afcc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800afd0:	f000 fc86 	bl	800b8e0 <run_xrce_session>
 800afd4:	6920      	ldr	r0, [r4, #16]
 800afd6:	6932      	ldr	r2, [r6, #16]
 800afd8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800afdc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800afe0:	6819      	ldr	r1, [r3, #0]
 800afe2:	f001 fd97 	bl	800cb14 <uxr_buffer_delete_entity>
 800afe6:	4602      	mov	r2, r0
 800afe8:	6920      	ldr	r0, [r4, #16]
 800afea:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800afee:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800aff2:	f000 fc75 	bl	800b8e0 <run_xrce_session>
 800aff6:	4603      	mov	r3, r0
 800aff8:	4628      	mov	r0, r5
 800affa:	2b00      	cmp	r3, #0
 800affc:	bf14      	ite	ne
 800affe:	2400      	movne	r4, #0
 800b000:	2402      	moveq	r4, #2
 800b002:	f000 fb47 	bl	800b694 <rmw_uxrce_fini_service_memory>
 800b006:	e7c4      	b.n	800af92 <rmw_destroy_service+0x12>

0800b008 <rmw_create_subscription>:
 800b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	b08d      	sub	sp, #52	; 0x34
 800b00e:	2800      	cmp	r0, #0
 800b010:	f000 80d3 	beq.w	800b1ba <rmw_create_subscription+0x1b2>
 800b014:	460e      	mov	r6, r1
 800b016:	2900      	cmp	r1, #0
 800b018:	f000 80cf 	beq.w	800b1ba <rmw_create_subscription+0x1b2>
 800b01c:	4604      	mov	r4, r0
 800b01e:	6800      	ldr	r0, [r0, #0]
 800b020:	4615      	mov	r5, r2
 800b022:	4698      	mov	r8, r3
 800b024:	f000 fce0 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800b028:	2800      	cmp	r0, #0
 800b02a:	f000 80c6 	beq.w	800b1ba <rmw_create_subscription+0x1b2>
 800b02e:	2d00      	cmp	r5, #0
 800b030:	f000 80c3 	beq.w	800b1ba <rmw_create_subscription+0x1b2>
 800b034:	782b      	ldrb	r3, [r5, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 80bf 	beq.w	800b1ba <rmw_create_subscription+0x1b2>
 800b03c:	f1b8 0f00 	cmp.w	r8, #0
 800b040:	f000 80bb 	beq.w	800b1ba <rmw_create_subscription+0x1b2>
 800b044:	485f      	ldr	r0, [pc, #380]	; (800b1c4 <rmw_create_subscription+0x1bc>)
 800b046:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b04a:	f007 fb01 	bl	8012650 <get_memory>
 800b04e:	4604      	mov	r4, r0
 800b050:	2800      	cmp	r0, #0
 800b052:	f000 80b3 	beq.w	800b1bc <rmw_create_subscription+0x1b4>
 800b056:	2300      	movs	r3, #0
 800b058:	68c7      	ldr	r7, [r0, #12]
 800b05a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b05e:	f007 fb5f 	bl	8012720 <rmw_get_implementation_identifier>
 800b062:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800b066:	67f8      	str	r0, [r7, #124]	; 0x7c
 800b068:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7f5 f8e9 	bl	8000244 <strlen>
 800b072:	3001      	adds	r0, #1
 800b074:	283c      	cmp	r0, #60	; 0x3c
 800b076:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800b07a:	f200 809b 	bhi.w	800b1b4 <rmw_create_subscription+0x1ac>
 800b07e:	462b      	mov	r3, r5
 800b080:	213c      	movs	r1, #60	; 0x3c
 800b082:	4a51      	ldr	r2, [pc, #324]	; (800b1c8 <rmw_create_subscription+0x1c0>)
 800b084:	4650      	mov	r0, sl
 800b086:	f009 f84f 	bl	8014128 <sniprintf>
 800b08a:	4641      	mov	r1, r8
 800b08c:	2250      	movs	r2, #80	; 0x50
 800b08e:	f8c7 9020 	str.w	r9, [r7, #32]
 800b092:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800b096:	f008 fec5 	bl	8013e24 <memcpy>
 800b09a:	4630      	mov	r0, r6
 800b09c:	494b      	ldr	r1, [pc, #300]	; (800b1cc <rmw_create_subscription+0x1c4>)
 800b09e:	f000 fcb1 	bl	800ba04 <get_message_typesupport_handle>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	f000 8086 	beq.w	800b1b4 <rmw_create_subscription+0x1ac>
 800b0a8:	6842      	ldr	r2, [r0, #4]
 800b0aa:	61ba      	str	r2, [r7, #24]
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	f000 8081 	beq.w	800b1b4 <rmw_create_subscription+0x1ac>
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4643      	mov	r3, r8
 800b0b6:	4648      	mov	r0, r9
 800b0b8:	f007 fb38 	bl	801272c <create_topic>
 800b0bc:	61f8      	str	r0, [r7, #28]
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d078      	beq.n	800b1b4 <rmw_create_subscription+0x1ac>
 800b0c2:	f241 539c 	movw	r3, #5532	; 0x159c
 800b0c6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b0ca:	2104      	movs	r1, #4
 800b0cc:	5ad0      	ldrh	r0, [r2, r3]
 800b0ce:	2506      	movs	r5, #6
 800b0d0:	1c46      	adds	r6, r0, #1
 800b0d2:	52d6      	strh	r6, [r2, r3]
 800b0d4:	f001 fff4 	bl	800d0c0 <uxr_object_id>
 800b0d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0dc:	6138      	str	r0, [r7, #16]
 800b0de:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800b0e2:	9500      	str	r5, [sp, #0]
 800b0e4:	6811      	ldr	r1, [r2, #0]
 800b0e6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b0f0:	f001 fdfc 	bl	800ccec <uxr_buffer_create_subscriber_bin>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b0fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b0fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b102:	f000 fbed 	bl	800b8e0 <run_xrce_session>
 800b106:	2800      	cmp	r0, #0
 800b108:	d050      	beq.n	800b1ac <rmw_create_subscription+0x1a4>
 800b10a:	f241 539e 	movw	r3, #5534	; 0x159e
 800b10e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b112:	4629      	mov	r1, r5
 800b114:	5ad0      	ldrh	r0, [r2, r3]
 800b116:	ae08      	add	r6, sp, #32
 800b118:	f100 0c01 	add.w	ip, r0, #1
 800b11c:	f822 c003 	strh.w	ip, [r2, r3]
 800b120:	f001 ffce 	bl	800d0c0 <uxr_object_id>
 800b124:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	4641      	mov	r1, r8
 800b12c:	6178      	str	r0, [r7, #20]
 800b12e:	4630      	mov	r0, r6
 800b130:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800b134:	9305      	str	r3, [sp, #20]
 800b136:	f000 fbef 	bl	800b918 <convert_qos_profile>
 800b13a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b13e:	9b05      	ldr	r3, [sp, #20]
 800b140:	9001      	str	r0, [sp, #4]
 800b142:	9503      	str	r5, [sp, #12]
 800b144:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800b154:	f8db 1000 	ldr.w	r1, [fp]
 800b158:	f001 fe74 	bl	800ce44 <uxr_buffer_create_datareader_bin>
 800b15c:	4602      	mov	r2, r0
 800b15e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b162:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800b166:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800b16a:	f000 fbb9 	bl	800b8e0 <run_xrce_session>
 800b16e:	b1e8      	cbz	r0, 800b1ac <rmw_create_subscription+0x1a4>
 800b170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b174:	2200      	movs	r2, #0
 800b176:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800b17a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b17e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b182:	2b02      	cmp	r3, #2
 800b184:	bf0c      	ite	eq
 800b186:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800b18a:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800b18e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800b192:	9307      	str	r3, [sp, #28]
 800b194:	aa0a      	add	r2, sp, #40	; 0x28
 800b196:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800b19a:	9200      	str	r2, [sp, #0]
 800b19c:	6819      	ldr	r1, [r3, #0]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	9b07      	ldr	r3, [sp, #28]
 800b1a2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b1a6:	f001 ffb9 	bl	800d11c <uxr_buffer_request_data>
 800b1aa:	e007      	b.n	800b1bc <rmw_create_subscription+0x1b4>
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	4805      	ldr	r0, [pc, #20]	; (800b1c4 <rmw_create_subscription+0x1bc>)
 800b1b0:	f007 fa5e 	bl	8012670 <put_memory>
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f000 fa57 	bl	800b668 <rmw_uxrce_fini_subscription_memory>
 800b1ba:	2400      	movs	r4, #0
 800b1bc:	4620      	mov	r0, r4
 800b1be:	b00d      	add	sp, #52	; 0x34
 800b1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c4:	2000bb4c 	.word	0x2000bb4c
 800b1c8:	08016450 	.word	0x08016450
 800b1cc:	0801641c 	.word	0x0801641c

0800b1d0 <rmw_subscription_get_actual_qos>:
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	4770      	bx	lr

0800b1d4 <rmw_destroy_subscription>:
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d6:	b128      	cbz	r0, 800b1e4 <rmw_destroy_subscription+0x10>
 800b1d8:	4604      	mov	r4, r0
 800b1da:	6800      	ldr	r0, [r0, #0]
 800b1dc:	460d      	mov	r5, r1
 800b1de:	f000 fc03 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800b1e2:	b910      	cbnz	r0, 800b1ea <rmw_destroy_subscription+0x16>
 800b1e4:	2401      	movs	r4, #1
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ea:	6863      	ldr	r3, [r4, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d0f9      	beq.n	800b1e4 <rmw_destroy_subscription+0x10>
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	d0f7      	beq.n	800b1e4 <rmw_destroy_subscription+0x10>
 800b1f4:	6828      	ldr	r0, [r5, #0]
 800b1f6:	f000 fbf7 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 800b1fa:	2800      	cmp	r0, #0
 800b1fc:	d0f2      	beq.n	800b1e4 <rmw_destroy_subscription+0x10>
 800b1fe:	686c      	ldr	r4, [r5, #4]
 800b200:	2c00      	cmp	r4, #0
 800b202:	d0ef      	beq.n	800b1e4 <rmw_destroy_subscription+0x10>
 800b204:	6a26      	ldr	r6, [r4, #32]
 800b206:	6962      	ldr	r2, [r4, #20]
 800b208:	6930      	ldr	r0, [r6, #16]
 800b20a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b20e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b212:	6819      	ldr	r1, [r3, #0]
 800b214:	f001 ffbc 	bl	800d190 <uxr_buffer_cancel_data>
 800b218:	4602      	mov	r2, r0
 800b21a:	6930      	ldr	r0, [r6, #16]
 800b21c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b220:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b224:	f000 fb5c 	bl	800b8e0 <run_xrce_session>
 800b228:	69e0      	ldr	r0, [r4, #28]
 800b22a:	f007 facd 	bl	80127c8 <destroy_topic>
 800b22e:	6a23      	ldr	r3, [r4, #32]
 800b230:	6962      	ldr	r2, [r4, #20]
 800b232:	6918      	ldr	r0, [r3, #16]
 800b234:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800b238:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b23c:	6819      	ldr	r1, [r3, #0]
 800b23e:	f001 fc69 	bl	800cb14 <uxr_buffer_delete_entity>
 800b242:	6a23      	ldr	r3, [r4, #32]
 800b244:	6922      	ldr	r2, [r4, #16]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	4604      	mov	r4, r0
 800b24a:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800b24e:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800b252:	6809      	ldr	r1, [r1, #0]
 800b254:	f001 fc5e 	bl	800cb14 <uxr_buffer_delete_entity>
 800b258:	4607      	mov	r7, r0
 800b25a:	6930      	ldr	r0, [r6, #16]
 800b25c:	4622      	mov	r2, r4
 800b25e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b262:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b266:	f000 fb3b 	bl	800b8e0 <run_xrce_session>
 800b26a:	4604      	mov	r4, r0
 800b26c:	6930      	ldr	r0, [r6, #16]
 800b26e:	463a      	mov	r2, r7
 800b270:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800b274:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800b278:	f000 fb32 	bl	800b8e0 <run_xrce_session>
 800b27c:	b12c      	cbz	r4, 800b28a <rmw_destroy_subscription+0xb6>
 800b27e:	b120      	cbz	r0, 800b28a <rmw_destroy_subscription+0xb6>
 800b280:	2400      	movs	r4, #0
 800b282:	4628      	mov	r0, r5
 800b284:	f000 f9f0 	bl	800b668 <rmw_uxrce_fini_subscription_memory>
 800b288:	e7ad      	b.n	800b1e6 <rmw_destroy_subscription+0x12>
 800b28a:	2402      	movs	r4, #2
 800b28c:	e7f9      	b.n	800b282 <rmw_destroy_subscription+0xae>
 800b28e:	bf00      	nop

0800b290 <rmw_take_with_info>:
 800b290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b292:	4604      	mov	r4, r0
 800b294:	6800      	ldr	r0, [r0, #0]
 800b296:	460f      	mov	r7, r1
 800b298:	4615      	mov	r5, r2
 800b29a:	b089      	sub	sp, #36	; 0x24
 800b29c:	b128      	cbz	r0, 800b2aa <rmw_take_with_info+0x1a>
 800b29e:	4b24      	ldr	r3, [pc, #144]	; (800b330 <rmw_take_with_info+0xa0>)
 800b2a0:	6819      	ldr	r1, [r3, #0]
 800b2a2:	f7f4 ffc5 	bl	8000230 <strcmp>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d13e      	bne.n	800b328 <rmw_take_with_info+0x98>
 800b2aa:	b305      	cbz	r5, 800b2ee <rmw_take_with_info+0x5e>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6864      	ldr	r4, [r4, #4]
 800b2b0:	702b      	strb	r3, [r5, #0]
 800b2b2:	f000 fa9d 	bl	800b7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 fa70 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 800b2bc:	4606      	mov	r6, r0
 800b2be:	b1f0      	cbz	r0, 800b2fe <rmw_take_with_info+0x6e>
 800b2c0:	68c1      	ldr	r1, [r0, #12]
 800b2c2:	4668      	mov	r0, sp
 800b2c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800b2c8:	3110      	adds	r1, #16
 800b2ca:	f001 fbb1 	bl	800ca30 <ucdr_init_buffer>
 800b2ce:	69a3      	ldr	r3, [r4, #24]
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	4668      	mov	r0, sp
 800b2d6:	4798      	blx	r3
 800b2d8:	4604      	mov	r4, r0
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4815      	ldr	r0, [pc, #84]	; (800b334 <rmw_take_with_info+0xa4>)
 800b2de:	f007 f9c7 	bl	8012670 <put_memory>
 800b2e2:	702c      	strb	r4, [r5, #0]
 800b2e4:	f084 0001 	eor.w	r0, r4, #1
 800b2e8:	b2c0      	uxtb	r0, r0
 800b2ea:	b009      	add	sp, #36	; 0x24
 800b2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ee:	6864      	ldr	r4, [r4, #4]
 800b2f0:	f000 fa7e 	bl	800b7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	f000 fa51 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	b910      	cbnz	r0, 800b304 <rmw_take_with_info+0x74>
 800b2fe:	2001      	movs	r0, #1
 800b300:	b009      	add	sp, #36	; 0x24
 800b302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b304:	68e9      	ldr	r1, [r5, #12]
 800b306:	4668      	mov	r0, sp
 800b308:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800b30c:	3110      	adds	r1, #16
 800b30e:	f001 fb8f 	bl	800ca30 <ucdr_init_buffer>
 800b312:	69a3      	ldr	r3, [r4, #24]
 800b314:	4639      	mov	r1, r7
 800b316:	4668      	mov	r0, sp
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	4798      	blx	r3
 800b31c:	4629      	mov	r1, r5
 800b31e:	4604      	mov	r4, r0
 800b320:	4804      	ldr	r0, [pc, #16]	; (800b334 <rmw_take_with_info+0xa4>)
 800b322:	f007 f9a5 	bl	8012670 <put_memory>
 800b326:	e7dd      	b.n	800b2e4 <rmw_take_with_info+0x54>
 800b328:	200c      	movs	r0, #12
 800b32a:	b009      	add	sp, #36	; 0x24
 800b32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32e:	bf00      	nop
 800b330:	08016b44 	.word	0x08016b44
 800b334:	200088e0 	.word	0x200088e0

0800b338 <rmw_uxrce_transport_init>:
 800b338:	b508      	push	{r3, lr}
 800b33a:	b108      	cbz	r0, 800b340 <rmw_uxrce_transport_init+0x8>
 800b33c:	f100 0210 	add.w	r2, r0, #16
 800b340:	b139      	cbz	r1, 800b352 <rmw_uxrce_transport_init+0x1a>
 800b342:	4610      	mov	r0, r2
 800b344:	6949      	ldr	r1, [r1, #20]
 800b346:	f001 fe83 	bl	800d050 <uxr_init_custom_transport>
 800b34a:	f080 0001 	eor.w	r0, r0, #1
 800b34e:	b2c0      	uxtb	r0, r0
 800b350:	bd08      	pop	{r3, pc}
 800b352:	4b04      	ldr	r3, [pc, #16]	; (800b364 <rmw_uxrce_transport_init+0x2c>)
 800b354:	4610      	mov	r0, r2
 800b356:	6859      	ldr	r1, [r3, #4]
 800b358:	f001 fe7a 	bl	800d050 <uxr_init_custom_transport>
 800b35c:	f080 0001 	eor.w	r0, r0, #1
 800b360:	b2c0      	uxtb	r0, r0
 800b362:	bd08      	pop	{r3, pc}
 800b364:	200088c0 	.word	0x200088c0

0800b368 <rmw_uros_epoch_nanos>:
 800b368:	4b05      	ldr	r3, [pc, #20]	; (800b380 <rmw_uros_epoch_nanos+0x18>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	b123      	cbz	r3, 800b378 <rmw_uros_epoch_nanos+0x10>
 800b36e:	68d8      	ldr	r0, [r3, #12]
 800b370:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b374:	f002 bcdc 	b.w	800dd30 <uxr_epoch_nanos>
 800b378:	2000      	movs	r0, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	2000ba88 	.word	0x2000ba88

0800b384 <rmw_uros_sync_session>:
 800b384:	b508      	push	{r3, lr}
 800b386:	4b07      	ldr	r3, [pc, #28]	; (800b3a4 <rmw_uros_sync_session+0x20>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	b14b      	cbz	r3, 800b3a0 <rmw_uros_sync_session+0x1c>
 800b38c:	4601      	mov	r1, r0
 800b38e:	68d8      	ldr	r0, [r3, #12]
 800b390:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b394:	f002 fc78 	bl	800dc88 <uxr_sync_session>
 800b398:	f080 0001 	eor.w	r0, r0, #1
 800b39c:	b2c0      	uxtb	r0, r0
 800b39e:	bd08      	pop	{r3, pc}
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	bd08      	pop	{r3, pc}
 800b3a4:	2000ba88 	.word	0x2000ba88

0800b3a8 <rmw_uxrce_init_service_memory>:
 800b3a8:	b1ba      	cbz	r2, 800b3da <rmw_uxrce_init_service_memory+0x32>
 800b3aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ac:	7a03      	ldrb	r3, [r0, #8]
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	b993      	cbnz	r3, 800b3d8 <rmw_uxrce_init_service_memory+0x30>
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	21c8      	movs	r1, #200	; 0xc8
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	461f      	mov	r7, r3
 800b3ba:	fb01 4602 	mla	r6, r1, r2, r4
 800b3be:	e9c5 3300 	strd	r3, r3, [r5]
 800b3c2:	60e9      	str	r1, [r5, #12]
 800b3c4:	7228      	strb	r0, [r5, #8]
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f007 f951 	bl	8012670 <put_memory>
 800b3ce:	60e4      	str	r4, [r4, #12]
 800b3d0:	f804 7bc8 	strb.w	r7, [r4], #200
 800b3d4:	42a6      	cmp	r6, r4
 800b3d6:	d1f6      	bne.n	800b3c6 <rmw_uxrce_init_service_memory+0x1e>
 800b3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3da:	4770      	bx	lr

0800b3dc <rmw_uxrce_init_client_memory>:
 800b3dc:	b1ba      	cbz	r2, 800b40e <rmw_uxrce_init_client_memory+0x32>
 800b3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e0:	7a03      	ldrb	r3, [r0, #8]
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	b993      	cbnz	r3, 800b40c <rmw_uxrce_init_client_memory+0x30>
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	21c8      	movs	r1, #200	; 0xc8
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	461f      	mov	r7, r3
 800b3ee:	fb01 4602 	mla	r6, r1, r2, r4
 800b3f2:	e9c5 3300 	strd	r3, r3, [r5]
 800b3f6:	60e9      	str	r1, [r5, #12]
 800b3f8:	7228      	strb	r0, [r5, #8]
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	f007 f937 	bl	8012670 <put_memory>
 800b402:	60e4      	str	r4, [r4, #12]
 800b404:	f804 7bc8 	strb.w	r7, [r4], #200
 800b408:	42a6      	cmp	r6, r4
 800b40a:	d1f6      	bne.n	800b3fa <rmw_uxrce_init_client_memory+0x1e>
 800b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40e:	4770      	bx	lr

0800b410 <rmw_uxrce_init_publisher_memory>:
 800b410:	b1ba      	cbz	r2, 800b442 <rmw_uxrce_init_publisher_memory+0x32>
 800b412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b414:	7a03      	ldrb	r3, [r0, #8]
 800b416:	4605      	mov	r5, r0
 800b418:	b993      	cbnz	r3, 800b440 <rmw_uxrce_init_publisher_memory+0x30>
 800b41a:	460c      	mov	r4, r1
 800b41c:	21d8      	movs	r1, #216	; 0xd8
 800b41e:	2001      	movs	r0, #1
 800b420:	461f      	mov	r7, r3
 800b422:	fb01 4602 	mla	r6, r1, r2, r4
 800b426:	e9c5 3300 	strd	r3, r3, [r5]
 800b42a:	60e9      	str	r1, [r5, #12]
 800b42c:	7228      	strb	r0, [r5, #8]
 800b42e:	4621      	mov	r1, r4
 800b430:	4628      	mov	r0, r5
 800b432:	f007 f91d 	bl	8012670 <put_memory>
 800b436:	60e4      	str	r4, [r4, #12]
 800b438:	f804 7bd8 	strb.w	r7, [r4], #216
 800b43c:	42a6      	cmp	r6, r4
 800b43e:	d1f6      	bne.n	800b42e <rmw_uxrce_init_publisher_memory+0x1e>
 800b440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b442:	4770      	bx	lr

0800b444 <rmw_uxrce_init_subscription_memory>:
 800b444:	b1ba      	cbz	r2, 800b476 <rmw_uxrce_init_subscription_memory+0x32>
 800b446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b448:	7a03      	ldrb	r3, [r0, #8]
 800b44a:	4605      	mov	r5, r0
 800b44c:	b993      	cbnz	r3, 800b474 <rmw_uxrce_init_subscription_memory+0x30>
 800b44e:	460c      	mov	r4, r1
 800b450:	21d0      	movs	r1, #208	; 0xd0
 800b452:	2001      	movs	r0, #1
 800b454:	461f      	mov	r7, r3
 800b456:	fb01 4602 	mla	r6, r1, r2, r4
 800b45a:	e9c5 3300 	strd	r3, r3, [r5]
 800b45e:	60e9      	str	r1, [r5, #12]
 800b460:	7228      	strb	r0, [r5, #8]
 800b462:	4621      	mov	r1, r4
 800b464:	4628      	mov	r0, r5
 800b466:	f007 f903 	bl	8012670 <put_memory>
 800b46a:	60e4      	str	r4, [r4, #12]
 800b46c:	f804 7bd0 	strb.w	r7, [r4], #208
 800b470:	42a6      	cmp	r6, r4
 800b472:	d1f6      	bne.n	800b462 <rmw_uxrce_init_subscription_memory+0x1e>
 800b474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b476:	4770      	bx	lr

0800b478 <rmw_uxrce_init_node_memory>:
 800b478:	b1ba      	cbz	r2, 800b4aa <rmw_uxrce_init_node_memory+0x32>
 800b47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47c:	7a03      	ldrb	r3, [r0, #8]
 800b47e:	4605      	mov	r5, r0
 800b480:	b993      	cbnz	r3, 800b4a8 <rmw_uxrce_init_node_memory+0x30>
 800b482:	460c      	mov	r4, r1
 800b484:	21a4      	movs	r1, #164	; 0xa4
 800b486:	2001      	movs	r0, #1
 800b488:	461f      	mov	r7, r3
 800b48a:	fb01 4602 	mla	r6, r1, r2, r4
 800b48e:	e9c5 3300 	strd	r3, r3, [r5]
 800b492:	60e9      	str	r1, [r5, #12]
 800b494:	7228      	strb	r0, [r5, #8]
 800b496:	4621      	mov	r1, r4
 800b498:	4628      	mov	r0, r5
 800b49a:	f007 f8e9 	bl	8012670 <put_memory>
 800b49e:	60e4      	str	r4, [r4, #12]
 800b4a0:	f804 7ba4 	strb.w	r7, [r4], #164
 800b4a4:	42a6      	cmp	r6, r4
 800b4a6:	d1f6      	bne.n	800b496 <rmw_uxrce_init_node_memory+0x1e>
 800b4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4aa:	4770      	bx	lr

0800b4ac <rmw_uxrce_init_session_memory>:
 800b4ac:	b1e2      	cbz	r2, 800b4e8 <rmw_uxrce_init_session_memory+0x3c>
 800b4ae:	7a03      	ldrb	r3, [r0, #8]
 800b4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	b9ab      	cbnz	r3, 800b4e4 <rmw_uxrce_init_session_memory+0x38>
 800b4b8:	f241 50a8 	movw	r0, #5544	; 0x15a8
 800b4bc:	460c      	mov	r4, r1
 800b4be:	2101      	movs	r1, #1
 800b4c0:	4698      	mov	r8, r3
 800b4c2:	4607      	mov	r7, r0
 800b4c4:	fb00 4602 	mla	r6, r0, r2, r4
 800b4c8:	e9c5 3300 	strd	r3, r3, [r5]
 800b4cc:	60e8      	str	r0, [r5, #12]
 800b4ce:	7229      	strb	r1, [r5, #8]
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f007 f8cc 	bl	8012670 <put_memory>
 800b4d8:	60e4      	str	r4, [r4, #12]
 800b4da:	f884 8000 	strb.w	r8, [r4]
 800b4de:	443c      	add	r4, r7
 800b4e0:	42a6      	cmp	r6, r4
 800b4e2:	d1f5      	bne.n	800b4d0 <rmw_uxrce_init_session_memory+0x24>
 800b4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop

0800b4ec <rmw_uxrce_init_topic_memory>:
 800b4ec:	b1ca      	cbz	r2, 800b522 <rmw_uxrce_init_topic_memory+0x36>
 800b4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f0:	7a03      	ldrb	r3, [r0, #8]
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	b9a3      	cbnz	r3, 800b520 <rmw_uxrce_init_topic_memory+0x34>
 800b4f6:	460c      	mov	r4, r1
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	211c      	movs	r1, #28
 800b4fc:	461f      	mov	r7, r3
 800b4fe:	e9c6 3300 	strd	r3, r3, [r6]
 800b502:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b506:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b50a:	7230      	strb	r0, [r6, #8]
 800b50c:	60f1      	str	r1, [r6, #12]
 800b50e:	4621      	mov	r1, r4
 800b510:	4630      	mov	r0, r6
 800b512:	f007 f8ad 	bl	8012670 <put_memory>
 800b516:	60e4      	str	r4, [r4, #12]
 800b518:	f804 7b1c 	strb.w	r7, [r4], #28
 800b51c:	42a5      	cmp	r5, r4
 800b51e:	d1f6      	bne.n	800b50e <rmw_uxrce_init_topic_memory+0x22>
 800b520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b522:	4770      	bx	lr

0800b524 <rmw_uxrce_init_static_input_buffer_memory>:
 800b524:	b1da      	cbz	r2, 800b55e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b528:	7a03      	ldrb	r3, [r0, #8]
 800b52a:	4606      	mov	r6, r0
 800b52c:	b9b3      	cbnz	r3, 800b55c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800b52e:	460c      	mov	r4, r1
 800b530:	2001      	movs	r0, #1
 800b532:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800b536:	461f      	mov	r7, r3
 800b538:	e9c6 3300 	strd	r3, r3, [r6]
 800b53c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800b540:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800b544:	7230      	strb	r0, [r6, #8]
 800b546:	60f1      	str	r1, [r6, #12]
 800b548:	4621      	mov	r1, r4
 800b54a:	4630      	mov	r0, r6
 800b54c:	f007 f890 	bl	8012670 <put_memory>
 800b550:	60e4      	str	r4, [r4, #12]
 800b552:	7027      	strb	r7, [r4, #0]
 800b554:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800b558:	42a5      	cmp	r5, r4
 800b55a:	d1f5      	bne.n	800b548 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 800b55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55e:	4770      	bx	lr

0800b560 <rmw_uxrce_init_init_options_impl_memory>:
 800b560:	b1ba      	cbz	r2, 800b592 <rmw_uxrce_init_init_options_impl_memory+0x32>
 800b562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b564:	7a03      	ldrb	r3, [r0, #8]
 800b566:	4605      	mov	r5, r0
 800b568:	b993      	cbnz	r3, 800b590 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800b56a:	460c      	mov	r4, r1
 800b56c:	212c      	movs	r1, #44	; 0x2c
 800b56e:	2001      	movs	r0, #1
 800b570:	461f      	mov	r7, r3
 800b572:	fb01 4602 	mla	r6, r1, r2, r4
 800b576:	e9c5 3300 	strd	r3, r3, [r5]
 800b57a:	60e9      	str	r1, [r5, #12]
 800b57c:	7228      	strb	r0, [r5, #8]
 800b57e:	4621      	mov	r1, r4
 800b580:	4628      	mov	r0, r5
 800b582:	f007 f875 	bl	8012670 <put_memory>
 800b586:	60e4      	str	r4, [r4, #12]
 800b588:	f804 7b2c 	strb.w	r7, [r4], #44
 800b58c:	42a6      	cmp	r6, r4
 800b58e:	d1f6      	bne.n	800b57e <rmw_uxrce_init_init_options_impl_memory+0x1e>
 800b590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b592:	4770      	bx	lr

0800b594 <rmw_uxrce_init_wait_set_memory>:
 800b594:	b1ca      	cbz	r2, 800b5ca <rmw_uxrce_init_wait_set_memory+0x36>
 800b596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b598:	7a03      	ldrb	r3, [r0, #8]
 800b59a:	4606      	mov	r6, r0
 800b59c:	b9a3      	cbnz	r3, 800b5c8 <rmw_uxrce_init_wait_set_memory+0x34>
 800b59e:	460c      	mov	r4, r1
 800b5a0:	2001      	movs	r0, #1
 800b5a2:	211c      	movs	r1, #28
 800b5a4:	461f      	mov	r7, r3
 800b5a6:	e9c6 3300 	strd	r3, r3, [r6]
 800b5aa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b5ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b5b2:	7230      	strb	r0, [r6, #8]
 800b5b4:	60f1      	str	r1, [r6, #12]
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f007 f859 	bl	8012670 <put_memory>
 800b5be:	60e4      	str	r4, [r4, #12]
 800b5c0:	f804 7b1c 	strb.w	r7, [r4], #28
 800b5c4:	42a5      	cmp	r5, r4
 800b5c6:	d1f6      	bne.n	800b5b6 <rmw_uxrce_init_wait_set_memory+0x22>
 800b5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ca:	4770      	bx	lr

0800b5cc <rmw_uxrce_init_guard_condition_memory>:
 800b5cc:	b1ba      	cbz	r2, 800b5fe <rmw_uxrce_init_guard_condition_memory+0x32>
 800b5ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d0:	7a03      	ldrb	r3, [r0, #8]
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	b993      	cbnz	r3, 800b5fc <rmw_uxrce_init_guard_condition_memory+0x30>
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	2001      	movs	r0, #1
 800b5da:	2120      	movs	r1, #32
 800b5dc:	461f      	mov	r7, r3
 800b5de:	e9c5 3300 	strd	r3, r3, [r5]
 800b5e2:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800b5e6:	7228      	strb	r0, [r5, #8]
 800b5e8:	60e9      	str	r1, [r5, #12]
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f007 f83f 	bl	8012670 <put_memory>
 800b5f2:	60e4      	str	r4, [r4, #12]
 800b5f4:	f804 7b20 	strb.w	r7, [r4], #32
 800b5f8:	42a6      	cmp	r6, r4
 800b5fa:	d1f6      	bne.n	800b5ea <rmw_uxrce_init_guard_condition_memory+0x1e>
 800b5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5fe:	4770      	bx	lr

0800b600 <rmw_uxrce_fini_session_memory>:
 800b600:	4601      	mov	r1, r0
 800b602:	4801      	ldr	r0, [pc, #4]	; (800b608 <rmw_uxrce_fini_session_memory+0x8>)
 800b604:	f007 b834 	b.w	8012670 <put_memory>
 800b608:	2000ba88 	.word	0x2000ba88

0800b60c <rmw_uxrce_fini_node_memory>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	6800      	ldr	r0, [r0, #0]
 800b612:	b128      	cbz	r0, 800b620 <rmw_uxrce_fini_node_memory+0x14>
 800b614:	4b07      	ldr	r3, [pc, #28]	; (800b634 <rmw_uxrce_fini_node_memory+0x28>)
 800b616:	6819      	ldr	r1, [r3, #0]
 800b618:	f7f4 fe0a 	bl	8000230 <strcmp>
 800b61c:	b940      	cbnz	r0, 800b630 <rmw_uxrce_fini_node_memory+0x24>
 800b61e:	6020      	str	r0, [r4, #0]
 800b620:	6861      	ldr	r1, [r4, #4]
 800b622:	b129      	cbz	r1, 800b630 <rmw_uxrce_fini_node_memory+0x24>
 800b624:	2500      	movs	r5, #0
 800b626:	4804      	ldr	r0, [pc, #16]	; (800b638 <rmw_uxrce_fini_node_memory+0x2c>)
 800b628:	610d      	str	r5, [r1, #16]
 800b62a:	f007 f821 	bl	8012670 <put_memory>
 800b62e:	6065      	str	r5, [r4, #4]
 800b630:	bd38      	pop	{r3, r4, r5, pc}
 800b632:	bf00      	nop
 800b634:	08016b44 	.word	0x08016b44
 800b638:	2000b8b4 	.word	0x2000b8b4

0800b63c <rmw_uxrce_fini_publisher_memory>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	4604      	mov	r4, r0
 800b640:	6800      	ldr	r0, [r0, #0]
 800b642:	b128      	cbz	r0, 800b650 <rmw_uxrce_fini_publisher_memory+0x14>
 800b644:	4b06      	ldr	r3, [pc, #24]	; (800b660 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b646:	6819      	ldr	r1, [r3, #0]
 800b648:	f7f4 fdf2 	bl	8000230 <strcmp>
 800b64c:	b938      	cbnz	r0, 800b65e <rmw_uxrce_fini_publisher_memory+0x22>
 800b64e:	6020      	str	r0, [r4, #0]
 800b650:	6861      	ldr	r1, [r4, #4]
 800b652:	b121      	cbz	r1, 800b65e <rmw_uxrce_fini_publisher_memory+0x22>
 800b654:	4803      	ldr	r0, [pc, #12]	; (800b664 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b656:	f007 f80b 	bl	8012670 <put_memory>
 800b65a:	2300      	movs	r3, #0
 800b65c:	6063      	str	r3, [r4, #4]
 800b65e:	bd10      	pop	{r4, pc}
 800b660:	08016b44 	.word	0x08016b44
 800b664:	200088f0 	.word	0x200088f0

0800b668 <rmw_uxrce_fini_subscription_memory>:
 800b668:	b510      	push	{r4, lr}
 800b66a:	4604      	mov	r4, r0
 800b66c:	6800      	ldr	r0, [r0, #0]
 800b66e:	b128      	cbz	r0, 800b67c <rmw_uxrce_fini_subscription_memory+0x14>
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <rmw_uxrce_fini_subscription_memory+0x24>)
 800b672:	6819      	ldr	r1, [r3, #0]
 800b674:	f7f4 fddc 	bl	8000230 <strcmp>
 800b678:	b938      	cbnz	r0, 800b68a <rmw_uxrce_fini_subscription_memory+0x22>
 800b67a:	6020      	str	r0, [r4, #0]
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	b121      	cbz	r1, 800b68a <rmw_uxrce_fini_subscription_memory+0x22>
 800b680:	4803      	ldr	r0, [pc, #12]	; (800b690 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b682:	f006 fff5 	bl	8012670 <put_memory>
 800b686:	2300      	movs	r3, #0
 800b688:	6063      	str	r3, [r4, #4]
 800b68a:	bd10      	pop	{r4, pc}
 800b68c:	08016b44 	.word	0x08016b44
 800b690:	2000bb4c 	.word	0x2000bb4c

0800b694 <rmw_uxrce_fini_service_memory>:
 800b694:	b510      	push	{r4, lr}
 800b696:	4604      	mov	r4, r0
 800b698:	6800      	ldr	r0, [r0, #0]
 800b69a:	b128      	cbz	r0, 800b6a8 <rmw_uxrce_fini_service_memory+0x14>
 800b69c:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <rmw_uxrce_fini_service_memory+0x24>)
 800b69e:	6819      	ldr	r1, [r3, #0]
 800b6a0:	f7f4 fdc6 	bl	8000230 <strcmp>
 800b6a4:	b938      	cbnz	r0, 800b6b6 <rmw_uxrce_fini_service_memory+0x22>
 800b6a6:	6020      	str	r0, [r4, #0]
 800b6a8:	6861      	ldr	r1, [r4, #4]
 800b6aa:	b121      	cbz	r1, 800b6b6 <rmw_uxrce_fini_service_memory+0x22>
 800b6ac:	4803      	ldr	r0, [pc, #12]	; (800b6bc <rmw_uxrce_fini_service_memory+0x28>)
 800b6ae:	f006 ffdf 	bl	8012670 <put_memory>
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6063      	str	r3, [r4, #4]
 800b6b6:	bd10      	pop	{r4, pc}
 800b6b8:	08016b44 	.word	0x08016b44
 800b6bc:	2000bb3c 	.word	0x2000bb3c

0800b6c0 <rmw_uxrce_fini_client_memory>:
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	6800      	ldr	r0, [r0, #0]
 800b6c6:	b128      	cbz	r0, 800b6d4 <rmw_uxrce_fini_client_memory+0x14>
 800b6c8:	4b06      	ldr	r3, [pc, #24]	; (800b6e4 <rmw_uxrce_fini_client_memory+0x24>)
 800b6ca:	6819      	ldr	r1, [r3, #0]
 800b6cc:	f7f4 fdb0 	bl	8000230 <strcmp>
 800b6d0:	b938      	cbnz	r0, 800b6e2 <rmw_uxrce_fini_client_memory+0x22>
 800b6d2:	6020      	str	r0, [r4, #0]
 800b6d4:	6861      	ldr	r1, [r4, #4]
 800b6d6:	b121      	cbz	r1, 800b6e2 <rmw_uxrce_fini_client_memory+0x22>
 800b6d8:	4803      	ldr	r0, [pc, #12]	; (800b6e8 <rmw_uxrce_fini_client_memory+0x28>)
 800b6da:	f006 ffc9 	bl	8012670 <put_memory>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6063      	str	r3, [r4, #4]
 800b6e2:	bd10      	pop	{r4, pc}
 800b6e4:	08016b44 	.word	0x08016b44
 800b6e8:	20009170 	.word	0x20009170

0800b6ec <rmw_uxrce_fini_topic_memory>:
 800b6ec:	b510      	push	{r4, lr}
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	4803      	ldr	r0, [pc, #12]	; (800b700 <rmw_uxrce_fini_topic_memory+0x14>)
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	f006 ffbc 	bl	8012670 <put_memory>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61a3      	str	r3, [r4, #24]
 800b6fc:	bd10      	pop	{r4, pc}
 800b6fe:	bf00      	nop
 800b700:	2000ba78 	.word	0x2000ba78

0800b704 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b704:	b082      	sub	sp, #8
 800b706:	b4f0      	push	{r4, r5, r6, r7}
 800b708:	4923      	ldr	r1, [pc, #140]	; (800b798 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800b70a:	ac04      	add	r4, sp, #16
 800b70c:	e884 000c 	stmia.w	r4, {r2, r3}
 800b710:	680d      	ldr	r5, [r1, #0]
 800b712:	9c05      	ldr	r4, [sp, #20]
 800b714:	4601      	mov	r1, r0
 800b716:	2d00      	cmp	r5, #0
 800b718:	d03c      	beq.n	800b794 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800b71a:	462b      	mov	r3, r5
 800b71c:	2000      	movs	r0, #0
 800b71e:	68da      	ldr	r2, [r3, #12]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800b726:	4291      	cmp	r1, r2
 800b728:	bf08      	it	eq
 800b72a:	3001      	addeq	r0, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f6      	bne.n	800b71e <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800b730:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d025      	beq.n	800b784 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800b738:	d905      	bls.n	800b746 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d003      	beq.n	800b746 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800b73e:	2000      	movs	r0, #0
 800b740:	bcf0      	pop	{r4, r5, r6, r7}
 800b742:	b002      	add	sp, #8
 800b744:	4770      	bx	lr
 800b746:	b304      	cbz	r4, 800b78a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b748:	4284      	cmp	r4, r0
 800b74a:	d81e      	bhi.n	800b78a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	d0f6      	beq.n	800b73e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b750:	2000      	movs	r0, #0
 800b752:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b756:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800b75a:	e002      	b.n	800b762 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800b75c:	68ad      	ldr	r5, [r5, #8]
 800b75e:	2d00      	cmp	r5, #0
 800b760:	d0ee      	beq.n	800b740 <rmw_uxrce_get_static_input_buffer_for_entity+0x3c>
 800b762:	68eb      	ldr	r3, [r5, #12]
 800b764:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800b768:	4291      	cmp	r1, r2
 800b76a:	d1f7      	bne.n	800b75c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b76c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	42b2      	cmp	r2, r6
 800b776:	eb73 0407 	sbcs.w	r4, r3, r7
 800b77a:	daef      	bge.n	800b75c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b77c:	4616      	mov	r6, r2
 800b77e:	461f      	mov	r7, r3
 800b780:	4628      	mov	r0, r5
 800b782:	e7eb      	b.n	800b75c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800b784:	b10c      	cbz	r4, 800b78a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b786:	4284      	cmp	r4, r0
 800b788:	d9d9      	bls.n	800b73e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b78a:	bcf0      	pop	{r4, r5, r6, r7}
 800b78c:	4802      	ldr	r0, [pc, #8]	; (800b798 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800b78e:	b002      	add	sp, #8
 800b790:	f006 bf5e 	b.w	8012650 <get_memory>
 800b794:	4628      	mov	r0, r5
 800b796:	e7cb      	b.n	800b730 <rmw_uxrce_get_static_input_buffer_for_entity+0x2c>
 800b798:	200088e0 	.word	0x200088e0

0800b79c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b79c:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	b303      	cbz	r3, 800b7e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>
 800b7a2:	e92d 03d0 	stmdb	sp!, {r4, r6, r7, r8, r9}
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b7ac:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e001      	b.n	800b7b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	b193      	cbz	r3, 800b7de <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800b7be:	428c      	cmp	r4, r1
 800b7c0:	d1f8      	bne.n	800b7b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b7c2:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800b7c6:	e9d2 8900 	ldrd	r8, r9, [r2]
 800b7ca:	45b0      	cmp	r8, r6
 800b7cc:	eb79 0207 	sbcs.w	r2, r9, r7
 800b7d0:	daf0      	bge.n	800b7b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	4646      	mov	r6, r8
 800b7d8:	464f      	mov	r7, r9
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1ec      	bne.n	800b7b8 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800b7de:	e8bd 03d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9}
 800b7e2:	4770      	bx	lr
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	4770      	bx	lr
 800b7e8:	200088e0 	.word	0x200088e0
 800b7ec:	00000000 	.word	0x00000000

0800b7f0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	4e38      	ldr	r6, [pc, #224]	; (800b8d8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	f8d6 8000 	ldr.w	r8, [r6]
 800b7fc:	f7ff fdb4 	bl	800b368 <rmw_uros_epoch_nanos>
 800b800:	f1b8 0f00 	cmp.w	r8, #0
 800b804:	d05f      	beq.n	800b8c6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800b806:	46b1      	mov	r9, r6
 800b808:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b80c:	4682      	mov	sl, r0
 800b80e:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800b812:	468b      	mov	fp, r1
 800b814:	2b04      	cmp	r3, #4
 800b816:	d02d      	beq.n	800b874 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800b818:	2b05      	cmp	r3, #5
 800b81a:	d041      	beq.n	800b8a0 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d029      	beq.n	800b874 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	2001      	movs	r0, #1
 800b826:	2100      	movs	r1, #0
 800b828:	e9cd 2300 	strd	r2, r3, [sp]
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800b832:	18c2      	adds	r2, r0, r3
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	cec0      	ldmia	r6, {r6, r7}
 800b838:	eb41 0303 	adc.w	r3, r1, r3
 800b83c:	1994      	adds	r4, r2, r6
 800b83e:	eb43 0507 	adc.w	r5, r3, r7
 800b842:	4554      	cmp	r4, sl
 800b844:	eb75 020b 	sbcs.w	r2, r5, fp
 800b848:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b84c:	db03      	blt.n	800b856 <rmw_uxrce_clean_expired_static_input_buffer+0x66>
 800b84e:	45b2      	cmp	sl, r6
 800b850:	eb7b 0207 	sbcs.w	r2, fp, r7
 800b854:	da05      	bge.n	800b862 <rmw_uxrce_clean_expired_static_input_buffer+0x72>
 800b856:	4641      	mov	r1, r8
 800b858:	4648      	mov	r0, r9
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	f006 ff08 	bl	8012670 <put_memory>
 800b860:	9b00      	ldr	r3, [sp, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d02f      	beq.n	800b8c6 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800b866:	4698      	mov	r8, r3
 800b868:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800b86c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800b870:	2b04      	cmp	r3, #4
 800b872:	d1d1      	bne.n	800b818 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800b874:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800b878:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800b87c:	e9cd 2300 	strd	r2, r3, [sp]
 800b880:	4313      	orrs	r3, r2
 800b882:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800b886:	d015      	beq.n	800b8b4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b888:	9a01      	ldr	r2, [sp, #4]
 800b88a:	4b14      	ldr	r3, [pc, #80]	; (800b8dc <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800b88c:	fb03 f702 	mul.w	r7, r3, r2
 800b890:	9a00      	ldr	r2, [sp, #0]
 800b892:	fba2 2303 	umull	r2, r3, r2, r3
 800b896:	e9cd 2300 	strd	r2, r3, [sp]
 800b89a:	443b      	add	r3, r7
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	e7c5      	b.n	800b82c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b8a0:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800b8a4:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800b8a8:	e9cd 2300 	strd	r2, r3, [sp]
 800b8ac:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	d1e9      	bne.n	800b888 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800b8b4:	ea50 0301 	orrs.w	r3, r0, r1
 800b8b8:	d1b8      	bne.n	800b82c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b8ba:	a305      	add	r3, pc, #20	; (adr r3, 800b8d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	e9cd 2300 	strd	r2, r3, [sp]
 800b8c4:	e7b2      	b.n	800b82c <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800b8c6:	b003      	add	sp, #12
 800b8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	fc23ac00 	.word	0xfc23ac00
 800b8d4:	00000006 	.word	0x00000006
 800b8d8:	200088e0 	.word	0x200088e0
 800b8dc:	3b9aca00 	.word	0x3b9aca00

0800b8e0 <run_xrce_session>:
 800b8e0:	b510      	push	{r4, lr}
 800b8e2:	788c      	ldrb	r4, [r1, #2]
 800b8e4:	b086      	sub	sp, #24
 800b8e6:	2c01      	cmp	r4, #1
 800b8e8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b8ec:	d00c      	beq.n	800b908 <run_xrce_session+0x28>
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	f10d 020e 	add.w	r2, sp, #14
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b8fc:	f10d 0317 	add.w	r3, sp, #23
 800b900:	f002 fad6 	bl	800deb0 <uxr_run_session_until_all_status>
 800b904:	b006      	add	sp, #24
 800b906:	bd10      	pop	{r4, pc}
 800b908:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800b90c:	f002 fa1a 	bl	800dd44 <uxr_flash_output_streams>
 800b910:	4620      	mov	r0, r4
 800b912:	b006      	add	sp, #24
 800b914:	bd10      	pop	{r4, pc}
 800b916:	bf00      	nop

0800b918 <convert_qos_profile>:
 800b918:	b430      	push	{r4, r5}
 800b91a:	7a0d      	ldrb	r5, [r1, #8]
 800b91c:	780c      	ldrb	r4, [r1, #0]
 800b91e:	7a4a      	ldrb	r2, [r1, #9]
 800b920:	f1a5 0502 	sub.w	r5, r5, #2
 800b924:	f1a4 0402 	sub.w	r4, r4, #2
 800b928:	fab5 f585 	clz	r5, r5
 800b92c:	fab4 f484 	clz	r4, r4
 800b930:	2a02      	cmp	r2, #2
 800b932:	bf18      	it	ne
 800b934:	2200      	movne	r2, #0
 800b936:	8889      	ldrh	r1, [r1, #4]
 800b938:	096d      	lsrs	r5, r5, #5
 800b93a:	0964      	lsrs	r4, r4, #5
 800b93c:	7045      	strb	r5, [r0, #1]
 800b93e:	7084      	strb	r4, [r0, #2]
 800b940:	7002      	strb	r2, [r0, #0]
 800b942:	8081      	strh	r1, [r0, #4]
 800b944:	bc30      	pop	{r4, r5}
 800b946:	4770      	bx	lr

0800b948 <generate_type_name>:
 800b948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94c:	4606      	mov	r6, r0
 800b94e:	b086      	sub	sp, #24
 800b950:	6840      	ldr	r0, [r0, #4]
 800b952:	4688      	mov	r8, r1
 800b954:	4617      	mov	r7, r2
 800b956:	f7f4 fc75 	bl	8000244 <strlen>
 800b95a:	6834      	ldr	r4, [r6, #0]
 800b95c:	4605      	mov	r5, r0
 800b95e:	b11c      	cbz	r4, 800b968 <generate_type_name+0x20>
 800b960:	4620      	mov	r0, r4
 800b962:	f7f4 fc6f 	bl	8000244 <strlen>
 800b966:	4604      	mov	r4, r0
 800b968:	2300      	movs	r3, #0
 800b96a:	f888 3000 	strb.w	r3, [r8]
 800b96e:	6833      	ldr	r3, [r6, #0]
 800b970:	3508      	adds	r5, #8
 800b972:	442c      	add	r4, r5
 800b974:	b19b      	cbz	r3, 800b99e <generate_type_name+0x56>
 800b976:	490c      	ldr	r1, [pc, #48]	; (800b9a8 <generate_type_name+0x60>)
 800b978:	4608      	mov	r0, r1
 800b97a:	6875      	ldr	r5, [r6, #4]
 800b97c:	4a0b      	ldr	r2, [pc, #44]	; (800b9ac <generate_type_name+0x64>)
 800b97e:	9504      	str	r5, [sp, #16]
 800b980:	4d0b      	ldr	r5, [pc, #44]	; (800b9b0 <generate_type_name+0x68>)
 800b982:	9103      	str	r1, [sp, #12]
 800b984:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800b988:	9000      	str	r0, [sp, #0]
 800b98a:	9205      	str	r2, [sp, #20]
 800b98c:	4639      	mov	r1, r7
 800b98e:	4640      	mov	r0, r8
 800b990:	4a08      	ldr	r2, [pc, #32]	; (800b9b4 <generate_type_name+0x6c>)
 800b992:	f008 fbc9 	bl	8014128 <sniprintf>
 800b996:	4620      	mov	r0, r4
 800b998:	b006      	add	sp, #24
 800b99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b99e:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <generate_type_name+0x70>)
 800b9a0:	4901      	ldr	r1, [pc, #4]	; (800b9a8 <generate_type_name+0x60>)
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	e7e9      	b.n	800b97a <generate_type_name+0x32>
 800b9a6:	bf00      	nop
 800b9a8:	08016440 	.word	0x08016440
 800b9ac:	08016454 	.word	0x08016454
 800b9b0:	08016458 	.word	0x08016458
 800b9b4:	08016444 	.word	0x08016444
 800b9b8:	0801691c 	.word	0x0801691c

0800b9bc <generate_topic_name>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	9000      	str	r0, [sp, #0]
 800b9c2:	4614      	mov	r4, r2
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <generate_topic_name+0x24>)
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	4a06      	ldr	r2, [pc, #24]	; (800b9e4 <generate_topic_name+0x28>)
 800b9cc:	f008 fbac 	bl	8014128 <sniprintf>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	da02      	bge.n	800b9da <generate_topic_name+0x1e>
 800b9d4:	4284      	cmp	r4, r0
 800b9d6:	bfd8      	it	le
 800b9d8:	2000      	movle	r0, #0
 800b9da:	b002      	add	sp, #8
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	bf00      	nop
 800b9e0:	08016464 	.word	0x08016464
 800b9e4:	0801645c 	.word	0x0801645c

0800b9e8 <is_uxrce_rmw_identifier_valid>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	b140      	cbz	r0, 800ba00 <is_uxrce_rmw_identifier_valid+0x18>
 800b9ee:	f006 fe97 	bl	8012720 <rmw_get_implementation_identifier>
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f7f4 fc1b 	bl	8000230 <strcmp>
 800b9fa:	fab0 f080 	clz	r0, r0
 800b9fe:	0940      	lsrs	r0, r0, #5
 800ba00:	bd10      	pop	{r4, pc}
 800ba02:	bf00      	nop

0800ba04 <get_message_typesupport_handle>:
 800ba04:	6883      	ldr	r3, [r0, #8]
 800ba06:	4718      	bx	r3

0800ba08 <get_message_typesupport_handle_function>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	6800      	ldr	r0, [r0, #0]
 800ba0e:	f7f4 fc0f 	bl	8000230 <strcmp>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	bf0c      	ite	eq
 800ba16:	4620      	moveq	r0, r4
 800ba18:	2000      	movne	r0, #0
 800ba1a:	bd10      	pop	{r4, pc}

0800ba1c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt32>:
 800ba1c:	f000 b828 	b.w	800ba70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32>

0800ba20 <_UInt32__max_serialized_size>:
 800ba20:	2104      	movs	r1, #4
 800ba22:	b508      	push	{r3, lr}
 800ba24:	2000      	movs	r0, #0
 800ba26:	f001 f807 	bl	800ca38 <ucdr_alignment>
 800ba2a:	3004      	adds	r0, #4
 800ba2c:	bd08      	pop	{r3, pc}
 800ba2e:	bf00      	nop

0800ba30 <_UInt32__cdr_deserialize>:
 800ba30:	b109      	cbz	r1, 800ba36 <_UInt32__cdr_deserialize+0x6>
 800ba32:	f000 bb99 	b.w	800c168 <ucdr_deserialize_uint32_t>
 800ba36:	4608      	mov	r0, r1
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop

0800ba3c <get_serialized_size_std_msgs__msg__UInt32>:
 800ba3c:	b508      	push	{r3, lr}
 800ba3e:	b120      	cbz	r0, 800ba4a <get_serialized_size_std_msgs__msg__UInt32+0xe>
 800ba40:	4608      	mov	r0, r1
 800ba42:	2104      	movs	r1, #4
 800ba44:	f000 fff8 	bl	800ca38 <ucdr_alignment>
 800ba48:	3004      	adds	r0, #4
 800ba4a:	bd08      	pop	{r3, pc}

0800ba4c <_UInt32__cdr_serialize>:
 800ba4c:	460a      	mov	r2, r1
 800ba4e:	b118      	cbz	r0, 800ba58 <_UInt32__cdr_serialize+0xc>
 800ba50:	6801      	ldr	r1, [r0, #0]
 800ba52:	4610      	mov	r0, r2
 800ba54:	f000 ba58 	b.w	800bf08 <ucdr_serialize_uint32_t>
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop

0800ba5c <_UInt32__get_serialized_size>:
 800ba5c:	b130      	cbz	r0, 800ba6c <_UInt32__get_serialized_size+0x10>
 800ba5e:	2104      	movs	r1, #4
 800ba60:	b508      	push	{r3, lr}
 800ba62:	2000      	movs	r0, #0
 800ba64:	f000 ffe8 	bl	800ca38 <ucdr_alignment>
 800ba68:	3004      	adds	r0, #4
 800ba6a:	bd08      	pop	{r3, pc}
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop

0800ba70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32>:
 800ba70:	4800      	ldr	r0, [pc, #0]	; (800ba74 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt32+0x4>)
 800ba72:	4770      	bx	lr
 800ba74:	20000024 	.word	0x20000024

0800ba78 <ucdr_serialize_bool>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	4604      	mov	r4, r0
 800ba80:	f000 ff90 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800ba84:	b148      	cbz	r0, 800ba9a <ucdr_serialize_bool+0x22>
 800ba86:	2101      	movs	r1, #1
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	701d      	strb	r5, [r3, #0]
 800ba8c:	68a2      	ldr	r2, [r4, #8]
 800ba8e:	6923      	ldr	r3, [r4, #16]
 800ba90:	440a      	add	r2, r1
 800ba92:	440b      	add	r3, r1
 800ba94:	60a2      	str	r2, [r4, #8]
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	7561      	strb	r1, [r4, #21]
 800ba9a:	7da0      	ldrb	r0, [r4, #22]
 800ba9c:	f080 0001 	eor.w	r0, r0, #1
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop

0800baa4 <ucdr_deserialize_bool>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	460d      	mov	r5, r1
 800baa8:	2101      	movs	r1, #1
 800baaa:	4604      	mov	r4, r0
 800baac:	f000 ff7a 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bab0:	b160      	cbz	r0, 800bacc <ucdr_deserialize_bool+0x28>
 800bab2:	68a2      	ldr	r2, [r4, #8]
 800bab4:	2001      	movs	r0, #1
 800bab6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	3900      	subs	r1, #0
 800babe:	bf18      	it	ne
 800bac0:	2101      	movne	r1, #1
 800bac2:	4403      	add	r3, r0
 800bac4:	7029      	strb	r1, [r5, #0]
 800bac6:	60a2      	str	r2, [r4, #8]
 800bac8:	6123      	str	r3, [r4, #16]
 800baca:	7560      	strb	r0, [r4, #21]
 800bacc:	7da0      	ldrb	r0, [r4, #22]
 800bace:	f080 0001 	eor.w	r0, r0, #1
 800bad2:	bd38      	pop	{r3, r4, r5, pc}

0800bad4 <ucdr_serialize_uint8_t>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	460d      	mov	r5, r1
 800bad8:	2101      	movs	r1, #1
 800bada:	4604      	mov	r4, r0
 800badc:	f000 ff62 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bae0:	b148      	cbz	r0, 800baf6 <ucdr_serialize_uint8_t+0x22>
 800bae2:	2101      	movs	r1, #1
 800bae4:	68a3      	ldr	r3, [r4, #8]
 800bae6:	701d      	strb	r5, [r3, #0]
 800bae8:	68a2      	ldr	r2, [r4, #8]
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	440a      	add	r2, r1
 800baee:	440b      	add	r3, r1
 800baf0:	60a2      	str	r2, [r4, #8]
 800baf2:	6123      	str	r3, [r4, #16]
 800baf4:	7561      	strb	r1, [r4, #21]
 800baf6:	7da0      	ldrb	r0, [r4, #22]
 800baf8:	f080 0001 	eor.w	r0, r0, #1
 800bafc:	bd38      	pop	{r3, r4, r5, pc}
 800bafe:	bf00      	nop

0800bb00 <ucdr_deserialize_uint8_t>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	460d      	mov	r5, r1
 800bb04:	2101      	movs	r1, #1
 800bb06:	4604      	mov	r4, r0
 800bb08:	f000 ff4c 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bb0c:	b150      	cbz	r0, 800bb24 <ucdr_deserialize_uint8_t+0x24>
 800bb0e:	2101      	movs	r1, #1
 800bb10:	68a3      	ldr	r3, [r4, #8]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	702b      	strb	r3, [r5, #0]
 800bb16:	68a2      	ldr	r2, [r4, #8]
 800bb18:	6923      	ldr	r3, [r4, #16]
 800bb1a:	440a      	add	r2, r1
 800bb1c:	440b      	add	r3, r1
 800bb1e:	60a2      	str	r2, [r4, #8]
 800bb20:	6123      	str	r3, [r4, #16]
 800bb22:	7561      	strb	r1, [r4, #21]
 800bb24:	7da0      	ldrb	r0, [r4, #22]
 800bb26:	f080 0001 	eor.w	r0, r0, #1
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}

0800bb2c <ucdr_serialize_uint16_t>:
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb32:	2102      	movs	r1, #2
 800bb34:	b082      	sub	sp, #8
 800bb36:	4604      	mov	r4, r0
 800bb38:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bb3c:	f000 ff84 	bl	800ca48 <ucdr_buffer_alignment>
 800bb40:	4601      	mov	r1, r0
 800bb42:	4620      	mov	r0, r4
 800bb44:	7d67      	ldrb	r7, [r4, #21]
 800bb46:	f000 ffc5 	bl	800cad4 <ucdr_advance_buffer>
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	f000 ff1d 	bl	800c98c <ucdr_check_buffer_available_for>
 800bb52:	bb78      	cbnz	r0, 800bbb4 <ucdr_serialize_uint16_t+0x88>
 800bb54:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	d926      	bls.n	800bbaa <ucdr_serialize_uint16_t+0x7e>
 800bb5c:	6922      	ldr	r2, [r4, #16]
 800bb5e:	1b5e      	subs	r6, r3, r5
 800bb60:	4432      	add	r2, r6
 800bb62:	f1c6 0802 	rsb	r8, r6, #2
 800bb66:	4641      	mov	r1, r8
 800bb68:	4620      	mov	r0, r4
 800bb6a:	60a3      	str	r3, [r4, #8]
 800bb6c:	6122      	str	r2, [r4, #16]
 800bb6e:	f000 ff19 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d03b      	beq.n	800bbee <ucdr_serialize_uint16_t+0xc2>
 800bb76:	7d23      	ldrb	r3, [r4, #20]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d04a      	beq.n	800bc12 <ucdr_serialize_uint16_t+0xe6>
 800bb7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb80:	702b      	strb	r3, [r5, #0]
 800bb82:	2e00      	cmp	r6, #0
 800bb84:	d040      	beq.n	800bc08 <ucdr_serialize_uint16_t+0xdc>
 800bb86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb8a:	706b      	strb	r3, [r5, #1]
 800bb8c:	2102      	movs	r1, #2
 800bb8e:	6923      	ldr	r3, [r4, #16]
 800bb90:	68a2      	ldr	r2, [r4, #8]
 800bb92:	7da0      	ldrb	r0, [r4, #22]
 800bb94:	440b      	add	r3, r1
 800bb96:	1b9e      	subs	r6, r3, r6
 800bb98:	4442      	add	r2, r8
 800bb9a:	f080 0001 	eor.w	r0, r0, #1
 800bb9e:	6126      	str	r6, [r4, #16]
 800bba0:	60a2      	str	r2, [r4, #8]
 800bba2:	7561      	strb	r1, [r4, #21]
 800bba4:	b002      	add	sp, #8
 800bba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbaa:	2102      	movs	r1, #2
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 fef9 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bbb2:	b190      	cbz	r0, 800bbda <ucdr_serialize_uint16_t+0xae>
 800bbb4:	7d23      	ldrb	r3, [r4, #20]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	68a3      	ldr	r3, [r4, #8]
 800bbba:	d014      	beq.n	800bbe6 <ucdr_serialize_uint16_t+0xba>
 800bbbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800bbc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbc4:	7019      	strb	r1, [r3, #0]
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	705a      	strb	r2, [r3, #1]
 800bbca:	2102      	movs	r1, #2
 800bbcc:	68a2      	ldr	r2, [r4, #8]
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	440a      	add	r2, r1
 800bbd2:	440b      	add	r3, r1
 800bbd4:	60a2      	str	r2, [r4, #8]
 800bbd6:	6123      	str	r3, [r4, #16]
 800bbd8:	7561      	strb	r1, [r4, #21]
 800bbda:	7da0      	ldrb	r0, [r4, #22]
 800bbdc:	f080 0001 	eor.w	r0, r0, #1
 800bbe0:	b002      	add	sp, #8
 800bbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bbea:	801a      	strh	r2, [r3, #0]
 800bbec:	e7ed      	b.n	800bbca <ucdr_serialize_uint16_t+0x9e>
 800bbee:	68a2      	ldr	r2, [r4, #8]
 800bbf0:	6923      	ldr	r3, [r4, #16]
 800bbf2:	7da0      	ldrb	r0, [r4, #22]
 800bbf4:	1b92      	subs	r2, r2, r6
 800bbf6:	f080 0001 	eor.w	r0, r0, #1
 800bbfa:	1b9e      	subs	r6, r3, r6
 800bbfc:	7567      	strb	r7, [r4, #21]
 800bbfe:	60a2      	str	r2, [r4, #8]
 800bc00:	6126      	str	r6, [r4, #16]
 800bc02:	b002      	add	sp, #8
 800bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc08:	68a3      	ldr	r3, [r4, #8]
 800bc0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc0e:	701a      	strb	r2, [r3, #0]
 800bc10:	e7bc      	b.n	800bb8c <ucdr_serialize_uint16_t+0x60>
 800bc12:	4628      	mov	r0, r5
 800bc14:	f10d 0506 	add.w	r5, sp, #6
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	f008 f902 	bl	8013e24 <memcpy>
 800bc20:	4642      	mov	r2, r8
 800bc22:	68a0      	ldr	r0, [r4, #8]
 800bc24:	19a9      	adds	r1, r5, r6
 800bc26:	f008 f8fd 	bl	8013e24 <memcpy>
 800bc2a:	e7af      	b.n	800bb8c <ucdr_serialize_uint16_t+0x60>

0800bc2c <ucdr_serialize_endian_uint16_t>:
 800bc2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc30:	460d      	mov	r5, r1
 800bc32:	b083      	sub	sp, #12
 800bc34:	2102      	movs	r1, #2
 800bc36:	4604      	mov	r4, r0
 800bc38:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bc3c:	f000 ff04 	bl	800ca48 <ucdr_buffer_alignment>
 800bc40:	4601      	mov	r1, r0
 800bc42:	4620      	mov	r0, r4
 800bc44:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bc48:	f000 ff44 	bl	800cad4 <ucdr_advance_buffer>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	2102      	movs	r1, #2
 800bc50:	f000 fe9c 	bl	800c98c <ucdr_check_buffer_available_for>
 800bc54:	bb70      	cbnz	r0, 800bcb4 <ucdr_serialize_endian_uint16_t+0x88>
 800bc56:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800bc5a:	42b3      	cmp	r3, r6
 800bc5c:	d925      	bls.n	800bcaa <ucdr_serialize_endian_uint16_t+0x7e>
 800bc5e:	6922      	ldr	r2, [r4, #16]
 800bc60:	1b9f      	subs	r7, r3, r6
 800bc62:	443a      	add	r2, r7
 800bc64:	f1c7 0902 	rsb	r9, r7, #2
 800bc68:	4649      	mov	r1, r9
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	60a3      	str	r3, [r4, #8]
 800bc6e:	6122      	str	r2, [r4, #16]
 800bc70:	f000 fe98 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d039      	beq.n	800bcec <ucdr_serialize_endian_uint16_t+0xc0>
 800bc78:	2d01      	cmp	r5, #1
 800bc7a:	d04a      	beq.n	800bd12 <ucdr_serialize_endian_uint16_t+0xe6>
 800bc7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc80:	7033      	strb	r3, [r6, #0]
 800bc82:	2f00      	cmp	r7, #0
 800bc84:	d040      	beq.n	800bd08 <ucdr_serialize_endian_uint16_t+0xdc>
 800bc86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc8a:	7073      	strb	r3, [r6, #1]
 800bc8c:	2102      	movs	r1, #2
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	68a2      	ldr	r2, [r4, #8]
 800bc92:	7da0      	ldrb	r0, [r4, #22]
 800bc94:	440b      	add	r3, r1
 800bc96:	1bdf      	subs	r7, r3, r7
 800bc98:	444a      	add	r2, r9
 800bc9a:	f080 0001 	eor.w	r0, r0, #1
 800bc9e:	6127      	str	r7, [r4, #16]
 800bca0:	60a2      	str	r2, [r4, #8]
 800bca2:	7561      	strb	r1, [r4, #21]
 800bca4:	b003      	add	sp, #12
 800bca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcaa:	2102      	movs	r1, #2
 800bcac:	4620      	mov	r0, r4
 800bcae:	f000 fe79 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bcb2:	b188      	cbz	r0, 800bcd8 <ucdr_serialize_endian_uint16_t+0xac>
 800bcb4:	2d01      	cmp	r5, #1
 800bcb6:	68a3      	ldr	r3, [r4, #8]
 800bcb8:	d014      	beq.n	800bce4 <ucdr_serialize_endian_uint16_t+0xb8>
 800bcba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800bcbe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcc2:	7019      	strb	r1, [r3, #0]
 800bcc4:	68a3      	ldr	r3, [r4, #8]
 800bcc6:	705a      	strb	r2, [r3, #1]
 800bcc8:	2102      	movs	r1, #2
 800bcca:	68a2      	ldr	r2, [r4, #8]
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	440a      	add	r2, r1
 800bcd0:	440b      	add	r3, r1
 800bcd2:	60a2      	str	r2, [r4, #8]
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	7561      	strb	r1, [r4, #21]
 800bcd8:	7da0      	ldrb	r0, [r4, #22]
 800bcda:	f080 0001 	eor.w	r0, r0, #1
 800bcde:	b003      	add	sp, #12
 800bce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bce4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bce8:	801a      	strh	r2, [r3, #0]
 800bcea:	e7ed      	b.n	800bcc8 <ucdr_serialize_endian_uint16_t+0x9c>
 800bcec:	68a2      	ldr	r2, [r4, #8]
 800bcee:	6923      	ldr	r3, [r4, #16]
 800bcf0:	7da0      	ldrb	r0, [r4, #22]
 800bcf2:	1bd2      	subs	r2, r2, r7
 800bcf4:	f080 0001 	eor.w	r0, r0, #1
 800bcf8:	1bdf      	subs	r7, r3, r7
 800bcfa:	f884 8015 	strb.w	r8, [r4, #21]
 800bcfe:	60a2      	str	r2, [r4, #8]
 800bd00:	6127      	str	r7, [r4, #16]
 800bd02:	b003      	add	sp, #12
 800bd04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd08:	68a3      	ldr	r3, [r4, #8]
 800bd0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	e7bc      	b.n	800bc8c <ucdr_serialize_endian_uint16_t+0x60>
 800bd12:	f10d 0506 	add.w	r5, sp, #6
 800bd16:	4629      	mov	r1, r5
 800bd18:	463a      	mov	r2, r7
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f008 f882 	bl	8013e24 <memcpy>
 800bd20:	464a      	mov	r2, r9
 800bd22:	68a0      	ldr	r0, [r4, #8]
 800bd24:	19e9      	adds	r1, r5, r7
 800bd26:	f008 f87d 	bl	8013e24 <memcpy>
 800bd2a:	e7af      	b.n	800bc8c <ucdr_serialize_endian_uint16_t+0x60>

0800bd2c <ucdr_deserialize_uint16_t>:
 800bd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd30:	460d      	mov	r5, r1
 800bd32:	2102      	movs	r1, #2
 800bd34:	4604      	mov	r4, r0
 800bd36:	f000 fe87 	bl	800ca48 <ucdr_buffer_alignment>
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd42:	f000 fec7 	bl	800cad4 <ucdr_advance_buffer>
 800bd46:	4620      	mov	r0, r4
 800bd48:	2102      	movs	r1, #2
 800bd4a:	f000 fe1f 	bl	800c98c <ucdr_check_buffer_available_for>
 800bd4e:	bb60      	cbnz	r0, 800bdaa <ucdr_deserialize_uint16_t+0x7e>
 800bd50:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800bd54:	42b3      	cmp	r3, r6
 800bd56:	d923      	bls.n	800bda0 <ucdr_deserialize_uint16_t+0x74>
 800bd58:	6922      	ldr	r2, [r4, #16]
 800bd5a:	1b9f      	subs	r7, r3, r6
 800bd5c:	443a      	add	r2, r7
 800bd5e:	f1c7 0902 	rsb	r9, r7, #2
 800bd62:	4649      	mov	r1, r9
 800bd64:	4620      	mov	r0, r4
 800bd66:	60a3      	str	r3, [r4, #8]
 800bd68:	6122      	str	r2, [r4, #16]
 800bd6a:	f000 fe1b 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d034      	beq.n	800bddc <ucdr_deserialize_uint16_t+0xb0>
 800bd72:	7d23      	ldrb	r3, [r4, #20]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d042      	beq.n	800bdfe <ucdr_deserialize_uint16_t+0xd2>
 800bd78:	7873      	ldrb	r3, [r6, #1]
 800bd7a:	702b      	strb	r3, [r5, #0]
 800bd7c:	2f00      	cmp	r7, #0
 800bd7e:	d03a      	beq.n	800bdf6 <ucdr_deserialize_uint16_t+0xca>
 800bd80:	7833      	ldrb	r3, [r6, #0]
 800bd82:	706b      	strb	r3, [r5, #1]
 800bd84:	2102      	movs	r1, #2
 800bd86:	6923      	ldr	r3, [r4, #16]
 800bd88:	68a2      	ldr	r2, [r4, #8]
 800bd8a:	7da0      	ldrb	r0, [r4, #22]
 800bd8c:	440b      	add	r3, r1
 800bd8e:	1bdf      	subs	r7, r3, r7
 800bd90:	444a      	add	r2, r9
 800bd92:	7561      	strb	r1, [r4, #21]
 800bd94:	6127      	str	r7, [r4, #16]
 800bd96:	60a2      	str	r2, [r4, #8]
 800bd98:	f080 0001 	eor.w	r0, r0, #1
 800bd9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda0:	2102      	movs	r1, #2
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 fdfe 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bda8:	b180      	cbz	r0, 800bdcc <ucdr_deserialize_uint16_t+0xa0>
 800bdaa:	7d23      	ldrb	r3, [r4, #20]
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	d011      	beq.n	800bdd6 <ucdr_deserialize_uint16_t+0xaa>
 800bdb2:	785b      	ldrb	r3, [r3, #1]
 800bdb4:	702b      	strb	r3, [r5, #0]
 800bdb6:	68a3      	ldr	r3, [r4, #8]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	706b      	strb	r3, [r5, #1]
 800bdbc:	2102      	movs	r1, #2
 800bdbe:	68a2      	ldr	r2, [r4, #8]
 800bdc0:	6923      	ldr	r3, [r4, #16]
 800bdc2:	440a      	add	r2, r1
 800bdc4:	440b      	add	r3, r1
 800bdc6:	60a2      	str	r2, [r4, #8]
 800bdc8:	6123      	str	r3, [r4, #16]
 800bdca:	7561      	strb	r1, [r4, #21]
 800bdcc:	7da0      	ldrb	r0, [r4, #22]
 800bdce:	f080 0001 	eor.w	r0, r0, #1
 800bdd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	802b      	strh	r3, [r5, #0]
 800bdda:	e7ef      	b.n	800bdbc <ucdr_deserialize_uint16_t+0x90>
 800bddc:	68a2      	ldr	r2, [r4, #8]
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	7da0      	ldrb	r0, [r4, #22]
 800bde2:	1bd2      	subs	r2, r2, r7
 800bde4:	f884 8015 	strb.w	r8, [r4, #21]
 800bde8:	1bdf      	subs	r7, r3, r7
 800bdea:	60a2      	str	r2, [r4, #8]
 800bdec:	6127      	str	r7, [r4, #16]
 800bdee:	f080 0001 	eor.w	r0, r0, #1
 800bdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdf6:	68a3      	ldr	r3, [r4, #8]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	706b      	strb	r3, [r5, #1]
 800bdfc:	e7c2      	b.n	800bd84 <ucdr_deserialize_uint16_t+0x58>
 800bdfe:	4631      	mov	r1, r6
 800be00:	463a      	mov	r2, r7
 800be02:	4628      	mov	r0, r5
 800be04:	f008 f80e 	bl	8013e24 <memcpy>
 800be08:	464a      	mov	r2, r9
 800be0a:	68a1      	ldr	r1, [r4, #8]
 800be0c:	19e8      	adds	r0, r5, r7
 800be0e:	f008 f809 	bl	8013e24 <memcpy>
 800be12:	e7b7      	b.n	800bd84 <ucdr_deserialize_uint16_t+0x58>

0800be14 <ucdr_deserialize_endian_uint16_t>:
 800be14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be18:	460e      	mov	r6, r1
 800be1a:	2102      	movs	r1, #2
 800be1c:	4604      	mov	r4, r0
 800be1e:	4615      	mov	r5, r2
 800be20:	f000 fe12 	bl	800ca48 <ucdr_buffer_alignment>
 800be24:	4601      	mov	r1, r0
 800be26:	4620      	mov	r0, r4
 800be28:	f894 9015 	ldrb.w	r9, [r4, #21]
 800be2c:	f000 fe52 	bl	800cad4 <ucdr_advance_buffer>
 800be30:	4620      	mov	r0, r4
 800be32:	2102      	movs	r1, #2
 800be34:	f000 fdaa 	bl	800c98c <ucdr_check_buffer_available_for>
 800be38:	bb70      	cbnz	r0, 800be98 <ucdr_deserialize_endian_uint16_t+0x84>
 800be3a:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800be3e:	42bb      	cmp	r3, r7
 800be40:	d925      	bls.n	800be8e <ucdr_deserialize_endian_uint16_t+0x7a>
 800be42:	6922      	ldr	r2, [r4, #16]
 800be44:	eba3 0807 	sub.w	r8, r3, r7
 800be48:	4442      	add	r2, r8
 800be4a:	f1c8 0a02 	rsb	sl, r8, #2
 800be4e:	4651      	mov	r1, sl
 800be50:	4620      	mov	r0, r4
 800be52:	60a3      	str	r3, [r4, #8]
 800be54:	6122      	str	r2, [r4, #16]
 800be56:	f000 fda5 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d034      	beq.n	800bec8 <ucdr_deserialize_endian_uint16_t+0xb4>
 800be5e:	2e01      	cmp	r6, #1
 800be60:	d045      	beq.n	800beee <ucdr_deserialize_endian_uint16_t+0xda>
 800be62:	787b      	ldrb	r3, [r7, #1]
 800be64:	702b      	strb	r3, [r5, #0]
 800be66:	f1b8 0f00 	cmp.w	r8, #0
 800be6a:	d03c      	beq.n	800bee6 <ucdr_deserialize_endian_uint16_t+0xd2>
 800be6c:	783b      	ldrb	r3, [r7, #0]
 800be6e:	706b      	strb	r3, [r5, #1]
 800be70:	2102      	movs	r1, #2
 800be72:	6923      	ldr	r3, [r4, #16]
 800be74:	68a2      	ldr	r2, [r4, #8]
 800be76:	7da0      	ldrb	r0, [r4, #22]
 800be78:	440b      	add	r3, r1
 800be7a:	eba3 0308 	sub.w	r3, r3, r8
 800be7e:	4452      	add	r2, sl
 800be80:	7561      	strb	r1, [r4, #21]
 800be82:	6123      	str	r3, [r4, #16]
 800be84:	60a2      	str	r2, [r4, #8]
 800be86:	f080 0001 	eor.w	r0, r0, #1
 800be8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be8e:	2102      	movs	r1, #2
 800be90:	4620      	mov	r0, r4
 800be92:	f000 fd87 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800be96:	b178      	cbz	r0, 800beb8 <ucdr_deserialize_endian_uint16_t+0xa4>
 800be98:	2e01      	cmp	r6, #1
 800be9a:	68a3      	ldr	r3, [r4, #8]
 800be9c:	d011      	beq.n	800bec2 <ucdr_deserialize_endian_uint16_t+0xae>
 800be9e:	785b      	ldrb	r3, [r3, #1]
 800bea0:	702b      	strb	r3, [r5, #0]
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	706b      	strb	r3, [r5, #1]
 800bea8:	2102      	movs	r1, #2
 800beaa:	68a2      	ldr	r2, [r4, #8]
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	440a      	add	r2, r1
 800beb0:	440b      	add	r3, r1
 800beb2:	60a2      	str	r2, [r4, #8]
 800beb4:	6123      	str	r3, [r4, #16]
 800beb6:	7561      	strb	r1, [r4, #21]
 800beb8:	7da0      	ldrb	r0, [r4, #22]
 800beba:	f080 0001 	eor.w	r0, r0, #1
 800bebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	802b      	strh	r3, [r5, #0]
 800bec6:	e7ef      	b.n	800bea8 <ucdr_deserialize_endian_uint16_t+0x94>
 800bec8:	68a2      	ldr	r2, [r4, #8]
 800beca:	6923      	ldr	r3, [r4, #16]
 800becc:	7da0      	ldrb	r0, [r4, #22]
 800bece:	eba2 0208 	sub.w	r2, r2, r8
 800bed2:	eba3 0308 	sub.w	r3, r3, r8
 800bed6:	f884 9015 	strb.w	r9, [r4, #21]
 800beda:	60a2      	str	r2, [r4, #8]
 800bedc:	6123      	str	r3, [r4, #16]
 800bede:	f080 0001 	eor.w	r0, r0, #1
 800bee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee6:	68a3      	ldr	r3, [r4, #8]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	706b      	strb	r3, [r5, #1]
 800beec:	e7c0      	b.n	800be70 <ucdr_deserialize_endian_uint16_t+0x5c>
 800beee:	4639      	mov	r1, r7
 800bef0:	4642      	mov	r2, r8
 800bef2:	4628      	mov	r0, r5
 800bef4:	f007 ff96 	bl	8013e24 <memcpy>
 800bef8:	4652      	mov	r2, sl
 800befa:	68a1      	ldr	r1, [r4, #8]
 800befc:	eb05 0008 	add.w	r0, r5, r8
 800bf00:	f007 ff90 	bl	8013e24 <memcpy>
 800bf04:	e7b4      	b.n	800be70 <ucdr_deserialize_endian_uint16_t+0x5c>
 800bf06:	bf00      	nop

0800bf08 <ucdr_serialize_uint32_t>:
 800bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0c:	b082      	sub	sp, #8
 800bf0e:	9101      	str	r1, [sp, #4]
 800bf10:	2104      	movs	r1, #4
 800bf12:	4604      	mov	r4, r0
 800bf14:	f000 fd98 	bl	800ca48 <ucdr_buffer_alignment>
 800bf18:	4601      	mov	r1, r0
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	7d67      	ldrb	r7, [r4, #21]
 800bf1e:	f000 fdd9 	bl	800cad4 <ucdr_advance_buffer>
 800bf22:	4620      	mov	r0, r4
 800bf24:	2104      	movs	r1, #4
 800bf26:	f000 fd31 	bl	800c98c <ucdr_check_buffer_available_for>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d139      	bne.n	800bfa2 <ucdr_serialize_uint32_t+0x9a>
 800bf2e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bf32:	42ab      	cmp	r3, r5
 800bf34:	d930      	bls.n	800bf98 <ucdr_serialize_uint32_t+0x90>
 800bf36:	6922      	ldr	r2, [r4, #16]
 800bf38:	1b5e      	subs	r6, r3, r5
 800bf3a:	4432      	add	r2, r6
 800bf3c:	f1c6 0804 	rsb	r8, r6, #4
 800bf40:	4641      	mov	r1, r8
 800bf42:	4620      	mov	r0, r4
 800bf44:	60a3      	str	r3, [r4, #8]
 800bf46:	6122      	str	r2, [r4, #16]
 800bf48:	f000 fd2c 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d04c      	beq.n	800bfea <ucdr_serialize_uint32_t+0xe2>
 800bf50:	7d23      	ldrb	r3, [r4, #20]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d063      	beq.n	800c01e <ucdr_serialize_uint32_t+0x116>
 800bf56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf5a:	702b      	strb	r3, [r5, #0]
 800bf5c:	2e00      	cmp	r6, #0
 800bf5e:	d051      	beq.n	800c004 <ucdr_serialize_uint32_t+0xfc>
 800bf60:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf64:	2e01      	cmp	r6, #1
 800bf66:	706b      	strb	r3, [r5, #1]
 800bf68:	d050      	beq.n	800c00c <ucdr_serialize_uint32_t+0x104>
 800bf6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bf6e:	2e02      	cmp	r6, #2
 800bf70:	70ab      	strb	r3, [r5, #2]
 800bf72:	d04f      	beq.n	800c014 <ucdr_serialize_uint32_t+0x10c>
 800bf74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bf78:	70eb      	strb	r3, [r5, #3]
 800bf7a:	2104      	movs	r1, #4
 800bf7c:	6923      	ldr	r3, [r4, #16]
 800bf7e:	68a2      	ldr	r2, [r4, #8]
 800bf80:	7da0      	ldrb	r0, [r4, #22]
 800bf82:	440b      	add	r3, r1
 800bf84:	1b9e      	subs	r6, r3, r6
 800bf86:	4442      	add	r2, r8
 800bf88:	f080 0001 	eor.w	r0, r0, #1
 800bf8c:	6126      	str	r6, [r4, #16]
 800bf8e:	60a2      	str	r2, [r4, #8]
 800bf90:	7561      	strb	r1, [r4, #21]
 800bf92:	b002      	add	sp, #8
 800bf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf98:	2104      	movs	r1, #4
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 fd02 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800bfa0:	b1d0      	cbz	r0, 800bfd8 <ucdr_serialize_uint32_t+0xd0>
 800bfa2:	7d23      	ldrb	r3, [r4, #20]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	68a3      	ldr	r3, [r4, #8]
 800bfa8:	d01c      	beq.n	800bfe4 <ucdr_serialize_uint32_t+0xdc>
 800bfaa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800bfae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfb2:	7019      	strb	r1, [r3, #0]
 800bfb4:	68a3      	ldr	r3, [r4, #8]
 800bfb6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800bfba:	705a      	strb	r2, [r3, #1]
 800bfbc:	68a3      	ldr	r3, [r4, #8]
 800bfbe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bfc2:	7099      	strb	r1, [r3, #2]
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	70da      	strb	r2, [r3, #3]
 800bfc8:	2104      	movs	r1, #4
 800bfca:	68a2      	ldr	r2, [r4, #8]
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	440a      	add	r2, r1
 800bfd0:	440b      	add	r3, r1
 800bfd2:	60a2      	str	r2, [r4, #8]
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	7561      	strb	r1, [r4, #21]
 800bfd8:	7da0      	ldrb	r0, [r4, #22]
 800bfda:	f080 0001 	eor.w	r0, r0, #1
 800bfde:	b002      	add	sp, #8
 800bfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfe4:	9a01      	ldr	r2, [sp, #4]
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	e7ee      	b.n	800bfc8 <ucdr_serialize_uint32_t+0xc0>
 800bfea:	68a2      	ldr	r2, [r4, #8]
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	7da0      	ldrb	r0, [r4, #22]
 800bff0:	1b92      	subs	r2, r2, r6
 800bff2:	f080 0001 	eor.w	r0, r0, #1
 800bff6:	1b9e      	subs	r6, r3, r6
 800bff8:	7567      	strb	r7, [r4, #21]
 800bffa:	60a2      	str	r2, [r4, #8]
 800bffc:	6126      	str	r6, [r4, #16]
 800bffe:	b002      	add	sp, #8
 800c000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c004:	68a3      	ldr	r3, [r4, #8]
 800c006:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	68a3      	ldr	r3, [r4, #8]
 800c00e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	68a3      	ldr	r3, [r4, #8]
 800c016:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c01a:	701a      	strb	r2, [r3, #0]
 800c01c:	e7ad      	b.n	800bf7a <ucdr_serialize_uint32_t+0x72>
 800c01e:	4628      	mov	r0, r5
 800c020:	ad01      	add	r5, sp, #4
 800c022:	4629      	mov	r1, r5
 800c024:	4632      	mov	r2, r6
 800c026:	f007 fefd 	bl	8013e24 <memcpy>
 800c02a:	4642      	mov	r2, r8
 800c02c:	68a0      	ldr	r0, [r4, #8]
 800c02e:	19a9      	adds	r1, r5, r6
 800c030:	f007 fef8 	bl	8013e24 <memcpy>
 800c034:	e7a1      	b.n	800bf7a <ucdr_serialize_uint32_t+0x72>
 800c036:	bf00      	nop

0800c038 <ucdr_serialize_endian_uint32_t>:
 800c038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c03c:	460d      	mov	r5, r1
 800c03e:	b083      	sub	sp, #12
 800c040:	2104      	movs	r1, #4
 800c042:	4604      	mov	r4, r0
 800c044:	9201      	str	r2, [sp, #4]
 800c046:	f000 fcff 	bl	800ca48 <ucdr_buffer_alignment>
 800c04a:	4601      	mov	r1, r0
 800c04c:	4620      	mov	r0, r4
 800c04e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c052:	f000 fd3f 	bl	800cad4 <ucdr_advance_buffer>
 800c056:	4620      	mov	r0, r4
 800c058:	2104      	movs	r1, #4
 800c05a:	f000 fc97 	bl	800c98c <ucdr_check_buffer_available_for>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d138      	bne.n	800c0d4 <ucdr_serialize_endian_uint32_t+0x9c>
 800c062:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800c066:	42b3      	cmp	r3, r6
 800c068:	d92f      	bls.n	800c0ca <ucdr_serialize_endian_uint32_t+0x92>
 800c06a:	6922      	ldr	r2, [r4, #16]
 800c06c:	1b9f      	subs	r7, r3, r6
 800c06e:	443a      	add	r2, r7
 800c070:	f1c7 0904 	rsb	r9, r7, #4
 800c074:	4649      	mov	r1, r9
 800c076:	4620      	mov	r0, r4
 800c078:	60a3      	str	r3, [r4, #8]
 800c07a:	6122      	str	r2, [r4, #16]
 800c07c:	f000 fc92 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c080:	2800      	cmp	r0, #0
 800c082:	d04a      	beq.n	800c11a <ucdr_serialize_endian_uint32_t+0xe2>
 800c084:	2d01      	cmp	r5, #1
 800c086:	d063      	beq.n	800c150 <ucdr_serialize_endian_uint32_t+0x118>
 800c088:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c08c:	7033      	strb	r3, [r6, #0]
 800c08e:	2f00      	cmp	r7, #0
 800c090:	d051      	beq.n	800c136 <ucdr_serialize_endian_uint32_t+0xfe>
 800c092:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c096:	2f01      	cmp	r7, #1
 800c098:	7073      	strb	r3, [r6, #1]
 800c09a:	d050      	beq.n	800c13e <ucdr_serialize_endian_uint32_t+0x106>
 800c09c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0a0:	2f02      	cmp	r7, #2
 800c0a2:	70b3      	strb	r3, [r6, #2]
 800c0a4:	d04f      	beq.n	800c146 <ucdr_serialize_endian_uint32_t+0x10e>
 800c0a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0aa:	70f3      	strb	r3, [r6, #3]
 800c0ac:	2104      	movs	r1, #4
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	68a2      	ldr	r2, [r4, #8]
 800c0b2:	7da0      	ldrb	r0, [r4, #22]
 800c0b4:	440b      	add	r3, r1
 800c0b6:	1bdf      	subs	r7, r3, r7
 800c0b8:	444a      	add	r2, r9
 800c0ba:	f080 0001 	eor.w	r0, r0, #1
 800c0be:	6127      	str	r7, [r4, #16]
 800c0c0:	60a2      	str	r2, [r4, #8]
 800c0c2:	7561      	strb	r1, [r4, #21]
 800c0c4:	b003      	add	sp, #12
 800c0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fc69 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c0d2:	b1c8      	cbz	r0, 800c108 <ucdr_serialize_endian_uint32_t+0xd0>
 800c0d4:	2d01      	cmp	r5, #1
 800c0d6:	68a3      	ldr	r3, [r4, #8]
 800c0d8:	d01c      	beq.n	800c114 <ucdr_serialize_endian_uint32_t+0xdc>
 800c0da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c0de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c0e2:	7019      	strb	r1, [r3, #0]
 800c0e4:	68a3      	ldr	r3, [r4, #8]
 800c0e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800c0ea:	705a      	strb	r2, [r3, #1]
 800c0ec:	68a3      	ldr	r3, [r4, #8]
 800c0ee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c0f2:	7099      	strb	r1, [r3, #2]
 800c0f4:	68a3      	ldr	r3, [r4, #8]
 800c0f6:	70da      	strb	r2, [r3, #3]
 800c0f8:	2104      	movs	r1, #4
 800c0fa:	68a2      	ldr	r2, [r4, #8]
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	440a      	add	r2, r1
 800c100:	440b      	add	r3, r1
 800c102:	60a2      	str	r2, [r4, #8]
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	7561      	strb	r1, [r4, #21]
 800c108:	7da0      	ldrb	r0, [r4, #22]
 800c10a:	f080 0001 	eor.w	r0, r0, #1
 800c10e:	b003      	add	sp, #12
 800c110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c114:	9a01      	ldr	r2, [sp, #4]
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	e7ee      	b.n	800c0f8 <ucdr_serialize_endian_uint32_t+0xc0>
 800c11a:	68a2      	ldr	r2, [r4, #8]
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	7da0      	ldrb	r0, [r4, #22]
 800c120:	1bd2      	subs	r2, r2, r7
 800c122:	f080 0001 	eor.w	r0, r0, #1
 800c126:	1bdf      	subs	r7, r3, r7
 800c128:	f884 8015 	strb.w	r8, [r4, #21]
 800c12c:	60a2      	str	r2, [r4, #8]
 800c12e:	6127      	str	r7, [r4, #16]
 800c130:	b003      	add	sp, #12
 800c132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c136:	68a3      	ldr	r3, [r4, #8]
 800c138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	68a3      	ldr	r3, [r4, #8]
 800c140:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	68a3      	ldr	r3, [r4, #8]
 800c148:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	e7ad      	b.n	800c0ac <ucdr_serialize_endian_uint32_t+0x74>
 800c150:	ad01      	add	r5, sp, #4
 800c152:	4629      	mov	r1, r5
 800c154:	463a      	mov	r2, r7
 800c156:	4630      	mov	r0, r6
 800c158:	f007 fe64 	bl	8013e24 <memcpy>
 800c15c:	464a      	mov	r2, r9
 800c15e:	68a0      	ldr	r0, [r4, #8]
 800c160:	19e9      	adds	r1, r5, r7
 800c162:	f007 fe5f 	bl	8013e24 <memcpy>
 800c166:	e7a1      	b.n	800c0ac <ucdr_serialize_endian_uint32_t+0x74>

0800c168 <ucdr_deserialize_uint32_t>:
 800c168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c16c:	460d      	mov	r5, r1
 800c16e:	2104      	movs	r1, #4
 800c170:	4604      	mov	r4, r0
 800c172:	f000 fc69 	bl	800ca48 <ucdr_buffer_alignment>
 800c176:	4601      	mov	r1, r0
 800c178:	4620      	mov	r0, r4
 800c17a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c17e:	f000 fca9 	bl	800cad4 <ucdr_advance_buffer>
 800c182:	4620      	mov	r0, r4
 800c184:	2104      	movs	r1, #4
 800c186:	f000 fc01 	bl	800c98c <ucdr_check_buffer_available_for>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	d138      	bne.n	800c200 <ucdr_deserialize_uint32_t+0x98>
 800c18e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800c192:	42b3      	cmp	r3, r6
 800c194:	d92f      	bls.n	800c1f6 <ucdr_deserialize_uint32_t+0x8e>
 800c196:	6922      	ldr	r2, [r4, #16]
 800c198:	1b9f      	subs	r7, r3, r6
 800c19a:	443a      	add	r2, r7
 800c19c:	f1c7 0904 	rsb	r9, r7, #4
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	60a3      	str	r3, [r4, #8]
 800c1a6:	6122      	str	r2, [r4, #16]
 800c1a8:	f000 fbfc 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d046      	beq.n	800c23e <ucdr_deserialize_uint32_t+0xd6>
 800c1b0:	7d23      	ldrb	r3, [r4, #20]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d05c      	beq.n	800c270 <ucdr_deserialize_uint32_t+0x108>
 800c1b6:	78f3      	ldrb	r3, [r6, #3]
 800c1b8:	702b      	strb	r3, [r5, #0]
 800c1ba:	2f00      	cmp	r7, #0
 800c1bc:	d04c      	beq.n	800c258 <ucdr_deserialize_uint32_t+0xf0>
 800c1be:	78b2      	ldrb	r2, [r6, #2]
 800c1c0:	2f01      	cmp	r7, #1
 800c1c2:	f105 0302 	add.w	r3, r5, #2
 800c1c6:	706a      	strb	r2, [r5, #1]
 800c1c8:	d04a      	beq.n	800c260 <ucdr_deserialize_uint32_t+0xf8>
 800c1ca:	7872      	ldrb	r2, [r6, #1]
 800c1cc:	2f02      	cmp	r7, #2
 800c1ce:	f105 0303 	add.w	r3, r5, #3
 800c1d2:	70aa      	strb	r2, [r5, #2]
 800c1d4:	d048      	beq.n	800c268 <ucdr_deserialize_uint32_t+0x100>
 800c1d6:	7833      	ldrb	r3, [r6, #0]
 800c1d8:	70eb      	strb	r3, [r5, #3]
 800c1da:	2104      	movs	r1, #4
 800c1dc:	6923      	ldr	r3, [r4, #16]
 800c1de:	68a2      	ldr	r2, [r4, #8]
 800c1e0:	7da0      	ldrb	r0, [r4, #22]
 800c1e2:	440b      	add	r3, r1
 800c1e4:	1bdf      	subs	r7, r3, r7
 800c1e6:	444a      	add	r2, r9
 800c1e8:	7561      	strb	r1, [r4, #21]
 800c1ea:	6127      	str	r7, [r4, #16]
 800c1ec:	60a2      	str	r2, [r4, #8]
 800c1ee:	f080 0001 	eor.w	r0, r0, #1
 800c1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1f6:	2104      	movs	r1, #4
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f000 fbd3 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c1fe:	b1b0      	cbz	r0, 800c22e <ucdr_deserialize_uint32_t+0xc6>
 800c200:	7d23      	ldrb	r3, [r4, #20]
 800c202:	2b01      	cmp	r3, #1
 800c204:	68a3      	ldr	r3, [r4, #8]
 800c206:	d017      	beq.n	800c238 <ucdr_deserialize_uint32_t+0xd0>
 800c208:	78db      	ldrb	r3, [r3, #3]
 800c20a:	702b      	strb	r3, [r5, #0]
 800c20c:	68a3      	ldr	r3, [r4, #8]
 800c20e:	789b      	ldrb	r3, [r3, #2]
 800c210:	706b      	strb	r3, [r5, #1]
 800c212:	68a3      	ldr	r3, [r4, #8]
 800c214:	785b      	ldrb	r3, [r3, #1]
 800c216:	70ab      	strb	r3, [r5, #2]
 800c218:	68a3      	ldr	r3, [r4, #8]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	70eb      	strb	r3, [r5, #3]
 800c21e:	2104      	movs	r1, #4
 800c220:	68a2      	ldr	r2, [r4, #8]
 800c222:	6923      	ldr	r3, [r4, #16]
 800c224:	440a      	add	r2, r1
 800c226:	440b      	add	r3, r1
 800c228:	60a2      	str	r2, [r4, #8]
 800c22a:	6123      	str	r3, [r4, #16]
 800c22c:	7561      	strb	r1, [r4, #21]
 800c22e:	7da0      	ldrb	r0, [r4, #22]
 800c230:	f080 0001 	eor.w	r0, r0, #1
 800c234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	e7ef      	b.n	800c21e <ucdr_deserialize_uint32_t+0xb6>
 800c23e:	68a2      	ldr	r2, [r4, #8]
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	7da0      	ldrb	r0, [r4, #22]
 800c244:	1bd2      	subs	r2, r2, r7
 800c246:	f884 8015 	strb.w	r8, [r4, #21]
 800c24a:	1bdf      	subs	r7, r3, r7
 800c24c:	60a2      	str	r2, [r4, #8]
 800c24e:	6127      	str	r7, [r4, #16]
 800c250:	f080 0001 	eor.w	r0, r0, #1
 800c254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c258:	68a2      	ldr	r2, [r4, #8]
 800c25a:	1cab      	adds	r3, r5, #2
 800c25c:	7892      	ldrb	r2, [r2, #2]
 800c25e:	706a      	strb	r2, [r5, #1]
 800c260:	68a2      	ldr	r2, [r4, #8]
 800c262:	7852      	ldrb	r2, [r2, #1]
 800c264:	f803 2b01 	strb.w	r2, [r3], #1
 800c268:	68a2      	ldr	r2, [r4, #8]
 800c26a:	7812      	ldrb	r2, [r2, #0]
 800c26c:	701a      	strb	r2, [r3, #0]
 800c26e:	e7b4      	b.n	800c1da <ucdr_deserialize_uint32_t+0x72>
 800c270:	4631      	mov	r1, r6
 800c272:	463a      	mov	r2, r7
 800c274:	4628      	mov	r0, r5
 800c276:	f007 fdd5 	bl	8013e24 <memcpy>
 800c27a:	464a      	mov	r2, r9
 800c27c:	68a1      	ldr	r1, [r4, #8]
 800c27e:	19e8      	adds	r0, r5, r7
 800c280:	f007 fdd0 	bl	8013e24 <memcpy>
 800c284:	e7a9      	b.n	800c1da <ucdr_deserialize_uint32_t+0x72>
 800c286:	bf00      	nop

0800c288 <ucdr_deserialize_endian_uint32_t>:
 800c288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c28c:	460e      	mov	r6, r1
 800c28e:	2104      	movs	r1, #4
 800c290:	4604      	mov	r4, r0
 800c292:	4615      	mov	r5, r2
 800c294:	f000 fbd8 	bl	800ca48 <ucdr_buffer_alignment>
 800c298:	4601      	mov	r1, r0
 800c29a:	4620      	mov	r0, r4
 800c29c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c2a0:	f000 fc18 	bl	800cad4 <ucdr_advance_buffer>
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	2104      	movs	r1, #4
 800c2a8:	f000 fb70 	bl	800c98c <ucdr_check_buffer_available_for>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	d13c      	bne.n	800c32a <ucdr_deserialize_endian_uint32_t+0xa2>
 800c2b0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c2b4:	42bb      	cmp	r3, r7
 800c2b6:	d933      	bls.n	800c320 <ucdr_deserialize_endian_uint32_t+0x98>
 800c2b8:	6922      	ldr	r2, [r4, #16]
 800c2ba:	eba3 0807 	sub.w	r8, r3, r7
 800c2be:	4442      	add	r2, r8
 800c2c0:	f1c8 0a04 	rsb	sl, r8, #4
 800c2c4:	4651      	mov	r1, sl
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	60a3      	str	r3, [r4, #8]
 800c2ca:	6122      	str	r2, [r4, #16]
 800c2cc:	f000 fb6a 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d048      	beq.n	800c366 <ucdr_deserialize_endian_uint32_t+0xde>
 800c2d4:	2e01      	cmp	r6, #1
 800c2d6:	d061      	beq.n	800c39c <ucdr_deserialize_endian_uint32_t+0x114>
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	702b      	strb	r3, [r5, #0]
 800c2dc:	f1b8 0f00 	cmp.w	r8, #0
 800c2e0:	d050      	beq.n	800c384 <ucdr_deserialize_endian_uint32_t+0xfc>
 800c2e2:	78ba      	ldrb	r2, [r7, #2]
 800c2e4:	f1b8 0f01 	cmp.w	r8, #1
 800c2e8:	f105 0302 	add.w	r3, r5, #2
 800c2ec:	706a      	strb	r2, [r5, #1]
 800c2ee:	d04d      	beq.n	800c38c <ucdr_deserialize_endian_uint32_t+0x104>
 800c2f0:	787a      	ldrb	r2, [r7, #1]
 800c2f2:	f1b8 0f02 	cmp.w	r8, #2
 800c2f6:	f105 0303 	add.w	r3, r5, #3
 800c2fa:	70aa      	strb	r2, [r5, #2]
 800c2fc:	d04a      	beq.n	800c394 <ucdr_deserialize_endian_uint32_t+0x10c>
 800c2fe:	783b      	ldrb	r3, [r7, #0]
 800c300:	70eb      	strb	r3, [r5, #3]
 800c302:	2104      	movs	r1, #4
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	68a2      	ldr	r2, [r4, #8]
 800c308:	7da0      	ldrb	r0, [r4, #22]
 800c30a:	440b      	add	r3, r1
 800c30c:	eba3 0308 	sub.w	r3, r3, r8
 800c310:	4452      	add	r2, sl
 800c312:	7561      	strb	r1, [r4, #21]
 800c314:	6123      	str	r3, [r4, #16]
 800c316:	60a2      	str	r2, [r4, #8]
 800c318:	f080 0001 	eor.w	r0, r0, #1
 800c31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c320:	2104      	movs	r1, #4
 800c322:	4620      	mov	r0, r4
 800c324:	f000 fb3e 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c328:	b1a8      	cbz	r0, 800c356 <ucdr_deserialize_endian_uint32_t+0xce>
 800c32a:	2e01      	cmp	r6, #1
 800c32c:	68a3      	ldr	r3, [r4, #8]
 800c32e:	d017      	beq.n	800c360 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c330:	78db      	ldrb	r3, [r3, #3]
 800c332:	702b      	strb	r3, [r5, #0]
 800c334:	68a3      	ldr	r3, [r4, #8]
 800c336:	789b      	ldrb	r3, [r3, #2]
 800c338:	706b      	strb	r3, [r5, #1]
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	785b      	ldrb	r3, [r3, #1]
 800c33e:	70ab      	strb	r3, [r5, #2]
 800c340:	68a3      	ldr	r3, [r4, #8]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	70eb      	strb	r3, [r5, #3]
 800c346:	2104      	movs	r1, #4
 800c348:	68a2      	ldr	r2, [r4, #8]
 800c34a:	6923      	ldr	r3, [r4, #16]
 800c34c:	440a      	add	r2, r1
 800c34e:	440b      	add	r3, r1
 800c350:	60a2      	str	r2, [r4, #8]
 800c352:	6123      	str	r3, [r4, #16]
 800c354:	7561      	strb	r1, [r4, #21]
 800c356:	7da0      	ldrb	r0, [r4, #22]
 800c358:	f080 0001 	eor.w	r0, r0, #1
 800c35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	602b      	str	r3, [r5, #0]
 800c364:	e7ef      	b.n	800c346 <ucdr_deserialize_endian_uint32_t+0xbe>
 800c366:	68a2      	ldr	r2, [r4, #8]
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	7da0      	ldrb	r0, [r4, #22]
 800c36c:	eba2 0208 	sub.w	r2, r2, r8
 800c370:	eba3 0308 	sub.w	r3, r3, r8
 800c374:	f884 9015 	strb.w	r9, [r4, #21]
 800c378:	60a2      	str	r2, [r4, #8]
 800c37a:	6123      	str	r3, [r4, #16]
 800c37c:	f080 0001 	eor.w	r0, r0, #1
 800c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c384:	68a2      	ldr	r2, [r4, #8]
 800c386:	1cab      	adds	r3, r5, #2
 800c388:	7892      	ldrb	r2, [r2, #2]
 800c38a:	706a      	strb	r2, [r5, #1]
 800c38c:	68a2      	ldr	r2, [r4, #8]
 800c38e:	7852      	ldrb	r2, [r2, #1]
 800c390:	f803 2b01 	strb.w	r2, [r3], #1
 800c394:	68a2      	ldr	r2, [r4, #8]
 800c396:	7812      	ldrb	r2, [r2, #0]
 800c398:	701a      	strb	r2, [r3, #0]
 800c39a:	e7b2      	b.n	800c302 <ucdr_deserialize_endian_uint32_t+0x7a>
 800c39c:	4639      	mov	r1, r7
 800c39e:	4642      	mov	r2, r8
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	f007 fd3f 	bl	8013e24 <memcpy>
 800c3a6:	4652      	mov	r2, sl
 800c3a8:	68a1      	ldr	r1, [r4, #8]
 800c3aa:	eb05 0008 	add.w	r0, r5, r8
 800c3ae:	f007 fd39 	bl	8013e24 <memcpy>
 800c3b2:	e7a6      	b.n	800c302 <ucdr_deserialize_endian_uint32_t+0x7a>

0800c3b4 <ucdr_serialize_uint64_t>:
 800c3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b8:	2108      	movs	r1, #8
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	4604      	mov	r4, r0
 800c3be:	e9cd 2300 	strd	r2, r3, [sp]
 800c3c2:	f000 fb41 	bl	800ca48 <ucdr_buffer_alignment>
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	7d67      	ldrb	r7, [r4, #21]
 800c3cc:	f000 fb82 	bl	800cad4 <ucdr_advance_buffer>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	2108      	movs	r1, #8
 800c3d4:	f000 fada 	bl	800c98c <ucdr_check_buffer_available_for>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d14e      	bne.n	800c47a <ucdr_serialize_uint64_t+0xc6>
 800c3dc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3e0:	42ab      	cmp	r3, r5
 800c3e2:	d945      	bls.n	800c470 <ucdr_serialize_uint64_t+0xbc>
 800c3e4:	6922      	ldr	r2, [r4, #16]
 800c3e6:	1b5e      	subs	r6, r3, r5
 800c3e8:	4432      	add	r2, r6
 800c3ea:	f1c6 0808 	rsb	r8, r6, #8
 800c3ee:	4641      	mov	r1, r8
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	60a3      	str	r3, [r4, #8]
 800c3f4:	6122      	str	r2, [r4, #16]
 800c3f6:	f000 fad5 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d074      	beq.n	800c4e8 <ucdr_serialize_uint64_t+0x134>
 800c3fe:	7d23      	ldrb	r3, [r4, #20]
 800c400:	2b01      	cmp	r3, #1
 800c402:	f000 809b 	beq.w	800c53c <ucdr_serialize_uint64_t+0x188>
 800c406:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c40a:	702b      	strb	r3, [r5, #0]
 800c40c:	2e00      	cmp	r6, #0
 800c40e:	d078      	beq.n	800c502 <ucdr_serialize_uint64_t+0x14e>
 800c410:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c414:	2e01      	cmp	r6, #1
 800c416:	706b      	strb	r3, [r5, #1]
 800c418:	d077      	beq.n	800c50a <ucdr_serialize_uint64_t+0x156>
 800c41a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c41e:	2e02      	cmp	r6, #2
 800c420:	70ab      	strb	r3, [r5, #2]
 800c422:	d076      	beq.n	800c512 <ucdr_serialize_uint64_t+0x15e>
 800c424:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c428:	2e03      	cmp	r6, #3
 800c42a:	70eb      	strb	r3, [r5, #3]
 800c42c:	d075      	beq.n	800c51a <ucdr_serialize_uint64_t+0x166>
 800c42e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c432:	2e04      	cmp	r6, #4
 800c434:	712b      	strb	r3, [r5, #4]
 800c436:	d074      	beq.n	800c522 <ucdr_serialize_uint64_t+0x16e>
 800c438:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c43c:	2e05      	cmp	r6, #5
 800c43e:	716b      	strb	r3, [r5, #5]
 800c440:	d073      	beq.n	800c52a <ucdr_serialize_uint64_t+0x176>
 800c442:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c446:	2e06      	cmp	r6, #6
 800c448:	71ab      	strb	r3, [r5, #6]
 800c44a:	d072      	beq.n	800c532 <ucdr_serialize_uint64_t+0x17e>
 800c44c:	f89d 3000 	ldrb.w	r3, [sp]
 800c450:	71eb      	strb	r3, [r5, #7]
 800c452:	2108      	movs	r1, #8
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	68a2      	ldr	r2, [r4, #8]
 800c458:	7da0      	ldrb	r0, [r4, #22]
 800c45a:	440b      	add	r3, r1
 800c45c:	1b9e      	subs	r6, r3, r6
 800c45e:	4442      	add	r2, r8
 800c460:	f080 0001 	eor.w	r0, r0, #1
 800c464:	6126      	str	r6, [r4, #16]
 800c466:	60a2      	str	r2, [r4, #8]
 800c468:	7561      	strb	r1, [r4, #21]
 800c46a:	b002      	add	sp, #8
 800c46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c470:	2108      	movs	r1, #8
 800c472:	4620      	mov	r0, r4
 800c474:	f000 fa96 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c478:	b350      	cbz	r0, 800c4d0 <ucdr_serialize_uint64_t+0x11c>
 800c47a:	7d23      	ldrb	r3, [r4, #20]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d02d      	beq.n	800c4dc <ucdr_serialize_uint64_t+0x128>
 800c480:	68a3      	ldr	r3, [r4, #8]
 800c482:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c486:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c48a:	7019      	strb	r1, [r3, #0]
 800c48c:	68a3      	ldr	r3, [r4, #8]
 800c48e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800c492:	705a      	strb	r2, [r3, #1]
 800c494:	68a3      	ldr	r3, [r4, #8]
 800c496:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c49a:	7099      	strb	r1, [r3, #2]
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800c4a2:	70da      	strb	r2, [r3, #3]
 800c4a4:	68a3      	ldr	r3, [r4, #8]
 800c4a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c4aa:	7119      	strb	r1, [r3, #4]
 800c4ac:	68a3      	ldr	r3, [r4, #8]
 800c4ae:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800c4b2:	715a      	strb	r2, [r3, #5]
 800c4b4:	68a3      	ldr	r3, [r4, #8]
 800c4b6:	f89d 2000 	ldrb.w	r2, [sp]
 800c4ba:	7199      	strb	r1, [r3, #6]
 800c4bc:	68a3      	ldr	r3, [r4, #8]
 800c4be:	71da      	strb	r2, [r3, #7]
 800c4c0:	2108      	movs	r1, #8
 800c4c2:	68a2      	ldr	r2, [r4, #8]
 800c4c4:	6923      	ldr	r3, [r4, #16]
 800c4c6:	440a      	add	r2, r1
 800c4c8:	440b      	add	r3, r1
 800c4ca:	60a2      	str	r2, [r4, #8]
 800c4cc:	6123      	str	r3, [r4, #16]
 800c4ce:	7561      	strb	r1, [r4, #21]
 800c4d0:	7da0      	ldrb	r0, [r4, #22]
 800c4d2:	f080 0001 	eor.w	r0, r0, #1
 800c4d6:	b002      	add	sp, #8
 800c4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4dc:	466b      	mov	r3, sp
 800c4de:	68a2      	ldr	r2, [r4, #8]
 800c4e0:	cb03      	ldmia	r3!, {r0, r1}
 800c4e2:	6010      	str	r0, [r2, #0]
 800c4e4:	6051      	str	r1, [r2, #4]
 800c4e6:	e7eb      	b.n	800c4c0 <ucdr_serialize_uint64_t+0x10c>
 800c4e8:	68a2      	ldr	r2, [r4, #8]
 800c4ea:	6923      	ldr	r3, [r4, #16]
 800c4ec:	7da0      	ldrb	r0, [r4, #22]
 800c4ee:	1b92      	subs	r2, r2, r6
 800c4f0:	f080 0001 	eor.w	r0, r0, #1
 800c4f4:	1b9e      	subs	r6, r3, r6
 800c4f6:	7567      	strb	r7, [r4, #21]
 800c4f8:	60a2      	str	r2, [r4, #8]
 800c4fa:	6126      	str	r6, [r4, #16]
 800c4fc:	b002      	add	sp, #8
 800c4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c502:	68a3      	ldr	r3, [r4, #8]
 800c504:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c508:	701a      	strb	r2, [r3, #0]
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	68a3      	ldr	r3, [r4, #8]
 800c514:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c520:	701a      	strb	r2, [r3, #0]
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	68a3      	ldr	r3, [r4, #8]
 800c52c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	f89d 2000 	ldrb.w	r2, [sp]
 800c538:	701a      	strb	r2, [r3, #0]
 800c53a:	e78a      	b.n	800c452 <ucdr_serialize_uint64_t+0x9e>
 800c53c:	4628      	mov	r0, r5
 800c53e:	466d      	mov	r5, sp
 800c540:	4632      	mov	r2, r6
 800c542:	4629      	mov	r1, r5
 800c544:	f007 fc6e 	bl	8013e24 <memcpy>
 800c548:	4642      	mov	r2, r8
 800c54a:	68a0      	ldr	r0, [r4, #8]
 800c54c:	19a9      	adds	r1, r5, r6
 800c54e:	f007 fc69 	bl	8013e24 <memcpy>
 800c552:	e77e      	b.n	800c452 <ucdr_serialize_uint64_t+0x9e>

0800c554 <ucdr_serialize_int16_t>:
 800c554:	460b      	mov	r3, r1
 800c556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55a:	2102      	movs	r1, #2
 800c55c:	b082      	sub	sp, #8
 800c55e:	4604      	mov	r4, r0
 800c560:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c564:	f000 fa70 	bl	800ca48 <ucdr_buffer_alignment>
 800c568:	4601      	mov	r1, r0
 800c56a:	4620      	mov	r0, r4
 800c56c:	7d67      	ldrb	r7, [r4, #21]
 800c56e:	f000 fab1 	bl	800cad4 <ucdr_advance_buffer>
 800c572:	4620      	mov	r0, r4
 800c574:	2102      	movs	r1, #2
 800c576:	f000 fa09 	bl	800c98c <ucdr_check_buffer_available_for>
 800c57a:	bb78      	cbnz	r0, 800c5dc <ucdr_serialize_int16_t+0x88>
 800c57c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c580:	42ab      	cmp	r3, r5
 800c582:	d926      	bls.n	800c5d2 <ucdr_serialize_int16_t+0x7e>
 800c584:	6922      	ldr	r2, [r4, #16]
 800c586:	1b5e      	subs	r6, r3, r5
 800c588:	4432      	add	r2, r6
 800c58a:	f1c6 0802 	rsb	r8, r6, #2
 800c58e:	4641      	mov	r1, r8
 800c590:	4620      	mov	r0, r4
 800c592:	60a3      	str	r3, [r4, #8]
 800c594:	6122      	str	r2, [r4, #16]
 800c596:	f000 fa05 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d03b      	beq.n	800c616 <ucdr_serialize_int16_t+0xc2>
 800c59e:	7d23      	ldrb	r3, [r4, #20]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d04a      	beq.n	800c63a <ucdr_serialize_int16_t+0xe6>
 800c5a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c5a8:	702b      	strb	r3, [r5, #0]
 800c5aa:	2e00      	cmp	r6, #0
 800c5ac:	d040      	beq.n	800c630 <ucdr_serialize_int16_t+0xdc>
 800c5ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5b2:	706b      	strb	r3, [r5, #1]
 800c5b4:	2102      	movs	r1, #2
 800c5b6:	6923      	ldr	r3, [r4, #16]
 800c5b8:	68a2      	ldr	r2, [r4, #8]
 800c5ba:	7da0      	ldrb	r0, [r4, #22]
 800c5bc:	440b      	add	r3, r1
 800c5be:	1b9e      	subs	r6, r3, r6
 800c5c0:	4442      	add	r2, r8
 800c5c2:	f080 0001 	eor.w	r0, r0, #1
 800c5c6:	6126      	str	r6, [r4, #16]
 800c5c8:	60a2      	str	r2, [r4, #8]
 800c5ca:	7561      	strb	r1, [r4, #21]
 800c5cc:	b002      	add	sp, #8
 800c5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 f9e5 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c5da:	b190      	cbz	r0, 800c602 <ucdr_serialize_int16_t+0xae>
 800c5dc:	7d23      	ldrb	r3, [r4, #20]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	68a3      	ldr	r3, [r4, #8]
 800c5e2:	d014      	beq.n	800c60e <ucdr_serialize_int16_t+0xba>
 800c5e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c5e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c5ec:	7019      	strb	r1, [r3, #0]
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	705a      	strb	r2, [r3, #1]
 800c5f2:	2102      	movs	r1, #2
 800c5f4:	68a2      	ldr	r2, [r4, #8]
 800c5f6:	6923      	ldr	r3, [r4, #16]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	440b      	add	r3, r1
 800c5fc:	60a2      	str	r2, [r4, #8]
 800c5fe:	6123      	str	r3, [r4, #16]
 800c600:	7561      	strb	r1, [r4, #21]
 800c602:	7da0      	ldrb	r0, [r4, #22]
 800c604:	f080 0001 	eor.w	r0, r0, #1
 800c608:	b002      	add	sp, #8
 800c60a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c60e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c612:	801a      	strh	r2, [r3, #0]
 800c614:	e7ed      	b.n	800c5f2 <ucdr_serialize_int16_t+0x9e>
 800c616:	68a2      	ldr	r2, [r4, #8]
 800c618:	6923      	ldr	r3, [r4, #16]
 800c61a:	7da0      	ldrb	r0, [r4, #22]
 800c61c:	1b92      	subs	r2, r2, r6
 800c61e:	f080 0001 	eor.w	r0, r0, #1
 800c622:	1b9e      	subs	r6, r3, r6
 800c624:	7567      	strb	r7, [r4, #21]
 800c626:	60a2      	str	r2, [r4, #8]
 800c628:	6126      	str	r6, [r4, #16]
 800c62a:	b002      	add	sp, #8
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	68a3      	ldr	r3, [r4, #8]
 800c632:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c636:	701a      	strb	r2, [r3, #0]
 800c638:	e7bc      	b.n	800c5b4 <ucdr_serialize_int16_t+0x60>
 800c63a:	4628      	mov	r0, r5
 800c63c:	f10d 0506 	add.w	r5, sp, #6
 800c640:	4629      	mov	r1, r5
 800c642:	4632      	mov	r2, r6
 800c644:	f007 fbee 	bl	8013e24 <memcpy>
 800c648:	4642      	mov	r2, r8
 800c64a:	68a0      	ldr	r0, [r4, #8]
 800c64c:	19a9      	adds	r1, r5, r6
 800c64e:	f007 fbe9 	bl	8013e24 <memcpy>
 800c652:	e7af      	b.n	800c5b4 <ucdr_serialize_int16_t+0x60>

0800c654 <ucdr_deserialize_int16_t>:
 800c654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c658:	460d      	mov	r5, r1
 800c65a:	2102      	movs	r1, #2
 800c65c:	4604      	mov	r4, r0
 800c65e:	f000 f9f3 	bl	800ca48 <ucdr_buffer_alignment>
 800c662:	4601      	mov	r1, r0
 800c664:	4620      	mov	r0, r4
 800c666:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c66a:	f000 fa33 	bl	800cad4 <ucdr_advance_buffer>
 800c66e:	4620      	mov	r0, r4
 800c670:	2102      	movs	r1, #2
 800c672:	f000 f98b 	bl	800c98c <ucdr_check_buffer_available_for>
 800c676:	bb60      	cbnz	r0, 800c6d2 <ucdr_deserialize_int16_t+0x7e>
 800c678:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800c67c:	42b3      	cmp	r3, r6
 800c67e:	d923      	bls.n	800c6c8 <ucdr_deserialize_int16_t+0x74>
 800c680:	6922      	ldr	r2, [r4, #16]
 800c682:	1b9f      	subs	r7, r3, r6
 800c684:	443a      	add	r2, r7
 800c686:	f1c7 0902 	rsb	r9, r7, #2
 800c68a:	4649      	mov	r1, r9
 800c68c:	4620      	mov	r0, r4
 800c68e:	60a3      	str	r3, [r4, #8]
 800c690:	6122      	str	r2, [r4, #16]
 800c692:	f000 f987 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c696:	2800      	cmp	r0, #0
 800c698:	d034      	beq.n	800c704 <ucdr_deserialize_int16_t+0xb0>
 800c69a:	7d23      	ldrb	r3, [r4, #20]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d042      	beq.n	800c726 <ucdr_deserialize_int16_t+0xd2>
 800c6a0:	7873      	ldrb	r3, [r6, #1]
 800c6a2:	702b      	strb	r3, [r5, #0]
 800c6a4:	2f00      	cmp	r7, #0
 800c6a6:	d03a      	beq.n	800c71e <ucdr_deserialize_int16_t+0xca>
 800c6a8:	7833      	ldrb	r3, [r6, #0]
 800c6aa:	706b      	strb	r3, [r5, #1]
 800c6ac:	2102      	movs	r1, #2
 800c6ae:	6923      	ldr	r3, [r4, #16]
 800c6b0:	68a2      	ldr	r2, [r4, #8]
 800c6b2:	7da0      	ldrb	r0, [r4, #22]
 800c6b4:	440b      	add	r3, r1
 800c6b6:	1bdf      	subs	r7, r3, r7
 800c6b8:	444a      	add	r2, r9
 800c6ba:	7561      	strb	r1, [r4, #21]
 800c6bc:	6127      	str	r7, [r4, #16]
 800c6be:	60a2      	str	r2, [r4, #8]
 800c6c0:	f080 0001 	eor.w	r0, r0, #1
 800c6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6c8:	2102      	movs	r1, #2
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f000 f96a 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c6d0:	b180      	cbz	r0, 800c6f4 <ucdr_deserialize_int16_t+0xa0>
 800c6d2:	7d23      	ldrb	r3, [r4, #20]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	68a3      	ldr	r3, [r4, #8]
 800c6d8:	d011      	beq.n	800c6fe <ucdr_deserialize_int16_t+0xaa>
 800c6da:	785b      	ldrb	r3, [r3, #1]
 800c6dc:	702b      	strb	r3, [r5, #0]
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	706b      	strb	r3, [r5, #1]
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	68a2      	ldr	r2, [r4, #8]
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	440a      	add	r2, r1
 800c6ec:	440b      	add	r3, r1
 800c6ee:	60a2      	str	r2, [r4, #8]
 800c6f0:	6123      	str	r3, [r4, #16]
 800c6f2:	7561      	strb	r1, [r4, #21]
 800c6f4:	7da0      	ldrb	r0, [r4, #22]
 800c6f6:	f080 0001 	eor.w	r0, r0, #1
 800c6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	802b      	strh	r3, [r5, #0]
 800c702:	e7ef      	b.n	800c6e4 <ucdr_deserialize_int16_t+0x90>
 800c704:	68a2      	ldr	r2, [r4, #8]
 800c706:	6923      	ldr	r3, [r4, #16]
 800c708:	7da0      	ldrb	r0, [r4, #22]
 800c70a:	1bd2      	subs	r2, r2, r7
 800c70c:	f884 8015 	strb.w	r8, [r4, #21]
 800c710:	1bdf      	subs	r7, r3, r7
 800c712:	60a2      	str	r2, [r4, #8]
 800c714:	6127      	str	r7, [r4, #16]
 800c716:	f080 0001 	eor.w	r0, r0, #1
 800c71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71e:	68a3      	ldr	r3, [r4, #8]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	706b      	strb	r3, [r5, #1]
 800c724:	e7c2      	b.n	800c6ac <ucdr_deserialize_int16_t+0x58>
 800c726:	4631      	mov	r1, r6
 800c728:	463a      	mov	r2, r7
 800c72a:	4628      	mov	r0, r5
 800c72c:	f007 fb7a 	bl	8013e24 <memcpy>
 800c730:	464a      	mov	r2, r9
 800c732:	68a1      	ldr	r1, [r4, #8]
 800c734:	19e8      	adds	r0, r5, r7
 800c736:	f007 fb75 	bl	8013e24 <memcpy>
 800c73a:	e7b7      	b.n	800c6ac <ucdr_deserialize_int16_t+0x58>

0800c73c <ucdr_serialize_int32_t>:
 800c73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c740:	b082      	sub	sp, #8
 800c742:	9101      	str	r1, [sp, #4]
 800c744:	2104      	movs	r1, #4
 800c746:	4604      	mov	r4, r0
 800c748:	f000 f97e 	bl	800ca48 <ucdr_buffer_alignment>
 800c74c:	4601      	mov	r1, r0
 800c74e:	4620      	mov	r0, r4
 800c750:	7d67      	ldrb	r7, [r4, #21]
 800c752:	f000 f9bf 	bl	800cad4 <ucdr_advance_buffer>
 800c756:	4620      	mov	r0, r4
 800c758:	2104      	movs	r1, #4
 800c75a:	f000 f917 	bl	800c98c <ucdr_check_buffer_available_for>
 800c75e:	2800      	cmp	r0, #0
 800c760:	d139      	bne.n	800c7d6 <ucdr_serialize_int32_t+0x9a>
 800c762:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c766:	42ab      	cmp	r3, r5
 800c768:	d930      	bls.n	800c7cc <ucdr_serialize_int32_t+0x90>
 800c76a:	6922      	ldr	r2, [r4, #16]
 800c76c:	1b5e      	subs	r6, r3, r5
 800c76e:	4432      	add	r2, r6
 800c770:	f1c6 0804 	rsb	r8, r6, #4
 800c774:	4641      	mov	r1, r8
 800c776:	4620      	mov	r0, r4
 800c778:	60a3      	str	r3, [r4, #8]
 800c77a:	6122      	str	r2, [r4, #16]
 800c77c:	f000 f912 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c780:	2800      	cmp	r0, #0
 800c782:	d04c      	beq.n	800c81e <ucdr_serialize_int32_t+0xe2>
 800c784:	7d23      	ldrb	r3, [r4, #20]
 800c786:	2b01      	cmp	r3, #1
 800c788:	d063      	beq.n	800c852 <ucdr_serialize_int32_t+0x116>
 800c78a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c78e:	702b      	strb	r3, [r5, #0]
 800c790:	2e00      	cmp	r6, #0
 800c792:	d051      	beq.n	800c838 <ucdr_serialize_int32_t+0xfc>
 800c794:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c798:	2e01      	cmp	r6, #1
 800c79a:	706b      	strb	r3, [r5, #1]
 800c79c:	d050      	beq.n	800c840 <ucdr_serialize_int32_t+0x104>
 800c79e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c7a2:	2e02      	cmp	r6, #2
 800c7a4:	70ab      	strb	r3, [r5, #2]
 800c7a6:	d04f      	beq.n	800c848 <ucdr_serialize_int32_t+0x10c>
 800c7a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c7ac:	70eb      	strb	r3, [r5, #3]
 800c7ae:	2104      	movs	r1, #4
 800c7b0:	6923      	ldr	r3, [r4, #16]
 800c7b2:	68a2      	ldr	r2, [r4, #8]
 800c7b4:	7da0      	ldrb	r0, [r4, #22]
 800c7b6:	440b      	add	r3, r1
 800c7b8:	1b9e      	subs	r6, r3, r6
 800c7ba:	4442      	add	r2, r8
 800c7bc:	f080 0001 	eor.w	r0, r0, #1
 800c7c0:	6126      	str	r6, [r4, #16]
 800c7c2:	60a2      	str	r2, [r4, #8]
 800c7c4:	7561      	strb	r1, [r4, #21]
 800c7c6:	b002      	add	sp, #8
 800c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7cc:	2104      	movs	r1, #4
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 f8e8 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c7d4:	b1d0      	cbz	r0, 800c80c <ucdr_serialize_int32_t+0xd0>
 800c7d6:	7d23      	ldrb	r3, [r4, #20]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	68a3      	ldr	r3, [r4, #8]
 800c7dc:	d01c      	beq.n	800c818 <ucdr_serialize_int32_t+0xdc>
 800c7de:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800c7e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7e6:	7019      	strb	r1, [r3, #0]
 800c7e8:	68a3      	ldr	r3, [r4, #8]
 800c7ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800c7ee:	705a      	strb	r2, [r3, #1]
 800c7f0:	68a3      	ldr	r3, [r4, #8]
 800c7f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c7f6:	7099      	strb	r1, [r3, #2]
 800c7f8:	68a3      	ldr	r3, [r4, #8]
 800c7fa:	70da      	strb	r2, [r3, #3]
 800c7fc:	2104      	movs	r1, #4
 800c7fe:	68a2      	ldr	r2, [r4, #8]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	440a      	add	r2, r1
 800c804:	440b      	add	r3, r1
 800c806:	60a2      	str	r2, [r4, #8]
 800c808:	6123      	str	r3, [r4, #16]
 800c80a:	7561      	strb	r1, [r4, #21]
 800c80c:	7da0      	ldrb	r0, [r4, #22]
 800c80e:	f080 0001 	eor.w	r0, r0, #1
 800c812:	b002      	add	sp, #8
 800c814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c818:	9a01      	ldr	r2, [sp, #4]
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	e7ee      	b.n	800c7fc <ucdr_serialize_int32_t+0xc0>
 800c81e:	68a2      	ldr	r2, [r4, #8]
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	7da0      	ldrb	r0, [r4, #22]
 800c824:	1b92      	subs	r2, r2, r6
 800c826:	f080 0001 	eor.w	r0, r0, #1
 800c82a:	1b9e      	subs	r6, r3, r6
 800c82c:	7567      	strb	r7, [r4, #21]
 800c82e:	60a2      	str	r2, [r4, #8]
 800c830:	6126      	str	r6, [r4, #16]
 800c832:	b002      	add	sp, #8
 800c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c838:	68a3      	ldr	r3, [r4, #8]
 800c83a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	68a3      	ldr	r3, [r4, #8]
 800c842:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c846:	701a      	strb	r2, [r3, #0]
 800c848:	68a3      	ldr	r3, [r4, #8]
 800c84a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c84e:	701a      	strb	r2, [r3, #0]
 800c850:	e7ad      	b.n	800c7ae <ucdr_serialize_int32_t+0x72>
 800c852:	4628      	mov	r0, r5
 800c854:	ad01      	add	r5, sp, #4
 800c856:	4629      	mov	r1, r5
 800c858:	4632      	mov	r2, r6
 800c85a:	f007 fae3 	bl	8013e24 <memcpy>
 800c85e:	4642      	mov	r2, r8
 800c860:	68a0      	ldr	r0, [r4, #8]
 800c862:	19a9      	adds	r1, r5, r6
 800c864:	f007 fade 	bl	8013e24 <memcpy>
 800c868:	e7a1      	b.n	800c7ae <ucdr_serialize_int32_t+0x72>
 800c86a:	bf00      	nop

0800c86c <ucdr_deserialize_int32_t>:
 800c86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c870:	460d      	mov	r5, r1
 800c872:	2104      	movs	r1, #4
 800c874:	4604      	mov	r4, r0
 800c876:	f000 f8e7 	bl	800ca48 <ucdr_buffer_alignment>
 800c87a:	4601      	mov	r1, r0
 800c87c:	4620      	mov	r0, r4
 800c87e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c882:	f000 f927 	bl	800cad4 <ucdr_advance_buffer>
 800c886:	4620      	mov	r0, r4
 800c888:	2104      	movs	r1, #4
 800c88a:	f000 f87f 	bl	800c98c <ucdr_check_buffer_available_for>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d138      	bne.n	800c904 <ucdr_deserialize_int32_t+0x98>
 800c892:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800c896:	42b3      	cmp	r3, r6
 800c898:	d92f      	bls.n	800c8fa <ucdr_deserialize_int32_t+0x8e>
 800c89a:	6922      	ldr	r2, [r4, #16]
 800c89c:	1b9f      	subs	r7, r3, r6
 800c89e:	443a      	add	r2, r7
 800c8a0:	f1c7 0904 	rsb	r9, r7, #4
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	60a3      	str	r3, [r4, #8]
 800c8aa:	6122      	str	r2, [r4, #16]
 800c8ac:	f000 f87a 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d046      	beq.n	800c942 <ucdr_deserialize_int32_t+0xd6>
 800c8b4:	7d23      	ldrb	r3, [r4, #20]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d05c      	beq.n	800c974 <ucdr_deserialize_int32_t+0x108>
 800c8ba:	78f3      	ldrb	r3, [r6, #3]
 800c8bc:	702b      	strb	r3, [r5, #0]
 800c8be:	2f00      	cmp	r7, #0
 800c8c0:	d04c      	beq.n	800c95c <ucdr_deserialize_int32_t+0xf0>
 800c8c2:	78b2      	ldrb	r2, [r6, #2]
 800c8c4:	2f01      	cmp	r7, #1
 800c8c6:	f105 0302 	add.w	r3, r5, #2
 800c8ca:	706a      	strb	r2, [r5, #1]
 800c8cc:	d04a      	beq.n	800c964 <ucdr_deserialize_int32_t+0xf8>
 800c8ce:	7872      	ldrb	r2, [r6, #1]
 800c8d0:	2f02      	cmp	r7, #2
 800c8d2:	f105 0303 	add.w	r3, r5, #3
 800c8d6:	70aa      	strb	r2, [r5, #2]
 800c8d8:	d048      	beq.n	800c96c <ucdr_deserialize_int32_t+0x100>
 800c8da:	7833      	ldrb	r3, [r6, #0]
 800c8dc:	70eb      	strb	r3, [r5, #3]
 800c8de:	2104      	movs	r1, #4
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	68a2      	ldr	r2, [r4, #8]
 800c8e4:	7da0      	ldrb	r0, [r4, #22]
 800c8e6:	440b      	add	r3, r1
 800c8e8:	1bdf      	subs	r7, r3, r7
 800c8ea:	444a      	add	r2, r9
 800c8ec:	7561      	strb	r1, [r4, #21]
 800c8ee:	6127      	str	r7, [r4, #16]
 800c8f0:	60a2      	str	r2, [r4, #8]
 800c8f2:	f080 0001 	eor.w	r0, r0, #1
 800c8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8fa:	2104      	movs	r1, #4
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f000 f851 	bl	800c9a4 <ucdr_check_final_buffer_behavior>
 800c902:	b1b0      	cbz	r0, 800c932 <ucdr_deserialize_int32_t+0xc6>
 800c904:	7d23      	ldrb	r3, [r4, #20]
 800c906:	2b01      	cmp	r3, #1
 800c908:	68a3      	ldr	r3, [r4, #8]
 800c90a:	d017      	beq.n	800c93c <ucdr_deserialize_int32_t+0xd0>
 800c90c:	78db      	ldrb	r3, [r3, #3]
 800c90e:	702b      	strb	r3, [r5, #0]
 800c910:	68a3      	ldr	r3, [r4, #8]
 800c912:	789b      	ldrb	r3, [r3, #2]
 800c914:	706b      	strb	r3, [r5, #1]
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	785b      	ldrb	r3, [r3, #1]
 800c91a:	70ab      	strb	r3, [r5, #2]
 800c91c:	68a3      	ldr	r3, [r4, #8]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	70eb      	strb	r3, [r5, #3]
 800c922:	2104      	movs	r1, #4
 800c924:	68a2      	ldr	r2, [r4, #8]
 800c926:	6923      	ldr	r3, [r4, #16]
 800c928:	440a      	add	r2, r1
 800c92a:	440b      	add	r3, r1
 800c92c:	60a2      	str	r2, [r4, #8]
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	7561      	strb	r1, [r4, #21]
 800c932:	7da0      	ldrb	r0, [r4, #22]
 800c934:	f080 0001 	eor.w	r0, r0, #1
 800c938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	602b      	str	r3, [r5, #0]
 800c940:	e7ef      	b.n	800c922 <ucdr_deserialize_int32_t+0xb6>
 800c942:	68a2      	ldr	r2, [r4, #8]
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	7da0      	ldrb	r0, [r4, #22]
 800c948:	1bd2      	subs	r2, r2, r7
 800c94a:	f884 8015 	strb.w	r8, [r4, #21]
 800c94e:	1bdf      	subs	r7, r3, r7
 800c950:	60a2      	str	r2, [r4, #8]
 800c952:	6127      	str	r7, [r4, #16]
 800c954:	f080 0001 	eor.w	r0, r0, #1
 800c958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c95c:	68a2      	ldr	r2, [r4, #8]
 800c95e:	1cab      	adds	r3, r5, #2
 800c960:	7892      	ldrb	r2, [r2, #2]
 800c962:	706a      	strb	r2, [r5, #1]
 800c964:	68a2      	ldr	r2, [r4, #8]
 800c966:	7852      	ldrb	r2, [r2, #1]
 800c968:	f803 2b01 	strb.w	r2, [r3], #1
 800c96c:	68a2      	ldr	r2, [r4, #8]
 800c96e:	7812      	ldrb	r2, [r2, #0]
 800c970:	701a      	strb	r2, [r3, #0]
 800c972:	e7b4      	b.n	800c8de <ucdr_deserialize_int32_t+0x72>
 800c974:	4631      	mov	r1, r6
 800c976:	463a      	mov	r2, r7
 800c978:	4628      	mov	r0, r5
 800c97a:	f007 fa53 	bl	8013e24 <memcpy>
 800c97e:	464a      	mov	r2, r9
 800c980:	68a1      	ldr	r1, [r4, #8]
 800c982:	19e8      	adds	r0, r5, r7
 800c984:	f007 fa4e 	bl	8013e24 <memcpy>
 800c988:	e7a9      	b.n	800c8de <ucdr_deserialize_int32_t+0x72>
 800c98a:	bf00      	nop

0800c98c <ucdr_check_buffer_available_for>:
 800c98c:	7d83      	ldrb	r3, [r0, #22]
 800c98e:	b93b      	cbnz	r3, 800c9a0 <ucdr_check_buffer_available_for+0x14>
 800c990:	6883      	ldr	r3, [r0, #8]
 800c992:	6840      	ldr	r0, [r0, #4]
 800c994:	4419      	add	r1, r3
 800c996:	4288      	cmp	r0, r1
 800c998:	bf34      	ite	cc
 800c99a:	2000      	movcc	r0, #0
 800c99c:	2001      	movcs	r0, #1
 800c99e:	4770      	bx	lr
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	4770      	bx	lr

0800c9a4 <ucdr_check_final_buffer_behavior>:
 800c9a4:	7d83      	ldrb	r3, [r0, #22]
 800c9a6:	b943      	cbnz	r3, 800c9ba <ucdr_check_final_buffer_behavior+0x16>
 800c9a8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c9ac:	4291      	cmp	r1, r2
 800c9ae:	b510      	push	{r4, lr}
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	d205      	bcs.n	800c9c0 <ucdr_check_final_buffer_behavior+0x1c>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	bd10      	pop	{r4, pc}
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4618      	mov	r0, r3
 800c9be:	4770      	bx	lr
 800c9c0:	6982      	ldr	r2, [r0, #24]
 800c9c2:	b13a      	cbz	r2, 800c9d4 <ucdr_check_final_buffer_behavior+0x30>
 800c9c4:	69c1      	ldr	r1, [r0, #28]
 800c9c6:	4790      	blx	r2
 800c9c8:	f080 0301 	eor.w	r3, r0, #1
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	75a0      	strb	r0, [r4, #22]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	bd10      	pop	{r4, pc}
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	75a0      	strb	r0, [r4, #22]
 800c9d8:	e7fa      	b.n	800c9d0 <ucdr_check_final_buffer_behavior+0x2c>
 800c9da:	bf00      	nop

0800c9dc <ucdr_set_on_full_buffer_callback>:
 800c9dc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop

0800c9e4 <ucdr_init_buffer_origin_offset_endian>:
 800c9e4:	b430      	push	{r4, r5}
 800c9e6:	2400      	movs	r4, #0
 800c9e8:	9d02      	ldr	r5, [sp, #8]
 800c9ea:	440a      	add	r2, r1
 800c9ec:	6001      	str	r1, [r0, #0]
 800c9ee:	60c3      	str	r3, [r0, #12]
 800c9f0:	4429      	add	r1, r5
 800c9f2:	441d      	add	r5, r3
 800c9f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c9f8:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800c9fc:	6105      	str	r5, [r0, #16]
 800c9fe:	7544      	strb	r4, [r0, #21]
 800ca00:	7584      	strb	r4, [r0, #22]
 800ca02:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800ca06:	bc30      	pop	{r4, r5}
 800ca08:	7503      	strb	r3, [r0, #20]
 800ca0a:	4770      	bx	lr

0800ca0c <ucdr_init_buffer_origin_offset>:
 800ca0c:	b530      	push	{r4, r5, lr}
 800ca0e:	2501      	movs	r5, #1
 800ca10:	b083      	sub	sp, #12
 800ca12:	9c06      	ldr	r4, [sp, #24]
 800ca14:	e9cd 4500 	strd	r4, r5, [sp]
 800ca18:	f7ff ffe4 	bl	800c9e4 <ucdr_init_buffer_origin_offset_endian>
 800ca1c:	b003      	add	sp, #12
 800ca1e:	bd30      	pop	{r4, r5, pc}

0800ca20 <ucdr_init_buffer_origin>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	2400      	movs	r4, #0
 800ca24:	b082      	sub	sp, #8
 800ca26:	9400      	str	r4, [sp, #0]
 800ca28:	f7ff fff0 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800ca2c:	b002      	add	sp, #8
 800ca2e:	bd10      	pop	{r4, pc}

0800ca30 <ucdr_init_buffer>:
 800ca30:	2300      	movs	r3, #0
 800ca32:	f7ff bff5 	b.w	800ca20 <ucdr_init_buffer_origin>
 800ca36:	bf00      	nop

0800ca38 <ucdr_alignment>:
 800ca38:	fbb0 f3f1 	udiv	r3, r0, r1
 800ca3c:	fb03 0311 	mls	r3, r3, r1, r0
 800ca40:	1e48      	subs	r0, r1, #1
 800ca42:	1ac9      	subs	r1, r1, r3
 800ca44:	4008      	ands	r0, r1
 800ca46:	4770      	bx	lr

0800ca48 <ucdr_buffer_alignment>:
 800ca48:	7d43      	ldrb	r3, [r0, #21]
 800ca4a:	428b      	cmp	r3, r1
 800ca4c:	d209      	bcs.n	800ca62 <ucdr_buffer_alignment+0x1a>
 800ca4e:	6903      	ldr	r3, [r0, #16]
 800ca50:	1e4a      	subs	r2, r1, #1
 800ca52:	fbb3 f0f1 	udiv	r0, r3, r1
 800ca56:	fb01 3010 	mls	r0, r1, r0, r3
 800ca5a:	1a09      	subs	r1, r1, r0
 800ca5c:	ea01 0002 	and.w	r0, r1, r2
 800ca60:	4770      	bx	lr
 800ca62:	2000      	movs	r0, #0
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <ucdr_align_to>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	f7ff ffeb 	bl	800ca48 <ucdr_buffer_alignment>
 800ca72:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800ca76:	4402      	add	r2, r0
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	bf28      	it	cs
 800ca7c:	4613      	movcs	r3, r2
 800ca7e:	6922      	ldr	r2, [r4, #16]
 800ca80:	7565      	strb	r5, [r4, #21]
 800ca82:	4410      	add	r0, r2
 800ca84:	6120      	str	r0, [r4, #16]
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	bd38      	pop	{r3, r4, r5, pc}
 800ca8a:	bf00      	nop

0800ca8c <ucdr_buffer_length>:
 800ca8c:	6882      	ldr	r2, [r0, #8]
 800ca8e:	6800      	ldr	r0, [r0, #0]
 800ca90:	1a10      	subs	r0, r2, r0
 800ca92:	4770      	bx	lr

0800ca94 <ucdr_buffer_remaining>:
 800ca94:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ca98:	1a10      	subs	r0, r2, r0
 800ca9a:	4770      	bx	lr

0800ca9c <ucdr_check_final_buffer_behavior_array>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	7d83      	ldrb	r3, [r0, #22]
 800caa0:	b963      	cbnz	r3, 800cabc <ucdr_check_final_buffer_behavior_array+0x20>
 800caa2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	d308      	bcc.n	800cac0 <ucdr_check_final_buffer_behavior_array+0x24>
 800caae:	b139      	cbz	r1, 800cac0 <ucdr_check_final_buffer_behavior_array+0x24>
 800cab0:	6983      	ldr	r3, [r0, #24]
 800cab2:	b163      	cbz	r3, 800cace <ucdr_check_final_buffer_behavior_array+0x32>
 800cab4:	69c1      	ldr	r1, [r0, #28]
 800cab6:	4798      	blx	r3
 800cab8:	75a0      	strb	r0, [r4, #22]
 800caba:	b108      	cbz	r0, 800cac0 <ucdr_check_final_buffer_behavior_array+0x24>
 800cabc:	2000      	movs	r0, #0
 800cabe:	bd38      	pop	{r3, r4, r5, pc}
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7ff ffe7 	bl	800ca94 <ucdr_buffer_remaining>
 800cac6:	42a8      	cmp	r0, r5
 800cac8:	bf28      	it	cs
 800caca:	4628      	movcs	r0, r5
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	2301      	movs	r3, #1
 800cad0:	7583      	strb	r3, [r0, #22]
 800cad2:	e7f3      	b.n	800cabc <ucdr_check_final_buffer_behavior_array+0x20>

0800cad4 <ucdr_advance_buffer>:
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4604      	mov	r4, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	f7ff ff57 	bl	800c98c <ucdr_check_buffer_available_for>
 800cade:	b178      	cbz	r0, 800cb00 <ucdr_advance_buffer+0x2c>
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	6921      	ldr	r1, [r4, #16]
 800cae4:	442b      	add	r3, r5
 800cae6:	60a3      	str	r3, [r4, #8]
 800cae8:	2301      	movs	r3, #1
 800caea:	4429      	add	r1, r5
 800caec:	7563      	strb	r3, [r4, #21]
 800caee:	6121      	str	r1, [r4, #16]
 800caf0:	bd38      	pop	{r3, r4, r5, pc}
 800caf2:	68a2      	ldr	r2, [r4, #8]
 800caf4:	6923      	ldr	r3, [r4, #16]
 800caf6:	4402      	add	r2, r0
 800caf8:	4403      	add	r3, r0
 800cafa:	1a2d      	subs	r5, r5, r0
 800cafc:	60a2      	str	r2, [r4, #8]
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	2201      	movs	r2, #1
 800cb02:	4629      	mov	r1, r5
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7ff ffc9 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d1f1      	bne.n	800caf2 <ucdr_advance_buffer+0x1e>
 800cb0e:	2301      	movs	r3, #1
 800cb10:	7563      	strb	r3, [r4, #21]
 800cb12:	bd38      	pop	{r3, r4, r5, pc}

0800cb14 <uxr_buffer_delete_entity>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	2303      	movs	r3, #3
 800cb18:	2400      	movs	r4, #0
 800cb1a:	b08e      	sub	sp, #56	; 0x38
 800cb1c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	2204      	movs	r2, #4
 800cb24:	ab06      	add	r3, sp, #24
 800cb26:	4604      	mov	r4, r0
 800cb28:	9103      	str	r1, [sp, #12]
 800cb2a:	f001 fa15 	bl	800df58 <uxr_prepare_stream_to_write_submessage>
 800cb2e:	b918      	cbnz	r0, 800cb38 <uxr_buffer_delete_entity+0x24>
 800cb30:	4604      	mov	r4, r0
 800cb32:	4620      	mov	r0, r4
 800cb34:	b00e      	add	sp, #56	; 0x38
 800cb36:	bd10      	pop	{r4, pc}
 800cb38:	9902      	ldr	r1, [sp, #8]
 800cb3a:	aa05      	add	r2, sp, #20
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	f001 fb3d 	bl	800e1bc <uxr_init_base_object_request>
 800cb42:	4604      	mov	r4, r0
 800cb44:	a905      	add	r1, sp, #20
 800cb46:	a806      	add	r0, sp, #24
 800cb48:	f003 f888 	bl	800fc5c <uxr_serialize_DELETE_Payload>
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	b00e      	add	sp, #56	; 0x38
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	bf00      	nop

0800cb54 <uxr_common_create_entity>:
 800cb54:	b530      	push	{r4, r5, lr}
 800cb56:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800cb5a:	b08d      	sub	sp, #52	; 0x34
 800cb5c:	2d01      	cmp	r5, #1
 800cb5e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cb62:	bf18      	it	ne
 800cb64:	2200      	movne	r2, #0
 800cb66:	4604      	mov	r4, r0
 800cb68:	f04f 0101 	mov.w	r1, #1
 800cb6c:	bf08      	it	eq
 800cb6e:	f003 0201 	andeq.w	r2, r3, #1
 800cb72:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800cb76:	330e      	adds	r3, #14
 800cb78:	441a      	add	r2, r3
 800cb7a:	e9cd 1000 	strd	r1, r0, [sp]
 800cb7e:	b292      	uxth	r2, r2
 800cb80:	4620      	mov	r0, r4
 800cb82:	9903      	ldr	r1, [sp, #12]
 800cb84:	ab04      	add	r3, sp, #16
 800cb86:	f001 f9e7 	bl	800df58 <uxr_prepare_stream_to_write_submessage>
 800cb8a:	b918      	cbnz	r0, 800cb94 <uxr_common_create_entity+0x40>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	4620      	mov	r0, r4
 800cb90:	b00d      	add	sp, #52	; 0x34
 800cb92:	bd30      	pop	{r4, r5, pc}
 800cb94:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb96:	9902      	ldr	r1, [sp, #8]
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f001 fb0f 	bl	800e1bc <uxr_init_base_object_request>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cba2:	a804      	add	r0, sp, #16
 800cba4:	f002 ffc2 	bl	800fb2c <uxr_serialize_CREATE_Payload>
 800cba8:	4620      	mov	r0, r4
 800cbaa:	b00d      	add	sp, #52	; 0x34
 800cbac:	bd30      	pop	{r4, r5, pc}
 800cbae:	bf00      	nop

0800cbb0 <uxr_buffer_create_participant_bin>:
 800cbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb4:	f04f 0c00 	mov.w	ip, #0
 800cbb8:	f04f 0e03 	mov.w	lr, #3
 800cbbc:	2701      	movs	r7, #1
 800cbbe:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800cbc2:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800cbc4:	ac11      	add	r4, sp, #68	; 0x44
 800cbc6:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800cbca:	f884 e008 	strb.w	lr, [r4, #8]
 800cbce:	7127      	strb	r7, [r4, #4]
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cbd6:	f89d 8274 	ldrb.w	r8, [sp, #628]	; 0x274
 800cbda:	f88d c014 	strb.w	ip, [sp, #20]
 800cbde:	b1de      	cbz	r6, 800cc18 <uxr_buffer_create_participant_bin+0x68>
 800cbe0:	f88d 701c 	strb.w	r7, [sp, #28]
 800cbe4:	9608      	str	r6, [sp, #32]
 800cbe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbea:	a809      	add	r0, sp, #36	; 0x24
 800cbec:	a915      	add	r1, sp, #84	; 0x54
 800cbee:	f7ff ff1f 	bl	800ca30 <ucdr_init_buffer>
 800cbf2:	a905      	add	r1, sp, #20
 800cbf4:	a809      	add	r0, sp, #36	; 0x24
 800cbf6:	f002 fc2b 	bl	800f450 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800cbfa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cbfe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800cc00:	9401      	str	r4, [sp, #4]
 800cc02:	f8cd 8000 	str.w	r8, [sp]
 800cc06:	4628      	mov	r0, r5
 800cc08:	b2b3      	uxth	r3, r6
 800cc0a:	60e6      	str	r6, [r4, #12]
 800cc0c:	f7ff ffa2 	bl	800cb54 <uxr_common_create_entity>
 800cc10:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800cc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc18:	f88d 601c 	strb.w	r6, [sp, #28]
 800cc1c:	e7e3      	b.n	800cbe6 <uxr_buffer_create_participant_bin+0x36>
 800cc1e:	bf00      	nop

0800cc20 <uxr_buffer_create_topic_bin>:
 800cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc22:	2602      	movs	r6, #2
 800cc24:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800cc28:	4605      	mov	r5, r0
 800cc2a:	9105      	str	r1, [sp, #20]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	a997      	add	r1, sp, #604	; 0x25c
 800cc30:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cc34:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800cc38:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800cc3c:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800cc3e:	f000 fa61 	bl	800d104 <uxr_object_id_to_raw>
 800cc42:	2203      	movs	r2, #3
 800cc44:	2101      	movs	r1, #1
 800cc46:	2300      	movs	r3, #0
 800cc48:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 800cc4c:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800cc4e:	a80b      	add	r0, sp, #44	; 0x2c
 800cc50:	9206      	str	r2, [sp, #24]
 800cc52:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800cc56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc5a:	a917      	add	r1, sp, #92	; 0x5c
 800cc5c:	f88d 301c 	strb.w	r3, [sp, #28]
 800cc60:	960a      	str	r6, [sp, #40]	; 0x28
 800cc62:	f7ff fee5 	bl	800ca30 <ucdr_init_buffer>
 800cc66:	a906      	add	r1, sp, #24
 800cc68:	a80b      	add	r0, sp, #44	; 0x2c
 800cc6a:	f002 fc13 	bl	800f494 <uxr_serialize_OBJK_Topic_Binary>
 800cc6e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cc72:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800cc74:	ac13      	add	r4, sp, #76	; 0x4c
 800cc76:	e9cd 7400 	strd	r7, r4, [sp]
 800cc7a:	4628      	mov	r0, r5
 800cc7c:	b2b3      	uxth	r3, r6
 800cc7e:	60e6      	str	r6, [r4, #12]
 800cc80:	f7ff ff68 	bl	800cb54 <uxr_common_create_entity>
 800cc84:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cc88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc8a:	bf00      	nop

0800cc8c <uxr_buffer_create_publisher_bin>:
 800cc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8e:	2603      	movs	r6, #3
 800cc90:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800cc94:	4605      	mov	r5, r0
 800cc96:	9105      	str	r1, [sp, #20]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	a992      	add	r1, sp, #584	; 0x248
 800cc9c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cca0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800cca4:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800cca8:	f000 fa2c 	bl	800d104 <uxr_object_id_to_raw>
 800ccac:	2300      	movs	r3, #0
 800ccae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccb2:	a806      	add	r0, sp, #24
 800ccb4:	a912      	add	r1, sp, #72	; 0x48
 800ccb6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800ccba:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800ccbe:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800ccc2:	f7ff feb5 	bl	800ca30 <ucdr_init_buffer>
 800ccc6:	a993      	add	r1, sp, #588	; 0x24c
 800ccc8:	a806      	add	r0, sp, #24
 800ccca:	f002 fc97 	bl	800f5fc <uxr_serialize_OBJK_Publisher_Binary>
 800ccce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ccd2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ccd4:	ac0e      	add	r4, sp, #56	; 0x38
 800ccd6:	9700      	str	r7, [sp, #0]
 800ccd8:	9401      	str	r4, [sp, #4]
 800ccda:	4628      	mov	r0, r5
 800ccdc:	b2b3      	uxth	r3, r6
 800ccde:	60e6      	str	r6, [r4, #12]
 800cce0:	f7ff ff38 	bl	800cb54 <uxr_common_create_entity>
 800cce4:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800cce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccea:	bf00      	nop

0800ccec <uxr_buffer_create_subscriber_bin>:
 800ccec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccee:	2604      	movs	r6, #4
 800ccf0:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	9105      	str	r1, [sp, #20]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	a992      	add	r1, sp, #584	; 0x248
 800ccfc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd00:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800cd04:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800cd08:	f000 f9fc 	bl	800d104 <uxr_object_id_to_raw>
 800cd0c:	2103      	movs	r1, #3
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd14:	a806      	add	r0, sp, #24
 800cd16:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 800cd1a:	a912      	add	r1, sp, #72	; 0x48
 800cd1c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800cd20:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800cd24:	f7ff fe84 	bl	800ca30 <ucdr_init_buffer>
 800cd28:	a993      	add	r1, sp, #588	; 0x24c
 800cd2a:	a806      	add	r0, sp, #24
 800cd2c:	f002 fd16 	bl	800f75c <uxr_serialize_OBJK_Subscriber_Binary>
 800cd30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cd34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cd36:	ac0e      	add	r4, sp, #56	; 0x38
 800cd38:	9700      	str	r7, [sp, #0]
 800cd3a:	9401      	str	r4, [sp, #4]
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	b2b3      	uxth	r3, r6
 800cd40:	60e6      	str	r6, [r4, #12]
 800cd42:	f7ff ff07 	bl	800cb54 <uxr_common_create_entity>
 800cd46:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800cd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd4c <uxr_buffer_create_datawriter_bin>:
 800cd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd50:	2705      	movs	r7, #5
 800cd52:	2603      	movs	r6, #3
 800cd54:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cd58:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 800cd5c:	9105      	str	r1, [sp, #20]
 800cd5e:	4605      	mov	r5, r0
 800cd60:	a9a1      	add	r1, sp, #644	; 0x284
 800cd62:	4618      	mov	r0, r3
 800cd64:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 800cd68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cd6c:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 800cd70:	f000 f9c8 	bl	800d104 <uxr_object_id_to_raw>
 800cd74:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800cd76:	a90e      	add	r1, sp, #56	; 0x38
 800cd78:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 800cd7c:	f000 f9c2 	bl	800d104 <uxr_object_id_to_raw>
 800cd80:	f1b8 0000 	subs.w	r0, r8, #0
 800cd84:	f04f 0300 	mov.w	r3, #0
 800cd88:	bf18      	it	ne
 800cd8a:	2001      	movne	r0, #1
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800cd92:	ac1d      	add	r4, sp, #116	; 0x74
 800cd94:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 800cd98:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 800cd9c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800cda0:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800cda4:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800cda8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800cdac:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800cdb0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800cdb4:	bb89      	cbnz	r1, 800ce1a <uxr_buffer_create_datawriter_bin+0xce>
 800cdb6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800cdba:	f04f 0823 	mov.w	r8, #35	; 0x23
 800cdbe:	f04f 0e13 	mov.w	lr, #19
 800cdc2:	f04f 0c0b 	mov.w	ip, #11
 800cdc6:	2221      	movs	r2, #33	; 0x21
 800cdc8:	2111      	movs	r1, #17
 800cdca:	2009      	movs	r0, #9
 800cdcc:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800cdd0:	b923      	cbnz	r3, 800cddc <uxr_buffer_create_datawriter_bin+0x90>
 800cdd2:	4642      	mov	r2, r8
 800cdd4:	4671      	mov	r1, lr
 800cdd6:	4660      	mov	r0, ip
 800cdd8:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 800cddc:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d025      	beq.n	800ce30 <uxr_buffer_create_datawriter_bin+0xe4>
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d029      	beq.n	800ce3c <uxr_buffer_create_datawriter_bin+0xf0>
 800cde8:	b32b      	cbz	r3, 800ce36 <uxr_buffer_create_datawriter_bin+0xea>
 800cdea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cdee:	a806      	add	r0, sp, #24
 800cdf0:	a921      	add	r1, sp, #132	; 0x84
 800cdf2:	f7ff fe1d 	bl	800ca30 <ucdr_init_buffer>
 800cdf6:	a90e      	add	r1, sp, #56	; 0x38
 800cdf8:	a806      	add	r0, sp, #24
 800cdfa:	f002 fd51 	bl	800f8a0 <uxr_serialize_OBJK_DataWriter_Binary>
 800cdfe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ce02:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ce04:	9401      	str	r4, [sp, #4]
 800ce06:	9700      	str	r7, [sp, #0]
 800ce08:	4628      	mov	r0, r5
 800ce0a:	b2b3      	uxth	r3, r6
 800ce0c:	60e6      	str	r6, [r4, #12]
 800ce0e:	f7ff fea1 	bl	800cb54 <uxr_common_create_entity>
 800ce12:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800ce16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1a:	f04f 0822 	mov.w	r8, #34	; 0x22
 800ce1e:	f04f 0e12 	mov.w	lr, #18
 800ce22:	f04f 0c0a 	mov.w	ip, #10
 800ce26:	2220      	movs	r2, #32
 800ce28:	2110      	movs	r1, #16
 800ce2a:	2008      	movs	r0, #8
 800ce2c:	2602      	movs	r6, #2
 800ce2e:	e7cd      	b.n	800cdcc <uxr_buffer_create_datawriter_bin+0x80>
 800ce30:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800ce34:	e7d9      	b.n	800cdea <uxr_buffer_create_datawriter_bin+0x9e>
 800ce36:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800ce3a:	e7d6      	b.n	800cdea <uxr_buffer_create_datawriter_bin+0x9e>
 800ce3c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ce40:	e7d3      	b.n	800cdea <uxr_buffer_create_datawriter_bin+0x9e>
 800ce42:	bf00      	nop

0800ce44 <uxr_buffer_create_datareader_bin>:
 800ce44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce48:	2706      	movs	r7, #6
 800ce4a:	2603      	movs	r6, #3
 800ce4c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800ce50:	f8bd 82b0 	ldrh.w	r8, [sp, #688]	; 0x2b0
 800ce54:	9105      	str	r1, [sp, #20]
 800ce56:	4605      	mov	r5, r0
 800ce58:	a9a3      	add	r1, sp, #652	; 0x28c
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 800ce60:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800ce64:	f89d 72b4 	ldrb.w	r7, [sp, #692]	; 0x2b4
 800ce68:	f000 f94c 	bl	800d104 <uxr_object_id_to_raw>
 800ce6c:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800ce6e:	a90e      	add	r1, sp, #56	; 0x38
 800ce70:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 800ce74:	f000 f946 	bl	800d104 <uxr_object_id_to_raw>
 800ce78:	f1b8 0000 	subs.w	r0, r8, #0
 800ce7c:	f04f 0300 	mov.w	r3, #0
 800ce80:	bf18      	it	ne
 800ce82:	2001      	movne	r0, #1
 800ce84:	2201      	movs	r2, #1
 800ce86:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800ce8a:	ac1f      	add	r4, sp, #124	; 0x7c
 800ce8c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 800ce90:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 800ce94:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800ce98:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800ce9c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800cea0:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800cea4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800cea8:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800ceac:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800ceb0:	bb89      	cbnz	r1, 800cf16 <uxr_buffer_create_datareader_bin+0xd2>
 800ceb2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ceb6:	f04f 0823 	mov.w	r8, #35	; 0x23
 800ceba:	f04f 0e13 	mov.w	lr, #19
 800cebe:	f04f 0c0b 	mov.w	ip, #11
 800cec2:	2221      	movs	r2, #33	; 0x21
 800cec4:	2111      	movs	r1, #17
 800cec6:	2009      	movs	r0, #9
 800cec8:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800cecc:	b923      	cbnz	r3, 800ced8 <uxr_buffer_create_datareader_bin+0x94>
 800cece:	4642      	mov	r2, r8
 800ced0:	4671      	mov	r1, lr
 800ced2:	4660      	mov	r0, ip
 800ced4:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 800ced8:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d025      	beq.n	800cf2c <uxr_buffer_create_datareader_bin+0xe8>
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d029      	beq.n	800cf38 <uxr_buffer_create_datareader_bin+0xf4>
 800cee4:	b32b      	cbz	r3, 800cf32 <uxr_buffer_create_datareader_bin+0xee>
 800cee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceea:	a806      	add	r0, sp, #24
 800ceec:	a923      	add	r1, sp, #140	; 0x8c
 800ceee:	f7ff fd9f 	bl	800ca30 <ucdr_init_buffer>
 800cef2:	a90e      	add	r1, sp, #56	; 0x38
 800cef4:	a806      	add	r0, sp, #24
 800cef6:	f002 fc97 	bl	800f828 <uxr_serialize_OBJK_DataReader_Binary>
 800cefa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cefe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf00:	9401      	str	r4, [sp, #4]
 800cf02:	9700      	str	r7, [sp, #0]
 800cf04:	4628      	mov	r0, r5
 800cf06:	b2b3      	uxth	r3, r6
 800cf08:	60e6      	str	r6, [r4, #12]
 800cf0a:	f7ff fe23 	bl	800cb54 <uxr_common_create_entity>
 800cf0e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800cf12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf16:	f04f 0822 	mov.w	r8, #34	; 0x22
 800cf1a:	f04f 0e12 	mov.w	lr, #18
 800cf1e:	f04f 0c0a 	mov.w	ip, #10
 800cf22:	2220      	movs	r2, #32
 800cf24:	2110      	movs	r1, #16
 800cf26:	2008      	movs	r0, #8
 800cf28:	2602      	movs	r6, #2
 800cf2a:	e7cd      	b.n	800cec8 <uxr_buffer_create_datareader_bin+0x84>
 800cf2c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800cf30:	e7d9      	b.n	800cee6 <uxr_buffer_create_datareader_bin+0xa2>
 800cf32:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800cf36:	e7d6      	b.n	800cee6 <uxr_buffer_create_datareader_bin+0xa2>
 800cf38:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800cf3c:	e7d3      	b.n	800cee6 <uxr_buffer_create_datareader_bin+0xa2>
 800cf3e:	bf00      	nop

0800cf40 <get_custom_error>:
 800cf40:	4b01      	ldr	r3, [pc, #4]	; (800cf48 <get_custom_error+0x8>)
 800cf42:	7818      	ldrb	r0, [r3, #0]
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	2000656c 	.word	0x2000656c

0800cf4c <recv_custom_msg>:
 800cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	2600      	movs	r6, #0
 800cf52:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800cf56:	b089      	sub	sp, #36	; 0x24
 800cf58:	4604      	mov	r4, r0
 800cf5a:	468a      	mov	sl, r1
 800cf5c:	4693      	mov	fp, r2
 800cf5e:	9305      	str	r3, [sp, #20]
 800cf60:	f88d 601e 	strb.w	r6, [sp, #30]
 800cf64:	b325      	cbz	r5, 800cfb0 <recv_custom_msg+0x64>
 800cf66:	f44f 7900 	mov.w	r9, #512	; 0x200
 800cf6a:	f200 2802 	addw	r8, r0, #514	; 0x202
 800cf6e:	f10d 071f 	add.w	r7, sp, #31
 800cf72:	ae05      	add	r6, sp, #20
 800cf74:	f10d 051e 	add.w	r5, sp, #30
 800cf78:	e002      	b.n	800cf80 <recv_custom_msg+0x34>
 800cf7a:	9b05      	ldr	r3, [sp, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dd0f      	ble.n	800cfa0 <recv_custom_msg+0x54>
 800cf80:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cf84:	e9cd 9500 	strd	r9, r5, [sp]
 800cf88:	4623      	mov	r3, r4
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800cf92:	f001 fb3b 	bl	800e60c <uxr_read_framed_msg>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0ef      	beq.n	800cf7a <recv_custom_msg+0x2e>
 800cf9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cf9e:	b1b3      	cbz	r3, 800cfce <recv_custom_msg+0x82>
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	; (800cfe0 <recv_custom_msg+0x94>)
 800cfa4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800cfa8:	701a      	strb	r2, [r3, #0]
 800cfaa:	b009      	add	sp, #36	; 0x24
 800cfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb0:	f10d 021f 	add.w	r2, sp, #31
 800cfb4:	9200      	str	r2, [sp, #0]
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfbc:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800cfc0:	47a8      	blx	r5
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d0ec      	beq.n	800cfa0 <recv_custom_msg+0x54>
 800cfc6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1e8      	bne.n	800cfa0 <recv_custom_msg+0x54>
 800cfce:	f8cb 0000 	str.w	r0, [fp]
 800cfd2:	2001      	movs	r0, #1
 800cfd4:	f8ca 4000 	str.w	r4, [sl]
 800cfd8:	b009      	add	sp, #36	; 0x24
 800cfda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfde:	bf00      	nop
 800cfe0:	2000656c 	.word	0x2000656c

0800cfe4 <send_custom_msg>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800cfea:	4616      	mov	r6, r2
 800cfec:	b086      	sub	sp, #24
 800cfee:	b975      	cbnz	r5, 800d00e <send_custom_msg+0x2a>
 800cff0:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800cff4:	f10d 0317 	add.w	r3, sp, #23
 800cff8:	47a0      	blx	r4
 800cffa:	b108      	cbz	r0, 800d000 <send_custom_msg+0x1c>
 800cffc:	42b0      	cmp	r0, r6
 800cffe:	d015      	beq.n	800d02c <send_custom_msg+0x48>
 800d000:	2000      	movs	r0, #0
 800d002:	4b0c      	ldr	r3, [pc, #48]	; (800d034 <send_custom_msg+0x50>)
 800d004:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d008:	701a      	strb	r2, [r3, #0]
 800d00a:	b006      	add	sp, #24
 800d00c:	bd70      	pop	{r4, r5, r6, pc}
 800d00e:	460b      	mov	r3, r1
 800d010:	2100      	movs	r1, #0
 800d012:	e9cd 6100 	strd	r6, r1, [sp]
 800d016:	f10d 0217 	add.w	r2, sp, #23
 800d01a:	9202      	str	r2, [sp, #8]
 800d01c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800d020:	4602      	mov	r2, r0
 800d022:	f200 2002 	addw	r0, r0, #514	; 0x202
 800d026:	f001 f8ff 	bl	800e228 <uxr_write_framed_msg>
 800d02a:	e7e6      	b.n	800cffa <send_custom_msg+0x16>
 800d02c:	2001      	movs	r0, #1
 800d02e:	b006      	add	sp, #24
 800d030:	bd70      	pop	{r4, r5, r6, pc}
 800d032:	bf00      	nop
 800d034:	2000656c 	.word	0x2000656c

0800d038 <uxr_set_custom_transport_callbacks>:
 800d038:	b430      	push	{r4, r5}
 800d03a:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800d03e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800d042:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800d046:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 800d04a:	bc30      	pop	{r4, r5}
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop

0800d050 <uxr_init_custom_transport>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800d056:	b303      	cbz	r3, 800d09a <uxr_init_custom_transport+0x4a>
 800d058:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800d05c:	4604      	mov	r4, r0
 800d05e:	b1e2      	cbz	r2, 800d09a <uxr_init_custom_transport+0x4a>
 800d060:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800d064:	b1ca      	cbz	r2, 800d09a <uxr_init_custom_transport+0x4a>
 800d066:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800d06a:	b1b2      	cbz	r2, 800d09a <uxr_init_custom_transport+0x4a>
 800d06c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800d070:	4798      	blx	r3
 800d072:	4605      	mov	r5, r0
 800d074:	b188      	cbz	r0, 800d09a <uxr_init_custom_transport+0x4a>
 800d076:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800d07a:	b98b      	cbnz	r3, 800d0a0 <uxr_init_custom_transport+0x50>
 800d07c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d080:	490a      	ldr	r1, [pc, #40]	; (800d0ac <uxr_init_custom_transport+0x5c>)
 800d082:	4a0b      	ldr	r2, [pc, #44]	; (800d0b0 <uxr_init_custom_transport+0x60>)
 800d084:	4b0b      	ldr	r3, [pc, #44]	; (800d0b4 <uxr_init_custom_transport+0x64>)
 800d086:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
 800d08a:	e9c4 129f 	strd	r1, r2, [r4, #636]	; 0x27c
 800d08e:	4628      	mov	r0, r5
 800d090:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 800d094:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 800d098:	bd38      	pop	{r3, r4, r5, pc}
 800d09a:	2500      	movs	r5, #0
 800d09c:	4628      	mov	r0, r5
 800d09e:	bd38      	pop	{r3, r4, r5, pc}
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	f204 2002 	addw	r0, r4, #514	; 0x202
 800d0a6:	f001 f8b9 	bl	800e21c <uxr_init_framing_io>
 800d0aa:	e7e7      	b.n	800d07c <uxr_init_custom_transport+0x2c>
 800d0ac:	0800cfe5 	.word	0x0800cfe5
 800d0b0:	0800cf4d 	.word	0x0800cf4d
 800d0b4:	0800cf41 	.word	0x0800cf41

0800d0b8 <uxr_close_custom_transport>:
 800d0b8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800d0bc:	4718      	bx	r3
 800d0be:	bf00      	nop

0800d0c0 <uxr_object_id>:
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	f88d 1006 	strb.w	r1, [sp, #6]
 800d0c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d0cc:	f360 030f 	bfi	r3, r0, #0, #16
 800d0d0:	f362 431f 	bfi	r3, r2, #16, #16
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	b002      	add	sp, #8
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop

0800d0dc <uxr_object_id_from_raw>:
 800d0dc:	4602      	mov	r2, r0
 800d0de:	2000      	movs	r0, #0
 800d0e0:	7853      	ldrb	r3, [r2, #1]
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	7812      	ldrb	r2, [r2, #0]
 800d0e6:	f003 010f 	and.w	r1, r3, #15
 800d0ea:	f88d 1006 	strb.w	r1, [sp, #6]
 800d0ee:	091b      	lsrs	r3, r3, #4
 800d0f0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800d0f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d0f8:	f363 000f 	bfi	r0, r3, #0, #16
 800d0fc:	f362 401f 	bfi	r0, r2, #16, #16
 800d100:	b002      	add	sp, #8
 800d102:	4770      	bx	lr

0800d104 <uxr_object_id_to_raw>:
 800d104:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d108:	b082      	sub	sp, #8
 800d10a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800d10e:	f3c0 100b 	ubfx	r0, r0, #4, #12
 800d112:	7008      	strb	r0, [r1, #0]
 800d114:	704b      	strb	r3, [r1, #1]
 800d116:	b002      	add	sp, #8
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop

0800d11c <uxr_buffer_request_data>:
 800d11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d11e:	b095      	sub	sp, #84	; 0x54
 800d120:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d122:	2600      	movs	r6, #0
 800d124:	2d00      	cmp	r5, #0
 800d126:	bf14      	ite	ne
 800d128:	2701      	movne	r7, #1
 800d12a:	2700      	moveq	r7, #0
 800d12c:	4604      	mov	r4, r0
 800d12e:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	f88d 301c 	strb.w	r3, [sp, #28]
 800d138:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800d13c:	f88d 601d 	strb.w	r6, [sp, #29]
 800d140:	f88d 601e 	strb.w	r6, [sp, #30]
 800d144:	d021      	beq.n	800d18a <uxr_buffer_request_data+0x6e>
 800d146:	686a      	ldr	r2, [r5, #4]
 800d148:	682b      	ldr	r3, [r5, #0]
 800d14a:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800d14e:	2210      	movs	r2, #16
 800d150:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800d154:	2308      	movs	r3, #8
 800d156:	2100      	movs	r1, #0
 800d158:	4620      	mov	r0, r4
 800d15a:	e9cd 3100 	strd	r3, r1, [sp]
 800d15e:	9905      	ldr	r1, [sp, #20]
 800d160:	ab0c      	add	r3, sp, #48	; 0x30
 800d162:	f000 fef9 	bl	800df58 <uxr_prepare_stream_to_write_submessage>
 800d166:	b918      	cbnz	r0, 800d170 <uxr_buffer_request_data+0x54>
 800d168:	4604      	mov	r4, r0
 800d16a:	4620      	mov	r0, r4
 800d16c:	b015      	add	sp, #84	; 0x54
 800d16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d170:	9904      	ldr	r1, [sp, #16]
 800d172:	aa06      	add	r2, sp, #24
 800d174:	4620      	mov	r0, r4
 800d176:	f001 f821 	bl	800e1bc <uxr_init_base_object_request>
 800d17a:	4604      	mov	r4, r0
 800d17c:	a906      	add	r1, sp, #24
 800d17e:	a80c      	add	r0, sp, #48	; 0x30
 800d180:	f002 fdca 	bl	800fd18 <uxr_serialize_READ_DATA_Payload>
 800d184:	4620      	mov	r0, r4
 800d186:	b015      	add	sp, #84	; 0x54
 800d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d18a:	2208      	movs	r2, #8
 800d18c:	e7e2      	b.n	800d154 <uxr_buffer_request_data+0x38>
 800d18e:	bf00      	nop

0800d190 <uxr_buffer_cancel_data>:
 800d190:	b530      	push	{r4, r5, lr}
 800d192:	2308      	movs	r3, #8
 800d194:	2400      	movs	r4, #0
 800d196:	2501      	movs	r5, #1
 800d198:	b095      	sub	sp, #84	; 0x54
 800d19a:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	9205      	str	r2, [sp, #20]
 800d1a2:	ab0c      	add	r3, sp, #48	; 0x30
 800d1a4:	2210      	movs	r2, #16
 800d1a6:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d1aa:	f88d 401e 	strb.w	r4, [sp, #30]
 800d1ae:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800d1b2:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800d1b6:	9103      	str	r1, [sp, #12]
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800d1be:	f000 fecb 	bl	800df58 <uxr_prepare_stream_to_write_submessage>
 800d1c2:	b918      	cbnz	r0, 800d1cc <uxr_buffer_cancel_data+0x3c>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	b015      	add	sp, #84	; 0x54
 800d1ca:	bd30      	pop	{r4, r5, pc}
 800d1cc:	9905      	ldr	r1, [sp, #20]
 800d1ce:	aa06      	add	r2, sp, #24
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fff3 	bl	800e1bc <uxr_init_base_object_request>
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	a906      	add	r1, sp, #24
 800d1da:	a80c      	add	r0, sp, #48	; 0x30
 800d1dc:	f002 fd9c 	bl	800fd18 <uxr_serialize_READ_DATA_Payload>
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	b015      	add	sp, #84	; 0x54
 800d1e4:	bd30      	pop	{r4, r5, pc}
 800d1e6:	bf00      	nop

0800d1e8 <read_submessage_format>:
 800d1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1ec:	b095      	sub	sp, #84	; 0x54
 800d1ee:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800d1f2:	b113      	cbz	r3, 800d1fa <read_submessage_format+0x12>
 800d1f4:	b015      	add	sp, #84	; 0x54
 800d1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	4606      	mov	r6, r0
 800d1fe:	4690      	mov	r8, r2
 800d200:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800d204:	a80c      	add	r0, sp, #48	; 0x30
 800d206:	1a52      	subs	r2, r2, r1
 800d208:	461d      	mov	r5, r3
 800d20a:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 800d20e:	e9cd 7304 	strd	r7, r3, [sp, #16]
 800d212:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 800d216:	f7ff fc0b 	bl	800ca30 <ucdr_init_buffer>
 800d21a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d21e:	a80c      	add	r0, sp, #48	; 0x30
 800d220:	f7ff fbdc 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 800d224:	69e3      	ldr	r3, [r4, #28]
 800d226:	b17b      	cbz	r3, 800d248 <read_submessage_format+0x60>
 800d228:	2f07      	cmp	r7, #7
 800d22a:	751d      	strb	r5, [r3, #20]
 800d22c:	d03a      	beq.n	800d2a4 <read_submessage_format+0xbc>
 800d22e:	2f08      	cmp	r7, #8
 800d230:	d029      	beq.n	800d286 <read_submessage_format+0x9e>
 800d232:	2f06      	cmp	r7, #6
 800d234:	d00e      	beq.n	800d254 <read_submessage_format+0x6c>
 800d236:	2201      	movs	r2, #1
 800d238:	751a      	strb	r2, [r3, #20]
 800d23a:	4641      	mov	r1, r8
 800d23c:	4620      	mov	r0, r4
 800d23e:	f7ff fc49 	bl	800cad4 <ucdr_advance_buffer>
 800d242:	b015      	add	sp, #84	; 0x54
 800d244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d248:	2f07      	cmp	r7, #7
 800d24a:	d02b      	beq.n	800d2a4 <read_submessage_format+0xbc>
 800d24c:	2f08      	cmp	r7, #8
 800d24e:	d01a      	beq.n	800d286 <read_submessage_format+0x9e>
 800d250:	2f06      	cmp	r7, #6
 800d252:	d1f2      	bne.n	800d23a <read_submessage_format+0x52>
 800d254:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 800d258:	b195      	cbz	r5, 800d280 <read_submessage_format+0x98>
 800d25a:	2206      	movs	r2, #6
 800d25c:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800d260:	f88d 2016 	strb.w	r2, [sp, #22]
 800d264:	aa0c      	add	r2, sp, #48	; 0x30
 800d266:	9200      	str	r2, [sp, #0]
 800d268:	9302      	str	r3, [sp, #8]
 800d26a:	464a      	mov	r2, r9
 800d26c:	9b04      	ldr	r3, [sp, #16]
 800d26e:	4630      	mov	r0, r6
 800d270:	9905      	ldr	r1, [sp, #20]
 800d272:	f8cd 8004 	str.w	r8, [sp, #4]
 800d276:	47a8      	blx	r5
 800d278:	2201      	movs	r2, #1
 800d27a:	69e3      	ldr	r3, [r4, #28]
 800d27c:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 800d280:	2b00      	cmp	r3, #0
 800d282:	d1d8      	bne.n	800d236 <read_submessage_format+0x4e>
 800d284:	e7d9      	b.n	800d23a <read_submessage_format+0x52>
 800d286:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	d0f8      	beq.n	800d280 <read_submessage_format+0x98>
 800d28e:	a906      	add	r1, sp, #24
 800d290:	a80c      	add	r0, sp, #48	; 0x30
 800d292:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d294:	f002 fe14 	bl	800fec0 <uxr_deserialize_SampleIdentity>
 800d298:	2800      	cmp	r0, #0
 800d29a:	d13c      	bne.n	800d316 <read_submessage_format+0x12e>
 800d29c:	69e3      	ldr	r3, [r4, #28]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1c9      	bne.n	800d236 <read_submessage_format+0x4e>
 800d2a2:	e7ca      	b.n	800d23a <read_submessage_format+0x52>
 800d2a4:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 800d2a8:	b132      	cbz	r2, 800d2b8 <read_submessage_format+0xd0>
 800d2aa:	a906      	add	r1, sp, #24
 800d2ac:	a80c      	add	r0, sp, #48	; 0x30
 800d2ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d2b0:	f002 fbd0 	bl	800fa54 <uxr_deserialize_BaseObjectRequest>
 800d2b4:	b930      	cbnz	r0, 800d2c4 <read_submessage_format+0xdc>
 800d2b6:	69e3      	ldr	r3, [r4, #28]
 800d2b8:	68a2      	ldr	r2, [r4, #8]
 800d2ba:	4442      	add	r2, r8
 800d2bc:	60a2      	str	r2, [r4, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1b9      	bne.n	800d236 <read_submessage_format+0x4e>
 800d2c2:	e7ba      	b.n	800d23a <read_submessage_format+0x52>
 800d2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2c6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800d2ca:	a80c      	add	r0, sp, #48	; 0x30
 800d2cc:	1a52      	subs	r2, r2, r1
 800d2ce:	1aed      	subs	r5, r5, r3
 800d2d0:	f7ff fbae 	bl	800ca30 <ucdr_init_buffer>
 800d2d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d2d8:	a80c      	add	r0, sp, #48	; 0x30
 800d2da:	f7ff fb7f 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 800d2de:	2107      	movs	r1, #7
 800d2e0:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800d2e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d2e8:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 800d2ec:	4445      	add	r5, r8
 800d2ee:	b2ad      	uxth	r5, r5
 800d2f0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d2f4:	aa0c      	add	r2, sp, #48	; 0x30
 800d2f6:	9200      	str	r2, [sp, #0]
 800d2f8:	9002      	str	r0, [sp, #8]
 800d2fa:	f88d 1016 	strb.w	r1, [sp, #22]
 800d2fe:	9501      	str	r5, [sp, #4]
 800d300:	b29b      	uxth	r3, r3
 800d302:	464a      	mov	r2, r9
 800d304:	4630      	mov	r0, r6
 800d306:	9905      	ldr	r1, [sp, #20]
 800d308:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 800d30c:	47a8      	blx	r5
 800d30e:	2301      	movs	r3, #1
 800d310:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800d314:	e7cf      	b.n	800d2b6 <read_submessage_format+0xce>
 800d316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d318:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800d31c:	a80c      	add	r0, sp, #48	; 0x30
 800d31e:	1a52      	subs	r2, r2, r1
 800d320:	1aed      	subs	r5, r5, r3
 800d322:	f7ff fb85 	bl	800ca30 <ucdr_init_buffer>
 800d326:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800d32a:	a80c      	add	r0, sp, #48	; 0x30
 800d32c:	f7ff fb56 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 800d330:	2308      	movs	r3, #8
 800d332:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 800d336:	4445      	add	r5, r8
 800d338:	f88d 3016 	strb.w	r3, [sp, #22]
 800d33c:	b2ad      	uxth	r5, r5
 800d33e:	ab0c      	add	r3, sp, #48	; 0x30
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	9002      	str	r0, [sp, #8]
 800d344:	9501      	str	r5, [sp, #4]
 800d346:	ab06      	add	r3, sp, #24
 800d348:	464a      	mov	r2, r9
 800d34a:	4630      	mov	r0, r6
 800d34c:	9905      	ldr	r1, [sp, #20]
 800d34e:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 800d352:	47a8      	blx	r5
 800d354:	2301      	movs	r3, #1
 800d356:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 800d35a:	e79f      	b.n	800d29c <read_submessage_format+0xb4>

0800d35c <on_get_fragmentation_info>:
 800d35c:	b500      	push	{lr}
 800d35e:	b08b      	sub	sp, #44	; 0x2c
 800d360:	4601      	mov	r1, r0
 800d362:	2204      	movs	r2, #4
 800d364:	a802      	add	r0, sp, #8
 800d366:	f7ff fb63 	bl	800ca30 <ucdr_init_buffer>
 800d36a:	f10d 0305 	add.w	r3, sp, #5
 800d36e:	a802      	add	r0, sp, #8
 800d370:	f10d 0206 	add.w	r2, sp, #6
 800d374:	a901      	add	r1, sp, #4
 800d376:	f001 fd1d 	bl	800edb4 <uxr_read_submessage_header>
 800d37a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d37e:	2b0d      	cmp	r3, #13
 800d380:	d003      	beq.n	800d38a <on_get_fragmentation_info+0x2e>
 800d382:	2000      	movs	r0, #0
 800d384:	b00b      	add	sp, #44	; 0x2c
 800d386:	f85d fb04 	ldr.w	pc, [sp], #4
 800d38a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d38e:	f013 0f02 	tst.w	r3, #2
 800d392:	bf14      	ite	ne
 800d394:	2002      	movne	r0, #2
 800d396:	2001      	moveq	r0, #1
 800d398:	b00b      	add	sp, #44	; 0x2c
 800d39a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d39e:	bf00      	nop

0800d3a0 <write_submessage_acknack.isra.0>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4614      	mov	r4, r2
 800d3a4:	b092      	sub	sp, #72	; 0x48
 800d3a6:	4605      	mov	r5, r0
 800d3a8:	460e      	mov	r6, r1
 800d3aa:	f000 feff 	bl	800e1ac <uxr_session_header_offset>
 800d3ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d3b2:	9000      	str	r0, [sp, #0]
 800d3b4:	a905      	add	r1, sp, #20
 800d3b6:	a80a      	add	r0, sp, #40	; 0x28
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	2211      	movs	r2, #17
 800d3bc:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800d3c0:	f7ff fb24 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800d3c4:	3450      	adds	r4, #80	; 0x50
 800d3c6:	2205      	movs	r2, #5
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	210a      	movs	r1, #10
 800d3cc:	a80a      	add	r0, sp, #40	; 0x28
 800d3ce:	f001 fcd7 	bl	800ed80 <uxr_buffer_submessage_header>
 800d3d2:	a903      	add	r1, sp, #12
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f005 fff1 	bl	80133bc <uxr_compute_acknack>
 800d3da:	a903      	add	r1, sp, #12
 800d3dc:	ba43      	rev16	r3, r0
 800d3de:	a80a      	add	r0, sp, #40	; 0x28
 800d3e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d3e4:	f88d 6010 	strb.w	r6, [sp, #16]
 800d3e8:	f002 fcba 	bl	800fd60 <uxr_serialize_ACKNACK_Payload>
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f000 fe86 	bl	800e104 <uxr_stamp_session_header>
 800d3f8:	a80a      	add	r0, sp, #40	; 0x28
 800d3fa:	f7ff fb47 	bl	800ca8c <ucdr_buffer_length>
 800d3fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d400:	4602      	mov	r2, r0
 800d402:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d406:	a905      	add	r1, sp, #20
 800d408:	47a0      	blx	r4
 800d40a:	b012      	add	sp, #72	; 0x48
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	bf00      	nop

0800d410 <uxr_acknack_pong.part.0>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	2400      	movs	r4, #0
 800d414:	4605      	mov	r5, r0
 800d416:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 800d41a:	f10d 0306 	add.w	r3, sp, #6
 800d41e:	a901      	add	r1, sp, #4
 800d420:	f10d 0205 	add.w	r2, sp, #5
 800d424:	f88d 4004 	strb.w	r4, [sp, #4]
 800d428:	f88d 4005 	strb.w	r4, [sp, #5]
 800d42c:	f8ad 4006 	strh.w	r4, [sp, #6]
 800d430:	f001 fef6 	bl	800f220 <uxr_deserialize_submessage_header>
 800d434:	4628      	mov	r0, r5
 800d436:	f7ff fb2d 	bl	800ca94 <ucdr_buffer_remaining>
 800d43a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d43e:	4298      	cmp	r0, r3
 800d440:	d31d      	bcc.n	800d47e <uxr_acknack_pong.part.0+0x6e>
 800d442:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d446:	2b06      	cmp	r3, #6
 800d448:	d003      	beq.n	800d452 <uxr_acknack_pong.part.0+0x42>
 800d44a:	4620      	mov	r0, r4
 800d44c:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 800d450:	bd70      	pop	{r4, r5, r6, pc}
 800d452:	a902      	add	r1, sp, #8
 800d454:	4628      	mov	r0, r5
 800d456:	f002 fb0d 	bl	800fa74 <uxr_deserialize_BaseObjectReply>
 800d45a:	a904      	add	r1, sp, #16
 800d45c:	4604      	mov	r4, r0
 800d45e:	4628      	mov	r0, r5
 800d460:	f7fe fb20 	bl	800baa4 <ucdr_deserialize_bool>
 800d464:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d468:	4004      	ands	r4, r0
 800d46a:	b2e4      	uxtb	r4, r4
 800d46c:	bb23      	cbnz	r3, 800d4b8 <uxr_acknack_pong.part.0+0xa8>
 800d46e:	4628      	mov	r0, r5
 800d470:	a989      	add	r1, sp, #548	; 0x224
 800d472:	f7fe fb17 	bl	800baa4 <ucdr_deserialize_bool>
 800d476:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 800d47a:	4606      	mov	r6, r0
 800d47c:	b91b      	cbnz	r3, 800d486 <uxr_acknack_pong.part.0+0x76>
 800d47e:	2000      	movs	r0, #0
 800d480:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 800d484:	bd70      	pop	{r4, r5, r6, pc}
 800d486:	4628      	mov	r0, r5
 800d488:	a98a      	add	r1, sp, #552	; 0x228
 800d48a:	f7fe fb39 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800d48e:	4226      	tst	r6, r4
 800d490:	d0f5      	beq.n	800d47e <uxr_acknack_pong.part.0+0x6e>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0f3      	beq.n	800d47e <uxr_acknack_pong.part.0+0x6e>
 800d496:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 800d49a:	2b0d      	cmp	r3, #13
 800d49c:	d1ef      	bne.n	800d47e <uxr_acknack_pong.part.0+0x6e>
 800d49e:	4628      	mov	r0, r5
 800d4a0:	a98c      	add	r1, sp, #560	; 0x230
 800d4a2:	f7ff f8d7 	bl	800c654 <ucdr_deserialize_int16_t>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	d0ea      	beq.n	800d480 <uxr_acknack_pong.part.0+0x70>
 800d4aa:	f9bd 4230 	ldrsh.w	r4, [sp, #560]	; 0x230
 800d4ae:	2c00      	cmp	r4, #0
 800d4b0:	bfd4      	ite	le
 800d4b2:	2000      	movle	r0, #0
 800d4b4:	2001      	movgt	r0, #1
 800d4b6:	e7e3      	b.n	800d480 <uxr_acknack_pong.part.0+0x70>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	a905      	add	r1, sp, #20
 800d4bc:	f002 fa1c 	bl	800f8f8 <uxr_deserialize_ObjectVariant>
 800d4c0:	4004      	ands	r4, r0
 800d4c2:	e7d4      	b.n	800d46e <uxr_acknack_pong.part.0+0x5e>

0800d4c4 <read_submessage_list>:
 800d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	460d      	mov	r5, r1
 800d4cc:	b099      	sub	sp, #100	; 0x64
 800d4ce:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 800d7c4 <read_submessage_list+0x300>
 800d4d2:	920b      	str	r2, [sp, #44]	; 0x2c
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800d4da:	aa0e      	add	r2, sp, #56	; 0x38
 800d4dc:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800d4e0:	f001 fc68 	bl	800edb4 <uxr_read_submessage_header>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	f000 810d 	beq.w	800d704 <read_submessage_list+0x240>
 800d4ea:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800d4ee:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800d4f2:	3b04      	subs	r3, #4
 800d4f4:	2b0b      	cmp	r3, #11
 800d4f6:	d8ed      	bhi.n	800d4d4 <read_submessage_list+0x10>
 800d4f8:	a101      	add	r1, pc, #4	; (adr r1, 800d500 <read_submessage_list+0x3c>)
 800d4fa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4fe:	bf00      	nop
 800d500:	0800d6f5 	.word	0x0800d6f5
 800d504:	0800d6e9 	.word	0x0800d6e9
 800d508:	0800d4d5 	.word	0x0800d4d5
 800d50c:	0800d4d5 	.word	0x0800d4d5
 800d510:	0800d4d5 	.word	0x0800d4d5
 800d514:	0800d649 	.word	0x0800d649
 800d518:	0800d5d9 	.word	0x0800d5d9
 800d51c:	0800d597 	.word	0x0800d597
 800d520:	0800d4d5 	.word	0x0800d4d5
 800d524:	0800d4d5 	.word	0x0800d4d5
 800d528:	0800d4d5 	.word	0x0800d4d5
 800d52c:	0800d531 	.word	0x0800d531
 800d530:	4628      	mov	r0, r5
 800d532:	a912      	add	r1, sp, #72	; 0x48
 800d534:	f002 fc72 	bl	800fe1c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d538:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800d53c:	2e00      	cmp	r6, #0
 800d53e:	f000 8112 	beq.w	800d766 <read_submessage_list+0x2a2>
 800d542:	f001 fc7f 	bl	800ee44 <uxr_nanos>
 800d546:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800d548:	f04f 0900 	mov.w	r9, #0
 800d54c:	46b8      	mov	r8, r7
 800d54e:	4602      	mov	r2, r0
 800d550:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d552:	f04f 0c00 	mov.w	ip, #0
 800d556:	4683      	mov	fp, r0
 800d558:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800d55a:	460b      	mov	r3, r1
 800d55c:	fbca 8907 	smlal	r8, r9, sl, r7
 800d560:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800d564:	46d8      	mov	r8, fp
 800d566:	46e1      	mov	r9, ip
 800d568:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d56a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800d56c:	4608      	mov	r0, r1
 800d56e:	2100      	movs	r1, #0
 800d570:	fbca 8907 	smlal	r8, r9, sl, r7
 800d574:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d576:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d57a:	fbca 0107 	smlal	r0, r1, sl, r7
 800d57e:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 800d582:	e9cd 0100 	strd	r0, r1, [sp]
 800d586:	9706      	str	r7, [sp, #24]
 800d588:	4620      	mov	r0, r4
 800d58a:	47b0      	blx	r6
 800d58c:	f04f 0301 	mov.w	r3, #1
 800d590:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800d594:	e79e      	b.n	800d4d4 <read_submessage_list+0x10>
 800d596:	a912      	add	r1, sp, #72	; 0x48
 800d598:	4628      	mov	r0, r5
 800d59a:	f002 fc1f 	bl	800fddc <uxr_deserialize_HEARTBEAT_Payload>
 800d59e:	2100      	movs	r1, #0
 800d5a0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800d5a4:	f001 fadc 	bl	800eb60 <uxr_stream_id_from_raw>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	f104 0008 	add.w	r0, r4, #8
 800d5b4:	9311      	str	r3, [sp, #68]	; 0x44
 800d5b6:	f001 fbc1 	bl	800ed3c <uxr_get_input_reliable_stream>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	d08a      	beq.n	800d4d4 <read_submessage_list+0x10>
 800d5be:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800d5c2:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800d5c6:	f005 feed 	bl	80133a4 <uxr_process_heartbeat>
 800d5ca:	4632      	mov	r2, r6
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800d5d2:	f7ff fee5 	bl	800d3a0 <write_submessage_acknack.isra.0>
 800d5d6:	e77d      	b.n	800d4d4 <read_submessage_list+0x10>
 800d5d8:	a912      	add	r1, sp, #72	; 0x48
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f002 fbd6 	bl	800fd8c <uxr_deserialize_ACKNACK_Payload>
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800d5e6:	f001 fabb 	bl	800eb60 <uxr_stream_id_from_raw>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f104 0008 	add.w	r0, r4, #8
 800d5f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d5f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5f6:	f001 fb8b 	bl	800ed10 <uxr_get_output_reliable_stream>
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f43f af69 	beq.w	800d4d4 <read_submessage_list+0x10>
 800d602:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800d606:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800d60a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800d60e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d612:	b289      	uxth	r1, r1
 800d614:	f006 fa06 	bl	8013a24 <uxr_process_acknack>
 800d618:	4630      	mov	r0, r6
 800d61a:	f006 f9c9 	bl	80139b0 <uxr_begin_output_nack_buffer_it>
 800d61e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800d622:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800d626:	e005      	b.n	800d634 <read_submessage_list+0x170>
 800d628:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d62a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d62c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d62e:	e9d3 0700 	ldrd	r0, r7, [r3]
 800d632:	47b8      	blx	r7
 800d634:	4641      	mov	r1, r8
 800d636:	4630      	mov	r0, r6
 800d638:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800d63c:	aa11      	add	r2, sp, #68	; 0x44
 800d63e:	f006 f9b9 	bl	80139b4 <uxr_next_reliable_nack_buffer_to_send>
 800d642:	2800      	cmp	r0, #0
 800d644:	d1f0      	bne.n	800d628 <read_submessage_list+0x164>
 800d646:	e745      	b.n	800d4d4 <read_submessage_list+0x10>
 800d648:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 800d64c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 800d650:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800d654:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800d658:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 800d65c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 800d660:	4641      	mov	r1, r8
 800d662:	4628      	mov	r0, r5
 800d664:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 800d668:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800d66c:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800d670:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800d674:	f002 f9ee 	bl	800fa54 <uxr_deserialize_BaseObjectRequest>
 800d678:	4640      	mov	r0, r8
 800d67a:	a911      	add	r1, sp, #68	; 0x44
 800d67c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800d680:	f000 fdba 	bl	800e1f8 <uxr_parse_base_object_request>
 800d684:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d686:	f8d4 9080 	ldr.w	r9, [r4, #128]	; 0x80
 800d68a:	3e04      	subs	r6, #4
 800d68c:	f8bd 803a 	ldrh.w	r8, [sp, #58]	; 0x3a
 800d690:	f007 070e 	and.w	r7, r7, #14
 800d694:	b2b6      	uxth	r6, r6
 800d696:	9112      	str	r1, [sp, #72]	; 0x48
 800d698:	f1b9 0f00 	cmp.w	r9, #0
 800d69c:	d006      	beq.n	800d6ac <read_submessage_list+0x1e8>
 800d69e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d6a2:	4642      	mov	r2, r8
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	47c8      	blx	r9
 800d6ac:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800d6ae:	b168      	cbz	r0, 800d6cc <read_submessage_list+0x208>
 800d6b0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	3902      	subs	r1, #2
 800d6b6:	e002      	b.n	800d6be <read_submessage_list+0x1fa>
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	4283      	cmp	r3, r0
 800d6bc:	d006      	beq.n	800d6cc <read_submessage_list+0x208>
 800d6be:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800d6c2:	4542      	cmp	r2, r8
 800d6c4:	d1f8      	bne.n	800d6b8 <read_submessage_list+0x1f4>
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800d6ca:	54d1      	strb	r1, [r2, r3]
 800d6cc:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 800d6d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d6d2:	463b      	mov	r3, r7
 800d6d4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800d6d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6da:	4632      	mov	r2, r6
 800d6dc:	9100      	str	r1, [sp, #0]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	f7ff fd81 	bl	800d1e8 <read_submessage_format>
 800d6e6:	e6f5      	b.n	800d4d4 <read_submessage_list+0x10>
 800d6e8:	b97a      	cbnz	r2, 800d70a <read_submessage_list+0x246>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4620      	mov	r0, r4
 800d6ee:	f000 fcd7 	bl	800e0a0 <uxr_read_delete_session_status>
 800d6f2:	e6ef      	b.n	800d4d4 <read_submessage_list+0x10>
 800d6f4:	2a00      	cmp	r2, #0
 800d6f6:	f47f aeed 	bne.w	800d4d4 <read_submessage_list+0x10>
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f000 fcc3 	bl	800e088 <uxr_read_create_session_status>
 800d702:	e6e7      	b.n	800d4d4 <read_submessage_list+0x10>
 800d704:	b019      	add	sp, #100	; 0x64
 800d706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70a:	a912      	add	r1, sp, #72	; 0x48
 800d70c:	4628      	mov	r0, r5
 800d70e:	f002 fae5 	bl	800fcdc <uxr_deserialize_STATUS_Payload>
 800d712:	a910      	add	r1, sp, #64	; 0x40
 800d714:	aa0f      	add	r2, sp, #60	; 0x3c
 800d716:	a812      	add	r0, sp, #72	; 0x48
 800d718:	f000 fd6e 	bl	800e1f8 <uxr_parse_base_object_request>
 800d71c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d71e:	f8d4 8080 	ldr.w	r8, [r4, #128]	; 0x80
 800d722:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800d726:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800d72a:	9111      	str	r1, [sp, #68]	; 0x44
 800d72c:	f1b8 0f00 	cmp.w	r8, #0
 800d730:	d006      	beq.n	800d740 <read_submessage_list+0x27c>
 800d732:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d736:	4632      	mov	r2, r6
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	4620      	mov	r0, r4
 800d73c:	463b      	mov	r3, r7
 800d73e:	47c0      	blx	r8
 800d740:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800d742:	2a00      	cmp	r2, #0
 800d744:	f43f aec6 	beq.w	800d4d4 <read_submessage_list+0x10>
 800d748:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d74a:	2100      	movs	r1, #0
 800d74c:	3802      	subs	r0, #2
 800d74e:	e003      	b.n	800d758 <read_submessage_list+0x294>
 800d750:	3101      	adds	r1, #1
 800d752:	4291      	cmp	r1, r2
 800d754:	f43f aebe 	beq.w	800d4d4 <read_submessage_list+0x10>
 800d758:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d75c:	42b3      	cmp	r3, r6
 800d75e:	d1f7      	bne.n	800d750 <read_submessage_list+0x28c>
 800d760:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d762:	545f      	strb	r7, [r3, r1]
 800d764:	e6b6      	b.n	800d4d4 <read_submessage_list+0x10>
 800d766:	f001 fb6d 	bl	800ee44 <uxr_nanos>
 800d76a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d76c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800d76e:	4693      	mov	fp, r2
 800d770:	f04f 0c00 	mov.w	ip, #0
 800d774:	46b8      	mov	r8, r7
 800d776:	f04f 0900 	mov.w	r9, #0
 800d77a:	2700      	movs	r7, #0
 800d77c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d77e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d780:	fbca bc03 	smlal	fp, ip, sl, r3
 800d784:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800d786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d788:	fbca 6702 	smlal	r6, r7, sl, r2
 800d78c:	fbca 8903 	smlal	r8, r9, sl, r3
 800d790:	eb1b 0000 	adds.w	r0, fp, r0
 800d794:	eb4c 0101 	adc.w	r1, ip, r1
 800d798:	eb18 0306 	adds.w	r3, r8, r6
 800d79c:	eb49 0207 	adc.w	r2, r9, r7
 800d7a0:	1ac3      	subs	r3, r0, r3
 800d7a2:	9308      	str	r3, [sp, #32]
 800d7a4:	eb61 0302 	sbc.w	r3, r1, r2
 800d7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d7aa:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d7ae:	0fd3      	lsrs	r3, r2, #31
 800d7b0:	18c9      	adds	r1, r1, r3
 800d7b2:	f142 0200 	adc.w	r2, r2, #0
 800d7b6:	084b      	lsrs	r3, r1, #1
 800d7b8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800d7bc:	1052      	asrs	r2, r2, #1
 800d7be:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800d7c2:	e6e3      	b.n	800d58c <read_submessage_list+0xc8>
 800d7c4:	3b9aca00 	.word	0x3b9aca00

0800d7c8 <listen_message>:
 800d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800d7ce:	b099      	sub	sp, #100	; 0x64
 800d7d0:	6894      	ldr	r4, [r2, #8]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	4605      	mov	r5, r0
 800d7d6:	a904      	add	r1, sp, #16
 800d7d8:	6810      	ldr	r0, [r2, #0]
 800d7da:	aa05      	add	r2, sp, #20
 800d7dc:	47a0      	blx	r4
 800d7de:	4604      	mov	r4, r0
 800d7e0:	b918      	cbnz	r0, 800d7ea <listen_message+0x22>
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	b019      	add	sp, #100	; 0x64
 800d7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ea:	2600      	movs	r6, #0
 800d7ec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800d7f0:	a808      	add	r0, sp, #32
 800d7f2:	f7ff f91d 	bl	800ca30 <ucdr_init_buffer>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	a908      	add	r1, sp, #32
 800d7fa:	f10d 030e 	add.w	r3, sp, #14
 800d7fe:	aa03      	add	r2, sp, #12
 800d800:	f88d 600c 	strb.w	r6, [sp, #12]
 800d804:	f000 fc92 	bl	800e12c <uxr_read_session_header>
 800d808:	b1e8      	cbz	r0, 800d846 <listen_message+0x7e>
 800d80a:	4631      	mov	r1, r6
 800d80c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800d810:	f001 f9a6 	bl	800eb60 <uxr_stream_id_from_raw>
 800d814:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d818:	2f01      	cmp	r7, #1
 800d81a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 800d81e:	9007      	str	r0, [sp, #28]
 800d820:	fa5f f880 	uxtb.w	r8, r0
 800d824:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d828:	d01b      	beq.n	800d862 <listen_message+0x9a>
 800d82a:	2f02      	cmp	r7, #2
 800d82c:	d031      	beq.n	800d892 <listen_message+0xca>
 800d82e:	2f00      	cmp	r7, #0
 800d830:	d1d7      	bne.n	800d7e2 <listen_message+0x1a>
 800d832:	4639      	mov	r1, r7
 800d834:	4638      	mov	r0, r7
 800d836:	f001 f993 	bl	800eb60 <uxr_stream_id_from_raw>
 800d83a:	a908      	add	r1, sp, #32
 800d83c:	4602      	mov	r2, r0
 800d83e:	4628      	mov	r0, r5
 800d840:	f7ff fe40 	bl	800d4c4 <read_submessage_list>
 800d844:	e7cd      	b.n	800d7e2 <listen_message+0x1a>
 800d846:	a808      	add	r0, sp, #32
 800d848:	f7ff f924 	bl	800ca94 <ucdr_buffer_remaining>
 800d84c:	2804      	cmp	r0, #4
 800d84e:	d9c8      	bls.n	800d7e2 <listen_message+0x1a>
 800d850:	a808      	add	r0, sp, #32
 800d852:	f7ff fddd 	bl	800d410 <uxr_acknack_pong.part.0>
 800d856:	2800      	cmp	r0, #0
 800d858:	d0c3      	beq.n	800d7e2 <listen_message+0x1a>
 800d85a:	2301      	movs	r3, #1
 800d85c:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 800d860:	e7bf      	b.n	800d7e2 <listen_message+0x1a>
 800d862:	4631      	mov	r1, r6
 800d864:	f105 0008 	add.w	r0, r5, #8
 800d868:	f001 fa5e 	bl	800ed28 <uxr_get_input_best_effort_stream>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d0b8      	beq.n	800d7e2 <listen_message+0x1a>
 800d870:	4651      	mov	r1, sl
 800d872:	f005 fc13 	bl	801309c <uxr_receive_best_effort_message>
 800d876:	2800      	cmp	r0, #0
 800d878:	d0b3      	beq.n	800d7e2 <listen_message+0x1a>
 800d87a:	f88d 801c 	strb.w	r8, [sp, #28]
 800d87e:	f88d 601d 	strb.w	r6, [sp, #29]
 800d882:	f88d 701e 	strb.w	r7, [sp, #30]
 800d886:	4628      	mov	r0, r5
 800d888:	9a07      	ldr	r2, [sp, #28]
 800d88a:	a908      	add	r1, sp, #32
 800d88c:	f7ff fe1a 	bl	800d4c4 <read_submessage_list>
 800d890:	e7a7      	b.n	800d7e2 <listen_message+0x1a>
 800d892:	4631      	mov	r1, r6
 800d894:	f105 0008 	add.w	r0, r5, #8
 800d898:	f001 fa50 	bl	800ed3c <uxr_get_input_reliable_stream>
 800d89c:	4681      	mov	r9, r0
 800d89e:	b328      	cbz	r0, 800d8ec <listen_message+0x124>
 800d8a0:	a808      	add	r0, sp, #32
 800d8a2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800d8a6:	f7ff f8f5 	bl	800ca94 <ucdr_buffer_remaining>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	f10d 000d 	add.w	r0, sp, #13
 800d8b0:	9000      	str	r0, [sp, #0]
 800d8b2:	465a      	mov	r2, fp
 800d8b4:	4651      	mov	r1, sl
 800d8b6:	4648      	mov	r0, r9
 800d8b8:	f005 fc74 	bl	80131a4 <uxr_receive_reliable_message>
 800d8bc:	b1b0      	cbz	r0, 800d8ec <listen_message+0x124>
 800d8be:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800d8c2:	b1cb      	cbz	r3, 800d8f8 <listen_message+0x130>
 800d8c4:	2702      	movs	r7, #2
 800d8c6:	e00a      	b.n	800d8de <listen_message+0x116>
 800d8c8:	f88d 801c 	strb.w	r8, [sp, #28]
 800d8cc:	f88d 601d 	strb.w	r6, [sp, #29]
 800d8d0:	f88d 701e 	strb.w	r7, [sp, #30]
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	9a07      	ldr	r2, [sp, #28]
 800d8d8:	a910      	add	r1, sp, #64	; 0x40
 800d8da:	f7ff fdf3 	bl	800d4c4 <read_submessage_list>
 800d8de:	2204      	movs	r2, #4
 800d8e0:	4648      	mov	r0, r9
 800d8e2:	a910      	add	r1, sp, #64	; 0x40
 800d8e4:	f005 fcde 	bl	80132a4 <uxr_next_input_reliable_buffer_available>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d1ed      	bne.n	800d8c8 <listen_message+0x100>
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	4641      	mov	r1, r8
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f7ff fd55 	bl	800d3a0 <write_submessage_acknack.isra.0>
 800d8f6:	e774      	b.n	800d7e2 <listen_message+0x1a>
 800d8f8:	f88d 801c 	strb.w	r8, [sp, #28]
 800d8fc:	f88d 601d 	strb.w	r6, [sp, #29]
 800d900:	f88d 701e 	strb.w	r7, [sp, #30]
 800d904:	4628      	mov	r0, r5
 800d906:	9a07      	ldr	r2, [sp, #28]
 800d908:	a908      	add	r1, sp, #32
 800d90a:	f7ff fddb 	bl	800d4c4 <read_submessage_list>
 800d90e:	e7d9      	b.n	800d8c4 <listen_message+0xfc>

0800d910 <listen_message_reliably>:
 800d910:	1e0b      	subs	r3, r1, #0
 800d912:	bfb8      	it	lt
 800d914:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91c:	4683      	mov	fp, r0
 800d91e:	b095      	sub	sp, #84	; 0x54
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	f001 fa73 	bl	800ee0c <uxr_millis>
 800d926:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 800d92a:	4688      	mov	r8, r1
 800d92c:	4607      	mov	r7, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 8093 	beq.w	800da5a <listen_message_reliably+0x14a>
 800d934:	2600      	movs	r6, #0
 800d936:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d93a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800d93e:	4630      	mov	r0, r6
 800d940:	e00f      	b.n	800d962 <listen_message_reliably+0x52>
 800d942:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d946:	454a      	cmp	r2, r9
 800d948:	eb73 010a 	sbcs.w	r1, r3, sl
 800d94c:	bfb8      	it	lt
 800d94e:	469a      	movlt	sl, r3
 800d950:	f106 0601 	add.w	r6, r6, #1
 800d954:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 800d958:	b2f0      	uxtb	r0, r6
 800d95a:	bfb8      	it	lt
 800d95c:	4691      	movlt	r9, r2
 800d95e:	4283      	cmp	r3, r0
 800d960:	d953      	bls.n	800da0a <listen_message_reliably+0xfa>
 800d962:	2201      	movs	r2, #1
 800d964:	2102      	movs	r1, #2
 800d966:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d96a:	f001 f8cf 	bl	800eb0c <uxr_stream_id>
 800d96e:	4601      	mov	r1, r0
 800d970:	00e4      	lsls	r4, r4, #3
 800d972:	f104 0520 	add.w	r5, r4, #32
 800d976:	445d      	add	r5, fp
 800d978:	4643      	mov	r3, r8
 800d97a:	463a      	mov	r2, r7
 800d97c:	4628      	mov	r0, r5
 800d97e:	9104      	str	r1, [sp, #16]
 800d980:	f005 ffea 	bl	8013958 <uxr_update_output_stream_heartbeat_timestamp>
 800d984:	eb0b 0304 	add.w	r3, fp, r4
 800d988:	2800      	cmp	r0, #0
 800d98a:	d0da      	beq.n	800d942 <listen_message_reliably+0x32>
 800d98c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d990:	4658      	mov	r0, fp
 800d992:	f89d 5011 	ldrb.w	r5, [sp, #17]
 800d996:	9302      	str	r3, [sp, #8]
 800d998:	f000 fc08 	bl	800e1ac <uxr_session_header_offset>
 800d99c:	3501      	adds	r5, #1
 800d99e:	2300      	movs	r3, #0
 800d9a0:	2211      	movs	r2, #17
 800d9a2:	9000      	str	r0, [sp, #0]
 800d9a4:	a907      	add	r1, sp, #28
 800d9a6:	a80c      	add	r0, sp, #48	; 0x30
 800d9a8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d9ac:	f7ff f82e 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800d9b0:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	2205      	movs	r2, #5
 800d9b8:	210b      	movs	r1, #11
 800d9ba:	a80c      	add	r0, sp, #48	; 0x30
 800d9bc:	f001 f9e0 	bl	800ed80 <uxr_buffer_submessage_header>
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	8968      	ldrh	r0, [r5, #10]
 800d9c4:	f006 f888 	bl	8013ad8 <uxr_seq_num_add>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	892a      	ldrh	r2, [r5, #8]
 800d9cc:	9d02      	ldr	r5, [sp, #8]
 800d9ce:	a905      	add	r1, sp, #20
 800d9d0:	a80c      	add	r0, sp, #48	; 0x30
 800d9d2:	f88d 5018 	strb.w	r5, [sp, #24]
 800d9d6:	f8ad 2016 	strh.w	r2, [sp, #22]
 800d9da:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d9de:	f002 f9e9 	bl	800fdb4 <uxr_serialize_HEARTBEAT_Payload>
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	4658      	mov	r0, fp
 800d9ea:	f000 fb8b 	bl	800e104 <uxr_stamp_session_header>
 800d9ee:	a80c      	add	r0, sp, #48	; 0x30
 800d9f0:	f7ff f84c 	bl	800ca8c <ucdr_buffer_length>
 800d9f4:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d9fe:	a907      	add	r1, sp, #28
 800da00:	445c      	add	r4, fp
 800da02:	47a8      	blx	r5
 800da04:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800da08:	e79d      	b.n	800d946 <listen_message_reliably+0x36>
 800da0a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800da0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da12:	45a2      	cmp	sl, r4
 800da14:	bf08      	it	eq
 800da16:	4599      	cmpeq	r9, r3
 800da18:	d01f      	beq.n	800da5a <listen_message_reliably+0x14a>
 800da1a:	eba9 0107 	sub.w	r1, r9, r7
 800da1e:	2900      	cmp	r1, #0
 800da20:	bf08      	it	eq
 800da22:	2101      	moveq	r1, #1
 800da24:	9c03      	ldr	r4, [sp, #12]
 800da26:	4658      	mov	r0, fp
 800da28:	428c      	cmp	r4, r1
 800da2a:	4623      	mov	r3, r4
 800da2c:	bfa8      	it	ge
 800da2e:	460b      	movge	r3, r1
 800da30:	4619      	mov	r1, r3
 800da32:	461f      	mov	r7, r3
 800da34:	f7ff fec8 	bl	800d7c8 <listen_message>
 800da38:	b110      	cbz	r0, 800da40 <listen_message_reliably+0x130>
 800da3a:	b015      	add	sp, #84	; 0x54
 800da3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da40:	1be3      	subs	r3, r4, r7
 800da42:	2b00      	cmp	r3, #0
 800da44:	9303      	str	r3, [sp, #12]
 800da46:	ddf8      	ble.n	800da3a <listen_message_reliably+0x12a>
 800da48:	f001 f9e0 	bl	800ee0c <uxr_millis>
 800da4c:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 800da50:	4688      	mov	r8, r1
 800da52:	4607      	mov	r7, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	f47f af6d 	bne.w	800d934 <listen_message_reliably+0x24>
 800da5a:	9903      	ldr	r1, [sp, #12]
 800da5c:	e7df      	b.n	800da1e <listen_message_reliably+0x10e>
 800da5e:	bf00      	nop

0800da60 <uxr_init_session>:
 800da60:	b5d0      	push	{r4, r6, r7, lr}
 800da62:	2300      	movs	r3, #0
 800da64:	2600      	movs	r6, #0
 800da66:	2700      	movs	r7, #0
 800da68:	4604      	mov	r4, r0
 800da6a:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800da6e:	6701      	str	r1, [r0, #112]	; 0x70
 800da70:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800da74:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800da78:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800da7c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800da80:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800da84:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800da88:	2181      	movs	r1, #129	; 0x81
 800da8a:	f000 faa9 	bl	800dfe0 <uxr_init_session_info>
 800da8e:	f104 0008 	add.w	r0, r4, #8
 800da92:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800da96:	f001 b88f 	b.w	800ebb8 <uxr_init_stream_storage>
 800da9a:	bf00      	nop

0800da9c <uxr_set_status_callback>:
 800da9c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop

0800daa4 <uxr_set_topic_callback>:
 800daa4:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop

0800daac <uxr_set_request_callback>:
 800daac:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop

0800dab4 <uxr_set_reply_callback>:
 800dab4:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop

0800dabc <uxr_create_session>:
 800dabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dac0:	4604      	mov	r4, r0
 800dac2:	f100 0708 	add.w	r7, r0, #8
 800dac6:	b092      	sub	sp, #72	; 0x48
 800dac8:	4638      	mov	r0, r7
 800daca:	f001 f87f 	bl	800ebcc <uxr_reset_stream_storage>
 800dace:	4620      	mov	r0, r4
 800dad0:	f000 fb6c 	bl	800e1ac <uxr_session_header_offset>
 800dad4:	2300      	movs	r3, #0
 800dad6:	221c      	movs	r2, #28
 800dad8:	9000      	str	r0, [sp, #0]
 800dada:	a903      	add	r1, sp, #12
 800dadc:	a80a      	add	r0, sp, #40	; 0x28
 800dade:	f7fe ff95 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800dae2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dae4:	4620      	mov	r0, r4
 800dae6:	8a1a      	ldrh	r2, [r3, #16]
 800dae8:	a90a      	add	r1, sp, #40	; 0x28
 800daea:	3a04      	subs	r2, #4
 800daec:	b292      	uxth	r2, r2
 800daee:	f000 fa89 	bl	800e004 <uxr_buffer_create_session>
 800daf2:	4620      	mov	r0, r4
 800daf4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800daf6:	f000 faf1 	bl	800e0dc <uxr_stamp_create_session_header>
 800dafa:	a80a      	add	r0, sp, #40	; 0x28
 800dafc:	f7fe ffc6 	bl	800ca8c <ucdr_buffer_length>
 800db00:	23ff      	movs	r3, #255	; 0xff
 800db02:	4606      	mov	r6, r0
 800db04:	250a      	movs	r5, #10
 800db06:	7163      	strb	r3, [r4, #5]
 800db08:	e001      	b.n	800db0e <uxr_create_session+0x52>
 800db0a:	2bff      	cmp	r3, #255	; 0xff
 800db0c:	d10d      	bne.n	800db2a <uxr_create_session+0x6e>
 800db0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db10:	4632      	mov	r2, r6
 800db12:	e9d3 0800 	ldrd	r0, r8, [r3]
 800db16:	a903      	add	r1, sp, #12
 800db18:	47c0      	blx	r8
 800db1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800db1e:	4620      	mov	r0, r4
 800db20:	f7ff fe52 	bl	800d7c8 <listen_message>
 800db24:	3d01      	subs	r5, #1
 800db26:	7963      	ldrb	r3, [r4, #5]
 800db28:	d1ef      	bne.n	800db0a <uxr_create_session+0x4e>
 800db2a:	b11b      	cbz	r3, 800db34 <uxr_create_session+0x78>
 800db2c:	2000      	movs	r0, #0
 800db2e:	b012      	add	sp, #72	; 0x48
 800db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db34:	4638      	mov	r0, r7
 800db36:	f001 f849 	bl	800ebcc <uxr_reset_stream_storage>
 800db3a:	2001      	movs	r0, #1
 800db3c:	b012      	add	sp, #72	; 0x48
 800db3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db42:	bf00      	nop

0800db44 <uxr_delete_session_retries>:
 800db44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db48:	b08e      	sub	sp, #56	; 0x38
 800db4a:	4604      	mov	r4, r0
 800db4c:	460d      	mov	r5, r1
 800db4e:	f000 fb2d 	bl	800e1ac <uxr_session_header_offset>
 800db52:	2300      	movs	r3, #0
 800db54:	2210      	movs	r2, #16
 800db56:	9000      	str	r0, [sp, #0]
 800db58:	a902      	add	r1, sp, #8
 800db5a:	a806      	add	r0, sp, #24
 800db5c:	f7fe ff56 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800db60:	4620      	mov	r0, r4
 800db62:	a906      	add	r1, sp, #24
 800db64:	f000 fa74 	bl	800e050 <uxr_buffer_delete_session>
 800db68:	2200      	movs	r2, #0
 800db6a:	9b06      	ldr	r3, [sp, #24]
 800db6c:	4620      	mov	r0, r4
 800db6e:	4611      	mov	r1, r2
 800db70:	f000 fac8 	bl	800e104 <uxr_stamp_session_header>
 800db74:	a806      	add	r0, sp, #24
 800db76:	f7fe ff89 	bl	800ca8c <ucdr_buffer_length>
 800db7a:	23ff      	movs	r3, #255	; 0xff
 800db7c:	4606      	mov	r6, r0
 800db7e:	7163      	strb	r3, [r4, #5]
 800db80:	b1f5      	cbz	r5, 800dbc0 <uxr_delete_session_retries+0x7c>
 800db82:	2700      	movs	r7, #0
 800db84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db86:	4632      	mov	r2, r6
 800db88:	e9d3 0800 	ldrd	r0, r8, [r3]
 800db8c:	a902      	add	r1, sp, #8
 800db8e:	47c0      	blx	r8
 800db90:	3701      	adds	r7, #1
 800db92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800db96:	4620      	mov	r0, r4
 800db98:	f7ff fe16 	bl	800d7c8 <listen_message>
 800db9c:	42bd      	cmp	r5, r7
 800db9e:	7963      	ldrb	r3, [r4, #5]
 800dba0:	d007      	beq.n	800dbb2 <uxr_delete_session_retries+0x6e>
 800dba2:	2bff      	cmp	r3, #255	; 0xff
 800dba4:	d0ee      	beq.n	800db84 <uxr_delete_session_retries+0x40>
 800dba6:	fab3 f083 	clz	r0, r3
 800dbaa:	0940      	lsrs	r0, r0, #5
 800dbac:	b00e      	add	sp, #56	; 0x38
 800dbae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb2:	2bff      	cmp	r3, #255	; 0xff
 800dbb4:	bf08      	it	eq
 800dbb6:	2000      	moveq	r0, #0
 800dbb8:	d1f5      	bne.n	800dba6 <uxr_delete_session_retries+0x62>
 800dbba:	b00e      	add	sp, #56	; 0x38
 800dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dbc8:	a902      	add	r1, sp, #8
 800dbca:	47a8      	blx	r5
 800dbcc:	7963      	ldrb	r3, [r4, #5]
 800dbce:	fab3 f083 	clz	r0, r3
 800dbd2:	0940      	lsrs	r0, r0, #5
 800dbd4:	e7ea      	b.n	800dbac <uxr_delete_session_retries+0x68>
 800dbd6:	bf00      	nop

0800dbd8 <uxr_create_output_best_effort_stream>:
 800dbd8:	b570      	push	{r4, r5, r6, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	4616      	mov	r6, r2
 800dbe2:	f000 fae3 	bl	800e1ac <uxr_session_header_offset>
 800dbe6:	4632      	mov	r2, r6
 800dbe8:	4603      	mov	r3, r0
 800dbea:	4629      	mov	r1, r5
 800dbec:	f104 0008 	add.w	r0, r4, #8
 800dbf0:	b002      	add	sp, #8
 800dbf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbf6:	f001 b829 	b.w	800ec4c <uxr_add_output_best_effort_buffer>
 800dbfa:	bf00      	nop

0800dbfc <uxr_create_output_reliable_stream>:
 800dbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	460d      	mov	r5, r1
 800dc02:	4616      	mov	r6, r2
 800dc04:	461f      	mov	r7, r3
 800dc06:	4604      	mov	r4, r0
 800dc08:	f000 fad0 	bl	800e1ac <uxr_session_header_offset>
 800dc0c:	4684      	mov	ip, r0
 800dc0e:	463b      	mov	r3, r7
 800dc10:	4632      	mov	r2, r6
 800dc12:	4629      	mov	r1, r5
 800dc14:	f104 0008 	add.w	r0, r4, #8
 800dc18:	f8cd c000 	str.w	ip, [sp]
 800dc1c:	f001 f828 	bl	800ec70 <uxr_add_output_reliable_buffer>
 800dc20:	4603      	mov	r3, r0
 800dc22:	2000      	movs	r0, #0
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	f362 0007 	bfi	r0, r2, #0, #8
 800dc2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc2e:	f362 200f 	bfi	r0, r2, #8, #8
 800dc32:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc36:	f362 4017 	bfi	r0, r2, #16, #8
 800dc3a:	0e1b      	lsrs	r3, r3, #24
 800dc3c:	f363 601f 	bfi	r0, r3, #24, #8
 800dc40:	b005      	add	sp, #20
 800dc42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc44 <uxr_create_input_best_effort_stream>:
 800dc44:	b082      	sub	sp, #8
 800dc46:	3008      	adds	r0, #8
 800dc48:	b002      	add	sp, #8
 800dc4a:	f001 b82b 	b.w	800eca4 <uxr_add_input_best_effort_buffer>
 800dc4e:	bf00      	nop

0800dc50 <uxr_create_input_reliable_stream>:
 800dc50:	b510      	push	{r4, lr}
 800dc52:	4c0c      	ldr	r4, [pc, #48]	; (800dc84 <uxr_create_input_reliable_stream+0x34>)
 800dc54:	b084      	sub	sp, #16
 800dc56:	9400      	str	r4, [sp, #0]
 800dc58:	3008      	adds	r0, #8
 800dc5a:	f001 f839 	bl	800ecd0 <uxr_add_input_reliable_buffer>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2000      	movs	r0, #0
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	f362 0007 	bfi	r0, r2, #0, #8
 800dc68:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dc6c:	f362 200f 	bfi	r0, r2, #8, #8
 800dc70:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dc74:	f362 4017 	bfi	r0, r2, #16, #8
 800dc78:	0e1b      	lsrs	r3, r3, #24
 800dc7a:	f363 601f 	bfi	r0, r3, #24, #8
 800dc7e:	b004      	add	sp, #16
 800dc80:	bd10      	pop	{r4, pc}
 800dc82:	bf00      	nop
 800dc84:	0800d35d 	.word	0x0800d35d

0800dc88 <uxr_sync_session>:
 800dc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc8a:	b093      	sub	sp, #76	; 0x4c
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	460d      	mov	r5, r1
 800dc90:	f000 fa8c 	bl	800e1ac <uxr_session_header_offset>
 800dc94:	2300      	movs	r3, #0
 800dc96:	2214      	movs	r2, #20
 800dc98:	9000      	str	r0, [sp, #0]
 800dc9a:	a905      	add	r1, sp, #20
 800dc9c:	a80a      	add	r0, sp, #40	; 0x28
 800dc9e:	f7fe feb5 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800dca2:	2300      	movs	r3, #0
 800dca4:	2208      	movs	r2, #8
 800dca6:	210e      	movs	r1, #14
 800dca8:	a80a      	add	r0, sp, #40	; 0x28
 800dcaa:	f001 f869 	bl	800ed80 <uxr_buffer_submessage_header>
 800dcae:	f001 f8c9 	bl	800ee44 <uxr_nanos>
 800dcb2:	a31d      	add	r3, pc, #116	; (adr r3, 800dd28 <uxr_sync_session+0xa0>)
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	4606      	mov	r6, r0
 800dcba:	460f      	mov	r7, r1
 800dcbc:	f7f2 fd4e 	bl	800075c <__aeabi_ldivmod>
 800dcc0:	a319      	add	r3, pc, #100	; (adr r3, 800dd28 <uxr_sync_session+0xa0>)
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	4684      	mov	ip, r0
 800dcc8:	4639      	mov	r1, r7
 800dcca:	4630      	mov	r0, r6
 800dccc:	f8cd c00c 	str.w	ip, [sp, #12]
 800dcd0:	f7f2 fd44 	bl	800075c <__aeabi_ldivmod>
 800dcd4:	a903      	add	r1, sp, #12
 800dcd6:	a80a      	add	r0, sp, #40	; 0x28
 800dcd8:	9204      	str	r2, [sp, #16]
 800dcda:	f002 f891 	bl	800fe00 <uxr_serialize_TIMESTAMP_Payload>
 800dcde:	2200      	movs	r2, #0
 800dce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce2:	4611      	mov	r1, r2
 800dce4:	4620      	mov	r0, r4
 800dce6:	f000 fa0d 	bl	800e104 <uxr_stamp_session_header>
 800dcea:	a80a      	add	r0, sp, #40	; 0x28
 800dcec:	f7fe fece 	bl	800ca8c <ucdr_buffer_length>
 800dcf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	e9d3 0600 	ldrd	r0, r6, [r3]
 800dcf8:	a905      	add	r1, sp, #20
 800dcfa:	47b0      	blx	r6
 800dcfc:	f001 f886 	bl	800ee0c <uxr_millis>
 800dd00:	2300      	movs	r3, #0
 800dd02:	4606      	mov	r6, r0
 800dd04:	4629      	mov	r1, r5
 800dd06:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800dd0a:	e000      	b.n	800dd0e <uxr_sync_session+0x86>
 800dd0c:	b950      	cbnz	r0, 800dd24 <uxr_sync_session+0x9c>
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f7ff fdfe 	bl	800d910 <listen_message_reliably>
 800dd14:	f001 f87a 	bl	800ee0c <uxr_millis>
 800dd18:	1b83      	subs	r3, r0, r6
 800dd1a:	1ae9      	subs	r1, r5, r3
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 800dd22:	dcf3      	bgt.n	800dd0c <uxr_sync_session+0x84>
 800dd24:	b013      	add	sp, #76	; 0x4c
 800dd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd28:	3b9aca00 	.word	0x3b9aca00
 800dd2c:	00000000 	.word	0x00000000

0800dd30 <uxr_epoch_nanos>:
 800dd30:	b510      	push	{r4, lr}
 800dd32:	4604      	mov	r4, r0
 800dd34:	f001 f886 	bl	800ee44 <uxr_nanos>
 800dd38:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800dd3c:	1ac0      	subs	r0, r0, r3
 800dd3e:	eb61 0102 	sbc.w	r1, r1, r2
 800dd42:	bd10      	pop	{r4, pc}

0800dd44 <uxr_flash_output_streams>:
 800dd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd48:	7e03      	ldrb	r3, [r0, #24]
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	b1fb      	cbz	r3, 800dd90 <uxr_flash_output_streams+0x4c>
 800dd50:	f04f 0900 	mov.w	r9, #0
 800dd54:	4648      	mov	r0, r9
 800dd56:	f10d 0802 	add.w	r8, sp, #2
 800dd5a:	af03      	add	r7, sp, #12
 800dd5c:	ae02      	add	r6, sp, #8
 800dd5e:	2201      	movs	r2, #1
 800dd60:	4611      	mov	r1, r2
 800dd62:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800dd66:	f000 fed1 	bl	800eb0c <uxr_stream_id>
 800dd6a:	4684      	mov	ip, r0
 800dd6c:	3508      	adds	r5, #8
 800dd6e:	4643      	mov	r3, r8
 800dd70:	4628      	mov	r0, r5
 800dd72:	463a      	mov	r2, r7
 800dd74:	4631      	mov	r1, r6
 800dd76:	f8cd c004 	str.w	ip, [sp, #4]
 800dd7a:	f005 fba5 	bl	80134c8 <uxr_prepare_best_effort_buffer_to_send>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d13c      	bne.n	800ddfc <uxr_flash_output_streams+0xb8>
 800dd82:	7e23      	ldrb	r3, [r4, #24]
 800dd84:	f109 0901 	add.w	r9, r9, #1
 800dd88:	fa5f f089 	uxtb.w	r0, r9
 800dd8c:	4283      	cmp	r3, r0
 800dd8e:	d8e6      	bhi.n	800dd5e <uxr_flash_output_streams+0x1a>
 800dd90:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dd94:	b37b      	cbz	r3, 800ddf6 <uxr_flash_output_streams+0xb2>
 800dd96:	f04f 0900 	mov.w	r9, #0
 800dd9a:	4648      	mov	r0, r9
 800dd9c:	f10d 0802 	add.w	r8, sp, #2
 800dda0:	af03      	add	r7, sp, #12
 800dda2:	ae02      	add	r6, sp, #8
 800dda4:	2201      	movs	r2, #1
 800dda6:	2102      	movs	r1, #2
 800dda8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ddac:	f000 feae 	bl	800eb0c <uxr_stream_id>
 800ddb0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ddb4:	3520      	adds	r5, #32
 800ddb6:	9001      	str	r0, [sp, #4]
 800ddb8:	e00d      	b.n	800ddd6 <uxr_flash_output_streams+0x92>
 800ddba:	4620      	mov	r0, r4
 800ddbc:	9b02      	ldr	r3, [sp, #8]
 800ddbe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ddc2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ddc6:	f000 f99d 	bl	800e104 <uxr_stamp_session_header>
 800ddca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ddcc:	9a03      	ldr	r2, [sp, #12]
 800ddce:	9902      	ldr	r1, [sp, #8]
 800ddd0:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ddd4:	47d0      	blx	sl
 800ddd6:	4643      	mov	r3, r8
 800ddd8:	463a      	mov	r2, r7
 800ddda:	4631      	mov	r1, r6
 800dddc:	4628      	mov	r0, r5
 800ddde:	f005 fd75 	bl	80138cc <uxr_prepare_next_reliable_buffer_to_send>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	d1e9      	bne.n	800ddba <uxr_flash_output_streams+0x76>
 800dde6:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ddea:	f109 0901 	add.w	r9, r9, #1
 800ddee:	fa5f f089 	uxtb.w	r0, r9
 800ddf2:	4283      	cmp	r3, r0
 800ddf4:	d8d6      	bhi.n	800dda4 <uxr_flash_output_streams+0x60>
 800ddf6:	b004      	add	sp, #16
 800ddf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	9b02      	ldr	r3, [sp, #8]
 800de00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800de04:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800de08:	f000 f97c 	bl	800e104 <uxr_stamp_session_header>
 800de0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800de0e:	9a03      	ldr	r2, [sp, #12]
 800de10:	e9d3 0500 	ldrd	r0, r5, [r3]
 800de14:	9902      	ldr	r1, [sp, #8]
 800de16:	47a8      	blx	r5
 800de18:	f109 0901 	add.w	r9, r9, #1
 800de1c:	7e23      	ldrb	r3, [r4, #24]
 800de1e:	fa5f f089 	uxtb.w	r0, r9
 800de22:	4283      	cmp	r3, r0
 800de24:	d89b      	bhi.n	800dd5e <uxr_flash_output_streams+0x1a>
 800de26:	e7b3      	b.n	800dd90 <uxr_flash_output_streams+0x4c>

0800de28 <uxr_run_session_until_data>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	4604      	mov	r4, r0
 800de2c:	460d      	mov	r5, r1
 800de2e:	f000 ffed 	bl	800ee0c <uxr_millis>
 800de32:	4606      	mov	r6, r0
 800de34:	4620      	mov	r0, r4
 800de36:	f7ff ff85 	bl	800dd44 <uxr_flash_output_streams>
 800de3a:	2300      	movs	r3, #0
 800de3c:	4629      	mov	r1, r5
 800de3e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800de42:	e005      	b.n	800de50 <uxr_run_session_until_data+0x28>
 800de44:	f000 ffe2 	bl	800ee0c <uxr_millis>
 800de48:	1b81      	subs	r1, r0, r6
 800de4a:	1a69      	subs	r1, r5, r1
 800de4c:	2900      	cmp	r1, #0
 800de4e:	dd07      	ble.n	800de60 <uxr_run_session_until_data+0x38>
 800de50:	4620      	mov	r0, r4
 800de52:	f7ff fd5d 	bl	800d910 <listen_message_reliably>
 800de56:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d0f2      	beq.n	800de44 <uxr_run_session_until_data+0x1c>
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800de64:	bd70      	pop	{r4, r5, r6, pc}
 800de66:	bf00      	nop

0800de68 <uxr_run_session_until_confirm_delivery>:
 800de68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6c:	4606      	mov	r6, r0
 800de6e:	460d      	mov	r5, r1
 800de70:	f000 ffcc 	bl	800ee0c <uxr_millis>
 800de74:	4607      	mov	r7, r0
 800de76:	4630      	mov	r0, r6
 800de78:	f7ff ff64 	bl	800dd44 <uxr_flash_output_streams>
 800de7c:	2d00      	cmp	r5, #0
 800de7e:	bfa8      	it	ge
 800de80:	462c      	movge	r4, r5
 800de82:	f106 0808 	add.w	r8, r6, #8
 800de86:	da09      	bge.n	800de9c <uxr_run_session_until_confirm_delivery+0x34>
 800de88:	e00d      	b.n	800dea6 <uxr_run_session_until_confirm_delivery+0x3e>
 800de8a:	4621      	mov	r1, r4
 800de8c:	4630      	mov	r0, r6
 800de8e:	f7ff fd3f 	bl	800d910 <listen_message_reliably>
 800de92:	f000 ffbb 	bl	800ee0c <uxr_millis>
 800de96:	1bc1      	subs	r1, r0, r7
 800de98:	1a6c      	subs	r4, r5, r1
 800de9a:	d404      	bmi.n	800dea6 <uxr_run_session_until_confirm_delivery+0x3e>
 800de9c:	4640      	mov	r0, r8
 800de9e:	f000 ff59 	bl	800ed54 <uxr_output_streams_confirmed>
 800dea2:	2800      	cmp	r0, #0
 800dea4:	d0f1      	beq.n	800de8a <uxr_run_session_until_confirm_delivery+0x22>
 800dea6:	4640      	mov	r0, r8
 800dea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deac:	f000 bf52 	b.w	800ed54 <uxr_output_streams_confirmed>

0800deb0 <uxr_run_session_until_all_status>:
 800deb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800deb6:	4688      	mov	r8, r1
 800deb8:	4615      	mov	r5, r2
 800deba:	461c      	mov	r4, r3
 800debc:	4607      	mov	r7, r0
 800debe:	f7ff ff41 	bl	800dd44 <uxr_flash_output_streams>
 800dec2:	b126      	cbz	r6, 800dece <uxr_run_session_until_all_status+0x1e>
 800dec4:	4632      	mov	r2, r6
 800dec6:	21ff      	movs	r1, #255	; 0xff
 800dec8:	4620      	mov	r0, r4
 800deca:	f005 ffd3 	bl	8013e74 <memset>
 800dece:	e9c7 541d 	strd	r5, r4, [r7, #116]	; 0x74
 800ded2:	67fe      	str	r6, [r7, #124]	; 0x7c
 800ded4:	f000 ff9a 	bl	800ee0c <uxr_millis>
 800ded8:	4641      	mov	r1, r8
 800deda:	4681      	mov	r9, r0
 800dedc:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800dee0:	f1a5 0a02 	sub.w	sl, r5, #2
 800dee4:	4638      	mov	r0, r7
 800dee6:	f7ff fd13 	bl	800d910 <listen_message_reliably>
 800deea:	f000 ff8f 	bl	800ee0c <uxr_millis>
 800deee:	eba0 0109 	sub.w	r1, r0, r9
 800def2:	eba8 0101 	sub.w	r1, r8, r1
 800def6:	b33e      	cbz	r6, 800df48 <uxr_run_session_until_all_status+0x98>
 800def8:	4658      	mov	r0, fp
 800defa:	465c      	mov	r4, fp
 800defc:	2301      	movs	r3, #1
 800defe:	e002      	b.n	800df06 <uxr_run_session_until_all_status+0x56>
 800df00:	42b3      	cmp	r3, r6
 800df02:	d20c      	bcs.n	800df1e <uxr_run_session_until_all_status+0x6e>
 800df04:	3301      	adds	r3, #1
 800df06:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800df0a:	2dff      	cmp	r5, #255	; 0xff
 800df0c:	d1f8      	bne.n	800df00 <uxr_run_session_until_all_status+0x50>
 800df0e:	42b3      	cmp	r3, r6
 800df10:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 800df14:	d213      	bcs.n	800df3e <uxr_run_session_until_all_status+0x8e>
 800df16:	2a00      	cmp	r2, #0
 800df18:	d0f4      	beq.n	800df04 <uxr_run_session_until_all_status+0x54>
 800df1a:	2900      	cmp	r1, #0
 800df1c:	dce2      	bgt.n	800dee4 <uxr_run_session_until_all_status+0x34>
 800df1e:	2300      	movs	r3, #0
 800df20:	445e      	add	r6, fp
 800df22:	67fb      	str	r3, [r7, #124]	; 0x7c
 800df24:	e001      	b.n	800df2a <uxr_run_session_until_all_status+0x7a>
 800df26:	2b01      	cmp	r3, #1
 800df28:	d812      	bhi.n	800df50 <uxr_run_session_until_all_status+0xa0>
 800df2a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800df2e:	4286      	cmp	r6, r0
 800df30:	d1f9      	bne.n	800df26 <uxr_run_session_until_all_status+0x76>
 800df32:	2b01      	cmp	r3, #1
 800df34:	bf8c      	ite	hi
 800df36:	2000      	movhi	r0, #0
 800df38:	2001      	movls	r0, #1
 800df3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3e:	2900      	cmp	r1, #0
 800df40:	dded      	ble.n	800df1e <uxr_run_session_until_all_status+0x6e>
 800df42:	2a00      	cmp	r2, #0
 800df44:	d1ce      	bne.n	800dee4 <uxr_run_session_until_all_status+0x34>
 800df46:	e7ea      	b.n	800df1e <uxr_run_session_until_all_status+0x6e>
 800df48:	2001      	movs	r0, #1
 800df4a:	67fe      	str	r6, [r7, #124]	; 0x7c
 800df4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	2000      	movs	r0, #0
 800df52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df56:	bf00      	nop

0800df58 <uxr_prepare_stream_to_write_submessage>:
 800df58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df5c:	4615      	mov	r5, r2
 800df5e:	b082      	sub	sp, #8
 800df60:	4682      	mov	sl, r0
 800df62:	4610      	mov	r0, r2
 800df64:	461e      	mov	r6, r3
 800df66:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800df6a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800df6e:	9101      	str	r1, [sp, #4]
 800df70:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800df74:	f000 ff44 	bl	800ee00 <uxr_submessage_padding>
 800df78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800df7c:	f105 0904 	add.w	r9, r5, #4
 800df80:	2b01      	cmp	r3, #1
 800df82:	4481      	add	r9, r0
 800df84:	d01d      	beq.n	800dfc2 <uxr_prepare_stream_to_write_submessage+0x6a>
 800df86:	2b02      	cmp	r3, #2
 800df88:	d116      	bne.n	800dfb8 <uxr_prepare_stream_to_write_submessage+0x60>
 800df8a:	4621      	mov	r1, r4
 800df8c:	f10a 0008 	add.w	r0, sl, #8
 800df90:	f000 febe 	bl	800ed10 <uxr_get_output_reliable_stream>
 800df94:	4604      	mov	r4, r0
 800df96:	b158      	cbz	r0, 800dfb0 <uxr_prepare_stream_to_write_submessage+0x58>
 800df98:	4649      	mov	r1, r9
 800df9a:	4632      	mov	r2, r6
 800df9c:	f005 fb38 	bl	8013610 <uxr_prepare_reliable_buffer_to_write>
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	b12c      	cbz	r4, 800dfb0 <uxr_prepare_stream_to_write_submessage+0x58>
 800dfa4:	4643      	mov	r3, r8
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	b2aa      	uxth	r2, r5
 800dfac:	f000 fee8 	bl	800ed80 <uxr_buffer_submessage_header>
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	b002      	add	sp, #8
 800dfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb8:	2400      	movs	r4, #0
 800dfba:	4620      	mov	r0, r4
 800dfbc:	b002      	add	sp, #8
 800dfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc2:	4621      	mov	r1, r4
 800dfc4:	f10a 0008 	add.w	r0, sl, #8
 800dfc8:	f000 fe9a 	bl	800ed00 <uxr_get_output_best_effort_stream>
 800dfcc:	4604      	mov	r4, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d0ee      	beq.n	800dfb0 <uxr_prepare_stream_to_write_submessage+0x58>
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	f005 fa57 	bl	8013488 <uxr_prepare_best_effort_buffer_to_write>
 800dfda:	4604      	mov	r4, r0
 800dfdc:	e7e1      	b.n	800dfa2 <uxr_prepare_stream_to_write_submessage+0x4a>
 800dfde:	bf00      	nop

0800dfe0 <uxr_init_session_info>:
 800dfe0:	b430      	push	{r4, r5}
 800dfe2:	23ff      	movs	r3, #255	; 0xff
 800dfe4:	2409      	movs	r4, #9
 800dfe6:	0e15      	lsrs	r5, r2, #24
 800dfe8:	7102      	strb	r2, [r0, #4]
 800dfea:	7001      	strb	r1, [r0, #0]
 800dfec:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800dff0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800dff4:	7045      	strb	r5, [r0, #1]
 800dff6:	80c4      	strh	r4, [r0, #6]
 800dff8:	7081      	strb	r1, [r0, #2]
 800dffa:	70c2      	strb	r2, [r0, #3]
 800dffc:	7143      	strb	r3, [r0, #5]
 800dffe:	bc30      	pop	{r4, r5}
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop

0800e004 <uxr_buffer_create_session>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	460c      	mov	r4, r1
 800e008:	2101      	movs	r1, #1
 800e00a:	2300      	movs	r3, #0
 800e00c:	b088      	sub	sp, #32
 800e00e:	4d0f      	ldr	r5, [pc, #60]	; (800e04c <uxr_buffer_create_session+0x48>)
 800e010:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e014:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800e018:	80c1      	strh	r1, [r0, #6]
 800e01a:	9202      	str	r2, [sp, #8]
 800e01c:	7800      	ldrb	r0, [r0, #0]
 800e01e:	88aa      	ldrh	r2, [r5, #4]
 800e020:	682e      	ldr	r6, [r5, #0]
 800e022:	f88d 000c 	strb.w	r0, [sp, #12]
 800e026:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e02a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e02e:	4619      	mov	r1, r3
 800e030:	2210      	movs	r2, #16
 800e032:	4620      	mov	r0, r4
 800e034:	f88d 300d 	strb.w	r3, [sp, #13]
 800e038:	9600      	str	r6, [sp, #0]
 800e03a:	f000 fea1 	bl	800ed80 <uxr_buffer_submessage_header>
 800e03e:	4620      	mov	r0, r4
 800e040:	4669      	mov	r1, sp
 800e042:	f001 fd71 	bl	800fb28 <uxr_serialize_CREATE_CLIENT_Payload>
 800e046:	b008      	add	sp, #32
 800e048:	bd70      	pop	{r4, r5, r6, pc}
 800e04a:	bf00      	nop
 800e04c:	080161d8 	.word	0x080161d8

0800e050 <uxr_buffer_delete_session>:
 800e050:	b530      	push	{r4, r5, lr}
 800e052:	2202      	movs	r2, #2
 800e054:	460c      	mov	r4, r1
 800e056:	f44f 7500 	mov.w	r5, #512	; 0x200
 800e05a:	4b0a      	ldr	r3, [pc, #40]	; (800e084 <uxr_buffer_delete_session+0x34>)
 800e05c:	b083      	sub	sp, #12
 800e05e:	8919      	ldrh	r1, [r3, #8]
 800e060:	80c2      	strh	r2, [r0, #6]
 800e062:	2300      	movs	r3, #0
 800e064:	2204      	movs	r2, #4
 800e066:	f8ad 1006 	strh.w	r1, [sp, #6]
 800e06a:	4620      	mov	r0, r4
 800e06c:	2103      	movs	r1, #3
 800e06e:	f8ad 5004 	strh.w	r5, [sp, #4]
 800e072:	f000 fe85 	bl	800ed80 <uxr_buffer_submessage_header>
 800e076:	4620      	mov	r0, r4
 800e078:	a901      	add	r1, sp, #4
 800e07a:	f001 fdef 	bl	800fc5c <uxr_serialize_DELETE_Payload>
 800e07e:	b003      	add	sp, #12
 800e080:	bd30      	pop	{r4, r5, pc}
 800e082:	bf00      	nop
 800e084:	080161d8 	.word	0x080161d8

0800e088 <uxr_read_create_session_status>:
 800e088:	b510      	push	{r4, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	4604      	mov	r4, r0
 800e08e:	4608      	mov	r0, r1
 800e090:	a901      	add	r1, sp, #4
 800e092:	f001 fdf3 	bl	800fc7c <uxr_deserialize_STATUS_AGENT_Payload>
 800e096:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e09a:	7163      	strb	r3, [r4, #5]
 800e09c:	b008      	add	sp, #32
 800e09e:	bd10      	pop	{r4, pc}

0800e0a0 <uxr_read_delete_session_status>:
 800e0a0:	b510      	push	{r4, lr}
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	4608      	mov	r0, r1
 800e0a8:	a902      	add	r1, sp, #8
 800e0aa:	f001 fe17 	bl	800fcdc <uxr_deserialize_STATUS_Payload>
 800e0ae:	88e3      	ldrh	r3, [r4, #6]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d001      	beq.n	800e0b8 <uxr_read_delete_session_status+0x18>
 800e0b4:	b004      	add	sp, #16
 800e0b6:	bd10      	pop	{r4, pc}
 800e0b8:	f10d 000a 	add.w	r0, sp, #10
 800e0bc:	f7ff f80e 	bl	800d0dc <uxr_object_id_from_raw>
 800e0c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e0c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e0c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	bf04      	itt	eq
 800e0d2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e0d6:	7163      	strbeq	r3, [r4, #5]
 800e0d8:	b004      	add	sp, #16
 800e0da:	bd10      	pop	{r4, pc}

0800e0dc <uxr_stamp_create_session_header>:
 800e0dc:	b510      	push	{r4, lr}
 800e0de:	4604      	mov	r4, r0
 800e0e0:	b08a      	sub	sp, #40	; 0x28
 800e0e2:	a802      	add	r0, sp, #8
 800e0e4:	2208      	movs	r2, #8
 800e0e6:	f7fe fca3 	bl	800ca30 <ucdr_init_buffer>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	a802      	add	r0, sp, #8
 800e0f4:	9400      	str	r4, [sp, #0]
 800e0f6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800e0fa:	f001 f841 	bl	800f180 <uxr_serialize_message_header>
 800e0fe:	b00a      	add	sp, #40	; 0x28
 800e100:	bd10      	pop	{r4, pc}
 800e102:	bf00      	nop

0800e104 <uxr_stamp_session_header>:
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	4616      	mov	r6, r2
 800e10c:	b08a      	sub	sp, #40	; 0x28
 800e10e:	4619      	mov	r1, r3
 800e110:	a802      	add	r0, sp, #8
 800e112:	2208      	movs	r2, #8
 800e114:	f7fe fc8c 	bl	800ca30 <ucdr_init_buffer>
 800e118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e11c:	4633      	mov	r3, r6
 800e11e:	462a      	mov	r2, r5
 800e120:	a802      	add	r0, sp, #8
 800e122:	9400      	str	r4, [sp, #0]
 800e124:	f001 f82c 	bl	800f180 <uxr_serialize_message_header>
 800e128:	b00a      	add	sp, #40	; 0x28
 800e12a:	bd70      	pop	{r4, r5, r6, pc}

0800e12c <uxr_read_session_header>:
 800e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e130:	4607      	mov	r7, r0
 800e132:	b084      	sub	sp, #16
 800e134:	4608      	mov	r0, r1
 800e136:	460c      	mov	r4, r1
 800e138:	4615      	mov	r5, r2
 800e13a:	461e      	mov	r6, r3
 800e13c:	f7fe fcaa 	bl	800ca94 <ucdr_buffer_remaining>
 800e140:	2808      	cmp	r0, #8
 800e142:	d803      	bhi.n	800e14c <uxr_read_session_header+0x20>
 800e144:	2000      	movs	r0, #0
 800e146:	b004      	add	sp, #16
 800e148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e14c:	f10d 080c 	add.w	r8, sp, #12
 800e150:	4633      	mov	r3, r6
 800e152:	462a      	mov	r2, r5
 800e154:	4620      	mov	r0, r4
 800e156:	f8cd 8000 	str.w	r8, [sp]
 800e15a:	f10d 010b 	add.w	r1, sp, #11
 800e15e:	f001 f82d 	bl	800f1bc <uxr_deserialize_message_header>
 800e162:	783a      	ldrb	r2, [r7, #0]
 800e164:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e168:	4293      	cmp	r3, r2
 800e16a:	d1eb      	bne.n	800e144 <uxr_read_session_header+0x18>
 800e16c:	061b      	lsls	r3, r3, #24
 800e16e:	d41b      	bmi.n	800e1a8 <uxr_read_session_header+0x7c>
 800e170:	f898 2000 	ldrb.w	r2, [r8]
 800e174:	787b      	ldrb	r3, [r7, #1]
 800e176:	429a      	cmp	r2, r3
 800e178:	d003      	beq.n	800e182 <uxr_read_session_header+0x56>
 800e17a:	2001      	movs	r0, #1
 800e17c:	f080 0001 	eor.w	r0, r0, #1
 800e180:	e7e1      	b.n	800e146 <uxr_read_session_header+0x1a>
 800e182:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e186:	78bb      	ldrb	r3, [r7, #2]
 800e188:	1cb9      	adds	r1, r7, #2
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d1f5      	bne.n	800e17a <uxr_read_session_header+0x4e>
 800e18e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e192:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e196:	429a      	cmp	r2, r3
 800e198:	d1ef      	bne.n	800e17a <uxr_read_session_header+0x4e>
 800e19a:	784b      	ldrb	r3, [r1, #1]
 800e19c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d1ea      	bne.n	800e17a <uxr_read_session_header+0x4e>
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	e7e9      	b.n	800e17c <uxr_read_session_header+0x50>
 800e1a8:	2001      	movs	r0, #1
 800e1aa:	e7cc      	b.n	800e146 <uxr_read_session_header+0x1a>

0800e1ac <uxr_session_header_offset>:
 800e1ac:	f990 3000 	ldrsb.w	r3, [r0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	bfac      	ite	ge
 800e1b4:	2008      	movge	r0, #8
 800e1b6:	2004      	movlt	r0, #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop

0800e1bc <uxr_init_base_object_request>:
 800e1bc:	b530      	push	{r4, r5, lr}
 800e1be:	f64f 75f4 	movw	r5, #65524	; 0xfff4
 800e1c2:	88c3      	ldrh	r3, [r0, #6]
 800e1c4:	b083      	sub	sp, #12
 800e1c6:	f1a3 040a 	sub.w	r4, r3, #10
 800e1ca:	b2a4      	uxth	r4, r4
 800e1cc:	42ac      	cmp	r4, r5
 800e1ce:	9101      	str	r1, [sp, #4]
 800e1d0:	d80e      	bhi.n	800e1f0 <uxr_init_base_object_request+0x34>
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	b29c      	uxth	r4, r3
 800e1d6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	80c4      	strh	r4, [r0, #6]
 800e1de:	1c91      	adds	r1, r2, #2
 800e1e0:	9801      	ldr	r0, [sp, #4]
 800e1e2:	7015      	strb	r5, [r2, #0]
 800e1e4:	7053      	strb	r3, [r2, #1]
 800e1e6:	f7fe ff8d 	bl	800d104 <uxr_object_id_to_raw>
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	b003      	add	sp, #12
 800e1ee:	bd30      	pop	{r4, r5, pc}
 800e1f0:	230a      	movs	r3, #10
 800e1f2:	2500      	movs	r5, #0
 800e1f4:	461c      	mov	r4, r3
 800e1f6:	e7f1      	b.n	800e1dc <uxr_init_base_object_request+0x20>

0800e1f8 <uxr_parse_base_object_request>:
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	3002      	adds	r0, #2
 800e1fe:	460d      	mov	r5, r1
 800e200:	4616      	mov	r6, r2
 800e202:	f7fe ff6b 	bl	800d0dc <uxr_object_id_from_raw>
 800e206:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e20a:	8028      	strh	r0, [r5, #0]
 800e20c:	806b      	strh	r3, [r5, #2]
 800e20e:	7822      	ldrb	r2, [r4, #0]
 800e210:	7863      	ldrb	r3, [r4, #1]
 800e212:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e216:	8033      	strh	r3, [r6, #0]
 800e218:	bd70      	pop	{r4, r5, r6, pc}
 800e21a:	bf00      	nop

0800e21c <uxr_init_framing_io>:
 800e21c:	2300      	movs	r3, #0
 800e21e:	7041      	strb	r1, [r0, #1]
 800e220:	7003      	strb	r3, [r0, #0]
 800e222:	8583      	strh	r3, [r0, #44]	; 0x2c
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop

0800e228 <uxr_write_framed_msg>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800e230:	4604      	mov	r4, r0
 800e232:	7840      	ldrb	r0, [r0, #1]
 800e234:	b085      	sub	sp, #20
 800e236:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 800e23a:	2d01      	cmp	r5, #1
 800e23c:	460e      	mov	r6, r1
 800e23e:	4617      	mov	r7, r2
 800e240:	469b      	mov	fp, r3
 800e242:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800e246:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800e24a:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
 800e24e:	f240 8131 	bls.w	800e4b4 <uxr_write_framed_msg+0x28c>
 800e252:	2302      	movs	r3, #2
 800e254:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 800e258:	2a01      	cmp	r2, #1
 800e25a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 800e25e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e262:	f240 8092 	bls.w	800e38a <uxr_write_framed_msg+0x162>
 800e266:	2303      	movs	r3, #3
 800e268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e26a:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 800e26e:	b2d0      	uxtb	r0, r2
 800e270:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800e274:	2a01      	cmp	r2, #1
 800e276:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e27a:	f240 809c 	bls.w	800e3b6 <uxr_write_framed_msg+0x18e>
 800e27e:	18e2      	adds	r2, r4, r3
 800e280:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 800e284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e286:	3301      	adds	r3, #1
 800e288:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e28c:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 800e290:	2a01      	cmp	r2, #1
 800e292:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e296:	f240 80a1 	bls.w	800e3dc <uxr_write_framed_msg+0x1b4>
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	4423      	add	r3, r4
 800e29e:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 800e2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2a4:	b2d2      	uxtb	r2, r2
 800e2a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f000 80a6 	beq.w	800e3fc <uxr_write_framed_msg+0x1d4>
 800e2b0:	f04f 0a00 	mov.w	sl, #0
 800e2b4:	46d1      	mov	r9, sl
 800e2b6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800e2ba:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800e2be:	2901      	cmp	r1, #1
 800e2c0:	f240 80bf 	bls.w	800e442 <uxr_write_framed_msg+0x21a>
 800e2c4:	2a29      	cmp	r2, #41	; 0x29
 800e2c6:	f200 809c 	bhi.w	800e402 <uxr_write_framed_msg+0x1da>
 800e2ca:	1c50      	adds	r0, r2, #1
 800e2cc:	18a1      	adds	r1, r4, r2
 800e2ce:	b2c2      	uxtb	r2, r0
 800e2d0:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800e2d4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e2d8:	ea8a 0303 	eor.w	r3, sl, r3
 800e2dc:	4988      	ldr	r1, [pc, #544]	; (800e500 <uxr_write_framed_msg+0x2d8>)
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e2e4:	f109 0901 	add.w	r9, r9, #1
 800e2e8:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 800e2ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ee:	454b      	cmp	r3, r9
 800e2f0:	d8e1      	bhi.n	800e2b6 <uxr_write_framed_msg+0x8e>
 800e2f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800e2f6:	fa5f f98a 	uxtb.w	r9, sl
 800e2fa:	9301      	str	r3, [sp, #4]
 800e2fc:	f04f 0b00 	mov.w	fp, #0
 800e300:	f88d 900c 	strb.w	r9, [sp, #12]
 800e304:	f88d 300d 	strb.w	r3, [sp, #13]
 800e308:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 800e30c:	fa5f f18a 	uxtb.w	r1, sl
 800e310:	2901      	cmp	r1, #1
 800e312:	d921      	bls.n	800e358 <uxr_write_framed_msg+0x130>
 800e314:	2a29      	cmp	r2, #41	; 0x29
 800e316:	f240 80a6 	bls.w	800e466 <uxr_write_framed_msg+0x23e>
 800e31a:	2500      	movs	r5, #0
 800e31c:	e000      	b.n	800e320 <uxr_write_framed_msg+0xf8>
 800e31e:	b160      	cbz	r0, 800e33a <uxr_write_framed_msg+0x112>
 800e320:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800e324:	1b52      	subs	r2, r2, r5
 800e326:	4643      	mov	r3, r8
 800e328:	4638      	mov	r0, r7
 800e32a:	4421      	add	r1, r4
 800e32c:	47b0      	blx	r6
 800e32e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800e332:	4405      	add	r5, r0
 800e334:	4295      	cmp	r5, r2
 800e336:	d3f2      	bcc.n	800e31e <uxr_write_framed_msg+0xf6>
 800e338:	d003      	beq.n	800e342 <uxr_write_framed_msg+0x11a>
 800e33a:	2000      	movs	r0, #0
 800e33c:	b005      	add	sp, #20
 800e33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e342:	f04f 0300 	mov.w	r3, #0
 800e346:	fa5f f18a 	uxtb.w	r1, sl
 800e34a:	2901      	cmp	r1, #1
 800e34c:	f04f 0200 	mov.w	r2, #0
 800e350:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e354:	f200 8087 	bhi.w	800e466 <uxr_write_framed_msg+0x23e>
 800e358:	1c51      	adds	r1, r2, #1
 800e35a:	b2c9      	uxtb	r1, r1
 800e35c:	2929      	cmp	r1, #41	; 0x29
 800e35e:	d8dc      	bhi.n	800e31a <uxr_write_framed_msg+0xf2>
 800e360:	1c91      	adds	r1, r2, #2
 800e362:	18a0      	adds	r0, r4, r2
 800e364:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800e368:	b2ca      	uxtb	r2, r1
 800e36a:	4659      	mov	r1, fp
 800e36c:	f089 0920 	eor.w	r9, r9, #32
 800e370:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 800e374:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800e378:	f04f 0b01 	mov.w	fp, #1
 800e37c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e380:	2900      	cmp	r1, #0
 800e382:	d17c      	bne.n	800e47e <uxr_write_framed_msg+0x256>
 800e384:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e388:	e7be      	b.n	800e308 <uxr_write_framed_msg+0xe0>
 800e38a:	461a      	mov	r2, r3
 800e38c:	2503      	movs	r5, #3
 800e38e:	2304      	movs	r3, #4
 800e390:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800e394:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e396:	4422      	add	r2, r4
 800e398:	b2c0      	uxtb	r0, r0
 800e39a:	f882 c038 	strb.w	ip, [r2, #56]	; 0x38
 800e39e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800e3a2:	4425      	add	r5, r4
 800e3a4:	f081 0120 	eor.w	r1, r1, #32
 800e3a8:	2a01      	cmp	r2, #1
 800e3aa:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
 800e3ae:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e3b2:	f63f af64 	bhi.w	800e27e <uxr_write_framed_msg+0x56>
 800e3b6:	217d      	movs	r1, #125	; 0x7d
 800e3b8:	18e2      	adds	r2, r4, r3
 800e3ba:	f080 0020 	eor.w	r0, r0, #32
 800e3be:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 800e3c2:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 800e3c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3c8:	3302      	adds	r3, #2
 800e3ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e3ce:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 800e3d2:	2a01      	cmp	r2, #1
 800e3d4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e3d8:	f63f af5f 	bhi.w	800e29a <uxr_write_framed_msg+0x72>
 800e3dc:	257d      	movs	r5, #125	; 0x7d
 800e3de:	18e0      	adds	r0, r4, r3
 800e3e0:	3302      	adds	r3, #2
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3e6:	f081 0120 	eor.w	r1, r1, #32
 800e3ea:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 800e3ee:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800e3f2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f47f af5a 	bne.w	800e2b0 <uxr_write_framed_msg+0x88>
 800e3fc:	4699      	mov	r9, r3
 800e3fe:	9301      	str	r3, [sp, #4]
 800e400:	e77c      	b.n	800e2fc <uxr_write_framed_msg+0xd4>
 800e402:	2500      	movs	r5, #0
 800e404:	e001      	b.n	800e40a <uxr_write_framed_msg+0x1e2>
 800e406:	2800      	cmp	r0, #0
 800e408:	d097      	beq.n	800e33a <uxr_write_framed_msg+0x112>
 800e40a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800e40e:	1b52      	subs	r2, r2, r5
 800e410:	4643      	mov	r3, r8
 800e412:	4638      	mov	r0, r7
 800e414:	4421      	add	r1, r4
 800e416:	47b0      	blx	r6
 800e418:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800e41c:	4405      	add	r5, r0
 800e41e:	4295      	cmp	r5, r2
 800e420:	d3f1      	bcc.n	800e406 <uxr_write_framed_msg+0x1de>
 800e422:	d18a      	bne.n	800e33a <uxr_write_framed_msg+0x112>
 800e424:	f04f 0300 	mov.w	r3, #0
 800e428:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e42e:	454b      	cmp	r3, r9
 800e430:	d95f      	bls.n	800e4f2 <uxr_write_framed_msg+0x2ca>
 800e432:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800e436:	2200      	movs	r2, #0
 800e438:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800e43c:	2901      	cmp	r1, #1
 800e43e:	f63f af41 	bhi.w	800e2c4 <uxr_write_framed_msg+0x9c>
 800e442:	1c51      	adds	r1, r2, #1
 800e444:	b2c9      	uxtb	r1, r1
 800e446:	2929      	cmp	r1, #41	; 0x29
 800e448:	d8db      	bhi.n	800e402 <uxr_write_framed_msg+0x1da>
 800e44a:	1c95      	adds	r5, r2, #2
 800e44c:	18a0      	adds	r0, r4, r2
 800e44e:	b2ea      	uxtb	r2, r5
 800e450:	f04f 057d 	mov.w	r5, #125	; 0x7d
 800e454:	f083 0120 	eor.w	r1, r3, #32
 800e458:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800e45c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 800e460:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e464:	e738      	b.n	800e2d8 <uxr_write_framed_msg+0xb0>
 800e466:	4659      	mov	r1, fp
 800e468:	1c55      	adds	r5, r2, #1
 800e46a:	18a0      	adds	r0, r4, r2
 800e46c:	b2ea      	uxtb	r2, r5
 800e46e:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 800e472:	f04f 0b01 	mov.w	fp, #1
 800e476:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800e47a:	2900      	cmp	r1, #0
 800e47c:	d082      	beq.n	800e384 <uxr_write_framed_msg+0x15c>
 800e47e:	2500      	movs	r5, #0
 800e480:	e002      	b.n	800e488 <uxr_write_framed_msg+0x260>
 800e482:	2800      	cmp	r0, #0
 800e484:	f43f af59 	beq.w	800e33a <uxr_write_framed_msg+0x112>
 800e488:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800e48c:	1b52      	subs	r2, r2, r5
 800e48e:	4643      	mov	r3, r8
 800e490:	4638      	mov	r0, r7
 800e492:	4421      	add	r1, r4
 800e494:	47b0      	blx	r6
 800e496:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800e49a:	4405      	add	r5, r0
 800e49c:	4295      	cmp	r5, r2
 800e49e:	d3f0      	bcc.n	800e482 <uxr_write_framed_msg+0x25a>
 800e4a0:	f47f af4b 	bne.w	800e33a <uxr_write_framed_msg+0x112>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4a8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e4ac:	b290      	uxth	r0, r2
 800e4ae:	b005      	add	sp, #20
 800e4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	257d      	movs	r5, #125	; 0x7d
 800e4b8:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 800e4bc:	f080 0020 	eor.w	r0, r0, #32
 800e4c0:	2a01      	cmp	r2, #1
 800e4c2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800e4c6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e4ca:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 800e4ce:	d803      	bhi.n	800e4d8 <uxr_write_framed_msg+0x2b0>
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	2504      	movs	r5, #4
 800e4d4:	2305      	movs	r3, #5
 800e4d6:	e75b      	b.n	800e390 <uxr_write_framed_msg+0x168>
 800e4d8:	2304      	movs	r3, #4
 800e4da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4dc:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 800e4e0:	b2d0      	uxtb	r0, r2
 800e4e2:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800e4e6:	2a01      	cmp	r2, #1
 800e4e8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800e4ec:	f63f aec7 	bhi.w	800e27e <uxr_write_framed_msg+0x56>
 800e4f0:	e761      	b.n	800e3b6 <uxr_write_framed_msg+0x18e>
 800e4f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	fa5f f98a 	uxtb.w	r9, sl
 800e4fc:	9301      	str	r3, [sp, #4]
 800e4fe:	e6fd      	b.n	800e2fc <uxr_write_framed_msg+0xd4>
 800e500:	08016480 	.word	0x08016480

0800e504 <uxr_framing_read_transport>:
 800e504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e508:	4604      	mov	r4, r0
 800e50a:	b083      	sub	sp, #12
 800e50c:	461f      	mov	r7, r3
 800e50e:	4689      	mov	r9, r1
 800e510:	4692      	mov	sl, r2
 800e512:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800e516:	f000 fc79 	bl	800ee0c <uxr_millis>
 800e51a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e51e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800e522:	4680      	mov	r8, r0
 800e524:	42b3      	cmp	r3, r6
 800e526:	d060      	beq.n	800e5ea <uxr_framing_read_transport+0xe6>
 800e528:	d81c      	bhi.n	800e564 <uxr_framing_read_transport+0x60>
 800e52a:	1e75      	subs	r5, r6, #1
 800e52c:	2600      	movs	r6, #0
 800e52e:	1aed      	subs	r5, r5, r3
 800e530:	b2ed      	uxtb	r5, r5
 800e532:	455d      	cmp	r5, fp
 800e534:	d81f      	bhi.n	800e576 <uxr_framing_read_transport+0x72>
 800e536:	19ab      	adds	r3, r5, r6
 800e538:	455b      	cmp	r3, fp
 800e53a:	bf84      	itt	hi
 800e53c:	ebab 0605 	subhi.w	r6, fp, r5
 800e540:	b2f6      	uxtbhi	r6, r6
 800e542:	b9ed      	cbnz	r5, 800e580 <uxr_framing_read_transport+0x7c>
 800e544:	f04f 0b00 	mov.w	fp, #0
 800e548:	f000 fc60 	bl	800ee0c <uxr_millis>
 800e54c:	eba0 0808 	sub.w	r8, r0, r8
 800e550:	4658      	mov	r0, fp
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	eba3 0308 	sub.w	r3, r3, r8
 800e558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e55c:	603b      	str	r3, [r7, #0]
 800e55e:	b003      	add	sp, #12
 800e560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e564:	2e00      	cmp	r6, #0
 800e566:	d048      	beq.n	800e5fa <uxr_framing_read_transport+0xf6>
 800e568:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 800e56c:	b2ed      	uxtb	r5, r5
 800e56e:	3e01      	subs	r6, #1
 800e570:	455d      	cmp	r5, fp
 800e572:	b2f6      	uxtb	r6, r6
 800e574:	d9df      	bls.n	800e536 <uxr_framing_read_transport+0x32>
 800e576:	fa5f f58b 	uxtb.w	r5, fp
 800e57a:	2600      	movs	r6, #0
 800e57c:	2d00      	cmp	r5, #0
 800e57e:	d0e1      	beq.n	800e544 <uxr_framing_read_transport+0x40>
 800e580:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e584:	3102      	adds	r1, #2
 800e586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e588:	462a      	mov	r2, r5
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	4421      	add	r1, r4
 800e590:	4650      	mov	r0, sl
 800e592:	47c8      	blx	r9
 800e594:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e598:	4a1b      	ldr	r2, [pc, #108]	; (800e608 <uxr_framing_read_transport+0x104>)
 800e59a:	4403      	add	r3, r0
 800e59c:	0859      	lsrs	r1, r3, #1
 800e59e:	fba2 2101 	umull	r2, r1, r2, r1
 800e5a2:	222a      	movs	r2, #42	; 0x2a
 800e5a4:	0889      	lsrs	r1, r1, #2
 800e5a6:	fb02 3111 	mls	r1, r2, r1, r3
 800e5aa:	4683      	mov	fp, r0
 800e5ac:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800e5b0:	2800      	cmp	r0, #0
 800e5b2:	d0c7      	beq.n	800e544 <uxr_framing_read_transport+0x40>
 800e5b4:	42a8      	cmp	r0, r5
 800e5b6:	d1c7      	bne.n	800e548 <uxr_framing_read_transport+0x44>
 800e5b8:	b31e      	cbz	r6, 800e602 <uxr_framing_read_transport+0xfe>
 800e5ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5bc:	3102      	adds	r1, #2
 800e5be:	4632      	mov	r2, r6
 800e5c0:	4421      	add	r1, r4
 800e5c2:	9300      	str	r3, [sp, #0]
 800e5c4:	4650      	mov	r0, sl
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	47c8      	blx	r9
 800e5ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e5ce:	4a0e      	ldr	r2, [pc, #56]	; (800e608 <uxr_framing_read_transport+0x104>)
 800e5d0:	1819      	adds	r1, r3, r0
 800e5d2:	084b      	lsrs	r3, r1, #1
 800e5d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e5d8:	222a      	movs	r2, #42	; 0x2a
 800e5da:	089b      	lsrs	r3, r3, #2
 800e5dc:	fb02 1313 	mls	r3, r2, r3, r1
 800e5e0:	eb00 0b05 	add.w	fp, r0, r5
 800e5e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e5e8:	e7ae      	b.n	800e548 <uxr_framing_read_transport+0x44>
 800e5ea:	2600      	movs	r6, #0
 800e5ec:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800e5f0:	85a6      	strh	r6, [r4, #44]	; 0x2c
 800e5f2:	d9c0      	bls.n	800e576 <uxr_framing_read_transport+0x72>
 800e5f4:	2102      	movs	r1, #2
 800e5f6:	2529      	movs	r5, #41	; 0x29
 800e5f8:	e7c5      	b.n	800e586 <uxr_framing_read_transport+0x82>
 800e5fa:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 800e5fe:	b2ed      	uxtb	r5, r5
 800e600:	e797      	b.n	800e532 <uxr_framing_read_transport+0x2e>
 800e602:	46ab      	mov	fp, r5
 800e604:	e7a0      	b.n	800e548 <uxr_framing_read_transport+0x44>
 800e606:	bf00      	nop
 800e608:	30c30c31 	.word	0x30c30c31

0800e60c <uxr_read_framed_msg>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 800e614:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 800e618:	4604      	mov	r4, r0
 800e61a:	42ae      	cmp	r6, r5
 800e61c:	461f      	mov	r7, r3
 800e61e:	4689      	mov	r9, r1
 800e620:	4692      	mov	sl, r2
 800e622:	b083      	sub	sp, #12
 800e624:	f000 8176 	beq.w	800e914 <uxr_read_framed_msg+0x308>
 800e628:	7823      	ldrb	r3, [r4, #0]
 800e62a:	4ec7      	ldr	r6, [pc, #796]	; (800e948 <uxr_read_framed_msg+0x33c>)
 800e62c:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800e94c <uxr_read_framed_msg+0x340>
 800e630:	2b07      	cmp	r3, #7
 800e632:	d8fd      	bhi.n	800e630 <uxr_read_framed_msg+0x24>
 800e634:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e638:	00ee010d 	.word	0x00ee010d
 800e63c:	00b100ce 	.word	0x00b100ce
 800e640:	004d0088 	.word	0x004d0088
 800e644:	00080030 	.word	0x00080030
 800e648:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e64c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e650:	429a      	cmp	r2, r3
 800e652:	f000 813a 	beq.w	800e8ca <uxr_read_framed_msg+0x2be>
 800e656:	18e1      	adds	r1, r4, r3
 800e658:	7889      	ldrb	r1, [r1, #2]
 800e65a:	202a      	movs	r0, #42	; 0x2a
 800e65c:	297d      	cmp	r1, #125	; 0x7d
 800e65e:	f000 81b0 	beq.w	800e9c2 <uxr_read_framed_msg+0x3b6>
 800e662:	3301      	adds	r3, #1
 800e664:	085a      	lsrs	r2, r3, #1
 800e666:	fba6 5202 	umull	r5, r2, r6, r2
 800e66a:	0892      	lsrs	r2, r2, #2
 800e66c:	fb00 3312 	mls	r3, r0, r2, r3
 800e670:	297e      	cmp	r1, #126	; 0x7e
 800e672:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e676:	f000 8244 	beq.w	800eb02 <uxr_read_framed_msg+0x4f6>
 800e67a:	2000      	movs	r0, #0
 800e67c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e67e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800e680:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e684:	b29b      	uxth	r3, r3
 800e686:	429a      	cmp	r2, r3
 800e688:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e68a:	7020      	strb	r0, [r4, #0]
 800e68c:	f000 8176 	beq.w	800e97c <uxr_read_framed_msg+0x370>
 800e690:	2000      	movs	r0, #0
 800e692:	b003      	add	sp, #12
 800e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e698:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e69c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	f000 8121 	beq.w	800e8e8 <uxr_read_framed_msg+0x2dc>
 800e6a6:	18e1      	adds	r1, r4, r3
 800e6a8:	7889      	ldrb	r1, [r1, #2]
 800e6aa:	202a      	movs	r0, #42	; 0x2a
 800e6ac:	297d      	cmp	r1, #125	; 0x7d
 800e6ae:	f000 816d 	beq.w	800e98c <uxr_read_framed_msg+0x380>
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	085a      	lsrs	r2, r3, #1
 800e6b6:	fba6 5202 	umull	r5, r2, r6, r2
 800e6ba:	0892      	lsrs	r2, r2, #2
 800e6bc:	fb00 3312 	mls	r3, r0, r2, r3
 800e6c0:	297e      	cmp	r1, #126	; 0x7e
 800e6c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e6c6:	f000 820c 	beq.w	800eae2 <uxr_read_framed_msg+0x4d6>
 800e6ca:	2307      	movs	r3, #7
 800e6cc:	86a1      	strh	r1, [r4, #52]	; 0x34
 800e6ce:	7023      	strb	r3, [r4, #0]
 800e6d0:	e7ae      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e6d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e6d4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800e6d8:	459e      	cmp	lr, r3
 800e6da:	d930      	bls.n	800e73e <uxr_read_framed_msg+0x132>
 800e6dc:	252a      	movs	r5, #42	; 0x2a
 800e6de:	e021      	b.n	800e724 <uxr_read_framed_msg+0x118>
 800e6e0:	7889      	ldrb	r1, [r1, #2]
 800e6e2:	297d      	cmp	r1, #125	; 0x7d
 800e6e4:	f000 80d1 	beq.w	800e88a <uxr_read_framed_msg+0x27e>
 800e6e8:	fba6 2000 	umull	r2, r0, r6, r0
 800e6ec:	0880      	lsrs	r0, r0, #2
 800e6ee:	fb05 c010 	mls	r0, r5, r0, ip
 800e6f2:	297e      	cmp	r1, #126	; 0x7e
 800e6f4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800e6f8:	f000 80c4 	beq.w	800e884 <uxr_read_framed_msg+0x278>
 800e6fc:	54f9      	strb	r1, [r7, r3]
 800e6fe:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800e702:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e704:	ea8c 0001 	eor.w	r0, ip, r1
 800e708:	b2c0      	uxtb	r0, r0
 800e70a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
 800e70e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 800e712:	3301      	adds	r3, #1
 800e714:	b29b      	uxth	r3, r3
 800e716:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 800e71a:	4573      	cmp	r3, lr
 800e71c:	86e2      	strh	r2, [r4, #54]	; 0x36
 800e71e:	8663      	strh	r3, [r4, #50]	; 0x32
 800e720:	f080 8116 	bcs.w	800e950 <uxr_read_framed_msg+0x344>
 800e724:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e728:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 800e72c:	f102 0c01 	add.w	ip, r2, #1
 800e730:	4593      	cmp	fp, r2
 800e732:	ea4f 005c 	mov.w	r0, ip, lsr #1
 800e736:	eb04 0102 	add.w	r1, r4, r2
 800e73a:	d1d1      	bne.n	800e6e0 <uxr_read_framed_msg+0xd4>
 800e73c:	459e      	cmp	lr, r3
 800e73e:	f040 810b 	bne.w	800e958 <uxr_read_framed_msg+0x34c>
 800e742:	2306      	movs	r3, #6
 800e744:	7023      	strb	r3, [r4, #0]
 800e746:	e773      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e748:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e74c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e750:	429a      	cmp	r2, r3
 800e752:	f000 80ba 	beq.w	800e8ca <uxr_read_framed_msg+0x2be>
 800e756:	18e1      	adds	r1, r4, r3
 800e758:	7889      	ldrb	r1, [r1, #2]
 800e75a:	202a      	movs	r0, #42	; 0x2a
 800e75c:	297d      	cmp	r1, #125	; 0x7d
 800e75e:	f000 818a 	beq.w	800ea76 <uxr_read_framed_msg+0x46a>
 800e762:	3301      	adds	r3, #1
 800e764:	085a      	lsrs	r2, r3, #1
 800e766:	fba6 5202 	umull	r5, r2, r6, r2
 800e76a:	0892      	lsrs	r2, r2, #2
 800e76c:	fb00 3212 	mls	r2, r0, r2, r3
 800e770:	297e      	cmp	r1, #126	; 0x7e
 800e772:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e776:	f000 81c4 	beq.w	800eb02 <uxr_read_framed_msg+0x4f6>
 800e77a:	2000      	movs	r0, #0
 800e77c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e77e:	8660      	strh	r0, [r4, #50]	; 0x32
 800e780:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e784:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e786:	b29b      	uxth	r3, r3
 800e788:	428b      	cmp	r3, r1
 800e78a:	8623      	strh	r3, [r4, #48]	; 0x30
 800e78c:	86e0      	strh	r0, [r4, #54]	; 0x36
 800e78e:	f240 80d8 	bls.w	800e942 <uxr_read_framed_msg+0x336>
 800e792:	7020      	strb	r0, [r4, #0]
 800e794:	b003      	add	sp, #12
 800e796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e79a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800e79e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	f000 80a0 	beq.w	800e8e8 <uxr_read_framed_msg+0x2dc>
 800e7a8:	18e1      	adds	r1, r4, r3
 800e7aa:	7889      	ldrb	r1, [r1, #2]
 800e7ac:	202a      	movs	r0, #42	; 0x2a
 800e7ae:	297d      	cmp	r1, #125	; 0x7d
 800e7b0:	f000 817c 	beq.w	800eaac <uxr_read_framed_msg+0x4a0>
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	085a      	lsrs	r2, r3, #1
 800e7b8:	fba6 5202 	umull	r5, r2, r6, r2
 800e7bc:	0892      	lsrs	r2, r2, #2
 800e7be:	fb00 3312 	mls	r3, r0, r2, r3
 800e7c2:	297e      	cmp	r1, #126	; 0x7e
 800e7c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e7c8:	f000 818b 	beq.w	800eae2 <uxr_read_framed_msg+0x4d6>
 800e7cc:	2304      	movs	r3, #4
 800e7ce:	8621      	strh	r1, [r4, #48]	; 0x30
 800e7d0:	7023      	strb	r3, [r4, #0]
 800e7d2:	e72d      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e7d4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800e7d8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e7dc:	4291      	cmp	r1, r2
 800e7de:	f000 80ae 	beq.w	800e93e <uxr_read_framed_msg+0x332>
 800e7e2:	18a3      	adds	r3, r4, r2
 800e7e4:	7898      	ldrb	r0, [r3, #2]
 800e7e6:	287d      	cmp	r0, #125	; 0x7d
 800e7e8:	f000 8107 	beq.w	800e9fa <uxr_read_framed_msg+0x3ee>
 800e7ec:	232a      	movs	r3, #42	; 0x2a
 800e7ee:	3201      	adds	r2, #1
 800e7f0:	0851      	lsrs	r1, r2, #1
 800e7f2:	fba6 5101 	umull	r5, r1, r6, r1
 800e7f6:	0889      	lsrs	r1, r1, #2
 800e7f8:	fb03 2211 	mls	r2, r3, r1, r2
 800e7fc:	287e      	cmp	r0, #126	; 0x7e
 800e7fe:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e802:	f000 8180 	beq.w	800eb06 <uxr_read_framed_msg+0x4fa>
 800e806:	7863      	ldrb	r3, [r4, #1]
 800e808:	4283      	cmp	r3, r0
 800e80a:	bf0c      	ite	eq
 800e80c:	2303      	moveq	r3, #3
 800e80e:	2300      	movne	r3, #0
 800e810:	7023      	strb	r3, [r4, #0]
 800e812:	e70d      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e814:	2200      	movs	r2, #0
 800e816:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800e81a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 800e81e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800e822:	4288      	cmp	r0, r1
 800e824:	d062      	beq.n	800e8ec <uxr_read_framed_msg+0x2e0>
 800e826:	1862      	adds	r2, r4, r1
 800e828:	7892      	ldrb	r2, [r2, #2]
 800e82a:	2a7d      	cmp	r2, #125	; 0x7d
 800e82c:	f000 8100 	beq.w	800ea30 <uxr_read_framed_msg+0x424>
 800e830:	202a      	movs	r0, #42	; 0x2a
 800e832:	3101      	adds	r1, #1
 800e834:	084b      	lsrs	r3, r1, #1
 800e836:	fba6 5303 	umull	r5, r3, r6, r3
 800e83a:	089b      	lsrs	r3, r3, #2
 800e83c:	fb00 1313 	mls	r3, r0, r3, r1
 800e840:	2a7e      	cmp	r2, #126	; 0x7e
 800e842:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800e846:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e84a:	d04f      	beq.n	800e8ec <uxr_read_framed_msg+0x2e0>
 800e84c:	2302      	movs	r3, #2
 800e84e:	7023      	strb	r3, [r4, #0]
 800e850:	e6ee      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e852:	252a      	movs	r5, #42	; 0x2a
 800e854:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800e858:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e85c:	f103 0c01 	add.w	ip, r3, #1
 800e860:	4298      	cmp	r0, r3
 800e862:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800e866:	eb04 0103 	add.w	r1, r4, r3
 800e86a:	f43f af11 	beq.w	800e690 <uxr_read_framed_msg+0x84>
 800e86e:	fba6 3202 	umull	r3, r2, r6, r2
 800e872:	0892      	lsrs	r2, r2, #2
 800e874:	fb05 c212 	mls	r2, r5, r2, ip
 800e878:	7889      	ldrb	r1, [r1, #2]
 800e87a:	b2d3      	uxtb	r3, r2
 800e87c:	297e      	cmp	r1, #126	; 0x7e
 800e87e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800e882:	d1eb      	bne.n	800e85c <uxr_read_framed_msg+0x250>
 800e884:	2301      	movs	r3, #1
 800e886:	7023      	strb	r3, [r4, #0]
 800e888:	e6d2      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e88a:	f102 0c01 	add.w	ip, r2, #1
 800e88e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800e892:	fba6 0101 	umull	r0, r1, r6, r1
 800e896:	0889      	lsrs	r1, r1, #2
 800e898:	fb05 c111 	mls	r1, r5, r1, ip
 800e89c:	eb04 0c01 	add.w	ip, r4, r1
 800e8a0:	b2c9      	uxtb	r1, r1
 800e8a2:	3202      	adds	r2, #2
 800e8a4:	458b      	cmp	fp, r1
 800e8a6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 800e8aa:	f43f af47 	beq.w	800e73c <uxr_read_framed_msg+0x130>
 800e8ae:	fba6 1000 	umull	r1, r0, r6, r0
 800e8b2:	0880      	lsrs	r0, r0, #2
 800e8b4:	fb05 2210 	mls	r2, r5, r0, r2
 800e8b8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800e8bc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e8c0:	297e      	cmp	r1, #126	; 0x7e
 800e8c2:	d036      	beq.n	800e932 <uxr_read_framed_msg+0x326>
 800e8c4:	f081 0120 	eor.w	r1, r1, #32
 800e8c8:	e718      	b.n	800e6fc <uxr_read_framed_msg+0xf0>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8ce:	4649      	mov	r1, r9
 800e8d0:	e9cd 2300 	strd	r2, r3, [sp]
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	4652      	mov	r2, sl
 800e8d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8da:	f7ff fe13 	bl	800e504 <uxr_framing_read_transport>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f aed6 	beq.w	800e690 <uxr_read_framed_msg+0x84>
 800e8e4:	7823      	ldrb	r3, [r4, #0]
 800e8e6:	e6a3      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	e7ef      	b.n	800e8cc <uxr_read_framed_msg+0x2c0>
 800e8ec:	2304      	movs	r3, #4
 800e8ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8f0:	4649      	mov	r1, r9
 800e8f2:	e9cd 2300 	strd	r2, r3, [sp]
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4652      	mov	r2, sl
 800e8fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8fc:	f7ff fe02 	bl	800e504 <uxr_framing_read_transport>
 800e900:	2800      	cmp	r0, #0
 800e902:	d1ef      	bne.n	800e8e4 <uxr_read_framed_msg+0x2d8>
 800e904:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800e908:	387e      	subs	r0, #126	; 0x7e
 800e90a:	bf18      	it	ne
 800e90c:	2001      	movne	r0, #1
 800e90e:	2800      	cmp	r0, #0
 800e910:	d0e8      	beq.n	800e8e4 <uxr_read_framed_msg+0x2d8>
 800e912:	e6bd      	b.n	800e690 <uxr_read_framed_msg+0x84>
 800e914:	2305      	movs	r3, #5
 800e916:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e918:	e9cd 5300 	strd	r5, r3, [sp]
 800e91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e91e:	f7ff fdf1 	bl	800e504 <uxr_framing_read_transport>
 800e922:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800e926:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e92a:	429a      	cmp	r2, r3
 800e92c:	f43f aeb0 	beq.w	800e690 <uxr_read_framed_msg+0x84>
 800e930:	e67a      	b.n	800e628 <uxr_read_framed_msg+0x1c>
 800e932:	459e      	cmp	lr, r3
 800e934:	f43f af05 	beq.w	800e742 <uxr_read_framed_msg+0x136>
 800e938:	2301      	movs	r3, #1
 800e93a:	7023      	strb	r3, [r4, #0]
 800e93c:	e678      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e93e:	2303      	movs	r3, #3
 800e940:	e7c4      	b.n	800e8cc <uxr_read_framed_msg+0x2c0>
 800e942:	2305      	movs	r3, #5
 800e944:	7023      	strb	r3, [r4, #0]
 800e946:	e673      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800e948:	30c30c31 	.word	0x30c30c31
 800e94c:	08016480 	.word	0x08016480
 800e950:	f43f aef7 	beq.w	800e742 <uxr_read_framed_msg+0x136>
 800e954:	297e      	cmp	r1, #126	; 0x7e
 800e956:	d095      	beq.n	800e884 <uxr_read_framed_msg+0x278>
 800e958:	ebae 0303 	sub.w	r3, lr, r3
 800e95c:	3302      	adds	r3, #2
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e962:	4652      	mov	r2, sl
 800e964:	9300      	str	r3, [sp, #0]
 800e966:	4649      	mov	r1, r9
 800e968:	4620      	mov	r0, r4
 800e96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e96c:	f7ff fdca 	bl	800e504 <uxr_framing_read_transport>
 800e970:	fab0 f080 	clz	r0, r0
 800e974:	0940      	lsrs	r0, r0, #5
 800e976:	2800      	cmp	r0, #0
 800e978:	d0b4      	beq.n	800e8e4 <uxr_read_framed_msg+0x2d8>
 800e97a:	e689      	b.n	800e690 <uxr_read_framed_msg+0x84>
 800e97c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800e980:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e982:	7013      	strb	r3, [r2, #0]
 800e984:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800e986:	b003      	add	sp, #12
 800e988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98c:	1c5d      	adds	r5, r3, #1
 800e98e:	0869      	lsrs	r1, r5, #1
 800e990:	fba6 c101 	umull	ip, r1, r6, r1
 800e994:	0889      	lsrs	r1, r1, #2
 800e996:	fb00 5111 	mls	r1, r0, r1, r5
 800e99a:	b2cd      	uxtb	r5, r1
 800e99c:	42aa      	cmp	r2, r5
 800e99e:	d0a3      	beq.n	800e8e8 <uxr_read_framed_msg+0x2dc>
 800e9a0:	3302      	adds	r3, #2
 800e9a2:	085a      	lsrs	r2, r3, #1
 800e9a4:	fba6 5202 	umull	r5, r2, r6, r2
 800e9a8:	0892      	lsrs	r2, r2, #2
 800e9aa:	fb00 3212 	mls	r2, r0, r2, r3
 800e9ae:	1863      	adds	r3, r4, r1
 800e9b0:	7899      	ldrb	r1, [r3, #2]
 800e9b2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e9b6:	297e      	cmp	r1, #126	; 0x7e
 800e9b8:	f000 8093 	beq.w	800eae2 <uxr_read_framed_msg+0x4d6>
 800e9bc:	f081 0120 	eor.w	r1, r1, #32
 800e9c0:	e683      	b.n	800e6ca <uxr_read_framed_msg+0xbe>
 800e9c2:	1c5d      	adds	r5, r3, #1
 800e9c4:	0869      	lsrs	r1, r5, #1
 800e9c6:	fba6 c101 	umull	ip, r1, r6, r1
 800e9ca:	0889      	lsrs	r1, r1, #2
 800e9cc:	fb00 5111 	mls	r1, r0, r1, r5
 800e9d0:	b2cd      	uxtb	r5, r1
 800e9d2:	42aa      	cmp	r2, r5
 800e9d4:	f43f af79 	beq.w	800e8ca <uxr_read_framed_msg+0x2be>
 800e9d8:	3302      	adds	r3, #2
 800e9da:	085a      	lsrs	r2, r3, #1
 800e9dc:	fba6 5202 	umull	r5, r2, r6, r2
 800e9e0:	0892      	lsrs	r2, r2, #2
 800e9e2:	fb00 3212 	mls	r2, r0, r2, r3
 800e9e6:	1863      	adds	r3, r4, r1
 800e9e8:	789b      	ldrb	r3, [r3, #2]
 800e9ea:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800e9ee:	2b7e      	cmp	r3, #126	; 0x7e
 800e9f0:	f000 8087 	beq.w	800eb02 <uxr_read_framed_msg+0x4f6>
 800e9f4:	f083 0120 	eor.w	r1, r3, #32
 800e9f8:	e63f      	b.n	800e67a <uxr_read_framed_msg+0x6e>
 800e9fa:	202a      	movs	r0, #42	; 0x2a
 800e9fc:	1c55      	adds	r5, r2, #1
 800e9fe:	086b      	lsrs	r3, r5, #1
 800ea00:	fba6 c303 	umull	ip, r3, r6, r3
 800ea04:	089b      	lsrs	r3, r3, #2
 800ea06:	fb00 5313 	mls	r3, r0, r3, r5
 800ea0a:	b2dd      	uxtb	r5, r3
 800ea0c:	42a9      	cmp	r1, r5
 800ea0e:	d096      	beq.n	800e93e <uxr_read_framed_msg+0x332>
 800ea10:	3202      	adds	r2, #2
 800ea12:	0851      	lsrs	r1, r2, #1
 800ea14:	fba6 5101 	umull	r5, r1, r6, r1
 800ea18:	0889      	lsrs	r1, r1, #2
 800ea1a:	fb00 2211 	mls	r2, r0, r1, r2
 800ea1e:	4423      	add	r3, r4
 800ea20:	789b      	ldrb	r3, [r3, #2]
 800ea22:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800ea26:	2b7e      	cmp	r3, #126	; 0x7e
 800ea28:	d06d      	beq.n	800eb06 <uxr_read_framed_msg+0x4fa>
 800ea2a:	f083 0020 	eor.w	r0, r3, #32
 800ea2e:	e6ea      	b.n	800e806 <uxr_read_framed_msg+0x1fa>
 800ea30:	252a      	movs	r5, #42	; 0x2a
 800ea32:	f101 0c01 	add.w	ip, r1, #1
 800ea36:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ea3a:	fba6 2303 	umull	r2, r3, r6, r3
 800ea3e:	089a      	lsrs	r2, r3, #2
 800ea40:	fb05 c212 	mls	r2, r5, r2, ip
 800ea44:	b2d3      	uxtb	r3, r2
 800ea46:	4298      	cmp	r0, r3
 800ea48:	f43f af50 	beq.w	800e8ec <uxr_read_framed_msg+0x2e0>
 800ea4c:	1c8b      	adds	r3, r1, #2
 800ea4e:	0859      	lsrs	r1, r3, #1
 800ea50:	fba6 0101 	umull	r0, r1, r6, r1
 800ea54:	0889      	lsrs	r1, r1, #2
 800ea56:	fb05 3111 	mls	r1, r5, r1, r3
 800ea5a:	18a3      	adds	r3, r4, r2
 800ea5c:	789b      	ldrb	r3, [r3, #2]
 800ea5e:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 800ea62:	2b7e      	cmp	r3, #126	; 0x7e
 800ea64:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800ea68:	f43f af40 	beq.w	800e8ec <uxr_read_framed_msg+0x2e0>
 800ea6c:	f083 0320 	eor.w	r3, r3, #32
 800ea70:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800ea74:	e6ea      	b.n	800e84c <uxr_read_framed_msg+0x240>
 800ea76:	1c5d      	adds	r5, r3, #1
 800ea78:	0869      	lsrs	r1, r5, #1
 800ea7a:	fba6 c101 	umull	ip, r1, r6, r1
 800ea7e:	0889      	lsrs	r1, r1, #2
 800ea80:	fb00 5111 	mls	r1, r0, r1, r5
 800ea84:	b2cd      	uxtb	r5, r1
 800ea86:	42aa      	cmp	r2, r5
 800ea88:	f43f af1f 	beq.w	800e8ca <uxr_read_framed_msg+0x2be>
 800ea8c:	3302      	adds	r3, #2
 800ea8e:	085a      	lsrs	r2, r3, #1
 800ea90:	fba6 5202 	umull	r5, r2, r6, r2
 800ea94:	0892      	lsrs	r2, r2, #2
 800ea96:	fb00 3212 	mls	r2, r0, r2, r3
 800ea9a:	1863      	adds	r3, r4, r1
 800ea9c:	789b      	ldrb	r3, [r3, #2]
 800ea9e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800eaa2:	2b7e      	cmp	r3, #126	; 0x7e
 800eaa4:	d02d      	beq.n	800eb02 <uxr_read_framed_msg+0x4f6>
 800eaa6:	f083 0120 	eor.w	r1, r3, #32
 800eaaa:	e666      	b.n	800e77a <uxr_read_framed_msg+0x16e>
 800eaac:	1c5d      	adds	r5, r3, #1
 800eaae:	0869      	lsrs	r1, r5, #1
 800eab0:	fba6 c101 	umull	ip, r1, r6, r1
 800eab4:	0889      	lsrs	r1, r1, #2
 800eab6:	fb00 5111 	mls	r1, r0, r1, r5
 800eaba:	b2cd      	uxtb	r5, r1
 800eabc:	42aa      	cmp	r2, r5
 800eabe:	f43f af13 	beq.w	800e8e8 <uxr_read_framed_msg+0x2dc>
 800eac2:	3302      	adds	r3, #2
 800eac4:	085a      	lsrs	r2, r3, #1
 800eac6:	fba6 5202 	umull	r5, r2, r6, r2
 800eaca:	0892      	lsrs	r2, r2, #2
 800eacc:	fb00 3212 	mls	r2, r0, r2, r3
 800ead0:	1863      	adds	r3, r4, r1
 800ead2:	7899      	ldrb	r1, [r3, #2]
 800ead4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800ead8:	297e      	cmp	r1, #126	; 0x7e
 800eada:	d002      	beq.n	800eae2 <uxr_read_framed_msg+0x4d6>
 800eadc:	f081 0120 	eor.w	r1, r1, #32
 800eae0:	e674      	b.n	800e7cc <uxr_read_framed_msg+0x1c0>
 800eae2:	2302      	movs	r3, #2
 800eae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eae6:	4649      	mov	r1, r9
 800eae8:	e9cd 2300 	strd	r2, r3, [sp]
 800eaec:	4620      	mov	r0, r4
 800eaee:	4652      	mov	r2, sl
 800eaf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eaf2:	f7ff fd07 	bl	800e504 <uxr_framing_read_transport>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	f47f aef4 	bne.w	800e8e4 <uxr_read_framed_msg+0x2d8>
 800eafc:	2301      	movs	r3, #1
 800eafe:	7023      	strb	r3, [r4, #0]
 800eb00:	e596      	b.n	800e630 <uxr_read_framed_msg+0x24>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e7ee      	b.n	800eae4 <uxr_read_framed_msg+0x4d8>
 800eb06:	2303      	movs	r3, #3
 800eb08:	e7ec      	b.n	800eae4 <uxr_read_framed_msg+0x4d8>
 800eb0a:	bf00      	nop

0800eb0c <uxr_stream_id>:
 800eb0c:	b430      	push	{r4, r5}
 800eb0e:	2901      	cmp	r1, #1
 800eb10:	4604      	mov	r4, r0
 800eb12:	b082      	sub	sp, #8
 800eb14:	d01e      	beq.n	800eb54 <uxr_stream_id+0x48>
 800eb16:	2902      	cmp	r1, #2
 800eb18:	f04f 0500 	mov.w	r5, #0
 800eb1c:	d01d      	beq.n	800eb5a <uxr_stream_id+0x4e>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	4618      	mov	r0, r3
 800eb22:	f365 0307 	bfi	r3, r5, #0, #8
 800eb26:	f364 230f 	bfi	r3, r4, #8, #8
 800eb2a:	f361 4317 	bfi	r3, r1, #16, #8
 800eb2e:	f362 631f 	bfi	r3, r2, #24, #8
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	f362 0007 	bfi	r0, r2, #0, #8
 800eb38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eb3c:	f362 200f 	bfi	r0, r2, #8, #8
 800eb40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb44:	f362 4017 	bfi	r0, r2, #16, #8
 800eb48:	0e1b      	lsrs	r3, r3, #24
 800eb4a:	f363 601f 	bfi	r0, r3, #24, #8
 800eb4e:	b002      	add	sp, #8
 800eb50:	bc30      	pop	{r4, r5}
 800eb52:	4770      	bx	lr
 800eb54:	1c45      	adds	r5, r0, #1
 800eb56:	b2ed      	uxtb	r5, r5
 800eb58:	e7e1      	b.n	800eb1e <uxr_stream_id+0x12>
 800eb5a:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 800eb5e:	e7de      	b.n	800eb1e <uxr_stream_id+0x12>

0800eb60 <uxr_stream_id_from_raw>:
 800eb60:	b430      	push	{r4, r5}
 800eb62:	4602      	mov	r2, r0
 800eb64:	b082      	sub	sp, #8
 800eb66:	b128      	cbz	r0, 800eb74 <uxr_stream_id_from_raw+0x14>
 800eb68:	0603      	lsls	r3, r0, #24
 800eb6a:	d420      	bmi.n	800ebae <uxr_stream_id_from_raw+0x4e>
 800eb6c:	1e44      	subs	r4, r0, #1
 800eb6e:	2501      	movs	r5, #1
 800eb70:	b2e4      	uxtb	r4, r4
 800eb72:	e001      	b.n	800eb78 <uxr_stream_id_from_raw+0x18>
 800eb74:	4605      	mov	r5, r0
 800eb76:	4604      	mov	r4, r0
 800eb78:	2300      	movs	r3, #0
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f362 0307 	bfi	r3, r2, #0, #8
 800eb80:	f364 230f 	bfi	r3, r4, #8, #8
 800eb84:	f365 4317 	bfi	r3, r5, #16, #8
 800eb88:	f361 631f 	bfi	r3, r1, #24, #8
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	f362 0007 	bfi	r0, r2, #0, #8
 800eb92:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800eb96:	f362 200f 	bfi	r0, r2, #8, #8
 800eb9a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800eb9e:	f362 4017 	bfi	r0, r2, #16, #8
 800eba2:	0e1b      	lsrs	r3, r3, #24
 800eba4:	f363 601f 	bfi	r0, r3, #24, #8
 800eba8:	b002      	add	sp, #8
 800ebaa:	bc30      	pop	{r4, r5}
 800ebac:	4770      	bx	lr
 800ebae:	2502      	movs	r5, #2
 800ebb0:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800ebb4:	e7e0      	b.n	800eb78 <uxr_stream_id_from_raw+0x18>
 800ebb6:	bf00      	nop

0800ebb8 <uxr_init_stream_storage>:
 800ebb8:	2300      	movs	r3, #0
 800ebba:	7403      	strb	r3, [r0, #16]
 800ebbc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ebc0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800ebc4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop

0800ebcc <uxr_reset_stream_storage>:
 800ebcc:	b570      	push	{r4, r5, r6, lr}
 800ebce:	7c03      	ldrb	r3, [r0, #16]
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	b153      	cbz	r3, 800ebea <uxr_reset_stream_storage+0x1e>
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	2500      	movs	r5, #0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f004 fc4f 	bl	801347c <uxr_reset_output_best_effort_stream>
 800ebde:	7c23      	ldrb	r3, [r4, #16]
 800ebe0:	3501      	adds	r5, #1
 800ebe2:	42ab      	cmp	r3, r5
 800ebe4:	f106 0610 	add.w	r6, r6, #16
 800ebe8:	d8f6      	bhi.n	800ebd8 <uxr_reset_stream_storage+0xc>
 800ebea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ebee:	b163      	cbz	r3, 800ec0a <uxr_reset_stream_storage+0x3e>
 800ebf0:	2600      	movs	r6, #0
 800ebf2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f004 fa4c 	bl	8013094 <uxr_reset_input_best_effort_stream>
 800ebfc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ec00:	3601      	adds	r6, #1
 800ec02:	42b3      	cmp	r3, r6
 800ec04:	f105 0502 	add.w	r5, r5, #2
 800ec08:	d8f5      	bhi.n	800ebf6 <uxr_reset_stream_storage+0x2a>
 800ec0a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ec0e:	b163      	cbz	r3, 800ec2a <uxr_reset_stream_storage+0x5e>
 800ec10:	2600      	movs	r6, #0
 800ec12:	f104 0518 	add.w	r5, r4, #24
 800ec16:	4628      	mov	r0, r5
 800ec18:	f004 fcd0 	bl	80135bc <uxr_reset_output_reliable_stream>
 800ec1c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ec20:	3601      	adds	r6, #1
 800ec22:	42b3      	cmp	r3, r6
 800ec24:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800ec28:	d8f5      	bhi.n	800ec16 <uxr_reset_stream_storage+0x4a>
 800ec2a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800ec2e:	b163      	cbz	r3, 800ec4a <uxr_reset_stream_storage+0x7e>
 800ec30:	2600      	movs	r6, #0
 800ec32:	f104 0548 	add.w	r5, r4, #72	; 0x48
 800ec36:	4628      	mov	r0, r5
 800ec38:	f004 fa94 	bl	8013164 <uxr_reset_input_reliable_stream>
 800ec3c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800ec40:	3601      	adds	r6, #1
 800ec42:	42b3      	cmp	r3, r6
 800ec44:	f105 0518 	add.w	r5, r5, #24
 800ec48:	d8f5      	bhi.n	800ec36 <uxr_reset_stream_storage+0x6a>
 800ec4a:	bd70      	pop	{r4, r5, r6, pc}

0800ec4c <uxr_add_output_best_effort_buffer>:
 800ec4c:	b530      	push	{r4, r5, lr}
 800ec4e:	7c04      	ldrb	r4, [r0, #16]
 800ec50:	b083      	sub	sp, #12
 800ec52:	1c65      	adds	r5, r4, #1
 800ec54:	7405      	strb	r5, [r0, #16]
 800ec56:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ec5a:	f004 fc05 	bl	8013468 <uxr_init_output_best_effort_stream>
 800ec5e:	2201      	movs	r2, #1
 800ec60:	4620      	mov	r0, r4
 800ec62:	4611      	mov	r1, r2
 800ec64:	b003      	add	sp, #12
 800ec66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec6a:	f7ff bf4f 	b.w	800eb0c <uxr_stream_id>
 800ec6e:	bf00      	nop

0800ec70 <uxr_add_output_reliable_buffer>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800ec76:	b084      	sub	sp, #16
 800ec78:	1c66      	adds	r6, r4, #1
 800ec7a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800ec7e:	f89d 5020 	ldrb.w	r5, [sp, #32]
 800ec82:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 800ec86:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800ec8a:	3018      	adds	r0, #24
 800ec8c:	9500      	str	r5, [sp, #0]
 800ec8e:	f004 fc63 	bl	8013558 <uxr_init_output_reliable_stream>
 800ec92:	4620      	mov	r0, r4
 800ec94:	2201      	movs	r2, #1
 800ec96:	2102      	movs	r1, #2
 800ec98:	b004      	add	sp, #16
 800ec9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec9e:	f7ff bf35 	b.w	800eb0c <uxr_stream_id>
 800eca2:	bf00      	nop

0800eca4 <uxr_add_input_best_effort_buffer>:
 800eca4:	b510      	push	{r4, lr}
 800eca6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800ecaa:	b082      	sub	sp, #8
 800ecac:	1c62      	adds	r2, r4, #1
 800ecae:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800ecb2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800ecb6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ecba:	f004 f9e7 	bl	801308c <uxr_init_input_best_effort_stream>
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	b002      	add	sp, #8
 800ecc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecca:	f7ff bf1f 	b.w	800eb0c <uxr_stream_id>
 800ecce:	bf00      	nop

0800ecd0 <uxr_add_input_reliable_buffer>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	1c66      	adds	r6, r4, #1
 800ecda:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800ecde:	9d08      	ldr	r5, [sp, #32]
 800ece0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800ece4:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800ece8:	3048      	adds	r0, #72	; 0x48
 800ecea:	9500      	str	r5, [sp, #0]
 800ecec:	f004 fa16 	bl	801311c <uxr_init_input_reliable_stream>
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	b004      	add	sp, #16
 800ecf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecfc:	f7ff bf06 	b.w	800eb0c <uxr_stream_id>

0800ed00 <uxr_get_output_best_effort_stream>:
 800ed00:	7c03      	ldrb	r3, [r0, #16]
 800ed02:	428b      	cmp	r3, r1
 800ed04:	bf8c      	ite	hi
 800ed06:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ed0a:	2000      	movls	r0, #0
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop

0800ed10 <uxr_get_output_reliable_stream>:
 800ed10:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ed14:	428b      	cmp	r3, r1
 800ed16:	bf83      	ittte	hi
 800ed18:	eb01 0181 	addhi.w	r1, r1, r1, lsl #2
 800ed1c:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 800ed20:	3018      	addhi	r0, #24
 800ed22:	2000      	movls	r0, #0
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop

0800ed28 <uxr_get_input_best_effort_stream>:
 800ed28:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800ed2c:	428b      	cmp	r3, r1
 800ed2e:	bf86      	itte	hi
 800ed30:	3121      	addhi	r1, #33	; 0x21
 800ed32:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ed36:	2000      	movls	r0, #0
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop

0800ed3c <uxr_get_input_reliable_stream>:
 800ed3c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800ed40:	428b      	cmp	r3, r1
 800ed42:	bf83      	ittte	hi
 800ed44:	eb01 0141 	addhi.w	r1, r1, r1, lsl #1
 800ed48:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 800ed4c:	3048      	addhi	r0, #72	; 0x48
 800ed4e:	2000      	movls	r0, #0
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop

0800ed54 <uxr_output_streams_confirmed>:
 800ed54:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ed58:	b183      	cbz	r3, 800ed7c <uxr_output_streams_confirmed+0x28>
 800ed5a:	b570      	push	{r4, r5, r6, lr}
 800ed5c:	4606      	mov	r6, r0
 800ed5e:	2400      	movs	r4, #0
 800ed60:	f100 0518 	add.w	r5, r0, #24
 800ed64:	e001      	b.n	800ed6a <uxr_output_streams_confirmed+0x16>
 800ed66:	3528      	adds	r5, #40	; 0x28
 800ed68:	b138      	cbz	r0, 800ed7a <uxr_output_streams_confirmed+0x26>
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f004 fe88 	bl	8013a80 <uxr_is_output_up_to_date>
 800ed70:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800ed74:	3401      	adds	r4, #1
 800ed76:	42a3      	cmp	r3, r4
 800ed78:	d8f5      	bhi.n	800ed66 <uxr_output_streams_confirmed+0x12>
 800ed7a:	bd70      	pop	{r4, r5, r6, pc}
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	4770      	bx	lr

0800ed80 <uxr_buffer_submessage_header>:
 800ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed82:	460e      	mov	r6, r1
 800ed84:	2104      	movs	r1, #4
 800ed86:	4615      	mov	r5, r2
 800ed88:	4604      	mov	r4, r0
 800ed8a:	461f      	mov	r7, r3
 800ed8c:	f7fd fe6c 	bl	800ca68 <ucdr_align_to>
 800ed90:	2301      	movs	r3, #1
 800ed92:	4631      	mov	r1, r6
 800ed94:	ea47 0203 	orr.w	r2, r7, r3
 800ed98:	4620      	mov	r0, r4
 800ed9a:	7523      	strb	r3, [r4, #20]
 800ed9c:	462b      	mov	r3, r5
 800ed9e:	f000 fa2d 	bl	800f1fc <uxr_serialize_submessage_header>
 800eda2:	4620      	mov	r0, r4
 800eda4:	f7fd fe76 	bl	800ca94 <ucdr_buffer_remaining>
 800eda8:	42a8      	cmp	r0, r5
 800edaa:	bf34      	ite	cc
 800edac:	2000      	movcc	r0, #0
 800edae:	2001      	movcs	r0, #1
 800edb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb2:	bf00      	nop

0800edb4 <uxr_read_submessage_header>:
 800edb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb8:	4604      	mov	r4, r0
 800edba:	460d      	mov	r5, r1
 800edbc:	2104      	movs	r1, #4
 800edbe:	4616      	mov	r6, r2
 800edc0:	4698      	mov	r8, r3
 800edc2:	f7fd fe51 	bl	800ca68 <ucdr_align_to>
 800edc6:	4620      	mov	r0, r4
 800edc8:	f7fd fe64 	bl	800ca94 <ucdr_buffer_remaining>
 800edcc:	2803      	cmp	r0, #3
 800edce:	bf8c      	ite	hi
 800edd0:	2701      	movhi	r7, #1
 800edd2:	2700      	movls	r7, #0
 800edd4:	d802      	bhi.n	800eddc <uxr_read_submessage_header+0x28>
 800edd6:	4638      	mov	r0, r7
 800edd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eddc:	4633      	mov	r3, r6
 800edde:	4642      	mov	r2, r8
 800ede0:	4620      	mov	r0, r4
 800ede2:	4629      	mov	r1, r5
 800ede4:	f000 fa1c 	bl	800f220 <uxr_deserialize_submessage_header>
 800ede8:	f898 3000 	ldrb.w	r3, [r8]
 800edec:	4638      	mov	r0, r7
 800edee:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800edf2:	f003 0301 	and.w	r3, r3, #1
 800edf6:	f888 2000 	strb.w	r2, [r8]
 800edfa:	7523      	strb	r3, [r4, #20]
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee00 <uxr_submessage_padding>:
 800ee00:	f010 0003 	ands.w	r0, r0, #3
 800ee04:	bf18      	it	ne
 800ee06:	f1c0 0004 	rsbne	r0, r0, #4
 800ee0a:	4770      	bx	lr

0800ee0c <uxr_millis>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	4669      	mov	r1, sp
 800ee12:	2001      	movs	r0, #1
 800ee14:	f7f2 fe50 	bl	8001ab8 <clock_gettime>
 800ee18:	e9dd 0200 	ldrd	r0, r2, [sp]
 800ee1c:	4b07      	ldr	r3, [pc, #28]	; (800ee3c <uxr_millis+0x30>)
 800ee1e:	9c02      	ldr	r4, [sp, #8]
 800ee20:	fba0 0103 	umull	r0, r1, r0, r3
 800ee24:	fb03 1102 	mla	r1, r3, r2, r1
 800ee28:	1900      	adds	r0, r0, r4
 800ee2a:	f04f 0300 	mov.w	r3, #0
 800ee2e:	4a04      	ldr	r2, [pc, #16]	; (800ee40 <uxr_millis+0x34>)
 800ee30:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ee34:	f7f1 fc92 	bl	800075c <__aeabi_ldivmod>
 800ee38:	b004      	add	sp, #16
 800ee3a:	bd10      	pop	{r4, pc}
 800ee3c:	3b9aca00 	.word	0x3b9aca00
 800ee40:	000f4240 	.word	0x000f4240

0800ee44 <uxr_nanos>:
 800ee44:	b500      	push	{lr}
 800ee46:	b085      	sub	sp, #20
 800ee48:	4669      	mov	r1, sp
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	f7f2 fe34 	bl	8001ab8 <clock_gettime>
 800ee50:	e9dd 2000 	ldrd	r2, r0, [sp]
 800ee54:	4906      	ldr	r1, [pc, #24]	; (800ee70 <uxr_nanos+0x2c>)
 800ee56:	fba2 2301 	umull	r2, r3, r2, r1
 800ee5a:	fb01 3300 	mla	r3, r1, r0, r3
 800ee5e:	9802      	ldr	r0, [sp, #8]
 800ee60:	4684      	mov	ip, r0
 800ee62:	1810      	adds	r0, r2, r0
 800ee64:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 800ee68:	b005      	add	sp, #20
 800ee6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee6e:	bf00      	nop
 800ee70:	3b9aca00 	.word	0x3b9aca00

0800ee74 <on_full_output_buffer_fragmented>:
 800ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee78:	460c      	mov	r4, r1
 800ee7a:	b08a      	sub	sp, #40	; 0x28
 800ee7c:	4606      	mov	r6, r0
 800ee7e:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800ee82:	f104 0008 	add.w	r0, r4, #8
 800ee86:	f7ff ff43 	bl	800ed10 <uxr_get_output_reliable_stream>
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	f004 fe02 	bl	8013a94 <get_available_free_slots>
 800ee90:	b968      	cbnz	r0, 800eeae <on_full_output_buffer_fragmented+0x3a>
 800ee92:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800ee96:	4620      	mov	r0, r4
 800ee98:	4798      	blx	r3
 800ee9a:	b918      	cbnz	r0, 800eea4 <on_full_output_buffer_fragmented+0x30>
 800ee9c:	2001      	movs	r0, #1
 800ee9e:	b00a      	add	sp, #40	; 0x28
 800eea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea4:	4628      	mov	r0, r5
 800eea6:	f004 fdf5 	bl	8013a94 <get_available_free_slots>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d0f6      	beq.n	800ee9c <on_full_output_buffer_fragmented+0x28>
 800eeae:	892a      	ldrh	r2, [r5, #8]
 800eeb0:	89e8      	ldrh	r0, [r5, #14]
 800eeb2:	686b      	ldr	r3, [r5, #4]
 800eeb4:	fbb0 f1f2 	udiv	r1, r0, r2
 800eeb8:	fbb3 f8f2 	udiv	r8, r3, r2
 800eebc:	fb02 0111 	mls	r1, r2, r1, r0
 800eec0:	7b2b      	ldrb	r3, [r5, #12]
 800eec2:	b289      	uxth	r1, r1
 800eec4:	fb08 f101 	mul.w	r1, r8, r1
 800eec8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800eecc:	f1a8 0804 	sub.w	r8, r8, #4
 800eed0:	33fc      	adds	r3, #252	; 0xfc
 800eed2:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800eed6:	4443      	add	r3, r8
 800eed8:	682a      	ldr	r2, [r5, #0]
 800eeda:	b29f      	uxth	r7, r3
 800eedc:	1bc0      	subs	r0, r0, r7
 800eede:	3104      	adds	r1, #4
 800eee0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800eee4:	4411      	add	r1, r2
 800eee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeea:	4642      	mov	r2, r8
 800eeec:	9300      	str	r3, [sp, #0]
 800eeee:	a802      	add	r0, sp, #8
 800eef0:	2300      	movs	r3, #0
 800eef2:	f7fd fd8b 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800eef6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800eefa:	f102 0308 	add.w	r3, r2, #8
 800eefe:	4543      	cmp	r3, r8
 800ef00:	d928      	bls.n	800ef54 <on_full_output_buffer_fragmented+0xe0>
 800ef02:	463a      	mov	r2, r7
 800ef04:	2300      	movs	r3, #0
 800ef06:	210d      	movs	r1, #13
 800ef08:	a802      	add	r0, sp, #8
 800ef0a:	f7ff ff39 	bl	800ed80 <uxr_buffer_submessage_header>
 800ef0e:	8929      	ldrh	r1, [r5, #8]
 800ef10:	89e8      	ldrh	r0, [r5, #14]
 800ef12:	686b      	ldr	r3, [r5, #4]
 800ef14:	fbb0 f2f1 	udiv	r2, r0, r1
 800ef18:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef1c:	fb01 0212 	mls	r2, r1, r2, r0
 800ef20:	b292      	uxth	r2, r2
 800ef22:	fb03 f302 	mul.w	r3, r3, r2
 800ef26:	682a      	ldr	r2, [r5, #0]
 800ef28:	f842 8003 	str.w	r8, [r2, r3]
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	89e8      	ldrh	r0, [r5, #14]
 800ef30:	f004 fdd2 	bl	8013ad8 <uxr_seq_num_add>
 800ef34:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800ef38:	81e8      	strh	r0, [r5, #14]
 800ef3a:	1a52      	subs	r2, r2, r1
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7fd fd77 	bl	800ca30 <ucdr_init_buffer>
 800ef42:	4630      	mov	r0, r6
 800ef44:	4622      	mov	r2, r4
 800ef46:	490f      	ldr	r1, [pc, #60]	; (800ef84 <on_full_output_buffer_fragmented+0x110>)
 800ef48:	f7fd fd48 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	b00a      	add	sp, #40	; 0x28
 800ef50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef54:	2302      	movs	r3, #2
 800ef56:	210d      	movs	r1, #13
 800ef58:	b292      	uxth	r2, r2
 800ef5a:	a802      	add	r0, sp, #8
 800ef5c:	f7ff ff10 	bl	800ed80 <uxr_buffer_submessage_header>
 800ef60:	8929      	ldrh	r1, [r5, #8]
 800ef62:	89e8      	ldrh	r0, [r5, #14]
 800ef64:	686b      	ldr	r3, [r5, #4]
 800ef66:	fbb0 f2f1 	udiv	r2, r0, r1
 800ef6a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef6e:	fb01 0212 	mls	r2, r1, r2, r0
 800ef72:	b292      	uxth	r2, r2
 800ef74:	fb03 f302 	mul.w	r3, r3, r2
 800ef78:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800ef7c:	6829      	ldr	r1, [r5, #0]
 800ef7e:	3208      	adds	r2, #8
 800ef80:	50ca      	str	r2, [r1, r3]
 800ef82:	e7d3      	b.n	800ef2c <on_full_output_buffer_fragmented+0xb8>
 800ef84:	0800ee75 	.word	0x0800ee75

0800ef88 <uxr_prepare_output_stream>:
 800ef88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8a:	2407      	movs	r4, #7
 800ef8c:	2500      	movs	r5, #0
 800ef8e:	b087      	sub	sp, #28
 800ef90:	9202      	str	r2, [sp, #8]
 800ef92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef94:	e9cd 4500 	strd	r4, r5, [sp]
 800ef98:	3204      	adds	r2, #4
 800ef9a:	461c      	mov	r4, r3
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	9103      	str	r1, [sp, #12]
 800efa0:	f7fe ffda 	bl	800df58 <uxr_prepare_stream_to_write_submessage>
 800efa4:	f080 0201 	eor.w	r2, r0, #1
 800efa8:	b2d2      	uxtb	r2, r2
 800efaa:	75a2      	strb	r2, [r4, #22]
 800efac:	b112      	cbz	r2, 800efb4 <uxr_prepare_output_stream+0x2c>
 800efae:	4628      	mov	r0, r5
 800efb0:	b007      	add	sp, #28
 800efb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb4:	aa05      	add	r2, sp, #20
 800efb6:	9902      	ldr	r1, [sp, #8]
 800efb8:	4630      	mov	r0, r6
 800efba:	f7ff f8ff 	bl	800e1bc <uxr_init_base_object_request>
 800efbe:	4605      	mov	r5, r0
 800efc0:	a905      	add	r1, sp, #20
 800efc2:	4620      	mov	r0, r4
 800efc4:	f000 febc 	bl	800fd40 <uxr_serialize_WRITE_DATA_Payload_Data>
 800efc8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800efcc:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800efd0:	4620      	mov	r0, r4
 800efd2:	1a52      	subs	r2, r2, r1
 800efd4:	f7fd fd2c 	bl	800ca30 <ucdr_init_buffer>
 800efd8:	4620      	mov	r0, r4
 800efda:	463a      	mov	r2, r7
 800efdc:	4631      	mov	r1, r6
 800efde:	f7fd fcfd 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 800efe2:	4628      	mov	r0, r5
 800efe4:	b007      	add	sp, #28
 800efe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800efe8 <uxr_prepare_output_stream_fragmented>:
 800efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efec:	b093      	sub	sp, #76	; 0x4c
 800efee:	9107      	str	r1, [sp, #28]
 800eff0:	4605      	mov	r5, r0
 800eff2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800eff6:	3008      	adds	r0, #8
 800eff8:	9303      	str	r3, [sp, #12]
 800effa:	9206      	str	r2, [sp, #24]
 800effc:	f7ff fe88 	bl	800ed10 <uxr_get_output_reliable_stream>
 800f000:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f004:	2b01      	cmp	r3, #1
 800f006:	f000 8094 	beq.w	800f132 <uxr_prepare_output_stream_fragmented+0x14a>
 800f00a:	4604      	mov	r4, r0
 800f00c:	2800      	cmp	r0, #0
 800f00e:	f000 8090 	beq.w	800f132 <uxr_prepare_output_stream_fragmented+0x14a>
 800f012:	f004 fd3f 	bl	8013a94 <get_available_free_slots>
 800f016:	2800      	cmp	r0, #0
 800f018:	f000 8086 	beq.w	800f128 <uxr_prepare_output_stream_fragmented+0x140>
 800f01c:	8923      	ldrh	r3, [r4, #8]
 800f01e:	89e7      	ldrh	r7, [r4, #14]
 800f020:	6862      	ldr	r2, [r4, #4]
 800f022:	fbb7 f8f3 	udiv	r8, r7, r3
 800f026:	fbb2 f2f3 	udiv	r2, r2, r3
 800f02a:	fb03 7818 	mls	r8, r3, r8, r7
 800f02e:	fa1f f888 	uxth.w	r8, r8
 800f032:	fb02 f808 	mul.w	r8, r2, r8
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	f108 0804 	add.w	r8, r8, #4
 800f03c:	4498      	add	r8, r3
 800f03e:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800f042:	7b23      	ldrb	r3, [r4, #12]
 800f044:	9204      	str	r2, [sp, #16]
 800f046:	4553      	cmp	r3, sl
 800f048:	f1a2 0b04 	sub.w	fp, r2, #4
 800f04c:	d37d      	bcc.n	800f14a <uxr_prepare_output_stream_fragmented+0x162>
 800f04e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800f050:	f1ab 0904 	sub.w	r9, fp, #4
 800f054:	eba9 0903 	sub.w	r9, r9, r3
 800f058:	3608      	adds	r6, #8
 800f05a:	2300      	movs	r3, #0
 800f05c:	465a      	mov	r2, fp
 800f05e:	4641      	mov	r1, r8
 800f060:	a80a      	add	r0, sp, #40	; 0x28
 800f062:	f8cd a000 	str.w	sl, [sp]
 800f066:	fa1f f989 	uxth.w	r9, r9
 800f06a:	9605      	str	r6, [sp, #20]
 800f06c:	f7fd fcce 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 800f070:	455e      	cmp	r6, fp
 800f072:	bf34      	ite	cc
 800f074:	2302      	movcc	r3, #2
 800f076:	2300      	movcs	r3, #0
 800f078:	464a      	mov	r2, r9
 800f07a:	210d      	movs	r1, #13
 800f07c:	a80a      	add	r0, sp, #40	; 0x28
 800f07e:	f7ff fe7f 	bl	800ed80 <uxr_buffer_submessage_header>
 800f082:	8921      	ldrh	r1, [r4, #8]
 800f084:	6862      	ldr	r2, [r4, #4]
 800f086:	fbb7 f3f1 	udiv	r3, r7, r1
 800f08a:	fbb2 f2f1 	udiv	r2, r2, r1
 800f08e:	fb01 7313 	mls	r3, r1, r3, r7
 800f092:	b29b      	uxth	r3, r3
 800f094:	fb03 f302 	mul.w	r3, r3, r2
 800f098:	6822      	ldr	r2, [r4, #0]
 800f09a:	4638      	mov	r0, r7
 800f09c:	f842 b003 	str.w	fp, [r2, r3]
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	f004 fd19 	bl	8013ad8 <uxr_seq_num_add>
 800f0a6:	9b04      	ldr	r3, [sp, #16]
 800f0a8:	9e03      	ldr	r6, [sp, #12]
 800f0aa:	f1a3 0208 	sub.w	r2, r3, #8
 800f0ae:	f10a 0104 	add.w	r1, sl, #4
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	eba2 020a 	sub.w	r2, r2, sl
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	4441      	add	r1, r8
 800f0bc:	f7fd fcb8 	bl	800ca30 <ucdr_init_buffer>
 800f0c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f0c2:	2107      	movs	r1, #7
 800f0c4:	1d1a      	adds	r2, r3, #4
 800f0c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800f0ca:	bf28      	it	cs
 800f0cc:	2200      	movcs	r2, #0
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	81e7      	strh	r7, [r4, #14]
 800f0d2:	b292      	uxth	r2, r2
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	f7ff fe53 	bl	800ed80 <uxr_buffer_submessage_header>
 800f0da:	4628      	mov	r0, r5
 800f0dc:	9906      	ldr	r1, [sp, #24]
 800f0de:	aa09      	add	r2, sp, #36	; 0x24
 800f0e0:	f7ff f86c 	bl	800e1bc <uxr_init_base_object_request>
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	b328      	cbz	r0, 800f134 <uxr_prepare_output_stream_fragmented+0x14c>
 800f0e8:	9e03      	ldr	r6, [sp, #12]
 800f0ea:	a909      	add	r1, sp, #36	; 0x24
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f000 fe27 	bl	800fd40 <uxr_serialize_WRITE_DATA_Payload_Data>
 800f0f2:	68b1      	ldr	r1, [r6, #8]
 800f0f4:	6872      	ldr	r2, [r6, #4]
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	1a52      	subs	r2, r2, r1
 800f0fa:	f7fd fc99 	bl	800ca30 <ucdr_init_buffer>
 800f0fe:	9a05      	ldr	r2, [sp, #20]
 800f100:	9b07      	ldr	r3, [sp, #28]
 800f102:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800f106:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f108:	4630      	mov	r0, r6
 800f10a:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 800f10e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f110:	491a      	ldr	r1, [pc, #104]	; (800f17c <uxr_prepare_output_stream_fragmented+0x194>)
 800f112:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 800f116:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800f11a:	462a      	mov	r2, r5
 800f11c:	f7fd fc5e 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 800f120:	4620      	mov	r0, r4
 800f122:	b013      	add	sp, #76	; 0x4c
 800f124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f128:	4628      	mov	r0, r5
 800f12a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f12c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f12e:	4798      	blx	r3
 800f130:	b920      	cbnz	r0, 800f13c <uxr_prepare_output_stream_fragmented+0x154>
 800f132:	2400      	movs	r4, #0
 800f134:	4620      	mov	r0, r4
 800f136:	b013      	add	sp, #76	; 0x4c
 800f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13c:	4620      	mov	r0, r4
 800f13e:	f004 fca9 	bl	8013a94 <get_available_free_slots>
 800f142:	2800      	cmp	r0, #0
 800f144:	f47f af6a 	bne.w	800f01c <uxr_prepare_output_stream_fragmented+0x34>
 800f148:	e7f3      	b.n	800f132 <uxr_prepare_output_stream_fragmented+0x14a>
 800f14a:	4638      	mov	r0, r7
 800f14c:	2101      	movs	r1, #1
 800f14e:	f004 fcc3 	bl	8013ad8 <uxr_seq_num_add>
 800f152:	8922      	ldrh	r2, [r4, #8]
 800f154:	6863      	ldr	r3, [r4, #4]
 800f156:	fbb0 f8f2 	udiv	r8, r0, r2
 800f15a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f15e:	fb02 0818 	mls	r8, r2, r8, r0
 800f162:	fa1f f888 	uxth.w	r8, r8
 800f166:	fb08 f803 	mul.w	r8, r8, r3
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	f108 0804 	add.w	r8, r8, #4
 800f170:	4498      	add	r8, r3
 800f172:	4607      	mov	r7, r0
 800f174:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800f178:	7b23      	ldrb	r3, [r4, #12]
 800f17a:	e768      	b.n	800f04e <uxr_prepare_output_stream_fragmented+0x66>
 800f17c:	0800ee75 	.word	0x0800ee75

0800f180 <uxr_serialize_message_header>:
 800f180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f184:	4617      	mov	r7, r2
 800f186:	4604      	mov	r4, r0
 800f188:	461e      	mov	r6, r3
 800f18a:	460d      	mov	r5, r1
 800f18c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f190:	f7fc fca0 	bl	800bad4 <ucdr_serialize_uint8_t>
 800f194:	4639      	mov	r1, r7
 800f196:	4620      	mov	r0, r4
 800f198:	f7fc fc9c 	bl	800bad4 <ucdr_serialize_uint8_t>
 800f19c:	4632      	mov	r2, r6
 800f19e:	4620      	mov	r0, r4
 800f1a0:	2101      	movs	r1, #1
 800f1a2:	f7fc fd43 	bl	800bc2c <ucdr_serialize_endian_uint16_t>
 800f1a6:	062b      	lsls	r3, r5, #24
 800f1a8:	d501      	bpl.n	800f1ae <uxr_serialize_message_header+0x2e>
 800f1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ae:	4641      	mov	r1, r8
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b6:	2204      	movs	r2, #4
 800f1b8:	f003 be32 	b.w	8012e20 <ucdr_serialize_array_uint8_t>

0800f1bc <uxr_deserialize_message_header>:
 800f1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c0:	4617      	mov	r7, r2
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	461e      	mov	r6, r3
 800f1c6:	460d      	mov	r5, r1
 800f1c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f1cc:	f7fc fc98 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f1d0:	4639      	mov	r1, r7
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7fc fc94 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f1d8:	4632      	mov	r2, r6
 800f1da:	4620      	mov	r0, r4
 800f1dc:	2101      	movs	r1, #1
 800f1de:	f7fc fe19 	bl	800be14 <ucdr_deserialize_endian_uint16_t>
 800f1e2:	f995 3000 	ldrsb.w	r3, [r5]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	da01      	bge.n	800f1ee <uxr_deserialize_message_header+0x32>
 800f1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ee:	4641      	mov	r1, r8
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1f6:	2204      	movs	r2, #4
 800f1f8:	f003 be76 	b.w	8012ee8 <ucdr_deserialize_array_uint8_t>

0800f1fc <uxr_serialize_submessage_header>:
 800f1fc:	b570      	push	{r4, r5, r6, lr}
 800f1fe:	4616      	mov	r6, r2
 800f200:	4604      	mov	r4, r0
 800f202:	461d      	mov	r5, r3
 800f204:	f7fc fc66 	bl	800bad4 <ucdr_serialize_uint8_t>
 800f208:	4631      	mov	r1, r6
 800f20a:	4620      	mov	r0, r4
 800f20c:	f7fc fc62 	bl	800bad4 <ucdr_serialize_uint8_t>
 800f210:	462a      	mov	r2, r5
 800f212:	4620      	mov	r0, r4
 800f214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f218:	2101      	movs	r1, #1
 800f21a:	f7fc bd07 	b.w	800bc2c <ucdr_serialize_endian_uint16_t>
 800f21e:	bf00      	nop

0800f220 <uxr_deserialize_submessage_header>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4616      	mov	r6, r2
 800f224:	4604      	mov	r4, r0
 800f226:	461d      	mov	r5, r3
 800f228:	f7fc fc6a 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f22c:	4631      	mov	r1, r6
 800f22e:	4620      	mov	r0, r4
 800f230:	f7fc fc66 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f234:	462a      	mov	r2, r5
 800f236:	4620      	mov	r0, r4
 800f238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f23c:	2101      	movs	r1, #1
 800f23e:	f7fc bde9 	b.w	800be14 <ucdr_deserialize_endian_uint16_t>
 800f242:	bf00      	nop

0800f244 <uxr_serialize_CLIENT_Representation>:
 800f244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f248:	2204      	movs	r2, #4
 800f24a:	460c      	mov	r4, r1
 800f24c:	4605      	mov	r5, r0
 800f24e:	f003 fde7 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f252:	2202      	movs	r2, #2
 800f254:	4606      	mov	r6, r0
 800f256:	1d21      	adds	r1, r4, #4
 800f258:	4628      	mov	r0, r5
 800f25a:	f003 fde1 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f25e:	2202      	movs	r2, #2
 800f260:	1da1      	adds	r1, r4, #6
 800f262:	4006      	ands	r6, r0
 800f264:	4628      	mov	r0, r5
 800f266:	f003 fddb 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2204      	movs	r2, #4
 800f26e:	f104 0108 	add.w	r1, r4, #8
 800f272:	4628      	mov	r0, r5
 800f274:	b2f6      	uxtb	r6, r6
 800f276:	401e      	ands	r6, r3
 800f278:	f003 fdd2 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f27c:	4603      	mov	r3, r0
 800f27e:	7b21      	ldrb	r1, [r4, #12]
 800f280:	4628      	mov	r0, r5
 800f282:	401e      	ands	r6, r3
 800f284:	f7fc fc26 	bl	800bad4 <ucdr_serialize_uint8_t>
 800f288:	4603      	mov	r3, r0
 800f28a:	7b61      	ldrb	r1, [r4, #13]
 800f28c:	4628      	mov	r0, r5
 800f28e:	401e      	ands	r6, r3
 800f290:	f7fc fbf2 	bl	800ba78 <ucdr_serialize_bool>
 800f294:	7b63      	ldrb	r3, [r4, #13]
 800f296:	4006      	ands	r6, r0
 800f298:	b933      	cbnz	r3, 800f2a8 <uxr_serialize_CLIENT_Representation+0x64>
 800f29a:	4628      	mov	r0, r5
 800f29c:	8ba1      	ldrh	r1, [r4, #28]
 800f29e:	f7fc fc45 	bl	800bb2c <ucdr_serialize_uint16_t>
 800f2a2:	4030      	ands	r0, r6
 800f2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	6921      	ldr	r1, [r4, #16]
 800f2ac:	f7fc fe2c 	bl	800bf08 <ucdr_serialize_uint32_t>
 800f2b0:	6923      	ldr	r3, [r4, #16]
 800f2b2:	b1cb      	cbz	r3, 800f2e8 <uxr_serialize_CLIENT_Representation+0xa4>
 800f2b4:	b1d0      	cbz	r0, 800f2ec <uxr_serialize_CLIENT_Representation+0xa8>
 800f2b6:	46a0      	mov	r8, r4
 800f2b8:	f04f 0900 	mov.w	r9, #0
 800f2bc:	e002      	b.n	800f2c4 <uxr_serialize_CLIENT_Representation+0x80>
 800f2be:	f108 0808 	add.w	r8, r8, #8
 800f2c2:	b198      	cbz	r0, 800f2ec <uxr_serialize_CLIENT_Representation+0xa8>
 800f2c4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f003 fec9 	bl	8013060 <ucdr_serialize_string>
 800f2ce:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f2d2:	4607      	mov	r7, r0
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f003 fec3 	bl	8013060 <ucdr_serialize_string>
 800f2da:	6923      	ldr	r3, [r4, #16]
 800f2dc:	f109 0901 	add.w	r9, r9, #1
 800f2e0:	4038      	ands	r0, r7
 800f2e2:	4599      	cmp	r9, r3
 800f2e4:	b2c0      	uxtb	r0, r0
 800f2e6:	d3ea      	bcc.n	800f2be <uxr_serialize_CLIENT_Representation+0x7a>
 800f2e8:	4006      	ands	r6, r0
 800f2ea:	e7d6      	b.n	800f29a <uxr_serialize_CLIENT_Representation+0x56>
 800f2ec:	2600      	movs	r6, #0
 800f2ee:	e7d4      	b.n	800f29a <uxr_serialize_CLIENT_Representation+0x56>

0800f2f0 <uxr_deserialize_CLIENT_Representation>:
 800f2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	f003 fdf5 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f2fe:	2202      	movs	r2, #2
 800f300:	4606      	mov	r6, r0
 800f302:	1d21      	adds	r1, r4, #4
 800f304:	4628      	mov	r0, r5
 800f306:	f003 fdef 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f30a:	2202      	movs	r2, #2
 800f30c:	1da1      	adds	r1, r4, #6
 800f30e:	4006      	ands	r6, r0
 800f310:	4628      	mov	r0, r5
 800f312:	f003 fde9 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f316:	4603      	mov	r3, r0
 800f318:	2204      	movs	r2, #4
 800f31a:	f104 0108 	add.w	r1, r4, #8
 800f31e:	4628      	mov	r0, r5
 800f320:	b2f6      	uxtb	r6, r6
 800f322:	401e      	ands	r6, r3
 800f324:	f003 fde0 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f328:	4603      	mov	r3, r0
 800f32a:	f104 010c 	add.w	r1, r4, #12
 800f32e:	4628      	mov	r0, r5
 800f330:	401e      	ands	r6, r3
 800f332:	f7fc fbe5 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f336:	4603      	mov	r3, r0
 800f338:	f104 010d 	add.w	r1, r4, #13
 800f33c:	4628      	mov	r0, r5
 800f33e:	401e      	ands	r6, r3
 800f340:	f7fc fbb0 	bl	800baa4 <ucdr_deserialize_bool>
 800f344:	7b63      	ldrb	r3, [r4, #13]
 800f346:	4006      	ands	r6, r0
 800f348:	b93b      	cbnz	r3, 800f35a <uxr_deserialize_CLIENT_Representation+0x6a>
 800f34a:	4628      	mov	r0, r5
 800f34c:	f104 011c 	add.w	r1, r4, #28
 800f350:	f7fc fcec 	bl	800bd2c <ucdr_deserialize_uint16_t>
 800f354:	4030      	ands	r0, r6
 800f356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35a:	4628      	mov	r0, r5
 800f35c:	f104 0110 	add.w	r1, r4, #16
 800f360:	f7fc ff02 	bl	800c168 <ucdr_deserialize_uint32_t>
 800f364:	6923      	ldr	r3, [r4, #16]
 800f366:	2b01      	cmp	r3, #1
 800f368:	d903      	bls.n	800f372 <uxr_deserialize_CLIENT_Representation+0x82>
 800f36a:	2301      	movs	r3, #1
 800f36c:	2600      	movs	r6, #0
 800f36e:	75ab      	strb	r3, [r5, #22]
 800f370:	e7eb      	b.n	800f34a <uxr_deserialize_CLIENT_Representation+0x5a>
 800f372:	b1eb      	cbz	r3, 800f3b0 <uxr_deserialize_CLIENT_Representation+0xc0>
 800f374:	b1f0      	cbz	r0, 800f3b4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f376:	46a0      	mov	r8, r4
 800f378:	f04f 0900 	mov.w	r9, #0
 800f37c:	e002      	b.n	800f384 <uxr_deserialize_CLIENT_Representation+0x94>
 800f37e:	f108 0808 	add.w	r8, r8, #8
 800f382:	b1b8      	cbz	r0, 800f3b4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800f384:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f388:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f38c:	4628      	mov	r0, r5
 800f38e:	f003 fe75 	bl	801307c <ucdr_deserialize_string>
 800f392:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f396:	4607      	mov	r7, r0
 800f398:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f39c:	4628      	mov	r0, r5
 800f39e:	f003 fe6d 	bl	801307c <ucdr_deserialize_string>
 800f3a2:	6923      	ldr	r3, [r4, #16]
 800f3a4:	f109 0901 	add.w	r9, r9, #1
 800f3a8:	4038      	ands	r0, r7
 800f3aa:	4599      	cmp	r9, r3
 800f3ac:	b2c0      	uxtb	r0, r0
 800f3ae:	d3e6      	bcc.n	800f37e <uxr_deserialize_CLIENT_Representation+0x8e>
 800f3b0:	4006      	ands	r6, r0
 800f3b2:	e7ca      	b.n	800f34a <uxr_deserialize_CLIENT_Representation+0x5a>
 800f3b4:	2600      	movs	r6, #0
 800f3b6:	e7c8      	b.n	800f34a <uxr_deserialize_CLIENT_Representation+0x5a>

0800f3b8 <uxr_serialize_AGENT_Representation>:
 800f3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3bc:	2204      	movs	r2, #4
 800f3be:	460c      	mov	r4, r1
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	f003 fd2d 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f3c6:	2202      	movs	r2, #2
 800f3c8:	4606      	mov	r6, r0
 800f3ca:	1d21      	adds	r1, r4, #4
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	f003 fd27 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	1da1      	adds	r1, r4, #6
 800f3d6:	4006      	ands	r6, r0
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f003 fd21 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	7a21      	ldrb	r1, [r4, #8]
 800f3e2:	4628      	mov	r0, r5
 800f3e4:	b2f6      	uxtb	r6, r6
 800f3e6:	401e      	ands	r6, r3
 800f3e8:	f7fc fb46 	bl	800ba78 <ucdr_serialize_bool>
 800f3ec:	7a23      	ldrb	r3, [r4, #8]
 800f3ee:	ea00 0706 	and.w	r7, r0, r6
 800f3f2:	b913      	cbnz	r3, 800f3fa <uxr_serialize_AGENT_Representation+0x42>
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	68e1      	ldr	r1, [r4, #12]
 800f3fe:	f7fc fd83 	bl	800bf08 <ucdr_serialize_uint32_t>
 800f402:	68e3      	ldr	r3, [r4, #12]
 800f404:	b313      	cbz	r3, 800f44c <uxr_serialize_AGENT_Representation+0x94>
 800f406:	b1e8      	cbz	r0, 800f444 <uxr_serialize_AGENT_Representation+0x8c>
 800f408:	46a0      	mov	r8, r4
 800f40a:	f04f 0900 	mov.w	r9, #0
 800f40e:	e002      	b.n	800f416 <uxr_serialize_AGENT_Representation+0x5e>
 800f410:	f108 0808 	add.w	r8, r8, #8
 800f414:	b1b3      	cbz	r3, 800f444 <uxr_serialize_AGENT_Representation+0x8c>
 800f416:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f41a:	4628      	mov	r0, r5
 800f41c:	f003 fe20 	bl	8013060 <ucdr_serialize_string>
 800f420:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f424:	4606      	mov	r6, r0
 800f426:	4628      	mov	r0, r5
 800f428:	f003 fe1a 	bl	8013060 <ucdr_serialize_string>
 800f42c:	68e2      	ldr	r2, [r4, #12]
 800f42e:	f109 0901 	add.w	r9, r9, #1
 800f432:	ea06 0300 	and.w	r3, r6, r0
 800f436:	4591      	cmp	r9, r2
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	d3e9      	bcc.n	800f410 <uxr_serialize_AGENT_Representation+0x58>
 800f43c:	401f      	ands	r7, r3
 800f43e:	4638      	mov	r0, r7
 800f440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f444:	2700      	movs	r7, #0
 800f446:	4638      	mov	r0, r7
 800f448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f44c:	4007      	ands	r7, r0
 800f44e:	e7d1      	b.n	800f3f4 <uxr_serialize_AGENT_Representation+0x3c>

0800f450 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	460d      	mov	r5, r1
 800f454:	7809      	ldrb	r1, [r1, #0]
 800f456:	4606      	mov	r6, r0
 800f458:	f7fc fb0e 	bl	800ba78 <ucdr_serialize_bool>
 800f45c:	782b      	ldrb	r3, [r5, #0]
 800f45e:	4604      	mov	r4, r0
 800f460:	b94b      	cbnz	r3, 800f476 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800f462:	4630      	mov	r0, r6
 800f464:	7a29      	ldrb	r1, [r5, #8]
 800f466:	f7fc fb07 	bl	800ba78 <ucdr_serialize_bool>
 800f46a:	7a2b      	ldrb	r3, [r5, #8]
 800f46c:	4004      	ands	r4, r0
 800f46e:	b2e4      	uxtb	r4, r4
 800f470:	b943      	cbnz	r3, 800f484 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800f472:	4620      	mov	r0, r4
 800f474:	bd70      	pop	{r4, r5, r6, pc}
 800f476:	4630      	mov	r0, r6
 800f478:	6869      	ldr	r1, [r5, #4]
 800f47a:	f003 fdf1 	bl	8013060 <ucdr_serialize_string>
 800f47e:	4004      	ands	r4, r0
 800f480:	b2e4      	uxtb	r4, r4
 800f482:	e7ee      	b.n	800f462 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800f484:	4630      	mov	r0, r6
 800f486:	68e9      	ldr	r1, [r5, #12]
 800f488:	f003 fdea 	bl	8013060 <ucdr_serialize_string>
 800f48c:	4004      	ands	r4, r0
 800f48e:	4620      	mov	r0, r4
 800f490:	bd70      	pop	{r4, r5, r6, pc}
 800f492:	bf00      	nop

0800f494 <uxr_serialize_OBJK_Topic_Binary>:
 800f494:	b570      	push	{r4, r5, r6, lr}
 800f496:	460d      	mov	r5, r1
 800f498:	6809      	ldr	r1, [r1, #0]
 800f49a:	4606      	mov	r6, r0
 800f49c:	f003 fde0 	bl	8013060 <ucdr_serialize_string>
 800f4a0:	7929      	ldrb	r1, [r5, #4]
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	f7fc fae7 	bl	800ba78 <ucdr_serialize_bool>
 800f4aa:	792b      	ldrb	r3, [r5, #4]
 800f4ac:	4004      	ands	r4, r0
 800f4ae:	b2e4      	uxtb	r4, r4
 800f4b0:	b943      	cbnz	r3, 800f4c4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	7b29      	ldrb	r1, [r5, #12]
 800f4b6:	f7fc fadf 	bl	800ba78 <ucdr_serialize_bool>
 800f4ba:	7b2b      	ldrb	r3, [r5, #12]
 800f4bc:	4004      	ands	r4, r0
 800f4be:	b93b      	cbnz	r3, 800f4d0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800f4c0:	4620      	mov	r0, r4
 800f4c2:	bd70      	pop	{r4, r5, r6, pc}
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	68a9      	ldr	r1, [r5, #8]
 800f4c8:	f003 fdca 	bl	8013060 <ucdr_serialize_string>
 800f4cc:	4004      	ands	r4, r0
 800f4ce:	e7f0      	b.n	800f4b2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	6929      	ldr	r1, [r5, #16]
 800f4d4:	f003 fdc4 	bl	8013060 <ucdr_serialize_string>
 800f4d8:	4004      	ands	r4, r0
 800f4da:	b2e4      	uxtb	r4, r4
 800f4dc:	4620      	mov	r0, r4
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800f4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	7809      	ldrb	r1, [r1, #0]
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	f7fc fac5 	bl	800ba78 <ucdr_serialize_bool>
 800f4ee:	7823      	ldrb	r3, [r4, #0]
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	b96b      	cbnz	r3, 800f510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800f4fa:	f7fc fabd 	bl	800ba78 <ucdr_serialize_bool>
 800f4fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f502:	4005      	ands	r5, r0
 800f504:	b2ed      	uxtb	r5, r5
 800f506:	2b00      	cmp	r3, #0
 800f508:	d169      	bne.n	800f5de <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800f50a:	4628      	mov	r0, r5
 800f50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f510:	4630      	mov	r0, r6
 800f512:	6861      	ldr	r1, [r4, #4]
 800f514:	f7fc fcf8 	bl	800bf08 <ucdr_serialize_uint32_t>
 800f518:	6863      	ldr	r3, [r4, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d06b      	beq.n	800f5f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d067      	beq.n	800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f522:	4630      	mov	r0, r6
 800f524:	68a1      	ldr	r1, [r4, #8]
 800f526:	f003 fd9b 	bl	8013060 <ucdr_serialize_string>
 800f52a:	6863      	ldr	r3, [r4, #4]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d953      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f530:	2800      	cmp	r0, #0
 800f532:	d05e      	beq.n	800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f534:	4630      	mov	r0, r6
 800f536:	68e1      	ldr	r1, [r4, #12]
 800f538:	f003 fd92 	bl	8013060 <ucdr_serialize_string>
 800f53c:	6863      	ldr	r3, [r4, #4]
 800f53e:	2b02      	cmp	r3, #2
 800f540:	d94a      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f542:	2800      	cmp	r0, #0
 800f544:	d055      	beq.n	800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f546:	4630      	mov	r0, r6
 800f548:	6921      	ldr	r1, [r4, #16]
 800f54a:	f003 fd89 	bl	8013060 <ucdr_serialize_string>
 800f54e:	6863      	ldr	r3, [r4, #4]
 800f550:	2b03      	cmp	r3, #3
 800f552:	d941      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f554:	2800      	cmp	r0, #0
 800f556:	d04c      	beq.n	800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f558:	4630      	mov	r0, r6
 800f55a:	6961      	ldr	r1, [r4, #20]
 800f55c:	f003 fd80 	bl	8013060 <ucdr_serialize_string>
 800f560:	6863      	ldr	r3, [r4, #4]
 800f562:	2b04      	cmp	r3, #4
 800f564:	d938      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f566:	2800      	cmp	r0, #0
 800f568:	d043      	beq.n	800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f56a:	4630      	mov	r0, r6
 800f56c:	69a1      	ldr	r1, [r4, #24]
 800f56e:	f003 fd77 	bl	8013060 <ucdr_serialize_string>
 800f572:	6863      	ldr	r3, [r4, #4]
 800f574:	2b05      	cmp	r3, #5
 800f576:	d92f      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d03a      	beq.n	800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f57c:	4630      	mov	r0, r6
 800f57e:	69e1      	ldr	r1, [r4, #28]
 800f580:	f003 fd6e 	bl	8013060 <ucdr_serialize_string>
 800f584:	6863      	ldr	r3, [r4, #4]
 800f586:	2b06      	cmp	r3, #6
 800f588:	d926      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f58a:	b390      	cbz	r0, 800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f58c:	4630      	mov	r0, r6
 800f58e:	6a21      	ldr	r1, [r4, #32]
 800f590:	f003 fd66 	bl	8013060 <ucdr_serialize_string>
 800f594:	6863      	ldr	r3, [r4, #4]
 800f596:	2b07      	cmp	r3, #7
 800f598:	d91e      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f59a:	b350      	cbz	r0, 800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f59c:	4630      	mov	r0, r6
 800f59e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f5a0:	f003 fd5e 	bl	8013060 <ucdr_serialize_string>
 800f5a4:	6863      	ldr	r3, [r4, #4]
 800f5a6:	2b08      	cmp	r3, #8
 800f5a8:	d916      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f5aa:	b310      	cbz	r0, 800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f5b0:	f003 fd56 	bl	8013060 <ucdr_serialize_string>
 800f5b4:	6863      	ldr	r3, [r4, #4]
 800f5b6:	2b09      	cmp	r3, #9
 800f5b8:	d90e      	bls.n	800f5d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800f5ba:	b1d0      	cbz	r0, 800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f5bc:	2709      	movs	r7, #9
 800f5be:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800f5c2:	e000      	b.n	800f5c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800f5c4:	b1a8      	cbz	r0, 800f5f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	f858 1b04 	ldr.w	r1, [r8], #4
 800f5cc:	f003 fd48 	bl	8013060 <ucdr_serialize_string>
 800f5d0:	6862      	ldr	r2, [r4, #4]
 800f5d2:	3701      	adds	r7, #1
 800f5d4:	4297      	cmp	r7, r2
 800f5d6:	d3f5      	bcc.n	800f5c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800f5d8:	4005      	ands	r5, r0
 800f5da:	b2ed      	uxtb	r5, r5
 800f5dc:	e78a      	b.n	800f4f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f5de:	4630      	mov	r0, r6
 800f5e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f5e2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f5e6:	f003 fd0f 	bl	8013008 <ucdr_serialize_sequence_uint8_t>
 800f5ea:	4005      	ands	r5, r0
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f2:	2500      	movs	r5, #0
 800f5f4:	e77e      	b.n	800f4f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800f5f6:	4028      	ands	r0, r5
 800f5f8:	b2c5      	uxtb	r5, r0
 800f5fa:	e77b      	b.n	800f4f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800f5fc <uxr_serialize_OBJK_Publisher_Binary>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	460d      	mov	r5, r1
 800f600:	7809      	ldrb	r1, [r1, #0]
 800f602:	4606      	mov	r6, r0
 800f604:	f7fc fa38 	bl	800ba78 <ucdr_serialize_bool>
 800f608:	782b      	ldrb	r3, [r5, #0]
 800f60a:	4604      	mov	r4, r0
 800f60c:	b94b      	cbnz	r3, 800f622 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800f60e:	4630      	mov	r0, r6
 800f610:	7a29      	ldrb	r1, [r5, #8]
 800f612:	f7fc fa31 	bl	800ba78 <ucdr_serialize_bool>
 800f616:	7a2b      	ldrb	r3, [r5, #8]
 800f618:	4004      	ands	r4, r0
 800f61a:	b2e4      	uxtb	r4, r4
 800f61c:	b943      	cbnz	r3, 800f630 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800f61e:	4620      	mov	r0, r4
 800f620:	bd70      	pop	{r4, r5, r6, pc}
 800f622:	4630      	mov	r0, r6
 800f624:	6869      	ldr	r1, [r5, #4]
 800f626:	f003 fd1b 	bl	8013060 <ucdr_serialize_string>
 800f62a:	4004      	ands	r4, r0
 800f62c:	b2e4      	uxtb	r4, r4
 800f62e:	e7ee      	b.n	800f60e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800f630:	4630      	mov	r0, r6
 800f632:	f105 010c 	add.w	r1, r5, #12
 800f636:	f7ff ff53 	bl	800f4e0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800f63a:	4004      	ands	r4, r0
 800f63c:	4620      	mov	r0, r4
 800f63e:	bd70      	pop	{r4, r5, r6, pc}

0800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800f640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f644:	460c      	mov	r4, r1
 800f646:	7809      	ldrb	r1, [r1, #0]
 800f648:	4606      	mov	r6, r0
 800f64a:	f7fc fa15 	bl	800ba78 <ucdr_serialize_bool>
 800f64e:	7823      	ldrb	r3, [r4, #0]
 800f650:	4605      	mov	r5, r0
 800f652:	b96b      	cbnz	r3, 800f670 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800f654:	4630      	mov	r0, r6
 800f656:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800f65a:	f7fc fa0d 	bl	800ba78 <ucdr_serialize_bool>
 800f65e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f662:	4005      	ands	r5, r0
 800f664:	b2ed      	uxtb	r5, r5
 800f666:	2b00      	cmp	r3, #0
 800f668:	d169      	bne.n	800f73e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800f66a:	4628      	mov	r0, r5
 800f66c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f670:	4630      	mov	r0, r6
 800f672:	6861      	ldr	r1, [r4, #4]
 800f674:	f7fc fc48 	bl	800bf08 <ucdr_serialize_uint32_t>
 800f678:	6863      	ldr	r3, [r4, #4]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d06b      	beq.n	800f756 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800f67e:	2800      	cmp	r0, #0
 800f680:	d067      	beq.n	800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f682:	4630      	mov	r0, r6
 800f684:	68a1      	ldr	r1, [r4, #8]
 800f686:	f003 fceb 	bl	8013060 <ucdr_serialize_string>
 800f68a:	6863      	ldr	r3, [r4, #4]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d953      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f690:	2800      	cmp	r0, #0
 800f692:	d05e      	beq.n	800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f694:	4630      	mov	r0, r6
 800f696:	68e1      	ldr	r1, [r4, #12]
 800f698:	f003 fce2 	bl	8013060 <ucdr_serialize_string>
 800f69c:	6863      	ldr	r3, [r4, #4]
 800f69e:	2b02      	cmp	r3, #2
 800f6a0:	d94a      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d055      	beq.n	800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	6921      	ldr	r1, [r4, #16]
 800f6aa:	f003 fcd9 	bl	8013060 <ucdr_serialize_string>
 800f6ae:	6863      	ldr	r3, [r4, #4]
 800f6b0:	2b03      	cmp	r3, #3
 800f6b2:	d941      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d04c      	beq.n	800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	6961      	ldr	r1, [r4, #20]
 800f6bc:	f003 fcd0 	bl	8013060 <ucdr_serialize_string>
 800f6c0:	6863      	ldr	r3, [r4, #4]
 800f6c2:	2b04      	cmp	r3, #4
 800f6c4:	d938      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d043      	beq.n	800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	69a1      	ldr	r1, [r4, #24]
 800f6ce:	f003 fcc7 	bl	8013060 <ucdr_serialize_string>
 800f6d2:	6863      	ldr	r3, [r4, #4]
 800f6d4:	2b05      	cmp	r3, #5
 800f6d6:	d92f      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d03a      	beq.n	800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6dc:	4630      	mov	r0, r6
 800f6de:	69e1      	ldr	r1, [r4, #28]
 800f6e0:	f003 fcbe 	bl	8013060 <ucdr_serialize_string>
 800f6e4:	6863      	ldr	r3, [r4, #4]
 800f6e6:	2b06      	cmp	r3, #6
 800f6e8:	d926      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6ea:	b390      	cbz	r0, 800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	6a21      	ldr	r1, [r4, #32]
 800f6f0:	f003 fcb6 	bl	8013060 <ucdr_serialize_string>
 800f6f4:	6863      	ldr	r3, [r4, #4]
 800f6f6:	2b07      	cmp	r3, #7
 800f6f8:	d91e      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f6fa:	b350      	cbz	r0, 800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f700:	f003 fcae 	bl	8013060 <ucdr_serialize_string>
 800f704:	6863      	ldr	r3, [r4, #4]
 800f706:	2b08      	cmp	r3, #8
 800f708:	d916      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f70a:	b310      	cbz	r0, 800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f70c:	4630      	mov	r0, r6
 800f70e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f710:	f003 fca6 	bl	8013060 <ucdr_serialize_string>
 800f714:	6863      	ldr	r3, [r4, #4]
 800f716:	2b09      	cmp	r3, #9
 800f718:	d90e      	bls.n	800f738 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800f71a:	b1d0      	cbz	r0, 800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f71c:	2709      	movs	r7, #9
 800f71e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800f722:	e000      	b.n	800f726 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800f724:	b1a8      	cbz	r0, 800f752 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800f726:	4630      	mov	r0, r6
 800f728:	f858 1b04 	ldr.w	r1, [r8], #4
 800f72c:	f003 fc98 	bl	8013060 <ucdr_serialize_string>
 800f730:	6862      	ldr	r2, [r4, #4]
 800f732:	3701      	adds	r7, #1
 800f734:	4297      	cmp	r7, r2
 800f736:	d3f5      	bcc.n	800f724 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800f738:	4005      	ands	r5, r0
 800f73a:	b2ed      	uxtb	r5, r5
 800f73c:	e78a      	b.n	800f654 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f73e:	4630      	mov	r0, r6
 800f740:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f742:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f746:	f003 fc5f 	bl	8013008 <ucdr_serialize_sequence_uint8_t>
 800f74a:	4005      	ands	r5, r0
 800f74c:	4628      	mov	r0, r5
 800f74e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f752:	2500      	movs	r5, #0
 800f754:	e77e      	b.n	800f654 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800f756:	4028      	ands	r0, r5
 800f758:	b2c5      	uxtb	r5, r0
 800f75a:	e77b      	b.n	800f654 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800f75c <uxr_serialize_OBJK_Subscriber_Binary>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	460d      	mov	r5, r1
 800f760:	7809      	ldrb	r1, [r1, #0]
 800f762:	4606      	mov	r6, r0
 800f764:	f7fc f988 	bl	800ba78 <ucdr_serialize_bool>
 800f768:	782b      	ldrb	r3, [r5, #0]
 800f76a:	4604      	mov	r4, r0
 800f76c:	b94b      	cbnz	r3, 800f782 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800f76e:	4630      	mov	r0, r6
 800f770:	7a29      	ldrb	r1, [r5, #8]
 800f772:	f7fc f981 	bl	800ba78 <ucdr_serialize_bool>
 800f776:	7a2b      	ldrb	r3, [r5, #8]
 800f778:	4004      	ands	r4, r0
 800f77a:	b2e4      	uxtb	r4, r4
 800f77c:	b943      	cbnz	r3, 800f790 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800f77e:	4620      	mov	r0, r4
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	4630      	mov	r0, r6
 800f784:	6869      	ldr	r1, [r5, #4]
 800f786:	f003 fc6b 	bl	8013060 <ucdr_serialize_string>
 800f78a:	4004      	ands	r4, r0
 800f78c:	b2e4      	uxtb	r4, r4
 800f78e:	e7ee      	b.n	800f76e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800f790:	4630      	mov	r0, r6
 800f792:	f105 010c 	add.w	r1, r5, #12
 800f796:	f7ff ff53 	bl	800f640 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800f79a:	4004      	ands	r4, r0
 800f79c:	4620      	mov	r0, r4
 800f79e:	bd70      	pop	{r4, r5, r6, pc}

0800f7a0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800f7a0:	b570      	push	{r4, r5, r6, lr}
 800f7a2:	460d      	mov	r5, r1
 800f7a4:	8809      	ldrh	r1, [r1, #0]
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	f7fc f9c0 	bl	800bb2c <ucdr_serialize_uint16_t>
 800f7ac:	78a9      	ldrb	r1, [r5, #2]
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f7fc f961 	bl	800ba78 <ucdr_serialize_bool>
 800f7b6:	78ab      	ldrb	r3, [r5, #2]
 800f7b8:	4004      	ands	r4, r0
 800f7ba:	b2e4      	uxtb	r4, r4
 800f7bc:	b9b3      	cbnz	r3, 800f7ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800f7be:	4630      	mov	r0, r6
 800f7c0:	79a9      	ldrb	r1, [r5, #6]
 800f7c2:	f7fc f959 	bl	800ba78 <ucdr_serialize_bool>
 800f7c6:	79ab      	ldrb	r3, [r5, #6]
 800f7c8:	4004      	ands	r4, r0
 800f7ca:	bb33      	cbnz	r3, 800f81a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	7b29      	ldrb	r1, [r5, #12]
 800f7d0:	f7fc f952 	bl	800ba78 <ucdr_serialize_bool>
 800f7d4:	7b2b      	ldrb	r3, [r5, #12]
 800f7d6:	4004      	ands	r4, r0
 800f7d8:	b9c3      	cbnz	r3, 800f80c <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800f7da:	4630      	mov	r0, r6
 800f7dc:	7d29      	ldrb	r1, [r5, #20]
 800f7de:	f7fc f94b 	bl	800ba78 <ucdr_serialize_bool>
 800f7e2:	7d2b      	ldrb	r3, [r5, #20]
 800f7e4:	4004      	ands	r4, r0
 800f7e6:	b93b      	cbnz	r3, 800f7f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	bd70      	pop	{r4, r5, r6, pc}
 800f7ec:	4630      	mov	r0, r6
 800f7ee:	88a9      	ldrh	r1, [r5, #4]
 800f7f0:	f7fc f99c 	bl	800bb2c <ucdr_serialize_uint16_t>
 800f7f4:	4004      	ands	r4, r0
 800f7f6:	e7e2      	b.n	800f7be <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	69aa      	ldr	r2, [r5, #24]
 800f7fc:	f105 011c 	add.w	r1, r5, #28
 800f800:	f003 fc02 	bl	8013008 <ucdr_serialize_sequence_uint8_t>
 800f804:	4004      	ands	r4, r0
 800f806:	b2e4      	uxtb	r4, r4
 800f808:	4620      	mov	r0, r4
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	4630      	mov	r0, r6
 800f80e:	6929      	ldr	r1, [r5, #16]
 800f810:	f7fc fb7a 	bl	800bf08 <ucdr_serialize_uint32_t>
 800f814:	4004      	ands	r4, r0
 800f816:	b2e4      	uxtb	r4, r4
 800f818:	e7df      	b.n	800f7da <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800f81a:	4630      	mov	r0, r6
 800f81c:	68a9      	ldr	r1, [r5, #8]
 800f81e:	f7fc fb73 	bl	800bf08 <ucdr_serialize_uint32_t>
 800f822:	4004      	ands	r4, r0
 800f824:	b2e4      	uxtb	r4, r4
 800f826:	e7d1      	b.n	800f7cc <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800f828 <uxr_serialize_OBJK_DataReader_Binary>:
 800f828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f82a:	2202      	movs	r2, #2
 800f82c:	460c      	mov	r4, r1
 800f82e:	4606      	mov	r6, r0
 800f830:	f003 faf6 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f834:	78a1      	ldrb	r1, [r4, #2]
 800f836:	4605      	mov	r5, r0
 800f838:	4630      	mov	r0, r6
 800f83a:	f7fc f91d 	bl	800ba78 <ucdr_serialize_bool>
 800f83e:	78a3      	ldrb	r3, [r4, #2]
 800f840:	4005      	ands	r5, r0
 800f842:	b2ed      	uxtb	r5, r5
 800f844:	b90b      	cbnz	r3, 800f84a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800f846:	4628      	mov	r0, r5
 800f848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f84a:	f104 0108 	add.w	r1, r4, #8
 800f84e:	4630      	mov	r0, r6
 800f850:	f7ff ffa6 	bl	800f7a0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f854:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f858:	4607      	mov	r7, r0
 800f85a:	4630      	mov	r0, r6
 800f85c:	f7fc f90c 	bl	800ba78 <ucdr_serialize_bool>
 800f860:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f864:	4007      	ands	r7, r0
 800f866:	b2ff      	uxtb	r7, r7
 800f868:	b95b      	cbnz	r3, 800f882 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800f86a:	4630      	mov	r0, r6
 800f86c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800f870:	f7fc f902 	bl	800ba78 <ucdr_serialize_bool>
 800f874:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f878:	4007      	ands	r7, r0
 800f87a:	b94b      	cbnz	r3, 800f890 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800f87c:	403d      	ands	r5, r7
 800f87e:	4628      	mov	r0, r5
 800f880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f882:	4630      	mov	r0, r6
 800f884:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800f888:	f7fc fd94 	bl	800c3b4 <ucdr_serialize_uint64_t>
 800f88c:	4007      	ands	r7, r0
 800f88e:	e7ec      	b.n	800f86a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800f890:	4630      	mov	r0, r6
 800f892:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f894:	f003 fbe4 	bl	8013060 <ucdr_serialize_string>
 800f898:	4007      	ands	r7, r0
 800f89a:	b2ff      	uxtb	r7, r7
 800f89c:	e7ee      	b.n	800f87c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800f89e:	bf00      	nop

0800f8a0 <uxr_serialize_OBJK_DataWriter_Binary>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	460d      	mov	r5, r1
 800f8a6:	4606      	mov	r6, r0
 800f8a8:	f003 faba 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800f8ac:	78a9      	ldrb	r1, [r5, #2]
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f7fc f8e1 	bl	800ba78 <ucdr_serialize_bool>
 800f8b6:	78ab      	ldrb	r3, [r5, #2]
 800f8b8:	4004      	ands	r4, r0
 800f8ba:	b2e4      	uxtb	r4, r4
 800f8bc:	b90b      	cbnz	r3, 800f8c2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800f8be:	4620      	mov	r0, r4
 800f8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8c2:	f105 0108 	add.w	r1, r5, #8
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f7ff ff6a 	bl	800f7a0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800f8cc:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800f8d0:	4607      	mov	r7, r0
 800f8d2:	4630      	mov	r0, r6
 800f8d4:	f7fc f8d0 	bl	800ba78 <ucdr_serialize_bool>
 800f8d8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f8dc:	4007      	ands	r7, r0
 800f8de:	b2ff      	uxtb	r7, r7
 800f8e0:	b913      	cbnz	r3, 800f8e8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800f8e2:	403c      	ands	r4, r7
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800f8ee:	f7fc fd61 	bl	800c3b4 <ucdr_serialize_uint64_t>
 800f8f2:	4007      	ands	r7, r0
 800f8f4:	e7f5      	b.n	800f8e2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800f8f6:	bf00      	nop

0800f8f8 <uxr_deserialize_ObjectVariant>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	4605      	mov	r5, r0
 800f8fc:	460e      	mov	r6, r1
 800f8fe:	f7fc f8ff 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f902:	b320      	cbz	r0, 800f94e <uxr_deserialize_ObjectVariant+0x56>
 800f904:	7833      	ldrb	r3, [r6, #0]
 800f906:	4604      	mov	r4, r0
 800f908:	3b01      	subs	r3, #1
 800f90a:	2b0d      	cmp	r3, #13
 800f90c:	d81d      	bhi.n	800f94a <uxr_deserialize_ObjectVariant+0x52>
 800f90e:	e8df f003 	tbb	[pc, r3]
 800f912:	2107      	.short	0x2107
 800f914:	21214b4b 	.word	0x21214b4b
 800f918:	381c2121 	.word	0x381c2121
 800f91c:	876a3838 	.word	0x876a3838
 800f920:	4628      	mov	r0, r5
 800f922:	1d31      	adds	r1, r6, #4
 800f924:	f7fc f8ec 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f928:	4604      	mov	r4, r0
 800f92a:	b138      	cbz	r0, 800f93c <uxr_deserialize_ObjectVariant+0x44>
 800f92c:	7933      	ldrb	r3, [r6, #4]
 800f92e:	2b02      	cmp	r3, #2
 800f930:	d07c      	beq.n	800fa2c <uxr_deserialize_ObjectVariant+0x134>
 800f932:	2b03      	cmp	r3, #3
 800f934:	f000 8082 	beq.w	800fa3c <uxr_deserialize_ObjectVariant+0x144>
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d077      	beq.n	800fa2c <uxr_deserialize_ObjectVariant+0x134>
 800f93c:	4628      	mov	r0, r5
 800f93e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800f942:	f7fc fe87 	bl	800c654 <ucdr_deserialize_int16_t>
 800f946:	4004      	ands	r4, r0
 800f948:	b2e4      	uxtb	r4, r4
 800f94a:	4620      	mov	r0, r4
 800f94c:	bd70      	pop	{r4, r5, r6, pc}
 800f94e:	2400      	movs	r4, #0
 800f950:	4620      	mov	r0, r4
 800f952:	bd70      	pop	{r4, r5, r6, pc}
 800f954:	4628      	mov	r0, r5
 800f956:	1d31      	adds	r1, r6, #4
 800f958:	f7fc f8d2 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f95c:	4604      	mov	r4, r0
 800f95e:	b130      	cbz	r0, 800f96e <uxr_deserialize_ObjectVariant+0x76>
 800f960:	7933      	ldrb	r3, [r6, #4]
 800f962:	2b02      	cmp	r3, #2
 800f964:	d037      	beq.n	800f9d6 <uxr_deserialize_ObjectVariant+0xde>
 800f966:	2b03      	cmp	r3, #3
 800f968:	d02a      	beq.n	800f9c0 <uxr_deserialize_ObjectVariant+0xc8>
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d033      	beq.n	800f9d6 <uxr_deserialize_ObjectVariant+0xde>
 800f96e:	4628      	mov	r0, r5
 800f970:	2202      	movs	r2, #2
 800f972:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800f976:	f003 fab7 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f97a:	4004      	ands	r4, r0
 800f97c:	b2e4      	uxtb	r4, r4
 800f97e:	4620      	mov	r0, r4
 800f980:	bd70      	pop	{r4, r5, r6, pc}
 800f982:	4628      	mov	r0, r5
 800f984:	1d31      	adds	r1, r6, #4
 800f986:	f7fc f8bb 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d0df      	beq.n	800f94e <uxr_deserialize_ObjectVariant+0x56>
 800f98e:	7933      	ldrb	r3, [r6, #4]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d001      	beq.n	800f998 <uxr_deserialize_ObjectVariant+0xa0>
 800f994:	2b02      	cmp	r3, #2
 800f996:	d1d8      	bne.n	800f94a <uxr_deserialize_ObjectVariant+0x52>
 800f998:	4628      	mov	r0, r5
 800f99a:	68b1      	ldr	r1, [r6, #8]
 800f99c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f9a4:	f003 bb6a 	b.w	801307c <ucdr_deserialize_string>
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	1d31      	adds	r1, r6, #4
 800f9ac:	f7fc f8a8 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800f9b0:	4604      	mov	r4, r0
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d0db      	beq.n	800f96e <uxr_deserialize_ObjectVariant+0x76>
 800f9b6:	7933      	ldrb	r3, [r6, #4]
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d00c      	beq.n	800f9d6 <uxr_deserialize_ObjectVariant+0xde>
 800f9bc:	2b03      	cmp	r3, #3
 800f9be:	d1d6      	bne.n	800f96e <uxr_deserialize_ObjectVariant+0x76>
 800f9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f106 0308 	add.w	r3, r6, #8
 800f9ca:	f106 010c 	add.w	r1, r6, #12
 800f9ce:	f003 fb2d 	bl	801302c <ucdr_deserialize_sequence_uint8_t>
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	e7cb      	b.n	800f96e <uxr_deserialize_ObjectVariant+0x76>
 800f9d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f9da:	4628      	mov	r0, r5
 800f9dc:	68b1      	ldr	r1, [r6, #8]
 800f9de:	f003 fb4d 	bl	801307c <ucdr_deserialize_string>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	e7c3      	b.n	800f96e <uxr_deserialize_ObjectVariant+0x76>
 800f9e6:	2204      	movs	r2, #4
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	18b1      	adds	r1, r6, r2
 800f9ec:	f003 fa7c 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f9f0:	2202      	movs	r2, #2
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	f106 0108 	add.w	r1, r6, #8
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f003 fa75 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800f9fe:	2202      	movs	r2, #2
 800fa00:	4004      	ands	r4, r0
 800fa02:	f106 010a 	add.w	r1, r6, #10
 800fa06:	4628      	mov	r0, r5
 800fa08:	f003 fa6e 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	b2e4      	uxtb	r4, r4
 800fa10:	4628      	mov	r0, r5
 800fa12:	f106 010c 	add.w	r1, r6, #12
 800fa16:	401c      	ands	r4, r3
 800fa18:	f7fc f844 	bl	800baa4 <ucdr_deserialize_bool>
 800fa1c:	4004      	ands	r4, r0
 800fa1e:	e794      	b.n	800f94a <uxr_deserialize_ObjectVariant+0x52>
 800fa20:	4628      	mov	r0, r5
 800fa22:	1d31      	adds	r1, r6, #4
 800fa24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa28:	f7ff bc62 	b.w	800f2f0 <uxr_deserialize_CLIENT_Representation>
 800fa2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa30:	4628      	mov	r0, r5
 800fa32:	68b1      	ldr	r1, [r6, #8]
 800fa34:	f003 fb22 	bl	801307c <ucdr_deserialize_string>
 800fa38:	4604      	mov	r4, r0
 800fa3a:	e77f      	b.n	800f93c <uxr_deserialize_ObjectVariant+0x44>
 800fa3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa40:	4628      	mov	r0, r5
 800fa42:	f106 0308 	add.w	r3, r6, #8
 800fa46:	f106 010c 	add.w	r1, r6, #12
 800fa4a:	f003 faef 	bl	801302c <ucdr_deserialize_sequence_uint8_t>
 800fa4e:	4604      	mov	r4, r0
 800fa50:	e774      	b.n	800f93c <uxr_deserialize_ObjectVariant+0x44>
 800fa52:	bf00      	nop

0800fa54 <uxr_deserialize_BaseObjectRequest>:
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	2202      	movs	r2, #2
 800fa58:	4605      	mov	r5, r0
 800fa5a:	460e      	mov	r6, r1
 800fa5c:	f003 fa44 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fa60:	2202      	movs	r2, #2
 800fa62:	4604      	mov	r4, r0
 800fa64:	1cb1      	adds	r1, r6, #2
 800fa66:	4628      	mov	r0, r5
 800fa68:	f003 fa3e 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fa6c:	4020      	ands	r0, r4
 800fa6e:	b2c0      	uxtb	r0, r0
 800fa70:	bd70      	pop	{r4, r5, r6, pc}
 800fa72:	bf00      	nop

0800fa74 <uxr_deserialize_BaseObjectReply>:
 800fa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa78:	2202      	movs	r2, #2
 800fa7a:	4606      	mov	r6, r0
 800fa7c:	460f      	mov	r7, r1
 800fa7e:	f003 fa33 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fa82:	2202      	movs	r2, #2
 800fa84:	1cb9      	adds	r1, r7, #2
 800fa86:	4605      	mov	r5, r0
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f003 fa2d 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fa8e:	1d39      	adds	r1, r7, #4
 800fa90:	4680      	mov	r8, r0
 800fa92:	4630      	mov	r0, r6
 800fa94:	f7fc f834 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fa98:	1d79      	adds	r1, r7, #5
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f7fc f82f 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800faa2:	ea05 0508 	and.w	r5, r5, r8
 800faa6:	402c      	ands	r4, r5
 800faa8:	4020      	ands	r0, r4
 800faaa:	b2c0      	uxtb	r0, r0
 800faac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fab0 <uxr_serialize_ReadSpecification>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	460d      	mov	r5, r1
 800fab4:	7809      	ldrb	r1, [r1, #0]
 800fab6:	4606      	mov	r6, r0
 800fab8:	f7fc f80c 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fabc:	7869      	ldrb	r1, [r5, #1]
 800fabe:	4604      	mov	r4, r0
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7fc f807 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fac6:	78a9      	ldrb	r1, [r5, #2]
 800fac8:	4004      	ands	r4, r0
 800faca:	4630      	mov	r0, r6
 800facc:	f7fb ffd4 	bl	800ba78 <ucdr_serialize_bool>
 800fad0:	78ab      	ldrb	r3, [r5, #2]
 800fad2:	b2e4      	uxtb	r4, r4
 800fad4:	4004      	ands	r4, r0
 800fad6:	b943      	cbnz	r3, 800faea <uxr_serialize_ReadSpecification+0x3a>
 800fad8:	4630      	mov	r0, r6
 800fada:	7a29      	ldrb	r1, [r5, #8]
 800fadc:	f7fb ffcc 	bl	800ba78 <ucdr_serialize_bool>
 800fae0:	7a2b      	ldrb	r3, [r5, #8]
 800fae2:	4004      	ands	r4, r0
 800fae4:	b93b      	cbnz	r3, 800faf6 <uxr_serialize_ReadSpecification+0x46>
 800fae6:	4620      	mov	r0, r4
 800fae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faea:	4630      	mov	r0, r6
 800faec:	6869      	ldr	r1, [r5, #4]
 800faee:	f003 fab7 	bl	8013060 <ucdr_serialize_string>
 800faf2:	4004      	ands	r4, r0
 800faf4:	e7f0      	b.n	800fad8 <uxr_serialize_ReadSpecification+0x28>
 800faf6:	8969      	ldrh	r1, [r5, #10]
 800faf8:	4630      	mov	r0, r6
 800fafa:	f7fc f817 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fafe:	89a9      	ldrh	r1, [r5, #12]
 800fb00:	4607      	mov	r7, r0
 800fb02:	4630      	mov	r0, r6
 800fb04:	f7fc f812 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fb08:	89e9      	ldrh	r1, [r5, #14]
 800fb0a:	4007      	ands	r7, r0
 800fb0c:	4630      	mov	r0, r6
 800fb0e:	f7fc f80d 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fb12:	8a29      	ldrh	r1, [r5, #16]
 800fb14:	4605      	mov	r5, r0
 800fb16:	4630      	mov	r0, r6
 800fb18:	f7fc f808 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fb1c:	b2ff      	uxtb	r7, r7
 800fb1e:	403c      	ands	r4, r7
 800fb20:	402c      	ands	r4, r5
 800fb22:	4004      	ands	r4, r0
 800fb24:	4620      	mov	r0, r4
 800fb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fb28 <uxr_serialize_CREATE_CLIENT_Payload>:
 800fb28:	f7ff bb8c 	b.w	800f244 <uxr_serialize_CLIENT_Representation>

0800fb2c <uxr_serialize_CREATE_Payload>:
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	2202      	movs	r2, #2
 800fb30:	4606      	mov	r6, r0
 800fb32:	460d      	mov	r5, r1
 800fb34:	f003 f974 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fb38:	1ca9      	adds	r1, r5, #2
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	2202      	movs	r2, #2
 800fb3e:	4630      	mov	r0, r6
 800fb40:	f003 f96e 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fb44:	7929      	ldrb	r1, [r5, #4]
 800fb46:	4607      	mov	r7, r0
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7fb ffc3 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fb4e:	b328      	cbz	r0, 800fb9c <uxr_serialize_CREATE_Payload+0x70>
 800fb50:	792b      	ldrb	r3, [r5, #4]
 800fb52:	403c      	ands	r4, r7
 800fb54:	3b01      	subs	r3, #1
 800fb56:	b2e4      	uxtb	r4, r4
 800fb58:	2b0d      	cmp	r3, #13
 800fb5a:	d81d      	bhi.n	800fb98 <uxr_serialize_CREATE_Payload+0x6c>
 800fb5c:	e8df f003 	tbb	[pc, r3]
 800fb60:	32320753 	.word	0x32320753
 800fb64:	07070707 	.word	0x07070707
 800fb68:	2121211c 	.word	0x2121211c
 800fb6c:	684c      	.short	0x684c
 800fb6e:	4630      	mov	r0, r6
 800fb70:	7a29      	ldrb	r1, [r5, #8]
 800fb72:	f7fb ffaf 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fb76:	4607      	mov	r7, r0
 800fb78:	b130      	cbz	r0, 800fb88 <uxr_serialize_CREATE_Payload+0x5c>
 800fb7a:	7a2b      	ldrb	r3, [r5, #8]
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d035      	beq.n	800fbec <uxr_serialize_CREATE_Payload+0xc0>
 800fb80:	2b03      	cmp	r3, #3
 800fb82:	d02b      	beq.n	800fbdc <uxr_serialize_CREATE_Payload+0xb0>
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d031      	beq.n	800fbec <uxr_serialize_CREATE_Payload+0xc0>
 800fb88:	4630      	mov	r0, r6
 800fb8a:	2202      	movs	r2, #2
 800fb8c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800fb90:	f003 f946 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fb94:	4038      	ands	r0, r7
 800fb96:	4004      	ands	r4, r0
 800fb98:	4620      	mov	r0, r4
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb9c:	2400      	movs	r4, #0
 800fb9e:	4620      	mov	r0, r4
 800fba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fba2:	4630      	mov	r0, r6
 800fba4:	7a29      	ldrb	r1, [r5, #8]
 800fba6:	f7fb ff95 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0f6      	beq.n	800fb9c <uxr_serialize_CREATE_Payload+0x70>
 800fbae:	7a2b      	ldrb	r3, [r5, #8]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d001      	beq.n	800fbb8 <uxr_serialize_CREATE_Payload+0x8c>
 800fbb4:	2b02      	cmp	r3, #2
 800fbb6:	d1ef      	bne.n	800fb98 <uxr_serialize_CREATE_Payload+0x6c>
 800fbb8:	4630      	mov	r0, r6
 800fbba:	68e9      	ldr	r1, [r5, #12]
 800fbbc:	f003 fa50 	bl	8013060 <ucdr_serialize_string>
 800fbc0:	4004      	ands	r4, r0
 800fbc2:	e7e9      	b.n	800fb98 <uxr_serialize_CREATE_Payload+0x6c>
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	7a29      	ldrb	r1, [r5, #8]
 800fbc8:	f7fb ff84 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fbcc:	4607      	mov	r7, r0
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d0da      	beq.n	800fb88 <uxr_serialize_CREATE_Payload+0x5c>
 800fbd2:	7a2b      	ldrb	r3, [r5, #8]
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d009      	beq.n	800fbec <uxr_serialize_CREATE_Payload+0xc0>
 800fbd8:	2b03      	cmp	r3, #3
 800fbda:	d1d5      	bne.n	800fb88 <uxr_serialize_CREATE_Payload+0x5c>
 800fbdc:	4630      	mov	r0, r6
 800fbde:	68ea      	ldr	r2, [r5, #12]
 800fbe0:	f105 0110 	add.w	r1, r5, #16
 800fbe4:	f003 fa10 	bl	8013008 <ucdr_serialize_sequence_uint8_t>
 800fbe8:	4607      	mov	r7, r0
 800fbea:	e7cd      	b.n	800fb88 <uxr_serialize_CREATE_Payload+0x5c>
 800fbec:	4630      	mov	r0, r6
 800fbee:	68e9      	ldr	r1, [r5, #12]
 800fbf0:	f003 fa36 	bl	8013060 <ucdr_serialize_string>
 800fbf4:	4607      	mov	r7, r0
 800fbf6:	e7c7      	b.n	800fb88 <uxr_serialize_CREATE_Payload+0x5c>
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f105 0108 	add.w	r1, r5, #8
 800fbfe:	f7ff fbdb 	bl	800f3b8 <uxr_serialize_AGENT_Representation>
 800fc02:	4004      	ands	r4, r0
 800fc04:	e7c8      	b.n	800fb98 <uxr_serialize_CREATE_Payload+0x6c>
 800fc06:	4630      	mov	r0, r6
 800fc08:	7a29      	ldrb	r1, [r5, #8]
 800fc0a:	f7fb ff63 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fc0e:	4607      	mov	r7, r0
 800fc10:	b130      	cbz	r0, 800fc20 <uxr_serialize_CREATE_Payload+0xf4>
 800fc12:	7a2b      	ldrb	r3, [r5, #8]
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d012      	beq.n	800fc3e <uxr_serialize_CREATE_Payload+0x112>
 800fc18:	2b03      	cmp	r3, #3
 800fc1a:	d016      	beq.n	800fc4a <uxr_serialize_CREATE_Payload+0x11e>
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d00e      	beq.n	800fc3e <uxr_serialize_CREATE_Payload+0x112>
 800fc20:	4630      	mov	r0, r6
 800fc22:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 800fc26:	f7fc fc95 	bl	800c554 <ucdr_serialize_int16_t>
 800fc2a:	4038      	ands	r0, r7
 800fc2c:	4004      	ands	r4, r0
 800fc2e:	e7b3      	b.n	800fb98 <uxr_serialize_CREATE_Payload+0x6c>
 800fc30:	4630      	mov	r0, r6
 800fc32:	f105 0108 	add.w	r1, r5, #8
 800fc36:	f7ff fb05 	bl	800f244 <uxr_serialize_CLIENT_Representation>
 800fc3a:	4004      	ands	r4, r0
 800fc3c:	e7ac      	b.n	800fb98 <uxr_serialize_CREATE_Payload+0x6c>
 800fc3e:	4630      	mov	r0, r6
 800fc40:	68e9      	ldr	r1, [r5, #12]
 800fc42:	f003 fa0d 	bl	8013060 <ucdr_serialize_string>
 800fc46:	4607      	mov	r7, r0
 800fc48:	e7ea      	b.n	800fc20 <uxr_serialize_CREATE_Payload+0xf4>
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	68ea      	ldr	r2, [r5, #12]
 800fc4e:	f105 0110 	add.w	r1, r5, #16
 800fc52:	f003 f9d9 	bl	8013008 <ucdr_serialize_sequence_uint8_t>
 800fc56:	4607      	mov	r7, r0
 800fc58:	e7e2      	b.n	800fc20 <uxr_serialize_CREATE_Payload+0xf4>
 800fc5a:	bf00      	nop

0800fc5c <uxr_serialize_DELETE_Payload>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	2202      	movs	r2, #2
 800fc60:	4605      	mov	r5, r0
 800fc62:	460e      	mov	r6, r1
 800fc64:	f003 f8dc 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fc68:	2202      	movs	r2, #2
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	1cb1      	adds	r1, r6, #2
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f003 f8d6 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fc74:	4020      	ands	r0, r4
 800fc76:	b2c0      	uxtb	r0, r0
 800fc78:	bd70      	pop	{r4, r5, r6, pc}
 800fc7a:	bf00      	nop

0800fc7c <uxr_deserialize_STATUS_AGENT_Payload>:
 800fc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc80:	4606      	mov	r6, r0
 800fc82:	460f      	mov	r7, r1
 800fc84:	f7fb ff3c 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fc88:	1c79      	adds	r1, r7, #1
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	f7fb ff37 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fc92:	1d39      	adds	r1, r7, #4
 800fc94:	4682      	mov	sl, r0
 800fc96:	2204      	movs	r2, #4
 800fc98:	4630      	mov	r0, r6
 800fc9a:	f003 f925 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fc9e:	f107 0108 	add.w	r1, r7, #8
 800fca2:	4681      	mov	r9, r0
 800fca4:	2202      	movs	r2, #2
 800fca6:	4630      	mov	r0, r6
 800fca8:	f003 f91e 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fcac:	2202      	movs	r2, #2
 800fcae:	4680      	mov	r8, r0
 800fcb0:	f107 010a 	add.w	r1, r7, #10
 800fcb4:	4630      	mov	r0, r6
 800fcb6:	f003 f917 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fcba:	ea05 050a 	and.w	r5, r5, sl
 800fcbe:	b2ec      	uxtb	r4, r5
 800fcc0:	f107 010c 	add.w	r1, r7, #12
 800fcc4:	4605      	mov	r5, r0
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f7fb feec 	bl	800baa4 <ucdr_deserialize_bool>
 800fccc:	ea04 0409 	and.w	r4, r4, r9
 800fcd0:	ea08 0404 	and.w	r4, r8, r4
 800fcd4:	4025      	ands	r5, r4
 800fcd6:	4028      	ands	r0, r5
 800fcd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fcdc <uxr_deserialize_STATUS_Payload>:
 800fcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce0:	2202      	movs	r2, #2
 800fce2:	4606      	mov	r6, r0
 800fce4:	460f      	mov	r7, r1
 800fce6:	f003 f8ff 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fcea:	2202      	movs	r2, #2
 800fcec:	1cb9      	adds	r1, r7, #2
 800fcee:	4605      	mov	r5, r0
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	f003 f8f9 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fcf6:	1d39      	adds	r1, r7, #4
 800fcf8:	4680      	mov	r8, r0
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f7fb ff00 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fd00:	1d79      	adds	r1, r7, #5
 800fd02:	4604      	mov	r4, r0
 800fd04:	4630      	mov	r0, r6
 800fd06:	f7fb fefb 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fd0a:	ea05 0508 	and.w	r5, r5, r8
 800fd0e:	402c      	ands	r4, r5
 800fd10:	4020      	ands	r0, r4
 800fd12:	b2c0      	uxtb	r0, r0
 800fd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd18 <uxr_serialize_READ_DATA_Payload>:
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	2202      	movs	r2, #2
 800fd1c:	4605      	mov	r5, r0
 800fd1e:	460e      	mov	r6, r1
 800fd20:	f003 f87e 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fd24:	2202      	movs	r2, #2
 800fd26:	1cb1      	adds	r1, r6, #2
 800fd28:	4604      	mov	r4, r0
 800fd2a:	4628      	mov	r0, r5
 800fd2c:	f003 f878 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fd30:	1d31      	adds	r1, r6, #4
 800fd32:	4004      	ands	r4, r0
 800fd34:	4628      	mov	r0, r5
 800fd36:	f7ff febb 	bl	800fab0 <uxr_serialize_ReadSpecification>
 800fd3a:	b2e4      	uxtb	r4, r4
 800fd3c:	4020      	ands	r0, r4
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}

0800fd40 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800fd40:	b570      	push	{r4, r5, r6, lr}
 800fd42:	2202      	movs	r2, #2
 800fd44:	4605      	mov	r5, r0
 800fd46:	460e      	mov	r6, r1
 800fd48:	f003 f86a 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fd4c:	2202      	movs	r2, #2
 800fd4e:	4604      	mov	r4, r0
 800fd50:	1cb1      	adds	r1, r6, #2
 800fd52:	4628      	mov	r0, r5
 800fd54:	f003 f864 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fd58:	4020      	ands	r0, r4
 800fd5a:	b2c0      	uxtb	r0, r0
 800fd5c:	bd70      	pop	{r4, r5, r6, pc}
 800fd5e:	bf00      	nop

0800fd60 <uxr_serialize_ACKNACK_Payload>:
 800fd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd62:	460f      	mov	r7, r1
 800fd64:	460e      	mov	r6, r1
 800fd66:	f837 1b02 	ldrh.w	r1, [r7], #2
 800fd6a:	4605      	mov	r5, r0
 800fd6c:	f7fb fede 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fd70:	4639      	mov	r1, r7
 800fd72:	2202      	movs	r2, #2
 800fd74:	4604      	mov	r4, r0
 800fd76:	4628      	mov	r0, r5
 800fd78:	f003 f852 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fd7c:	7931      	ldrb	r1, [r6, #4]
 800fd7e:	4004      	ands	r4, r0
 800fd80:	4628      	mov	r0, r5
 800fd82:	f7fb fea7 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fd86:	b2e4      	uxtb	r4, r4
 800fd88:	4020      	ands	r0, r4
 800fd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd8c <uxr_deserialize_ACKNACK_Payload>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	4605      	mov	r5, r0
 800fd90:	460e      	mov	r6, r1
 800fd92:	f7fb ffcb 	bl	800bd2c <ucdr_deserialize_uint16_t>
 800fd96:	2202      	movs	r2, #2
 800fd98:	1cb1      	adds	r1, r6, #2
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f003 f8a3 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fda2:	1d31      	adds	r1, r6, #4
 800fda4:	4004      	ands	r4, r0
 800fda6:	4628      	mov	r0, r5
 800fda8:	f7fb feaa 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fdac:	b2e4      	uxtb	r4, r4
 800fdae:	4020      	ands	r0, r4
 800fdb0:	bd70      	pop	{r4, r5, r6, pc}
 800fdb2:	bf00      	nop

0800fdb4 <uxr_serialize_HEARTBEAT_Payload>:
 800fdb4:	b570      	push	{r4, r5, r6, lr}
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	8809      	ldrh	r1, [r1, #0]
 800fdba:	4606      	mov	r6, r0
 800fdbc:	f7fb feb6 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fdc0:	8869      	ldrh	r1, [r5, #2]
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7fb feb1 	bl	800bb2c <ucdr_serialize_uint16_t>
 800fdca:	7929      	ldrb	r1, [r5, #4]
 800fdcc:	4004      	ands	r4, r0
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f7fb fe80 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fdd4:	b2e4      	uxtb	r4, r4
 800fdd6:	4020      	ands	r0, r4
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}
 800fdda:	bf00      	nop

0800fddc <uxr_deserialize_HEARTBEAT_Payload>:
 800fddc:	b570      	push	{r4, r5, r6, lr}
 800fdde:	4605      	mov	r5, r0
 800fde0:	460e      	mov	r6, r1
 800fde2:	f7fb ffa3 	bl	800bd2c <ucdr_deserialize_uint16_t>
 800fde6:	1cb1      	adds	r1, r6, #2
 800fde8:	4604      	mov	r4, r0
 800fdea:	4628      	mov	r0, r5
 800fdec:	f7fb ff9e 	bl	800bd2c <ucdr_deserialize_uint16_t>
 800fdf0:	1d31      	adds	r1, r6, #4
 800fdf2:	4004      	ands	r4, r0
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	f7fb fe83 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fdfa:	b2e4      	uxtb	r4, r4
 800fdfc:	4020      	ands	r0, r4
 800fdfe:	bd70      	pop	{r4, r5, r6, pc}

0800fe00 <uxr_serialize_TIMESTAMP_Payload>:
 800fe00:	b570      	push	{r4, r5, r6, lr}
 800fe02:	460d      	mov	r5, r1
 800fe04:	6809      	ldr	r1, [r1, #0]
 800fe06:	4606      	mov	r6, r0
 800fe08:	f7fc fc98 	bl	800c73c <ucdr_serialize_int32_t>
 800fe0c:	6869      	ldr	r1, [r5, #4]
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4630      	mov	r0, r6
 800fe12:	f7fc f879 	bl	800bf08 <ucdr_serialize_uint32_t>
 800fe16:	4020      	ands	r0, r4
 800fe18:	b2c0      	uxtb	r0, r0
 800fe1a:	bd70      	pop	{r4, r5, r6, pc}

0800fe1c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	4605      	mov	r5, r0
 800fe22:	460e      	mov	r6, r1
 800fe24:	f7fc fd22 	bl	800c86c <ucdr_deserialize_int32_t>
 800fe28:	1d31      	adds	r1, r6, #4
 800fe2a:	4607      	mov	r7, r0
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	f7fc f99b 	bl	800c168 <ucdr_deserialize_uint32_t>
 800fe32:	f106 0108 	add.w	r1, r6, #8
 800fe36:	4680      	mov	r8, r0
 800fe38:	4628      	mov	r0, r5
 800fe3a:	f7fc fd17 	bl	800c86c <ucdr_deserialize_int32_t>
 800fe3e:	f106 010c 	add.w	r1, r6, #12
 800fe42:	4604      	mov	r4, r0
 800fe44:	4628      	mov	r0, r5
 800fe46:	f7fc f98f 	bl	800c168 <ucdr_deserialize_uint32_t>
 800fe4a:	ea07 0708 	and.w	r7, r7, r8
 800fe4e:	403c      	ands	r4, r7
 800fe50:	f106 0110 	add.w	r1, r6, #16
 800fe54:	4004      	ands	r4, r0
 800fe56:	4628      	mov	r0, r5
 800fe58:	f7fc fd08 	bl	800c86c <ucdr_deserialize_int32_t>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f106 0114 	add.w	r1, r6, #20
 800fe62:	4628      	mov	r0, r5
 800fe64:	461d      	mov	r5, r3
 800fe66:	f7fc f97f 	bl	800c168 <ucdr_deserialize_uint32_t>
 800fe6a:	b2e4      	uxtb	r4, r4
 800fe6c:	402c      	ands	r4, r5
 800fe6e:	4020      	ands	r0, r4
 800fe70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe74 <uxr_serialize_SampleIdentity>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	220c      	movs	r2, #12
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	460d      	mov	r5, r1
 800fe7e:	f002 ffcf 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fe82:	2203      	movs	r2, #3
 800fe84:	f105 010c 	add.w	r1, r5, #12
 800fe88:	4607      	mov	r7, r0
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f002 ffc8 	bl	8012e20 <ucdr_serialize_array_uint8_t>
 800fe90:	7be9      	ldrb	r1, [r5, #15]
 800fe92:	4680      	mov	r8, r0
 800fe94:	4620      	mov	r0, r4
 800fe96:	f7fb fe1d 	bl	800bad4 <ucdr_serialize_uint8_t>
 800fe9a:	6929      	ldr	r1, [r5, #16]
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f7fc fc4c 	bl	800c73c <ucdr_serialize_int32_t>
 800fea4:	4603      	mov	r3, r0
 800fea6:	6969      	ldr	r1, [r5, #20]
 800fea8:	4620      	mov	r0, r4
 800feaa:	461c      	mov	r4, r3
 800feac:	f7fc f82c 	bl	800bf08 <ucdr_serialize_uint32_t>
 800feb0:	ea07 0708 	and.w	r7, r7, r8
 800feb4:	403e      	ands	r6, r7
 800feb6:	4034      	ands	r4, r6
 800feb8:	4020      	ands	r0, r4
 800feba:	b2c0      	uxtb	r0, r0
 800febc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fec0 <uxr_deserialize_SampleIdentity>:
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	220c      	movs	r2, #12
 800fec6:	4604      	mov	r4, r0
 800fec8:	460d      	mov	r5, r1
 800feca:	f003 f80d 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fece:	2203      	movs	r2, #3
 800fed0:	f105 010c 	add.w	r1, r5, #12
 800fed4:	4607      	mov	r7, r0
 800fed6:	4620      	mov	r0, r4
 800fed8:	f003 f806 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 800fedc:	f105 010f 	add.w	r1, r5, #15
 800fee0:	4680      	mov	r8, r0
 800fee2:	4620      	mov	r0, r4
 800fee4:	f7fb fe0c 	bl	800bb00 <ucdr_deserialize_uint8_t>
 800fee8:	f105 0110 	add.w	r1, r5, #16
 800feec:	4606      	mov	r6, r0
 800feee:	4620      	mov	r0, r4
 800fef0:	f7fc fcbc 	bl	800c86c <ucdr_deserialize_int32_t>
 800fef4:	4603      	mov	r3, r0
 800fef6:	f105 0114 	add.w	r1, r5, #20
 800fefa:	4620      	mov	r0, r4
 800fefc:	461c      	mov	r4, r3
 800fefe:	f7fc f933 	bl	800c168 <ucdr_deserialize_uint32_t>
 800ff02:	ea07 0708 	and.w	r7, r7, r8
 800ff06:	403e      	ands	r6, r7
 800ff08:	4034      	ands	r4, r6
 800ff0a:	4020      	ands	r0, r4
 800ff0c:	b2c0      	uxtb	r0, r0
 800ff0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff12:	bf00      	nop

0800ff14 <rcl_client_get_rmw_handle>:
 800ff14:	b110      	cbz	r0, 800ff1c <rcl_client_get_rmw_handle+0x8>
 800ff16:	6800      	ldr	r0, [r0, #0]
 800ff18:	b100      	cbz	r0, 800ff1c <rcl_client_get_rmw_handle+0x8>
 800ff1a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop

0800ff20 <rcl_take_response>:
 800ff20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff22:	460e      	mov	r6, r1
 800ff24:	4607      	mov	r7, r0
 800ff26:	b08d      	sub	sp, #52	; 0x34
 800ff28:	ad06      	add	r5, sp, #24
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	4694      	mov	ip, r2
 800ff2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ff30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ff32:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff36:	e885 0003 	stmia.w	r5, {r0, r1}
 800ff3a:	b337      	cbz	r7, 800ff8a <rcl_take_response+0x6a>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	b323      	cbz	r3, 800ff8a <rcl_take_response+0x6a>
 800ff40:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ff42:	b310      	cbz	r0, 800ff8a <rcl_take_response+0x6a>
 800ff44:	4662      	mov	r2, ip
 800ff46:	b31a      	cbz	r2, 800ff90 <rcl_take_response+0x70>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	2600      	movs	r6, #0
 800ff4c:	2700      	movs	r7, #0
 800ff4e:	f88d 3007 	strb.w	r3, [sp, #7]
 800ff52:	a902      	add	r1, sp, #8
 800ff54:	f10d 0307 	add.w	r3, sp, #7
 800ff58:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ff5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ff60:	f002 fd10 	bl	8012984 <rmw_take_response>
 800ff64:	4606      	mov	r6, r0
 800ff66:	b9a8      	cbnz	r0, 800ff94 <rcl_take_response+0x74>
 800ff68:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ff6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff70:	2a00      	cmp	r2, #0
 800ff72:	bf08      	it	eq
 800ff74:	461e      	moveq	r6, r3
 800ff76:	ad06      	add	r5, sp, #24
 800ff78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ff80:	e884 0003 	stmia.w	r4, {r0, r1}
 800ff84:	4630      	mov	r0, r6
 800ff86:	b00d      	add	sp, #52	; 0x34
 800ff88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff8a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800ff8e:	e7f2      	b.n	800ff76 <rcl_take_response+0x56>
 800ff90:	260b      	movs	r6, #11
 800ff92:	e7f0      	b.n	800ff76 <rcl_take_response+0x56>
 800ff94:	2601      	movs	r6, #1
 800ff96:	e7ee      	b.n	800ff76 <rcl_take_response+0x56>

0800ff98 <rcl_convert_rmw_ret_to_rcl_ret>:
 800ff98:	280b      	cmp	r0, #11
 800ff9a:	dc0d      	bgt.n	800ffb8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	db09      	blt.n	800ffb4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ffa0:	280b      	cmp	r0, #11
 800ffa2:	d807      	bhi.n	800ffb4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800ffa4:	e8df f000 	tbb	[pc, r0]
 800ffa8:	07060607 	.word	0x07060607
 800ffac:	06060606 	.word	0x06060606
 800ffb0:	07070606 	.word	0x07070606
 800ffb4:	2001      	movs	r0, #1
 800ffb6:	4770      	bx	lr
 800ffb8:	28cb      	cmp	r0, #203	; 0xcb
 800ffba:	bf18      	it	ne
 800ffbc:	2001      	movne	r0, #1
 800ffbe:	4770      	bx	lr

0800ffc0 <rcl_get_zero_initialized_context>:
 800ffc0:	b4d0      	push	{r4, r6, r7}
 800ffc2:	2600      	movs	r6, #0
 800ffc4:	2700      	movs	r7, #0
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	4b04      	ldr	r3, [pc, #16]	; (800ffdc <rcl_get_zero_initialized_context+0x1c>)
 800ffca:	e9c3 6702 	strd	r6, r7, [r3, #8]
 800ffce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	bcd0      	pop	{r4, r6, r7}
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	20006570 	.word	0x20006570

0800ffe0 <rcl_context_is_valid>:
 800ffe0:	b150      	cbz	r0, 800fff8 <rcl_context_is_valid+0x18>
 800ffe2:	b508      	push	{r3, lr}
 800ffe4:	2105      	movs	r1, #5
 800ffe6:	3008      	adds	r0, #8
 800ffe8:	f001 ff36 	bl	8011e58 <__atomic_load_8>
 800ffec:	ea51 0300 	orrs.w	r3, r1, r0
 800fff0:	bf14      	ite	ne
 800fff2:	2001      	movne	r0, #1
 800fff4:	2000      	moveq	r0, #0
 800fff6:	bd08      	pop	{r3, pc}
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop

0800fffc <__cleanup_context>:
 800fffc:	2305      	movs	r3, #5
 800fffe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010002:	4606      	mov	r6, r0
 8010004:	b087      	sub	sp, #28
 8010006:	9300      	str	r3, [sp, #0]
 8010008:	3008      	adds	r0, #8
 801000a:	2200      	movs	r2, #0
 801000c:	2300      	movs	r3, #0
 801000e:	f001 ff57 	bl	8011ec0 <__atomic_store_8>
 8010012:	6830      	ldr	r0, [r6, #0]
 8010014:	2800      	cmp	r0, #0
 8010016:	d052      	beq.n	80100be <__cleanup_context+0xc2>
 8010018:	6947      	ldr	r7, [r0, #20]
 801001a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801001e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010022:	b137      	cbz	r7, 8010032 <__cleanup_context+0x36>
 8010024:	3014      	adds	r0, #20
 8010026:	f7f8 ff75 	bl	8008f14 <rcl_init_options_fini>
 801002a:	4607      	mov	r7, r0
 801002c:	2800      	cmp	r0, #0
 801002e:	d148      	bne.n	80100c2 <__cleanup_context+0xc6>
 8010030:	6830      	ldr	r0, [r6, #0]
 8010032:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010034:	b143      	cbz	r3, 8010048 <__cleanup_context+0x4c>
 8010036:	3028      	adds	r0, #40	; 0x28
 8010038:	f7fa fccc 	bl	800a9d4 <rmw_context_fini>
 801003c:	b118      	cbz	r0, 8010046 <__cleanup_context+0x4a>
 801003e:	2f00      	cmp	r7, #0
 8010040:	d042      	beq.n	80100c8 <__cleanup_context+0xcc>
 8010042:	f7fa f869 	bl	800a118 <rcutils_reset_error>
 8010046:	6830      	ldr	r0, [r6, #0]
 8010048:	6a01      	ldr	r1, [r0, #32]
 801004a:	b1d9      	cbz	r1, 8010084 <__cleanup_context+0x88>
 801004c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010050:	2a01      	cmp	r2, #1
 8010052:	f173 0000 	sbcs.w	r0, r3, #0
 8010056:	db11      	blt.n	801007c <__cleanup_context+0x80>
 8010058:	2400      	movs	r4, #0
 801005a:	2500      	movs	r5, #0
 801005c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8010060:	b308      	cbz	r0, 80100a6 <__cleanup_context+0xaa>
 8010062:	4649      	mov	r1, r9
 8010064:	47c0      	blx	r8
 8010066:	6831      	ldr	r1, [r6, #0]
 8010068:	3401      	adds	r4, #1
 801006a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 801006e:	f145 0500 	adc.w	r5, r5, #0
 8010072:	4294      	cmp	r4, r2
 8010074:	eb75 0003 	sbcs.w	r0, r5, r3
 8010078:	6a09      	ldr	r1, [r1, #32]
 801007a:	dbef      	blt.n	801005c <__cleanup_context+0x60>
 801007c:	4608      	mov	r0, r1
 801007e:	4649      	mov	r1, r9
 8010080:	47c0      	blx	r8
 8010082:	6830      	ldr	r0, [r6, #0]
 8010084:	4649      	mov	r1, r9
 8010086:	47c0      	blx	r8
 8010088:	2000      	movs	r0, #0
 801008a:	2100      	movs	r1, #0
 801008c:	4b10      	ldr	r3, [pc, #64]	; (80100d0 <__cleanup_context+0xd4>)
 801008e:	ac02      	add	r4, sp, #8
 8010090:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801009a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801009e:	4638      	mov	r0, r7
 80100a0:	b007      	add	sp, #28
 80100a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100a6:	3401      	adds	r4, #1
 80100a8:	f145 0500 	adc.w	r5, r5, #0
 80100ac:	4294      	cmp	r4, r2
 80100ae:	eb75 0003 	sbcs.w	r0, r5, r3
 80100b2:	dbd3      	blt.n	801005c <__cleanup_context+0x60>
 80100b4:	4608      	mov	r0, r1
 80100b6:	4649      	mov	r1, r9
 80100b8:	47c0      	blx	r8
 80100ba:	6830      	ldr	r0, [r6, #0]
 80100bc:	e7e2      	b.n	8010084 <__cleanup_context+0x88>
 80100be:	4607      	mov	r7, r0
 80100c0:	e7e2      	b.n	8010088 <__cleanup_context+0x8c>
 80100c2:	f7fa f829 	bl	800a118 <rcutils_reset_error>
 80100c6:	e7b3      	b.n	8010030 <__cleanup_context+0x34>
 80100c8:	f7ff ff66 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 80100cc:	4607      	mov	r7, r0
 80100ce:	e7b8      	b.n	8010042 <__cleanup_context+0x46>
 80100d0:	20006570 	.word	0x20006570

080100d4 <rcl_expand_topic_name>:
 80100d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d8:	b08b      	sub	sp, #44	; 0x2c
 80100da:	9306      	str	r3, [sp, #24]
 80100dc:	2800      	cmp	r0, #0
 80100de:	f000 80d6 	beq.w	801028e <rcl_expand_topic_name+0x1ba>
 80100e2:	460e      	mov	r6, r1
 80100e4:	2900      	cmp	r1, #0
 80100e6:	f000 80d2 	beq.w	801028e <rcl_expand_topic_name+0x1ba>
 80100ea:	4617      	mov	r7, r2
 80100ec:	2a00      	cmp	r2, #0
 80100ee:	f000 80ce 	beq.w	801028e <rcl_expand_topic_name+0x1ba>
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f000 80cb 	beq.w	801028e <rcl_expand_topic_name+0x1ba>
 80100f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f000 80c7 	beq.w	801028e <rcl_expand_topic_name+0x1ba>
 8010100:	2200      	movs	r2, #0
 8010102:	a909      	add	r1, sp, #36	; 0x24
 8010104:	4680      	mov	r8, r0
 8010106:	f000 ffc3 	bl	8011090 <rcl_validate_topic_name>
 801010a:	4604      	mov	r4, r0
 801010c:	2800      	cmp	r0, #0
 801010e:	f040 80ba 	bne.w	8010286 <rcl_expand_topic_name+0x1b2>
 8010112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010114:	2b00      	cmp	r3, #0
 8010116:	f040 80c3 	bne.w	80102a0 <rcl_expand_topic_name+0x1cc>
 801011a:	4602      	mov	r2, r0
 801011c:	a909      	add	r1, sp, #36	; 0x24
 801011e:	4630      	mov	r0, r6
 8010120:	f002 f950 	bl	80123c4 <rmw_validate_node_name>
 8010124:	2800      	cmp	r0, #0
 8010126:	f040 80b7 	bne.w	8010298 <rcl_expand_topic_name+0x1c4>
 801012a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801012c:	2a00      	cmp	r2, #0
 801012e:	f040 80bc 	bne.w	80102aa <rcl_expand_topic_name+0x1d6>
 8010132:	4638      	mov	r0, r7
 8010134:	a909      	add	r1, sp, #36	; 0x24
 8010136:	f002 f927 	bl	8012388 <rmw_validate_namespace>
 801013a:	2800      	cmp	r0, #0
 801013c:	f040 80ac 	bne.w	8010298 <rcl_expand_topic_name+0x1c4>
 8010140:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010142:	2c00      	cmp	r4, #0
 8010144:	f040 80f4 	bne.w	8010330 <rcl_expand_topic_name+0x25c>
 8010148:	217b      	movs	r1, #123	; 0x7b
 801014a:	4640      	mov	r0, r8
 801014c:	f004 f820 	bl	8014190 <strchr>
 8010150:	f898 3000 	ldrb.w	r3, [r8]
 8010154:	4683      	mov	fp, r0
 8010156:	2b2f      	cmp	r3, #47	; 0x2f
 8010158:	f000 80a9 	beq.w	80102ae <rcl_expand_topic_name+0x1da>
 801015c:	2b7e      	cmp	r3, #126	; 0x7e
 801015e:	f040 80ad 	bne.w	80102bc <rcl_expand_topic_name+0x1e8>
 8010162:	4638      	mov	r0, r7
 8010164:	f7f0 f86e 	bl	8000244 <strlen>
 8010168:	4681      	mov	r9, r0
 801016a:	f8df e228 	ldr.w	lr, [pc, #552]	; 8010394 <rcl_expand_topic_name+0x2c0>
 801016e:	f8df c228 	ldr.w	ip, [pc, #552]	; 8010398 <rcl_expand_topic_name+0x2c4>
 8010172:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010174:	f1b9 0f01 	cmp.w	r9, #1
 8010178:	bf18      	it	ne
 801017a:	46f4      	movne	ip, lr
 801017c:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8010180:	ab14      	add	r3, sp, #80	; 0x50
 8010182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010184:	e9cd c702 	strd	ip, r7, [sp, #8]
 8010188:	f108 0c01 	add.w	ip, r8, #1
 801018c:	9500      	str	r5, [sp, #0]
 801018e:	9604      	str	r6, [sp, #16]
 8010190:	f8cd e004 	str.w	lr, [sp, #4]
 8010194:	f8cd c014 	str.w	ip, [sp, #20]
 8010198:	f001 ff48 	bl	801202c <rcutils_format_string_limit>
 801019c:	4605      	mov	r5, r0
 801019e:	2800      	cmp	r0, #0
 80101a0:	f000 80c8 	beq.w	8010334 <rcl_expand_topic_name+0x260>
 80101a4:	465b      	mov	r3, fp
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	f000 80a4 	beq.w	80102f4 <rcl_expand_topic_name+0x220>
 80101ac:	217b      	movs	r1, #123	; 0x7b
 80101ae:	f003 ffef 	bl	8014190 <strchr>
 80101b2:	46a9      	mov	r9, r5
 80101b4:	4683      	mov	fp, r0
 80101b6:	46aa      	mov	sl, r5
 80101b8:	9407      	str	r4, [sp, #28]
 80101ba:	465d      	mov	r5, fp
 80101bc:	464c      	mov	r4, r9
 80101be:	2d00      	cmp	r5, #0
 80101c0:	f000 80bd 	beq.w	801033e <rcl_expand_topic_name+0x26a>
 80101c4:	217d      	movs	r1, #125	; 0x7d
 80101c6:	4620      	mov	r0, r4
 80101c8:	f003 ffe2 	bl	8014190 <strchr>
 80101cc:	eba0 0905 	sub.w	r9, r0, r5
 80101d0:	f109 0b01 	add.w	fp, r9, #1
 80101d4:	465a      	mov	r2, fp
 80101d6:	4629      	mov	r1, r5
 80101d8:	4869      	ldr	r0, [pc, #420]	; (8010380 <rcl_expand_topic_name+0x2ac>)
 80101da:	f003 ffee 	bl	80141ba <strncmp>
 80101de:	2800      	cmp	r0, #0
 80101e0:	d06a      	beq.n	80102b8 <rcl_expand_topic_name+0x1e4>
 80101e2:	465a      	mov	r2, fp
 80101e4:	4629      	mov	r1, r5
 80101e6:	4867      	ldr	r0, [pc, #412]	; (8010384 <rcl_expand_topic_name+0x2b0>)
 80101e8:	f003 ffe7 	bl	80141ba <strncmp>
 80101ec:	b128      	cbz	r0, 80101fa <rcl_expand_topic_name+0x126>
 80101ee:	465a      	mov	r2, fp
 80101f0:	4629      	mov	r1, r5
 80101f2:	4865      	ldr	r0, [pc, #404]	; (8010388 <rcl_expand_topic_name+0x2b4>)
 80101f4:	f003 ffe1 	bl	80141ba <strncmp>
 80101f8:	bb38      	cbnz	r0, 801024a <rcl_expand_topic_name+0x176>
 80101fa:	46b9      	mov	r9, r7
 80101fc:	ab16      	add	r3, sp, #88	; 0x58
 80101fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010202:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010206:	ab14      	add	r3, sp, #80	; 0x50
 8010208:	4628      	mov	r0, r5
 801020a:	cb0c      	ldmia	r3, {r2, r3}
 801020c:	4659      	mov	r1, fp
 801020e:	f002 f849 	bl	80122a4 <rcutils_strndup>
 8010212:	4605      	mov	r5, r0
 8010214:	2800      	cmp	r0, #0
 8010216:	f000 809c 	beq.w	8010352 <rcl_expand_topic_name+0x27e>
 801021a:	464a      	mov	r2, r9
 801021c:	4620      	mov	r0, r4
 801021e:	4629      	mov	r1, r5
 8010220:	ab14      	add	r3, sp, #80	; 0x50
 8010222:	f001 ff55 	bl	80120d0 <rcutils_repl_str>
 8010226:	4604      	mov	r4, r0
 8010228:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801022a:	4628      	mov	r0, r5
 801022c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801022e:	4798      	blx	r3
 8010230:	4650      	mov	r0, sl
 8010232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010234:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010236:	4798      	blx	r3
 8010238:	2c00      	cmp	r4, #0
 801023a:	d07b      	beq.n	8010334 <rcl_expand_topic_name+0x260>
 801023c:	217b      	movs	r1, #123	; 0x7b
 801023e:	4620      	mov	r0, r4
 8010240:	f003 ffa6 	bl	8014190 <strchr>
 8010244:	46a2      	mov	sl, r4
 8010246:	4605      	mov	r5, r0
 8010248:	e7b9      	b.n	80101be <rcl_expand_topic_name+0xea>
 801024a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801024e:	9806      	ldr	r0, [sp, #24]
 8010250:	1c69      	adds	r1, r5, #1
 8010252:	f7fa f873 	bl	800a33c <rcutils_string_map_getn>
 8010256:	4681      	mov	r9, r0
 8010258:	2800      	cmp	r0, #0
 801025a:	d1cf      	bne.n	80101fc <rcl_expand_topic_name+0x128>
 801025c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801025e:	ab16      	add	r3, sp, #88	; 0x58
 8010260:	6010      	str	r0, [r2, #0]
 8010262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010266:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801026a:	ab14      	add	r3, sp, #80	; 0x50
 801026c:	cb0c      	ldmia	r3, {r2, r3}
 801026e:	4659      	mov	r1, fp
 8010270:	4628      	mov	r0, r5
 8010272:	f002 f817 	bl	80122a4 <rcutils_strndup>
 8010276:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010278:	9918      	ldr	r1, [sp, #96]	; 0x60
 801027a:	4798      	blx	r3
 801027c:	4650      	mov	r0, sl
 801027e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010280:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010282:	4798      	blx	r3
 8010284:	2469      	movs	r4, #105	; 0x69
 8010286:	4620      	mov	r0, r4
 8010288:	b00b      	add	sp, #44	; 0x2c
 801028a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028e:	240b      	movs	r4, #11
 8010290:	4620      	mov	r0, r4
 8010292:	b00b      	add	sp, #44	; 0x2c
 8010294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010298:	f7ff fe7e 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 801029c:	4604      	mov	r4, r0
 801029e:	e7f2      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 80102a0:	2467      	movs	r4, #103	; 0x67
 80102a2:	4620      	mov	r0, r4
 80102a4:	b00b      	add	sp, #44	; 0x2c
 80102a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102aa:	24c9      	movs	r4, #201	; 0xc9
 80102ac:	e7eb      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	d057      	beq.n	8010362 <rcl_expand_topic_name+0x28e>
 80102b2:	46c1      	mov	r9, r8
 80102b4:	4625      	mov	r5, r4
 80102b6:	e77e      	b.n	80101b6 <rcl_expand_topic_name+0xe2>
 80102b8:	46b1      	mov	r9, r6
 80102ba:	e79f      	b.n	80101fc <rcl_expand_topic_name+0x128>
 80102bc:	2800      	cmp	r0, #0
 80102be:	d1f8      	bne.n	80102b2 <rcl_expand_topic_name+0x1de>
 80102c0:	4638      	mov	r0, r7
 80102c2:	f7ef ffbf 	bl	8000244 <strlen>
 80102c6:	4a31      	ldr	r2, [pc, #196]	; (801038c <rcl_expand_topic_name+0x2b8>)
 80102c8:	4b31      	ldr	r3, [pc, #196]	; (8010390 <rcl_expand_topic_name+0x2bc>)
 80102ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80102ce:	2801      	cmp	r0, #1
 80102d0:	bf18      	it	ne
 80102d2:	4613      	movne	r3, r2
 80102d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80102d6:	e9cd 3702 	strd	r3, r7, [sp, #8]
 80102da:	e9cd 2100 	strd	r2, r1, [sp]
 80102de:	f8cd 8010 	str.w	r8, [sp, #16]
 80102e2:	ab14      	add	r3, sp, #80	; 0x50
 80102e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102e6:	f001 fea1 	bl	801202c <rcutils_format_string_limit>
 80102ea:	4605      	mov	r5, r0
 80102ec:	b315      	cbz	r5, 8010334 <rcl_expand_topic_name+0x260>
 80102ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80102f0:	601d      	str	r5, [r3, #0]
 80102f2:	e7c8      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 80102f4:	782b      	ldrb	r3, [r5, #0]
 80102f6:	2b2f      	cmp	r3, #47	; 0x2f
 80102f8:	d0f9      	beq.n	80102ee <rcl_expand_topic_name+0x21a>
 80102fa:	4638      	mov	r0, r7
 80102fc:	f7ef ffa2 	bl	8000244 <strlen>
 8010300:	4a22      	ldr	r2, [pc, #136]	; (801038c <rcl_expand_topic_name+0x2b8>)
 8010302:	4b23      	ldr	r3, [pc, #140]	; (8010390 <rcl_expand_topic_name+0x2bc>)
 8010304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010308:	2801      	cmp	r0, #1
 801030a:	bf18      	it	ne
 801030c:	4613      	movne	r3, r2
 801030e:	e9cd 7503 	strd	r7, r5, [sp, #12]
 8010312:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8010316:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010318:	ab14      	add	r3, sp, #80	; 0x50
 801031a:	9200      	str	r2, [sp, #0]
 801031c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801031e:	f001 fe85 	bl	801202c <rcutils_format_string_limit>
 8010322:	4603      	mov	r3, r0
 8010324:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010326:	4628      	mov	r0, r5
 8010328:	9918      	ldr	r1, [sp, #96]	; 0x60
 801032a:	461d      	mov	r5, r3
 801032c:	4790      	blx	r2
 801032e:	e7dd      	b.n	80102ec <rcl_expand_topic_name+0x218>
 8010330:	24ca      	movs	r4, #202	; 0xca
 8010332:	e7a8      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 8010334:	2300      	movs	r3, #0
 8010336:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010338:	240a      	movs	r4, #10
 801033a:	6013      	str	r3, [r2, #0]
 801033c:	e7a3      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 801033e:	4653      	mov	r3, sl
 8010340:	4655      	mov	r5, sl
 8010342:	9c07      	ldr	r4, [sp, #28]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1d5      	bne.n	80102f4 <rcl_expand_topic_name+0x220>
 8010348:	f898 3000 	ldrb.w	r3, [r8]
 801034c:	2b2f      	cmp	r3, #47	; 0x2f
 801034e:	d0ce      	beq.n	80102ee <rcl_expand_topic_name+0x21a>
 8010350:	e7b6      	b.n	80102c0 <rcl_expand_topic_name+0x1ec>
 8010352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010354:	4650      	mov	r0, sl
 8010356:	601d      	str	r5, [r3, #0]
 8010358:	9918      	ldr	r1, [sp, #96]	; 0x60
 801035a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801035c:	4798      	blx	r3
 801035e:	240a      	movs	r4, #10
 8010360:	e791      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 8010362:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8010366:	e88d 0003 	stmia.w	sp, {r0, r1}
 801036a:	ab14      	add	r3, sp, #80	; 0x50
 801036c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801036e:	4640      	mov	r0, r8
 8010370:	f001 ff76 	bl	8012260 <rcutils_strdup>
 8010374:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010376:	2800      	cmp	r0, #0
 8010378:	bf08      	it	eq
 801037a:	240a      	moveq	r4, #10
 801037c:	6018      	str	r0, [r3, #0]
 801037e:	e782      	b.n	8010286 <rcl_expand_topic_name+0x1b2>
 8010380:	08016688 	.word	0x08016688
 8010384:	08016690 	.word	0x08016690
 8010388:	08016698 	.word	0x08016698
 801038c:	08016414 	.word	0x08016414
 8010390:	0801645c 	.word	0x0801645c
 8010394:	08016680 	.word	0x08016680
 8010398:	0801644c 	.word	0x0801644c

0801039c <rcl_get_default_topic_name_substitutions>:
 801039c:	2800      	cmp	r0, #0
 801039e:	bf0c      	ite	eq
 80103a0:	200b      	moveq	r0, #11
 80103a2:	2000      	movne	r0, #0
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop

080103a8 <rcl_init>:
 80103a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	1e07      	subs	r7, r0, #0
 80103ae:	4688      	mov	r8, r1
 80103b0:	4692      	mov	sl, r2
 80103b2:	4699      	mov	r9, r3
 80103b4:	b09f      	sub	sp, #124	; 0x7c
 80103b6:	f340 8096 	ble.w	80104e6 <rcl_init+0x13e>
 80103ba:	2900      	cmp	r1, #0
 80103bc:	f000 8096 	beq.w	80104ec <rcl_init+0x144>
 80103c0:	2400      	movs	r4, #0
 80103c2:	1f0d      	subs	r5, r1, #4
 80103c4:	f855 6f04 	ldr.w	r6, [r5, #4]!
 80103c8:	3401      	adds	r4, #1
 80103ca:	2e00      	cmp	r6, #0
 80103cc:	f000 808e 	beq.w	80104ec <rcl_init+0x144>
 80103d0:	42a7      	cmp	r7, r4
 80103d2:	d1f7      	bne.n	80103c4 <rcl_init+0x1c>
 80103d4:	f1ba 0f00 	cmp.w	sl, #0
 80103d8:	f000 8088 	beq.w	80104ec <rcl_init+0x144>
 80103dc:	f8da 4000 	ldr.w	r4, [sl]
 80103e0:	2c00      	cmp	r4, #0
 80103e2:	f000 8083 	beq.w	80104ec <rcl_init+0x144>
 80103e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80103e8:	ad19      	add	r5, sp, #100	; 0x64
 80103ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80103ec:	6823      	ldr	r3, [r4, #0]
 80103ee:	a819      	add	r0, sp, #100	; 0x64
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	f7f9 fda1 	bl	8009f38 <rcutils_allocator_is_valid>
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d078      	beq.n	80104ec <rcl_init+0x144>
 80103fa:	f1b9 0f00 	cmp.w	r9, #0
 80103fe:	d075      	beq.n	80104ec <rcl_init+0x144>
 8010400:	f8d9 3000 	ldr.w	r3, [r9]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d176      	bne.n	80104f6 <rcl_init+0x14e>
 8010408:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801040c:	2178      	movs	r1, #120	; 0x78
 801040e:	2001      	movs	r0, #1
 8010410:	4798      	blx	r3
 8010412:	4604      	mov	r4, r0
 8010414:	f8c9 0000 	str.w	r0, [r9]
 8010418:	2800      	cmp	r0, #0
 801041a:	f000 80c6 	beq.w	80105aa <rcl_init+0x202>
 801041e:	a802      	add	r0, sp, #8
 8010420:	f001 ff5c 	bl	80122dc <rmw_get_zero_initialized_context>
 8010424:	2250      	movs	r2, #80	; 0x50
 8010426:	a902      	add	r1, sp, #8
 8010428:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801042c:	f003 fcfa 	bl	8013e24 <memcpy>
 8010430:	f8d9 6000 	ldr.w	r6, [r9]
 8010434:	ac19      	add	r4, sp, #100	; 0x64
 8010436:	4635      	mov	r5, r6
 8010438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801043a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801043c:	6823      	ldr	r3, [r4, #0]
 801043e:	f106 0114 	add.w	r1, r6, #20
 8010442:	4650      	mov	r0, sl
 8010444:	602b      	str	r3, [r5, #0]
 8010446:	f7f8 fd89 	bl	8008f5c <rcl_init_options_copy>
 801044a:	4606      	mov	r6, r0
 801044c:	2800      	cmp	r0, #0
 801044e:	d143      	bne.n	80104d8 <rcl_init+0x130>
 8010450:	463c      	mov	r4, r7
 8010452:	f8d9 a000 	ldr.w	sl, [r9]
 8010456:	17fd      	asrs	r5, r7, #31
 8010458:	e9ca 4506 	strd	r4, r5, [sl, #24]
 801045c:	f8ca 0020 	str.w	r0, [sl, #32]
 8010460:	2f00      	cmp	r7, #0
 8010462:	d04d      	beq.n	8010500 <rcl_init+0x158>
 8010464:	f1b8 0f00 	cmp.w	r8, #0
 8010468:	d04a      	beq.n	8010500 <rcl_init+0x158>
 801046a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801046e:	4638      	mov	r0, r7
 8010470:	2104      	movs	r1, #4
 8010472:	4798      	blx	r3
 8010474:	f8d9 b000 	ldr.w	fp, [r9]
 8010478:	f8ca 0020 	str.w	r0, [sl, #32]
 801047c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8010480:	b34b      	cbz	r3, 80104d6 <rcl_init+0x12e>
 8010482:	2f01      	cmp	r7, #1
 8010484:	f175 0300 	sbcs.w	r3, r5, #0
 8010488:	db3a      	blt.n	8010500 <rcl_init+0x158>
 801048a:	2600      	movs	r6, #0
 801048c:	2700      	movs	r7, #0
 801048e:	f1a8 0804 	sub.w	r8, r8, #4
 8010492:	e00d      	b.n	80104b0 <rcl_init+0x108>
 8010494:	4652      	mov	r2, sl
 8010496:	f8d8 1000 	ldr.w	r1, [r8]
 801049a:	f003 fcc3 	bl	8013e24 <memcpy>
 801049e:	3601      	adds	r6, #1
 80104a0:	f147 0700 	adc.w	r7, r7, #0
 80104a4:	42bd      	cmp	r5, r7
 80104a6:	bf08      	it	eq
 80104a8:	42b4      	cmpeq	r4, r6
 80104aa:	d029      	beq.n	8010500 <rcl_init+0x158>
 80104ac:	f8d9 b000 	ldr.w	fp, [r9]
 80104b0:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80104b4:	f7ef fec6 	bl	8000244 <strlen>
 80104b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80104ba:	991d      	ldr	r1, [sp, #116]	; 0x74
 80104bc:	f8db b020 	ldr.w	fp, [fp, #32]
 80104c0:	4682      	mov	sl, r0
 80104c2:	4798      	blx	r3
 80104c4:	f8d9 2000 	ldr.w	r2, [r9]
 80104c8:	00b3      	lsls	r3, r6, #2
 80104ca:	6a12      	ldr	r2, [r2, #32]
 80104cc:	f84b 0003 	str.w	r0, [fp, r3]
 80104d0:	58d0      	ldr	r0, [r2, r3]
 80104d2:	2800      	cmp	r0, #0
 80104d4:	d1de      	bne.n	8010494 <rcl_init+0xec>
 80104d6:	260a      	movs	r6, #10
 80104d8:	4648      	mov	r0, r9
 80104da:	f7ff fd8f 	bl	800fffc <__cleanup_context>
 80104de:	4630      	mov	r0, r6
 80104e0:	b01f      	add	sp, #124	; 0x7c
 80104e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e6:	2900      	cmp	r1, #0
 80104e8:	f43f af74 	beq.w	80103d4 <rcl_init+0x2c>
 80104ec:	260b      	movs	r6, #11
 80104ee:	4630      	mov	r0, r6
 80104f0:	b01f      	add	sp, #124	; 0x7c
 80104f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f6:	2664      	movs	r6, #100	; 0x64
 80104f8:	4630      	mov	r0, r6
 80104fa:	b01f      	add	sp, #124	; 0x7c
 80104fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010500:	2605      	movs	r6, #5
 8010502:	2300      	movs	r3, #0
 8010504:	2201      	movs	r2, #1
 8010506:	4832      	ldr	r0, [pc, #200]	; (80105d0 <rcl_init+0x228>)
 8010508:	9600      	str	r6, [sp, #0]
 801050a:	f001 fd45 	bl	8011f98 <__atomic_fetch_add_8>
 801050e:	4604      	mov	r4, r0
 8010510:	460d      	mov	r5, r1
 8010512:	ea54 0305 	orrs.w	r3, r4, r5
 8010516:	d03e      	beq.n	8010596 <rcl_init+0x1ee>
 8010518:	4602      	mov	r2, r0
 801051a:	460b      	mov	r3, r1
 801051c:	9600      	str	r6, [sp, #0]
 801051e:	f109 0008 	add.w	r0, r9, #8
 8010522:	f001 fccd 	bl	8011ec0 <__atomic_store_8>
 8010526:	f8d9 3000 	ldr.w	r3, [r9]
 801052a:	695f      	ldr	r7, [r3, #20]
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8010532:	3301      	adds	r3, #1
 8010534:	d03d      	beq.n	80105b2 <rcl_init+0x20a>
 8010536:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801053a:	b94b      	cbnz	r3, 8010550 <rcl_init+0x1a8>
 801053c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010540:	f000 f848 	bl	80105d4 <rcl_get_localhost_only>
 8010544:	4606      	mov	r6, r0
 8010546:	2800      	cmp	r0, #0
 8010548:	d1c6      	bne.n	80104d8 <rcl_init+0x130>
 801054a:	f8d9 3000 	ldr.w	r3, [r9]
 801054e:	695f      	ldr	r7, [r3, #20]
 8010550:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010552:	aa18      	add	r2, sp, #96	; 0x60
 8010554:	a917      	add	r1, sp, #92	; 0x5c
 8010556:	f000 fd89 	bl	801106c <rcl_validate_enclave_name>
 801055a:	4606      	mov	r6, r0
 801055c:	2800      	cmp	r0, #0
 801055e:	d1bb      	bne.n	80104d8 <rcl_init+0x130>
 8010560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010562:	bb23      	cbnz	r3, 80105ae <rcl_init+0x206>
 8010564:	f8d9 1000 	ldr.w	r1, [r9]
 8010568:	694b      	ldr	r3, [r1, #20]
 801056a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801056c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8010570:	f000 fad6 	bl	8010b20 <rcl_get_security_options_from_environment>
 8010574:	4606      	mov	r6, r0
 8010576:	2800      	cmp	r0, #0
 8010578:	d1ae      	bne.n	80104d8 <rcl_init+0x130>
 801057a:	f8d9 1000 	ldr.w	r1, [r9]
 801057e:	6948      	ldr	r0, [r1, #20]
 8010580:	3128      	adds	r1, #40	; 0x28
 8010582:	3018      	adds	r0, #24
 8010584:	f7fa f900 	bl	800a788 <rmw_init>
 8010588:	4606      	mov	r6, r0
 801058a:	2800      	cmp	r0, #0
 801058c:	d0af      	beq.n	80104ee <rcl_init+0x146>
 801058e:	f7ff fd03 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 8010592:	4606      	mov	r6, r0
 8010594:	e7a0      	b.n	80104d8 <rcl_init+0x130>
 8010596:	9600      	str	r6, [sp, #0]
 8010598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801059c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105a0:	480b      	ldr	r0, [pc, #44]	; (80105d0 <rcl_init+0x228>)
 80105a2:	f001 fc8d 	bl	8011ec0 <__atomic_store_8>
 80105a6:	2601      	movs	r6, #1
 80105a8:	e796      	b.n	80104d8 <rcl_init+0x130>
 80105aa:	260a      	movs	r6, #10
 80105ac:	e79f      	b.n	80104ee <rcl_init+0x146>
 80105ae:	2601      	movs	r6, #1
 80105b0:	e792      	b.n	80104d8 <rcl_init+0x130>
 80105b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80105b6:	f003 faaf 	bl	8013b18 <rcl_get_default_domain_id>
 80105ba:	4606      	mov	r6, r0
 80105bc:	2800      	cmp	r0, #0
 80105be:	d18b      	bne.n	80104d8 <rcl_init+0x130>
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	3301      	adds	r3, #1
 80105c4:	f8d9 3000 	ldr.w	r3, [r9]
 80105c8:	bf08      	it	eq
 80105ca:	6278      	streq	r0, [r7, #36]	; 0x24
 80105cc:	695f      	ldr	r7, [r3, #20]
 80105ce:	e7b2      	b.n	8010536 <rcl_init+0x18e>
 80105d0:	20000050 	.word	0x20000050

080105d4 <rcl_get_localhost_only>:
 80105d4:	2300      	movs	r3, #0
 80105d6:	b510      	push	{r4, lr}
 80105d8:	b082      	sub	sp, #8
 80105da:	9301      	str	r3, [sp, #4]
 80105dc:	b1b8      	cbz	r0, 801060e <rcl_get_localhost_only+0x3a>
 80105de:	4604      	mov	r4, r0
 80105e0:	a901      	add	r1, sp, #4
 80105e2:	480c      	ldr	r0, [pc, #48]	; (8010614 <rcl_get_localhost_only+0x40>)
 80105e4:	f001 fd5c 	bl	80120a0 <rcutils_get_env>
 80105e8:	b110      	cbz	r0, 80105f0 <rcl_get_localhost_only+0x1c>
 80105ea:	2001      	movs	r0, #1
 80105ec:	b002      	add	sp, #8
 80105ee:	bd10      	pop	{r4, pc}
 80105f0:	9b01      	ldr	r3, [sp, #4]
 80105f2:	b113      	cbz	r3, 80105fa <rcl_get_localhost_only+0x26>
 80105f4:	781a      	ldrb	r2, [r3, #0]
 80105f6:	2a31      	cmp	r2, #49	; 0x31
 80105f8:	d004      	beq.n	8010604 <rcl_get_localhost_only+0x30>
 80105fa:	2302      	movs	r3, #2
 80105fc:	2000      	movs	r0, #0
 80105fe:	7023      	strb	r3, [r4, #0]
 8010600:	b002      	add	sp, #8
 8010602:	bd10      	pop	{r4, pc}
 8010604:	785b      	ldrb	r3, [r3, #1]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1f7      	bne.n	80105fa <rcl_get_localhost_only+0x26>
 801060a:	2301      	movs	r3, #1
 801060c:	e7f6      	b.n	80105fc <rcl_get_localhost_only+0x28>
 801060e:	200b      	movs	r0, #11
 8010610:	b002      	add	sp, #8
 8010612:	bd10      	pop	{r4, pc}
 8010614:	080166a4 	.word	0x080166a4

08010618 <rcl_get_zero_initialized_node>:
 8010618:	4603      	mov	r3, r0
 801061a:	4a03      	ldr	r2, [pc, #12]	; (8010628 <rcl_get_zero_initialized_node+0x10>)
 801061c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010620:	e883 0003 	stmia.w	r3, {r0, r1}
 8010624:	4618      	mov	r0, r3
 8010626:	4770      	bx	lr
 8010628:	080166c0 	.word	0x080166c0

0801062c <rcl_node_init>:
 801062c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010630:	2700      	movs	r7, #0
 8010632:	b09b      	sub	sp, #108	; 0x6c
 8010634:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8010638:	4604      	mov	r4, r0
 801063a:	a815      	add	r0, sp, #84	; 0x54
 801063c:	460e      	mov	r6, r1
 801063e:	4615      	mov	r5, r2
 8010640:	4698      	mov	r8, r3
 8010642:	9713      	str	r7, [sp, #76]	; 0x4c
 8010644:	f003 fb20 	bl	8013c88 <rcl_guard_condition_get_default_options>
 8010648:	f1b9 0f00 	cmp.w	r9, #0
 801064c:	f000 80fa 	beq.w	8010844 <rcl_node_init+0x218>
 8010650:	f109 0a04 	add.w	sl, r9, #4
 8010654:	4650      	mov	r0, sl
 8010656:	f7f9 fc6f 	bl	8009f38 <rcutils_allocator_is_valid>
 801065a:	2800      	cmp	r0, #0
 801065c:	f000 80f2 	beq.w	8010844 <rcl_node_init+0x218>
 8010660:	2e00      	cmp	r6, #0
 8010662:	f000 80ef 	beq.w	8010844 <rcl_node_init+0x218>
 8010666:	2d00      	cmp	r5, #0
 8010668:	f000 80ec 	beq.w	8010844 <rcl_node_init+0x218>
 801066c:	2c00      	cmp	r4, #0
 801066e:	f000 80e9 	beq.w	8010844 <rcl_node_init+0x218>
 8010672:	6867      	ldr	r7, [r4, #4]
 8010674:	2f00      	cmp	r7, #0
 8010676:	f040 810f 	bne.w	8010898 <rcl_node_init+0x26c>
 801067a:	f1b8 0f00 	cmp.w	r8, #0
 801067e:	f000 80e1 	beq.w	8010844 <rcl_node_init+0x218>
 8010682:	4640      	mov	r0, r8
 8010684:	f7ff fcac 	bl	800ffe0 <rcl_context_is_valid>
 8010688:	4683      	mov	fp, r0
 801068a:	2800      	cmp	r0, #0
 801068c:	f000 80df 	beq.w	801084e <rcl_node_init+0x222>
 8010690:	463a      	mov	r2, r7
 8010692:	4630      	mov	r0, r6
 8010694:	a914      	add	r1, sp, #80	; 0x50
 8010696:	9714      	str	r7, [sp, #80]	; 0x50
 8010698:	f001 fe94 	bl	80123c4 <rmw_validate_node_name>
 801069c:	4607      	mov	r7, r0
 801069e:	2800      	cmp	r0, #0
 80106a0:	f040 80d1 	bne.w	8010846 <rcl_node_init+0x21a>
 80106a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80106a6:	2800      	cmp	r0, #0
 80106a8:	f040 8100 	bne.w	80108ac <rcl_node_init+0x280>
 80106ac:	4628      	mov	r0, r5
 80106ae:	f7ef fdc9 	bl	8000244 <strlen>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	f040 80cd 	bne.w	8010852 <rcl_node_init+0x226>
 80106b8:	4d8d      	ldr	r5, [pc, #564]	; (80108f0 <rcl_node_init+0x2c4>)
 80106ba:	2200      	movs	r2, #0
 80106bc:	4628      	mov	r0, r5
 80106be:	a914      	add	r1, sp, #80	; 0x50
 80106c0:	f001 fe62 	bl	8012388 <rmw_validate_namespace>
 80106c4:	4607      	mov	r7, r0
 80106c6:	2800      	cmp	r0, #0
 80106c8:	f040 80bd 	bne.w	8010846 <rcl_node_init+0x21a>
 80106cc:	4683      	mov	fp, r0
 80106ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f040 80ef 	bne.w	80108b4 <rcl_node_init+0x288>
 80106d6:	2030      	movs	r0, #48	; 0x30
 80106d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80106dc:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80106e0:	9307      	str	r3, [sp, #28]
 80106e2:	4790      	blx	r2
 80106e4:	4607      	mov	r7, r0
 80106e6:	6060      	str	r0, [r4, #4]
 80106e8:	2800      	cmp	r0, #0
 80106ea:	f000 80da 	beq.w	80108a2 <rcl_node_init+0x276>
 80106ee:	9b07      	ldr	r3, [sp, #28]
 80106f0:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80106f4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80106f8:	a80a      	add	r0, sp, #40	; 0x28
 80106fa:	f000 f929 	bl	8010950 <rcl_node_get_default_options>
 80106fe:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010702:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010706:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010708:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801070c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8010710:	4648      	mov	r0, r9
 8010712:	6861      	ldr	r1, [r4, #4]
 8010714:	f8c4 8000 	str.w	r8, [r4]
 8010718:	f000 f936 	bl	8010988 <rcl_node_options_copy>
 801071c:	2800      	cmp	r0, #0
 801071e:	d168      	bne.n	80107f2 <rcl_node_init+0x1c6>
 8010720:	4628      	mov	r0, r5
 8010722:	f7ef fd8f 	bl	8000244 <strlen>
 8010726:	4428      	add	r0, r5
 8010728:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801072c:	2b2f      	cmp	r3, #47	; 0x2f
 801072e:	f000 80c9 	beq.w	80108c4 <rcl_node_init+0x298>
 8010732:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8010736:	f44f 6700 	mov.w	r7, #2048	; 0x800
 801073a:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80108f8 <rcl_node_init+0x2cc>
 801073e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010742:	9701      	str	r7, [sp, #4]
 8010744:	f8da 7010 	ldr.w	r7, [sl, #16]
 8010748:	f8cd c008 	str.w	ip, [sp, #8]
 801074c:	9700      	str	r7, [sp, #0]
 801074e:	6867      	ldr	r7, [r4, #4]
 8010750:	f001 fc6c 	bl	801202c <rcutils_format_string_limit>
 8010754:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010756:	6867      	ldr	r7, [r4, #4]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	1c59      	adds	r1, r3, #1
 801075c:	9313      	str	r3, [sp, #76]	; 0x4c
 801075e:	f000 80ba 	beq.w	80108d6 <rcl_node_init+0x2aa>
 8010762:	f8d8 2000 	ldr.w	r2, [r8]
 8010766:	61fb      	str	r3, [r7, #28]
 8010768:	6952      	ldr	r2, [r2, #20]
 801076a:	6821      	ldr	r1, [r4, #0]
 801076c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8010770:	6808      	ldr	r0, [r1, #0]
 8010772:	f1a2 0201 	sub.w	r2, r2, #1
 8010776:	fab2 f282 	clz	r2, r2
 801077a:	0952      	lsrs	r2, r2, #5
 801077c:	9200      	str	r2, [sp, #0]
 801077e:	4631      	mov	r1, r6
 8010780:	462a      	mov	r2, r5
 8010782:	3028      	adds	r0, #40	; 0x28
 8010784:	f7fa f9d2 	bl	800ab2c <rmw_create_node>
 8010788:	6863      	ldr	r3, [r4, #4]
 801078a:	6238      	str	r0, [r7, #32]
 801078c:	6a18      	ldr	r0, [r3, #32]
 801078e:	2800      	cmp	r0, #0
 8010790:	d031      	beq.n	80107f6 <rcl_node_init+0x1ca>
 8010792:	f7fa fa5d 	bl	800ac50 <rmw_node_get_graph_guard_condition>
 8010796:	4607      	mov	r7, r0
 8010798:	b358      	cbz	r0, 80107f2 <rcl_node_init+0x1c6>
 801079a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801079e:	2008      	movs	r0, #8
 80107a0:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80107a4:	6866      	ldr	r6, [r4, #4]
 80107a6:	4798      	blx	r3
 80107a8:	6863      	ldr	r3, [r4, #4]
 80107aa:	6270      	str	r0, [r6, #36]	; 0x24
 80107ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107ae:	9207      	str	r2, [sp, #28]
 80107b0:	b30a      	cbz	r2, 80107f6 <rcl_node_init+0x1ca>
 80107b2:	ae08      	add	r6, sp, #32
 80107b4:	4630      	mov	r0, r6
 80107b6:	f003 f9e3 	bl	8013b80 <rcl_get_zero_initialized_guard_condition>
 80107ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 80107be:	9a07      	ldr	r2, [sp, #28]
 80107c0:	ae15      	add	r6, sp, #84	; 0x54
 80107c2:	e882 0003 	stmia.w	r2, {r0, r1}
 80107c6:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 80107ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80107cc:	6862      	ldr	r2, [r4, #4]
 80107ce:	f8da 3000 	ldr.w	r3, [sl]
 80107d2:	f8d2 c024 	ldr.w	ip, [r2, #36]	; 0x24
 80107d6:	6033      	str	r3, [r6, #0]
 80107d8:	ab1a      	add	r3, sp, #104	; 0x68
 80107da:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80107de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80107e2:	4639      	mov	r1, r7
 80107e4:	4660      	mov	r0, ip
 80107e6:	4642      	mov	r2, r8
 80107e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107ea:	f003 f9d3 	bl	8013b94 <rcl_guard_condition_init_from_rmw>
 80107ee:	4607      	mov	r7, r0
 80107f0:	b320      	cbz	r0, 801083c <rcl_node_init+0x210>
 80107f2:	6863      	ldr	r3, [r4, #4]
 80107f4:	b1f3      	cbz	r3, 8010834 <rcl_node_init+0x208>
 80107f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80107f8:	b128      	cbz	r0, 8010806 <rcl_node_init+0x1da>
 80107fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80107fe:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8010802:	4798      	blx	r3
 8010804:	6863      	ldr	r3, [r4, #4]
 8010806:	6a18      	ldr	r0, [r3, #32]
 8010808:	b110      	cbz	r0, 8010810 <rcl_node_init+0x1e4>
 801080a:	f7fa f9a7 	bl	800ab5c <rmw_destroy_node>
 801080e:	6863      	ldr	r3, [r4, #4]
 8010810:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010812:	b148      	cbz	r0, 8010828 <rcl_node_init+0x1fc>
 8010814:	f003 fa16 	bl	8013c44 <rcl_guard_condition_fini>
 8010818:	6862      	ldr	r2, [r4, #4]
 801081a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801081e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8010820:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8010824:	4798      	blx	r3
 8010826:	6863      	ldr	r3, [r4, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 801082e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010832:	4798      	blx	r3
 8010834:	2300      	movs	r3, #0
 8010836:	2701      	movs	r7, #1
 8010838:	e9c4 3300 	strd	r3, r3, [r4]
 801083c:	f1bb 0f00 	cmp.w	fp, #0
 8010840:	d123      	bne.n	801088a <rcl_node_init+0x25e>
 8010842:	e000      	b.n	8010846 <rcl_node_init+0x21a>
 8010844:	270b      	movs	r7, #11
 8010846:	4638      	mov	r0, r7
 8010848:	b01b      	add	sp, #108	; 0x6c
 801084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084e:	2765      	movs	r7, #101	; 0x65
 8010850:	e7f9      	b.n	8010846 <rcl_node_init+0x21a>
 8010852:	782b      	ldrb	r3, [r5, #0]
 8010854:	2b2f      	cmp	r3, #47	; 0x2f
 8010856:	f43f af30 	beq.w	80106ba <rcl_node_init+0x8e>
 801085a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801085e:	4a25      	ldr	r2, [pc, #148]	; (80108f4 <rcl_node_init+0x2c8>)
 8010860:	f8da 3010 	ldr.w	r3, [sl, #16]
 8010864:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8010868:	9503      	str	r5, [sp, #12]
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8010870:	f001 fbdc 	bl	801202c <rcutils_format_string_limit>
 8010874:	4605      	mov	r5, r0
 8010876:	b360      	cbz	r0, 80108d2 <rcl_node_init+0x2a6>
 8010878:	2200      	movs	r2, #0
 801087a:	a914      	add	r1, sp, #80	; 0x50
 801087c:	9214      	str	r2, [sp, #80]	; 0x50
 801087e:	f001 fd83 	bl	8012388 <rmw_validate_namespace>
 8010882:	4607      	mov	r7, r0
 8010884:	2800      	cmp	r0, #0
 8010886:	f43f af22 	beq.w	80106ce <rcl_node_init+0xa2>
 801088a:	4628      	mov	r0, r5
 801088c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010890:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8010894:	4798      	blx	r3
 8010896:	e7d6      	b.n	8010846 <rcl_node_init+0x21a>
 8010898:	2764      	movs	r7, #100	; 0x64
 801089a:	4638      	mov	r0, r7
 801089c:	b01b      	add	sp, #108	; 0x6c
 801089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a2:	270a      	movs	r7, #10
 80108a4:	f1bb 0f00 	cmp.w	fp, #0
 80108a8:	d1ef      	bne.n	801088a <rcl_node_init+0x25e>
 80108aa:	e7cc      	b.n	8010846 <rcl_node_init+0x21a>
 80108ac:	f001 fddc 	bl	8012468 <rmw_node_name_validation_result_string>
 80108b0:	27c9      	movs	r7, #201	; 0xc9
 80108b2:	e7c8      	b.n	8010846 <rcl_node_init+0x21a>
 80108b4:	4618      	mov	r0, r3
 80108b6:	f001 fd79 	bl	80123ac <rmw_namespace_validation_result_string>
 80108ba:	27ca      	movs	r7, #202	; 0xca
 80108bc:	f1bb 0f00 	cmp.w	fp, #0
 80108c0:	d1e3      	bne.n	801088a <rcl_node_init+0x25e>
 80108c2:	e7c0      	b.n	8010846 <rcl_node_init+0x21a>
 80108c4:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80108c8:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 80108cc:	f8df c02c 	ldr.w	ip, [pc, #44]	; 80108fc <rcl_node_init+0x2d0>
 80108d0:	e735      	b.n	801073e <rcl_node_init+0x112>
 80108d2:	270a      	movs	r7, #10
 80108d4:	e7b7      	b.n	8010846 <rcl_node_init+0x21a>
 80108d6:	a813      	add	r0, sp, #76	; 0x4c
 80108d8:	f003 f91e 	bl	8013b18 <rcl_get_default_domain_id>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d188      	bne.n	80107f2 <rcl_node_init+0x1c6>
 80108e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	bf09      	itett	eq
 80108e6:	4603      	moveq	r3, r0
 80108e8:	6867      	ldrne	r7, [r4, #4]
 80108ea:	6867      	ldreq	r7, [r4, #4]
 80108ec:	9013      	streq	r0, [sp, #76]	; 0x4c
 80108ee:	e738      	b.n	8010762 <rcl_node_init+0x136>
 80108f0:	08016410 	.word	0x08016410
 80108f4:	080166bc 	.word	0x080166bc
 80108f8:	08016414 	.word	0x08016414
 80108fc:	0801645c 	.word	0x0801645c

08010900 <rcl_node_is_valid>:
 8010900:	b130      	cbz	r0, 8010910 <rcl_node_is_valid+0x10>
 8010902:	6843      	ldr	r3, [r0, #4]
 8010904:	b123      	cbz	r3, 8010910 <rcl_node_is_valid+0x10>
 8010906:	6a1b      	ldr	r3, [r3, #32]
 8010908:	b113      	cbz	r3, 8010910 <rcl_node_is_valid+0x10>
 801090a:	6800      	ldr	r0, [r0, #0]
 801090c:	f7ff bb68 	b.w	800ffe0 <rcl_context_is_valid>
 8010910:	2000      	movs	r0, #0
 8010912:	4770      	bx	lr

08010914 <rcl_node_get_name>:
 8010914:	b120      	cbz	r0, 8010920 <rcl_node_get_name+0xc>
 8010916:	6840      	ldr	r0, [r0, #4]
 8010918:	b110      	cbz	r0, 8010920 <rcl_node_get_name+0xc>
 801091a:	6a00      	ldr	r0, [r0, #32]
 801091c:	b100      	cbz	r0, 8010920 <rcl_node_get_name+0xc>
 801091e:	6880      	ldr	r0, [r0, #8]
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop

08010924 <rcl_node_get_namespace>:
 8010924:	b120      	cbz	r0, 8010930 <rcl_node_get_namespace+0xc>
 8010926:	6840      	ldr	r0, [r0, #4]
 8010928:	b110      	cbz	r0, 8010930 <rcl_node_get_namespace+0xc>
 801092a:	6a00      	ldr	r0, [r0, #32]
 801092c:	b100      	cbz	r0, 8010930 <rcl_node_get_namespace+0xc>
 801092e:	68c0      	ldr	r0, [r0, #12]
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop

08010934 <rcl_node_get_options>:
 8010934:	b128      	cbz	r0, 8010942 <rcl_node_get_options+0xe>
 8010936:	6840      	ldr	r0, [r0, #4]
 8010938:	b118      	cbz	r0, 8010942 <rcl_node_get_options+0xe>
 801093a:	6a03      	ldr	r3, [r0, #32]
 801093c:	2b00      	cmp	r3, #0
 801093e:	bf08      	it	eq
 8010940:	2000      	moveq	r0, #0
 8010942:	4770      	bx	lr

08010944 <rcl_node_get_rmw_handle>:
 8010944:	b110      	cbz	r0, 801094c <rcl_node_get_rmw_handle+0x8>
 8010946:	6840      	ldr	r0, [r0, #4]
 8010948:	b100      	cbz	r0, 801094c <rcl_node_get_rmw_handle+0x8>
 801094a:	6a00      	ldr	r0, [r0, #32]
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop

08010950 <rcl_node_get_default_options>:
 8010950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010954:	4680      	mov	r8, r0
 8010956:	b086      	sub	sp, #24
 8010958:	466d      	mov	r5, sp
 801095a:	4c0a      	ldr	r4, [pc, #40]	; (8010984 <rcl_node_get_default_options+0x34>)
 801095c:	4646      	mov	r6, r8
 801095e:	4627      	mov	r7, r4
 8010960:	4668      	mov	r0, sp
 8010962:	3404      	adds	r4, #4
 8010964:	f7f9 fada 	bl	8009f1c <rcutils_get_default_allocator>
 8010968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801096a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801096c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801096e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010970:	682b      	ldr	r3, [r5, #0]
 8010972:	6023      	str	r3, [r4, #0]
 8010974:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8010978:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801097c:	4640      	mov	r0, r8
 801097e:	b006      	add	sp, #24
 8010980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010984:	20000058 	.word	0x20000058

08010988 <rcl_node_options_copy>:
 8010988:	b1d8      	cbz	r0, 80109c2 <rcl_node_options_copy+0x3a>
 801098a:	b4f0      	push	{r4, r5, r6, r7}
 801098c:	460f      	mov	r7, r1
 801098e:	b1a9      	cbz	r1, 80109bc <rcl_node_options_copy+0x34>
 8010990:	4288      	cmp	r0, r1
 8010992:	4606      	mov	r6, r0
 8010994:	d012      	beq.n	80109bc <rcl_node_options_copy+0x34>
 8010996:	4605      	mov	r5, r0
 8010998:	460c      	mov	r4, r1
 801099a:	f855 3b04 	ldr.w	r3, [r5], #4
 801099e:	f890 c018 	ldrb.w	ip, [r0, #24]
 80109a2:	f844 3b04 	str.w	r3, [r4], #4
 80109a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109aa:	7e73      	ldrb	r3, [r6, #25]
 80109ac:	682a      	ldr	r2, [r5, #0]
 80109ae:	2000      	movs	r0, #0
 80109b0:	6022      	str	r2, [r4, #0]
 80109b2:	f887 c018 	strb.w	ip, [r7, #24]
 80109b6:	767b      	strb	r3, [r7, #25]
 80109b8:	bcf0      	pop	{r4, r5, r6, r7}
 80109ba:	4770      	bx	lr
 80109bc:	200b      	movs	r0, #11
 80109be:	bcf0      	pop	{r4, r5, r6, r7}
 80109c0:	4770      	bx	lr
 80109c2:	200b      	movs	r0, #11
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop

080109c8 <exact_match_lookup>:
 80109c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ca:	460d      	mov	r5, r1
 80109cc:	4614      	mov	r4, r2
 80109ce:	b085      	sub	sp, #20
 80109d0:	f102 0608 	add.w	r6, r2, #8
 80109d4:	4607      	mov	r7, r0
 80109d6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80109da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80109de:	4628      	mov	r0, r5
 80109e0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80109e4:	4917      	ldr	r1, [pc, #92]	; (8010a44 <exact_match_lookup+0x7c>)
 80109e6:	f001 fb13 	bl	8012010 <rcutils_join_path>
 80109ea:	783b      	ldrb	r3, [r7, #0]
 80109ec:	4605      	mov	r5, r0
 80109ee:	2b2f      	cmp	r3, #47	; 0x2f
 80109f0:	d021      	beq.n	8010a36 <exact_match_lookup+0x6e>
 80109f2:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80109f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80109fa:	1c78      	adds	r0, r7, #1
 80109fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010a00:	f001 fb0c 	bl	801201c <rcutils_to_native_path>
 8010a04:	4603      	mov	r3, r0
 8010a06:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010a0a:	461e      	mov	r6, r3
 8010a0c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010a10:	4631      	mov	r1, r6
 8010a12:	e894 000c 	ldmia.w	r4, {r2, r3}
 8010a16:	4628      	mov	r0, r5
 8010a18:	f001 fafa 	bl	8012010 <rcutils_join_path>
 8010a1c:	4607      	mov	r7, r0
 8010a1e:	6863      	ldr	r3, [r4, #4]
 8010a20:	4630      	mov	r0, r6
 8010a22:	6921      	ldr	r1, [r4, #16]
 8010a24:	4798      	blx	r3
 8010a26:	4628      	mov	r0, r5
 8010a28:	463d      	mov	r5, r7
 8010a2a:	6863      	ldr	r3, [r4, #4]
 8010a2c:	6921      	ldr	r1, [r4, #16]
 8010a2e:	4798      	blx	r3
 8010a30:	4628      	mov	r0, r5
 8010a32:	b005      	add	sp, #20
 8010a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a36:	787b      	ldrb	r3, [r7, #1]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1da      	bne.n	80109f2 <exact_match_lookup+0x2a>
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	b005      	add	sp, #20
 8010a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a42:	bf00      	nop
 8010a44:	08016704 	.word	0x08016704

08010a48 <rcl_get_secure_root>:
 8010a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a4c:	b085      	sub	sp, #20
 8010a4e:	b168      	cbz	r0, 8010a6c <rcl_get_secure_root+0x24>
 8010a50:	4607      	mov	r7, r0
 8010a52:	4608      	mov	r0, r1
 8010a54:	460c      	mov	r4, r1
 8010a56:	f7f9 fa6f 	bl	8009f38 <rcutils_allocator_is_valid>
 8010a5a:	b138      	cbz	r0, 8010a6c <rcl_get_secure_root+0x24>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	482e      	ldr	r0, [pc, #184]	; (8010b18 <rcl_get_secure_root+0xd0>)
 8010a60:	a903      	add	r1, sp, #12
 8010a62:	9303      	str	r3, [sp, #12]
 8010a64:	f001 fb1c 	bl	80120a0 <rcutils_get_env>
 8010a68:	4605      	mov	r5, r0
 8010a6a:	b120      	cbz	r0, 8010a76 <rcl_get_secure_root+0x2e>
 8010a6c:	2500      	movs	r5, #0
 8010a6e:	4628      	mov	r0, r5
 8010a70:	b005      	add	sp, #20
 8010a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a76:	9e03      	ldr	r6, [sp, #12]
 8010a78:	7833      	ldrb	r3, [r6, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d0f6      	beq.n	8010a6c <rcl_get_secure_root+0x24>
 8010a7e:	f104 090c 	add.w	r9, r4, #12
 8010a82:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010a86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010a90:	f001 fbe6 	bl	8012260 <rcutils_strdup>
 8010a94:	4680      	mov	r8, r0
 8010a96:	2800      	cmp	r0, #0
 8010a98:	d0e8      	beq.n	8010a6c <rcl_get_secure_root+0x24>
 8010a9a:	4820      	ldr	r0, [pc, #128]	; (8010b1c <rcl_get_secure_root+0xd4>)
 8010a9c:	a903      	add	r1, sp, #12
 8010a9e:	9503      	str	r5, [sp, #12]
 8010aa0:	f001 fafe 	bl	80120a0 <rcutils_get_env>
 8010aa4:	b160      	cbz	r0, 8010ac0 <rcl_get_secure_root+0x78>
 8010aa6:	2600      	movs	r6, #0
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	6863      	ldr	r3, [r4, #4]
 8010aac:	6921      	ldr	r1, [r4, #16]
 8010aae:	4798      	blx	r3
 8010ab0:	4640      	mov	r0, r8
 8010ab2:	6863      	ldr	r3, [r4, #4]
 8010ab4:	6921      	ldr	r1, [r4, #16]
 8010ab6:	4798      	blx	r3
 8010ab8:	4628      	mov	r0, r5
 8010aba:	b005      	add	sp, #20
 8010abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ac0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010ac4:	f89c 6000 	ldrb.w	r6, [ip]
 8010ac8:	b1f6      	cbz	r6, 8010b08 <rcl_get_secure_root+0xc0>
 8010aca:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010ace:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010ad2:	4660      	mov	r0, ip
 8010ad4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010ad8:	f001 fbc2 	bl	8012260 <rcutils_strdup>
 8010adc:	4606      	mov	r6, r0
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	d0e1      	beq.n	8010aa6 <rcl_get_secure_root+0x5e>
 8010ae2:	4622      	mov	r2, r4
 8010ae4:	4641      	mov	r1, r8
 8010ae6:	f7ff ff6f 	bl	80109c8 <exact_match_lookup>
 8010aea:	4605      	mov	r5, r0
 8010aec:	2d00      	cmp	r5, #0
 8010aee:	d0db      	beq.n	8010aa8 <rcl_get_secure_root+0x60>
 8010af0:	4628      	mov	r0, r5
 8010af2:	f001 fa8b 	bl	801200c <rcutils_is_directory>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d1d5      	bne.n	8010aa8 <rcl_get_secure_root+0x60>
 8010afc:	4628      	mov	r0, r5
 8010afe:	6862      	ldr	r2, [r4, #4]
 8010b00:	6921      	ldr	r1, [r4, #16]
 8010b02:	461d      	mov	r5, r3
 8010b04:	4790      	blx	r2
 8010b06:	e7cf      	b.n	8010aa8 <rcl_get_secure_root+0x60>
 8010b08:	4638      	mov	r0, r7
 8010b0a:	4622      	mov	r2, r4
 8010b0c:	4641      	mov	r1, r8
 8010b0e:	f7ff ff5b 	bl	80109c8 <exact_match_lookup>
 8010b12:	4605      	mov	r5, r0
 8010b14:	e7ea      	b.n	8010aec <rcl_get_secure_root+0xa4>
 8010b16:	bf00      	nop
 8010b18:	08016710 	.word	0x08016710
 8010b1c:	08016728 	.word	0x08016728

08010b20 <rcl_get_security_options_from_environment>:
 8010b20:	2300      	movs	r3, #0
 8010b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	4606      	mov	r6, r0
 8010b2a:	460f      	mov	r7, r1
 8010b2c:	4820      	ldr	r0, [pc, #128]	; (8010bb0 <rcl_get_security_options_from_environment+0x90>)
 8010b2e:	a901      	add	r1, sp, #4
 8010b30:	4690      	mov	r8, r2
 8010b32:	9301      	str	r3, [sp, #4]
 8010b34:	f001 fab4 	bl	80120a0 <rcutils_get_env>
 8010b38:	b120      	cbz	r0, 8010b44 <rcl_get_security_options_from_environment+0x24>
 8010b3a:	2501      	movs	r5, #1
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	b002      	add	sp, #8
 8010b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b44:	4604      	mov	r4, r0
 8010b46:	491b      	ldr	r1, [pc, #108]	; (8010bb4 <rcl_get_security_options_from_environment+0x94>)
 8010b48:	9801      	ldr	r0, [sp, #4]
 8010b4a:	f7ef fb71 	bl	8000230 <strcmp>
 8010b4e:	4605      	mov	r5, r0
 8010b50:	b9e8      	cbnz	r0, 8010b8e <rcl_get_security_options_from_environment+0x6e>
 8010b52:	9001      	str	r0, [sp, #4]
 8010b54:	f1b8 0f00 	cmp.w	r8, #0
 8010b58:	d020      	beq.n	8010b9c <rcl_get_security_options_from_environment+0x7c>
 8010b5a:	4817      	ldr	r0, [pc, #92]	; (8010bb8 <rcl_get_security_options_from_environment+0x98>)
 8010b5c:	a901      	add	r1, sp, #4
 8010b5e:	f001 fa9f 	bl	80120a0 <rcutils_get_env>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d1e9      	bne.n	8010b3a <rcl_get_security_options_from_environment+0x1a>
 8010b66:	4915      	ldr	r1, [pc, #84]	; (8010bbc <rcl_get_security_options_from_environment+0x9c>)
 8010b68:	9801      	ldr	r0, [sp, #4]
 8010b6a:	f7ef fb61 	bl	8000230 <strcmp>
 8010b6e:	fab0 f080 	clz	r0, r0
 8010b72:	0940      	lsrs	r0, r0, #5
 8010b74:	f888 0000 	strb.w	r0, [r8]
 8010b78:	4639      	mov	r1, r7
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	f7ff ff64 	bl	8010a48 <rcl_get_secure_root>
 8010b80:	b170      	cbz	r0, 8010ba0 <rcl_get_security_options_from_environment+0x80>
 8010b82:	f8c8 0004 	str.w	r0, [r8, #4]
 8010b86:	4628      	mov	r0, r5
 8010b88:	b002      	add	sp, #8
 8010b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b8e:	4625      	mov	r5, r4
 8010b90:	4628      	mov	r0, r5
 8010b92:	f888 4000 	strb.w	r4, [r8]
 8010b96:	b002      	add	sp, #8
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9c:	250b      	movs	r5, #11
 8010b9e:	e7cd      	b.n	8010b3c <rcl_get_security_options_from_environment+0x1c>
 8010ba0:	f898 5000 	ldrb.w	r5, [r8]
 8010ba4:	f1a5 0501 	sub.w	r5, r5, #1
 8010ba8:	fab5 f585 	clz	r5, r5
 8010bac:	096d      	lsrs	r5, r5, #5
 8010bae:	e7c5      	b.n	8010b3c <rcl_get_security_options_from_environment+0x1c>
 8010bb0:	080166c8 	.word	0x080166c8
 8010bb4:	080166dc 	.word	0x080166dc
 8010bb8:	080166e4 	.word	0x080166e4
 8010bbc:	080166fc 	.word	0x080166fc

08010bc0 <rcl_service_get_rmw_handle>:
 8010bc0:	b110      	cbz	r0, 8010bc8 <rcl_service_get_rmw_handle+0x8>
 8010bc2:	6800      	ldr	r0, [r0, #0]
 8010bc4:	b100      	cbz	r0, 8010bc8 <rcl_service_get_rmw_handle+0x8>
 8010bc6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop

08010bcc <rcl_take_request>:
 8010bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bce:	460e      	mov	r6, r1
 8010bd0:	4607      	mov	r7, r0
 8010bd2:	b08d      	sub	sp, #52	; 0x34
 8010bd4:	ad06      	add	r5, sp, #24
 8010bd6:	460c      	mov	r4, r1
 8010bd8:	4694      	mov	ip, r2
 8010bda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010bde:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8010be6:	b1e7      	cbz	r7, 8010c22 <rcl_take_request+0x56>
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	b1d3      	cbz	r3, 8010c22 <rcl_take_request+0x56>
 8010bec:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8010bee:	b1c0      	cbz	r0, 8010c22 <rcl_take_request+0x56>
 8010bf0:	4662      	mov	r2, ip
 8010bf2:	b30a      	cbz	r2, 8010c38 <rcl_take_request+0x6c>
 8010bf4:	2500      	movs	r5, #0
 8010bf6:	f10d 0307 	add.w	r3, sp, #7
 8010bfa:	a902      	add	r1, sp, #8
 8010bfc:	f88d 5007 	strb.w	r5, [sp, #7]
 8010c00:	f001 fe04 	bl	801280c <rmw_take_request>
 8010c04:	4606      	mov	r6, r0
 8010c06:	b178      	cbz	r0, 8010c28 <rcl_take_request+0x5c>
 8010c08:	280a      	cmp	r0, #10
 8010c0a:	bf18      	it	ne
 8010c0c:	2601      	movne	r6, #1
 8010c0e:	ad06      	add	r5, sp, #24
 8010c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c18:	e884 0003 	stmia.w	r4, {r0, r1}
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	b00d      	add	sp, #52	; 0x34
 8010c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c22:	f44f 7616 	mov.w	r6, #600	; 0x258
 8010c26:	e7f2      	b.n	8010c0e <rcl_take_request+0x42>
 8010c28:	f240 2359 	movw	r3, #601	; 0x259
 8010c2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010c30:	2a00      	cmp	r2, #0
 8010c32:	bf08      	it	eq
 8010c34:	461e      	moveq	r6, r3
 8010c36:	e7ea      	b.n	8010c0e <rcl_take_request+0x42>
 8010c38:	260b      	movs	r6, #11
 8010c3a:	e7e8      	b.n	8010c0e <rcl_take_request+0x42>

08010c3c <rcl_send_response>:
 8010c3c:	b160      	cbz	r0, 8010c58 <rcl_send_response+0x1c>
 8010c3e:	6800      	ldr	r0, [r0, #0]
 8010c40:	b150      	cbz	r0, 8010c58 <rcl_send_response+0x1c>
 8010c42:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8010c44:	b140      	cbz	r0, 8010c58 <rcl_send_response+0x1c>
 8010c46:	b151      	cbz	r1, 8010c5e <rcl_send_response+0x22>
 8010c48:	b510      	push	{r4, lr}
 8010c4a:	b152      	cbz	r2, 8010c62 <rcl_send_response+0x26>
 8010c4c:	f001 fe3c 	bl	80128c8 <rmw_send_response>
 8010c50:	3800      	subs	r0, #0
 8010c52:	bf18      	it	ne
 8010c54:	2001      	movne	r0, #1
 8010c56:	bd10      	pop	{r4, pc}
 8010c58:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010c5c:	4770      	bx	lr
 8010c5e:	200b      	movs	r0, #11
 8010c60:	4770      	bx	lr
 8010c62:	200b      	movs	r0, #11
 8010c64:	bd10      	pop	{r4, pc}
 8010c66:	bf00      	nop

08010c68 <rcl_get_system_time>:
 8010c68:	4608      	mov	r0, r1
 8010c6a:	f7f9 bb97 	b.w	800a39c <rcutils_system_time_now>
 8010c6e:	bf00      	nop

08010c70 <rcl_get_steady_time>:
 8010c70:	4608      	mov	r0, r1
 8010c72:	f7f9 bbbb 	b.w	800a3ec <rcutils_steady_time_now>
 8010c76:	bf00      	nop

08010c78 <rcl_get_ros_time>:
 8010c78:	7a03      	ldrb	r3, [r0, #8]
 8010c7a:	b510      	push	{r4, lr}
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	b143      	cbz	r3, 8010c92 <rcl_get_ros_time+0x1a>
 8010c80:	2105      	movs	r1, #5
 8010c82:	f001 f8e9 	bl	8011e58 <__atomic_load_8>
 8010c86:	4602      	mov	r2, r0
 8010c88:	460b      	mov	r3, r1
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	e9c4 2300 	strd	r2, r3, [r4]
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	4608      	mov	r0, r1
 8010c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c98:	f7f9 bb80 	b.w	800a39c <rcutils_system_time_now>

08010c9c <rcl_clock_init>:
 8010c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	4614      	mov	r4, r2
 8010ca6:	460e      	mov	r6, r1
 8010ca8:	f7f9 f946 	bl	8009f38 <rcutils_allocator_is_valid>
 8010cac:	b128      	cbz	r0, 8010cba <rcl_clock_init+0x1e>
 8010cae:	2d03      	cmp	r5, #3
 8010cb0:	d803      	bhi.n	8010cba <rcl_clock_init+0x1e>
 8010cb2:	e8df f005 	tbb	[pc, r5]
 8010cb6:	2e1d      	.short	0x2e1d
 8010cb8:	0555      	.short	0x0555
 8010cba:	200b      	movs	r0, #11
 8010cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cc0:	2e00      	cmp	r6, #0
 8010cc2:	d0fa      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010cc4:	2c00      	cmp	r4, #0
 8010cc6:	d0f8      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010cc8:	2700      	movs	r7, #0
 8010cca:	f04f 0c03 	mov.w	ip, #3
 8010cce:	7037      	strb	r7, [r6, #0]
 8010cd0:	f106 0514 	add.w	r5, r6, #20
 8010cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cd6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010cda:	6137      	str	r7, [r6, #16]
 8010cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cde:	4b2a      	ldr	r3, [pc, #168]	; (8010d88 <rcl_clock_init+0xec>)
 8010ce0:	6822      	ldr	r2, [r4, #0]
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	602a      	str	r2, [r5, #0]
 8010ce6:	f886 c000 	strb.w	ip, [r6]
 8010cea:	60f3      	str	r3, [r6, #12]
 8010cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf0:	2e00      	cmp	r6, #0
 8010cf2:	d0e2      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010cf4:	2700      	movs	r7, #0
 8010cf6:	f106 0514 	add.w	r5, r6, #20
 8010cfa:	7037      	strb	r7, [r6, #0]
 8010cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cfe:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010d02:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d08:	6823      	ldr	r3, [r4, #0]
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	602b      	str	r3, [r5, #0]
 8010d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d12:	2e00      	cmp	r6, #0
 8010d14:	d0d1      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	d0cf      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010d1a:	f04f 0800 	mov.w	r8, #0
 8010d1e:	4627      	mov	r7, r4
 8010d20:	f886 8000 	strb.w	r8, [r6]
 8010d24:	f106 0514 	add.w	r5, r6, #20
 8010d28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010d2a:	e9c6 8801 	strd	r8, r8, [r6, #4]
 8010d2e:	e9c6 8803 	strd	r8, r8, [r6, #12]
 8010d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d34:	683a      	ldr	r2, [r7, #0]
 8010d36:	6823      	ldr	r3, [r4, #0]
 8010d38:	602a      	str	r2, [r5, #0]
 8010d3a:	2010      	movs	r0, #16
 8010d3c:	6921      	ldr	r1, [r4, #16]
 8010d3e:	4798      	blx	r3
 8010d40:	4603      	mov	r3, r0
 8010d42:	6130      	str	r0, [r6, #16]
 8010d44:	b1e8      	cbz	r0, 8010d82 <rcl_clock_init+0xe6>
 8010d46:	2400      	movs	r4, #0
 8010d48:	2500      	movs	r5, #0
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	f880 8008 	strb.w	r8, [r0, #8]
 8010d50:	e9c3 4500 	strd	r4, r5, [r3]
 8010d54:	4b0d      	ldr	r3, [pc, #52]	; (8010d8c <rcl_clock_init+0xf0>)
 8010d56:	7032      	strb	r2, [r6, #0]
 8010d58:	4640      	mov	r0, r8
 8010d5a:	60f3      	str	r3, [r6, #12]
 8010d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d60:	2e00      	cmp	r6, #0
 8010d62:	d0aa      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010d64:	2c00      	cmp	r4, #0
 8010d66:	d0a8      	beq.n	8010cba <rcl_clock_init+0x1e>
 8010d68:	2700      	movs	r7, #0
 8010d6a:	f106 0514 	add.w	r5, r6, #20
 8010d6e:	7037      	strb	r7, [r6, #0]
 8010d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d72:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010d76:	6137      	str	r7, [r6, #16]
 8010d78:	f04f 0c02 	mov.w	ip, #2
 8010d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010d7e:	4b04      	ldr	r3, [pc, #16]	; (8010d90 <rcl_clock_init+0xf4>)
 8010d80:	e7ae      	b.n	8010ce0 <rcl_clock_init+0x44>
 8010d82:	200a      	movs	r0, #10
 8010d84:	e79a      	b.n	8010cbc <rcl_clock_init+0x20>
 8010d86:	bf00      	nop
 8010d88:	08010c71 	.word	0x08010c71
 8010d8c:	08010c79 	.word	0x08010c79
 8010d90:	08010c69 	.word	0x08010c69

08010d94 <rcl_clock_get_now>:
 8010d94:	b140      	cbz	r0, 8010da8 <rcl_clock_get_now+0x14>
 8010d96:	b139      	cbz	r1, 8010da8 <rcl_clock_get_now+0x14>
 8010d98:	7803      	ldrb	r3, [r0, #0]
 8010d9a:	b11b      	cbz	r3, 8010da4 <rcl_clock_get_now+0x10>
 8010d9c:	68c3      	ldr	r3, [r0, #12]
 8010d9e:	b10b      	cbz	r3, 8010da4 <rcl_clock_get_now+0x10>
 8010da0:	6900      	ldr	r0, [r0, #16]
 8010da2:	4718      	bx	r3
 8010da4:	2001      	movs	r0, #1
 8010da6:	4770      	bx	lr
 8010da8:	200b      	movs	r0, #11
 8010daa:	4770      	bx	lr

08010dac <rcl_timer_call>:
 8010dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db0:	b08b      	sub	sp, #44	; 0x2c
 8010db2:	2800      	cmp	r0, #0
 8010db4:	d070      	beq.n	8010e98 <rcl_timer_call+0xec>
 8010db6:	6803      	ldr	r3, [r0, #0]
 8010db8:	f3bf 8f5b 	dmb	ish
 8010dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	f3bf 8f5b 	dmb	ish
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d15b      	bne.n	8010e82 <rcl_timer_call+0xd6>
 8010dca:	6803      	ldr	r3, [r0, #0]
 8010dcc:	a908      	add	r1, sp, #32
 8010dce:	6818      	ldr	r0, [r3, #0]
 8010dd0:	f7ff ffe0 	bl	8010d94 <rcl_clock_get_now>
 8010dd4:	4605      	mov	r5, r0
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d14f      	bne.n	8010e7a <rcl_timer_call+0xce>
 8010dda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010dde:	2a00      	cmp	r2, #0
 8010de0:	f173 0100 	sbcs.w	r1, r3, #0
 8010de4:	db53      	blt.n	8010e8e <rcl_timer_call+0xe2>
 8010de6:	2605      	movs	r6, #5
 8010de8:	6820      	ldr	r0, [r4, #0]
 8010dea:	9600      	str	r6, [sp, #0]
 8010dec:	3020      	adds	r0, #32
 8010dee:	f001 f89b 	bl	8011f28 <__atomic_exchange_8>
 8010df2:	6822      	ldr	r2, [r4, #0]
 8010df4:	f3bf 8f5b 	dmb	ish
 8010df8:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8010dfc:	f3bf 8f5b 	dmb	ish
 8010e00:	460b      	mov	r3, r1
 8010e02:	4682      	mov	sl, r0
 8010e04:	6820      	ldr	r0, [r4, #0]
 8010e06:	4631      	mov	r1, r6
 8010e08:	3028      	adds	r0, #40	; 0x28
 8010e0a:	9305      	str	r3, [sp, #20]
 8010e0c:	f001 f824 	bl	8011e58 <__atomic_load_8>
 8010e10:	4603      	mov	r3, r0
 8010e12:	460a      	mov	r2, r1
 8010e14:	6820      	ldr	r0, [r4, #0]
 8010e16:	4631      	mov	r1, r6
 8010e18:	3018      	adds	r0, #24
 8010e1a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8010e1e:	f001 f81b 	bl	8011e58 <__atomic_load_8>
 8010e22:	4684      	mov	ip, r0
 8010e24:	468e      	mov	lr, r1
 8010e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	9a03      	ldr	r2, [sp, #12]
 8010e2e:	eb13 080c 	adds.w	r8, r3, ip
 8010e32:	eb42 090e 	adc.w	r9, r2, lr
 8010e36:	4580      	cmp	r8, r0
 8010e38:	eb79 0301 	sbcs.w	r3, r9, r1
 8010e3c:	4666      	mov	r6, ip
 8010e3e:	4677      	mov	r7, lr
 8010e40:	460a      	mov	r2, r1
 8010e42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010e46:	da04      	bge.n	8010e52 <rcl_timer_call+0xa6>
 8010e48:	ea56 0307 	orrs.w	r3, r6, r7
 8010e4c:	d129      	bne.n	8010ea2 <rcl_timer_call+0xf6>
 8010e4e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8010e52:	2105      	movs	r1, #5
 8010e54:	6820      	ldr	r0, [r4, #0]
 8010e56:	4642      	mov	r2, r8
 8010e58:	464b      	mov	r3, r9
 8010e5a:	9100      	str	r1, [sp, #0]
 8010e5c:	3028      	adds	r0, #40	; 0x28
 8010e5e:	f001 f82f 	bl	8011ec0 <__atomic_store_8>
 8010e62:	f1bb 0f00 	cmp.w	fp, #0
 8010e66:	d008      	beq.n	8010e7a <rcl_timer_call+0xce>
 8010e68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010e6c:	9905      	ldr	r1, [sp, #20]
 8010e6e:	ebb2 020a 	subs.w	r2, r2, sl
 8010e72:	4620      	mov	r0, r4
 8010e74:	eb63 0301 	sbc.w	r3, r3, r1
 8010e78:	47d8      	blx	fp
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	b00b      	add	sp, #44	; 0x2c
 8010e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e82:	f240 3521 	movw	r5, #801	; 0x321
 8010e86:	4628      	mov	r0, r5
 8010e88:	b00b      	add	sp, #44	; 0x2c
 8010e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8e:	2501      	movs	r5, #1
 8010e90:	4628      	mov	r0, r5
 8010e92:	b00b      	add	sp, #44	; 0x2c
 8010e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e98:	250b      	movs	r5, #11
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	b00b      	add	sp, #44	; 0x2c
 8010e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea2:	ebb0 0008 	subs.w	r0, r0, r8
 8010ea6:	eb62 0109 	sbc.w	r1, r2, r9
 8010eaa:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8010eae:	4673      	mov	r3, lr
 8010eb0:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8010eb4:	4662      	mov	r2, ip
 8010eb6:	f7ef fc51 	bl	800075c <__aeabi_ldivmod>
 8010eba:	fb00 7307 	mla	r3, r0, r7, r7
 8010ebe:	3001      	adds	r0, #1
 8010ec0:	f141 0100 	adc.w	r1, r1, #0
 8010ec4:	fb06 3101 	mla	r1, r6, r1, r3
 8010ec8:	fba0 6706 	umull	r6, r7, r0, r6
 8010ecc:	440f      	add	r7, r1
 8010ece:	eb18 0806 	adds.w	r8, r8, r6
 8010ed2:	eb49 0907 	adc.w	r9, r9, r7
 8010ed6:	e7bc      	b.n	8010e52 <rcl_timer_call+0xa6>

08010ed8 <rcl_timer_is_ready>:
 8010ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010edc:	b082      	sub	sp, #8
 8010ede:	b310      	cbz	r0, 8010f26 <rcl_timer_is_ready+0x4e>
 8010ee0:	4688      	mov	r8, r1
 8010ee2:	b301      	cbz	r1, 8010f26 <rcl_timer_is_ready+0x4e>
 8010ee4:	6803      	ldr	r3, [r0, #0]
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	4669      	mov	r1, sp
 8010eea:	6818      	ldr	r0, [r3, #0]
 8010eec:	f7ff ff52 	bl	8010d94 <rcl_clock_get_now>
 8010ef0:	4605      	mov	r5, r0
 8010ef2:	b118      	cbz	r0, 8010efc <rcl_timer_is_ready+0x24>
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	b002      	add	sp, #8
 8010ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010efc:	6820      	ldr	r0, [r4, #0]
 8010efe:	2105      	movs	r1, #5
 8010f00:	3028      	adds	r0, #40	; 0x28
 8010f02:	f000 ffa9 	bl	8011e58 <__atomic_load_8>
 8010f06:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f0a:	1ac6      	subs	r6, r0, r3
 8010f0c:	eb61 0702 	sbc.w	r7, r1, r2
 8010f10:	2e01      	cmp	r6, #1
 8010f12:	f177 0300 	sbcs.w	r3, r7, #0
 8010f16:	db0b      	blt.n	8010f30 <rcl_timer_is_ready+0x58>
 8010f18:	462b      	mov	r3, r5
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	f888 3000 	strb.w	r3, [r8]
 8010f20:	b002      	add	sp, #8
 8010f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f26:	250b      	movs	r5, #11
 8010f28:	4628      	mov	r0, r5
 8010f2a:	b002      	add	sp, #8
 8010f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f30:	6823      	ldr	r3, [r4, #0]
 8010f32:	f3bf 8f5b 	dmb	ish
 8010f36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010f3a:	f3bf 8f5b 	dmb	ish
 8010f3e:	fab3 f383 	clz	r3, r3
 8010f42:	095b      	lsrs	r3, r3, #5
 8010f44:	e7e9      	b.n	8010f1a <rcl_timer_is_ready+0x42>
 8010f46:	bf00      	nop

08010f48 <rcl_timer_get_time_until_next_call>:
 8010f48:	b570      	push	{r4, r5, r6, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	b1d8      	cbz	r0, 8010f86 <rcl_timer_get_time_until_next_call+0x3e>
 8010f4e:	460d      	mov	r5, r1
 8010f50:	b1c9      	cbz	r1, 8010f86 <rcl_timer_get_time_until_next_call+0x3e>
 8010f52:	6803      	ldr	r3, [r0, #0]
 8010f54:	4604      	mov	r4, r0
 8010f56:	4669      	mov	r1, sp
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	f7ff ff1b 	bl	8010d94 <rcl_clock_get_now>
 8010f5e:	4606      	mov	r6, r0
 8010f60:	b110      	cbz	r0, 8010f68 <rcl_timer_get_time_until_next_call+0x20>
 8010f62:	4630      	mov	r0, r6
 8010f64:	b002      	add	sp, #8
 8010f66:	bd70      	pop	{r4, r5, r6, pc}
 8010f68:	6820      	ldr	r0, [r4, #0]
 8010f6a:	2105      	movs	r1, #5
 8010f6c:	3028      	adds	r0, #40	; 0x28
 8010f6e:	f000 ff73 	bl	8011e58 <__atomic_load_8>
 8010f72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f76:	1ac0      	subs	r0, r0, r3
 8010f78:	eb61 0102 	sbc.w	r1, r1, r2
 8010f7c:	e9c5 0100 	strd	r0, r1, [r5]
 8010f80:	4630      	mov	r0, r6
 8010f82:	b002      	add	sp, #8
 8010f84:	bd70      	pop	{r4, r5, r6, pc}
 8010f86:	260b      	movs	r6, #11
 8010f88:	4630      	mov	r0, r6
 8010f8a:	b002      	add	sp, #8
 8010f8c:	bd70      	pop	{r4, r5, r6, pc}
 8010f8e:	bf00      	nop

08010f90 <rcl_timer_is_canceled>:
 8010f90:	b168      	cbz	r0, 8010fae <rcl_timer_is_canceled+0x1e>
 8010f92:	b161      	cbz	r1, 8010fae <rcl_timer_is_canceled+0x1e>
 8010f94:	6803      	ldr	r3, [r0, #0]
 8010f96:	f3bf 8f5b 	dmb	ish
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010fa0:	f3bf 8f5b 	dmb	ish
 8010fa4:	1a1b      	subs	r3, r3, r0
 8010fa6:	bf18      	it	ne
 8010fa8:	2301      	movne	r3, #1
 8010faa:	700b      	strb	r3, [r1, #0]
 8010fac:	4770      	bx	lr
 8010fae:	200b      	movs	r0, #11
 8010fb0:	4770      	bx	lr
 8010fb2:	bf00      	nop

08010fb4 <rcl_timer_get_guard_condition>:
 8010fb4:	b130      	cbz	r0, 8010fc4 <rcl_timer_get_guard_condition+0x10>
 8010fb6:	6800      	ldr	r0, [r0, #0]
 8010fb8:	b120      	cbz	r0, 8010fc4 <rcl_timer_get_guard_condition+0x10>
 8010fba:	68c3      	ldr	r3, [r0, #12]
 8010fbc:	b10b      	cbz	r3, 8010fc2 <rcl_timer_get_guard_condition+0xe>
 8010fbe:	3008      	adds	r0, #8
 8010fc0:	4770      	bx	lr
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop

08010fc8 <rcl_validate_enclave_name_with_size>:
 8010fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fca:	b0c3      	sub	sp, #268	; 0x10c
 8010fcc:	b1d0      	cbz	r0, 8011004 <rcl_validate_enclave_name_with_size+0x3c>
 8010fce:	4615      	mov	r5, r2
 8010fd0:	b1c2      	cbz	r2, 8011004 <rcl_validate_enclave_name_with_size+0x3c>
 8010fd2:	461f      	mov	r7, r3
 8010fd4:	466a      	mov	r2, sp
 8010fd6:	ab01      	add	r3, sp, #4
 8010fd8:	460e      	mov	r6, r1
 8010fda:	f001 f987 	bl	80122ec <rmw_validate_namespace_with_size>
 8010fde:	4604      	mov	r4, r0
 8010fe0:	b9e0      	cbnz	r0, 801101c <rcl_validate_enclave_name_with_size+0x54>
 8010fe2:	9b00      	ldr	r3, [sp, #0]
 8010fe4:	b923      	cbnz	r3, 8010ff0 <rcl_validate_enclave_name_with_size+0x28>
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	602b      	str	r3, [r5, #0]
 8010fea:	4620      	mov	r0, r4
 8010fec:	b043      	add	sp, #268	; 0x10c
 8010fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff0:	2b07      	cmp	r3, #7
 8010ff2:	d00b      	beq.n	801100c <rcl_validate_enclave_name_with_size+0x44>
 8010ff4:	1e5a      	subs	r2, r3, #1
 8010ff6:	2a05      	cmp	r2, #5
 8010ff8:	d82e      	bhi.n	8011058 <rcl_validate_enclave_name_with_size+0x90>
 8010ffa:	e8df f002 	tbb	[pc, r2]
 8010ffe:	211e      	.short	0x211e
 8011000:	152a2724 	.word	0x152a2724
 8011004:	240b      	movs	r4, #11
 8011006:	4620      	mov	r0, r4
 8011008:	b043      	add	sp, #268	; 0x10c
 801100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801100c:	2eff      	cmp	r6, #255	; 0xff
 801100e:	d9ea      	bls.n	8010fe6 <rcl_validate_enclave_name_with_size+0x1e>
 8011010:	602b      	str	r3, [r5, #0]
 8011012:	2f00      	cmp	r7, #0
 8011014:	d0e9      	beq.n	8010fea <rcl_validate_enclave_name_with_size+0x22>
 8011016:	23fe      	movs	r3, #254	; 0xfe
 8011018:	603b      	str	r3, [r7, #0]
 801101a:	e7e6      	b.n	8010fea <rcl_validate_enclave_name_with_size+0x22>
 801101c:	f7fe ffbc 	bl	800ff98 <rcl_convert_rmw_ret_to_rcl_ret>
 8011020:	4604      	mov	r4, r0
 8011022:	4620      	mov	r0, r4
 8011024:	b043      	add	sp, #268	; 0x10c
 8011026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011028:	2306      	movs	r3, #6
 801102a:	602b      	str	r3, [r5, #0]
 801102c:	2f00      	cmp	r7, #0
 801102e:	d0dc      	beq.n	8010fea <rcl_validate_enclave_name_with_size+0x22>
 8011030:	4620      	mov	r0, r4
 8011032:	9b01      	ldr	r3, [sp, #4]
 8011034:	603b      	str	r3, [r7, #0]
 8011036:	b043      	add	sp, #268	; 0x10c
 8011038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801103a:	2301      	movs	r3, #1
 801103c:	602b      	str	r3, [r5, #0]
 801103e:	e7f5      	b.n	801102c <rcl_validate_enclave_name_with_size+0x64>
 8011040:	2302      	movs	r3, #2
 8011042:	602b      	str	r3, [r5, #0]
 8011044:	e7f2      	b.n	801102c <rcl_validate_enclave_name_with_size+0x64>
 8011046:	2303      	movs	r3, #3
 8011048:	602b      	str	r3, [r5, #0]
 801104a:	e7ef      	b.n	801102c <rcl_validate_enclave_name_with_size+0x64>
 801104c:	2304      	movs	r3, #4
 801104e:	602b      	str	r3, [r5, #0]
 8011050:	e7ec      	b.n	801102c <rcl_validate_enclave_name_with_size+0x64>
 8011052:	2305      	movs	r3, #5
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	e7e9      	b.n	801102c <rcl_validate_enclave_name_with_size+0x64>
 8011058:	f44f 7180 	mov.w	r1, #256	; 0x100
 801105c:	4a02      	ldr	r2, [pc, #8]	; (8011068 <rcl_validate_enclave_name_with_size+0xa0>)
 801105e:	a802      	add	r0, sp, #8
 8011060:	f001 f8d0 	bl	8012204 <rcutils_snprintf>
 8011064:	2401      	movs	r4, #1
 8011066:	e7c0      	b.n	8010fea <rcl_validate_enclave_name_with_size+0x22>
 8011068:	08016748 	.word	0x08016748

0801106c <rcl_validate_enclave_name>:
 801106c:	b168      	cbz	r0, 801108a <rcl_validate_enclave_name+0x1e>
 801106e:	b570      	push	{r4, r5, r6, lr}
 8011070:	460d      	mov	r5, r1
 8011072:	4616      	mov	r6, r2
 8011074:	4604      	mov	r4, r0
 8011076:	f7ef f8e5 	bl	8000244 <strlen>
 801107a:	4633      	mov	r3, r6
 801107c:	4601      	mov	r1, r0
 801107e:	462a      	mov	r2, r5
 8011080:	4620      	mov	r0, r4
 8011082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011086:	f7ff bf9f 	b.w	8010fc8 <rcl_validate_enclave_name_with_size>
 801108a:	200b      	movs	r0, #11
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop

08011090 <rcl_validate_topic_name>:
 8011090:	2800      	cmp	r0, #0
 8011092:	f000 808c 	beq.w	80111ae <rcl_validate_topic_name+0x11e>
 8011096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801109a:	460e      	mov	r6, r1
 801109c:	2900      	cmp	r1, #0
 801109e:	f000 808d 	beq.w	80111bc <rcl_validate_topic_name+0x12c>
 80110a2:	4617      	mov	r7, r2
 80110a4:	4605      	mov	r5, r0
 80110a6:	f7ef f8cd 	bl	8000244 <strlen>
 80110aa:	b1b0      	cbz	r0, 80110da <rcl_validate_topic_name+0x4a>
 80110ac:	f895 9000 	ldrb.w	r9, [r5]
 80110b0:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8011258 <rcl_validate_topic_name+0x1c8>
 80110b4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80110b8:	f013 0304 	ands.w	r3, r3, #4
 80110bc:	d179      	bne.n	80111b2 <rcl_validate_topic_name+0x122>
 80110be:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80110c2:	f815 2008 	ldrb.w	r2, [r5, r8]
 80110c6:	2a2f      	cmp	r2, #47	; 0x2f
 80110c8:	d10e      	bne.n	80110e8 <rcl_validate_topic_name+0x58>
 80110ca:	2202      	movs	r2, #2
 80110cc:	6032      	str	r2, [r6, #0]
 80110ce:	b377      	cbz	r7, 801112e <rcl_validate_topic_name+0x9e>
 80110d0:	4618      	mov	r0, r3
 80110d2:	f8c7 8000 	str.w	r8, [r7]
 80110d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110da:	2301      	movs	r3, #1
 80110dc:	6033      	str	r3, [r6, #0]
 80110de:	b337      	cbz	r7, 801112e <rcl_validate_topic_name+0x9e>
 80110e0:	2000      	movs	r0, #0
 80110e2:	6038      	str	r0, [r7, #0]
 80110e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e8:	461c      	mov	r4, r3
 80110ea:	4619      	mov	r1, r3
 80110ec:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80110f0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80110f4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80110f8:	f1be 0f09 	cmp.w	lr, #9
 80110fc:	d947      	bls.n	801118e <rcl_validate_topic_name+0xfe>
 80110fe:	f022 0e20 	bic.w	lr, r2, #32
 8011102:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8011106:	f1be 0f19 	cmp.w	lr, #25
 801110a:	d940      	bls.n	801118e <rcl_validate_topic_name+0xfe>
 801110c:	2a5f      	cmp	r2, #95	; 0x5f
 801110e:	d015      	beq.n	801113c <rcl_validate_topic_name+0xac>
 8011110:	2a2f      	cmp	r2, #47	; 0x2f
 8011112:	d072      	beq.n	80111fa <rcl_validate_topic_name+0x16a>
 8011114:	2a7e      	cmp	r2, #126	; 0x7e
 8011116:	d053      	beq.n	80111c0 <rcl_validate_topic_name+0x130>
 8011118:	2a7b      	cmp	r2, #123	; 0x7b
 801111a:	d00b      	beq.n	8011134 <rcl_validate_topic_name+0xa4>
 801111c:	2a7d      	cmp	r2, #125	; 0x7d
 801111e:	f040 808a 	bne.w	8011236 <rcl_validate_topic_name+0x1a6>
 8011122:	2c00      	cmp	r4, #0
 8011124:	d174      	bne.n	8011210 <rcl_validate_topic_name+0x180>
 8011126:	2305      	movs	r3, #5
 8011128:	6033      	str	r3, [r6, #0]
 801112a:	b107      	cbz	r7, 801112e <rcl_validate_topic_name+0x9e>
 801112c:	6039      	str	r1, [r7, #0]
 801112e:	2000      	movs	r0, #0
 8011130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011134:	2c00      	cmp	r4, #0
 8011136:	d162      	bne.n	80111fe <rcl_validate_topic_name+0x16e>
 8011138:	460b      	mov	r3, r1
 801113a:	2401      	movs	r4, #1
 801113c:	3101      	adds	r1, #1
 801113e:	4288      	cmp	r0, r1
 8011140:	d1d6      	bne.n	80110f0 <rcl_validate_topic_name+0x60>
 8011142:	2c00      	cmp	r4, #0
 8011144:	d16c      	bne.n	8011220 <rcl_validate_topic_name+0x190>
 8011146:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 801114a:	4620      	mov	r0, r4
 801114c:	f108 0401 	add.w	r4, r8, #1
 8011150:	d108      	bne.n	8011164 <rcl_validate_topic_name+0xd4>
 8011152:	e044      	b.n	80111de <rcl_validate_topic_name+0x14e>
 8011154:	2801      	cmp	r0, #1
 8011156:	d05d      	beq.n	8011214 <rcl_validate_topic_name+0x184>
 8011158:	461a      	mov	r2, r3
 801115a:	4291      	cmp	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f105 0501 	add.w	r5, r5, #1
 8011162:	d95a      	bls.n	801121a <rcl_validate_topic_name+0x18a>
 8011164:	4580      	cmp	r8, r0
 8011166:	f100 0301 	add.w	r3, r0, #1
 801116a:	d04d      	beq.n	8011208 <rcl_validate_topic_name+0x178>
 801116c:	782a      	ldrb	r2, [r5, #0]
 801116e:	2a2f      	cmp	r2, #47	; 0x2f
 8011170:	d1f0      	bne.n	8011154 <rcl_validate_topic_name+0xc4>
 8011172:	786a      	ldrb	r2, [r5, #1]
 8011174:	1c43      	adds	r3, r0, #1
 8011176:	f81c 0002 	ldrb.w	r0, [ip, r2]
 801117a:	461a      	mov	r2, r3
 801117c:	0740      	lsls	r0, r0, #29
 801117e:	d5ec      	bpl.n	801115a <rcl_validate_topic_name+0xca>
 8011180:	2304      	movs	r3, #4
 8011182:	6033      	str	r3, [r6, #0]
 8011184:	2f00      	cmp	r7, #0
 8011186:	d0d2      	beq.n	801112e <rcl_validate_topic_name+0x9e>
 8011188:	2000      	movs	r0, #0
 801118a:	603a      	str	r2, [r7, #0]
 801118c:	e7aa      	b.n	80110e4 <rcl_validate_topic_name+0x54>
 801118e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8011192:	0752      	lsls	r2, r2, #29
 8011194:	d5d2      	bpl.n	801113c <rcl_validate_topic_name+0xac>
 8011196:	2c00      	cmp	r4, #0
 8011198:	d0d0      	beq.n	801113c <rcl_validate_topic_name+0xac>
 801119a:	2900      	cmp	r1, #0
 801119c:	d0ce      	beq.n	801113c <rcl_validate_topic_name+0xac>
 801119e:	1e4a      	subs	r2, r1, #1
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d1cb      	bne.n	801113c <rcl_validate_topic_name+0xac>
 80111a4:	2309      	movs	r3, #9
 80111a6:	6033      	str	r3, [r6, #0]
 80111a8:	2f00      	cmp	r7, #0
 80111aa:	d1bf      	bne.n	801112c <rcl_validate_topic_name+0x9c>
 80111ac:	e7bf      	b.n	801112e <rcl_validate_topic_name+0x9e>
 80111ae:	200b      	movs	r0, #11
 80111b0:	4770      	bx	lr
 80111b2:	2304      	movs	r3, #4
 80111b4:	6033      	str	r3, [r6, #0]
 80111b6:	2f00      	cmp	r7, #0
 80111b8:	d192      	bne.n	80110e0 <rcl_validate_topic_name+0x50>
 80111ba:	e7b8      	b.n	801112e <rcl_validate_topic_name+0x9e>
 80111bc:	200b      	movs	r0, #11
 80111be:	e791      	b.n	80110e4 <rcl_validate_topic_name+0x54>
 80111c0:	2900      	cmp	r1, #0
 80111c2:	d0bb      	beq.n	801113c <rcl_validate_topic_name+0xac>
 80111c4:	2306      	movs	r3, #6
 80111c6:	6033      	str	r3, [r6, #0]
 80111c8:	2f00      	cmp	r7, #0
 80111ca:	d1af      	bne.n	801112c <rcl_validate_topic_name+0x9c>
 80111cc:	e7af      	b.n	801112e <rcl_validate_topic_name+0x9e>
 80111ce:	2801      	cmp	r0, #1
 80111d0:	d03a      	beq.n	8011248 <rcl_validate_topic_name+0x1b8>
 80111d2:	461a      	mov	r2, r3
 80111d4:	4291      	cmp	r1, r2
 80111d6:	4618      	mov	r0, r3
 80111d8:	f105 0501 	add.w	r5, r5, #1
 80111dc:	d91d      	bls.n	801121a <rcl_validate_topic_name+0x18a>
 80111de:	4580      	cmp	r8, r0
 80111e0:	f100 0301 	add.w	r3, r0, #1
 80111e4:	d023      	beq.n	801122e <rcl_validate_topic_name+0x19e>
 80111e6:	782a      	ldrb	r2, [r5, #0]
 80111e8:	2a2f      	cmp	r2, #47	; 0x2f
 80111ea:	d1f0      	bne.n	80111ce <rcl_validate_topic_name+0x13e>
 80111ec:	786a      	ldrb	r2, [r5, #1]
 80111ee:	f81c 0002 	ldrb.w	r0, [ip, r2]
 80111f2:	461a      	mov	r2, r3
 80111f4:	0740      	lsls	r0, r0, #29
 80111f6:	d5ed      	bpl.n	80111d4 <rcl_validate_topic_name+0x144>
 80111f8:	e7c2      	b.n	8011180 <rcl_validate_topic_name+0xf0>
 80111fa:	2c00      	cmp	r4, #0
 80111fc:	d09e      	beq.n	801113c <rcl_validate_topic_name+0xac>
 80111fe:	2308      	movs	r3, #8
 8011200:	6033      	str	r3, [r6, #0]
 8011202:	2f00      	cmp	r7, #0
 8011204:	d192      	bne.n	801112c <rcl_validate_topic_name+0x9c>
 8011206:	e792      	b.n	801112e <rcl_validate_topic_name+0x9e>
 8011208:	4622      	mov	r2, r4
 801120a:	f108 0301 	add.w	r3, r8, #1
 801120e:	e7a4      	b.n	801115a <rcl_validate_topic_name+0xca>
 8011210:	2400      	movs	r4, #0
 8011212:	e793      	b.n	801113c <rcl_validate_topic_name+0xac>
 8011214:	2202      	movs	r2, #2
 8011216:	4613      	mov	r3, r2
 8011218:	e79f      	b.n	801115a <rcl_validate_topic_name+0xca>
 801121a:	2000      	movs	r0, #0
 801121c:	6030      	str	r0, [r6, #0]
 801121e:	e761      	b.n	80110e4 <rcl_validate_topic_name+0x54>
 8011220:	2205      	movs	r2, #5
 8011222:	6032      	str	r2, [r6, #0]
 8011224:	2f00      	cmp	r7, #0
 8011226:	d082      	beq.n	801112e <rcl_validate_topic_name+0x9e>
 8011228:	2000      	movs	r0, #0
 801122a:	603b      	str	r3, [r7, #0]
 801122c:	e75a      	b.n	80110e4 <rcl_validate_topic_name+0x54>
 801122e:	4622      	mov	r2, r4
 8011230:	f108 0301 	add.w	r3, r8, #1
 8011234:	e7ce      	b.n	80111d4 <rcl_validate_topic_name+0x144>
 8011236:	2c00      	cmp	r4, #0
 8011238:	bf14      	ite	ne
 801123a:	2308      	movne	r3, #8
 801123c:	2303      	moveq	r3, #3
 801123e:	6033      	str	r3, [r6, #0]
 8011240:	2f00      	cmp	r7, #0
 8011242:	f47f af73 	bne.w	801112c <rcl_validate_topic_name+0x9c>
 8011246:	e772      	b.n	801112e <rcl_validate_topic_name+0x9e>
 8011248:	2307      	movs	r3, #7
 801124a:	6033      	str	r3, [r6, #0]
 801124c:	2f00      	cmp	r7, #0
 801124e:	f43f af6e 	beq.w	801112e <rcl_validate_topic_name+0x9e>
 8011252:	6038      	str	r0, [r7, #0]
 8011254:	2000      	movs	r0, #0
 8011256:	e745      	b.n	80110e4 <rcl_validate_topic_name+0x54>
 8011258:	08016b61 	.word	0x08016b61

0801125c <rcl_get_zero_initialized_wait_set>:
 801125c:	b470      	push	{r4, r5, r6}
 801125e:	4604      	mov	r4, r0
 8011260:	4606      	mov	r6, r0
 8011262:	4d06      	ldr	r5, [pc, #24]	; (801127c <rcl_get_zero_initialized_wait_set+0x20>)
 8011264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011270:	682b      	ldr	r3, [r5, #0]
 8011272:	4630      	mov	r0, r6
 8011274:	6023      	str	r3, [r4, #0]
 8011276:	bc70      	pop	{r4, r5, r6}
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	080167a8 	.word	0x080167a8

08011280 <rcl_wait_set_is_valid>:
 8011280:	b118      	cbz	r0, 801128a <rcl_wait_set_is_valid+0xa>
 8011282:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011284:	3800      	subs	r0, #0
 8011286:	bf18      	it	ne
 8011288:	2001      	movne	r0, #1
 801128a:	4770      	bx	lr

0801128c <rcl_wait_set_fini>:
 801128c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011290:	b083      	sub	sp, #12
 8011292:	2800      	cmp	r0, #0
 8011294:	f000 8098 	beq.w	80113c8 <rcl_wait_set_fini+0x13c>
 8011298:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801129a:	4604      	mov	r4, r0
 801129c:	2e00      	cmp	r6, #0
 801129e:	f000 808f 	beq.w	80113c0 <rcl_wait_set_fini+0x134>
 80112a2:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80112a4:	f001 fd44 	bl	8012d30 <rmw_destroy_wait_set>
 80112a8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80112aa:	1e06      	subs	r6, r0, #0
 80112ac:	bf18      	it	ne
 80112ae:	f44f 7661 	movne.w	r6, #900	; 0x384
 80112b2:	2d00      	cmp	r5, #0
 80112b4:	f000 8084 	beq.w	80113c0 <rcl_wait_set_fini+0x134>
 80112b8:	2700      	movs	r7, #0
 80112ba:	6820      	ldr	r0, [r4, #0]
 80112bc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80112c0:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 80112c4:	6067      	str	r7, [r4, #4]
 80112c6:	602f      	str	r7, [r5, #0]
 80112c8:	b118      	cbz	r0, 80112d2 <rcl_wait_set_fini+0x46>
 80112ca:	4649      	mov	r1, r9
 80112cc:	47c0      	blx	r8
 80112ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80112d0:	6027      	str	r7, [r4, #0]
 80112d2:	68a8      	ldr	r0, [r5, #8]
 80112d4:	b128      	cbz	r0, 80112e2 <rcl_wait_set_fini+0x56>
 80112d6:	4649      	mov	r1, r9
 80112d8:	47c0      	blx	r8
 80112da:	2300      	movs	r3, #0
 80112dc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80112de:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80112e2:	f04f 0800 	mov.w	r8, #0
 80112e6:	68a0      	ldr	r0, [r4, #8]
 80112e8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80112ea:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80112ec:	f8c4 800c 	str.w	r8, [r4, #12]
 80112f0:	f8c5 800c 	str.w	r8, [r5, #12]
 80112f4:	b128      	cbz	r0, 8011302 <rcl_wait_set_fini+0x76>
 80112f6:	47b8      	blx	r7
 80112f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80112fa:	f8c4 8008 	str.w	r8, [r4, #8]
 80112fe:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011300:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011302:	f04f 0800 	mov.w	r8, #0
 8011306:	6968      	ldr	r0, [r5, #20]
 8011308:	f8c5 8010 	str.w	r8, [r5, #16]
 801130c:	b128      	cbz	r0, 801131a <rcl_wait_set_fini+0x8e>
 801130e:	47b8      	blx	r7
 8011310:	f8c5 8014 	str.w	r8, [r5, #20]
 8011314:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011316:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011318:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801131a:	f04f 0800 	mov.w	r8, #0
 801131e:	6920      	ldr	r0, [r4, #16]
 8011320:	f8c4 8014 	str.w	r8, [r4, #20]
 8011324:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8011328:	b128      	cbz	r0, 8011336 <rcl_wait_set_fini+0xaa>
 801132a:	47b8      	blx	r7
 801132c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801132e:	f8c4 8010 	str.w	r8, [r4, #16]
 8011332:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011334:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011336:	f04f 0800 	mov.w	r8, #0
 801133a:	69a0      	ldr	r0, [r4, #24]
 801133c:	f8c4 801c 	str.w	r8, [r4, #28]
 8011340:	f8c5 8018 	str.w	r8, [r5, #24]
 8011344:	b128      	cbz	r0, 8011352 <rcl_wait_set_fini+0xc6>
 8011346:	9101      	str	r1, [sp, #4]
 8011348:	47b8      	blx	r7
 801134a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801134c:	9901      	ldr	r1, [sp, #4]
 801134e:	f8c4 8018 	str.w	r8, [r4, #24]
 8011352:	6a28      	ldr	r0, [r5, #32]
 8011354:	b120      	cbz	r0, 8011360 <rcl_wait_set_fini+0xd4>
 8011356:	47b8      	blx	r7
 8011358:	2300      	movs	r3, #0
 801135a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801135c:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011360:	2700      	movs	r7, #0
 8011362:	6a20      	ldr	r0, [r4, #32]
 8011364:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011368:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 801136c:	6267      	str	r7, [r4, #36]	; 0x24
 801136e:	626f      	str	r7, [r5, #36]	; 0x24
 8011370:	b118      	cbz	r0, 801137a <rcl_wait_set_fini+0xee>
 8011372:	4649      	mov	r1, r9
 8011374:	47c0      	blx	r8
 8011376:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011378:	6227      	str	r7, [r4, #32]
 801137a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801137c:	b128      	cbz	r0, 801138a <rcl_wait_set_fini+0xfe>
 801137e:	4649      	mov	r1, r9
 8011380:	47c0      	blx	r8
 8011382:	2300      	movs	r3, #0
 8011384:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011386:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801138a:	2700      	movs	r7, #0
 801138c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801138e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8011392:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8011396:	62e7      	str	r7, [r4, #44]	; 0x2c
 8011398:	632f      	str	r7, [r5, #48]	; 0x30
 801139a:	b118      	cbz	r0, 80113a4 <rcl_wait_set_fini+0x118>
 801139c:	4649      	mov	r1, r9
 801139e:	47c0      	blx	r8
 80113a0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80113a2:	62a7      	str	r7, [r4, #40]	; 0x28
 80113a4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80113a6:	b128      	cbz	r0, 80113b4 <rcl_wait_set_fini+0x128>
 80113a8:	4649      	mov	r1, r9
 80113aa:	47c0      	blx	r8
 80113ac:	2300      	movs	r3, #0
 80113ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80113b0:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80113b4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80113b6:	4628      	mov	r0, r5
 80113b8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80113ba:	4798      	blx	r3
 80113bc:	2300      	movs	r3, #0
 80113be:	6323      	str	r3, [r4, #48]	; 0x30
 80113c0:	4630      	mov	r0, r6
 80113c2:	b003      	add	sp, #12
 80113c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113c8:	260b      	movs	r6, #11
 80113ca:	4630      	mov	r0, r6
 80113cc:	b003      	add	sp, #12
 80113ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d2:	bf00      	nop

080113d4 <rcl_wait_set_add_subscription>:
 80113d4:	b320      	cbz	r0, 8011420 <rcl_wait_set_add_subscription+0x4c>
 80113d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80113d8:	b570      	push	{r4, r5, r6, lr}
 80113da:	4604      	mov	r4, r0
 80113dc:	b1d3      	cbz	r3, 8011414 <rcl_wait_set_add_subscription+0x40>
 80113de:	b319      	cbz	r1, 8011428 <rcl_wait_set_add_subscription+0x54>
 80113e0:	681d      	ldr	r5, [r3, #0]
 80113e2:	6860      	ldr	r0, [r4, #4]
 80113e4:	4285      	cmp	r5, r0
 80113e6:	d218      	bcs.n	801141a <rcl_wait_set_add_subscription+0x46>
 80113e8:	6820      	ldr	r0, [r4, #0]
 80113ea:	1c6e      	adds	r6, r5, #1
 80113ec:	601e      	str	r6, [r3, #0]
 80113ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80113f2:	b102      	cbz	r2, 80113f6 <rcl_wait_set_add_subscription+0x22>
 80113f4:	6015      	str	r5, [r2, #0]
 80113f6:	4608      	mov	r0, r1
 80113f8:	f7f8 f924 	bl	8009644 <rcl_subscription_get_rmw_handle>
 80113fc:	b190      	cbz	r0, 8011424 <rcl_wait_set_add_subscription+0x50>
 80113fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011400:	6842      	ldr	r2, [r0, #4]
 8011402:	689b      	ldr	r3, [r3, #8]
 8011404:	2000      	movs	r0, #0
 8011406:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801140a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801140c:	6853      	ldr	r3, [r2, #4]
 801140e:	3301      	adds	r3, #1
 8011410:	6053      	str	r3, [r2, #4]
 8011412:	bd70      	pop	{r4, r5, r6, pc}
 8011414:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011418:	bd70      	pop	{r4, r5, r6, pc}
 801141a:	f240 3086 	movw	r0, #902	; 0x386
 801141e:	bd70      	pop	{r4, r5, r6, pc}
 8011420:	200b      	movs	r0, #11
 8011422:	4770      	bx	lr
 8011424:	2001      	movs	r0, #1
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	200b      	movs	r0, #11
 801142a:	bd70      	pop	{r4, r5, r6, pc}

0801142c <rcl_wait_set_clear>:
 801142c:	2800      	cmp	r0, #0
 801142e:	d074      	beq.n	801151a <rcl_wait_set_clear+0xee>
 8011430:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011432:	b510      	push	{r4, lr}
 8011434:	4604      	mov	r4, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d071      	beq.n	801151e <rcl_wait_set_clear+0xf2>
 801143a:	6800      	ldr	r0, [r0, #0]
 801143c:	b138      	cbz	r0, 801144e <rcl_wait_set_clear+0x22>
 801143e:	6862      	ldr	r2, [r4, #4]
 8011440:	2100      	movs	r1, #0
 8011442:	0092      	lsls	r2, r2, #2
 8011444:	f002 fd16 	bl	8013e74 <memset>
 8011448:	2200      	movs	r2, #0
 801144a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	68a0      	ldr	r0, [r4, #8]
 8011450:	b138      	cbz	r0, 8011462 <rcl_wait_set_clear+0x36>
 8011452:	68e2      	ldr	r2, [r4, #12]
 8011454:	2100      	movs	r1, #0
 8011456:	0092      	lsls	r2, r2, #2
 8011458:	f002 fd0c 	bl	8013e74 <memset>
 801145c:	2200      	movs	r2, #0
 801145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011460:	60da      	str	r2, [r3, #12]
 8011462:	69a0      	ldr	r0, [r4, #24]
 8011464:	b138      	cbz	r0, 8011476 <rcl_wait_set_clear+0x4a>
 8011466:	69e2      	ldr	r2, [r4, #28]
 8011468:	2100      	movs	r1, #0
 801146a:	0092      	lsls	r2, r2, #2
 801146c:	f002 fd02 	bl	8013e74 <memset>
 8011470:	2200      	movs	r2, #0
 8011472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011474:	619a      	str	r2, [r3, #24]
 8011476:	6a20      	ldr	r0, [r4, #32]
 8011478:	b138      	cbz	r0, 801148a <rcl_wait_set_clear+0x5e>
 801147a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801147c:	2100      	movs	r1, #0
 801147e:	0092      	lsls	r2, r2, #2
 8011480:	f002 fcf8 	bl	8013e74 <memset>
 8011484:	2200      	movs	r2, #0
 8011486:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011488:	625a      	str	r2, [r3, #36]	; 0x24
 801148a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801148c:	b138      	cbz	r0, 801149e <rcl_wait_set_clear+0x72>
 801148e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011490:	2100      	movs	r1, #0
 8011492:	0092      	lsls	r2, r2, #2
 8011494:	f002 fcee 	bl	8013e74 <memset>
 8011498:	2200      	movs	r2, #0
 801149a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801149c:	631a      	str	r2, [r3, #48]	; 0x30
 801149e:	6920      	ldr	r0, [r4, #16]
 80114a0:	b138      	cbz	r0, 80114b2 <rcl_wait_set_clear+0x86>
 80114a2:	6962      	ldr	r2, [r4, #20]
 80114a4:	2100      	movs	r1, #0
 80114a6:	0092      	lsls	r2, r2, #2
 80114a8:	f002 fce4 	bl	8013e74 <memset>
 80114ac:	2200      	movs	r2, #0
 80114ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80114b0:	641a      	str	r2, [r3, #64]	; 0x40
 80114b2:	6898      	ldr	r0, [r3, #8]
 80114b4:	b138      	cbz	r0, 80114c6 <rcl_wait_set_clear+0x9a>
 80114b6:	685a      	ldr	r2, [r3, #4]
 80114b8:	2100      	movs	r1, #0
 80114ba:	0092      	lsls	r2, r2, #2
 80114bc:	f002 fcda 	bl	8013e74 <memset>
 80114c0:	2200      	movs	r2, #0
 80114c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80114c4:	605a      	str	r2, [r3, #4]
 80114c6:	6958      	ldr	r0, [r3, #20]
 80114c8:	b138      	cbz	r0, 80114da <rcl_wait_set_clear+0xae>
 80114ca:	691a      	ldr	r2, [r3, #16]
 80114cc:	2100      	movs	r1, #0
 80114ce:	0092      	lsls	r2, r2, #2
 80114d0:	f002 fcd0 	bl	8013e74 <memset>
 80114d4:	2200      	movs	r2, #0
 80114d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80114d8:	611a      	str	r2, [r3, #16]
 80114da:	6a18      	ldr	r0, [r3, #32]
 80114dc:	b138      	cbz	r0, 80114ee <rcl_wait_set_clear+0xc2>
 80114de:	69da      	ldr	r2, [r3, #28]
 80114e0:	2100      	movs	r1, #0
 80114e2:	0092      	lsls	r2, r2, #2
 80114e4:	f002 fcc6 	bl	8013e74 <memset>
 80114e8:	2200      	movs	r2, #0
 80114ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80114ec:	61da      	str	r2, [r3, #28]
 80114ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80114f0:	b138      	cbz	r0, 8011502 <rcl_wait_set_clear+0xd6>
 80114f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114f4:	2100      	movs	r1, #0
 80114f6:	0092      	lsls	r2, r2, #2
 80114f8:	f002 fcbc 	bl	8013e74 <memset>
 80114fc:	2200      	movs	r2, #0
 80114fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011500:	629a      	str	r2, [r3, #40]	; 0x28
 8011502:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011504:	b140      	cbz	r0, 8011518 <rcl_wait_set_clear+0xec>
 8011506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011508:	2100      	movs	r1, #0
 801150a:	0092      	lsls	r2, r2, #2
 801150c:	f002 fcb2 	bl	8013e74 <memset>
 8011510:	2300      	movs	r3, #0
 8011512:	4618      	mov	r0, r3
 8011514:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011516:	6353      	str	r3, [r2, #52]	; 0x34
 8011518:	bd10      	pop	{r4, pc}
 801151a:	200b      	movs	r0, #11
 801151c:	4770      	bx	lr
 801151e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011522:	bd10      	pop	{r4, pc}

08011524 <rcl_wait_set_resize>:
 8011524:	2800      	cmp	r0, #0
 8011526:	f000 81a7 	beq.w	8011878 <rcl_wait_set_resize+0x354>
 801152a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801152e:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8011532:	4604      	mov	r4, r0
 8011534:	b083      	sub	sp, #12
 8011536:	f1ba 0f00 	cmp.w	sl, #0
 801153a:	f000 819f 	beq.w	801187c <rcl_wait_set_resize+0x358>
 801153e:	f04f 0800 	mov.w	r8, #0
 8011542:	461e      	mov	r6, r3
 8011544:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8011548:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 801154c:	460f      	mov	r7, r1
 801154e:	f8c0 8004 	str.w	r8, [r0, #4]
 8011552:	4615      	mov	r5, r2
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	f8ca 8000 	str.w	r8, [sl]
 801155a:	2900      	cmp	r1, #0
 801155c:	f000 80ca 	beq.w	80116f4 <rcl_wait_set_resize+0x1d0>
 8011560:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8011564:	4651      	mov	r1, sl
 8011566:	464a      	mov	r2, r9
 8011568:	6800      	ldr	r0, [r0, #0]
 801156a:	4798      	blx	r3
 801156c:	6020      	str	r0, [r4, #0]
 801156e:	2800      	cmp	r0, #0
 8011570:	f000 80d9 	beq.w	8011726 <rcl_wait_set_resize+0x202>
 8011574:	4652      	mov	r2, sl
 8011576:	4641      	mov	r1, r8
 8011578:	f002 fc7c 	bl	8013e74 <memset>
 801157c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801157e:	6067      	str	r7, [r4, #4]
 8011580:	464a      	mov	r2, r9
 8011582:	6898      	ldr	r0, [r3, #8]
 8011584:	f8c3 8004 	str.w	r8, [r3, #4]
 8011588:	9301      	str	r3, [sp, #4]
 801158a:	4651      	mov	r1, sl
 801158c:	9b00      	ldr	r3, [sp, #0]
 801158e:	4798      	blx	r3
 8011590:	9b01      	ldr	r3, [sp, #4]
 8011592:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011594:	6098      	str	r0, [r3, #8]
 8011596:	6897      	ldr	r7, [r2, #8]
 8011598:	2f00      	cmp	r7, #0
 801159a:	f000 80bf 	beq.w	801171c <rcl_wait_set_resize+0x1f8>
 801159e:	4652      	mov	r2, sl
 80115a0:	4641      	mov	r1, r8
 80115a2:	4638      	mov	r0, r7
 80115a4:	f002 fc66 	bl	8013e74 <memset>
 80115a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80115ac:	2700      	movs	r7, #0
 80115ae:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 80115b2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80115b6:	60e7      	str	r7, [r4, #12]
 80115b8:	f8ca 700c 	str.w	r7, [sl, #12]
 80115bc:	2d00      	cmp	r5, #0
 80115be:	f040 80b6 	bne.w	801172e <rcl_wait_set_resize+0x20a>
 80115c2:	68a0      	ldr	r0, [r4, #8]
 80115c4:	b130      	cbz	r0, 80115d4 <rcl_wait_set_resize+0xb0>
 80115c6:	4641      	mov	r1, r8
 80115c8:	4790      	blx	r2
 80115ca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80115ce:	60a5      	str	r5, [r4, #8]
 80115d0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80115d4:	2700      	movs	r7, #0
 80115d6:	19ad      	adds	r5, r5, r6
 80115d8:	f8ca 7010 	str.w	r7, [sl, #16]
 80115dc:	f040 80bf 	bne.w	801175e <rcl_wait_set_resize+0x23a>
 80115e0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80115e4:	b148      	cbz	r0, 80115fa <rcl_wait_set_resize+0xd6>
 80115e6:	4641      	mov	r1, r8
 80115e8:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80115ec:	4798      	blx	r3
 80115ee:	f8ca 5014 	str.w	r5, [sl, #20]
 80115f2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80115f6:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80115fa:	2500      	movs	r5, #0
 80115fc:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8011600:	6165      	str	r5, [r4, #20]
 8011602:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8011606:	2e00      	cmp	r6, #0
 8011608:	f040 80c0 	bne.w	801178c <rcl_wait_set_resize+0x268>
 801160c:	6920      	ldr	r0, [r4, #16]
 801160e:	b140      	cbz	r0, 8011622 <rcl_wait_set_resize+0xfe>
 8011610:	4641      	mov	r1, r8
 8011612:	47c8      	blx	r9
 8011614:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011618:	6126      	str	r6, [r4, #16]
 801161a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801161e:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8011622:	2500      	movs	r5, #0
 8011624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011626:	61e5      	str	r5, [r4, #28]
 8011628:	f8ca 5018 	str.w	r5, [sl, #24]
 801162c:	2b00      	cmp	r3, #0
 801162e:	f040 80c2 	bne.w	80117b6 <rcl_wait_set_resize+0x292>
 8011632:	69a0      	ldr	r0, [r4, #24]
 8011634:	b128      	cbz	r0, 8011642 <rcl_wait_set_resize+0x11e>
 8011636:	4641      	mov	r1, r8
 8011638:	47c8      	blx	r9
 801163a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801163c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011640:	61a3      	str	r3, [r4, #24]
 8011642:	f8da 0020 	ldr.w	r0, [sl, #32]
 8011646:	b130      	cbz	r0, 8011656 <rcl_wait_set_resize+0x132>
 8011648:	4641      	mov	r1, r8
 801164a:	47c8      	blx	r9
 801164c:	2300      	movs	r3, #0
 801164e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011652:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8011656:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 801165a:	2600      	movs	r6, #0
 801165c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801165e:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8011662:	6266      	str	r6, [r4, #36]	; 0x24
 8011664:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8011668:	2b00      	cmp	r3, #0
 801166a:	f000 80c9 	beq.w	8011800 <rcl_wait_set_resize+0x2dc>
 801166e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8011672:	4651      	mov	r1, sl
 8011674:	463a      	mov	r2, r7
 8011676:	6a20      	ldr	r0, [r4, #32]
 8011678:	47c8      	blx	r9
 801167a:	6220      	str	r0, [r4, #32]
 801167c:	2800      	cmp	r0, #0
 801167e:	d052      	beq.n	8011726 <rcl_wait_set_resize+0x202>
 8011680:	4652      	mov	r2, sl
 8011682:	4631      	mov	r1, r6
 8011684:	f002 fbf6 	bl	8013e74 <memset>
 8011688:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801168a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801168c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801168e:	6263      	str	r3, [r4, #36]	; 0x24
 8011690:	463a      	mov	r2, r7
 8011692:	62ae      	str	r6, [r5, #40]	; 0x28
 8011694:	4651      	mov	r1, sl
 8011696:	47c8      	blx	r9
 8011698:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801169a:	62e8      	str	r0, [r5, #44]	; 0x2c
 801169c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801169e:	2d00      	cmp	r5, #0
 80116a0:	f000 8106 	beq.w	80118b0 <rcl_wait_set_resize+0x38c>
 80116a4:	4652      	mov	r2, sl
 80116a6:	4631      	mov	r1, r6
 80116a8:	4628      	mov	r0, r5
 80116aa:	f002 fbe3 	bl	8013e74 <memset>
 80116ae:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80116b2:	2500      	movs	r5, #0
 80116b4:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 80116b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116ba:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 80116be:	62e5      	str	r5, [r4, #44]	; 0x2c
 80116c0:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f040 80b0 	bne.w	801182a <rcl_wait_set_resize+0x306>
 80116ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80116cc:	b128      	cbz	r0, 80116da <rcl_wait_set_resize+0x1b6>
 80116ce:	4631      	mov	r1, r6
 80116d0:	47b8      	blx	r7
 80116d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80116d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80116da:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80116de:	b318      	cbz	r0, 8011728 <rcl_wait_set_resize+0x204>
 80116e0:	4631      	mov	r1, r6
 80116e2:	47b8      	blx	r7
 80116e4:	2300      	movs	r3, #0
 80116e6:	4618      	mov	r0, r3
 80116e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80116ea:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 80116ee:	b003      	add	sp, #12
 80116f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f4:	6800      	ldr	r0, [r0, #0]
 80116f6:	b120      	cbz	r0, 8011702 <rcl_wait_set_resize+0x1de>
 80116f8:	4649      	mov	r1, r9
 80116fa:	47d8      	blx	fp
 80116fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011700:	6027      	str	r7, [r4, #0]
 8011702:	f8da 0008 	ldr.w	r0, [sl, #8]
 8011706:	2800      	cmp	r0, #0
 8011708:	f43f af50 	beq.w	80115ac <rcl_wait_set_resize+0x88>
 801170c:	4649      	mov	r1, r9
 801170e:	47d8      	blx	fp
 8011710:	2300      	movs	r3, #0
 8011712:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011716:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801171a:	e747      	b.n	80115ac <rcl_wait_set_resize+0x88>
 801171c:	4649      	mov	r1, r9
 801171e:	6820      	ldr	r0, [r4, #0]
 8011720:	47d8      	blx	fp
 8011722:	e9c4 7700 	strd	r7, r7, [r4]
 8011726:	200a      	movs	r0, #10
 8011728:	b003      	add	sp, #12
 801172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8011732:	4642      	mov	r2, r8
 8011734:	4649      	mov	r1, r9
 8011736:	68a0      	ldr	r0, [r4, #8]
 8011738:	4798      	blx	r3
 801173a:	60a0      	str	r0, [r4, #8]
 801173c:	2800      	cmp	r0, #0
 801173e:	d0f2      	beq.n	8011726 <rcl_wait_set_resize+0x202>
 8011740:	4639      	mov	r1, r7
 8011742:	2700      	movs	r7, #0
 8011744:	464a      	mov	r2, r9
 8011746:	f002 fb95 	bl	8013e74 <memset>
 801174a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801174e:	60e5      	str	r5, [r4, #12]
 8011750:	19ad      	adds	r5, r5, r6
 8011752:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8011756:	f8ca 7010 	str.w	r7, [sl, #16]
 801175a:	f43f af41 	beq.w	80115e0 <rcl_wait_set_resize+0xbc>
 801175e:	00ad      	lsls	r5, r5, #2
 8011760:	4642      	mov	r2, r8
 8011762:	4629      	mov	r1, r5
 8011764:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8011768:	f8da 0014 	ldr.w	r0, [sl, #20]
 801176c:	4798      	blx	r3
 801176e:	4680      	mov	r8, r0
 8011770:	f8ca 0014 	str.w	r0, [sl, #20]
 8011774:	2800      	cmp	r0, #0
 8011776:	f000 8084 	beq.w	8011882 <rcl_wait_set_resize+0x35e>
 801177a:	462a      	mov	r2, r5
 801177c:	4639      	mov	r1, r7
 801177e:	f002 fb79 	bl	8013e74 <memset>
 8011782:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011786:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801178a:	e736      	b.n	80115fa <rcl_wait_set_resize+0xd6>
 801178c:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8011790:	4642      	mov	r2, r8
 8011792:	4649      	mov	r1, r9
 8011794:	6920      	ldr	r0, [r4, #16]
 8011796:	47b8      	blx	r7
 8011798:	6120      	str	r0, [r4, #16]
 801179a:	2800      	cmp	r0, #0
 801179c:	d0c3      	beq.n	8011726 <rcl_wait_set_resize+0x202>
 801179e:	464a      	mov	r2, r9
 80117a0:	4629      	mov	r1, r5
 80117a2:	f002 fb67 	bl	8013e74 <memset>
 80117a6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80117aa:	6166      	str	r6, [r4, #20]
 80117ac:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80117b0:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80117b4:	e735      	b.n	8011622 <rcl_wait_set_resize+0xfe>
 80117b6:	009e      	lsls	r6, r3, #2
 80117b8:	4631      	mov	r1, r6
 80117ba:	4642      	mov	r2, r8
 80117bc:	69a0      	ldr	r0, [r4, #24]
 80117be:	47b8      	blx	r7
 80117c0:	61a0      	str	r0, [r4, #24]
 80117c2:	2800      	cmp	r0, #0
 80117c4:	d0af      	beq.n	8011726 <rcl_wait_set_resize+0x202>
 80117c6:	4632      	mov	r2, r6
 80117c8:	4629      	mov	r1, r5
 80117ca:	f002 fb53 	bl	8013e74 <memset>
 80117ce:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80117d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117d4:	4642      	mov	r2, r8
 80117d6:	61e3      	str	r3, [r4, #28]
 80117d8:	4631      	mov	r1, r6
 80117da:	f8da 0020 	ldr.w	r0, [sl, #32]
 80117de:	f8ca 501c 	str.w	r5, [sl, #28]
 80117e2:	47b8      	blx	r7
 80117e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80117e6:	f8ca 0020 	str.w	r0, [sl, #32]
 80117ea:	6a1f      	ldr	r7, [r3, #32]
 80117ec:	2f00      	cmp	r7, #0
 80117ee:	d058      	beq.n	80118a2 <rcl_wait_set_resize+0x37e>
 80117f0:	4632      	mov	r2, r6
 80117f2:	4629      	mov	r1, r5
 80117f4:	4638      	mov	r0, r7
 80117f6:	f002 fb3d 	bl	8013e74 <memset>
 80117fa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80117fe:	e72a      	b.n	8011656 <rcl_wait_set_resize+0x132>
 8011800:	6a20      	ldr	r0, [r4, #32]
 8011802:	b128      	cbz	r0, 8011810 <rcl_wait_set_resize+0x2ec>
 8011804:	4639      	mov	r1, r7
 8011806:	47c0      	blx	r8
 8011808:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801180a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801180e:	6223      	str	r3, [r4, #32]
 8011810:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8011814:	2800      	cmp	r0, #0
 8011816:	f43f af4c 	beq.w	80116b2 <rcl_wait_set_resize+0x18e>
 801181a:	4639      	mov	r1, r7
 801181c:	47c0      	blx	r8
 801181e:	2300      	movs	r3, #0
 8011820:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8011824:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8011828:	e743      	b.n	80116b2 <rcl_wait_set_resize+0x18e>
 801182a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801182e:	4641      	mov	r1, r8
 8011830:	4632      	mov	r2, r6
 8011832:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011834:	47c8      	blx	r9
 8011836:	62a0      	str	r0, [r4, #40]	; 0x28
 8011838:	2800      	cmp	r0, #0
 801183a:	f43f af74 	beq.w	8011726 <rcl_wait_set_resize+0x202>
 801183e:	4642      	mov	r2, r8
 8011840:	4629      	mov	r1, r5
 8011842:	f002 fb17 	bl	8013e74 <memset>
 8011846:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801184a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801184c:	4632      	mov	r2, r6
 801184e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011850:	4641      	mov	r1, r8
 8011852:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8011856:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 801185a:	47c8      	blx	r9
 801185c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801185e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8011862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011864:	b35b      	cbz	r3, 80118be <rcl_wait_set_resize+0x39a>
 8011866:	4642      	mov	r2, r8
 8011868:	4618      	mov	r0, r3
 801186a:	4629      	mov	r1, r5
 801186c:	f002 fb02 	bl	8013e74 <memset>
 8011870:	4628      	mov	r0, r5
 8011872:	b003      	add	sp, #12
 8011874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011878:	200b      	movs	r0, #11
 801187a:	4770      	bx	lr
 801187c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011880:	e752      	b.n	8011728 <rcl_wait_set_resize+0x204>
 8011882:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011884:	68a0      	ldr	r0, [r4, #8]
 8011886:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011888:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801188a:	4790      	blx	r2
 801188c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801188e:	6920      	ldr	r0, [r4, #16]
 8011890:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8011894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011896:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011898:	4790      	blx	r2
 801189a:	200a      	movs	r0, #10
 801189c:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80118a0:	e742      	b.n	8011728 <rcl_wait_set_resize+0x204>
 80118a2:	69a0      	ldr	r0, [r4, #24]
 80118a4:	4641      	mov	r1, r8
 80118a6:	47c8      	blx	r9
 80118a8:	200a      	movs	r0, #10
 80118aa:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80118ae:	e73b      	b.n	8011728 <rcl_wait_set_resize+0x204>
 80118b0:	6a20      	ldr	r0, [r4, #32]
 80118b2:	4639      	mov	r1, r7
 80118b4:	47c0      	blx	r8
 80118b6:	200a      	movs	r0, #10
 80118b8:	e9c4 5508 	strd	r5, r5, [r4, #32]
 80118bc:	e734      	b.n	8011728 <rcl_wait_set_resize+0x204>
 80118be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80118c0:	4631      	mov	r1, r6
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	47b8      	blx	r7
 80118c6:	9b00      	ldr	r3, [sp, #0]
 80118c8:	200a      	movs	r0, #10
 80118ca:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80118ce:	e72b      	b.n	8011728 <rcl_wait_set_resize+0x204>

080118d0 <rcl_wait_set_init>:
 80118d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118d4:	b084      	sub	sp, #16
 80118d6:	4604      	mov	r4, r0
 80118d8:	a810      	add	r0, sp, #64	; 0x40
 80118da:	460f      	mov	r7, r1
 80118dc:	4690      	mov	r8, r2
 80118de:	4699      	mov	r9, r3
 80118e0:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80118e4:	f7f8 fb28 	bl	8009f38 <rcutils_allocator_is_valid>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d06b      	beq.n	80119c4 <rcl_wait_set_init+0xf4>
 80118ec:	2c00      	cmp	r4, #0
 80118ee:	d069      	beq.n	80119c4 <rcl_wait_set_init+0xf4>
 80118f0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80118f2:	b125      	cbz	r5, 80118fe <rcl_wait_set_init+0x2e>
 80118f4:	2564      	movs	r5, #100	; 0x64
 80118f6:	4628      	mov	r0, r5
 80118f8:	b004      	add	sp, #16
 80118fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118fe:	f1ba 0f00 	cmp.w	sl, #0
 8011902:	d05f      	beq.n	80119c4 <rcl_wait_set_init+0xf4>
 8011904:	4650      	mov	r0, sl
 8011906:	f7fe fb6b 	bl	800ffe0 <rcl_context_is_valid>
 801190a:	2800      	cmp	r0, #0
 801190c:	d067      	beq.n	80119de <rcl_wait_set_init+0x10e>
 801190e:	205c      	movs	r0, #92	; 0x5c
 8011910:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011912:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011914:	4798      	blx	r3
 8011916:	6320      	str	r0, [r4, #48]	; 0x30
 8011918:	2800      	cmp	r0, #0
 801191a:	d062      	beq.n	80119e2 <rcl_wait_set_init+0x112>
 801191c:	225c      	movs	r2, #92	; 0x5c
 801191e:	4629      	mov	r1, r5
 8011920:	f002 faa8 	bl	8013e74 <memset>
 8011924:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8011926:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 801192a:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 801192e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011932:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8011936:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801193a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801193e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8011942:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8011946:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 801194a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801194e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8011952:	1899      	adds	r1, r3, r2
 8011954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011956:	f8de 3000 	ldr.w	r3, [lr]
 801195a:	f8da 0000 	ldr.w	r0, [sl]
 801195e:	4411      	add	r1, r2
 8011960:	4441      	add	r1, r8
 8011962:	f8cc 3000 	str.w	r3, [ip]
 8011966:	3028      	adds	r0, #40	; 0x28
 8011968:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801196c:	f001 f9d6 	bl	8012d1c <rmw_create_wait_set>
 8011970:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011972:	63f0      	str	r0, [r6, #60]	; 0x3c
 8011974:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011976:	b350      	cbz	r0, 80119ce <rcl_wait_set_init+0xfe>
 8011978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801197a:	4642      	mov	r2, r8
 801197c:	9302      	str	r3, [sp, #8]
 801197e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011980:	4639      	mov	r1, r7
 8011982:	9301      	str	r3, [sp, #4]
 8011984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011986:	4620      	mov	r0, r4
 8011988:	9300      	str	r3, [sp, #0]
 801198a:	464b      	mov	r3, r9
 801198c:	f7ff fdca 	bl	8011524 <rcl_wait_set_resize>
 8011990:	4605      	mov	r5, r0
 8011992:	2800      	cmp	r0, #0
 8011994:	d0af      	beq.n	80118f6 <rcl_wait_set_init+0x26>
 8011996:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011998:	bb2b      	cbnz	r3, 80119e6 <rcl_wait_set_init+0x116>
 801199a:	2600      	movs	r6, #0
 801199c:	4620      	mov	r0, r4
 801199e:	4633      	mov	r3, r6
 80119a0:	4632      	mov	r2, r6
 80119a2:	4631      	mov	r1, r6
 80119a4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80119a8:	9600      	str	r6, [sp, #0]
 80119aa:	f7ff fdbb 	bl	8011524 <rcl_wait_set_resize>
 80119ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d0a0      	beq.n	80118f6 <rcl_wait_set_init+0x26>
 80119b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80119b6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80119b8:	4798      	blx	r3
 80119ba:	4628      	mov	r0, r5
 80119bc:	6326      	str	r6, [r4, #48]	; 0x30
 80119be:	b004      	add	sp, #16
 80119c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c4:	250b      	movs	r5, #11
 80119c6:	4628      	mov	r0, r5
 80119c8:	b004      	add	sp, #16
 80119ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ce:	2501      	movs	r5, #1
 80119d0:	f001 f9ae 	bl	8012d30 <rmw_destroy_wait_set>
 80119d4:	2800      	cmp	r0, #0
 80119d6:	bf18      	it	ne
 80119d8:	f44f 7561 	movne.w	r5, #900	; 0x384
 80119dc:	e7dd      	b.n	801199a <rcl_wait_set_init+0xca>
 80119de:	2565      	movs	r5, #101	; 0x65
 80119e0:	e789      	b.n	80118f6 <rcl_wait_set_init+0x26>
 80119e2:	250a      	movs	r5, #10
 80119e4:	e787      	b.n	80118f6 <rcl_wait_set_init+0x26>
 80119e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80119e8:	e7f2      	b.n	80119d0 <rcl_wait_set_init+0x100>
 80119ea:	bf00      	nop

080119ec <rcl_wait_set_add_guard_condition>:
 80119ec:	b320      	cbz	r0, 8011a38 <rcl_wait_set_add_guard_condition+0x4c>
 80119ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80119f0:	b570      	push	{r4, r5, r6, lr}
 80119f2:	4604      	mov	r4, r0
 80119f4:	b1d3      	cbz	r3, 8011a2c <rcl_wait_set_add_guard_condition+0x40>
 80119f6:	b319      	cbz	r1, 8011a40 <rcl_wait_set_add_guard_condition+0x54>
 80119f8:	68dd      	ldr	r5, [r3, #12]
 80119fa:	68e0      	ldr	r0, [r4, #12]
 80119fc:	4285      	cmp	r5, r0
 80119fe:	d218      	bcs.n	8011a32 <rcl_wait_set_add_guard_condition+0x46>
 8011a00:	68a0      	ldr	r0, [r4, #8]
 8011a02:	1c6e      	adds	r6, r5, #1
 8011a04:	60de      	str	r6, [r3, #12]
 8011a06:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011a0a:	b102      	cbz	r2, 8011a0e <rcl_wait_set_add_guard_condition+0x22>
 8011a0c:	6015      	str	r5, [r2, #0]
 8011a0e:	4608      	mov	r0, r1
 8011a10:	f002 f952 	bl	8013cb8 <rcl_guard_condition_get_rmw_handle>
 8011a14:	b190      	cbz	r0, 8011a3c <rcl_wait_set_add_guard_condition+0x50>
 8011a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011a18:	6842      	ldr	r2, [r0, #4]
 8011a1a:	695b      	ldr	r3, [r3, #20]
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011a24:	6913      	ldr	r3, [r2, #16]
 8011a26:	3301      	adds	r3, #1
 8011a28:	6113      	str	r3, [r2, #16]
 8011a2a:	bd70      	pop	{r4, r5, r6, pc}
 8011a2c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	f240 3086 	movw	r0, #902	; 0x386
 8011a36:	bd70      	pop	{r4, r5, r6, pc}
 8011a38:	200b      	movs	r0, #11
 8011a3a:	4770      	bx	lr
 8011a3c:	2001      	movs	r0, #1
 8011a3e:	bd70      	pop	{r4, r5, r6, pc}
 8011a40:	200b      	movs	r0, #11
 8011a42:	bd70      	pop	{r4, r5, r6, pc}

08011a44 <rcl_wait_set_add_timer>:
 8011a44:	b340      	cbz	r0, 8011a98 <rcl_wait_set_add_timer+0x54>
 8011a46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011a48:	b570      	push	{r4, r5, r6, lr}
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	b1f3      	cbz	r3, 8011a8c <rcl_wait_set_add_timer+0x48>
 8011a4e:	b329      	cbz	r1, 8011a9c <rcl_wait_set_add_timer+0x58>
 8011a50:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011a52:	6965      	ldr	r5, [r4, #20]
 8011a54:	42a8      	cmp	r0, r5
 8011a56:	d21c      	bcs.n	8011a92 <rcl_wait_set_add_timer+0x4e>
 8011a58:	6925      	ldr	r5, [r4, #16]
 8011a5a:	1c46      	adds	r6, r0, #1
 8011a5c:	641e      	str	r6, [r3, #64]	; 0x40
 8011a5e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8011a62:	b102      	cbz	r2, 8011a66 <rcl_wait_set_add_timer+0x22>
 8011a64:	6010      	str	r0, [r2, #0]
 8011a66:	4608      	mov	r0, r1
 8011a68:	f7ff faa4 	bl	8010fb4 <rcl_timer_get_guard_condition>
 8011a6c:	b168      	cbz	r0, 8011a8a <rcl_wait_set_add_timer+0x46>
 8011a6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011a70:	68e3      	ldr	r3, [r4, #12]
 8011a72:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8011a74:	3b01      	subs	r3, #1
 8011a76:	441d      	add	r5, r3
 8011a78:	f002 f91e 	bl	8013cb8 <rcl_guard_condition_get_rmw_handle>
 8011a7c:	b180      	cbz	r0, 8011aa0 <rcl_wait_set_add_timer+0x5c>
 8011a7e:	6842      	ldr	r2, [r0, #4]
 8011a80:	2000      	movs	r0, #0
 8011a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011a84:	695b      	ldr	r3, [r3, #20]
 8011a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011a8a:	bd70      	pop	{r4, r5, r6, pc}
 8011a8c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011a90:	bd70      	pop	{r4, r5, r6, pc}
 8011a92:	f240 3086 	movw	r0, #902	; 0x386
 8011a96:	bd70      	pop	{r4, r5, r6, pc}
 8011a98:	200b      	movs	r0, #11
 8011a9a:	4770      	bx	lr
 8011a9c:	200b      	movs	r0, #11
 8011a9e:	bd70      	pop	{r4, r5, r6, pc}
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}

08011aa4 <rcl_wait_set_add_client>:
 8011aa4:	b320      	cbz	r0, 8011af0 <rcl_wait_set_add_client+0x4c>
 8011aa6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011aa8:	b570      	push	{r4, r5, r6, lr}
 8011aaa:	4604      	mov	r4, r0
 8011aac:	b1d3      	cbz	r3, 8011ae4 <rcl_wait_set_add_client+0x40>
 8011aae:	b319      	cbz	r1, 8011af8 <rcl_wait_set_add_client+0x54>
 8011ab0:	699d      	ldr	r5, [r3, #24]
 8011ab2:	69e0      	ldr	r0, [r4, #28]
 8011ab4:	4285      	cmp	r5, r0
 8011ab6:	d218      	bcs.n	8011aea <rcl_wait_set_add_client+0x46>
 8011ab8:	69a0      	ldr	r0, [r4, #24]
 8011aba:	1c6e      	adds	r6, r5, #1
 8011abc:	619e      	str	r6, [r3, #24]
 8011abe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011ac2:	b102      	cbz	r2, 8011ac6 <rcl_wait_set_add_client+0x22>
 8011ac4:	6015      	str	r5, [r2, #0]
 8011ac6:	4608      	mov	r0, r1
 8011ac8:	f7fe fa24 	bl	800ff14 <rcl_client_get_rmw_handle>
 8011acc:	b190      	cbz	r0, 8011af4 <rcl_wait_set_add_client+0x50>
 8011ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ad0:	6842      	ldr	r2, [r0, #4]
 8011ad2:	6a1b      	ldr	r3, [r3, #32]
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ada:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011adc:	69d3      	ldr	r3, [r2, #28]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	61d3      	str	r3, [r2, #28]
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
 8011aea:	f240 3086 	movw	r0, #902	; 0x386
 8011aee:	bd70      	pop	{r4, r5, r6, pc}
 8011af0:	200b      	movs	r0, #11
 8011af2:	4770      	bx	lr
 8011af4:	2001      	movs	r0, #1
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	200b      	movs	r0, #11
 8011afa:	bd70      	pop	{r4, r5, r6, pc}

08011afc <rcl_wait_set_add_service>:
 8011afc:	b320      	cbz	r0, 8011b48 <rcl_wait_set_add_service+0x4c>
 8011afe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	4604      	mov	r4, r0
 8011b04:	b1d3      	cbz	r3, 8011b3c <rcl_wait_set_add_service+0x40>
 8011b06:	b319      	cbz	r1, 8011b50 <rcl_wait_set_add_service+0x54>
 8011b08:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011b0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011b0c:	4285      	cmp	r5, r0
 8011b0e:	d218      	bcs.n	8011b42 <rcl_wait_set_add_service+0x46>
 8011b10:	6a20      	ldr	r0, [r4, #32]
 8011b12:	1c6e      	adds	r6, r5, #1
 8011b14:	625e      	str	r6, [r3, #36]	; 0x24
 8011b16:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8011b1a:	b102      	cbz	r2, 8011b1e <rcl_wait_set_add_service+0x22>
 8011b1c:	6015      	str	r5, [r2, #0]
 8011b1e:	4608      	mov	r0, r1
 8011b20:	f7ff f84e 	bl	8010bc0 <rcl_service_get_rmw_handle>
 8011b24:	b190      	cbz	r0, 8011b4c <rcl_wait_set_add_service+0x50>
 8011b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011b28:	6842      	ldr	r2, [r0, #4]
 8011b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2c:	2000      	movs	r0, #0
 8011b2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011b32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011b34:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011b36:	3301      	adds	r3, #1
 8011b38:	6293      	str	r3, [r2, #40]	; 0x28
 8011b3a:	bd70      	pop	{r4, r5, r6, pc}
 8011b3c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011b40:	bd70      	pop	{r4, r5, r6, pc}
 8011b42:	f240 3086 	movw	r0, #902	; 0x386
 8011b46:	bd70      	pop	{r4, r5, r6, pc}
 8011b48:	200b      	movs	r0, #11
 8011b4a:	4770      	bx	lr
 8011b4c:	2001      	movs	r0, #1
 8011b4e:	bd70      	pop	{r4, r5, r6, pc}
 8011b50:	200b      	movs	r0, #11
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	0000      	movs	r0, r0
	...

08011b58 <rcl_wait>:
 8011b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	b08f      	sub	sp, #60	; 0x3c
 8011b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011b62:	2800      	cmp	r0, #0
 8011b64:	f000 8152 	beq.w	8011e0c <rcl_wait+0x2b4>
 8011b68:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	2d00      	cmp	r5, #0
 8011b6e:	f000 80c0 	beq.w	8011cf2 <rcl_wait+0x19a>
 8011b72:	6843      	ldr	r3, [r0, #4]
 8011b74:	b973      	cbnz	r3, 8011b94 <rcl_wait+0x3c>
 8011b76:	68e3      	ldr	r3, [r4, #12]
 8011b78:	b963      	cbnz	r3, 8011b94 <rcl_wait+0x3c>
 8011b7a:	6963      	ldr	r3, [r4, #20]
 8011b7c:	b953      	cbnz	r3, 8011b94 <rcl_wait+0x3c>
 8011b7e:	69e3      	ldr	r3, [r4, #28]
 8011b80:	b943      	cbnz	r3, 8011b94 <rcl_wait+0x3c>
 8011b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b84:	b933      	cbnz	r3, 8011b94 <rcl_wait+0x3c>
 8011b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b88:	b923      	cbnz	r3, 8011b94 <rcl_wait+0x3c>
 8011b8a:	f240 3085 	movw	r0, #901	; 0x385
 8011b8e:	b00f      	add	sp, #60	; 0x3c
 8011b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b98:	2a01      	cmp	r2, #1
 8011b9a:	f173 0300 	sbcs.w	r3, r3, #0
 8011b9e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8011ba0:	db56      	blt.n	8011c50 <rcl_wait+0xf8>
 8011ba2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8011ba6:	2900      	cmp	r1, #0
 8011ba8:	f000 814f 	beq.w	8011e4a <rcl_wait+0x2f2>
 8011bac:	2300      	movs	r3, #0
 8011bae:	f04f 0800 	mov.w	r8, #0
 8011bb2:	f04f 0900 	mov.w	r9, #0
 8011bb6:	469b      	mov	fp, r3
 8011bb8:	9307      	str	r3, [sp, #28]
 8011bba:	e00d      	b.n	8011bd8 <rcl_wait+0x80>
 8011bbc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011bbe:	6922      	ldr	r2, [r4, #16]
 8011bc0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8011bc2:	f842 000a 	str.w	r0, [r2, sl]
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f118 0801 	adds.w	r8, r8, #1
 8011bcc:	f149 0900 	adc.w	r9, r9, #0
 8011bd0:	4599      	cmp	r9, r3
 8011bd2:	bf08      	it	eq
 8011bd4:	4588      	cmpeq	r8, r1
 8011bd6:	d243      	bcs.n	8011c60 <rcl_wait+0x108>
 8011bd8:	6922      	ldr	r2, [r4, #16]
 8011bda:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8011bde:	f852 000a 	ldr.w	r0, [r2, sl]
 8011be2:	2800      	cmp	r0, #0
 8011be4:	d0ef      	beq.n	8011bc6 <rcl_wait+0x6e>
 8011be6:	68e2      	ldr	r2, [r4, #12]
 8011be8:	6969      	ldr	r1, [r5, #20]
 8011bea:	4442      	add	r2, r8
 8011bec:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8011bf0:	b13b      	cbz	r3, 8011c02 <rcl_wait+0xaa>
 8011bf2:	692a      	ldr	r2, [r5, #16]
 8011bf4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011bf8:	6921      	ldr	r1, [r4, #16]
 8011bfa:	3201      	adds	r2, #1
 8011bfc:	f851 000a 	ldr.w	r0, [r1, sl]
 8011c00:	612a      	str	r2, [r5, #16]
 8011c02:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8011c06:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8011c0a:	f7ff f9c1 	bl	8010f90 <rcl_timer_is_canceled>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d1bd      	bne.n	8011b8e <rcl_wait+0x36>
 8011c12:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8011c16:	2a00      	cmp	r2, #0
 8011c18:	d1d0      	bne.n	8011bbc <rcl_wait+0x64>
 8011c1a:	6922      	ldr	r2, [r4, #16]
 8011c1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011c20:	f852 000a 	ldr.w	r0, [r2, sl]
 8011c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c28:	a90a      	add	r1, sp, #40	; 0x28
 8011c2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011c2e:	f7ff f98b 	bl	8010f48 <rcl_timer_get_time_until_next_call>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d1ab      	bne.n	8011b8e <rcl_wait+0x36>
 8011c36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011c3a:	42b2      	cmp	r2, r6
 8011c3c:	eb73 0107 	sbcs.w	r1, r3, r7
 8011c40:	da03      	bge.n	8011c4a <rcl_wait+0xf2>
 8011c42:	461f      	mov	r7, r3
 8011c44:	2301      	movs	r3, #1
 8011c46:	4616      	mov	r6, r2
 8011c48:	9307      	str	r3, [sp, #28]
 8011c4a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011c4c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8011c4e:	e7ba      	b.n	8011bc6 <rcl_wait+0x6e>
 8011c50:	2900      	cmp	r1, #0
 8011c52:	f000 80e4 	beq.w	8011e1e <rcl_wait+0x2c6>
 8011c56:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011c5a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011c5e:	e7a5      	b.n	8011bac <rcl_wait+0x54>
 8011c60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c64:	4313      	orrs	r3, r2
 8011c66:	d149      	bne.n	8011cfc <rcl_wait+0x1a4>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011c70:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011c74:	ab0a      	add	r3, sp, #40	; 0x28
 8011c76:	9302      	str	r3, [sp, #8]
 8011c78:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8011c7a:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8011c7e:	e9cd 3200 	strd	r3, r2, [sp]
 8011c82:	f105 0110 	add.w	r1, r5, #16
 8011c86:	f105 031c 	add.w	r3, r5, #28
 8011c8a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8011c8e:	1d28      	adds	r0, r5, #4
 8011c90:	f000 fec4 	bl	8012a1c <rmw_wait>
 8011c94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c96:	4607      	mov	r7, r0
 8011c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011c9a:	b32a      	cbz	r2, 8011ce8 <rcl_wait+0x190>
 8011c9c:	f04f 0800 	mov.w	r8, #0
 8011ca0:	4646      	mov	r6, r8
 8011ca2:	e005      	b.n	8011cb0 <rcl_wait+0x158>
 8011ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ca8:	f108 0801 	add.w	r8, r8, #1
 8011cac:	4542      	cmp	r2, r8
 8011cae:	d91b      	bls.n	8011ce8 <rcl_wait+0x190>
 8011cb0:	6922      	ldr	r2, [r4, #16]
 8011cb2:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8011cb6:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8011cba:	2800      	cmp	r0, #0
 8011cbc:	d0f3      	beq.n	8011ca6 <rcl_wait+0x14e>
 8011cbe:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8011cc2:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8011cc6:	f7ff f907 	bl	8010ed8 <rcl_timer_is_ready>
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	f47f af5f 	bne.w	8011b8e <rcl_wait+0x36>
 8011cd0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8011cd4:	2a00      	cmp	r2, #0
 8011cd6:	d1e5      	bne.n	8011ca4 <rcl_wait+0x14c>
 8011cd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011cda:	6921      	ldr	r1, [r4, #16]
 8011cdc:	f108 0801 	add.w	r8, r8, #1
 8011ce0:	514a      	str	r2, [r1, r5]
 8011ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ce4:	4542      	cmp	r2, r8
 8011ce6:	d8e3      	bhi.n	8011cb0 <rcl_wait+0x158>
 8011ce8:	f037 0002 	bics.w	r0, r7, #2
 8011cec:	d02c      	beq.n	8011d48 <rcl_wait+0x1f0>
 8011cee:	2001      	movs	r0, #1
 8011cf0:	e74d      	b.n	8011b8e <rcl_wait+0x36>
 8011cf2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011cf6:	b00f      	add	sp, #60	; 0x3c
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011d00:	2a01      	cmp	r2, #1
 8011d02:	f173 0300 	sbcs.w	r3, r3, #0
 8011d06:	f2c0 8085 	blt.w	8011e14 <rcl_wait+0x2bc>
 8011d0a:	2e00      	cmp	r6, #0
 8011d0c:	f177 0300 	sbcs.w	r3, r7, #0
 8011d10:	bfb8      	it	lt
 8011d12:	2600      	movlt	r6, #0
 8011d14:	a34e      	add	r3, pc, #312	; (adr r3, 8011e50 <rcl_wait+0x2f8>)
 8011d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d1a:	bfb8      	it	lt
 8011d1c:	2700      	movlt	r7, #0
 8011d1e:	4630      	mov	r0, r6
 8011d20:	4639      	mov	r1, r7
 8011d22:	f7ee fd1b 	bl	800075c <__aeabi_ldivmod>
 8011d26:	a34a      	add	r3, pc, #296	; (adr r3, 8011e50 <rcl_wait+0x2f8>)
 8011d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2c:	4680      	mov	r8, r0
 8011d2e:	4689      	mov	r9, r1
 8011d30:	4630      	mov	r0, r6
 8011d32:	4639      	mov	r1, r7
 8011d34:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8011d38:	f7ee fd10 	bl	800075c <__aeabi_ldivmod>
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	4610      	mov	r0, r2
 8011d40:	ab0a      	add	r3, sp, #40	; 0x28
 8011d42:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011d46:	e796      	b.n	8011c76 <rcl_wait+0x11e>
 8011d48:	6866      	ldr	r6, [r4, #4]
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	b91e      	cbnz	r6, 8011d56 <rcl_wait+0x1fe>
 8011d4e:	e00d      	b.n	8011d6c <rcl_wait+0x214>
 8011d50:	3201      	adds	r2, #1
 8011d52:	42b2      	cmp	r2, r6
 8011d54:	d00a      	beq.n	8011d6c <rcl_wait+0x214>
 8011d56:	6899      	ldr	r1, [r3, #8]
 8011d58:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011d5c:	2900      	cmp	r1, #0
 8011d5e:	d1f7      	bne.n	8011d50 <rcl_wait+0x1f8>
 8011d60:	6825      	ldr	r5, [r4, #0]
 8011d62:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011d66:	3201      	adds	r2, #1
 8011d68:	42b2      	cmp	r2, r6
 8011d6a:	d1f4      	bne.n	8011d56 <rcl_wait+0x1fe>
 8011d6c:	68e6      	ldr	r6, [r4, #12]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	b91e      	cbnz	r6, 8011d7a <rcl_wait+0x222>
 8011d72:	e00d      	b.n	8011d90 <rcl_wait+0x238>
 8011d74:	3201      	adds	r2, #1
 8011d76:	42b2      	cmp	r2, r6
 8011d78:	d00a      	beq.n	8011d90 <rcl_wait+0x238>
 8011d7a:	6959      	ldr	r1, [r3, #20]
 8011d7c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011d80:	2900      	cmp	r1, #0
 8011d82:	d1f7      	bne.n	8011d74 <rcl_wait+0x21c>
 8011d84:	68a5      	ldr	r5, [r4, #8]
 8011d86:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011d8a:	3201      	adds	r2, #1
 8011d8c:	42b2      	cmp	r2, r6
 8011d8e:	d1f4      	bne.n	8011d7a <rcl_wait+0x222>
 8011d90:	69e6      	ldr	r6, [r4, #28]
 8011d92:	2200      	movs	r2, #0
 8011d94:	b91e      	cbnz	r6, 8011d9e <rcl_wait+0x246>
 8011d96:	e00d      	b.n	8011db4 <rcl_wait+0x25c>
 8011d98:	3201      	adds	r2, #1
 8011d9a:	42b2      	cmp	r2, r6
 8011d9c:	d00a      	beq.n	8011db4 <rcl_wait+0x25c>
 8011d9e:	6a19      	ldr	r1, [r3, #32]
 8011da0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011da4:	2900      	cmp	r1, #0
 8011da6:	d1f7      	bne.n	8011d98 <rcl_wait+0x240>
 8011da8:	69a5      	ldr	r5, [r4, #24]
 8011daa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011dae:	3201      	adds	r2, #1
 8011db0:	42b2      	cmp	r2, r6
 8011db2:	d1f4      	bne.n	8011d9e <rcl_wait+0x246>
 8011db4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011db6:	2200      	movs	r2, #0
 8011db8:	b91e      	cbnz	r6, 8011dc2 <rcl_wait+0x26a>
 8011dba:	e00d      	b.n	8011dd8 <rcl_wait+0x280>
 8011dbc:	3201      	adds	r2, #1
 8011dbe:	4296      	cmp	r6, r2
 8011dc0:	d00a      	beq.n	8011dd8 <rcl_wait+0x280>
 8011dc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011dc4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011dc8:	2900      	cmp	r1, #0
 8011dca:	d1f7      	bne.n	8011dbc <rcl_wait+0x264>
 8011dcc:	6a25      	ldr	r5, [r4, #32]
 8011dce:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011dd2:	3201      	adds	r2, #1
 8011dd4:	4296      	cmp	r6, r2
 8011dd6:	d1f4      	bne.n	8011dc2 <rcl_wait+0x26a>
 8011dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dda:	2200      	movs	r2, #0
 8011ddc:	b91e      	cbnz	r6, 8011de6 <rcl_wait+0x28e>
 8011dde:	e00d      	b.n	8011dfc <rcl_wait+0x2a4>
 8011de0:	3201      	adds	r2, #1
 8011de2:	42b2      	cmp	r2, r6
 8011de4:	d00a      	beq.n	8011dfc <rcl_wait+0x2a4>
 8011de6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011de8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011dec:	2900      	cmp	r1, #0
 8011dee:	d1f7      	bne.n	8011de0 <rcl_wait+0x288>
 8011df0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011df2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8011df6:	3201      	adds	r2, #1
 8011df8:	42b2      	cmp	r2, r6
 8011dfa:	d1f4      	bne.n	8011de6 <rcl_wait+0x28e>
 8011dfc:	2f02      	cmp	r7, #2
 8011dfe:	f47f aec6 	bne.w	8011b8e <rcl_wait+0x36>
 8011e02:	9b07      	ldr	r3, [sp, #28]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	bf08      	it	eq
 8011e08:	2002      	moveq	r0, #2
 8011e0a:	e6c0      	b.n	8011b8e <rcl_wait+0x36>
 8011e0c:	200b      	movs	r0, #11
 8011e0e:	b00f      	add	sp, #60	; 0x3c
 8011e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e14:	9b07      	ldr	r3, [sp, #28]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f47f af77 	bne.w	8011d0a <rcl_wait+0x1b2>
 8011e1c:	e72b      	b.n	8011c76 <rcl_wait+0x11e>
 8011e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e22:	4313      	orrs	r3, r2
 8011e24:	bf08      	it	eq
 8011e26:	9107      	streq	r1, [sp, #28]
 8011e28:	f43f af1e 	beq.w	8011c68 <rcl_wait+0x110>
 8011e2c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8011e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e34:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011e38:	2a01      	cmp	r2, #1
 8011e3a:	f173 0300 	sbcs.w	r3, r3, #0
 8011e3e:	f04f 0300 	mov.w	r3, #0
 8011e42:	9307      	str	r3, [sp, #28]
 8011e44:	f6bf af61 	bge.w	8011d0a <rcl_wait+0x1b2>
 8011e48:	e715      	b.n	8011c76 <rcl_wait+0x11e>
 8011e4a:	4632      	mov	r2, r6
 8011e4c:	463b      	mov	r3, r7
 8011e4e:	e7f3      	b.n	8011e38 <rcl_wait+0x2e0>
 8011e50:	3b9aca00 	.word	0x3b9aca00
 8011e54:	00000000 	.word	0x00000000

08011e58 <__atomic_load_8>:
 8011e58:	f04f 0101 	mov.w	r1, #1
 8011e5c:	ea80 4210 	eor.w	r2, r0, r0, lsr #16
 8011e60:	f082 023d 	eor.w	r2, r2, #61	; 0x3d
 8011e64:	4b13      	ldr	r3, [pc, #76]	; (8011eb4 <__atomic_load_8+0x5c>)
 8011e66:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8011e6a:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 8011e6e:	fb03 f302 	mul.w	r3, r3, r2
 8011e72:	4a11      	ldr	r2, [pc, #68]	; (8011eb8 <__atomic_load_8+0x60>)
 8011e74:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8011e78:	b430      	push	{r4, r5}
 8011e7a:	fba2 4203 	umull	r4, r2, r2, r3
 8011e7e:	0912      	lsrs	r2, r2, #4
 8011e80:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8011e84:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
 8011e88:	4c0c      	ldr	r4, [pc, #48]	; (8011ebc <__atomic_load_8+0x64>)
 8011e8a:	1a9b      	subs	r3, r3, r2
 8011e8c:	18e5      	adds	r5, r4, r3
 8011e8e:	e8d5 2f4f 	ldrexb	r2, [r5]
 8011e92:	e8c5 1f4c 	strexb	ip, r1, [r5]
 8011e96:	f1bc 0f00 	cmp.w	ip, #0
 8011e9a:	d1f8      	bne.n	8011e8e <__atomic_load_8+0x36>
 8011e9c:	b2d2      	uxtb	r2, r2
 8011e9e:	f3bf 8f5b 	dmb	ish
 8011ea2:	2a00      	cmp	r2, #0
 8011ea4:	d1f3      	bne.n	8011e8e <__atomic_load_8+0x36>
 8011ea6:	c803      	ldmia	r0, {r0, r1}
 8011ea8:	f3bf 8f5b 	dmb	ish
 8011eac:	54e2      	strb	r2, [r4, r3]
 8011eae:	bc30      	pop	{r4, r5}
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	27d4eb2d 	.word	0x27d4eb2d
 8011eb8:	b21642c9 	.word	0xb21642c9
 8011ebc:	20006580 	.word	0x20006580

08011ec0 <__atomic_store_8>:
 8011ec0:	b4f0      	push	{r4, r5, r6, r7}
 8011ec2:	f04f 0501 	mov.w	r5, #1
 8011ec6:	ea80 4410 	eor.w	r4, r0, r0, lsr #16
 8011eca:	f084 043d 	eor.w	r4, r4, #61	; 0x3d
 8011ece:	4913      	ldr	r1, [pc, #76]	; (8011f1c <__atomic_store_8+0x5c>)
 8011ed0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8011ed4:	ea84 1414 	eor.w	r4, r4, r4, lsr #4
 8011ed8:	fb01 f104 	mul.w	r1, r1, r4
 8011edc:	4c10      	ldr	r4, [pc, #64]	; (8011f20 <__atomic_store_8+0x60>)
 8011ede:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011ee2:	fba4 6401 	umull	r6, r4, r4, r1
 8011ee6:	0924      	lsrs	r4, r4, #4
 8011ee8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8011eec:	ebc4 04c6 	rsb	r4, r4, r6, lsl #3
 8011ef0:	4e0c      	ldr	r6, [pc, #48]	; (8011f24 <__atomic_store_8+0x64>)
 8011ef2:	1b09      	subs	r1, r1, r4
 8011ef4:	1877      	adds	r7, r6, r1
 8011ef6:	e8d7 4f4f 	ldrexb	r4, [r7]
 8011efa:	e8c7 5f4c 	strexb	ip, r5, [r7]
 8011efe:	f1bc 0f00 	cmp.w	ip, #0
 8011f02:	d1f8      	bne.n	8011ef6 <__atomic_store_8+0x36>
 8011f04:	b2e4      	uxtb	r4, r4
 8011f06:	f3bf 8f5b 	dmb	ish
 8011f0a:	2c00      	cmp	r4, #0
 8011f0c:	d1f3      	bne.n	8011ef6 <__atomic_store_8+0x36>
 8011f0e:	e9c0 2300 	strd	r2, r3, [r0]
 8011f12:	f3bf 8f5b 	dmb	ish
 8011f16:	5474      	strb	r4, [r6, r1]
 8011f18:	bcf0      	pop	{r4, r5, r6, r7}
 8011f1a:	4770      	bx	lr
 8011f1c:	27d4eb2d 	.word	0x27d4eb2d
 8011f20:	b21642c9 	.word	0xb21642c9
 8011f24:	20006580 	.word	0x20006580

08011f28 <__atomic_exchange_8>:
 8011f28:	b4f0      	push	{r4, r5, r6, r7}
 8011f2a:	4605      	mov	r5, r0
 8011f2c:	f04f 0001 	mov.w	r0, #1
 8011f30:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8011f34:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011f38:	4c14      	ldr	r4, [pc, #80]	; (8011f8c <__atomic_exchange_8+0x64>)
 8011f3a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011f3e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011f42:	fb04 f401 	mul.w	r4, r4, r1
 8011f46:	4912      	ldr	r1, [pc, #72]	; (8011f90 <__atomic_exchange_8+0x68>)
 8011f48:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8011f4c:	fba1 6104 	umull	r6, r1, r1, r4
 8011f50:	0909      	lsrs	r1, r1, #4
 8011f52:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8011f56:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8011f5a:	4f0e      	ldr	r7, [pc, #56]	; (8011f94 <__atomic_exchange_8+0x6c>)
 8011f5c:	1a64      	subs	r4, r4, r1
 8011f5e:	1939      	adds	r1, r7, r4
 8011f60:	e8d1 6f4f 	ldrexb	r6, [r1]
 8011f64:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8011f68:	f1bc 0f00 	cmp.w	ip, #0
 8011f6c:	d1f8      	bne.n	8011f60 <__atomic_exchange_8+0x38>
 8011f6e:	b2f6      	uxtb	r6, r6
 8011f70:	f3bf 8f5b 	dmb	ish
 8011f74:	2e00      	cmp	r6, #0
 8011f76:	d1f3      	bne.n	8011f60 <__atomic_exchange_8+0x38>
 8011f78:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f7c:	e9c5 2300 	strd	r2, r3, [r5]
 8011f80:	f3bf 8f5b 	dmb	ish
 8011f84:	553e      	strb	r6, [r7, r4]
 8011f86:	bcf0      	pop	{r4, r5, r6, r7}
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	27d4eb2d 	.word	0x27d4eb2d
 8011f90:	b21642c9 	.word	0xb21642c9
 8011f94:	20006580 	.word	0x20006580

08011f98 <__atomic_fetch_add_8>:
 8011f98:	b4f0      	push	{r4, r5, r6, r7}
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	f04f 0001 	mov.w	r0, #1
 8011fa0:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 8011fa4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8011fa8:	4c15      	ldr	r4, [pc, #84]	; (8012000 <__atomic_fetch_add_8+0x68>)
 8011faa:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011fae:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011fb2:	fb04 f401 	mul.w	r4, r4, r1
 8011fb6:	4913      	ldr	r1, [pc, #76]	; (8012004 <__atomic_fetch_add_8+0x6c>)
 8011fb8:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8011fbc:	fba1 6104 	umull	r6, r1, r1, r4
 8011fc0:	0909      	lsrs	r1, r1, #4
 8011fc2:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 8011fc6:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8011fca:	4f0f      	ldr	r7, [pc, #60]	; (8012008 <__atomic_fetch_add_8+0x70>)
 8011fcc:	1a64      	subs	r4, r4, r1
 8011fce:	1939      	adds	r1, r7, r4
 8011fd0:	e8d1 6f4f 	ldrexb	r6, [r1]
 8011fd4:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8011fd8:	f1bc 0f00 	cmp.w	ip, #0
 8011fdc:	d1f8      	bne.n	8011fd0 <__atomic_fetch_add_8+0x38>
 8011fde:	b2f6      	uxtb	r6, r6
 8011fe0:	f3bf 8f5b 	dmb	ish
 8011fe4:	2e00      	cmp	r6, #0
 8011fe6:	d1f3      	bne.n	8011fd0 <__atomic_fetch_add_8+0x38>
 8011fe8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011fec:	1882      	adds	r2, r0, r2
 8011fee:	eb41 0303 	adc.w	r3, r1, r3
 8011ff2:	e9c5 2300 	strd	r2, r3, [r5]
 8011ff6:	f3bf 8f5b 	dmb	ish
 8011ffa:	553e      	strb	r6, [r7, r4]
 8011ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8011ffe:	4770      	bx	lr
 8012000:	27d4eb2d 	.word	0x27d4eb2d
 8012004:	b21642c9 	.word	0xb21642c9
 8012008:	20006580 	.word	0x20006580

0801200c <rcutils_is_directory>:
 801200c:	2000      	movs	r0, #0
 801200e:	4770      	bx	lr

08012010 <rcutils_join_path>:
 8012010:	b082      	sub	sp, #8
 8012012:	2000      	movs	r0, #0
 8012014:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012018:	b002      	add	sp, #8
 801201a:	4770      	bx	lr

0801201c <rcutils_to_native_path>:
 801201c:	b084      	sub	sp, #16
 801201e:	a801      	add	r0, sp, #4
 8012020:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012024:	b004      	add	sp, #16
 8012026:	2000      	movs	r0, #0
 8012028:	4770      	bx	lr
 801202a:	bf00      	nop

0801202c <rcutils_format_string_limit>:
 801202c:	b40f      	push	{r0, r1, r2, r3}
 801202e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012030:	b083      	sub	sp, #12
 8012032:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012034:	ac08      	add	r4, sp, #32
 8012036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801203a:	b34e      	cbz	r6, 8012090 <rcutils_format_string_limit+0x64>
 801203c:	a808      	add	r0, sp, #32
 801203e:	f7f7 ff7b 	bl	8009f38 <rcutils_allocator_is_valid>
 8012042:	b328      	cbz	r0, 8012090 <rcutils_format_string_limit+0x64>
 8012044:	2100      	movs	r1, #0
 8012046:	ab0f      	add	r3, sp, #60	; 0x3c
 8012048:	4608      	mov	r0, r1
 801204a:	4632      	mov	r2, r6
 801204c:	e9cd 3300 	strd	r3, r3, [sp]
 8012050:	f000 f8f4 	bl	801223c <rcutils_vsnprintf>
 8012054:	1c43      	adds	r3, r0, #1
 8012056:	4605      	mov	r5, r0
 8012058:	d01a      	beq.n	8012090 <rcutils_format_string_limit+0x64>
 801205a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801205c:	1c47      	adds	r7, r0, #1
 801205e:	429f      	cmp	r7, r3
 8012060:	bf84      	itt	hi
 8012062:	461f      	movhi	r7, r3
 8012064:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8012068:	4638      	mov	r0, r7
 801206a:	9b08      	ldr	r3, [sp, #32]
 801206c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801206e:	4798      	blx	r3
 8012070:	4604      	mov	r4, r0
 8012072:	b168      	cbz	r0, 8012090 <rcutils_format_string_limit+0x64>
 8012074:	4632      	mov	r2, r6
 8012076:	4639      	mov	r1, r7
 8012078:	9b01      	ldr	r3, [sp, #4]
 801207a:	f000 f8df 	bl	801223c <rcutils_vsnprintf>
 801207e:	2800      	cmp	r0, #0
 8012080:	db02      	blt.n	8012088 <rcutils_format_string_limit+0x5c>
 8012082:	2300      	movs	r3, #0
 8012084:	5563      	strb	r3, [r4, r5]
 8012086:	e004      	b.n	8012092 <rcutils_format_string_limit+0x66>
 8012088:	4620      	mov	r0, r4
 801208a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801208c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801208e:	4798      	blx	r3
 8012090:	2400      	movs	r4, #0
 8012092:	4620      	mov	r0, r4
 8012094:	b003      	add	sp, #12
 8012096:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801209a:	b004      	add	sp, #16
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop

080120a0 <rcutils_get_env>:
 80120a0:	b168      	cbz	r0, 80120be <rcutils_get_env+0x1e>
 80120a2:	b510      	push	{r4, lr}
 80120a4:	460c      	mov	r4, r1
 80120a6:	b129      	cbz	r1, 80120b4 <rcutils_get_env+0x14>
 80120a8:	f001 fe42 	bl	8013d30 <getenv>
 80120ac:	b120      	cbz	r0, 80120b8 <rcutils_get_env+0x18>
 80120ae:	6020      	str	r0, [r4, #0]
 80120b0:	2000      	movs	r0, #0
 80120b2:	bd10      	pop	{r4, pc}
 80120b4:	4803      	ldr	r0, [pc, #12]	; (80120c4 <rcutils_get_env+0x24>)
 80120b6:	bd10      	pop	{r4, pc}
 80120b8:	4b03      	ldr	r3, [pc, #12]	; (80120c8 <rcutils_get_env+0x28>)
 80120ba:	6023      	str	r3, [r4, #0]
 80120bc:	bd10      	pop	{r4, pc}
 80120be:	4803      	ldr	r0, [pc, #12]	; (80120cc <rcutils_get_env+0x2c>)
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	080167f8 	.word	0x080167f8
 80120c8:	0801691c 	.word	0x0801691c
 80120cc:	080167dc 	.word	0x080167dc

080120d0 <rcutils_repl_str>:
 80120d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d4:	4680      	mov	r8, r0
 80120d6:	b089      	sub	sp, #36	; 0x24
 80120d8:	4608      	mov	r0, r1
 80120da:	2600      	movs	r6, #0
 80120dc:	468a      	mov	sl, r1
 80120de:	4699      	mov	r9, r3
 80120e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80120e4:	9206      	str	r2, [sp, #24]
 80120e6:	f7ee f8ad 	bl	8000244 <strlen>
 80120ea:	4637      	mov	r7, r6
 80120ec:	46b3      	mov	fp, r6
 80120ee:	2510      	movs	r5, #16
 80120f0:	9002      	str	r0, [sp, #8]
 80120f2:	e01e      	b.n	8012132 <rcutils_repl_str+0x62>
 80120f4:	f10b 0b01 	add.w	fp, fp, #1
 80120f8:	455e      	cmp	r6, fp
 80120fa:	d211      	bcs.n	8012120 <rcutils_repl_str+0x50>
 80120fc:	442e      	add	r6, r5
 80120fe:	4638      	mov	r0, r7
 8012100:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012104:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012108:	00b1      	lsls	r1, r6, #2
 801210a:	4798      	blx	r3
 801210c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012110:	2800      	cmp	r0, #0
 8012112:	d074      	beq.n	80121fe <rcutils_repl_str+0x12e>
 8012114:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8012118:	bf28      	it	cs
 801211a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801211e:	4607      	mov	r7, r0
 8012120:	9a01      	ldr	r2, [sp, #4]
 8012122:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8012126:	1aa2      	subs	r2, r4, r2
 8012128:	f843 2c04 	str.w	r2, [r3, #-4]
 801212c:	9b02      	ldr	r3, [sp, #8]
 801212e:	eb04 0803 	add.w	r8, r4, r3
 8012132:	4651      	mov	r1, sl
 8012134:	4640      	mov	r0, r8
 8012136:	f002 f85f 	bl	80141f8 <strstr>
 801213a:	4604      	mov	r4, r0
 801213c:	2800      	cmp	r0, #0
 801213e:	d1d9      	bne.n	80120f4 <rcutils_repl_str+0x24>
 8012140:	4640      	mov	r0, r8
 8012142:	f7ee f87f 	bl	8000244 <strlen>
 8012146:	9b01      	ldr	r3, [sp, #4]
 8012148:	eba8 0303 	sub.w	r3, r8, r3
 801214c:	181d      	adds	r5, r3, r0
 801214e:	9505      	str	r5, [sp, #20]
 8012150:	f1bb 0f00 	cmp.w	fp, #0
 8012154:	d03d      	beq.n	80121d2 <rcutils_repl_str+0x102>
 8012156:	9806      	ldr	r0, [sp, #24]
 8012158:	f7ee f874 	bl	8000244 <strlen>
 801215c:	9b02      	ldr	r3, [sp, #8]
 801215e:	4682      	mov	sl, r0
 8012160:	1ac3      	subs	r3, r0, r3
 8012162:	fb0b 5303 	mla	r3, fp, r3, r5
 8012166:	461a      	mov	r2, r3
 8012168:	9307      	str	r3, [sp, #28]
 801216a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801216e:	f8d9 3000 	ldr.w	r3, [r9]
 8012172:	1c50      	adds	r0, r2, #1
 8012174:	4798      	blx	r3
 8012176:	9004      	str	r0, [sp, #16]
 8012178:	2800      	cmp	r0, #0
 801217a:	d040      	beq.n	80121fe <rcutils_repl_str+0x12e>
 801217c:	463e      	mov	r6, r7
 801217e:	683a      	ldr	r2, [r7, #0]
 8012180:	9901      	ldr	r1, [sp, #4]
 8012182:	f001 fe4f 	bl	8013e24 <memcpy>
 8012186:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801218a:	683d      	ldr	r5, [r7, #0]
 801218c:	9303      	str	r3, [sp, #12]
 801218e:	9b04      	ldr	r3, [sp, #16]
 8012190:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012194:	441d      	add	r5, r3
 8012196:	4652      	mov	r2, sl
 8012198:	4641      	mov	r1, r8
 801219a:	4628      	mov	r0, r5
 801219c:	f001 fe42 	bl	8013e24 <memcpy>
 80121a0:	f856 2b04 	ldr.w	r2, [r6], #4
 80121a4:	9b02      	ldr	r3, [sp, #8]
 80121a6:	eb05 000a 	add.w	r0, r5, sl
 80121aa:	441a      	add	r2, r3
 80121ac:	9b01      	ldr	r3, [sp, #4]
 80121ae:	1899      	adds	r1, r3, r2
 80121b0:	9b03      	ldr	r3, [sp, #12]
 80121b2:	429c      	cmp	r4, r3
 80121b4:	bf0c      	ite	eq
 80121b6:	9b05      	ldreq	r3, [sp, #20]
 80121b8:	6833      	ldrne	r3, [r6, #0]
 80121ba:	3401      	adds	r4, #1
 80121bc:	1a9a      	subs	r2, r3, r2
 80121be:	1885      	adds	r5, r0, r2
 80121c0:	f001 fe30 	bl	8013e24 <memcpy>
 80121c4:	455c      	cmp	r4, fp
 80121c6:	d3e6      	bcc.n	8012196 <rcutils_repl_str+0xc6>
 80121c8:	2300      	movs	r3, #0
 80121ca:	9a04      	ldr	r2, [sp, #16]
 80121cc:	9907      	ldr	r1, [sp, #28]
 80121ce:	5453      	strb	r3, [r2, r1]
 80121d0:	e00b      	b.n	80121ea <rcutils_repl_str+0x11a>
 80121d2:	4628      	mov	r0, r5
 80121d4:	f8d9 3000 	ldr.w	r3, [r9]
 80121d8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80121dc:	3001      	adds	r0, #1
 80121de:	4798      	blx	r3
 80121e0:	9004      	str	r0, [sp, #16]
 80121e2:	b110      	cbz	r0, 80121ea <rcutils_repl_str+0x11a>
 80121e4:	9901      	ldr	r1, [sp, #4]
 80121e6:	f001 ffe0 	bl	80141aa <strcpy>
 80121ea:	4638      	mov	r0, r7
 80121ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80121f0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80121f4:	4798      	blx	r3
 80121f6:	9804      	ldr	r0, [sp, #16]
 80121f8:	b009      	add	sp, #36	; 0x24
 80121fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fe:	2300      	movs	r3, #0
 8012200:	9304      	str	r3, [sp, #16]
 8012202:	e7f2      	b.n	80121ea <rcutils_repl_str+0x11a>

08012204 <rcutils_snprintf>:
 8012204:	b40c      	push	{r2, r3}
 8012206:	b530      	push	{r4, r5, lr}
 8012208:	b083      	sub	sp, #12
 801220a:	ab06      	add	r3, sp, #24
 801220c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012210:	9301      	str	r3, [sp, #4]
 8012212:	b152      	cbz	r2, 801222a <rcutils_snprintf+0x26>
 8012214:	b138      	cbz	r0, 8012226 <rcutils_snprintf+0x22>
 8012216:	b141      	cbz	r1, 801222a <rcutils_snprintf+0x26>
 8012218:	f002 f8b8 	bl	801438c <vsniprintf>
 801221c:	b003      	add	sp, #12
 801221e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012222:	b002      	add	sp, #8
 8012224:	4770      	bx	lr
 8012226:	2900      	cmp	r1, #0
 8012228:	d0f6      	beq.n	8012218 <rcutils_snprintf+0x14>
 801222a:	f001 fd7b 	bl	8013d24 <__errno>
 801222e:	2216      	movs	r2, #22
 8012230:	4603      	mov	r3, r0
 8012232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012236:	601a      	str	r2, [r3, #0]
 8012238:	e7f0      	b.n	801221c <rcutils_snprintf+0x18>
 801223a:	bf00      	nop

0801223c <rcutils_vsnprintf>:
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	b13a      	cbz	r2, 8012250 <rcutils_vsnprintf+0x14>
 8012240:	b120      	cbz	r0, 801224c <rcutils_vsnprintf+0x10>
 8012242:	b129      	cbz	r1, 8012250 <rcutils_vsnprintf+0x14>
 8012244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012248:	f002 b8a0 	b.w	801438c <vsniprintf>
 801224c:	2900      	cmp	r1, #0
 801224e:	d0f9      	beq.n	8012244 <rcutils_vsnprintf+0x8>
 8012250:	f001 fd68 	bl	8013d24 <__errno>
 8012254:	2316      	movs	r3, #22
 8012256:	6003      	str	r3, [r0, #0]
 8012258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801225c:	bd70      	pop	{r4, r5, r6, pc}
 801225e:	bf00      	nop

08012260 <rcutils_strdup>:
 8012260:	b084      	sub	sp, #16
 8012262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012264:	ac07      	add	r4, sp, #28
 8012266:	4605      	mov	r5, r0
 8012268:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801226c:	b1a0      	cbz	r0, 8012298 <rcutils_strdup+0x38>
 801226e:	f7ed ffe9 	bl	8000244 <strlen>
 8012272:	1c47      	adds	r7, r0, #1
 8012274:	4606      	mov	r6, r0
 8012276:	9b07      	ldr	r3, [sp, #28]
 8012278:	4638      	mov	r0, r7
 801227a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801227c:	4798      	blx	r3
 801227e:	4604      	mov	r4, r0
 8012280:	b128      	cbz	r0, 801228e <rcutils_strdup+0x2e>
 8012282:	463a      	mov	r2, r7
 8012284:	4629      	mov	r1, r5
 8012286:	f001 fdcd 	bl	8013e24 <memcpy>
 801228a:	2300      	movs	r3, #0
 801228c:	55a3      	strb	r3, [r4, r6]
 801228e:	4620      	mov	r0, r4
 8012290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012294:	b004      	add	sp, #16
 8012296:	4770      	bx	lr
 8012298:	4604      	mov	r4, r0
 801229a:	4620      	mov	r0, r4
 801229c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122a0:	b004      	add	sp, #16
 80122a2:	4770      	bx	lr

080122a4 <rcutils_strndup>:
 80122a4:	b082      	sub	sp, #8
 80122a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a8:	ac06      	add	r4, sp, #24
 80122aa:	4605      	mov	r5, r0
 80122ac:	e884 000c 	stmia.w	r4, {r2, r3}
 80122b0:	b188      	cbz	r0, 80122d6 <rcutils_strndup+0x32>
 80122b2:	1c4f      	adds	r7, r1, #1
 80122b4:	460e      	mov	r6, r1
 80122b6:	4638      	mov	r0, r7
 80122b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80122ba:	4790      	blx	r2
 80122bc:	4604      	mov	r4, r0
 80122be:	b128      	cbz	r0, 80122cc <rcutils_strndup+0x28>
 80122c0:	463a      	mov	r2, r7
 80122c2:	4629      	mov	r1, r5
 80122c4:	f001 fdae 	bl	8013e24 <memcpy>
 80122c8:	2300      	movs	r3, #0
 80122ca:	55a3      	strb	r3, [r4, r6]
 80122cc:	4620      	mov	r0, r4
 80122ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122d2:	b002      	add	sp, #8
 80122d4:	4770      	bx	lr
 80122d6:	4604      	mov	r4, r0
 80122d8:	e7f8      	b.n	80122cc <rcutils_strndup+0x28>
 80122da:	bf00      	nop

080122dc <rmw_get_zero_initialized_context>:
 80122dc:	b510      	push	{r4, lr}
 80122de:	4604      	mov	r4, r0
 80122e0:	2250      	movs	r2, #80	; 0x50
 80122e2:	2100      	movs	r1, #0
 80122e4:	f001 fdc6 	bl	8013e74 <memset>
 80122e8:	4620      	mov	r0, r4
 80122ea:	bd10      	pop	{r4, pc}

080122ec <rmw_validate_namespace_with_size>:
 80122ec:	b340      	cbz	r0, 8012340 <rmw_validate_namespace_with_size+0x54>
 80122ee:	b5d0      	push	{r4, r6, r7, lr}
 80122f0:	4614      	mov	r4, r2
 80122f2:	b0c2      	sub	sp, #264	; 0x108
 80122f4:	b332      	cbz	r2, 8012344 <rmw_validate_namespace_with_size+0x58>
 80122f6:	2901      	cmp	r1, #1
 80122f8:	460f      	mov	r7, r1
 80122fa:	461e      	mov	r6, r3
 80122fc:	d102      	bne.n	8012304 <rmw_validate_namespace_with_size+0x18>
 80122fe:	7803      	ldrb	r3, [r0, #0]
 8012300:	2b2f      	cmp	r3, #47	; 0x2f
 8012302:	d019      	beq.n	8012338 <rmw_validate_namespace_with_size+0x4c>
 8012304:	4669      	mov	r1, sp
 8012306:	aa01      	add	r2, sp, #4
 8012308:	f7f8 f8c4 	bl	800a494 <rmw_validate_full_topic_name>
 801230c:	b990      	cbnz	r0, 8012334 <rmw_validate_namespace_with_size+0x48>
 801230e:	9b00      	ldr	r3, [sp, #0]
 8012310:	b14b      	cbz	r3, 8012326 <rmw_validate_namespace_with_size+0x3a>
 8012312:	2b07      	cmp	r3, #7
 8012314:	d007      	beq.n	8012326 <rmw_validate_namespace_with_size+0x3a>
 8012316:	1e5a      	subs	r2, r3, #1
 8012318:	2a05      	cmp	r2, #5
 801231a:	d82b      	bhi.n	8012374 <rmw_validate_namespace_with_size+0x88>
 801231c:	e8df f002 	tbb	[pc, r2]
 8012320:	24211e1b 	.word	0x24211e1b
 8012324:	1427      	.short	0x1427
 8012326:	2ff5      	cmp	r7, #245	; 0xf5
 8012328:	d906      	bls.n	8012338 <rmw_validate_namespace_with_size+0x4c>
 801232a:	2307      	movs	r3, #7
 801232c:	6023      	str	r3, [r4, #0]
 801232e:	b10e      	cbz	r6, 8012334 <rmw_validate_namespace_with_size+0x48>
 8012330:	23f4      	movs	r3, #244	; 0xf4
 8012332:	6033      	str	r3, [r6, #0]
 8012334:	b042      	add	sp, #264	; 0x108
 8012336:	bdd0      	pop	{r4, r6, r7, pc}
 8012338:	2000      	movs	r0, #0
 801233a:	6020      	str	r0, [r4, #0]
 801233c:	b042      	add	sp, #264	; 0x108
 801233e:	bdd0      	pop	{r4, r6, r7, pc}
 8012340:	200b      	movs	r0, #11
 8012342:	4770      	bx	lr
 8012344:	200b      	movs	r0, #11
 8012346:	e7f5      	b.n	8012334 <rmw_validate_namespace_with_size+0x48>
 8012348:	2306      	movs	r3, #6
 801234a:	6023      	str	r3, [r4, #0]
 801234c:	2e00      	cmp	r6, #0
 801234e:	d0f1      	beq.n	8012334 <rmw_validate_namespace_with_size+0x48>
 8012350:	9b01      	ldr	r3, [sp, #4]
 8012352:	6033      	str	r3, [r6, #0]
 8012354:	e7ee      	b.n	8012334 <rmw_validate_namespace_with_size+0x48>
 8012356:	2301      	movs	r3, #1
 8012358:	6023      	str	r3, [r4, #0]
 801235a:	e7f7      	b.n	801234c <rmw_validate_namespace_with_size+0x60>
 801235c:	2302      	movs	r3, #2
 801235e:	6023      	str	r3, [r4, #0]
 8012360:	e7f4      	b.n	801234c <rmw_validate_namespace_with_size+0x60>
 8012362:	2303      	movs	r3, #3
 8012364:	6023      	str	r3, [r4, #0]
 8012366:	e7f1      	b.n	801234c <rmw_validate_namespace_with_size+0x60>
 8012368:	2304      	movs	r3, #4
 801236a:	6023      	str	r3, [r4, #0]
 801236c:	e7ee      	b.n	801234c <rmw_validate_namespace_with_size+0x60>
 801236e:	2305      	movs	r3, #5
 8012370:	6023      	str	r3, [r4, #0]
 8012372:	e7eb      	b.n	801234c <rmw_validate_namespace_with_size+0x60>
 8012374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012378:	4a02      	ldr	r2, [pc, #8]	; (8012384 <rmw_validate_namespace_with_size+0x98>)
 801237a:	a802      	add	r0, sp, #8
 801237c:	f7ff ff42 	bl	8012204 <rcutils_snprintf>
 8012380:	2001      	movs	r0, #1
 8012382:	e7d7      	b.n	8012334 <rmw_validate_namespace_with_size+0x48>
 8012384:	08016814 	.word	0x08016814

08012388 <rmw_validate_namespace>:
 8012388:	b168      	cbz	r0, 80123a6 <rmw_validate_namespace+0x1e>
 801238a:	b570      	push	{r4, r5, r6, lr}
 801238c:	460d      	mov	r5, r1
 801238e:	4616      	mov	r6, r2
 8012390:	4604      	mov	r4, r0
 8012392:	f7ed ff57 	bl	8000244 <strlen>
 8012396:	4633      	mov	r3, r6
 8012398:	4601      	mov	r1, r0
 801239a:	462a      	mov	r2, r5
 801239c:	4620      	mov	r0, r4
 801239e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123a2:	f7ff bfa3 	b.w	80122ec <rmw_validate_namespace_with_size>
 80123a6:	200b      	movs	r0, #11
 80123a8:	4770      	bx	lr
 80123aa:	bf00      	nop

080123ac <rmw_namespace_validation_result_string>:
 80123ac:	2807      	cmp	r0, #7
 80123ae:	bf9a      	itte	ls
 80123b0:	4b02      	ldrls	r3, [pc, #8]	; (80123bc <rmw_namespace_validation_result_string+0x10>)
 80123b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80123b6:	4802      	ldrhi	r0, [pc, #8]	; (80123c0 <rmw_namespace_validation_result_string+0x14>)
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	08016a0c 	.word	0x08016a0c
 80123c0:	08016864 	.word	0x08016864

080123c4 <rmw_validate_node_name>:
 80123c4:	2800      	cmp	r0, #0
 80123c6:	d03b      	beq.n	8012440 <rmw_validate_node_name+0x7c>
 80123c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123cc:	460f      	mov	r7, r1
 80123ce:	2900      	cmp	r1, #0
 80123d0:	d038      	beq.n	8012444 <rmw_validate_node_name+0x80>
 80123d2:	4615      	mov	r5, r2
 80123d4:	4604      	mov	r4, r0
 80123d6:	f7ed ff35 	bl	8000244 <strlen>
 80123da:	b1e0      	cbz	r0, 8012416 <rmw_validate_node_name+0x52>
 80123dc:	1e63      	subs	r3, r4, #1
 80123de:	eb03 0e00 	add.w	lr, r3, r0
 80123e2:	f1c4 0c01 	rsb	ip, r4, #1
 80123e6:	eb0c 0803 	add.w	r8, ip, r3
 80123ea:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80123ee:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 80123f2:	f026 0220 	bic.w	r2, r6, #32
 80123f6:	2909      	cmp	r1, #9
 80123f8:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 80123fc:	d913      	bls.n	8012426 <rmw_validate_node_name+0x62>
 80123fe:	2a19      	cmp	r2, #25
 8012400:	d911      	bls.n	8012426 <rmw_validate_node_name+0x62>
 8012402:	2e5f      	cmp	r6, #95	; 0x5f
 8012404:	d00f      	beq.n	8012426 <rmw_validate_node_name+0x62>
 8012406:	2302      	movs	r3, #2
 8012408:	603b      	str	r3, [r7, #0]
 801240a:	b10d      	cbz	r5, 8012410 <rmw_validate_node_name+0x4c>
 801240c:	f8c5 8000 	str.w	r8, [r5]
 8012410:	2000      	movs	r0, #0
 8012412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012416:	2301      	movs	r3, #1
 8012418:	603b      	str	r3, [r7, #0]
 801241a:	2d00      	cmp	r5, #0
 801241c:	d0f8      	beq.n	8012410 <rmw_validate_node_name+0x4c>
 801241e:	2000      	movs	r0, #0
 8012420:	6028      	str	r0, [r5, #0]
 8012422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012426:	4573      	cmp	r3, lr
 8012428:	d1dd      	bne.n	80123e6 <rmw_validate_node_name+0x22>
 801242a:	7822      	ldrb	r2, [r4, #0]
 801242c:	4b0d      	ldr	r3, [pc, #52]	; (8012464 <rmw_validate_node_name+0xa0>)
 801242e:	5cd3      	ldrb	r3, [r2, r3]
 8012430:	f013 0304 	ands.w	r3, r3, #4
 8012434:	d110      	bne.n	8012458 <rmw_validate_node_name+0x94>
 8012436:	28ff      	cmp	r0, #255	; 0xff
 8012438:	d806      	bhi.n	8012448 <rmw_validate_node_name+0x84>
 801243a:	4618      	mov	r0, r3
 801243c:	603b      	str	r3, [r7, #0]
 801243e:	e7e8      	b.n	8012412 <rmw_validate_node_name+0x4e>
 8012440:	200b      	movs	r0, #11
 8012442:	4770      	bx	lr
 8012444:	200b      	movs	r0, #11
 8012446:	e7e4      	b.n	8012412 <rmw_validate_node_name+0x4e>
 8012448:	2204      	movs	r2, #4
 801244a:	603a      	str	r2, [r7, #0]
 801244c:	2d00      	cmp	r5, #0
 801244e:	d0df      	beq.n	8012410 <rmw_validate_node_name+0x4c>
 8012450:	22fe      	movs	r2, #254	; 0xfe
 8012452:	4618      	mov	r0, r3
 8012454:	602a      	str	r2, [r5, #0]
 8012456:	e7dc      	b.n	8012412 <rmw_validate_node_name+0x4e>
 8012458:	2303      	movs	r3, #3
 801245a:	603b      	str	r3, [r7, #0]
 801245c:	2d00      	cmp	r5, #0
 801245e:	d1de      	bne.n	801241e <rmw_validate_node_name+0x5a>
 8012460:	e7d6      	b.n	8012410 <rmw_validate_node_name+0x4c>
 8012462:	bf00      	nop
 8012464:	08016b61 	.word	0x08016b61

08012468 <rmw_node_name_validation_result_string>:
 8012468:	2804      	cmp	r0, #4
 801246a:	bf9a      	itte	ls
 801246c:	4b02      	ldrls	r3, [pc, #8]	; (8012478 <rmw_node_name_validation_result_string+0x10>)
 801246e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8012472:	4802      	ldrhi	r0, [pc, #8]	; (801247c <rmw_node_name_validation_result_string+0x14>)
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	08016b18 	.word	0x08016b18
 801247c:	08016a2c 	.word	0x08016a2c

08012480 <on_status>:
 8012480:	b082      	sub	sp, #8
 8012482:	b002      	add	sp, #8
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop

08012488 <on_topic>:
 8012488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801248c:	4a21      	ldr	r2, [pc, #132]	; (8012514 <on_topic+0x8c>)
 801248e:	b094      	sub	sp, #80	; 0x50
 8012490:	6812      	ldr	r2, [r2, #0]
 8012492:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012494:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8012498:	9113      	str	r1, [sp, #76]	; 0x4c
 801249a:	9312      	str	r3, [sp, #72]	; 0x48
 801249c:	b3ba      	cbz	r2, 801250e <on_topic+0x86>
 801249e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80124a2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80124a6:	e001      	b.n	80124ac <on_topic+0x24>
 80124a8:	6892      	ldr	r2, [r2, #8]
 80124aa:	b382      	cbz	r2, 801250e <on_topic+0x86>
 80124ac:	68d4      	ldr	r4, [r2, #12]
 80124ae:	8aa3      	ldrh	r3, [r4, #20]
 80124b0:	428b      	cmp	r3, r1
 80124b2:	d1f9      	bne.n	80124a8 <on_topic+0x20>
 80124b4:	7da3      	ldrb	r3, [r4, #22]
 80124b6:	4283      	cmp	r3, r0
 80124b8:	d1f6      	bne.n	80124a8 <on_topic+0x20>
 80124ba:	2248      	movs	r2, #72	; 0x48
 80124bc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80124c0:	4668      	mov	r0, sp
 80124c2:	f001 fcaf 	bl	8013e24 <memcpy>
 80124c6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80124ca:	4620      	mov	r0, r4
 80124cc:	f7f9 f91a 	bl	800b704 <rmw_uxrce_get_static_input_buffer_for_entity>
 80124d0:	4607      	mov	r7, r0
 80124d2:	b1e0      	cbz	r0, 801250e <on_topic+0x86>
 80124d4:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80124d8:	462a      	mov	r2, r5
 80124da:	4630      	mov	r0, r6
 80124dc:	f108 0110 	add.w	r1, r8, #16
 80124e0:	f000 fd02 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 80124e4:	b930      	cbnz	r0, 80124f4 <on_topic+0x6c>
 80124e6:	4639      	mov	r1, r7
 80124e8:	480b      	ldr	r0, [pc, #44]	; (8012518 <on_topic+0x90>)
 80124ea:	b014      	add	sp, #80	; 0x50
 80124ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124f0:	f000 b8be 	b.w	8012670 <put_memory>
 80124f4:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80124f8:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80124fc:	f7f8 ff34 	bl	800b368 <rmw_uros_epoch_nanos>
 8012500:	2305      	movs	r3, #5
 8012502:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8012506:	e9c2 0100 	strd	r0, r1, [r2]
 801250a:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801250e:	b014      	add	sp, #80	; 0x50
 8012510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012514:	2000bb4c 	.word	0x2000bb4c
 8012518:	200088e0 	.word	0x200088e0

0801251c <on_request>:
 801251c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012520:	4823      	ldr	r0, [pc, #140]	; (80125b0 <on_request+0x94>)
 8012522:	b095      	sub	sp, #84	; 0x54
 8012524:	6800      	ldr	r0, [r0, #0]
 8012526:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 801252a:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801252e:	9113      	str	r1, [sp, #76]	; 0x4c
 8012530:	2800      	cmp	r0, #0
 8012532:	d039      	beq.n	80125a8 <on_request+0x8c>
 8012534:	461d      	mov	r5, r3
 8012536:	e001      	b.n	801253c <on_request+0x20>
 8012538:	6880      	ldr	r0, [r0, #8]
 801253a:	b3a8      	cbz	r0, 80125a8 <on_request+0x8c>
 801253c:	68c4      	ldr	r4, [r0, #12]
 801253e:	8b21      	ldrh	r1, [r4, #24]
 8012540:	4291      	cmp	r1, r2
 8012542:	d1f9      	bne.n	8012538 <on_request+0x1c>
 8012544:	2248      	movs	r2, #72	; 0x48
 8012546:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801254a:	4668      	mov	r0, sp
 801254c:	f001 fc6a 	bl	8013e24 <memcpy>
 8012550:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8012554:	4620      	mov	r0, r4
 8012556:	f7f9 f8d5 	bl	800b704 <rmw_uxrce_get_static_input_buffer_for_entity>
 801255a:	4606      	mov	r6, r0
 801255c:	b320      	cbz	r0, 80125a8 <on_request+0x8c>
 801255e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8012562:	463a      	mov	r2, r7
 8012564:	4640      	mov	r0, r8
 8012566:	f109 0110 	add.w	r1, r9, #16
 801256a:	f000 fcbd 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 801256e:	b930      	cbnz	r0, 801257e <on_request+0x62>
 8012570:	4631      	mov	r1, r6
 8012572:	4810      	ldr	r0, [pc, #64]	; (80125b4 <on_request+0x98>)
 8012574:	b015      	add	sp, #84	; 0x54
 8012576:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801257a:	f000 b879 	b.w	8012670 <put_memory>
 801257e:	f609 0628 	addw	r6, r9, #2088	; 0x828
 8012582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012584:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8012588:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 801258c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801258e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012592:	e886 0003 	stmia.w	r6, {r0, r1}
 8012596:	f7f8 fee7 	bl	800b368 <rmw_uros_epoch_nanos>
 801259a:	2303      	movs	r3, #3
 801259c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80125a0:	e9c2 0100 	strd	r0, r1, [r2]
 80125a4:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80125a8:	b015      	add	sp, #84	; 0x54
 80125aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125ae:	bf00      	nop
 80125b0:	2000bb3c 	.word	0x2000bb3c
 80125b4:	200088e0 	.word	0x200088e0

080125b8 <on_reply>:
 80125b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125bc:	4822      	ldr	r0, [pc, #136]	; (8012648 <on_reply+0x90>)
 80125be:	b095      	sub	sp, #84	; 0x54
 80125c0:	6800      	ldr	r0, [r0, #0]
 80125c2:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80125c6:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 80125ca:	9113      	str	r1, [sp, #76]	; 0x4c
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d037      	beq.n	8012640 <on_reply+0x88>
 80125d0:	461d      	mov	r5, r3
 80125d2:	e001      	b.n	80125d8 <on_reply+0x20>
 80125d4:	6880      	ldr	r0, [r0, #8]
 80125d6:	b398      	cbz	r0, 8012640 <on_reply+0x88>
 80125d8:	68c4      	ldr	r4, [r0, #12]
 80125da:	8b21      	ldrh	r1, [r4, #24]
 80125dc:	4291      	cmp	r1, r2
 80125de:	d1f9      	bne.n	80125d4 <on_reply+0x1c>
 80125e0:	2248      	movs	r2, #72	; 0x48
 80125e2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80125e6:	4668      	mov	r0, sp
 80125e8:	f001 fc1c 	bl	8013e24 <memcpy>
 80125ec:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7f9 f887 	bl	800b704 <rmw_uxrce_get_static_input_buffer_for_entity>
 80125f6:	4606      	mov	r6, r0
 80125f8:	b310      	cbz	r0, 8012640 <on_reply+0x88>
 80125fa:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80125fe:	463a      	mov	r2, r7
 8012600:	4640      	mov	r0, r8
 8012602:	f109 0110 	add.w	r1, r9, #16
 8012606:	f000 fc6f 	bl	8012ee8 <ucdr_deserialize_array_uint8_t>
 801260a:	b930      	cbnz	r0, 801261a <on_reply+0x62>
 801260c:	4631      	mov	r1, r6
 801260e:	480f      	ldr	r0, [pc, #60]	; (801264c <on_reply+0x94>)
 8012610:	b015      	add	sp, #84	; 0x54
 8012612:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012616:	f000 b82b 	b.w	8012670 <put_memory>
 801261a:	2300      	movs	r3, #0
 801261c:	b2aa      	uxth	r2, r5
 801261e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8012622:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8012626:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 801262a:	e9c1 2300 	strd	r2, r3, [r1]
 801262e:	f7f8 fe9b 	bl	800b368 <rmw_uros_epoch_nanos>
 8012632:	2304      	movs	r3, #4
 8012634:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8012638:	e9c2 0100 	strd	r0, r1, [r2]
 801263c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8012640:	b015      	add	sp, #84	; 0x54
 8012642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012646:	bf00      	nop
 8012648:	20009170 	.word	0x20009170
 801264c:	200088e0 	.word	0x200088e0

08012650 <get_memory>:
 8012650:	4603      	mov	r3, r0
 8012652:	6840      	ldr	r0, [r0, #4]
 8012654:	b158      	cbz	r0, 801266e <get_memory+0x1e>
 8012656:	6882      	ldr	r2, [r0, #8]
 8012658:	605a      	str	r2, [r3, #4]
 801265a:	b10a      	cbz	r2, 8012660 <get_memory+0x10>
 801265c:	2100      	movs	r1, #0
 801265e:	6051      	str	r1, [r2, #4]
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	6082      	str	r2, [r0, #8]
 8012664:	b102      	cbz	r2, 8012668 <get_memory+0x18>
 8012666:	6050      	str	r0, [r2, #4]
 8012668:	2200      	movs	r2, #0
 801266a:	6042      	str	r2, [r0, #4]
 801266c:	6018      	str	r0, [r3, #0]
 801266e:	4770      	bx	lr

08012670 <put_memory>:
 8012670:	684b      	ldr	r3, [r1, #4]
 8012672:	b10b      	cbz	r3, 8012678 <put_memory+0x8>
 8012674:	688a      	ldr	r2, [r1, #8]
 8012676:	609a      	str	r2, [r3, #8]
 8012678:	688a      	ldr	r2, [r1, #8]
 801267a:	b102      	cbz	r2, 801267e <put_memory+0xe>
 801267c:	6053      	str	r3, [r2, #4]
 801267e:	6803      	ldr	r3, [r0, #0]
 8012680:	428b      	cmp	r3, r1
 8012682:	6843      	ldr	r3, [r0, #4]
 8012684:	bf08      	it	eq
 8012686:	6002      	streq	r2, [r0, #0]
 8012688:	608b      	str	r3, [r1, #8]
 801268a:	b103      	cbz	r3, 801268e <put_memory+0x1e>
 801268c:	6059      	str	r1, [r3, #4]
 801268e:	2300      	movs	r3, #0
 8012690:	604b      	str	r3, [r1, #4]
 8012692:	6041      	str	r1, [r0, #4]
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop

08012698 <rmw_destroy_client>:
 8012698:	b570      	push	{r4, r5, r6, lr}
 801269a:	b128      	cbz	r0, 80126a8 <rmw_destroy_client+0x10>
 801269c:	4604      	mov	r4, r0
 801269e:	6800      	ldr	r0, [r0, #0]
 80126a0:	460d      	mov	r5, r1
 80126a2:	f7f9 f9a1 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 80126a6:	b910      	cbnz	r0, 80126ae <rmw_destroy_client+0x16>
 80126a8:	2401      	movs	r4, #1
 80126aa:	4620      	mov	r0, r4
 80126ac:	bd70      	pop	{r4, r5, r6, pc}
 80126ae:	6863      	ldr	r3, [r4, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d0f9      	beq.n	80126a8 <rmw_destroy_client+0x10>
 80126b4:	2d00      	cmp	r5, #0
 80126b6:	d0f7      	beq.n	80126a8 <rmw_destroy_client+0x10>
 80126b8:	6828      	ldr	r0, [r5, #0]
 80126ba:	f7f9 f995 	bl	800b9e8 <is_uxrce_rmw_identifier_valid>
 80126be:	2800      	cmp	r0, #0
 80126c0:	d0f2      	beq.n	80126a8 <rmw_destroy_client+0x10>
 80126c2:	686e      	ldr	r6, [r5, #4]
 80126c4:	2e00      	cmp	r6, #0
 80126c6:	d0ef      	beq.n	80126a8 <rmw_destroy_client+0x10>
 80126c8:	6864      	ldr	r4, [r4, #4]
 80126ca:	6932      	ldr	r2, [r6, #16]
 80126cc:	6920      	ldr	r0, [r4, #16]
 80126ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80126d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80126d6:	6819      	ldr	r1, [r3, #0]
 80126d8:	f7fa fd5a 	bl	800d190 <uxr_buffer_cancel_data>
 80126dc:	4602      	mov	r2, r0
 80126de:	6920      	ldr	r0, [r4, #16]
 80126e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80126e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80126e8:	f7f9 f8fa 	bl	800b8e0 <run_xrce_session>
 80126ec:	6920      	ldr	r0, [r4, #16]
 80126ee:	6932      	ldr	r2, [r6, #16]
 80126f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80126f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80126f8:	6819      	ldr	r1, [r3, #0]
 80126fa:	f7fa fa0b 	bl	800cb14 <uxr_buffer_delete_entity>
 80126fe:	4602      	mov	r2, r0
 8012700:	6920      	ldr	r0, [r4, #16]
 8012702:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012706:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801270a:	f7f9 f8e9 	bl	800b8e0 <run_xrce_session>
 801270e:	4603      	mov	r3, r0
 8012710:	4628      	mov	r0, r5
 8012712:	2b00      	cmp	r3, #0
 8012714:	bf14      	ite	ne
 8012716:	2400      	movne	r4, #0
 8012718:	2402      	moveq	r4, #2
 801271a:	f7f8 ffd1 	bl	800b6c0 <rmw_uxrce_fini_client_memory>
 801271e:	e7c4      	b.n	80126aa <rmw_destroy_client+0x12>

08012720 <rmw_get_implementation_identifier>:
 8012720:	4b01      	ldr	r3, [pc, #4]	; (8012728 <rmw_get_implementation_identifier+0x8>)
 8012722:	6818      	ldr	r0, [r3, #0]
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop
 8012728:	08016b44 	.word	0x08016b44

0801272c <create_topic>:
 801272c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012730:	4605      	mov	r5, r0
 8012732:	b085      	sub	sp, #20
 8012734:	4821      	ldr	r0, [pc, #132]	; (80127bc <create_topic+0x90>)
 8012736:	460f      	mov	r7, r1
 8012738:	4616      	mov	r6, r2
 801273a:	f7ff ff89 	bl	8012650 <get_memory>
 801273e:	4604      	mov	r4, r0
 8012740:	b390      	cbz	r0, 80127a8 <create_topic+0x7c>
 8012742:	f241 5396 	movw	r3, #5526	; 0x1596
 8012746:	692a      	ldr	r2, [r5, #16]
 8012748:	68c4      	ldr	r4, [r0, #12]
 801274a:	5ad0      	ldrh	r0, [r2, r3]
 801274c:	61a5      	str	r5, [r4, #24]
 801274e:	1c41      	adds	r1, r0, #1
 8012750:	6166      	str	r6, [r4, #20]
 8012752:	52d1      	strh	r1, [r2, r3]
 8012754:	2102      	movs	r1, #2
 8012756:	f7fa fcb3 	bl	800d0c0 <uxr_object_id>
 801275a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80127c0 <create_topic+0x94>
 801275e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80127c4 <create_topic+0x98>
 8012762:	4641      	mov	r1, r8
 8012764:	223c      	movs	r2, #60	; 0x3c
 8012766:	6120      	str	r0, [r4, #16]
 8012768:	4638      	mov	r0, r7
 801276a:	f7f9 f927 	bl	800b9bc <generate_topic_name>
 801276e:	4649      	mov	r1, r9
 8012770:	2264      	movs	r2, #100	; 0x64
 8012772:	4630      	mov	r0, r6
 8012774:	f7f9 f8e8 	bl	800b948 <generate_type_name>
 8012778:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801277c:	2106      	movs	r1, #6
 801277e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012782:	e9cd 8900 	strd	r8, r9, [sp]
 8012786:	9102      	str	r1, [sp, #8]
 8012788:	6811      	ldr	r1, [r2, #0]
 801278a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801278e:	6922      	ldr	r2, [r4, #16]
 8012790:	f7fa fa46 	bl	800cc20 <uxr_buffer_create_topic_bin>
 8012794:	4602      	mov	r2, r0
 8012796:	6928      	ldr	r0, [r5, #16]
 8012798:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801279c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80127a0:	f7f9 f89e 	bl	800b8e0 <run_xrce_session>
 80127a4:	4605      	mov	r5, r0
 80127a6:	b118      	cbz	r0, 80127b0 <create_topic+0x84>
 80127a8:	4620      	mov	r0, r4
 80127aa:	b005      	add	sp, #20
 80127ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127b0:	4620      	mov	r0, r4
 80127b2:	f7f8 ff9b 	bl	800b6ec <rmw_uxrce_fini_topic_memory>
 80127b6:	462c      	mov	r4, r5
 80127b8:	e7f6      	b.n	80127a8 <create_topic+0x7c>
 80127ba:	bf00      	nop
 80127bc:	2000ba78 	.word	0x2000ba78
 80127c0:	20006598 	.word	0x20006598
 80127c4:	200065d4 	.word	0x200065d4

080127c8 <destroy_topic>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	6985      	ldr	r5, [r0, #24]
 80127cc:	b1dd      	cbz	r5, 8012806 <destroy_topic+0x3e>
 80127ce:	4604      	mov	r4, r0
 80127d0:	6928      	ldr	r0, [r5, #16]
 80127d2:	6922      	ldr	r2, [r4, #16]
 80127d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80127d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80127dc:	6819      	ldr	r1, [r3, #0]
 80127de:	f7fa f999 	bl	800cb14 <uxr_buffer_delete_entity>
 80127e2:	4602      	mov	r2, r0
 80127e4:	6928      	ldr	r0, [r5, #16]
 80127e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80127ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80127ee:	f7f9 f877 	bl	800b8e0 <run_xrce_session>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	4620      	mov	r0, r4
 80127f8:	bf14      	ite	ne
 80127fa:	2400      	movne	r4, #0
 80127fc:	2402      	moveq	r4, #2
 80127fe:	f7f8 ff75 	bl	800b6ec <rmw_uxrce_fini_topic_memory>
 8012802:	4620      	mov	r0, r4
 8012804:	bd38      	pop	{r3, r4, r5, pc}
 8012806:	2401      	movs	r4, #1
 8012808:	4620      	mov	r0, r4
 801280a:	bd38      	pop	{r3, r4, r5, pc}

0801280c <rmw_take_request>:
 801280c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012810:	4605      	mov	r5, r0
 8012812:	6800      	ldr	r0, [r0, #0]
 8012814:	460c      	mov	r4, r1
 8012816:	4690      	mov	r8, r2
 8012818:	461e      	mov	r6, r3
 801281a:	b089      	sub	sp, #36	; 0x24
 801281c:	b128      	cbz	r0, 801282a <rmw_take_request+0x1e>
 801281e:	4b28      	ldr	r3, [pc, #160]	; (80128c0 <rmw_take_request+0xb4>)
 8012820:	6819      	ldr	r1, [r3, #0]
 8012822:	f7ed fd05 	bl	8000230 <strcmp>
 8012826:	2800      	cmp	r0, #0
 8012828:	d146      	bne.n	80128b8 <rmw_take_request+0xac>
 801282a:	b10e      	cbz	r6, 8012830 <rmw_take_request+0x24>
 801282c:	2300      	movs	r3, #0
 801282e:	7033      	strb	r3, [r6, #0]
 8012830:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012834:	f7f8 ffdc 	bl	800b7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8012838:	4648      	mov	r0, r9
 801283a:	f7f8 ffaf 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 801283e:	4607      	mov	r7, r0
 8012840:	b3b0      	cbz	r0, 80128b0 <rmw_take_request+0xa4>
 8012842:	68c5      	ldr	r5, [r0, #12]
 8012844:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8012848:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 801284c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8012850:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8012854:	7423      	strb	r3, [r4, #16]
 8012856:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801285a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801285e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8012862:	74e3      	strb	r3, [r4, #19]
 8012864:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8012868:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801286c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8012870:	6161      	str	r1, [r4, #20]
 8012872:	61a2      	str	r2, [r4, #24]
 8012874:	61e3      	str	r3, [r4, #28]
 8012876:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801287a:	689b      	ldr	r3, [r3, #8]
 801287c:	4798      	blx	r3
 801287e:	6844      	ldr	r4, [r0, #4]
 8012880:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8012884:	4668      	mov	r0, sp
 8012886:	f105 0110 	add.w	r1, r5, #16
 801288a:	f7fa f8d1 	bl	800ca30 <ucdr_init_buffer>
 801288e:	4641      	mov	r1, r8
 8012890:	68e3      	ldr	r3, [r4, #12]
 8012892:	4668      	mov	r0, sp
 8012894:	4798      	blx	r3
 8012896:	4639      	mov	r1, r7
 8012898:	4604      	mov	r4, r0
 801289a:	480a      	ldr	r0, [pc, #40]	; (80128c4 <rmw_take_request+0xb8>)
 801289c:	f7ff fee8 	bl	8012670 <put_memory>
 80128a0:	b106      	cbz	r6, 80128a4 <rmw_take_request+0x98>
 80128a2:	7034      	strb	r4, [r6, #0]
 80128a4:	f084 0001 	eor.w	r0, r4, #1
 80128a8:	b2c0      	uxtb	r0, r0
 80128aa:	b009      	add	sp, #36	; 0x24
 80128ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128b0:	2001      	movs	r0, #1
 80128b2:	b009      	add	sp, #36	; 0x24
 80128b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128b8:	200c      	movs	r0, #12
 80128ba:	b009      	add	sp, #36	; 0x24
 80128bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c0:	08016b44 	.word	0x08016b44
 80128c4:	200088e0 	.word	0x200088e0

080128c8 <rmw_send_response>:
 80128c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128ca:	4605      	mov	r5, r0
 80128cc:	6800      	ldr	r0, [r0, #0]
 80128ce:	460c      	mov	r4, r1
 80128d0:	4617      	mov	r7, r2
 80128d2:	b091      	sub	sp, #68	; 0x44
 80128d4:	b128      	cbz	r0, 80128e2 <rmw_send_response+0x1a>
 80128d6:	4b2a      	ldr	r3, [pc, #168]	; (8012980 <rmw_send_response+0xb8>)
 80128d8:	6819      	ldr	r1, [r3, #0]
 80128da:	f7ed fca9 	bl	8000230 <strcmp>
 80128de:	2800      	cmp	r0, #0
 80128e0:	d143      	bne.n	801296a <rmw_send_response+0xa2>
 80128e2:	4621      	mov	r1, r4
 80128e4:	4622      	mov	r2, r4
 80128e6:	f831 ef01 	ldrh.w	lr, [r1, #1]!
 80128ea:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80128ee:	f891 c002 	ldrb.w	ip, [r1, #2]
 80128f2:	686d      	ldr	r5, [r5, #4]
 80128f4:	6851      	ldr	r1, [r2, #4]
 80128f6:	6966      	ldr	r6, [r4, #20]
 80128f8:	f88d c016 	strb.w	ip, [sp, #22]
 80128fc:	6892      	ldr	r2, [r2, #8]
 80128fe:	f894 c000 	ldrb.w	ip, [r4]
 8012902:	ab02      	add	r3, sp, #8
 8012904:	f8ad e014 	strh.w	lr, [sp, #20]
 8012908:	f88d c017 	strb.w	ip, [sp, #23]
 801290c:	9606      	str	r6, [sp, #24]
 801290e:	c307      	stmia	r3!, {r0, r1, r2}
 8012910:	6922      	ldr	r2, [r4, #16]
 8012912:	696b      	ldr	r3, [r5, #20]
 8012914:	9207      	str	r2, [sp, #28]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	6fae      	ldr	r6, [r5, #120]	; 0x78
 801291a:	4798      	blx	r3
 801291c:	6844      	ldr	r4, [r0, #4]
 801291e:	4638      	mov	r0, r7
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	4798      	blx	r3
 8012924:	6932      	ldr	r2, [r6, #16]
 8012926:	3018      	adds	r0, #24
 8012928:	9000      	str	r0, [sp, #0]
 801292a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801292c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 8012930:	ab08      	add	r3, sp, #32
 8012932:	692a      	ldr	r2, [r5, #16]
 8012934:	f7fc fb28 	bl	800ef88 <uxr_prepare_output_stream>
 8012938:	b910      	cbnz	r0, 8012940 <rmw_send_response+0x78>
 801293a:	2001      	movs	r0, #1
 801293c:	b011      	add	sp, #68	; 0x44
 801293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012940:	a902      	add	r1, sp, #8
 8012942:	a808      	add	r0, sp, #32
 8012944:	f7fd fa96 	bl	800fe74 <uxr_serialize_SampleIdentity>
 8012948:	68a3      	ldr	r3, [r4, #8]
 801294a:	4638      	mov	r0, r7
 801294c:	a908      	add	r1, sp, #32
 801294e:	4798      	blx	r3
 8012950:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8012954:	6930      	ldr	r0, [r6, #16]
 8012956:	2b01      	cmp	r3, #1
 8012958:	d00a      	beq.n	8012970 <rmw_send_response+0xa8>
 801295a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801295c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012960:	f7fb fa82 	bl	800de68 <uxr_run_session_until_confirm_delivery>
 8012964:	2000      	movs	r0, #0
 8012966:	b011      	add	sp, #68	; 0x44
 8012968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801296a:	200c      	movs	r0, #12
 801296c:	b011      	add	sp, #68	; 0x44
 801296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012970:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012974:	f7fb f9e6 	bl	800dd44 <uxr_flash_output_streams>
 8012978:	2000      	movs	r0, #0
 801297a:	b011      	add	sp, #68	; 0x44
 801297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801297e:	bf00      	nop
 8012980:	08016b44 	.word	0x08016b44

08012984 <rmw_take_response>:
 8012984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012988:	4604      	mov	r4, r0
 801298a:	6800      	ldr	r0, [r0, #0]
 801298c:	4688      	mov	r8, r1
 801298e:	4617      	mov	r7, r2
 8012990:	461d      	mov	r5, r3
 8012992:	b089      	sub	sp, #36	; 0x24
 8012994:	b120      	cbz	r0, 80129a0 <rmw_take_response+0x1c>
 8012996:	4b1f      	ldr	r3, [pc, #124]	; (8012a14 <rmw_take_response+0x90>)
 8012998:	6819      	ldr	r1, [r3, #0]
 801299a:	f7ed fc49 	bl	8000230 <strcmp>
 801299e:	bb88      	cbnz	r0, 8012a04 <rmw_take_response+0x80>
 80129a0:	b10d      	cbz	r5, 80129a6 <rmw_take_response+0x22>
 80129a2:	2300      	movs	r3, #0
 80129a4:	702b      	strb	r3, [r5, #0]
 80129a6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80129aa:	f7f8 ff21 	bl	800b7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 80129ae:	4648      	mov	r0, r9
 80129b0:	f7f8 fef4 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 80129b4:	4606      	mov	r6, r0
 80129b6:	b348      	cbz	r0, 8012a0c <rmw_take_response+0x88>
 80129b8:	68c4      	ldr	r4, [r0, #12]
 80129ba:	f8d9 2014 	ldr.w	r2, [r9, #20]
 80129be:	f604 0328 	addw	r3, r4, #2088	; 0x828
 80129c2:	68d1      	ldr	r1, [r2, #12]
 80129c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c8:	e9c8 2308 	strd	r2, r3, [r8, #32]
 80129cc:	4788      	blx	r1
 80129ce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80129d2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80129d6:	f104 0110 	add.w	r1, r4, #16
 80129da:	4668      	mov	r0, sp
 80129dc:	f7fa f828 	bl	800ca30 <ucdr_init_buffer>
 80129e0:	4639      	mov	r1, r7
 80129e2:	4668      	mov	r0, sp
 80129e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80129e8:	4798      	blx	r3
 80129ea:	4631      	mov	r1, r6
 80129ec:	4604      	mov	r4, r0
 80129ee:	480a      	ldr	r0, [pc, #40]	; (8012a18 <rmw_take_response+0x94>)
 80129f0:	f7ff fe3e 	bl	8012670 <put_memory>
 80129f4:	b105      	cbz	r5, 80129f8 <rmw_take_response+0x74>
 80129f6:	702c      	strb	r4, [r5, #0]
 80129f8:	f084 0001 	eor.w	r0, r4, #1
 80129fc:	b2c0      	uxtb	r0, r0
 80129fe:	b009      	add	sp, #36	; 0x24
 8012a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a04:	200c      	movs	r0, #12
 8012a06:	b009      	add	sp, #36	; 0x24
 8012a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a0c:	2001      	movs	r0, #1
 8012a0e:	b009      	add	sp, #36	; 0x24
 8012a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a14:	08016b44 	.word	0x08016b44
 8012a18:	200088e0 	.word	0x200088e0

08012a1c <rmw_wait>:
 8012a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a20:	4698      	mov	r8, r3
 8012a22:	4607      	mov	r7, r0
 8012a24:	460e      	mov	r6, r1
 8012a26:	4691      	mov	r9, r2
 8012a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a2a:	2a00      	cmp	r2, #0
 8012a2c:	f000 8123 	beq.w	8012c76 <rmw_wait+0x25a>
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 812c 	beq.w	8012c8e <rmw_wait+0x272>
 8012a36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8012a42:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8012a46:	ebbb 0b02 	subs.w	fp, fp, r2
 8012a4a:	ea4a 6ad2 	orr.w	sl, sl, r2, lsr #27
 8012a4e:	eb6a 0a03 	sbc.w	sl, sl, r3
 8012a52:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
 8012a56:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8012a5a:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 8012a5e:	eb1c 0b02 	adds.w	fp, ip, r2
 8012a62:	eb4a 0a03 	adc.w	sl, sl, r3
 8012a66:	4aab      	ldr	r2, [pc, #684]	; (8012d14 <rmw_wait+0x2f8>)
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f7ed fec7 	bl	80007fc <__aeabi_uldivmod>
 8012a6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012a72:	2300      	movs	r3, #0
 8012a74:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8012a78:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 8012a7c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012a80:	eb1b 0400 	adds.w	r4, fp, r0
 8012a84:	eb4a 0501 	adc.w	r5, sl, r1
 8012a88:	42a2      	cmp	r2, r4
 8012a8a:	eb73 0105 	sbcs.w	r1, r3, r5
 8012a8e:	f2c0 80f0 	blt.w	8012c72 <rmw_wait+0x256>
 8012a92:	f7f8 fead 	bl	800b7f0 <rmw_uxrce_clean_expired_static_input_buffer>
 8012a96:	4ba0      	ldr	r3, [pc, #640]	; (8012d18 <rmw_wait+0x2fc>)
 8012a98:	681d      	ldr	r5, [r3, #0]
 8012a9a:	b145      	cbz	r5, 8012aae <rmw_wait+0x92>
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	68da      	ldr	r2, [r3, #12]
 8012aa6:	689b      	ldr	r3, [r3, #8]
 8012aa8:	5411      	strb	r1, [r2, r0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d1fa      	bne.n	8012aa4 <rmw_wait+0x88>
 8012aae:	f1b9 0f00 	cmp.w	r9, #0
 8012ab2:	d012      	beq.n	8012ada <rmw_wait+0xbe>
 8012ab4:	f8d9 1000 	ldr.w	r1, [r9]
 8012ab8:	b179      	cbz	r1, 8012ada <rmw_wait+0xbe>
 8012aba:	2300      	movs	r3, #0
 8012abc:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8012ac0:	f04f 0c01 	mov.w	ip, #1
 8012ac4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8012ac8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012acc:	3301      	adds	r3, #1
 8012ace:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012ad0:	4299      	cmp	r1, r3
 8012ad2:	6912      	ldr	r2, [r2, #16]
 8012ad4:	f802 c00e 	strb.w	ip, [r2, lr]
 8012ad8:	d1f6      	bne.n	8012ac8 <rmw_wait+0xac>
 8012ada:	f1b8 0f00 	cmp.w	r8, #0
 8012ade:	d012      	beq.n	8012b06 <rmw_wait+0xea>
 8012ae0:	f8d8 1000 	ldr.w	r1, [r8]
 8012ae4:	b179      	cbz	r1, 8012b06 <rmw_wait+0xea>
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8012aec:	f04f 0c01 	mov.w	ip, #1
 8012af0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012af4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012af8:	3301      	adds	r3, #1
 8012afa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012afc:	4299      	cmp	r1, r3
 8012afe:	6912      	ldr	r2, [r2, #16]
 8012b00:	f802 c00e 	strb.w	ip, [r2, lr]
 8012b04:	d1f6      	bne.n	8012af4 <rmw_wait+0xd8>
 8012b06:	b187      	cbz	r7, 8012b2a <rmw_wait+0x10e>
 8012b08:	6839      	ldr	r1, [r7, #0]
 8012b0a:	b171      	cbz	r1, 8012b2a <rmw_wait+0x10e>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8012b12:	f04f 0c01 	mov.w	ip, #1
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	6a12      	ldr	r2, [r2, #32]
 8012b20:	4299      	cmp	r1, r3
 8012b22:	6912      	ldr	r2, [r2, #16]
 8012b24:	f802 c00e 	strb.w	ip, [r2, lr]
 8012b28:	d1f6      	bne.n	8012b18 <rmw_wait+0xfc>
 8012b2a:	b355      	cbz	r5, 8012b82 <rmw_wait+0x166>
 8012b2c:	462b      	mov	r3, r5
 8012b2e:	f04f 0a00 	mov.w	sl, #0
 8012b32:	f241 51a4 	movw	r1, #5540	; 0x15a4
 8012b36:	68da      	ldr	r2, [r3, #12]
 8012b38:	689b      	ldr	r3, [r3, #8]
 8012b3a:	5c50      	ldrb	r0, [r2, r1]
 8012b3c:	4450      	add	r0, sl
 8012b3e:	fa5f fa80 	uxtb.w	sl, r0
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d1f7      	bne.n	8012b36 <rmw_wait+0x11a>
 8012b46:	f1ba 0f00 	cmp.w	sl, #0
 8012b4a:	d01a      	beq.n	8012b82 <rmw_wait+0x166>
 8012b4c:	1c63      	adds	r3, r4, #1
 8012b4e:	d00d      	beq.n	8012b6c <rmw_wait+0x150>
 8012b50:	4620      	mov	r0, r4
 8012b52:	f7ed fc39 	bl	80003c8 <__aeabi_i2f>
 8012b56:	4604      	mov	r4, r0
 8012b58:	4650      	mov	r0, sl
 8012b5a:	f7ed fc31 	bl	80003c0 <__aeabi_ui2f>
 8012b5e:	4601      	mov	r1, r0
 8012b60:	4620      	mov	r0, r4
 8012b62:	f7ed fd39 	bl	80005d8 <__aeabi_fdiv>
 8012b66:	f7ed fdd3 	bl	8000710 <__aeabi_f2iz>
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	f241 5aa4 	movw	sl, #5540	; 0x15a4
 8012b70:	68e8      	ldr	r0, [r5, #12]
 8012b72:	f810 300a 	ldrb.w	r3, [r0, sl]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	f040 808c 	bne.w	8012c94 <rmw_wait+0x278>
 8012b7c:	68ad      	ldr	r5, [r5, #8]
 8012b7e:	2d00      	cmp	r5, #0
 8012b80:	d1f6      	bne.n	8012b70 <rmw_wait+0x154>
 8012b82:	f1b9 0f00 	cmp.w	r9, #0
 8012b86:	f000 80a3 	beq.w	8012cd0 <rmw_wait+0x2b4>
 8012b8a:	f8d9 5000 	ldr.w	r5, [r9]
 8012b8e:	2d00      	cmp	r5, #0
 8012b90:	f000 808a 	beq.w	8012ca8 <rmw_wait+0x28c>
 8012b94:	2400      	movs	r4, #0
 8012b96:	4625      	mov	r5, r4
 8012b98:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012b9c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012ba0:	f7f8 fdfc 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8012ba4:	2800      	cmp	r0, #0
 8012ba6:	d054      	beq.n	8012c52 <rmw_wait+0x236>
 8012ba8:	f8d9 3000 	ldr.w	r3, [r9]
 8012bac:	3401      	adds	r4, #1
 8012bae:	42a3      	cmp	r3, r4
 8012bb0:	f04f 0501 	mov.w	r5, #1
 8012bb4:	d8f0      	bhi.n	8012b98 <rmw_wait+0x17c>
 8012bb6:	f1b8 0f00 	cmp.w	r8, #0
 8012bba:	d012      	beq.n	8012be2 <rmw_wait+0x1c6>
 8012bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8012bc0:	b17b      	cbz	r3, 8012be2 <rmw_wait+0x1c6>
 8012bc2:	2400      	movs	r4, #0
 8012bc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012bc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012bcc:	f7f8 fde6 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d046      	beq.n	8012c62 <rmw_wait+0x246>
 8012bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8012bd8:	3401      	adds	r4, #1
 8012bda:	42a3      	cmp	r3, r4
 8012bdc:	f04f 0501 	mov.w	r5, #1
 8012be0:	d8f0      	bhi.n	8012bc4 <rmw_wait+0x1a8>
 8012be2:	b1df      	cbz	r7, 8012c1c <rmw_wait+0x200>
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	b1cb      	cbz	r3, 8012c1c <rmw_wait+0x200>
 8012be8:	2400      	movs	r4, #0
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012bf0:	f7f8 fdd4 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8012bf4:	b158      	cbz	r0, 8012c0e <rmw_wait+0x1f2>
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	3401      	adds	r4, #1
 8012bfa:	42a3      	cmp	r3, r4
 8012bfc:	d961      	bls.n	8012cc2 <rmw_wait+0x2a6>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2501      	movs	r5, #1
 8012c02:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c06:	f7f8 fdc9 	bl	800b79c <rmw_uxrce_find_static_input_buffer_by_owner>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d1f3      	bne.n	8012bf6 <rmw_wait+0x1da>
 8012c0e:	e9d7 3200 	ldrd	r3, r2, [r7]
 8012c12:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012c16:	3401      	adds	r4, #1
 8012c18:	42a3      	cmp	r3, r4
 8012c1a:	d8e6      	bhi.n	8012bea <rmw_wait+0x1ce>
 8012c1c:	b1a6      	cbz	r6, 8012c48 <rmw_wait+0x22c>
 8012c1e:	6834      	ldr	r4, [r6, #0]
 8012c20:	b194      	cbz	r4, 8012c48 <rmw_wait+0x22c>
 8012c22:	2300      	movs	r3, #0
 8012c24:	461f      	mov	r7, r3
 8012c26:	e004      	b.n	8012c32 <rmw_wait+0x216>
 8012c28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	42a3      	cmp	r3, r4
 8012c30:	d00a      	beq.n	8012c48 <rmw_wait+0x22c>
 8012c32:	6870      	ldr	r0, [r6, #4]
 8012c34:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8012c38:	7c0a      	ldrb	r2, [r1, #16]
 8012c3a:	2a00      	cmp	r2, #0
 8012c3c:	d0f4      	beq.n	8012c28 <rmw_wait+0x20c>
 8012c3e:	3301      	adds	r3, #1
 8012c40:	42a3      	cmp	r3, r4
 8012c42:	4615      	mov	r5, r2
 8012c44:	740f      	strb	r7, [r1, #16]
 8012c46:	d1f4      	bne.n	8012c32 <rmw_wait+0x216>
 8012c48:	2d00      	cmp	r5, #0
 8012c4a:	d037      	beq.n	8012cbc <rmw_wait+0x2a0>
 8012c4c:	2000      	movs	r0, #0
 8012c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c52:	e9d9 3200 	ldrd	r3, r2, [r9]
 8012c56:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012c5a:	3401      	adds	r4, #1
 8012c5c:	42a3      	cmp	r3, r4
 8012c5e:	d89b      	bhi.n	8012b98 <rmw_wait+0x17c>
 8012c60:	e7a9      	b.n	8012bb6 <rmw_wait+0x19a>
 8012c62:	e9d8 3200 	ldrd	r3, r2, [r8]
 8012c66:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012c6a:	3401      	adds	r4, #1
 8012c6c:	429c      	cmp	r4, r3
 8012c6e:	d3a9      	bcc.n	8012bc4 <rmw_wait+0x1a8>
 8012c70:	e7b7      	b.n	8012be2 <rmw_wait+0x1c6>
 8012c72:	4614      	mov	r4, r2
 8012c74:	e70d      	b.n	8012a92 <rmw_wait+0x76>
 8012c76:	f1b8 0f00 	cmp.w	r8, #0
 8012c7a:	f47f aed9 	bne.w	8012a30 <rmw_wait+0x14>
 8012c7e:	2800      	cmp	r0, #0
 8012c80:	f47f aed6 	bne.w	8012a30 <rmw_wait+0x14>
 8012c84:	2900      	cmp	r1, #0
 8012c86:	d0e1      	beq.n	8012c4c <rmw_wait+0x230>
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f47f aed4 	bne.w	8012a36 <rmw_wait+0x1a>
 8012c8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012c92:	e6fe      	b.n	8012a92 <rmw_wait+0x76>
 8012c94:	4621      	mov	r1, r4
 8012c96:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c9a:	f7fb f8c5 	bl	800de28 <uxr_run_session_until_data>
 8012c9e:	68ad      	ldr	r5, [r5, #8]
 8012ca0:	2d00      	cmp	r5, #0
 8012ca2:	f47f af65 	bne.w	8012b70 <rmw_wait+0x154>
 8012ca6:	e76c      	b.n	8012b82 <rmw_wait+0x166>
 8012ca8:	f1b8 0f00 	cmp.w	r8, #0
 8012cac:	d11d      	bne.n	8012cea <rmw_wait+0x2ce>
 8012cae:	b34f      	cbz	r7, 8012d04 <rmw_wait+0x2e8>
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	4645      	mov	r5, r8
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d197      	bne.n	8012be8 <rmw_wait+0x1cc>
 8012cb8:	2e00      	cmp	r6, #0
 8012cba:	d1b0      	bne.n	8012c1e <rmw_wait+0x202>
 8012cbc:	2002      	movs	r0, #2
 8012cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cc2:	2e00      	cmp	r6, #0
 8012cc4:	d0c2      	beq.n	8012c4c <rmw_wait+0x230>
 8012cc6:	6834      	ldr	r4, [r6, #0]
 8012cc8:	2501      	movs	r5, #1
 8012cca:	2c00      	cmp	r4, #0
 8012ccc:	d1a9      	bne.n	8012c22 <rmw_wait+0x206>
 8012cce:	e7bd      	b.n	8012c4c <rmw_wait+0x230>
 8012cd0:	f1b8 0f00 	cmp.w	r8, #0
 8012cd4:	d0eb      	beq.n	8012cae <rmw_wait+0x292>
 8012cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8012cda:	464d      	mov	r5, r9
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f47f af70 	bne.w	8012bc2 <rmw_wait+0x1a6>
 8012ce2:	2f00      	cmp	r7, #0
 8012ce4:	f47f af7e 	bne.w	8012be4 <rmw_wait+0x1c8>
 8012ce8:	e008      	b.n	8012cfc <rmw_wait+0x2e0>
 8012cea:	f8d8 3000 	ldr.w	r3, [r8]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	f47f af67 	bne.w	8012bc2 <rmw_wait+0x1a6>
 8012cf4:	461d      	mov	r5, r3
 8012cf6:	2f00      	cmp	r7, #0
 8012cf8:	f47f af74 	bne.w	8012be4 <rmw_wait+0x1c8>
 8012cfc:	463d      	mov	r5, r7
 8012cfe:	2e00      	cmp	r6, #0
 8012d00:	d18d      	bne.n	8012c1e <rmw_wait+0x202>
 8012d02:	e7db      	b.n	8012cbc <rmw_wait+0x2a0>
 8012d04:	2e00      	cmp	r6, #0
 8012d06:	d0d9      	beq.n	8012cbc <rmw_wait+0x2a0>
 8012d08:	6834      	ldr	r4, [r6, #0]
 8012d0a:	463d      	mov	r5, r7
 8012d0c:	2c00      	cmp	r4, #0
 8012d0e:	d188      	bne.n	8012c22 <rmw_wait+0x206>
 8012d10:	e7d4      	b.n	8012cbc <rmw_wait+0x2a0>
 8012d12:	bf00      	nop
 8012d14:	000f4240 	.word	0x000f4240
 8012d18:	2000ba88 	.word	0x2000ba88

08012d1c <rmw_create_wait_set>:
 8012d1c:	b508      	push	{r3, lr}
 8012d1e:	4803      	ldr	r0, [pc, #12]	; (8012d2c <rmw_create_wait_set+0x10>)
 8012d20:	f7ff fc96 	bl	8012650 <get_memory>
 8012d24:	b108      	cbz	r0, 8012d2a <rmw_create_wait_set+0xe>
 8012d26:	68c0      	ldr	r0, [r0, #12]
 8012d28:	3010      	adds	r0, #16
 8012d2a:	bd08      	pop	{r3, pc}
 8012d2c:	2000d260 	.word	0x2000d260

08012d30 <rmw_destroy_wait_set>:
 8012d30:	b508      	push	{r3, lr}
 8012d32:	4b08      	ldr	r3, [pc, #32]	; (8012d54 <rmw_destroy_wait_set+0x24>)
 8012d34:	6819      	ldr	r1, [r3, #0]
 8012d36:	b911      	cbnz	r1, 8012d3e <rmw_destroy_wait_set+0xe>
 8012d38:	e00a      	b.n	8012d50 <rmw_destroy_wait_set+0x20>
 8012d3a:	6889      	ldr	r1, [r1, #8]
 8012d3c:	b141      	cbz	r1, 8012d50 <rmw_destroy_wait_set+0x20>
 8012d3e:	68cb      	ldr	r3, [r1, #12]
 8012d40:	3310      	adds	r3, #16
 8012d42:	4298      	cmp	r0, r3
 8012d44:	d1f9      	bne.n	8012d3a <rmw_destroy_wait_set+0xa>
 8012d46:	4803      	ldr	r0, [pc, #12]	; (8012d54 <rmw_destroy_wait_set+0x24>)
 8012d48:	f7ff fc92 	bl	8012670 <put_memory>
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	bd08      	pop	{r3, pc}
 8012d50:	2001      	movs	r0, #1
 8012d52:	bd08      	pop	{r3, pc}
 8012d54:	2000d260 	.word	0x2000d260

08012d58 <ucdr_serialize_endian_array_char>:
 8012d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	461e      	mov	r6, r3
 8012d60:	4690      	mov	r8, r2
 8012d62:	4604      	mov	r4, r0
 8012d64:	f7f9 fe12 	bl	800c98c <ucdr_check_buffer_available_for>
 8012d68:	b9e0      	cbnz	r0, 8012da4 <ucdr_serialize_endian_array_char+0x4c>
 8012d6a:	4637      	mov	r7, r6
 8012d6c:	e00a      	b.n	8012d84 <ucdr_serialize_endian_array_char+0x2c>
 8012d6e:	462a      	mov	r2, r5
 8012d70:	68a0      	ldr	r0, [r4, #8]
 8012d72:	f001 f857 	bl	8013e24 <memcpy>
 8012d76:	68a2      	ldr	r2, [r4, #8]
 8012d78:	6923      	ldr	r3, [r4, #16]
 8012d7a:	442a      	add	r2, r5
 8012d7c:	442b      	add	r3, r5
 8012d7e:	1b7f      	subs	r7, r7, r5
 8012d80:	60a2      	str	r2, [r4, #8]
 8012d82:	6123      	str	r3, [r4, #16]
 8012d84:	4639      	mov	r1, r7
 8012d86:	2201      	movs	r2, #1
 8012d88:	4620      	mov	r0, r4
 8012d8a:	f7f9 fe87 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 8012d8e:	1bf1      	subs	r1, r6, r7
 8012d90:	4605      	mov	r5, r0
 8012d92:	4441      	add	r1, r8
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d1ea      	bne.n	8012d6e <ucdr_serialize_endian_array_char+0x16>
 8012d98:	2301      	movs	r3, #1
 8012d9a:	7da0      	ldrb	r0, [r4, #22]
 8012d9c:	7563      	strb	r3, [r4, #21]
 8012d9e:	4058      	eors	r0, r3
 8012da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da4:	4632      	mov	r2, r6
 8012da6:	4641      	mov	r1, r8
 8012da8:	68a0      	ldr	r0, [r4, #8]
 8012daa:	f001 f83b 	bl	8013e24 <memcpy>
 8012dae:	68a2      	ldr	r2, [r4, #8]
 8012db0:	6923      	ldr	r3, [r4, #16]
 8012db2:	4432      	add	r2, r6
 8012db4:	4433      	add	r3, r6
 8012db6:	60a2      	str	r2, [r4, #8]
 8012db8:	6123      	str	r3, [r4, #16]
 8012dba:	e7ed      	b.n	8012d98 <ucdr_serialize_endian_array_char+0x40>

08012dbc <ucdr_deserialize_endian_array_char>:
 8012dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc0:	4619      	mov	r1, r3
 8012dc2:	461e      	mov	r6, r3
 8012dc4:	4690      	mov	r8, r2
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	f7f9 fde0 	bl	800c98c <ucdr_check_buffer_available_for>
 8012dcc:	b9e0      	cbnz	r0, 8012e08 <ucdr_deserialize_endian_array_char+0x4c>
 8012dce:	4637      	mov	r7, r6
 8012dd0:	e00a      	b.n	8012de8 <ucdr_deserialize_endian_array_char+0x2c>
 8012dd2:	462a      	mov	r2, r5
 8012dd4:	68a1      	ldr	r1, [r4, #8]
 8012dd6:	f001 f825 	bl	8013e24 <memcpy>
 8012dda:	68a2      	ldr	r2, [r4, #8]
 8012ddc:	6923      	ldr	r3, [r4, #16]
 8012dde:	442a      	add	r2, r5
 8012de0:	442b      	add	r3, r5
 8012de2:	1b7f      	subs	r7, r7, r5
 8012de4:	60a2      	str	r2, [r4, #8]
 8012de6:	6123      	str	r3, [r4, #16]
 8012de8:	2201      	movs	r2, #1
 8012dea:	4639      	mov	r1, r7
 8012dec:	4620      	mov	r0, r4
 8012dee:	f7f9 fe55 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 8012df2:	4605      	mov	r5, r0
 8012df4:	1bf0      	subs	r0, r6, r7
 8012df6:	4440      	add	r0, r8
 8012df8:	2d00      	cmp	r5, #0
 8012dfa:	d1ea      	bne.n	8012dd2 <ucdr_deserialize_endian_array_char+0x16>
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	7da0      	ldrb	r0, [r4, #22]
 8012e00:	7563      	strb	r3, [r4, #21]
 8012e02:	4058      	eors	r0, r3
 8012e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e08:	4632      	mov	r2, r6
 8012e0a:	4640      	mov	r0, r8
 8012e0c:	68a1      	ldr	r1, [r4, #8]
 8012e0e:	f001 f809 	bl	8013e24 <memcpy>
 8012e12:	68a2      	ldr	r2, [r4, #8]
 8012e14:	6923      	ldr	r3, [r4, #16]
 8012e16:	4432      	add	r2, r6
 8012e18:	4433      	add	r3, r6
 8012e1a:	60a2      	str	r2, [r4, #8]
 8012e1c:	6123      	str	r3, [r4, #16]
 8012e1e:	e7ed      	b.n	8012dfc <ucdr_deserialize_endian_array_char+0x40>

08012e20 <ucdr_serialize_array_uint8_t>:
 8012e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e24:	4688      	mov	r8, r1
 8012e26:	4611      	mov	r1, r2
 8012e28:	4616      	mov	r6, r2
 8012e2a:	4604      	mov	r4, r0
 8012e2c:	f7f9 fdae 	bl	800c98c <ucdr_check_buffer_available_for>
 8012e30:	b9e0      	cbnz	r0, 8012e6c <ucdr_serialize_array_uint8_t+0x4c>
 8012e32:	4637      	mov	r7, r6
 8012e34:	e00a      	b.n	8012e4c <ucdr_serialize_array_uint8_t+0x2c>
 8012e36:	462a      	mov	r2, r5
 8012e38:	68a0      	ldr	r0, [r4, #8]
 8012e3a:	f000 fff3 	bl	8013e24 <memcpy>
 8012e3e:	68a2      	ldr	r2, [r4, #8]
 8012e40:	6923      	ldr	r3, [r4, #16]
 8012e42:	442a      	add	r2, r5
 8012e44:	442b      	add	r3, r5
 8012e46:	1b7f      	subs	r7, r7, r5
 8012e48:	60a2      	str	r2, [r4, #8]
 8012e4a:	6123      	str	r3, [r4, #16]
 8012e4c:	4639      	mov	r1, r7
 8012e4e:	2201      	movs	r2, #1
 8012e50:	4620      	mov	r0, r4
 8012e52:	f7f9 fe23 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 8012e56:	1bf1      	subs	r1, r6, r7
 8012e58:	4605      	mov	r5, r0
 8012e5a:	4441      	add	r1, r8
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	d1ea      	bne.n	8012e36 <ucdr_serialize_array_uint8_t+0x16>
 8012e60:	2301      	movs	r3, #1
 8012e62:	7da0      	ldrb	r0, [r4, #22]
 8012e64:	7563      	strb	r3, [r4, #21]
 8012e66:	4058      	eors	r0, r3
 8012e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e6c:	4632      	mov	r2, r6
 8012e6e:	4641      	mov	r1, r8
 8012e70:	68a0      	ldr	r0, [r4, #8]
 8012e72:	f000 ffd7 	bl	8013e24 <memcpy>
 8012e76:	68a3      	ldr	r3, [r4, #8]
 8012e78:	6922      	ldr	r2, [r4, #16]
 8012e7a:	4433      	add	r3, r6
 8012e7c:	4432      	add	r2, r6
 8012e7e:	60a3      	str	r3, [r4, #8]
 8012e80:	6122      	str	r2, [r4, #16]
 8012e82:	e7ed      	b.n	8012e60 <ucdr_serialize_array_uint8_t+0x40>

08012e84 <ucdr_serialize_endian_array_uint8_t>:
 8012e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e88:	4619      	mov	r1, r3
 8012e8a:	461e      	mov	r6, r3
 8012e8c:	4690      	mov	r8, r2
 8012e8e:	4604      	mov	r4, r0
 8012e90:	f7f9 fd7c 	bl	800c98c <ucdr_check_buffer_available_for>
 8012e94:	b9e0      	cbnz	r0, 8012ed0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012e96:	4637      	mov	r7, r6
 8012e98:	e00a      	b.n	8012eb0 <ucdr_serialize_endian_array_uint8_t+0x2c>
 8012e9a:	462a      	mov	r2, r5
 8012e9c:	68a0      	ldr	r0, [r4, #8]
 8012e9e:	f000 ffc1 	bl	8013e24 <memcpy>
 8012ea2:	68a2      	ldr	r2, [r4, #8]
 8012ea4:	6923      	ldr	r3, [r4, #16]
 8012ea6:	442a      	add	r2, r5
 8012ea8:	442b      	add	r3, r5
 8012eaa:	1b7f      	subs	r7, r7, r5
 8012eac:	60a2      	str	r2, [r4, #8]
 8012eae:	6123      	str	r3, [r4, #16]
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f7f9 fdf1 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 8012eba:	1bf1      	subs	r1, r6, r7
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	4441      	add	r1, r8
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d1ea      	bne.n	8012e9a <ucdr_serialize_endian_array_uint8_t+0x16>
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	7da0      	ldrb	r0, [r4, #22]
 8012ec8:	7563      	strb	r3, [r4, #21]
 8012eca:	4058      	eors	r0, r3
 8012ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed0:	4632      	mov	r2, r6
 8012ed2:	4641      	mov	r1, r8
 8012ed4:	68a0      	ldr	r0, [r4, #8]
 8012ed6:	f000 ffa5 	bl	8013e24 <memcpy>
 8012eda:	68a2      	ldr	r2, [r4, #8]
 8012edc:	6923      	ldr	r3, [r4, #16]
 8012ede:	4432      	add	r2, r6
 8012ee0:	4433      	add	r3, r6
 8012ee2:	60a2      	str	r2, [r4, #8]
 8012ee4:	6123      	str	r3, [r4, #16]
 8012ee6:	e7ed      	b.n	8012ec4 <ucdr_serialize_endian_array_uint8_t+0x40>

08012ee8 <ucdr_deserialize_array_uint8_t>:
 8012ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eec:	4688      	mov	r8, r1
 8012eee:	4611      	mov	r1, r2
 8012ef0:	4616      	mov	r6, r2
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	f7f9 fd4a 	bl	800c98c <ucdr_check_buffer_available_for>
 8012ef8:	b9e0      	cbnz	r0, 8012f34 <ucdr_deserialize_array_uint8_t+0x4c>
 8012efa:	4637      	mov	r7, r6
 8012efc:	e00a      	b.n	8012f14 <ucdr_deserialize_array_uint8_t+0x2c>
 8012efe:	462a      	mov	r2, r5
 8012f00:	68a1      	ldr	r1, [r4, #8]
 8012f02:	f000 ff8f 	bl	8013e24 <memcpy>
 8012f06:	68a2      	ldr	r2, [r4, #8]
 8012f08:	6923      	ldr	r3, [r4, #16]
 8012f0a:	442a      	add	r2, r5
 8012f0c:	442b      	add	r3, r5
 8012f0e:	1b7f      	subs	r7, r7, r5
 8012f10:	60a2      	str	r2, [r4, #8]
 8012f12:	6123      	str	r3, [r4, #16]
 8012f14:	2201      	movs	r2, #1
 8012f16:	4639      	mov	r1, r7
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f7f9 fdbf 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 8012f1e:	4605      	mov	r5, r0
 8012f20:	1bf0      	subs	r0, r6, r7
 8012f22:	4440      	add	r0, r8
 8012f24:	2d00      	cmp	r5, #0
 8012f26:	d1ea      	bne.n	8012efe <ucdr_deserialize_array_uint8_t+0x16>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	7da0      	ldrb	r0, [r4, #22]
 8012f2c:	7563      	strb	r3, [r4, #21]
 8012f2e:	4058      	eors	r0, r3
 8012f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f34:	4632      	mov	r2, r6
 8012f36:	4640      	mov	r0, r8
 8012f38:	68a1      	ldr	r1, [r4, #8]
 8012f3a:	f000 ff73 	bl	8013e24 <memcpy>
 8012f3e:	68a3      	ldr	r3, [r4, #8]
 8012f40:	6922      	ldr	r2, [r4, #16]
 8012f42:	4433      	add	r3, r6
 8012f44:	4432      	add	r2, r6
 8012f46:	60a3      	str	r3, [r4, #8]
 8012f48:	6122      	str	r2, [r4, #16]
 8012f4a:	e7ed      	b.n	8012f28 <ucdr_deserialize_array_uint8_t+0x40>

08012f4c <ucdr_deserialize_endian_array_uint8_t>:
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	4619      	mov	r1, r3
 8012f52:	461e      	mov	r6, r3
 8012f54:	4690      	mov	r8, r2
 8012f56:	4604      	mov	r4, r0
 8012f58:	f7f9 fd18 	bl	800c98c <ucdr_check_buffer_available_for>
 8012f5c:	b9e0      	cbnz	r0, 8012f98 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012f5e:	4637      	mov	r7, r6
 8012f60:	e00a      	b.n	8012f78 <ucdr_deserialize_endian_array_uint8_t+0x2c>
 8012f62:	462a      	mov	r2, r5
 8012f64:	68a1      	ldr	r1, [r4, #8]
 8012f66:	f000 ff5d 	bl	8013e24 <memcpy>
 8012f6a:	68a2      	ldr	r2, [r4, #8]
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	442a      	add	r2, r5
 8012f70:	442b      	add	r3, r5
 8012f72:	1b7f      	subs	r7, r7, r5
 8012f74:	60a2      	str	r2, [r4, #8]
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	2201      	movs	r2, #1
 8012f7a:	4639      	mov	r1, r7
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f7f9 fd8d 	bl	800ca9c <ucdr_check_final_buffer_behavior_array>
 8012f82:	4605      	mov	r5, r0
 8012f84:	1bf0      	subs	r0, r6, r7
 8012f86:	4440      	add	r0, r8
 8012f88:	2d00      	cmp	r5, #0
 8012f8a:	d1ea      	bne.n	8012f62 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	7da0      	ldrb	r0, [r4, #22]
 8012f90:	7563      	strb	r3, [r4, #21]
 8012f92:	4058      	eors	r0, r3
 8012f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f98:	4632      	mov	r2, r6
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	68a1      	ldr	r1, [r4, #8]
 8012f9e:	f000 ff41 	bl	8013e24 <memcpy>
 8012fa2:	68a2      	ldr	r2, [r4, #8]
 8012fa4:	6923      	ldr	r3, [r4, #16]
 8012fa6:	4432      	add	r2, r6
 8012fa8:	4433      	add	r3, r6
 8012faa:	60a2      	str	r2, [r4, #8]
 8012fac:	6123      	str	r3, [r4, #16]
 8012fae:	e7ed      	b.n	8012f8c <ucdr_deserialize_endian_array_uint8_t+0x40>

08012fb0 <ucdr_serialize_sequence_char>:
 8012fb0:	b570      	push	{r4, r5, r6, lr}
 8012fb2:	4615      	mov	r5, r2
 8012fb4:	460e      	mov	r6, r1
 8012fb6:	7d01      	ldrb	r1, [r0, #20]
 8012fb8:	4604      	mov	r4, r0
 8012fba:	f7f9 f83d 	bl	800c038 <ucdr_serialize_endian_uint32_t>
 8012fbe:	b90d      	cbnz	r5, 8012fc4 <ucdr_serialize_sequence_char+0x14>
 8012fc0:	2001      	movs	r0, #1
 8012fc2:	bd70      	pop	{r4, r5, r6, pc}
 8012fc4:	462b      	mov	r3, r5
 8012fc6:	4632      	mov	r2, r6
 8012fc8:	4620      	mov	r0, r4
 8012fca:	7d21      	ldrb	r1, [r4, #20]
 8012fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fd0:	f7ff bec2 	b.w	8012d58 <ucdr_serialize_endian_array_char>

08012fd4 <ucdr_deserialize_sequence_char>:
 8012fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd8:	461d      	mov	r5, r3
 8012fda:	4616      	mov	r6, r2
 8012fdc:	460f      	mov	r7, r1
 8012fde:	461a      	mov	r2, r3
 8012fe0:	7d01      	ldrb	r1, [r0, #20]
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	f7f9 f950 	bl	800c288 <ucdr_deserialize_endian_uint32_t>
 8012fe8:	682b      	ldr	r3, [r5, #0]
 8012fea:	429e      	cmp	r6, r3
 8012fec:	bf3c      	itt	cc
 8012fee:	2201      	movcc	r2, #1
 8012ff0:	75a2      	strbcc	r2, [r4, #22]
 8012ff2:	b913      	cbnz	r3, 8012ffa <ucdr_deserialize_sequence_char+0x26>
 8012ff4:	2001      	movs	r0, #1
 8012ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffa:	463a      	mov	r2, r7
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	7d21      	ldrb	r1, [r4, #20]
 8013000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013004:	f7ff beda 	b.w	8012dbc <ucdr_deserialize_endian_array_char>

08013008 <ucdr_serialize_sequence_uint8_t>:
 8013008:	b570      	push	{r4, r5, r6, lr}
 801300a:	4615      	mov	r5, r2
 801300c:	460e      	mov	r6, r1
 801300e:	7d01      	ldrb	r1, [r0, #20]
 8013010:	4604      	mov	r4, r0
 8013012:	f7f9 f811 	bl	800c038 <ucdr_serialize_endian_uint32_t>
 8013016:	b90d      	cbnz	r5, 801301c <ucdr_serialize_sequence_uint8_t+0x14>
 8013018:	2001      	movs	r0, #1
 801301a:	bd70      	pop	{r4, r5, r6, pc}
 801301c:	462b      	mov	r3, r5
 801301e:	4632      	mov	r2, r6
 8013020:	4620      	mov	r0, r4
 8013022:	7d21      	ldrb	r1, [r4, #20]
 8013024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013028:	f7ff bf2c 	b.w	8012e84 <ucdr_serialize_endian_array_uint8_t>

0801302c <ucdr_deserialize_sequence_uint8_t>:
 801302c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013030:	461d      	mov	r5, r3
 8013032:	4616      	mov	r6, r2
 8013034:	460f      	mov	r7, r1
 8013036:	461a      	mov	r2, r3
 8013038:	7d01      	ldrb	r1, [r0, #20]
 801303a:	4604      	mov	r4, r0
 801303c:	f7f9 f924 	bl	800c288 <ucdr_deserialize_endian_uint32_t>
 8013040:	682b      	ldr	r3, [r5, #0]
 8013042:	429e      	cmp	r6, r3
 8013044:	bf3c      	itt	cc
 8013046:	2201      	movcc	r2, #1
 8013048:	75a2      	strbcc	r2, [r4, #22]
 801304a:	b913      	cbnz	r3, 8013052 <ucdr_deserialize_sequence_uint8_t+0x26>
 801304c:	2001      	movs	r0, #1
 801304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013052:	463a      	mov	r2, r7
 8013054:	4620      	mov	r0, r4
 8013056:	7d21      	ldrb	r1, [r4, #20]
 8013058:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801305c:	f7ff bf76 	b.w	8012f4c <ucdr_deserialize_endian_array_uint8_t>

08013060 <ucdr_serialize_string>:
 8013060:	b538      	push	{r3, r4, r5, lr}
 8013062:	4605      	mov	r5, r0
 8013064:	4608      	mov	r0, r1
 8013066:	460c      	mov	r4, r1
 8013068:	f7ed f8ec 	bl	8000244 <strlen>
 801306c:	4602      	mov	r2, r0
 801306e:	4621      	mov	r1, r4
 8013070:	4628      	mov	r0, r5
 8013072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013076:	3201      	adds	r2, #1
 8013078:	f7ff bf9a 	b.w	8012fb0 <ucdr_serialize_sequence_char>

0801307c <ucdr_deserialize_string>:
 801307c:	b500      	push	{lr}
 801307e:	b083      	sub	sp, #12
 8013080:	ab01      	add	r3, sp, #4
 8013082:	f7ff ffa7 	bl	8012fd4 <ucdr_deserialize_sequence_char>
 8013086:	b003      	add	sp, #12
 8013088:	f85d fb04 	ldr.w	pc, [sp], #4

0801308c <uxr_init_input_best_effort_stream>:
 801308c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013090:	8003      	strh	r3, [r0, #0]
 8013092:	4770      	bx	lr

08013094 <uxr_reset_input_best_effort_stream>:
 8013094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013098:	8003      	strh	r3, [r0, #0]
 801309a:	4770      	bx	lr

0801309c <uxr_receive_best_effort_message>:
 801309c:	b538      	push	{r3, r4, r5, lr}
 801309e:	4604      	mov	r4, r0
 80130a0:	8800      	ldrh	r0, [r0, #0]
 80130a2:	460d      	mov	r5, r1
 80130a4:	f000 fd20 	bl	8013ae8 <uxr_seq_num_cmp>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80130b0:	bfb8      	it	lt
 80130b2:	8025      	strhlt	r5, [r4, #0]
 80130b4:	bd38      	pop	{r3, r4, r5, pc}
 80130b6:	bf00      	nop

080130b8 <on_full_input_buffer>:
 80130b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ba:	890f      	ldrh	r7, [r1, #8]
 80130bc:	460d      	mov	r5, r1
 80130be:	c912      	ldmia	r1, {r1, r4}
 80130c0:	fbb4 f4f7 	udiv	r4, r4, r7
 80130c4:	6802      	ldr	r2, [r0, #0]
 80130c6:	4606      	mov	r6, r0
 80130c8:	1a53      	subs	r3, r2, r1
 80130ca:	fbb3 f3f4 	udiv	r3, r3, r4
 80130ce:	3301      	adds	r3, #1
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	fbb3 f2f7 	udiv	r2, r3, r7
 80130d6:	fb07 3312 	mls	r3, r7, r2, r3
 80130da:	b29b      	uxth	r3, r3
 80130dc:	fb04 f403 	mul.w	r4, r4, r3
 80130e0:	7d28      	ldrb	r0, [r5, #20]
 80130e2:	1d23      	adds	r3, r4, #4
 80130e4:	440b      	add	r3, r1
 80130e6:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80130ea:	b110      	cbz	r0, 80130f2 <on_full_input_buffer+0x3a>
 80130ec:	2000      	movs	r0, #0
 80130ee:	f843 0c04 	str.w	r0, [r3, #-4]
 80130f2:	2a03      	cmp	r2, #3
 80130f4:	d801      	bhi.n	80130fa <on_full_input_buffer+0x42>
 80130f6:	2001      	movs	r0, #1
 80130f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130fa:	3408      	adds	r4, #8
 80130fc:	4630      	mov	r0, r6
 80130fe:	6933      	ldr	r3, [r6, #16]
 8013100:	4421      	add	r1, r4
 8013102:	3a04      	subs	r2, #4
 8013104:	f7f9 fc8c 	bl	800ca20 <ucdr_init_buffer_origin>
 8013108:	4630      	mov	r0, r6
 801310a:	462a      	mov	r2, r5
 801310c:	4902      	ldr	r1, [pc, #8]	; (8013118 <on_full_input_buffer+0x60>)
 801310e:	f7f9 fc65 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 8013112:	2000      	movs	r0, #0
 8013114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013116:	bf00      	nop
 8013118:	080130b9 	.word	0x080130b9

0801311c <uxr_init_input_reliable_stream>:
 801311c:	b430      	push	{r4, r5}
 801311e:	2500      	movs	r5, #0
 8013120:	9c02      	ldr	r4, [sp, #8]
 8013122:	6001      	str	r1, [r0, #0]
 8013124:	8103      	strh	r3, [r0, #8]
 8013126:	6042      	str	r2, [r0, #4]
 8013128:	6104      	str	r4, [r0, #16]
 801312a:	7505      	strb	r5, [r0, #20]
 801312c:	b1ab      	cbz	r3, 801315a <uxr_init_input_reliable_stream+0x3e>
 801312e:	600d      	str	r5, [r1, #0]
 8013130:	8901      	ldrh	r1, [r0, #8]
 8013132:	2901      	cmp	r1, #1
 8013134:	d911      	bls.n	801315a <uxr_init_input_reliable_stream+0x3e>
 8013136:	2201      	movs	r2, #1
 8013138:	fbb2 f3f1 	udiv	r3, r2, r1
 801313c:	6844      	ldr	r4, [r0, #4]
 801313e:	fb01 2313 	mls	r3, r1, r3, r2
 8013142:	fbb4 f1f1 	udiv	r1, r4, r1
 8013146:	b29b      	uxth	r3, r3
 8013148:	fb03 f301 	mul.w	r3, r3, r1
 801314c:	6801      	ldr	r1, [r0, #0]
 801314e:	3201      	adds	r2, #1
 8013150:	50cd      	str	r5, [r1, r3]
 8013152:	8901      	ldrh	r1, [r0, #8]
 8013154:	b292      	uxth	r2, r2
 8013156:	4291      	cmp	r1, r2
 8013158:	d8ee      	bhi.n	8013138 <uxr_init_input_reliable_stream+0x1c>
 801315a:	bc30      	pop	{r4, r5}
 801315c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013160:	60c3      	str	r3, [r0, #12]
 8013162:	4770      	bx	lr

08013164 <uxr_reset_input_reliable_stream>:
 8013164:	8902      	ldrh	r2, [r0, #8]
 8013166:	b1ca      	cbz	r2, 801319c <uxr_reset_input_reliable_stream+0x38>
 8013168:	b470      	push	{r4, r5, r6}
 801316a:	2500      	movs	r5, #0
 801316c:	4629      	mov	r1, r5
 801316e:	462e      	mov	r6, r5
 8013170:	fbb1 f3f2 	udiv	r3, r1, r2
 8013174:	6844      	ldr	r4, [r0, #4]
 8013176:	fb02 1313 	mls	r3, r2, r3, r1
 801317a:	fbb4 f2f2 	udiv	r2, r4, r2
 801317e:	b29b      	uxth	r3, r3
 8013180:	fb03 f302 	mul.w	r3, r3, r2
 8013184:	6802      	ldr	r2, [r0, #0]
 8013186:	3501      	adds	r5, #1
 8013188:	50d6      	str	r6, [r2, r3]
 801318a:	8902      	ldrh	r2, [r0, #8]
 801318c:	b2a9      	uxth	r1, r5
 801318e:	428a      	cmp	r2, r1
 8013190:	d8ee      	bhi.n	8013170 <uxr_reset_input_reliable_stream+0xc>
 8013192:	bc70      	pop	{r4, r5, r6}
 8013194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013198:	60c3      	str	r3, [r0, #12]
 801319a:	4770      	bx	lr
 801319c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131a0:	60c3      	str	r3, [r0, #12]
 80131a2:	4770      	bx	lr

080131a4 <uxr_receive_reliable_message>:
 80131a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131a8:	4604      	mov	r4, r0
 80131aa:	460d      	mov	r5, r1
 80131ac:	8901      	ldrh	r1, [r0, #8]
 80131ae:	8980      	ldrh	r0, [r0, #12]
 80131b0:	4690      	mov	r8, r2
 80131b2:	461f      	mov	r7, r3
 80131b4:	f000 fc90 	bl	8013ad8 <uxr_seq_num_add>
 80131b8:	4629      	mov	r1, r5
 80131ba:	4606      	mov	r6, r0
 80131bc:	89a0      	ldrh	r0, [r4, #12]
 80131be:	f000 fc93 	bl	8013ae8 <uxr_seq_num_cmp>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	db0a      	blt.n	80131dc <uxr_receive_reliable_message+0x38>
 80131c6:	2600      	movs	r6, #0
 80131c8:	4629      	mov	r1, r5
 80131ca:	89e0      	ldrh	r0, [r4, #14]
 80131cc:	f000 fc8c 	bl	8013ae8 <uxr_seq_num_cmp>
 80131d0:	2800      	cmp	r0, #0
 80131d2:	bfb8      	it	lt
 80131d4:	81e5      	strhlt	r5, [r4, #14]
 80131d6:	4630      	mov	r0, r6
 80131d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131dc:	4630      	mov	r0, r6
 80131de:	4629      	mov	r1, r5
 80131e0:	f000 fc82 	bl	8013ae8 <uxr_seq_num_cmp>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	dbee      	blt.n	80131c6 <uxr_receive_reliable_message+0x22>
 80131e8:	4640      	mov	r0, r8
 80131ea:	6923      	ldr	r3, [r4, #16]
 80131ec:	4798      	blx	r3
 80131ee:	4681      	mov	r9, r0
 80131f0:	2101      	movs	r1, #1
 80131f2:	89a0      	ldrh	r0, [r4, #12]
 80131f4:	f000 fc70 	bl	8013ad8 <uxr_seq_num_add>
 80131f8:	f1b9 0f00 	cmp.w	r9, #0
 80131fc:	d101      	bne.n	8013202 <uxr_receive_reliable_message+0x5e>
 80131fe:	4285      	cmp	r5, r0
 8013200:	d049      	beq.n	8013296 <uxr_receive_reliable_message+0xf2>
 8013202:	8921      	ldrh	r1, [r4, #8]
 8013204:	6862      	ldr	r2, [r4, #4]
 8013206:	fbb5 f3f1 	udiv	r3, r5, r1
 801320a:	fbb2 f2f1 	udiv	r2, r2, r1
 801320e:	fb01 5313 	mls	r3, r1, r3, r5
 8013212:	b29b      	uxth	r3, r3
 8013214:	fb03 f302 	mul.w	r3, r3, r2
 8013218:	6820      	ldr	r0, [r4, #0]
 801321a:	3304      	adds	r3, #4
 801321c:	4418      	add	r0, r3
 801321e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d1cf      	bne.n	80131c6 <uxr_receive_reliable_message+0x22>
 8013226:	4641      	mov	r1, r8
 8013228:	463a      	mov	r2, r7
 801322a:	f000 fdfb 	bl	8013e24 <memcpy>
 801322e:	8921      	ldrh	r1, [r4, #8]
 8013230:	6862      	ldr	r2, [r4, #4]
 8013232:	fbb5 f3f1 	udiv	r3, r5, r1
 8013236:	fbb2 f2f1 	udiv	r2, r2, r1
 801323a:	2001      	movs	r0, #1
 801323c:	fb01 5313 	mls	r3, r1, r3, r5
 8013240:	b29b      	uxth	r3, r3
 8013242:	fb03 f302 	mul.w	r3, r3, r2
 8013246:	6822      	ldr	r2, [r4, #0]
 8013248:	50d7      	str	r7, [r2, r3]
 801324a:	9b08      	ldr	r3, [sp, #32]
 801324c:	7018      	strb	r0, [r3, #0]
 801324e:	f1b9 0f00 	cmp.w	r9, #0
 8013252:	d0b8      	beq.n	80131c6 <uxr_receive_reliable_message+0x22>
 8013254:	89a6      	ldrh	r6, [r4, #12]
 8013256:	e001      	b.n	801325c <uxr_receive_reliable_message+0xb8>
 8013258:	2801      	cmp	r0, #1
 801325a:	d1b4      	bne.n	80131c6 <uxr_receive_reliable_message+0x22>
 801325c:	4630      	mov	r0, r6
 801325e:	2101      	movs	r1, #1
 8013260:	f000 fc3a 	bl	8013ad8 <uxr_seq_num_add>
 8013264:	8921      	ldrh	r1, [r4, #8]
 8013266:	6862      	ldr	r2, [r4, #4]
 8013268:	fbb0 f3f1 	udiv	r3, r0, r1
 801326c:	fbb2 f2f1 	udiv	r2, r2, r1
 8013270:	fb01 0313 	mls	r3, r1, r3, r0
 8013274:	b29b      	uxth	r3, r3
 8013276:	fb03 f302 	mul.w	r3, r3, r2
 801327a:	4606      	mov	r6, r0
 801327c:	6820      	ldr	r0, [r4, #0]
 801327e:	3304      	adds	r3, #4
 8013280:	4418      	add	r0, r3
 8013282:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d09d      	beq.n	80131c6 <uxr_receive_reliable_message+0x22>
 801328a:	6923      	ldr	r3, [r4, #16]
 801328c:	4798      	blx	r3
 801328e:	2802      	cmp	r0, #2
 8013290:	d1e2      	bne.n	8013258 <uxr_receive_reliable_message+0xb4>
 8013292:	2601      	movs	r6, #1
 8013294:	e798      	b.n	80131c8 <uxr_receive_reliable_message+0x24>
 8013296:	9b08      	ldr	r3, [sp, #32]
 8013298:	81a5      	strh	r5, [r4, #12]
 801329a:	2601      	movs	r6, #1
 801329c:	f883 9000 	strb.w	r9, [r3]
 80132a0:	e792      	b.n	80131c8 <uxr_receive_reliable_message+0x24>
 80132a2:	bf00      	nop

080132a4 <uxr_next_input_reliable_buffer_available>:
 80132a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132a8:	4604      	mov	r4, r0
 80132aa:	460e      	mov	r6, r1
 80132ac:	8980      	ldrh	r0, [r0, #12]
 80132ae:	2101      	movs	r1, #1
 80132b0:	4617      	mov	r7, r2
 80132b2:	f000 fc11 	bl	8013ad8 <uxr_seq_num_add>
 80132b6:	8921      	ldrh	r1, [r4, #8]
 80132b8:	6862      	ldr	r2, [r4, #4]
 80132ba:	fbb0 f3f1 	udiv	r3, r0, r1
 80132be:	fbb2 f2f1 	udiv	r2, r2, r1
 80132c2:	fb01 0313 	mls	r3, r1, r3, r0
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	fb03 f302 	mul.w	r3, r3, r2
 80132cc:	6822      	ldr	r2, [r4, #0]
 80132ce:	3304      	adds	r3, #4
 80132d0:	eb02 0803 	add.w	r8, r2, r3
 80132d4:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80132d8:	f1b9 0f00 	cmp.w	r9, #0
 80132dc:	d025      	beq.n	801332a <uxr_next_input_reliable_buffer_available+0x86>
 80132de:	4605      	mov	r5, r0
 80132e0:	6923      	ldr	r3, [r4, #16]
 80132e2:	4640      	mov	r0, r8
 80132e4:	4798      	blx	r3
 80132e6:	4682      	mov	sl, r0
 80132e8:	b310      	cbz	r0, 8013330 <uxr_next_input_reliable_buffer_available+0x8c>
 80132ea:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80132ee:	e005      	b.n	80132fc <uxr_next_input_reliable_buffer_available+0x58>
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	4798      	blx	r3
 80132f4:	2802      	cmp	r0, #2
 80132f6:	d032      	beq.n	801335e <uxr_next_input_reliable_buffer_available+0xba>
 80132f8:	2801      	cmp	r0, #1
 80132fa:	d116      	bne.n	801332a <uxr_next_input_reliable_buffer_available+0x86>
 80132fc:	4650      	mov	r0, sl
 80132fe:	2101      	movs	r1, #1
 8013300:	f000 fbea 	bl	8013ad8 <uxr_seq_num_add>
 8013304:	4682      	mov	sl, r0
 8013306:	8922      	ldrh	r2, [r4, #8]
 8013308:	6860      	ldr	r0, [r4, #4]
 801330a:	fbba f3f2 	udiv	r3, sl, r2
 801330e:	fbb0 f0f2 	udiv	r0, r0, r2
 8013312:	fb02 a313 	mls	r3, r2, r3, sl
 8013316:	b29b      	uxth	r3, r3
 8013318:	fb03 f300 	mul.w	r3, r3, r0
 801331c:	6820      	ldr	r0, [r4, #0]
 801331e:	3304      	adds	r3, #4
 8013320:	4418      	add	r0, r3
 8013322:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d1e2      	bne.n	80132f0 <uxr_next_input_reliable_buffer_available+0x4c>
 801332a:	2000      	movs	r0, #0
 801332c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013330:	464a      	mov	r2, r9
 8013332:	4641      	mov	r1, r8
 8013334:	4630      	mov	r0, r6
 8013336:	f7f9 fb7b 	bl	800ca30 <ucdr_init_buffer>
 801333a:	8921      	ldrh	r1, [r4, #8]
 801333c:	6862      	ldr	r2, [r4, #4]
 801333e:	fbb5 f3f1 	udiv	r3, r5, r1
 8013342:	fbb2 f2f1 	udiv	r2, r2, r1
 8013346:	fb01 5313 	mls	r3, r1, r3, r5
 801334a:	b29b      	uxth	r3, r3
 801334c:	fb03 f302 	mul.w	r3, r3, r2
 8013350:	6822      	ldr	r2, [r4, #0]
 8013352:	2001      	movs	r0, #1
 8013354:	f842 a003 	str.w	sl, [r2, r3]
 8013358:	81a5      	strh	r5, [r4, #12]
 801335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801335e:	8922      	ldrh	r2, [r4, #8]
 8013360:	6863      	ldr	r3, [r4, #4]
 8013362:	fbb5 f0f2 	udiv	r0, r5, r2
 8013366:	fbb3 f3f2 	udiv	r3, r3, r2
 801336a:	f04f 0c00 	mov.w	ip, #0
 801336e:	fb02 5510 	mls	r5, r2, r0, r5
 8013372:	b2ad      	uxth	r5, r5
 8013374:	fb05 f503 	mul.w	r5, r5, r3
 8013378:	6823      	ldr	r3, [r4, #0]
 801337a:	4630      	mov	r0, r6
 801337c:	eba9 0207 	sub.w	r2, r9, r7
 8013380:	eb08 0107 	add.w	r1, r8, r7
 8013384:	f843 c005 	str.w	ip, [r3, r5]
 8013388:	f7f9 fb52 	bl	800ca30 <ucdr_init_buffer>
 801338c:	4630      	mov	r0, r6
 801338e:	4622      	mov	r2, r4
 8013390:	4903      	ldr	r1, [pc, #12]	; (80133a0 <uxr_next_input_reliable_buffer_available+0xfc>)
 8013392:	f7f9 fb23 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 8013396:	2001      	movs	r0, #1
 8013398:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801339c:	e7c6      	b.n	801332c <uxr_next_input_reliable_buffer_available+0x88>
 801339e:	bf00      	nop
 80133a0:	080130b9 	.word	0x080130b9

080133a4 <uxr_process_heartbeat>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4611      	mov	r1, r2
 80133a8:	4604      	mov	r4, r0
 80133aa:	89c0      	ldrh	r0, [r0, #14]
 80133ac:	4615      	mov	r5, r2
 80133ae:	f000 fb9b 	bl	8013ae8 <uxr_seq_num_cmp>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	bfb8      	it	lt
 80133b6:	81e5      	strhlt	r5, [r4, #14]
 80133b8:	bd38      	pop	{r3, r4, r5, pc}
 80133ba:	bf00      	nop

080133bc <uxr_compute_acknack>:
 80133bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133c0:	8903      	ldrh	r3, [r0, #8]
 80133c2:	4604      	mov	r4, r0
 80133c4:	460d      	mov	r5, r1
 80133c6:	8986      	ldrh	r6, [r0, #12]
 80133c8:	b1d3      	cbz	r3, 8013400 <uxr_compute_acknack+0x44>
 80133ca:	4630      	mov	r0, r6
 80133cc:	2701      	movs	r7, #1
 80133ce:	e003      	b.n	80133d8 <uxr_compute_acknack+0x1c>
 80133d0:	4567      	cmp	r7, ip
 80133d2:	d215      	bcs.n	8013400 <uxr_compute_acknack+0x44>
 80133d4:	89a0      	ldrh	r0, [r4, #12]
 80133d6:	3701      	adds	r7, #1
 80133d8:	b2b9      	uxth	r1, r7
 80133da:	f000 fb7d 	bl	8013ad8 <uxr_seq_num_add>
 80133de:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80133e2:	6863      	ldr	r3, [r4, #4]
 80133e4:	fbb0 f2fc 	udiv	r2, r0, ip
 80133e8:	fbb3 f3fc 	udiv	r3, r3, ip
 80133ec:	fb0c 0212 	mls	r2, ip, r2, r0
 80133f0:	6821      	ldr	r1, [r4, #0]
 80133f2:	b292      	uxth	r2, r2
 80133f4:	fb02 1303 	mla	r3, r2, r3, r1
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1e8      	bne.n	80133d0 <uxr_compute_acknack+0x14>
 80133fe:	4606      	mov	r6, r0
 8013400:	4630      	mov	r0, r6
 8013402:	2101      	movs	r1, #1
 8013404:	802e      	strh	r6, [r5, #0]
 8013406:	89e6      	ldrh	r6, [r4, #14]
 8013408:	f000 fb6a 	bl	8013ae0 <uxr_seq_num_sub>
 801340c:	4601      	mov	r1, r0
 801340e:	4630      	mov	r0, r6
 8013410:	f000 fb66 	bl	8013ae0 <uxr_seq_num_sub>
 8013414:	4606      	mov	r6, r0
 8013416:	b310      	cbz	r0, 801345e <uxr_compute_acknack+0xa2>
 8013418:	f04f 0900 	mov.w	r9, #0
 801341c:	f04f 0801 	mov.w	r8, #1
 8013420:	464f      	mov	r7, r9
 8013422:	fa1f f189 	uxth.w	r1, r9
 8013426:	8828      	ldrh	r0, [r5, #0]
 8013428:	f000 fb56 	bl	8013ad8 <uxr_seq_num_add>
 801342c:	8923      	ldrh	r3, [r4, #8]
 801342e:	6862      	ldr	r2, [r4, #4]
 8013430:	fbb0 fcf3 	udiv	ip, r0, r3
 8013434:	fbb2 f1f3 	udiv	r1, r2, r3
 8013438:	fb0c 0313 	mls	r3, ip, r3, r0
 801343c:	6822      	ldr	r2, [r4, #0]
 801343e:	b29b      	uxth	r3, r3
 8013440:	fb03 2201 	mla	r2, r3, r1, r2
 8013444:	6812      	ldr	r2, [r2, #0]
 8013446:	fa08 f309 	lsl.w	r3, r8, r9
 801344a:	f109 0901 	add.w	r9, r9, #1
 801344e:	b90a      	cbnz	r2, 8013454 <uxr_compute_acknack+0x98>
 8013450:	431f      	orrs	r7, r3
 8013452:	b2bf      	uxth	r7, r7
 8013454:	454e      	cmp	r6, r9
 8013456:	d1e4      	bne.n	8013422 <uxr_compute_acknack+0x66>
 8013458:	4638      	mov	r0, r7
 801345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801345e:	4607      	mov	r7, r0
 8013460:	4638      	mov	r0, r7
 8013462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013466:	bf00      	nop

08013468 <uxr_init_output_best_effort_stream>:
 8013468:	b410      	push	{r4}
 801346a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801346e:	e9c0 1300 	strd	r1, r3, [r0]
 8013472:	81c4      	strh	r4, [r0, #14]
 8013474:	7303      	strb	r3, [r0, #12]
 8013476:	bc10      	pop	{r4}
 8013478:	6082      	str	r2, [r0, #8]
 801347a:	4770      	bx	lr

0801347c <uxr_reset_output_best_effort_stream>:
 801347c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013480:	7b03      	ldrb	r3, [r0, #12]
 8013482:	81c2      	strh	r2, [r0, #14]
 8013484:	6043      	str	r3, [r0, #4]
 8013486:	4770      	bx	lr

08013488 <uxr_prepare_best_effort_buffer_to_write>:
 8013488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801348a:	4604      	mov	r4, r0
 801348c:	b083      	sub	sp, #12
 801348e:	6840      	ldr	r0, [r0, #4]
 8013490:	460d      	mov	r5, r1
 8013492:	4616      	mov	r6, r2
 8013494:	f7fb fcb4 	bl	800ee00 <uxr_submessage_padding>
 8013498:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801349c:	4410      	add	r0, r2
 801349e:	1942      	adds	r2, r0, r5
 80134a0:	4293      	cmp	r3, r2
 80134a2:	bf2c      	ite	cs
 80134a4:	2701      	movcs	r7, #1
 80134a6:	2700      	movcc	r7, #0
 80134a8:	d202      	bcs.n	80134b0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80134aa:	4638      	mov	r0, r7
 80134ac:	b003      	add	sp, #12
 80134ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134b0:	9000      	str	r0, [sp, #0]
 80134b2:	6821      	ldr	r1, [r4, #0]
 80134b4:	4630      	mov	r0, r6
 80134b6:	2300      	movs	r3, #0
 80134b8:	f7f9 faa8 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 80134bc:	4638      	mov	r0, r7
 80134be:	6861      	ldr	r1, [r4, #4]
 80134c0:	4429      	add	r1, r5
 80134c2:	6061      	str	r1, [r4, #4]
 80134c4:	b003      	add	sp, #12
 80134c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080134c8 <uxr_prepare_best_effort_buffer_to_send>:
 80134c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134cc:	6845      	ldr	r5, [r0, #4]
 80134ce:	4604      	mov	r4, r0
 80134d0:	7b00      	ldrb	r0, [r0, #12]
 80134d2:	4285      	cmp	r5, r0
 80134d4:	bf8c      	ite	hi
 80134d6:	2701      	movhi	r7, #1
 80134d8:	2700      	movls	r7, #0
 80134da:	d802      	bhi.n	80134e2 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80134dc:	4638      	mov	r0, r7
 80134de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134e2:	4688      	mov	r8, r1
 80134e4:	89e0      	ldrh	r0, [r4, #14]
 80134e6:	2101      	movs	r1, #1
 80134e8:	4615      	mov	r5, r2
 80134ea:	461e      	mov	r6, r3
 80134ec:	f000 faf4 	bl	8013ad8 <uxr_seq_num_add>
 80134f0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134f4:	81e0      	strh	r0, [r4, #14]
 80134f6:	8030      	strh	r0, [r6, #0]
 80134f8:	f8c8 2000 	str.w	r2, [r8]
 80134fc:	602b      	str	r3, [r5, #0]
 80134fe:	7b23      	ldrb	r3, [r4, #12]
 8013500:	4638      	mov	r0, r7
 8013502:	6063      	str	r3, [r4, #4]
 8013504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013508 <on_full_output_buffer>:
 8013508:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801350e:	460d      	mov	r5, r1
 8013510:	c90a      	ldmia	r1, {r1, r3}
 8013512:	fbb3 f7fc 	udiv	r7, r3, ip
 8013516:	6804      	ldr	r4, [r0, #0]
 8013518:	4606      	mov	r6, r0
 801351a:	1a63      	subs	r3, r4, r1
 801351c:	fbb3 f3f7 	udiv	r3, r3, r7
 8013520:	3301      	adds	r3, #1
 8013522:	b29b      	uxth	r3, r3
 8013524:	fbb3 f4fc 	udiv	r4, r3, ip
 8013528:	fb0c 3314 	mls	r3, ip, r4, r3
 801352c:	b29b      	uxth	r3, r3
 801352e:	fb07 f303 	mul.w	r3, r7, r3
 8013532:	7b2a      	ldrb	r2, [r5, #12]
 8013534:	58cc      	ldr	r4, [r1, r3]
 8013536:	4413      	add	r3, r2
 8013538:	3308      	adds	r3, #8
 801353a:	1aa2      	subs	r2, r4, r2
 801353c:	4419      	add	r1, r3
 801353e:	3a04      	subs	r2, #4
 8013540:	6903      	ldr	r3, [r0, #16]
 8013542:	f7f9 fa6d 	bl	800ca20 <ucdr_init_buffer_origin>
 8013546:	4630      	mov	r0, r6
 8013548:	462a      	mov	r2, r5
 801354a:	4902      	ldr	r1, [pc, #8]	; (8013554 <on_full_output_buffer+0x4c>)
 801354c:	f7f9 fa46 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 8013550:	2000      	movs	r0, #0
 8013552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013554:	08013509 	.word	0x08013509

08013558 <uxr_init_output_reliable_stream>:
 8013558:	b430      	push	{r4, r5}
 801355a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801355e:	6001      	str	r1, [r0, #0]
 8013560:	8103      	strh	r3, [r0, #8]
 8013562:	6042      	str	r2, [r0, #4]
 8013564:	7304      	strb	r4, [r0, #12]
 8013566:	b1b3      	cbz	r3, 8013596 <uxr_init_output_reliable_stream+0x3e>
 8013568:	600c      	str	r4, [r1, #0]
 801356a:	8901      	ldrh	r1, [r0, #8]
 801356c:	2901      	cmp	r1, #1
 801356e:	d912      	bls.n	8013596 <uxr_init_output_reliable_stream+0x3e>
 8013570:	2201      	movs	r2, #1
 8013572:	fbb2 f3f1 	udiv	r3, r2, r1
 8013576:	6844      	ldr	r4, [r0, #4]
 8013578:	fb01 2313 	mls	r3, r1, r3, r2
 801357c:	fbb4 f1f1 	udiv	r1, r4, r1
 8013580:	b29b      	uxth	r3, r3
 8013582:	fb03 f301 	mul.w	r3, r3, r1
 8013586:	7b04      	ldrb	r4, [r0, #12]
 8013588:	6801      	ldr	r1, [r0, #0]
 801358a:	3201      	adds	r2, #1
 801358c:	50cc      	str	r4, [r1, r3]
 801358e:	8901      	ldrh	r1, [r0, #8]
 8013590:	b292      	uxth	r2, r2
 8013592:	4291      	cmp	r1, r2
 8013594:	d8ed      	bhi.n	8013572 <uxr_init_output_reliable_stream+0x1a>
 8013596:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801359a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801359e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80135a2:	2200      	movs	r2, #0
 80135a4:	4b04      	ldr	r3, [pc, #16]	; (80135b8 <uxr_init_output_reliable_stream+0x60>)
 80135a6:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80135aa:	bc30      	pop	{r4, r5}
 80135ac:	8241      	strh	r1, [r0, #18]
 80135ae:	8402      	strh	r2, [r0, #32]
 80135b0:	f8c0 300e 	str.w	r3, [r0, #14]
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	ffff0000 	.word	0xffff0000

080135bc <uxr_reset_output_reliable_stream>:
 80135bc:	8902      	ldrh	r2, [r0, #8]
 80135be:	b430      	push	{r4, r5}
 80135c0:	b19a      	cbz	r2, 80135ea <uxr_reset_output_reliable_stream+0x2e>
 80135c2:	2500      	movs	r5, #0
 80135c4:	4629      	mov	r1, r5
 80135c6:	fbb1 f3f2 	udiv	r3, r1, r2
 80135ca:	6844      	ldr	r4, [r0, #4]
 80135cc:	fb02 1313 	mls	r3, r2, r3, r1
 80135d0:	fbb4 f2f2 	udiv	r2, r4, r2
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	fb03 f302 	mul.w	r3, r3, r2
 80135da:	7b01      	ldrb	r1, [r0, #12]
 80135dc:	6802      	ldr	r2, [r0, #0]
 80135de:	3501      	adds	r5, #1
 80135e0:	50d1      	str	r1, [r2, r3]
 80135e2:	8902      	ldrh	r2, [r0, #8]
 80135e4:	b2a9      	uxth	r1, r5
 80135e6:	428a      	cmp	r2, r1
 80135e8:	d8ed      	bhi.n	80135c6 <uxr_reset_output_reliable_stream+0xa>
 80135ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80135ee:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80135f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80135f6:	2200      	movs	r2, #0
 80135f8:	4b04      	ldr	r3, [pc, #16]	; (801360c <uxr_reset_output_reliable_stream+0x50>)
 80135fa:	e9c0 4506 	strd	r4, r5, [r0, #24]
 80135fe:	bc30      	pop	{r4, r5}
 8013600:	8241      	strh	r1, [r0, #18]
 8013602:	8402      	strh	r2, [r0, #32]
 8013604:	f8c0 300e 	str.w	r3, [r0, #14]
 8013608:	4770      	bx	lr
 801360a:	bf00      	nop
 801360c:	ffff0000 	.word	0xffff0000

08013610 <uxr_prepare_reliable_buffer_to_write>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	4604      	mov	r4, r0
 8013616:	89c5      	ldrh	r5, [r0, #14]
 8013618:	8900      	ldrh	r0, [r0, #8]
 801361a:	6866      	ldr	r6, [r4, #4]
 801361c:	fbb5 f3f0 	udiv	r3, r5, r0
 8013620:	fbb6 f6f0 	udiv	r6, r6, r0
 8013624:	fb00 5313 	mls	r3, r0, r3, r5
 8013628:	b29b      	uxth	r3, r3
 801362a:	fb06 f303 	mul.w	r3, r6, r3
 801362e:	4688      	mov	r8, r1
 8013630:	6821      	ldr	r1, [r4, #0]
 8013632:	3304      	adds	r3, #4
 8013634:	b091      	sub	sp, #68	; 0x44
 8013636:	18cb      	adds	r3, r1, r3
 8013638:	9604      	str	r6, [sp, #16]
 801363a:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801363e:	2104      	movs	r1, #4
 8013640:	4630      	mov	r0, r6
 8013642:	9305      	str	r3, [sp, #20]
 8013644:	9206      	str	r2, [sp, #24]
 8013646:	f7f9 f9f7 	bl	800ca38 <ucdr_alignment>
 801364a:	1833      	adds	r3, r6, r0
 801364c:	9e04      	ldr	r6, [sp, #16]
 801364e:	eb03 0708 	add.w	r7, r3, r8
 8013652:	3e04      	subs	r6, #4
 8013654:	42b7      	cmp	r7, r6
 8013656:	9303      	str	r3, [sp, #12]
 8013658:	f240 80dd 	bls.w	8013816 <uxr_prepare_reliable_buffer_to_write+0x206>
 801365c:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8013660:	eb0e 0308 	add.w	r3, lr, r8
 8013664:	42b3      	cmp	r3, r6
 8013666:	f240 80c3 	bls.w	80137f0 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801366a:	9b03      	ldr	r3, [sp, #12]
 801366c:	3304      	adds	r3, #4
 801366e:	42b3      	cmp	r3, r6
 8013670:	f080 810d 	bcs.w	801388e <uxr_prepare_reliable_buffer_to_write+0x27e>
 8013674:	8920      	ldrh	r0, [r4, #8]
 8013676:	2800      	cmp	r0, #0
 8013678:	f000 8123 	beq.w	80138c2 <uxr_prepare_reliable_buffer_to_write+0x2b2>
 801367c:	f04f 0c00 	mov.w	ip, #0
 8013680:	6862      	ldr	r2, [r4, #4]
 8013682:	4661      	mov	r1, ip
 8013684:	fbb2 f9f0 	udiv	r9, r2, r0
 8013688:	4662      	mov	r2, ip
 801368a:	6827      	ldr	r7, [r4, #0]
 801368c:	fbb2 f3f0 	udiv	r3, r2, r0
 8013690:	fb00 2313 	mls	r3, r0, r3, r2
 8013694:	b29b      	uxth	r3, r3
 8013696:	fb09 7303 	mla	r3, r9, r3, r7
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f10c 0c01 	add.w	ip, ip, #1
 80136a0:	459e      	cmp	lr, r3
 80136a2:	bf08      	it	eq
 80136a4:	3101      	addeq	r1, #1
 80136a6:	fa1f f28c 	uxth.w	r2, ip
 80136aa:	bf08      	it	eq
 80136ac:	b289      	uxtheq	r1, r1
 80136ae:	4282      	cmp	r2, r0
 80136b0:	d3ec      	bcc.n	801368c <uxr_prepare_reliable_buffer_to_write+0x7c>
 80136b2:	9b03      	ldr	r3, [sp, #12]
 80136b4:	1f37      	subs	r7, r6, #4
 80136b6:	b2bf      	uxth	r7, r7
 80136b8:	eba7 0903 	sub.w	r9, r7, r3
 80136bc:	fa1f f989 	uxth.w	r9, r9
 80136c0:	eba7 070e 	sub.w	r7, r7, lr
 80136c4:	b2bf      	uxth	r7, r7
 80136c6:	eba8 0809 	sub.w	r8, r8, r9
 80136ca:	fbb8 faf7 	udiv	sl, r8, r7
 80136ce:	fb07 831a 	mls	r3, r7, sl, r8
 80136d2:	9707      	str	r7, [sp, #28]
 80136d4:	b113      	cbz	r3, 80136dc <uxr_prepare_reliable_buffer_to_write+0xcc>
 80136d6:	9307      	str	r3, [sp, #28]
 80136d8:	f10a 0a01 	add.w	sl, sl, #1
 80136dc:	fa1f fa8a 	uxth.w	sl, sl
 80136e0:	458a      	cmp	sl, r1
 80136e2:	f200 8094 	bhi.w	801380e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80136e6:	f10d 0b20 	add.w	fp, sp, #32
 80136ea:	f1ba 0f00 	cmp.w	sl, #0
 80136ee:	d039      	beq.n	8013764 <uxr_prepare_reliable_buffer_to_write+0x154>
 80136f0:	f04f 0800 	mov.w	r8, #0
 80136f4:	f10d 0b20 	add.w	fp, sp, #32
 80136f8:	e000      	b.n	80136fc <uxr_prepare_reliable_buffer_to_write+0xec>
 80136fa:	46b9      	mov	r9, r7
 80136fc:	fbb5 f1f0 	udiv	r1, r5, r0
 8013700:	6863      	ldr	r3, [r4, #4]
 8013702:	fb00 5111 	mls	r1, r0, r1, r5
 8013706:	fbb3 f3f0 	udiv	r3, r3, r0
 801370a:	b289      	uxth	r1, r1
 801370c:	fb01 f103 	mul.w	r1, r1, r3
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	3104      	adds	r1, #4
 8013714:	4419      	add	r1, r3
 8013716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801371a:	4632      	mov	r2, r6
 801371c:	4658      	mov	r0, fp
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	2300      	movs	r3, #0
 8013722:	f7f9 f973 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 8013726:	464a      	mov	r2, r9
 8013728:	2300      	movs	r3, #0
 801372a:	210d      	movs	r1, #13
 801372c:	4658      	mov	r0, fp
 801372e:	f7fb fb27 	bl	800ed80 <uxr_buffer_submessage_header>
 8013732:	8921      	ldrh	r1, [r4, #8]
 8013734:	6862      	ldr	r2, [r4, #4]
 8013736:	fbb5 f3f1 	udiv	r3, r5, r1
 801373a:	fbb2 f2f1 	udiv	r2, r2, r1
 801373e:	fb01 5313 	mls	r3, r1, r3, r5
 8013742:	b29b      	uxth	r3, r3
 8013744:	fb03 f302 	mul.w	r3, r3, r2
 8013748:	6822      	ldr	r2, [r4, #0]
 801374a:	4628      	mov	r0, r5
 801374c:	50d6      	str	r6, [r2, r3]
 801374e:	2101      	movs	r1, #1
 8013750:	f000 f9c2 	bl	8013ad8 <uxr_seq_num_add>
 8013754:	f108 0801 	add.w	r8, r8, #1
 8013758:	fa1f f388 	uxth.w	r3, r8
 801375c:	459a      	cmp	sl, r3
 801375e:	4605      	mov	r5, r0
 8013760:	8920      	ldrh	r0, [r4, #8]
 8013762:	d8ca      	bhi.n	80136fa <uxr_prepare_reliable_buffer_to_write+0xea>
 8013764:	fbb5 f1f0 	udiv	r1, r5, r0
 8013768:	6863      	ldr	r3, [r4, #4]
 801376a:	fb00 5111 	mls	r1, r0, r1, r5
 801376e:	fbb3 f0f0 	udiv	r0, r3, r0
 8013772:	b289      	uxth	r1, r1
 8013774:	fb01 f100 	mul.w	r1, r1, r0
 8013778:	6823      	ldr	r3, [r4, #0]
 801377a:	3104      	adds	r1, #4
 801377c:	4419      	add	r1, r3
 801377e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013782:	4632      	mov	r2, r6
 8013784:	4658      	mov	r0, fp
 8013786:	9300      	str	r3, [sp, #0]
 8013788:	2300      	movs	r3, #0
 801378a:	f7f9 f93f 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 801378e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8013792:	4658      	mov	r0, fp
 8013794:	fa1f f288 	uxth.w	r2, r8
 8013798:	2302      	movs	r3, #2
 801379a:	210d      	movs	r1, #13
 801379c:	f7fb faf0 	bl	800ed80 <uxr_buffer_submessage_header>
 80137a0:	8922      	ldrh	r2, [r4, #8]
 80137a2:	6863      	ldr	r3, [r4, #4]
 80137a4:	fbb5 f0f2 	udiv	r0, r5, r2
 80137a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80137ac:	fb02 5010 	mls	r0, r2, r0, r5
 80137b0:	b280      	uxth	r0, r0
 80137b2:	fb00 f003 	mul.w	r0, r0, r3
 80137b6:	6823      	ldr	r3, [r4, #0]
 80137b8:	9f03      	ldr	r7, [sp, #12]
 80137ba:	9307      	str	r3, [sp, #28]
 80137bc:	9b05      	ldr	r3, [sp, #20]
 80137be:	7b26      	ldrb	r6, [r4, #12]
 80137c0:	1d39      	adds	r1, r7, #4
 80137c2:	440b      	add	r3, r1
 80137c4:	4619      	mov	r1, r3
 80137c6:	3604      	adds	r6, #4
 80137c8:	9b07      	ldr	r3, [sp, #28]
 80137ca:	9a04      	ldr	r2, [sp, #16]
 80137cc:	4446      	add	r6, r8
 80137ce:	501e      	str	r6, [r3, r0]
 80137d0:	9e06      	ldr	r6, [sp, #24]
 80137d2:	3a08      	subs	r2, #8
 80137d4:	4630      	mov	r0, r6
 80137d6:	1bd2      	subs	r2, r2, r7
 80137d8:	f7f9 f92a 	bl	800ca30 <ucdr_init_buffer>
 80137dc:	4630      	mov	r0, r6
 80137de:	4622      	mov	r2, r4
 80137e0:	4939      	ldr	r1, [pc, #228]	; (80138c8 <uxr_prepare_reliable_buffer_to_write+0x2b8>)
 80137e2:	f7f9 f8fb 	bl	800c9dc <ucdr_set_on_full_buffer_callback>
 80137e6:	2001      	movs	r0, #1
 80137e8:	81e5      	strh	r5, [r4, #14]
 80137ea:	b011      	add	sp, #68	; 0x44
 80137ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f0:	2101      	movs	r1, #1
 80137f2:	89e0      	ldrh	r0, [r4, #14]
 80137f4:	f000 f970 	bl	8013ad8 <uxr_seq_num_add>
 80137f8:	8921      	ldrh	r1, [r4, #8]
 80137fa:	4605      	mov	r5, r0
 80137fc:	8a60      	ldrh	r0, [r4, #18]
 80137fe:	f000 f96b 	bl	8013ad8 <uxr_seq_num_add>
 8013802:	4601      	mov	r1, r0
 8013804:	4628      	mov	r0, r5
 8013806:	f000 f96f 	bl	8013ae8 <uxr_seq_num_cmp>
 801380a:	2800      	cmp	r0, #0
 801380c:	dd24      	ble.n	8013858 <uxr_prepare_reliable_buffer_to_write+0x248>
 801380e:	2000      	movs	r0, #0
 8013810:	b011      	add	sp, #68	; 0x44
 8013812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013816:	8921      	ldrh	r1, [r4, #8]
 8013818:	8a60      	ldrh	r0, [r4, #18]
 801381a:	f000 f95d 	bl	8013ad8 <uxr_seq_num_add>
 801381e:	4601      	mov	r1, r0
 8013820:	4628      	mov	r0, r5
 8013822:	f000 f961 	bl	8013ae8 <uxr_seq_num_cmp>
 8013826:	2800      	cmp	r0, #0
 8013828:	dcf1      	bgt.n	801380e <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801382a:	8920      	ldrh	r0, [r4, #8]
 801382c:	6862      	ldr	r2, [r4, #4]
 801382e:	fbb5 f3f0 	udiv	r3, r5, r0
 8013832:	fbb2 f2f0 	udiv	r2, r2, r0
 8013836:	fb00 5313 	mls	r3, r0, r3, r5
 801383a:	b29b      	uxth	r3, r3
 801383c:	fb03 f302 	mul.w	r3, r3, r2
 8013840:	6822      	ldr	r2, [r4, #0]
 8013842:	9806      	ldr	r0, [sp, #24]
 8013844:	50d7      	str	r7, [r2, r3]
 8013846:	9b03      	ldr	r3, [sp, #12]
 8013848:	463a      	mov	r2, r7
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	9905      	ldr	r1, [sp, #20]
 801384e:	2300      	movs	r3, #0
 8013850:	f7f9 f8dc 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 8013854:	2001      	movs	r0, #1
 8013856:	e7db      	b.n	8013810 <uxr_prepare_reliable_buffer_to_write+0x200>
 8013858:	8921      	ldrh	r1, [r4, #8]
 801385a:	6862      	ldr	r2, [r4, #4]
 801385c:	fbb5 f3f1 	udiv	r3, r5, r1
 8013860:	fbb2 f2f1 	udiv	r2, r2, r1
 8013864:	fb01 5313 	mls	r3, r1, r3, r5
 8013868:	b29b      	uxth	r3, r3
 801386a:	fb03 f302 	mul.w	r3, r3, r2
 801386e:	6821      	ldr	r1, [r4, #0]
 8013870:	7b22      	ldrb	r2, [r4, #12]
 8013872:	3304      	adds	r3, #4
 8013874:	4419      	add	r1, r3
 8013876:	4442      	add	r2, r8
 8013878:	f841 2c04 	str.w	r2, [r1, #-4]
 801387c:	7b23      	ldrb	r3, [r4, #12]
 801387e:	9806      	ldr	r0, [sp, #24]
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	2300      	movs	r3, #0
 8013884:	f7f9 f8c2 	bl	800ca0c <ucdr_init_buffer_origin_offset>
 8013888:	2001      	movs	r0, #1
 801388a:	81e5      	strh	r5, [r4, #14]
 801388c:	e7c0      	b.n	8013810 <uxr_prepare_reliable_buffer_to_write+0x200>
 801388e:	4628      	mov	r0, r5
 8013890:	2101      	movs	r1, #1
 8013892:	f000 f921 	bl	8013ad8 <uxr_seq_num_add>
 8013896:	4605      	mov	r5, r0
 8013898:	8920      	ldrh	r0, [r4, #8]
 801389a:	6862      	ldr	r2, [r4, #4]
 801389c:	fbb5 f3f0 	udiv	r3, r5, r0
 80138a0:	fbb2 f2f0 	udiv	r2, r2, r0
 80138a4:	fb00 5313 	mls	r3, r0, r3, r5
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	fb03 f302 	mul.w	r3, r3, r2
 80138ae:	6822      	ldr	r2, [r4, #0]
 80138b0:	3304      	adds	r3, #4
 80138b2:	18d3      	adds	r3, r2, r3
 80138b4:	9305      	str	r3, [sp, #20]
 80138b6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80138ba:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80138be:	9303      	str	r3, [sp, #12]
 80138c0:	e6d9      	b.n	8013676 <uxr_prepare_reliable_buffer_to_write+0x66>
 80138c2:	4601      	mov	r1, r0
 80138c4:	e6f5      	b.n	80136b2 <uxr_prepare_reliable_buffer_to_write+0xa2>
 80138c6:	bf00      	nop
 80138c8:	08013509 	.word	0x08013509

080138cc <uxr_prepare_next_reliable_buffer_to_send>:
 80138cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138d0:	4606      	mov	r6, r0
 80138d2:	4689      	mov	r9, r1
 80138d4:	8a00      	ldrh	r0, [r0, #16]
 80138d6:	2101      	movs	r1, #1
 80138d8:	4690      	mov	r8, r2
 80138da:	461f      	mov	r7, r3
 80138dc:	f000 f8fc 	bl	8013ad8 <uxr_seq_num_add>
 80138e0:	8038      	strh	r0, [r7, #0]
 80138e2:	8932      	ldrh	r2, [r6, #8]
 80138e4:	6873      	ldr	r3, [r6, #4]
 80138e6:	fbb0 f5f2 	udiv	r5, r0, r2
 80138ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80138ee:	fb02 0415 	mls	r4, r2, r5, r0
 80138f2:	b2a4      	uxth	r4, r4
 80138f4:	fb04 f403 	mul.w	r4, r4, r3
 80138f8:	6833      	ldr	r3, [r6, #0]
 80138fa:	3404      	adds	r4, #4
 80138fc:	4423      	add	r3, r4
 80138fe:	f8c9 3000 	str.w	r3, [r9]
 8013902:	6833      	ldr	r3, [r6, #0]
 8013904:	89f1      	ldrh	r1, [r6, #14]
 8013906:	441c      	add	r4, r3
 8013908:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801390c:	f8c8 3000 	str.w	r3, [r8]
 8013910:	f000 f8ea 	bl	8013ae8 <uxr_seq_num_cmp>
 8013914:	2800      	cmp	r0, #0
 8013916:	dd02      	ble.n	801391e <uxr_prepare_next_reliable_buffer_to_send+0x52>
 8013918:	2000      	movs	r0, #0
 801391a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801391e:	f8d8 2000 	ldr.w	r2, [r8]
 8013922:	7b33      	ldrb	r3, [r6, #12]
 8013924:	429a      	cmp	r2, r3
 8013926:	d9f7      	bls.n	8013918 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8013928:	8a71      	ldrh	r1, [r6, #18]
 801392a:	8a30      	ldrh	r0, [r6, #16]
 801392c:	f000 f8d8 	bl	8013ae0 <uxr_seq_num_sub>
 8013930:	8933      	ldrh	r3, [r6, #8]
 8013932:	4283      	cmp	r3, r0
 8013934:	d0f0      	beq.n	8013918 <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 8013936:	8838      	ldrh	r0, [r7, #0]
 8013938:	89f3      	ldrh	r3, [r6, #14]
 801393a:	8230      	strh	r0, [r6, #16]
 801393c:	4298      	cmp	r0, r3
 801393e:	d002      	beq.n	8013946 <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 8013940:	2001      	movs	r0, #1
 8013942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013946:	2101      	movs	r1, #1
 8013948:	f000 f8c6 	bl	8013ad8 <uxr_seq_num_add>
 801394c:	4603      	mov	r3, r0
 801394e:	2001      	movs	r0, #1
 8013950:	81f3      	strh	r3, [r6, #14]
 8013952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013956:	bf00      	nop

08013958 <uxr_update_output_stream_heartbeat_timestamp>:
 8013958:	b5d0      	push	{r4, r6, r7, lr}
 801395a:	8a01      	ldrh	r1, [r0, #16]
 801395c:	4604      	mov	r4, r0
 801395e:	8a40      	ldrh	r0, [r0, #18]
 8013960:	4616      	mov	r6, r2
 8013962:	461f      	mov	r7, r3
 8013964:	f000 f8c0 	bl	8013ae8 <uxr_seq_num_cmp>
 8013968:	2800      	cmp	r0, #0
 801396a:	db07      	blt.n	801397c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013970:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013974:	2000      	movs	r0, #0
 8013976:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801397a:	bdd0      	pop	{r4, r6, r7, pc}
 801397c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013980:	b948      	cbnz	r0, 8013996 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8013982:	2301      	movs	r3, #1
 8013984:	f884 3020 	strb.w	r3, [r4, #32]
 8013988:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 801398c:	f147 0200 	adc.w	r2, r7, #0
 8013990:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8013994:	bdd0      	pop	{r4, r6, r7, pc}
 8013996:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801399a:	4296      	cmp	r6, r2
 801399c:	eb77 0303 	sbcs.w	r3, r7, r3
 80139a0:	bfa5      	ittet	ge
 80139a2:	3001      	addge	r0, #1
 80139a4:	f884 0020 	strbge.w	r0, [r4, #32]
 80139a8:	2000      	movlt	r0, #0
 80139aa:	2001      	movge	r0, #1
 80139ac:	e7ec      	b.n	8013988 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80139ae:	bf00      	nop

080139b0 <uxr_begin_output_nack_buffer_it>:
 80139b0:	8a40      	ldrh	r0, [r0, #18]
 80139b2:	4770      	bx	lr

080139b4 <uxr_next_reliable_nack_buffer_to_send>:
 80139b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139b8:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 80139bc:	f1b9 0f00 	cmp.w	r9, #0
 80139c0:	d011      	beq.n	80139e6 <uxr_next_reliable_nack_buffer_to_send+0x32>
 80139c2:	460f      	mov	r7, r1
 80139c4:	4690      	mov	r8, r2
 80139c6:	461e      	mov	r6, r3
 80139c8:	4605      	mov	r5, r0
 80139ca:	8818      	ldrh	r0, [r3, #0]
 80139cc:	2101      	movs	r1, #1
 80139ce:	f000 f883 	bl	8013ad8 <uxr_seq_num_add>
 80139d2:	8030      	strh	r0, [r6, #0]
 80139d4:	8a29      	ldrh	r1, [r5, #16]
 80139d6:	f000 f887 	bl	8013ae8 <uxr_seq_num_cmp>
 80139da:	2800      	cmp	r0, #0
 80139dc:	dd06      	ble.n	80139ec <uxr_next_reliable_nack_buffer_to_send+0x38>
 80139de:	2300      	movs	r3, #0
 80139e0:	4699      	mov	r9, r3
 80139e2:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 80139e6:	4648      	mov	r0, r9
 80139e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ec:	892a      	ldrh	r2, [r5, #8]
 80139ee:	8830      	ldrh	r0, [r6, #0]
 80139f0:	686b      	ldr	r3, [r5, #4]
 80139f2:	fbb0 f4f2 	udiv	r4, r0, r2
 80139f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80139fa:	fb02 0414 	mls	r4, r2, r4, r0
 80139fe:	b2a4      	uxth	r4, r4
 8013a00:	fb04 f403 	mul.w	r4, r4, r3
 8013a04:	682b      	ldr	r3, [r5, #0]
 8013a06:	3404      	adds	r4, #4
 8013a08:	4423      	add	r3, r4
 8013a0a:	603b      	str	r3, [r7, #0]
 8013a0c:	682b      	ldr	r3, [r5, #0]
 8013a0e:	441c      	add	r4, r3
 8013a10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013a14:	f8c8 3000 	str.w	r3, [r8]
 8013a18:	7b2a      	ldrb	r2, [r5, #12]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d0d6      	beq.n	80139cc <uxr_next_reliable_nack_buffer_to_send+0x18>
 8013a1e:	4648      	mov	r0, r9
 8013a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013a24 <uxr_process_acknack>:
 8013a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a26:	4604      	mov	r4, r0
 8013a28:	460e      	mov	r6, r1
 8013a2a:	4610      	mov	r0, r2
 8013a2c:	2101      	movs	r1, #1
 8013a2e:	f000 f857 	bl	8013ae0 <uxr_seq_num_sub>
 8013a32:	8a61      	ldrh	r1, [r4, #18]
 8013a34:	f000 f854 	bl	8013ae0 <uxr_seq_num_sub>
 8013a38:	b1b8      	cbz	r0, 8013a6a <uxr_process_acknack+0x46>
 8013a3a:	4605      	mov	r5, r0
 8013a3c:	2700      	movs	r7, #0
 8013a3e:	2101      	movs	r1, #1
 8013a40:	8a60      	ldrh	r0, [r4, #18]
 8013a42:	f000 f849 	bl	8013ad8 <uxr_seq_num_add>
 8013a46:	8921      	ldrh	r1, [r4, #8]
 8013a48:	6862      	ldr	r2, [r4, #4]
 8013a4a:	fbb0 f3f1 	udiv	r3, r0, r1
 8013a4e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013a52:	fb01 0313 	mls	r3, r1, r3, r0
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	fb03 f302 	mul.w	r3, r3, r2
 8013a5c:	7b21      	ldrb	r1, [r4, #12]
 8013a5e:	6822      	ldr	r2, [r4, #0]
 8013a60:	3701      	adds	r7, #1
 8013a62:	42bd      	cmp	r5, r7
 8013a64:	8260      	strh	r0, [r4, #18]
 8013a66:	50d1      	str	r1, [r2, r3]
 8013a68:	d1e9      	bne.n	8013a3e <uxr_process_acknack+0x1a>
 8013a6a:	3e00      	subs	r6, #0
 8013a6c:	f04f 0300 	mov.w	r3, #0
 8013a70:	bf18      	it	ne
 8013a72:	2601      	movne	r6, #1
 8013a74:	f884 3020 	strb.w	r3, [r4, #32]
 8013a78:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8013a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a7e:	bf00      	nop

08013a80 <uxr_is_output_up_to_date>:
 8013a80:	8a01      	ldrh	r1, [r0, #16]
 8013a82:	b508      	push	{r3, lr}
 8013a84:	8a40      	ldrh	r0, [r0, #18]
 8013a86:	f000 f82f 	bl	8013ae8 <uxr_seq_num_cmp>
 8013a8a:	fab0 f080 	clz	r0, r0
 8013a8e:	0940      	lsrs	r0, r0, #5
 8013a90:	bd08      	pop	{r3, pc}
 8013a92:	bf00      	nop

08013a94 <get_available_free_slots>:
 8013a94:	8901      	ldrh	r1, [r0, #8]
 8013a96:	b1e1      	cbz	r1, 8013ad2 <get_available_free_slots+0x3e>
 8013a98:	b4f0      	push	{r4, r5, r6, r7}
 8013a9a:	2400      	movs	r4, #0
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	6845      	ldr	r5, [r0, #4]
 8013aa0:	4622      	mov	r2, r4
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	fbb5 f5f1 	udiv	r5, r5, r1
 8013aa8:	681f      	ldr	r7, [r3, #0]
 8013aaa:	7b1e      	ldrb	r6, [r3, #12]
 8013aac:	fbb2 f3f1 	udiv	r3, r2, r1
 8013ab0:	fb01 2313 	mls	r3, r1, r3, r2
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	fb05 7303 	mla	r3, r5, r3, r7
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	3401      	adds	r4, #1
 8013abe:	429e      	cmp	r6, r3
 8013ac0:	bf08      	it	eq
 8013ac2:	3001      	addeq	r0, #1
 8013ac4:	b2a2      	uxth	r2, r4
 8013ac6:	bf08      	it	eq
 8013ac8:	b280      	uxtheq	r0, r0
 8013aca:	428a      	cmp	r2, r1
 8013acc:	d3ee      	bcc.n	8013aac <get_available_free_slots+0x18>
 8013ace:	bcf0      	pop	{r4, r5, r6, r7}
 8013ad0:	4770      	bx	lr
 8013ad2:	4608      	mov	r0, r1
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop

08013ad8 <uxr_seq_num_add>:
 8013ad8:	4408      	add	r0, r1
 8013ada:	b280      	uxth	r0, r0
 8013adc:	4770      	bx	lr
 8013ade:	bf00      	nop

08013ae0 <uxr_seq_num_sub>:
 8013ae0:	1a40      	subs	r0, r0, r1
 8013ae2:	b280      	uxth	r0, r0
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop

08013ae8 <uxr_seq_num_cmp>:
 8013ae8:	4288      	cmp	r0, r1
 8013aea:	d011      	beq.n	8013b10 <uxr_seq_num_cmp+0x28>
 8013aec:	d309      	bcc.n	8013b02 <uxr_seq_num_cmp+0x1a>
 8013aee:	4288      	cmp	r0, r1
 8013af0:	d910      	bls.n	8013b14 <uxr_seq_num_cmp+0x2c>
 8013af2:	1a40      	subs	r0, r0, r1
 8013af4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8013af8:	bfd4      	ite	le
 8013afa:	2001      	movle	r0, #1
 8013afc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8013b00:	4770      	bx	lr
 8013b02:	1a0b      	subs	r3, r1, r0
 8013b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b08:	daf1      	bge.n	8013aee <uxr_seq_num_cmp+0x6>
 8013b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b0e:	4770      	bx	lr
 8013b10:	2000      	movs	r0, #0
 8013b12:	4770      	bx	lr
 8013b14:	2001      	movs	r0, #1
 8013b16:	4770      	bx	lr

08013b18 <rcl_get_default_domain_id>:
 8013b18:	2300      	movs	r3, #0
 8013b1a:	b530      	push	{r4, r5, lr}
 8013b1c:	b083      	sub	sp, #12
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	b1d0      	cbz	r0, 8013b58 <rcl_get_default_domain_id+0x40>
 8013b22:	4604      	mov	r4, r0
 8013b24:	4669      	mov	r1, sp
 8013b26:	4815      	ldr	r0, [pc, #84]	; (8013b7c <rcl_get_default_domain_id+0x64>)
 8013b28:	f7fe faba 	bl	80120a0 <rcutils_get_env>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	b110      	cbz	r0, 8013b36 <rcl_get_default_domain_id+0x1e>
 8013b30:	2001      	movs	r0, #1
 8013b32:	b003      	add	sp, #12
 8013b34:	bd30      	pop	{r4, r5, pc}
 8013b36:	9b00      	ldr	r3, [sp, #0]
 8013b38:	b18b      	cbz	r3, 8013b5e <rcl_get_default_domain_id+0x46>
 8013b3a:	7818      	ldrb	r0, [r3, #0]
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d0f8      	beq.n	8013b32 <rcl_get_default_domain_id+0x1a>
 8013b40:	4618      	mov	r0, r3
 8013b42:	a901      	add	r1, sp, #4
 8013b44:	9201      	str	r2, [sp, #4]
 8013b46:	f000 fbeb 	bl	8014320 <strtoul>
 8013b4a:	4605      	mov	r5, r0
 8013b4c:	b150      	cbz	r0, 8013b64 <rcl_get_default_domain_id+0x4c>
 8013b4e:	1c43      	adds	r3, r0, #1
 8013b50:	d00d      	beq.n	8013b6e <rcl_get_default_domain_id+0x56>
 8013b52:	2000      	movs	r0, #0
 8013b54:	6025      	str	r5, [r4, #0]
 8013b56:	e7ec      	b.n	8013b32 <rcl_get_default_domain_id+0x1a>
 8013b58:	200b      	movs	r0, #11
 8013b5a:	b003      	add	sp, #12
 8013b5c:	bd30      	pop	{r4, r5, pc}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	b003      	add	sp, #12
 8013b62:	bd30      	pop	{r4, r5, pc}
 8013b64:	9b01      	ldr	r3, [sp, #4]
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d0f2      	beq.n	8013b52 <rcl_get_default_domain_id+0x3a>
 8013b6c:	e7e0      	b.n	8013b30 <rcl_get_default_domain_id+0x18>
 8013b6e:	f000 f8d9 	bl	8013d24 <__errno>
 8013b72:	6803      	ldr	r3, [r0, #0]
 8013b74:	2b22      	cmp	r3, #34	; 0x22
 8013b76:	d1ec      	bne.n	8013b52 <rcl_get_default_domain_id+0x3a>
 8013b78:	e7da      	b.n	8013b30 <rcl_get_default_domain_id+0x18>
 8013b7a:	bf00      	nop
 8013b7c:	08016b48 	.word	0x08016b48

08013b80 <rcl_get_zero_initialized_guard_condition>:
 8013b80:	4603      	mov	r3, r0
 8013b82:	4a03      	ldr	r2, [pc, #12]	; (8013b90 <rcl_get_zero_initialized_guard_condition+0x10>)
 8013b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b88:	e883 0003 	stmia.w	r3, {r0, r1}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	4770      	bx	lr
 8013b90:	08016b58 	.word	0x08016b58

08013b94 <rcl_guard_condition_init_from_rmw>:
 8013b94:	4684      	mov	ip, r0
 8013b96:	b082      	sub	sp, #8
 8013b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b9c:	b086      	sub	sp, #24
 8013b9e:	ac0c      	add	r4, sp, #48	; 0x30
 8013ba0:	f844 3f04 	str.w	r3, [r4, #4]!
 8013ba4:	ad01      	add	r5, sp, #4
 8013ba6:	460f      	mov	r7, r1
 8013ba8:	4616      	mov	r6, r2
 8013baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bae:	6823      	ldr	r3, [r4, #0]
 8013bb0:	a801      	add	r0, sp, #4
 8013bb2:	4664      	mov	r4, ip
 8013bb4:	602b      	str	r3, [r5, #0]
 8013bb6:	f7f6 f9bf 	bl	8009f38 <rcutils_allocator_is_valid>
 8013bba:	b338      	cbz	r0, 8013c0c <rcl_guard_condition_init_from_rmw+0x78>
 8013bbc:	b334      	cbz	r4, 8013c0c <rcl_guard_condition_init_from_rmw+0x78>
 8013bbe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013bc2:	f1b8 0f00 	cmp.w	r8, #0
 8013bc6:	d11b      	bne.n	8013c00 <rcl_guard_condition_init_from_rmw+0x6c>
 8013bc8:	b306      	cbz	r6, 8013c0c <rcl_guard_condition_init_from_rmw+0x78>
 8013bca:	4630      	mov	r0, r6
 8013bcc:	f7fc fa08 	bl	800ffe0 <rcl_context_is_valid>
 8013bd0:	b310      	cbz	r0, 8013c18 <rcl_guard_condition_init_from_rmw+0x84>
 8013bd2:	201c      	movs	r0, #28
 8013bd4:	9b01      	ldr	r3, [sp, #4]
 8013bd6:	9905      	ldr	r1, [sp, #20]
 8013bd8:	4798      	blx	r3
 8013bda:	4605      	mov	r5, r0
 8013bdc:	6060      	str	r0, [r4, #4]
 8013bde:	b340      	cbz	r0, 8013c32 <rcl_guard_condition_init_from_rmw+0x9e>
 8013be0:	b1e7      	cbz	r7, 8013c1c <rcl_guard_condition_init_from_rmw+0x88>
 8013be2:	6007      	str	r7, [r0, #0]
 8013be4:	f880 8004 	strb.w	r8, [r0, #4]
 8013be8:	ac01      	add	r4, sp, #4
 8013bea:	3508      	adds	r5, #8
 8013bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	6823      	ldr	r3, [r4, #0]
 8013bf4:	602b      	str	r3, [r5, #0]
 8013bf6:	b006      	add	sp, #24
 8013bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfc:	b002      	add	sp, #8
 8013bfe:	4770      	bx	lr
 8013c00:	2064      	movs	r0, #100	; 0x64
 8013c02:	b006      	add	sp, #24
 8013c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c08:	b002      	add	sp, #8
 8013c0a:	4770      	bx	lr
 8013c0c:	200b      	movs	r0, #11
 8013c0e:	b006      	add	sp, #24
 8013c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c14:	b002      	add	sp, #8
 8013c16:	4770      	bx	lr
 8013c18:	2065      	movs	r0, #101	; 0x65
 8013c1a:	e7f2      	b.n	8013c02 <rcl_guard_condition_init_from_rmw+0x6e>
 8013c1c:	6830      	ldr	r0, [r6, #0]
 8013c1e:	3028      	adds	r0, #40	; 0x28
 8013c20:	f000 f850 	bl	8013cc4 <rmw_create_guard_condition>
 8013c24:	6028      	str	r0, [r5, #0]
 8013c26:	6865      	ldr	r5, [r4, #4]
 8013c28:	682e      	ldr	r6, [r5, #0]
 8013c2a:	b126      	cbz	r6, 8013c36 <rcl_guard_condition_init_from_rmw+0xa2>
 8013c2c:	2301      	movs	r3, #1
 8013c2e:	712b      	strb	r3, [r5, #4]
 8013c30:	e7da      	b.n	8013be8 <rcl_guard_condition_init_from_rmw+0x54>
 8013c32:	200a      	movs	r0, #10
 8013c34:	e7e5      	b.n	8013c02 <rcl_guard_condition_init_from_rmw+0x6e>
 8013c36:	4628      	mov	r0, r5
 8013c38:	9b02      	ldr	r3, [sp, #8]
 8013c3a:	9905      	ldr	r1, [sp, #20]
 8013c3c:	4798      	blx	r3
 8013c3e:	2001      	movs	r0, #1
 8013c40:	6066      	str	r6, [r4, #4]
 8013c42:	e7de      	b.n	8013c02 <rcl_guard_condition_init_from_rmw+0x6e>

08013c44 <rcl_guard_condition_fini>:
 8013c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c46:	b1e0      	cbz	r0, 8013c82 <rcl_guard_condition_fini+0x3e>
 8013c48:	4604      	mov	r4, r0
 8013c4a:	6840      	ldr	r0, [r0, #4]
 8013c4c:	b158      	cbz	r0, 8013c66 <rcl_guard_condition_fini+0x22>
 8013c4e:	6803      	ldr	r3, [r0, #0]
 8013c50:	68c6      	ldr	r6, [r0, #12]
 8013c52:	6987      	ldr	r7, [r0, #24]
 8013c54:	b153      	cbz	r3, 8013c6c <rcl_guard_condition_fini+0x28>
 8013c56:	7905      	ldrb	r5, [r0, #4]
 8013c58:	b955      	cbnz	r5, 8013c70 <rcl_guard_condition_fini+0x2c>
 8013c5a:	4639      	mov	r1, r7
 8013c5c:	47b0      	blx	r6
 8013c5e:	2300      	movs	r3, #0
 8013c60:	4628      	mov	r0, r5
 8013c62:	6063      	str	r3, [r4, #4]
 8013c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c66:	4605      	mov	r5, r0
 8013c68:	4628      	mov	r0, r5
 8013c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c6c:	461d      	mov	r5, r3
 8013c6e:	e7f4      	b.n	8013c5a <rcl_guard_condition_fini+0x16>
 8013c70:	4618      	mov	r0, r3
 8013c72:	f000 f83b 	bl	8013cec <rmw_destroy_guard_condition>
 8013c76:	4605      	mov	r5, r0
 8013c78:	3d00      	subs	r5, #0
 8013c7a:	bf18      	it	ne
 8013c7c:	2501      	movne	r5, #1
 8013c7e:	6860      	ldr	r0, [r4, #4]
 8013c80:	e7eb      	b.n	8013c5a <rcl_guard_condition_fini+0x16>
 8013c82:	250b      	movs	r5, #11
 8013c84:	4628      	mov	r0, r5
 8013c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c88 <rcl_guard_condition_get_default_options>:
 8013c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c8c:	4680      	mov	r8, r0
 8013c8e:	b086      	sub	sp, #24
 8013c90:	466d      	mov	r5, sp
 8013c92:	4c08      	ldr	r4, [pc, #32]	; (8013cb4 <rcl_guard_condition_get_default_options+0x2c>)
 8013c94:	4646      	mov	r6, r8
 8013c96:	4627      	mov	r7, r4
 8013c98:	4668      	mov	r0, sp
 8013c9a:	f7f6 f93f 	bl	8009f1c <rcutils_get_default_allocator>
 8013c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ca2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013ca4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ca6:	4640      	mov	r0, r8
 8013ca8:	682b      	ldr	r3, [r5, #0]
 8013caa:	6023      	str	r3, [r4, #0]
 8013cac:	6033      	str	r3, [r6, #0]
 8013cae:	b006      	add	sp, #24
 8013cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb4:	20006638 	.word	0x20006638

08013cb8 <rcl_guard_condition_get_rmw_handle>:
 8013cb8:	b110      	cbz	r0, 8013cc0 <rcl_guard_condition_get_rmw_handle+0x8>
 8013cba:	6840      	ldr	r0, [r0, #4]
 8013cbc:	b100      	cbz	r0, 8013cc0 <rcl_guard_condition_get_rmw_handle+0x8>
 8013cbe:	6800      	ldr	r0, [r0, #0]
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop

08013cc4 <rmw_create_guard_condition>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4605      	mov	r5, r0
 8013cc8:	4807      	ldr	r0, [pc, #28]	; (8013ce8 <rmw_create_guard_condition+0x24>)
 8013cca:	f7fe fcc1 	bl	8012650 <get_memory>
 8013cce:	b148      	cbz	r0, 8013ce4 <rmw_create_guard_condition+0x20>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	68c4      	ldr	r4, [r0, #12]
 8013cd4:	61e5      	str	r5, [r4, #28]
 8013cd6:	7423      	strb	r3, [r4, #16]
 8013cd8:	f7fe fd22 	bl	8012720 <rmw_get_implementation_identifier>
 8013cdc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013ce0:	f104 0014 	add.w	r0, r4, #20
 8013ce4:	bd38      	pop	{r3, r4, r5, pc}
 8013ce6:	bf00      	nop
 8013ce8:	2000ba68 	.word	0x2000ba68

08013cec <rmw_destroy_guard_condition>:
 8013cec:	b508      	push	{r3, lr}
 8013cee:	4b08      	ldr	r3, [pc, #32]	; (8013d10 <rmw_destroy_guard_condition+0x24>)
 8013cf0:	6819      	ldr	r1, [r3, #0]
 8013cf2:	b911      	cbnz	r1, 8013cfa <rmw_destroy_guard_condition+0xe>
 8013cf4:	e00a      	b.n	8013d0c <rmw_destroy_guard_condition+0x20>
 8013cf6:	6889      	ldr	r1, [r1, #8]
 8013cf8:	b141      	cbz	r1, 8013d0c <rmw_destroy_guard_condition+0x20>
 8013cfa:	68cb      	ldr	r3, [r1, #12]
 8013cfc:	3314      	adds	r3, #20
 8013cfe:	4298      	cmp	r0, r3
 8013d00:	d1f9      	bne.n	8013cf6 <rmw_destroy_guard_condition+0xa>
 8013d02:	4803      	ldr	r0, [pc, #12]	; (8013d10 <rmw_destroy_guard_condition+0x24>)
 8013d04:	f7fe fcb4 	bl	8012670 <put_memory>
 8013d08:	2000      	movs	r0, #0
 8013d0a:	bd08      	pop	{r3, pc}
 8013d0c:	2001      	movs	r0, #1
 8013d0e:	bd08      	pop	{r3, pc}
 8013d10:	2000ba68 	.word	0x2000ba68

08013d14 <calloc>:
 8013d14:	4b02      	ldr	r3, [pc, #8]	; (8013d20 <calloc+0xc>)
 8013d16:	460a      	mov	r2, r1
 8013d18:	4601      	mov	r1, r0
 8013d1a:	6818      	ldr	r0, [r3, #0]
 8013d1c:	f000 b8b2 	b.w	8013e84 <_calloc_r>
 8013d20:	20000074 	.word	0x20000074

08013d24 <__errno>:
 8013d24:	4b01      	ldr	r3, [pc, #4]	; (8013d2c <__errno+0x8>)
 8013d26:	6818      	ldr	r0, [r3, #0]
 8013d28:	4770      	bx	lr
 8013d2a:	bf00      	nop
 8013d2c:	20000074 	.word	0x20000074

08013d30 <getenv>:
 8013d30:	b507      	push	{r0, r1, r2, lr}
 8013d32:	4b04      	ldr	r3, [pc, #16]	; (8013d44 <getenv+0x14>)
 8013d34:	4601      	mov	r1, r0
 8013d36:	aa01      	add	r2, sp, #4
 8013d38:	6818      	ldr	r0, [r3, #0]
 8013d3a:	f000 f805 	bl	8013d48 <_findenv_r>
 8013d3e:	b003      	add	sp, #12
 8013d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d44:	20000074 	.word	0x20000074

08013d48 <_findenv_r>:
 8013d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4c:	4607      	mov	r7, r0
 8013d4e:	4689      	mov	r9, r1
 8013d50:	4616      	mov	r6, r2
 8013d52:	f000 fb47 	bl	80143e4 <__env_lock>
 8013d56:	4b18      	ldr	r3, [pc, #96]	; (8013db8 <_findenv_r+0x70>)
 8013d58:	681c      	ldr	r4, [r3, #0]
 8013d5a:	469a      	mov	sl, r3
 8013d5c:	b134      	cbz	r4, 8013d6c <_findenv_r+0x24>
 8013d5e:	464b      	mov	r3, r9
 8013d60:	4698      	mov	r8, r3
 8013d62:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013d66:	b139      	cbz	r1, 8013d78 <_findenv_r+0x30>
 8013d68:	293d      	cmp	r1, #61	; 0x3d
 8013d6a:	d1f9      	bne.n	8013d60 <_findenv_r+0x18>
 8013d6c:	4638      	mov	r0, r7
 8013d6e:	f000 fb3f 	bl	80143f0 <__env_unlock>
 8013d72:	2000      	movs	r0, #0
 8013d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d78:	eba8 0809 	sub.w	r8, r8, r9
 8013d7c:	46a3      	mov	fp, r4
 8013d7e:	f854 0b04 	ldr.w	r0, [r4], #4
 8013d82:	2800      	cmp	r0, #0
 8013d84:	d0f2      	beq.n	8013d6c <_findenv_r+0x24>
 8013d86:	4642      	mov	r2, r8
 8013d88:	4649      	mov	r1, r9
 8013d8a:	f000 fa16 	bl	80141ba <strncmp>
 8013d8e:	2800      	cmp	r0, #0
 8013d90:	d1f4      	bne.n	8013d7c <_findenv_r+0x34>
 8013d92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013d96:	eb03 0508 	add.w	r5, r3, r8
 8013d9a:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013d9e:	2b3d      	cmp	r3, #61	; 0x3d
 8013da0:	d1ec      	bne.n	8013d7c <_findenv_r+0x34>
 8013da2:	f8da 3000 	ldr.w	r3, [sl]
 8013da6:	4638      	mov	r0, r7
 8013da8:	ebab 0303 	sub.w	r3, fp, r3
 8013dac:	109b      	asrs	r3, r3, #2
 8013dae:	6033      	str	r3, [r6, #0]
 8013db0:	f000 fb1e 	bl	80143f0 <__env_unlock>
 8013db4:	1c68      	adds	r0, r5, #1
 8013db6:	e7dd      	b.n	8013d74 <_findenv_r+0x2c>
 8013db8:	20000000 	.word	0x20000000

08013dbc <__libc_init_array>:
 8013dbc:	b570      	push	{r4, r5, r6, lr}
 8013dbe:	2600      	movs	r6, #0
 8013dc0:	4d0c      	ldr	r5, [pc, #48]	; (8013df4 <__libc_init_array+0x38>)
 8013dc2:	4c0d      	ldr	r4, [pc, #52]	; (8013df8 <__libc_init_array+0x3c>)
 8013dc4:	1b64      	subs	r4, r4, r5
 8013dc6:	10a4      	asrs	r4, r4, #2
 8013dc8:	42a6      	cmp	r6, r4
 8013dca:	d109      	bne.n	8013de0 <__libc_init_array+0x24>
 8013dcc:	f001 fb90 	bl	80154f0 <_init>
 8013dd0:	2600      	movs	r6, #0
 8013dd2:	4d0a      	ldr	r5, [pc, #40]	; (8013dfc <__libc_init_array+0x40>)
 8013dd4:	4c0a      	ldr	r4, [pc, #40]	; (8013e00 <__libc_init_array+0x44>)
 8013dd6:	1b64      	subs	r4, r4, r5
 8013dd8:	10a4      	asrs	r4, r4, #2
 8013dda:	42a6      	cmp	r6, r4
 8013ddc:	d105      	bne.n	8013dea <__libc_init_array+0x2e>
 8013dde:	bd70      	pop	{r4, r5, r6, pc}
 8013de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8013de4:	4798      	blx	r3
 8013de6:	3601      	adds	r6, #1
 8013de8:	e7ee      	b.n	8013dc8 <__libc_init_array+0xc>
 8013dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8013dee:	4798      	blx	r3
 8013df0:	3601      	adds	r6, #1
 8013df2:	e7f2      	b.n	8013dda <__libc_init_array+0x1e>
 8013df4:	08016db8 	.word	0x08016db8
 8013df8:	08016db8 	.word	0x08016db8
 8013dfc:	08016db8 	.word	0x08016db8
 8013e00:	08016dbc 	.word	0x08016dbc

08013e04 <malloc>:
 8013e04:	4b02      	ldr	r3, [pc, #8]	; (8013e10 <malloc+0xc>)
 8013e06:	4601      	mov	r1, r0
 8013e08:	6818      	ldr	r0, [r3, #0]
 8013e0a:	f000 b895 	b.w	8013f38 <_malloc_r>
 8013e0e:	bf00      	nop
 8013e10:	20000074 	.word	0x20000074

08013e14 <free>:
 8013e14:	4b02      	ldr	r3, [pc, #8]	; (8013e20 <free+0xc>)
 8013e16:	4601      	mov	r1, r0
 8013e18:	6818      	ldr	r0, [r3, #0]
 8013e1a:	f000 b841 	b.w	8013ea0 <_free_r>
 8013e1e:	bf00      	nop
 8013e20:	20000074 	.word	0x20000074

08013e24 <memcpy>:
 8013e24:	440a      	add	r2, r1
 8013e26:	4291      	cmp	r1, r2
 8013e28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013e2c:	d100      	bne.n	8013e30 <memcpy+0xc>
 8013e2e:	4770      	bx	lr
 8013e30:	b510      	push	{r4, lr}
 8013e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e36:	4291      	cmp	r1, r2
 8013e38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e3c:	d1f9      	bne.n	8013e32 <memcpy+0xe>
 8013e3e:	bd10      	pop	{r4, pc}

08013e40 <memmove>:
 8013e40:	4288      	cmp	r0, r1
 8013e42:	b510      	push	{r4, lr}
 8013e44:	eb01 0402 	add.w	r4, r1, r2
 8013e48:	d902      	bls.n	8013e50 <memmove+0x10>
 8013e4a:	4284      	cmp	r4, r0
 8013e4c:	4623      	mov	r3, r4
 8013e4e:	d807      	bhi.n	8013e60 <memmove+0x20>
 8013e50:	1e43      	subs	r3, r0, #1
 8013e52:	42a1      	cmp	r1, r4
 8013e54:	d008      	beq.n	8013e68 <memmove+0x28>
 8013e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e5e:	e7f8      	b.n	8013e52 <memmove+0x12>
 8013e60:	4601      	mov	r1, r0
 8013e62:	4402      	add	r2, r0
 8013e64:	428a      	cmp	r2, r1
 8013e66:	d100      	bne.n	8013e6a <memmove+0x2a>
 8013e68:	bd10      	pop	{r4, pc}
 8013e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e72:	e7f7      	b.n	8013e64 <memmove+0x24>

08013e74 <memset>:
 8013e74:	4603      	mov	r3, r0
 8013e76:	4402      	add	r2, r0
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	d100      	bne.n	8013e7e <memset+0xa>
 8013e7c:	4770      	bx	lr
 8013e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8013e82:	e7f9      	b.n	8013e78 <memset+0x4>

08013e84 <_calloc_r>:
 8013e84:	b538      	push	{r3, r4, r5, lr}
 8013e86:	fb02 f501 	mul.w	r5, r2, r1
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	f000 f854 	bl	8013f38 <_malloc_r>
 8013e90:	4604      	mov	r4, r0
 8013e92:	b118      	cbz	r0, 8013e9c <_calloc_r+0x18>
 8013e94:	462a      	mov	r2, r5
 8013e96:	2100      	movs	r1, #0
 8013e98:	f7ff ffec 	bl	8013e74 <memset>
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	bd38      	pop	{r3, r4, r5, pc}

08013ea0 <_free_r>:
 8013ea0:	b538      	push	{r3, r4, r5, lr}
 8013ea2:	4605      	mov	r5, r0
 8013ea4:	2900      	cmp	r1, #0
 8013ea6:	d043      	beq.n	8013f30 <_free_r+0x90>
 8013ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013eac:	1f0c      	subs	r4, r1, #4
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	bfb8      	it	lt
 8013eb2:	18e4      	addlt	r4, r4, r3
 8013eb4:	f000 fbac 	bl	8014610 <__malloc_lock>
 8013eb8:	4a1e      	ldr	r2, [pc, #120]	; (8013f34 <_free_r+0x94>)
 8013eba:	6813      	ldr	r3, [r2, #0]
 8013ebc:	4610      	mov	r0, r2
 8013ebe:	b933      	cbnz	r3, 8013ece <_free_r+0x2e>
 8013ec0:	6063      	str	r3, [r4, #4]
 8013ec2:	6014      	str	r4, [r2, #0]
 8013ec4:	4628      	mov	r0, r5
 8013ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013eca:	f000 bba7 	b.w	801461c <__malloc_unlock>
 8013ece:	42a3      	cmp	r3, r4
 8013ed0:	d90a      	bls.n	8013ee8 <_free_r+0x48>
 8013ed2:	6821      	ldr	r1, [r4, #0]
 8013ed4:	1862      	adds	r2, r4, r1
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	bf01      	itttt	eq
 8013eda:	681a      	ldreq	r2, [r3, #0]
 8013edc:	685b      	ldreq	r3, [r3, #4]
 8013ede:	1852      	addeq	r2, r2, r1
 8013ee0:	6022      	streq	r2, [r4, #0]
 8013ee2:	6063      	str	r3, [r4, #4]
 8013ee4:	6004      	str	r4, [r0, #0]
 8013ee6:	e7ed      	b.n	8013ec4 <_free_r+0x24>
 8013ee8:	461a      	mov	r2, r3
 8013eea:	685b      	ldr	r3, [r3, #4]
 8013eec:	b10b      	cbz	r3, 8013ef2 <_free_r+0x52>
 8013eee:	42a3      	cmp	r3, r4
 8013ef0:	d9fa      	bls.n	8013ee8 <_free_r+0x48>
 8013ef2:	6811      	ldr	r1, [r2, #0]
 8013ef4:	1850      	adds	r0, r2, r1
 8013ef6:	42a0      	cmp	r0, r4
 8013ef8:	d10b      	bne.n	8013f12 <_free_r+0x72>
 8013efa:	6820      	ldr	r0, [r4, #0]
 8013efc:	4401      	add	r1, r0
 8013efe:	1850      	adds	r0, r2, r1
 8013f00:	4283      	cmp	r3, r0
 8013f02:	6011      	str	r1, [r2, #0]
 8013f04:	d1de      	bne.n	8013ec4 <_free_r+0x24>
 8013f06:	6818      	ldr	r0, [r3, #0]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	4401      	add	r1, r0
 8013f0c:	6011      	str	r1, [r2, #0]
 8013f0e:	6053      	str	r3, [r2, #4]
 8013f10:	e7d8      	b.n	8013ec4 <_free_r+0x24>
 8013f12:	d902      	bls.n	8013f1a <_free_r+0x7a>
 8013f14:	230c      	movs	r3, #12
 8013f16:	602b      	str	r3, [r5, #0]
 8013f18:	e7d4      	b.n	8013ec4 <_free_r+0x24>
 8013f1a:	6820      	ldr	r0, [r4, #0]
 8013f1c:	1821      	adds	r1, r4, r0
 8013f1e:	428b      	cmp	r3, r1
 8013f20:	bf01      	itttt	eq
 8013f22:	6819      	ldreq	r1, [r3, #0]
 8013f24:	685b      	ldreq	r3, [r3, #4]
 8013f26:	1809      	addeq	r1, r1, r0
 8013f28:	6021      	streq	r1, [r4, #0]
 8013f2a:	6063      	str	r3, [r4, #4]
 8013f2c:	6054      	str	r4, [r2, #4]
 8013f2e:	e7c9      	b.n	8013ec4 <_free_r+0x24>
 8013f30:	bd38      	pop	{r3, r4, r5, pc}
 8013f32:	bf00      	nop
 8013f34:	2000664c 	.word	0x2000664c

08013f38 <_malloc_r>:
 8013f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f3a:	1ccd      	adds	r5, r1, #3
 8013f3c:	f025 0503 	bic.w	r5, r5, #3
 8013f40:	3508      	adds	r5, #8
 8013f42:	2d0c      	cmp	r5, #12
 8013f44:	bf38      	it	cc
 8013f46:	250c      	movcc	r5, #12
 8013f48:	2d00      	cmp	r5, #0
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	db01      	blt.n	8013f52 <_malloc_r+0x1a>
 8013f4e:	42a9      	cmp	r1, r5
 8013f50:	d903      	bls.n	8013f5a <_malloc_r+0x22>
 8013f52:	230c      	movs	r3, #12
 8013f54:	6033      	str	r3, [r6, #0]
 8013f56:	2000      	movs	r0, #0
 8013f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f5a:	f000 fb59 	bl	8014610 <__malloc_lock>
 8013f5e:	4921      	ldr	r1, [pc, #132]	; (8013fe4 <_malloc_r+0xac>)
 8013f60:	680a      	ldr	r2, [r1, #0]
 8013f62:	4614      	mov	r4, r2
 8013f64:	b99c      	cbnz	r4, 8013f8e <_malloc_r+0x56>
 8013f66:	4f20      	ldr	r7, [pc, #128]	; (8013fe8 <_malloc_r+0xb0>)
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	b923      	cbnz	r3, 8013f76 <_malloc_r+0x3e>
 8013f6c:	4621      	mov	r1, r4
 8013f6e:	4630      	mov	r0, r6
 8013f70:	f000 f8ca 	bl	8014108 <_sbrk_r>
 8013f74:	6038      	str	r0, [r7, #0]
 8013f76:	4629      	mov	r1, r5
 8013f78:	4630      	mov	r0, r6
 8013f7a:	f000 f8c5 	bl	8014108 <_sbrk_r>
 8013f7e:	1c43      	adds	r3, r0, #1
 8013f80:	d123      	bne.n	8013fca <_malloc_r+0x92>
 8013f82:	230c      	movs	r3, #12
 8013f84:	4630      	mov	r0, r6
 8013f86:	6033      	str	r3, [r6, #0]
 8013f88:	f000 fb48 	bl	801461c <__malloc_unlock>
 8013f8c:	e7e3      	b.n	8013f56 <_malloc_r+0x1e>
 8013f8e:	6823      	ldr	r3, [r4, #0]
 8013f90:	1b5b      	subs	r3, r3, r5
 8013f92:	d417      	bmi.n	8013fc4 <_malloc_r+0x8c>
 8013f94:	2b0b      	cmp	r3, #11
 8013f96:	d903      	bls.n	8013fa0 <_malloc_r+0x68>
 8013f98:	6023      	str	r3, [r4, #0]
 8013f9a:	441c      	add	r4, r3
 8013f9c:	6025      	str	r5, [r4, #0]
 8013f9e:	e004      	b.n	8013faa <_malloc_r+0x72>
 8013fa0:	6863      	ldr	r3, [r4, #4]
 8013fa2:	42a2      	cmp	r2, r4
 8013fa4:	bf0c      	ite	eq
 8013fa6:	600b      	streq	r3, [r1, #0]
 8013fa8:	6053      	strne	r3, [r2, #4]
 8013faa:	4630      	mov	r0, r6
 8013fac:	f000 fb36 	bl	801461c <__malloc_unlock>
 8013fb0:	f104 000b 	add.w	r0, r4, #11
 8013fb4:	1d23      	adds	r3, r4, #4
 8013fb6:	f020 0007 	bic.w	r0, r0, #7
 8013fba:	1ac2      	subs	r2, r0, r3
 8013fbc:	d0cc      	beq.n	8013f58 <_malloc_r+0x20>
 8013fbe:	1a1b      	subs	r3, r3, r0
 8013fc0:	50a3      	str	r3, [r4, r2]
 8013fc2:	e7c9      	b.n	8013f58 <_malloc_r+0x20>
 8013fc4:	4622      	mov	r2, r4
 8013fc6:	6864      	ldr	r4, [r4, #4]
 8013fc8:	e7cc      	b.n	8013f64 <_malloc_r+0x2c>
 8013fca:	1cc4      	adds	r4, r0, #3
 8013fcc:	f024 0403 	bic.w	r4, r4, #3
 8013fd0:	42a0      	cmp	r0, r4
 8013fd2:	d0e3      	beq.n	8013f9c <_malloc_r+0x64>
 8013fd4:	1a21      	subs	r1, r4, r0
 8013fd6:	4630      	mov	r0, r6
 8013fd8:	f000 f896 	bl	8014108 <_sbrk_r>
 8013fdc:	3001      	adds	r0, #1
 8013fde:	d1dd      	bne.n	8013f9c <_malloc_r+0x64>
 8013fe0:	e7cf      	b.n	8013f82 <_malloc_r+0x4a>
 8013fe2:	bf00      	nop
 8013fe4:	2000664c 	.word	0x2000664c
 8013fe8:	20006650 	.word	0x20006650

08013fec <iprintf>:
 8013fec:	b40f      	push	{r0, r1, r2, r3}
 8013fee:	4b0a      	ldr	r3, [pc, #40]	; (8014018 <iprintf+0x2c>)
 8013ff0:	b513      	push	{r0, r1, r4, lr}
 8013ff2:	681c      	ldr	r4, [r3, #0]
 8013ff4:	b124      	cbz	r4, 8014000 <iprintf+0x14>
 8013ff6:	69a3      	ldr	r3, [r4, #24]
 8013ff8:	b913      	cbnz	r3, 8014000 <iprintf+0x14>
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	f000 fa56 	bl	80144ac <__sinit>
 8014000:	ab05      	add	r3, sp, #20
 8014002:	4620      	mov	r0, r4
 8014004:	9a04      	ldr	r2, [sp, #16]
 8014006:	68a1      	ldr	r1, [r4, #8]
 8014008:	9301      	str	r3, [sp, #4]
 801400a:	f000 fcb7 	bl	801497c <_vfiprintf_r>
 801400e:	b002      	add	sp, #8
 8014010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014014:	b004      	add	sp, #16
 8014016:	4770      	bx	lr
 8014018:	20000074 	.word	0x20000074

0801401c <srand>:
 801401c:	b538      	push	{r3, r4, r5, lr}
 801401e:	4b10      	ldr	r3, [pc, #64]	; (8014060 <srand+0x44>)
 8014020:	4604      	mov	r4, r0
 8014022:	681d      	ldr	r5, [r3, #0]
 8014024:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8014026:	b9b3      	cbnz	r3, 8014056 <srand+0x3a>
 8014028:	2018      	movs	r0, #24
 801402a:	f7ff feeb 	bl	8013e04 <malloc>
 801402e:	4602      	mov	r2, r0
 8014030:	63a8      	str	r0, [r5, #56]	; 0x38
 8014032:	b920      	cbnz	r0, 801403e <srand+0x22>
 8014034:	2142      	movs	r1, #66	; 0x42
 8014036:	4b0b      	ldr	r3, [pc, #44]	; (8014064 <srand+0x48>)
 8014038:	480b      	ldr	r0, [pc, #44]	; (8014068 <srand+0x4c>)
 801403a:	f000 f9b5 	bl	80143a8 <__assert_func>
 801403e:	490b      	ldr	r1, [pc, #44]	; (801406c <srand+0x50>)
 8014040:	4b0b      	ldr	r3, [pc, #44]	; (8014070 <srand+0x54>)
 8014042:	e9c0 1300 	strd	r1, r3, [r0]
 8014046:	4b0b      	ldr	r3, [pc, #44]	; (8014074 <srand+0x58>)
 8014048:	2100      	movs	r1, #0
 801404a:	6083      	str	r3, [r0, #8]
 801404c:	230b      	movs	r3, #11
 801404e:	8183      	strh	r3, [r0, #12]
 8014050:	2001      	movs	r0, #1
 8014052:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014056:	2200      	movs	r2, #0
 8014058:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801405a:	611c      	str	r4, [r3, #16]
 801405c:	615a      	str	r2, [r3, #20]
 801405e:	bd38      	pop	{r3, r4, r5, pc}
 8014060:	20000074 	.word	0x20000074
 8014064:	08016c68 	.word	0x08016c68
 8014068:	08016c7f 	.word	0x08016c7f
 801406c:	abcd330e 	.word	0xabcd330e
 8014070:	e66d1234 	.word	0xe66d1234
 8014074:	0005deec 	.word	0x0005deec

08014078 <rand>:
 8014078:	4b17      	ldr	r3, [pc, #92]	; (80140d8 <rand+0x60>)
 801407a:	b510      	push	{r4, lr}
 801407c:	681c      	ldr	r4, [r3, #0]
 801407e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014080:	b9b3      	cbnz	r3, 80140b0 <rand+0x38>
 8014082:	2018      	movs	r0, #24
 8014084:	f7ff febe 	bl	8013e04 <malloc>
 8014088:	4602      	mov	r2, r0
 801408a:	63a0      	str	r0, [r4, #56]	; 0x38
 801408c:	b920      	cbnz	r0, 8014098 <rand+0x20>
 801408e:	214e      	movs	r1, #78	; 0x4e
 8014090:	4b12      	ldr	r3, [pc, #72]	; (80140dc <rand+0x64>)
 8014092:	4813      	ldr	r0, [pc, #76]	; (80140e0 <rand+0x68>)
 8014094:	f000 f988 	bl	80143a8 <__assert_func>
 8014098:	4912      	ldr	r1, [pc, #72]	; (80140e4 <rand+0x6c>)
 801409a:	4b13      	ldr	r3, [pc, #76]	; (80140e8 <rand+0x70>)
 801409c:	e9c0 1300 	strd	r1, r3, [r0]
 80140a0:	4b12      	ldr	r3, [pc, #72]	; (80140ec <rand+0x74>)
 80140a2:	2100      	movs	r1, #0
 80140a4:	6083      	str	r3, [r0, #8]
 80140a6:	230b      	movs	r3, #11
 80140a8:	8183      	strh	r3, [r0, #12]
 80140aa:	2001      	movs	r0, #1
 80140ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80140b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80140b2:	480f      	ldr	r0, [pc, #60]	; (80140f0 <rand+0x78>)
 80140b4:	690a      	ldr	r2, [r1, #16]
 80140b6:	694b      	ldr	r3, [r1, #20]
 80140b8:	4350      	muls	r0, r2
 80140ba:	4c0e      	ldr	r4, [pc, #56]	; (80140f4 <rand+0x7c>)
 80140bc:	fb04 0003 	mla	r0, r4, r3, r0
 80140c0:	fba2 3404 	umull	r3, r4, r2, r4
 80140c4:	1c5a      	adds	r2, r3, #1
 80140c6:	4404      	add	r4, r0
 80140c8:	f144 0000 	adc.w	r0, r4, #0
 80140cc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80140d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80140d4:	bd10      	pop	{r4, pc}
 80140d6:	bf00      	nop
 80140d8:	20000074 	.word	0x20000074
 80140dc:	08016c68 	.word	0x08016c68
 80140e0:	08016c7f 	.word	0x08016c7f
 80140e4:	abcd330e 	.word	0xabcd330e
 80140e8:	e66d1234 	.word	0xe66d1234
 80140ec:	0005deec 	.word	0x0005deec
 80140f0:	5851f42d 	.word	0x5851f42d
 80140f4:	4c957f2d 	.word	0x4c957f2d

080140f8 <realloc>:
 80140f8:	4b02      	ldr	r3, [pc, #8]	; (8014104 <realloc+0xc>)
 80140fa:	460a      	mov	r2, r1
 80140fc:	4601      	mov	r1, r0
 80140fe:	6818      	ldr	r0, [r3, #0]
 8014100:	f000 ba92 	b.w	8014628 <_realloc_r>
 8014104:	20000074 	.word	0x20000074

08014108 <_sbrk_r>:
 8014108:	b538      	push	{r3, r4, r5, lr}
 801410a:	2300      	movs	r3, #0
 801410c:	4d05      	ldr	r5, [pc, #20]	; (8014124 <_sbrk_r+0x1c>)
 801410e:	4604      	mov	r4, r0
 8014110:	4608      	mov	r0, r1
 8014112:	602b      	str	r3, [r5, #0]
 8014114:	f7ed fe7a 	bl	8001e0c <_sbrk>
 8014118:	1c43      	adds	r3, r0, #1
 801411a:	d102      	bne.n	8014122 <_sbrk_r+0x1a>
 801411c:	682b      	ldr	r3, [r5, #0]
 801411e:	b103      	cbz	r3, 8014122 <_sbrk_r+0x1a>
 8014120:	6023      	str	r3, [r4, #0]
 8014122:	bd38      	pop	{r3, r4, r5, pc}
 8014124:	2000d27c 	.word	0x2000d27c

08014128 <sniprintf>:
 8014128:	b40c      	push	{r2, r3}
 801412a:	b530      	push	{r4, r5, lr}
 801412c:	4b17      	ldr	r3, [pc, #92]	; (801418c <sniprintf+0x64>)
 801412e:	1e0c      	subs	r4, r1, #0
 8014130:	681d      	ldr	r5, [r3, #0]
 8014132:	b09d      	sub	sp, #116	; 0x74
 8014134:	da08      	bge.n	8014148 <sniprintf+0x20>
 8014136:	238b      	movs	r3, #139	; 0x8b
 8014138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801413c:	602b      	str	r3, [r5, #0]
 801413e:	b01d      	add	sp, #116	; 0x74
 8014140:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014144:	b002      	add	sp, #8
 8014146:	4770      	bx	lr
 8014148:	f44f 7302 	mov.w	r3, #520	; 0x208
 801414c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014150:	bf0c      	ite	eq
 8014152:	4623      	moveq	r3, r4
 8014154:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014158:	9304      	str	r3, [sp, #16]
 801415a:	9307      	str	r3, [sp, #28]
 801415c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014160:	9002      	str	r0, [sp, #8]
 8014162:	9006      	str	r0, [sp, #24]
 8014164:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014168:	4628      	mov	r0, r5
 801416a:	ab21      	add	r3, sp, #132	; 0x84
 801416c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801416e:	a902      	add	r1, sp, #8
 8014170:	9301      	str	r3, [sp, #4]
 8014172:	f000 fadb 	bl	801472c <_svfiprintf_r>
 8014176:	1c43      	adds	r3, r0, #1
 8014178:	bfbc      	itt	lt
 801417a:	238b      	movlt	r3, #139	; 0x8b
 801417c:	602b      	strlt	r3, [r5, #0]
 801417e:	2c00      	cmp	r4, #0
 8014180:	d0dd      	beq.n	801413e <sniprintf+0x16>
 8014182:	2200      	movs	r2, #0
 8014184:	9b02      	ldr	r3, [sp, #8]
 8014186:	701a      	strb	r2, [r3, #0]
 8014188:	e7d9      	b.n	801413e <sniprintf+0x16>
 801418a:	bf00      	nop
 801418c:	20000074 	.word	0x20000074

08014190 <strchr>:
 8014190:	4603      	mov	r3, r0
 8014192:	b2c9      	uxtb	r1, r1
 8014194:	4618      	mov	r0, r3
 8014196:	f813 2b01 	ldrb.w	r2, [r3], #1
 801419a:	b112      	cbz	r2, 80141a2 <strchr+0x12>
 801419c:	428a      	cmp	r2, r1
 801419e:	d1f9      	bne.n	8014194 <strchr+0x4>
 80141a0:	4770      	bx	lr
 80141a2:	2900      	cmp	r1, #0
 80141a4:	bf18      	it	ne
 80141a6:	2000      	movne	r0, #0
 80141a8:	4770      	bx	lr

080141aa <strcpy>:
 80141aa:	4603      	mov	r3, r0
 80141ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141b0:	f803 2b01 	strb.w	r2, [r3], #1
 80141b4:	2a00      	cmp	r2, #0
 80141b6:	d1f9      	bne.n	80141ac <strcpy+0x2>
 80141b8:	4770      	bx	lr

080141ba <strncmp>:
 80141ba:	b510      	push	{r4, lr}
 80141bc:	b16a      	cbz	r2, 80141da <strncmp+0x20>
 80141be:	3901      	subs	r1, #1
 80141c0:	1884      	adds	r4, r0, r2
 80141c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80141c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d103      	bne.n	80141d6 <strncmp+0x1c>
 80141ce:	42a0      	cmp	r0, r4
 80141d0:	d001      	beq.n	80141d6 <strncmp+0x1c>
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d1f5      	bne.n	80141c2 <strncmp+0x8>
 80141d6:	1a98      	subs	r0, r3, r2
 80141d8:	bd10      	pop	{r4, pc}
 80141da:	4610      	mov	r0, r2
 80141dc:	e7fc      	b.n	80141d8 <strncmp+0x1e>

080141de <strnlen>:
 80141de:	4602      	mov	r2, r0
 80141e0:	b510      	push	{r4, lr}
 80141e2:	4401      	add	r1, r0
 80141e4:	428a      	cmp	r2, r1
 80141e6:	4613      	mov	r3, r2
 80141e8:	d101      	bne.n	80141ee <strnlen+0x10>
 80141ea:	1a18      	subs	r0, r3, r0
 80141ec:	bd10      	pop	{r4, pc}
 80141ee:	781c      	ldrb	r4, [r3, #0]
 80141f0:	3201      	adds	r2, #1
 80141f2:	2c00      	cmp	r4, #0
 80141f4:	d1f6      	bne.n	80141e4 <strnlen+0x6>
 80141f6:	e7f8      	b.n	80141ea <strnlen+0xc>

080141f8 <strstr>:
 80141f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141fa:	780c      	ldrb	r4, [r1, #0]
 80141fc:	b164      	cbz	r4, 8014218 <strstr+0x20>
 80141fe:	4603      	mov	r3, r0
 8014200:	781a      	ldrb	r2, [r3, #0]
 8014202:	4618      	mov	r0, r3
 8014204:	1c5e      	adds	r6, r3, #1
 8014206:	b90a      	cbnz	r2, 801420c <strstr+0x14>
 8014208:	4610      	mov	r0, r2
 801420a:	e005      	b.n	8014218 <strstr+0x20>
 801420c:	4294      	cmp	r4, r2
 801420e:	d108      	bne.n	8014222 <strstr+0x2a>
 8014210:	460d      	mov	r5, r1
 8014212:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8014216:	b902      	cbnz	r2, 801421a <strstr+0x22>
 8014218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801421a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801421e:	4297      	cmp	r7, r2
 8014220:	d0f7      	beq.n	8014212 <strstr+0x1a>
 8014222:	4633      	mov	r3, r6
 8014224:	e7ec      	b.n	8014200 <strstr+0x8>
	...

08014228 <_strtoul_l.isra.0>:
 8014228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801422c:	468c      	mov	ip, r1
 801422e:	4686      	mov	lr, r0
 8014230:	4e3a      	ldr	r6, [pc, #232]	; (801431c <_strtoul_l.isra.0+0xf4>)
 8014232:	4660      	mov	r0, ip
 8014234:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014238:	5da5      	ldrb	r5, [r4, r6]
 801423a:	f015 0508 	ands.w	r5, r5, #8
 801423e:	d1f8      	bne.n	8014232 <_strtoul_l.isra.0+0xa>
 8014240:	2c2d      	cmp	r4, #45	; 0x2d
 8014242:	d134      	bne.n	80142ae <_strtoul_l.isra.0+0x86>
 8014244:	f04f 0801 	mov.w	r8, #1
 8014248:	f89c 4000 	ldrb.w	r4, [ip]
 801424c:	f100 0c02 	add.w	ip, r0, #2
 8014250:	2b00      	cmp	r3, #0
 8014252:	d05e      	beq.n	8014312 <_strtoul_l.isra.0+0xea>
 8014254:	2b10      	cmp	r3, #16
 8014256:	d10c      	bne.n	8014272 <_strtoul_l.isra.0+0x4a>
 8014258:	2c30      	cmp	r4, #48	; 0x30
 801425a:	d10a      	bne.n	8014272 <_strtoul_l.isra.0+0x4a>
 801425c:	f89c 0000 	ldrb.w	r0, [ip]
 8014260:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014264:	2858      	cmp	r0, #88	; 0x58
 8014266:	d14f      	bne.n	8014308 <_strtoul_l.isra.0+0xe0>
 8014268:	2310      	movs	r3, #16
 801426a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801426e:	f10c 0c02 	add.w	ip, ip, #2
 8014272:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014276:	fbb7 f7f3 	udiv	r7, r7, r3
 801427a:	2500      	movs	r5, #0
 801427c:	fb03 f907 	mul.w	r9, r3, r7
 8014280:	4628      	mov	r0, r5
 8014282:	ea6f 0909 	mvn.w	r9, r9
 8014286:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801428a:	2e09      	cmp	r6, #9
 801428c:	d818      	bhi.n	80142c0 <_strtoul_l.isra.0+0x98>
 801428e:	4634      	mov	r4, r6
 8014290:	42a3      	cmp	r3, r4
 8014292:	dd24      	ble.n	80142de <_strtoul_l.isra.0+0xb6>
 8014294:	2d00      	cmp	r5, #0
 8014296:	db1f      	blt.n	80142d8 <_strtoul_l.isra.0+0xb0>
 8014298:	4287      	cmp	r7, r0
 801429a:	d31d      	bcc.n	80142d8 <_strtoul_l.isra.0+0xb0>
 801429c:	d101      	bne.n	80142a2 <_strtoul_l.isra.0+0x7a>
 801429e:	45a1      	cmp	r9, r4
 80142a0:	db1a      	blt.n	80142d8 <_strtoul_l.isra.0+0xb0>
 80142a2:	2501      	movs	r5, #1
 80142a4:	fb00 4003 	mla	r0, r0, r3, r4
 80142a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80142ac:	e7eb      	b.n	8014286 <_strtoul_l.isra.0+0x5e>
 80142ae:	2c2b      	cmp	r4, #43	; 0x2b
 80142b0:	bf08      	it	eq
 80142b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80142b6:	46a8      	mov	r8, r5
 80142b8:	bf08      	it	eq
 80142ba:	f100 0c02 	addeq.w	ip, r0, #2
 80142be:	e7c7      	b.n	8014250 <_strtoul_l.isra.0+0x28>
 80142c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80142c4:	2e19      	cmp	r6, #25
 80142c6:	d801      	bhi.n	80142cc <_strtoul_l.isra.0+0xa4>
 80142c8:	3c37      	subs	r4, #55	; 0x37
 80142ca:	e7e1      	b.n	8014290 <_strtoul_l.isra.0+0x68>
 80142cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80142d0:	2e19      	cmp	r6, #25
 80142d2:	d804      	bhi.n	80142de <_strtoul_l.isra.0+0xb6>
 80142d4:	3c57      	subs	r4, #87	; 0x57
 80142d6:	e7db      	b.n	8014290 <_strtoul_l.isra.0+0x68>
 80142d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80142dc:	e7e4      	b.n	80142a8 <_strtoul_l.isra.0+0x80>
 80142de:	2d00      	cmp	r5, #0
 80142e0:	da07      	bge.n	80142f2 <_strtoul_l.isra.0+0xca>
 80142e2:	2322      	movs	r3, #34	; 0x22
 80142e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142e8:	f8ce 3000 	str.w	r3, [lr]
 80142ec:	b942      	cbnz	r2, 8014300 <_strtoul_l.isra.0+0xd8>
 80142ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142f2:	f1b8 0f00 	cmp.w	r8, #0
 80142f6:	d000      	beq.n	80142fa <_strtoul_l.isra.0+0xd2>
 80142f8:	4240      	negs	r0, r0
 80142fa:	2a00      	cmp	r2, #0
 80142fc:	d0f7      	beq.n	80142ee <_strtoul_l.isra.0+0xc6>
 80142fe:	b10d      	cbz	r5, 8014304 <_strtoul_l.isra.0+0xdc>
 8014300:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8014304:	6011      	str	r1, [r2, #0]
 8014306:	e7f2      	b.n	80142ee <_strtoul_l.isra.0+0xc6>
 8014308:	2430      	movs	r4, #48	; 0x30
 801430a:	2b00      	cmp	r3, #0
 801430c:	d1b1      	bne.n	8014272 <_strtoul_l.isra.0+0x4a>
 801430e:	2308      	movs	r3, #8
 8014310:	e7af      	b.n	8014272 <_strtoul_l.isra.0+0x4a>
 8014312:	2c30      	cmp	r4, #48	; 0x30
 8014314:	d0a2      	beq.n	801425c <_strtoul_l.isra.0+0x34>
 8014316:	230a      	movs	r3, #10
 8014318:	e7ab      	b.n	8014272 <_strtoul_l.isra.0+0x4a>
 801431a:	bf00      	nop
 801431c:	08016b61 	.word	0x08016b61

08014320 <strtoul>:
 8014320:	4613      	mov	r3, r2
 8014322:	460a      	mov	r2, r1
 8014324:	4601      	mov	r1, r0
 8014326:	4802      	ldr	r0, [pc, #8]	; (8014330 <strtoul+0x10>)
 8014328:	6800      	ldr	r0, [r0, #0]
 801432a:	f7ff bf7d 	b.w	8014228 <_strtoul_l.isra.0>
 801432e:	bf00      	nop
 8014330:	20000074 	.word	0x20000074

08014334 <_vsniprintf_r>:
 8014334:	b530      	push	{r4, r5, lr}
 8014336:	1e14      	subs	r4, r2, #0
 8014338:	4605      	mov	r5, r0
 801433a:	b09b      	sub	sp, #108	; 0x6c
 801433c:	4618      	mov	r0, r3
 801433e:	da05      	bge.n	801434c <_vsniprintf_r+0x18>
 8014340:	238b      	movs	r3, #139	; 0x8b
 8014342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014346:	602b      	str	r3, [r5, #0]
 8014348:	b01b      	add	sp, #108	; 0x6c
 801434a:	bd30      	pop	{r4, r5, pc}
 801434c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014350:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014354:	bf0c      	ite	eq
 8014356:	4623      	moveq	r3, r4
 8014358:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801435c:	9302      	str	r3, [sp, #8]
 801435e:	9305      	str	r3, [sp, #20]
 8014360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014364:	4602      	mov	r2, r0
 8014366:	9100      	str	r1, [sp, #0]
 8014368:	9104      	str	r1, [sp, #16]
 801436a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801436e:	4669      	mov	r1, sp
 8014370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014372:	4628      	mov	r0, r5
 8014374:	f000 f9da 	bl	801472c <_svfiprintf_r>
 8014378:	1c43      	adds	r3, r0, #1
 801437a:	bfbc      	itt	lt
 801437c:	238b      	movlt	r3, #139	; 0x8b
 801437e:	602b      	strlt	r3, [r5, #0]
 8014380:	2c00      	cmp	r4, #0
 8014382:	d0e1      	beq.n	8014348 <_vsniprintf_r+0x14>
 8014384:	2200      	movs	r2, #0
 8014386:	9b00      	ldr	r3, [sp, #0]
 8014388:	701a      	strb	r2, [r3, #0]
 801438a:	e7dd      	b.n	8014348 <_vsniprintf_r+0x14>

0801438c <vsniprintf>:
 801438c:	b507      	push	{r0, r1, r2, lr}
 801438e:	9300      	str	r3, [sp, #0]
 8014390:	4613      	mov	r3, r2
 8014392:	460a      	mov	r2, r1
 8014394:	4601      	mov	r1, r0
 8014396:	4803      	ldr	r0, [pc, #12]	; (80143a4 <vsniprintf+0x18>)
 8014398:	6800      	ldr	r0, [r0, #0]
 801439a:	f7ff ffcb 	bl	8014334 <_vsniprintf_r>
 801439e:	b003      	add	sp, #12
 80143a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80143a4:	20000074 	.word	0x20000074

080143a8 <__assert_func>:
 80143a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143aa:	4614      	mov	r4, r2
 80143ac:	461a      	mov	r2, r3
 80143ae:	4b09      	ldr	r3, [pc, #36]	; (80143d4 <__assert_func+0x2c>)
 80143b0:	4605      	mov	r5, r0
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	68d8      	ldr	r0, [r3, #12]
 80143b6:	b14c      	cbz	r4, 80143cc <__assert_func+0x24>
 80143b8:	4b07      	ldr	r3, [pc, #28]	; (80143d8 <__assert_func+0x30>)
 80143ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80143be:	9100      	str	r1, [sp, #0]
 80143c0:	462b      	mov	r3, r5
 80143c2:	4906      	ldr	r1, [pc, #24]	; (80143dc <__assert_func+0x34>)
 80143c4:	f000 f8f0 	bl	80145a8 <fiprintf>
 80143c8:	f000 feb4 	bl	8015134 <abort>
 80143cc:	4b04      	ldr	r3, [pc, #16]	; (80143e0 <__assert_func+0x38>)
 80143ce:	461c      	mov	r4, r3
 80143d0:	e7f3      	b.n	80143ba <__assert_func+0x12>
 80143d2:	bf00      	nop
 80143d4:	20000074 	.word	0x20000074
 80143d8:	08016cde 	.word	0x08016cde
 80143dc:	08016ceb 	.word	0x08016ceb
 80143e0:	08016d19 	.word	0x08016d19

080143e4 <__env_lock>:
 80143e4:	4801      	ldr	r0, [pc, #4]	; (80143ec <__env_lock+0x8>)
 80143e6:	f000 b911 	b.w	801460c <__retarget_lock_acquire_recursive>
 80143ea:	bf00      	nop
 80143ec:	2000d272 	.word	0x2000d272

080143f0 <__env_unlock>:
 80143f0:	4801      	ldr	r0, [pc, #4]	; (80143f8 <__env_unlock+0x8>)
 80143f2:	f000 b90c 	b.w	801460e <__retarget_lock_release_recursive>
 80143f6:	bf00      	nop
 80143f8:	2000d272 	.word	0x2000d272

080143fc <std>:
 80143fc:	2300      	movs	r3, #0
 80143fe:	b510      	push	{r4, lr}
 8014400:	4604      	mov	r4, r0
 8014402:	e9c0 3300 	strd	r3, r3, [r0]
 8014406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801440a:	6083      	str	r3, [r0, #8]
 801440c:	8181      	strh	r1, [r0, #12]
 801440e:	6643      	str	r3, [r0, #100]	; 0x64
 8014410:	81c2      	strh	r2, [r0, #14]
 8014412:	6183      	str	r3, [r0, #24]
 8014414:	4619      	mov	r1, r3
 8014416:	2208      	movs	r2, #8
 8014418:	305c      	adds	r0, #92	; 0x5c
 801441a:	f7ff fd2b 	bl	8013e74 <memset>
 801441e:	4b05      	ldr	r3, [pc, #20]	; (8014434 <std+0x38>)
 8014420:	6224      	str	r4, [r4, #32]
 8014422:	6263      	str	r3, [r4, #36]	; 0x24
 8014424:	4b04      	ldr	r3, [pc, #16]	; (8014438 <std+0x3c>)
 8014426:	62a3      	str	r3, [r4, #40]	; 0x28
 8014428:	4b04      	ldr	r3, [pc, #16]	; (801443c <std+0x40>)
 801442a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801442c:	4b04      	ldr	r3, [pc, #16]	; (8014440 <std+0x44>)
 801442e:	6323      	str	r3, [r4, #48]	; 0x30
 8014430:	bd10      	pop	{r4, pc}
 8014432:	bf00      	nop
 8014434:	08014f09 	.word	0x08014f09
 8014438:	08014f2b 	.word	0x08014f2b
 801443c:	08014f63 	.word	0x08014f63
 8014440:	08014f87 	.word	0x08014f87

08014444 <_cleanup_r>:
 8014444:	4901      	ldr	r1, [pc, #4]	; (801444c <_cleanup_r+0x8>)
 8014446:	f000 b8c1 	b.w	80145cc <_fwalk_reent>
 801444a:	bf00      	nop
 801444c:	08015271 	.word	0x08015271

08014450 <__sfmoreglue>:
 8014450:	b570      	push	{r4, r5, r6, lr}
 8014452:	2568      	movs	r5, #104	; 0x68
 8014454:	1e4a      	subs	r2, r1, #1
 8014456:	4355      	muls	r5, r2
 8014458:	460e      	mov	r6, r1
 801445a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801445e:	f7ff fd6b 	bl	8013f38 <_malloc_r>
 8014462:	4604      	mov	r4, r0
 8014464:	b140      	cbz	r0, 8014478 <__sfmoreglue+0x28>
 8014466:	2100      	movs	r1, #0
 8014468:	e9c0 1600 	strd	r1, r6, [r0]
 801446c:	300c      	adds	r0, #12
 801446e:	60a0      	str	r0, [r4, #8]
 8014470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014474:	f7ff fcfe 	bl	8013e74 <memset>
 8014478:	4620      	mov	r0, r4
 801447a:	bd70      	pop	{r4, r5, r6, pc}

0801447c <__sfp_lock_acquire>:
 801447c:	4801      	ldr	r0, [pc, #4]	; (8014484 <__sfp_lock_acquire+0x8>)
 801447e:	f000 b8c5 	b.w	801460c <__retarget_lock_acquire_recursive>
 8014482:	bf00      	nop
 8014484:	2000d278 	.word	0x2000d278

08014488 <__sfp_lock_release>:
 8014488:	4801      	ldr	r0, [pc, #4]	; (8014490 <__sfp_lock_release+0x8>)
 801448a:	f000 b8c0 	b.w	801460e <__retarget_lock_release_recursive>
 801448e:	bf00      	nop
 8014490:	2000d278 	.word	0x2000d278

08014494 <__sinit_lock_acquire>:
 8014494:	4801      	ldr	r0, [pc, #4]	; (801449c <__sinit_lock_acquire+0x8>)
 8014496:	f000 b8b9 	b.w	801460c <__retarget_lock_acquire_recursive>
 801449a:	bf00      	nop
 801449c:	2000d273 	.word	0x2000d273

080144a0 <__sinit_lock_release>:
 80144a0:	4801      	ldr	r0, [pc, #4]	; (80144a8 <__sinit_lock_release+0x8>)
 80144a2:	f000 b8b4 	b.w	801460e <__retarget_lock_release_recursive>
 80144a6:	bf00      	nop
 80144a8:	2000d273 	.word	0x2000d273

080144ac <__sinit>:
 80144ac:	b510      	push	{r4, lr}
 80144ae:	4604      	mov	r4, r0
 80144b0:	f7ff fff0 	bl	8014494 <__sinit_lock_acquire>
 80144b4:	69a3      	ldr	r3, [r4, #24]
 80144b6:	b11b      	cbz	r3, 80144c0 <__sinit+0x14>
 80144b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144bc:	f7ff bff0 	b.w	80144a0 <__sinit_lock_release>
 80144c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80144c4:	6523      	str	r3, [r4, #80]	; 0x50
 80144c6:	4b13      	ldr	r3, [pc, #76]	; (8014514 <__sinit+0x68>)
 80144c8:	4a13      	ldr	r2, [pc, #76]	; (8014518 <__sinit+0x6c>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80144ce:	42a3      	cmp	r3, r4
 80144d0:	bf08      	it	eq
 80144d2:	2301      	moveq	r3, #1
 80144d4:	4620      	mov	r0, r4
 80144d6:	bf08      	it	eq
 80144d8:	61a3      	streq	r3, [r4, #24]
 80144da:	f000 f81f 	bl	801451c <__sfp>
 80144de:	6060      	str	r0, [r4, #4]
 80144e0:	4620      	mov	r0, r4
 80144e2:	f000 f81b 	bl	801451c <__sfp>
 80144e6:	60a0      	str	r0, [r4, #8]
 80144e8:	4620      	mov	r0, r4
 80144ea:	f000 f817 	bl	801451c <__sfp>
 80144ee:	2200      	movs	r2, #0
 80144f0:	2104      	movs	r1, #4
 80144f2:	60e0      	str	r0, [r4, #12]
 80144f4:	6860      	ldr	r0, [r4, #4]
 80144f6:	f7ff ff81 	bl	80143fc <std>
 80144fa:	2201      	movs	r2, #1
 80144fc:	2109      	movs	r1, #9
 80144fe:	68a0      	ldr	r0, [r4, #8]
 8014500:	f7ff ff7c 	bl	80143fc <std>
 8014504:	2202      	movs	r2, #2
 8014506:	2112      	movs	r1, #18
 8014508:	68e0      	ldr	r0, [r4, #12]
 801450a:	f7ff ff77 	bl	80143fc <std>
 801450e:	2301      	movs	r3, #1
 8014510:	61a3      	str	r3, [r4, #24]
 8014512:	e7d1      	b.n	80144b8 <__sinit+0xc>
 8014514:	08016c64 	.word	0x08016c64
 8014518:	08014445 	.word	0x08014445

0801451c <__sfp>:
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801451e:	4607      	mov	r7, r0
 8014520:	f7ff ffac 	bl	801447c <__sfp_lock_acquire>
 8014524:	4b1e      	ldr	r3, [pc, #120]	; (80145a0 <__sfp+0x84>)
 8014526:	681e      	ldr	r6, [r3, #0]
 8014528:	69b3      	ldr	r3, [r6, #24]
 801452a:	b913      	cbnz	r3, 8014532 <__sfp+0x16>
 801452c:	4630      	mov	r0, r6
 801452e:	f7ff ffbd 	bl	80144ac <__sinit>
 8014532:	3648      	adds	r6, #72	; 0x48
 8014534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014538:	3b01      	subs	r3, #1
 801453a:	d503      	bpl.n	8014544 <__sfp+0x28>
 801453c:	6833      	ldr	r3, [r6, #0]
 801453e:	b30b      	cbz	r3, 8014584 <__sfp+0x68>
 8014540:	6836      	ldr	r6, [r6, #0]
 8014542:	e7f7      	b.n	8014534 <__sfp+0x18>
 8014544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014548:	b9d5      	cbnz	r5, 8014580 <__sfp+0x64>
 801454a:	4b16      	ldr	r3, [pc, #88]	; (80145a4 <__sfp+0x88>)
 801454c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014550:	60e3      	str	r3, [r4, #12]
 8014552:	6665      	str	r5, [r4, #100]	; 0x64
 8014554:	f000 f859 	bl	801460a <__retarget_lock_init_recursive>
 8014558:	f7ff ff96 	bl	8014488 <__sfp_lock_release>
 801455c:	2208      	movs	r2, #8
 801455e:	4629      	mov	r1, r5
 8014560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014568:	6025      	str	r5, [r4, #0]
 801456a:	61a5      	str	r5, [r4, #24]
 801456c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014570:	f7ff fc80 	bl	8013e74 <memset>
 8014574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801457c:	4620      	mov	r0, r4
 801457e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014580:	3468      	adds	r4, #104	; 0x68
 8014582:	e7d9      	b.n	8014538 <__sfp+0x1c>
 8014584:	2104      	movs	r1, #4
 8014586:	4638      	mov	r0, r7
 8014588:	f7ff ff62 	bl	8014450 <__sfmoreglue>
 801458c:	4604      	mov	r4, r0
 801458e:	6030      	str	r0, [r6, #0]
 8014590:	2800      	cmp	r0, #0
 8014592:	d1d5      	bne.n	8014540 <__sfp+0x24>
 8014594:	f7ff ff78 	bl	8014488 <__sfp_lock_release>
 8014598:	230c      	movs	r3, #12
 801459a:	603b      	str	r3, [r7, #0]
 801459c:	e7ee      	b.n	801457c <__sfp+0x60>
 801459e:	bf00      	nop
 80145a0:	08016c64 	.word	0x08016c64
 80145a4:	ffff0001 	.word	0xffff0001

080145a8 <fiprintf>:
 80145a8:	b40e      	push	{r1, r2, r3}
 80145aa:	b503      	push	{r0, r1, lr}
 80145ac:	4601      	mov	r1, r0
 80145ae:	ab03      	add	r3, sp, #12
 80145b0:	4805      	ldr	r0, [pc, #20]	; (80145c8 <fiprintf+0x20>)
 80145b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80145b6:	6800      	ldr	r0, [r0, #0]
 80145b8:	9301      	str	r3, [sp, #4]
 80145ba:	f000 f9df 	bl	801497c <_vfiprintf_r>
 80145be:	b002      	add	sp, #8
 80145c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80145c4:	b003      	add	sp, #12
 80145c6:	4770      	bx	lr
 80145c8:	20000074 	.word	0x20000074

080145cc <_fwalk_reent>:
 80145cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145d0:	4606      	mov	r6, r0
 80145d2:	4688      	mov	r8, r1
 80145d4:	2700      	movs	r7, #0
 80145d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80145da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80145de:	f1b9 0901 	subs.w	r9, r9, #1
 80145e2:	d505      	bpl.n	80145f0 <_fwalk_reent+0x24>
 80145e4:	6824      	ldr	r4, [r4, #0]
 80145e6:	2c00      	cmp	r4, #0
 80145e8:	d1f7      	bne.n	80145da <_fwalk_reent+0xe>
 80145ea:	4638      	mov	r0, r7
 80145ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145f0:	89ab      	ldrh	r3, [r5, #12]
 80145f2:	2b01      	cmp	r3, #1
 80145f4:	d907      	bls.n	8014606 <_fwalk_reent+0x3a>
 80145f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80145fa:	3301      	adds	r3, #1
 80145fc:	d003      	beq.n	8014606 <_fwalk_reent+0x3a>
 80145fe:	4629      	mov	r1, r5
 8014600:	4630      	mov	r0, r6
 8014602:	47c0      	blx	r8
 8014604:	4307      	orrs	r7, r0
 8014606:	3568      	adds	r5, #104	; 0x68
 8014608:	e7e9      	b.n	80145de <_fwalk_reent+0x12>

0801460a <__retarget_lock_init_recursive>:
 801460a:	4770      	bx	lr

0801460c <__retarget_lock_acquire_recursive>:
 801460c:	4770      	bx	lr

0801460e <__retarget_lock_release_recursive>:
 801460e:	4770      	bx	lr

08014610 <__malloc_lock>:
 8014610:	4801      	ldr	r0, [pc, #4]	; (8014618 <__malloc_lock+0x8>)
 8014612:	f7ff bffb 	b.w	801460c <__retarget_lock_acquire_recursive>
 8014616:	bf00      	nop
 8014618:	2000d274 	.word	0x2000d274

0801461c <__malloc_unlock>:
 801461c:	4801      	ldr	r0, [pc, #4]	; (8014624 <__malloc_unlock+0x8>)
 801461e:	f7ff bff6 	b.w	801460e <__retarget_lock_release_recursive>
 8014622:	bf00      	nop
 8014624:	2000d274 	.word	0x2000d274

08014628 <_realloc_r>:
 8014628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462a:	4607      	mov	r7, r0
 801462c:	4614      	mov	r4, r2
 801462e:	460e      	mov	r6, r1
 8014630:	b921      	cbnz	r1, 801463c <_realloc_r+0x14>
 8014632:	4611      	mov	r1, r2
 8014634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014638:	f7ff bc7e 	b.w	8013f38 <_malloc_r>
 801463c:	b922      	cbnz	r2, 8014648 <_realloc_r+0x20>
 801463e:	f7ff fc2f 	bl	8013ea0 <_free_r>
 8014642:	4625      	mov	r5, r4
 8014644:	4628      	mov	r0, r5
 8014646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014648:	f000 fed2 	bl	80153f0 <_malloc_usable_size_r>
 801464c:	42a0      	cmp	r0, r4
 801464e:	d20f      	bcs.n	8014670 <_realloc_r+0x48>
 8014650:	4621      	mov	r1, r4
 8014652:	4638      	mov	r0, r7
 8014654:	f7ff fc70 	bl	8013f38 <_malloc_r>
 8014658:	4605      	mov	r5, r0
 801465a:	2800      	cmp	r0, #0
 801465c:	d0f2      	beq.n	8014644 <_realloc_r+0x1c>
 801465e:	4631      	mov	r1, r6
 8014660:	4622      	mov	r2, r4
 8014662:	f7ff fbdf 	bl	8013e24 <memcpy>
 8014666:	4631      	mov	r1, r6
 8014668:	4638      	mov	r0, r7
 801466a:	f7ff fc19 	bl	8013ea0 <_free_r>
 801466e:	e7e9      	b.n	8014644 <_realloc_r+0x1c>
 8014670:	4635      	mov	r5, r6
 8014672:	e7e7      	b.n	8014644 <_realloc_r+0x1c>

08014674 <__ssputs_r>:
 8014674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014678:	688e      	ldr	r6, [r1, #8]
 801467a:	4682      	mov	sl, r0
 801467c:	429e      	cmp	r6, r3
 801467e:	460c      	mov	r4, r1
 8014680:	4690      	mov	r8, r2
 8014682:	461f      	mov	r7, r3
 8014684:	d838      	bhi.n	80146f8 <__ssputs_r+0x84>
 8014686:	898a      	ldrh	r2, [r1, #12]
 8014688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801468c:	d032      	beq.n	80146f4 <__ssputs_r+0x80>
 801468e:	6825      	ldr	r5, [r4, #0]
 8014690:	6909      	ldr	r1, [r1, #16]
 8014692:	3301      	adds	r3, #1
 8014694:	eba5 0901 	sub.w	r9, r5, r1
 8014698:	6965      	ldr	r5, [r4, #20]
 801469a:	444b      	add	r3, r9
 801469c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80146a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80146a4:	106d      	asrs	r5, r5, #1
 80146a6:	429d      	cmp	r5, r3
 80146a8:	bf38      	it	cc
 80146aa:	461d      	movcc	r5, r3
 80146ac:	0553      	lsls	r3, r2, #21
 80146ae:	d531      	bpl.n	8014714 <__ssputs_r+0xa0>
 80146b0:	4629      	mov	r1, r5
 80146b2:	f7ff fc41 	bl	8013f38 <_malloc_r>
 80146b6:	4606      	mov	r6, r0
 80146b8:	b950      	cbnz	r0, 80146d0 <__ssputs_r+0x5c>
 80146ba:	230c      	movs	r3, #12
 80146bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146c0:	f8ca 3000 	str.w	r3, [sl]
 80146c4:	89a3      	ldrh	r3, [r4, #12]
 80146c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146ca:	81a3      	strh	r3, [r4, #12]
 80146cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146d0:	464a      	mov	r2, r9
 80146d2:	6921      	ldr	r1, [r4, #16]
 80146d4:	f7ff fba6 	bl	8013e24 <memcpy>
 80146d8:	89a3      	ldrh	r3, [r4, #12]
 80146da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146e2:	81a3      	strh	r3, [r4, #12]
 80146e4:	6126      	str	r6, [r4, #16]
 80146e6:	444e      	add	r6, r9
 80146e8:	6026      	str	r6, [r4, #0]
 80146ea:	463e      	mov	r6, r7
 80146ec:	6165      	str	r5, [r4, #20]
 80146ee:	eba5 0509 	sub.w	r5, r5, r9
 80146f2:	60a5      	str	r5, [r4, #8]
 80146f4:	42be      	cmp	r6, r7
 80146f6:	d900      	bls.n	80146fa <__ssputs_r+0x86>
 80146f8:	463e      	mov	r6, r7
 80146fa:	4632      	mov	r2, r6
 80146fc:	4641      	mov	r1, r8
 80146fe:	6820      	ldr	r0, [r4, #0]
 8014700:	f7ff fb9e 	bl	8013e40 <memmove>
 8014704:	68a3      	ldr	r3, [r4, #8]
 8014706:	6822      	ldr	r2, [r4, #0]
 8014708:	1b9b      	subs	r3, r3, r6
 801470a:	4432      	add	r2, r6
 801470c:	2000      	movs	r0, #0
 801470e:	60a3      	str	r3, [r4, #8]
 8014710:	6022      	str	r2, [r4, #0]
 8014712:	e7db      	b.n	80146cc <__ssputs_r+0x58>
 8014714:	462a      	mov	r2, r5
 8014716:	f7ff ff87 	bl	8014628 <_realloc_r>
 801471a:	4606      	mov	r6, r0
 801471c:	2800      	cmp	r0, #0
 801471e:	d1e1      	bne.n	80146e4 <__ssputs_r+0x70>
 8014720:	4650      	mov	r0, sl
 8014722:	6921      	ldr	r1, [r4, #16]
 8014724:	f7ff fbbc 	bl	8013ea0 <_free_r>
 8014728:	e7c7      	b.n	80146ba <__ssputs_r+0x46>
	...

0801472c <_svfiprintf_r>:
 801472c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014730:	4698      	mov	r8, r3
 8014732:	898b      	ldrh	r3, [r1, #12]
 8014734:	4607      	mov	r7, r0
 8014736:	061b      	lsls	r3, r3, #24
 8014738:	460d      	mov	r5, r1
 801473a:	4614      	mov	r4, r2
 801473c:	b09d      	sub	sp, #116	; 0x74
 801473e:	d50e      	bpl.n	801475e <_svfiprintf_r+0x32>
 8014740:	690b      	ldr	r3, [r1, #16]
 8014742:	b963      	cbnz	r3, 801475e <_svfiprintf_r+0x32>
 8014744:	2140      	movs	r1, #64	; 0x40
 8014746:	f7ff fbf7 	bl	8013f38 <_malloc_r>
 801474a:	6028      	str	r0, [r5, #0]
 801474c:	6128      	str	r0, [r5, #16]
 801474e:	b920      	cbnz	r0, 801475a <_svfiprintf_r+0x2e>
 8014750:	230c      	movs	r3, #12
 8014752:	603b      	str	r3, [r7, #0]
 8014754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014758:	e0d1      	b.n	80148fe <_svfiprintf_r+0x1d2>
 801475a:	2340      	movs	r3, #64	; 0x40
 801475c:	616b      	str	r3, [r5, #20]
 801475e:	2300      	movs	r3, #0
 8014760:	9309      	str	r3, [sp, #36]	; 0x24
 8014762:	2320      	movs	r3, #32
 8014764:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014768:	2330      	movs	r3, #48	; 0x30
 801476a:	f04f 0901 	mov.w	r9, #1
 801476e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014772:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014918 <_svfiprintf_r+0x1ec>
 8014776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801477a:	4623      	mov	r3, r4
 801477c:	469a      	mov	sl, r3
 801477e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014782:	b10a      	cbz	r2, 8014788 <_svfiprintf_r+0x5c>
 8014784:	2a25      	cmp	r2, #37	; 0x25
 8014786:	d1f9      	bne.n	801477c <_svfiprintf_r+0x50>
 8014788:	ebba 0b04 	subs.w	fp, sl, r4
 801478c:	d00b      	beq.n	80147a6 <_svfiprintf_r+0x7a>
 801478e:	465b      	mov	r3, fp
 8014790:	4622      	mov	r2, r4
 8014792:	4629      	mov	r1, r5
 8014794:	4638      	mov	r0, r7
 8014796:	f7ff ff6d 	bl	8014674 <__ssputs_r>
 801479a:	3001      	adds	r0, #1
 801479c:	f000 80aa 	beq.w	80148f4 <_svfiprintf_r+0x1c8>
 80147a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147a2:	445a      	add	r2, fp
 80147a4:	9209      	str	r2, [sp, #36]	; 0x24
 80147a6:	f89a 3000 	ldrb.w	r3, [sl]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	f000 80a2 	beq.w	80148f4 <_svfiprintf_r+0x1c8>
 80147b0:	2300      	movs	r3, #0
 80147b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147ba:	f10a 0a01 	add.w	sl, sl, #1
 80147be:	9304      	str	r3, [sp, #16]
 80147c0:	9307      	str	r3, [sp, #28]
 80147c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147c6:	931a      	str	r3, [sp, #104]	; 0x68
 80147c8:	4654      	mov	r4, sl
 80147ca:	2205      	movs	r2, #5
 80147cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147d0:	4851      	ldr	r0, [pc, #324]	; (8014918 <_svfiprintf_r+0x1ec>)
 80147d2:	f000 fdff 	bl	80153d4 <memchr>
 80147d6:	9a04      	ldr	r2, [sp, #16]
 80147d8:	b9d8      	cbnz	r0, 8014812 <_svfiprintf_r+0xe6>
 80147da:	06d0      	lsls	r0, r2, #27
 80147dc:	bf44      	itt	mi
 80147de:	2320      	movmi	r3, #32
 80147e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147e4:	0711      	lsls	r1, r2, #28
 80147e6:	bf44      	itt	mi
 80147e8:	232b      	movmi	r3, #43	; 0x2b
 80147ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147ee:	f89a 3000 	ldrb.w	r3, [sl]
 80147f2:	2b2a      	cmp	r3, #42	; 0x2a
 80147f4:	d015      	beq.n	8014822 <_svfiprintf_r+0xf6>
 80147f6:	4654      	mov	r4, sl
 80147f8:	2000      	movs	r0, #0
 80147fa:	f04f 0c0a 	mov.w	ip, #10
 80147fe:	9a07      	ldr	r2, [sp, #28]
 8014800:	4621      	mov	r1, r4
 8014802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014806:	3b30      	subs	r3, #48	; 0x30
 8014808:	2b09      	cmp	r3, #9
 801480a:	d94e      	bls.n	80148aa <_svfiprintf_r+0x17e>
 801480c:	b1b0      	cbz	r0, 801483c <_svfiprintf_r+0x110>
 801480e:	9207      	str	r2, [sp, #28]
 8014810:	e014      	b.n	801483c <_svfiprintf_r+0x110>
 8014812:	eba0 0308 	sub.w	r3, r0, r8
 8014816:	fa09 f303 	lsl.w	r3, r9, r3
 801481a:	4313      	orrs	r3, r2
 801481c:	46a2      	mov	sl, r4
 801481e:	9304      	str	r3, [sp, #16]
 8014820:	e7d2      	b.n	80147c8 <_svfiprintf_r+0x9c>
 8014822:	9b03      	ldr	r3, [sp, #12]
 8014824:	1d19      	adds	r1, r3, #4
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	9103      	str	r1, [sp, #12]
 801482a:	2b00      	cmp	r3, #0
 801482c:	bfbb      	ittet	lt
 801482e:	425b      	neglt	r3, r3
 8014830:	f042 0202 	orrlt.w	r2, r2, #2
 8014834:	9307      	strge	r3, [sp, #28]
 8014836:	9307      	strlt	r3, [sp, #28]
 8014838:	bfb8      	it	lt
 801483a:	9204      	strlt	r2, [sp, #16]
 801483c:	7823      	ldrb	r3, [r4, #0]
 801483e:	2b2e      	cmp	r3, #46	; 0x2e
 8014840:	d10c      	bne.n	801485c <_svfiprintf_r+0x130>
 8014842:	7863      	ldrb	r3, [r4, #1]
 8014844:	2b2a      	cmp	r3, #42	; 0x2a
 8014846:	d135      	bne.n	80148b4 <_svfiprintf_r+0x188>
 8014848:	9b03      	ldr	r3, [sp, #12]
 801484a:	3402      	adds	r4, #2
 801484c:	1d1a      	adds	r2, r3, #4
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	9203      	str	r2, [sp, #12]
 8014852:	2b00      	cmp	r3, #0
 8014854:	bfb8      	it	lt
 8014856:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801485a:	9305      	str	r3, [sp, #20]
 801485c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014928 <_svfiprintf_r+0x1fc>
 8014860:	2203      	movs	r2, #3
 8014862:	4650      	mov	r0, sl
 8014864:	7821      	ldrb	r1, [r4, #0]
 8014866:	f000 fdb5 	bl	80153d4 <memchr>
 801486a:	b140      	cbz	r0, 801487e <_svfiprintf_r+0x152>
 801486c:	2340      	movs	r3, #64	; 0x40
 801486e:	eba0 000a 	sub.w	r0, r0, sl
 8014872:	fa03 f000 	lsl.w	r0, r3, r0
 8014876:	9b04      	ldr	r3, [sp, #16]
 8014878:	3401      	adds	r4, #1
 801487a:	4303      	orrs	r3, r0
 801487c:	9304      	str	r3, [sp, #16]
 801487e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014882:	2206      	movs	r2, #6
 8014884:	4825      	ldr	r0, [pc, #148]	; (801491c <_svfiprintf_r+0x1f0>)
 8014886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801488a:	f000 fda3 	bl	80153d4 <memchr>
 801488e:	2800      	cmp	r0, #0
 8014890:	d038      	beq.n	8014904 <_svfiprintf_r+0x1d8>
 8014892:	4b23      	ldr	r3, [pc, #140]	; (8014920 <_svfiprintf_r+0x1f4>)
 8014894:	bb1b      	cbnz	r3, 80148de <_svfiprintf_r+0x1b2>
 8014896:	9b03      	ldr	r3, [sp, #12]
 8014898:	3307      	adds	r3, #7
 801489a:	f023 0307 	bic.w	r3, r3, #7
 801489e:	3308      	adds	r3, #8
 80148a0:	9303      	str	r3, [sp, #12]
 80148a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148a4:	4433      	add	r3, r6
 80148a6:	9309      	str	r3, [sp, #36]	; 0x24
 80148a8:	e767      	b.n	801477a <_svfiprintf_r+0x4e>
 80148aa:	460c      	mov	r4, r1
 80148ac:	2001      	movs	r0, #1
 80148ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80148b2:	e7a5      	b.n	8014800 <_svfiprintf_r+0xd4>
 80148b4:	2300      	movs	r3, #0
 80148b6:	f04f 0c0a 	mov.w	ip, #10
 80148ba:	4619      	mov	r1, r3
 80148bc:	3401      	adds	r4, #1
 80148be:	9305      	str	r3, [sp, #20]
 80148c0:	4620      	mov	r0, r4
 80148c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148c6:	3a30      	subs	r2, #48	; 0x30
 80148c8:	2a09      	cmp	r2, #9
 80148ca:	d903      	bls.n	80148d4 <_svfiprintf_r+0x1a8>
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d0c5      	beq.n	801485c <_svfiprintf_r+0x130>
 80148d0:	9105      	str	r1, [sp, #20]
 80148d2:	e7c3      	b.n	801485c <_svfiprintf_r+0x130>
 80148d4:	4604      	mov	r4, r0
 80148d6:	2301      	movs	r3, #1
 80148d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80148dc:	e7f0      	b.n	80148c0 <_svfiprintf_r+0x194>
 80148de:	ab03      	add	r3, sp, #12
 80148e0:	9300      	str	r3, [sp, #0]
 80148e2:	462a      	mov	r2, r5
 80148e4:	4638      	mov	r0, r7
 80148e6:	4b0f      	ldr	r3, [pc, #60]	; (8014924 <_svfiprintf_r+0x1f8>)
 80148e8:	a904      	add	r1, sp, #16
 80148ea:	f3af 8000 	nop.w
 80148ee:	1c42      	adds	r2, r0, #1
 80148f0:	4606      	mov	r6, r0
 80148f2:	d1d6      	bne.n	80148a2 <_svfiprintf_r+0x176>
 80148f4:	89ab      	ldrh	r3, [r5, #12]
 80148f6:	065b      	lsls	r3, r3, #25
 80148f8:	f53f af2c 	bmi.w	8014754 <_svfiprintf_r+0x28>
 80148fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148fe:	b01d      	add	sp, #116	; 0x74
 8014900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014904:	ab03      	add	r3, sp, #12
 8014906:	9300      	str	r3, [sp, #0]
 8014908:	462a      	mov	r2, r5
 801490a:	4638      	mov	r0, r7
 801490c:	4b05      	ldr	r3, [pc, #20]	; (8014924 <_svfiprintf_r+0x1f8>)
 801490e:	a904      	add	r1, sp, #16
 8014910:	f000 f9d4 	bl	8014cbc <_printf_i>
 8014914:	e7eb      	b.n	80148ee <_svfiprintf_r+0x1c2>
 8014916:	bf00      	nop
 8014918:	08016d7c 	.word	0x08016d7c
 801491c:	08016d86 	.word	0x08016d86
 8014920:	00000000 	.word	0x00000000
 8014924:	08014675 	.word	0x08014675
 8014928:	08016d82 	.word	0x08016d82

0801492c <__sfputc_r>:
 801492c:	6893      	ldr	r3, [r2, #8]
 801492e:	b410      	push	{r4}
 8014930:	3b01      	subs	r3, #1
 8014932:	2b00      	cmp	r3, #0
 8014934:	6093      	str	r3, [r2, #8]
 8014936:	da07      	bge.n	8014948 <__sfputc_r+0x1c>
 8014938:	6994      	ldr	r4, [r2, #24]
 801493a:	42a3      	cmp	r3, r4
 801493c:	db01      	blt.n	8014942 <__sfputc_r+0x16>
 801493e:	290a      	cmp	r1, #10
 8014940:	d102      	bne.n	8014948 <__sfputc_r+0x1c>
 8014942:	bc10      	pop	{r4}
 8014944:	f000 bb24 	b.w	8014f90 <__swbuf_r>
 8014948:	6813      	ldr	r3, [r2, #0]
 801494a:	1c58      	adds	r0, r3, #1
 801494c:	6010      	str	r0, [r2, #0]
 801494e:	7019      	strb	r1, [r3, #0]
 8014950:	4608      	mov	r0, r1
 8014952:	bc10      	pop	{r4}
 8014954:	4770      	bx	lr

08014956 <__sfputs_r>:
 8014956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014958:	4606      	mov	r6, r0
 801495a:	460f      	mov	r7, r1
 801495c:	4614      	mov	r4, r2
 801495e:	18d5      	adds	r5, r2, r3
 8014960:	42ac      	cmp	r4, r5
 8014962:	d101      	bne.n	8014968 <__sfputs_r+0x12>
 8014964:	2000      	movs	r0, #0
 8014966:	e007      	b.n	8014978 <__sfputs_r+0x22>
 8014968:	463a      	mov	r2, r7
 801496a:	4630      	mov	r0, r6
 801496c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014970:	f7ff ffdc 	bl	801492c <__sfputc_r>
 8014974:	1c43      	adds	r3, r0, #1
 8014976:	d1f3      	bne.n	8014960 <__sfputs_r+0xa>
 8014978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801497c <_vfiprintf_r>:
 801497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014980:	460d      	mov	r5, r1
 8014982:	4614      	mov	r4, r2
 8014984:	4698      	mov	r8, r3
 8014986:	4606      	mov	r6, r0
 8014988:	b09d      	sub	sp, #116	; 0x74
 801498a:	b118      	cbz	r0, 8014994 <_vfiprintf_r+0x18>
 801498c:	6983      	ldr	r3, [r0, #24]
 801498e:	b90b      	cbnz	r3, 8014994 <_vfiprintf_r+0x18>
 8014990:	f7ff fd8c 	bl	80144ac <__sinit>
 8014994:	4b89      	ldr	r3, [pc, #548]	; (8014bbc <_vfiprintf_r+0x240>)
 8014996:	429d      	cmp	r5, r3
 8014998:	d11b      	bne.n	80149d2 <_vfiprintf_r+0x56>
 801499a:	6875      	ldr	r5, [r6, #4]
 801499c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801499e:	07d9      	lsls	r1, r3, #31
 80149a0:	d405      	bmi.n	80149ae <_vfiprintf_r+0x32>
 80149a2:	89ab      	ldrh	r3, [r5, #12]
 80149a4:	059a      	lsls	r2, r3, #22
 80149a6:	d402      	bmi.n	80149ae <_vfiprintf_r+0x32>
 80149a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149aa:	f7ff fe2f 	bl	801460c <__retarget_lock_acquire_recursive>
 80149ae:	89ab      	ldrh	r3, [r5, #12]
 80149b0:	071b      	lsls	r3, r3, #28
 80149b2:	d501      	bpl.n	80149b8 <_vfiprintf_r+0x3c>
 80149b4:	692b      	ldr	r3, [r5, #16]
 80149b6:	b9eb      	cbnz	r3, 80149f4 <_vfiprintf_r+0x78>
 80149b8:	4629      	mov	r1, r5
 80149ba:	4630      	mov	r0, r6
 80149bc:	f000 fb4c 	bl	8015058 <__swsetup_r>
 80149c0:	b1c0      	cbz	r0, 80149f4 <_vfiprintf_r+0x78>
 80149c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80149c4:	07dc      	lsls	r4, r3, #31
 80149c6:	d50e      	bpl.n	80149e6 <_vfiprintf_r+0x6a>
 80149c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80149cc:	b01d      	add	sp, #116	; 0x74
 80149ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d2:	4b7b      	ldr	r3, [pc, #492]	; (8014bc0 <_vfiprintf_r+0x244>)
 80149d4:	429d      	cmp	r5, r3
 80149d6:	d101      	bne.n	80149dc <_vfiprintf_r+0x60>
 80149d8:	68b5      	ldr	r5, [r6, #8]
 80149da:	e7df      	b.n	801499c <_vfiprintf_r+0x20>
 80149dc:	4b79      	ldr	r3, [pc, #484]	; (8014bc4 <_vfiprintf_r+0x248>)
 80149de:	429d      	cmp	r5, r3
 80149e0:	bf08      	it	eq
 80149e2:	68f5      	ldreq	r5, [r6, #12]
 80149e4:	e7da      	b.n	801499c <_vfiprintf_r+0x20>
 80149e6:	89ab      	ldrh	r3, [r5, #12]
 80149e8:	0598      	lsls	r0, r3, #22
 80149ea:	d4ed      	bmi.n	80149c8 <_vfiprintf_r+0x4c>
 80149ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80149ee:	f7ff fe0e 	bl	801460e <__retarget_lock_release_recursive>
 80149f2:	e7e9      	b.n	80149c8 <_vfiprintf_r+0x4c>
 80149f4:	2300      	movs	r3, #0
 80149f6:	9309      	str	r3, [sp, #36]	; 0x24
 80149f8:	2320      	movs	r3, #32
 80149fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149fe:	2330      	movs	r3, #48	; 0x30
 8014a00:	f04f 0901 	mov.w	r9, #1
 8014a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014bc8 <_vfiprintf_r+0x24c>
 8014a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a10:	4623      	mov	r3, r4
 8014a12:	469a      	mov	sl, r3
 8014a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a18:	b10a      	cbz	r2, 8014a1e <_vfiprintf_r+0xa2>
 8014a1a:	2a25      	cmp	r2, #37	; 0x25
 8014a1c:	d1f9      	bne.n	8014a12 <_vfiprintf_r+0x96>
 8014a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8014a22:	d00b      	beq.n	8014a3c <_vfiprintf_r+0xc0>
 8014a24:	465b      	mov	r3, fp
 8014a26:	4622      	mov	r2, r4
 8014a28:	4629      	mov	r1, r5
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	f7ff ff93 	bl	8014956 <__sfputs_r>
 8014a30:	3001      	adds	r0, #1
 8014a32:	f000 80aa 	beq.w	8014b8a <_vfiprintf_r+0x20e>
 8014a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a38:	445a      	add	r2, fp
 8014a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8014a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	f000 80a2 	beq.w	8014b8a <_vfiprintf_r+0x20e>
 8014a46:	2300      	movs	r3, #0
 8014a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a50:	f10a 0a01 	add.w	sl, sl, #1
 8014a54:	9304      	str	r3, [sp, #16]
 8014a56:	9307      	str	r3, [sp, #28]
 8014a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8014a5e:	4654      	mov	r4, sl
 8014a60:	2205      	movs	r2, #5
 8014a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a66:	4858      	ldr	r0, [pc, #352]	; (8014bc8 <_vfiprintf_r+0x24c>)
 8014a68:	f000 fcb4 	bl	80153d4 <memchr>
 8014a6c:	9a04      	ldr	r2, [sp, #16]
 8014a6e:	b9d8      	cbnz	r0, 8014aa8 <_vfiprintf_r+0x12c>
 8014a70:	06d1      	lsls	r1, r2, #27
 8014a72:	bf44      	itt	mi
 8014a74:	2320      	movmi	r3, #32
 8014a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a7a:	0713      	lsls	r3, r2, #28
 8014a7c:	bf44      	itt	mi
 8014a7e:	232b      	movmi	r3, #43	; 0x2b
 8014a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a84:	f89a 3000 	ldrb.w	r3, [sl]
 8014a88:	2b2a      	cmp	r3, #42	; 0x2a
 8014a8a:	d015      	beq.n	8014ab8 <_vfiprintf_r+0x13c>
 8014a8c:	4654      	mov	r4, sl
 8014a8e:	2000      	movs	r0, #0
 8014a90:	f04f 0c0a 	mov.w	ip, #10
 8014a94:	9a07      	ldr	r2, [sp, #28]
 8014a96:	4621      	mov	r1, r4
 8014a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a9c:	3b30      	subs	r3, #48	; 0x30
 8014a9e:	2b09      	cmp	r3, #9
 8014aa0:	d94e      	bls.n	8014b40 <_vfiprintf_r+0x1c4>
 8014aa2:	b1b0      	cbz	r0, 8014ad2 <_vfiprintf_r+0x156>
 8014aa4:	9207      	str	r2, [sp, #28]
 8014aa6:	e014      	b.n	8014ad2 <_vfiprintf_r+0x156>
 8014aa8:	eba0 0308 	sub.w	r3, r0, r8
 8014aac:	fa09 f303 	lsl.w	r3, r9, r3
 8014ab0:	4313      	orrs	r3, r2
 8014ab2:	46a2      	mov	sl, r4
 8014ab4:	9304      	str	r3, [sp, #16]
 8014ab6:	e7d2      	b.n	8014a5e <_vfiprintf_r+0xe2>
 8014ab8:	9b03      	ldr	r3, [sp, #12]
 8014aba:	1d19      	adds	r1, r3, #4
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	9103      	str	r1, [sp, #12]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	bfbb      	ittet	lt
 8014ac4:	425b      	neglt	r3, r3
 8014ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8014aca:	9307      	strge	r3, [sp, #28]
 8014acc:	9307      	strlt	r3, [sp, #28]
 8014ace:	bfb8      	it	lt
 8014ad0:	9204      	strlt	r2, [sp, #16]
 8014ad2:	7823      	ldrb	r3, [r4, #0]
 8014ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8014ad6:	d10c      	bne.n	8014af2 <_vfiprintf_r+0x176>
 8014ad8:	7863      	ldrb	r3, [r4, #1]
 8014ada:	2b2a      	cmp	r3, #42	; 0x2a
 8014adc:	d135      	bne.n	8014b4a <_vfiprintf_r+0x1ce>
 8014ade:	9b03      	ldr	r3, [sp, #12]
 8014ae0:	3402      	adds	r4, #2
 8014ae2:	1d1a      	adds	r2, r3, #4
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	9203      	str	r2, [sp, #12]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	bfb8      	it	lt
 8014aec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014af0:	9305      	str	r3, [sp, #20]
 8014af2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014bd8 <_vfiprintf_r+0x25c>
 8014af6:	2203      	movs	r2, #3
 8014af8:	4650      	mov	r0, sl
 8014afa:	7821      	ldrb	r1, [r4, #0]
 8014afc:	f000 fc6a 	bl	80153d4 <memchr>
 8014b00:	b140      	cbz	r0, 8014b14 <_vfiprintf_r+0x198>
 8014b02:	2340      	movs	r3, #64	; 0x40
 8014b04:	eba0 000a 	sub.w	r0, r0, sl
 8014b08:	fa03 f000 	lsl.w	r0, r3, r0
 8014b0c:	9b04      	ldr	r3, [sp, #16]
 8014b0e:	3401      	adds	r4, #1
 8014b10:	4303      	orrs	r3, r0
 8014b12:	9304      	str	r3, [sp, #16]
 8014b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b18:	2206      	movs	r2, #6
 8014b1a:	482c      	ldr	r0, [pc, #176]	; (8014bcc <_vfiprintf_r+0x250>)
 8014b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014b20:	f000 fc58 	bl	80153d4 <memchr>
 8014b24:	2800      	cmp	r0, #0
 8014b26:	d03f      	beq.n	8014ba8 <_vfiprintf_r+0x22c>
 8014b28:	4b29      	ldr	r3, [pc, #164]	; (8014bd0 <_vfiprintf_r+0x254>)
 8014b2a:	bb1b      	cbnz	r3, 8014b74 <_vfiprintf_r+0x1f8>
 8014b2c:	9b03      	ldr	r3, [sp, #12]
 8014b2e:	3307      	adds	r3, #7
 8014b30:	f023 0307 	bic.w	r3, r3, #7
 8014b34:	3308      	adds	r3, #8
 8014b36:	9303      	str	r3, [sp, #12]
 8014b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b3a:	443b      	add	r3, r7
 8014b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8014b3e:	e767      	b.n	8014a10 <_vfiprintf_r+0x94>
 8014b40:	460c      	mov	r4, r1
 8014b42:	2001      	movs	r0, #1
 8014b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8014b48:	e7a5      	b.n	8014a96 <_vfiprintf_r+0x11a>
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	f04f 0c0a 	mov.w	ip, #10
 8014b50:	4619      	mov	r1, r3
 8014b52:	3401      	adds	r4, #1
 8014b54:	9305      	str	r3, [sp, #20]
 8014b56:	4620      	mov	r0, r4
 8014b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b5c:	3a30      	subs	r2, #48	; 0x30
 8014b5e:	2a09      	cmp	r2, #9
 8014b60:	d903      	bls.n	8014b6a <_vfiprintf_r+0x1ee>
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d0c5      	beq.n	8014af2 <_vfiprintf_r+0x176>
 8014b66:	9105      	str	r1, [sp, #20]
 8014b68:	e7c3      	b.n	8014af2 <_vfiprintf_r+0x176>
 8014b6a:	4604      	mov	r4, r0
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014b72:	e7f0      	b.n	8014b56 <_vfiprintf_r+0x1da>
 8014b74:	ab03      	add	r3, sp, #12
 8014b76:	9300      	str	r3, [sp, #0]
 8014b78:	462a      	mov	r2, r5
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	4b15      	ldr	r3, [pc, #84]	; (8014bd4 <_vfiprintf_r+0x258>)
 8014b7e:	a904      	add	r1, sp, #16
 8014b80:	f3af 8000 	nop.w
 8014b84:	4607      	mov	r7, r0
 8014b86:	1c78      	adds	r0, r7, #1
 8014b88:	d1d6      	bne.n	8014b38 <_vfiprintf_r+0x1bc>
 8014b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014b8c:	07d9      	lsls	r1, r3, #31
 8014b8e:	d405      	bmi.n	8014b9c <_vfiprintf_r+0x220>
 8014b90:	89ab      	ldrh	r3, [r5, #12]
 8014b92:	059a      	lsls	r2, r3, #22
 8014b94:	d402      	bmi.n	8014b9c <_vfiprintf_r+0x220>
 8014b96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014b98:	f7ff fd39 	bl	801460e <__retarget_lock_release_recursive>
 8014b9c:	89ab      	ldrh	r3, [r5, #12]
 8014b9e:	065b      	lsls	r3, r3, #25
 8014ba0:	f53f af12 	bmi.w	80149c8 <_vfiprintf_r+0x4c>
 8014ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ba6:	e711      	b.n	80149cc <_vfiprintf_r+0x50>
 8014ba8:	ab03      	add	r3, sp, #12
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	462a      	mov	r2, r5
 8014bae:	4630      	mov	r0, r6
 8014bb0:	4b08      	ldr	r3, [pc, #32]	; (8014bd4 <_vfiprintf_r+0x258>)
 8014bb2:	a904      	add	r1, sp, #16
 8014bb4:	f000 f882 	bl	8014cbc <_printf_i>
 8014bb8:	e7e4      	b.n	8014b84 <_vfiprintf_r+0x208>
 8014bba:	bf00      	nop
 8014bbc:	08016d3c 	.word	0x08016d3c
 8014bc0:	08016d5c 	.word	0x08016d5c
 8014bc4:	08016d1c 	.word	0x08016d1c
 8014bc8:	08016d7c 	.word	0x08016d7c
 8014bcc:	08016d86 	.word	0x08016d86
 8014bd0:	00000000 	.word	0x00000000
 8014bd4:	08014957 	.word	0x08014957
 8014bd8:	08016d82 	.word	0x08016d82

08014bdc <_printf_common>:
 8014bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014be0:	4616      	mov	r6, r2
 8014be2:	4699      	mov	r9, r3
 8014be4:	688a      	ldr	r2, [r1, #8]
 8014be6:	690b      	ldr	r3, [r1, #16]
 8014be8:	4607      	mov	r7, r0
 8014bea:	4293      	cmp	r3, r2
 8014bec:	bfb8      	it	lt
 8014bee:	4613      	movlt	r3, r2
 8014bf0:	6033      	str	r3, [r6, #0]
 8014bf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014bfc:	b10a      	cbz	r2, 8014c02 <_printf_common+0x26>
 8014bfe:	3301      	adds	r3, #1
 8014c00:	6033      	str	r3, [r6, #0]
 8014c02:	6823      	ldr	r3, [r4, #0]
 8014c04:	0699      	lsls	r1, r3, #26
 8014c06:	bf42      	ittt	mi
 8014c08:	6833      	ldrmi	r3, [r6, #0]
 8014c0a:	3302      	addmi	r3, #2
 8014c0c:	6033      	strmi	r3, [r6, #0]
 8014c0e:	6825      	ldr	r5, [r4, #0]
 8014c10:	f015 0506 	ands.w	r5, r5, #6
 8014c14:	d106      	bne.n	8014c24 <_printf_common+0x48>
 8014c16:	f104 0a19 	add.w	sl, r4, #25
 8014c1a:	68e3      	ldr	r3, [r4, #12]
 8014c1c:	6832      	ldr	r2, [r6, #0]
 8014c1e:	1a9b      	subs	r3, r3, r2
 8014c20:	42ab      	cmp	r3, r5
 8014c22:	dc28      	bgt.n	8014c76 <_printf_common+0x9a>
 8014c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c28:	1e13      	subs	r3, r2, #0
 8014c2a:	6822      	ldr	r2, [r4, #0]
 8014c2c:	bf18      	it	ne
 8014c2e:	2301      	movne	r3, #1
 8014c30:	0692      	lsls	r2, r2, #26
 8014c32:	d42d      	bmi.n	8014c90 <_printf_common+0xb4>
 8014c34:	4649      	mov	r1, r9
 8014c36:	4638      	mov	r0, r7
 8014c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c3c:	47c0      	blx	r8
 8014c3e:	3001      	adds	r0, #1
 8014c40:	d020      	beq.n	8014c84 <_printf_common+0xa8>
 8014c42:	6823      	ldr	r3, [r4, #0]
 8014c44:	68e5      	ldr	r5, [r4, #12]
 8014c46:	f003 0306 	and.w	r3, r3, #6
 8014c4a:	2b04      	cmp	r3, #4
 8014c4c:	bf18      	it	ne
 8014c4e:	2500      	movne	r5, #0
 8014c50:	6832      	ldr	r2, [r6, #0]
 8014c52:	f04f 0600 	mov.w	r6, #0
 8014c56:	68a3      	ldr	r3, [r4, #8]
 8014c58:	bf08      	it	eq
 8014c5a:	1aad      	subeq	r5, r5, r2
 8014c5c:	6922      	ldr	r2, [r4, #16]
 8014c5e:	bf08      	it	eq
 8014c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c64:	4293      	cmp	r3, r2
 8014c66:	bfc4      	itt	gt
 8014c68:	1a9b      	subgt	r3, r3, r2
 8014c6a:	18ed      	addgt	r5, r5, r3
 8014c6c:	341a      	adds	r4, #26
 8014c6e:	42b5      	cmp	r5, r6
 8014c70:	d11a      	bne.n	8014ca8 <_printf_common+0xcc>
 8014c72:	2000      	movs	r0, #0
 8014c74:	e008      	b.n	8014c88 <_printf_common+0xac>
 8014c76:	2301      	movs	r3, #1
 8014c78:	4652      	mov	r2, sl
 8014c7a:	4649      	mov	r1, r9
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	47c0      	blx	r8
 8014c80:	3001      	adds	r0, #1
 8014c82:	d103      	bne.n	8014c8c <_printf_common+0xb0>
 8014c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c8c:	3501      	adds	r5, #1
 8014c8e:	e7c4      	b.n	8014c1a <_printf_common+0x3e>
 8014c90:	2030      	movs	r0, #48	; 0x30
 8014c92:	18e1      	adds	r1, r4, r3
 8014c94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c98:	1c5a      	adds	r2, r3, #1
 8014c9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c9e:	4422      	add	r2, r4
 8014ca0:	3302      	adds	r3, #2
 8014ca2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ca6:	e7c5      	b.n	8014c34 <_printf_common+0x58>
 8014ca8:	2301      	movs	r3, #1
 8014caa:	4622      	mov	r2, r4
 8014cac:	4649      	mov	r1, r9
 8014cae:	4638      	mov	r0, r7
 8014cb0:	47c0      	blx	r8
 8014cb2:	3001      	adds	r0, #1
 8014cb4:	d0e6      	beq.n	8014c84 <_printf_common+0xa8>
 8014cb6:	3601      	adds	r6, #1
 8014cb8:	e7d9      	b.n	8014c6e <_printf_common+0x92>
	...

08014cbc <_printf_i>:
 8014cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014cc0:	460c      	mov	r4, r1
 8014cc2:	7e27      	ldrb	r7, [r4, #24]
 8014cc4:	4691      	mov	r9, r2
 8014cc6:	2f78      	cmp	r7, #120	; 0x78
 8014cc8:	4680      	mov	r8, r0
 8014cca:	469a      	mov	sl, r3
 8014ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014cd2:	d807      	bhi.n	8014ce4 <_printf_i+0x28>
 8014cd4:	2f62      	cmp	r7, #98	; 0x62
 8014cd6:	d80a      	bhi.n	8014cee <_printf_i+0x32>
 8014cd8:	2f00      	cmp	r7, #0
 8014cda:	f000 80d9 	beq.w	8014e90 <_printf_i+0x1d4>
 8014cde:	2f58      	cmp	r7, #88	; 0x58
 8014ce0:	f000 80a4 	beq.w	8014e2c <_printf_i+0x170>
 8014ce4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014cec:	e03a      	b.n	8014d64 <_printf_i+0xa8>
 8014cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014cf2:	2b15      	cmp	r3, #21
 8014cf4:	d8f6      	bhi.n	8014ce4 <_printf_i+0x28>
 8014cf6:	a001      	add	r0, pc, #4	; (adr r0, 8014cfc <_printf_i+0x40>)
 8014cf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014cfc:	08014d55 	.word	0x08014d55
 8014d00:	08014d69 	.word	0x08014d69
 8014d04:	08014ce5 	.word	0x08014ce5
 8014d08:	08014ce5 	.word	0x08014ce5
 8014d0c:	08014ce5 	.word	0x08014ce5
 8014d10:	08014ce5 	.word	0x08014ce5
 8014d14:	08014d69 	.word	0x08014d69
 8014d18:	08014ce5 	.word	0x08014ce5
 8014d1c:	08014ce5 	.word	0x08014ce5
 8014d20:	08014ce5 	.word	0x08014ce5
 8014d24:	08014ce5 	.word	0x08014ce5
 8014d28:	08014e77 	.word	0x08014e77
 8014d2c:	08014d99 	.word	0x08014d99
 8014d30:	08014e59 	.word	0x08014e59
 8014d34:	08014ce5 	.word	0x08014ce5
 8014d38:	08014ce5 	.word	0x08014ce5
 8014d3c:	08014e99 	.word	0x08014e99
 8014d40:	08014ce5 	.word	0x08014ce5
 8014d44:	08014d99 	.word	0x08014d99
 8014d48:	08014ce5 	.word	0x08014ce5
 8014d4c:	08014ce5 	.word	0x08014ce5
 8014d50:	08014e61 	.word	0x08014e61
 8014d54:	680b      	ldr	r3, [r1, #0]
 8014d56:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014d5a:	1d1a      	adds	r2, r3, #4
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	600a      	str	r2, [r1, #0]
 8014d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d64:	2301      	movs	r3, #1
 8014d66:	e0a4      	b.n	8014eb2 <_printf_i+0x1f6>
 8014d68:	6825      	ldr	r5, [r4, #0]
 8014d6a:	6808      	ldr	r0, [r1, #0]
 8014d6c:	062e      	lsls	r6, r5, #24
 8014d6e:	f100 0304 	add.w	r3, r0, #4
 8014d72:	d50a      	bpl.n	8014d8a <_printf_i+0xce>
 8014d74:	6805      	ldr	r5, [r0, #0]
 8014d76:	600b      	str	r3, [r1, #0]
 8014d78:	2d00      	cmp	r5, #0
 8014d7a:	da03      	bge.n	8014d84 <_printf_i+0xc8>
 8014d7c:	232d      	movs	r3, #45	; 0x2d
 8014d7e:	426d      	negs	r5, r5
 8014d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d84:	230a      	movs	r3, #10
 8014d86:	485e      	ldr	r0, [pc, #376]	; (8014f00 <_printf_i+0x244>)
 8014d88:	e019      	b.n	8014dbe <_printf_i+0x102>
 8014d8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014d8e:	6805      	ldr	r5, [r0, #0]
 8014d90:	600b      	str	r3, [r1, #0]
 8014d92:	bf18      	it	ne
 8014d94:	b22d      	sxthne	r5, r5
 8014d96:	e7ef      	b.n	8014d78 <_printf_i+0xbc>
 8014d98:	680b      	ldr	r3, [r1, #0]
 8014d9a:	6825      	ldr	r5, [r4, #0]
 8014d9c:	1d18      	adds	r0, r3, #4
 8014d9e:	6008      	str	r0, [r1, #0]
 8014da0:	0628      	lsls	r0, r5, #24
 8014da2:	d501      	bpl.n	8014da8 <_printf_i+0xec>
 8014da4:	681d      	ldr	r5, [r3, #0]
 8014da6:	e002      	b.n	8014dae <_printf_i+0xf2>
 8014da8:	0669      	lsls	r1, r5, #25
 8014daa:	d5fb      	bpl.n	8014da4 <_printf_i+0xe8>
 8014dac:	881d      	ldrh	r5, [r3, #0]
 8014dae:	2f6f      	cmp	r7, #111	; 0x6f
 8014db0:	bf0c      	ite	eq
 8014db2:	2308      	moveq	r3, #8
 8014db4:	230a      	movne	r3, #10
 8014db6:	4852      	ldr	r0, [pc, #328]	; (8014f00 <_printf_i+0x244>)
 8014db8:	2100      	movs	r1, #0
 8014dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014dbe:	6866      	ldr	r6, [r4, #4]
 8014dc0:	2e00      	cmp	r6, #0
 8014dc2:	bfa8      	it	ge
 8014dc4:	6821      	ldrge	r1, [r4, #0]
 8014dc6:	60a6      	str	r6, [r4, #8]
 8014dc8:	bfa4      	itt	ge
 8014dca:	f021 0104 	bicge.w	r1, r1, #4
 8014dce:	6021      	strge	r1, [r4, #0]
 8014dd0:	b90d      	cbnz	r5, 8014dd6 <_printf_i+0x11a>
 8014dd2:	2e00      	cmp	r6, #0
 8014dd4:	d04d      	beq.n	8014e72 <_printf_i+0x1b6>
 8014dd6:	4616      	mov	r6, r2
 8014dd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ddc:	fb03 5711 	mls	r7, r3, r1, r5
 8014de0:	5dc7      	ldrb	r7, [r0, r7]
 8014de2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014de6:	462f      	mov	r7, r5
 8014de8:	42bb      	cmp	r3, r7
 8014dea:	460d      	mov	r5, r1
 8014dec:	d9f4      	bls.n	8014dd8 <_printf_i+0x11c>
 8014dee:	2b08      	cmp	r3, #8
 8014df0:	d10b      	bne.n	8014e0a <_printf_i+0x14e>
 8014df2:	6823      	ldr	r3, [r4, #0]
 8014df4:	07df      	lsls	r7, r3, #31
 8014df6:	d508      	bpl.n	8014e0a <_printf_i+0x14e>
 8014df8:	6923      	ldr	r3, [r4, #16]
 8014dfa:	6861      	ldr	r1, [r4, #4]
 8014dfc:	4299      	cmp	r1, r3
 8014dfe:	bfde      	ittt	le
 8014e00:	2330      	movle	r3, #48	; 0x30
 8014e02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e06:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8014e0a:	1b92      	subs	r2, r2, r6
 8014e0c:	6122      	str	r2, [r4, #16]
 8014e0e:	464b      	mov	r3, r9
 8014e10:	4621      	mov	r1, r4
 8014e12:	4640      	mov	r0, r8
 8014e14:	f8cd a000 	str.w	sl, [sp]
 8014e18:	aa03      	add	r2, sp, #12
 8014e1a:	f7ff fedf 	bl	8014bdc <_printf_common>
 8014e1e:	3001      	adds	r0, #1
 8014e20:	d14c      	bne.n	8014ebc <_printf_i+0x200>
 8014e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e26:	b004      	add	sp, #16
 8014e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e2c:	4834      	ldr	r0, [pc, #208]	; (8014f00 <_printf_i+0x244>)
 8014e2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014e32:	680e      	ldr	r6, [r1, #0]
 8014e34:	6823      	ldr	r3, [r4, #0]
 8014e36:	f856 5b04 	ldr.w	r5, [r6], #4
 8014e3a:	061f      	lsls	r7, r3, #24
 8014e3c:	600e      	str	r6, [r1, #0]
 8014e3e:	d514      	bpl.n	8014e6a <_printf_i+0x1ae>
 8014e40:	07d9      	lsls	r1, r3, #31
 8014e42:	bf44      	itt	mi
 8014e44:	f043 0320 	orrmi.w	r3, r3, #32
 8014e48:	6023      	strmi	r3, [r4, #0]
 8014e4a:	b91d      	cbnz	r5, 8014e54 <_printf_i+0x198>
 8014e4c:	6823      	ldr	r3, [r4, #0]
 8014e4e:	f023 0320 	bic.w	r3, r3, #32
 8014e52:	6023      	str	r3, [r4, #0]
 8014e54:	2310      	movs	r3, #16
 8014e56:	e7af      	b.n	8014db8 <_printf_i+0xfc>
 8014e58:	6823      	ldr	r3, [r4, #0]
 8014e5a:	f043 0320 	orr.w	r3, r3, #32
 8014e5e:	6023      	str	r3, [r4, #0]
 8014e60:	2378      	movs	r3, #120	; 0x78
 8014e62:	4828      	ldr	r0, [pc, #160]	; (8014f04 <_printf_i+0x248>)
 8014e64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e68:	e7e3      	b.n	8014e32 <_printf_i+0x176>
 8014e6a:	065e      	lsls	r6, r3, #25
 8014e6c:	bf48      	it	mi
 8014e6e:	b2ad      	uxthmi	r5, r5
 8014e70:	e7e6      	b.n	8014e40 <_printf_i+0x184>
 8014e72:	4616      	mov	r6, r2
 8014e74:	e7bb      	b.n	8014dee <_printf_i+0x132>
 8014e76:	680b      	ldr	r3, [r1, #0]
 8014e78:	6826      	ldr	r6, [r4, #0]
 8014e7a:	1d1d      	adds	r5, r3, #4
 8014e7c:	6960      	ldr	r0, [r4, #20]
 8014e7e:	600d      	str	r5, [r1, #0]
 8014e80:	0635      	lsls	r5, r6, #24
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	d501      	bpl.n	8014e8a <_printf_i+0x1ce>
 8014e86:	6018      	str	r0, [r3, #0]
 8014e88:	e002      	b.n	8014e90 <_printf_i+0x1d4>
 8014e8a:	0671      	lsls	r1, r6, #25
 8014e8c:	d5fb      	bpl.n	8014e86 <_printf_i+0x1ca>
 8014e8e:	8018      	strh	r0, [r3, #0]
 8014e90:	2300      	movs	r3, #0
 8014e92:	4616      	mov	r6, r2
 8014e94:	6123      	str	r3, [r4, #16]
 8014e96:	e7ba      	b.n	8014e0e <_printf_i+0x152>
 8014e98:	680b      	ldr	r3, [r1, #0]
 8014e9a:	1d1a      	adds	r2, r3, #4
 8014e9c:	600a      	str	r2, [r1, #0]
 8014e9e:	681e      	ldr	r6, [r3, #0]
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	4630      	mov	r0, r6
 8014ea4:	6862      	ldr	r2, [r4, #4]
 8014ea6:	f000 fa95 	bl	80153d4 <memchr>
 8014eaa:	b108      	cbz	r0, 8014eb0 <_printf_i+0x1f4>
 8014eac:	1b80      	subs	r0, r0, r6
 8014eae:	6060      	str	r0, [r4, #4]
 8014eb0:	6863      	ldr	r3, [r4, #4]
 8014eb2:	6123      	str	r3, [r4, #16]
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014eba:	e7a8      	b.n	8014e0e <_printf_i+0x152>
 8014ebc:	4632      	mov	r2, r6
 8014ebe:	4649      	mov	r1, r9
 8014ec0:	4640      	mov	r0, r8
 8014ec2:	6923      	ldr	r3, [r4, #16]
 8014ec4:	47d0      	blx	sl
 8014ec6:	3001      	adds	r0, #1
 8014ec8:	d0ab      	beq.n	8014e22 <_printf_i+0x166>
 8014eca:	6823      	ldr	r3, [r4, #0]
 8014ecc:	079b      	lsls	r3, r3, #30
 8014ece:	d413      	bmi.n	8014ef8 <_printf_i+0x23c>
 8014ed0:	68e0      	ldr	r0, [r4, #12]
 8014ed2:	9b03      	ldr	r3, [sp, #12]
 8014ed4:	4298      	cmp	r0, r3
 8014ed6:	bfb8      	it	lt
 8014ed8:	4618      	movlt	r0, r3
 8014eda:	e7a4      	b.n	8014e26 <_printf_i+0x16a>
 8014edc:	2301      	movs	r3, #1
 8014ede:	4632      	mov	r2, r6
 8014ee0:	4649      	mov	r1, r9
 8014ee2:	4640      	mov	r0, r8
 8014ee4:	47d0      	blx	sl
 8014ee6:	3001      	adds	r0, #1
 8014ee8:	d09b      	beq.n	8014e22 <_printf_i+0x166>
 8014eea:	3501      	adds	r5, #1
 8014eec:	68e3      	ldr	r3, [r4, #12]
 8014eee:	9903      	ldr	r1, [sp, #12]
 8014ef0:	1a5b      	subs	r3, r3, r1
 8014ef2:	42ab      	cmp	r3, r5
 8014ef4:	dcf2      	bgt.n	8014edc <_printf_i+0x220>
 8014ef6:	e7eb      	b.n	8014ed0 <_printf_i+0x214>
 8014ef8:	2500      	movs	r5, #0
 8014efa:	f104 0619 	add.w	r6, r4, #25
 8014efe:	e7f5      	b.n	8014eec <_printf_i+0x230>
 8014f00:	08016d8d 	.word	0x08016d8d
 8014f04:	08016d9e 	.word	0x08016d9e

08014f08 <__sread>:
 8014f08:	b510      	push	{r4, lr}
 8014f0a:	460c      	mov	r4, r1
 8014f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f10:	f000 fa76 	bl	8015400 <_read_r>
 8014f14:	2800      	cmp	r0, #0
 8014f16:	bfab      	itete	ge
 8014f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8014f1c:	181b      	addge	r3, r3, r0
 8014f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014f22:	bfac      	ite	ge
 8014f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8014f26:	81a3      	strhlt	r3, [r4, #12]
 8014f28:	bd10      	pop	{r4, pc}

08014f2a <__swrite>:
 8014f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f2e:	461f      	mov	r7, r3
 8014f30:	898b      	ldrh	r3, [r1, #12]
 8014f32:	4605      	mov	r5, r0
 8014f34:	05db      	lsls	r3, r3, #23
 8014f36:	460c      	mov	r4, r1
 8014f38:	4616      	mov	r6, r2
 8014f3a:	d505      	bpl.n	8014f48 <__swrite+0x1e>
 8014f3c:	2302      	movs	r3, #2
 8014f3e:	2200      	movs	r2, #0
 8014f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f44:	f000 f9d0 	bl	80152e8 <_lseek_r>
 8014f48:	89a3      	ldrh	r3, [r4, #12]
 8014f4a:	4632      	mov	r2, r6
 8014f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014f50:	81a3      	strh	r3, [r4, #12]
 8014f52:	4628      	mov	r0, r5
 8014f54:	463b      	mov	r3, r7
 8014f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f5e:	f000 b869 	b.w	8015034 <_write_r>

08014f62 <__sseek>:
 8014f62:	b510      	push	{r4, lr}
 8014f64:	460c      	mov	r4, r1
 8014f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f6a:	f000 f9bd 	bl	80152e8 <_lseek_r>
 8014f6e:	1c43      	adds	r3, r0, #1
 8014f70:	89a3      	ldrh	r3, [r4, #12]
 8014f72:	bf15      	itete	ne
 8014f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8014f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014f7e:	81a3      	strheq	r3, [r4, #12]
 8014f80:	bf18      	it	ne
 8014f82:	81a3      	strhne	r3, [r4, #12]
 8014f84:	bd10      	pop	{r4, pc}

08014f86 <__sclose>:
 8014f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f8a:	f000 b8db 	b.w	8015144 <_close_r>
	...

08014f90 <__swbuf_r>:
 8014f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f92:	460e      	mov	r6, r1
 8014f94:	4614      	mov	r4, r2
 8014f96:	4605      	mov	r5, r0
 8014f98:	b118      	cbz	r0, 8014fa2 <__swbuf_r+0x12>
 8014f9a:	6983      	ldr	r3, [r0, #24]
 8014f9c:	b90b      	cbnz	r3, 8014fa2 <__swbuf_r+0x12>
 8014f9e:	f7ff fa85 	bl	80144ac <__sinit>
 8014fa2:	4b21      	ldr	r3, [pc, #132]	; (8015028 <__swbuf_r+0x98>)
 8014fa4:	429c      	cmp	r4, r3
 8014fa6:	d12b      	bne.n	8015000 <__swbuf_r+0x70>
 8014fa8:	686c      	ldr	r4, [r5, #4]
 8014faa:	69a3      	ldr	r3, [r4, #24]
 8014fac:	60a3      	str	r3, [r4, #8]
 8014fae:	89a3      	ldrh	r3, [r4, #12]
 8014fb0:	071a      	lsls	r2, r3, #28
 8014fb2:	d52f      	bpl.n	8015014 <__swbuf_r+0x84>
 8014fb4:	6923      	ldr	r3, [r4, #16]
 8014fb6:	b36b      	cbz	r3, 8015014 <__swbuf_r+0x84>
 8014fb8:	6923      	ldr	r3, [r4, #16]
 8014fba:	6820      	ldr	r0, [r4, #0]
 8014fbc:	b2f6      	uxtb	r6, r6
 8014fbe:	1ac0      	subs	r0, r0, r3
 8014fc0:	6963      	ldr	r3, [r4, #20]
 8014fc2:	4637      	mov	r7, r6
 8014fc4:	4283      	cmp	r3, r0
 8014fc6:	dc04      	bgt.n	8014fd2 <__swbuf_r+0x42>
 8014fc8:	4621      	mov	r1, r4
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f000 f950 	bl	8015270 <_fflush_r>
 8014fd0:	bb30      	cbnz	r0, 8015020 <__swbuf_r+0x90>
 8014fd2:	68a3      	ldr	r3, [r4, #8]
 8014fd4:	3001      	adds	r0, #1
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	60a3      	str	r3, [r4, #8]
 8014fda:	6823      	ldr	r3, [r4, #0]
 8014fdc:	1c5a      	adds	r2, r3, #1
 8014fde:	6022      	str	r2, [r4, #0]
 8014fe0:	701e      	strb	r6, [r3, #0]
 8014fe2:	6963      	ldr	r3, [r4, #20]
 8014fe4:	4283      	cmp	r3, r0
 8014fe6:	d004      	beq.n	8014ff2 <__swbuf_r+0x62>
 8014fe8:	89a3      	ldrh	r3, [r4, #12]
 8014fea:	07db      	lsls	r3, r3, #31
 8014fec:	d506      	bpl.n	8014ffc <__swbuf_r+0x6c>
 8014fee:	2e0a      	cmp	r6, #10
 8014ff0:	d104      	bne.n	8014ffc <__swbuf_r+0x6c>
 8014ff2:	4621      	mov	r1, r4
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	f000 f93b 	bl	8015270 <_fflush_r>
 8014ffa:	b988      	cbnz	r0, 8015020 <__swbuf_r+0x90>
 8014ffc:	4638      	mov	r0, r7
 8014ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015000:	4b0a      	ldr	r3, [pc, #40]	; (801502c <__swbuf_r+0x9c>)
 8015002:	429c      	cmp	r4, r3
 8015004:	d101      	bne.n	801500a <__swbuf_r+0x7a>
 8015006:	68ac      	ldr	r4, [r5, #8]
 8015008:	e7cf      	b.n	8014faa <__swbuf_r+0x1a>
 801500a:	4b09      	ldr	r3, [pc, #36]	; (8015030 <__swbuf_r+0xa0>)
 801500c:	429c      	cmp	r4, r3
 801500e:	bf08      	it	eq
 8015010:	68ec      	ldreq	r4, [r5, #12]
 8015012:	e7ca      	b.n	8014faa <__swbuf_r+0x1a>
 8015014:	4621      	mov	r1, r4
 8015016:	4628      	mov	r0, r5
 8015018:	f000 f81e 	bl	8015058 <__swsetup_r>
 801501c:	2800      	cmp	r0, #0
 801501e:	d0cb      	beq.n	8014fb8 <__swbuf_r+0x28>
 8015020:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015024:	e7ea      	b.n	8014ffc <__swbuf_r+0x6c>
 8015026:	bf00      	nop
 8015028:	08016d3c 	.word	0x08016d3c
 801502c:	08016d5c 	.word	0x08016d5c
 8015030:	08016d1c 	.word	0x08016d1c

08015034 <_write_r>:
 8015034:	b538      	push	{r3, r4, r5, lr}
 8015036:	4604      	mov	r4, r0
 8015038:	4608      	mov	r0, r1
 801503a:	4611      	mov	r1, r2
 801503c:	2200      	movs	r2, #0
 801503e:	4d05      	ldr	r5, [pc, #20]	; (8015054 <_write_r+0x20>)
 8015040:	602a      	str	r2, [r5, #0]
 8015042:	461a      	mov	r2, r3
 8015044:	f7ec fec6 	bl	8001dd4 <_write>
 8015048:	1c43      	adds	r3, r0, #1
 801504a:	d102      	bne.n	8015052 <_write_r+0x1e>
 801504c:	682b      	ldr	r3, [r5, #0]
 801504e:	b103      	cbz	r3, 8015052 <_write_r+0x1e>
 8015050:	6023      	str	r3, [r4, #0]
 8015052:	bd38      	pop	{r3, r4, r5, pc}
 8015054:	2000d27c 	.word	0x2000d27c

08015058 <__swsetup_r>:
 8015058:	4b32      	ldr	r3, [pc, #200]	; (8015124 <__swsetup_r+0xcc>)
 801505a:	b570      	push	{r4, r5, r6, lr}
 801505c:	681d      	ldr	r5, [r3, #0]
 801505e:	4606      	mov	r6, r0
 8015060:	460c      	mov	r4, r1
 8015062:	b125      	cbz	r5, 801506e <__swsetup_r+0x16>
 8015064:	69ab      	ldr	r3, [r5, #24]
 8015066:	b913      	cbnz	r3, 801506e <__swsetup_r+0x16>
 8015068:	4628      	mov	r0, r5
 801506a:	f7ff fa1f 	bl	80144ac <__sinit>
 801506e:	4b2e      	ldr	r3, [pc, #184]	; (8015128 <__swsetup_r+0xd0>)
 8015070:	429c      	cmp	r4, r3
 8015072:	d10f      	bne.n	8015094 <__swsetup_r+0x3c>
 8015074:	686c      	ldr	r4, [r5, #4]
 8015076:	89a3      	ldrh	r3, [r4, #12]
 8015078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801507c:	0719      	lsls	r1, r3, #28
 801507e:	d42c      	bmi.n	80150da <__swsetup_r+0x82>
 8015080:	06dd      	lsls	r5, r3, #27
 8015082:	d411      	bmi.n	80150a8 <__swsetup_r+0x50>
 8015084:	2309      	movs	r3, #9
 8015086:	6033      	str	r3, [r6, #0]
 8015088:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801508c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015090:	81a3      	strh	r3, [r4, #12]
 8015092:	e03e      	b.n	8015112 <__swsetup_r+0xba>
 8015094:	4b25      	ldr	r3, [pc, #148]	; (801512c <__swsetup_r+0xd4>)
 8015096:	429c      	cmp	r4, r3
 8015098:	d101      	bne.n	801509e <__swsetup_r+0x46>
 801509a:	68ac      	ldr	r4, [r5, #8]
 801509c:	e7eb      	b.n	8015076 <__swsetup_r+0x1e>
 801509e:	4b24      	ldr	r3, [pc, #144]	; (8015130 <__swsetup_r+0xd8>)
 80150a0:	429c      	cmp	r4, r3
 80150a2:	bf08      	it	eq
 80150a4:	68ec      	ldreq	r4, [r5, #12]
 80150a6:	e7e6      	b.n	8015076 <__swsetup_r+0x1e>
 80150a8:	0758      	lsls	r0, r3, #29
 80150aa:	d512      	bpl.n	80150d2 <__swsetup_r+0x7a>
 80150ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80150ae:	b141      	cbz	r1, 80150c2 <__swsetup_r+0x6a>
 80150b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80150b4:	4299      	cmp	r1, r3
 80150b6:	d002      	beq.n	80150be <__swsetup_r+0x66>
 80150b8:	4630      	mov	r0, r6
 80150ba:	f7fe fef1 	bl	8013ea0 <_free_r>
 80150be:	2300      	movs	r3, #0
 80150c0:	6363      	str	r3, [r4, #52]	; 0x34
 80150c2:	89a3      	ldrh	r3, [r4, #12]
 80150c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80150c8:	81a3      	strh	r3, [r4, #12]
 80150ca:	2300      	movs	r3, #0
 80150cc:	6063      	str	r3, [r4, #4]
 80150ce:	6923      	ldr	r3, [r4, #16]
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	89a3      	ldrh	r3, [r4, #12]
 80150d4:	f043 0308 	orr.w	r3, r3, #8
 80150d8:	81a3      	strh	r3, [r4, #12]
 80150da:	6923      	ldr	r3, [r4, #16]
 80150dc:	b94b      	cbnz	r3, 80150f2 <__swsetup_r+0x9a>
 80150de:	89a3      	ldrh	r3, [r4, #12]
 80150e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80150e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150e8:	d003      	beq.n	80150f2 <__swsetup_r+0x9a>
 80150ea:	4621      	mov	r1, r4
 80150ec:	4630      	mov	r0, r6
 80150ee:	f000 f931 	bl	8015354 <__smakebuf_r>
 80150f2:	89a0      	ldrh	r0, [r4, #12]
 80150f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80150f8:	f010 0301 	ands.w	r3, r0, #1
 80150fc:	d00a      	beq.n	8015114 <__swsetup_r+0xbc>
 80150fe:	2300      	movs	r3, #0
 8015100:	60a3      	str	r3, [r4, #8]
 8015102:	6963      	ldr	r3, [r4, #20]
 8015104:	425b      	negs	r3, r3
 8015106:	61a3      	str	r3, [r4, #24]
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	b943      	cbnz	r3, 801511e <__swsetup_r+0xc6>
 801510c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015110:	d1ba      	bne.n	8015088 <__swsetup_r+0x30>
 8015112:	bd70      	pop	{r4, r5, r6, pc}
 8015114:	0781      	lsls	r1, r0, #30
 8015116:	bf58      	it	pl
 8015118:	6963      	ldrpl	r3, [r4, #20]
 801511a:	60a3      	str	r3, [r4, #8]
 801511c:	e7f4      	b.n	8015108 <__swsetup_r+0xb0>
 801511e:	2000      	movs	r0, #0
 8015120:	e7f7      	b.n	8015112 <__swsetup_r+0xba>
 8015122:	bf00      	nop
 8015124:	20000074 	.word	0x20000074
 8015128:	08016d3c 	.word	0x08016d3c
 801512c:	08016d5c 	.word	0x08016d5c
 8015130:	08016d1c 	.word	0x08016d1c

08015134 <abort>:
 8015134:	2006      	movs	r0, #6
 8015136:	b508      	push	{r3, lr}
 8015138:	f000 f99c 	bl	8015474 <raise>
 801513c:	2001      	movs	r0, #1
 801513e:	f7ec fe22 	bl	8001d86 <_exit>
	...

08015144 <_close_r>:
 8015144:	b538      	push	{r3, r4, r5, lr}
 8015146:	2300      	movs	r3, #0
 8015148:	4d05      	ldr	r5, [pc, #20]	; (8015160 <_close_r+0x1c>)
 801514a:	4604      	mov	r4, r0
 801514c:	4608      	mov	r0, r1
 801514e:	602b      	str	r3, [r5, #0]
 8015150:	f7ec fe92 	bl	8001e78 <_close>
 8015154:	1c43      	adds	r3, r0, #1
 8015156:	d102      	bne.n	801515e <_close_r+0x1a>
 8015158:	682b      	ldr	r3, [r5, #0]
 801515a:	b103      	cbz	r3, 801515e <_close_r+0x1a>
 801515c:	6023      	str	r3, [r4, #0]
 801515e:	bd38      	pop	{r3, r4, r5, pc}
 8015160:	2000d27c 	.word	0x2000d27c

08015164 <__sflush_r>:
 8015164:	898a      	ldrh	r2, [r1, #12]
 8015166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801516a:	4605      	mov	r5, r0
 801516c:	0710      	lsls	r0, r2, #28
 801516e:	460c      	mov	r4, r1
 8015170:	d458      	bmi.n	8015224 <__sflush_r+0xc0>
 8015172:	684b      	ldr	r3, [r1, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	dc05      	bgt.n	8015184 <__sflush_r+0x20>
 8015178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801517a:	2b00      	cmp	r3, #0
 801517c:	dc02      	bgt.n	8015184 <__sflush_r+0x20>
 801517e:	2000      	movs	r0, #0
 8015180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015186:	2e00      	cmp	r6, #0
 8015188:	d0f9      	beq.n	801517e <__sflush_r+0x1a>
 801518a:	2300      	movs	r3, #0
 801518c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015190:	682f      	ldr	r7, [r5, #0]
 8015192:	602b      	str	r3, [r5, #0]
 8015194:	d032      	beq.n	80151fc <__sflush_r+0x98>
 8015196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015198:	89a3      	ldrh	r3, [r4, #12]
 801519a:	075a      	lsls	r2, r3, #29
 801519c:	d505      	bpl.n	80151aa <__sflush_r+0x46>
 801519e:	6863      	ldr	r3, [r4, #4]
 80151a0:	1ac0      	subs	r0, r0, r3
 80151a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151a4:	b10b      	cbz	r3, 80151aa <__sflush_r+0x46>
 80151a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151a8:	1ac0      	subs	r0, r0, r3
 80151aa:	2300      	movs	r3, #0
 80151ac:	4602      	mov	r2, r0
 80151ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151b0:	4628      	mov	r0, r5
 80151b2:	6a21      	ldr	r1, [r4, #32]
 80151b4:	47b0      	blx	r6
 80151b6:	1c43      	adds	r3, r0, #1
 80151b8:	89a3      	ldrh	r3, [r4, #12]
 80151ba:	d106      	bne.n	80151ca <__sflush_r+0x66>
 80151bc:	6829      	ldr	r1, [r5, #0]
 80151be:	291d      	cmp	r1, #29
 80151c0:	d82c      	bhi.n	801521c <__sflush_r+0xb8>
 80151c2:	4a2a      	ldr	r2, [pc, #168]	; (801526c <__sflush_r+0x108>)
 80151c4:	40ca      	lsrs	r2, r1
 80151c6:	07d6      	lsls	r6, r2, #31
 80151c8:	d528      	bpl.n	801521c <__sflush_r+0xb8>
 80151ca:	2200      	movs	r2, #0
 80151cc:	6062      	str	r2, [r4, #4]
 80151ce:	6922      	ldr	r2, [r4, #16]
 80151d0:	04d9      	lsls	r1, r3, #19
 80151d2:	6022      	str	r2, [r4, #0]
 80151d4:	d504      	bpl.n	80151e0 <__sflush_r+0x7c>
 80151d6:	1c42      	adds	r2, r0, #1
 80151d8:	d101      	bne.n	80151de <__sflush_r+0x7a>
 80151da:	682b      	ldr	r3, [r5, #0]
 80151dc:	b903      	cbnz	r3, 80151e0 <__sflush_r+0x7c>
 80151de:	6560      	str	r0, [r4, #84]	; 0x54
 80151e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151e2:	602f      	str	r7, [r5, #0]
 80151e4:	2900      	cmp	r1, #0
 80151e6:	d0ca      	beq.n	801517e <__sflush_r+0x1a>
 80151e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151ec:	4299      	cmp	r1, r3
 80151ee:	d002      	beq.n	80151f6 <__sflush_r+0x92>
 80151f0:	4628      	mov	r0, r5
 80151f2:	f7fe fe55 	bl	8013ea0 <_free_r>
 80151f6:	2000      	movs	r0, #0
 80151f8:	6360      	str	r0, [r4, #52]	; 0x34
 80151fa:	e7c1      	b.n	8015180 <__sflush_r+0x1c>
 80151fc:	6a21      	ldr	r1, [r4, #32]
 80151fe:	2301      	movs	r3, #1
 8015200:	4628      	mov	r0, r5
 8015202:	47b0      	blx	r6
 8015204:	1c41      	adds	r1, r0, #1
 8015206:	d1c7      	bne.n	8015198 <__sflush_r+0x34>
 8015208:	682b      	ldr	r3, [r5, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d0c4      	beq.n	8015198 <__sflush_r+0x34>
 801520e:	2b1d      	cmp	r3, #29
 8015210:	d001      	beq.n	8015216 <__sflush_r+0xb2>
 8015212:	2b16      	cmp	r3, #22
 8015214:	d101      	bne.n	801521a <__sflush_r+0xb6>
 8015216:	602f      	str	r7, [r5, #0]
 8015218:	e7b1      	b.n	801517e <__sflush_r+0x1a>
 801521a:	89a3      	ldrh	r3, [r4, #12]
 801521c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015220:	81a3      	strh	r3, [r4, #12]
 8015222:	e7ad      	b.n	8015180 <__sflush_r+0x1c>
 8015224:	690f      	ldr	r7, [r1, #16]
 8015226:	2f00      	cmp	r7, #0
 8015228:	d0a9      	beq.n	801517e <__sflush_r+0x1a>
 801522a:	0793      	lsls	r3, r2, #30
 801522c:	bf18      	it	ne
 801522e:	2300      	movne	r3, #0
 8015230:	680e      	ldr	r6, [r1, #0]
 8015232:	bf08      	it	eq
 8015234:	694b      	ldreq	r3, [r1, #20]
 8015236:	eba6 0807 	sub.w	r8, r6, r7
 801523a:	600f      	str	r7, [r1, #0]
 801523c:	608b      	str	r3, [r1, #8]
 801523e:	f1b8 0f00 	cmp.w	r8, #0
 8015242:	dd9c      	ble.n	801517e <__sflush_r+0x1a>
 8015244:	4643      	mov	r3, r8
 8015246:	463a      	mov	r2, r7
 8015248:	4628      	mov	r0, r5
 801524a:	6a21      	ldr	r1, [r4, #32]
 801524c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801524e:	47b0      	blx	r6
 8015250:	2800      	cmp	r0, #0
 8015252:	dc06      	bgt.n	8015262 <__sflush_r+0xfe>
 8015254:	89a3      	ldrh	r3, [r4, #12]
 8015256:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801525a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801525e:	81a3      	strh	r3, [r4, #12]
 8015260:	e78e      	b.n	8015180 <__sflush_r+0x1c>
 8015262:	4407      	add	r7, r0
 8015264:	eba8 0800 	sub.w	r8, r8, r0
 8015268:	e7e9      	b.n	801523e <__sflush_r+0xda>
 801526a:	bf00      	nop
 801526c:	20400001 	.word	0x20400001

08015270 <_fflush_r>:
 8015270:	b538      	push	{r3, r4, r5, lr}
 8015272:	690b      	ldr	r3, [r1, #16]
 8015274:	4605      	mov	r5, r0
 8015276:	460c      	mov	r4, r1
 8015278:	b913      	cbnz	r3, 8015280 <_fflush_r+0x10>
 801527a:	2500      	movs	r5, #0
 801527c:	4628      	mov	r0, r5
 801527e:	bd38      	pop	{r3, r4, r5, pc}
 8015280:	b118      	cbz	r0, 801528a <_fflush_r+0x1a>
 8015282:	6983      	ldr	r3, [r0, #24]
 8015284:	b90b      	cbnz	r3, 801528a <_fflush_r+0x1a>
 8015286:	f7ff f911 	bl	80144ac <__sinit>
 801528a:	4b14      	ldr	r3, [pc, #80]	; (80152dc <_fflush_r+0x6c>)
 801528c:	429c      	cmp	r4, r3
 801528e:	d11b      	bne.n	80152c8 <_fflush_r+0x58>
 8015290:	686c      	ldr	r4, [r5, #4]
 8015292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d0ef      	beq.n	801527a <_fflush_r+0xa>
 801529a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801529c:	07d0      	lsls	r0, r2, #31
 801529e:	d404      	bmi.n	80152aa <_fflush_r+0x3a>
 80152a0:	0599      	lsls	r1, r3, #22
 80152a2:	d402      	bmi.n	80152aa <_fflush_r+0x3a>
 80152a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152a6:	f7ff f9b1 	bl	801460c <__retarget_lock_acquire_recursive>
 80152aa:	4628      	mov	r0, r5
 80152ac:	4621      	mov	r1, r4
 80152ae:	f7ff ff59 	bl	8015164 <__sflush_r>
 80152b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152b4:	4605      	mov	r5, r0
 80152b6:	07da      	lsls	r2, r3, #31
 80152b8:	d4e0      	bmi.n	801527c <_fflush_r+0xc>
 80152ba:	89a3      	ldrh	r3, [r4, #12]
 80152bc:	059b      	lsls	r3, r3, #22
 80152be:	d4dd      	bmi.n	801527c <_fflush_r+0xc>
 80152c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152c2:	f7ff f9a4 	bl	801460e <__retarget_lock_release_recursive>
 80152c6:	e7d9      	b.n	801527c <_fflush_r+0xc>
 80152c8:	4b05      	ldr	r3, [pc, #20]	; (80152e0 <_fflush_r+0x70>)
 80152ca:	429c      	cmp	r4, r3
 80152cc:	d101      	bne.n	80152d2 <_fflush_r+0x62>
 80152ce:	68ac      	ldr	r4, [r5, #8]
 80152d0:	e7df      	b.n	8015292 <_fflush_r+0x22>
 80152d2:	4b04      	ldr	r3, [pc, #16]	; (80152e4 <_fflush_r+0x74>)
 80152d4:	429c      	cmp	r4, r3
 80152d6:	bf08      	it	eq
 80152d8:	68ec      	ldreq	r4, [r5, #12]
 80152da:	e7da      	b.n	8015292 <_fflush_r+0x22>
 80152dc:	08016d3c 	.word	0x08016d3c
 80152e0:	08016d5c 	.word	0x08016d5c
 80152e4:	08016d1c 	.word	0x08016d1c

080152e8 <_lseek_r>:
 80152e8:	b538      	push	{r3, r4, r5, lr}
 80152ea:	4604      	mov	r4, r0
 80152ec:	4608      	mov	r0, r1
 80152ee:	4611      	mov	r1, r2
 80152f0:	2200      	movs	r2, #0
 80152f2:	4d05      	ldr	r5, [pc, #20]	; (8015308 <_lseek_r+0x20>)
 80152f4:	602a      	str	r2, [r5, #0]
 80152f6:	461a      	mov	r2, r3
 80152f8:	f7ec fde2 	bl	8001ec0 <_lseek>
 80152fc:	1c43      	adds	r3, r0, #1
 80152fe:	d102      	bne.n	8015306 <_lseek_r+0x1e>
 8015300:	682b      	ldr	r3, [r5, #0]
 8015302:	b103      	cbz	r3, 8015306 <_lseek_r+0x1e>
 8015304:	6023      	str	r3, [r4, #0]
 8015306:	bd38      	pop	{r3, r4, r5, pc}
 8015308:	2000d27c 	.word	0x2000d27c

0801530c <__swhatbuf_r>:
 801530c:	b570      	push	{r4, r5, r6, lr}
 801530e:	460e      	mov	r6, r1
 8015310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015314:	4614      	mov	r4, r2
 8015316:	2900      	cmp	r1, #0
 8015318:	461d      	mov	r5, r3
 801531a:	b096      	sub	sp, #88	; 0x58
 801531c:	da07      	bge.n	801532e <__swhatbuf_r+0x22>
 801531e:	2300      	movs	r3, #0
 8015320:	602b      	str	r3, [r5, #0]
 8015322:	89b3      	ldrh	r3, [r6, #12]
 8015324:	061a      	lsls	r2, r3, #24
 8015326:	d410      	bmi.n	801534a <__swhatbuf_r+0x3e>
 8015328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801532c:	e00e      	b.n	801534c <__swhatbuf_r+0x40>
 801532e:	466a      	mov	r2, sp
 8015330:	f000 f8bc 	bl	80154ac <_fstat_r>
 8015334:	2800      	cmp	r0, #0
 8015336:	dbf2      	blt.n	801531e <__swhatbuf_r+0x12>
 8015338:	9a01      	ldr	r2, [sp, #4]
 801533a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801533e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015342:	425a      	negs	r2, r3
 8015344:	415a      	adcs	r2, r3
 8015346:	602a      	str	r2, [r5, #0]
 8015348:	e7ee      	b.n	8015328 <__swhatbuf_r+0x1c>
 801534a:	2340      	movs	r3, #64	; 0x40
 801534c:	2000      	movs	r0, #0
 801534e:	6023      	str	r3, [r4, #0]
 8015350:	b016      	add	sp, #88	; 0x58
 8015352:	bd70      	pop	{r4, r5, r6, pc}

08015354 <__smakebuf_r>:
 8015354:	898b      	ldrh	r3, [r1, #12]
 8015356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015358:	079d      	lsls	r5, r3, #30
 801535a:	4606      	mov	r6, r0
 801535c:	460c      	mov	r4, r1
 801535e:	d507      	bpl.n	8015370 <__smakebuf_r+0x1c>
 8015360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015364:	6023      	str	r3, [r4, #0]
 8015366:	6123      	str	r3, [r4, #16]
 8015368:	2301      	movs	r3, #1
 801536a:	6163      	str	r3, [r4, #20]
 801536c:	b002      	add	sp, #8
 801536e:	bd70      	pop	{r4, r5, r6, pc}
 8015370:	466a      	mov	r2, sp
 8015372:	ab01      	add	r3, sp, #4
 8015374:	f7ff ffca 	bl	801530c <__swhatbuf_r>
 8015378:	9900      	ldr	r1, [sp, #0]
 801537a:	4605      	mov	r5, r0
 801537c:	4630      	mov	r0, r6
 801537e:	f7fe fddb 	bl	8013f38 <_malloc_r>
 8015382:	b948      	cbnz	r0, 8015398 <__smakebuf_r+0x44>
 8015384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015388:	059a      	lsls	r2, r3, #22
 801538a:	d4ef      	bmi.n	801536c <__smakebuf_r+0x18>
 801538c:	f023 0303 	bic.w	r3, r3, #3
 8015390:	f043 0302 	orr.w	r3, r3, #2
 8015394:	81a3      	strh	r3, [r4, #12]
 8015396:	e7e3      	b.n	8015360 <__smakebuf_r+0xc>
 8015398:	4b0d      	ldr	r3, [pc, #52]	; (80153d0 <__smakebuf_r+0x7c>)
 801539a:	62b3      	str	r3, [r6, #40]	; 0x28
 801539c:	89a3      	ldrh	r3, [r4, #12]
 801539e:	6020      	str	r0, [r4, #0]
 80153a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153a4:	81a3      	strh	r3, [r4, #12]
 80153a6:	9b00      	ldr	r3, [sp, #0]
 80153a8:	6120      	str	r0, [r4, #16]
 80153aa:	6163      	str	r3, [r4, #20]
 80153ac:	9b01      	ldr	r3, [sp, #4]
 80153ae:	b15b      	cbz	r3, 80153c8 <__smakebuf_r+0x74>
 80153b0:	4630      	mov	r0, r6
 80153b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153b6:	f000 f88b 	bl	80154d0 <_isatty_r>
 80153ba:	b128      	cbz	r0, 80153c8 <__smakebuf_r+0x74>
 80153bc:	89a3      	ldrh	r3, [r4, #12]
 80153be:	f023 0303 	bic.w	r3, r3, #3
 80153c2:	f043 0301 	orr.w	r3, r3, #1
 80153c6:	81a3      	strh	r3, [r4, #12]
 80153c8:	89a0      	ldrh	r0, [r4, #12]
 80153ca:	4305      	orrs	r5, r0
 80153cc:	81a5      	strh	r5, [r4, #12]
 80153ce:	e7cd      	b.n	801536c <__smakebuf_r+0x18>
 80153d0:	08014445 	.word	0x08014445

080153d4 <memchr>:
 80153d4:	4603      	mov	r3, r0
 80153d6:	b510      	push	{r4, lr}
 80153d8:	b2c9      	uxtb	r1, r1
 80153da:	4402      	add	r2, r0
 80153dc:	4293      	cmp	r3, r2
 80153de:	4618      	mov	r0, r3
 80153e0:	d101      	bne.n	80153e6 <memchr+0x12>
 80153e2:	2000      	movs	r0, #0
 80153e4:	e003      	b.n	80153ee <memchr+0x1a>
 80153e6:	7804      	ldrb	r4, [r0, #0]
 80153e8:	3301      	adds	r3, #1
 80153ea:	428c      	cmp	r4, r1
 80153ec:	d1f6      	bne.n	80153dc <memchr+0x8>
 80153ee:	bd10      	pop	{r4, pc}

080153f0 <_malloc_usable_size_r>:
 80153f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153f4:	1f18      	subs	r0, r3, #4
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	bfbc      	itt	lt
 80153fa:	580b      	ldrlt	r3, [r1, r0]
 80153fc:	18c0      	addlt	r0, r0, r3
 80153fe:	4770      	bx	lr

08015400 <_read_r>:
 8015400:	b538      	push	{r3, r4, r5, lr}
 8015402:	4604      	mov	r4, r0
 8015404:	4608      	mov	r0, r1
 8015406:	4611      	mov	r1, r2
 8015408:	2200      	movs	r2, #0
 801540a:	4d05      	ldr	r5, [pc, #20]	; (8015420 <_read_r+0x20>)
 801540c:	602a      	str	r2, [r5, #0]
 801540e:	461a      	mov	r2, r3
 8015410:	f7ec fcc3 	bl	8001d9a <_read>
 8015414:	1c43      	adds	r3, r0, #1
 8015416:	d102      	bne.n	801541e <_read_r+0x1e>
 8015418:	682b      	ldr	r3, [r5, #0]
 801541a:	b103      	cbz	r3, 801541e <_read_r+0x1e>
 801541c:	6023      	str	r3, [r4, #0]
 801541e:	bd38      	pop	{r3, r4, r5, pc}
 8015420:	2000d27c 	.word	0x2000d27c

08015424 <_raise_r>:
 8015424:	291f      	cmp	r1, #31
 8015426:	b538      	push	{r3, r4, r5, lr}
 8015428:	4604      	mov	r4, r0
 801542a:	460d      	mov	r5, r1
 801542c:	d904      	bls.n	8015438 <_raise_r+0x14>
 801542e:	2316      	movs	r3, #22
 8015430:	6003      	str	r3, [r0, #0]
 8015432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015436:	bd38      	pop	{r3, r4, r5, pc}
 8015438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801543a:	b112      	cbz	r2, 8015442 <_raise_r+0x1e>
 801543c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015440:	b94b      	cbnz	r3, 8015456 <_raise_r+0x32>
 8015442:	4620      	mov	r0, r4
 8015444:	f000 f830 	bl	80154a8 <_getpid_r>
 8015448:	462a      	mov	r2, r5
 801544a:	4601      	mov	r1, r0
 801544c:	4620      	mov	r0, r4
 801544e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015452:	f000 b817 	b.w	8015484 <_kill_r>
 8015456:	2b01      	cmp	r3, #1
 8015458:	d00a      	beq.n	8015470 <_raise_r+0x4c>
 801545a:	1c59      	adds	r1, r3, #1
 801545c:	d103      	bne.n	8015466 <_raise_r+0x42>
 801545e:	2316      	movs	r3, #22
 8015460:	6003      	str	r3, [r0, #0]
 8015462:	2001      	movs	r0, #1
 8015464:	e7e7      	b.n	8015436 <_raise_r+0x12>
 8015466:	2400      	movs	r4, #0
 8015468:	4628      	mov	r0, r5
 801546a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801546e:	4798      	blx	r3
 8015470:	2000      	movs	r0, #0
 8015472:	e7e0      	b.n	8015436 <_raise_r+0x12>

08015474 <raise>:
 8015474:	4b02      	ldr	r3, [pc, #8]	; (8015480 <raise+0xc>)
 8015476:	4601      	mov	r1, r0
 8015478:	6818      	ldr	r0, [r3, #0]
 801547a:	f7ff bfd3 	b.w	8015424 <_raise_r>
 801547e:	bf00      	nop
 8015480:	20000074 	.word	0x20000074

08015484 <_kill_r>:
 8015484:	b538      	push	{r3, r4, r5, lr}
 8015486:	2300      	movs	r3, #0
 8015488:	4d06      	ldr	r5, [pc, #24]	; (80154a4 <_kill_r+0x20>)
 801548a:	4604      	mov	r4, r0
 801548c:	4608      	mov	r0, r1
 801548e:	4611      	mov	r1, r2
 8015490:	602b      	str	r3, [r5, #0]
 8015492:	f7ec fc68 	bl	8001d66 <_kill>
 8015496:	1c43      	adds	r3, r0, #1
 8015498:	d102      	bne.n	80154a0 <_kill_r+0x1c>
 801549a:	682b      	ldr	r3, [r5, #0]
 801549c:	b103      	cbz	r3, 80154a0 <_kill_r+0x1c>
 801549e:	6023      	str	r3, [r4, #0]
 80154a0:	bd38      	pop	{r3, r4, r5, pc}
 80154a2:	bf00      	nop
 80154a4:	2000d27c 	.word	0x2000d27c

080154a8 <_getpid_r>:
 80154a8:	f7ec bc56 	b.w	8001d58 <_getpid>

080154ac <_fstat_r>:
 80154ac:	b538      	push	{r3, r4, r5, lr}
 80154ae:	2300      	movs	r3, #0
 80154b0:	4d06      	ldr	r5, [pc, #24]	; (80154cc <_fstat_r+0x20>)
 80154b2:	4604      	mov	r4, r0
 80154b4:	4608      	mov	r0, r1
 80154b6:	4611      	mov	r1, r2
 80154b8:	602b      	str	r3, [r5, #0]
 80154ba:	f7ec fce8 	bl	8001e8e <_fstat>
 80154be:	1c43      	adds	r3, r0, #1
 80154c0:	d102      	bne.n	80154c8 <_fstat_r+0x1c>
 80154c2:	682b      	ldr	r3, [r5, #0]
 80154c4:	b103      	cbz	r3, 80154c8 <_fstat_r+0x1c>
 80154c6:	6023      	str	r3, [r4, #0]
 80154c8:	bd38      	pop	{r3, r4, r5, pc}
 80154ca:	bf00      	nop
 80154cc:	2000d27c 	.word	0x2000d27c

080154d0 <_isatty_r>:
 80154d0:	b538      	push	{r3, r4, r5, lr}
 80154d2:	2300      	movs	r3, #0
 80154d4:	4d05      	ldr	r5, [pc, #20]	; (80154ec <_isatty_r+0x1c>)
 80154d6:	4604      	mov	r4, r0
 80154d8:	4608      	mov	r0, r1
 80154da:	602b      	str	r3, [r5, #0]
 80154dc:	f7ec fce6 	bl	8001eac <_isatty>
 80154e0:	1c43      	adds	r3, r0, #1
 80154e2:	d102      	bne.n	80154ea <_isatty_r+0x1a>
 80154e4:	682b      	ldr	r3, [r5, #0]
 80154e6:	b103      	cbz	r3, 80154ea <_isatty_r+0x1a>
 80154e8:	6023      	str	r3, [r4, #0]
 80154ea:	bd38      	pop	{r3, r4, r5, pc}
 80154ec:	2000d27c 	.word	0x2000d27c

080154f0 <_init>:
 80154f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154f2:	bf00      	nop
 80154f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154f6:	bc08      	pop	{r3}
 80154f8:	469e      	mov	lr, r3
 80154fa:	4770      	bx	lr

080154fc <_fini>:
 80154fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154fe:	bf00      	nop
 8015500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015502:	bc08      	pop	{r3}
 8015504:	469e      	mov	lr, r3
 8015506:	4770      	bx	lr
