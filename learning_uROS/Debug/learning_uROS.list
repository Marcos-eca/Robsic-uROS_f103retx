
learning_uROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018bf8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bbc  08018de8  08018de8  00028de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9a4  0801a9a4  000302b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a9a4  0801a9a4  0002a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a9ac  0801a9ac  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9ac  0801a9ac  0002a9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9b0  0801a9b0  0002a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  0801a9b4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d3f0  200002b8  0801ac6c  000302b8  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  2000d6a8  0801ac6c  0003d6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247b1  00000000  00000000  000302e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005038  00000000  00000000  00054a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00059ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0005b458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211f0  00000000  00000000  0005cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020578  00000000  00000000  0007ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7776  00000000  00000000  0009e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ac  00000000  00000000  00155aa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000785c  00000000  00000000  00155b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200002b8 	.word	0x200002b8
 800020c:	00000000 	.word	0x00000000
 8000210:	08018dd0 	.word	0x08018dd0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200002bc 	.word	0x200002bc
 800022c:	08018dd0 	.word	0x08018dd0

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_frsub>:
 8000254:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__addsf3>
 800025a:	bf00      	nop

0800025c <__aeabi_fsub>:
 800025c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000260 <__addsf3>:
 8000260:	0042      	lsls	r2, r0, #1
 8000262:	bf1f      	itttt	ne
 8000264:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000268:	ea92 0f03 	teqne	r2, r3
 800026c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000270:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000274:	d06a      	beq.n	800034c <__addsf3+0xec>
 8000276:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800027a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800027e:	bfc1      	itttt	gt
 8000280:	18d2      	addgt	r2, r2, r3
 8000282:	4041      	eorgt	r1, r0
 8000284:	4048      	eorgt	r0, r1
 8000286:	4041      	eorgt	r1, r0
 8000288:	bfb8      	it	lt
 800028a:	425b      	neglt	r3, r3
 800028c:	2b19      	cmp	r3, #25
 800028e:	bf88      	it	hi
 8000290:	4770      	bxhi	lr
 8000292:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800029e:	bf18      	it	ne
 80002a0:	4240      	negne	r0, r0
 80002a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002aa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ae:	bf18      	it	ne
 80002b0:	4249      	negne	r1, r1
 80002b2:	ea92 0f03 	teq	r2, r3
 80002b6:	d03f      	beq.n	8000338 <__addsf3+0xd8>
 80002b8:	f1a2 0201 	sub.w	r2, r2, #1
 80002bc:	fa41 fc03 	asr.w	ip, r1, r3
 80002c0:	eb10 000c 	adds.w	r0, r0, ip
 80002c4:	f1c3 0320 	rsb	r3, r3, #32
 80002c8:	fa01 f103 	lsl.w	r1, r1, r3
 80002cc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002d0:	d502      	bpl.n	80002d8 <__addsf3+0x78>
 80002d2:	4249      	negs	r1, r1
 80002d4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002dc:	d313      	bcc.n	8000306 <__addsf3+0xa6>
 80002de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002e2:	d306      	bcc.n	80002f2 <__addsf3+0x92>
 80002e4:	0840      	lsrs	r0, r0, #1
 80002e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ea:	f102 0201 	add.w	r2, r2, #1
 80002ee:	2afe      	cmp	r2, #254	; 0xfe
 80002f0:	d251      	bcs.n	8000396 <__addsf3+0x136>
 80002f2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002fa:	bf08      	it	eq
 80002fc:	f020 0001 	biceq.w	r0, r0, #1
 8000300:	ea40 0003 	orr.w	r0, r0, r3
 8000304:	4770      	bx	lr
 8000306:	0049      	lsls	r1, r1, #1
 8000308:	eb40 0000 	adc.w	r0, r0, r0
 800030c:	3a01      	subs	r2, #1
 800030e:	bf28      	it	cs
 8000310:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000314:	d2ed      	bcs.n	80002f2 <__addsf3+0x92>
 8000316:	fab0 fc80 	clz	ip, r0
 800031a:	f1ac 0c08 	sub.w	ip, ip, #8
 800031e:	ebb2 020c 	subs.w	r2, r2, ip
 8000322:	fa00 f00c 	lsl.w	r0, r0, ip
 8000326:	bfaa      	itet	ge
 8000328:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800032c:	4252      	neglt	r2, r2
 800032e:	4318      	orrge	r0, r3
 8000330:	bfbc      	itt	lt
 8000332:	40d0      	lsrlt	r0, r2
 8000334:	4318      	orrlt	r0, r3
 8000336:	4770      	bx	lr
 8000338:	f092 0f00 	teq	r2, #0
 800033c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000340:	bf06      	itte	eq
 8000342:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000346:	3201      	addeq	r2, #1
 8000348:	3b01      	subne	r3, #1
 800034a:	e7b5      	b.n	80002b8 <__addsf3+0x58>
 800034c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000350:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000354:	bf18      	it	ne
 8000356:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800035a:	d021      	beq.n	80003a0 <__addsf3+0x140>
 800035c:	ea92 0f03 	teq	r2, r3
 8000360:	d004      	beq.n	800036c <__addsf3+0x10c>
 8000362:	f092 0f00 	teq	r2, #0
 8000366:	bf08      	it	eq
 8000368:	4608      	moveq	r0, r1
 800036a:	4770      	bx	lr
 800036c:	ea90 0f01 	teq	r0, r1
 8000370:	bf1c      	itt	ne
 8000372:	2000      	movne	r0, #0
 8000374:	4770      	bxne	lr
 8000376:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800037a:	d104      	bne.n	8000386 <__addsf3+0x126>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	bf28      	it	cs
 8000380:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000384:	4770      	bx	lr
 8000386:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800038a:	bf3c      	itt	cc
 800038c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000390:	4770      	bxcc	lr
 8000392:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000396:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800039a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800039e:	4770      	bx	lr
 80003a0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003a4:	bf16      	itet	ne
 80003a6:	4608      	movne	r0, r1
 80003a8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003ac:	4601      	movne	r1, r0
 80003ae:	0242      	lsls	r2, r0, #9
 80003b0:	bf06      	itte	eq
 80003b2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003b6:	ea90 0f01 	teqeq	r0, r1
 80003ba:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003be:	4770      	bx	lr

080003c0 <__aeabi_ui2f>:
 80003c0:	f04f 0300 	mov.w	r3, #0
 80003c4:	e004      	b.n	80003d0 <__aeabi_i2f+0x8>
 80003c6:	bf00      	nop

080003c8 <__aeabi_i2f>:
 80003c8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003cc:	bf48      	it	mi
 80003ce:	4240      	negmi	r0, r0
 80003d0:	ea5f 0c00 	movs.w	ip, r0
 80003d4:	bf08      	it	eq
 80003d6:	4770      	bxeq	lr
 80003d8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003dc:	4601      	mov	r1, r0
 80003de:	f04f 0000 	mov.w	r0, #0
 80003e2:	e01c      	b.n	800041e <__aeabi_l2f+0x2a>

080003e4 <__aeabi_ul2f>:
 80003e4:	ea50 0201 	orrs.w	r2, r0, r1
 80003e8:	bf08      	it	eq
 80003ea:	4770      	bxeq	lr
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e00a      	b.n	8000408 <__aeabi_l2f+0x14>
 80003f2:	bf00      	nop

080003f4 <__aeabi_l2f>:
 80003f4:	ea50 0201 	orrs.w	r2, r0, r1
 80003f8:	bf08      	it	eq
 80003fa:	4770      	bxeq	lr
 80003fc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000400:	d502      	bpl.n	8000408 <__aeabi_l2f+0x14>
 8000402:	4240      	negs	r0, r0
 8000404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000408:	ea5f 0c01 	movs.w	ip, r1
 800040c:	bf02      	ittt	eq
 800040e:	4684      	moveq	ip, r0
 8000410:	4601      	moveq	r1, r0
 8000412:	2000      	moveq	r0, #0
 8000414:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000418:	bf08      	it	eq
 800041a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800041e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000422:	fabc f28c 	clz	r2, ip
 8000426:	3a08      	subs	r2, #8
 8000428:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800042c:	db10      	blt.n	8000450 <__aeabi_l2f+0x5c>
 800042e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000432:	4463      	add	r3, ip
 8000434:	fa00 fc02 	lsl.w	ip, r0, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	f020 0001 	biceq.w	r0, r0, #1
 800044e:	4770      	bx	lr
 8000450:	f102 0220 	add.w	r2, r2, #32
 8000454:	fa01 fc02 	lsl.w	ip, r1, r2
 8000458:	f1c2 0220 	rsb	r2, r2, #32
 800045c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000460:	fa21 f202 	lsr.w	r2, r1, r2
 8000464:	eb43 0002 	adc.w	r0, r3, r2
 8000468:	bf08      	it	eq
 800046a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046e:	4770      	bx	lr

08000470 <__aeabi_fmul>:
 8000470:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000474:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000478:	bf1e      	ittt	ne
 800047a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800047e:	ea92 0f0c 	teqne	r2, ip
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d06f      	beq.n	8000568 <__aeabi_fmul+0xf8>
 8000488:	441a      	add	r2, r3
 800048a:	ea80 0c01 	eor.w	ip, r0, r1
 800048e:	0240      	lsls	r0, r0, #9
 8000490:	bf18      	it	ne
 8000492:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000496:	d01e      	beq.n	80004d6 <__aeabi_fmul+0x66>
 8000498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800049c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004a4:	fba0 3101 	umull	r3, r1, r0, r1
 80004a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004b0:	bf3e      	ittt	cc
 80004b2:	0049      	lslcc	r1, r1, #1
 80004b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004b8:	005b      	lslcc	r3, r3, #1
 80004ba:	ea40 0001 	orr.w	r0, r0, r1
 80004be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004c2:	2afd      	cmp	r2, #253	; 0xfd
 80004c4:	d81d      	bhi.n	8000502 <__aeabi_fmul+0x92>
 80004c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ce:	bf08      	it	eq
 80004d0:	f020 0001 	biceq.w	r0, r0, #1
 80004d4:	4770      	bx	lr
 80004d6:	f090 0f00 	teq	r0, #0
 80004da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004de:	bf08      	it	eq
 80004e0:	0249      	lsleq	r1, r1, #9
 80004e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ea:	3a7f      	subs	r2, #127	; 0x7f
 80004ec:	bfc2      	ittt	gt
 80004ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004f6:	4770      	bxgt	lr
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	3a01      	subs	r2, #1
 8000502:	dc5d      	bgt.n	80005c0 <__aeabi_fmul+0x150>
 8000504:	f112 0f19 	cmn.w	r2, #25
 8000508:	bfdc      	itt	le
 800050a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800050e:	4770      	bxle	lr
 8000510:	f1c2 0200 	rsb	r2, r2, #0
 8000514:	0041      	lsls	r1, r0, #1
 8000516:	fa21 f102 	lsr.w	r1, r1, r2
 800051a:	f1c2 0220 	rsb	r2, r2, #32
 800051e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000522:	ea5f 0031 	movs.w	r0, r1, rrx
 8000526:	f140 0000 	adc.w	r0, r0, #0
 800052a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800052e:	bf08      	it	eq
 8000530:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000534:	4770      	bx	lr
 8000536:	f092 0f00 	teq	r2, #0
 800053a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800053e:	bf02      	ittt	eq
 8000540:	0040      	lsleq	r0, r0, #1
 8000542:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000546:	3a01      	subeq	r2, #1
 8000548:	d0f9      	beq.n	800053e <__aeabi_fmul+0xce>
 800054a:	ea40 000c 	orr.w	r0, r0, ip
 800054e:	f093 0f00 	teq	r3, #0
 8000552:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000556:	bf02      	ittt	eq
 8000558:	0049      	lsleq	r1, r1, #1
 800055a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800055e:	3b01      	subeq	r3, #1
 8000560:	d0f9      	beq.n	8000556 <__aeabi_fmul+0xe6>
 8000562:	ea41 010c 	orr.w	r1, r1, ip
 8000566:	e78f      	b.n	8000488 <__aeabi_fmul+0x18>
 8000568:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800056c:	ea92 0f0c 	teq	r2, ip
 8000570:	bf18      	it	ne
 8000572:	ea93 0f0c 	teqne	r3, ip
 8000576:	d00a      	beq.n	800058e <__aeabi_fmul+0x11e>
 8000578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800057c:	bf18      	it	ne
 800057e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000582:	d1d8      	bne.n	8000536 <__aeabi_fmul+0xc6>
 8000584:	ea80 0001 	eor.w	r0, r0, r1
 8000588:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800058c:	4770      	bx	lr
 800058e:	f090 0f00 	teq	r0, #0
 8000592:	bf17      	itett	ne
 8000594:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000598:	4608      	moveq	r0, r1
 800059a:	f091 0f00 	teqne	r1, #0
 800059e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005a2:	d014      	beq.n	80005ce <__aeabi_fmul+0x15e>
 80005a4:	ea92 0f0c 	teq	r2, ip
 80005a8:	d101      	bne.n	80005ae <__aeabi_fmul+0x13e>
 80005aa:	0242      	lsls	r2, r0, #9
 80005ac:	d10f      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005ae:	ea93 0f0c 	teq	r3, ip
 80005b2:	d103      	bne.n	80005bc <__aeabi_fmul+0x14c>
 80005b4:	024b      	lsls	r3, r1, #9
 80005b6:	bf18      	it	ne
 80005b8:	4608      	movne	r0, r1
 80005ba:	d108      	bne.n	80005ce <__aeabi_fmul+0x15e>
 80005bc:	ea80 0001 	eor.w	r0, r0, r1
 80005c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005cc:	4770      	bx	lr
 80005ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005d6:	4770      	bx	lr

080005d8 <__aeabi_fdiv>:
 80005d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005e0:	bf1e      	ittt	ne
 80005e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005e6:	ea92 0f0c 	teqne	r2, ip
 80005ea:	ea93 0f0c 	teqne	r3, ip
 80005ee:	d069      	beq.n	80006c4 <__aeabi_fdiv+0xec>
 80005f0:	eba2 0203 	sub.w	r2, r2, r3
 80005f4:	ea80 0c01 	eor.w	ip, r0, r1
 80005f8:	0249      	lsls	r1, r1, #9
 80005fa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005fe:	d037      	beq.n	8000670 <__aeabi_fdiv+0x98>
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000608:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800060c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000610:	428b      	cmp	r3, r1
 8000612:	bf38      	it	cc
 8000614:	005b      	lslcc	r3, r3, #1
 8000616:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800061a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800061e:	428b      	cmp	r3, r1
 8000620:	bf24      	itt	cs
 8000622:	1a5b      	subcs	r3, r3, r1
 8000624:	ea40 000c 	orrcs.w	r0, r0, ip
 8000628:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800062c:	bf24      	itt	cs
 800062e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000632:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000636:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800063a:	bf24      	itt	cs
 800063c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000640:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000644:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000648:	bf24      	itt	cs
 800064a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800064e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	bf18      	it	ne
 8000656:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800065a:	d1e0      	bne.n	800061e <__aeabi_fdiv+0x46>
 800065c:	2afd      	cmp	r2, #253	; 0xfd
 800065e:	f63f af50 	bhi.w	8000502 <__aeabi_fmul+0x92>
 8000662:	428b      	cmp	r3, r1
 8000664:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000668:	bf08      	it	eq
 800066a:	f020 0001 	biceq.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000674:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000678:	327f      	adds	r2, #127	; 0x7f
 800067a:	bfc2      	ittt	gt
 800067c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000680:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000684:	4770      	bxgt	lr
 8000686:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	3a01      	subs	r2, #1
 8000690:	e737      	b.n	8000502 <__aeabi_fmul+0x92>
 8000692:	f092 0f00 	teq	r2, #0
 8000696:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800069a:	bf02      	ittt	eq
 800069c:	0040      	lsleq	r0, r0, #1
 800069e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006a2:	3a01      	subeq	r2, #1
 80006a4:	d0f9      	beq.n	800069a <__aeabi_fdiv+0xc2>
 80006a6:	ea40 000c 	orr.w	r0, r0, ip
 80006aa:	f093 0f00 	teq	r3, #0
 80006ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006b2:	bf02      	ittt	eq
 80006b4:	0049      	lsleq	r1, r1, #1
 80006b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006ba:	3b01      	subeq	r3, #1
 80006bc:	d0f9      	beq.n	80006b2 <__aeabi_fdiv+0xda>
 80006be:	ea41 010c 	orr.w	r1, r1, ip
 80006c2:	e795      	b.n	80005f0 <__aeabi_fdiv+0x18>
 80006c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006c8:	ea92 0f0c 	teq	r2, ip
 80006cc:	d108      	bne.n	80006e0 <__aeabi_fdiv+0x108>
 80006ce:	0242      	lsls	r2, r0, #9
 80006d0:	f47f af7d 	bne.w	80005ce <__aeabi_fmul+0x15e>
 80006d4:	ea93 0f0c 	teq	r3, ip
 80006d8:	f47f af70 	bne.w	80005bc <__aeabi_fmul+0x14c>
 80006dc:	4608      	mov	r0, r1
 80006de:	e776      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006e0:	ea93 0f0c 	teq	r3, ip
 80006e4:	d104      	bne.n	80006f0 <__aeabi_fdiv+0x118>
 80006e6:	024b      	lsls	r3, r1, #9
 80006e8:	f43f af4c 	beq.w	8000584 <__aeabi_fmul+0x114>
 80006ec:	4608      	mov	r0, r1
 80006ee:	e76e      	b.n	80005ce <__aeabi_fmul+0x15e>
 80006f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006f4:	bf18      	it	ne
 80006f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006fa:	d1ca      	bne.n	8000692 <__aeabi_fdiv+0xba>
 80006fc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000700:	f47f af5c 	bne.w	80005bc <__aeabi_fmul+0x14c>
 8000704:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000708:	f47f af3c 	bne.w	8000584 <__aeabi_fmul+0x114>
 800070c:	e75f      	b.n	80005ce <__aeabi_fmul+0x15e>
 800070e:	bf00      	nop

08000710 <__aeabi_f2iz>:
 8000710:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000718:	d30f      	bcc.n	800073a <__aeabi_f2iz+0x2a>
 800071a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800071e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000722:	d90d      	bls.n	8000740 <__aeabi_f2iz+0x30>
 8000724:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800072c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000730:	fa23 f002 	lsr.w	r0, r3, r2
 8000734:	bf18      	it	ne
 8000736:	4240      	negne	r0, r0
 8000738:	4770      	bx	lr
 800073a:	f04f 0000 	mov.w	r0, #0
 800073e:	4770      	bx	lr
 8000740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000744:	d101      	bne.n	800074a <__aeabi_f2iz+0x3a>
 8000746:	0242      	lsls	r2, r0, #9
 8000748:	d105      	bne.n	8000756 <__aeabi_f2iz+0x46>
 800074a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800074e:	bf08      	it	eq
 8000750:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <__aeabi_ldivmod>:
 800075c:	b97b      	cbnz	r3, 800077e <__aeabi_ldivmod+0x22>
 800075e:	b972      	cbnz	r2, 800077e <__aeabi_ldivmod+0x22>
 8000760:	2900      	cmp	r1, #0
 8000762:	bfbe      	ittt	lt
 8000764:	2000      	movlt	r0, #0
 8000766:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800076a:	e006      	blt.n	800077a <__aeabi_ldivmod+0x1e>
 800076c:	bf08      	it	eq
 800076e:	2800      	cmpeq	r0, #0
 8000770:	bf1c      	itt	ne
 8000772:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000776:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800077a:	f000 b9b9 	b.w	8000af0 <__aeabi_idiv0>
 800077e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000782:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000786:	2900      	cmp	r1, #0
 8000788:	db09      	blt.n	800079e <__aeabi_ldivmod+0x42>
 800078a:	2b00      	cmp	r3, #0
 800078c:	db1a      	blt.n	80007c4 <__aeabi_ldivmod+0x68>
 800078e:	f000 f84d 	bl	800082c <__udivmoddi4>
 8000792:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079a:	b004      	add	sp, #16
 800079c:	4770      	bx	lr
 800079e:	4240      	negs	r0, r0
 80007a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db1b      	blt.n	80007e0 <__aeabi_ldivmod+0x84>
 80007a8:	f000 f840 	bl	800082c <__udivmoddi4>
 80007ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b4:	b004      	add	sp, #16
 80007b6:	4240      	negs	r0, r0
 80007b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007bc:	4252      	negs	r2, r2
 80007be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c2:	4770      	bx	lr
 80007c4:	4252      	negs	r2, r2
 80007c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007ca:	f000 f82f 	bl	800082c <__udivmoddi4>
 80007ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d6:	b004      	add	sp, #16
 80007d8:	4240      	negs	r0, r0
 80007da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007de:	4770      	bx	lr
 80007e0:	4252      	negs	r2, r2
 80007e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e6:	f000 f821 	bl	800082c <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4252      	negs	r2, r2
 80007f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007fa:	4770      	bx	lr

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 b96e 	b.w	8000af0 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	468e      	mov	lr, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8083 	bne.w	8000944 <__udivmoddi4+0x118>
 800083e:	428a      	cmp	r2, r1
 8000840:	4617      	mov	r7, r2
 8000842:	d947      	bls.n	80008d4 <__udivmoddi4+0xa8>
 8000844:	fab2 f382 	clz	r3, r2
 8000848:	b14b      	cbz	r3, 800085e <__udivmoddi4+0x32>
 800084a:	f1c3 0120 	rsb	r1, r3, #32
 800084e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000852:	fa20 f101 	lsr.w	r1, r0, r1
 8000856:	409f      	lsls	r7, r3
 8000858:	ea41 0e0e 	orr.w	lr, r1, lr
 800085c:	409c      	lsls	r4, r3
 800085e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000862:	fbbe fcf8 	udiv	ip, lr, r8
 8000866:	fa1f f987 	uxth.w	r9, r7
 800086a:	fb08 e21c 	mls	r2, r8, ip, lr
 800086e:	fb0c f009 	mul.w	r0, ip, r9
 8000872:	0c21      	lsrs	r1, r4, #16
 8000874:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000878:	4290      	cmp	r0, r2
 800087a:	d90a      	bls.n	8000892 <__udivmoddi4+0x66>
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8000882:	f080 8118 	bcs.w	8000ab6 <__udivmoddi4+0x28a>
 8000886:	4290      	cmp	r0, r2
 8000888:	f240 8115 	bls.w	8000ab6 <__udivmoddi4+0x28a>
 800088c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000890:	443a      	add	r2, r7
 8000892:	1a12      	subs	r2, r2, r0
 8000894:	fbb2 f0f8 	udiv	r0, r2, r8
 8000898:	fb08 2210 	mls	r2, r8, r0, r2
 800089c:	fb00 f109 	mul.w	r1, r0, r9
 80008a0:	b2a4      	uxth	r4, r4
 80008a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008a6:	42a1      	cmp	r1, r4
 80008a8:	d909      	bls.n	80008be <__udivmoddi4+0x92>
 80008aa:	193c      	adds	r4, r7, r4
 80008ac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008b0:	f080 8103 	bcs.w	8000aba <__udivmoddi4+0x28e>
 80008b4:	42a1      	cmp	r1, r4
 80008b6:	f240 8100 	bls.w	8000aba <__udivmoddi4+0x28e>
 80008ba:	3802      	subs	r0, #2
 80008bc:	443c      	add	r4, r7
 80008be:	1a64      	subs	r4, r4, r1
 80008c0:	2100      	movs	r1, #0
 80008c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008c6:	b11e      	cbz	r6, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	2200      	movs	r2, #0
 80008ca:	40dc      	lsrs	r4, r3
 80008cc:	e9c6 4200 	strd	r4, r2, [r6]
 80008d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d4:	b902      	cbnz	r2, 80008d8 <__udivmoddi4+0xac>
 80008d6:	deff      	udf	#255	; 0xff
 80008d8:	fab2 f382 	clz	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d14f      	bne.n	8000980 <__udivmoddi4+0x154>
 80008e0:	1a8d      	subs	r5, r1, r2
 80008e2:	2101      	movs	r1, #1
 80008e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80008e8:	fa1f f882 	uxth.w	r8, r2
 80008ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80008f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80008f4:	fb08 f00c 	mul.w	r0, r8, ip
 80008f8:	0c22      	lsrs	r2, r4, #16
 80008fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80008fe:	42a8      	cmp	r0, r5
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0xe6>
 8000902:	197d      	adds	r5, r7, r5
 8000904:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 8000908:	d202      	bcs.n	8000910 <__udivmoddi4+0xe4>
 800090a:	42a8      	cmp	r0, r5
 800090c:	f200 80e9 	bhi.w	8000ae2 <__udivmoddi4+0x2b6>
 8000910:	4694      	mov	ip, r2
 8000912:	1a2d      	subs	r5, r5, r0
 8000914:	fbb5 f0fe 	udiv	r0, r5, lr
 8000918:	fb0e 5510 	mls	r5, lr, r0, r5
 800091c:	fb08 f800 	mul.w	r8, r8, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000926:	45a0      	cmp	r8, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x10e>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x10c>
 8000932:	45a0      	cmp	r8, r4
 8000934:	f200 80d9 	bhi.w	8000aea <__udivmoddi4+0x2be>
 8000938:	4610      	mov	r0, r2
 800093a:	eba4 0408 	sub.w	r4, r4, r8
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	e7c0      	b.n	80008c6 <__udivmoddi4+0x9a>
 8000944:	428b      	cmp	r3, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x12e>
 8000948:	2e00      	cmp	r6, #0
 800094a:	f000 80b1 	beq.w	8000ab0 <__udivmoddi4+0x284>
 800094e:	2100      	movs	r1, #0
 8000950:	e9c6 0500 	strd	r0, r5, [r6]
 8000954:	4608      	mov	r0, r1
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	fab3 f183 	clz	r1, r3
 800095e:	2900      	cmp	r1, #0
 8000960:	d14b      	bne.n	80009fa <__udivmoddi4+0x1ce>
 8000962:	42ab      	cmp	r3, r5
 8000964:	d302      	bcc.n	800096c <__udivmoddi4+0x140>
 8000966:	4282      	cmp	r2, r0
 8000968:	f200 80b9 	bhi.w	8000ade <__udivmoddi4+0x2b2>
 800096c:	1a84      	subs	r4, r0, r2
 800096e:	eb65 0303 	sbc.w	r3, r5, r3
 8000972:	2001      	movs	r0, #1
 8000974:	469e      	mov	lr, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0aa      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800097a:	e9c6 4e00 	strd	r4, lr, [r6]
 800097e:	e7a7      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000980:	409f      	lsls	r7, r3
 8000982:	f1c3 0220 	rsb	r2, r3, #32
 8000986:	40d1      	lsrs	r1, r2
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fa1f f887 	uxth.w	r8, r7
 8000994:	fb0e 1110 	mls	r1, lr, r0, r1
 8000998:	fa24 f202 	lsr.w	r2, r4, r2
 800099c:	409d      	lsls	r5, r3
 800099e:	fb00 fc08 	mul.w	ip, r0, r8
 80009a2:	432a      	orrs	r2, r5
 80009a4:	0c15      	lsrs	r5, r2, #16
 80009a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80009aa:	45ac      	cmp	ip, r5
 80009ac:	fa04 f403 	lsl.w	r4, r4, r3
 80009b0:	d909      	bls.n	80009c6 <__udivmoddi4+0x19a>
 80009b2:	197d      	adds	r5, r7, r5
 80009b4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009b8:	f080 808f 	bcs.w	8000ada <__udivmoddi4+0x2ae>
 80009bc:	45ac      	cmp	ip, r5
 80009be:	f240 808c 	bls.w	8000ada <__udivmoddi4+0x2ae>
 80009c2:	3802      	subs	r0, #2
 80009c4:	443d      	add	r5, r7
 80009c6:	eba5 050c 	sub.w	r5, r5, ip
 80009ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80009ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80009d2:	fb01 f908 	mul.w	r9, r1, r8
 80009d6:	b295      	uxth	r5, r2
 80009d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80009dc:	45a9      	cmp	r9, r5
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x1c4>
 80009e0:	197d      	adds	r5, r7, r5
 80009e2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80009e6:	d274      	bcs.n	8000ad2 <__udivmoddi4+0x2a6>
 80009e8:	45a9      	cmp	r9, r5
 80009ea:	d972      	bls.n	8000ad2 <__udivmoddi4+0x2a6>
 80009ec:	3902      	subs	r1, #2
 80009ee:	443d      	add	r5, r7
 80009f0:	eba5 0509 	sub.w	r5, r5, r9
 80009f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009f8:	e778      	b.n	80008ec <__udivmoddi4+0xc0>
 80009fa:	f1c1 0720 	rsb	r7, r1, #32
 80009fe:	408b      	lsls	r3, r1
 8000a00:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a04:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a08:	fa25 f407 	lsr.w	r4, r5, r7
 8000a0c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a10:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a14:	fa1f f88c 	uxth.w	r8, ip
 8000a18:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a1c:	fa20 f307 	lsr.w	r3, r0, r7
 8000a20:	fb09 fa08 	mul.w	sl, r9, r8
 8000a24:	408d      	lsls	r5, r1
 8000a26:	431d      	orrs	r5, r3
 8000a28:	0c2b      	lsrs	r3, r5, #16
 8000a2a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a2e:	45a2      	cmp	sl, r4
 8000a30:	fa02 f201 	lsl.w	r2, r2, r1
 8000a34:	fa00 f301 	lsl.w	r3, r0, r1
 8000a38:	d909      	bls.n	8000a4e <__udivmoddi4+0x222>
 8000a3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a42:	d248      	bcs.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a44:	45a2      	cmp	sl, r4
 8000a46:	d946      	bls.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a48:	f1a9 0902 	sub.w	r9, r9, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	eba4 040a 	sub.w	r4, r4, sl
 8000a52:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a56:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a5a:	fb00 fa08 	mul.w	sl, r0, r8
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	45a2      	cmp	sl, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x24e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000a70:	d22d      	bcs.n	8000ace <__udivmoddi4+0x2a2>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	d92b      	bls.n	8000ace <__udivmoddi4+0x2a2>
 8000a76:	3802      	subs	r0, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a82:	eba4 040a 	sub.w	r4, r4, sl
 8000a86:	454c      	cmp	r4, r9
 8000a88:	46c6      	mov	lr, r8
 8000a8a:	464d      	mov	r5, r9
 8000a8c:	d319      	bcc.n	8000ac2 <__udivmoddi4+0x296>
 8000a8e:	d016      	beq.n	8000abe <__udivmoddi4+0x292>
 8000a90:	b15e      	cbz	r6, 8000aaa <__udivmoddi4+0x27e>
 8000a92:	ebb3 020e 	subs.w	r2, r3, lr
 8000a96:	eb64 0405 	sbc.w	r4, r4, r5
 8000a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c6 7400 	strd	r7, r4, [r6]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e70c      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	e6eb      	b.n	8000892 <__udivmoddi4+0x66>
 8000aba:	4610      	mov	r0, r2
 8000abc:	e6ff      	b.n	80008be <__udivmoddi4+0x92>
 8000abe:	4543      	cmp	r3, r8
 8000ac0:	d2e6      	bcs.n	8000a90 <__udivmoddi4+0x264>
 8000ac2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ac6:	eb69 050c 	sbc.w	r5, r9, ip
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7e0      	b.n	8000a90 <__udivmoddi4+0x264>
 8000ace:	4628      	mov	r0, r5
 8000ad0:	e7d3      	b.n	8000a7a <__udivmoddi4+0x24e>
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	e78c      	b.n	80009f0 <__udivmoddi4+0x1c4>
 8000ad6:	4681      	mov	r9, r0
 8000ad8:	e7b9      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e773      	b.n	80009c6 <__udivmoddi4+0x19a>
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e749      	b.n	8000976 <__udivmoddi4+0x14a>
 8000ae2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae6:	443d      	add	r5, r7
 8000ae8:	e713      	b.n	8000912 <__udivmoddi4+0xe6>
 8000aea:	3802      	subs	r0, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	e724      	b.n	800093a <__udivmoddi4+0x10e>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_ADC1_Init+0x5c>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_ADC1_Init+0x58>)
 8000b34:	f002 fbec 	bl	8003310 <HAL_ADC_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b3e:	f001 ffc9 	bl	8002ad4 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20006864 	.word	0x20006864
 8000b50:	40012400 	.word	0x40012400

08000b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_ADC_MspInit+0x98>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d137      	bne.n	8000be4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_ADC_MspInit+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bbc:	23c0      	movs	r3, #192	; 0xc0
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <HAL_ADC_MspInit+0xa0>)
 8000bcc:	f004 fbb0 	bl	8005330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <HAL_ADC_MspInit+0xa4>)
 8000be0:	f004 fba6 	bl	8005330 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be4:	bf00      	nop
 8000be6:	3728      	adds	r7, #40	; 0x28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40012400 	.word	0x40012400
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010800 	.word	0x40010800
 8000bf8:	40010c00 	.word	0x40010c00

08000bfc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <MX_CAN_Init+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c1a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000c1e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_CAN_Init+0x64>)
 8000c4c:	f002 ffc9 	bl	8003be2 <HAL_CAN_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000c56:	f001 ff3d 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20006894 	.word	0x20006894
 8000c64:	40006400 	.word	0x40006400

08000c68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_CAN_MspInit+0x9c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d139      	bne.n	8000cfc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c8a:	69db      	ldr	r3, [r3, #28]
 8000c8c:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c92:	61d3      	str	r3, [r2, #28]
 8000c94:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_CAN_MspInit+0xa0>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <HAL_CAN_MspInit+0xa4>)
 8000cce:	f004 fb2f 	bl	8005330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_CAN_MspInit+0xa4>)
 8000ce8:	f004 fb22 	bl	8005330 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f003 fd8c 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000cf6:	2014      	movs	r0, #20
 8000cf8:	f003 fda5 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40006400 	.word	0x40006400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800

08000d10 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000d1c:	f007 fe0c 	bl	8008938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d20:	4b58      	ldr	r3, [pc, #352]	; (8000e84 <pvPortMallocMicroROS+0x174>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000d28:	f000 f98a 	bl	8001040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d2c:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <pvPortMallocMicroROS+0x178>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 808e 	bne.w	8000e56 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d01d      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000d40:	2208      	movs	r2, #8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d014      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	3308      	adds	r3, #8
 8000d5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00a      	beq.n	8000d7c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d6a:	f383 8811 	msr	BASEPRI, r3
 8000d6e:	f3bf 8f6f 	isb	sy
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000d78:	bf00      	nop
 8000d7a:	e7fe      	b.n	8000d7a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d069      	beq.n	8000e56 <pvPortMallocMicroROS+0x146>
 8000d82:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d864      	bhi.n	8000e56 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d8c:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <pvPortMallocMicroROS+0x180>)
 8000d8e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000d90:	4b3f      	ldr	r3, [pc, #252]	; (8000e90 <pvPortMallocMicroROS+0x180>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d96:	e004      	b.n	8000da2 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d903      	bls.n	8000db4 <pvPortMallocMicroROS+0xa4>
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f1      	bne.n	8000d98 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <pvPortMallocMicroROS+0x174>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d04b      	beq.n	8000e56 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	4413      	add	r3, r2
 8000dc6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	2308      	movs	r3, #8
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d91f      	bls.n	8000e20 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00a      	beq.n	8000e08 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df6:	f383 8811 	msr	BASEPRI, r3
 8000dfa:	f3bf 8f6f 	isb	sy
 8000dfe:	f3bf 8f4f 	dsb	sy
 8000e02:	613b      	str	r3, [r7, #16]
}
 8000e04:	bf00      	nop
 8000e06:	e7fe      	b.n	8000e06 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	1ad2      	subs	r2, r2, r3
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000e1a:	69b8      	ldr	r0, [r7, #24]
 8000e1c:	f000 f972 	bl	8001104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <pvPortMallocMicroROS+0x184>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d203      	bcs.n	8000e42 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <pvPortMallocMicroROS+0x17c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <pvPortMallocMicroROS+0x184>)
 8000e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <pvPortMallocMicroROS+0x178>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e56:	f007 fd7d 	bl	8008954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00a      	beq.n	8000e7a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy
 8000e70:	f3bf 8f4f 	dsb	sy
 8000e74:	60fb      	str	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	e7fe      	b.n	8000e78 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200029ec 	.word	0x200029ec
 8000e88:	200029f8 	.word	0x200029f8
 8000e8c:	200029f0 	.word	0x200029f0
 8000e90:	200029e4 	.word	0x200029e4
 8000e94:	200029f4 	.word	0x200029f4

08000e98 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d048      	beq.n	8000f3c <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	425b      	negs	r3, r3
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <vPortFreeMicroROS+0x44>
	__asm volatile
 8000ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eca:	f383 8811 	msr	BASEPRI, r3
 8000ece:	f3bf 8f6f 	isb	sy
 8000ed2:	f3bf 8f4f 	dsb	sy
 8000ed6:	60fb      	str	r3, [r7, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	e7fe      	b.n	8000eda <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00a      	beq.n	8000efa <vPortFreeMicroROS+0x62>
	__asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	60bb      	str	r3, [r7, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	e7fe      	b.n	8000ef8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d019      	beq.n	8000f3c <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d115      	bne.n	8000f3c <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <vPortFreeMicroROS+0xac>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000f20:	f007 fd0a 	bl	8008938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <vPortFreeMicroROS+0xb0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <vPortFreeMicroROS+0xb0>)
 8000f30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f32:	6938      	ldr	r0, [r7, #16]
 8000f34:	f000 f8e6 	bl	8001104 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000f38:	f007 fd0c 	bl	8008954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200029f8 	.word	0x200029f8
 8000f48:	200029f0 	.word	0x200029f0

08000f4c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f58:	2308      	movs	r3, #8
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <getBlockSize+0x34>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

	return count;
 8000f74:	68fb      	ldr	r3, [r7, #12]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	200029f8 	.word	0x200029f8

08000f84 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000f8e:	f007 fcd3 	bl	8008938 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f7ff febc 	bl	8000d10 <pvPortMallocMicroROS>
 8000f98:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <pvPortReallocMicroROS+0x70>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	617b      	str	r3, [r7, #20]

  	while(count--)
 8000fc2:	e007      	b.n	8000fd4 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	1c53      	adds	r3, r2, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1c59      	adds	r1, r3, #1
 8000fce:	61b9      	str	r1, [r7, #24]
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	617a      	str	r2, [r7, #20]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f2      	bne.n	8000fc4 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ff5a 	bl	8000e98 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8000fe4:	f007 fcb6 	bl	8008954 <xTaskResumeAll>

	return newmem;
 8000fe8:	693b      	ldr	r3, [r7, #16]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200029f8 	.word	0x200029f8

08000ff8 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001002:	f007 fc99 	bl	8008938 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fe7d 	bl	8000d10 <pvPortMallocMicroROS>
 8001016:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	613b      	str	r3, [r7, #16]

  	while(count--)
 800101c:	e004      	b.n	8001028 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	613a      	str	r2, [r7, #16]
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1e5a      	subs	r2, r3, #1
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f5      	bne.n	800101e <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001032:	f007 fc8f 	bl	8008954 <xTaskResumeAll>
  	return mem;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001046:	f242 7310 	movw	r3, #10000	; 0x2710
 800104a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <prvHeapInit+0xac>)
 800104e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00c      	beq.n	8001074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3307      	adds	r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f023 0307 	bic.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <prvHeapInit+0xac>)
 8001070:	4413      	add	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <prvHeapInit+0xb0>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <prvHeapInit+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800108c:	2208      	movs	r2, #8
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	1a9b      	subs	r3, r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f023 0307 	bic.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <prvHeapInit+0xb4>)
 80010a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <prvHeapInit+0xb4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <prvHeapInit+0xb4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <prvHeapInit+0xb4>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <prvHeapInit+0xb8>)
 80010ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <prvHeapInit+0xbc>)
 80010d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <prvHeapInit+0xc0>)
 80010da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200002d4 	.word	0x200002d4
 80010f0:	200029e4 	.word	0x200029e4
 80010f4:	200029ec 	.word	0x200029ec
 80010f8:	200029f4 	.word	0x200029f4
 80010fc:	200029f0 	.word	0x200029f0
 8001100:	200029f8 	.word	0x200029f8

08001104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <prvInsertBlockIntoFreeList+0xa8>)
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	e002      	b.n	8001118 <prvInsertBlockIntoFreeList+0x14>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d8f7      	bhi.n	8001112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	4413      	add	r3, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d108      	bne.n	8001146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	441a      	add	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	441a      	add	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d118      	bne.n	800118c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <prvInsertBlockIntoFreeList+0xac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d00d      	beq.n	8001182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	441a      	add	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	e008      	b.n	8001194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <prvInsertBlockIntoFreeList+0xac>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e003      	b.n	8001194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d002      	beq.n	80011a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200029e4 	.word	0x200029e4
 80011b0:	200029ec 	.word	0x200029ec

080011b4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011ba:	463b      	mov	r3, r7
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DAC_Init+0x60>)
 80011c4:	4a14      	ldr	r2, [pc, #80]	; (8001218 <MX_DAC_Init+0x64>)
 80011c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c8:	4812      	ldr	r0, [pc, #72]	; (8001214 <MX_DAC_Init+0x60>)
 80011ca:	f003 fb4a 	bl	8004862 <HAL_DAC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d4:	f001 fc7e 	bl	8002ad4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <MX_DAC_Init+0x60>)
 80011e8:	f003 fbd2 	bl	8004990 <HAL_DAC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011f2:	f001 fc6f 	bl	8002ad4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	2210      	movs	r2, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DAC_Init+0x60>)
 80011fe:	f003 fbc7 	bl	8004990 <HAL_DAC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001208:	f001 fc64 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200068bc 	.word	0x200068bc
 8001218:	40007400 	.word	0x40007400

0800121c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_DAC_MspInit+0x6c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d121      	bne.n	8001280 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <HAL_DAC_MspInit+0x70>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_DAC_MspInit+0x70>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a0c      	ldr	r2, [pc, #48]	; (800128c <HAL_DAC_MspInit+0x70>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_DAC_MspInit+0x70>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800126c:	2330      	movs	r3, #48	; 0x30
 800126e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <HAL_DAC_MspInit+0x74>)
 800127c:	f004 f858 	bl	8005330 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40007400 	.word	0x40007400
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_DMA_Init+0x48>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_DMA_Init+0x48>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6153      	str	r3, [r2, #20]
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_DMA_Init+0x48>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2010      	movs	r0, #16
 80012b8:	f003 faa9 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012bc:	2010      	movs	r0, #16
 80012be:	f003 fac2 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2105      	movs	r1, #5
 80012c6:	2011      	movs	r0, #17
 80012c8:	f003 faa1 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012cc:	2011      	movs	r0, #17
 80012ce:	f003 faba 	bl	8004846 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80012ee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <cubemx_transport_open+0x28>)
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f005 faee 	bl	80068d8 <HAL_UART_Receive_DMA>
    return true;
 80012fc:	2301      	movs	r3, #1
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200029fc 	.word	0x200029fc

0800130c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800131a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f005 fb0b 	bl	8006938 <HAL_UART_DMAStop>
    return true;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001340:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d11c      	bne.n	8001388 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f005 fa52 	bl	8006800 <HAL_UART_Transmit_DMA>
 800135c:	4603      	mov	r3, r0
 800135e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001360:	e002      	b.n	8001368 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f006 f99c 	bl	80076a0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001368:	7cfb      	ldrb	r3, [r7, #19]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d105      	bne.n	800137a <cubemx_transport_write+0x4e>
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b20      	cmp	r3, #32
 8001378:	d1f3      	bne.n	8001362 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <cubemx_transport_write+0x58>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	e002      	b.n	800138a <cubemx_transport_write+0x5e>
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001388:	2300      	movs	r3, #0
    }
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013a8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ae:	b672      	cpsid	i
}
 80013b0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <cubemx_transport_read+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c2:	b662      	cpsie	i
}
 80013c4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f006 f967 	bl	80076a0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <cubemx_transport_read+0xa0>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <cubemx_transport_read+0x9c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d103      	bne.n	80013e6 <cubemx_transport_read+0x52>
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	dbe3      	blt.n	80013ae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80013ea:	e011      	b.n	8001410 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <cubemx_transport_read+0xa0>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	440b      	add	r3, r1
 80013f6:	4910      	ldr	r1, [pc, #64]	; (8001438 <cubemx_transport_read+0xa4>)
 80013f8:	5c8a      	ldrb	r2, [r1, r2]
 80013fa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <cubemx_transport_read+0xa0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <cubemx_transport_read+0xa0>)
 8001408:	6013      	str	r3, [r2, #0]
        wrote++;
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <cubemx_transport_read+0xa0>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <cubemx_transport_read+0x9c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d003      	beq.n	8001424 <cubemx_transport_read+0x90>
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e3      	bcc.n	80013ec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001424:	69bb      	ldr	r3, [r7, #24]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20003200 	.word	0x20003200
 8001434:	200031fc 	.word	0x200031fc
 8001438:	200029fc 	.word	0x200029fc

0800143c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	  txHeader.DLC = 4;
 8001440:	4b35      	ldr	r3, [pc, #212]	; (8001518 <MX_FREERTOS_Init+0xdc>)
 8001442:	2204      	movs	r2, #4
 8001444:	611a      	str	r2, [r3, #16]
	  txHeader.IDE = CAN_ID_STD; //CAN_ID_EXT
 8001446:	4b34      	ldr	r3, [pc, #208]	; (8001518 <MX_FREERTOS_Init+0xdc>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
	  txHeader.RTR = CAN_RTR_DATA;
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <MX_FREERTOS_Init+0xdc>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
	  txHeader.StdId = 0x2BC;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <MX_FREERTOS_Init+0xdc>)
 8001454:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001458:	601a      	str	r2, [r3, #0]

	  canfil.FilterActivation = CAN_FILTER_ENABLE;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <MX_FREERTOS_Init+0xe0>)
 800145c:	2201      	movs	r2, #1
 800145e:	621a      	str	r2, [r3, #32]
	  canfil.FilterBank = 10;  // which filter bank to use from the assigned ones
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001462:	220a      	movs	r2, #10
 8001464:	615a      	str	r2, [r3, #20]
	  canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
	  canfil.FilterIdHigh =0xFF;
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <MX_FREERTOS_Init+0xe0>)
 800146e:	22ff      	movs	r2, #255	; 0xff
 8001470:	601a      	str	r2, [r3, #0]
	  canfil.FilterIdLow = 0;
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
	  canfil.FilterMaskIdHigh = 0xFF;
 8001478:	4b28      	ldr	r3, [pc, #160]	; (800151c <MX_FREERTOS_Init+0xe0>)
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	609a      	str	r2, [r3, #8]
	  canfil.FilterMaskIdLow = 0x0000;
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
	  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
	  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <MX_FREERTOS_Init+0xe0>)
 800148c:	2201      	movs	r2, #1
 800148e:	61da      	str	r2, [r3, #28]
	  canfil.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
	 HAL_CAN_ConfigFilter(&hcan,&canfil);
 8001496:	4921      	ldr	r1, [pc, #132]	; (800151c <MX_FREERTOS_Init+0xe0>)
 8001498:	4821      	ldr	r0, [pc, #132]	; (8001520 <MX_FREERTOS_Init+0xe4>)
 800149a:	f002 fc9d 	bl	8003dd8 <HAL_CAN_ConfigFilter>

	 HAL_CAN_Start(&hcan);
 800149e:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_FREERTOS_Init+0xe4>)
 80014a0:	f002 fd63 	bl	8003f6a <HAL_CAN_Start>

	 if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80014a4:	2102      	movs	r1, #2
 80014a6:	481e      	ldr	r0, [pc, #120]	; (8001520 <MX_FREERTOS_Init+0xe4>)
 80014a8:	f002 feb4 	bl	8004214 <HAL_CAN_ActivateNotification>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_FREERTOS_Init+0x7a>
	 {
		  Error_Handler();
 80014b2:	f001 fb0f 	bl	8002ad4 <Error_Handler>
	 }

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of analog_mutex */
  analog_mutexHandle = osMutexNew(&analog_mutex_attributes);
 80014b6:	481b      	ldr	r0, [pc, #108]	; (8001524 <MX_FREERTOS_Init+0xe8>)
 80014b8:	f006 f920 	bl	80076fc <osMutexNew>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <MX_FREERTOS_Init+0xec>)
 80014c0:	6013      	str	r3, [r2, #0]
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80014c2:	2100      	movs	r1, #0
 80014c4:	4819      	ldr	r0, [pc, #100]	; (800152c <MX_FREERTOS_Init+0xf0>)
 80014c6:	f003 f9ee 	bl	80048a6 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80014ca:	2110      	movs	r1, #16
 80014cc:	4817      	ldr	r0, [pc, #92]	; (800152c <MX_FREERTOS_Init+0xf0>)
 80014ce:	f003 f9ea 	bl	80048a6 <HAL_DAC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_ros2 */
  task_ros2Handle = osThreadNew(task_ros2_function, NULL, &task_ros2_attributes);
 80014d2:	4a17      	ldr	r2, [pc, #92]	; (8001530 <MX_FREERTOS_Init+0xf4>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4817      	ldr	r0, [pc, #92]	; (8001534 <MX_FREERTOS_Init+0xf8>)
 80014d8:	f006 f838 	bl	800754c <osThreadNew>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <MX_FREERTOS_Init+0xfc>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* creation of digital_inputs */
  digital_inputsHandle = osThreadNew(digital_inputs_task, NULL, &digital_inputs_attributes);
 80014e2:	4a16      	ldr	r2, [pc, #88]	; (800153c <MX_FREERTOS_Init+0x100>)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4816      	ldr	r0, [pc, #88]	; (8001540 <MX_FREERTOS_Init+0x104>)
 80014e8:	f006 f830 	bl	800754c <osThreadNew>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MX_FREERTOS_Init+0x108>)
 80014f0:	6013      	str	r3, [r2, #0]

  /* creation of analog_input */
  analog_inputHandle = osThreadNew(analog_input_task, NULL, &analog_input_attributes);
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_FREERTOS_Init+0x10c>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4815      	ldr	r0, [pc, #84]	; (800154c <MX_FREERTOS_Init+0x110>)
 80014f8:	f006 f828 	bl	800754c <osThreadNew>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <MX_FREERTOS_Init+0x114>)
 8001500:	6013      	str	r3, [r2, #0]

  /* creation of auto_man_mod */
  auto_man_modHandle = osThreadNew(automatic_manual_mode_Task, NULL, &auto_man_mod_attributes);
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <MX_FREERTOS_Init+0x118>)
 8001504:	2100      	movs	r1, #0
 8001506:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_FREERTOS_Init+0x11c>)
 8001508:	f006 f820 	bl	800754c <osThreadNew>
 800150c:	4603      	mov	r3, r0
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <MX_FREERTOS_Init+0x120>)
 8001510:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200068d4 	.word	0x200068d4
 800151c:	20008250 	.word	0x20008250
 8001520:	20006894 	.word	0x20006894
 8001524:	08019d04 	.word	0x08019d04
 8001528:	20008330 	.word	0x20008330
 800152c:	200068bc 	.word	0x200068bc
 8001530:	08019c74 	.word	0x08019c74
 8001534:	08001561 	.word	0x08001561
 8001538:	200068ec 	.word	0x200068ec
 800153c:	08019c98 	.word	0x08019c98
 8001540:	08001e39 	.word	0x08001e39
 8001544:	2000690c 	.word	0x2000690c
 8001548:	08019cbc 	.word	0x08019cbc
 800154c:	08001f4d 	.word	0x08001f4d
 8001550:	20008398 	.word	0x20008398
 8001554:	08019ce0 	.word	0x08019ce0
 8001558:	08001ffd 	.word	0x08001ffd
 800155c:	20008108 	.word	0x20008108

08001560 <task_ros2_function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_ros2_function */
void task_ros2_function(void *argument)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b0d6      	sub	sp, #344	; 0x158
 8001564:	af02      	add	r7, sp, #8
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN task_ros2_function */
  /* Infinite loop */
	// micro-ROS configuration
	  rmw_uros_set_custom_transport(
 800156c:	4baf      	ldr	r3, [pc, #700]	; (800182c <task_ros2_function+0x2cc>)
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	4baf      	ldr	r3, [pc, #700]	; (8001830 <task_ros2_function+0x2d0>)
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	4baf      	ldr	r3, [pc, #700]	; (8001834 <task_ros2_function+0x2d4>)
 8001576:	4ab0      	ldr	r2, [pc, #704]	; (8001838 <task_ros2_function+0x2d8>)
 8001578:	49b0      	ldr	r1, [pc, #704]	; (800183c <task_ros2_function+0x2dc>)
 800157a:	2001      	movs	r0, #1
 800157c:	f00a f99e 	bl	800b8bc <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001580:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001584:	4618      	mov	r0, r3
 8001586:	f009 fe27 	bl	800b1d8 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800158a:	4bad      	ldr	r3, [pc, #692]	; (8001840 <task_ros2_function+0x2e0>)
 800158c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8001590:	4bac      	ldr	r3, [pc, #688]	; (8001844 <task_ros2_function+0x2e4>)
 8001592:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001596:	4bac      	ldr	r3, [pc, #688]	; (8001848 <task_ros2_function+0x2e8>)
 8001598:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800159c:	4bab      	ldr	r3, [pc, #684]	; (800184c <task_ros2_function+0x2ec>)
 800159e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80015a2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80015a6:	4618      	mov	r0, r3
 80015a8:	f009 fe24 	bl	800b1f4 <rcutils_set_default_allocator>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <task_ros2_function+0x62>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 80015b8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80015bc:	48a4      	ldr	r0, [pc, #656]	; (8001850 <task_ros2_function+0x2f0>)
 80015be:	f016 f965 	bl	801788c <iprintf>
	  rcl_allocator_t allocator;
	  rcl_node_t node;
	  rclc_executor_t executor;
	  rcl_init_options_t init_options;

	  allocator = rcl_get_default_allocator();
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f009 fe35 	bl	800b234 <rcutils_get_default_allocator>
 80015ca:	463b      	mov	r3, r7
 80015cc:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80015d0:	461d      	mov	r5, r3
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	6023      	str	r3, [r4, #0]
	  init_options = rcl_get_zero_initialized_init_options();
 80015da:	f008 fd77 	bl	800a0cc <rcl_get_zero_initialized_init_options>
 80015de:	4602      	mov	r2, r0
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	601a      	str	r2, [r3, #0]
	  rcl_init_options_init(&init_options, allocator);
 80015e6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80015ea:	466a      	mov	r2, sp
 80015ec:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80015f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015fe:	4620      	mov	r0, r4
 8001600:	f008 fd66 	bl	800a0d0 <rcl_init_options_init>

	  // create init_options
	  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001604:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001608:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800160c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	f009 fcc4 	bl	800afa4 <rclc_support_init_with_options>

	  // create node
	   rclc_node_init_default(&node, "golfinho", "acquisition_system", &support);
 800161c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001620:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8001624:	4a8b      	ldr	r2, [pc, #556]	; (8001854 <task_ros2_function+0x2f4>)
 8001626:	498c      	ldr	r1, [pc, #560]	; (8001858 <task_ros2_function+0x2f8>)
 8001628:	f009 fcfa 	bl	800b020 <rclc_node_init_default>

	  //time sync
	  if( rmw_uros_sync_session(1000) != RMW_RET_OK)
 800162c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001630:	f00b f834 	bl	800c69c <rmw_uros_sync_session>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d004      	beq.n	8001644 <task_ros2_function+0xe4>
		  printf("Error on time sync (line %d)\n", __LINE__);
 800163a:	f240 1171 	movw	r1, #369	; 0x171
 800163e:	4887      	ldr	r0, [pc, #540]	; (800185c <task_ros2_function+0x2fc>)
 8001640:	f016 f924 	bl	801788c <iprintf>

	  // ros2_gpio_input_pub
	  rclc_publisher_init_default(
 8001644:	f00b ff0e 	bl	800d464 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>
 8001648:	4602      	mov	r2, r0
 800164a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800164e:	4b84      	ldr	r3, [pc, #528]	; (8001860 <task_ros2_function+0x300>)
 8001650:	4884      	ldr	r0, [pc, #528]	; (8001864 <task_ros2_function+0x304>)
 8001652:	f009 fd21 	bl	800b098 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt8MultiArray),
			  "/golfinho/diagnostics/status_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 8001656:	f00b ff01 	bl	800d45c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 800165a:	4602      	mov	r2, r0
 800165c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001660:	4b81      	ldr	r3, [pc, #516]	; (8001868 <task_ros2_function+0x308>)
 8001662:	4882      	ldr	r0, [pc, #520]	; (800186c <task_ros2_function+0x30c>)
 8001664:	f009 fd18 	bl	800b098 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
			  "/golfinho/diagnostics/motion_info");

	  // ros2_motion_info_pub
	  rclc_publisher_init_default(
 8001668:	f00b fb64 	bl	800cd34 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800166c:	4602      	mov	r2, r0
 800166e:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001672:	4b7f      	ldr	r3, [pc, #508]	; (8001870 <task_ros2_function+0x310>)
 8001674:	487f      	ldr	r0, [pc, #508]	; (8001874 <task_ros2_function+0x314>)
 8001676:	f009 fd0f 	bl	800b098 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
			  "/golfinho/imu");

	  // ros2_gps
	  rclc_publisher_init_default(
 800167a:	f00b fb5f 	bl	800cd3c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>
 800167e:	4602      	mov	r2, r0
 8001680:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001684:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <task_ros2_function+0x318>)
 8001686:	487d      	ldr	r0, [pc, #500]	; (800187c <task_ros2_function+0x31c>)
 8001688:	f009 fd06 	bl	800b098 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, NavSatFix),
			  "/golfinho/gps");

	  // ros2_joint_steering_pub
	  rclc_publisher_init_default(
 800168c:	f00b fb54 	bl	800cd38 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8001690:	4602      	mov	r2, r0
 8001692:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001696:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <task_ros2_function+0x320>)
 8001698:	487a      	ldr	r0, [pc, #488]	; (8001884 <task_ros2_function+0x324>)
 800169a:	f009 fcfd 	bl	800b098 <rclc_publisher_init_default>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
			  "/golfinho/joint_steering");

	  //create gpio_output_sub
	  receive_commands_from_ros_sub = rcl_get_zero_initialized_subscription();
 800169e:	f008 ff8d 	bl	800a5bc <rcl_get_zero_initialized_subscription>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a78      	ldr	r2, [pc, #480]	; (8001888 <task_ros2_function+0x328>)
 80016a6:	6013      	str	r3, [r2, #0]

	  rclc_subscription_init_best_effort(
 80016a8:	f00b feda 	bl	800d460 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80016b2:	4b76      	ldr	r3, [pc, #472]	; (800188c <task_ros2_function+0x32c>)
 80016b4:	4874      	ldr	r0, [pc, #464]	; (8001888 <task_ros2_function+0x328>)
 80016b6:	f009 fd23 	bl	800b100 <rclc_subscription_init_best_effort>
			  &node,
			  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, UInt16MultiArray),
			  "/receive_commands_from_ros");


	  golfinho_check_status_msg.data.capacity = 5;
 80016ba:	4b75      	ldr	r3, [pc, #468]	; (8001890 <task_ros2_function+0x330>)
 80016bc:	2205      	movs	r2, #5
 80016be:	619a      	str	r2, [r3, #24]
	  golfinho_check_status_msg.data.size = 5;
 80016c0:	4b73      	ldr	r3, [pc, #460]	; (8001890 <task_ros2_function+0x330>)
 80016c2:	2205      	movs	r2, #5
 80016c4:	615a      	str	r2, [r3, #20]
	  golfinho_check_status_msg.data.data = (uint8_t*) pvPortMalloc(golfinho_check_status_msg.data.capacity * sizeof(uint8_t));
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <task_ros2_function+0x330>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f008 fb26 	bl	8009d1c <pvPortMalloc>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a6f      	ldr	r2, [pc, #444]	; (8001890 <task_ros2_function+0x330>)
 80016d4:	6113      	str	r3, [r2, #16]
	  golfinho_check_status_msg.layout.dim.capacity = 5;
 80016d6:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <task_ros2_function+0x330>)
 80016d8:	2205      	movs	r2, #5
 80016da:	609a      	str	r2, [r3, #8]
	  golfinho_check_status_msg.layout.dim.size = 5;
 80016dc:	4b6c      	ldr	r3, [pc, #432]	; (8001890 <task_ros2_function+0x330>)
 80016de:	2205      	movs	r2, #5
 80016e0:	605a      	str	r2, [r3, #4]
	  golfinho_check_status_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_check_status_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 80016e2:	4b6b      	ldr	r3, [pc, #428]	; (8001890 <task_ros2_function+0x330>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f008 fb14 	bl	8009d1c <pvPortMalloc>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a66      	ldr	r2, [pc, #408]	; (8001890 <task_ros2_function+0x330>)
 80016f8:	6013      	str	r3, [r2, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001700:	e031      	b.n	8001766 <task_ros2_function+0x206>
	 		golfinho_check_status_msg.layout.dim.data[i].label.capacity = 7;
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <task_ros2_function+0x330>)
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	2207      	movs	r2, #7
 8001716:	609a      	str	r2, [r3, #8]
	 		golfinho_check_status_msg.layout.dim.data[i].label.size = 7;
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <task_ros2_function+0x330>)
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	2207      	movs	r2, #7
 800172c:	605a      	str	r2, [r3, #4]
	 		golfinho_check_status_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_check_status_msg.layout.dim.data[i].label.capacity * sizeof(char));
 800172e:	4b58      	ldr	r3, [pc, #352]	; (8001890 <task_ros2_function+0x330>)
 8001730:	6819      	ldr	r1, [r3, #0]
 8001732:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	6898      	ldr	r0, [r3, #8]
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <task_ros2_function+0x330>)
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	18cc      	adds	r4, r1, r3
 8001754:	f008 fae2 	bl	8009d1c <pvPortMalloc>
 8001758:	4603      	mov	r3, r0
 800175a:	6023      	str	r3, [r4, #0]
	 	  for (size_t i =0; i< golfinho_check_status_msg.layout.dim.capacity; i++){
 800175c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001760:	3301      	adds	r3, #1
 8001762:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001766:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <task_ros2_function+0x330>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800176e:	429a      	cmp	r2, r3
 8001770:	d3c7      	bcc.n	8001702 <task_ros2_function+0x1a2>

	 	  }

	 	  strcpy(golfinho_check_status_msg.layout.dim.data[0].label.data, "reserved");
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <task_ros2_function+0x330>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4946      	ldr	r1, [pc, #280]	; (8001894 <task_ros2_function+0x334>)
 800177a:	461a      	mov	r2, r3
 800177c:	460b      	mov	r3, r1
 800177e:	cb03      	ldmia	r3!, {r0, r1}
 8001780:	6010      	str	r0, [r2, #0]
 8001782:	6051      	str	r1, [r2, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	7213      	strb	r3, [r2, #8]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[1].label.data, "status");
 8001788:	4b41      	ldr	r3, [pc, #260]	; (8001890 <task_ros2_function+0x330>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3314      	adds	r3, #20
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a41      	ldr	r2, [pc, #260]	; (8001898 <task_ros2_function+0x338>)
 8001792:	6810      	ldr	r0, [r2, #0]
 8001794:	6018      	str	r0, [r3, #0]
 8001796:	8891      	ldrh	r1, [r2, #4]
 8001798:	7992      	ldrb	r2, [r2, #6]
 800179a:	8099      	strh	r1, [r3, #4]
 800179c:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[2].label.data, "op_mod");
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <task_ros2_function+0x330>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3328      	adds	r3, #40	; 0x28
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a3d      	ldr	r2, [pc, #244]	; (800189c <task_ros2_function+0x33c>)
 80017a8:	6810      	ldr	r0, [r2, #0]
 80017aa:	6018      	str	r0, [r3, #0]
 80017ac:	8891      	ldrh	r1, [r2, #4]
 80017ae:	7992      	ldrb	r2, [r2, #6]
 80017b0:	8099      	strh	r1, [r3, #4]
 80017b2:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[3].label.data, "key_th");
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <task_ros2_function+0x330>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	333c      	adds	r3, #60	; 0x3c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a38      	ldr	r2, [pc, #224]	; (80018a0 <task_ros2_function+0x340>)
 80017be:	6810      	ldr	r0, [r2, #0]
 80017c0:	6018      	str	r0, [r3, #0]
 80017c2:	8891      	ldrh	r1, [r2, #4]
 80017c4:	7992      	ldrb	r2, [r2, #6]
 80017c6:	8099      	strh	r1, [r3, #4]
 80017c8:	719a      	strb	r2, [r3, #6]
	 	  strcpy(golfinho_check_status_msg.layout.dim.data[4].label.data, "key_br");
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <task_ros2_function+0x330>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3350      	adds	r3, #80	; 0x50
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a34      	ldr	r2, [pc, #208]	; (80018a4 <task_ros2_function+0x344>)
 80017d4:	6810      	ldr	r0, [r2, #0]
 80017d6:	6018      	str	r0, [r3, #0]
 80017d8:	8891      	ldrh	r1, [r2, #4]
 80017da:	7992      	ldrb	r2, [r2, #6]
 80017dc:	8099      	strh	r1, [r3, #4]
 80017de:	719a      	strb	r2, [r3, #6]


		 	golfinho_motion_info_gpio_output_msg.data.capacity = 6;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <task_ros2_function+0x348>)
 80017e2:	2206      	movs	r2, #6
 80017e4:	619a      	str	r2, [r3, #24]
		 	golfinho_motion_info_gpio_output_msg.data.size = 6;
 80017e6:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <task_ros2_function+0x348>)
 80017e8:	2206      	movs	r2, #6
 80017ea:	615a      	str	r2, [r3, #20]
		 	golfinho_motion_info_gpio_output_msg.data.data = (uint16_t*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.data.capacity * sizeof(uint16_t));
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <task_ros2_function+0x348>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f008 fa92 	bl	8009d1c <pvPortMalloc>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a2b      	ldr	r2, [pc, #172]	; (80018a8 <task_ros2_function+0x348>)
 80017fc:	6113      	str	r3, [r2, #16]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.capacity = 6;
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <task_ros2_function+0x348>)
 8001800:	2206      	movs	r2, #6
 8001802:	609a      	str	r2, [r3, #8]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.size = 6;
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <task_ros2_function+0x348>)
 8001806:	2206      	movs	r2, #6
 8001808:	605a      	str	r2, [r3, #4]
		 	golfinho_motion_info_gpio_output_msg.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 800180a:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <task_ros2_function+0x348>)
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f008 fa80 	bl	8009d1c <pvPortMalloc>
 800181c:	4603      	mov	r3, r0
 800181e:	4a22      	ldr	r2, [pc, #136]	; (80018a8 <task_ros2_function+0x348>)
 8001820:	6013      	str	r3, [r2, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001828:	e072      	b.n	8001910 <task_ros2_function+0x3b0>
 800182a:	bf00      	nop
 800182c:	08001395 	.word	0x08001395
 8001830:	0800132d 	.word	0x0800132d
 8001834:	0800130d 	.word	0x0800130d
 8001838:	080012e1 	.word	0x080012e1
 800183c:	20008470 	.word	0x20008470
 8001840:	08002ae1 	.word	0x08002ae1
 8001844:	08002b25 	.word	0x08002b25
 8001848:	08002b5d 	.word	0x08002b5d
 800184c:	08002bc9 	.word	0x08002bc9
 8001850:	08018e34 	.word	0x08018e34
 8001854:	08018e5c 	.word	0x08018e5c
 8001858:	08018e70 	.word	0x08018e70
 800185c:	08018e7c 	.word	0x08018e7c
 8001860:	08018e9c 	.word	0x08018e9c
 8001864:	200082e0 	.word	0x200082e0
 8001868:	08018ec0 	.word	0x08018ec0
 800186c:	20008104 	.word	0x20008104
 8001870:	08018ee4 	.word	0x08018ee4
 8001874:	200068d0 	.word	0x200068d0
 8001878:	08018ef4 	.word	0x08018ef4
 800187c:	20008334 	.word	0x20008334
 8001880:	08018f04 	.word	0x08018f04
 8001884:	20008298 	.word	0x20008298
 8001888:	200082e4 	.word	0x200082e4
 800188c:	08018f20 	.word	0x08018f20
 8001890:	200082f8 	.word	0x200082f8
 8001894:	08018f3c 	.word	0x08018f3c
 8001898:	08018f48 	.word	0x08018f48
 800189c:	08018f50 	.word	0x08018f50
 80018a0:	08018f58 	.word	0x08018f58
 80018a4:	08018f60 	.word	0x08018f60
 80018a8:	20008278 	.word	0x20008278
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity = 9;
 80018ac:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <task_ros2_function+0x488>)
 80018ae:	6819      	ldr	r1, [r3, #0]
 80018b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	2209      	movs	r2, #9
 80018c0:	609a      	str	r2, [r3, #8]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.size = 9;
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <task_ros2_function+0x488>)
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	2209      	movs	r2, #9
 80018d6:	605a      	str	r2, [r3, #4]
			 		golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.data = (char*) pvPortMalloc(golfinho_motion_info_gpio_output_msg.layout.dim.data[i].label.capacity * sizeof(char));
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <task_ros2_function+0x488>)
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	6898      	ldr	r0, [r3, #8]
 80018ec:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <task_ros2_function+0x488>)
 80018ee:	6819      	ldr	r1, [r3, #0]
 80018f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	18cc      	adds	r4, r1, r3
 80018fe:	f008 fa0d 	bl	8009d1c <pvPortMalloc>
 8001902:	4603      	mov	r3, r0
 8001904:	6023      	str	r3, [r4, #0]
			 	  for (size_t i =0; i< golfinho_motion_info_gpio_output_msg.layout.dim.capacity; i++){
 8001906:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <task_ros2_function+0x488>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001918:	429a      	cmp	r2, r3
 800191a:	d3c7      	bcc.n	80018ac <task_ros2_function+0x34c>

			 	  }

			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[0].label.data, "reserved");
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <task_ros2_function+0x488>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4932      	ldr	r1, [pc, #200]	; (80019ec <task_ros2_function+0x48c>)
 8001924:	461a      	mov	r2, r3
 8001926:	460b      	mov	r3, r1
 8001928:	cb03      	ldmia	r3!, {r0, r1}
 800192a:	6010      	str	r0, [r2, #0]
 800192c:	6051      	str	r1, [r2, #4]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[1].label.data, "steering");
 8001932:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <task_ros2_function+0x488>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3314      	adds	r3, #20
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	492d      	ldr	r1, [pc, #180]	; (80019f0 <task_ros2_function+0x490>)
 800193c:	461a      	mov	r2, r3
 800193e:	460b      	mov	r3, r1
 8001940:	cb03      	ldmia	r3!, {r0, r1}
 8001942:	6010      	str	r0, [r2, #0]
 8001944:	6051      	str	r1, [r2, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[2].label.data, "throttle");
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <task_ros2_function+0x488>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3328      	adds	r3, #40	; 0x28
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4928      	ldr	r1, [pc, #160]	; (80019f4 <task_ros2_function+0x494>)
 8001954:	461a      	mov	r2, r3
 8001956:	460b      	mov	r3, r1
 8001958:	cb03      	ldmia	r3!, {r0, r1}
 800195a:	6010      	str	r0, [r2, #0]
 800195c:	6051      	str	r1, [r2, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7213      	strb	r3, [r2, #8]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[3].label.data, "break");
 8001962:	4b21      	ldr	r3, [pc, #132]	; (80019e8 <task_ros2_function+0x488>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	333c      	adds	r3, #60	; 0x3c
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <task_ros2_function+0x498>)
 800196c:	6810      	ldr	r0, [r2, #0]
 800196e:	6018      	str	r0, [r3, #0]
 8001970:	8892      	ldrh	r2, [r2, #4]
 8001972:	809a      	strh	r2, [r3, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[4].label.data, "bat_car");
 8001974:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <task_ros2_function+0x488>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3350      	adds	r3, #80	; 0x50
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	491f      	ldr	r1, [pc, #124]	; (80019fc <task_ros2_function+0x49c>)
 800197e:	461a      	mov	r2, r3
 8001980:	460b      	mov	r3, r1
 8001982:	cb03      	ldmia	r3!, {r0, r1}
 8001984:	6010      	str	r0, [r2, #0]
 8001986:	6051      	str	r1, [r2, #4]
			 	  strcpy(golfinho_motion_info_gpio_output_msg.layout.dim.data[5].label.data, "bat_sys");
 8001988:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <task_ros2_function+0x488>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3364      	adds	r3, #100	; 0x64
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	491b      	ldr	r1, [pc, #108]	; (8001a00 <task_ros2_function+0x4a0>)
 8001992:	461a      	mov	r2, r3
 8001994:	460b      	mov	r3, r1
 8001996:	cb03      	ldmia	r3!, {r0, r1}
 8001998:	6010      	str	r0, [r2, #0]
 800199a:	6051      	str	r1, [r2, #4]

		 	    receive.data.capacity = 6;
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <task_ros2_function+0x4a4>)
 800199e:	2206      	movs	r2, #6
 80019a0:	619a      	str	r2, [r3, #24]
		 	    receive.data.size = 6;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <task_ros2_function+0x4a4>)
 80019a4:	2206      	movs	r2, #6
 80019a6:	615a      	str	r2, [r3, #20]
		 	    receive.data.data = (uint16_t*) pvPortMalloc(receive.data.capacity * sizeof(uint16_t));
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <task_ros2_function+0x4a4>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f008 f9b4 	bl	8009d1c <pvPortMalloc>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <task_ros2_function+0x4a4>)
 80019b8:	6113      	str	r3, [r2, #16]
		 	    receive.layout.dim.capacity = 6;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <task_ros2_function+0x4a4>)
 80019bc:	2206      	movs	r2, #6
 80019be:	609a      	str	r2, [r3, #8]
		 	    receive.layout.dim.size = 6;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <task_ros2_function+0x4a4>)
 80019c2:	2206      	movs	r2, #6
 80019c4:	605a      	str	r2, [r3, #4]
		 	    receive.layout.dim.data = (std_msgs__msg__MultiArrayDimension*) pvPortMalloc(receive.layout.dim.capacity * sizeof(std_msgs__msg__MultiArrayDimension));
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <task_ros2_function+0x4a4>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f008 f9a2 	bl	8009d1c <pvPortMalloc>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <task_ros2_function+0x4a4>)
 80019dc:	6013      	str	r3, [r2, #0]
				 	  for (size_t i =0; i< receive.layout.dim.capacity; i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80019e4:	e042      	b.n	8001a6c <task_ros2_function+0x50c>
 80019e6:	bf00      	nop
 80019e8:	20008278 	.word	0x20008278
 80019ec:	08018f3c 	.word	0x08018f3c
 80019f0:	08018f68 	.word	0x08018f68
 80019f4:	08018f74 	.word	0x08018f74
 80019f8:	08018f80 	.word	0x08018f80
 80019fc:	08018f88 	.word	0x08018f88
 8001a00:	08018f90 	.word	0x08018f90
 8001a04:	20008314 	.word	0x20008314
				 	    receive.layout.dim.data[i].label.capacity = 6;
 8001a08:	4bc1      	ldr	r3, [pc, #772]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	2206      	movs	r2, #6
 8001a1c:	609a      	str	r2, [r3, #8]
				 		receive.layout.dim.data[i].label.size = 6;
 8001a1e:	4bbc      	ldr	r3, [pc, #752]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	2206      	movs	r2, #6
 8001a32:	605a      	str	r2, [r3, #4]
				 		receive.layout.dim.data[i].label.data = (char*) pvPortMalloc(receive.layout.dim.data[i].label.capacity * sizeof(char));
 8001a34:	4bb6      	ldr	r3, [pc, #728]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	6898      	ldr	r0, [r3, #8]
 8001a48:	4bb1      	ldr	r3, [pc, #708]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	18cc      	adds	r4, r1, r3
 8001a5a:	f008 f95f 	bl	8009d1c <pvPortMalloc>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6023      	str	r3, [r4, #0]
				 	  for (size_t i =0; i< receive.layout.dim.capacity; i++){
 8001a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001a66:	3301      	adds	r3, #1
 8001a68:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a6c:	4ba8      	ldr	r3, [pc, #672]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d3c7      	bcc.n	8001a08 <task_ros2_function+0x4a8>

				 	  }
				 	    strcpy(receive.layout.dim.data[0].label.data, "k_sw");
 8001a78:	4ba5      	ldr	r3, [pc, #660]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4aa5      	ldr	r2, [pc, #660]	; (8001d14 <task_ros2_function+0x7b4>)
 8001a80:	6810      	ldr	r0, [r2, #0]
 8001a82:	6018      	str	r0, [r3, #0]
 8001a84:	7912      	ldrb	r2, [r2, #4]
 8001a86:	711a      	strb	r2, [r3, #4]
				 	    strcpy(receive.layout.dim.data[1].label.data, "op_mod");
 8001a88:	4ba1      	ldr	r3, [pc, #644]	; (8001d10 <task_ros2_function+0x7b0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3314      	adds	r3, #20
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4aa1      	ldr	r2, [pc, #644]	; (8001d18 <task_ros2_function+0x7b8>)
 8001a92:	6810      	ldr	r0, [r2, #0]
 8001a94:	6018      	str	r0, [r3, #0]
 8001a96:	8891      	ldrh	r1, [r2, #4]
 8001a98:	7992      	ldrb	r2, [r2, #6]
 8001a9a:	8099      	strh	r1, [r3, #4]
 8001a9c:	719a      	strb	r2, [r3, #6]
				    	strcpy(receive.layout.dim.data[2].label.data, "k_th");
 8001a9e:	4b9c      	ldr	r3, [pc, #624]	; (8001d10 <task_ros2_function+0x7b0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3328      	adds	r3, #40	; 0x28
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a9d      	ldr	r2, [pc, #628]	; (8001d1c <task_ros2_function+0x7bc>)
 8001aa8:	6810      	ldr	r0, [r2, #0]
 8001aaa:	6018      	str	r0, [r3, #0]
 8001aac:	7912      	ldrb	r2, [r2, #4]
 8001aae:	711a      	strb	r2, [r3, #4]
				    	strcpy(receive.layout.dim.data[3].label.data, "k_brk");
 8001ab0:	4b97      	ldr	r3, [pc, #604]	; (8001d10 <task_ros2_function+0x7b0>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	333c      	adds	r3, #60	; 0x3c
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a99      	ldr	r2, [pc, #612]	; (8001d20 <task_ros2_function+0x7c0>)
 8001aba:	6810      	ldr	r0, [r2, #0]
 8001abc:	6018      	str	r0, [r3, #0]
 8001abe:	8892      	ldrh	r2, [r2, #4]
 8001ac0:	809a      	strh	r2, [r3, #4]
				 	    strcpy(receive.layout.dim.data[4].label.data, "th_an");
 8001ac2:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <task_ros2_function+0x7b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3350      	adds	r3, #80	; 0x50
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a96      	ldr	r2, [pc, #600]	; (8001d24 <task_ros2_function+0x7c4>)
 8001acc:	6810      	ldr	r0, [r2, #0]
 8001ace:	6018      	str	r0, [r3, #0]
 8001ad0:	8892      	ldrh	r2, [r2, #4]
 8001ad2:	809a      	strh	r2, [r3, #4]
				    	strcpy(receive.layout.dim.data[5].label.data, "brk_an");
 8001ad4:	4b8e      	ldr	r3, [pc, #568]	; (8001d10 <task_ros2_function+0x7b0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3364      	adds	r3, #100	; 0x64
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a92      	ldr	r2, [pc, #584]	; (8001d28 <task_ros2_function+0x7c8>)
 8001ade:	6810      	ldr	r0, [r2, #0]
 8001ae0:	6018      	str	r0, [r3, #0]
 8001ae2:	8891      	ldrh	r1, [r2, #4]
 8001ae4:	7992      	ldrb	r2, [r2, #6]
 8001ae6:	8099      	strh	r1, [r3, #4]
 8001ae8:	719a      	strb	r2, [r3, #6]

	//imu
                        int STRING_BUFFER_LEN=10;
 8001aea:	230a      	movs	r3, #10
 8001aec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				    	char imu_buffer[STRING_BUFFER_LEN];
 8001af0:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8001af4:	1e63      	subs	r3, r4, #1
 8001af6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001afa:	4623      	mov	r3, r4
 8001afc:	4618      	mov	r0, r3
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	00cb      	lsls	r3, r1, #3
 8001b0c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b10:	00c2      	lsls	r2, r0, #3
 8001b12:	4623      	mov	r3, r4
 8001b14:	4618      	mov	r0, r3
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	00cb      	lsls	r3, r1, #3
 8001b24:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b28:	00c2      	lsls	r2, r0, #3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	3307      	adds	r3, #7
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	ebad 0d03 	sub.w	sp, sp, r3
 8001b36:	ab02      	add	r3, sp, #8
 8001b38:	3300      	adds	r3, #0
 8001b3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				    	imu_.header.frame_id.data = imu_buffer;
 8001b3e:	4a7b      	ldr	r2, [pc, #492]	; (8001d2c <task_ros2_function+0x7cc>)
 8001b40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b44:	6093      	str	r3, [r2, #8]
				    	imu_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001b46:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001b4a:	4a78      	ldr	r2, [pc, #480]	; (8001d2c <task_ros2_function+0x7cc>)
 8001b4c:	6113      	str	r3, [r2, #16]

	//gps
				    	char gps_buffer[STRING_BUFFER_LEN];
 8001b4e:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8001b52:	1e63      	subs	r3, r4, #1
 8001b54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001b58:	4623      	mov	r3, r4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	00cb      	lsls	r3, r1, #3
 8001b6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b6e:	00c2      	lsls	r2, r0, #3
 8001b70:	4623      	mov	r3, r4
 8001b72:	4618      	mov	r0, r3
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	00cb      	lsls	r3, r1, #3
 8001b82:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b86:	00c2      	lsls	r2, r0, #3
 8001b88:	4623      	mov	r3, r4
 8001b8a:	3307      	adds	r3, #7
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	ebad 0d03 	sub.w	sp, sp, r3
 8001b94:	ab02      	add	r3, sp, #8
 8001b96:	3300      	adds	r3, #0
 8001b98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				    	gps_.header.frame_id.data = gps_buffer;
 8001b9c:	4a64      	ldr	r2, [pc, #400]	; (8001d30 <task_ros2_function+0x7d0>)
 8001b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ba2:	6093      	str	r3, [r2, #8]
				    	gps_.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001ba4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ba8:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <task_ros2_function+0x7d0>)
 8001baa:	6113      	str	r3, [r2, #16]

	// joint_steering
				    	char joint_steering_buffer[STRING_BUFFER_LEN];
 8001bac:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8001bb0:	1e63      	subs	r3, r4, #1
 8001bb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bb6:	4623      	mov	r3, r4
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	00cb      	lsls	r3, r1, #3
 8001bc8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001bcc:	00c2      	lsls	r2, r0, #3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	00cb      	lsls	r3, r1, #3
 8001be0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001be4:	00c2      	lsls	r2, r0, #3
 8001be6:	4623      	mov	r3, r4
 8001be8:	3307      	adds	r3, #7
 8001bea:	08db      	lsrs	r3, r3, #3
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	ebad 0d03 	sub.w	sp, sp, r3
 8001bf2:	ab02      	add	r3, sp, #8
 8001bf4:	3300      	adds	r3, #0
 8001bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
				    	joint_steering.header.frame_id.data = joint_steering_buffer;
 8001bfa:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <task_ros2_function+0x7d4>)
 8001bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c00:	6093      	str	r3, [r2, #8]
				    	joint_steering.header.frame_id.capacity = STRING_BUFFER_LEN;
 8001c02:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001c06:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c08:	6113      	str	r3, [r2, #16]

				    	joint_steering.name.capacity=1;
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	61da      	str	r2, [r3, #28]
						joint_steering.name.size=1;
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	619a      	str	r2, [r3, #24]
						joint_steering.name.data=(rosidl_runtime_c__String *) pvPortMalloc(golfinho_motion_info_gpio_output_msg.data.capacity * sizeof(rosidl_runtime_c__String));
 8001c16:	4b48      	ldr	r3, [pc, #288]	; (8001d38 <task_ros2_function+0x7d8>)
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f008 f87a 	bl	8009d1c <pvPortMalloc>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a42      	ldr	r2, [pc, #264]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c2c:	6153      	str	r3, [r2, #20]

						joint_steering.name.data->capacity=5;
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	2205      	movs	r2, #5
 8001c34:	609a      	str	r2, [r3, #8]
						joint_steering.name.data->size=5;
 8001c36:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	605a      	str	r2, [r3, #4]
						joint_steering.name.data->data=(char*) pvPortMalloc(joint_steering.name.capacity * sizeof(char));
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a3c      	ldr	r2, [pc, #240]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c44:	6954      	ldr	r4, [r2, #20]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f008 f868 	bl	8009d1c <pvPortMalloc>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	6023      	str	r3, [r4, #0]
					 	strcpy(joint_steering.name.data->data, "steer");
 8001c50:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a39      	ldr	r2, [pc, #228]	; (8001d3c <task_ros2_function+0x7dc>)
 8001c58:	6810      	ldr	r0, [r2, #0]
 8001c5a:	6018      	str	r0, [r3, #0]
 8001c5c:	8892      	ldrh	r2, [r2, #4]
 8001c5e:	809a      	strh	r2, [r3, #4]

					 	joint_steering.velocity.capacity=1;
 8001c60:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
					 	joint_steering.velocity.size=1;
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
					 	joint_steering.velocity.data=(double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
 8001c6c:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f008 f852 	bl	8009d1c <pvPortMalloc>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4a2e      	ldr	r2, [pc, #184]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

					 	joint_steering.position.capacity=1;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
					 	joint_steering.position.size=1;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
					 	joint_steering.position.data=(double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4618      	mov	r0, r3
 8001c92:	f008 f843 	bl	8009d1c <pvPortMalloc>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a26      	ldr	r2, [pc, #152]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c9a:	6213      	str	r3, [r2, #32]

					 	joint_steering.effort.capacity=1;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <task_ros2_function+0x7d4>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
					 	joint_steering.effort.size=1;
 8001ca2:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <task_ros2_function+0x7d4>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	63da      	str	r2, [r3, #60]	; 0x3c
					 	joint_steering.effort.data=(double*) pvPortMalloc(joint_steering.name.capacity * sizeof(double));
 8001ca8:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <task_ros2_function+0x7d4>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f008 f834 	bl	8009d1c <pvPortMalloc>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <task_ros2_function+0x7d4>)
 8001cb8:	6393      	str	r3, [r2, #56]	; 0x38

	  // Create a timer
	  rclc_timer_init_default(&golfinho_check_status_timer, &support, RCL_MS_TO_NS(500), golfinho_check_status_timer_callback);
 8001cba:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <task_ros2_function+0x7e0>)
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	a30d      	add	r3, pc, #52	; (adr r3, 8001cf8 <task_ros2_function+0x798>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	481e      	ldr	r0, [pc, #120]	; (8001d44 <task_ros2_function+0x7e4>)
 8001cca:	f009 fa4d 	bl	800b168 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_motion_info_timer, &support, RCL_MS_TO_NS(100), golfinho_motion_info_timer_callback);
 8001cce:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <task_ros2_function+0x7e8>)
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	a30a      	add	r3, pc, #40	; (adr r3, 8001d00 <task_ros2_function+0x7a0>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	481b      	ldr	r0, [pc, #108]	; (8001d4c <task_ros2_function+0x7ec>)
 8001cde:	f009 fa43 	bl	800b168 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_imu_timer, &support, RCL_MS_TO_NS(25), golfinho_imu_timer_callback);
 8001ce2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <task_ros2_function+0x7f0>)
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	a307      	add	r3, pc, #28	; (adr r3, 8001d08 <task_ros2_function+0x7a8>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	e030      	b.n	8001d54 <task_ros2_function+0x7f4>
 8001cf2:	bf00      	nop
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	1dcd6500 	.word	0x1dcd6500
 8001cfc:	00000000 	.word	0x00000000
 8001d00:	05f5e100 	.word	0x05f5e100
 8001d04:	00000000 	.word	0x00000000
 8001d08:	017d7840 	.word	0x017d7840
 8001d0c:	00000000 	.word	0x00000000
 8001d10:	20008314 	.word	0x20008314
 8001d14:	08018f98 	.word	0x08018f98
 8001d18:	08018f50 	.word	0x08018f50
 8001d1c:	08018fa0 	.word	0x08018fa0
 8001d20:	08018fa8 	.word	0x08018fa8
 8001d24:	08018fb0 	.word	0x08018fb0
 8001d28:	08018fb8 	.word	0x08018fb8
 8001d2c:	20008110 	.word	0x20008110
 8001d30:	20006910 	.word	0x20006910
 8001d34:	2000829c 	.word	0x2000829c
 8001d38:	20008278 	.word	0x20008278
 8001d3c:	08018fc0 	.word	0x08018fc0
 8001d40:	08002259 	.word	0x08002259
 8001d44:	200082e8 	.word	0x200082e8
 8001d48:	08002321 	.word	0x08002321
 8001d4c:	200082f0 	.word	0x200082f0
 8001d50:	080025cd 	.word	0x080025cd
 8001d54:	482e      	ldr	r0, [pc, #184]	; (8001e10 <task_ros2_function+0x8b0>)
 8001d56:	f009 fa07 	bl	800b168 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_gps_timer, &support, RCL_MS_TO_NS(1000), golfinho_gps_timer_callback);
 8001d5a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <task_ros2_function+0x8b4>)
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	a327      	add	r3, pc, #156	; (adr r3, 8001e00 <task_ros2_function+0x8a0>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	482b      	ldr	r0, [pc, #172]	; (8001e18 <task_ros2_function+0x8b8>)
 8001d6a:	f009 f9fd 	bl	800b168 <rclc_timer_init_default>
	  rclc_timer_init_default(&golfinho_joint_steering_timer, &support, RCL_MS_TO_NS(100), golfinho_joint_steering_timer_callback);
 8001d6e:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <task_ros2_function+0x8bc>)
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	a324      	add	r3, pc, #144	; (adr r3, 8001e08 <task_ros2_function+0x8a8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <task_ros2_function+0x8c0>)
 8001d7e:	f009 f9f3 	bl	800b168 <rclc_timer_init_default>

	  // Create executor
	  rclc_executor_init(&executor, &support.context,5, &allocator);
 8001d82:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001d86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d8a:	f103 0108 	add.w	r1, r3, #8
 8001d8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d92:	4613      	mov	r3, r2
 8001d94:	2205      	movs	r2, #5
 8001d96:	f008 fe7f 	bl	800aa98 <rclc_executor_init>

	  rclc_executor_add_subscription(&executor, &receive_commands_from_ros_sub, &receive,
 8001d9a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <task_ros2_function+0x8c4>)
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <task_ros2_function+0x8c8>)
 8001da6:	4921      	ldr	r1, [pc, #132]	; (8001e2c <task_ros2_function+0x8cc>)
 8001da8:	f008 feea 	bl	800ab80 <rclc_executor_add_subscription>
	 	  			  &receive_commands_from_ros_callback, ON_NEW_DATA); // ON_NEW_DATA does not work properly
	  rclc_executor_add_timer(&executor, &golfinho_check_status_timer);
 8001dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db0:	491f      	ldr	r1, [pc, #124]	; (8001e30 <task_ros2_function+0x8d0>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f008 ff1c 	bl	800abf0 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_motion_info_timer);
 8001db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbc:	491d      	ldr	r1, [pc, #116]	; (8001e34 <task_ros2_function+0x8d4>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f008 ff16 	bl	800abf0 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_joint_steering_timer);
 8001dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc8:	4915      	ldr	r1, [pc, #84]	; (8001e20 <task_ros2_function+0x8c0>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f008 ff10 	bl	800abf0 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_imu_timer);
 8001dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd4:	490e      	ldr	r1, [pc, #56]	; (8001e10 <task_ros2_function+0x8b0>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f008 ff0a 	bl	800abf0 <rclc_executor_add_timer>
	  rclc_executor_add_timer(&executor, &golfinho_gps_timer);
 8001ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de0:	490d      	ldr	r1, [pc, #52]	; (8001e18 <task_ros2_function+0x8b8>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f008 ff04 	bl	800abf0 <rclc_executor_add_timer>

      // Run executor
	  rclc_executor_spin(&executor);
 8001de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dec:	4618      	mov	r0, r3
 8001dee:	f009 f8a1 	bl	800af34 <rclc_executor_spin>

	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(10);
 8001df2:	200a      	movs	r0, #10
 8001df4:	f005 fc54 	bl	80076a0 <osDelay>
 8001df8:	e7fb      	b.n	8001df2 <task_ros2_function+0x892>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	3b9aca00 	.word	0x3b9aca00
 8001e04:	00000000 	.word	0x00000000
 8001e08:	05f5e100 	.word	0x05f5e100
 8001e0c:	00000000 	.word	0x00000000
 8001e10:	200082f4 	.word	0x200082f4
 8001e14:	08002659 	.word	0x08002659
 8001e18:	2000839c 	.word	0x2000839c
 8001e1c:	080026e5 	.word	0x080026e5
 8001e20:	20008100 	.word	0x20008100
 8001e24:	08002551 	.word	0x08002551
 8001e28:	20008314 	.word	0x20008314
 8001e2c:	200082e4 	.word	0x200082e4
 8001e30:	200082e8 	.word	0x200082e8
 8001e34:	200082f0 	.word	0x200082f0

08001e38 <digital_inputs_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_digital_inputs_task */
void digital_inputs_task(void *argument)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN digital_inputs_task */
  /* Infinite loop */
	 uint8_t stats[3]={0,0,0};
 8001e40:	4a3a      	ldr	r2, [pc, #232]	; (8001f2c <digital_inputs_task+0xf4>)
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	8019      	strh	r1, [r3, #0]
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	0c12      	lsrs	r2, r2, #16
 8001e50:	701a      	strb	r2, [r3, #0]
	  for(;;){

		  // key switch
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	4836      	ldr	r0, [pc, #216]	; (8001f30 <digital_inputs_task+0xf8>)
 8001e56:	f003 fbff 	bl	8005658 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73bb      	strb	r3, [r7, #14]
		  stats[1]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15));
 8001e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e6c:	4831      	ldr	r0, [pc, #196]	; (8001f34 <digital_inputs_task+0xfc>)
 8001e6e:	f003 fbf3 	bl	8005658 <HAL_GPIO_ReadPin>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	737b      	strb	r3, [r7, #13]
		  stats[0]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14));
 8001e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e84:	482b      	ldr	r0, [pc, #172]	; (8001f34 <digital_inputs_task+0xfc>)
 8001e86:	f003 fbe7 	bl	8005658 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	733b      	strb	r3, [r7, #12]

		  // break
		  digital_data_input_manual[4]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13));
 8001e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9c:	4825      	ldr	r0, [pc, #148]	; (8001f34 <digital_inputs_task+0xfc>)
 8001e9e:	f003 fbdb 	bl	8005658 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <digital_inputs_task+0x100>)
 8001eb2:	711a      	strb	r2, [r3, #4]
		  // throttle
		  digital_data_input_manual[3]=!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12));
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	481e      	ldr	r0, [pc, #120]	; (8001f34 <digital_inputs_task+0xfc>)
 8001eba:	f003 fbcd 	bl	8005658 <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <digital_inputs_task+0x100>)
 8001ece:	70da      	strb	r2, [r3, #3]

		  if(stats[0] || stats[1] || stats[2]){
 8001ed0:	7b3b      	ldrb	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <digital_inputs_task+0xaa>
 8001ed6:	7b7b      	ldrb	r3, [r7, #13]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <digital_inputs_task+0xaa>
 8001edc:	7bbb      	ldrb	r3, [r7, #14]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d012      	beq.n	8001f08 <digital_inputs_task+0xd0>
			  if(stats[0])
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <digital_inputs_task+0xb6>
			 	digital_data_input_manual[1]=2;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <digital_inputs_task+0x100>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	705a      	strb	r2, [r3, #1]
			  if(stats[1])
 8001eee:	7b7b      	ldrb	r3, [r7, #13]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <digital_inputs_task+0xc2>
			 	digital_data_input_manual[1]=3;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <digital_inputs_task+0x100>)
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 8001efa:	7bbb      	ldrb	r3, [r7, #14]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <digital_inputs_task+0xd6>
			    digital_data_input_manual[1]=4;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <digital_inputs_task+0x100>)
 8001f02:	2204      	movs	r2, #4
 8001f04:	705a      	strb	r2, [r3, #1]
			  if(stats[2])
 8001f06:	e002      	b.n	8001f0e <digital_inputs_task+0xd6>
		  }else
			  digital_data_input_manual[1]=1;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <digital_inputs_task+0x100>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	705a      	strb	r2, [r3, #1]
        //steer
	    HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, canRX);
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <digital_inputs_task+0x104>)
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <digital_inputs_task+0x108>)
 8001f12:	2100      	movs	r1, #0
 8001f14:	480b      	ldr	r0, [pc, #44]	; (8001f44 <digital_inputs_task+0x10c>)
 8001f16:	f002 f86c 	bl	8003ff2 <HAL_CAN_GetRxMessage>
	    raw=canRX[7];
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <digital_inputs_task+0x104>)
 8001f1c:	79da      	ldrb	r2, [r3, #7]
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <digital_inputs_task+0x110>)
 8001f20:	701a      	strb	r2, [r3, #0]

		  osDelay(100);
 8001f22:	2064      	movs	r0, #100	; 0x64
 8001f24:	f005 fbbc 	bl	80076a0 <osDelay>
		  stats[2]=!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6));
 8001f28:	e793      	b.n	8001e52 <digital_inputs_task+0x1a>
 8001f2a:	bf00      	nop
 8001f2c:	08018fc8 	.word	0x08018fc8
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	20003208 	.word	0x20003208
 8001f3c:	20003230 	.word	0x20003230
 8001f40:	200068f0 	.word	0x200068f0
 8001f44:	20006894 	.word	0x20006894
 8001f48:	200082ec 	.word	0x200082ec

08001f4c <analog_input_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_input_task */
void analog_input_task(void *argument)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_input_task */
  /* Infinite loop */
  for(;;)
  {
	  // Get ADC value
		  ADC_select_channel_Throttle();
 8001f54:	f000 fc32 	bl	80027bc <ADC_select_channel_Throttle>
		  HAL_ADC_Start(&hadc1);
 8001f58:	4826      	ldr	r0, [pc, #152]	; (8001ff4 <analog_input_task+0xa8>)
 8001f5a:	f001 fac3 	bl	80034e4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001f5e:	210a      	movs	r1, #10
 8001f60:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <analog_input_task+0xa8>)
 8001f62:	f001 fb99 	bl	8003698 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[3] = HAL_ADC_GetValue(&hadc1);
 8001f66:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <analog_input_task+0xa8>)
 8001f68:	f001 fc9c 	bl	80038a4 <HAL_ADC_GetValue>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <analog_input_task+0xac>)
 8001f72:	80da      	strh	r2, [r3, #6]
		  HAL_ADC_Stop(&hadc1);
 8001f74:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <analog_input_task+0xa8>)
 8001f76:	f001 fb63 	bl	8003640 <HAL_ADC_Stop>

	      ADC_select_channel_break();
 8001f7a:	f000 fc01 	bl	8002780 <ADC_select_channel_break>
		  HAL_ADC_Start(&hadc1);
 8001f7e:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <analog_input_task+0xa8>)
 8001f80:	f001 fab0 	bl	80034e4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001f84:	210a      	movs	r1, #10
 8001f86:	481b      	ldr	r0, [pc, #108]	; (8001ff4 <analog_input_task+0xa8>)
 8001f88:	f001 fb86 	bl	8003698 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[2] = HAL_ADC_GetValue(&hadc1);
 8001f8c:	4819      	ldr	r0, [pc, #100]	; (8001ff4 <analog_input_task+0xa8>)
 8001f8e:	f001 fc89 	bl	80038a4 <HAL_ADC_GetValue>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <analog_input_task+0xac>)
 8001f98:	809a      	strh	r2, [r3, #4]
		  HAL_ADC_Stop(&hadc1);
 8001f9a:	4816      	ldr	r0, [pc, #88]	; (8001ff4 <analog_input_task+0xa8>)
 8001f9c:	f001 fb50 	bl	8003640 <HAL_ADC_Stop>

		  ADC_select_channel_batery_car();
 8001fa0:	f000 fc28 	bl	80027f4 <ADC_select_channel_batery_car>
		  HAL_ADC_Start(&hadc1);
 8001fa4:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <analog_input_task+0xa8>)
 8001fa6:	f001 fa9d 	bl	80034e4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001faa:	210a      	movs	r1, #10
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <analog_input_task+0xa8>)
 8001fae:	f001 fb73 	bl	8003698 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[4] = HAL_ADC_GetValue(&hadc1);
 8001fb2:	4810      	ldr	r0, [pc, #64]	; (8001ff4 <analog_input_task+0xa8>)
 8001fb4:	f001 fc76 	bl	80038a4 <HAL_ADC_GetValue>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <analog_input_task+0xac>)
 8001fbe:	811a      	strh	r2, [r3, #8]
		  HAL_ADC_Stop(&hadc1);
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <analog_input_task+0xa8>)
 8001fc2:	f001 fb3d 	bl	8003640 <HAL_ADC_Stop>

		  ADC_select_channel_system_batery();
 8001fc6:	f000 fc31 	bl	800282c <ADC_select_channel_system_batery>
		  HAL_ADC_Start(&hadc1);
 8001fca:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <analog_input_task+0xa8>)
 8001fcc:	f001 fa8a 	bl	80034e4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 10);
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	4808      	ldr	r0, [pc, #32]	; (8001ff4 <analog_input_task+0xa8>)
 8001fd4:	f001 fb60 	bl	8003698 <HAL_ADC_PollForConversion>
		  analog_data_input_manual[5] = HAL_ADC_GetValue(&hadc1);
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <analog_input_task+0xa8>)
 8001fda:	f001 fc63 	bl	80038a4 <HAL_ADC_GetValue>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <analog_input_task+0xac>)
 8001fe4:	815a      	strh	r2, [r3, #10]
		  HAL_ADC_Stop(&hadc1);
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <analog_input_task+0xa8>)
 8001fe8:	f001 fb2a 	bl	8003640 <HAL_ADC_Stop>

		  HAL_Delay(50);
 8001fec:	2032      	movs	r0, #50	; 0x32
 8001fee:	f001 f96b 	bl	80032c8 <HAL_Delay>
		  ADC_select_channel_Throttle();
 8001ff2:	e7af      	b.n	8001f54 <analog_input_task+0x8>
 8001ff4:	20006864 	.word	0x20006864
 8001ff8:	20003210 	.word	0x20003210

08001ffc <automatic_manual_mode_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_automatic_manual_mode_Task */
void automatic_manual_mode_Task(void *argument)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN automatic_manual_mode_Task */
  /* Infinite loop */
  for(;;){

	  switch(flg){
 8002004:	4b8d      	ldr	r3, [pc, #564]	; (800223c <automatic_manual_mode_Task+0x240>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <automatic_manual_mode_Task+0x18>
 800200c:	2b01      	cmp	r3, #1
 800200e:	f000 8088 	beq.w	8002122 <automatic_manual_mode_Task+0x126>
 8002012:	e10f      	b.n	8002234 <automatic_manual_mode_Task+0x238>

	  case 0:
      //KEY SWITCH
		  if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==3 || digital_data_input_manual[1]==4)
 8002014:	4b8a      	ldr	r3, [pc, #552]	; (8002240 <automatic_manual_mode_Task+0x244>)
 8002016:	785b      	ldrb	r3, [r3, #1]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <automatic_manual_mode_Task+0x30>
 800201c:	4b88      	ldr	r3, [pc, #544]	; (8002240 <automatic_manual_mode_Task+0x244>)
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d003      	beq.n	800202c <automatic_manual_mode_Task+0x30>
 8002024:	4b86      	ldr	r3, [pc, #536]	; (8002240 <automatic_manual_mode_Task+0x244>)
 8002026:	785b      	ldrb	r3, [r3, #1]
 8002028:	2b04      	cmp	r3, #4
 800202a:	d105      	bne.n	8002038 <automatic_manual_mode_Task+0x3c>
		     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	2104      	movs	r1, #4
 8002030:	4884      	ldr	r0, [pc, #528]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002032:	f003 fb28 	bl	8005686 <HAL_GPIO_WritePin>
 8002036:	e008      	b.n	800204a <automatic_manual_mode_Task+0x4e>
         else
		     if(digital_data_input_manual[1]==2)
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <automatic_manual_mode_Task+0x244>)
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d104      	bne.n	800204a <automatic_manual_mode_Task+0x4e>
            	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 8002040:	2201      	movs	r2, #1
 8002042:	2104      	movs	r1, #4
 8002044:	487f      	ldr	r0, [pc, #508]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002046:	f003 fb1e 	bl	8005686 <HAL_GPIO_WritePin>



     	 if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==4)
 800204a:	4b7d      	ldr	r3, [pc, #500]	; (8002240 <automatic_manual_mode_Task+0x244>)
 800204c:	785b      	ldrb	r3, [r3, #1]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d007      	beq.n	8002062 <automatic_manual_mode_Task+0x66>
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <automatic_manual_mode_Task+0x244>)
 8002054:	785b      	ldrb	r3, [r3, #1]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d003      	beq.n	8002062 <automatic_manual_mode_Task+0x66>
 800205a:	4b79      	ldr	r3, [pc, #484]	; (8002240 <automatic_manual_mode_Task+0x244>)
 800205c:	785b      	ldrb	r3, [r3, #1]
 800205e:	2b04      	cmp	r3, #4
 8002060:	d105      	bne.n	800206e <automatic_manual_mode_Task+0x72>
     		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	2108      	movs	r1, #8
 8002066:	4877      	ldr	r0, [pc, #476]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002068:	f003 fb0d 	bl	8005686 <HAL_GPIO_WritePin>
 800206c:	e008      	b.n	8002080 <automatic_manual_mode_Task+0x84>
     	 else
             if(digital_data_input_manual[1]==3)
 800206e:	4b74      	ldr	r3, [pc, #464]	; (8002240 <automatic_manual_mode_Task+0x244>)
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d104      	bne.n	8002080 <automatic_manual_mode_Task+0x84>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	2108      	movs	r1, #8
 800207a:	4872      	ldr	r0, [pc, #456]	; (8002244 <automatic_manual_mode_Task+0x248>)
 800207c:	f003 fb03 	bl	8005686 <HAL_GPIO_WritePin>

    	 if(digital_data_input_manual[1]==1 || digital_data_input_manual[1]==2 || digital_data_input_manual[1]==3)
 8002080:	4b6f      	ldr	r3, [pc, #444]	; (8002240 <automatic_manual_mode_Task+0x244>)
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d007      	beq.n	8002098 <automatic_manual_mode_Task+0x9c>
 8002088:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <automatic_manual_mode_Task+0x244>)
 800208a:	785b      	ldrb	r3, [r3, #1]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d003      	beq.n	8002098 <automatic_manual_mode_Task+0x9c>
 8002090:	4b6b      	ldr	r3, [pc, #428]	; (8002240 <automatic_manual_mode_Task+0x244>)
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d105      	bne.n	80020a4 <automatic_manual_mode_Task+0xa8>
    		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2110      	movs	r1, #16
 800209c:	4869      	ldr	r0, [pc, #420]	; (8002244 <automatic_manual_mode_Task+0x248>)
 800209e:	f003 faf2 	bl	8005686 <HAL_GPIO_WritePin>
 80020a2:	e008      	b.n	80020b6 <automatic_manual_mode_Task+0xba>
    	 else
             if(digital_data_input_manual[1]==4)
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <automatic_manual_mode_Task+0x244>)
 80020a6:	785b      	ldrb	r3, [r3, #1]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d104      	bne.n	80020b6 <automatic_manual_mode_Task+0xba>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	2110      	movs	r1, #16
 80020b0:	4864      	ldr	r0, [pc, #400]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80020b2:	f003 fae8 	bl	8005686 <HAL_GPIO_WritePin>


      // THROTTLE


             if(digital_data_input_manual[3]){
 80020b6:	4b62      	ldr	r3, [pc, #392]	; (8002240 <automatic_manual_mode_Task+0x244>)
 80020b8:	78db      	ldrb	r3, [r3, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <automatic_manual_mode_Task+0xdc>
            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	2101      	movs	r1, #1
 80020c2:	4860      	ldr	r0, [pc, #384]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80020c4:	f003 fadf 	bl	8005686 <HAL_GPIO_WritePin>
           	     HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_manual[2]);
 80020c8:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <automatic_manual_mode_Task+0x24c>)
 80020ca:	889b      	ldrh	r3, [r3, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	485e      	ldr	r0, [pc, #376]	; (800224c <automatic_manual_mode_Task+0x250>)
 80020d2:	f002 fc39 	bl	8004948 <HAL_DAC_SetValue>
 80020d6:	e008      	b.n	80020ea <automatic_manual_mode_Task+0xee>
               }else
            	 if(!digital_data_input_manual[3])
 80020d8:	4b59      	ldr	r3, [pc, #356]	; (8002240 <automatic_manual_mode_Task+0x244>)
 80020da:	78db      	ldrb	r3, [r3, #3]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <automatic_manual_mode_Task+0xee>
            		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2101      	movs	r1, #1
 80020e4:	4857      	ldr	r0, [pc, #348]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80020e6:	f003 face 	bl	8005686 <HAL_GPIO_WritePin>
      //  BREAK
             if(digital_data_input_manual[4]){
 80020ea:	4b55      	ldr	r3, [pc, #340]	; (8002240 <automatic_manual_mode_Task+0x244>)
 80020ec:	791b      	ldrb	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <automatic_manual_mode_Task+0x110>
               	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	2102      	movs	r1, #2
 80020f6:	4853      	ldr	r0, [pc, #332]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80020f8:	f003 fac5 	bl	8005686 <HAL_GPIO_WritePin>
                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_manual[3]);
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <automatic_manual_mode_Task+0x24c>)
 80020fe:	88db      	ldrh	r3, [r3, #6]
 8002100:	2200      	movs	r2, #0
 8002102:	2110      	movs	r1, #16
 8002104:	4851      	ldr	r0, [pc, #324]	; (800224c <automatic_manual_mode_Task+0x250>)
 8002106:	f002 fc1f 	bl	8004948 <HAL_DAC_SetValue>
            	}else
            	   if(!digital_data_input_manual[4])
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

		  break;
 800210a:	e090      	b.n	800222e <automatic_manual_mode_Task+0x232>
            	   if(!digital_data_input_manual[4])
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <automatic_manual_mode_Task+0x244>)
 800210e:	791b      	ldrb	r3, [r3, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 808c 	bne.w	800222e <automatic_manual_mode_Task+0x232>
            		   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	2102      	movs	r1, #2
 800211a:	484a      	ldr	r0, [pc, #296]	; (8002244 <automatic_manual_mode_Task+0x248>)
 800211c:	f003 fab3 	bl	8005686 <HAL_GPIO_WritePin>
		  break;
 8002120:	e085      	b.n	800222e <automatic_manual_mode_Task+0x232>

	  case 1:
		    //KEY SWITCH
     	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==3 || digital_data_input_auto[1]==4)
 8002122:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <automatic_manual_mode_Task+0x254>)
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d007      	beq.n	800213a <automatic_manual_mode_Task+0x13e>
 800212a:	4b49      	ldr	r3, [pc, #292]	; (8002250 <automatic_manual_mode_Task+0x254>)
 800212c:	785b      	ldrb	r3, [r3, #1]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d003      	beq.n	800213a <automatic_manual_mode_Task+0x13e>
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <automatic_manual_mode_Task+0x254>)
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d105      	bne.n	8002146 <automatic_manual_mode_Task+0x14a>
     		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	2104      	movs	r1, #4
 800213e:	4841      	ldr	r0, [pc, #260]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002140:	f003 faa1 	bl	8005686 <HAL_GPIO_WritePin>
 8002144:	e008      	b.n	8002158 <automatic_manual_mode_Task+0x15c>
  	      else
	        if(digital_data_input_auto[1]==2)
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <automatic_manual_mode_Task+0x254>)
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d104      	bne.n	8002158 <automatic_manual_mode_Task+0x15c>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2,GPIO_PIN_SET);
 800214e:	2201      	movs	r2, #1
 8002150:	2104      	movs	r1, #4
 8002152:	483c      	ldr	r0, [pc, #240]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002154:	f003 fa97 	bl	8005686 <HAL_GPIO_WritePin>

    	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==2 || digital_data_input_auto[1]==4)
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <automatic_manual_mode_Task+0x254>)
 800215a:	785b      	ldrb	r3, [r3, #1]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d007      	beq.n	8002170 <automatic_manual_mode_Task+0x174>
 8002160:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <automatic_manual_mode_Task+0x254>)
 8002162:	785b      	ldrb	r3, [r3, #1]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d003      	beq.n	8002170 <automatic_manual_mode_Task+0x174>
 8002168:	4b39      	ldr	r3, [pc, #228]	; (8002250 <automatic_manual_mode_Task+0x254>)
 800216a:	785b      	ldrb	r3, [r3, #1]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d105      	bne.n	800217c <automatic_manual_mode_Task+0x180>
    		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8002170:	2200      	movs	r2, #0
 8002172:	2108      	movs	r1, #8
 8002174:	4833      	ldr	r0, [pc, #204]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002176:	f003 fa86 	bl	8005686 <HAL_GPIO_WritePin>
 800217a:	e008      	b.n	800218e <automatic_manual_mode_Task+0x192>
    	 else
		    if(digital_data_input_auto[1]==3)
 800217c:	4b34      	ldr	r3, [pc, #208]	; (8002250 <automatic_manual_mode_Task+0x254>)
 800217e:	785b      	ldrb	r3, [r3, #1]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d104      	bne.n	800218e <automatic_manual_mode_Task+0x192>
		       HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	2108      	movs	r1, #8
 8002188:	482e      	ldr	r0, [pc, #184]	; (8002244 <automatic_manual_mode_Task+0x248>)
 800218a:	f003 fa7c 	bl	8005686 <HAL_GPIO_WritePin>

      	 if(digital_data_input_auto[1]==1 || digital_data_input_auto[1]==2 || digital_data_input_auto[1]==3)
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <automatic_manual_mode_Task+0x254>)
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d007      	beq.n	80021a6 <automatic_manual_mode_Task+0x1aa>
 8002196:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <automatic_manual_mode_Task+0x254>)
 8002198:	785b      	ldrb	r3, [r3, #1]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d003      	beq.n	80021a6 <automatic_manual_mode_Task+0x1aa>
 800219e:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <automatic_manual_mode_Task+0x254>)
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d105      	bne.n	80021b2 <automatic_manual_mode_Task+0x1b6>
	          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2110      	movs	r1, #16
 80021aa:	4826      	ldr	r0, [pc, #152]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80021ac:	f003 fa6b 	bl	8005686 <HAL_GPIO_WritePin>
 80021b0:	e008      	b.n	80021c4 <automatic_manual_mode_Task+0x1c8>
      	 else
	 	    if(digital_data_input_auto[1]==4)
 80021b2:	4b27      	ldr	r3, [pc, #156]	; (8002250 <automatic_manual_mode_Task+0x254>)
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d104      	bne.n	80021c4 <automatic_manual_mode_Task+0x1c8>
	       	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	2110      	movs	r1, #16
 80021be:	4821      	ldr	r0, [pc, #132]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80021c0:	f003 fa61 	bl	8005686 <HAL_GPIO_WritePin>

		      // THROTTLE
		             if(digital_data_input_auto[3]){
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <automatic_manual_mode_Task+0x254>)
 80021c6:	78db      	ldrb	r3, [r3, #3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00c      	beq.n	80021e6 <automatic_manual_mode_Task+0x1ea>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2101      	movs	r1, #1
 80021d0:	481c      	ldr	r0, [pc, #112]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80021d2:	f003 fa58 	bl	8005686 <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1,DAC_ALIGN_12B_R, analog_data_input_auto[2]);
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <automatic_manual_mode_Task+0x258>)
 80021d8:	889b      	ldrh	r3, [r3, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	481b      	ldr	r0, [pc, #108]	; (800224c <automatic_manual_mode_Task+0x250>)
 80021e0:	f002 fbb2 	bl	8004948 <HAL_DAC_SetValue>
 80021e4:	e008      	b.n	80021f8 <automatic_manual_mode_Task+0x1fc>
	  	  	  	  	  }else
		            	 if(!digital_data_input_auto[3])
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <automatic_manual_mode_Task+0x254>)
 80021e8:	78db      	ldrb	r3, [r3, #3]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d104      	bne.n	80021f8 <automatic_manual_mode_Task+0x1fc>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	4814      	ldr	r0, [pc, #80]	; (8002244 <automatic_manual_mode_Task+0x248>)
 80021f4:	f003 fa47 	bl	8005686 <HAL_GPIO_WritePin>
            //  BREAK
		             if(digital_data_input_auto[4]){
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <automatic_manual_mode_Task+0x254>)
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00c      	beq.n	800221a <automatic_manual_mode_Task+0x21e>
		            	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);
 8002200:	2201      	movs	r2, #1
 8002202:	2102      	movs	r1, #2
 8002204:	480f      	ldr	r0, [pc, #60]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002206:	f003 fa3e 	bl	8005686 <HAL_GPIO_WritePin>
		                 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2,DAC_ALIGN_12B_R, analog_data_input_auto[3]);
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <automatic_manual_mode_Task+0x258>)
 800220c:	88db      	ldrh	r3, [r3, #6]
 800220e:	2200      	movs	r2, #0
 8002210:	2110      	movs	r1, #16
 8002212:	480e      	ldr	r0, [pc, #56]	; (800224c <automatic_manual_mode_Task+0x250>)
 8002214:	f002 fb98 	bl	8004948 <HAL_DAC_SetValue>
	  	  	  	  	  }else
	  	  	  	  		 if(!digital_data_input_auto[4])
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);

	     break;
 8002218:	e00b      	b.n	8002232 <automatic_manual_mode_Task+0x236>
	  	  	  	  		 if(!digital_data_input_auto[4])
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <automatic_manual_mode_Task+0x254>)
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <automatic_manual_mode_Task+0x236>
		                	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	2102      	movs	r1, #2
 8002226:	4807      	ldr	r0, [pc, #28]	; (8002244 <automatic_manual_mode_Task+0x248>)
 8002228:	f003 fa2d 	bl	8005686 <HAL_GPIO_WritePin>
	     break;
 800222c:	e001      	b.n	8002232 <automatic_manual_mode_Task+0x236>
		  break;
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <automatic_manual_mode_Task+0x238>
	     break;
 8002232:	bf00      	nop

	  }


    osDelay(100);
 8002234:	2064      	movs	r0, #100	; 0x64
 8002236:	f005 fa33 	bl	80076a0 <osDelay>
	  switch(flg){
 800223a:	e6e3      	b.n	8002004 <automatic_manual_mode_Task+0x8>
 800223c:	20003204 	.word	0x20003204
 8002240:	20003208 	.word	0x20003208
 8002244:	40011000 	.word	0x40011000
 8002248:	20003210 	.word	0x20003210
 800224c:	200068bc 	.word	0x200068bc
 8002250:	2000321c 	.word	0x2000321c
 8002254:	20003224 	.word	0x20003224

08002258 <golfinho_check_status_timer_callback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* ROS CALLBACKS*/
void golfinho_check_status_timer_callback(rcl_timer_t * timer, int64_t last_call_time) // Envia os dados de estados do carrihno para o ros2
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modods de operação
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <golfinho_check_status_timer_callback+0xb0>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d01d      	beq.n	80022a8 <golfinho_check_status_timer_callback+0x50>
     	        golfinho_check_status_msg.data.data[0]=digital_data_input_auto[0];
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <golfinho_check_status_timer_callback+0xb8>)
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
	         	golfinho_check_status_msg.data.data[1]=digital_data_input_auto[1]; // key_switch
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	3301      	adds	r3, #1
 800227c:	4a24      	ldr	r2, [pc, #144]	; (8002310 <golfinho_check_status_timer_callback+0xb8>)
 800227e:	7852      	ldrb	r2, [r2, #1]
 8002280:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2]; // op_mode
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	3302      	adds	r3, #2
 8002288:	4a21      	ldr	r2, [pc, #132]	; (8002310 <golfinho_check_status_timer_callback+0xb8>)
 800228a:	7892      	ldrb	r2, [r2, #2]
 800228c:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_auto[3]; // key_t
 800228e:	4b1f      	ldr	r3, [pc, #124]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	3303      	adds	r3, #3
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <golfinho_check_status_timer_callback+0xb8>)
 8002296:	78d2      	ldrb	r2, [r2, #3]
 8002298:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[4]=digital_data_input_auto[4]; // key_break
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	3304      	adds	r3, #4
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <golfinho_check_status_timer_callback+0xb8>)
 80022a2:	7912      	ldrb	r2, [r2, #4]
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e01c      	b.n	80022e2 <golfinho_check_status_timer_callback+0x8a>
			}else {
				golfinho_check_status_msg.data.data[0]=digital_data_input_manual[0];
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	4a19      	ldr	r2, [pc, #100]	; (8002314 <golfinho_check_status_timer_callback+0xbc>)
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
				golfinho_check_status_msg.data.data[1]=digital_data_input_manual[1];// key_switch
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	3301      	adds	r3, #1
 80022b8:	4a16      	ldr	r2, [pc, #88]	; (8002314 <golfinho_check_status_timer_callback+0xbc>)
 80022ba:	7852      	ldrb	r2, [r2, #1]
 80022bc:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[2]=digital_data_input_auto[2];  // op_mode
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	3302      	adds	r3, #2
 80022c4:	4a12      	ldr	r2, [pc, #72]	; (8002310 <golfinho_check_status_timer_callback+0xb8>)
 80022c6:	7892      	ldrb	r2, [r2, #2]
 80022c8:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[3]=digital_data_input_manual[3];// key_t
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	3303      	adds	r3, #3
 80022d0:	4a10      	ldr	r2, [pc, #64]	; (8002314 <golfinho_check_status_timer_callback+0xbc>)
 80022d2:	78d2      	ldrb	r2, [r2, #3]
 80022d4:	701a      	strb	r2, [r3, #0]
			    golfinho_check_status_msg.data.data[4]=digital_data_input_manual[4];// key_break
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	3304      	adds	r3, #4
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <golfinho_check_status_timer_callback+0xbc>)
 80022de:	7912      	ldrb	r2, [r2, #4]
 80022e0:	701a      	strb	r2, [r3, #0]
   	         }

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_gpio_input_pub,&golfinho_check_status_msg, NULL);
 80022e2:	2200      	movs	r2, #0
 80022e4:	4909      	ldr	r1, [pc, #36]	; (800230c <golfinho_check_status_timer_callback+0xb4>)
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <golfinho_check_status_timer_callback+0xc0>)
 80022e8:	f008 f944 	bl	800a574 <rcl_publish>
 80022ec:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <golfinho_check_status_timer_callback+0xa6>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 80022f4:	f240 21f1 	movw	r1, #753	; 0x2f1
 80022f8:	4808      	ldr	r0, [pc, #32]	; (800231c <golfinho_check_status_timer_callback+0xc4>)
 80022fa:	f015 fac7 	bl	801788c <iprintf>
		}
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20003204 	.word	0x20003204
 800230c:	200082f8 	.word	0x200082f8
 8002310:	2000321c 	.word	0x2000321c
 8002314:	20003208 	.word	0x20003208
 8002318:	200082e0 	.word	0x200082e0
 800231c:	08018fcc 	.word	0x08018fcc

08002320 <golfinho_motion_info_timer_callback>:

void golfinho_motion_info_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	e9c7 2300 	strd	r2, r3, [r7]
	if(flg){ // status dos dois modos de operação
 800232c:	4b7f      	ldr	r3, [pc, #508]	; (800252c <golfinho_motion_info_timer_callback+0x20c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d074      	beq.n	800241e <golfinho_motion_info_timer_callback+0xfe>
		   golfinho_motion_info_gpio_output_msg.data.data[1]=raw;
 8002334:	4b7e      	ldr	r3, [pc, #504]	; (8002530 <golfinho_motion_info_timer_callback+0x210>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	1d1c      	adds	r4, r3, #4
 800233e:	4610      	mov	r0, r2
 8002340:	f7fe f83e 	bl	80003c0 <__aeabi_ui2f>
 8002344:	4603      	mov	r3, r0
 8002346:	6023      	str	r3, [r4, #0]

		if(digital_data_input_auto[3]) //acelerador
 8002348:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <golfinho_motion_info_timer_callback+0x218>)
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <golfinho_motion_info_timer_callback+0x5c>
		   golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_auto[2]*100/4096;
 8002350:	4b7a      	ldr	r3, [pc, #488]	; (800253c <golfinho_motion_info_timer_callback+0x21c>)
 8002352:	889b      	ldrh	r3, [r3, #4]
 8002354:	461a      	mov	r2, r3
 8002356:	2364      	movs	r3, #100	; 0x64
 8002358:	fb03 f302 	mul.w	r3, r3, r2
 800235c:	2b00      	cmp	r3, #0
 800235e:	da01      	bge.n	8002364 <golfinho_motion_info_timer_callback+0x44>
 8002360:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002364:	131b      	asrs	r3, r3, #12
 8002366:	461a      	mov	r2, r3
 8002368:	4b72      	ldr	r3, [pc, #456]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f103 0408 	add.w	r4, r3, #8
 8002370:	4610      	mov	r0, r2
 8002372:	f7fe f829 	bl	80003c8 <__aeabi_i2f>
 8002376:	4603      	mov	r3, r0
 8002378:	6023      	str	r3, [r4, #0]
 800237a:	e005      	b.n	8002388 <golfinho_motion_info_timer_callback+0x68>
		else
		   golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 800237c:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	3308      	adds	r3, #8
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

		if(digital_data_input_auto[4]) //break
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <golfinho_motion_info_timer_callback+0x218>)
 800238a:	791b      	ldrb	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <golfinho_motion_info_timer_callback+0x9c>
	    	golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_auto[3]*100/4096;
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <golfinho_motion_info_timer_callback+0x21c>)
 8002392:	88db      	ldrh	r3, [r3, #6]
 8002394:	461a      	mov	r2, r3
 8002396:	2364      	movs	r3, #100	; 0x64
 8002398:	fb03 f302 	mul.w	r3, r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	da01      	bge.n	80023a4 <golfinho_motion_info_timer_callback+0x84>
 80023a0:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80023a4:	131b      	asrs	r3, r3, #12
 80023a6:	461a      	mov	r2, r3
 80023a8:	4b62      	ldr	r3, [pc, #392]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	f103 040c 	add.w	r4, r3, #12
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7fe f809 	bl	80003c8 <__aeabi_i2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	e005      	b.n	80023c8 <golfinho_motion_info_timer_callback+0xa8>
		else
	    	golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 80023bc:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	330c      	adds	r3, #12
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

		golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 80023c8:	4b5d      	ldr	r3, [pc, #372]	; (8002540 <golfinho_motion_info_timer_callback+0x220>)
 80023ca:	891b      	ldrh	r3, [r3, #8]
 80023cc:	461a      	mov	r2, r3
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	fb03 f302 	mul.w	r3, r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	da01      	bge.n	80023dc <golfinho_motion_info_timer_callback+0xbc>
 80023d8:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80023dc:	131b      	asrs	r3, r3, #12
 80023de:	461a      	mov	r2, r3
 80023e0:	4b54      	ldr	r3, [pc, #336]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f103 0410 	add.w	r4, r3, #16
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7fd ffed 	bl	80003c8 <__aeabi_i2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	6023      	str	r3, [r4, #0]
		golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 80023f2:	4b53      	ldr	r3, [pc, #332]	; (8002540 <golfinho_motion_info_timer_callback+0x220>)
 80023f4:	895b      	ldrh	r3, [r3, #10]
 80023f6:	461a      	mov	r2, r3
 80023f8:	2364      	movs	r3, #100	; 0x64
 80023fa:	fb03 f302 	mul.w	r3, r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da01      	bge.n	8002406 <golfinho_motion_info_timer_callback+0xe6>
 8002402:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002406:	131b      	asrs	r3, r3, #12
 8002408:	461a      	mov	r2, r3
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f103 0414 	add.w	r4, r3, #20
 8002412:	4610      	mov	r0, r2
 8002414:	f7fd ffd8 	bl	80003c8 <__aeabi_i2f>
 8002418:	4603      	mov	r3, r0
 800241a:	6023      	str	r3, [r4, #0]
 800241c:	e073      	b.n	8002506 <golfinho_motion_info_timer_callback+0x1e6>
			}else {

				   golfinho_motion_info_gpio_output_msg.data.data[1]=raw;
 800241e:	4b44      	ldr	r3, [pc, #272]	; (8002530 <golfinho_motion_info_timer_callback+0x210>)
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	1d1c      	adds	r4, r3, #4
 8002428:	4610      	mov	r0, r2
 800242a:	f7fd ffc9 	bl	80003c0 <__aeabi_ui2f>
 800242e:	4603      	mov	r3, r0
 8002430:	6023      	str	r3, [r4, #0]

				if(digital_data_input_manual[3]) //acelerador
 8002432:	4b44      	ldr	r3, [pc, #272]	; (8002544 <golfinho_motion_info_timer_callback+0x224>)
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d015      	beq.n	8002466 <golfinho_motion_info_timer_callback+0x146>
			        golfinho_motion_info_gpio_output_msg.data.data[2]=analog_data_input_manual[2]*100/4096;
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <golfinho_motion_info_timer_callback+0x220>)
 800243c:	889b      	ldrh	r3, [r3, #4]
 800243e:	461a      	mov	r2, r3
 8002440:	2364      	movs	r3, #100	; 0x64
 8002442:	fb03 f302 	mul.w	r3, r3, r2
 8002446:	2b00      	cmp	r3, #0
 8002448:	da01      	bge.n	800244e <golfinho_motion_info_timer_callback+0x12e>
 800244a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800244e:	131b      	asrs	r3, r3, #12
 8002450:	461a      	mov	r2, r3
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f103 0408 	add.w	r4, r3, #8
 800245a:	4610      	mov	r0, r2
 800245c:	f7fd ffb4 	bl	80003c8 <__aeabi_i2f>
 8002460:	4603      	mov	r3, r0
 8002462:	6023      	str	r3, [r4, #0]
 8002464:	e005      	b.n	8002472 <golfinho_motion_info_timer_callback+0x152>
				else
			        golfinho_motion_info_gpio_output_msg.data.data[2]=0;
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	3308      	adds	r3, #8
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

			    if(digital_data_input_manual[4]) //freio
 8002472:	4b34      	ldr	r3, [pc, #208]	; (8002544 <golfinho_motion_info_timer_callback+0x224>)
 8002474:	791b      	ldrb	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <golfinho_motion_info_timer_callback+0x186>
			    	golfinho_motion_info_gpio_output_msg.data.data[3]=analog_data_input_manual[3]*100/4096;
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <golfinho_motion_info_timer_callback+0x220>)
 800247c:	88db      	ldrh	r3, [r3, #6]
 800247e:	461a      	mov	r2, r3
 8002480:	2364      	movs	r3, #100	; 0x64
 8002482:	fb03 f302 	mul.w	r3, r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	da01      	bge.n	800248e <golfinho_motion_info_timer_callback+0x16e>
 800248a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800248e:	131b      	asrs	r3, r3, #12
 8002490:	461a      	mov	r2, r3
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f103 040c 	add.w	r4, r3, #12
 800249a:	4610      	mov	r0, r2
 800249c:	f7fd ff94 	bl	80003c8 <__aeabi_i2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	6023      	str	r3, [r4, #0]
 80024a4:	e005      	b.n	80024b2 <golfinho_motion_info_timer_callback+0x192>
			    else
			    	golfinho_motion_info_gpio_output_msg.data.data[3]=0;
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	330c      	adds	r3, #12
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

				golfinho_motion_info_gpio_output_msg.data.data[4]=analog_data_input_manual[4]*100/4096; // batery car
 80024b2:	4b23      	ldr	r3, [pc, #140]	; (8002540 <golfinho_motion_info_timer_callback+0x220>)
 80024b4:	891b      	ldrh	r3, [r3, #8]
 80024b6:	461a      	mov	r2, r3
 80024b8:	2364      	movs	r3, #100	; 0x64
 80024ba:	fb03 f302 	mul.w	r3, r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da01      	bge.n	80024c6 <golfinho_motion_info_timer_callback+0x1a6>
 80024c2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80024c6:	131b      	asrs	r3, r3, #12
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f103 0410 	add.w	r4, r3, #16
 80024d2:	4610      	mov	r0, r2
 80024d4:	f7fd ff78 	bl	80003c8 <__aeabi_i2f>
 80024d8:	4603      	mov	r3, r0
 80024da:	6023      	str	r3, [r4, #0]
				golfinho_motion_info_gpio_output_msg.data.data[5]=analog_data_input_manual[5]*100/4096; // batery system
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <golfinho_motion_info_timer_callback+0x220>)
 80024de:	895b      	ldrh	r3, [r3, #10]
 80024e0:	461a      	mov	r2, r3
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	fb03 f302 	mul.w	r3, r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da01      	bge.n	80024f0 <golfinho_motion_info_timer_callback+0x1d0>
 80024ec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80024f0:	131b      	asrs	r3, r3, #12
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f103 0414 	add.w	r4, r3, #20
 80024fc:	4610      	mov	r0, r2
 80024fe:	f7fd ff63 	bl	80003c8 <__aeabi_i2f>
 8002502:	4603      	mov	r3, r0
 8002504:	6023      	str	r3, [r4, #0]
   	         }

		// Publish the message
		rcl_ret_t ret = rcl_publish(&ros2_motion_info_pub,&golfinho_motion_info_gpio_output_msg, NULL);
 8002506:	2200      	movs	r2, #0
 8002508:	490a      	ldr	r1, [pc, #40]	; (8002534 <golfinho_motion_info_timer_callback+0x214>)
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <golfinho_motion_info_timer_callback+0x228>)
 800250c:	f008 f832 	bl	800a574 <rcl_publish>
 8002510:	6178      	str	r0, [r7, #20]
		if (ret != RCL_RET_OK)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <golfinho_motion_info_timer_callback+0x202>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002518:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800251c:	480b      	ldr	r0, [pc, #44]	; (800254c <golfinho_motion_info_timer_callback+0x22c>)
 800251e:	f015 f9b5 	bl	801788c <iprintf>
		}
}
 8002522:	bf00      	nop
 8002524:	371c      	adds	r7, #28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	bf00      	nop
 800252c:	20003204 	.word	0x20003204
 8002530:	200082ec 	.word	0x200082ec
 8002534:	20008278 	.word	0x20008278
 8002538:	2000321c 	.word	0x2000321c
 800253c:	20003224 	.word	0x20003224
 8002540:	20003210 	.word	0x20003210
 8002544:	20003208 	.word	0x20003208
 8002548:	20008104 	.word	0x20008104
 800254c:	08018fcc 	.word	0x08018fcc

08002550 <receive_commands_from_ros_callback>:

void receive_commands_from_ros_callback(const void * msgin){
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]


	const std_msgs__msg__UInt16MultiArray *receive_command_ros_msg;

	if (msgin != NULL){
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d02a      	beq.n	80025b4 <receive_commands_from_ros_callback+0x64>
		receive_command_ros_msg = (const std_msgs__msg__UInt16MultiArray *)msgin;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	60fb      	str	r3, [r7, #12]

		digital_data_input_auto[1]= receive_command_ros_msg->data.data[0]; // key_switch
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <receive_commands_from_ros_callback+0x70>)
 800256c:	705a      	strb	r2, [r3, #1]
		digital_data_input_auto[2]= receive_command_ros_msg->data.data[1]; // operation_modo
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	3302      	adds	r3, #2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <receive_commands_from_ros_callback+0x70>)
 800257a:	709a      	strb	r2, [r3, #2]
		flg=digital_data_input_auto[2];
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <receive_commands_from_ros_callback+0x70>)
 800257e:	789a      	ldrb	r2, [r3, #2]
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <receive_commands_from_ros_callback+0x74>)
 8002582:	701a      	strb	r2, [r3, #0]
		digital_data_input_auto[3]= receive_command_ros_msg->data.data[2];  // throttle_ switch
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	3304      	adds	r3, #4
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <receive_commands_from_ros_callback+0x70>)
 8002590:	70da      	strb	r2, [r3, #3]
		digital_data_input_auto[4]= receive_command_ros_msg->data.data[3];  // break_ switch
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	3306      	adds	r3, #6
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <receive_commands_from_ros_callback+0x70>)
 800259e:	711a      	strb	r2, [r3, #4]

		analog_data_input_auto[2]= receive_command_ros_msg->data.data[4]; // throttle analog
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	891a      	ldrh	r2, [r3, #8]
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <receive_commands_from_ros_callback+0x78>)
 80025a8:	809a      	strh	r2, [r3, #4]
		analog_data_input_auto[3]= receive_command_ros_msg->data.data[5]; // break analog
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	895a      	ldrh	r2, [r3, #10]
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <receive_commands_from_ros_callback+0x78>)
 80025b2:	80da      	strh	r2, [r3, #6]

	}
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000321c 	.word	0x2000321c
 80025c4:	20003204 	.word	0x20003204
 80025c8:	20003224 	.word	0x20003224

080025cc <golfinho_imu_timer_callback>:

void golfinho_imu_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 80025d8:	f240 43d2 	movw	r3, #1234	; 0x4d2
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=10;
 80025de:	230a      	movs	r3, #10
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d02a      	beq.n	800263e <golfinho_imu_timer_callback+0x72>

		sprintf(imu_.header.frame_id.data, "%d_%d", seq_no, device_id);
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <golfinho_imu_timer_callback+0x7c>)
 80025ea:	6898      	ldr	r0, [r3, #8]
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <golfinho_imu_timer_callback+0x80>)
 80025f2:	f015 fa1d 	bl	8017a30 <siprintf>
		imu_.header.frame_id.size = strlen(imu_.header.frame_id.data);
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <golfinho_imu_timer_callback+0x7c>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd fe22 	bl	8000244 <strlen>
 8002600:	4603      	mov	r3, r0
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <golfinho_imu_timer_callback+0x7c>)
 8002604:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	4619      	mov	r1, r3
 800260c:	2001      	movs	r0, #1
 800260e:	f000 fb53 	bl	8002cb8 <clock_gettime>
		imu_.header.stamp.sec = ts.tv_sec;
 8002612:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <golfinho_imu_timer_callback+0x7c>)
 8002618:	601a      	str	r2, [r3, #0]
		imu_.header.stamp.nanosec = ts.tv_nsec;
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	461a      	mov	r2, r3
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <golfinho_imu_timer_callback+0x7c>)
 8002620:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_imu_pub,&imu_, NULL);
 8002622:	2200      	movs	r2, #0
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <golfinho_imu_timer_callback+0x7c>)
 8002626:	480a      	ldr	r0, [pc, #40]	; (8002650 <golfinho_imu_timer_callback+0x84>)
 8002628:	f007 ffa4 	bl	800a574 <rcl_publish>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <golfinho_imu_timer_callback+0x72>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 8002634:	f240 314a 	movw	r1, #842	; 0x34a
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <golfinho_imu_timer_callback+0x88>)
 800263a:	f015 f927 	bl	801788c <iprintf>
		}
}
}
 800263e:	bf00      	nop
 8002640:	3730      	adds	r7, #48	; 0x30
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20008110 	.word	0x20008110
 800264c:	08018ff4 	.word	0x08018ff4
 8002650:	200068d0 	.word	0x200068d0
 8002654:	08018fcc 	.word	0x08018fcc

08002658 <golfinho_gps_timer_callback>:



void golfinho_gps_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=1234;
 8002664:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=11;
 800266a:	230b      	movs	r3, #11
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28

	(void) last_call_time;

	if (timer != NULL) {
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d02a      	beq.n	80026ca <golfinho_gps_timer_callback+0x72>

		sprintf(gps_.header.frame_id.data, "%d_%d", seq_no, device_id);
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <golfinho_gps_timer_callback+0x7c>)
 8002676:	6898      	ldr	r0, [r3, #8]
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267c:	4916      	ldr	r1, [pc, #88]	; (80026d8 <golfinho_gps_timer_callback+0x80>)
 800267e:	f015 f9d7 	bl	8017a30 <siprintf>
		gps_.header.frame_id.size = strlen(gps_.header.frame_id.data);
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <golfinho_gps_timer_callback+0x7c>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fddc 	bl	8000244 <strlen>
 800268c:	4603      	mov	r3, r0
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <golfinho_gps_timer_callback+0x7c>)
 8002690:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 8002692:	f107 0310 	add.w	r3, r7, #16
 8002696:	4619      	mov	r1, r3
 8002698:	2001      	movs	r0, #1
 800269a:	f000 fb0d 	bl	8002cb8 <clock_gettime>
		gps_.header.stamp.sec = ts.tv_sec;
 800269e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <golfinho_gps_timer_callback+0x7c>)
 80026a4:	601a      	str	r2, [r3, #0]
		gps_.header.stamp.nanosec = ts.tv_nsec;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <golfinho_gps_timer_callback+0x7c>)
 80026ac:	605a      	str	r2, [r3, #4]

		rcl_ret_t ret = rcl_publish(&ros2_gps_pub,&gps_, NULL);
 80026ae:	2200      	movs	r2, #0
 80026b0:	4908      	ldr	r1, [pc, #32]	; (80026d4 <golfinho_gps_timer_callback+0x7c>)
 80026b2:	480a      	ldr	r0, [pc, #40]	; (80026dc <golfinho_gps_timer_callback+0x84>)
 80026b4:	f007 ff5e 	bl	800a574 <rcl_publish>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <golfinho_gps_timer_callback+0x72>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 80026c0:	f240 3167 	movw	r1, #871	; 0x367
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <golfinho_gps_timer_callback+0x88>)
 80026c6:	f015 f8e1 	bl	801788c <iprintf>
		}
   }
}
 80026ca:	bf00      	nop
 80026cc:	3730      	adds	r7, #48	; 0x30
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20006910 	.word	0x20006910
 80026d8:	08018ff4 	.word	0x08018ff4
 80026dc:	20008334 	.word	0x20008334
 80026e0:	08018fcc 	.word	0x08018fcc

080026e4 <golfinho_joint_steering_timer_callback>:



void golfinho_joint_steering_timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	e9c7 2300 	strd	r2, r3, [r7]
	int device_id=012;
 80026f0:	230a      	movs	r3, #10
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	int seq_no=01;
 80026f4:	2301      	movs	r3, #1
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
	double data0,data1,data2;

	(void) last_call_time;

	if (timer != NULL) {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d033      	beq.n	8002766 <golfinho_joint_steering_timer_callback+0x82>

		sprintf(joint_steering.header.frame_id.data, "%d_%d", seq_no, device_id);
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 8002700:	6898      	ldr	r0, [r3, #8]
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002706:	491b      	ldr	r1, [pc, #108]	; (8002774 <golfinho_joint_steering_timer_callback+0x90>)
 8002708:	f015 f992 	bl	8017a30 <siprintf>
		joint_steering.header.frame_id.size = strlen(joint_steering.header.frame_id.data);
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd fd97 	bl	8000244 <strlen>
 8002716:	4603      	mov	r3, r0
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 800271a:	60d3      	str	r3, [r2, #12]

		// Fill the message timestamp
		struct timespec ts;
		clock_gettime(CLOCK_REALTIME, &ts);
 800271c:	f107 0310 	add.w	r3, r7, #16
 8002720:	4619      	mov	r1, r3
 8002722:	2001      	movs	r0, #1
 8002724:	f000 fac8 	bl	8002cb8 <clock_gettime>
		joint_steering.header.stamp.sec = ts.tv_sec;
 8002728:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 800272e:	601a      	str	r2, [r3, #0]
		joint_steering.header.stamp.nanosec = ts.tv_nsec;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	461a      	mov	r2, r3
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 8002736:	605a      	str	r2, [r3, #4]

		joint_steering.position.data=1;
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 800273a:	2201      	movs	r2, #1
 800273c:	621a      	str	r2, [r3, #32]
		joint_steering.velocity.data=2;
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 8002740:	2202      	movs	r2, #2
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
		joint_steering.effort.data=3;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 8002746:	2203      	movs	r2, #3
 8002748:	639a      	str	r2, [r3, #56]	; 0x38

		rcl_ret_t ret = rcl_publish(&ros2_joint_steering_pub,&joint_steering, NULL);
 800274a:	2200      	movs	r2, #0
 800274c:	4908      	ldr	r1, [pc, #32]	; (8002770 <golfinho_joint_steering_timer_callback+0x8c>)
 800274e:	480a      	ldr	r0, [pc, #40]	; (8002778 <golfinho_joint_steering_timer_callback+0x94>)
 8002750:	f007 ff10 	bl	800a574 <rcl_publish>
 8002754:	6278      	str	r0, [r7, #36]	; 0x24

		if (ret != RCL_RET_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <golfinho_joint_steering_timer_callback+0x82>
		{
		  printf("Error publishing gpio inputs (line %d)\n", __LINE__);
 800275c:	f240 3189 	movw	r1, #905	; 0x389
 8002760:	4806      	ldr	r0, [pc, #24]	; (800277c <golfinho_joint_steering_timer_callback+0x98>)
 8002762:	f015 f893 	bl	801788c <iprintf>
		}
	}

}
 8002766:	bf00      	nop
 8002768:	3730      	adds	r7, #48	; 0x30
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000829c 	.word	0x2000829c
 8002774:	08018ff4 	.word	0x08018ff4
 8002778:	20008298 	.word	0x20008298
 800277c:	08018fcc 	.word	0x08018fcc

08002780 <ADC_select_channel_break>:


void ADC_select_channel_break (void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_8;
 8002790:	2308      	movs	r3, #8
 8002792:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002794:	2301      	movs	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4805      	ldr	r0, [pc, #20]	; (80027b8 <ADC_select_channel_break+0x38>)
 80027a2:	f001 f88b 	bl	80038bc <HAL_ADC_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <ADC_select_channel_break+0x30>
	  {
	    Error_Handler();
 80027ac:	f000 f992 	bl	8002ad4 <Error_Handler>
	  }
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20006864 	.word	0x20006864

080027bc <ADC_select_channel_Throttle>:

void ADC_select_channel_Throttle (void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_9;
 80027cc:	2309      	movs	r3, #9
 80027ce:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027d0:	2301      	movs	r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	4805      	ldr	r0, [pc, #20]	; (80027f0 <ADC_select_channel_Throttle+0x34>)
 80027da:	f001 f86f 	bl	80038bc <HAL_ADC_ConfigChannel>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <ADC_select_channel_Throttle+0x2c>
	  {
	    Error_Handler();
 80027e4:	f000 f976 	bl	8002ad4 <Error_Handler>
	  }
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20006864 	.word	0x20006864

080027f4 <ADC_select_channel_batery_car>:

void ADC_select_channel_batery_car(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_6;
 8002804:	2306      	movs	r3, #6
 8002806:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002808:	2301      	movs	r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <ADC_select_channel_batery_car+0x34>)
 8002812:	f001 f853 	bl	80038bc <HAL_ADC_ConfigChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <ADC_select_channel_batery_car+0x2c>
	  {
	    Error_Handler();
 800281c:	f000 f95a 	bl	8002ad4 <Error_Handler>
	  }
}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20006864 	.word	0x20006864

0800282c <ADC_select_channel_system_batery>:

void ADC_select_channel_system_batery(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_7;
 800283c:	2307      	movs	r3, #7
 800283e:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002840:	2301      	movs	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <ADC_select_channel_system_batery+0x34>)
 800284a:	f001 f837 	bl	80038bc <HAL_ADC_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <ADC_select_channel_system_batery+0x2c>
	  {
	    Error_Handler();
 8002854:	f000 f93e 	bl	8002ad4 <Error_Handler>
	  }
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20006864 	.word	0x20006864

08002864 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX) != HAL_OK)
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8002870:	2100      	movs	r1, #0
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f001 fbbd 	bl	8003ff2 <HAL_CAN_GetRxMessage>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800287e:	f000 f929 	bl	8002ad4 <Error_Handler>
  }
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20003230 	.word	0x20003230
 8002890:	200068f0 	.word	0x200068f0

08002894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a8:	4b42      	ldr	r3, [pc, #264]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a41      	ldr	r2, [pc, #260]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c0:	4b3c      	ldr	r3, [pc, #240]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	4a3b      	ldr	r2, [pc, #236]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028c6:	f043 0320 	orr.w	r3, r3, #32
 80028ca:	6193      	str	r3, [r2, #24]
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b33      	ldr	r3, [pc, #204]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	4b30      	ldr	r3, [pc, #192]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4a2f      	ldr	r2, [pc, #188]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028f6:	f043 0308 	orr.w	r3, r3, #8
 80028fa:	6193      	str	r3, [r2, #24]
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <MX_GPIO_Init+0x120>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002908:	2200      	movs	r2, #0
 800290a:	f244 013f 	movw	r1, #16447	; 0x403f
 800290e:	482a      	ldr	r0, [pc, #168]	; (80029b8 <MX_GPIO_Init+0x124>)
 8002910:	f002 feb9 	bl	8005686 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8002914:	2200      	movs	r2, #0
 8002916:	f640 4104 	movw	r1, #3076	; 0xc04
 800291a:	4828      	ldr	r0, [pc, #160]	; (80029bc <MX_GPIO_Init+0x128>)
 800291c:	f002 feb3 	bl	8005686 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC0 PC1 PC2
                           PC3 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8002920:	f244 033f 	movw	r3, #16447	; 0x403f
 8002924:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2302      	movs	r3, #2
 8002930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4619      	mov	r1, r3
 8002938:	481f      	ldr	r0, [pc, #124]	; (80029b8 <MX_GPIO_Init+0x124>)
 800293a:	f002 fcf9 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800293e:	f640 4304 	movw	r3, #3076	; 0xc04
 8002942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002944:	2301      	movs	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2302      	movs	r3, #2
 800294e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	4619      	mov	r1, r3
 8002956:	4819      	ldr	r0, [pc, #100]	; (80029bc <MX_GPIO_Init+0x128>)
 8002958:	f002 fcea 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800295c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	4619      	mov	r1, r3
 8002970:	4812      	ldr	r0, [pc, #72]	; (80029bc <MX_GPIO_Init+0x128>)
 8002972:	f002 fcdd 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002976:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800297a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	4619      	mov	r1, r3
 800298a:	480b      	ldr	r0, [pc, #44]	; (80029b8 <MX_GPIO_Init+0x124>)
 800298c:	f002 fcd0 	bl	8005330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	4619      	mov	r1, r3
 80029a4:	4806      	ldr	r0, [pc, #24]	; (80029c0 <MX_GPIO_Init+0x12c>)
 80029a6:	f002 fcc3 	bl	8005330 <HAL_GPIO_Init>

}
 80029aa:	bf00      	nop
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40010800 	.word	0x40010800

080029c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c8:	f000 fc4c 	bl	8003264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029cc:	f000 f813 	bl	80029f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d0:	f7ff ff60 	bl	8002894 <MX_GPIO_Init>
  MX_DMA_Init();
 80029d4:	f7fe fc5e 	bl	8001294 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80029d8:	f000 fb70 	bl	80030bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80029dc:	f7fe f88a 	bl	8000af4 <MX_ADC1_Init>
  MX_DAC_Init();
 80029e0:	f7fe fbe8 	bl	80011b4 <MX_DAC_Init>
  MX_CAN_Init();
 80029e4:	f7fe f90a 	bl	8000bfc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80029e8:	f004 fd4a 	bl	8007480 <osKernelInitialize>
  MX_FREERTOS_Init();
 80029ec:	f7fe fd26 	bl	800143c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80029f0:	f004 fd78 	bl	80074e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 80029f4:	e7fe      	b.n	80029f4 <main+0x30>

080029f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b096      	sub	sp, #88	; 0x58
 80029fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a00:	2228      	movs	r2, #40	; 0x28
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f014 fe85 	bl	8017714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
 8002a28:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a34:	2300      	movs	r3, #0
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a50:	4618      	mov	r0, r3
 8002a52:	f002 fe31 	bl	80056b8 <HAL_RCC_OscConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002a5c:	f000 f83a 	bl	8002ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a60:	230f      	movs	r3, #15
 8002a62:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a64:	2302      	movs	r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a76:	f107 031c 	add.w	r3, r7, #28
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 f89b 	bl	8005bb8 <HAL_RCC_ClockConfig>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a88:	f000 f824 	bl	8002ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f003 fa57 	bl	8005f4c <HAL_RCCEx_PeriphCLKConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002aa4:	f000 f816 	bl	8002ad4 <Error_Handler>
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	3758      	adds	r7, #88	; 0x58
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ac2:	f000 fbe5 	bl	8003290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40012c00 	.word	0x40012c00

08002ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad8:	b672      	cpsid	i
}
 8002ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002adc:	e7fe      	b.n	8002adc <Error_Handler+0x8>
	...

08002ae0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <microros_allocate+0x3c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <microros_allocate+0x3c>)
 8002af8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <microros_allocate+0x40>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <microros_allocate+0x40>)
 8002b08:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe f900 	bl	8000d10 <pvPortMallocMicroROS>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20003238 	.word	0x20003238
 8002b20:	2000323c 	.word	0x2000323c

08002b24 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00c      	beq.n	8002b4e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe fa09 	bl	8000f4c <getBlockSize>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <microros_deallocate+0x34>)
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <microros_deallocate+0x34>)
 8002b46:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe f9a5 	bl	8000e98 <vPortFreeMicroROS>
  }
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000323c 	.word	0x2000323c

08002b5c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002b68:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <microros_reallocate+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4413      	add	r3, r2
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <microros_reallocate+0x64>)
 8002b76:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <microros_reallocate+0x68>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4413      	add	r3, r2
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <microros_reallocate+0x68>)
 8002b86:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d104      	bne.n	8002b98 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002b8e:	68b8      	ldr	r0, [r7, #8]
 8002b90:	f7fe f8be 	bl	8000d10 <pvPortMallocMicroROS>
 8002b94:	4603      	mov	r3, r0
 8002b96:	e00e      	b.n	8002bb6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7fe f9d7 	bl	8000f4c <getBlockSize>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <microros_reallocate+0x68>)
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <microros_reallocate+0x68>)
 8002baa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f7fe f9e8 	bl	8000f84 <pvPortReallocMicroROS>
 8002bb4:	4603      	mov	r3, r0
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20003238 	.word	0x20003238
 8002bc4:	2000323c 	.word	0x2000323c

08002bc8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <microros_zero_allocate+0x48>)
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <microros_zero_allocate+0x48>)
 8002be6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <microros_zero_allocate+0x4c>)
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <microros_zero_allocate+0x4c>)
 8002bfa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7fe f9fa 	bl	8000ff8 <pvPortCallocMicroROS>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20003238 	.word	0x20003238
 8002c14:	2000323c 	.word	0x2000323c

08002c18 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002c18:	b5b0      	push	{r4, r5, r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002c28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c2c:	a320      	add	r3, pc, #128	; (adr r3, 8002cb0 <UTILS_NanosecondsToTimespec+0x98>)
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f7fd fd93 	bl	800075c <__aeabi_ldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c44:	a31a      	add	r3, pc, #104	; (adr r3, 8002cb0 <UTILS_NanosecondsToTimespec+0x98>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fd87 	bl	800075c <__aeabi_ldivmod>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da1f      	bge.n	8002c9a <UTILS_NanosecondsToTimespec+0x82>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <UTILS_NanosecondsToTimespec+0x90>)
 8002c60:	fb82 1203 	smull	r1, r2, r2, r3
 8002c64:	1712      	asrs	r2, r2, #28
 8002c66:	17db      	asrs	r3, r3, #31
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	461a      	mov	r2, r3
 8002c78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002c7c:	1a84      	subs	r4, r0, r2
 8002c7e:	eb61 0503 	sbc.w	r5, r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	e9c3 4500 	strd	r4, r5, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4907      	ldr	r1, [pc, #28]	; (8002cac <UTILS_NanosecondsToTimespec+0x94>)
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	609a      	str	r2, [r3, #8]
    }
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	44b82fa1 	.word	0x44b82fa1
 8002cac:	3b9aca00 	.word	0x3b9aca00
 8002cb0:	3b9aca00 	.word	0x3b9aca00
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
    TimeOut_t xCurrentTime = { 0 };
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002cda:	f107 0308 	add.w	r3, r7, #8
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f006 f8b2 	bl	8008e48 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d08:	1884      	adds	r4, r0, r2
 8002d0a:	eb41 0503 	adc.w	r5, r1, r3
 8002d0e:	e9c7 4504 	strd	r4, r5, [r7, #16]

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002d12:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d16:	4622      	mov	r2, r4
 8002d18:	462b      	mov	r3, r5
 8002d1a:	f04f 0000 	mov.w	r0, #0
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	0159      	lsls	r1, r3, #5
 8002d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d28:	0150      	lsls	r0, r2, #5
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	1b12      	subs	r2, r2, r4
 8002d30:	eb63 0305 	sbc.w	r3, r3, r5
 8002d34:	f04f 0000 	mov.w	r0, #0
 8002d38:	f04f 0100 	mov.w	r1, #0
 8002d3c:	0259      	lsls	r1, r3, #9
 8002d3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d42:	0250      	lsls	r0, r2, #9
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	1912      	adds	r2, r2, r4
 8002d4a:	eb45 0303 	adc.w	r3, r5, r3
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	0199      	lsls	r1, r3, #6
 8002d58:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002d5c:	0190      	lsls	r0, r2, #6
 8002d5e:	1a80      	subs	r0, r0, r2
 8002d60:	eb61 0103 	sbc.w	r1, r1, r3
 8002d64:	eb10 0804 	adds.w	r8, r0, r4
 8002d68:	eb41 0905 	adc.w	r9, r1, r5
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	4640      	mov	r0, r8
 8002d70:	4649      	mov	r1, r9
 8002d72:	f7ff ff51 	bl	8002c18 <UTILS_NanosecondsToTimespec>

    return 0;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_MspInit+0x68>)
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	4a17      	ldr	r2, [pc, #92]	; (8002dec <HAL_MspInit+0x68>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6193      	str	r3, [r2, #24]
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_MspInit+0x68>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_MspInit+0x68>)
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_MspInit+0x68>)
 8002da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dac:	61d3      	str	r3, [r2, #28]
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_MspInit+0x68>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	f06f 0001 	mvn.w	r0, #1
 8002dc2:	f001 fd24 	bl	800480e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_MspInit+0x6c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_MspInit+0x6c>)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010000 	.word	0x40010000

08002df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8002e04:	2200      	movs	r2, #0
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	2019      	movs	r0, #25
 8002e0a:	f001 fd00 	bl	800480e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002e0e:	2019      	movs	r0, #25
 8002e10:	f001 fd19 	bl	8004846 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_InitTick+0x9c>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_InitTick+0x9c>)
 8002e1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e1e:	6193      	str	r3, [r2, #24]
 8002e20:	4b1b      	ldr	r3, [pc, #108]	; (8002e90 <HAL_InitTick+0x9c>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e2c:	f107 0210 	add.w	r2, r7, #16
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 f83a 	bl	8005eb0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002e3c:	f003 f824 	bl	8005e88 <HAL_RCC_GetPCLK2Freq>
 8002e40:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <HAL_InitTick+0xa0>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9b      	lsrs	r3, r3, #18
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <HAL_InitTick+0xa8>)
 8002e54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002e70:	4809      	ldr	r0, [pc, #36]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e72:	f003 fa07 	bl	8006284 <HAL_TIM_Base_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002e7c:	4806      	ldr	r0, [pc, #24]	; (8002e98 <HAL_InitTick+0xa4>)
 8002e7e:	f003 fa59 	bl	8006334 <HAL_TIM_Base_Start_IT>
 8002e82:	4603      	mov	r3, r0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3730      	adds	r7, #48	; 0x30
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000
 8002e94:	431bde83 	.word	0x431bde83
 8002e98:	200083a0 	.word	0x200083a0
 8002e9c:	40012c00 	.word	0x40012c00

08002ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <NMI_Handler+0x4>

08002ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <HardFault_Handler+0x4>

08002eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <MemManage_Handler+0x4>

08002eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb6:	e7fe      	b.n	8002eb6 <BusFault_Handler+0x4>

08002eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <UsageFault_Handler+0x4>

08002ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
	...

08002ecc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <DMA1_Channel6_IRQHandler+0x10>)
 8002ed2:	f001 ffc3 	bl	8004e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200083e8 	.word	0x200083e8

08002ee0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <DMA1_Channel7_IRQHandler+0x10>)
 8002ee6:	f001 ffb9 	bl	8004e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2000842c 	.word	0x2000842c

08002ef4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002efa:	f001 f9b0 	bl	800425e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20006894 	.word	0x20006894

08002f08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <TIM1_UP_IRQHandler+0x10>)
 8002f0e:	f003 fa71 	bl	80063f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	200083a0 	.word	0x200083a0

08002f1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <USART2_IRQHandler+0x10>)
 8002f22:	f003 fd65 	bl	80069f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20008470 	.word	0x20008470

08002f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
	return 1;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <_kill>:

int _kill(int pid, int sig)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f48:	f014 fb3c 	bl	80175c4 <__errno>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2216      	movs	r2, #22
 8002f50:	601a      	str	r2, [r3, #0]
	return -1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_exit>:

void _exit (int status)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ffe7 	bl	8002f3e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f70:	e7fe      	b.n	8002f70 <_exit+0x12>

08002f72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	e00a      	b.n	8002f9a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f84:	f3af 8000 	nop.w
 8002f88:	4601      	mov	r1, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	60ba      	str	r2, [r7, #8]
 8002f90:	b2ca      	uxtb	r2, r1
 8002f92:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	dbf0      	blt.n	8002f84 <_read+0x12>
	}

return len;
 8002fa2:	687b      	ldr	r3, [r7, #4]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e009      	b.n	8002fd2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	60ba      	str	r2, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbf1      	blt.n	8002fbe <_write+0x12>
	}
	return len;
 8002fda:	687b      	ldr	r3, [r7, #4]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <_sbrk+0x5c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <_sbrk+0x16>
 8002ff4:	4b12      	ldr	r3, [pc, #72]	; (8003040 <_sbrk+0x5c>)
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <_sbrk+0x60>)
 8002ff8:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002ffa:	4b11      	ldr	r3, [pc, #68]	; (8003040 <_sbrk+0x5c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <_sbrk+0x5c>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	441a      	add	r2, r3
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <_sbrk+0x64>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	425b      	negs	r3, r3
 800300e:	490f      	ldr	r1, [pc, #60]	; (800304c <_sbrk+0x68>)
 8003010:	440b      	add	r3, r1
 8003012:	429a      	cmp	r2, r3
 8003014:	d908      	bls.n	8003028 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8003016:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8003018:	f014 fad4 	bl	80175c4 <__errno>
 800301c:	4603      	mov	r3, r0
 800301e:	220c      	movs	r2, #12
 8003020:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003026:	e006      	b.n	8003036 <_sbrk+0x52>

    }

    heap_end += incr;
 8003028:	4b05      	ldr	r3, [pc, #20]	; (8003040 <_sbrk+0x5c>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <_sbrk+0x5c>)
 8003032:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8003034:	68fb      	ldr	r3, [r7, #12]

}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20003244 	.word	0x20003244
 8003044:	2000d6a8 	.word	0x2000d6a8
 8003048:	00000400 	.word	0x00000400
 800304c:	20010000 	.word	0x20010000

08003050 <_close>:

int _close(int file)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	return -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003076:	605a      	str	r2, [r3, #4]
	return 0;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <_isatty>:

int _isatty(int file)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	return 1;
 800308c:	2301      	movs	r3, #1
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
	return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c0:	4b11      	ldr	r3, [pc, #68]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030c2:	4a12      	ldr	r2, [pc, #72]	; (800310c <MX_USART2_UART_Init+0x50>)
 80030c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030f2:	4805      	ldr	r0, [pc, #20]	; (8003108 <MX_USART2_UART_Init+0x4c>)
 80030f4:	f003 fb36 	bl	8006764 <HAL_UART_Init>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030fe:	f7ff fce9 	bl	8002ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20008470 	.word	0x20008470
 800310c:	40004400 	.word	0x40004400

08003110 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a47      	ldr	r2, [pc, #284]	; (8003248 <HAL_UART_MspInit+0x138>)
 800312c:	4293      	cmp	r3, r2
 800312e:	f040 8086 	bne.w	800323e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003132:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_UART_MspInit+0x13c>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4a45      	ldr	r2, [pc, #276]	; (800324c <HAL_UART_MspInit+0x13c>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	61d3      	str	r3, [r2, #28]
 800313e:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_UART_MspInit+0x13c>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_UART_MspInit+0x13c>)
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	4a3f      	ldr	r2, [pc, #252]	; (800324c <HAL_UART_MspInit+0x13c>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6193      	str	r3, [r2, #24]
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_UART_MspInit+0x13c>)
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003162:	2304      	movs	r3, #4
 8003164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	4619      	mov	r1, r3
 8003174:	4836      	ldr	r0, [pc, #216]	; (8003250 <HAL_UART_MspInit+0x140>)
 8003176:	f002 f8db 	bl	8005330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800317a:	2308      	movs	r3, #8
 800317c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	f107 0310 	add.w	r3, r7, #16
 800318a:	4619      	mov	r1, r3
 800318c:	4830      	ldr	r0, [pc, #192]	; (8003250 <HAL_UART_MspInit+0x140>)
 800318e:	f002 f8cf 	bl	8005330 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_UART_MspInit+0x144>)
 8003194:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_UART_MspInit+0x148>)
 8003196:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003198:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_UART_MspInit+0x144>)
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800319e:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031a4:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031b8:	2220      	movs	r2, #32
 80031ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031be:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80031c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031c4:	4823      	ldr	r0, [pc, #140]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031c6:	f001 fc31 	bl	8004a2c <HAL_DMA_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80031d0:	f7ff fc80 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031d8:	639a      	str	r2, [r3, #56]	; 0x38
 80031da:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_UART_MspInit+0x144>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <HAL_UART_MspInit+0x14c>)
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_UART_MspInit+0x150>)
 80031e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_UART_MspInit+0x14c>)
 80031e8:	2210      	movs	r2, #16
 80031ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_UART_MspInit+0x14c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_UART_MspInit+0x14c>)
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_UART_MspInit+0x14c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_UART_MspInit+0x14c>)
 8003200:	2200      	movs	r2, #0
 8003202:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <HAL_UART_MspInit+0x14c>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_UART_MspInit+0x14c>)
 800320c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003212:	4812      	ldr	r0, [pc, #72]	; (800325c <HAL_UART_MspInit+0x14c>)
 8003214:	f001 fc0a 	bl	8004a2c <HAL_DMA_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800321e:	f7ff fc59 	bl	8002ad4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a0d      	ldr	r2, [pc, #52]	; (800325c <HAL_UART_MspInit+0x14c>)
 8003226:	635a      	str	r2, [r3, #52]	; 0x34
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <HAL_UART_MspInit+0x14c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2105      	movs	r1, #5
 8003232:	2026      	movs	r0, #38	; 0x26
 8003234:	f001 faeb 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003238:	2026      	movs	r0, #38	; 0x26
 800323a:	f001 fb04 	bl	8004846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800323e:	bf00      	nop
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40004400 	.word	0x40004400
 800324c:	40021000 	.word	0x40021000
 8003250:	40010800 	.word	0x40010800
 8003254:	200083e8 	.word	0x200083e8
 8003258:	4002006c 	.word	0x4002006c
 800325c:	2000842c 	.word	0x2000842c
 8003260:	40020080 	.word	0x40020080

08003264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x28>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x28>)
 800326e:	f043 0310 	orr.w	r3, r3, #16
 8003272:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f001 fabf 	bl	80047f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	200f      	movs	r0, #15
 800327c:	f7ff fdba 	bl	8002df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7ff fd80 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_IncTick+0x1c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_IncTick+0x20>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a03      	ldr	r2, [pc, #12]	; (80032b0 <HAL_IncTick+0x20>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	2000000c 	.word	0x2000000c
 80032b0:	200084b4 	.word	0x200084b4

080032b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <HAL_GetTick+0x10>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	200084b4 	.word	0x200084b4

080032c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d0:	f7ff fff0 	bl	80032b4 <HAL_GetTick>
 80032d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032e0:	d005      	beq.n	80032ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_Delay+0x44>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ee:	bf00      	nop
 80032f0:	f7ff ffe0 	bl	80032b4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d8f7      	bhi.n	80032f0 <HAL_Delay+0x28>
  {
  }
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000000c 	.word	0x2000000c

08003310 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0ce      	b.n	80034d0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fc00 	bl	8000b54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fc03 	bl	8003b60 <ADC_ConversionStop_Disable>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 80a9 	bne.w	80034be <HAL_ADC_Init+0x1ae>
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 80a5 	bne.w	80034be <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	f043 0202 	orr.w	r2, r3, #2
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4951      	ldr	r1, [pc, #324]	; (80034d8 <HAL_ADC_Init+0x1c8>)
 8003392:	428b      	cmp	r3, r1
 8003394:	d10a      	bne.n	80033ac <HAL_ADC_Init+0x9c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800339e:	d002      	beq.n	80033a6 <HAL_ADC_Init+0x96>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	e004      	b.n	80033b0 <HAL_ADC_Init+0xa0>
 80033a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033aa:	e001      	b.n	80033b0 <HAL_ADC_Init+0xa0>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7b1b      	ldrb	r3, [r3, #12]
 80033b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80033b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d003      	beq.n	80033d2 <HAL_ADC_Init+0xc2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d102      	bne.n	80033d8 <HAL_ADC_Init+0xc8>
 80033d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033d6:	e000      	b.n	80033da <HAL_ADC_Init+0xca>
 80033d8:	2300      	movs	r3, #0
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	7d1b      	ldrb	r3, [r3, #20]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d119      	bne.n	800341c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7b1b      	ldrb	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	035a      	lsls	r2, r3, #13
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e00b      	b.n	800341c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b29      	ldr	r3, [pc, #164]	; (80034dc <HAL_ADC_Init+0x1cc>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	430b      	orrs	r3, r1
 8003442:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	d003      	beq.n	8003456 <HAL_ADC_Init+0x146>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d104      	bne.n	8003460 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	3b01      	subs	r3, #1
 800345c:	051b      	lsls	r3, r3, #20
 800345e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	430a      	orrs	r2, r1
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_ADC_Init+0x1d0>)
 800347c:	4013      	ands	r3, r2
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	429a      	cmp	r2, r3
 8003482:	d10b      	bne.n	800349c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	f023 0303 	bic.w	r3, r3, #3
 8003492:	f043 0201 	orr.w	r2, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800349a:	e018      	b.n	80034ce <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a0:	f023 0312 	bic.w	r3, r3, #18
 80034a4:	f043 0210 	orr.w	r2, r3, #16
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034bc:	e007      	b.n	80034ce <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	f043 0210 	orr.w	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40013c00 	.word	0x40013c00
 80034dc:	ffe1f7fd 	.word	0xffe1f7fd
 80034e0:	ff1f0efe 	.word	0xff1f0efe

080034e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_Start+0x1a>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e098      	b.n	8003630 <HAL_ADC_Start+0x14c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fad0 	bl	8003aac <ADC_Enable>
 800350c:	4603      	mov	r3, r0
 800350e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 8087 	bne.w	8003626 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a41      	ldr	r2, [pc, #260]	; (8003638 <HAL_ADC_Start+0x154>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d105      	bne.n	8003542 <HAL_ADC_Start+0x5e>
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <HAL_ADC_Start+0x158>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d115      	bne.n	800356e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d026      	beq.n	80035aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003564:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800356c:	e01d      	b.n	80035aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2f      	ldr	r2, [pc, #188]	; (800363c <HAL_ADC_Start+0x158>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_ADC_Start+0xaa>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_ADC_Start+0x154>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d10d      	bne.n	80035aa <HAL_ADC_Start+0xc6>
 800358e:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_ADC_Start+0x158>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f023 0206 	bic.w	r2, r3, #6
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80035c2:	e002      	b.n	80035ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0202 	mvn.w	r2, #2
 80035da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035ea:	d113      	bne.n	8003614 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035f0:	4a11      	ldr	r2, [pc, #68]	; (8003638 <HAL_ADC_Start+0x154>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d105      	bne.n	8003602 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80035f6:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_ADC_Start+0x158>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003610:	609a      	str	r2, [r3, #8]
 8003612:	e00c      	b.n	800362e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	e003      	b.n	800362e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40012800 	.word	0x40012800
 800363c:	40012400 	.word	0x40012400

08003640 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_ADC_Stop+0x1a>
 8003656:	2302      	movs	r3, #2
 8003658:	e01a      	b.n	8003690 <HAL_ADC_Stop+0x50>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fa7c 	bl	8003b60 <ADC_ConversionStop_Disable>
 8003668:	4603      	mov	r3, r0
 800366a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80036ae:	f7ff fe01 	bl	80032b4 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e0d3      	b.n	8003882 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d131      	bne.n	800374c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d12a      	bne.n	800374c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80036f6:	e021      	b.n	800373c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fe:	d01d      	beq.n	800373c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_ADC_PollForConversion+0x7e>
 8003706:	f7ff fdd5 	bl	80032b4 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d212      	bcs.n	800373c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0a2      	b.n	8003882 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0d6      	beq.n	80036f8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800374a:	e070      	b.n	800382e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800374c:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_ADC_PollForConversion+0x1f4>)
 800374e:	681c      	ldr	r4, [r3, #0]
 8003750:	2002      	movs	r0, #2
 8003752:	f002 fcb1 	bl	80060b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003756:	4603      	mov	r3, r0
 8003758:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6919      	ldr	r1, [r3, #16]
 8003762:	4b4b      	ldr	r3, [pc, #300]	; (8003890 <HAL_ADC_PollForConversion+0x1f8>)
 8003764:	400b      	ands	r3, r1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_ADC_PollForConversion+0x104>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	4b48      	ldr	r3, [pc, #288]	; (8003894 <HAL_ADC_PollForConversion+0x1fc>)
 8003772:	400b      	ands	r3, r1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_ADC_PollForConversion+0x104>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	4b46      	ldr	r3, [pc, #280]	; (8003898 <HAL_ADC_PollForConversion+0x200>)
 8003780:	400b      	ands	r3, r1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_ADC_PollForConversion+0x100>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68d9      	ldr	r1, [r3, #12]
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_ADC_PollForConversion+0x204>)
 800378e:	400b      	ands	r3, r1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_ADC_PollForConversion+0x100>
 8003794:	2314      	movs	r3, #20
 8003796:	e020      	b.n	80037da <HAL_ADC_PollForConversion+0x142>
 8003798:	2329      	movs	r3, #41	; 0x29
 800379a:	e01e      	b.n	80037da <HAL_ADC_PollForConversion+0x142>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6919      	ldr	r1, [r3, #16]
 80037a2:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_ADC_PollForConversion+0x200>)
 80037a4:	400b      	ands	r3, r1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_ADC_PollForConversion+0x120>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68d9      	ldr	r1, [r3, #12]
 80037b0:	4b3a      	ldr	r3, [pc, #232]	; (800389c <HAL_ADC_PollForConversion+0x204>)
 80037b2:	400b      	ands	r3, r1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_ADC_PollForConversion+0x13c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <HAL_ADC_PollForConversion+0x208>)
 80037c0:	400b      	ands	r3, r1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x140>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_ADC_PollForConversion+0x208>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_ADC_PollForConversion+0x140>
 80037d4:	2354      	movs	r3, #84	; 0x54
 80037d6:	e000      	b.n	80037da <HAL_ADC_PollForConversion+0x142>
 80037d8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80037e0:	e021      	b.n	8003826 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e8:	d01a      	beq.n	8003820 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <HAL_ADC_PollForConversion+0x168>
 80037f0:	f7ff fd60 	bl	80032b4 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d20f      	bcs.n	8003820 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d90b      	bls.n	8003820 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	f043 0204 	orr.w	r2, r3, #4
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e030      	b.n	8003882 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d8d9      	bhi.n	80037e2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0212 	mvn.w	r2, #18
 8003836:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800384e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003852:	d115      	bne.n	8003880 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003858:	2b00      	cmp	r3, #0
 800385a:	d111      	bne.n	8003880 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	bf00      	nop
 800388c:	20000004 	.word	0x20000004
 8003890:	24924924 	.word	0x24924924
 8003894:	00924924 	.word	0x00924924
 8003898:	12492492 	.word	0x12492492
 800389c:	00492492 	.word	0x00492492
 80038a0:	00249249 	.word	0x00249249

080038a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x20>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0dc      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x1da>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d81c      	bhi.n	8003926 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b05      	subs	r3, #5
 80038fe:	221f      	movs	r2, #31
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	4019      	ands	r1, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	3b05      	subs	r3, #5
 8003918:	fa00 f203 	lsl.w	r2, r0, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	635a      	str	r2, [r3, #52]	; 0x34
 8003924:	e03c      	b.n	80039a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b0c      	cmp	r3, #12
 800392c:	d81c      	bhi.n	8003968 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b23      	subs	r3, #35	; 0x23
 8003940:	221f      	movs	r2, #31
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	4019      	ands	r1, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	3b23      	subs	r3, #35	; 0x23
 800395a:	fa00 f203 	lsl.w	r2, r0, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
 8003966:	e01b      	b.n	80039a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b41      	subs	r3, #65	; 0x41
 800397a:	221f      	movs	r2, #31
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	4019      	ands	r1, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	3b41      	subs	r3, #65	; 0x41
 8003994:	fa00 f203 	lsl.w	r2, r0, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d91c      	bls.n	80039e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68d9      	ldr	r1, [r3, #12]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	3b1e      	subs	r3, #30
 80039ba:	2207      	movs	r2, #7
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	4019      	ands	r1, r3
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6898      	ldr	r0, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	3b1e      	subs	r3, #30
 80039d4:	fa00 f203 	lsl.w	r2, r0, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	e019      	b.n	8003a16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6919      	ldr	r1, [r3, #16]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	2207      	movs	r2, #7
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	4019      	ands	r1, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	6898      	ldr	r0, [r3, #8]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d003      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a22:	2b11      	cmp	r3, #17
 8003a24:	d132      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d125      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d126      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d11a      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	0c9a      	lsrs	r2, r3, #18
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a6c:	e002      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f9      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x1b2>
 8003a7a:	e007      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40012400 	.word	0x40012400
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d040      	beq.n	8003b4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <ADC_Enable+0xac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <ADC_Enable+0xb0>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ae8:	e002      	b.n	8003af0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f9      	bne.n	8003aea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003af6:	f7ff fbdd 	bl	80032b4 <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003afc:	e01f      	b.n	8003b3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003afe:	f7ff fbd9 	bl	80032b4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d918      	bls.n	8003b3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d011      	beq.n	8003b3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d1d8      	bne.n	8003afe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000004 	.word	0x20000004
 8003b5c:	431bde83 	.word	0x431bde83

08003b60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12e      	bne.n	8003bd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b8a:	f7ff fb93 	bl	80032b4 <HAL_GetTick>
 8003b8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b90:	e01b      	b.n	8003bca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b92:	f7ff fb8f 	bl	80032b4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d914      	bls.n	8003bca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d10d      	bne.n	8003bca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d0dc      	beq.n	8003b92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0ed      	b.n	8003dd0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d102      	bne.n	8003c06 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7fd f831 	bl	8000c68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c16:	f7ff fb4d 	bl	80032b4 <HAL_GetTick>
 8003c1a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c1c:	e012      	b.n	8003c44 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c1e:	f7ff fb49 	bl	80032b4 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b0a      	cmp	r3, #10
 8003c2a:	d90b      	bls.n	8003c44 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0c5      	b.n	8003dd0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0e5      	beq.n	8003c1e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0202 	bic.w	r2, r2, #2
 8003c60:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c62:	f7ff fb27 	bl	80032b4 <HAL_GetTick>
 8003c66:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c68:	e012      	b.n	8003c90 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c6a:	f7ff fb23 	bl	80032b4 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b0a      	cmp	r3, #10
 8003c76:	d90b      	bls.n	8003c90 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2205      	movs	r2, #5
 8003c88:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e09f      	b.n	8003dd0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e5      	bne.n	8003c6a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7e1b      	ldrb	r3, [r3, #24]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d108      	bne.n	8003cb8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e007      	b.n	8003cc8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7e5b      	ldrb	r3, [r3, #25]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d108      	bne.n	8003ce2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e007      	b.n	8003cf2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7e9b      	ldrb	r3, [r3, #26]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d108      	bne.n	8003d0c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0220 	orr.w	r2, r2, #32
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e007      	b.n	8003d1c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0220 	bic.w	r2, r2, #32
 8003d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7edb      	ldrb	r3, [r3, #27]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d108      	bne.n	8003d36 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0210 	bic.w	r2, r2, #16
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e007      	b.n	8003d46 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0210 	orr.w	r2, r2, #16
 8003d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	7f1b      	ldrb	r3, [r3, #28]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0208 	orr.w	r2, r2, #8
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e007      	b.n	8003d70 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0208 	bic.w	r2, r2, #8
 8003d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7f5b      	ldrb	r3, [r3, #29]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d108      	bne.n	8003d8a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0204 	orr.w	r2, r2, #4
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	e007      	b.n	8003d9a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0204 	bic.w	r2, r2, #4
 8003d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	ea42 0103 	orr.w	r1, r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	1e5a      	subs	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d003      	beq.n	8003dfe <HAL_CAN_ConfigFilter+0x26>
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	f040 80aa 	bne.w	8003f52 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f003 031f 	and.w	r3, r3, #31
 8003e16:	2201      	movs	r2, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d123      	bne.n	8003e80 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3248      	adds	r2, #72	; 0x48
 8003e60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	3348      	adds	r3, #72	; 0x48
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	440b      	add	r3, r1
 8003e7e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d122      	bne.n	8003ece <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003ea8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3248      	adds	r2, #72	; 0x48
 8003eae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ec2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ec4:	6979      	ldr	r1, [r7, #20]
 8003ec6:	3348      	adds	r3, #72	; 0x48
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003ee8:	e007      	b.n	8003efa <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003f14:	e007      	b.n	8003f26 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f44:	f023 0201 	bic.w	r2, r3, #1
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e006      	b.n	8003f60 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
  }
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d12e      	bne.n	8003fdc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f96:	f7ff f98d 	bl	80032b4 <HAL_GetTick>
 8003f9a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f9c:	e012      	b.n	8003fc4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f9e:	f7ff f989 	bl	80032b4 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b0a      	cmp	r3, #10
 8003faa:	d90b      	bls.n	8003fc4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2205      	movs	r2, #5
 8003fbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e012      	b.n	8003fea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e5      	bne.n	8003f9e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e006      	b.n	8003fea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b087      	sub	sp, #28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004006:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d003      	beq.n	8004016 <HAL_CAN_GetRxMessage+0x24>
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b02      	cmp	r3, #2
 8004012:	f040 80f3 	bne.w	80041fc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10e      	bne.n	800403a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0e7      	b.n	800420a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0d8      	b.n	800420a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	331b      	adds	r3, #27
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	4413      	add	r3, r2
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0204 	and.w	r2, r3, #4
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	331b      	adds	r3, #27
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4413      	add	r3, r2
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0d5b      	lsrs	r3, r3, #21
 8004086:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	331b      	adds	r3, #27
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	4413      	add	r3, r2
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	331b      	adds	r3, #27
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4413      	add	r3, r2
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0202 	and.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	331b      	adds	r3, #27
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	4413      	add	r3, r2
 80040ca:	3304      	adds	r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	331b      	adds	r3, #27
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	331b      	adds	r3, #27
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0c1b      	lsrs	r3, r3, #16
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4413      	add	r3, r2
 8004110:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	4413      	add	r3, r2
 8004126:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0a1a      	lsrs	r2, r3, #8
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	4413      	add	r3, r2
 8004140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	0c1a      	lsrs	r2, r3, #16
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	3302      	adds	r3, #2
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	4413      	add	r3, r2
 800415a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0e1a      	lsrs	r2, r3, #24
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	3303      	adds	r3, #3
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	4413      	add	r3, r2
 8004174:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	3304      	adds	r3, #4
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	4413      	add	r3, r2
 800418c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0a1a      	lsrs	r2, r3, #8
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	3305      	adds	r3, #5
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0c1a      	lsrs	r2, r3, #16
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	3306      	adds	r3, #6
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	4413      	add	r3, r2
 80041c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	0e1a      	lsrs	r2, r3, #24
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	3307      	adds	r3, #7
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0220 	orr.w	r2, r2, #32
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	e007      	b.n	80041f8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0220 	orr.w	r2, r2, #32
 80041f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e006      	b.n	800420a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004224:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d002      	beq.n	8004232 <HAL_CAN_ActivateNotification+0x1e>
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d109      	bne.n	8004246 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6959      	ldr	r1, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e006      	b.n	8004254 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
  }
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08a      	sub	sp, #40	; 0x28
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004266:	2300      	movs	r3, #0
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d07c      	beq.n	800439e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d023      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f983 	bl	80045cc <HAL_CAN_TxMailbox0CompleteCallback>
 80042c6:	e016      	b.n	80042f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
 80042da:	e00c      	b.n	80042f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
 80042ee:	e002      	b.n	80042f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f986 	bl	8004602 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d024      	beq.n	800434a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004308:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f962 	bl	80045de <HAL_CAN_TxMailbox1CompleteCallback>
 800431a:	e016      	b.n	800434a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	2b00      	cmp	r3, #0
 8004324:	d004      	beq.n	8004330 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	e00c      	b.n	800434a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
 8004342:	e002      	b.n	800434a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f965 	bl	8004614 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d024      	beq.n	800439e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800435c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f941 	bl	80045f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800436e:	e016      	b.n	800439e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
 8004382:	e00c      	b.n	800439e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d004      	beq.n	8004398 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
 8004396:	e002      	b.n	800439e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f944 	bl	8004626 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00c      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2210      	movs	r2, #16
 80043c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f92a 	bl	8004638 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d002      	beq.n	8004402 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fe fa31 	bl	8002864 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800441c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2210      	movs	r2, #16
 8004424:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d006      	beq.n	8004448 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2208      	movs	r2, #8
 8004440:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f90a 	bl	800465c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f8f2 	bl	800464a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2210      	movs	r2, #16
 8004480:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8f3 	bl	800466e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d006      	beq.n	80044aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2208      	movs	r2, #8
 80044a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8eb 	bl	8004680 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d07b      	beq.n	80045ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d072      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	f043 0302 	orr.w	r3, r3, #2
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	f043 0304 	orr.w	r3, r3, #4
 8004510:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004518:	2b00      	cmp	r3, #0
 800451a:	d043      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004522:	2b00      	cmp	r3, #0
 8004524:	d03e      	beq.n	80045a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800452c:	2b60      	cmp	r3, #96	; 0x60
 800452e:	d02b      	beq.n	8004588 <HAL_CAN_IRQHandler+0x32a>
 8004530:	2b60      	cmp	r3, #96	; 0x60
 8004532:	d82e      	bhi.n	8004592 <HAL_CAN_IRQHandler+0x334>
 8004534:	2b50      	cmp	r3, #80	; 0x50
 8004536:	d022      	beq.n	800457e <HAL_CAN_IRQHandler+0x320>
 8004538:	2b50      	cmp	r3, #80	; 0x50
 800453a:	d82a      	bhi.n	8004592 <HAL_CAN_IRQHandler+0x334>
 800453c:	2b40      	cmp	r3, #64	; 0x40
 800453e:	d019      	beq.n	8004574 <HAL_CAN_IRQHandler+0x316>
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d826      	bhi.n	8004592 <HAL_CAN_IRQHandler+0x334>
 8004544:	2b30      	cmp	r3, #48	; 0x30
 8004546:	d010      	beq.n	800456a <HAL_CAN_IRQHandler+0x30c>
 8004548:	2b30      	cmp	r3, #48	; 0x30
 800454a:	d822      	bhi.n	8004592 <HAL_CAN_IRQHandler+0x334>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d002      	beq.n	8004556 <HAL_CAN_IRQHandler+0x2f8>
 8004550:	2b20      	cmp	r3, #32
 8004552:	d005      	beq.n	8004560 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004554:	e01d      	b.n	8004592 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f043 0308 	orr.w	r3, r3, #8
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800455e:	e019      	b.n	8004594 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f043 0310 	orr.w	r3, r3, #16
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004568:	e014      	b.n	8004594 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f043 0320 	orr.w	r3, r3, #32
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004572:	e00f      	b.n	8004594 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800457c:	e00a      	b.n	8004594 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004586:	e005      	b.n	8004594 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004590:	e000      	b.n	8004594 <HAL_CAN_IRQHandler+0x336>
            break;
 8004592:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80045a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2204      	movs	r2, #4
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f867 	bl	8004692 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80045c4:	bf00      	nop
 80045c6:	3728      	adds	r7, #40	; 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004602:	b480      	push	{r7}
 8004604:	b083      	sub	sp, #12
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr

08004614 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr

08004692 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c0:	4013      	ands	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	60d3      	str	r3, [r2, #12]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f0:	4b04      	ldr	r3, [pc, #16]	; (8004704 <__NVIC_GetPriorityGrouping+0x18>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0307 	and.w	r3, r3, #7
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db0b      	blt.n	8004732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	4906      	ldr	r1, [pc, #24]	; (800473c <__NVIC_EnableIRQ+0x34>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2001      	movs	r0, #1
 800472a:	fa00 f202 	lsl.w	r2, r0, r2
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100

08004740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db0a      	blt.n	800476a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	490c      	ldr	r1, [pc, #48]	; (800478c <__NVIC_SetPriority+0x4c>)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	0112      	lsls	r2, r2, #4
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	440b      	add	r3, r1
 8004764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004768:	e00a      	b.n	8004780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4908      	ldr	r1, [pc, #32]	; (8004790 <__NVIC_SetPriority+0x50>)
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	3b04      	subs	r3, #4
 8004778:	0112      	lsls	r2, r2, #4
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	440b      	add	r3, r1
 800477e:	761a      	strb	r2, [r3, #24]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000e100 	.word	0xe000e100
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f1c3 0307 	rsb	r3, r3, #7
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	bf28      	it	cs
 80047b2:	2304      	movcs	r3, #4
 80047b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d902      	bls.n	80047c4 <NVIC_EncodePriority+0x30>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3b03      	subs	r3, #3
 80047c2:	e000      	b.n	80047c6 <NVIC_EncodePriority+0x32>
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	401a      	ands	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	43d9      	mvns	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ec:	4313      	orrs	r3, r2
         );
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3724      	adds	r7, #36	; 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff4f 	bl	80046a4 <__NVIC_SetPriorityGrouping>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004820:	f7ff ff64 	bl	80046ec <__NVIC_GetPriorityGrouping>
 8004824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	6978      	ldr	r0, [r7, #20]
 800482c:	f7ff ffb2 	bl	8004794 <NVIC_EncodePriority>
 8004830:	4602      	mov	r2, r0
 8004832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ff81 	bl	8004740 <__NVIC_SetPriority>
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	4603      	mov	r3, r0
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff57 	bl	8004708 <__NVIC_EnableIRQ>
}
 800485a:	bf00      	nop
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e014      	b.n	800489e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	791b      	ldrb	r3, [r3, #4]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7fc fcc9 	bl	800121c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	795b      	ldrb	r3, [r3, #5]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_DAC_Start+0x16>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e040      	b.n	800493e <HAL_DAC_Start+0x98>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6819      	ldr	r1, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2201      	movs	r2, #1
 80048d6:	409a      	lsls	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80048f0:	2b3c      	cmp	r3, #60	; 0x3c
 80048f2:	d11d      	bne.n	8004930 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	e014      	b.n	8004930 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	213c      	movs	r1, #60	; 0x3c
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0202 	orr.w	r2, r2, #2
 800492e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3308      	adds	r3, #8
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e004      	b.n	800497c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	3314      	adds	r3, #20
 800497a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	461a      	mov	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	795b      	ldrb	r3, [r3, #5]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_DAC_ConfigChannel+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e03c      	b.n	8004a22 <HAL_DAC_ConfigChannel+0x92>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2202      	movs	r2, #2
 80049b2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4013      	ands	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	22c0      	movs	r2, #192	; 0xc0
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e059      	b.n	8004af6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <HAL_DMA_Init+0xd4>)
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d80f      	bhi.n	8004a6e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <HAL_DMA_Init+0xd8>)
 8004a56:	4413      	add	r3, r2
 8004a58:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <HAL_DMA_Init+0xdc>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	009a      	lsls	r2, r3, #2
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a28      	ldr	r2, [pc, #160]	; (8004b0c <HAL_DMA_Init+0xe0>)
 8004a6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a6c:	e00e      	b.n	8004a8c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <HAL_DMA_Init+0xe4>)
 8004a76:	4413      	add	r3, r2
 8004a78:	4a23      	ldr	r2, [pc, #140]	; (8004b08 <HAL_DMA_Init+0xdc>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	091b      	lsrs	r3, r3, #4
 8004a80:	009a      	lsls	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_DMA_Init+0xe8>)
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004aa2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004aa6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	40020407 	.word	0x40020407
 8004b04:	bffdfff8 	.word	0xbffdfff8
 8004b08:	cccccccd 	.word	0xcccccccd
 8004b0c:	40020000 	.word	0x40020000
 8004b10:	bffdfbf8 	.word	0xbffdfbf8
 8004b14:	40020400 	.word	0x40020400

08004b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_DMA_Start_IT+0x20>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e04a      	b.n	8004bce <HAL_DMA_Start_IT+0xb6>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d13a      	bne.n	8004bc0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fbb0 	bl	80052d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 020e 	orr.w	r2, r2, #14
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e00f      	b.n	8004bae <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0204 	bic.w	r2, r2, #4
 8004b9c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 020a 	orr.w	r2, r2, #10
 8004bac:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e005      	b.n	8004bcc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d008      	beq.n	8004bfe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2204      	movs	r2, #4
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e020      	b.n	8004c40 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 020e 	bic.w	r2, r2, #14
 8004c0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc80      	pop	{r7}
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d005      	beq.n	8004c6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2204      	movs	r2, #4
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
 8004c6c:	e0d6      	b.n	8004e1c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 020e 	bic.w	r2, r2, #14
 8004c7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0201 	bic.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b64      	ldr	r3, [pc, #400]	; (8004e28 <HAL_DMA_Abort_IT+0x1dc>)
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d958      	bls.n	8004d4c <HAL_DMA_Abort_IT+0x100>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a63      	ldr	r2, [pc, #396]	; (8004e2c <HAL_DMA_Abort_IT+0x1e0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04f      	beq.n	8004d44 <HAL_DMA_Abort_IT+0xf8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a61      	ldr	r2, [pc, #388]	; (8004e30 <HAL_DMA_Abort_IT+0x1e4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d048      	beq.n	8004d40 <HAL_DMA_Abort_IT+0xf4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a60      	ldr	r2, [pc, #384]	; (8004e34 <HAL_DMA_Abort_IT+0x1e8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_DMA_Abort_IT+0xee>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a5e      	ldr	r2, [pc, #376]	; (8004e38 <HAL_DMA_Abort_IT+0x1ec>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d038      	beq.n	8004d34 <HAL_DMA_Abort_IT+0xe8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a5d      	ldr	r2, [pc, #372]	; (8004e3c <HAL_DMA_Abort_IT+0x1f0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d030      	beq.n	8004d2e <HAL_DMA_Abort_IT+0xe2>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a5b      	ldr	r2, [pc, #364]	; (8004e40 <HAL_DMA_Abort_IT+0x1f4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d028      	beq.n	8004d28 <HAL_DMA_Abort_IT+0xdc>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a53      	ldr	r2, [pc, #332]	; (8004e28 <HAL_DMA_Abort_IT+0x1dc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d020      	beq.n	8004d22 <HAL_DMA_Abort_IT+0xd6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a57      	ldr	r2, [pc, #348]	; (8004e44 <HAL_DMA_Abort_IT+0x1f8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d019      	beq.n	8004d1e <HAL_DMA_Abort_IT+0xd2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a56      	ldr	r2, [pc, #344]	; (8004e48 <HAL_DMA_Abort_IT+0x1fc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d012      	beq.n	8004d1a <HAL_DMA_Abort_IT+0xce>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a54      	ldr	r2, [pc, #336]	; (8004e4c <HAL_DMA_Abort_IT+0x200>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00a      	beq.n	8004d14 <HAL_DMA_Abort_IT+0xc8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a53      	ldr	r2, [pc, #332]	; (8004e50 <HAL_DMA_Abort_IT+0x204>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d102      	bne.n	8004d0e <HAL_DMA_Abort_IT+0xc2>
 8004d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d0c:	e01b      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d12:	e018      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d18:	e015      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	e013      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e011      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d26:	e00e      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d2c:	e00b      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d32:	e008      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d38:	e005      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d3e:	e002      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d40:	2310      	movs	r3, #16
 8004d42:	e000      	b.n	8004d46 <HAL_DMA_Abort_IT+0xfa>
 8004d44:	2301      	movs	r3, #1
 8004d46:	4a43      	ldr	r2, [pc, #268]	; (8004e54 <HAL_DMA_Abort_IT+0x208>)
 8004d48:	6053      	str	r3, [r2, #4]
 8004d4a:	e057      	b.n	8004dfc <HAL_DMA_Abort_IT+0x1b0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a36      	ldr	r2, [pc, #216]	; (8004e2c <HAL_DMA_Abort_IT+0x1e0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d04f      	beq.n	8004df6 <HAL_DMA_Abort_IT+0x1aa>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a35      	ldr	r2, [pc, #212]	; (8004e30 <HAL_DMA_Abort_IT+0x1e4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d048      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x1a6>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a33      	ldr	r2, [pc, #204]	; (8004e34 <HAL_DMA_Abort_IT+0x1e8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d040      	beq.n	8004dec <HAL_DMA_Abort_IT+0x1a0>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <HAL_DMA_Abort_IT+0x1ec>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d038      	beq.n	8004de6 <HAL_DMA_Abort_IT+0x19a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a30      	ldr	r2, [pc, #192]	; (8004e3c <HAL_DMA_Abort_IT+0x1f0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d030      	beq.n	8004de0 <HAL_DMA_Abort_IT+0x194>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2f      	ldr	r2, [pc, #188]	; (8004e40 <HAL_DMA_Abort_IT+0x1f4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d028      	beq.n	8004dda <HAL_DMA_Abort_IT+0x18e>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a26      	ldr	r2, [pc, #152]	; (8004e28 <HAL_DMA_Abort_IT+0x1dc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d020      	beq.n	8004dd4 <HAL_DMA_Abort_IT+0x188>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <HAL_DMA_Abort_IT+0x1f8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d019      	beq.n	8004dd0 <HAL_DMA_Abort_IT+0x184>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <HAL_DMA_Abort_IT+0x1fc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d012      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x180>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a28      	ldr	r2, [pc, #160]	; (8004e4c <HAL_DMA_Abort_IT+0x200>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00a      	beq.n	8004dc6 <HAL_DMA_Abort_IT+0x17a>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <HAL_DMA_Abort_IT+0x204>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d102      	bne.n	8004dc0 <HAL_DMA_Abort_IT+0x174>
 8004dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dbe:	e01b      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dc4:	e018      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dca:	e015      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	e013      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e011      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dd8:	e00e      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004dde:	e00b      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004de4:	e008      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004de6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dea:	e005      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df0:	e002      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004df2:	2310      	movs	r3, #16
 8004df4:	e000      	b.n	8004df8 <HAL_DMA_Abort_IT+0x1ac>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4a17      	ldr	r2, [pc, #92]	; (8004e58 <HAL_DMA_Abort_IT+0x20c>)
 8004dfa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4798      	blx	r3
    } 
  }
  return status;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40020080 	.word	0x40020080
 8004e2c:	40020008 	.word	0x40020008
 8004e30:	4002001c 	.word	0x4002001c
 8004e34:	40020030 	.word	0x40020030
 8004e38:	40020044 	.word	0x40020044
 8004e3c:	40020058 	.word	0x40020058
 8004e40:	4002006c 	.word	0x4002006c
 8004e44:	40020408 	.word	0x40020408
 8004e48:	4002041c 	.word	0x4002041c
 8004e4c:	40020430 	.word	0x40020430
 8004e50:	40020444 	.word	0x40020444
 8004e54:	40020400 	.word	0x40020400
 8004e58:	40020000 	.word	0x40020000

08004e5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2204      	movs	r2, #4
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80d6 	beq.w	8005032 <HAL_DMA_IRQHandler+0x1d6>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80d0 	beq.w	8005032 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0204 	bic.w	r2, r2, #4
 8004eae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b9b      	ldr	r3, [pc, #620]	; (8005124 <HAL_DMA_IRQHandler+0x2c8>)
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d958      	bls.n	8004f6e <HAL_DMA_IRQHandler+0x112>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a99      	ldr	r2, [pc, #612]	; (8005128 <HAL_DMA_IRQHandler+0x2cc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d04f      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x10a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a98      	ldr	r2, [pc, #608]	; (800512c <HAL_DMA_IRQHandler+0x2d0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d048      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x106>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a96      	ldr	r2, [pc, #600]	; (8005130 <HAL_DMA_IRQHandler+0x2d4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d040      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x100>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a95      	ldr	r2, [pc, #596]	; (8005134 <HAL_DMA_IRQHandler+0x2d8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d038      	beq.n	8004f56 <HAL_DMA_IRQHandler+0xfa>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a93      	ldr	r2, [pc, #588]	; (8005138 <HAL_DMA_IRQHandler+0x2dc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d030      	beq.n	8004f50 <HAL_DMA_IRQHandler+0xf4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a92      	ldr	r2, [pc, #584]	; (800513c <HAL_DMA_IRQHandler+0x2e0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d028      	beq.n	8004f4a <HAL_DMA_IRQHandler+0xee>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a89      	ldr	r2, [pc, #548]	; (8005124 <HAL_DMA_IRQHandler+0x2c8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d020      	beq.n	8004f44 <HAL_DMA_IRQHandler+0xe8>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a8e      	ldr	r2, [pc, #568]	; (8005140 <HAL_DMA_IRQHandler+0x2e4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d019      	beq.n	8004f40 <HAL_DMA_IRQHandler+0xe4>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a8c      	ldr	r2, [pc, #560]	; (8005144 <HAL_DMA_IRQHandler+0x2e8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d012      	beq.n	8004f3c <HAL_DMA_IRQHandler+0xe0>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a8b      	ldr	r2, [pc, #556]	; (8005148 <HAL_DMA_IRQHandler+0x2ec>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00a      	beq.n	8004f36 <HAL_DMA_IRQHandler+0xda>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a89      	ldr	r2, [pc, #548]	; (800514c <HAL_DMA_IRQHandler+0x2f0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d102      	bne.n	8004f30 <HAL_DMA_IRQHandler+0xd4>
 8004f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f2e:	e01b      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f34:	e018      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3a:	e015      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	e013      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f40:	2304      	movs	r3, #4
 8004f42:	e011      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f48:	e00e      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f4e:	e00b      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f54:	e008      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f5a:	e005      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f60:	e002      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f62:	2340      	movs	r3, #64	; 0x40
 8004f64:	e000      	b.n	8004f68 <HAL_DMA_IRQHandler+0x10c>
 8004f66:	2304      	movs	r3, #4
 8004f68:	4a79      	ldr	r2, [pc, #484]	; (8005150 <HAL_DMA_IRQHandler+0x2f4>)
 8004f6a:	6053      	str	r3, [r2, #4]
 8004f6c:	e057      	b.n	800501e <HAL_DMA_IRQHandler+0x1c2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a6d      	ldr	r2, [pc, #436]	; (8005128 <HAL_DMA_IRQHandler+0x2cc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d04f      	beq.n	8005018 <HAL_DMA_IRQHandler+0x1bc>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a6b      	ldr	r2, [pc, #428]	; (800512c <HAL_DMA_IRQHandler+0x2d0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d048      	beq.n	8005014 <HAL_DMA_IRQHandler+0x1b8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a6a      	ldr	r2, [pc, #424]	; (8005130 <HAL_DMA_IRQHandler+0x2d4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d040      	beq.n	800500e <HAL_DMA_IRQHandler+0x1b2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a68      	ldr	r2, [pc, #416]	; (8005134 <HAL_DMA_IRQHandler+0x2d8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d038      	beq.n	8005008 <HAL_DMA_IRQHandler+0x1ac>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a67      	ldr	r2, [pc, #412]	; (8005138 <HAL_DMA_IRQHandler+0x2dc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d030      	beq.n	8005002 <HAL_DMA_IRQHandler+0x1a6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a65      	ldr	r2, [pc, #404]	; (800513c <HAL_DMA_IRQHandler+0x2e0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d028      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x1a0>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5d      	ldr	r2, [pc, #372]	; (8005124 <HAL_DMA_IRQHandler+0x2c8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d020      	beq.n	8004ff6 <HAL_DMA_IRQHandler+0x19a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a61      	ldr	r2, [pc, #388]	; (8005140 <HAL_DMA_IRQHandler+0x2e4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d019      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x196>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a60      	ldr	r2, [pc, #384]	; (8005144 <HAL_DMA_IRQHandler+0x2e8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d012      	beq.n	8004fee <HAL_DMA_IRQHandler+0x192>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a5e      	ldr	r2, [pc, #376]	; (8005148 <HAL_DMA_IRQHandler+0x2ec>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x18c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a5d      	ldr	r2, [pc, #372]	; (800514c <HAL_DMA_IRQHandler+0x2f0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d102      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x186>
 8004fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fe0:	e01b      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8004fe2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fe6:	e018      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8004fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fec:	e015      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8004fee:	2340      	movs	r3, #64	; 0x40
 8004ff0:	e013      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	e011      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8004ff6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ffa:	e00e      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8004ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005000:	e00b      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8005002:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005006:	e008      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8005008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800500c:	e005      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 800500e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005012:	e002      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8005014:	2340      	movs	r3, #64	; 0x40
 8005016:	e000      	b.n	800501a <HAL_DMA_IRQHandler+0x1be>
 8005018:	2304      	movs	r3, #4
 800501a:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <HAL_DMA_IRQHandler+0x2f8>)
 800501c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8136 	beq.w	8005294 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005030:	e130      	b.n	8005294 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2202      	movs	r2, #2
 8005038:	409a      	lsls	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80f8 	beq.w	8005234 <HAL_DMA_IRQHandler+0x3d8>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80f2 	beq.w	8005234 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10b      	bne.n	8005076 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 020a 	bic.w	r2, r2, #10
 800506c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	4b29      	ldr	r3, [pc, #164]	; (8005124 <HAL_DMA_IRQHandler+0x2c8>)
 800507e:	429a      	cmp	r2, r3
 8005080:	d973      	bls.n	800516a <HAL_DMA_IRQHandler+0x30e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <HAL_DMA_IRQHandler+0x2cc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d06a      	beq.n	8005162 <HAL_DMA_IRQHandler+0x306>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_DMA_IRQHandler+0x2d0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d063      	beq.n	800515e <HAL_DMA_IRQHandler+0x302>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a25      	ldr	r2, [pc, #148]	; (8005130 <HAL_DMA_IRQHandler+0x2d4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d05b      	beq.n	8005158 <HAL_DMA_IRQHandler+0x2fc>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <HAL_DMA_IRQHandler+0x2d8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d038      	beq.n	800511c <HAL_DMA_IRQHandler+0x2c0>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a22      	ldr	r2, [pc, #136]	; (8005138 <HAL_DMA_IRQHandler+0x2dc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d030      	beq.n	8005116 <HAL_DMA_IRQHandler+0x2ba>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a20      	ldr	r2, [pc, #128]	; (800513c <HAL_DMA_IRQHandler+0x2e0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d028      	beq.n	8005110 <HAL_DMA_IRQHandler+0x2b4>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_DMA_IRQHandler+0x2c8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d020      	beq.n	800510a <HAL_DMA_IRQHandler+0x2ae>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1c      	ldr	r2, [pc, #112]	; (8005140 <HAL_DMA_IRQHandler+0x2e4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d019      	beq.n	8005106 <HAL_DMA_IRQHandler+0x2aa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_DMA_IRQHandler+0x2e8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d012      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2a6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a19      	ldr	r2, [pc, #100]	; (8005148 <HAL_DMA_IRQHandler+0x2ec>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00a      	beq.n	80050fc <HAL_DMA_IRQHandler+0x2a0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a18      	ldr	r2, [pc, #96]	; (800514c <HAL_DMA_IRQHandler+0x2f0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d102      	bne.n	80050f6 <HAL_DMA_IRQHandler+0x29a>
 80050f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050f4:	e036      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 80050f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80050fa:	e033      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 80050fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005100:	e030      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 8005102:	2320      	movs	r3, #32
 8005104:	e02e      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 8005106:	2302      	movs	r3, #2
 8005108:	e02c      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 800510a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510e:	e029      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 8005110:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005114:	e026      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 8005116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800511a:	e023      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 800511c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005120:	e020      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 8005122:	bf00      	nop
 8005124:	40020080 	.word	0x40020080
 8005128:	40020008 	.word	0x40020008
 800512c:	4002001c 	.word	0x4002001c
 8005130:	40020030 	.word	0x40020030
 8005134:	40020044 	.word	0x40020044
 8005138:	40020058 	.word	0x40020058
 800513c:	4002006c 	.word	0x4002006c
 8005140:	40020408 	.word	0x40020408
 8005144:	4002041c 	.word	0x4002041c
 8005148:	40020430 	.word	0x40020430
 800514c:	40020444 	.word	0x40020444
 8005150:	40020400 	.word	0x40020400
 8005154:	40020000 	.word	0x40020000
 8005158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515c:	e002      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 800515e:	2320      	movs	r3, #32
 8005160:	e000      	b.n	8005164 <HAL_DMA_IRQHandler+0x308>
 8005162:	2302      	movs	r3, #2
 8005164:	4a4e      	ldr	r2, [pc, #312]	; (80052a0 <HAL_DMA_IRQHandler+0x444>)
 8005166:	6053      	str	r3, [r2, #4]
 8005168:	e057      	b.n	800521a <HAL_DMA_IRQHandler+0x3be>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a4d      	ldr	r2, [pc, #308]	; (80052a4 <HAL_DMA_IRQHandler+0x448>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d04f      	beq.n	8005214 <HAL_DMA_IRQHandler+0x3b8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4b      	ldr	r2, [pc, #300]	; (80052a8 <HAL_DMA_IRQHandler+0x44c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d048      	beq.n	8005210 <HAL_DMA_IRQHandler+0x3b4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4a      	ldr	r2, [pc, #296]	; (80052ac <HAL_DMA_IRQHandler+0x450>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d040      	beq.n	800520a <HAL_DMA_IRQHandler+0x3ae>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a48      	ldr	r2, [pc, #288]	; (80052b0 <HAL_DMA_IRQHandler+0x454>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d038      	beq.n	8005204 <HAL_DMA_IRQHandler+0x3a8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <HAL_DMA_IRQHandler+0x458>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d030      	beq.n	80051fe <HAL_DMA_IRQHandler+0x3a2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a45      	ldr	r2, [pc, #276]	; (80052b8 <HAL_DMA_IRQHandler+0x45c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d028      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x39c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a44      	ldr	r2, [pc, #272]	; (80052bc <HAL_DMA_IRQHandler+0x460>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d020      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x396>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a42      	ldr	r2, [pc, #264]	; (80052c0 <HAL_DMA_IRQHandler+0x464>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d019      	beq.n	80051ee <HAL_DMA_IRQHandler+0x392>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <HAL_DMA_IRQHandler+0x468>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d012      	beq.n	80051ea <HAL_DMA_IRQHandler+0x38e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3f      	ldr	r2, [pc, #252]	; (80052c8 <HAL_DMA_IRQHandler+0x46c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00a      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x388>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <HAL_DMA_IRQHandler+0x470>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d102      	bne.n	80051de <HAL_DMA_IRQHandler+0x382>
 80051d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051dc:	e01b      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051e2:	e018      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e8:	e015      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051ea:	2320      	movs	r3, #32
 80051ec:	e013      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e011      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051f6:	e00e      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051fc:	e00b      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 80051fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005202:	e008      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 8005204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005208:	e005      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 800520a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800520e:	e002      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 8005210:	2320      	movs	r3, #32
 8005212:	e000      	b.n	8005216 <HAL_DMA_IRQHandler+0x3ba>
 8005214:	2302      	movs	r3, #2
 8005216:	4a2e      	ldr	r2, [pc, #184]	; (80052d0 <HAL_DMA_IRQHandler+0x474>)
 8005218:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d034      	beq.n	8005294 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005232:	e02f      	b.n	8005294 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	2208      	movs	r2, #8
 800523a:	409a      	lsls	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4013      	ands	r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d028      	beq.n	8005296 <HAL_DMA_IRQHandler+0x43a>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d023      	beq.n	8005296 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 020e 	bic.w	r2, r2, #14
 800525c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	2101      	movs	r1, #1
 8005268:	fa01 f202 	lsl.w	r2, r1, r2
 800526c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
    }
  }
  return;
 8005294:	bf00      	nop
 8005296:	bf00      	nop
}
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40020400 	.word	0x40020400
 80052a4:	40020008 	.word	0x40020008
 80052a8:	4002001c 	.word	0x4002001c
 80052ac:	40020030 	.word	0x40020030
 80052b0:	40020044 	.word	0x40020044
 80052b4:	40020058 	.word	0x40020058
 80052b8:	4002006c 	.word	0x4002006c
 80052bc:	40020080 	.word	0x40020080
 80052c0:	40020408 	.word	0x40020408
 80052c4:	4002041c 	.word	0x4002041c
 80052c8:	40020430 	.word	0x40020430
 80052cc:	40020444 	.word	0x40020444
 80052d0:	40020000 	.word	0x40020000

080052d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d108      	bne.n	8005314 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005312:	e007      	b.n	8005324 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	60da      	str	r2, [r3, #12]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
	...

08005330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005330:	b480      	push	{r7}
 8005332:	b08b      	sub	sp, #44	; 0x2c
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800533e:	2300      	movs	r3, #0
 8005340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005342:	e179      	b.n	8005638 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005344:	2201      	movs	r2, #1
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	fa02 f303 	lsl.w	r3, r2, r3
 800534c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	429a      	cmp	r2, r3
 800535e:	f040 8168 	bne.w	8005632 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	4aa0      	ldr	r2, [pc, #640]	; (80055e8 <HAL_GPIO_Init+0x2b8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d05e      	beq.n	800542a <HAL_GPIO_Init+0xfa>
 800536c:	4a9e      	ldr	r2, [pc, #632]	; (80055e8 <HAL_GPIO_Init+0x2b8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d875      	bhi.n	800545e <HAL_GPIO_Init+0x12e>
 8005372:	4a9e      	ldr	r2, [pc, #632]	; (80055ec <HAL_GPIO_Init+0x2bc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d058      	beq.n	800542a <HAL_GPIO_Init+0xfa>
 8005378:	4a9c      	ldr	r2, [pc, #624]	; (80055ec <HAL_GPIO_Init+0x2bc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d86f      	bhi.n	800545e <HAL_GPIO_Init+0x12e>
 800537e:	4a9c      	ldr	r2, [pc, #624]	; (80055f0 <HAL_GPIO_Init+0x2c0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d052      	beq.n	800542a <HAL_GPIO_Init+0xfa>
 8005384:	4a9a      	ldr	r2, [pc, #616]	; (80055f0 <HAL_GPIO_Init+0x2c0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d869      	bhi.n	800545e <HAL_GPIO_Init+0x12e>
 800538a:	4a9a      	ldr	r2, [pc, #616]	; (80055f4 <HAL_GPIO_Init+0x2c4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d04c      	beq.n	800542a <HAL_GPIO_Init+0xfa>
 8005390:	4a98      	ldr	r2, [pc, #608]	; (80055f4 <HAL_GPIO_Init+0x2c4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d863      	bhi.n	800545e <HAL_GPIO_Init+0x12e>
 8005396:	4a98      	ldr	r2, [pc, #608]	; (80055f8 <HAL_GPIO_Init+0x2c8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d046      	beq.n	800542a <HAL_GPIO_Init+0xfa>
 800539c:	4a96      	ldr	r2, [pc, #600]	; (80055f8 <HAL_GPIO_Init+0x2c8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d85d      	bhi.n	800545e <HAL_GPIO_Init+0x12e>
 80053a2:	2b12      	cmp	r3, #18
 80053a4:	d82a      	bhi.n	80053fc <HAL_GPIO_Init+0xcc>
 80053a6:	2b12      	cmp	r3, #18
 80053a8:	d859      	bhi.n	800545e <HAL_GPIO_Init+0x12e>
 80053aa:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <HAL_GPIO_Init+0x80>)
 80053ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b0:	0800542b 	.word	0x0800542b
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005417 	.word	0x08005417
 80053bc:	08005459 	.word	0x08005459
 80053c0:	0800545f 	.word	0x0800545f
 80053c4:	0800545f 	.word	0x0800545f
 80053c8:	0800545f 	.word	0x0800545f
 80053cc:	0800545f 	.word	0x0800545f
 80053d0:	0800545f 	.word	0x0800545f
 80053d4:	0800545f 	.word	0x0800545f
 80053d8:	0800545f 	.word	0x0800545f
 80053dc:	0800545f 	.word	0x0800545f
 80053e0:	0800545f 	.word	0x0800545f
 80053e4:	0800545f 	.word	0x0800545f
 80053e8:	0800545f 	.word	0x0800545f
 80053ec:	0800545f 	.word	0x0800545f
 80053f0:	0800545f 	.word	0x0800545f
 80053f4:	0800540d 	.word	0x0800540d
 80053f8:	08005421 	.word	0x08005421
 80053fc:	4a7f      	ldr	r2, [pc, #508]	; (80055fc <HAL_GPIO_Init+0x2cc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005402:	e02c      	b.n	800545e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	623b      	str	r3, [r7, #32]
          break;
 800540a:	e029      	b.n	8005460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	3304      	adds	r3, #4
 8005412:	623b      	str	r3, [r7, #32]
          break;
 8005414:	e024      	b.n	8005460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	3308      	adds	r3, #8
 800541c:	623b      	str	r3, [r7, #32]
          break;
 800541e:	e01f      	b.n	8005460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	330c      	adds	r3, #12
 8005426:	623b      	str	r3, [r7, #32]
          break;
 8005428:	e01a      	b.n	8005460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005432:	2304      	movs	r3, #4
 8005434:	623b      	str	r3, [r7, #32]
          break;
 8005436:	e013      	b.n	8005460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005440:	2308      	movs	r3, #8
 8005442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	611a      	str	r2, [r3, #16]
          break;
 800544a:	e009      	b.n	8005460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800544c:	2308      	movs	r3, #8
 800544e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	615a      	str	r2, [r3, #20]
          break;
 8005456:	e003      	b.n	8005460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005458:	2300      	movs	r3, #0
 800545a:	623b      	str	r3, [r7, #32]
          break;
 800545c:	e000      	b.n	8005460 <HAL_GPIO_Init+0x130>
          break;
 800545e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	2bff      	cmp	r3, #255	; 0xff
 8005464:	d801      	bhi.n	800546a <HAL_GPIO_Init+0x13a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	e001      	b.n	800546e <HAL_GPIO_Init+0x13e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2bff      	cmp	r3, #255	; 0xff
 8005474:	d802      	bhi.n	800547c <HAL_GPIO_Init+0x14c>
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	e002      	b.n	8005482 <HAL_GPIO_Init+0x152>
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	3b08      	subs	r3, #8
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	210f      	movs	r1, #15
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	6a39      	ldr	r1, [r7, #32]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80c1 	beq.w	8005632 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80054b0:	4b53      	ldr	r3, [pc, #332]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	4a52      	ldr	r2, [pc, #328]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	6193      	str	r3, [r2, #24]
 80054bc:	4b50      	ldr	r3, [pc, #320]	; (8005600 <HAL_GPIO_Init+0x2d0>)
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054c8:	4a4e      	ldr	r2, [pc, #312]	; (8005604 <HAL_GPIO_Init+0x2d4>)
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	089b      	lsrs	r3, r3, #2
 80054ce:	3302      	adds	r3, #2
 80054d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	220f      	movs	r2, #15
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4013      	ands	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a46      	ldr	r2, [pc, #280]	; (8005608 <HAL_GPIO_Init+0x2d8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d01f      	beq.n	8005534 <HAL_GPIO_Init+0x204>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a45      	ldr	r2, [pc, #276]	; (800560c <HAL_GPIO_Init+0x2dc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d019      	beq.n	8005530 <HAL_GPIO_Init+0x200>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a44      	ldr	r2, [pc, #272]	; (8005610 <HAL_GPIO_Init+0x2e0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d013      	beq.n	800552c <HAL_GPIO_Init+0x1fc>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a43      	ldr	r2, [pc, #268]	; (8005614 <HAL_GPIO_Init+0x2e4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00d      	beq.n	8005528 <HAL_GPIO_Init+0x1f8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a42      	ldr	r2, [pc, #264]	; (8005618 <HAL_GPIO_Init+0x2e8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <HAL_GPIO_Init+0x1f4>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a41      	ldr	r2, [pc, #260]	; (800561c <HAL_GPIO_Init+0x2ec>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d101      	bne.n	8005520 <HAL_GPIO_Init+0x1f0>
 800551c:	2305      	movs	r3, #5
 800551e:	e00a      	b.n	8005536 <HAL_GPIO_Init+0x206>
 8005520:	2306      	movs	r3, #6
 8005522:	e008      	b.n	8005536 <HAL_GPIO_Init+0x206>
 8005524:	2304      	movs	r3, #4
 8005526:	e006      	b.n	8005536 <HAL_GPIO_Init+0x206>
 8005528:	2303      	movs	r3, #3
 800552a:	e004      	b.n	8005536 <HAL_GPIO_Init+0x206>
 800552c:	2302      	movs	r3, #2
 800552e:	e002      	b.n	8005536 <HAL_GPIO_Init+0x206>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_GPIO_Init+0x206>
 8005534:	2300      	movs	r3, #0
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	f002 0203 	and.w	r2, r2, #3
 800553c:	0092      	lsls	r2, r2, #2
 800553e:	4093      	lsls	r3, r2
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005546:	492f      	ldr	r1, [pc, #188]	; (8005604 <HAL_GPIO_Init+0x2d4>)
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	3302      	adds	r3, #2
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005560:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	492e      	ldr	r1, [pc, #184]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	4313      	orrs	r3, r2
 800556a:	600b      	str	r3, [r1, #0]
 800556c:	e006      	b.n	800557c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	43db      	mvns	r3, r3
 8005576:	492a      	ldr	r1, [pc, #168]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 8005578:	4013      	ands	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	4924      	ldr	r1, [pc, #144]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	4313      	orrs	r3, r2
 8005592:	604b      	str	r3, [r1, #4]
 8005594:	e006      	b.n	80055a4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	43db      	mvns	r3, r3
 800559e:	4920      	ldr	r1, [pc, #128]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d006      	beq.n	80055be <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80055b0:	4b1b      	ldr	r3, [pc, #108]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	491a      	ldr	r1, [pc, #104]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	608b      	str	r3, [r1, #8]
 80055bc:	e006      	b.n	80055cc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	43db      	mvns	r3, r3
 80055c6:	4916      	ldr	r1, [pc, #88]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d025      	beq.n	8005624 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80055d8:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	4910      	ldr	r1, [pc, #64]	; (8005620 <HAL_GPIO_Init+0x2f0>)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60cb      	str	r3, [r1, #12]
 80055e4:	e025      	b.n	8005632 <HAL_GPIO_Init+0x302>
 80055e6:	bf00      	nop
 80055e8:	10320000 	.word	0x10320000
 80055ec:	10310000 	.word	0x10310000
 80055f0:	10220000 	.word	0x10220000
 80055f4:	10210000 	.word	0x10210000
 80055f8:	10120000 	.word	0x10120000
 80055fc:	10110000 	.word	0x10110000
 8005600:	40021000 	.word	0x40021000
 8005604:	40010000 	.word	0x40010000
 8005608:	40010800 	.word	0x40010800
 800560c:	40010c00 	.word	0x40010c00
 8005610:	40011000 	.word	0x40011000
 8005614:	40011400 	.word	0x40011400
 8005618:	40011800 	.word	0x40011800
 800561c:	40011c00 	.word	0x40011c00
 8005620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005624:	4b0b      	ldr	r3, [pc, #44]	; (8005654 <HAL_GPIO_Init+0x324>)
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	43db      	mvns	r3, r3
 800562c:	4909      	ldr	r1, [pc, #36]	; (8005654 <HAL_GPIO_Init+0x324>)
 800562e:	4013      	ands	r3, r2
 8005630:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	3301      	adds	r3, #1
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f ae7e 	bne.w	8005344 <HAL_GPIO_Init+0x14>
  }
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	372c      	adds	r7, #44	; 0x2c
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	40010400 	.word	0x40010400

08005658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
 8005674:	e001      	b.n	800567a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	807b      	strh	r3, [r7, #2]
 8005692:	4613      	mov	r3, r2
 8005694:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005696:	787b      	ldrb	r3, [r7, #1]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800569c:	887a      	ldrh	r2, [r7, #2]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80056a2:	e003      	b.n	80056ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	041a      	lsls	r2, r3, #16
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	611a      	str	r2, [r3, #16]
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e26c      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8087 	beq.w	80057e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056d8:	4b92      	ldr	r3, [pc, #584]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 030c 	and.w	r3, r3, #12
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d00c      	beq.n	80056fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d112      	bne.n	8005716 <HAL_RCC_OscConfig+0x5e>
 80056f0:	4b8c      	ldr	r3, [pc, #560]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d10b      	bne.n	8005716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fe:	4b89      	ldr	r3, [pc, #548]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x12c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d168      	bne.n	80057e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e246      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571e:	d106      	bne.n	800572e <HAL_RCC_OscConfig+0x76>
 8005720:	4b80      	ldr	r3, [pc, #512]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a7f      	ldr	r2, [pc, #508]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e02e      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x98>
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a7a      	ldr	r2, [pc, #488]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800573c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b78      	ldr	r3, [pc, #480]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a77      	ldr	r2, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e01d      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005758:	d10c      	bne.n	8005774 <HAL_RCC_OscConfig+0xbc>
 800575a:	4b72      	ldr	r3, [pc, #456]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a71      	ldr	r2, [pc, #452]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800576c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	e00b      	b.n	800578c <HAL_RCC_OscConfig+0xd4>
 8005774:	4b6b      	ldr	r3, [pc, #428]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a6a      	ldr	r2, [pc, #424]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800577a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	4b68      	ldr	r3, [pc, #416]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a67      	ldr	r2, [pc, #412]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d013      	beq.n	80057bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fd fd8e 	bl	80032b4 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800579c:	f7fd fd8a 	bl	80032b4 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e1fa      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ae:	4b5d      	ldr	r3, [pc, #372]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0xe4>
 80057ba:	e014      	b.n	80057e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fd fd7a 	bl	80032b4 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c4:	f7fd fd76 	bl	80032b4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1e6      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d6:	4b53      	ldr	r3, [pc, #332]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x10c>
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d063      	beq.n	80058ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057f2:	4b4c      	ldr	r3, [pc, #304]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 030c 	and.w	r3, r3, #12
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057fe:	4b49      	ldr	r3, [pc, #292]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f003 030c 	and.w	r3, r3, #12
 8005806:	2b08      	cmp	r3, #8
 8005808:	d11c      	bne.n	8005844 <HAL_RCC_OscConfig+0x18c>
 800580a:	4b46      	ldr	r3, [pc, #280]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d116      	bne.n	8005844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005816:	4b43      	ldr	r3, [pc, #268]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <HAL_RCC_OscConfig+0x176>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d001      	beq.n	800582e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e1ba      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582e:	4b3d      	ldr	r3, [pc, #244]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	4939      	ldr	r1, [pc, #228]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005842:	e03a      	b.n	80058ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d020      	beq.n	800588e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800584c:	4b36      	ldr	r3, [pc, #216]	; (8005928 <HAL_RCC_OscConfig+0x270>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fd fd2f 	bl	80032b4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fd fd2b 	bl	80032b4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e19b      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005878:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4927      	ldr	r1, [pc, #156]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 8005888:	4313      	orrs	r3, r2
 800588a:	600b      	str	r3, [r1, #0]
 800588c:	e015      	b.n	80058ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800588e:	4b26      	ldr	r3, [pc, #152]	; (8005928 <HAL_RCC_OscConfig+0x270>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fd fd0e 	bl	80032b4 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589c:	f7fd fd0a 	bl	80032b4 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e17a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03a      	beq.n	800593c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d019      	beq.n	8005902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <HAL_RCC_OscConfig+0x274>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d4:	f7fd fcee 	bl	80032b4 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fd fcea 	bl	80032b4 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e15a      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058fa:	2001      	movs	r0, #1
 80058fc:	f000 fb08 	bl	8005f10 <RCC_Delay>
 8005900:	e01c      	b.n	800593c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <HAL_RCC_OscConfig+0x274>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005908:	f7fd fcd4 	bl	80032b4 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800590e:	e00f      	b.n	8005930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fd fcd0 	bl	80032b4 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d908      	bls.n	8005930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e140      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	42420000 	.word	0x42420000
 800592c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005930:	4b9e      	ldr	r3, [pc, #632]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e9      	bne.n	8005910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80a6 	beq.w	8005a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800594a:	2300      	movs	r3, #0
 800594c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594e:	4b97      	ldr	r3, [pc, #604]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800595a:	4b94      	ldr	r3, [pc, #592]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	4a93      	ldr	r2, [pc, #588]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	61d3      	str	r3, [r2, #28]
 8005966:	4b91      	ldr	r3, [pc, #580]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005976:	4b8e      	ldr	r3, [pc, #568]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d118      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005982:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a8a      	ldr	r2, [pc, #552]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598e:	f7fd fc91 	bl	80032b4 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005996:	f7fd fc8d 	bl	80032b4 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b64      	cmp	r3, #100	; 0x64
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0fd      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a8:	4b81      	ldr	r3, [pc, #516]	; (8005bb0 <HAL_RCC_OscConfig+0x4f8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f0      	beq.n	8005996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d106      	bne.n	80059ca <HAL_RCC_OscConfig+0x312>
 80059bc:	4b7b      	ldr	r3, [pc, #492]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4a7a      	ldr	r2, [pc, #488]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	6213      	str	r3, [r2, #32]
 80059c8:	e02d      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10c      	bne.n	80059ec <HAL_RCC_OscConfig+0x334>
 80059d2:	4b76      	ldr	r3, [pc, #472]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4a75      	ldr	r2, [pc, #468]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6213      	str	r3, [r2, #32]
 80059de:	4b73      	ldr	r3, [pc, #460]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4a72      	ldr	r2, [pc, #456]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059e4:	f023 0304 	bic.w	r3, r3, #4
 80059e8:	6213      	str	r3, [r2, #32]
 80059ea:	e01c      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	d10c      	bne.n	8005a0e <HAL_RCC_OscConfig+0x356>
 80059f4:	4b6d      	ldr	r3, [pc, #436]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a6c      	ldr	r2, [pc, #432]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6213      	str	r3, [r2, #32]
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	4a69      	ldr	r2, [pc, #420]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6213      	str	r3, [r2, #32]
 8005a0c:	e00b      	b.n	8005a26 <HAL_RCC_OscConfig+0x36e>
 8005a0e:	4b67      	ldr	r3, [pc, #412]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4a66      	ldr	r2, [pc, #408]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6213      	str	r3, [r2, #32]
 8005a1a:	4b64      	ldr	r3, [pc, #400]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4a63      	ldr	r2, [pc, #396]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a20:	f023 0304 	bic.w	r3, r3, #4
 8005a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d015      	beq.n	8005a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a2e:	f7fd fc41 	bl	80032b4 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a34:	e00a      	b.n	8005a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a36:	f7fd fc3d 	bl	80032b4 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0ab      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4c:	4b57      	ldr	r3, [pc, #348]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ee      	beq.n	8005a36 <HAL_RCC_OscConfig+0x37e>
 8005a58:	e014      	b.n	8005a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5a:	f7fd fc2b 	bl	80032b4 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a60:	e00a      	b.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a62:	f7fd fc27 	bl	80032b4 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e095      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a78:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1ee      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8a:	4b48      	ldr	r3, [pc, #288]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a8c:	69db      	ldr	r3, [r3, #28]
 8005a8e:	4a47      	ldr	r2, [pc, #284]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8081 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d061      	beq.n	8005b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d146      	bne.n	8005b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b3f      	ldr	r3, [pc, #252]	; (8005bb4 <HAL_RCC_OscConfig+0x4fc>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fd fbfb 	bl	80032b4 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fd fbf7 	bl	80032b4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e067      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ad4:	4b35      	ldr	r3, [pc, #212]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d108      	bne.n	8005afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005aea:	4b30      	ldr	r3, [pc, #192]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	492d      	ldr	r1, [pc, #180]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afc:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a19      	ldr	r1, [r3, #32]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	4927      	ldr	r1, [pc, #156]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCC_OscConfig+0x4fc>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fd fbcb 	bl	80032b4 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fd fbc7 	bl	80032b4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e037      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x46a>
 8005b40:	e02f      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <HAL_RCC_OscConfig+0x4fc>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fd fbb4 	bl	80032b4 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fd fbb0 	bl	80032b4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e020      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x498>
 8005b6e:	e018      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e013      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_OscConfig+0x4f4>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d106      	bne.n	8005b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40007000 	.word	0x40007000
 8005bb4:	42420060 	.word	0x42420060

08005bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0d0      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d910      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b67      	ldr	r3, [pc, #412]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 0207 	bic.w	r2, r3, #7
 8005be2:	4965      	ldr	r1, [pc, #404]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b63      	ldr	r3, [pc, #396]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0b8      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c14:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a58      	ldr	r2, [pc, #352]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c2c:	4b53      	ldr	r3, [pc, #332]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	4a52      	ldr	r2, [pc, #328]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c38:	4b50      	ldr	r3, [pc, #320]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	494d      	ldr	r1, [pc, #308]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d040      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d115      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d107      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e073      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c86:	4b3d      	ldr	r3, [pc, #244]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e06b      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c96:	4b39      	ldr	r3, [pc, #228]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f023 0203 	bic.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4936      	ldr	r1, [pc, #216]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca8:	f7fd fb04 	bl	80032b4 <HAL_GetTick>
 8005cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	e00a      	b.n	8005cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb0:	f7fd fb00 	bl	80032b4 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e053      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc6:	4b2d      	ldr	r3, [pc, #180]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 020c 	and.w	r2, r3, #12
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d1eb      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d210      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 0207 	bic.w	r2, r3, #7
 8005cee:	4922      	ldr	r1, [pc, #136]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e032      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4916      	ldr	r1, [pc, #88]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	490e      	ldr	r1, [pc, #56]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d46:	f000 f821 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_ClockConfig+0x1c4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	490a      	ldr	r1, [pc, #40]	; (8005d80 <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	5ccb      	ldrb	r3, [r1, r3]
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a09      	ldr	r2, [pc, #36]	; (8005d84 <HAL_RCC_ClockConfig+0x1cc>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <HAL_RCC_ClockConfig+0x1d0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd f844 	bl	8002df4 <HAL_InitTick>

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40022000 	.word	0x40022000
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	08019d14 	.word	0x08019d14
 8005d84:	20000004 	.word	0x20000004
 8005d88:	20000008 	.word	0x20000008

08005d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	b490      	push	{r4, r7}
 8005d8e:	b08a      	sub	sp, #40	; 0x28
 8005d90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d92:	4b2a      	ldr	r3, [pc, #168]	; (8005e3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d94:	1d3c      	adds	r4, r7, #4
 8005d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d9c:	f240 2301 	movw	r3, #513	; 0x201
 8005da0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	2300      	movs	r3, #0
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005db6:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d002      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x40>
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d003      	beq.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8005dca:	e02d      	b.n	8005e28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dce:	623b      	str	r3, [r7, #32]
      break;
 8005dd0:	e02d      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	0c9b      	lsrs	r3, r3, #18
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dde:	4413      	add	r3, r2
 8005de0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005de4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	0c5b      	lsrs	r3, r3, #17
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005dfe:	4413      	add	r3, r2
 8005e00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4a0e      	ldr	r2, [pc, #56]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e0a:	fb02 f203 	mul.w	r2, r2, r3
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	e004      	b.n	8005e22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e1c:	fb02 f303 	mul.w	r3, r2, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	623b      	str	r3, [r7, #32]
      break;
 8005e26:	e002      	b.n	8005e2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e28:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2a:	623b      	str	r3, [r7, #32]
      break;
 8005e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	; 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc90      	pop	{r4, r7}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	08018ffc 	.word	0x08018ffc
 8005e40:	40021000 	.word	0x40021000
 8005e44:	007a1200 	.word	0x007a1200
 8005e48:	003d0900 	.word	0x003d0900

08005e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr
 8005e5c:	20000004 	.word	0x20000004

08005e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e64:	f7ff fff2 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	4903      	ldr	r1, [pc, #12]	; (8005e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e76:	5ccb      	ldrb	r3, [r1, r3]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40021000 	.word	0x40021000
 8005e84:	08019d24 	.word	0x08019d24

08005e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e8c:	f7ff ffde 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	0adb      	lsrs	r3, r3, #11
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	4903      	ldr	r1, [pc, #12]	; (8005eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	08019d24 	.word	0x08019d24

08005eb0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ec0:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <HAL_RCC_GetClockConfig+0x58>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ecc:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <HAL_RCC_GetClockConfig+0x58>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <HAL_RCC_GetClockConfig+0x58>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ee4:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <HAL_RCC_GetClockConfig+0x58>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0207 	and.w	r2, r3, #7
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr
 8005f08:	40021000 	.word	0x40021000
 8005f0c:	40022000 	.word	0x40022000

08005f10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <RCC_Delay+0x34>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <RCC_Delay+0x38>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	0a5b      	lsrs	r3, r3, #9
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	fb02 f303 	mul.w	r3, r2, r3
 8005f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f2c:	bf00      	nop
  }
  while (Delay --);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1e5a      	subs	r2, r3, #1
 8005f32:	60fa      	str	r2, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f9      	bne.n	8005f2c <RCC_Delay+0x1c>
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	20000004 	.word	0x20000004
 8005f48:	10624dd3 	.word	0x10624dd3

08005f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d07d      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6c:	4b4f      	ldr	r3, [pc, #316]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f78:	4b4c      	ldr	r3, [pc, #304]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	4a4b      	ldr	r2, [pc, #300]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	61d3      	str	r3, [r2, #28]
 8005f84:	4b49      	ldr	r3, [pc, #292]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f94:	4b46      	ldr	r3, [pc, #280]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d118      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa0:	4b43      	ldr	r3, [pc, #268]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a42      	ldr	r2, [pc, #264]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005faa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fac:	f7fd f982 	bl	80032b4 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb4:	f7fd f97e 	bl	80032b4 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	; 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e06d      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc6:	4b3a      	ldr	r3, [pc, #232]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fd2:	4b36      	ldr	r3, [pc, #216]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02e      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d027      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff0:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ffa:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006000:	4b2c      	ldr	r3, [pc, #176]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006006:	4a29      	ldr	r2, [pc, #164]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d014      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006016:	f7fd f94d 	bl	80032b4 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601c:	e00a      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800601e:	f7fd f949 	bl	80032b4 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	f241 3288 	movw	r2, #5000	; 0x1388
 800602c:	4293      	cmp	r3, r2
 800602e:	d901      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e036      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ee      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006040:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4917      	ldr	r1, [pc, #92]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604e:	4313      	orrs	r3, r2
 8006050:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006058:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006062:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	490b      	ldr	r1, [pc, #44]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800607e:	4313      	orrs	r3, r2
 8006080:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	4904      	ldr	r1, [pc, #16]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40007000 	.word	0x40007000
 80060b4:	42420440 	.word	0x42420440

080060b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b08d      	sub	sp, #52	; 0x34
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80060c0:	4b6b      	ldr	r3, [pc, #428]	; (8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80060c2:	f107 040c 	add.w	r4, r7, #12
 80060c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80060cc:	f240 2301 	movw	r3, #513	; 0x201
 80060d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
 80060d6:	2300      	movs	r3, #0
 80060d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060da:	2300      	movs	r3, #0
 80060dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	2300      	movs	r3, #0
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	f200 80b6 	bhi.w	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80060f0:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80060f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f6:	bf00      	nop
 80060f8:	080061db 	.word	0x080061db
 80060fc:	08006241 	.word	0x08006241
 8006100:	0800625d 	.word	0x0800625d
 8006104:	080061cb 	.word	0x080061cb
 8006108:	0800625d 	.word	0x0800625d
 800610c:	0800625d 	.word	0x0800625d
 8006110:	0800625d 	.word	0x0800625d
 8006114:	080061d3 	.word	0x080061d3
 8006118:	0800625d 	.word	0x0800625d
 800611c:	0800625d 	.word	0x0800625d
 8006120:	0800625d 	.word	0x0800625d
 8006124:	0800625d 	.word	0x0800625d
 8006128:	0800625d 	.word	0x0800625d
 800612c:	0800625d 	.word	0x0800625d
 8006130:	0800625d 	.word	0x0800625d
 8006134:	08006139 	.word	0x08006139
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006138:	4b4e      	ldr	r3, [pc, #312]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800613e:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 808a 	beq.w	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	0c9b      	lsrs	r3, r3, #18
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006158:	4413      	add	r3, r2
 800615a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800615e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d018      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800616a:	4b42      	ldr	r3, [pc, #264]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	0c5b      	lsrs	r3, r3, #17
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006178:	4413      	add	r3, r2
 800617a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800618a:	4a3b      	ldr	r2, [pc, #236]	; (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800619a:	e004      	b.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	4a37      	ldr	r2, [pc, #220]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061a6:	4b33      	ldr	r3, [pc, #204]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061b2:	d102      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80061b8:	e052      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80061ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	4a30      	ldr	r2, [pc, #192]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061c8:	e04a      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80061ca:	f7ff fddf 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 80061ce:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80061d0:	e049      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80061d2:	f7ff fddb 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 80061d6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80061d8:	e045      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80061da:	4b26      	ldr	r3, [pc, #152]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ea:	d108      	bne.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80061f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fc:	e01f      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006208:	d109      	bne.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800620a:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8006216:	f649 4340 	movw	r3, #40000	; 0x9c40
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
 800621c:	e00f      	b.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006224:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006228:	d11c      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800622a:	4b12      	ldr	r3, [pc, #72]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8006236:	f24f 4324 	movw	r3, #62500	; 0xf424
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800623c:	e012      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800623e:	e011      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006240:	f7ff fe22 	bl	8005e88 <HAL_RCC_GetPCLK2Freq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	0b9b      	lsrs	r3, r3, #14
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	3301      	adds	r3, #1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800625a:	e004      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 800625c:	bf00      	nop
 800625e:	e002      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8006264:	bf00      	nop
    }
  }
  return (frequency);
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006268:	4618      	mov	r0, r3
 800626a:	3734      	adds	r7, #52	; 0x34
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}
 8006270:	0801900c 	.word	0x0801900c
 8006274:	40021000 	.word	0x40021000
 8006278:	007a1200 	.word	0x007a1200
 800627c:	003d0900 	.word	0x003d0900
 8006280:	aaaaaaab 	.word	0xaaaaaaab

08006284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e041      	b.n	800631a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f839 	bl	8006322 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 f9c2 	bl	800664c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d001      	beq.n	800634c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e044      	b.n	80063d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_TIM_Base_Start_IT+0xac>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d018      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0x6c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0x6c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d00e      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0x6c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0x6c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_TIM_Base_Start_IT+0xb8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0x6c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_TIM_Base_Start_IT+0xbc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d111      	bne.n	80063c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b06      	cmp	r3, #6
 80063b0:	d010      	beq.n	80063d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0201 	orr.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c2:	e007      	b.n	80063d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40013400 	.word	0x40013400
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00

080063f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0202 	mvn.w	r2, #2
 8006420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8ed 	bl	8006616 <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8e0 	bl	8006604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f8ef 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0204 	mvn.w	r2, #4
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f8c3 	bl	8006616 <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f8b6 	bl	8006604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f8c5 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d122      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d11b      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0208 	mvn.w	r2, #8
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f899 	bl	8006616 <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f88c 	bl	8006604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f89b 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b10      	cmp	r3, #16
 8006504:	d122      	bne.n	800654c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b10      	cmp	r3, #16
 8006512:	d11b      	bne.n	800654c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0210 	mvn.w	r2, #16
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2208      	movs	r2, #8
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f86f 	bl	8006616 <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f862 	bl	8006604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f871 	bl	8006628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0201 	mvn.w	r2, #1
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fc fa9c 	bl	8002ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f8d7 	bl	8006752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d10e      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d107      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f835 	bl	800663a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d10e      	bne.n	80065fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b20      	cmp	r3, #32
 80065ea:	d107      	bne.n	80065fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0220 	mvn.w	r2, #32
 80065f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8a2 	bl	8006740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr

0800663a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a33      	ldr	r2, [pc, #204]	; (800672c <TIM_Base_SetConfig+0xe0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a32      	ldr	r2, [pc, #200]	; (8006730 <TIM_Base_SetConfig+0xe4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d00f      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006672:	d00b      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a2f      	ldr	r2, [pc, #188]	; (8006734 <TIM_Base_SetConfig+0xe8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d007      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a2e      	ldr	r2, [pc, #184]	; (8006738 <TIM_Base_SetConfig+0xec>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d003      	beq.n	800668c <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a2d      	ldr	r2, [pc, #180]	; (800673c <TIM_Base_SetConfig+0xf0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d108      	bne.n	800669e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <TIM_Base_SetConfig+0xe0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d013      	beq.n	80066ce <TIM_Base_SetConfig+0x82>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a21      	ldr	r2, [pc, #132]	; (8006730 <TIM_Base_SetConfig+0xe4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00f      	beq.n	80066ce <TIM_Base_SetConfig+0x82>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b4:	d00b      	beq.n	80066ce <TIM_Base_SetConfig+0x82>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <TIM_Base_SetConfig+0xe8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d007      	beq.n	80066ce <TIM_Base_SetConfig+0x82>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <TIM_Base_SetConfig+0xec>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d003      	beq.n	80066ce <TIM_Base_SetConfig+0x82>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	; (800673c <TIM_Base_SetConfig+0xf0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d108      	bne.n	80066e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a09      	ldr	r2, [pc, #36]	; (800672c <TIM_Base_SetConfig+0xe0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_Base_SetConfig+0xc8>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <TIM_Base_SetConfig+0xe4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d103      	bne.n	800671c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	615a      	str	r2, [r3, #20]
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	40012c00 	.word	0x40012c00
 8006730:	40013400 	.word	0x40013400
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00

08006740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	bc80      	pop	{r7}
 8006750:	4770      	bx	lr

08006752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e03f      	b.n	80067f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fc fcc0 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2224      	movs	r2, #36	; 0x24
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fdb5 	bl	8007318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695a      	ldr	r2, [r3, #20]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b20      	cmp	r3, #32
 8006818:	d153      	bne.n	80068c2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_UART_Transmit_DMA+0x26>
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e04c      	b.n	80068c4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_UART_Transmit_DMA+0x38>
 8006834:	2302      	movs	r3, #2
 8006836:	e045      	b.n	80068c4 <HAL_UART_Transmit_DMA+0xc4>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	88fa      	ldrh	r2, [r7, #6]
 8006850:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2221      	movs	r2, #33	; 0x21
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <HAL_UART_Transmit_DMA+0xcc>)
 8006866:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686c:	4a18      	ldr	r2, [pc, #96]	; (80068d0 <HAL_UART_Transmit_DMA+0xd0>)
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	4a17      	ldr	r2, [pc, #92]	; (80068d4 <HAL_UART_Transmit_DMA+0xd4>)
 8006876:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	2200      	movs	r2, #0
 800687e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3304      	adds	r3, #4
 8006894:	461a      	mov	r2, r3
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	f7fe f93e 	bl	8004b18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068bc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	08006db5 	.word	0x08006db5
 80068d0:	08006e07 	.word	0x08006e07
 80068d4:	08006eef 	.word	0x08006eef

080068d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d11d      	bne.n	800692e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_Receive_DMA+0x26>
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e016      	b.n	8006930 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_UART_Receive_DMA+0x38>
 800690c:	2302      	movs	r3, #2
 800690e:	e00f      	b.n	8006930 <HAL_UART_Receive_DMA+0x58>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	461a      	mov	r2, r3
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fb2d 	bl	8006f84 <UART_Start_Receive_DMA>
 800692a:	4603      	mov	r3, r0
 800692c:	e000      	b.n	8006930 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800692e:	2302      	movs	r3, #2
  }
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf14      	ite	ne
 8006952:	2301      	movne	r3, #1
 8006954:	2300      	moveq	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b21      	cmp	r3, #33	; 0x21
 8006964:	d116      	bne.n	8006994 <HAL_UART_DMAStop+0x5c>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800697a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe f924 	bl	8004bd6 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fb5c 	bl	800704c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b22      	cmp	r3, #34	; 0x22
 80069b4:	d116      	bne.n	80069e4 <HAL_UART_DMAStop+0xac>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d013      	beq.n	80069e4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695a      	ldr	r2, [r3, #20]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069ca:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe f8fc 	bl	8004bd6 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb49 	bl	8007076 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10d      	bne.n	8006a42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_UART_IRQHandler+0x52>
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fbc2 	bl	80071c4 <UART_Receive_IT>
      return;
 8006a40:	e17b      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80b1 	beq.w	8006bac <HAL_UART_IRQHandler+0x1bc>
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <HAL_UART_IRQHandler+0x70>
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a6 	beq.w	8006bac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_UART_IRQHandler+0x90>
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <HAL_UART_IRQHandler+0xb0>
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f043 0202 	orr.w	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_UART_IRQHandler+0xd0>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f043 0204 	orr.w	r2, r3, #4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00f      	beq.n	8006aea <HAL_UART_IRQHandler+0xfa>
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_UART_IRQHandler+0xee>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d005      	beq.n	8006aea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	f043 0208 	orr.w	r2, r3, #8
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 811e 	beq.w	8006d30 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	f003 0320 	and.w	r3, r3, #32
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d007      	beq.n	8006b0e <HAL_UART_IRQHandler+0x11e>
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fb5b 	bl	80071c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <HAL_UART_IRQHandler+0x146>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d031      	beq.n	8006b9a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa9d 	bl	8007076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d023      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b58:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d013      	beq.n	8006b8a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	4a76      	ldr	r2, [pc, #472]	; (8006d40 <HAL_UART_IRQHandler+0x350>)
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe f86c 	bl	8004c4c <HAL_DMA_Abort_IT>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d016      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e00e      	b.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f8fe 	bl	8006d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	e00a      	b.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f8fa 	bl	8006d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	e006      	b.n	8006ba8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f8f6 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ba6:	e0c3      	b.n	8006d30 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba8:	bf00      	nop
    return;
 8006baa:	e0c1      	b.n	8006d30 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	f040 80a1 	bne.w	8006cf8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 809b 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8095 	beq.w	8006cf8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d04e      	beq.n	8006c90 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006bfc:	8a3b      	ldrh	r3, [r7, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 8098 	beq.w	8006d34 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c08:	8a3a      	ldrh	r2, [r7, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	f080 8092 	bcs.w	8006d34 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8a3a      	ldrh	r2, [r7, #16]
 8006c14:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d02b      	beq.n	8006c78 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c2e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695a      	ldr	r2, [r3, #20]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0201 	bic.w	r2, r2, #1
 8006c3e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0210 	bic.w	r2, r2, #16
 8006c6c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd ffaf 	bl	8004bd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f888 	bl	8006d9e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c8e:	e051      	b.n	8006d34 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d047      	beq.n	8006d38 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006ca8:	8a7b      	ldrh	r3, [r7, #18]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d044      	beq.n	8006d38 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cbc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695a      	ldr	r2, [r3, #20]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0201 	bic.w	r2, r2, #1
 8006ccc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0210 	bic.w	r2, r2, #16
 8006cea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cec:	8a7b      	ldrh	r3, [r7, #18]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f854 	bl	8006d9e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006cf6:	e01f      	b.n	8006d38 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <HAL_UART_IRQHandler+0x324>
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f9f2 	bl	80070f6 <UART_Transmit_IT>
    return;
 8006d12:	e012      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00d      	beq.n	8006d3a <HAL_UART_IRQHandler+0x34a>
 8006d1e:	6a3b      	ldr	r3, [r7, #32]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d008      	beq.n	8006d3a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa33 	bl	8007194 <UART_EndTransmit_IT>
    return;
 8006d2e:	e004      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
    return;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
      return;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_UART_IRQHandler+0x34a>
      return;
 8006d38:	bf00      	nop
  }
}
 8006d3a:	3728      	adds	r7, #40	; 0x28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	080070cf 	.word	0x080070cf

08006d44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr

08006d7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d113      	bne.n	8006df8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695a      	ldr	r2, [r3, #20]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006df4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006df6:	e002      	b.n	8006dfe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff ffa3 	bl	8006d44 <HAL_UART_TxCpltCallback>
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7ff ff9e 	bl	8006d56 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d12a      	bne.n	8006e94 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e52:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0201 	bic.w	r2, r2, #1
 8006e62:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695a      	ldr	r2, [r3, #20]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e72:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d107      	bne.n	8006e94 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68da      	ldr	r2, [r3, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0210 	bic.w	r2, r2, #16
 8006e92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d106      	bne.n	8006eaa <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff ff7b 	bl	8006d9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ea8:	e002      	b.n	8006eb0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7ff ff5c 	bl	8006d68 <HAL_UART_RxCpltCallback>
}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d108      	bne.n	8006ee0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff ff60 	bl	8006d9e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ede:	e002      	b.n	8006ee6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ff4a 	bl	8006d7a <HAL_UART_RxHalfCpltCallback>
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	2300      	moveq	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b21      	cmp	r3, #33	; 0x21
 8006f20:	d108      	bne.n	8006f34 <UART_DMAError+0x46>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f000 f88c 	bl	800704c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bf14      	ite	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	2300      	moveq	r3, #0
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b22      	cmp	r3, #34	; 0x22
 8006f54:	d108      	bne.n	8006f68 <UART_DMAError+0x7a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006f62:	68b8      	ldr	r0, [r7, #8]
 8006f64:	f000 f887 	bl	8007076 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	f043 0210 	orr.w	r2, r3, #16
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	f7ff ff09 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2222      	movs	r2, #34	; 0x22
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	4a23      	ldr	r2, [pc, #140]	; (8007040 <UART_Start_Receive_DMA+0xbc>)
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	4a22      	ldr	r2, [pc, #136]	; (8007044 <UART_Start_Receive_DMA+0xc0>)
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	4a21      	ldr	r2, [pc, #132]	; (8007048 <UART_Start_Receive_DMA+0xc4>)
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	2200      	movs	r2, #0
 8006fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	f7fd fd98 	bl	8004b18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007014:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695a      	ldr	r2, [r3, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007034:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	08006e23 	.word	0x08006e23
 8007044:	08006eb9 	.word	0x08006eb9
 8007048:	08006eef 	.word	0x08006eef

0800704c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007062:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800708c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d107      	bne.n	80070b6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0210 	bic.w	r2, r2, #16
 80070b4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b084      	sub	sp, #16
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fe4f 	bl	8006d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b21      	cmp	r3, #33	; 0x21
 8007108:	d13e      	bne.n	8007188 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007112:	d114      	bne.n	800713e <UART_Transmit_IT+0x48>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d110      	bne.n	800713e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007130:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	1c9a      	adds	r2, r3, #2
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	621a      	str	r2, [r3, #32]
 800713c:	e008      	b.n	8007150 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6211      	str	r1, [r2, #32]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29b      	uxth	r3, r3
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	4619      	mov	r1, r3
 800715e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10f      	bne.n	8007184 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	e000      	b.n	800718a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007188:	2302      	movs	r3, #2
  }
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff fdc5 	bl	8006d44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b22      	cmp	r3, #34	; 0x22
 80071d6:	f040 8099 	bne.w	800730c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e2:	d117      	bne.n	8007214 <UART_Receive_IT+0x50>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d113      	bne.n	8007214 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007202:	b29a      	uxth	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	1c9a      	adds	r2, r3, #2
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	629a      	str	r2, [r3, #40]	; 0x28
 8007212:	e026      	b.n	8007262 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007226:	d007      	beq.n	8007238 <UART_Receive_IT+0x74>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <UART_Receive_IT+0x82>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b2da      	uxtb	r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	e008      	b.n	8007258 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007252:	b2da      	uxtb	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4619      	mov	r1, r3
 8007270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007272:	2b00      	cmp	r3, #0
 8007274:	d148      	bne.n	8007308 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0220 	bic.w	r2, r2, #32
 8007284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695a      	ldr	r2, [r3, #20]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0201 	bic.w	r2, r2, #1
 80072a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d123      	bne.n	80072fe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0210 	bic.w	r2, r2, #16
 80072ca:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d10a      	bne.n	80072f0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fd51 	bl	8006d9e <HAL_UARTEx_RxEventCallback>
 80072fc:	e002      	b.n	8007304 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fd32 	bl	8006d68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	e002      	b.n	800730e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689a      	ldr	r2, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007352:	f023 030c 	bic.w	r3, r3, #12
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	430b      	orrs	r3, r1
 800735e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2c      	ldr	r2, [pc, #176]	; (800742c <UART_SetConfig+0x114>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d103      	bne.n	8007388 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007380:	f7fe fd82 	bl	8005e88 <HAL_RCC_GetPCLK2Freq>
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	e002      	b.n	800738e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fe fd6a 	bl	8005e60 <HAL_RCC_GetPCLK1Freq>
 800738c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009a      	lsls	r2, r3, #2
 8007398:	441a      	add	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a4:	4a22      	ldr	r2, [pc, #136]	; (8007430 <UART_SetConfig+0x118>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	0119      	lsls	r1, r3, #4
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009a      	lsls	r2, r3, #2
 80073b8:	441a      	add	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80073c4:	4b1a      	ldr	r3, [pc, #104]	; (8007430 <UART_SetConfig+0x118>)
 80073c6:	fba3 0302 	umull	r0, r3, r3, r2
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	2064      	movs	r0, #100	; 0x64
 80073ce:	fb00 f303 	mul.w	r3, r0, r3
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	011b      	lsls	r3, r3, #4
 80073d6:	3332      	adds	r3, #50	; 0x32
 80073d8:	4a15      	ldr	r2, [pc, #84]	; (8007430 <UART_SetConfig+0x118>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073e4:	4419      	add	r1, r3
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009a      	lsls	r2, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <UART_SetConfig+0x118>)
 80073fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2064      	movs	r0, #100	; 0x64
 8007406:	fb00 f303 	mul.w	r3, r0, r3
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	3332      	adds	r3, #50	; 0x32
 8007410:	4a07      	ldr	r2, [pc, #28]	; (8007430 <UART_SetConfig+0x118>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	f003 020f 	and.w	r2, r3, #15
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	440a      	add	r2, r1
 8007422:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40013800 	.word	0x40013800
 8007430:	51eb851f 	.word	0x51eb851f

08007434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007434:	480c      	ldr	r0, [pc, #48]	; (8007468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007436:	490d      	ldr	r1, [pc, #52]	; (800746c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007438:	4a0d      	ldr	r2, [pc, #52]	; (8007470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800743a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800743c:	e002      	b.n	8007444 <LoopCopyDataInit>

0800743e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800743e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007442:	3304      	adds	r3, #4

08007444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007448:	d3f9      	bcc.n	800743e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800744a:	4a0a      	ldr	r2, [pc, #40]	; (8007474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800744c:	4c0a      	ldr	r4, [pc, #40]	; (8007478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800744e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007450:	e001      	b.n	8007456 <LoopFillZerobss>

08007452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007454:	3204      	adds	r2, #4

08007456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007458:	d3fb      	bcc.n	8007452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800745a:	f7fb fe29 	bl	80030b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800745e:	f010 f8fd 	bl	801765c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007462:	f7fb faaf 	bl	80029c4 <main>
  bx lr
 8007466:	4770      	bx	lr
  ldr r0, =_sdata
 8007468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800746c:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8007470:	0801a9b4 	.word	0x0801a9b4
  ldr r2, =_sbss
 8007474:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8007478:	2000d6a8 	.word	0x2000d6a8

0800747c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800747c:	e7fe      	b.n	800747c <ADC1_2_IRQHandler>
	...

08007480 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007486:	f3ef 8305 	mrs	r3, IPSR
 800748a:	60bb      	str	r3, [r7, #8]
  return(result);
 800748c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10f      	bne.n	80074b2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007492:	f3ef 8310 	mrs	r3, PRIMASK
 8007496:	607b      	str	r3, [r7, #4]
  return(result);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <osKernelInitialize+0x32>
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <osKernelInitialize+0x60>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d109      	bne.n	80074ba <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074a6:	f3ef 8311 	mrs	r3, BASEPRI
 80074aa:	603b      	str	r3, [r7, #0]
  return(result);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80074b2:	f06f 0305 	mvn.w	r3, #5
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e00c      	b.n	80074d4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <osKernelInitialize+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d105      	bne.n	80074ce <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <osKernelInitialize+0x60>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	e002      	b.n	80074d4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80074d4:	68fb      	ldr	r3, [r7, #12]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr
 80074e0:	20003248 	.word	0x20003248

080074e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ea:	f3ef 8305 	mrs	r3, IPSR
 80074ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80074f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10f      	bne.n	8007516 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074f6:	f3ef 8310 	mrs	r3, PRIMASK
 80074fa:	607b      	str	r3, [r7, #4]
  return(result);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d109      	bne.n	8007516 <osKernelStart+0x32>
 8007502:	4b11      	ldr	r3, [pc, #68]	; (8007548 <osKernelStart+0x64>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d109      	bne.n	800751e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800750a:	f3ef 8311 	mrs	r3, BASEPRI
 800750e:	603b      	str	r3, [r7, #0]
  return(result);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <osKernelStart+0x3a>
    stat = osErrorISR;
 8007516:	f06f 0305 	mvn.w	r3, #5
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e00e      	b.n	800753c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800751e:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <osKernelStart+0x64>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d107      	bne.n	8007536 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <osKernelStart+0x64>)
 8007528:	2202      	movs	r2, #2
 800752a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800752c:	f001 f99e 	bl	800886c <vTaskStartScheduler>
      stat = osOK;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
 8007534:	e002      	b.n	800753c <osKernelStart+0x58>
    } else {
      stat = osError;
 8007536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800753a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800753c:	68fb      	ldr	r3, [r7, #12]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20003248 	.word	0x20003248

0800754c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b092      	sub	sp, #72	; 0x48
 8007550:	af04      	add	r7, sp, #16
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800755c:	f3ef 8305 	mrs	r3, IPSR
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007564:	2b00      	cmp	r3, #0
 8007566:	f040 8094 	bne.w	8007692 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800756a:	f3ef 8310 	mrs	r3, PRIMASK
 800756e:	623b      	str	r3, [r7, #32]
  return(result);
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 808d 	bne.w	8007692 <osThreadNew+0x146>
 8007578:	4b48      	ldr	r3, [pc, #288]	; (800769c <osThreadNew+0x150>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d106      	bne.n	800758e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007580:	f3ef 8311 	mrs	r3, BASEPRI
 8007584:	61fb      	str	r3, [r7, #28]
  return(result);
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f040 8082 	bne.w	8007692 <osThreadNew+0x146>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d07e      	beq.n	8007692 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007594:	2380      	movs	r3, #128	; 0x80
 8007596:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007598:	2318      	movs	r3, #24
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800759c:	2300      	movs	r3, #0
 800759e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80075a0:	f107 031b 	add.w	r3, r7, #27
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075aa:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d045      	beq.n	800763e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <osThreadNew+0x74>
        name = attr->name;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d008      	beq.n	80075e6 <osThreadNew+0x9a>
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	2b38      	cmp	r3, #56	; 0x38
 80075d8:	d805      	bhi.n	80075e6 <osThreadNew+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <osThreadNew+0x9e>
        return (NULL);
 80075e6:	2300      	movs	r3, #0
 80075e8:	e054      	b.n	8007694 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	089b      	lsrs	r3, r3, #2
 80075f8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00e      	beq.n	8007620 <osThreadNew+0xd4>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	2b5b      	cmp	r3, #91	; 0x5b
 8007608:	d90a      	bls.n	8007620 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800760e:	2b00      	cmp	r3, #0
 8007610:	d006      	beq.n	8007620 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <osThreadNew+0xd4>
        mem = 1;
 800761a:	2301      	movs	r3, #1
 800761c:	62bb      	str	r3, [r7, #40]	; 0x28
 800761e:	e010      	b.n	8007642 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10c      	bne.n	8007642 <osThreadNew+0xf6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d108      	bne.n	8007642 <osThreadNew+0xf6>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <osThreadNew+0xf6>
          mem = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
 800763c:	e001      	b.n	8007642 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007644:	2b01      	cmp	r3, #1
 8007646:	d110      	bne.n	800766a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007650:	9202      	str	r2, [sp, #8]
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800765c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 ff38 	bl	80084d4 <xTaskCreateStatic>
 8007664:	4603      	mov	r3, r0
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	e013      	b.n	8007692 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	d110      	bne.n	8007692 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	b29a      	uxth	r2, r3
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 ff82 	bl	800858c <xTaskCreate>
 8007688:	4603      	mov	r3, r0
 800768a:	2b01      	cmp	r3, #1
 800768c:	d001      	beq.n	8007692 <osThreadNew+0x146>
          hTask = NULL;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007692:	697b      	ldr	r3, [r7, #20]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3738      	adds	r7, #56	; 0x38
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20003248 	.word	0x20003248

080076a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076a8:	f3ef 8305 	mrs	r3, IPSR
 80076ac:	613b      	str	r3, [r7, #16]
  return(result);
 80076ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10f      	bne.n	80076d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b4:	f3ef 8310 	mrs	r3, PRIMASK
 80076b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d109      	bne.n	80076d4 <osDelay+0x34>
 80076c0:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <osDelay+0x58>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d109      	bne.n	80076dc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076c8:	f3ef 8311 	mrs	r3, BASEPRI
 80076cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d003      	beq.n	80076dc <osDelay+0x3c>
    stat = osErrorISR;
 80076d4:	f06f 0305 	mvn.w	r3, #5
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	e007      	b.n	80076ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f001 f88c 	bl	8008804 <vTaskDelay>
    }
  }

  return (stat);
 80076ec:	697b      	ldr	r3, [r7, #20]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20003248 	.word	0x20003248

080076fc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007708:	f3ef 8305 	mrs	r3, IPSR
 800770c:	613b      	str	r3, [r7, #16]
  return(result);
 800770e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007710:	2b00      	cmp	r3, #0
 8007712:	f040 8085 	bne.w	8007820 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007716:	f3ef 8310 	mrs	r3, PRIMASK
 800771a:	60fb      	str	r3, [r7, #12]
  return(result);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d17e      	bne.n	8007820 <osMutexNew+0x124>
 8007722:	4b42      	ldr	r3, [pc, #264]	; (800782c <osMutexNew+0x130>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d105      	bne.n	8007736 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800772a:	f3ef 8311 	mrs	r3, BASEPRI
 800772e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d174      	bne.n	8007820 <osMutexNew+0x124>
    if (attr != NULL) {
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <osMutexNew+0x48>
      type = attr->attr_bits;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	623b      	str	r3, [r7, #32]
 8007742:	e001      	b.n	8007748 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <osMutexNew+0x5c>
      rmtx = 1U;
 8007752:	2301      	movs	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	e001      	b.n	800775c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f003 0308 	and.w	r3, r3, #8
 8007762:	2b00      	cmp	r3, #0
 8007764:	d15c      	bne.n	8007820 <osMutexNew+0x124>
      mem = -1;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800776a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d015      	beq.n	800779e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <osMutexNew+0x8c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b4f      	cmp	r3, #79	; 0x4f
 8007780:	d902      	bls.n	8007788 <osMutexNew+0x8c>
          mem = 1;
 8007782:	2301      	movs	r3, #1
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e00c      	b.n	80077a2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d108      	bne.n	80077a2 <osMutexNew+0xa6>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d104      	bne.n	80077a2 <osMutexNew+0xa6>
            mem = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	e001      	b.n	80077a2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d112      	bne.n	80077ce <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d007      	beq.n	80077be <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	4619      	mov	r1, r3
 80077b4:	2004      	movs	r0, #4
 80077b6:	f000 fa8f 	bl	8007cd8 <xQueueCreateMutexStatic>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24
 80077bc:	e016      	b.n	80077ec <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	4619      	mov	r1, r3
 80077c4:	2001      	movs	r0, #1
 80077c6:	f000 fa87 	bl	8007cd8 <xQueueCreateMutexStatic>
 80077ca:	6278      	str	r0, [r7, #36]	; 0x24
 80077cc:	e00e      	b.n	80077ec <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10b      	bne.n	80077ec <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80077da:	2004      	movs	r0, #4
 80077dc:	f000 fa64 	bl	8007ca8 <xQueueCreateMutex>
 80077e0:	6278      	str	r0, [r7, #36]	; 0x24
 80077e2:	e003      	b.n	80077ec <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80077e4:	2001      	movs	r0, #1
 80077e6:	f000 fa5f 	bl	8007ca8 <xQueueCreateMutex>
 80077ea:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00c      	beq.n	800780c <osMutexNew+0x110>
        if (attr != NULL) {
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <osMutexNew+0x104>
          name = attr->name;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e001      	b.n	8007804 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007808:	f000 fe08 	bl	800841c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d006      	beq.n	8007820 <osMutexNew+0x124>
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f043 0301 	orr.w	r3, r3, #1
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007822:	4618      	mov	r0, r3
 8007824:	3728      	adds	r7, #40	; 0x28
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20003248 	.word	0x20003248

08007830 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4a06      	ldr	r2, [pc, #24]	; (8007858 <vApplicationGetIdleTaskMemory+0x28>)
 8007840:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4a05      	ldr	r2, [pc, #20]	; (800785c <vApplicationGetIdleTaskMemory+0x2c>)
 8007846:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2280      	movs	r2, #128	; 0x80
 800784c:	601a      	str	r2, [r3, #0]
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	2000324c 	.word	0x2000324c
 800785c:	200032a8 	.word	0x200032a8

08007860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <vApplicationGetTimerTaskMemory+0x2c>)
 8007870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4a06      	ldr	r2, [pc, #24]	; (8007890 <vApplicationGetTimerTaskMemory+0x30>)
 8007876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787e:	601a      	str	r2, [r3, #0]
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200034a8 	.word	0x200034a8
 8007890:	20003504 	.word	0x20003504

08007894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f103 0208 	add.w	r2, r3, #8
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f103 0208 	add.w	r2, r3, #8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f103 0208 	add.w	r2, r3, #8
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bc80      	pop	{r7}
 80078d0:	4770      	bx	lr

080078d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr

080078ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	1c5a      	adds	r2, r3, #1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	601a      	str	r2, [r3, #0]
}
 8007926:	bf00      	nop
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr

08007930 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007946:	d103      	bne.n	8007950 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e00c      	b.n	800796a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3308      	adds	r3, #8
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	e002      	b.n	800795e <vListInsert+0x2e>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d2f6      	bcs.n	8007958 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6892      	ldr	r2, [r2, #8]
 80079b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6852      	ldr	r2, [r2, #4]
 80079c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d103      	bne.n	80079d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	1e5a      	subs	r2, r3, #1
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr
	...

080079f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <xQueueGenericReset+0x2a>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	60bb      	str	r3, [r7, #8]
}
 8007a1a:	bf00      	nop
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a1e:	f002 f87d 	bl	8009b1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a2e:	fb01 f303 	mul.w	r3, r1, r3
 8007a32:	441a      	add	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	68f9      	ldr	r1, [r7, #12]
 8007a52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	441a      	add	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	22ff      	movs	r2, #255	; 0xff
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	22ff      	movs	r2, #255	; 0xff
 8007a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d114      	bne.n	8007a9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01a      	beq.n	8007ab2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3310      	adds	r3, #16
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 f97d 	bl	8008d80 <xTaskRemoveFromEventList>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d012      	beq.n	8007ab2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <xQueueGenericReset+0xcc>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	e009      	b.n	8007ab2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3310      	adds	r3, #16
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fef6 	bl	8007894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3324      	adds	r3, #36	; 0x24
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fef1 	bl	8007894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ab2:	f002 f863 	bl	8009b7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ab6:	2301      	movs	r3, #1
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	; 0x38
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007aea:	bf00      	nop
 8007aec:	e7fe      	b.n	8007aec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b06:	bf00      	nop
 8007b08:	e7fe      	b.n	8007b08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <xQueueGenericCreateStatic+0x52>
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <xQueueGenericCreateStatic+0x56>
 8007b16:	2301      	movs	r3, #1
 8007b18:	e000      	b.n	8007b1c <xQueueGenericCreateStatic+0x58>
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	623b      	str	r3, [r7, #32]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <xQueueGenericCreateStatic+0x7e>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <xQueueGenericCreateStatic+0x82>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueGenericCreateStatic+0x84>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	61fb      	str	r3, [r7, #28]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b62:	2350      	movs	r3, #80	; 0x50
 8007b64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b50      	cmp	r3, #80	; 0x50
 8007b6a:	d00a      	beq.n	8007b82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	61bb      	str	r3, [r7, #24]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00d      	beq.n	8007ba8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f843 	bl	8007c2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3730      	adds	r7, #48	; 0x30
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b08a      	sub	sp, #40	; 0x28
 8007bb6:	af02      	add	r7, sp, #8
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d10a      	bne.n	8007bdc <xQueueGenericCreate+0x2a>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	613b      	str	r3, [r7, #16]
}
 8007bd8:	bf00      	nop
 8007bda:	e7fe      	b.n	8007bda <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	e004      	b.n	8007bf2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	fb02 f303 	mul.w	r3, r2, r3
 8007bf0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	3350      	adds	r3, #80	; 0x50
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f002 f890 	bl	8009d1c <pvPortMalloc>
 8007bfc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3350      	adds	r3, #80	; 0x50
 8007c08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c12:	79fa      	ldrb	r2, [r7, #7]
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	68b9      	ldr	r1, [r7, #8]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f000 f805 	bl	8007c2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c24:	69bb      	ldr	r3, [r7, #24]
	}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3720      	adds	r7, #32
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	60f8      	str	r0, [r7, #12]
 8007c36:	60b9      	str	r1, [r7, #8]
 8007c38:	607a      	str	r2, [r7, #4]
 8007c3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d103      	bne.n	8007c4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	e002      	b.n	8007c50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	69b8      	ldr	r0, [r7, #24]
 8007c60:	f7ff fec8 	bl	80079f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	78fa      	ldrb	r2, [r7, #3]
 8007c68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00e      	beq.n	8007ca0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007c94:	2300      	movs	r3, #0
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f838 	bl	8007d10 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	6939      	ldr	r1, [r7, #16]
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	f7ff ff76 	bl	8007bb2 <xQueueGenericCreate>
 8007cc6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff ffd3 	bl	8007c74 <prvInitialiseMutex>

		return pxNewQueue;
 8007cce:	68fb      	ldr	r3, [r7, #12]
	}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	4603      	mov	r3, r0
 8007ce0:	6039      	str	r1, [r7, #0]
 8007ce2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	6939      	ldr	r1, [r7, #16]
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f7ff fee4 	bl	8007ac4 <xQueueGenericCreateStatic>
 8007cfc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff ffb8 	bl	8007c74 <prvInitialiseMutex>

		return pxNewQueue;
 8007d04:	68fb      	ldr	r3, [r7, #12]
	}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <xQueueGenericSend+0x32>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <xQueueGenericSend+0x40>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <xQueueGenericSend+0x44>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <xQueueGenericSend+0x46>
 8007d54:	2300      	movs	r3, #0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <xQueueGenericSend+0x60>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	f383 8811 	msr	BASEPRI, r3
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d6c:	bf00      	nop
 8007d6e:	e7fe      	b.n	8007d6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d103      	bne.n	8007d7e <xQueueGenericSend+0x6e>
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <xQueueGenericSend+0x72>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <xQueueGenericSend+0x74>
 8007d82:	2300      	movs	r3, #0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <xQueueGenericSend+0x8e>
	__asm volatile
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	623b      	str	r3, [r7, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	e7fe      	b.n	8007d9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d9e:	f001 f9d7 	bl	8009150 <xTaskGetSchedulerState>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <xQueueGenericSend+0x9e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <xQueueGenericSend+0xa2>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <xQueueGenericSend+0xa4>
 8007db2:	2300      	movs	r3, #0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xQueueGenericSend+0xbe>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61fb      	str	r3, [r7, #28]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dce:	f001 fea5 	bl	8009b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d302      	bcc.n	8007de4 <xQueueGenericSend+0xd4>
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d129      	bne.n	8007e38 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dea:	f000 fa07 	bl	80081fc <prvCopyDataToQueue>
 8007dee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d010      	beq.n	8007e1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	3324      	adds	r3, #36	; 0x24
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 ffbf 	bl	8008d80 <xTaskRemoveFromEventList>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d013      	beq.n	8007e30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e08:	4b3f      	ldr	r3, [pc, #252]	; (8007f08 <xQueueGenericSend+0x1f8>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	e00a      	b.n	8007e30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e20:	4b39      	ldr	r3, [pc, #228]	; (8007f08 <xQueueGenericSend+0x1f8>)
 8007e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e30:	f001 fea4 	bl	8009b7c <vPortExitCritical>
				return pdPASS;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e063      	b.n	8007f00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d103      	bne.n	8007e46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e3e:	f001 fe9d 	bl	8009b7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e05c      	b.n	8007f00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d106      	bne.n	8007e5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f81f 	bl	8008e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e5a:	f001 fe8f 	bl	8009b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e5e:	f000 fd6b 	bl	8008938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e62:	f001 fe5b 	bl	8009b1c <vPortEnterCritical>
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e6c:	b25b      	sxtb	r3, r3
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e72:	d103      	bne.n	8007e7c <xQueueGenericSend+0x16c>
 8007e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e82:	b25b      	sxtb	r3, r3
 8007e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e88:	d103      	bne.n	8007e92 <xQueueGenericSend+0x182>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e92:	f001 fe73 	bl	8009b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e96:	1d3a      	adds	r2, r7, #4
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 f80e 	bl	8008ec0 <xTaskCheckForTimeOut>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d124      	bne.n	8007ef4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eac:	f000 fa9e 	bl	80083ec <prvIsQueueFull>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d018      	beq.n	8007ee8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	3310      	adds	r3, #16
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 ff0e 	bl	8008ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec6:	f000 fa29 	bl	800831c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007eca:	f000 fd43 	bl	8008954 <xTaskResumeAll>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f47f af7c 	bne.w	8007dce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <xQueueGenericSend+0x1f8>)
 8007ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	e772      	b.n	8007dce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eea:	f000 fa17 	bl	800831c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eee:	f000 fd31 	bl	8008954 <xTaskResumeAll>
 8007ef2:	e76c      	b.n	8007dce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef6:	f000 fa11 	bl	800831c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007efa:	f000 fd2b 	bl	8008954 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007efe:	2300      	movs	r3, #0
		}
	}
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3738      	adds	r7, #56	; 0x38
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	; 0x38
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d103      	bne.n	8007f48 <xQueueGenericSendFromISR+0x3c>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <xQueueGenericSendFromISR+0x40>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <xQueueGenericSendFromISR+0x42>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10a      	bne.n	8007f68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	623b      	str	r3, [r7, #32]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d103      	bne.n	8007f76 <xQueueGenericSendFromISR+0x6a>
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <xQueueGenericSendFromISR+0x6e>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueGenericSendFromISR+0x70>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61fb      	str	r3, [r7, #28]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f96:	f001 fe83 	bl	8009ca0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	61ba      	str	r2, [r7, #24]
 8007fb0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d302      	bcc.n	8007fc8 <xQueueGenericSendFromISR+0xbc>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d12c      	bne.n	8008022 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	68b9      	ldr	r1, [r7, #8]
 8007fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fd8:	f000 f910 	bl	80081fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fdc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fe4:	d112      	bne.n	800800c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d016      	beq.n	800801c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	3324      	adds	r3, #36	; 0x24
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fec4 	bl	8008d80 <xTaskRemoveFromEventList>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e007      	b.n	800801c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800800c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008010:	3301      	adds	r3, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	b25a      	sxtb	r2, r3
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800801c:	2301      	movs	r3, #1
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008020:	e001      	b.n	8008026 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008022:	2300      	movs	r3, #0
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008030:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008034:	4618      	mov	r0, r3
 8008036:	3738      	adds	r7, #56	; 0x38
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08c      	sub	sp, #48	; 0x30
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008048:	2300      	movs	r3, #0
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <xQueueReceive+0x30>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	623b      	str	r3, [r7, #32]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d103      	bne.n	800807a <xQueueReceive+0x3e>
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <xQueueReceive+0x42>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <xQueueReceive+0x44>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <xQueueReceive+0x5e>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	61fb      	str	r3, [r7, #28]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800809a:	f001 f859 	bl	8009150 <xTaskGetSchedulerState>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <xQueueReceive+0x6e>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <xQueueReceive+0x72>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <xQueueReceive+0x74>
 80080ae:	2300      	movs	r3, #0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <xQueueReceive+0x8e>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	61bb      	str	r3, [r7, #24]
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ca:	f001 fd27 	bl	8009b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01f      	beq.n	800811a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080de:	f000 f8f7 	bl	80082d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	1e5a      	subs	r2, r3, #1
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00f      	beq.n	8008112 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	3310      	adds	r3, #16
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fe42 	bl	8008d80 <xTaskRemoveFromEventList>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d007      	beq.n	8008112 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008102:	4b3d      	ldr	r3, [pc, #244]	; (80081f8 <xQueueReceive+0x1bc>)
 8008104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008112:	f001 fd33 	bl	8009b7c <vPortExitCritical>
				return pdPASS;
 8008116:	2301      	movs	r3, #1
 8008118:	e069      	b.n	80081ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d103      	bne.n	8008128 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008120:	f001 fd2c 	bl	8009b7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008124:	2300      	movs	r3, #0
 8008126:	e062      	b.n	80081ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800812e:	f107 0310 	add.w	r3, r7, #16
 8008132:	4618      	mov	r0, r3
 8008134:	f000 feae 	bl	8008e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800813c:	f001 fd1e 	bl	8009b7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008140:	f000 fbfa 	bl	8008938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008144:	f001 fcea 	bl	8009b1c <vPortEnterCritical>
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800814e:	b25b      	sxtb	r3, r3
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008154:	d103      	bne.n	800815e <xQueueReceive+0x122>
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008164:	b25b      	sxtb	r3, r3
 8008166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800816a:	d103      	bne.n	8008174 <xQueueReceive+0x138>
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008174:	f001 fd02 	bl	8009b7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008178:	1d3a      	adds	r2, r7, #4
 800817a:	f107 0310 	add.w	r3, r7, #16
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fe9d 	bl	8008ec0 <xTaskCheckForTimeOut>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d123      	bne.n	80081d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800818c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800818e:	f000 f917 	bl	80083c0 <prvIsQueueEmpty>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d017      	beq.n	80081c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	3324      	adds	r3, #36	; 0x24
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fd9d 	bl	8008ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a8:	f000 f8b8 	bl	800831c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081ac:	f000 fbd2 	bl	8008954 <xTaskResumeAll>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d189      	bne.n	80080ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081b6:	4b10      	ldr	r3, [pc, #64]	; (80081f8 <xQueueReceive+0x1bc>)
 80081b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	e780      	b.n	80080ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ca:	f000 f8a7 	bl	800831c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081ce:	f000 fbc1 	bl	8008954 <xTaskResumeAll>
 80081d2:	e77a      	b.n	80080ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d6:	f000 f8a1 	bl	800831c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081da:	f000 fbbb 	bl	8008954 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e0:	f000 f8ee 	bl	80083c0 <prvIsQueueEmpty>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f43f af6f 	beq.w	80080ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3730      	adds	r7, #48	; 0x30
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10d      	bne.n	8008236 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d14d      	bne.n	80082be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 ffb0 	bl	800918c <xTaskPriorityDisinherit>
 800822c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	605a      	str	r2, [r3, #4]
 8008234:	e043      	b.n	80082be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d119      	bne.n	8008270 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6898      	ldr	r0, [r3, #8]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	461a      	mov	r2, r3
 8008246:	68b9      	ldr	r1, [r7, #8]
 8008248:	f00f fa3c 	bl	80176c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d32b      	bcc.n	80082be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	609a      	str	r2, [r3, #8]
 800826e:	e026      	b.n	80082be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68d8      	ldr	r0, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	461a      	mov	r2, r3
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	f00f fa22 	bl	80176c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	425b      	negs	r3, r3
 800828a:	441a      	add	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	68da      	ldr	r2, [r3, #12]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d207      	bcs.n	80082ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	425b      	negs	r3, r3
 80082a6:	441a      	add	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d105      	bne.n	80082be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	1c5a      	adds	r2, r3, #1
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082c6:	697b      	ldr	r3, [r7, #20]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d018      	beq.n	8008314 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	441a      	add	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d303      	bcc.n	8008304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68d9      	ldr	r1, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	461a      	mov	r2, r3
 800830e:	6838      	ldr	r0, [r7, #0]
 8008310:	f00f f9d8 	bl	80176c4 <memcpy>
	}
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008324:	f001 fbfa 	bl	8009b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800832e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008330:	e011      	b.n	8008356 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d012      	beq.n	8008360 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3324      	adds	r3, #36	; 0x24
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fd1e 	bl	8008d80 <xTaskRemoveFromEventList>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800834a:	f000 fe1b 	bl	8008f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	3b01      	subs	r3, #1
 8008352:	b2db      	uxtb	r3, r3
 8008354:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800835a:	2b00      	cmp	r3, #0
 800835c:	dce9      	bgt.n	8008332 <prvUnlockQueue+0x16>
 800835e:	e000      	b.n	8008362 <prvUnlockQueue+0x46>
					break;
 8008360:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	22ff      	movs	r2, #255	; 0xff
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800836a:	f001 fc07 	bl	8009b7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800836e:	f001 fbd5 	bl	8009b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008378:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800837a:	e011      	b.n	80083a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d012      	beq.n	80083aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3310      	adds	r3, #16
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fcf9 	bl	8008d80 <xTaskRemoveFromEventList>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008394:	f000 fdf6 	bl	8008f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	3b01      	subs	r3, #1
 800839c:	b2db      	uxtb	r3, r3
 800839e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dce9      	bgt.n	800837c <prvUnlockQueue+0x60>
 80083a8:	e000      	b.n	80083ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	22ff      	movs	r2, #255	; 0xff
 80083b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083b4:	f001 fbe2 	bl	8009b7c <vPortExitCritical>
}
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083c8:	f001 fba8 	bl	8009b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083d4:	2301      	movs	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e001      	b.n	80083de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083de:	f001 fbcd 	bl	8009b7c <vPortExitCritical>

	return xReturn;
 80083e2:	68fb      	ldr	r3, [r7, #12]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083f4:	f001 fb92 	bl	8009b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008400:	429a      	cmp	r2, r3
 8008402:	d102      	bne.n	800840a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008404:	2301      	movs	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e001      	b.n	800840e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800840e:	f001 fbb5 	bl	8009b7c <vPortExitCritical>

	return xReturn;
 8008412:	68fb      	ldr	r3, [r7, #12]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e014      	b.n	8008456 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800842c:	4a0e      	ldr	r2, [pc, #56]	; (8008468 <vQueueAddToRegistry+0x4c>)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10b      	bne.n	8008450 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008438:	490b      	ldr	r1, [pc, #44]	; (8008468 <vQueueAddToRegistry+0x4c>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008442:	4a09      	ldr	r2, [pc, #36]	; (8008468 <vQueueAddToRegistry+0x4c>)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	4413      	add	r3, r2
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800844e:	e006      	b.n	800845e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	3301      	adds	r3, #1
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2b07      	cmp	r3, #7
 800845a:	d9e7      	bls.n	800842c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr
 8008468:	200084b8 	.word	0x200084b8

0800846c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800847c:	f001 fb4e 	bl	8009b1c <vPortEnterCritical>
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008486:	b25b      	sxtb	r3, r3
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800848c:	d103      	bne.n	8008496 <vQueueWaitForMessageRestricted+0x2a>
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849c:	b25b      	sxtb	r3, r3
 800849e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a2:	d103      	bne.n	80084ac <vQueueWaitForMessageRestricted+0x40>
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ac:	f001 fb66 	bl	8009b7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	3324      	adds	r3, #36	; 0x24
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 fc31 	bl	8008d28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084c6:	6978      	ldr	r0, [r7, #20]
 80084c8:	f7ff ff28 	bl	800831c <prvUnlockQueue>
	}
 80084cc:	bf00      	nop
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b08e      	sub	sp, #56	; 0x38
 80084d8:	af04      	add	r7, sp, #16
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	623b      	str	r3, [r7, #32]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <xTaskCreateStatic+0x46>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	61fb      	str	r3, [r7, #28]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800851a:	235c      	movs	r3, #92	; 0x5c
 800851c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b5c      	cmp	r3, #92	; 0x5c
 8008522:	d00a      	beq.n	800853a <xTaskCreateStatic+0x66>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	61bb      	str	r3, [r7, #24]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01e      	beq.n	800857e <xTaskCreateStatic+0xaa>
 8008540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008542:	2b00      	cmp	r3, #0
 8008544:	d01b      	beq.n	800857e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	2202      	movs	r2, #2
 8008554:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008558:	2300      	movs	r3, #0
 800855a:	9303      	str	r3, [sp, #12]
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	9302      	str	r3, [sp, #8]
 8008560:	f107 0314 	add.w	r3, r7, #20
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	68b9      	ldr	r1, [r7, #8]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 f850 	bl	8008616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008578:	f000 f8d4 	bl	8008724 <prvAddNewTaskToReadyList>
 800857c:	e001      	b.n	8008582 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008582:	697b      	ldr	r3, [r7, #20]
	}
 8008584:	4618      	mov	r0, r3
 8008586:	3728      	adds	r7, #40	; 0x28
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08c      	sub	sp, #48	; 0x30
 8008590:	af04      	add	r7, sp, #16
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	4613      	mov	r3, r2
 800859a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859c:	88fb      	ldrh	r3, [r7, #6]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 fbbb 	bl	8009d1c <pvPortMalloc>
 80085a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00e      	beq.n	80085cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80085ae:	205c      	movs	r0, #92	; 0x5c
 80085b0:	f001 fbb4 	bl	8009d1c <pvPortMalloc>
 80085b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	631a      	str	r2, [r3, #48]	; 0x30
 80085c2:	e005      	b.n	80085d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085c4:	6978      	ldr	r0, [r7, #20]
 80085c6:	f001 fc6d 	bl	8009ea4 <vPortFree>
 80085ca:	e001      	b.n	80085d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d017      	beq.n	8008606 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085de:	88fa      	ldrh	r2, [r7, #6]
 80085e0:	2300      	movs	r3, #0
 80085e2:	9303      	str	r3, [sp, #12]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	9302      	str	r3, [sp, #8]
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f80e 	bl	8008616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085fa:	69f8      	ldr	r0, [r7, #28]
 80085fc:	f000 f892 	bl	8008724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008600:	2301      	movs	r3, #1
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	e002      	b.n	800860c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800860a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800860c:	69bb      	ldr	r3, [r7, #24]
	}
 800860e:	4618      	mov	r0, r3
 8008610:	3720      	adds	r7, #32
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b088      	sub	sp, #32
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	461a      	mov	r2, r3
 800862e:	21a5      	movs	r1, #165	; 0xa5
 8008630:	f00f f870 	bl	8017714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800863e:	3b01      	subs	r3, #1
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <prvInitialiseNewTask+0x58>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	617b      	str	r3, [r7, #20]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800866e:	2300      	movs	r3, #0
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	e012      	b.n	800869a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	4413      	add	r3, r2
 800867a:	7819      	ldrb	r1, [r3, #0]
 800867c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	4413      	add	r3, r2
 8008682:	3334      	adds	r3, #52	; 0x34
 8008684:	460a      	mov	r2, r1
 8008686:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d006      	beq.n	80086a2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	3301      	adds	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	2b0f      	cmp	r3, #15
 800869e:	d9e9      	bls.n	8008674 <prvInitialiseNewTask+0x5e>
 80086a0:	e000      	b.n	80086a4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80086a2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	2b37      	cmp	r3, #55	; 0x37
 80086b0:	d901      	bls.n	80086b6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086b2:	2337      	movs	r3, #55	; 0x37
 80086b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	2200      	movs	r2, #0
 80086c6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	3304      	adds	r3, #4
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff f900 	bl	80078d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	3318      	adds	r3, #24
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7ff f8fb 	bl	80078d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	2200      	movs	r2, #0
 80086f6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	69b8      	ldr	r0, [r7, #24]
 8008706:	f001 f915 	bl	8009934 <pxPortInitialiseStack>
 800870a:	4602      	mov	r2, r0
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800871c:	bf00      	nop
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800872c:	f001 f9f6 	bl	8009b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008730:	4b2d      	ldr	r3, [pc, #180]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3301      	adds	r3, #1
 8008736:	4a2c      	ldr	r2, [pc, #176]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 8008738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800873a:	4b2c      	ldr	r3, [pc, #176]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008742:	4a2a      	ldr	r2, [pc, #168]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008748:	4b27      	ldr	r3, [pc, #156]	; (80087e8 <prvAddNewTaskToReadyList+0xc4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d110      	bne.n	8008772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008750:	f000 fc3c 	bl	8008fcc <prvInitialiseTaskLists>
 8008754:	e00d      	b.n	8008772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008756:	4b26      	ldr	r3, [pc, #152]	; (80087f0 <prvAddNewTaskToReadyList+0xcc>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800875e:	4b23      	ldr	r3, [pc, #140]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	429a      	cmp	r2, r3
 800876a:	d802      	bhi.n	8008772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800876c:	4a1f      	ldr	r2, [pc, #124]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008772:	4b20      	ldr	r3, [pc, #128]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3301      	adds	r3, #1
 8008778:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 800877a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800877c:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <prvAddNewTaskToReadyList+0xd0>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4b1b      	ldr	r3, [pc, #108]	; (80087f8 <prvAddNewTaskToReadyList+0xd4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d903      	bls.n	8008798 <prvAddNewTaskToReadyList+0x74>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	4a18      	ldr	r2, [pc, #96]	; (80087f8 <prvAddNewTaskToReadyList+0xd4>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a15      	ldr	r2, [pc, #84]	; (80087fc <prvAddNewTaskToReadyList+0xd8>)
 80087a6:	441a      	add	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7ff f89b 	bl	80078ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087b4:	f001 f9e2 	bl	8009b7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087b8:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <prvAddNewTaskToReadyList+0xcc>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <prvAddNewTaskToReadyList+0xc8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d207      	bcs.n	80087de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087ce:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <prvAddNewTaskToReadyList+0xdc>)
 80087d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20003dd8 	.word	0x20003dd8
 80087ec:	20003904 	.word	0x20003904
 80087f0:	20003de4 	.word	0x20003de4
 80087f4:	20003df4 	.word	0x20003df4
 80087f8:	20003de0 	.word	0x20003de0
 80087fc:	20003908 	.word	0x20003908
 8008800:	e000ed04 	.word	0xe000ed04

08008804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d017      	beq.n	8008846 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008816:	4b13      	ldr	r3, [pc, #76]	; (8008864 <vTaskDelay+0x60>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <vTaskDelay+0x30>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	60bb      	str	r3, [r7, #8]
}
 8008830:	bf00      	nop
 8008832:	e7fe      	b.n	8008832 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008834:	f000 f880 	bl	8008938 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008838:	2100      	movs	r1, #0
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fd14 	bl	8009268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008840:	f000 f888 	bl	8008954 <xTaskResumeAll>
 8008844:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d107      	bne.n	800885c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <vTaskDelay+0x64>)
 800884e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20003e00 	.word	0x20003e00
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08a      	sub	sp, #40	; 0x28
 8008870:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008876:	2300      	movs	r3, #0
 8008878:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800887a:	463a      	mov	r2, r7
 800887c:	1d39      	adds	r1, r7, #4
 800887e:	f107 0308 	add.w	r3, r7, #8
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe ffd4 	bl	8007830 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	9202      	str	r2, [sp, #8]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	2300      	movs	r3, #0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	460a      	mov	r2, r1
 800889a:	4921      	ldr	r1, [pc, #132]	; (8008920 <vTaskStartScheduler+0xb4>)
 800889c:	4821      	ldr	r0, [pc, #132]	; (8008924 <vTaskStartScheduler+0xb8>)
 800889e:	f7ff fe19 	bl	80084d4 <xTaskCreateStatic>
 80088a2:	4603      	mov	r3, r0
 80088a4:	4a20      	ldr	r2, [pc, #128]	; (8008928 <vTaskStartScheduler+0xbc>)
 80088a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088a8:	4b1f      	ldr	r3, [pc, #124]	; (8008928 <vTaskStartScheduler+0xbc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088b0:	2301      	movs	r3, #1
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e001      	b.n	80088ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d102      	bne.n	80088c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088c0:	f000 fd26 	bl	8009310 <xTimerCreateTimerTask>
 80088c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d116      	bne.n	80088fa <vTaskStartScheduler+0x8e>
	__asm volatile
 80088cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d0:	f383 8811 	msr	BASEPRI, r3
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	613b      	str	r3, [r7, #16]
}
 80088de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088e0:	4b12      	ldr	r3, [pc, #72]	; (800892c <vTaskStartScheduler+0xc0>)
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088e8:	4b11      	ldr	r3, [pc, #68]	; (8008930 <vTaskStartScheduler+0xc4>)
 80088ea:	2201      	movs	r2, #1
 80088ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <vTaskStartScheduler+0xc8>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088f4:	f001 f8a0 	bl	8009a38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088f8:	e00e      	b.n	8008918 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008900:	d10a      	bne.n	8008918 <vTaskStartScheduler+0xac>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60fb      	str	r3, [r7, #12]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <vTaskStartScheduler+0xaa>
}
 8008918:	bf00      	nop
 800891a:	3718      	adds	r7, #24
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	0801901c 	.word	0x0801901c
 8008924:	08008f9d 	.word	0x08008f9d
 8008928:	20003dfc 	.word	0x20003dfc
 800892c:	20003df8 	.word	0x20003df8
 8008930:	20003de4 	.word	0x20003de4
 8008934:	20003ddc 	.word	0x20003ddc

08008938 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008938:	b480      	push	{r7}
 800893a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800893c:	4b04      	ldr	r3, [pc, #16]	; (8008950 <vTaskSuspendAll+0x18>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3301      	adds	r3, #1
 8008942:	4a03      	ldr	r2, [pc, #12]	; (8008950 <vTaskSuspendAll+0x18>)
 8008944:	6013      	str	r3, [r2, #0]
}
 8008946:	bf00      	nop
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	20003e00 	.word	0x20003e00

08008954 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800895e:	2300      	movs	r3, #0
 8008960:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008962:	4b42      	ldr	r3, [pc, #264]	; (8008a6c <xTaskResumeAll+0x118>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <xTaskResumeAll+0x2c>
	__asm volatile
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
 800897a:	603b      	str	r3, [r7, #0]
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008980:	f001 f8cc 	bl	8009b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008984:	4b39      	ldr	r3, [pc, #228]	; (8008a6c <xTaskResumeAll+0x118>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3b01      	subs	r3, #1
 800898a:	4a38      	ldr	r2, [pc, #224]	; (8008a6c <xTaskResumeAll+0x118>)
 800898c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800898e:	4b37      	ldr	r3, [pc, #220]	; (8008a6c <xTaskResumeAll+0x118>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d162      	bne.n	8008a5c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008996:	4b36      	ldr	r3, [pc, #216]	; (8008a70 <xTaskResumeAll+0x11c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d05e      	beq.n	8008a5c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800899e:	e02f      	b.n	8008a00 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80089a0:	4b34      	ldr	r3, [pc, #208]	; (8008a74 <xTaskResumeAll+0x120>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	3318      	adds	r3, #24
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fff7 	bl	80079a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3304      	adds	r3, #4
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fe fff2 	bl	80079a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c0:	4b2d      	ldr	r3, [pc, #180]	; (8008a78 <xTaskResumeAll+0x124>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d903      	bls.n	80089d0 <xTaskResumeAll+0x7c>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4a2a      	ldr	r2, [pc, #168]	; (8008a78 <xTaskResumeAll+0x124>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4a27      	ldr	r2, [pc, #156]	; (8008a7c <xTaskResumeAll+0x128>)
 80089de:	441a      	add	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7fe ff7f 	bl	80078ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f0:	4b23      	ldr	r3, [pc, #140]	; (8008a80 <xTaskResumeAll+0x12c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d302      	bcc.n	8008a00 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80089fa:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <xTaskResumeAll+0x130>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a00:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <xTaskResumeAll+0x120>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1cb      	bne.n	80089a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a0e:	f000 fb7b 	bl	8009108 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a12:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <xTaskResumeAll+0x134>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d010      	beq.n	8008a40 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a1e:	f000 f845 	bl	8008aac <xTaskIncrementTick>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a28:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <xTaskResumeAll+0x130>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1f1      	bne.n	8008a1e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008a3a:	4b13      	ldr	r3, [pc, #76]	; (8008a88 <xTaskResumeAll+0x134>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <xTaskResumeAll+0x130>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d009      	beq.n	8008a5c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <xTaskResumeAll+0x138>)
 8008a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a52:	601a      	str	r2, [r3, #0]
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a5c:	f001 f88e 	bl	8009b7c <vPortExitCritical>

	return xAlreadyYielded;
 8008a60:	68bb      	ldr	r3, [r7, #8]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20003e00 	.word	0x20003e00
 8008a70:	20003dd8 	.word	0x20003dd8
 8008a74:	20003d98 	.word	0x20003d98
 8008a78:	20003de0 	.word	0x20003de0
 8008a7c:	20003908 	.word	0x20003908
 8008a80:	20003904 	.word	0x20003904
 8008a84:	20003dec 	.word	0x20003dec
 8008a88:	20003de8 	.word	0x20003de8
 8008a8c:	e000ed04 	.word	0xe000ed04

08008a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a96:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <xTaskGetTickCount+0x18>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a9c:	687b      	ldr	r3, [r7, #4]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bc80      	pop	{r7}
 8008aa6:	4770      	bx	lr
 8008aa8:	20003ddc 	.word	0x20003ddc

08008aac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ab6:	4b51      	ldr	r3, [pc, #324]	; (8008bfc <xTaskIncrementTick+0x150>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 808e 	bne.w	8008bdc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ac0:	4b4f      	ldr	r3, [pc, #316]	; (8008c00 <xTaskIncrementTick+0x154>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ac8:	4a4d      	ldr	r2, [pc, #308]	; (8008c00 <xTaskIncrementTick+0x154>)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d120      	bne.n	8008b16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ad4:	4b4b      	ldr	r3, [pc, #300]	; (8008c04 <xTaskIncrementTick+0x158>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	603b      	str	r3, [r7, #0]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <xTaskIncrementTick+0x46>
 8008af4:	4b43      	ldr	r3, [pc, #268]	; (8008c04 <xTaskIncrementTick+0x158>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	4b43      	ldr	r3, [pc, #268]	; (8008c08 <xTaskIncrementTick+0x15c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a41      	ldr	r2, [pc, #260]	; (8008c04 <xTaskIncrementTick+0x158>)
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	4a41      	ldr	r2, [pc, #260]	; (8008c08 <xTaskIncrementTick+0x15c>)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	4b40      	ldr	r3, [pc, #256]	; (8008c0c <xTaskIncrementTick+0x160>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	4a3f      	ldr	r2, [pc, #252]	; (8008c0c <xTaskIncrementTick+0x160>)
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	f000 faf9 	bl	8009108 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b16:	4b3e      	ldr	r3, [pc, #248]	; (8008c10 <xTaskIncrementTick+0x164>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d34e      	bcc.n	8008bbe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b20:	4b38      	ldr	r3, [pc, #224]	; (8008c04 <xTaskIncrementTick+0x158>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <xTaskIncrementTick+0x82>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e000      	b.n	8008b30 <xTaskIncrementTick+0x84>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d004      	beq.n	8008b3e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b34:	4b36      	ldr	r3, [pc, #216]	; (8008c10 <xTaskIncrementTick+0x164>)
 8008b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b3a:	601a      	str	r2, [r3, #0]
					break;
 8008b3c:	e03f      	b.n	8008bbe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b3e:	4b31      	ldr	r3, [pc, #196]	; (8008c04 <xTaskIncrementTick+0x158>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d203      	bcs.n	8008b5e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b56:	4a2e      	ldr	r2, [pc, #184]	; (8008c10 <xTaskIncrementTick+0x164>)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6013      	str	r3, [r2, #0]
						break;
 8008b5c:	e02f      	b.n	8008bbe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe ff1c 	bl	80079a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	3318      	adds	r3, #24
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe ff13 	bl	80079a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7e:	4b25      	ldr	r3, [pc, #148]	; (8008c14 <xTaskIncrementTick+0x168>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d903      	bls.n	8008b8e <xTaskIncrementTick+0xe2>
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	4a22      	ldr	r2, [pc, #136]	; (8008c14 <xTaskIncrementTick+0x168>)
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b92:	4613      	mov	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4a1f      	ldr	r2, [pc, #124]	; (8008c18 <xTaskIncrementTick+0x16c>)
 8008b9c:	441a      	add	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	f7fe fea0 	bl	80078ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <xTaskIncrementTick+0x170>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d3b3      	bcc.n	8008b20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bbc:	e7b0      	b.n	8008b20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bbe:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <xTaskIncrementTick+0x170>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc4:	4914      	ldr	r1, [pc, #80]	; (8008c18 <xTaskIncrementTick+0x16c>)
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d907      	bls.n	8008be6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e004      	b.n	8008be6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <xTaskIncrementTick+0x174>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	4a0f      	ldr	r2, [pc, #60]	; (8008c20 <xTaskIncrementTick+0x174>)
 8008be4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008be6:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <xTaskIncrementTick+0x178>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008bf2:	697b      	ldr	r3, [r7, #20]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20003e00 	.word	0x20003e00
 8008c00:	20003ddc 	.word	0x20003ddc
 8008c04:	20003d90 	.word	0x20003d90
 8008c08:	20003d94 	.word	0x20003d94
 8008c0c:	20003df0 	.word	0x20003df0
 8008c10:	20003df8 	.word	0x20003df8
 8008c14:	20003de0 	.word	0x20003de0
 8008c18:	20003908 	.word	0x20003908
 8008c1c:	20003904 	.word	0x20003904
 8008c20:	20003de8 	.word	0x20003de8
 8008c24:	20003dec 	.word	0x20003dec

08008c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c2e:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <vTaskSwitchContext+0xa4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c36:	4b26      	ldr	r3, [pc, #152]	; (8008cd0 <vTaskSwitchContext+0xa8>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c3c:	e041      	b.n	8008cc2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008c3e:	4b24      	ldr	r3, [pc, #144]	; (8008cd0 <vTaskSwitchContext+0xa8>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008c44:	4b23      	ldr	r3, [pc, #140]	; (8008cd4 <vTaskSwitchContext+0xac>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
 8008c4a:	e010      	b.n	8008c6e <vTaskSwitchContext+0x46>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	607b      	str	r3, [r7, #4]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <vTaskSwitchContext+0x3e>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	491a      	ldr	r1, [pc, #104]	; (8008cd8 <vTaskSwitchContext+0xb0>)
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0e4      	beq.n	8008c4c <vTaskSwitchContext+0x24>
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4a12      	ldr	r2, [pc, #72]	; (8008cd8 <vTaskSwitchContext+0xb0>)
 8008c8e:	4413      	add	r3, r2
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	605a      	str	r2, [r3, #4]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d104      	bne.n	8008cb2 <vTaskSwitchContext+0x8a>
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <vTaskSwitchContext+0xb4>)
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	4a05      	ldr	r2, [pc, #20]	; (8008cd4 <vTaskSwitchContext+0xac>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6013      	str	r3, [r2, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr
 8008ccc:	20003e00 	.word	0x20003e00
 8008cd0:	20003dec 	.word	0x20003dec
 8008cd4:	20003de0 	.word	0x20003de0
 8008cd8:	20003908 	.word	0x20003908
 8008cdc:	20003904 	.word	0x20003904

08008ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	f383 8811 	msr	BASEPRI, r3
 8008cf8:	f3bf 8f6f 	isb	sy
 8008cfc:	f3bf 8f4f 	dsb	sy
 8008d00:	60fb      	str	r3, [r7, #12]
}
 8008d02:	bf00      	nop
 8008d04:	e7fe      	b.n	8008d04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d06:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <vTaskPlaceOnEventList+0x44>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3318      	adds	r3, #24
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fe fe0e 	bl	8007930 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d14:	2101      	movs	r1, #1
 8008d16:	6838      	ldr	r0, [r7, #0]
 8008d18:	f000 faa6 	bl	8009268 <prvAddCurrentTaskToDelayedList>
}
 8008d1c:	bf00      	nop
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20003904 	.word	0x20003904

08008d28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	617b      	str	r3, [r7, #20]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <vTaskPlaceOnEventListRestricted+0x54>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3318      	adds	r3, #24
 8008d56:	4619      	mov	r1, r3
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f7fe fdc6 	bl	80078ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d002      	beq.n	8008d6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	68b8      	ldr	r0, [r7, #8]
 8008d6e:	f000 fa7b 	bl	8009268 <prvAddCurrentTaskToDelayedList>
	}
 8008d72:	bf00      	nop
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	20003904 	.word	0x20003904

08008d80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10a      	bne.n	8008dac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60fb      	str	r3, [r7, #12]
}
 8008da8:	bf00      	nop
 8008daa:	e7fe      	b.n	8008daa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	3318      	adds	r3, #24
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe fdf5 	bl	80079a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008db6:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <xTaskRemoveFromEventList+0xb0>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d11d      	bne.n	8008dfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fdec 	bl	80079a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dcc:	4b19      	ldr	r3, [pc, #100]	; (8008e34 <xTaskRemoveFromEventList+0xb4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d903      	bls.n	8008ddc <xTaskRemoveFromEventList+0x5c>
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd8:	4a16      	ldr	r2, [pc, #88]	; (8008e34 <xTaskRemoveFromEventList+0xb4>)
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4a13      	ldr	r2, [pc, #76]	; (8008e38 <xTaskRemoveFromEventList+0xb8>)
 8008dea:	441a      	add	r2, r3
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f7fe fd79 	bl	80078ea <vListInsertEnd>
 8008df8:	e005      	b.n	8008e06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3318      	adds	r3, #24
 8008dfe:	4619      	mov	r1, r3
 8008e00:	480e      	ldr	r0, [pc, #56]	; (8008e3c <xTaskRemoveFromEventList+0xbc>)
 8008e02:	f7fe fd72 	bl	80078ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <xTaskRemoveFromEventList+0xc0>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d905      	bls.n	8008e20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <xTaskRemoveFromEventList+0xc4>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e001      	b.n	8008e24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008e24:	697b      	ldr	r3, [r7, #20]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20003e00 	.word	0x20003e00
 8008e34:	20003de0 	.word	0x20003de0
 8008e38:	20003908 	.word	0x20003908
 8008e3c:	20003d98 	.word	0x20003d98
 8008e40:	20003904 	.word	0x20003904
 8008e44:	20003dec 	.word	0x20003dec

08008e48 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10a      	bne.n	8008e6c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	60fb      	str	r3, [r7, #12]
}
 8008e68:	bf00      	nop
 8008e6a:	e7fe      	b.n	8008e6a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008e6c:	f000 fe56 	bl	8009b1c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <vTaskSetTimeOutState+0x44>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008e78:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <vTaskSetTimeOutState+0x48>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008e80:	f000 fe7c 	bl	8009b7c <vPortExitCritical>
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	20003df0 	.word	0x20003df0
 8008e90:	20003ddc 	.word	0x20003ddc

08008e94 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <vTaskInternalSetTimeOutState+0x24>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <vTaskInternalSetTimeOutState+0x28>)
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	605a      	str	r2, [r3, #4]
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20003df0 	.word	0x20003df0
 8008ebc:	20003ddc 	.word	0x20003ddc

08008ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10a      	bne.n	8008ee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	613b      	str	r3, [r7, #16]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	60fb      	str	r3, [r7, #12]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f02:	f000 fe0b 	bl	8009b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <xTaskCheckForTimeOut+0xbc>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f1e:	d102      	bne.n	8008f26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e023      	b.n	8008f6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b15      	ldr	r3, [pc, #84]	; (8008f80 <xTaskCheckForTimeOut+0xc0>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d007      	beq.n	8008f42 <xTaskCheckForTimeOut+0x82>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d302      	bcc.n	8008f42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e015      	b.n	8008f6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d20b      	bcs.n	8008f64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff9b 	bl	8008e94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	e004      	b.n	8008f6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2200      	movs	r2, #0
 8008f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f6e:	f000 fe05 	bl	8009b7c <vPortExitCritical>

	return xReturn;
 8008f72:	69fb      	ldr	r3, [r7, #28]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3720      	adds	r7, #32
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20003ddc 	.word	0x20003ddc
 8008f80:	20003df0 	.word	0x20003df0

08008f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f88:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <vTaskMissedYield+0x14>)
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	601a      	str	r2, [r3, #0]
}
 8008f8e:	bf00      	nop
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bc80      	pop	{r7}
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	20003dec 	.word	0x20003dec

08008f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fa4:	f000 f852 	bl	800904c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fa8:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <prvIdleTask+0x28>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d9f9      	bls.n	8008fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <prvIdleTask+0x2c>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fc0:	e7f0      	b.n	8008fa4 <prvIdleTask+0x8>
 8008fc2:	bf00      	nop
 8008fc4:	20003908 	.word	0x20003908
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	607b      	str	r3, [r7, #4]
 8008fd6:	e00c      	b.n	8008ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4a12      	ldr	r2, [pc, #72]	; (800902c <prvInitialiseTaskLists+0x60>)
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe fc54 	bl	8007894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	607b      	str	r3, [r7, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b37      	cmp	r3, #55	; 0x37
 8008ff6:	d9ef      	bls.n	8008fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ff8:	480d      	ldr	r0, [pc, #52]	; (8009030 <prvInitialiseTaskLists+0x64>)
 8008ffa:	f7fe fc4b 	bl	8007894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ffe:	480d      	ldr	r0, [pc, #52]	; (8009034 <prvInitialiseTaskLists+0x68>)
 8009000:	f7fe fc48 	bl	8007894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009004:	480c      	ldr	r0, [pc, #48]	; (8009038 <prvInitialiseTaskLists+0x6c>)
 8009006:	f7fe fc45 	bl	8007894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800900a:	480c      	ldr	r0, [pc, #48]	; (800903c <prvInitialiseTaskLists+0x70>)
 800900c:	f7fe fc42 	bl	8007894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009010:	480b      	ldr	r0, [pc, #44]	; (8009040 <prvInitialiseTaskLists+0x74>)
 8009012:	f7fe fc3f 	bl	8007894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009016:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <prvInitialiseTaskLists+0x78>)
 8009018:	4a05      	ldr	r2, [pc, #20]	; (8009030 <prvInitialiseTaskLists+0x64>)
 800901a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <prvInitialiseTaskLists+0x7c>)
 800901e:	4a05      	ldr	r2, [pc, #20]	; (8009034 <prvInitialiseTaskLists+0x68>)
 8009020:	601a      	str	r2, [r3, #0]
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20003908 	.word	0x20003908
 8009030:	20003d68 	.word	0x20003d68
 8009034:	20003d7c 	.word	0x20003d7c
 8009038:	20003d98 	.word	0x20003d98
 800903c:	20003dac 	.word	0x20003dac
 8009040:	20003dc4 	.word	0x20003dc4
 8009044:	20003d90 	.word	0x20003d90
 8009048:	20003d94 	.word	0x20003d94

0800904c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009052:	e019      	b.n	8009088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009054:	f000 fd62 	bl	8009b1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009058:	4b10      	ldr	r3, [pc, #64]	; (800909c <prvCheckTasksWaitingTermination+0x50>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3304      	adds	r3, #4
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fc9b 	bl	80079a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800906a:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <prvCheckTasksWaitingTermination+0x54>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3b01      	subs	r3, #1
 8009070:	4a0b      	ldr	r2, [pc, #44]	; (80090a0 <prvCheckTasksWaitingTermination+0x54>)
 8009072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009074:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <prvCheckTasksWaitingTermination+0x58>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	3b01      	subs	r3, #1
 800907a:	4a0a      	ldr	r2, [pc, #40]	; (80090a4 <prvCheckTasksWaitingTermination+0x58>)
 800907c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800907e:	f000 fd7d 	bl	8009b7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f810 	bl	80090a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <prvCheckTasksWaitingTermination+0x58>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e1      	bne.n	8009054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009090:	bf00      	nop
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20003dac 	.word	0x20003dac
 80090a0:	20003dd8 	.word	0x20003dd8
 80090a4:	20003dc0 	.word	0x20003dc0

080090a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d108      	bne.n	80090cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fef0 	bl	8009ea4 <vPortFree>
				vPortFree( pxTCB );
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 feed 	bl	8009ea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090ca:	e018      	b.n	80090fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d103      	bne.n	80090de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fee4 	bl	8009ea4 <vPortFree>
	}
 80090dc:	e00f      	b.n	80090fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d00a      	beq.n	80090fe <prvDeleteTCB+0x56>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	f383 8811 	msr	BASEPRI, r3
 80090f0:	f3bf 8f6f 	isb	sy
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	60fb      	str	r3, [r7, #12]
}
 80090fa:	bf00      	nop
 80090fc:	e7fe      	b.n	80090fc <prvDeleteTCB+0x54>
	}
 80090fe:	bf00      	nop
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
	...

08009108 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <prvResetNextTaskUnblockTime+0x40>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d101      	bne.n	800911c <prvResetNextTaskUnblockTime+0x14>
 8009118:	2301      	movs	r3, #1
 800911a:	e000      	b.n	800911e <prvResetNextTaskUnblockTime+0x16>
 800911c:	2300      	movs	r3, #0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009122:	4b0a      	ldr	r3, [pc, #40]	; (800914c <prvResetNextTaskUnblockTime+0x44>)
 8009124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009128:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800912a:	e008      	b.n	800913e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <prvResetNextTaskUnblockTime+0x40>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	4a04      	ldr	r2, [pc, #16]	; (800914c <prvResetNextTaskUnblockTime+0x44>)
 800913c:	6013      	str	r3, [r2, #0]
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr
 8009148:	20003d90 	.word	0x20003d90
 800914c:	20003df8 	.word	0x20003df8

08009150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009156:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <xTaskGetSchedulerState+0x34>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d102      	bne.n	8009164 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800915e:	2301      	movs	r3, #1
 8009160:	607b      	str	r3, [r7, #4]
 8009162:	e008      	b.n	8009176 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009164:	4b08      	ldr	r3, [pc, #32]	; (8009188 <xTaskGetSchedulerState+0x38>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800916c:	2302      	movs	r3, #2
 800916e:	607b      	str	r3, [r7, #4]
 8009170:	e001      	b.n	8009176 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009172:	2300      	movs	r3, #0
 8009174:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009176:	687b      	ldr	r3, [r7, #4]
	}
 8009178:	4618      	mov	r0, r3
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	bc80      	pop	{r7}
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	20003de4 	.word	0x20003de4
 8009188:	20003e00 	.word	0x20003e00

0800918c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009198:	2300      	movs	r3, #0
 800919a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d056      	beq.n	8009250 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091a2:	4b2e      	ldr	r3, [pc, #184]	; (800925c <xTaskPriorityDisinherit+0xd0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d00a      	beq.n	80091c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	60fb      	str	r3, [r7, #12]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	60bb      	str	r3, [r7, #8]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	1e5a      	subs	r2, r3, #1
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d02c      	beq.n	8009250 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d128      	bne.n	8009250 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	3304      	adds	r3, #4
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fbcc 	bl	80079a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <xTaskPriorityDisinherit+0xd4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d903      	bls.n	8009230 <xTaskPriorityDisinherit+0xa4>
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <xTaskPriorityDisinherit+0xd4>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a09      	ldr	r2, [pc, #36]	; (8009264 <xTaskPriorityDisinherit+0xd8>)
 800923e:	441a      	add	r2, r3
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3304      	adds	r3, #4
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7fe fb4f 	bl	80078ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009250:	697b      	ldr	r3, [r7, #20]
	}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20003904 	.word	0x20003904
 8009260:	20003de0 	.word	0x20003de0
 8009264:	20003908 	.word	0x20003908

08009268 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009272:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009278:	4b20      	ldr	r3, [pc, #128]	; (80092fc <prvAddCurrentTaskToDelayedList+0x94>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3304      	adds	r3, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fb8e 	bl	80079a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928a:	d10a      	bne.n	80092a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d007      	beq.n	80092a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009292:	4b1a      	ldr	r3, [pc, #104]	; (80092fc <prvAddCurrentTaskToDelayedList+0x94>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3304      	adds	r3, #4
 8009298:	4619      	mov	r1, r3
 800929a:	4819      	ldr	r0, [pc, #100]	; (8009300 <prvAddCurrentTaskToDelayedList+0x98>)
 800929c:	f7fe fb25 	bl	80078ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092a0:	e026      	b.n	80092f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4413      	add	r3, r2
 80092a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092aa:	4b14      	ldr	r3, [pc, #80]	; (80092fc <prvAddCurrentTaskToDelayedList+0x94>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68ba      	ldr	r2, [r7, #8]
 80092b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d209      	bcs.n	80092ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ba:	4b12      	ldr	r3, [pc, #72]	; (8009304 <prvAddCurrentTaskToDelayedList+0x9c>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <prvAddCurrentTaskToDelayedList+0x94>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe fb32 	bl	8007930 <vListInsert>
}
 80092cc:	e010      	b.n	80092f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ce:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <prvAddCurrentTaskToDelayedList+0x94>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f7fe fb28 	bl	8007930 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <prvAddCurrentTaskToDelayedList+0xa4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d202      	bcs.n	80092f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092ea:	4a08      	ldr	r2, [pc, #32]	; (800930c <prvAddCurrentTaskToDelayedList+0xa4>)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6013      	str	r3, [r2, #0]
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20003ddc 	.word	0x20003ddc
 80092fc:	20003904 	.word	0x20003904
 8009300:	20003dc4 	.word	0x20003dc4
 8009304:	20003d94 	.word	0x20003d94
 8009308:	20003d90 	.word	0x20003d90
 800930c:	20003df8 	.word	0x20003df8

08009310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08a      	sub	sp, #40	; 0x28
 8009314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800931a:	f000 facb 	bl	80098b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800931e:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <xTimerCreateTimerTask+0x80>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d021      	beq.n	800936a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800932a:	2300      	movs	r3, #0
 800932c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800932e:	1d3a      	adds	r2, r7, #4
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	f107 030c 	add.w	r3, r7, #12
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fa91 	bl	8007860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	9202      	str	r2, [sp, #8]
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	2302      	movs	r3, #2
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	2300      	movs	r3, #0
 800934e:	460a      	mov	r2, r1
 8009350:	4910      	ldr	r1, [pc, #64]	; (8009394 <xTimerCreateTimerTask+0x84>)
 8009352:	4811      	ldr	r0, [pc, #68]	; (8009398 <xTimerCreateTimerTask+0x88>)
 8009354:	f7ff f8be 	bl	80084d4 <xTaskCreateStatic>
 8009358:	4603      	mov	r3, r0
 800935a:	4a10      	ldr	r2, [pc, #64]	; (800939c <xTimerCreateTimerTask+0x8c>)
 800935c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <xTimerCreateTimerTask+0x8c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009366:	2301      	movs	r3, #1
 8009368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	613b      	str	r3, [r7, #16]
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009386:	697b      	ldr	r3, [r7, #20]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20003e34 	.word	0x20003e34
 8009394:	08019024 	.word	0x08019024
 8009398:	080094bd 	.word	0x080094bd
 800939c:	20003e38 	.word	0x20003e38

080093a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	623b      	str	r3, [r7, #32]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093ce:	4b1a      	ldr	r3, [pc, #104]	; (8009438 <xTimerGenericCommand+0x98>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d02a      	beq.n	800942c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	2b05      	cmp	r3, #5
 80093e6:	dc18      	bgt.n	800941a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093e8:	f7ff feb2 	bl	8009150 <xTaskGetSchedulerState>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d109      	bne.n	8009406 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093f2:	4b11      	ldr	r3, [pc, #68]	; (8009438 <xTimerGenericCommand+0x98>)
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f107 0110 	add.w	r1, r7, #16
 80093fa:	2300      	movs	r3, #0
 80093fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093fe:	f7fe fc87 	bl	8007d10 <xQueueGenericSend>
 8009402:	6278      	str	r0, [r7, #36]	; 0x24
 8009404:	e012      	b.n	800942c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009406:	4b0c      	ldr	r3, [pc, #48]	; (8009438 <xTimerGenericCommand+0x98>)
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	f107 0110 	add.w	r1, r7, #16
 800940e:	2300      	movs	r3, #0
 8009410:	2200      	movs	r2, #0
 8009412:	f7fe fc7d 	bl	8007d10 <xQueueGenericSend>
 8009416:	6278      	str	r0, [r7, #36]	; 0x24
 8009418:	e008      	b.n	800942c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800941a:	4b07      	ldr	r3, [pc, #28]	; (8009438 <xTimerGenericCommand+0x98>)
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f107 0110 	add.w	r1, r7, #16
 8009422:	2300      	movs	r3, #0
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	f7fe fd71 	bl	8007f0c <xQueueGenericSendFromISR>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800942e:	4618      	mov	r0, r3
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20003e34 	.word	0x20003e34

0800943c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af02      	add	r7, sp, #8
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009446:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <prvProcessExpiredTimer+0x7c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	3304      	adds	r3, #4
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe faa3 	bl	80079a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d122      	bne.n	80094a8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	18d1      	adds	r1, r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	6978      	ldr	r0, [r7, #20]
 8009470:	f000 f8c8 	bl	8009604 <prvInsertTimerInActiveList>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d016      	beq.n	80094a8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800947a:	2300      	movs	r3, #0
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	2300      	movs	r3, #0
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	2100      	movs	r1, #0
 8009484:	6978      	ldr	r0, [r7, #20]
 8009486:	f7ff ff8b 	bl	80093a0 <xTimerGenericCommand>
 800948a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	60fb      	str	r3, [r7, #12]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	6978      	ldr	r0, [r7, #20]
 80094ae:	4798      	blx	r3
}
 80094b0:	bf00      	nop
 80094b2:	3718      	adds	r7, #24
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20003e2c 	.word	0x20003e2c

080094bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094c4:	f107 0308 	add.w	r3, r7, #8
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f857 	bl	800957c <prvGetNextExpireTime>
 80094ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4619      	mov	r1, r3
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f000 f803 	bl	80094e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094da:	f000 f8d5 	bl	8009688 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094de:	e7f1      	b.n	80094c4 <prvTimerTask+0x8>

080094e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094ea:	f7ff fa25 	bl	8008938 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f866 	bl	80095c4 <prvSampleTimeNow>
 80094f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d130      	bne.n	8009562 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10a      	bne.n	800951c <prvProcessTimerOrBlockTask+0x3c>
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d806      	bhi.n	800951c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800950e:	f7ff fa21 	bl	8008954 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009512:	68f9      	ldr	r1, [r7, #12]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff ff91 	bl	800943c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800951a:	e024      	b.n	8009566 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d008      	beq.n	8009534 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009522:	4b13      	ldr	r3, [pc, #76]	; (8009570 <prvProcessTimerOrBlockTask+0x90>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	bf0c      	ite	eq
 800952c:	2301      	moveq	r3, #1
 800952e:	2300      	movne	r3, #0
 8009530:	b2db      	uxtb	r3, r3
 8009532:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009534:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <prvProcessTimerOrBlockTask+0x94>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4619      	mov	r1, r3
 8009542:	f7fe ff93 	bl	800846c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009546:	f7ff fa05 	bl	8008954 <xTaskResumeAll>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <prvProcessTimerOrBlockTask+0x98>)
 8009552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
}
 8009560:	e001      	b.n	8009566 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009562:	f7ff f9f7 	bl	8008954 <xTaskResumeAll>
}
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20003e30 	.word	0x20003e30
 8009574:	20003e34 	.word	0x20003e34
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009584:	4b0e      	ldr	r3, [pc, #56]	; (80095c0 <prvGetNextExpireTime+0x44>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	461a      	mov	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d105      	bne.n	80095ae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095a2:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <prvGetNextExpireTime+0x44>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	e001      	b.n	80095b2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095b2:	68fb      	ldr	r3, [r7, #12]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bc80      	pop	{r7}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	20003e2c 	.word	0x20003e2c

080095c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095cc:	f7ff fa60 	bl	8008a90 <xTaskGetTickCount>
 80095d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095d2:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <prvSampleTimeNow+0x3c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d205      	bcs.n	80095e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095dc:	f000 f908 	bl	80097f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e002      	b.n	80095ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ee:	4a04      	ldr	r2, [pc, #16]	; (8009600 <prvSampleTimeNow+0x3c>)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095f4:	68fb      	ldr	r3, [r7, #12]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20003e3c 	.word	0x20003e3c

08009604 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	429a      	cmp	r2, r3
 8009628:	d812      	bhi.n	8009650 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	429a      	cmp	r2, r3
 8009636:	d302      	bcc.n	800963e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009638:	2301      	movs	r3, #1
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	e01b      	b.n	8009676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800963e:	4b10      	ldr	r3, [pc, #64]	; (8009680 <prvInsertTimerInActiveList+0x7c>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3304      	adds	r3, #4
 8009646:	4619      	mov	r1, r3
 8009648:	4610      	mov	r0, r2
 800964a:	f7fe f971 	bl	8007930 <vListInsert>
 800964e:	e012      	b.n	8009676 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d206      	bcs.n	8009666 <prvInsertTimerInActiveList+0x62>
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	429a      	cmp	r2, r3
 800965e:	d302      	bcc.n	8009666 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009660:	2301      	movs	r3, #1
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e007      	b.n	8009676 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009666:	4b07      	ldr	r3, [pc, #28]	; (8009684 <prvInsertTimerInActiveList+0x80>)
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3304      	adds	r3, #4
 800966e:	4619      	mov	r1, r3
 8009670:	4610      	mov	r0, r2
 8009672:	f7fe f95d 	bl	8007930 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009676:	697b      	ldr	r3, [r7, #20]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3718      	adds	r7, #24
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20003e30 	.word	0x20003e30
 8009684:	20003e2c 	.word	0x20003e2c

08009688 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08e      	sub	sp, #56	; 0x38
 800968c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800968e:	e09d      	b.n	80097cc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	da18      	bge.n	80096c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009696:	1d3b      	adds	r3, r7, #4
 8009698:	3304      	adds	r3, #4
 800969a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	61fb      	str	r3, [r7, #28]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096be:	6850      	ldr	r0, [r2, #4]
 80096c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c2:	6892      	ldr	r2, [r2, #8]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	db7d      	blt.n	80097ca <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d004      	beq.n	80096e4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	3304      	adds	r3, #4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe f95e 	bl	80079a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e4:	463b      	mov	r3, r7
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ff6c 	bl	80095c4 <prvSampleTimeNow>
 80096ec:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b09      	cmp	r3, #9
 80096f2:	d86b      	bhi.n	80097cc <prvProcessReceivedCommands+0x144>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <prvProcessReceivedCommands+0x74>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	08009725 	.word	0x08009725
 8009700:	08009725 	.word	0x08009725
 8009704:	08009725 	.word	0x08009725
 8009708:	080097cd 	.word	0x080097cd
 800970c:	08009781 	.word	0x08009781
 8009710:	080097b9 	.word	0x080097b9
 8009714:	08009725 	.word	0x08009725
 8009718:	08009725 	.word	0x08009725
 800971c:	080097cd 	.word	0x080097cd
 8009720:	08009781 	.word	0x08009781
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	18d1      	adds	r1, r2, r3
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009732:	f7ff ff67 	bl	8009604 <prvInsertTimerInActiveList>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d047      	beq.n	80097cc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009742:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d13f      	bne.n	80097cc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	699b      	ldr	r3, [r3, #24]
 8009752:	441a      	add	r2, r3
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2300      	movs	r3, #0
 800975a:	2100      	movs	r1, #0
 800975c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800975e:	f7ff fe1f 	bl	80093a0 <xTimerGenericCommand>
 8009762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d130      	bne.n	80097cc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	61bb      	str	r3, [r7, #24]
}
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009784:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	617b      	str	r3, [r7, #20]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	699a      	ldr	r2, [r3, #24]
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	18d1      	adds	r1, r2, r3
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b2:	f7ff ff27 	bl	8009604 <prvInsertTimerInActiveList>
					break;
 80097b6:	e009      	b.n	80097cc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d104      	bne.n	80097cc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80097c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097c4:	f000 fb6e 	bl	8009ea4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097c8:	e000      	b.n	80097cc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097ca:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097cc:	4b07      	ldr	r3, [pc, #28]	; (80097ec <prvProcessReceivedCommands+0x164>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	1d39      	adds	r1, r7, #4
 80097d2:	2200      	movs	r2, #0
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe fc31 	bl	800803c <xQueueReceive>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f47f af57 	bne.w	8009690 <prvProcessReceivedCommands+0x8>
	}
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	3730      	adds	r7, #48	; 0x30
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20003e34 	.word	0x20003e34

080097f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b088      	sub	sp, #32
 80097f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097f6:	e045      	b.n	8009884 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097f8:	4b2c      	ldr	r3, [pc, #176]	; (80098ac <prvSwitchTimerLists+0xbc>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009802:	4b2a      	ldr	r3, [pc, #168]	; (80098ac <prvSwitchTimerLists+0xbc>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3304      	adds	r3, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe f8c5 	bl	80079a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d12e      	bne.n	8009884 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4413      	add	r3, r2
 800982e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	429a      	cmp	r2, r3
 8009836:	d90e      	bls.n	8009856 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009844:	4b19      	ldr	r3, [pc, #100]	; (80098ac <prvSwitchTimerLists+0xbc>)
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3304      	adds	r3, #4
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7fe f86e 	bl	8007930 <vListInsert>
 8009854:	e016      	b.n	8009884 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009856:	2300      	movs	r3, #0
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	2100      	movs	r1, #0
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff fd9d 	bl	80093a0 <xTimerGenericCommand>
 8009866:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <prvSwitchTimerLists+0x94>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	603b      	str	r3, [r7, #0]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <prvSwitchTimerLists+0xbc>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1b4      	bne.n	80097f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <prvSwitchTimerLists+0xbc>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <prvSwitchTimerLists+0xc0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a04      	ldr	r2, [pc, #16]	; (80098ac <prvSwitchTimerLists+0xbc>)
 800989a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800989c:	4a04      	ldr	r2, [pc, #16]	; (80098b0 <prvSwitchTimerLists+0xc0>)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6013      	str	r3, [r2, #0]
}
 80098a2:	bf00      	nop
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20003e2c 	.word	0x20003e2c
 80098b0:	20003e30 	.word	0x20003e30

080098b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098ba:	f000 f92f 	bl	8009b1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098be:	4b15      	ldr	r3, [pc, #84]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d120      	bne.n	8009908 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098c6:	4814      	ldr	r0, [pc, #80]	; (8009918 <prvCheckForValidListAndQueue+0x64>)
 80098c8:	f7fd ffe4 	bl	8007894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098cc:	4813      	ldr	r0, [pc, #76]	; (800991c <prvCheckForValidListAndQueue+0x68>)
 80098ce:	f7fd ffe1 	bl	8007894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098d2:	4b13      	ldr	r3, [pc, #76]	; (8009920 <prvCheckForValidListAndQueue+0x6c>)
 80098d4:	4a10      	ldr	r2, [pc, #64]	; (8009918 <prvCheckForValidListAndQueue+0x64>)
 80098d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <prvCheckForValidListAndQueue+0x70>)
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <prvCheckForValidListAndQueue+0x68>)
 80098dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098de:	2300      	movs	r3, #0
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <prvCheckForValidListAndQueue+0x74>)
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <prvCheckForValidListAndQueue+0x78>)
 80098e6:	2110      	movs	r1, #16
 80098e8:	200a      	movs	r0, #10
 80098ea:	f7fe f8eb 	bl	8007ac4 <xQueueGenericCreateStatic>
 80098ee:	4603      	mov	r3, r0
 80098f0:	4a08      	ldr	r2, [pc, #32]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098f4:	4b07      	ldr	r3, [pc, #28]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <prvCheckForValidListAndQueue+0x60>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	490b      	ldr	r1, [pc, #44]	; (8009930 <prvCheckForValidListAndQueue+0x7c>)
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe fd8a 	bl	800841c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009908:	f000 f938 	bl	8009b7c <vPortExitCritical>
}
 800990c:	bf00      	nop
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20003e34 	.word	0x20003e34
 8009918:	20003e04 	.word	0x20003e04
 800991c:	20003e18 	.word	0x20003e18
 8009920:	20003e2c 	.word	0x20003e2c
 8009924:	20003e30 	.word	0x20003e30
 8009928:	20003ee0 	.word	0x20003ee0
 800992c:	20003e40 	.word	0x20003e40
 8009930:	0801902c 	.word	0x0801902c

08009934 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3b04      	subs	r3, #4
 8009944:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800994c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b04      	subs	r3, #4
 8009952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	f023 0201 	bic.w	r2, r3, #1
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3b04      	subs	r3, #4
 8009962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009964:	4a08      	ldr	r2, [pc, #32]	; (8009988 <pxPortInitialiseStack+0x54>)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	3b14      	subs	r3, #20
 800996e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3b20      	subs	r3, #32
 800997a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr
 8009988:	0800998d 	.word	0x0800998d

0800998c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009996:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <prvTaskExitError+0x54>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800999e:	d00a      	beq.n	80099b6 <prvTaskExitError+0x2a>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	60fb      	str	r3, [r7, #12]
}
 80099b2:	bf00      	nop
 80099b4:	e7fe      	b.n	80099b4 <prvTaskExitError+0x28>
	__asm volatile
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	60bb      	str	r3, [r7, #8]
}
 80099c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099ca:	bf00      	nop
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d0fc      	beq.n	80099cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
 80099d6:	3714      	adds	r7, #20
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20000010 	.word	0x20000010
	...

080099f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <pxCurrentTCBConst2>)
 80099f2:	6819      	ldr	r1, [r3, #0]
 80099f4:	6808      	ldr	r0, [r1, #0]
 80099f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80099fa:	f380 8809 	msr	PSP, r0
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f04f 0000 	mov.w	r0, #0
 8009a06:	f380 8811 	msr	BASEPRI, r0
 8009a0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009a0e:	4770      	bx	lr

08009a10 <pxCurrentTCBConst2>:
 8009a10:	20003904 	.word	0x20003904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop

08009a18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009a18:	4806      	ldr	r0, [pc, #24]	; (8009a34 <prvPortStartFirstTask+0x1c>)
 8009a1a:	6800      	ldr	r0, [r0, #0]
 8009a1c:	6800      	ldr	r0, [r0, #0]
 8009a1e:	f380 8808 	msr	MSP, r0
 8009a22:	b662      	cpsie	i
 8009a24:	b661      	cpsie	f
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	df00      	svc	0
 8009a30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a32:	bf00      	nop
 8009a34:	e000ed08 	.word	0xe000ed08

08009a38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a3e:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <xPortStartScheduler+0xd0>)
 8009a40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	22ff      	movs	r2, #255	; 0xff
 8009a4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <xPortStartScheduler+0xd4>)
 8009a64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a66:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009a68:	2207      	movs	r2, #7
 8009a6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a6c:	e009      	b.n	8009a82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009a6e:	4b28      	ldr	r3, [pc, #160]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	4a26      	ldr	r2, [pc, #152]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009a76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a82:	78fb      	ldrb	r3, [r7, #3]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8a:	2b80      	cmp	r3, #128	; 0x80
 8009a8c:	d0ef      	beq.n	8009a6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a8e:	4b20      	ldr	r3, [pc, #128]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f1c3 0307 	rsb	r3, r3, #7
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d00a      	beq.n	8009ab0 <xPortStartScheduler+0x78>
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	60bb      	str	r3, [r7, #8]
}
 8009aac:	bf00      	nop
 8009aae:	e7fe      	b.n	8009aae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ab0:	4b17      	ldr	r3, [pc, #92]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	021b      	lsls	r3, r3, #8
 8009ab6:	4a16      	ldr	r2, [pc, #88]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009ab8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009aba:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ac2:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <xPortStartScheduler+0xd8>)
 8009ac4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ace:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <xPortStartScheduler+0xdc>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a10      	ldr	r2, [pc, #64]	; (8009b14 <xPortStartScheduler+0xdc>)
 8009ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ada:	4b0e      	ldr	r3, [pc, #56]	; (8009b14 <xPortStartScheduler+0xdc>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a0d      	ldr	r2, [pc, #52]	; (8009b14 <xPortStartScheduler+0xdc>)
 8009ae0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ae4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ae6:	f000 f8b9 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <xPortStartScheduler+0xe0>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009af0:	f7ff ff92 	bl	8009a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009af4:	f7ff f898 	bl	8008c28 <vTaskSwitchContext>
	prvTaskExitError();
 8009af8:	f7ff ff48 	bl	800998c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	e000e400 	.word	0xe000e400
 8009b0c:	20003f30 	.word	0x20003f30
 8009b10:	20003f34 	.word	0x20003f34
 8009b14:	e000ed20 	.word	0xe000ed20
 8009b18:	20000010 	.word	0x20000010

08009b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	607b      	str	r3, [r7, #4]
}
 8009b34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <vPortEnterCritical+0x58>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	4a0d      	ldr	r2, [pc, #52]	; (8009b74 <vPortEnterCritical+0x58>)
 8009b3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b40:	4b0c      	ldr	r3, [pc, #48]	; (8009b74 <vPortEnterCritical+0x58>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d10f      	bne.n	8009b68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b48:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <vPortEnterCritical+0x5c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	603b      	str	r3, [r7, #0]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <vPortEnterCritical+0x4a>
	}
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bc80      	pop	{r7}
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000010 	.word	0x20000010
 8009b78:	e000ed04 	.word	0xe000ed04

08009b7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b82:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <vPortExitCritical+0x4c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <vPortExitCritical+0x24>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	607b      	str	r3, [r7, #4]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ba0:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <vPortExitCritical+0x4c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3b01      	subs	r3, #1
 8009ba6:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <vPortExitCritical+0x4c>)
 8009ba8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009baa:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <vPortExitCritical+0x4c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d105      	bne.n	8009bbe <vPortExitCritical+0x42>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	f383 8811 	msr	BASEPRI, r3
}
 8009bbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bbe:	bf00      	nop
 8009bc0:	370c      	adds	r7, #12
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bc80      	pop	{r7}
 8009bc6:	4770      	bx	lr
 8009bc8:	20000010 	.word	0x20000010
 8009bcc:	00000000 	.word	0x00000000

08009bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bd0:	f3ef 8009 	mrs	r0, PSP
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	4b0d      	ldr	r3, [pc, #52]	; (8009c10 <pxCurrentTCBConst>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009be0:	6010      	str	r0, [r2, #0]
 8009be2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009be6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bea:	f380 8811 	msr	BASEPRI, r0
 8009bee:	f7ff f81b 	bl	8008c28 <vTaskSwitchContext>
 8009bf2:	f04f 0000 	mov.w	r0, #0
 8009bf6:	f380 8811 	msr	BASEPRI, r0
 8009bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	6808      	ldr	r0, [r1, #0]
 8009c02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009c06:	f380 8809 	msr	PSP, r0
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	4770      	bx	lr

08009c10 <pxCurrentTCBConst>:
 8009c10:	20003904 	.word	0x20003904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f7fe ff3b 	bl	8008aac <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <SysTick_Handler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <vPortSetupTimerInterrupt+0x30>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b09      	ldr	r3, [pc, #36]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a08      	ldr	r2, [pc, #32]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <vPortSetupTimerInterrupt+0x30>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bc80      	pop	{r7}
 8009c8a:	4770      	bx	lr
 8009c8c:	e000e010 	.word	0xe000e010
 8009c90:	e000e018 	.word	0xe000e018
 8009c94:	20000004 	.word	0x20000004
 8009c98:	10624dd3 	.word	0x10624dd3
 8009c9c:	e000e014 	.word	0xe000e014

08009ca0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ca6:	f3ef 8305 	mrs	r3, IPSR
 8009caa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b0f      	cmp	r3, #15
 8009cb0:	d914      	bls.n	8009cdc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cb2:	4a16      	ldr	r2, [pc, #88]	; (8009d0c <vPortValidateInterruptPriority+0x6c>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cbc:	4b14      	ldr	r3, [pc, #80]	; (8009d10 <vPortValidateInterruptPriority+0x70>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	7afa      	ldrb	r2, [r7, #11]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d20a      	bcs.n	8009cdc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	607b      	str	r3, [r7, #4]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cdc:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <vPortValidateInterruptPriority+0x74>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <vPortValidateInterruptPriority+0x78>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d90a      	bls.n	8009d02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	603b      	str	r3, [r7, #0]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <vPortValidateInterruptPriority+0x60>
	}
 8009d02:	bf00      	nop
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bc80      	pop	{r7}
 8009d0a:	4770      	bx	lr
 8009d0c:	e000e3f0 	.word	0xe000e3f0
 8009d10:	20003f30 	.word	0x20003f30
 8009d14:	e000ed0c 	.word	0xe000ed0c
 8009d18:	20003f34 	.word	0x20003f34

08009d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08a      	sub	sp, #40	; 0x28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d28:	f7fe fe06 	bl	8008938 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d2c:	4b58      	ldr	r3, [pc, #352]	; (8009e90 <pvPortMalloc+0x174>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d34:	f000 f910 	bl	8009f58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d38:	4b56      	ldr	r3, [pc, #344]	; (8009e94 <pvPortMalloc+0x178>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 808e 	bne.w	8009e62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01d      	beq.n	8009d88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d4c:	2208      	movs	r2, #8
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4413      	add	r3, r2
 8009d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d014      	beq.n	8009d88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f003 0307 	and.w	r3, r3, #7
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <pvPortMalloc+0x6c>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	617b      	str	r3, [r7, #20]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d069      	beq.n	8009e62 <pvPortMalloc+0x146>
 8009d8e:	4b42      	ldr	r3, [pc, #264]	; (8009e98 <pvPortMalloc+0x17c>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d864      	bhi.n	8009e62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d98:	4b40      	ldr	r3, [pc, #256]	; (8009e9c <pvPortMalloc+0x180>)
 8009d9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d9c:	4b3f      	ldr	r3, [pc, #252]	; (8009e9c <pvPortMalloc+0x180>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009da2:	e004      	b.n	8009dae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d903      	bls.n	8009dc0 <pvPortMalloc+0xa4>
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f1      	bne.n	8009da4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dc0:	4b33      	ldr	r3, [pc, #204]	; (8009e90 <pvPortMalloc+0x174>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d04b      	beq.n	8009e62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2208      	movs	r2, #8
 8009dd0:	4413      	add	r3, r2
 8009dd2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	685a      	ldr	r2, [r3, #4]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	1ad2      	subs	r2, r2, r3
 8009de4:	2308      	movs	r3, #8
 8009de6:	005b      	lsls	r3, r3, #1
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d91f      	bls.n	8009e2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4413      	add	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <pvPortMalloc+0xf8>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	613b      	str	r3, [r7, #16]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	1ad2      	subs	r2, r2, r3
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e26:	69b8      	ldr	r0, [r7, #24]
 8009e28:	f000 f8f8 	bl	800a01c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e2c:	4b1a      	ldr	r3, [pc, #104]	; (8009e98 <pvPortMalloc+0x17c>)
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	4a18      	ldr	r2, [pc, #96]	; (8009e98 <pvPortMalloc+0x17c>)
 8009e38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e3a:	4b17      	ldr	r3, [pc, #92]	; (8009e98 <pvPortMalloc+0x17c>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b18      	ldr	r3, [pc, #96]	; (8009ea0 <pvPortMalloc+0x184>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d203      	bcs.n	8009e4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <pvPortMalloc+0x17c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a15      	ldr	r2, [pc, #84]	; (8009ea0 <pvPortMalloc+0x184>)
 8009e4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <pvPortMalloc+0x178>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	431a      	orrs	r2, r3
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e62:	f7fe fd77 	bl	8008954 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	f003 0307 	and.w	r3, r3, #7
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <pvPortMalloc+0x16a>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	60fb      	str	r3, [r7, #12]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <pvPortMalloc+0x168>
	return pvReturn;
 8009e86:	69fb      	ldr	r3, [r7, #28]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3728      	adds	r7, #40	; 0x28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20006650 	.word	0x20006650
 8009e94:	2000665c 	.word	0x2000665c
 8009e98:	20006654 	.word	0x20006654
 8009e9c:	20006648 	.word	0x20006648
 8009ea0:	20006658 	.word	0x20006658

08009ea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d048      	beq.n	8009f48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	425b      	negs	r3, r3
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	4b21      	ldr	r3, [pc, #132]	; (8009f50 <vPortFree+0xac>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <vPortFree+0x44>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	60fb      	str	r3, [r7, #12]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <vPortFree+0x62>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	60bb      	str	r3, [r7, #8]
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <vPortFree+0xac>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d019      	beq.n	8009f48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d115      	bne.n	8009f48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <vPortFree+0xac>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	43db      	mvns	r3, r3
 8009f26:	401a      	ands	r2, r3
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f2c:	f7fe fd04 	bl	8008938 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <vPortFree+0xb0>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4413      	add	r3, r2
 8009f3a:	4a06      	ldr	r2, [pc, #24]	; (8009f54 <vPortFree+0xb0>)
 8009f3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f3e:	6938      	ldr	r0, [r7, #16]
 8009f40:	f000 f86c 	bl	800a01c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f44:	f7fe fd06 	bl	8008954 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f48:	bf00      	nop
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	2000665c 	.word	0x2000665c
 8009f54:	20006654 	.word	0x20006654

08009f58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8009f62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f64:	4b27      	ldr	r3, [pc, #156]	; (800a004 <prvHeapInit+0xac>)
 8009f66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f003 0307 	and.w	r3, r3, #7
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00c      	beq.n	8009f8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3307      	adds	r3, #7
 8009f76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <prvHeapInit+0xac>)
 8009f88:	4413      	add	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f90:	4a1d      	ldr	r2, [pc, #116]	; (800a008 <prvHeapInit+0xb0>)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f96:	4b1c      	ldr	r3, [pc, #112]	; (800a008 <prvHeapInit+0xb0>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fa4:	2208      	movs	r2, #8
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1a9b      	subs	r3, r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 0307 	bic.w	r3, r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	4a15      	ldr	r2, [pc, #84]	; (800a00c <prvHeapInit+0xb4>)
 8009fb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fba:	4b14      	ldr	r3, [pc, #80]	; (800a00c <prvHeapInit+0xb4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fc2:	4b12      	ldr	r3, [pc, #72]	; (800a00c <prvHeapInit+0xb4>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	1ad2      	subs	r2, r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <prvHeapInit+0xb4>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4a0a      	ldr	r2, [pc, #40]	; (800a010 <prvHeapInit+0xb8>)
 8009fe6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4a09      	ldr	r2, [pc, #36]	; (800a014 <prvHeapInit+0xbc>)
 8009fee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ff0:	4b09      	ldr	r3, [pc, #36]	; (800a018 <prvHeapInit+0xc0>)
 8009ff2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ff6:	601a      	str	r2, [r3, #0]
}
 8009ff8:	bf00      	nop
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bc80      	pop	{r7}
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	20003f38 	.word	0x20003f38
 800a008:	20006648 	.word	0x20006648
 800a00c:	20006650 	.word	0x20006650
 800a010:	20006658 	.word	0x20006658
 800a014:	20006654 	.word	0x20006654
 800a018:	2000665c 	.word	0x2000665c

0800a01c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a024:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <prvInsertBlockIntoFreeList+0xa8>)
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	e002      	b.n	800a030 <prvInsertBlockIntoFreeList+0x14>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	429a      	cmp	r2, r3
 800a038:	d8f7      	bhi.n	800a02a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	4413      	add	r3, r2
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d108      	bne.n	800a05e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	441a      	add	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	441a      	add	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	429a      	cmp	r2, r3
 800a070:	d118      	bne.n	800a0a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <prvInsertBlockIntoFreeList+0xac>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d00d      	beq.n	800a09a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	441a      	add	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	e008      	b.n	800a0ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a09a:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <prvInsertBlockIntoFreeList+0xac>)
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	e003      	b.n	800a0ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d002      	beq.n	800a0ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ba:	bf00      	nop
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bc80      	pop	{r7}
 800a0c2:	4770      	bx	lr
 800a0c4:	20006648 	.word	0x20006648
 800a0c8:	20006650 	.word	0x20006650

0800a0cc <rcl_get_zero_initialized_init_options>:
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	4770      	bx	lr

0800a0d0 <rcl_init_options_init>:
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0d4:	b091      	sub	sp, #68	; 0x44
 800a0d6:	af17      	add	r7, sp, #92	; 0x5c
 800a0d8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d045      	beq.n	800a16c <rcl_init_options_init+0x9c>
 800a0e0:	6803      	ldr	r3, [r0, #0]
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	b133      	cbz	r3, 800a0f4 <rcl_init_options_init+0x24>
 800a0e6:	2464      	movs	r4, #100	; 0x64
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	b011      	add	sp, #68	; 0x44
 800a0ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a0f0:	b004      	add	sp, #16
 800a0f2:	4770      	bx	lr
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f001 f8ab 	bl	800b250 <rcutils_allocator_is_valid>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d036      	beq.n	800a16c <rcl_init_options_init+0x9c>
 800a0fe:	2050      	movs	r0, #80	; 0x50
 800a100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a102:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a104:	4798      	blx	r3
 800a106:	4604      	mov	r4, r0
 800a108:	6030      	str	r0, [r6, #0]
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d030      	beq.n	800a170 <rcl_init_options_init+0xa0>
 800a10e:	4605      	mov	r5, r0
 800a110:	46bc      	mov	ip, r7
 800a112:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a118:	f8dc 3000 	ldr.w	r3, [ip]
 800a11c:	a802      	add	r0, sp, #8
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	3418      	adds	r4, #24
 800a122:	ad02      	add	r5, sp, #8
 800a124:	f001 fb16 	bl	800b754 <rmw_get_zero_initialized_init_options>
 800a128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a12a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a12c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a12e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a134:	f8d6 c000 	ldr.w	ip, [r6]
 800a138:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a13c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a140:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a144:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a148:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a14c:	f10c 0018 	add.w	r0, ip, #24
 800a150:	f001 fbcc 	bl	800b8ec <rmw_init_options_init>
 800a154:	4604      	mov	r4, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	d0c6      	beq.n	800a0e8 <rcl_init_options_init+0x18>
 800a15a:	6830      	ldr	r0, [r6, #0]
 800a15c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a15e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800a160:	4798      	blx	r3
 800a162:	4620      	mov	r0, r4
 800a164:	f009 f9d8 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 800a168:	4604      	mov	r4, r0
 800a16a:	e7bd      	b.n	800a0e8 <rcl_init_options_init+0x18>
 800a16c:	240b      	movs	r4, #11
 800a16e:	e7bb      	b.n	800a0e8 <rcl_init_options_init+0x18>
 800a170:	240a      	movs	r4, #10
 800a172:	e7b9      	b.n	800a0e8 <rcl_init_options_init+0x18>

0800a174 <rcl_init_options_fini>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	b1c0      	cbz	r0, 800a1ac <rcl_init_options_fini+0x38>
 800a17a:	6804      	ldr	r4, [r0, #0]
 800a17c:	4606      	mov	r6, r0
 800a17e:	b1ac      	cbz	r4, 800a1ac <rcl_init_options_fini+0x38>
 800a180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a182:	ad01      	add	r5, sp, #4
 800a184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	a801      	add	r0, sp, #4
 800a18a:	602b      	str	r3, [r5, #0]
 800a18c:	f001 f860 	bl	800b250 <rcutils_allocator_is_valid>
 800a190:	b160      	cbz	r0, 800a1ac <rcl_init_options_fini+0x38>
 800a192:	6830      	ldr	r0, [r6, #0]
 800a194:	3018      	adds	r0, #24
 800a196:	f001 fc43 	bl	800ba20 <rmw_init_options_fini>
 800a19a:	4604      	mov	r4, r0
 800a19c:	b950      	cbnz	r0, 800a1b4 <rcl_init_options_fini+0x40>
 800a19e:	6830      	ldr	r0, [r6, #0]
 800a1a0:	9b02      	ldr	r3, [sp, #8]
 800a1a2:	9905      	ldr	r1, [sp, #20]
 800a1a4:	4798      	blx	r3
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	b006      	add	sp, #24
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	240b      	movs	r4, #11
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	b006      	add	sp, #24
 800a1b2:	bd70      	pop	{r4, r5, r6, pc}
 800a1b4:	f009 f9b0 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	e7f8      	b.n	800a1ae <rcl_init_options_fini+0x3a>

0800a1bc <rcl_init_options_copy>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d070      	beq.n	800a2aa <rcl_init_options_copy+0xee>
 800a1c8:	6806      	ldr	r6, [r0, #0]
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	2e00      	cmp	r6, #0
 800a1ce:	d06c      	beq.n	800a2aa <rcl_init_options_copy+0xee>
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	d069      	beq.n	800a2aa <rcl_init_options_copy+0xee>
 800a1d6:	680b      	ldr	r3, [r1, #0]
 800a1d8:	b12b      	cbz	r3, 800a1e6 <rcl_init_options_copy+0x2a>
 800a1da:	2664      	movs	r6, #100	; 0x64
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800a1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e6:	af10      	add	r7, sp, #64	; 0x40
 800a1e8:	46bc      	mov	ip, r7
 800a1ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a1ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1f0:	6833      	ldr	r3, [r6, #0]
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f8cc 3000 	str.w	r3, [ip]
 800a1f8:	f001 f82a 	bl	800b250 <rcutils_allocator_is_valid>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d054      	beq.n	800a2aa <rcl_init_options_copy+0xee>
 800a200:	2050      	movs	r0, #80	; 0x50
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	6939      	ldr	r1, [r7, #16]
 800a206:	4798      	blx	r3
 800a208:	4606      	mov	r6, r0
 800a20a:	6020      	str	r0, [r4, #0]
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f000 8089 	beq.w	800a324 <rcl_init_options_copy+0x168>
 800a212:	4684      	mov	ip, r0
 800a214:	46be      	mov	lr, r7
 800a216:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a21a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a21e:	f8de 3000 	ldr.w	r3, [lr]
 800a222:	a802      	add	r0, sp, #8
 800a224:	f8cc 3000 	str.w	r3, [ip]
 800a228:	f001 fa94 	bl	800b754 <rmw_get_zero_initialized_init_options>
 800a22c:	3618      	adds	r6, #24
 800a22e:	f10d 0c08 	add.w	ip, sp, #8
 800a232:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a236:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a23c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a23e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a242:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a244:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a248:	e886 0003 	stmia.w	r6, {r0, r1}
 800a24c:	6826      	ldr	r6, [r4, #0]
 800a24e:	ab13      	add	r3, sp, #76	; 0x4c
 800a250:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a254:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a258:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a25c:	f106 0018 	add.w	r0, r6, #24
 800a260:	f001 fb44 	bl	800b8ec <rmw_init_options_init>
 800a264:	4606      	mov	r6, r0
 800a266:	bb30      	cbnz	r0, 800a2b6 <rcl_init_options_copy+0xfa>
 800a268:	f8d4 e000 	ldr.w	lr, [r4]
 800a26c:	f8d5 c000 	ldr.w	ip, [r5]
 800a270:	4676      	mov	r6, lr
 800a272:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a276:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a278:	f8dc 3000 	ldr.w	r3, [ip]
 800a27c:	f10e 0018 	add.w	r0, lr, #24
 800a280:	6033      	str	r3, [r6, #0]
 800a282:	f001 fbcd 	bl	800ba20 <rmw_init_options_fini>
 800a286:	4680      	mov	r8, r0
 800a288:	b300      	cbz	r0, 800a2cc <rcl_init_options_copy+0x110>
 800a28a:	4638      	mov	r0, r7
 800a28c:	f001 f8a8 	bl	800b3e0 <rcutils_get_error_string>
 800a290:	f001 f8ce 	bl	800b430 <rcutils_reset_error>
 800a294:	4620      	mov	r0, r4
 800a296:	f7ff ff6d 	bl	800a174 <rcl_init_options_fini>
 800a29a:	4606      	mov	r6, r0
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d19d      	bne.n	800a1dc <rcl_init_options_copy+0x20>
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	f009 f939 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	e798      	b.n	800a1dc <rcl_init_options_copy+0x20>
 800a2aa:	260b      	movs	r6, #11
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f50d 6d88 	add.w	sp, sp, #1088	; 0x440
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6939      	ldr	r1, [r7, #16]
 800a2ba:	6820      	ldr	r0, [r4, #0]
 800a2bc:	4798      	blx	r3
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f009 f92a 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0ce      	beq.n	800a268 <rcl_init_options_copy+0xac>
 800a2ca:	e787      	b.n	800a1dc <rcl_init_options_copy+0x20>
 800a2cc:	f8d4 8000 	ldr.w	r8, [r4]
 800a2d0:	a802      	add	r0, sp, #8
 800a2d2:	f001 fa3f 	bl	800b754 <rmw_get_zero_initialized_init_options>
 800a2d6:	ae02      	add	r6, sp, #8
 800a2d8:	f108 0c18 	add.w	ip, r8, #24
 800a2dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a2de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a2e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a2ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2ee:	682a      	ldr	r2, [r5, #0]
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a2f6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a2fa:	f102 0018 	add.w	r0, r2, #24
 800a2fe:	f103 0118 	add.w	r1, r3, #24
 800a302:	f001 fb4b 	bl	800b99c <rmw_init_options_copy>
 800a306:	4606      	mov	r6, r0
 800a308:	2800      	cmp	r0, #0
 800a30a:	f43f af67 	beq.w	800a1dc <rcl_init_options_copy+0x20>
 800a30e:	4638      	mov	r0, r7
 800a310:	f001 f866 	bl	800b3e0 <rcutils_get_error_string>
 800a314:	f001 f88c 	bl	800b430 <rcutils_reset_error>
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff ff2b 	bl	800a174 <rcl_init_options_fini>
 800a31e:	b118      	cbz	r0, 800a328 <rcl_init_options_copy+0x16c>
 800a320:	4606      	mov	r6, r0
 800a322:	e75b      	b.n	800a1dc <rcl_init_options_copy+0x20>
 800a324:	260a      	movs	r6, #10
 800a326:	e759      	b.n	800a1dc <rcl_init_options_copy+0x20>
 800a328:	4630      	mov	r0, r6
 800a32a:	f009 f8f5 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 800a32e:	4606      	mov	r6, r0
 800a330:	e754      	b.n	800a1dc <rcl_init_options_copy+0x20>
 800a332:	bf00      	nop

0800a334 <rcl_get_zero_initialized_publisher>:
 800a334:	4b01      	ldr	r3, [pc, #4]	; (800a33c <rcl_get_zero_initialized_publisher+0x8>)
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	08019d2c 	.word	0x08019d2c

0800a340 <rcl_publisher_init>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	b08f      	sub	sp, #60	; 0x3c
 800a346:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a348:	2f00      	cmp	r7, #0
 800a34a:	d03a      	beq.n	800a3c2 <rcl_publisher_init+0x82>
 800a34c:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800a350:	4604      	mov	r4, r0
 800a352:	4648      	mov	r0, r9
 800a354:	4688      	mov	r8, r1
 800a356:	4616      	mov	r6, r2
 800a358:	461d      	mov	r5, r3
 800a35a:	f000 ff79 	bl	800b250 <rcutils_allocator_is_valid>
 800a35e:	b380      	cbz	r0, 800a3c2 <rcl_publisher_init+0x82>
 800a360:	b37c      	cbz	r4, 800a3c2 <rcl_publisher_init+0x82>
 800a362:	f8d4 a000 	ldr.w	sl, [r4]
 800a366:	f1ba 0f00 	cmp.w	sl, #0
 800a36a:	d004      	beq.n	800a376 <rcl_publisher_init+0x36>
 800a36c:	2564      	movs	r5, #100	; 0x64
 800a36e:	4628      	mov	r0, r5
 800a370:	b00f      	add	sp, #60	; 0x3c
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	4640      	mov	r0, r8
 800a378:	f009 fd82 	bl	8013e80 <rcl_node_is_valid>
 800a37c:	b330      	cbz	r0, 800a3cc <rcl_publisher_init+0x8c>
 800a37e:	b306      	cbz	r6, 800a3c2 <rcl_publisher_init+0x82>
 800a380:	b1fd      	cbz	r5, 800a3c2 <rcl_publisher_init+0x82>
 800a382:	46ce      	mov	lr, r9
 800a384:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800a388:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a38c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a390:	f8de 3000 	ldr.w	r3, [lr]
 800a394:	f8cc 3000 	str.w	r3, [ip]
 800a398:	f001 f868 	bl	800b46c <rcutils_get_zero_initialized_string_map>
 800a39c:	4684      	mov	ip, r0
 800a39e:	ab0e      	add	r3, sp, #56	; 0x38
 800a3a0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a3a4:	f8cd c018 	str.w	ip, [sp, #24]
 800a3a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a3ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ae:	4651      	mov	r1, sl
 800a3b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3b2:	a806      	add	r0, sp, #24
 800a3b4:	f001 f8d0 	bl	800b558 <rcutils_string_map_init>
 800a3b8:	b150      	cbz	r0, 800a3d0 <rcl_publisher_init+0x90>
 800a3ba:	280a      	cmp	r0, #10
 800a3bc:	d013      	beq.n	800a3e6 <rcl_publisher_init+0xa6>
 800a3be:	2501      	movs	r5, #1
 800a3c0:	e7d5      	b.n	800a36e <rcl_publisher_init+0x2e>
 800a3c2:	250b      	movs	r5, #11
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	b00f      	add	sp, #60	; 0x3c
 800a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3cc:	25c8      	movs	r5, #200	; 0xc8
 800a3ce:	e7ce      	b.n	800a36e <rcl_publisher_init+0x2e>
 800a3d0:	a806      	add	r0, sp, #24
 800a3d2:	f009 faa3 	bl	801391c <rcl_get_default_topic_name_substitutions>
 800a3d6:	4682      	mov	sl, r0
 800a3d8:	b138      	cbz	r0, 800a3ea <rcl_publisher_init+0xaa>
 800a3da:	a806      	add	r0, sp, #24
 800a3dc:	f001 f8fa 	bl	800b5d4 <rcutils_string_map_fini>
 800a3e0:	f1ba 0f0a 	cmp.w	sl, #10
 800a3e4:	d1eb      	bne.n	800a3be <rcl_publisher_init+0x7e>
 800a3e6:	250a      	movs	r5, #10
 800a3e8:	e7c1      	b.n	800a36e <rcl_publisher_init+0x2e>
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3f0:	f009 fd50 	bl	8013e94 <rcl_node_get_name>
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f009 fd54 	bl	8013ea4 <rcl_node_get_namespace>
 800a3fc:	46ec      	mov	ip, sp
 800a3fe:	4686      	mov	lr, r0
 800a400:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a404:	f10d 0b1c 	add.w	fp, sp, #28
 800a408:	f8cd b014 	str.w	fp, [sp, #20]
 800a40c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a410:	f8d9 3000 	ldr.w	r3, [r9]
 800a414:	4628      	mov	r0, r5
 800a416:	f8cc 3000 	str.w	r3, [ip]
 800a41a:	4651      	mov	r1, sl
 800a41c:	4672      	mov	r2, lr
 800a41e:	ab06      	add	r3, sp, #24
 800a420:	f009 f918 	bl	8013654 <rcl_expand_topic_name>
 800a424:	4605      	mov	r5, r0
 800a426:	a806      	add	r0, sp, #24
 800a428:	f001 f8d4 	bl	800b5d4 <rcutils_string_map_fini>
 800a42c:	b920      	cbnz	r0, 800a438 <rcl_publisher_init+0xf8>
 800a42e:	b15d      	cbz	r5, 800a448 <rcl_publisher_init+0x108>
 800a430:	2d67      	cmp	r5, #103	; 0x67
 800a432:	d002      	beq.n	800a43a <rcl_publisher_init+0xfa>
 800a434:	2d69      	cmp	r5, #105	; 0x69
 800a436:	d05f      	beq.n	800a4f8 <rcl_publisher_init+0x1b8>
 800a438:	2501      	movs	r5, #1
 800a43a:	9807      	ldr	r0, [sp, #28]
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d096      	beq.n	800a36e <rcl_publisher_init+0x2e>
 800a440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a442:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a444:	4798      	blx	r3
 800a446:	e792      	b.n	800a36e <rcl_publisher_init+0x2e>
 800a448:	4640      	mov	r0, r8
 800a44a:	f009 fd33 	bl	8013eb4 <rcl_node_get_options>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d0f2      	beq.n	800a438 <rcl_publisher_init+0xf8>
 800a452:	9807      	ldr	r0, [sp, #28]
 800a454:	f7f5 fef6 	bl	8000244 <strlen>
 800a458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a45a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a45c:	3001      	adds	r0, #1
 800a45e:	4798      	blx	r3
 800a460:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a464:	4681      	mov	r9, r0
 800a466:	4650      	mov	r0, sl
 800a468:	f7f5 feec 	bl	8000244 <strlen>
 800a46c:	4651      	mov	r1, sl
 800a46e:	1c42      	adds	r2, r0, #1
 800a470:	4648      	mov	r0, r9
 800a472:	f00d f927 	bl	80176c4 <memcpy>
 800a476:	462a      	mov	r2, r5
 800a478:	4648      	mov	r0, r9
 800a47a:	a908      	add	r1, sp, #32
 800a47c:	f001 f996 	bl	800b7ac <rmw_validate_full_topic_name>
 800a480:	2800      	cmp	r0, #0
 800a482:	d137      	bne.n	800a4f4 <rcl_publisher_init+0x1b4>
 800a484:	9b08      	ldr	r3, [sp, #32]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d138      	bne.n	800a4fc <rcl_publisher_init+0x1bc>
 800a48a:	20c0      	movs	r0, #192	; 0xc0
 800a48c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a48e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a490:	4798      	blx	r3
 800a492:	6020      	str	r0, [r4, #0]
 800a494:	b3a0      	cbz	r0, 800a500 <rcl_publisher_init+0x1c0>
 800a496:	4640      	mov	r0, r8
 800a498:	f009 fd14 	bl	8013ec4 <rcl_node_get_rmw_handle>
 800a49c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	464a      	mov	r2, r9
 800a4a8:	6825      	ldr	r5, [r4, #0]
 800a4aa:	f001 fdc7 	bl	800c03c <rmw_create_publisher>
 800a4ae:	6821      	ldr	r1, [r4, #0]
 800a4b0:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800a4b4:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800a4b8:	b388      	cbz	r0, 800a51e <rcl_publisher_init+0x1de>
 800a4ba:	3168      	adds	r1, #104	; 0x68
 800a4bc:	f001 fe9a 	bl	800c1f4 <rmw_publisher_get_actual_qos>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	b9f0      	cbnz	r0, 800a504 <rcl_publisher_init+0x1c4>
 800a4c6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	2268      	movs	r2, #104	; 0x68
 800a4d4:	f00d f8f6 	bl	80176c4 <memcpy>
 800a4d8:	f8d8 2000 	ldr.w	r2, [r8]
 800a4dc:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800a4e0:	9807      	ldr	r0, [sp, #28]
 800a4e2:	b110      	cbz	r0, 800a4ea <rcl_publisher_init+0x1aa>
 800a4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a4e8:	4798      	blx	r3
 800a4ea:	4648      	mov	r0, r9
 800a4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a4f0:	4798      	blx	r3
 800a4f2:	e73c      	b.n	800a36e <rcl_publisher_init+0x2e>
 800a4f4:	2501      	movs	r5, #1
 800a4f6:	e7f3      	b.n	800a4e0 <rcl_publisher_init+0x1a0>
 800a4f8:	2567      	movs	r5, #103	; 0x67
 800a4fa:	e79e      	b.n	800a43a <rcl_publisher_init+0xfa>
 800a4fc:	2567      	movs	r5, #103	; 0x67
 800a4fe:	e7ef      	b.n	800a4e0 <rcl_publisher_init+0x1a0>
 800a500:	250a      	movs	r5, #10
 800a502:	e7ed      	b.n	800a4e0 <rcl_publisher_init+0x1a0>
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0f5      	beq.n	800a4f4 <rcl_publisher_init+0x1b4>
 800a508:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a50c:	b13b      	cbz	r3, 800a51e <rcl_publisher_init+0x1de>
 800a50e:	4640      	mov	r0, r8
 800a510:	f009 fcd8 	bl	8013ec4 <rcl_node_get_rmw_handle>
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800a51a:	f001 fe6d 	bl	800c1f8 <rmw_destroy_publisher>
 800a51e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a520:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a522:	6820      	ldr	r0, [r4, #0]
 800a524:	4798      	blx	r3
 800a526:	2300      	movs	r3, #0
 800a528:	2501      	movs	r5, #1
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	e7d8      	b.n	800a4e0 <rcl_publisher_init+0x1a0>
 800a52e:	bf00      	nop

0800a530 <rcl_publisher_get_default_options>:
 800a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a532:	b087      	sub	sp, #28
 800a534:	466c      	mov	r4, sp
 800a536:	4f0d      	ldr	r7, [pc, #52]	; (800a56c <rcl_publisher_get_default_options+0x3c>)
 800a538:	4606      	mov	r6, r0
 800a53a:	2250      	movs	r2, #80	; 0x50
 800a53c:	490c      	ldr	r1, [pc, #48]	; (800a570 <rcl_publisher_get_default_options+0x40>)
 800a53e:	4638      	mov	r0, r7
 800a540:	f00d f8c0 	bl	80176c4 <memcpy>
 800a544:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800a548:	4668      	mov	r0, sp
 800a54a:	f000 fe73 	bl	800b234 <rcutils_get_default_allocator>
 800a54e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f001 f90d 	bl	800b774 <rmw_get_default_publisher_options>
 800a55a:	4639      	mov	r1, r7
 800a55c:	6678      	str	r0, [r7, #100]	; 0x64
 800a55e:	2268      	movs	r2, #104	; 0x68
 800a560:	4630      	mov	r0, r6
 800a562:	f00d f8af 	bl	80176c4 <memcpy>
 800a566:	4630      	mov	r0, r6
 800a568:	b007      	add	sp, #28
 800a56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56c:	20006660 	.word	0x20006660
 800a570:	08019d30 	.word	0x08019d30

0800a574 <rcl_publish>:
 800a574:	b1f8      	cbz	r0, 800a5b6 <rcl_publish+0x42>
 800a576:	6803      	ldr	r3, [r0, #0]
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4604      	mov	r4, r0
 800a57c:	b1b3      	cbz	r3, 800a5ac <rcl_publish+0x38>
 800a57e:	4616      	mov	r6, r2
 800a580:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800a584:	b192      	cbz	r2, 800a5ac <rcl_publish+0x38>
 800a586:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800a58a:	460d      	mov	r5, r1
 800a58c:	f008 ffe8 	bl	8013560 <rcl_context_is_valid>
 800a590:	b160      	cbz	r0, 800a5ac <rcl_publish+0x38>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800a598:	b140      	cbz	r0, 800a5ac <rcl_publish+0x38>
 800a59a:	b155      	cbz	r5, 800a5b2 <rcl_publish+0x3e>
 800a59c:	4632      	mov	r2, r6
 800a59e:	4629      	mov	r1, r5
 800a5a0:	f001 fcec 	bl	800bf7c <rmw_publish>
 800a5a4:	3800      	subs	r0, #0
 800a5a6:	bf18      	it	ne
 800a5a8:	2001      	movne	r0, #1
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}
 800a5ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a5b0:	bd70      	pop	{r4, r5, r6, pc}
 800a5b2:	200b      	movs	r0, #11
 800a5b4:	bd70      	pop	{r4, r5, r6, pc}
 800a5b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a5ba:	4770      	bx	lr

0800a5bc <rcl_get_zero_initialized_subscription>:
 800a5bc:	4b01      	ldr	r3, [pc, #4]	; (800a5c4 <rcl_get_zero_initialized_subscription+0x8>)
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	08019d80 	.word	0x08019d80

0800a5c8 <rcl_subscription_init>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	b08f      	sub	sp, #60	; 0x3c
 800a5ce:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a5d0:	b1d7      	cbz	r7, 800a608 <rcl_subscription_init+0x40>
 800a5d2:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800a5d6:	4604      	mov	r4, r0
 800a5d8:	4648      	mov	r0, r9
 800a5da:	4688      	mov	r8, r1
 800a5dc:	4616      	mov	r6, r2
 800a5de:	461d      	mov	r5, r3
 800a5e0:	f000 fe36 	bl	800b250 <rcutils_allocator_is_valid>
 800a5e4:	b180      	cbz	r0, 800a608 <rcl_subscription_init+0x40>
 800a5e6:	b17c      	cbz	r4, 800a608 <rcl_subscription_init+0x40>
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	f009 fc49 	bl	8013e80 <rcl_node_is_valid>
 800a5ee:	b380      	cbz	r0, 800a652 <rcl_subscription_init+0x8a>
 800a5f0:	b156      	cbz	r6, 800a608 <rcl_subscription_init+0x40>
 800a5f2:	b14d      	cbz	r5, 800a608 <rcl_subscription_init+0x40>
 800a5f4:	f8d4 a000 	ldr.w	sl, [r4]
 800a5f8:	f1ba 0f00 	cmp.w	sl, #0
 800a5fc:	d009      	beq.n	800a612 <rcl_subscription_init+0x4a>
 800a5fe:	2564      	movs	r5, #100	; 0x64
 800a600:	4628      	mov	r0, r5
 800a602:	b00f      	add	sp, #60	; 0x3c
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a608:	250b      	movs	r5, #11
 800a60a:	4628      	mov	r0, r5
 800a60c:	b00f      	add	sp, #60	; 0x3c
 800a60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a612:	46ce      	mov	lr, r9
 800a614:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
 800a618:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a61c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a620:	f8de 3000 	ldr.w	r3, [lr]
 800a624:	f8cc 3000 	str.w	r3, [ip]
 800a628:	f000 ff20 	bl	800b46c <rcutils_get_zero_initialized_string_map>
 800a62c:	4684      	mov	ip, r0
 800a62e:	ab0e      	add	r3, sp, #56	; 0x38
 800a630:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800a634:	f8cd c018 	str.w	ip, [sp, #24]
 800a638:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63e:	4651      	mov	r1, sl
 800a640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a642:	a806      	add	r0, sp, #24
 800a644:	f000 ff88 	bl	800b558 <rcutils_string_map_init>
 800a648:	b140      	cbz	r0, 800a65c <rcl_subscription_init+0x94>
 800a64a:	280a      	cmp	r0, #10
 800a64c:	d011      	beq.n	800a672 <rcl_subscription_init+0xaa>
 800a64e:	2501      	movs	r5, #1
 800a650:	e7db      	b.n	800a60a <rcl_subscription_init+0x42>
 800a652:	25c8      	movs	r5, #200	; 0xc8
 800a654:	4628      	mov	r0, r5
 800a656:	b00f      	add	sp, #60	; 0x3c
 800a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a65c:	a806      	add	r0, sp, #24
 800a65e:	f009 f95d 	bl	801391c <rcl_get_default_topic_name_substitutions>
 800a662:	4682      	mov	sl, r0
 800a664:	b138      	cbz	r0, 800a676 <rcl_subscription_init+0xae>
 800a666:	a806      	add	r0, sp, #24
 800a668:	f000 ffb4 	bl	800b5d4 <rcutils_string_map_fini>
 800a66c:	f1ba 0f0a 	cmp.w	sl, #10
 800a670:	d1ed      	bne.n	800a64e <rcl_subscription_init+0x86>
 800a672:	250a      	movs	r5, #10
 800a674:	e7c9      	b.n	800a60a <rcl_subscription_init+0x42>
 800a676:	4640      	mov	r0, r8
 800a678:	f8cd a01c 	str.w	sl, [sp, #28]
 800a67c:	f009 fc0a 	bl	8013e94 <rcl_node_get_name>
 800a680:	4682      	mov	sl, r0
 800a682:	4640      	mov	r0, r8
 800a684:	f009 fc0e 	bl	8013ea4 <rcl_node_get_namespace>
 800a688:	46ec      	mov	ip, sp
 800a68a:	4686      	mov	lr, r0
 800a68c:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800a690:	f10d 0b1c 	add.w	fp, sp, #28
 800a694:	f8cd b014 	str.w	fp, [sp, #20]
 800a698:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a69c:	f8d9 3000 	ldr.w	r3, [r9]
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f8cc 3000 	str.w	r3, [ip]
 800a6a6:	4651      	mov	r1, sl
 800a6a8:	4672      	mov	r2, lr
 800a6aa:	ab06      	add	r3, sp, #24
 800a6ac:	f008 ffd2 	bl	8013654 <rcl_expand_topic_name>
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	a806      	add	r0, sp, #24
 800a6b4:	f000 ff8e 	bl	800b5d4 <rcutils_string_map_fini>
 800a6b8:	b920      	cbnz	r0, 800a6c4 <rcl_subscription_init+0xfc>
 800a6ba:	b15d      	cbz	r5, 800a6d4 <rcl_subscription_init+0x10c>
 800a6bc:	2d67      	cmp	r5, #103	; 0x67
 800a6be:	d002      	beq.n	800a6c6 <rcl_subscription_init+0xfe>
 800a6c0:	2d69      	cmp	r5, #105	; 0x69
 800a6c2:	d05a      	beq.n	800a77a <rcl_subscription_init+0x1b2>
 800a6c4:	2501      	movs	r5, #1
 800a6c6:	9807      	ldr	r0, [sp, #28]
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d09e      	beq.n	800a60a <rcl_subscription_init+0x42>
 800a6cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6d0:	4798      	blx	r3
 800a6d2:	e79a      	b.n	800a60a <rcl_subscription_init+0x42>
 800a6d4:	4640      	mov	r0, r8
 800a6d6:	f009 fbed 	bl	8013eb4 <rcl_node_get_options>
 800a6da:	2800      	cmp	r0, #0
 800a6dc:	d0f2      	beq.n	800a6c4 <rcl_subscription_init+0xfc>
 800a6de:	9807      	ldr	r0, [sp, #28]
 800a6e0:	f7f5 fdb0 	bl	8000244 <strlen>
 800a6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	4798      	blx	r3
 800a6ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a6f0:	4681      	mov	r9, r0
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	f7f5 fda6 	bl	8000244 <strlen>
 800a6f8:	4651      	mov	r1, sl
 800a6fa:	1c42      	adds	r2, r0, #1
 800a6fc:	4648      	mov	r0, r9
 800a6fe:	f00c ffe1 	bl	80176c4 <memcpy>
 800a702:	462a      	mov	r2, r5
 800a704:	4648      	mov	r0, r9
 800a706:	a908      	add	r1, sp, #32
 800a708:	f001 f850 	bl	800b7ac <rmw_validate_full_topic_name>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d132      	bne.n	800a776 <rcl_subscription_init+0x1ae>
 800a710:	9b08      	ldr	r3, [sp, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d133      	bne.n	800a77e <rcl_subscription_init+0x1b6>
 800a716:	20c8      	movs	r0, #200	; 0xc8
 800a718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a71a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a71c:	4798      	blx	r3
 800a71e:	6020      	str	r0, [r4, #0]
 800a720:	b378      	cbz	r0, 800a782 <rcl_subscription_init+0x1ba>
 800a722:	4640      	mov	r0, r8
 800a724:	f009 fbce 	bl	8013ec4 <rcl_node_get_rmw_handle>
 800a728:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4631      	mov	r1, r6
 800a730:	463b      	mov	r3, r7
 800a732:	464a      	mov	r2, r9
 800a734:	6825      	ldr	r5, [r4, #0]
 800a736:	f001 fdf3 	bl	800c320 <rmw_create_subscription>
 800a73a:	6821      	ldr	r1, [r4, #0]
 800a73c:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800a740:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800a744:	b368      	cbz	r0, 800a7a2 <rcl_subscription_init+0x1da>
 800a746:	3170      	adds	r1, #112	; 0x70
 800a748:	f001 fece 	bl	800c4e8 <rmw_subscription_get_actual_qos>
 800a74c:	4605      	mov	r5, r0
 800a74e:	b9d0      	cbnz	r0, 800a786 <rcl_subscription_init+0x1be>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a756:	2270      	movs	r2, #112	; 0x70
 800a758:	4639      	mov	r1, r7
 800a75a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800a75e:	f00c ffb1 	bl	80176c4 <memcpy>
 800a762:	9807      	ldr	r0, [sp, #28]
 800a764:	b110      	cbz	r0, 800a76c <rcl_subscription_init+0x1a4>
 800a766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a768:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a76a:	4798      	blx	r3
 800a76c:	4648      	mov	r0, r9
 800a76e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a770:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a772:	4798      	blx	r3
 800a774:	e749      	b.n	800a60a <rcl_subscription_init+0x42>
 800a776:	2501      	movs	r5, #1
 800a778:	e7f3      	b.n	800a762 <rcl_subscription_init+0x19a>
 800a77a:	2567      	movs	r5, #103	; 0x67
 800a77c:	e7a3      	b.n	800a6c6 <rcl_subscription_init+0xfe>
 800a77e:	2567      	movs	r5, #103	; 0x67
 800a780:	e7ef      	b.n	800a762 <rcl_subscription_init+0x19a>
 800a782:	250a      	movs	r5, #10
 800a784:	e7ed      	b.n	800a762 <rcl_subscription_init+0x19a>
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d0f4      	beq.n	800a776 <rcl_subscription_init+0x1ae>
 800a78c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a790:	b13b      	cbz	r3, 800a7a2 <rcl_subscription_init+0x1da>
 800a792:	4640      	mov	r0, r8
 800a794:	f009 fb96 	bl	8013ec4 <rcl_node_get_rmw_handle>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a79e:	f001 fea5 	bl	800c4ec <rmw_destroy_subscription>
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a7a6:	6820      	ldr	r0, [r4, #0]
 800a7a8:	4798      	blx	r3
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2501      	movs	r5, #1
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	e7d7      	b.n	800a762 <rcl_subscription_init+0x19a>
 800a7b2:	bf00      	nop

0800a7b4 <rcl_subscription_get_default_options>:
 800a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b6:	4f12      	ldr	r7, [pc, #72]	; (800a800 <rcl_subscription_get_default_options+0x4c>)
 800a7b8:	b089      	sub	sp, #36	; 0x24
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	2250      	movs	r2, #80	; 0x50
 800a7be:	4911      	ldr	r1, [pc, #68]	; (800a804 <rcl_subscription_get_default_options+0x50>)
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f00c ff7f 	bl	80176c4 <memcpy>
 800a7c6:	ac02      	add	r4, sp, #8
 800a7c8:	a802      	add	r0, sp, #8
 800a7ca:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800a7ce:	f000 fd31 	bl	800b234 <rcutils_get_default_allocator>
 800a7d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a7d6:	6823      	ldr	r3, [r4, #0]
 800a7d8:	466c      	mov	r4, sp
 800a7da:	4620      	mov	r0, r4
 800a7dc:	602b      	str	r3, [r5, #0]
 800a7de:	f000 ffcf 	bl	800b780 <rmw_get_default_subscription_options>
 800a7e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a7e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a7ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800a7ee:	2270      	movs	r2, #112	; 0x70
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f00c ff66 	bl	80176c4 <memcpy>
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	b009      	add	sp, #36	; 0x24
 800a7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7fe:	bf00      	nop
 800a800:	200066c8 	.word	0x200066c8
 800a804:	08019d88 	.word	0x08019d88

0800a808 <rcl_take>:
 800a808:	2800      	cmp	r0, #0
 800a80a:	d040      	beq.n	800a88e <rcl_take+0x86>
 800a80c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a810:	4606      	mov	r6, r0
 800a812:	6800      	ldr	r0, [r0, #0]
 800a814:	b09d      	sub	sp, #116	; 0x74
 800a816:	b390      	cbz	r0, 800a87e <rcl_take+0x76>
 800a818:	4699      	mov	r9, r3
 800a81a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800a81e:	b373      	cbz	r3, 800a87e <rcl_take+0x76>
 800a820:	4688      	mov	r8, r1
 800a822:	b391      	cbz	r1, 800a88a <rcl_take+0x82>
 800a824:	4617      	mov	r7, r2
 800a826:	2a00      	cmp	r2, #0
 800a828:	d035      	beq.n	800a896 <rcl_take+0x8e>
 800a82a:	463d      	mov	r5, r7
 800a82c:	a802      	add	r0, sp, #8
 800a82e:	f000 ffab 	bl	800b788 <rmw_get_zero_initialized_message_info>
 800a832:	f04f 0c00 	mov.w	ip, #0
 800a836:	ac02      	add	r4, sp, #8
 800a838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a83a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a83c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a83e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a840:	6836      	ldr	r6, [r6, #0]
 800a842:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a846:	f8d6 40c0 	ldr.w	r4, [r6, #192]	; 0xc0
 800a84a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800a84e:	463b      	mov	r3, r7
 800a850:	4620      	mov	r0, r4
 800a852:	4641      	mov	r1, r8
 800a854:	f8cd 9000 	str.w	r9, [sp]
 800a858:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800a85c:	f88d c03f 	strb.w	ip, [sp, #63]	; 0x3f
 800a860:	f001 fea2 	bl	800c5a8 <rmw_take_with_info>
 800a864:	4603      	mov	r3, r0
 800a866:	b9c0      	cbnz	r0, 800a89a <rcl_take+0x92>
 800a868:	f240 1291 	movw	r2, #401	; 0x191
 800a86c:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800a870:	2900      	cmp	r1, #0
 800a872:	bf08      	it	eq
 800a874:	4613      	moveq	r3, r2
 800a876:	4618      	mov	r0, r3
 800a878:	b01d      	add	sp, #116	; 0x74
 800a87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a87e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a882:	4618      	mov	r0, r3
 800a884:	b01d      	add	sp, #116	; 0x74
 800a886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a88a:	230b      	movs	r3, #11
 800a88c:	e7f3      	b.n	800a876 <rcl_take+0x6e>
 800a88e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a892:	4618      	mov	r0, r3
 800a894:	4770      	bx	lr
 800a896:	af10      	add	r7, sp, #64	; 0x40
 800a898:	e7c7      	b.n	800a82a <rcl_take+0x22>
 800a89a:	f008 fe3d 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	e7e9      	b.n	800a876 <rcl_take+0x6e>
 800a8a2:	bf00      	nop

0800a8a4 <rcl_subscription_get_rmw_handle>:
 800a8a4:	b118      	cbz	r0, 800a8ae <rcl_subscription_get_rmw_handle+0xa>
 800a8a6:	6800      	ldr	r0, [r0, #0]
 800a8a8:	b108      	cbz	r0, 800a8ae <rcl_subscription_get_rmw_handle+0xa>
 800a8aa:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800a8ae:	4770      	bx	lr

0800a8b0 <_rclc_check_for_new_data>:
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	b1e0      	cbz	r0, 800a8ee <_rclc_check_for_new_data+0x3e>
 800a8b4:	7802      	ldrb	r2, [r0, #0]
 800a8b6:	2a08      	cmp	r2, #8
 800a8b8:	d81b      	bhi.n	800a8f2 <_rclc_check_for_new_data+0x42>
 800a8ba:	e8df f002 	tbb	[pc, r2]
 800a8be:	1010      	.short	0x1010
 800a8c0:	05121216 	.word	0x05121216
 800a8c4:	0505      	.short	0x0505
 800a8c6:	14          	.byte	0x14
 800a8c7:	00          	.byte	0x00
 800a8c8:	6a0a      	ldr	r2, [r1, #32]
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a8ce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a8d2:	1a12      	subs	r2, r2, r0
 800a8d4:	bf18      	it	ne
 800a8d6:	2201      	movne	r2, #1
 800a8d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a8dc:	4770      	bx	lr
 800a8de:	680a      	ldr	r2, [r1, #0]
 800a8e0:	e7f3      	b.n	800a8ca <_rclc_check_for_new_data+0x1a>
 800a8e2:	698a      	ldr	r2, [r1, #24]
 800a8e4:	e7f1      	b.n	800a8ca <_rclc_check_for_new_data+0x1a>
 800a8e6:	688a      	ldr	r2, [r1, #8]
 800a8e8:	e7ef      	b.n	800a8ca <_rclc_check_for_new_data+0x1a>
 800a8ea:	690a      	ldr	r2, [r1, #16]
 800a8ec:	e7ed      	b.n	800a8ca <_rclc_check_for_new_data+0x1a>
 800a8ee:	200b      	movs	r0, #11
 800a8f0:	4770      	bx	lr
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800a8fa:	4770      	bx	lr

0800a8fc <_rclc_take_new_data>:
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d049      	beq.n	800a994 <_rclc_take_new_data+0x98>
 800a900:	b510      	push	{r4, lr}
 800a902:	7803      	ldrb	r3, [r0, #0]
 800a904:	4604      	mov	r4, r0
 800a906:	b08e      	sub	sp, #56	; 0x38
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d84a      	bhi.n	800a9a2 <_rclc_take_new_data+0xa6>
 800a90c:	e8df f003 	tbb	[pc, r3]
 800a910:	2b121515 	.word	0x2b121515
 800a914:	0505052b 	.word	0x0505052b
 800a918:	12          	.byte	0x12
 800a919:	00          	.byte	0x00
 800a91a:	6a0b      	ldr	r3, [r1, #32]
 800a91c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	b13b      	cbz	r3, 800a934 <_rclc_take_new_data+0x38>
 800a924:	6882      	ldr	r2, [r0, #8]
 800a926:	f100 0110 	add.w	r1, r0, #16
 800a92a:	6840      	ldr	r0, [r0, #4]
 800a92c:	f009 fc0e 	bl	801414c <rcl_take_request>
 800a930:	2800      	cmp	r0, #0
 800a932:	d131      	bne.n	800a998 <_rclc_take_new_data+0x9c>
 800a934:	2000      	movs	r0, #0
 800a936:	b00e      	add	sp, #56	; 0x38
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	680b      	ldr	r3, [r1, #0]
 800a93c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d0f6      	beq.n	800a934 <_rclc_take_new_data+0x38>
 800a946:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800a94a:	2300      	movs	r3, #0
 800a94c:	aa02      	add	r2, sp, #8
 800a94e:	f7ff ff5b 	bl	800a808 <rcl_take>
 800a952:	2800      	cmp	r0, #0
 800a954:	d0ef      	beq.n	800a936 <_rclc_take_new_data+0x3a>
 800a956:	f240 1391 	movw	r3, #401	; 0x191
 800a95a:	4298      	cmp	r0, r3
 800a95c:	d115      	bne.n	800a98a <_rclc_take_new_data+0x8e>
 800a95e:	2300      	movs	r3, #0
 800a960:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800a964:	e7e7      	b.n	800a936 <_rclc_take_new_data+0x3a>
 800a966:	698b      	ldr	r3, [r1, #24]
 800a968:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0e0      	beq.n	800a934 <_rclc_take_new_data+0x38>
 800a972:	6882      	ldr	r2, [r0, #8]
 800a974:	f100 0110 	add.w	r1, r0, #16
 800a978:	6840      	ldr	r0, [r0, #4]
 800a97a:	f008 fd91 	bl	80134a0 <rcl_take_response>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d0d8      	beq.n	800a934 <_rclc_take_new_data+0x38>
 800a982:	f240 13f5 	movw	r3, #501	; 0x1f5
 800a986:	4298      	cmp	r0, r3
 800a988:	d0d5      	beq.n	800a936 <_rclc_take_new_data+0x3a>
 800a98a:	9001      	str	r0, [sp, #4]
 800a98c:	f000 fd50 	bl	800b430 <rcutils_reset_error>
 800a990:	9801      	ldr	r0, [sp, #4]
 800a992:	e7d0      	b.n	800a936 <_rclc_take_new_data+0x3a>
 800a994:	200b      	movs	r0, #11
 800a996:	4770      	bx	lr
 800a998:	f240 2359 	movw	r3, #601	; 0x259
 800a99c:	4298      	cmp	r0, r3
 800a99e:	d0de      	beq.n	800a95e <_rclc_take_new_data+0x62>
 800a9a0:	e7f3      	b.n	800a98a <_rclc_take_new_data+0x8e>
 800a9a2:	2001      	movs	r0, #1
 800a9a4:	e7c7      	b.n	800a936 <_rclc_take_new_data+0x3a>
 800a9a6:	bf00      	nop

0800a9a8 <rclc_executor_trigger_any>:
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	b178      	cbz	r0, 800a9cc <rclc_executor_trigger_any+0x24>
 800a9ac:	b179      	cbz	r1, 800a9ce <rclc_executor_trigger_any+0x26>
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	e005      	b.n	800a9be <rclc_executor_trigger_any+0x16>
 800a9b2:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800a9b6:	3340      	adds	r3, #64	; 0x40
 800a9b8:	b930      	cbnz	r0, 800a9c8 <rclc_executor_trigger_any+0x20>
 800a9ba:	4291      	cmp	r1, r2
 800a9bc:	d005      	beq.n	800a9ca <rclc_executor_trigger_any+0x22>
 800a9be:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800a9c2:	3201      	adds	r2, #1
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1f4      	bne.n	800a9b2 <rclc_executor_trigger_any+0xa>
 800a9c8:	4770      	bx	lr
 800a9ca:	4770      	bx	lr
 800a9cc:	4770      	bx	lr
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	e7fa      	b.n	800a9c8 <rclc_executor_trigger_any+0x20>
 800a9d2:	bf00      	nop

0800a9d4 <_rclc_execute.part.0>:
 800a9d4:	b530      	push	{r4, r5, lr}
 800a9d6:	7803      	ldrb	r3, [r0, #0]
 800a9d8:	4604      	mov	r4, r0
 800a9da:	b083      	sub	sp, #12
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d857      	bhi.n	800aa90 <_rclc_execute.part.0+0xbc>
 800a9e0:	e8df f003 	tbb	[pc, r3]
 800a9e4:	31372820 	.word	0x31372820
 800a9e8:	05050540 	.word	0x05050540
 800a9ec:	1b          	.byte	0x1b
 800a9ed:	00          	.byte	0x00
 800a9ee:	2b06      	cmp	r3, #6
 800a9f0:	d046      	beq.n	800aa80 <_rclc_execute.part.0+0xac>
 800a9f2:	2b07      	cmp	r3, #7
 800a9f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a9f6:	d13d      	bne.n	800aa74 <_rclc_execute.part.0+0xa0>
 800a9f8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800a9fc:	6880      	ldr	r0, [r0, #8]
 800a9fe:	4798      	blx	r3
 800aa00:	f104 0510 	add.w	r5, r4, #16
 800aa04:	4629      	mov	r1, r5
 800aa06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800aa08:	6860      	ldr	r0, [r4, #4]
 800aa0a:	f009 fbd7 	bl	80141bc <rcl_send_response>
 800aa0e:	b138      	cbz	r0, 800aa20 <_rclc_execute.part.0+0x4c>
 800aa10:	9001      	str	r0, [sp, #4]
 800aa12:	f000 fd0d 	bl	800b430 <rcutils_reset_error>
 800aa16:	9801      	ldr	r0, [sp, #4]
 800aa18:	e002      	b.n	800aa20 <_rclc_execute.part.0+0x4c>
 800aa1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa1c:	4798      	blx	r3
 800aa1e:	2000      	movs	r0, #0
 800aa20:	b003      	add	sp, #12
 800aa22:	bd30      	pop	{r4, r5, pc}
 800aa24:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800aa28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa2a:	b96d      	cbnz	r5, 800aa48 <_rclc_execute.part.0+0x74>
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	4798      	blx	r3
 800aa30:	4628      	mov	r0, r5
 800aa32:	e7f5      	b.n	800aa20 <_rclc_execute.part.0+0x4c>
 800aa34:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800aa38:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800aa3c:	b9ad      	cbnz	r5, 800aa6a <_rclc_execute.part.0+0x96>
 800aa3e:	4628      	mov	r0, r5
 800aa40:	4798      	blx	r3
 800aa42:	4628      	mov	r0, r5
 800aa44:	e7ec      	b.n	800aa20 <_rclc_execute.part.0+0x4c>
 800aa46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa48:	68a0      	ldr	r0, [r4, #8]
 800aa4a:	4798      	blx	r3
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	b003      	add	sp, #12
 800aa50:	bd30      	pop	{r4, r5, pc}
 800aa52:	6840      	ldr	r0, [r0, #4]
 800aa54:	f009 fe76 	bl	8014744 <rcl_timer_call>
 800aa58:	f240 3321 	movw	r3, #801	; 0x321
 800aa5c:	4298      	cmp	r0, r3
 800aa5e:	d1d6      	bne.n	800aa0e <_rclc_execute.part.0+0x3a>
 800aa60:	2000      	movs	r0, #0
 800aa62:	e7dd      	b.n	800aa20 <_rclc_execute.part.0+0x4c>
 800aa64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa66:	f100 0110 	add.w	r1, r0, #16
 800aa6a:	68a0      	ldr	r0, [r4, #8]
 800aa6c:	4798      	blx	r3
 800aa6e:	2000      	movs	r0, #0
 800aa70:	b003      	add	sp, #12
 800aa72:	bd30      	pop	{r4, r5, pc}
 800aa74:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800aa76:	6880      	ldr	r0, [r0, #8]
 800aa78:	4798      	blx	r3
 800aa7a:	f104 0510 	add.w	r5, r4, #16
 800aa7e:	e7c1      	b.n	800aa04 <_rclc_execute.part.0+0x30>
 800aa80:	f100 0510 	add.w	r5, r0, #16
 800aa84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800aa86:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aa88:	4629      	mov	r1, r5
 800aa8a:	6880      	ldr	r0, [r0, #8]
 800aa8c:	4798      	blx	r3
 800aa8e:	e7b9      	b.n	800aa04 <_rclc_execute.part.0+0x30>
 800aa90:	2001      	movs	r0, #1
 800aa92:	e7c5      	b.n	800aa20 <_rclc_execute.part.0+0x4c>
 800aa94:	0000      	movs	r0, r0
	...

0800aa98 <rclc_executor_init>:
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d064      	beq.n	800ab66 <rclc_executor_init+0xce>
 800aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	b0ae      	sub	sp, #184	; 0xb8
 800aaa4:	2900      	cmp	r1, #0
 800aaa6:	d056      	beq.n	800ab56 <rclc_executor_init+0xbe>
 800aaa8:	4605      	mov	r5, r0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	4616      	mov	r6, r2
 800aaae:	469a      	mov	sl, r3
 800aab0:	f000 fbce 	bl	800b250 <rcutils_allocator_is_valid>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d04e      	beq.n	800ab56 <rclc_executor_init+0xbe>
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	d04c      	beq.n	800ab56 <rclc_executor_init+0xbe>
 800aabc:	f20f 09b8 	addw	r9, pc, #184	; 0xb8
 800aac0:	e9d9 8900 	ldrd	r8, r9, [r9]
 800aac4:	2280      	movs	r2, #128	; 0x80
 800aac6:	492a      	ldr	r1, [pc, #168]	; (800ab70 <rclc_executor_init+0xd8>)
 800aac8:	2400      	movs	r4, #0
 800aaca:	a80e      	add	r0, sp, #56	; 0x38
 800aacc:	f00c fdfa 	bl	80176c4 <memcpy>
 800aad0:	2280      	movs	r2, #128	; 0x80
 800aad2:	a90e      	add	r1, sp, #56	; 0x38
 800aad4:	4628      	mov	r0, r5
 800aad6:	f00c fdf5 	bl	80176c4 <memcpy>
 800aada:	602f      	str	r7, [r5, #0]
 800aadc:	466f      	mov	r7, sp
 800aade:	4668      	mov	r0, sp
 800aae0:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800aae4:	f00a f886 	bl	8014bf4 <rcl_get_zero_initialized_wait_set>
 800aae8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aaea:	f105 0c14 	add.w	ip, r5, #20
 800aaee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aaf2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aaf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aaf8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aafa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	f8da 3000 	ldr.w	r3, [sl]
 800ab04:	f8da 1010 	ldr.w	r1, [sl, #16]
 800ab08:	f8cc 2000 	str.w	r2, [ip]
 800ab0c:	01b0      	lsls	r0, r6, #6
 800ab0e:	e9c5 8918 	strd	r8, r9, [r5, #96]	; 0x60
 800ab12:	f8c5 a010 	str.w	sl, [r5, #16]
 800ab16:	4798      	blx	r3
 800ab18:	6068      	str	r0, [r5, #4]
 800ab1a:	b908      	cbnz	r0, 800ab20 <rclc_executor_init+0x88>
 800ab1c:	e025      	b.n	800ab6a <rclc_executor_init+0xd2>
 800ab1e:	6868      	ldr	r0, [r5, #4]
 800ab20:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ab24:	4631      	mov	r1, r6
 800ab26:	3401      	adds	r4, #1
 800ab28:	f000 fa28 	bl	800af7c <rclc_executor_handle_init>
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	d1f6      	bne.n	800ab1e <rclc_executor_init+0x86>
 800ab30:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800ab34:	f000 fa16 	bl	800af64 <rclc_executor_handle_counters_zero_init>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	4a0e      	ldr	r2, [pc, #56]	; (800ab74 <rclc_executor_init+0xdc>)
 800ab3c:	686b      	ldr	r3, [r5, #4]
 800ab3e:	e9c5 201c 	strd	r2, r0, [r5, #112]	; 0x70
 800ab42:	b163      	cbz	r3, 800ab5e <rclc_executor_init+0xc6>
 800ab44:	692b      	ldr	r3, [r5, #16]
 800ab46:	b153      	cbz	r3, 800ab5e <rclc_executor_init+0xc6>
 800ab48:	68ab      	ldr	r3, [r5, #8]
 800ab4a:	b143      	cbz	r3, 800ab5e <rclc_executor_init+0xc6>
 800ab4c:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800ab50:	b02e      	add	sp, #184	; 0xb8
 800ab52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab56:	200b      	movs	r0, #11
 800ab58:	b02e      	add	sp, #184	; 0xb8
 800ab5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	b02e      	add	sp, #184	; 0xb8
 800ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab66:	200b      	movs	r0, #11
 800ab68:	4770      	bx	lr
 800ab6a:	200a      	movs	r0, #10
 800ab6c:	e7f4      	b.n	800ab58 <rclc_executor_init+0xc0>
 800ab6e:	bf00      	nop
 800ab70:	08019dd8 	.word	0x08019dd8
 800ab74:	0800a9a9 	.word	0x0800a9a9
 800ab78:	3b9aca00 	.word	0x3b9aca00
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <rclc_executor_add_subscription>:
 800ab80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab84:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800ab88:	b348      	cbz	r0, 800abde <rclc_executor_add_subscription+0x5e>
 800ab8a:	b341      	cbz	r1, 800abde <rclc_executor_add_subscription+0x5e>
 800ab8c:	b33a      	cbz	r2, 800abde <rclc_executor_add_subscription+0x5e>
 800ab8e:	b333      	cbz	r3, 800abde <rclc_executor_add_subscription+0x5e>
 800ab90:	4604      	mov	r4, r0
 800ab92:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
 800ab96:	4285      	cmp	r5, r0
 800ab98:	d302      	bcc.n	800aba0 <rclc_executor_add_subscription+0x20>
 800ab9a:	2001      	movs	r0, #1
 800ab9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba0:	2700      	movs	r7, #0
 800aba2:	f04f 0c01 	mov.w	ip, #1
 800aba6:	6860      	ldr	r0, [r4, #4]
 800aba8:	ea4f 1e85 	mov.w	lr, r5, lsl #6
 800abac:	f800 700e 	strb.w	r7, [r0, lr]
 800abb0:	f104 0814 	add.w	r8, r4, #20
 800abb4:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800abb8:	4465      	add	r5, ip
 800abba:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800abbe:	6303      	str	r3, [r0, #48]	; 0x30
 800abc0:	7046      	strb	r6, [r0, #1]
 800abc2:	62c7      	str	r7, [r0, #44]	; 0x2c
 800abc4:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 800abc8:	4640      	mov	r0, r8
 800abca:	60e5      	str	r5, [r4, #12]
 800abcc:	f00a f824 	bl	8014c18 <rcl_wait_set_is_valid>
 800abd0:	b940      	cbnz	r0, 800abe4 <rclc_executor_add_subscription+0x64>
 800abd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800abd4:	2000      	movs	r0, #0
 800abd6:	3301      	adds	r3, #1
 800abd8:	64a3      	str	r3, [r4, #72]	; 0x48
 800abda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abde:	200b      	movs	r0, #11
 800abe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe4:	4640      	mov	r0, r8
 800abe6:	f00a f81d 	bl	8014c24 <rcl_wait_set_fini>
 800abea:	2800      	cmp	r0, #0
 800abec:	d0f1      	beq.n	800abd2 <rclc_executor_add_subscription+0x52>
 800abee:	e7d5      	b.n	800ab9c <rclc_executor_add_subscription+0x1c>

0800abf0 <rclc_executor_add_timer>:
 800abf0:	b308      	cbz	r0, 800ac36 <rclc_executor_add_timer+0x46>
 800abf2:	b301      	cbz	r1, 800ac36 <rclc_executor_add_timer+0x46>
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800abfa:	4293      	cmp	r3, r2
 800abfc:	4604      	mov	r4, r0
 800abfe:	d301      	bcc.n	800ac04 <rclc_executor_add_timer+0x14>
 800ac00:	2001      	movs	r0, #1
 800ac02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac04:	2502      	movs	r5, #2
 800ac06:	2701      	movs	r7, #1
 800ac08:	2600      	movs	r6, #0
 800ac0a:	6840      	ldr	r0, [r0, #4]
 800ac0c:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800ac10:	6051      	str	r1, [r2, #4]
 800ac12:	0199      	lsls	r1, r3, #6
 800ac14:	5245      	strh	r5, [r0, r1]
 800ac16:	443b      	add	r3, r7
 800ac18:	f104 0514 	add.w	r5, r4, #20
 800ac1c:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 800ac20:	62d6      	str	r6, [r2, #44]	; 0x2c
 800ac22:	4628      	mov	r0, r5
 800ac24:	60e3      	str	r3, [r4, #12]
 800ac26:	f009 fff7 	bl	8014c18 <rcl_wait_set_is_valid>
 800ac2a:	b930      	cbnz	r0, 800ac3a <rclc_executor_add_timer+0x4a>
 800ac2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ac2e:	2000      	movs	r0, #0
 800ac30:	3301      	adds	r3, #1
 800ac32:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ac34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac36:	200b      	movs	r0, #11
 800ac38:	4770      	bx	lr
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f009 fff2 	bl	8014c24 <rcl_wait_set_fini>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d0f3      	beq.n	800ac2c <rclc_executor_add_timer+0x3c>
 800ac44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac46:	bf00      	nop

0800ac48 <rclc_executor_prepare>:
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d03d      	beq.n	800acc8 <rclc_executor_prepare+0x80>
 800ac4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac50:	f100 0814 	add.w	r8, r0, #20
 800ac54:	4604      	mov	r4, r0
 800ac56:	b09a      	sub	sp, #104	; 0x68
 800ac58:	4640      	mov	r0, r8
 800ac5a:	f009 ffdd 	bl	8014c18 <rcl_wait_set_is_valid>
 800ac5e:	b118      	cbz	r0, 800ac68 <rclc_executor_prepare+0x20>
 800ac60:	2000      	movs	r0, #0
 800ac62:	b01a      	add	sp, #104	; 0x68
 800ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac68:	4640      	mov	r0, r8
 800ac6a:	f009 ffdb 	bl	8014c24 <rcl_wait_set_fini>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d127      	bne.n	800acc2 <rclc_executor_prepare+0x7a>
 800ac72:	4646      	mov	r6, r8
 800ac74:	a80c      	add	r0, sp, #48	; 0x30
 800ac76:	ad0c      	add	r5, sp, #48	; 0x30
 800ac78:	f009 ffbc 	bl	8014bf4 <rcl_get_zero_initialized_wait_set>
 800ac7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ac88:	6927      	ldr	r7, [r4, #16]
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	ad04      	add	r5, sp, #16
 800ac8e:	6033      	str	r3, [r6, #0]
 800ac90:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ac92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac94:	6838      	ldr	r0, [r7, #0]
 800ac96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ac98:	6826      	ldr	r6, [r4, #0]
 800ac9a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800ac9e:	6028      	str	r0, [r5, #0]
 800aca0:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800aca4:	e9cd 3200 	strd	r3, r2, [sp]
 800aca8:	4640      	mov	r0, r8
 800acaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800acac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800acae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800acb0:	f00a fada 	bl	8015268 <rcl_wait_set_init>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d0d4      	beq.n	800ac62 <rclc_executor_prepare+0x1a>
 800acb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800acba:	f000 fbb9 	bl	800b430 <rcutils_reset_error>
 800acbe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acc0:	e7cf      	b.n	800ac62 <rclc_executor_prepare+0x1a>
 800acc2:	f000 fbb5 	bl	800b430 <rcutils_reset_error>
 800acc6:	e7d4      	b.n	800ac72 <rclc_executor_prepare+0x2a>
 800acc8:	200b      	movs	r0, #11
 800acca:	4770      	bx	lr

0800accc <rclc_executor_spin_some.part.0>:
 800accc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	f100 0814 	add.w	r8, r0, #20
 800acd4:	b083      	sub	sp, #12
 800acd6:	4692      	mov	sl, r2
 800acd8:	4699      	mov	r9, r3
 800acda:	4605      	mov	r5, r0
 800acdc:	f7ff ffb4 	bl	800ac48 <rclc_executor_prepare>
 800ace0:	4640      	mov	r0, r8
 800ace2:	f00a f86f 	bl	8014dc4 <rcl_wait_set_clear>
 800ace6:	4607      	mov	r7, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	f040 80bb 	bne.w	800ae64 <rclc_executor_spin_some.part.0+0x198>
 800acee:	68ab      	ldr	r3, [r5, #8]
 800acf0:	4604      	mov	r4, r0
 800acf2:	b1eb      	cbz	r3, 800ad30 <rclc_executor_spin_some.part.0+0x64>
 800acf4:	686e      	ldr	r6, [r5, #4]
 800acf6:	01a2      	lsls	r2, r4, #6
 800acf8:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800acfc:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800ad00:	b1b3      	cbz	r3, 800ad30 <rclc_executor_spin_some.part.0+0x64>
 800ad02:	5cb3      	ldrb	r3, [r6, r2]
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	f200 80a6 	bhi.w	800ae56 <rclc_executor_spin_some.part.0+0x18a>
 800ad0a:	e8df f003 	tbb	[pc, r3]
 800ad0e:	8686      	.short	0x8686
 800ad10:	05787890 	.word	0x05787890
 800ad14:	0505      	.short	0x0505
 800ad16:	9a          	.byte	0x9a
 800ad17:	00          	.byte	0x00
 800ad18:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	6849      	ldr	r1, [r1, #4]
 800ad20:	f00a fbb8 	bl	8015494 <rcl_wait_set_add_service>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d172      	bne.n	800ae0e <rclc_executor_spin_some.part.0+0x142>
 800ad28:	68ab      	ldr	r3, [r5, #8]
 800ad2a:	3401      	adds	r4, #1
 800ad2c:	429c      	cmp	r4, r3
 800ad2e:	d3e1      	bcc.n	800acf4 <rclc_executor_spin_some.part.0+0x28>
 800ad30:	464b      	mov	r3, r9
 800ad32:	4652      	mov	r2, sl
 800ad34:	4640      	mov	r0, r8
 800ad36:	f00a fbdb 	bl	80154f0 <rcl_wait>
 800ad3a:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 8098 	beq.w	800ae74 <rclc_executor_spin_some.part.0+0x1a8>
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	f040 8086 	bne.w	800ae56 <rclc_executor_spin_some.part.0+0x18a>
 800ad4a:	68a9      	ldr	r1, [r5, #8]
 800ad4c:	2900      	cmp	r1, #0
 800ad4e:	f000 80ea 	beq.w	800af26 <rclc_executor_spin_some.part.0+0x25a>
 800ad52:	2400      	movs	r4, #0
 800ad54:	f240 1991 	movw	r9, #401	; 0x191
 800ad58:	4626      	mov	r6, r4
 800ad5a:	e00b      	b.n	800ad74 <rclc_executor_spin_some.part.0+0xa8>
 800ad5c:	4641      	mov	r1, r8
 800ad5e:	f7ff fda7 	bl	800a8b0 <_rclc_check_for_new_data>
 800ad62:	4604      	mov	r4, r0
 800ad64:	b110      	cbz	r0, 800ad6c <rclc_executor_spin_some.part.0+0xa0>
 800ad66:	4548      	cmp	r0, r9
 800ad68:	f040 8082 	bne.w	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800ad6c:	68a9      	ldr	r1, [r5, #8]
 800ad6e:	428e      	cmp	r6, r1
 800ad70:	f080 80d5 	bcs.w	800af1e <rclc_executor_spin_some.part.0+0x252>
 800ad74:	686b      	ldr	r3, [r5, #4]
 800ad76:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800ad7a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800ad7e:	3601      	adds	r6, #1
 800ad80:	2a00      	cmp	r2, #0
 800ad82:	d1eb      	bne.n	800ad5c <rclc_executor_spin_some.part.0+0x90>
 800ad84:	4618      	mov	r0, r3
 800ad86:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800ad8a:	4798      	blx	r3
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d06f      	beq.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800ad90:	68ab      	ldr	r3, [r5, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d06c      	beq.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800ad96:	2600      	movs	r6, #0
 800ad98:	f240 1991 	movw	r9, #401	; 0x191
 800ad9c:	e009      	b.n	800adb2 <rclc_executor_spin_some.part.0+0xe6>
 800ad9e:	4641      	mov	r1, r8
 800ada0:	f7ff fdac 	bl	800a8fc <_rclc_take_new_data>
 800ada4:	4604      	mov	r4, r0
 800ada6:	b108      	cbz	r0, 800adac <rclc_executor_spin_some.part.0+0xe0>
 800ada8:	4548      	cmp	r0, r9
 800adaa:	d161      	bne.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800adac:	68ab      	ldr	r3, [r5, #8]
 800adae:	429e      	cmp	r6, r3
 800adb0:	d207      	bcs.n	800adc2 <rclc_executor_spin_some.part.0+0xf6>
 800adb2:	6868      	ldr	r0, [r5, #4]
 800adb4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800adb8:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800adbc:	3601      	adds	r6, #1
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	d1ed      	bne.n	800ad9e <rclc_executor_spin_some.part.0+0xd2>
 800adc2:	2600      	movs	r6, #0
 800adc4:	b933      	cbnz	r3, 800add4 <rclc_executor_spin_some.part.0+0x108>
 800adc6:	e053      	b.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800adc8:	2a01      	cmp	r2, #1
 800adca:	d011      	beq.n	800adf0 <rclc_executor_spin_some.part.0+0x124>
 800adcc:	3601      	adds	r6, #1
 800adce:	429e      	cmp	r6, r3
 800add0:	d244      	bcs.n	800ae5c <rclc_executor_spin_some.part.0+0x190>
 800add2:	2400      	movs	r4, #0
 800add4:	6868      	ldr	r0, [r5, #4]
 800add6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800adda:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d046      	beq.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800ade2:	7842      	ldrb	r2, [r0, #1]
 800ade4:	2a00      	cmp	r2, #0
 800ade6:	d1ef      	bne.n	800adc8 <rclc_executor_spin_some.part.0+0xfc>
 800ade8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800adec:	2a00      	cmp	r2, #0
 800adee:	d0ed      	beq.n	800adcc <rclc_executor_spin_some.part.0+0x100>
 800adf0:	f7ff fdf0 	bl	800a9d4 <_rclc_execute.part.0>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f040 8094 	bne.w	800af22 <rclc_executor_spin_some.part.0+0x256>
 800adfa:	68ab      	ldr	r3, [r5, #8]
 800adfc:	e7e6      	b.n	800adcc <rclc_executor_spin_some.part.0+0x100>
 800adfe:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ae02:	4640      	mov	r0, r8
 800ae04:	6849      	ldr	r1, [r1, #4]
 800ae06:	f00a fb19 	bl	801543c <rcl_wait_set_add_client>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d08c      	beq.n	800ad28 <rclc_executor_spin_some.part.0+0x5c>
 800ae0e:	9001      	str	r0, [sp, #4]
 800ae10:	f000 fb0e 	bl	800b430 <rcutils_reset_error>
 800ae14:	9801      	ldr	r0, [sp, #4]
 800ae16:	4607      	mov	r7, r0
 800ae18:	e020      	b.n	800ae5c <rclc_executor_spin_some.part.0+0x190>
 800ae1a:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ae1e:	4640      	mov	r0, r8
 800ae20:	6849      	ldr	r1, [r1, #4]
 800ae22:	f009 ffa3 	bl	8014d6c <rcl_wait_set_add_subscription>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f43f af7e 	beq.w	800ad28 <rclc_executor_spin_some.part.0+0x5c>
 800ae2c:	e7ef      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x142>
 800ae2e:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ae32:	4640      	mov	r0, r8
 800ae34:	6849      	ldr	r1, [r1, #4]
 800ae36:	f00a fad1 	bl	80153dc <rcl_wait_set_add_timer>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	f43f af74 	beq.w	800ad28 <rclc_executor_spin_some.part.0+0x5c>
 800ae40:	e7e5      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x142>
 800ae42:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800ae46:	4640      	mov	r0, r8
 800ae48:	6849      	ldr	r1, [r1, #4]
 800ae4a:	f00a fa9b 	bl	8015384 <rcl_wait_set_add_guard_condition>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	f43f af6a 	beq.w	800ad28 <rclc_executor_spin_some.part.0+0x5c>
 800ae54:	e7db      	b.n	800ae0e <rclc_executor_spin_some.part.0+0x142>
 800ae56:	f000 faeb 	bl	800b430 <rcutils_reset_error>
 800ae5a:	2701      	movs	r7, #1
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	b003      	add	sp, #12
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae64:	f000 fae4 	bl	800b430 <rcutils_reset_error>
 800ae68:	4638      	mov	r0, r7
 800ae6a:	b003      	add	sp, #12
 800ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae70:	4627      	mov	r7, r4
 800ae72:	e7f3      	b.n	800ae5c <rclc_executor_spin_some.part.0+0x190>
 800ae74:	68a9      	ldr	r1, [r5, #8]
 800ae76:	2900      	cmp	r1, #0
 800ae78:	d058      	beq.n	800af2c <rclc_executor_spin_some.part.0+0x260>
 800ae7a:	2400      	movs	r4, #0
 800ae7c:	f240 1991 	movw	r9, #401	; 0x191
 800ae80:	4626      	mov	r6, r4
 800ae82:	e009      	b.n	800ae98 <rclc_executor_spin_some.part.0+0x1cc>
 800ae84:	4641      	mov	r1, r8
 800ae86:	f7ff fd13 	bl	800a8b0 <_rclc_check_for_new_data>
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	b108      	cbz	r0, 800ae92 <rclc_executor_spin_some.part.0+0x1c6>
 800ae8e:	4548      	cmp	r0, r9
 800ae90:	d1ee      	bne.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800ae92:	68a9      	ldr	r1, [r5, #8]
 800ae94:	428e      	cmp	r6, r1
 800ae96:	d240      	bcs.n	800af1a <rclc_executor_spin_some.part.0+0x24e>
 800ae98:	686b      	ldr	r3, [r5, #4]
 800ae9a:	eb03 1086 	add.w	r0, r3, r6, lsl #6
 800ae9e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800aea2:	3601      	adds	r6, #1
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	d1ed      	bne.n	800ae84 <rclc_executor_spin_some.part.0+0x1b8>
 800aea8:	4618      	mov	r0, r3
 800aeaa:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800aeae:	4798      	blx	r3
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d0dd      	beq.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800aeb4:	68ab      	ldr	r3, [r5, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d0da      	beq.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800aeba:	f04f 0a00 	mov.w	sl, #0
 800aebe:	f240 1691 	movw	r6, #401	; 0x191
 800aec2:	f240 2959 	movw	r9, #601	; 0x259
 800aec6:	e00b      	b.n	800aee0 <rclc_executor_spin_some.part.0+0x214>
 800aec8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800aecc:	b113      	cbz	r3, 800aed4 <rclc_executor_spin_some.part.0+0x208>
 800aece:	f7ff fd81 	bl	800a9d4 <_rclc_execute.part.0>
 800aed2:	bb30      	cbnz	r0, 800af22 <rclc_executor_spin_some.part.0+0x256>
 800aed4:	68ab      	ldr	r3, [r5, #8]
 800aed6:	f10a 0a01 	add.w	sl, sl, #1
 800aeda:	459a      	cmp	sl, r3
 800aedc:	d2be      	bcs.n	800ae5c <rclc_executor_spin_some.part.0+0x190>
 800aede:	2400      	movs	r4, #0
 800aee0:	6868      	ldr	r0, [r5, #4]
 800aee2:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800aee6:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800aeea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0be      	beq.n	800ae70 <rclc_executor_spin_some.part.0+0x1a4>
 800aef2:	4641      	mov	r1, r8
 800aef4:	f7ff fd02 	bl	800a8fc <_rclc_take_new_data>
 800aef8:	b118      	cbz	r0, 800af02 <rclc_executor_spin_some.part.0+0x236>
 800aefa:	42b0      	cmp	r0, r6
 800aefc:	d001      	beq.n	800af02 <rclc_executor_spin_some.part.0+0x236>
 800aefe:	4548      	cmp	r0, r9
 800af00:	d10f      	bne.n	800af22 <rclc_executor_spin_some.part.0+0x256>
 800af02:	6868      	ldr	r0, [r5, #4]
 800af04:	eb10 000b 	adds.w	r0, r0, fp
 800af08:	d005      	beq.n	800af16 <rclc_executor_spin_some.part.0+0x24a>
 800af0a:	7843      	ldrb	r3, [r0, #1]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0db      	beq.n	800aec8 <rclc_executor_spin_some.part.0+0x1fc>
 800af10:	2b01      	cmp	r3, #1
 800af12:	d1df      	bne.n	800aed4 <rclc_executor_spin_some.part.0+0x208>
 800af14:	e7db      	b.n	800aece <rclc_executor_spin_some.part.0+0x202>
 800af16:	270b      	movs	r7, #11
 800af18:	e7a0      	b.n	800ae5c <rclc_executor_spin_some.part.0+0x190>
 800af1a:	686b      	ldr	r3, [r5, #4]
 800af1c:	e7c4      	b.n	800aea8 <rclc_executor_spin_some.part.0+0x1dc>
 800af1e:	686b      	ldr	r3, [r5, #4]
 800af20:	e730      	b.n	800ad84 <rclc_executor_spin_some.part.0+0xb8>
 800af22:	4607      	mov	r7, r0
 800af24:	e79a      	b.n	800ae5c <rclc_executor_spin_some.part.0+0x190>
 800af26:	460c      	mov	r4, r1
 800af28:	686b      	ldr	r3, [r5, #4]
 800af2a:	e72b      	b.n	800ad84 <rclc_executor_spin_some.part.0+0xb8>
 800af2c:	460c      	mov	r4, r1
 800af2e:	686b      	ldr	r3, [r5, #4]
 800af30:	e7ba      	b.n	800aea8 <rclc_executor_spin_some.part.0+0x1dc>
 800af32:	bf00      	nop

0800af34 <rclc_executor_spin>:
 800af34:	b1a0      	cbz	r0, 800af60 <rclc_executor_spin+0x2c>
 800af36:	b5d0      	push	{r4, r6, r7, lr}
 800af38:	4604      	mov	r4, r0
 800af3a:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 800af3e:	6820      	ldr	r0, [r4, #0]
 800af40:	f008 fb0e 	bl	8013560 <rcl_context_is_valid>
 800af44:	b140      	cbz	r0, 800af58 <rclc_executor_spin+0x24>
 800af46:	463b      	mov	r3, r7
 800af48:	4632      	mov	r2, r6
 800af4a:	4620      	mov	r0, r4
 800af4c:	f7ff febe 	bl	800accc <rclc_executor_spin_some.part.0>
 800af50:	f030 0302 	bics.w	r3, r0, #2
 800af54:	d0f1      	beq.n	800af3a <rclc_executor_spin+0x6>
 800af56:	bdd0      	pop	{r4, r6, r7, pc}
 800af58:	f000 fa6a 	bl	800b430 <rcutils_reset_error>
 800af5c:	2001      	movs	r0, #1
 800af5e:	bdd0      	pop	{r4, r6, r7, pc}
 800af60:	200b      	movs	r0, #11
 800af62:	4770      	bx	lr

0800af64 <rclc_executor_handle_counters_zero_init>:
 800af64:	b140      	cbz	r0, 800af78 <rclc_executor_handle_counters_zero_init+0x14>
 800af66:	2300      	movs	r3, #0
 800af68:	6003      	str	r3, [r0, #0]
 800af6a:	6043      	str	r3, [r0, #4]
 800af6c:	6083      	str	r3, [r0, #8]
 800af6e:	60c3      	str	r3, [r0, #12]
 800af70:	6103      	str	r3, [r0, #16]
 800af72:	6143      	str	r3, [r0, #20]
 800af74:	4618      	mov	r0, r3
 800af76:	4770      	bx	lr
 800af78:	200b      	movs	r0, #11
 800af7a:	4770      	bx	lr

0800af7c <rclc_executor_handle_init>:
 800af7c:	b178      	cbz	r0, 800af9e <rclc_executor_handle_init+0x22>
 800af7e:	4603      	mov	r3, r0
 800af80:	2209      	movs	r2, #9
 800af82:	b430      	push	{r4, r5}
 800af84:	2000      	movs	r0, #0
 800af86:	2400      	movs	r4, #0
 800af88:	2500      	movs	r5, #0
 800af8a:	801a      	strh	r2, [r3, #0]
 800af8c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800af90:	bc30      	pop	{r4, r5}
 800af92:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800af96:	6359      	str	r1, [r3, #52]	; 0x34
 800af98:	6318      	str	r0, [r3, #48]	; 0x30
 800af9a:	8718      	strh	r0, [r3, #56]	; 0x38
 800af9c:	4770      	bx	lr
 800af9e:	200b      	movs	r0, #11
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <rclc_support_init_with_options>:
 800afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800afae:	b390      	cbz	r0, 800b016 <rclc_support_init_with_options+0x72>
 800afb0:	461c      	mov	r4, r3
 800afb2:	b383      	cbz	r3, 800b016 <rclc_support_init_with_options+0x72>
 800afb4:	f1b8 0f00 	cmp.w	r8, #0
 800afb8:	d02d      	beq.n	800b016 <rclc_support_init_with_options+0x72>
 800afba:	4605      	mov	r5, r0
 800afbc:	460e      	mov	r6, r1
 800afbe:	4617      	mov	r7, r2
 800afc0:	f7ff f884 	bl	800a0cc <rcl_get_zero_initialized_init_options>
 800afc4:	4629      	mov	r1, r5
 800afc6:	6028      	str	r0, [r5, #0]
 800afc8:	4620      	mov	r0, r4
 800afca:	f7ff f8f7 	bl	800a1bc <rcl_init_options_copy>
 800afce:	4604      	mov	r4, r0
 800afd0:	b9d8      	cbnz	r0, 800b00a <rclc_support_init_with_options+0x66>
 800afd2:	466c      	mov	r4, sp
 800afd4:	4620      	mov	r0, r4
 800afd6:	f008 fab3 	bl	8013540 <rcl_get_zero_initialized_context>
 800afda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800afde:	f105 0408 	add.w	r4, r5, #8
 800afe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800afe6:	4623      	mov	r3, r4
 800afe8:	4639      	mov	r1, r7
 800afea:	4630      	mov	r0, r6
 800afec:	462a      	mov	r2, r5
 800afee:	f008 fc9b 	bl	8013928 <rcl_init>
 800aff2:	4604      	mov	r4, r0
 800aff4:	b948      	cbnz	r0, 800b00a <rclc_support_init_with_options+0x66>
 800aff6:	4642      	mov	r2, r8
 800aff8:	2003      	movs	r0, #3
 800affa:	f8c5 8018 	str.w	r8, [r5, #24]
 800affe:	f105 011c 	add.w	r1, r5, #28
 800b002:	f009 f90b 	bl	801421c <rcl_clock_init>
 800b006:	4604      	mov	r4, r0
 800b008:	b108      	cbz	r0, 800b00e <rclc_support_init_with_options+0x6a>
 800b00a:	f000 fa11 	bl	800b430 <rcutils_reset_error>
 800b00e:	4620      	mov	r0, r4
 800b010:	b004      	add	sp, #16
 800b012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b016:	240b      	movs	r4, #11
 800b018:	4620      	mov	r0, r4
 800b01a:	b004      	add	sp, #16
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b020 <rclc_node_init_default>:
 800b020:	b3c0      	cbz	r0, 800b094 <rclc_node_init_default+0x74>
 800b022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b026:	460d      	mov	r5, r1
 800b028:	b08f      	sub	sp, #60	; 0x3c
 800b02a:	b331      	cbz	r1, 800b07a <rclc_node_init_default+0x5a>
 800b02c:	4616      	mov	r6, r2
 800b02e:	b322      	cbz	r2, 800b07a <rclc_node_init_default+0x5a>
 800b030:	461f      	mov	r7, r3
 800b032:	b313      	cbz	r3, 800b07a <rclc_node_init_default+0x5a>
 800b034:	4604      	mov	r4, r0
 800b036:	f10d 0810 	add.w	r8, sp, #16
 800b03a:	4640      	mov	r0, r8
 800b03c:	f10d 091c 	add.w	r9, sp, #28
 800b040:	f008 fdaa 	bl	8013b98 <rcl_get_zero_initialized_node>
 800b044:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b048:	e884 0003 	stmia.w	r4, {r0, r1}
 800b04c:	4648      	mov	r0, r9
 800b04e:	f008 ff3f 	bl	8013ed0 <rcl_node_get_default_options>
 800b052:	4640      	mov	r0, r8
 800b054:	f008 fda0 	bl	8013b98 <rcl_get_zero_initialized_node>
 800b058:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b05c:	4632      	mov	r2, r6
 800b05e:	f8cd 9000 	str.w	r9, [sp]
 800b062:	f107 0308 	add.w	r3, r7, #8
 800b066:	e884 0003 	stmia.w	r4, {r0, r1}
 800b06a:	4629      	mov	r1, r5
 800b06c:	4620      	mov	r0, r4
 800b06e:	f008 fd9d 	bl	8013bac <rcl_node_init>
 800b072:	b930      	cbnz	r0, 800b082 <rclc_node_init_default+0x62>
 800b074:	b00f      	add	sp, #60	; 0x3c
 800b076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b07a:	200b      	movs	r0, #11
 800b07c:	b00f      	add	sp, #60	; 0x3c
 800b07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b082:	9003      	str	r0, [sp, #12]
 800b084:	f000 f9d4 	bl	800b430 <rcutils_reset_error>
 800b088:	f000 f9d2 	bl	800b430 <rcutils_reset_error>
 800b08c:	9803      	ldr	r0, [sp, #12]
 800b08e:	b00f      	add	sp, #60	; 0x3c
 800b090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b094:	200b      	movs	r0, #11
 800b096:	4770      	bx	lr

0800b098 <rclc_publisher_init_default>:
 800b098:	b368      	cbz	r0, 800b0f6 <rclc_publisher_init_default+0x5e>
 800b09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09e:	460d      	mov	r5, r1
 800b0a0:	b09e      	sub	sp, #120	; 0x78
 800b0a2:	b321      	cbz	r1, 800b0ee <rclc_publisher_init_default+0x56>
 800b0a4:	4616      	mov	r6, r2
 800b0a6:	b312      	cbz	r2, 800b0ee <rclc_publisher_init_default+0x56>
 800b0a8:	461f      	mov	r7, r3
 800b0aa:	b303      	cbz	r3, 800b0ee <rclc_publisher_init_default+0x56>
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	f7ff f941 	bl	800a334 <rcl_get_zero_initialized_publisher>
 800b0b2:	f10d 0810 	add.w	r8, sp, #16
 800b0b6:	6020      	str	r0, [r4, #0]
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	f7ff fa39 	bl	800a530 <rcl_publisher_get_default_options>
 800b0be:	2250      	movs	r2, #80	; 0x50
 800b0c0:	490e      	ldr	r1, [pc, #56]	; (800b0fc <rclc_publisher_init_default+0x64>)
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	f00c fafe 	bl	80176c4 <memcpy>
 800b0c8:	463b      	mov	r3, r7
 800b0ca:	4632      	mov	r2, r6
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f8cd 8000 	str.w	r8, [sp]
 800b0d4:	f7ff f934 	bl	800a340 <rcl_publisher_init>
 800b0d8:	b910      	cbnz	r0, 800b0e0 <rclc_publisher_init_default+0x48>
 800b0da:	b01e      	add	sp, #120	; 0x78
 800b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e0:	9003      	str	r0, [sp, #12]
 800b0e2:	f000 f9a5 	bl	800b430 <rcutils_reset_error>
 800b0e6:	9803      	ldr	r0, [sp, #12]
 800b0e8:	b01e      	add	sp, #120	; 0x78
 800b0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ee:	200b      	movs	r0, #11
 800b0f0:	b01e      	add	sp, #120	; 0x78
 800b0f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f6:	200b      	movs	r0, #11
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	08019e58 	.word	0x08019e58

0800b100 <rclc_subscription_init_best_effort>:
 800b100:	b368      	cbz	r0, 800b15e <rclc_subscription_init_best_effort+0x5e>
 800b102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b106:	460d      	mov	r5, r1
 800b108:	b0a0      	sub	sp, #128	; 0x80
 800b10a:	b321      	cbz	r1, 800b156 <rclc_subscription_init_best_effort+0x56>
 800b10c:	4616      	mov	r6, r2
 800b10e:	b312      	cbz	r2, 800b156 <rclc_subscription_init_best_effort+0x56>
 800b110:	461f      	mov	r7, r3
 800b112:	b303      	cbz	r3, 800b156 <rclc_subscription_init_best_effort+0x56>
 800b114:	4604      	mov	r4, r0
 800b116:	f7ff fa51 	bl	800a5bc <rcl_get_zero_initialized_subscription>
 800b11a:	f10d 0810 	add.w	r8, sp, #16
 800b11e:	6020      	str	r0, [r4, #0]
 800b120:	4640      	mov	r0, r8
 800b122:	f7ff fb47 	bl	800a7b4 <rcl_subscription_get_default_options>
 800b126:	2250      	movs	r2, #80	; 0x50
 800b128:	490e      	ldr	r1, [pc, #56]	; (800b164 <rclc_subscription_init_best_effort+0x64>)
 800b12a:	4640      	mov	r0, r8
 800b12c:	f00c faca 	bl	80176c4 <memcpy>
 800b130:	463b      	mov	r3, r7
 800b132:	4632      	mov	r2, r6
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f8cd 8000 	str.w	r8, [sp]
 800b13c:	f7ff fa44 	bl	800a5c8 <rcl_subscription_init>
 800b140:	b910      	cbnz	r0, 800b148 <rclc_subscription_init_best_effort+0x48>
 800b142:	b020      	add	sp, #128	; 0x80
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b148:	9003      	str	r0, [sp, #12]
 800b14a:	f000 f971 	bl	800b430 <rcutils_reset_error>
 800b14e:	9803      	ldr	r0, [sp, #12]
 800b150:	b020      	add	sp, #128	; 0x80
 800b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b156:	200b      	movs	r0, #11
 800b158:	b020      	add	sp, #128	; 0x80
 800b15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15e:	200b      	movs	r0, #11
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	08019ea8 	.word	0x08019ea8

0800b168 <rclc_timer_init_default>:
 800b168:	b360      	cbz	r0, 800b1c4 <rclc_timer_init_default+0x5c>
 800b16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b16e:	460c      	mov	r4, r1
 800b170:	b08b      	sub	sp, #44	; 0x2c
 800b172:	b319      	cbz	r1, 800b1bc <rclc_timer_init_default+0x54>
 800b174:	4691      	mov	r9, r2
 800b176:	4698      	mov	r8, r3
 800b178:	4607      	mov	r7, r0
 800b17a:	f009 fa33 	bl	80145e4 <rcl_get_zero_initialized_timer>
 800b17e:	4684      	mov	ip, r0
 800b180:	69a6      	ldr	r6, [r4, #24]
 800b182:	ad03      	add	r5, sp, #12
 800b184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b188:	6833      	ldr	r3, [r6, #0]
 800b18a:	f8c7 c000 	str.w	ip, [r7]
 800b18e:	602b      	str	r3, [r5, #0]
 800b190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b192:	4638      	mov	r0, r7
 800b194:	e9cd 9800 	strd	r9, r8, [sp]
 800b198:	9302      	str	r3, [sp, #8]
 800b19a:	f104 0208 	add.w	r2, r4, #8
 800b19e:	f104 011c 	add.w	r1, r4, #28
 800b1a2:	f009 fa25 	bl	80145f0 <rcl_timer_init>
 800b1a6:	b910      	cbnz	r0, 800b1ae <rclc_timer_init_default+0x46>
 800b1a8:	b00b      	add	sp, #44	; 0x2c
 800b1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ae:	9009      	str	r0, [sp, #36]	; 0x24
 800b1b0:	f000 f93e 	bl	800b430 <rcutils_reset_error>
 800b1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b6:	b00b      	add	sp, #44	; 0x2c
 800b1b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1bc:	200b      	movs	r0, #11
 800b1be:	b00b      	add	sp, #44	; 0x2c
 800b1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1c4:	200b      	movs	r0, #11
 800b1c6:	4770      	bx	lr

0800b1c8 <__default_zero_allocate>:
 800b1c8:	f00c b9f4 	b.w	80175b4 <calloc>

0800b1cc <__default_reallocate>:
 800b1cc:	f00c bbe4 	b.w	8017998 <realloc>

0800b1d0 <__default_deallocate>:
 800b1d0:	f00c ba70 	b.w	80176b4 <free>

0800b1d4 <__default_allocate>:
 800b1d4:	f00c ba66 	b.w	80176a4 <malloc>

0800b1d8 <rcutils_get_zero_initialized_allocator>:
 800b1d8:	b470      	push	{r4, r5, r6}
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4606      	mov	r6, r0
 800b1de:	4d04      	ldr	r5, [pc, #16]	; (800b1f0 <rcutils_get_zero_initialized_allocator+0x18>)
 800b1e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	bc70      	pop	{r4, r5, r6}
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	08019ef8 	.word	0x08019ef8

0800b1f4 <rcutils_set_default_allocator>:
 800b1f4:	b1a0      	cbz	r0, 800b220 <rcutils_set_default_allocator+0x2c>
 800b1f6:	6802      	ldr	r2, [r0, #0]
 800b1f8:	b19a      	cbz	r2, 800b222 <rcutils_set_default_allocator+0x2e>
 800b1fa:	6841      	ldr	r1, [r0, #4]
 800b1fc:	b199      	cbz	r1, 800b226 <rcutils_set_default_allocator+0x32>
 800b1fe:	b470      	push	{r4, r5, r6}
 800b200:	68c4      	ldr	r4, [r0, #12]
 800b202:	b15c      	cbz	r4, 800b21c <rcutils_set_default_allocator+0x28>
 800b204:	6885      	ldr	r5, [r0, #8]
 800b206:	b185      	cbz	r5, 800b22a <rcutils_set_default_allocator+0x36>
 800b208:	2600      	movs	r6, #0
 800b20a:	2001      	movs	r0, #1
 800b20c:	4b08      	ldr	r3, [pc, #32]	; (800b230 <rcutils_set_default_allocator+0x3c>)
 800b20e:	e9c3 2100 	strd	r2, r1, [r3]
 800b212:	e9c3 5402 	strd	r5, r4, [r3, #8]
 800b216:	611e      	str	r6, [r3, #16]
 800b218:	bc70      	pop	{r4, r5, r6}
 800b21a:	4770      	bx	lr
 800b21c:	4620      	mov	r0, r4
 800b21e:	e7fb      	b.n	800b218 <rcutils_set_default_allocator+0x24>
 800b220:	4770      	bx	lr
 800b222:	4610      	mov	r0, r2
 800b224:	4770      	bx	lr
 800b226:	4608      	mov	r0, r1
 800b228:	4770      	bx	lr
 800b22a:	4628      	mov	r0, r5
 800b22c:	e7f4      	b.n	800b218 <rcutils_set_default_allocator+0x24>
 800b22e:	bf00      	nop
 800b230:	20000014 	.word	0x20000014

0800b234 <rcutils_get_default_allocator>:
 800b234:	b470      	push	{r4, r5, r6}
 800b236:	4604      	mov	r4, r0
 800b238:	4606      	mov	r6, r0
 800b23a:	4d04      	ldr	r5, [pc, #16]	; (800b24c <rcutils_get_default_allocator+0x18>)
 800b23c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b23e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	4630      	mov	r0, r6
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	bc70      	pop	{r4, r5, r6}
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	20000014 	.word	0x20000014

0800b250 <rcutils_allocator_is_valid>:
 800b250:	b158      	cbz	r0, 800b26a <rcutils_allocator_is_valid+0x1a>
 800b252:	6803      	ldr	r3, [r0, #0]
 800b254:	b143      	cbz	r3, 800b268 <rcutils_allocator_is_valid+0x18>
 800b256:	6843      	ldr	r3, [r0, #4]
 800b258:	b133      	cbz	r3, 800b268 <rcutils_allocator_is_valid+0x18>
 800b25a:	68c3      	ldr	r3, [r0, #12]
 800b25c:	b123      	cbz	r3, 800b268 <rcutils_allocator_is_valid+0x18>
 800b25e:	6880      	ldr	r0, [r0, #8]
 800b260:	3800      	subs	r0, #0
 800b262:	bf18      	it	ne
 800b264:	2001      	movne	r0, #1
 800b266:	4770      	bx	lr
 800b268:	4618      	mov	r0, r3
 800b26a:	4770      	bx	lr

0800b26c <__rcutils_format_error_string>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	460f      	mov	r7, r1
 800b272:	4606      	mov	r6, r0
 800b274:	b087      	sub	sp, #28
 800b276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b27a:	4638      	mov	r0, r7
 800b27c:	f00c fc1f 	bl	8017abe <strnlen>
 800b280:	f240 39ff 	movw	r9, #1023	; 0x3ff
 800b284:	4548      	cmp	r0, r9
 800b286:	bf28      	it	cs
 800b288:	4648      	movcs	r0, r9
 800b28a:	4605      	mov	r5, r0
 800b28c:	4639      	mov	r1, r7
 800b28e:	f5c5 6480 	rsb	r4, r5, #1024	; 0x400
 800b292:	462a      	mov	r2, r5
 800b294:	4630      	mov	r0, r6
 800b296:	f00c fa23 	bl	80176e0 <memmove>
 800b29a:	2c05      	cmp	r4, #5
 800b29c:	46a0      	mov	r8, r4
 800b29e:	bf28      	it	cs
 800b2a0:	f04f 0805 	movcs.w	r8, #5
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4544      	cmp	r4, r8
 800b2a8:	bf98      	it	ls
 800b2aa:	eba9 0805 	subls.w	r8, r9, r5
 800b2ae:	5573      	strb	r3, [r6, r5]
 800b2b0:	442e      	add	r6, r5
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	4642      	mov	r2, r8
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4947      	ldr	r1, [pc, #284]	; (800b3d8 <__rcutils_format_error_string+0x16c>)
 800b2ba:	eba4 0408 	sub.w	r4, r4, r8
 800b2be:	f507 7a40 	add.w	sl, r7, #768	; 0x300
 800b2c2:	f00c f9ff 	bl	80176c4 <memcpy>
 800b2c6:	f806 5008 	strb.w	r5, [r6, r8]
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4650      	mov	r0, sl
 800b2ce:	f00c fbf6 	bl	8017abe <strnlen>
 800b2d2:	4284      	cmp	r4, r0
 800b2d4:	4683      	mov	fp, r0
 800b2d6:	4446      	add	r6, r8
 800b2d8:	d96b      	bls.n	800b3b2 <__rcutils_format_error_string+0x146>
 800b2da:	1a24      	subs	r4, r4, r0
 800b2dc:	2c01      	cmp	r4, #1
 800b2de:	46a1      	mov	r9, r4
 800b2e0:	bf28      	it	cs
 800b2e2:	f04f 0901 	movcs.w	r9, #1
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	4651      	mov	r1, sl
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f00c f9f8 	bl	80176e0 <memmove>
 800b2f0:	454c      	cmp	r4, r9
 800b2f2:	eb06 030b 	add.w	r3, r6, fp
 800b2f6:	f806 500b 	strb.w	r5, [r6, fp]
 800b2fa:	bf88      	it	hi
 800b2fc:	eba4 0809 	subhi.w	r8, r4, r9
 800b300:	d960      	bls.n	800b3c4 <__rcutils_format_error_string+0x158>
 800b302:	464a      	mov	r2, r9
 800b304:	4618      	mov	r0, r3
 800b306:	4935      	ldr	r1, [pc, #212]	; (800b3dc <__rcutils_format_error_string+0x170>)
 800b308:	f00c f9dc 	bl	80176c4 <memcpy>
 800b30c:	2600      	movs	r6, #0
 800b30e:	f800 6009 	strb.w	r6, [r0, r9]
 800b312:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 800b316:	ea54 0305 	orrs.w	r3, r4, r5
 800b31a:	4481      	add	r9, r0
 800b31c:	d057      	beq.n	800b3ce <__rcutils_format_error_string+0x162>
 800b31e:	466f      	mov	r7, sp
 800b320:	46ba      	mov	sl, r7
 800b322:	4620      	mov	r0, r4
 800b324:	4629      	mov	r1, r5
 800b326:	220a      	movs	r2, #10
 800b328:	2300      	movs	r3, #0
 800b32a:	f7f5 fa67 	bl	80007fc <__aeabi_uldivmod>
 800b32e:	3230      	adds	r2, #48	; 0x30
 800b330:	2300      	movs	r3, #0
 800b332:	4620      	mov	r0, r4
 800b334:	4629      	mov	r1, r5
 800b336:	f80a 2b01 	strb.w	r2, [sl], #1
 800b33a:	220a      	movs	r2, #10
 800b33c:	f7f5 fa5e 	bl	80007fc <__aeabi_uldivmod>
 800b340:	462b      	mov	r3, r5
 800b342:	4622      	mov	r2, r4
 800b344:	2b00      	cmp	r3, #0
 800b346:	bf08      	it	eq
 800b348:	2a0a      	cmpeq	r2, #10
 800b34a:	4604      	mov	r4, r0
 800b34c:	460d      	mov	r5, r1
 800b34e:	f106 0601 	add.w	r6, r6, #1
 800b352:	d2e6      	bcs.n	800b322 <__rcutils_format_error_string+0xb6>
 800b354:	2300      	movs	r3, #0
 800b356:	aa06      	add	r2, sp, #24
 800b358:	4416      	add	r6, r2
 800b35a:	2115      	movs	r1, #21
 800b35c:	4638      	mov	r0, r7
 800b35e:	f806 3c18 	strb.w	r3, [r6, #-24]
 800b362:	f00c fbac 	bl	8017abe <strnlen>
 800b366:	2801      	cmp	r0, #1
 800b368:	d90f      	bls.n	800b38a <__rcutils_format_error_string+0x11e>
 800b36a:	463a      	mov	r2, r7
 800b36c:	1e43      	subs	r3, r0, #1
 800b36e:	f10d 31ff 	add.w	r1, sp, #4294967295	; 0xffffffff
 800b372:	443b      	add	r3, r7
 800b374:	4408      	add	r0, r1
 800b376:	7811      	ldrb	r1, [r2, #0]
 800b378:	781c      	ldrb	r4, [r3, #0]
 800b37a:	f802 4b01 	strb.w	r4, [r2], #1
 800b37e:	f803 1901 	strb.w	r1, [r3], #-1
 800b382:	1ac4      	subs	r4, r0, r3
 800b384:	1a81      	subs	r1, r0, r2
 800b386:	428c      	cmp	r4, r1
 800b388:	d3f5      	bcc.n	800b376 <__rcutils_format_error_string+0x10a>
 800b38a:	4641      	mov	r1, r8
 800b38c:	4638      	mov	r0, r7
 800b38e:	f00c fb96 	bl	8017abe <strnlen>
 800b392:	4604      	mov	r4, r0
 800b394:	4540      	cmp	r0, r8
 800b396:	bf28      	it	cs
 800b398:	f108 34ff 	addcs.w	r4, r8, #4294967295	; 0xffffffff
 800b39c:	4639      	mov	r1, r7
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4648      	mov	r0, r9
 800b3a2:	f00c f98f 	bl	80176c4 <memcpy>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f809 3004 	strb.w	r3, [r9, r4]
 800b3ac:	b007      	add	sp, #28
 800b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b2:	3c01      	subs	r4, #1
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4651      	mov	r1, sl
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f00c f991 	bl	80176e0 <memmove>
 800b3be:	1933      	adds	r3, r6, r4
 800b3c0:	5535      	strb	r5, [r6, r4]
 800b3c2:	2401      	movs	r4, #1
 800b3c4:	f04f 0801 	mov.w	r8, #1
 800b3c8:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800b3cc:	e799      	b.n	800b302 <__rcutils_format_error_string+0x96>
 800b3ce:	2330      	movs	r3, #48	; 0x30
 800b3d0:	466f      	mov	r7, sp
 800b3d2:	f8ad 3000 	strh.w	r3, [sp]
 800b3d6:	e7d8      	b.n	800b38a <__rcutils_format_error_string+0x11e>
 800b3d8:	08019f0c 	.word	0x08019f0c
 800b3dc:	08019f14 	.word	0x08019f14

0800b3e0 <rcutils_get_error_string>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4b0e      	ldr	r3, [pc, #56]	; (800b41c <rcutils_get_error_string+0x3c>)
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	b18b      	cbz	r3, 800b40e <rcutils_get_error_string+0x2e>
 800b3ea:	4d0d      	ldr	r5, [pc, #52]	; (800b420 <rcutils_get_error_string+0x40>)
 800b3ec:	782b      	ldrb	r3, [r5, #0]
 800b3ee:	b13b      	cbz	r3, 800b400 <rcutils_get_error_string+0x20>
 800b3f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	490b      	ldr	r1, [pc, #44]	; (800b424 <rcutils_get_error_string+0x44>)
 800b3f8:	f00c f964 	bl	80176c4 <memcpy>
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	4909      	ldr	r1, [pc, #36]	; (800b428 <rcutils_get_error_string+0x48>)
 800b402:	4808      	ldr	r0, [pc, #32]	; (800b424 <rcutils_get_error_string+0x44>)
 800b404:	f7ff ff32 	bl	800b26c <__rcutils_format_error_string>
 800b408:	2301      	movs	r3, #1
 800b40a:	702b      	strb	r3, [r5, #0]
 800b40c:	e7f0      	b.n	800b3f0 <rcutils_get_error_string+0x10>
 800b40e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b412:	4906      	ldr	r1, [pc, #24]	; (800b42c <rcutils_get_error_string+0x4c>)
 800b414:	f00c f956 	bl	80176c4 <memcpy>
 800b418:	4620      	mov	r0, r4
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20006738 	.word	0x20006738
 800b420:	20006739 	.word	0x20006739
 800b424:	200084f8 	.word	0x200084f8
 800b428:	200088f8 	.word	0x200088f8
 800b42c:	08019834 	.word	0x08019834

0800b430 <rcutils_reset_error>:
 800b430:	b510      	push	{r4, lr}
 800b432:	2400      	movs	r4, #0
 800b434:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800b438:	4621      	mov	r1, r4
 800b43a:	4807      	ldr	r0, [pc, #28]	; (800b458 <rcutils_reset_error+0x28>)
 800b43c:	f00c f96a 	bl	8017714 <memset>
 800b440:	4b06      	ldr	r3, [pc, #24]	; (800b45c <rcutils_reset_error+0x2c>)
 800b442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b446:	4906      	ldr	r1, [pc, #24]	; (800b460 <rcutils_reset_error+0x30>)
 800b448:	4806      	ldr	r0, [pc, #24]	; (800b464 <rcutils_reset_error+0x34>)
 800b44a:	701c      	strb	r4, [r3, #0]
 800b44c:	f00c f93a 	bl	80176c4 <memcpy>
 800b450:	4b05      	ldr	r3, [pc, #20]	; (800b468 <rcutils_reset_error+0x38>)
 800b452:	701c      	strb	r4, [r3, #0]
 800b454:	bd10      	pop	{r4, pc}
 800b456:	bf00      	nop
 800b458:	200088f8 	.word	0x200088f8
 800b45c:	20006739 	.word	0x20006739
 800b460:	08019034 	.word	0x08019034
 800b464:	200084f8 	.word	0x200084f8
 800b468:	20006738 	.word	0x20006738

0800b46c <rcutils_get_zero_initialized_string_map>:
 800b46c:	2000      	movs	r0, #0
 800b46e:	4b01      	ldr	r3, [pc, #4]	; (800b474 <rcutils_get_zero_initialized_string_map+0x8>)
 800b470:	6018      	str	r0, [r3, #0]
 800b472:	4770      	bx	lr
 800b474:	2000673c 	.word	0x2000673c

0800b478 <rcutils_string_map_reserve>:
 800b478:	2800      	cmp	r0, #0
 800b47a:	d05d      	beq.n	800b538 <rcutils_string_map_reserve+0xc0>
 800b47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b480:	6805      	ldr	r5, [r0, #0]
 800b482:	4606      	mov	r6, r0
 800b484:	460c      	mov	r4, r1
 800b486:	b12d      	cbz	r5, 800b494 <rcutils_string_map_reserve+0x1c>
 800b488:	68eb      	ldr	r3, [r5, #12]
 800b48a:	42a3      	cmp	r3, r4
 800b48c:	d905      	bls.n	800b49a <rcutils_string_map_reserve+0x22>
 800b48e:	461c      	mov	r4, r3
 800b490:	2d00      	cmp	r5, #0
 800b492:	d1f9      	bne.n	800b488 <rcutils_string_map_reserve+0x10>
 800b494:	201f      	movs	r0, #31
 800b496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49a:	68ab      	ldr	r3, [r5, #8]
 800b49c:	42a3      	cmp	r3, r4
 800b49e:	d047      	beq.n	800b530 <rcutils_string_map_reserve+0xb8>
 800b4a0:	6a2f      	ldr	r7, [r5, #32]
 800b4a2:	2c00      	cmp	r4, #0
 800b4a4:	d034      	beq.n	800b510 <rcutils_string_map_reserve+0x98>
 800b4a6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b4aa:	d243      	bcs.n	800b534 <rcutils_string_map_reserve+0xbc>
 800b4ac:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800b4b0:	4641      	mov	r1, r8
 800b4b2:	463a      	mov	r2, r7
 800b4b4:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800b4b8:	6828      	ldr	r0, [r5, #0]
 800b4ba:	47c8      	blx	r9
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d039      	beq.n	800b534 <rcutils_string_map_reserve+0xbc>
 800b4c0:	6833      	ldr	r3, [r6, #0]
 800b4c2:	463a      	mov	r2, r7
 800b4c4:	6018      	str	r0, [r3, #0]
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	6858      	ldr	r0, [r3, #4]
 800b4ca:	47c8      	blx	r9
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	b388      	cbz	r0, 800b534 <rcutils_string_map_reserve+0xbc>
 800b4d0:	6835      	ldr	r5, [r6, #0]
 800b4d2:	68aa      	ldr	r2, [r5, #8]
 800b4d4:	6068      	str	r0, [r5, #4]
 800b4d6:	42a2      	cmp	r2, r4
 800b4d8:	d226      	bcs.n	800b528 <rcutils_string_map_reserve+0xb0>
 800b4da:	682e      	ldr	r6, [r5, #0]
 800b4dc:	eb00 0c08 	add.w	ip, r0, r8
 800b4e0:	eb06 0082 	add.w	r0, r6, r2, lsl #2
 800b4e4:	4560      	cmp	r0, ip
 800b4e6:	ea4f 0182 	mov.w	r1, r2, lsl #2
 800b4ea:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 800b4ee:	d203      	bcs.n	800b4f8 <rcutils_string_map_reserve+0x80>
 800b4f0:	eb06 0c08 	add.w	ip, r6, r8
 800b4f4:	4567      	cmp	r7, ip
 800b4f6:	d321      	bcc.n	800b53c <rcutils_string_map_reserve+0xc4>
 800b4f8:	1aa2      	subs	r2, r4, r2
 800b4fa:	0096      	lsls	r6, r2, #2
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	2100      	movs	r1, #0
 800b500:	f00c f908 	bl	8017714 <memset>
 800b504:	4632      	mov	r2, r6
 800b506:	4638      	mov	r0, r7
 800b508:	2100      	movs	r1, #0
 800b50a:	f00c f903 	bl	8017714 <memset>
 800b50e:	e00b      	b.n	800b528 <rcutils_string_map_reserve+0xb0>
 800b510:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800b514:	6828      	ldr	r0, [r5, #0]
 800b516:	4639      	mov	r1, r7
 800b518:	47c0      	blx	r8
 800b51a:	6833      	ldr	r3, [r6, #0]
 800b51c:	4639      	mov	r1, r7
 800b51e:	6858      	ldr	r0, [r3, #4]
 800b520:	601c      	str	r4, [r3, #0]
 800b522:	47c0      	blx	r8
 800b524:	6835      	ldr	r5, [r6, #0]
 800b526:	606c      	str	r4, [r5, #4]
 800b528:	2000      	movs	r0, #0
 800b52a:	60ac      	str	r4, [r5, #8]
 800b52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b530:	2000      	movs	r0, #0
 800b532:	e7b0      	b.n	800b496 <rcutils_string_map_reserve+0x1e>
 800b534:	200a      	movs	r0, #10
 800b536:	e7ae      	b.n	800b496 <rcutils_string_map_reserve+0x1e>
 800b538:	200b      	movs	r0, #11
 800b53a:	4770      	bx	lr
 800b53c:	2000      	movs	r0, #0
 800b53e:	3904      	subs	r1, #4
 800b540:	1f32      	subs	r2, r6, #4
 800b542:	440b      	add	r3, r1
 800b544:	4490      	add	r8, r2
 800b546:	4431      	add	r1, r6
 800b548:	f841 0f04 	str.w	r0, [r1, #4]!
 800b54c:	4541      	cmp	r1, r8
 800b54e:	f843 0f04 	str.w	r0, [r3, #4]!
 800b552:	d1f9      	bne.n	800b548 <rcutils_string_map_reserve+0xd0>
 800b554:	e7e8      	b.n	800b528 <rcutils_string_map_reserve+0xb0>
 800b556:	bf00      	nop

0800b558 <rcutils_string_map_init>:
 800b558:	b082      	sub	sp, #8
 800b55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55c:	ac06      	add	r4, sp, #24
 800b55e:	e884 000c 	stmia.w	r4, {r2, r3}
 800b562:	b370      	cbz	r0, 800b5c2 <rcutils_string_map_init+0x6a>
 800b564:	6806      	ldr	r6, [r0, #0]
 800b566:	4604      	mov	r4, r0
 800b568:	b12e      	cbz	r6, 800b576 <rcutils_string_map_init+0x1e>
 800b56a:	251e      	movs	r5, #30
 800b56c:	4628      	mov	r0, r5
 800b56e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b572:	b002      	add	sp, #8
 800b574:	4770      	bx	lr
 800b576:	a806      	add	r0, sp, #24
 800b578:	460d      	mov	r5, r1
 800b57a:	f7ff fe69 	bl	800b250 <rcutils_allocator_is_valid>
 800b57e:	b300      	cbz	r0, 800b5c2 <rcutils_string_map_init+0x6a>
 800b580:	2024      	movs	r0, #36	; 0x24
 800b582:	9b06      	ldr	r3, [sp, #24]
 800b584:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b586:	4798      	blx	r3
 800b588:	6020      	str	r0, [r4, #0]
 800b58a:	b300      	cbz	r0, 800b5ce <rcutils_string_map_init+0x76>
 800b58c:	f100 0710 	add.w	r7, r0, #16
 800b590:	f10d 0c18 	add.w	ip, sp, #24
 800b594:	e9c0 6600 	strd	r6, r6, [r0]
 800b598:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800b59c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b5a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800b5a2:	f8dc 3000 	ldr.w	r3, [ip]
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	603b      	str	r3, [r7, #0]
 800b5ac:	f7ff ff64 	bl	800b478 <rcutils_string_map_reserve>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d0da      	beq.n	800b56c <rcutils_string_map_init+0x14>
 800b5b6:	9b07      	ldr	r3, [sp, #28]
 800b5b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b5ba:	6820      	ldr	r0, [r4, #0]
 800b5bc:	4798      	blx	r3
 800b5be:	6026      	str	r6, [r4, #0]
 800b5c0:	e7d4      	b.n	800b56c <rcutils_string_map_init+0x14>
 800b5c2:	250b      	movs	r5, #11
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5ca:	b002      	add	sp, #8
 800b5cc:	4770      	bx	lr
 800b5ce:	250a      	movs	r5, #10
 800b5d0:	e7cc      	b.n	800b56c <rcutils_string_map_init+0x14>
 800b5d2:	bf00      	nop

0800b5d4 <rcutils_string_map_fini>:
 800b5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d036      	beq.n	800b64a <rcutils_string_map_fini+0x76>
 800b5dc:	6804      	ldr	r4, [r0, #0]
 800b5de:	4606      	mov	r6, r0
 800b5e0:	2c00      	cmp	r4, #0
 800b5e2:	d02f      	beq.n	800b644 <rcutils_string_map_fini+0x70>
 800b5e4:	68a3      	ldr	r3, [r4, #8]
 800b5e6:	b313      	cbz	r3, 800b62e <rcutils_string_map_fini+0x5a>
 800b5e8:	2500      	movs	r5, #0
 800b5ea:	46a8      	mov	r8, r5
 800b5ec:	e017      	b.n	800b61e <rcutils_string_map_fini+0x4a>
 800b5ee:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800b5f2:	6967      	ldr	r7, [r4, #20]
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	47b8      	blx	r7
 800b5f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b5fc:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800b600:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b604:	4649      	mov	r1, r9
 800b606:	47b8      	blx	r7
 800b608:	68e3      	ldr	r3, [r4, #12]
 800b60a:	6862      	ldr	r2, [r4, #4]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800b612:	60e3      	str	r3, [r4, #12]
 800b614:	6834      	ldr	r4, [r6, #0]
 800b616:	3501      	adds	r5, #1
 800b618:	68a3      	ldr	r3, [r4, #8]
 800b61a:	429d      	cmp	r5, r3
 800b61c:	d207      	bcs.n	800b62e <rcutils_string_map_fini+0x5a>
 800b61e:	6822      	ldr	r2, [r4, #0]
 800b620:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800b624:	2800      	cmp	r0, #0
 800b626:	d1e2      	bne.n	800b5ee <rcutils_string_map_fini+0x1a>
 800b628:	3501      	adds	r5, #1
 800b62a:	429d      	cmp	r5, r3
 800b62c:	d3f8      	bcc.n	800b620 <rcutils_string_map_fini+0x4c>
 800b62e:	2100      	movs	r1, #0
 800b630:	4630      	mov	r0, r6
 800b632:	f7ff ff21 	bl	800b478 <rcutils_string_map_reserve>
 800b636:	4604      	mov	r4, r0
 800b638:	b920      	cbnz	r0, 800b644 <rcutils_string_map_fini+0x70>
 800b63a:	6830      	ldr	r0, [r6, #0]
 800b63c:	6943      	ldr	r3, [r0, #20]
 800b63e:	6a01      	ldr	r1, [r0, #32]
 800b640:	4798      	blx	r3
 800b642:	6034      	str	r4, [r6, #0]
 800b644:	4620      	mov	r0, r4
 800b646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64a:	240b      	movs	r4, #11
 800b64c:	4620      	mov	r0, r4
 800b64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b652:	bf00      	nop

0800b654 <rcutils_string_map_getn>:
 800b654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	b310      	cbz	r0, 800b6a0 <rcutils_string_map_getn+0x4c>
 800b65a:	6804      	ldr	r4, [r0, #0]
 800b65c:	b30c      	cbz	r4, 800b6a2 <rcutils_string_map_getn+0x4e>
 800b65e:	460d      	mov	r5, r1
 800b660:	b1f1      	cbz	r1, 800b6a0 <rcutils_string_map_getn+0x4c>
 800b662:	f8d4 a008 	ldr.w	sl, [r4, #8]
 800b666:	6827      	ldr	r7, [r4, #0]
 800b668:	f1ba 0f00 	cmp.w	sl, #0
 800b66c:	d018      	beq.n	800b6a0 <rcutils_string_map_getn+0x4c>
 800b66e:	4690      	mov	r8, r2
 800b670:	2600      	movs	r6, #0
 800b672:	3f04      	subs	r7, #4
 800b674:	f857 9f04 	ldr.w	r9, [r7, #4]!
 800b678:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800b67c:	3601      	adds	r6, #1
 800b67e:	f1b9 0f00 	cmp.w	r9, #0
 800b682:	d00b      	beq.n	800b69c <rcutils_string_map_getn+0x48>
 800b684:	4648      	mov	r0, r9
 800b686:	f7f4 fddd 	bl	8000244 <strlen>
 800b68a:	4540      	cmp	r0, r8
 800b68c:	4602      	mov	r2, r0
 800b68e:	4649      	mov	r1, r9
 800b690:	bf38      	it	cc
 800b692:	4642      	movcc	r2, r8
 800b694:	4628      	mov	r0, r5
 800b696:	f00c fa00 	bl	8017a9a <strncmp>
 800b69a:	b128      	cbz	r0, 800b6a8 <rcutils_string_map_getn+0x54>
 800b69c:	45b2      	cmp	sl, r6
 800b69e:	d1e9      	bne.n	800b674 <rcutils_string_map_getn+0x20>
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	6863      	ldr	r3, [r4, #4]
 800b6aa:	f853 400b 	ldr.w	r4, [r3, fp]
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6b4 <rcutils_system_time_now>:
 800b6b4:	b310      	cbz	r0, 800b6fc <rcutils_system_time_now+0x48>
 800b6b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4669      	mov	r1, sp
 800b6be:	2001      	movs	r0, #1
 800b6c0:	f7f7 fafa 	bl	8002cb8 <clock_gettime>
 800b6c4:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b6c8:	2e00      	cmp	r6, #0
 800b6ca:	f177 0300 	sbcs.w	r3, r7, #0
 800b6ce:	db12      	blt.n	800b6f6 <rcutils_system_time_now+0x42>
 800b6d0:	9902      	ldr	r1, [sp, #8]
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	db0c      	blt.n	800b6f0 <rcutils_system_time_now+0x3c>
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	4d09      	ldr	r5, [pc, #36]	; (800b700 <rcutils_system_time_now+0x4c>)
 800b6da:	fba6 2305 	umull	r2, r3, r6, r5
 800b6de:	fb05 3307 	mla	r3, r5, r7, r3
 800b6e2:	1852      	adds	r2, r2, r1
 800b6e4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b6e8:	e9c4 2300 	strd	r2, r3, [r4]
 800b6ec:	b005      	add	sp, #20
 800b6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6f0:	ea56 0307 	orrs.w	r3, r6, r7
 800b6f4:	d1ef      	bne.n	800b6d6 <rcutils_system_time_now+0x22>
 800b6f6:	2002      	movs	r0, #2
 800b6f8:	b005      	add	sp, #20
 800b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fc:	200b      	movs	r0, #11
 800b6fe:	4770      	bx	lr
 800b700:	3b9aca00 	.word	0x3b9aca00

0800b704 <rcutils_steady_time_now>:
 800b704:	b310      	cbz	r0, 800b74c <rcutils_steady_time_now+0x48>
 800b706:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b708:	b085      	sub	sp, #20
 800b70a:	4604      	mov	r4, r0
 800b70c:	4669      	mov	r1, sp
 800b70e:	2000      	movs	r0, #0
 800b710:	f7f7 fad2 	bl	8002cb8 <clock_gettime>
 800b714:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b718:	2e00      	cmp	r6, #0
 800b71a:	f177 0300 	sbcs.w	r3, r7, #0
 800b71e:	db12      	blt.n	800b746 <rcutils_steady_time_now+0x42>
 800b720:	9902      	ldr	r1, [sp, #8]
 800b722:	2900      	cmp	r1, #0
 800b724:	db0c      	blt.n	800b740 <rcutils_steady_time_now+0x3c>
 800b726:	2000      	movs	r0, #0
 800b728:	4d09      	ldr	r5, [pc, #36]	; (800b750 <rcutils_steady_time_now+0x4c>)
 800b72a:	fba6 2305 	umull	r2, r3, r6, r5
 800b72e:	fb05 3307 	mla	r3, r5, r7, r3
 800b732:	1852      	adds	r2, r2, r1
 800b734:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800b738:	e9c4 2300 	strd	r2, r3, [r4]
 800b73c:	b005      	add	sp, #20
 800b73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b740:	ea56 0307 	orrs.w	r3, r6, r7
 800b744:	d1ef      	bne.n	800b726 <rcutils_steady_time_now+0x22>
 800b746:	2002      	movs	r0, #2
 800b748:	b005      	add	sp, #20
 800b74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b74c:	200b      	movs	r0, #11
 800b74e:	4770      	bx	lr
 800b750:	3b9aca00 	.word	0x3b9aca00

0800b754 <rmw_get_zero_initialized_init_options>:
 800b754:	b510      	push	{r4, lr}
 800b756:	4604      	mov	r4, r0
 800b758:	2238      	movs	r2, #56	; 0x38
 800b75a:	2100      	movs	r1, #0
 800b75c:	f00b ffda 	bl	8017714 <memset>
 800b760:	f104 0010 	add.w	r0, r4, #16
 800b764:	f000 f808 	bl	800b778 <rmw_get_default_security_options>
 800b768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b76c:	4620      	mov	r0, r4
 800b76e:	60e3      	str	r3, [r4, #12]
 800b770:	bd10      	pop	{r4, pc}
 800b772:	bf00      	nop

0800b774 <rmw_get_default_publisher_options>:
 800b774:	2000      	movs	r0, #0
 800b776:	4770      	bx	lr

0800b778 <rmw_get_default_security_options>:
 800b778:	2200      	movs	r2, #0
 800b77a:	7002      	strb	r2, [r0, #0]
 800b77c:	6042      	str	r2, [r0, #4]
 800b77e:	4770      	bx	lr

0800b780 <rmw_get_default_subscription_options>:
 800b780:	2200      	movs	r2, #0
 800b782:	6002      	str	r2, [r0, #0]
 800b784:	7102      	strb	r2, [r0, #4]
 800b786:	4770      	bx	lr

0800b788 <rmw_get_zero_initialized_message_info>:
 800b788:	b470      	push	{r4, r5, r6}
 800b78a:	4604      	mov	r4, r0
 800b78c:	4606      	mov	r6, r0
 800b78e:	4d06      	ldr	r5, [pc, #24]	; (800b7a8 <rmw_get_zero_initialized_message_info+0x20>)
 800b790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b798:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b79c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	bc70      	pop	{r4, r5, r6}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	08019c38 	.word	0x08019c38

0800b7ac <rmw_validate_full_topic_name>:
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d062      	beq.n	800b876 <rmw_validate_full_topic_name+0xca>
 800b7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	2900      	cmp	r1, #0
 800b7b8:	d05f      	beq.n	800b87a <rmw_validate_full_topic_name+0xce>
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	4604      	mov	r4, r0
 800b7be:	f7f4 fd41 	bl	8000244 <strlen>
 800b7c2:	b148      	cbz	r0, 800b7d8 <rmw_validate_full_topic_name+0x2c>
 800b7c4:	7823      	ldrb	r3, [r4, #0]
 800b7c6:	2b2f      	cmp	r3, #47	; 0x2f
 800b7c8:	d00d      	beq.n	800b7e6 <rmw_validate_full_topic_name+0x3a>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	602b      	str	r3, [r5, #0]
 800b7ce:	b13e      	cbz	r6, 800b7e0 <rmw_validate_full_topic_name+0x34>
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	6030      	str	r0, [r6, #0]
 800b7d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7d8:	2301      	movs	r3, #1
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	2e00      	cmp	r6, #0
 800b7de:	d1f7      	bne.n	800b7d0 <rmw_validate_full_topic_name+0x24>
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800b7ea:	f814 300c 	ldrb.w	r3, [r4, ip]
 800b7ee:	2b2f      	cmp	r3, #47	; 0x2f
 800b7f0:	d045      	beq.n	800b87e <rmw_validate_full_topic_name+0xd2>
 800b7f2:	4627      	mov	r7, r4
 800b7f4:	1e63      	subs	r3, r4, #1
 800b7f6:	eb03 0900 	add.w	r9, r3, r0
 800b7fa:	f1c4 0e01 	rsb	lr, r4, #1
 800b7fe:	eb0e 0803 	add.w	r8, lr, r3
 800b802:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b806:	f021 0220 	bic.w	r2, r1, #32
 800b80a:	3a41      	subs	r2, #65	; 0x41
 800b80c:	2a19      	cmp	r2, #25
 800b80e:	f1a1 042f 	sub.w	r4, r1, #47	; 0x2f
 800b812:	d90b      	bls.n	800b82c <rmw_validate_full_topic_name+0x80>
 800b814:	295f      	cmp	r1, #95	; 0x5f
 800b816:	d009      	beq.n	800b82c <rmw_validate_full_topic_name+0x80>
 800b818:	2c0a      	cmp	r4, #10
 800b81a:	d907      	bls.n	800b82c <rmw_validate_full_topic_name+0x80>
 800b81c:	2304      	movs	r3, #4
 800b81e:	602b      	str	r3, [r5, #0]
 800b820:	2e00      	cmp	r6, #0
 800b822:	d0dd      	beq.n	800b7e0 <rmw_validate_full_topic_name+0x34>
 800b824:	2000      	movs	r0, #0
 800b826:	f8c6 8000 	str.w	r8, [r6]
 800b82a:	e7d3      	b.n	800b7d4 <rmw_validate_full_topic_name+0x28>
 800b82c:	454b      	cmp	r3, r9
 800b82e:	d1e6      	bne.n	800b7fe <rmw_validate_full_topic_name+0x52>
 800b830:	2300      	movs	r3, #0
 800b832:	f8df e084 	ldr.w	lr, [pc, #132]	; 800b8b8 <rmw_validate_full_topic_name+0x10c>
 800b836:	f10c 0801 	add.w	r8, ip, #1
 800b83a:	e005      	b.n	800b848 <rmw_validate_full_topic_name+0x9c>
 800b83c:	4611      	mov	r1, r2
 800b83e:	4288      	cmp	r0, r1
 800b840:	4613      	mov	r3, r2
 800b842:	f107 0701 	add.w	r7, r7, #1
 800b846:	d925      	bls.n	800b894 <rmw_validate_full_topic_name+0xe8>
 800b848:	459c      	cmp	ip, r3
 800b84a:	f103 0201 	add.w	r2, r3, #1
 800b84e:	d01d      	beq.n	800b88c <rmw_validate_full_topic_name+0xe0>
 800b850:	7839      	ldrb	r1, [r7, #0]
 800b852:	292f      	cmp	r1, #47	; 0x2f
 800b854:	d1f2      	bne.n	800b83c <rmw_validate_full_topic_name+0x90>
 800b856:	787c      	ldrb	r4, [r7, #1]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	2c2f      	cmp	r4, #47	; 0x2f
 800b85c:	4611      	mov	r1, r2
 800b85e:	d026      	beq.n	800b8ae <rmw_validate_full_topic_name+0x102>
 800b860:	f814 300e 	ldrb.w	r3, [r4, lr]
 800b864:	075b      	lsls	r3, r3, #29
 800b866:	d5ea      	bpl.n	800b83e <rmw_validate_full_topic_name+0x92>
 800b868:	2306      	movs	r3, #6
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	2e00      	cmp	r6, #0
 800b86e:	d0b7      	beq.n	800b7e0 <rmw_validate_full_topic_name+0x34>
 800b870:	2000      	movs	r0, #0
 800b872:	6032      	str	r2, [r6, #0]
 800b874:	e7ae      	b.n	800b7d4 <rmw_validate_full_topic_name+0x28>
 800b876:	200b      	movs	r0, #11
 800b878:	4770      	bx	lr
 800b87a:	200b      	movs	r0, #11
 800b87c:	e7aa      	b.n	800b7d4 <rmw_validate_full_topic_name+0x28>
 800b87e:	2303      	movs	r3, #3
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	2e00      	cmp	r6, #0
 800b884:	d0ac      	beq.n	800b7e0 <rmw_validate_full_topic_name+0x34>
 800b886:	f8c6 c000 	str.w	ip, [r6]
 800b88a:	e7a9      	b.n	800b7e0 <rmw_validate_full_topic_name+0x34>
 800b88c:	4641      	mov	r1, r8
 800b88e:	f10c 0201 	add.w	r2, ip, #1
 800b892:	e7d4      	b.n	800b83e <rmw_validate_full_topic_name+0x92>
 800b894:	28f7      	cmp	r0, #247	; 0xf7
 800b896:	d802      	bhi.n	800b89e <rmw_validate_full_topic_name+0xf2>
 800b898:	2000      	movs	r0, #0
 800b89a:	6028      	str	r0, [r5, #0]
 800b89c:	e79a      	b.n	800b7d4 <rmw_validate_full_topic_name+0x28>
 800b89e:	2307      	movs	r3, #7
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	d09c      	beq.n	800b7e0 <rmw_validate_full_topic_name+0x34>
 800b8a6:	23f6      	movs	r3, #246	; 0xf6
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	6033      	str	r3, [r6, #0]
 800b8ac:	e792      	b.n	800b7d4 <rmw_validate_full_topic_name+0x28>
 800b8ae:	2305      	movs	r3, #5
 800b8b0:	602b      	str	r3, [r5, #0]
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d1dc      	bne.n	800b870 <rmw_validate_full_topic_name+0xc4>
 800b8b6:	e793      	b.n	800b7e0 <rmw_validate_full_topic_name+0x34>
 800b8b8:	0801a755 	.word	0x0801a755

0800b8bc <rmw_uros_set_custom_transport>:
 800b8bc:	b4f0      	push	{r4, r5, r6, r7}
 800b8be:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800b8c2:	b16a      	cbz	r2, 800b8e0 <rmw_uros_set_custom_transport+0x24>
 800b8c4:	b163      	cbz	r3, 800b8e0 <rmw_uros_set_custom_transport+0x24>
 800b8c6:	b15e      	cbz	r6, 800b8e0 <rmw_uros_set_custom_transport+0x24>
 800b8c8:	b157      	cbz	r7, 800b8e0 <rmw_uros_set_custom_transport+0x24>
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	4c06      	ldr	r4, [pc, #24]	; (800b8e8 <rmw_uros_set_custom_transport+0x2c>)
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b8d4:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800b8d8:	7025      	strb	r5, [r4, #0]
 800b8da:	6167      	str	r7, [r4, #20]
 800b8dc:	bcf0      	pop	{r4, r5, r6, r7}
 800b8de:	4770      	bx	lr
 800b8e0:	200b      	movs	r0, #11
 800b8e2:	bcf0      	pop	{r4, r5, r6, r7}
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20008ce8 	.word	0x20008ce8

0800b8ec <rmw_init_options_init>:
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8f2:	ad09      	add	r5, sp, #36	; 0x24
 800b8f4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b8f8:	b130      	cbz	r0, 800b908 <rmw_init_options_init+0x1c>
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	f7ff fca7 	bl	800b250 <rcutils_allocator_is_valid>
 800b902:	b108      	cbz	r0, 800b908 <rmw_init_options_init+0x1c>
 800b904:	68a3      	ldr	r3, [r4, #8]
 800b906:	b123      	cbz	r3, 800b912 <rmw_init_options_init+0x26>
 800b908:	200b      	movs	r0, #11
 800b90a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b90e:	b004      	add	sp, #16
 800b910:	4770      	bx	lr
 800b912:	f04f 0800 	mov.w	r8, #0
 800b916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b918:	f04f 0900 	mov.w	r9, #0
 800b91c:	4e1a      	ldr	r6, [pc, #104]	; (800b988 <rmw_init_options_init+0x9c>)
 800b91e:	e9c4 8900 	strd	r8, r9, [r4]
 800b922:	6837      	ldr	r7, [r6, #0]
 800b924:	f104 0620 	add.w	r6, r4, #32
 800b928:	60a7      	str	r7, [r4, #8]
 800b92a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b92c:	682a      	ldr	r2, [r5, #0]
 800b92e:	4b17      	ldr	r3, [pc, #92]	; (800b98c <rmw_init_options_init+0xa0>)
 800b930:	6032      	str	r2, [r6, #0]
 800b932:	4817      	ldr	r0, [pc, #92]	; (800b990 <rmw_init_options_init+0xa4>)
 800b934:	2203      	movs	r2, #3
 800b936:	4917      	ldr	r1, [pc, #92]	; (800b994 <rmw_init_options_init+0xa8>)
 800b938:	61e3      	str	r3, [r4, #28]
 800b93a:	f000 ff9d 	bl	800c878 <rmw_uxrce_init_init_options_impl_memory>
 800b93e:	4814      	ldr	r0, [pc, #80]	; (800b990 <rmw_init_options_init+0xa4>)
 800b940:	f00a fb52 	bl	8015fe8 <get_memory>
 800b944:	b1e8      	cbz	r0, 800b982 <rmw_init_options_init+0x96>
 800b946:	4a14      	ldr	r2, [pc, #80]	; (800b998 <rmw_init_options_init+0xac>)
 800b948:	68c3      	ldr	r3, [r0, #12]
 800b94a:	6851      	ldr	r1, [r2, #4]
 800b94c:	7810      	ldrb	r0, [r2, #0]
 800b94e:	6363      	str	r3, [r4, #52]	; 0x34
 800b950:	7418      	strb	r0, [r3, #16]
 800b952:	6159      	str	r1, [r3, #20]
 800b954:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800b958:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800b95c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800b960:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800b964:	f006 fd2e 	bl	80123c4 <uxr_nanos>
 800b968:	f00b ffa8 	bl	80178bc <srand>
 800b96c:	f00b ffd4 	bl	8017918 <rand>
 800b970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b972:	6298      	str	r0, [r3, #40]	; 0x28
 800b974:	2800      	cmp	r0, #0
 800b976:	d0f9      	beq.n	800b96c <rmw_init_options_init+0x80>
 800b978:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b97c:	2000      	movs	r0, #0
 800b97e:	b004      	add	sp, #16
 800b980:	4770      	bx	lr
 800b982:	2001      	movs	r0, #1
 800b984:	e7c1      	b.n	800b90a <rmw_init_options_init+0x1e>
 800b986:	bf00      	nop
 800b988:	0801a724 	.word	0x0801a724
 800b98c:	08019f18 	.word	0x08019f18
 800b990:	2000c004 	.word	0x2000c004
 800b994:	2000bc58 	.word	0x2000bc58
 800b998:	20008ce8 	.word	0x20008ce8

0800b99c <rmw_init_options_copy>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	b158      	cbz	r0, 800b9b8 <rmw_init_options_copy+0x1c>
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	b149      	cbz	r1, 800b9b8 <rmw_init_options_copy+0x1c>
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	6880      	ldr	r0, [r0, #8]
 800b9a8:	b120      	cbz	r0, 800b9b4 <rmw_init_options_copy+0x18>
 800b9aa:	4b1b      	ldr	r3, [pc, #108]	; (800ba18 <rmw_init_options_copy+0x7c>)
 800b9ac:	6819      	ldr	r1, [r3, #0]
 800b9ae:	f7f4 fc3f 	bl	8000230 <strcmp>
 800b9b2:	bb60      	cbnz	r0, 800ba0e <rmw_init_options_copy+0x72>
 800b9b4:	68ab      	ldr	r3, [r5, #8]
 800b9b6:	b113      	cbz	r3, 800b9be <rmw_init_options_copy+0x22>
 800b9b8:	260b      	movs	r6, #11
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9be:	4623      	mov	r3, r4
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800b9c6:	681f      	ldr	r7, [r3, #0]
 800b9c8:	685e      	ldr	r6, [r3, #4]
 800b9ca:	6898      	ldr	r0, [r3, #8]
 800b9cc:	68d9      	ldr	r1, [r3, #12]
 800b9ce:	3310      	adds	r3, #16
 800b9d0:	4563      	cmp	r3, ip
 800b9d2:	6017      	str	r7, [r2, #0]
 800b9d4:	6056      	str	r6, [r2, #4]
 800b9d6:	6090      	str	r0, [r2, #8]
 800b9d8:	60d1      	str	r1, [r2, #12]
 800b9da:	f102 0210 	add.w	r2, r2, #16
 800b9de:	d1f2      	bne.n	800b9c6 <rmw_init_options_copy+0x2a>
 800b9e0:	6819      	ldr	r1, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	480d      	ldr	r0, [pc, #52]	; (800ba1c <rmw_init_options_copy+0x80>)
 800b9e6:	6011      	str	r1, [r2, #0]
 800b9e8:	6053      	str	r3, [r2, #4]
 800b9ea:	f00a fafd 	bl	8015fe8 <get_memory>
 800b9ee:	b188      	cbz	r0, 800ba14 <rmw_init_options_copy+0x78>
 800b9f0:	2600      	movs	r6, #0
 800b9f2:	68c3      	ldr	r3, [r0, #12]
 800b9f4:	636b      	str	r3, [r5, #52]	; 0x34
 800b9f6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b9f8:	f103 0410 	add.w	r4, r3, #16
 800b9fc:	3510      	adds	r5, #16
 800b9fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ba06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0e:	260c      	movs	r6, #12
 800ba10:	4630      	mov	r0, r6
 800ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba14:	2601      	movs	r6, #1
 800ba16:	e7d0      	b.n	800b9ba <rmw_init_options_copy+0x1e>
 800ba18:	0801a724 	.word	0x0801a724
 800ba1c:	2000c004 	.word	0x2000c004

0800ba20 <rmw_init_options_fini>:
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d036      	beq.n	800ba92 <rmw_init_options_fini+0x72>
 800ba24:	b530      	push	{r4, r5, lr}
 800ba26:	4604      	mov	r4, r0
 800ba28:	b08f      	sub	sp, #60	; 0x3c
 800ba2a:	3020      	adds	r0, #32
 800ba2c:	f7ff fc10 	bl	800b250 <rcutils_allocator_is_valid>
 800ba30:	b328      	cbz	r0, 800ba7e <rmw_init_options_fini+0x5e>
 800ba32:	68a0      	ldr	r0, [r4, #8]
 800ba34:	b120      	cbz	r0, 800ba40 <rmw_init_options_fini+0x20>
 800ba36:	4b18      	ldr	r3, [pc, #96]	; (800ba98 <rmw_init_options_fini+0x78>)
 800ba38:	6819      	ldr	r1, [r3, #0]
 800ba3a:	f7f4 fbf9 	bl	8000230 <strcmp>
 800ba3e:	bb30      	cbnz	r0, 800ba8e <rmw_init_options_fini+0x6e>
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <rmw_init_options_fini+0x7c>)
 800ba42:	6819      	ldr	r1, [r3, #0]
 800ba44:	b1f9      	cbz	r1, 800ba86 <rmw_init_options_fini+0x66>
 800ba46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ba48:	e001      	b.n	800ba4e <rmw_init_options_fini+0x2e>
 800ba4a:	6889      	ldr	r1, [r1, #8]
 800ba4c:	b1d9      	cbz	r1, 800ba86 <rmw_init_options_fini+0x66>
 800ba4e:	68cb      	ldr	r3, [r1, #12]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d1fa      	bne.n	800ba4a <rmw_init_options_fini+0x2a>
 800ba54:	466d      	mov	r5, sp
 800ba56:	4811      	ldr	r0, [pc, #68]	; (800ba9c <rmw_init_options_fini+0x7c>)
 800ba58:	f00a fad6 	bl	8016008 <put_memory>
 800ba5c:	4668      	mov	r0, sp
 800ba5e:	f7ff fe79 	bl	800b754 <rmw_get_zero_initialized_init_options>
 800ba62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ba74:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	b00f      	add	sp, #60	; 0x3c
 800ba7c:	bd30      	pop	{r4, r5, pc}
 800ba7e:	230b      	movs	r3, #11
 800ba80:	4618      	mov	r0, r3
 800ba82:	b00f      	add	sp, #60	; 0x3c
 800ba84:	bd30      	pop	{r4, r5, pc}
 800ba86:	2301      	movs	r3, #1
 800ba88:	4618      	mov	r0, r3
 800ba8a:	b00f      	add	sp, #60	; 0x3c
 800ba8c:	bd30      	pop	{r4, r5, pc}
 800ba8e:	230c      	movs	r3, #12
 800ba90:	e7f2      	b.n	800ba78 <rmw_init_options_fini+0x58>
 800ba92:	230b      	movs	r3, #11
 800ba94:	4618      	mov	r0, r3
 800ba96:	4770      	bx	lr
 800ba98:	0801a724 	.word	0x0801a724
 800ba9c:	2000c004 	.word	0x2000c004

0800baa0 <rmw_init>:
 800baa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baa4:	b083      	sub	sp, #12
 800baa6:	2800      	cmp	r0, #0
 800baa8:	f000 8087 	beq.w	800bbba <rmw_init+0x11a>
 800baac:	460e      	mov	r6, r1
 800baae:	2900      	cmp	r1, #0
 800bab0:	f000 8083 	beq.w	800bbba <rmw_init+0x11a>
 800bab4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bab6:	4605      	mov	r5, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d07e      	beq.n	800bbba <rmw_init+0x11a>
 800babc:	4b70      	ldr	r3, [pc, #448]	; (800bc80 <rmw_init+0x1e0>)
 800babe:	6880      	ldr	r0, [r0, #8]
 800bac0:	f8d3 8000 	ldr.w	r8, [r3]
 800bac4:	b120      	cbz	r0, 800bad0 <rmw_init+0x30>
 800bac6:	4641      	mov	r1, r8
 800bac8:	f7f4 fbb2 	bl	8000230 <strcmp>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d17e      	bne.n	800bbce <rmw_init+0x12e>
 800bad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bad4:	68e9      	ldr	r1, [r5, #12]
 800bad6:	486b      	ldr	r0, [pc, #428]	; (800bc84 <rmw_init+0x1e4>)
 800bad8:	e9c6 2300 	strd	r2, r3, [r6]
 800badc:	61f1      	str	r1, [r6, #28]
 800bade:	2201      	movs	r2, #1
 800bae0:	4969      	ldr	r1, [pc, #420]	; (800bc88 <rmw_init+0x1e8>)
 800bae2:	f8c6 8008 	str.w	r8, [r6, #8]
 800bae6:	f000 fe6d 	bl	800c7c4 <rmw_uxrce_init_session_memory>
 800baea:	4868      	ldr	r0, [pc, #416]	; (800bc8c <rmw_init+0x1ec>)
 800baec:	2204      	movs	r2, #4
 800baee:	4968      	ldr	r1, [pc, #416]	; (800bc90 <rmw_init+0x1f0>)
 800baf0:	f000 fea4 	bl	800c83c <rmw_uxrce_init_static_input_buffer_memory>
 800baf4:	4863      	ldr	r0, [pc, #396]	; (800bc84 <rmw_init+0x1e4>)
 800baf6:	f00a fa77 	bl	8015fe8 <get_memory>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	d062      	beq.n	800bbc4 <rmw_init+0x124>
 800bafe:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800bb00:	68c4      	ldr	r4, [r0, #12]
 800bb02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb08:	7c39      	ldrb	r1, [r7, #16]
 800bb0a:	9001      	str	r0, [sp, #4]
 800bb0c:	6a38      	ldr	r0, [r7, #32]
 800bb0e:	f104 0910 	add.w	r9, r4, #16
 800bb12:	9000      	str	r0, [sp, #0]
 800bb14:	4648      	mov	r0, r9
 800bb16:	f004 fd4f 	bl	80105b8 <uxr_set_custom_transport_callbacks>
 800bb1a:	2700      	movs	r7, #0
 800bb1c:	f241 5194 	movw	r1, #5524	; 0x1594
 800bb20:	f241 5398 	movw	r3, #5528	; 0x1598
 800bb24:	f241 509c 	movw	r0, #5532	; 0x159c
 800bb28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bb2c:	5067      	str	r7, [r4, r1]
 800bb2e:	50e7      	str	r7, [r4, r3]
 800bb30:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800bb34:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800bb38:	5027      	str	r7, [r4, r0]
 800bb3a:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800bb3e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800bb42:	4854      	ldr	r0, [pc, #336]	; (800bc94 <rmw_init+0x1f4>)
 800bb44:	600f      	str	r7, [r1, #0]
 800bb46:	2201      	movs	r2, #1
 800bb48:	e9c4 87da 	strd	r8, r7, [r4, #872]	; 0x368
 800bb4c:	4952      	ldr	r1, [pc, #328]	; (800bc98 <rmw_init+0x1f8>)
 800bb4e:	64b4      	str	r4, [r6, #72]	; 0x48
 800bb50:	f000 fe1e 	bl	800c790 <rmw_uxrce_init_node_memory>
 800bb54:	2205      	movs	r2, #5
 800bb56:	4951      	ldr	r1, [pc, #324]	; (800bc9c <rmw_init+0x1fc>)
 800bb58:	4851      	ldr	r0, [pc, #324]	; (800bca0 <rmw_init+0x200>)
 800bb5a:	f000 fdff 	bl	800c75c <rmw_uxrce_init_subscription_memory>
 800bb5e:	220a      	movs	r2, #10
 800bb60:	4950      	ldr	r1, [pc, #320]	; (800bca4 <rmw_init+0x204>)
 800bb62:	4851      	ldr	r0, [pc, #324]	; (800bca8 <rmw_init+0x208>)
 800bb64:	f000 fde0 	bl	800c728 <rmw_uxrce_init_publisher_memory>
 800bb68:	2201      	movs	r2, #1
 800bb6a:	4950      	ldr	r1, [pc, #320]	; (800bcac <rmw_init+0x20c>)
 800bb6c:	4850      	ldr	r0, [pc, #320]	; (800bcb0 <rmw_init+0x210>)
 800bb6e:	f000 fda7 	bl	800c6c0 <rmw_uxrce_init_service_memory>
 800bb72:	2201      	movs	r2, #1
 800bb74:	494f      	ldr	r1, [pc, #316]	; (800bcb4 <rmw_init+0x214>)
 800bb76:	4850      	ldr	r0, [pc, #320]	; (800bcb8 <rmw_init+0x218>)
 800bb78:	f000 fdbc 	bl	800c6f4 <rmw_uxrce_init_client_memory>
 800bb7c:	220f      	movs	r2, #15
 800bb7e:	494f      	ldr	r1, [pc, #316]	; (800bcbc <rmw_init+0x21c>)
 800bb80:	484f      	ldr	r0, [pc, #316]	; (800bcc0 <rmw_init+0x220>)
 800bb82:	f000 fe3f 	bl	800c804 <rmw_uxrce_init_topic_memory>
 800bb86:	2203      	movs	r2, #3
 800bb88:	494e      	ldr	r1, [pc, #312]	; (800bcc4 <rmw_init+0x224>)
 800bb8a:	484f      	ldr	r0, [pc, #316]	; (800bcc8 <rmw_init+0x228>)
 800bb8c:	f000 fe74 	bl	800c878 <rmw_uxrce_init_init_options_impl_memory>
 800bb90:	2204      	movs	r2, #4
 800bb92:	494e      	ldr	r1, [pc, #312]	; (800bccc <rmw_init+0x22c>)
 800bb94:	484e      	ldr	r0, [pc, #312]	; (800bcd0 <rmw_init+0x230>)
 800bb96:	f000 fe89 	bl	800c8ac <rmw_uxrce_init_wait_set_memory>
 800bb9a:	2204      	movs	r2, #4
 800bb9c:	494d      	ldr	r1, [pc, #308]	; (800bcd4 <rmw_init+0x234>)
 800bb9e:	484e      	ldr	r0, [pc, #312]	; (800bcd8 <rmw_init+0x238>)
 800bba0:	f000 fea0 	bl	800c8e4 <rmw_uxrce_init_guard_condition_memory>
 800bba4:	463a      	mov	r2, r7
 800bba6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800bba8:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800bbaa:	f000 fd51 	bl	800c650 <rmw_uxrce_transport_init>
 800bbae:	4607      	mov	r7, r0
 800bbb0:	b190      	cbz	r0, 800bbd8 <rmw_init+0x138>
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	b003      	add	sp, #12
 800bbb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbba:	270b      	movs	r7, #11
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	b003      	add	sp, #12
 800bbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbc4:	2701      	movs	r7, #1
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	b003      	add	sp, #12
 800bbca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbce:	270c      	movs	r7, #12
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	b003      	add	sp, #12
 800bbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbd8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bbda:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800bbde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800bbe6:	f005 f9fb 	bl	8010fe0 <uxr_init_session>
 800bbea:	4622      	mov	r2, r4
 800bbec:	4628      	mov	r0, r5
 800bbee:	493b      	ldr	r1, [pc, #236]	; (800bcdc <rmw_init+0x23c>)
 800bbf0:	f005 fa18 	bl	8011024 <uxr_set_topic_callback>
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	4939      	ldr	r1, [pc, #228]	; (800bce0 <rmw_init+0x240>)
 800bbfa:	f005 fa0f 	bl	801101c <uxr_set_status_callback>
 800bbfe:	463a      	mov	r2, r7
 800bc00:	4628      	mov	r0, r5
 800bc02:	4938      	ldr	r1, [pc, #224]	; (800bce4 <rmw_init+0x244>)
 800bc04:	f005 fa12 	bl	801102c <uxr_set_request_callback>
 800bc08:	463a      	mov	r2, r7
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	4936      	ldr	r1, [pc, #216]	; (800bce8 <rmw_init+0x248>)
 800bc0e:	f005 fa11 	bl	8011034 <uxr_set_reply_callback>
 800bc12:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800bc16:	2304      	movs	r3, #4
 800bc18:	0092      	lsls	r2, r2, #2
 800bc1a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f005 fad6 	bl	80111d0 <uxr_create_input_reliable_stream>
 800bc24:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800bc28:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800bc2c:	0092      	lsls	r2, r2, #2
 800bc2e:	2304      	movs	r3, #4
 800bc30:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800bc34:	4628      	mov	r0, r5
 800bc36:	f005 faa1 	bl	801117c <uxr_create_output_reliable_stream>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 800bc42:	f005 fabf 	bl	80111c4 <uxr_create_input_best_effort_stream>
 800bc46:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800bc4a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800bc4e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800bc52:	4628      	mov	r0, r5
 800bc54:	3114      	adds	r1, #20
 800bc56:	f005 fa7f 	bl	8011158 <uxr_create_output_best_effort_stream>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 800bc62:	f005 f9eb 	bl	801103c <uxr_create_session>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d1a3      	bne.n	800bbb2 <rmw_init+0x112>
 800bc6a:	4648      	mov	r0, r9
 800bc6c:	f004 fce4 	bl	8010638 <uxr_close_custom_transport>
 800bc70:	4621      	mov	r1, r4
 800bc72:	4804      	ldr	r0, [pc, #16]	; (800bc84 <rmw_init+0x1e4>)
 800bc74:	f00a f9c8 	bl	8016008 <put_memory>
 800bc78:	64b7      	str	r7, [r6, #72]	; 0x48
 800bc7a:	2701      	movs	r7, #1
 800bc7c:	e799      	b.n	800bbb2 <rmw_init+0x112>
 800bc7e:	bf00      	nop
 800bc80:	0801a724 	.word	0x0801a724
 800bc84:	2000beb0 	.word	0x2000beb0
 800bc88:	2000c0e0 	.word	0x2000c0e0
 800bc8c:	20008d08 	.word	0x20008d08
 800bc90:	20009ae8 	.word	0x20009ae8
 800bc94:	2000bcdc 	.word	0x2000bcdc
 800bc98:	2000bec0 	.word	0x2000bec0
 800bc9c:	20009610 	.word	0x20009610
 800bca0:	2000bf74 	.word	0x2000bf74
 800bca4:	20008d28 	.word	0x20008d28
 800bca8:	20008d18 	.word	0x20008d18
 800bcac:	2000c018 	.word	0x2000c018
 800bcb0:	2000bf64 	.word	0x2000bf64
 800bcb4:	20009a20 	.word	0x20009a20
 800bcb8:	20009598 	.word	0x20009598
 800bcbc:	2000bcec 	.word	0x2000bcec
 800bcc0:	2000bea0 	.word	0x2000bea0
 800bcc4:	2000bc58 	.word	0x2000bc58
 800bcc8:	2000c004 	.word	0x2000c004
 800bccc:	2000bbe8 	.word	0x2000bbe8
 800bcd0:	2000d688 	.word	0x2000d688
 800bcd4:	2000bf84 	.word	0x2000bf84
 800bcd8:	2000be90 	.word	0x2000be90
 800bcdc:	08015e21 	.word	0x08015e21
 800bce0:	08015e19 	.word	0x08015e19
 800bce4:	08015eb5 	.word	0x08015eb5
 800bce8:	08015f51 	.word	0x08015f51

0800bcec <rmw_context_fini>:
 800bcec:	4b17      	ldr	r3, [pc, #92]	; (800bd4c <rmw_context_fini+0x60>)
 800bcee:	b570      	push	{r4, r5, r6, lr}
 800bcf0:	681c      	ldr	r4, [r3, #0]
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	b33c      	cbz	r4, 800bd46 <rmw_context_fini+0x5a>
 800bcf6:	2600      	movs	r6, #0
 800bcf8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bcfa:	68e0      	ldr	r0, [r4, #12]
 800bcfc:	68a4      	ldr	r4, [r4, #8]
 800bcfe:	6902      	ldr	r2, [r0, #16]
 800bd00:	428a      	cmp	r2, r1
 800bd02:	d018      	beq.n	800bd36 <rmw_context_fini+0x4a>
 800bd04:	2c00      	cmp	r4, #0
 800bd06:	d1f8      	bne.n	800bcfa <rmw_context_fini+0xe>
 800bd08:	b189      	cbz	r1, 800bd2e <rmw_context_fini+0x42>
 800bd0a:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800bd0e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800bd12:	789b      	ldrb	r3, [r3, #2]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	bf14      	ite	ne
 800bd18:	210a      	movne	r1, #10
 800bd1a:	2100      	moveq	r1, #0
 800bd1c:	f005 f9d2 	bl	80110c4 <uxr_delete_session_retries>
 800bd20:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800bd22:	f000 fdf9 	bl	800c918 <rmw_uxrce_fini_session_memory>
 800bd26:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800bd28:	3010      	adds	r0, #16
 800bd2a:	f004 fc85 	bl	8010638 <uxr_close_custom_transport>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4630      	mov	r0, r6
 800bd32:	64ab      	str	r3, [r5, #72]	; 0x48
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	3018      	adds	r0, #24
 800bd38:	f000 f89c 	bl	800be74 <rmw_destroy_node>
 800bd3c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800bd3e:	4606      	mov	r6, r0
 800bd40:	2c00      	cmp	r4, #0
 800bd42:	d1da      	bne.n	800bcfa <rmw_context_fini+0xe>
 800bd44:	e7e0      	b.n	800bd08 <rmw_context_fini+0x1c>
 800bd46:	4626      	mov	r6, r4
 800bd48:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800bd4a:	e7dd      	b.n	800bd08 <rmw_context_fini+0x1c>
 800bd4c:	2000bcdc 	.word	0x2000bcdc

0800bd50 <create_node>:
 800bd50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd54:	b083      	sub	sp, #12
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d05f      	beq.n	800be1a <create_node+0xca>
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	4835      	ldr	r0, [pc, #212]	; (800be34 <create_node+0xe4>)
 800bd5e:	460f      	mov	r7, r1
 800bd60:	4690      	mov	r8, r2
 800bd62:	461d      	mov	r5, r3
 800bd64:	f00a f940 	bl	8015fe8 <get_memory>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d056      	beq.n	800be1a <create_node+0xca>
 800bd6c:	68c4      	ldr	r4, [r0, #12]
 800bd6e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800bd70:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800bd74:	6123      	str	r3, [r4, #16]
 800bd76:	f00a f99f 	bl	80160b8 <rmw_get_implementation_identifier>
 800bd7a:	f8c4 9020 	str.w	r9, [r4, #32]
 800bd7e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7f4 fa5e 	bl	8000244 <strlen>
 800bd88:	1c42      	adds	r2, r0, #1
 800bd8a:	2a3c      	cmp	r2, #60	; 0x3c
 800bd8c:	f104 0518 	add.w	r5, r4, #24
 800bd90:	d840      	bhi.n	800be14 <create_node+0xc4>
 800bd92:	4648      	mov	r0, r9
 800bd94:	4631      	mov	r1, r6
 800bd96:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800bd9a:	f00b fc93 	bl	80176c4 <memcpy>
 800bd9e:	4638      	mov	r0, r7
 800bda0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800bda4:	f7f4 fa4e 	bl	8000244 <strlen>
 800bda8:	1c42      	adds	r2, r0, #1
 800bdaa:	2a3c      	cmp	r2, #60	; 0x3c
 800bdac:	d832      	bhi.n	800be14 <create_node+0xc4>
 800bdae:	4639      	mov	r1, r7
 800bdb0:	4648      	mov	r0, r9
 800bdb2:	f00b fc87 	bl	80176c4 <memcpy>
 800bdb6:	f241 5394 	movw	r3, #5524	; 0x1594
 800bdba:	2101      	movs	r1, #1
 800bdbc:	6922      	ldr	r2, [r4, #16]
 800bdbe:	5ad0      	ldrh	r0, [r2, r3]
 800bdc0:	eb00 0c01 	add.w	ip, r0, r1
 800bdc4:	f822 c003 	strh.w	ip, [r2, r3]
 800bdc8:	f004 fc3a 	bl	8010640 <uxr_object_id>
 800bdcc:	6160      	str	r0, [r4, #20]
 800bdce:	783b      	ldrb	r3, [r7, #0]
 800bdd0:	2b2f      	cmp	r3, #47	; 0x2f
 800bdd2:	d127      	bne.n	800be24 <create_node+0xd4>
 800bdd4:	787b      	ldrb	r3, [r7, #1]
 800bdd6:	bb2b      	cbnz	r3, 800be24 <create_node+0xd4>
 800bdd8:	4633      	mov	r3, r6
 800bdda:	213c      	movs	r1, #60	; 0x3c
 800bddc:	4a16      	ldr	r2, [pc, #88]	; (800be38 <create_node+0xe8>)
 800bdde:	4817      	ldr	r0, [pc, #92]	; (800be3c <create_node+0xec>)
 800bde0:	f00b fdf2 	bl	80179c8 <sniprintf>
 800bde4:	2106      	movs	r1, #6
 800bde6:	6920      	ldr	r0, [r4, #16]
 800bde8:	4b14      	ldr	r3, [pc, #80]	; (800be3c <create_node+0xec>)
 800bdea:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800bdee:	e9cd 3100 	strd	r3, r1, [sp]
 800bdf2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bdf6:	6811      	ldr	r1, [r2, #0]
 800bdf8:	fa1f f388 	uxth.w	r3, r8
 800bdfc:	6962      	ldr	r2, [r4, #20]
 800bdfe:	f004 f997 	bl	8010130 <uxr_buffer_create_participant_bin>
 800be02:	4602      	mov	r2, r0
 800be04:	6920      	ldr	r0, [r4, #16]
 800be06:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800be0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800be0e:	f000 fef3 	bl	800cbf8 <run_xrce_session>
 800be12:	b918      	cbnz	r0, 800be1c <create_node+0xcc>
 800be14:	4628      	mov	r0, r5
 800be16:	f000 fd85 	bl	800c924 <rmw_uxrce_fini_node_memory>
 800be1a:	2500      	movs	r5, #0
 800be1c:	4628      	mov	r0, r5
 800be1e:	b003      	add	sp, #12
 800be20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be24:	463b      	mov	r3, r7
 800be26:	213c      	movs	r1, #60	; 0x3c
 800be28:	4a05      	ldr	r2, [pc, #20]	; (800be40 <create_node+0xf0>)
 800be2a:	9600      	str	r6, [sp, #0]
 800be2c:	4803      	ldr	r0, [pc, #12]	; (800be3c <create_node+0xec>)
 800be2e:	f00b fdcb 	bl	80179c8 <sniprintf>
 800be32:	e7d7      	b.n	800bde4 <create_node+0x94>
 800be34:	2000bcdc 	.word	0x2000bcdc
 800be38:	08019f58 	.word	0x08019f58
 800be3c:	20006740 	.word	0x20006740
 800be40:	08019f1c 	.word	0x08019f1c

0800be44 <rmw_create_node>:
 800be44:	b199      	cbz	r1, 800be6e <rmw_create_node+0x2a>
 800be46:	b430      	push	{r4, r5}
 800be48:	4614      	mov	r4, r2
 800be4a:	461a      	mov	r2, r3
 800be4c:	780b      	ldrb	r3, [r1, #0]
 800be4e:	4605      	mov	r5, r0
 800be50:	4608      	mov	r0, r1
 800be52:	b14b      	cbz	r3, 800be68 <rmw_create_node+0x24>
 800be54:	b144      	cbz	r4, 800be68 <rmw_create_node+0x24>
 800be56:	7823      	ldrb	r3, [r4, #0]
 800be58:	b133      	cbz	r3, 800be68 <rmw_create_node+0x24>
 800be5a:	b902      	cbnz	r2, 800be5e <rmw_create_node+0x1a>
 800be5c:	69ea      	ldr	r2, [r5, #28]
 800be5e:	462b      	mov	r3, r5
 800be60:	4621      	mov	r1, r4
 800be62:	bc30      	pop	{r4, r5}
 800be64:	f7ff bf74 	b.w	800bd50 <create_node>
 800be68:	2000      	movs	r0, #0
 800be6a:	bc30      	pop	{r4, r5}
 800be6c:	4770      	bx	lr
 800be6e:	2000      	movs	r0, #0
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop

0800be74 <rmw_destroy_node>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	2800      	cmp	r0, #0
 800be78:	d067      	beq.n	800bf4a <rmw_destroy_node+0xd6>
 800be7a:	4607      	mov	r7, r0
 800be7c:	6800      	ldr	r0, [r0, #0]
 800be7e:	b128      	cbz	r0, 800be8c <rmw_destroy_node+0x18>
 800be80:	4b34      	ldr	r3, [pc, #208]	; (800bf54 <rmw_destroy_node+0xe0>)
 800be82:	6819      	ldr	r1, [r3, #0]
 800be84:	f7f4 f9d4 	bl	8000230 <strcmp>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d15e      	bne.n	800bf4a <rmw_destroy_node+0xd6>
 800be8c:	687c      	ldr	r4, [r7, #4]
 800be8e:	2c00      	cmp	r4, #0
 800be90:	d05b      	beq.n	800bf4a <rmw_destroy_node+0xd6>
 800be92:	4b31      	ldr	r3, [pc, #196]	; (800bf58 <rmw_destroy_node+0xe4>)
 800be94:	681d      	ldr	r5, [r3, #0]
 800be96:	2d00      	cmp	r5, #0
 800be98:	d05a      	beq.n	800bf50 <rmw_destroy_node+0xdc>
 800be9a:	2600      	movs	r6, #0
 800be9c:	68e9      	ldr	r1, [r5, #12]
 800be9e:	68ad      	ldr	r5, [r5, #8]
 800bea0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800bea4:	429c      	cmp	r4, r3
 800bea6:	d048      	beq.n	800bf3a <rmw_destroy_node+0xc6>
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	d1f7      	bne.n	800be9c <rmw_destroy_node+0x28>
 800beac:	4b2b      	ldr	r3, [pc, #172]	; (800bf5c <rmw_destroy_node+0xe8>)
 800beae:	681d      	ldr	r5, [r3, #0]
 800beb0:	b15d      	cbz	r5, 800beca <rmw_destroy_node+0x56>
 800beb2:	68e9      	ldr	r1, [r5, #12]
 800beb4:	68ad      	ldr	r5, [r5, #8]
 800beb6:	6a0b      	ldr	r3, [r1, #32]
 800beb8:	429c      	cmp	r4, r3
 800beba:	d1f9      	bne.n	800beb0 <rmw_destroy_node+0x3c>
 800bebc:	4638      	mov	r0, r7
 800bebe:	317c      	adds	r1, #124	; 0x7c
 800bec0:	f000 fb14 	bl	800c4ec <rmw_destroy_subscription>
 800bec4:	4606      	mov	r6, r0
 800bec6:	2d00      	cmp	r5, #0
 800bec8:	d1f3      	bne.n	800beb2 <rmw_destroy_node+0x3e>
 800beca:	4b25      	ldr	r3, [pc, #148]	; (800bf60 <rmw_destroy_node+0xec>)
 800becc:	681d      	ldr	r5, [r3, #0]
 800bece:	b15d      	cbz	r5, 800bee8 <rmw_destroy_node+0x74>
 800bed0:	68e9      	ldr	r1, [r5, #12]
 800bed2:	68ad      	ldr	r5, [r5, #8]
 800bed4:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800bed6:	429c      	cmp	r4, r3
 800bed8:	d1f9      	bne.n	800bece <rmw_destroy_node+0x5a>
 800beda:	4638      	mov	r0, r7
 800bedc:	317c      	adds	r1, #124	; 0x7c
 800bede:	f000 f9db 	bl	800c298 <rmw_destroy_service>
 800bee2:	4606      	mov	r6, r0
 800bee4:	2d00      	cmp	r5, #0
 800bee6:	d1f3      	bne.n	800bed0 <rmw_destroy_node+0x5c>
 800bee8:	4b1e      	ldr	r3, [pc, #120]	; (800bf64 <rmw_destroy_node+0xf0>)
 800beea:	681d      	ldr	r5, [r3, #0]
 800beec:	b15d      	cbz	r5, 800bf06 <rmw_destroy_node+0x92>
 800beee:	68e9      	ldr	r1, [r5, #12]
 800bef0:	68ad      	ldr	r5, [r5, #8]
 800bef2:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d1f9      	bne.n	800beec <rmw_destroy_node+0x78>
 800bef8:	4638      	mov	r0, r7
 800befa:	317c      	adds	r1, #124	; 0x7c
 800befc:	f00a f898 	bl	8016030 <rmw_destroy_client>
 800bf00:	4606      	mov	r6, r0
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	d1f3      	bne.n	800beee <rmw_destroy_node+0x7a>
 800bf06:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800bf0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800bf0e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bf12:	6819      	ldr	r1, [r3, #0]
 800bf14:	f004 f8be 	bl	8010094 <uxr_buffer_delete_entity>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6920      	ldr	r0, [r4, #16]
 800bf1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800bf20:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800bf24:	f000 fe68 	bl	800cbf8 <run_xrce_session>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	bf08      	it	eq
 800bf2e:	2602      	moveq	r6, #2
 800bf30:	4638      	mov	r0, r7
 800bf32:	f000 fcf7 	bl	800c924 <rmw_uxrce_fini_node_memory>
 800bf36:	4630      	mov	r0, r6
 800bf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	3184      	adds	r1, #132	; 0x84
 800bf3e:	f000 f95b 	bl	800c1f8 <rmw_destroy_publisher>
 800bf42:	4606      	mov	r6, r0
 800bf44:	2d00      	cmp	r5, #0
 800bf46:	d1a9      	bne.n	800be9c <rmw_destroy_node+0x28>
 800bf48:	e7b0      	b.n	800beac <rmw_destroy_node+0x38>
 800bf4a:	2601      	movs	r6, #1
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf50:	462e      	mov	r6, r5
 800bf52:	e7ab      	b.n	800beac <rmw_destroy_node+0x38>
 800bf54:	0801a724 	.word	0x0801a724
 800bf58:	20008d18 	.word	0x20008d18
 800bf5c:	2000bf74 	.word	0x2000bf74
 800bf60:	2000bf64 	.word	0x2000bf64
 800bf64:	20009598 	.word	0x20009598

0800bf68 <rmw_node_get_graph_guard_condition>:
 800bf68:	6843      	ldr	r3, [r0, #4]
 800bf6a:	6918      	ldr	r0, [r3, #16]
 800bf6c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop

0800bf74 <flush_session>:
 800bf74:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800bf76:	f005 ba37 	b.w	80113e8 <uxr_run_session_until_confirm_delivery>
 800bf7a:	bf00      	nop

0800bf7c <rmw_publish>:
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d053      	beq.n	800c028 <rmw_publish+0xac>
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	460d      	mov	r5, r1
 800bf84:	b08e      	sub	sp, #56	; 0x38
 800bf86:	2900      	cmp	r1, #0
 800bf88:	d04b      	beq.n	800c022 <rmw_publish+0xa6>
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	6800      	ldr	r0, [r0, #0]
 800bf8e:	f000 feb7 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d045      	beq.n	800c022 <rmw_publish+0xa6>
 800bf96:	6866      	ldr	r6, [r4, #4]
 800bf98:	2e00      	cmp	r6, #0
 800bf9a:	d042      	beq.n	800c022 <rmw_publish+0xa6>
 800bf9c:	69b4      	ldr	r4, [r6, #24]
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	6923      	ldr	r3, [r4, #16]
 800bfa2:	4798      	blx	r3
 800bfa4:	69f3      	ldr	r3, [r6, #28]
 800bfa6:	9005      	str	r0, [sp, #20]
 800bfa8:	b113      	cbz	r3, 800bfb0 <rmw_publish+0x34>
 800bfaa:	a805      	add	r0, sp, #20
 800bfac:	4798      	blx	r3
 800bfae:	9805      	ldr	r0, [sp, #20]
 800bfb0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	9000      	str	r0, [sp, #0]
 800bfb8:	6972      	ldr	r2, [r6, #20]
 800bfba:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800bfbe:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800bfc0:	ab06      	add	r3, sp, #24
 800bfc2:	f006 faa1 	bl	8012508 <uxr_prepare_output_stream>
 800bfc6:	b1d8      	cbz	r0, 800c000 <rmw_publish+0x84>
 800bfc8:	68a3      	ldr	r3, [r4, #8]
 800bfca:	4628      	mov	r0, r5
 800bfcc:	a906      	add	r1, sp, #24
 800bfce:	4798      	blx	r3
 800bfd0:	6a33      	ldr	r3, [r6, #32]
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	b10b      	cbz	r3, 800bfda <rmw_publish+0x5e>
 800bfd6:	a806      	add	r0, sp, #24
 800bfd8:	4798      	blx	r3
 800bfda:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800bfe4:	d022      	beq.n	800c02c <rmw_publish+0xb0>
 800bfe6:	6918      	ldr	r0, [r3, #16]
 800bfe8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800bfea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800bfee:	f005 f9fb 	bl	80113e8 <uxr_run_session_until_confirm_delivery>
 800bff2:	4004      	ands	r4, r0
 800bff4:	b2e4      	uxtb	r4, r4
 800bff6:	f084 0001 	eor.w	r0, r4, #1
 800bffa:	b2c0      	uxtb	r0, r0
 800bffc:	b00e      	add	sp, #56	; 0x38
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
 800c004:	4a0c      	ldr	r2, [pc, #48]	; (800c038 <rmw_publish+0xbc>)
 800c006:	6908      	ldr	r0, [r1, #16]
 800c008:	9b05      	ldr	r3, [sp, #20]
 800c00a:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	6972      	ldr	r2, [r6, #20]
 800c012:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800c014:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c018:	ab06      	add	r3, sp, #24
 800c01a:	f006 faa5 	bl	8012568 <uxr_prepare_output_stream_fragmented>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d1d2      	bne.n	800bfc8 <rmw_publish+0x4c>
 800c022:	2001      	movs	r0, #1
 800c024:	b00e      	add	sp, #56	; 0x38
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	2001      	movs	r0, #1
 800c02a:	4770      	bx	lr
 800c02c:	6918      	ldr	r0, [r3, #16]
 800c02e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c032:	f005 f947 	bl	80112c4 <uxr_flash_output_streams>
 800c036:	e7de      	b.n	800bff6 <rmw_publish+0x7a>
 800c038:	0800bf75 	.word	0x0800bf75

0800c03c <rmw_create_publisher>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	b087      	sub	sp, #28
 800c042:	2800      	cmp	r0, #0
 800c044:	f000 80ca 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c048:	460e      	mov	r6, r1
 800c04a:	2900      	cmp	r1, #0
 800c04c:	f000 80c6 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c050:	4604      	mov	r4, r0
 800c052:	6800      	ldr	r0, [r0, #0]
 800c054:	4615      	mov	r5, r2
 800c056:	4698      	mov	r8, r3
 800c058:	f000 fe52 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	f000 80bd 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c062:	2d00      	cmp	r5, #0
 800c064:	f000 80ba 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c068:	782b      	ldrb	r3, [r5, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 80b6 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c070:	f1b8 0f00 	cmp.w	r8, #0
 800c074:	f000 80b2 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c078:	485b      	ldr	r0, [pc, #364]	; (800c1e8 <rmw_create_publisher+0x1ac>)
 800c07a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c07e:	f009 ffb3 	bl	8015fe8 <get_memory>
 800c082:	2800      	cmp	r0, #0
 800c084:	f000 80aa 	beq.w	800c1dc <rmw_create_publisher+0x1a0>
 800c088:	2300      	movs	r3, #0
 800c08a:	68c4      	ldr	r4, [r0, #12]
 800c08c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c090:	f00a f812 	bl	80160b8 <rmw_get_implementation_identifier>
 800c094:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800c098:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800c09c:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	f7f4 f8cf 	bl	8000244 <strlen>
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	283c      	cmp	r0, #60	; 0x3c
 800c0aa:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800c0ae:	f200 8092 	bhi.w	800c1d6 <rmw_create_publisher+0x19a>
 800c0b2:	462b      	mov	r3, r5
 800c0b4:	213c      	movs	r1, #60	; 0x3c
 800c0b6:	4a4d      	ldr	r2, [pc, #308]	; (800c1ec <rmw_create_publisher+0x1b0>)
 800c0b8:	4650      	mov	r0, sl
 800c0ba:	f00b fc85 	bl	80179c8 <sniprintf>
 800c0be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800c0c8:	2250      	movs	r2, #80	; 0x50
 800c0ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c0ce:	f00b faf9 	bl	80176c4 <memcpy>
 800c0d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	2b02      	cmp	r3, #2
 800c0da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0de:	4944      	ldr	r1, [pc, #272]	; (800c1f0 <rmw_create_publisher+0x1b4>)
 800c0e0:	bf0c      	ite	eq
 800c0e2:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800c0e6:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800c0ea:	67a3      	str	r3, [r4, #120]	; 0x78
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c0f2:	f000 fe13 	bl	800cd1c <get_message_typesupport_handle>
 800c0f6:	2800      	cmp	r0, #0
 800c0f8:	d06d      	beq.n	800c1d6 <rmw_create_publisher+0x19a>
 800c0fa:	6842      	ldr	r2, [r0, #4]
 800c0fc:	61a2      	str	r2, [r4, #24]
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	d069      	beq.n	800c1d6 <rmw_create_publisher+0x19a>
 800c102:	4629      	mov	r1, r5
 800c104:	4643      	mov	r3, r8
 800c106:	4648      	mov	r0, r9
 800c108:	f009 ffdc 	bl	80160c4 <create_topic>
 800c10c:	6260      	str	r0, [r4, #36]	; 0x24
 800c10e:	2800      	cmp	r0, #0
 800c110:	d061      	beq.n	800c1d6 <rmw_create_publisher+0x19a>
 800c112:	f241 5398 	movw	r3, #5528	; 0x1598
 800c116:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c11a:	2103      	movs	r1, #3
 800c11c:	5ad0      	ldrh	r0, [r2, r3]
 800c11e:	2606      	movs	r6, #6
 800c120:	1c45      	adds	r5, r0, #1
 800c122:	52d5      	strh	r5, [r2, r3]
 800c124:	f004 fa8c 	bl	8010640 <uxr_object_id>
 800c128:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c12c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c130:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800c134:	6912      	ldr	r2, [r2, #16]
 800c136:	6120      	str	r0, [r4, #16]
 800c138:	9600      	str	r6, [sp, #0]
 800c13a:	6819      	ldr	r1, [r3, #0]
 800c13c:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800c140:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c144:	6922      	ldr	r2, [r4, #16]
 800c146:	f004 f861 	bl	801020c <uxr_buffer_create_publisher_bin>
 800c14a:	4602      	mov	r2, r0
 800c14c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c150:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c154:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c158:	f000 fd4e 	bl	800cbf8 <run_xrce_session>
 800c15c:	b3b8      	cbz	r0, 800c1ce <rmw_create_publisher+0x192>
 800c15e:	f241 539a 	movw	r3, #5530	; 0x159a
 800c162:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c166:	2105      	movs	r1, #5
 800c168:	5ad0      	ldrh	r0, [r2, r3]
 800c16a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800c16e:	1c45      	adds	r5, r0, #1
 800c170:	52d5      	strh	r5, [r2, r3]
 800c172:	f004 fa65 	bl	8010640 <uxr_object_id>
 800c176:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800c17a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c17e:	f10d 0a10 	add.w	sl, sp, #16
 800c182:	6915      	ldr	r5, [r2, #16]
 800c184:	4641      	mov	r1, r8
 800c186:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800c18a:	6160      	str	r0, [r4, #20]
 800c18c:	4650      	mov	r0, sl
 800c18e:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800c192:	f000 fd4d 	bl	800cc30 <convert_qos_profile>
 800c196:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c19a:	9603      	str	r6, [sp, #12]
 800c19c:	9001      	str	r0, [sp, #4]
 800c19e:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c1a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c1a6:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c1b0:	f8d8 1000 	ldr.w	r1, [r8]
 800c1b4:	4628      	mov	r0, r5
 800c1b6:	f004 f889 	bl	80102cc <uxr_buffer_create_datawriter_bin>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c1c0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c1c4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c1c8:	f000 fd16 	bl	800cbf8 <run_xrce_session>
 800c1cc:	b938      	cbnz	r0, 800c1de <rmw_create_publisher+0x1a2>
 800c1ce:	4621      	mov	r1, r4
 800c1d0:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <rmw_create_publisher+0x1ac>)
 800c1d2:	f009 ff19 	bl	8016008 <put_memory>
 800c1d6:	4638      	mov	r0, r7
 800c1d8:	f000 fbbc 	bl	800c954 <rmw_uxrce_fini_publisher_memory>
 800c1dc:	2700      	movs	r7, #0
 800c1de:	4638      	mov	r0, r7
 800c1e0:	b007      	add	sp, #28
 800c1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e6:	bf00      	nop
 800c1e8:	20008d18 	.word	0x20008d18
 800c1ec:	08019f58 	.word	0x08019f58
 800c1f0:	08019f24 	.word	0x08019f24

0800c1f4 <rmw_publisher_get_actual_qos>:
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	4770      	bx	lr

0800c1f8 <rmw_destroy_publisher>:
 800c1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fa:	b128      	cbz	r0, 800c208 <rmw_destroy_publisher+0x10>
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	6800      	ldr	r0, [r0, #0]
 800c200:	460d      	mov	r5, r1
 800c202:	f000 fd7d 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c206:	b910      	cbnz	r0, 800c20e <rmw_destroy_publisher+0x16>
 800c208:	2401      	movs	r4, #1
 800c20a:	4620      	mov	r0, r4
 800c20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20e:	6863      	ldr	r3, [r4, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d0f9      	beq.n	800c208 <rmw_destroy_publisher+0x10>
 800c214:	2d00      	cmp	r5, #0
 800c216:	d0f7      	beq.n	800c208 <rmw_destroy_publisher+0x10>
 800c218:	6828      	ldr	r0, [r5, #0]
 800c21a:	f000 fd71 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d0f2      	beq.n	800c208 <rmw_destroy_publisher+0x10>
 800c222:	686c      	ldr	r4, [r5, #4]
 800c224:	2c00      	cmp	r4, #0
 800c226:	d0ef      	beq.n	800c208 <rmw_destroy_publisher+0x10>
 800c228:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c22a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800c22e:	f009 ff97 	bl	8016160 <destroy_topic>
 800c232:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c236:	6962      	ldr	r2, [r4, #20]
 800c238:	6918      	ldr	r0, [r3, #16]
 800c23a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c23e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c242:	6819      	ldr	r1, [r3, #0]
 800c244:	f003 ff26 	bl	8010094 <uxr_buffer_delete_entity>
 800c248:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c24c:	6922      	ldr	r2, [r4, #16]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	4604      	mov	r4, r0
 800c252:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800c256:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c25a:	6809      	ldr	r1, [r1, #0]
 800c25c:	f003 ff1a 	bl	8010094 <uxr_buffer_delete_entity>
 800c260:	4606      	mov	r6, r0
 800c262:	6938      	ldr	r0, [r7, #16]
 800c264:	4622      	mov	r2, r4
 800c266:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c26a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c26e:	f000 fcc3 	bl	800cbf8 <run_xrce_session>
 800c272:	4604      	mov	r4, r0
 800c274:	6938      	ldr	r0, [r7, #16]
 800c276:	4632      	mov	r2, r6
 800c278:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c27c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c280:	f000 fcba 	bl	800cbf8 <run_xrce_session>
 800c284:	b12c      	cbz	r4, 800c292 <rmw_destroy_publisher+0x9a>
 800c286:	b120      	cbz	r0, 800c292 <rmw_destroy_publisher+0x9a>
 800c288:	2400      	movs	r4, #0
 800c28a:	4628      	mov	r0, r5
 800c28c:	f000 fb62 	bl	800c954 <rmw_uxrce_fini_publisher_memory>
 800c290:	e7bb      	b.n	800c20a <rmw_destroy_publisher+0x12>
 800c292:	2402      	movs	r4, #2
 800c294:	e7f9      	b.n	800c28a <rmw_destroy_publisher+0x92>
 800c296:	bf00      	nop

0800c298 <rmw_destroy_service>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	b128      	cbz	r0, 800c2a8 <rmw_destroy_service+0x10>
 800c29c:	4604      	mov	r4, r0
 800c29e:	6800      	ldr	r0, [r0, #0]
 800c2a0:	460d      	mov	r5, r1
 800c2a2:	f000 fd2d 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c2a6:	b910      	cbnz	r0, 800c2ae <rmw_destroy_service+0x16>
 800c2a8:	2401      	movs	r4, #1
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	bd70      	pop	{r4, r5, r6, pc}
 800c2ae:	6863      	ldr	r3, [r4, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d0f9      	beq.n	800c2a8 <rmw_destroy_service+0x10>
 800c2b4:	2d00      	cmp	r5, #0
 800c2b6:	d0f7      	beq.n	800c2a8 <rmw_destroy_service+0x10>
 800c2b8:	6828      	ldr	r0, [r5, #0]
 800c2ba:	f000 fd21 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d0f2      	beq.n	800c2a8 <rmw_destroy_service+0x10>
 800c2c2:	686e      	ldr	r6, [r5, #4]
 800c2c4:	2e00      	cmp	r6, #0
 800c2c6:	d0ef      	beq.n	800c2a8 <rmw_destroy_service+0x10>
 800c2c8:	6864      	ldr	r4, [r4, #4]
 800c2ca:	6932      	ldr	r2, [r6, #16]
 800c2cc:	6920      	ldr	r0, [r4, #16]
 800c2ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c2d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c2d6:	6819      	ldr	r1, [r3, #0]
 800c2d8:	f004 fa1a 	bl	8010710 <uxr_buffer_cancel_data>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	6920      	ldr	r0, [r4, #16]
 800c2e0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c2e4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c2e8:	f000 fc86 	bl	800cbf8 <run_xrce_session>
 800c2ec:	6920      	ldr	r0, [r4, #16]
 800c2ee:	6932      	ldr	r2, [r6, #16]
 800c2f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c2f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c2f8:	6819      	ldr	r1, [r3, #0]
 800c2fa:	f003 fecb 	bl	8010094 <uxr_buffer_delete_entity>
 800c2fe:	4602      	mov	r2, r0
 800c300:	6920      	ldr	r0, [r4, #16]
 800c302:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c306:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c30a:	f000 fc75 	bl	800cbf8 <run_xrce_session>
 800c30e:	4603      	mov	r3, r0
 800c310:	4628      	mov	r0, r5
 800c312:	2b00      	cmp	r3, #0
 800c314:	bf14      	ite	ne
 800c316:	2400      	movne	r4, #0
 800c318:	2402      	moveq	r4, #2
 800c31a:	f000 fb47 	bl	800c9ac <rmw_uxrce_fini_service_memory>
 800c31e:	e7c4      	b.n	800c2aa <rmw_destroy_service+0x12>

0800c320 <rmw_create_subscription>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	b08d      	sub	sp, #52	; 0x34
 800c326:	2800      	cmp	r0, #0
 800c328:	f000 80d3 	beq.w	800c4d2 <rmw_create_subscription+0x1b2>
 800c32c:	460e      	mov	r6, r1
 800c32e:	2900      	cmp	r1, #0
 800c330:	f000 80cf 	beq.w	800c4d2 <rmw_create_subscription+0x1b2>
 800c334:	4604      	mov	r4, r0
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	4615      	mov	r5, r2
 800c33a:	4698      	mov	r8, r3
 800c33c:	f000 fce0 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c340:	2800      	cmp	r0, #0
 800c342:	f000 80c6 	beq.w	800c4d2 <rmw_create_subscription+0x1b2>
 800c346:	2d00      	cmp	r5, #0
 800c348:	f000 80c3 	beq.w	800c4d2 <rmw_create_subscription+0x1b2>
 800c34c:	782b      	ldrb	r3, [r5, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 80bf 	beq.w	800c4d2 <rmw_create_subscription+0x1b2>
 800c354:	f1b8 0f00 	cmp.w	r8, #0
 800c358:	f000 80bb 	beq.w	800c4d2 <rmw_create_subscription+0x1b2>
 800c35c:	485f      	ldr	r0, [pc, #380]	; (800c4dc <rmw_create_subscription+0x1bc>)
 800c35e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c362:	f009 fe41 	bl	8015fe8 <get_memory>
 800c366:	4604      	mov	r4, r0
 800c368:	2800      	cmp	r0, #0
 800c36a:	f000 80b3 	beq.w	800c4d4 <rmw_create_subscription+0x1b4>
 800c36e:	2300      	movs	r3, #0
 800c370:	68c7      	ldr	r7, [r0, #12]
 800c372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c376:	f009 fe9f 	bl	80160b8 <rmw_get_implementation_identifier>
 800c37a:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800c37e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800c380:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800c384:	4628      	mov	r0, r5
 800c386:	f7f3 ff5d 	bl	8000244 <strlen>
 800c38a:	3001      	adds	r0, #1
 800c38c:	283c      	cmp	r0, #60	; 0x3c
 800c38e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800c392:	f200 809b 	bhi.w	800c4cc <rmw_create_subscription+0x1ac>
 800c396:	462b      	mov	r3, r5
 800c398:	213c      	movs	r1, #60	; 0x3c
 800c39a:	4a51      	ldr	r2, [pc, #324]	; (800c4e0 <rmw_create_subscription+0x1c0>)
 800c39c:	4650      	mov	r0, sl
 800c39e:	f00b fb13 	bl	80179c8 <sniprintf>
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	2250      	movs	r2, #80	; 0x50
 800c3a6:	f8c7 9020 	str.w	r9, [r7, #32]
 800c3aa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c3ae:	f00b f989 	bl	80176c4 <memcpy>
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	494b      	ldr	r1, [pc, #300]	; (800c4e4 <rmw_create_subscription+0x1c4>)
 800c3b6:	f000 fcb1 	bl	800cd1c <get_message_typesupport_handle>
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f000 8086 	beq.w	800c4cc <rmw_create_subscription+0x1ac>
 800c3c0:	6842      	ldr	r2, [r0, #4]
 800c3c2:	61ba      	str	r2, [r7, #24]
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	f000 8081 	beq.w	800c4cc <rmw_create_subscription+0x1ac>
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	4643      	mov	r3, r8
 800c3ce:	4648      	mov	r0, r9
 800c3d0:	f009 fe78 	bl	80160c4 <create_topic>
 800c3d4:	61f8      	str	r0, [r7, #28]
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d078      	beq.n	800c4cc <rmw_create_subscription+0x1ac>
 800c3da:	f241 539c 	movw	r3, #5532	; 0x159c
 800c3de:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c3e2:	2104      	movs	r1, #4
 800c3e4:	5ad0      	ldrh	r0, [r2, r3]
 800c3e6:	2506      	movs	r5, #6
 800c3e8:	1c46      	adds	r6, r0, #1
 800c3ea:	52d6      	strh	r6, [r2, r3]
 800c3ec:	f004 f928 	bl	8010640 <uxr_object_id>
 800c3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3f4:	6138      	str	r0, [r7, #16]
 800c3f6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800c3fa:	9500      	str	r5, [sp, #0]
 800c3fc:	6811      	ldr	r1, [r2, #0]
 800c3fe:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c408:	f003 ff30 	bl	801026c <uxr_buffer_create_subscriber_bin>
 800c40c:	4602      	mov	r2, r0
 800c40e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c412:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c416:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c41a:	f000 fbed 	bl	800cbf8 <run_xrce_session>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d050      	beq.n	800c4c4 <rmw_create_subscription+0x1a4>
 800c422:	f241 539e 	movw	r3, #5534	; 0x159e
 800c426:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c42a:	4629      	mov	r1, r5
 800c42c:	5ad0      	ldrh	r0, [r2, r3]
 800c42e:	ae08      	add	r6, sp, #32
 800c430:	f100 0c01 	add.w	ip, r0, #1
 800c434:	f822 c003 	strh.w	ip, [r2, r3]
 800c438:	f004 f902 	bl	8010640 <uxr_object_id>
 800c43c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	4641      	mov	r1, r8
 800c444:	6178      	str	r0, [r7, #20]
 800c446:	4630      	mov	r0, r6
 800c448:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	f000 fbef 	bl	800cc30 <convert_qos_profile>
 800c452:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c456:	9b05      	ldr	r3, [sp, #20]
 800c458:	9001      	str	r0, [sp, #4]
 800c45a:	9503      	str	r5, [sp, #12]
 800c45c:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c460:	691b      	ldr	r3, [r3, #16]
 800c462:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c46c:	f8db 1000 	ldr.w	r1, [fp]
 800c470:	f003 ffa8 	bl	80103c4 <uxr_buffer_create_datareader_bin>
 800c474:	4602      	mov	r2, r0
 800c476:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c47a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800c47e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800c482:	f000 fbb9 	bl	800cbf8 <run_xrce_session>
 800c486:	b1e8      	cbz	r0, 800c4c4 <rmw_create_subscription+0x1a4>
 800c488:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c48c:	2200      	movs	r2, #0
 800c48e:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800c492:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c496:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	bf0c      	ite	eq
 800c49e:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800c4a2:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800c4a6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800c4aa:	9307      	str	r3, [sp, #28]
 800c4ac:	aa0a      	add	r2, sp, #40	; 0x28
 800c4ae:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 800c4b2:	9200      	str	r2, [sp, #0]
 800c4b4:	6819      	ldr	r1, [r3, #0]
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	9b07      	ldr	r3, [sp, #28]
 800c4ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c4be:	f004 f8ed 	bl	801069c <uxr_buffer_request_data>
 800c4c2:	e007      	b.n	800c4d4 <rmw_create_subscription+0x1b4>
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	4805      	ldr	r0, [pc, #20]	; (800c4dc <rmw_create_subscription+0x1bc>)
 800c4c8:	f009 fd9e 	bl	8016008 <put_memory>
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fa57 	bl	800c980 <rmw_uxrce_fini_subscription_memory>
 800c4d2:	2400      	movs	r4, #0
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	b00d      	add	sp, #52	; 0x34
 800c4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4dc:	2000bf74 	.word	0x2000bf74
 800c4e0:	08019f58 	.word	0x08019f58
 800c4e4:	08019f24 	.word	0x08019f24

0800c4e8 <rmw_subscription_get_actual_qos>:
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	4770      	bx	lr

0800c4ec <rmw_destroy_subscription>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	b128      	cbz	r0, 800c4fc <rmw_destroy_subscription+0x10>
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	6800      	ldr	r0, [r0, #0]
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	f000 fc03 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c4fa:	b910      	cbnz	r0, 800c502 <rmw_destroy_subscription+0x16>
 800c4fc:	2401      	movs	r4, #1
 800c4fe:	4620      	mov	r0, r4
 800c500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c502:	6863      	ldr	r3, [r4, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d0f9      	beq.n	800c4fc <rmw_destroy_subscription+0x10>
 800c508:	2d00      	cmp	r5, #0
 800c50a:	d0f7      	beq.n	800c4fc <rmw_destroy_subscription+0x10>
 800c50c:	6828      	ldr	r0, [r5, #0]
 800c50e:	f000 fbf7 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 800c512:	2800      	cmp	r0, #0
 800c514:	d0f2      	beq.n	800c4fc <rmw_destroy_subscription+0x10>
 800c516:	686c      	ldr	r4, [r5, #4]
 800c518:	2c00      	cmp	r4, #0
 800c51a:	d0ef      	beq.n	800c4fc <rmw_destroy_subscription+0x10>
 800c51c:	6a26      	ldr	r6, [r4, #32]
 800c51e:	6962      	ldr	r2, [r4, #20]
 800c520:	6930      	ldr	r0, [r6, #16]
 800c522:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c526:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c52a:	6819      	ldr	r1, [r3, #0]
 800c52c:	f004 f8f0 	bl	8010710 <uxr_buffer_cancel_data>
 800c530:	4602      	mov	r2, r0
 800c532:	6930      	ldr	r0, [r6, #16]
 800c534:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c538:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c53c:	f000 fb5c 	bl	800cbf8 <run_xrce_session>
 800c540:	69e0      	ldr	r0, [r4, #28]
 800c542:	f009 fe0d 	bl	8016160 <destroy_topic>
 800c546:	6a23      	ldr	r3, [r4, #32]
 800c548:	6962      	ldr	r2, [r4, #20]
 800c54a:	6918      	ldr	r0, [r3, #16]
 800c54c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800c550:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c554:	6819      	ldr	r1, [r3, #0]
 800c556:	f003 fd9d 	bl	8010094 <uxr_buffer_delete_entity>
 800c55a:	6a23      	ldr	r3, [r4, #32]
 800c55c:	6922      	ldr	r2, [r4, #16]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	4604      	mov	r4, r0
 800c562:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800c566:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800c56a:	6809      	ldr	r1, [r1, #0]
 800c56c:	f003 fd92 	bl	8010094 <uxr_buffer_delete_entity>
 800c570:	4607      	mov	r7, r0
 800c572:	6930      	ldr	r0, [r6, #16]
 800c574:	4622      	mov	r2, r4
 800c576:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c57a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c57e:	f000 fb3b 	bl	800cbf8 <run_xrce_session>
 800c582:	4604      	mov	r4, r0
 800c584:	6930      	ldr	r0, [r6, #16]
 800c586:	463a      	mov	r2, r7
 800c588:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800c58c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800c590:	f000 fb32 	bl	800cbf8 <run_xrce_session>
 800c594:	b12c      	cbz	r4, 800c5a2 <rmw_destroy_subscription+0xb6>
 800c596:	b120      	cbz	r0, 800c5a2 <rmw_destroy_subscription+0xb6>
 800c598:	2400      	movs	r4, #0
 800c59a:	4628      	mov	r0, r5
 800c59c:	f000 f9f0 	bl	800c980 <rmw_uxrce_fini_subscription_memory>
 800c5a0:	e7ad      	b.n	800c4fe <rmw_destroy_subscription+0x12>
 800c5a2:	2402      	movs	r4, #2
 800c5a4:	e7f9      	b.n	800c59a <rmw_destroy_subscription+0xae>
 800c5a6:	bf00      	nop

0800c5a8 <rmw_take_with_info>:
 800c5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	6800      	ldr	r0, [r0, #0]
 800c5ae:	460f      	mov	r7, r1
 800c5b0:	4615      	mov	r5, r2
 800c5b2:	b089      	sub	sp, #36	; 0x24
 800c5b4:	b128      	cbz	r0, 800c5c2 <rmw_take_with_info+0x1a>
 800c5b6:	4b24      	ldr	r3, [pc, #144]	; (800c648 <rmw_take_with_info+0xa0>)
 800c5b8:	6819      	ldr	r1, [r3, #0]
 800c5ba:	f7f3 fe39 	bl	8000230 <strcmp>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d13e      	bne.n	800c640 <rmw_take_with_info+0x98>
 800c5c2:	b305      	cbz	r5, 800c606 <rmw_take_with_info+0x5e>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	6864      	ldr	r4, [r4, #4]
 800c5c8:	702b      	strb	r3, [r5, #0]
 800c5ca:	f000 fa9d 	bl	800cb08 <rmw_uxrce_clean_expired_static_input_buffer>
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 fa70 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	b1f0      	cbz	r0, 800c616 <rmw_take_with_info+0x6e>
 800c5d8:	68c1      	ldr	r1, [r0, #12]
 800c5da:	4668      	mov	r0, sp
 800c5dc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800c5e0:	3110      	adds	r1, #16
 800c5e2:	f003 fc09 	bl	800fdf8 <ucdr_init_buffer>
 800c5e6:	69a3      	ldr	r3, [r4, #24]
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	4668      	mov	r0, sp
 800c5ee:	4798      	blx	r3
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4815      	ldr	r0, [pc, #84]	; (800c64c <rmw_take_with_info+0xa4>)
 800c5f6:	f009 fd07 	bl	8016008 <put_memory>
 800c5fa:	702c      	strb	r4, [r5, #0]
 800c5fc:	f084 0001 	eor.w	r0, r4, #1
 800c600:	b2c0      	uxtb	r0, r0
 800c602:	b009      	add	sp, #36	; 0x24
 800c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c606:	6864      	ldr	r4, [r4, #4]
 800c608:	f000 fa7e 	bl	800cb08 <rmw_uxrce_clean_expired_static_input_buffer>
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 fa51 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 800c612:	4605      	mov	r5, r0
 800c614:	b910      	cbnz	r0, 800c61c <rmw_take_with_info+0x74>
 800c616:	2001      	movs	r0, #1
 800c618:	b009      	add	sp, #36	; 0x24
 800c61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61c:	68e9      	ldr	r1, [r5, #12]
 800c61e:	4668      	mov	r0, sp
 800c620:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800c624:	3110      	adds	r1, #16
 800c626:	f003 fbe7 	bl	800fdf8 <ucdr_init_buffer>
 800c62a:	69a3      	ldr	r3, [r4, #24]
 800c62c:	4639      	mov	r1, r7
 800c62e:	4668      	mov	r0, sp
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	4798      	blx	r3
 800c634:	4629      	mov	r1, r5
 800c636:	4604      	mov	r4, r0
 800c638:	4804      	ldr	r0, [pc, #16]	; (800c64c <rmw_take_with_info+0xa4>)
 800c63a:	f009 fce5 	bl	8016008 <put_memory>
 800c63e:	e7dd      	b.n	800c5fc <rmw_take_with_info+0x54>
 800c640:	200c      	movs	r0, #12
 800c642:	b009      	add	sp, #36	; 0x24
 800c644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c646:	bf00      	nop
 800c648:	0801a724 	.word	0x0801a724
 800c64c:	20008d08 	.word	0x20008d08

0800c650 <rmw_uxrce_transport_init>:
 800c650:	b508      	push	{r3, lr}
 800c652:	b108      	cbz	r0, 800c658 <rmw_uxrce_transport_init+0x8>
 800c654:	f100 0210 	add.w	r2, r0, #16
 800c658:	b139      	cbz	r1, 800c66a <rmw_uxrce_transport_init+0x1a>
 800c65a:	4610      	mov	r0, r2
 800c65c:	6949      	ldr	r1, [r1, #20]
 800c65e:	f003 ffb7 	bl	80105d0 <uxr_init_custom_transport>
 800c662:	f080 0001 	eor.w	r0, r0, #1
 800c666:	b2c0      	uxtb	r0, r0
 800c668:	bd08      	pop	{r3, pc}
 800c66a:	4b04      	ldr	r3, [pc, #16]	; (800c67c <rmw_uxrce_transport_init+0x2c>)
 800c66c:	4610      	mov	r0, r2
 800c66e:	6859      	ldr	r1, [r3, #4]
 800c670:	f003 ffae 	bl	80105d0 <uxr_init_custom_transport>
 800c674:	f080 0001 	eor.w	r0, r0, #1
 800c678:	b2c0      	uxtb	r0, r0
 800c67a:	bd08      	pop	{r3, pc}
 800c67c:	20008ce8 	.word	0x20008ce8

0800c680 <rmw_uros_epoch_nanos>:
 800c680:	4b05      	ldr	r3, [pc, #20]	; (800c698 <rmw_uros_epoch_nanos+0x18>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	b123      	cbz	r3, 800c690 <rmw_uros_epoch_nanos+0x10>
 800c686:	68d8      	ldr	r0, [r3, #12]
 800c688:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c68c:	f004 be10 	b.w	80112b0 <uxr_epoch_nanos>
 800c690:	2000      	movs	r0, #0
 800c692:	2100      	movs	r1, #0
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	2000beb0 	.word	0x2000beb0

0800c69c <rmw_uros_sync_session>:
 800c69c:	b508      	push	{r3, lr}
 800c69e:	4b07      	ldr	r3, [pc, #28]	; (800c6bc <rmw_uros_sync_session+0x20>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	b14b      	cbz	r3, 800c6b8 <rmw_uros_sync_session+0x1c>
 800c6a4:	4601      	mov	r1, r0
 800c6a6:	68d8      	ldr	r0, [r3, #12]
 800c6a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800c6ac:	f004 fdac 	bl	8011208 <uxr_sync_session>
 800c6b0:	f080 0001 	eor.w	r0, r0, #1
 800c6b4:	b2c0      	uxtb	r0, r0
 800c6b6:	bd08      	pop	{r3, pc}
 800c6b8:	2001      	movs	r0, #1
 800c6ba:	bd08      	pop	{r3, pc}
 800c6bc:	2000beb0 	.word	0x2000beb0

0800c6c0 <rmw_uxrce_init_service_memory>:
 800c6c0:	b1ba      	cbz	r2, 800c6f2 <rmw_uxrce_init_service_memory+0x32>
 800c6c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c4:	7a03      	ldrb	r3, [r0, #8]
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	b993      	cbnz	r3, 800c6f0 <rmw_uxrce_init_service_memory+0x30>
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	21c8      	movs	r1, #200	; 0xc8
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	461f      	mov	r7, r3
 800c6d2:	fb01 4602 	mla	r6, r1, r2, r4
 800c6d6:	e9c5 3300 	strd	r3, r3, [r5]
 800c6da:	60e9      	str	r1, [r5, #12]
 800c6dc:	7228      	strb	r0, [r5, #8]
 800c6de:	4621      	mov	r1, r4
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f009 fc91 	bl	8016008 <put_memory>
 800c6e6:	60e4      	str	r4, [r4, #12]
 800c6e8:	f804 7bc8 	strb.w	r7, [r4], #200
 800c6ec:	42a6      	cmp	r6, r4
 800c6ee:	d1f6      	bne.n	800c6de <rmw_uxrce_init_service_memory+0x1e>
 800c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6f2:	4770      	bx	lr

0800c6f4 <rmw_uxrce_init_client_memory>:
 800c6f4:	b1ba      	cbz	r2, 800c726 <rmw_uxrce_init_client_memory+0x32>
 800c6f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f8:	7a03      	ldrb	r3, [r0, #8]
 800c6fa:	4605      	mov	r5, r0
 800c6fc:	b993      	cbnz	r3, 800c724 <rmw_uxrce_init_client_memory+0x30>
 800c6fe:	460c      	mov	r4, r1
 800c700:	21c8      	movs	r1, #200	; 0xc8
 800c702:	2001      	movs	r0, #1
 800c704:	461f      	mov	r7, r3
 800c706:	fb01 4602 	mla	r6, r1, r2, r4
 800c70a:	e9c5 3300 	strd	r3, r3, [r5]
 800c70e:	60e9      	str	r1, [r5, #12]
 800c710:	7228      	strb	r0, [r5, #8]
 800c712:	4621      	mov	r1, r4
 800c714:	4628      	mov	r0, r5
 800c716:	f009 fc77 	bl	8016008 <put_memory>
 800c71a:	60e4      	str	r4, [r4, #12]
 800c71c:	f804 7bc8 	strb.w	r7, [r4], #200
 800c720:	42a6      	cmp	r6, r4
 800c722:	d1f6      	bne.n	800c712 <rmw_uxrce_init_client_memory+0x1e>
 800c724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c726:	4770      	bx	lr

0800c728 <rmw_uxrce_init_publisher_memory>:
 800c728:	b1ba      	cbz	r2, 800c75a <rmw_uxrce_init_publisher_memory+0x32>
 800c72a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72c:	7a03      	ldrb	r3, [r0, #8]
 800c72e:	4605      	mov	r5, r0
 800c730:	b993      	cbnz	r3, 800c758 <rmw_uxrce_init_publisher_memory+0x30>
 800c732:	460c      	mov	r4, r1
 800c734:	21d8      	movs	r1, #216	; 0xd8
 800c736:	2001      	movs	r0, #1
 800c738:	461f      	mov	r7, r3
 800c73a:	fb01 4602 	mla	r6, r1, r2, r4
 800c73e:	e9c5 3300 	strd	r3, r3, [r5]
 800c742:	60e9      	str	r1, [r5, #12]
 800c744:	7228      	strb	r0, [r5, #8]
 800c746:	4621      	mov	r1, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	f009 fc5d 	bl	8016008 <put_memory>
 800c74e:	60e4      	str	r4, [r4, #12]
 800c750:	f804 7bd8 	strb.w	r7, [r4], #216
 800c754:	42a6      	cmp	r6, r4
 800c756:	d1f6      	bne.n	800c746 <rmw_uxrce_init_publisher_memory+0x1e>
 800c758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c75a:	4770      	bx	lr

0800c75c <rmw_uxrce_init_subscription_memory>:
 800c75c:	b1ba      	cbz	r2, 800c78e <rmw_uxrce_init_subscription_memory+0x32>
 800c75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c760:	7a03      	ldrb	r3, [r0, #8]
 800c762:	4605      	mov	r5, r0
 800c764:	b993      	cbnz	r3, 800c78c <rmw_uxrce_init_subscription_memory+0x30>
 800c766:	460c      	mov	r4, r1
 800c768:	21d0      	movs	r1, #208	; 0xd0
 800c76a:	2001      	movs	r0, #1
 800c76c:	461f      	mov	r7, r3
 800c76e:	fb01 4602 	mla	r6, r1, r2, r4
 800c772:	e9c5 3300 	strd	r3, r3, [r5]
 800c776:	60e9      	str	r1, [r5, #12]
 800c778:	7228      	strb	r0, [r5, #8]
 800c77a:	4621      	mov	r1, r4
 800c77c:	4628      	mov	r0, r5
 800c77e:	f009 fc43 	bl	8016008 <put_memory>
 800c782:	60e4      	str	r4, [r4, #12]
 800c784:	f804 7bd0 	strb.w	r7, [r4], #208
 800c788:	42a6      	cmp	r6, r4
 800c78a:	d1f6      	bne.n	800c77a <rmw_uxrce_init_subscription_memory+0x1e>
 800c78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c78e:	4770      	bx	lr

0800c790 <rmw_uxrce_init_node_memory>:
 800c790:	b1ba      	cbz	r2, 800c7c2 <rmw_uxrce_init_node_memory+0x32>
 800c792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c794:	7a03      	ldrb	r3, [r0, #8]
 800c796:	4605      	mov	r5, r0
 800c798:	b993      	cbnz	r3, 800c7c0 <rmw_uxrce_init_node_memory+0x30>
 800c79a:	460c      	mov	r4, r1
 800c79c:	21a4      	movs	r1, #164	; 0xa4
 800c79e:	2001      	movs	r0, #1
 800c7a0:	461f      	mov	r7, r3
 800c7a2:	fb01 4602 	mla	r6, r1, r2, r4
 800c7a6:	e9c5 3300 	strd	r3, r3, [r5]
 800c7aa:	60e9      	str	r1, [r5, #12]
 800c7ac:	7228      	strb	r0, [r5, #8]
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f009 fc29 	bl	8016008 <put_memory>
 800c7b6:	60e4      	str	r4, [r4, #12]
 800c7b8:	f804 7ba4 	strb.w	r7, [r4], #164
 800c7bc:	42a6      	cmp	r6, r4
 800c7be:	d1f6      	bne.n	800c7ae <rmw_uxrce_init_node_memory+0x1e>
 800c7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7c2:	4770      	bx	lr

0800c7c4 <rmw_uxrce_init_session_memory>:
 800c7c4:	b1e2      	cbz	r2, 800c800 <rmw_uxrce_init_session_memory+0x3c>
 800c7c6:	7a03      	ldrb	r3, [r0, #8]
 800c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	b9ab      	cbnz	r3, 800c7fc <rmw_uxrce_init_session_memory+0x38>
 800c7d0:	f241 50a8 	movw	r0, #5544	; 0x15a8
 800c7d4:	460c      	mov	r4, r1
 800c7d6:	2101      	movs	r1, #1
 800c7d8:	4698      	mov	r8, r3
 800c7da:	4607      	mov	r7, r0
 800c7dc:	fb00 4602 	mla	r6, r0, r2, r4
 800c7e0:	e9c5 3300 	strd	r3, r3, [r5]
 800c7e4:	60e8      	str	r0, [r5, #12]
 800c7e6:	7229      	strb	r1, [r5, #8]
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f009 fc0c 	bl	8016008 <put_memory>
 800c7f0:	60e4      	str	r4, [r4, #12]
 800c7f2:	f884 8000 	strb.w	r8, [r4]
 800c7f6:	443c      	add	r4, r7
 800c7f8:	42a6      	cmp	r6, r4
 800c7fa:	d1f5      	bne.n	800c7e8 <rmw_uxrce_init_session_memory+0x24>
 800c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop

0800c804 <rmw_uxrce_init_topic_memory>:
 800c804:	b1ca      	cbz	r2, 800c83a <rmw_uxrce_init_topic_memory+0x36>
 800c806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c808:	7a03      	ldrb	r3, [r0, #8]
 800c80a:	4606      	mov	r6, r0
 800c80c:	b9a3      	cbnz	r3, 800c838 <rmw_uxrce_init_topic_memory+0x34>
 800c80e:	460c      	mov	r4, r1
 800c810:	2001      	movs	r0, #1
 800c812:	211c      	movs	r1, #28
 800c814:	461f      	mov	r7, r3
 800c816:	e9c6 3300 	strd	r3, r3, [r6]
 800c81a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c81e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c822:	7230      	strb	r0, [r6, #8]
 800c824:	60f1      	str	r1, [r6, #12]
 800c826:	4621      	mov	r1, r4
 800c828:	4630      	mov	r0, r6
 800c82a:	f009 fbed 	bl	8016008 <put_memory>
 800c82e:	60e4      	str	r4, [r4, #12]
 800c830:	f804 7b1c 	strb.w	r7, [r4], #28
 800c834:	42a5      	cmp	r5, r4
 800c836:	d1f6      	bne.n	800c826 <rmw_uxrce_init_topic_memory+0x22>
 800c838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c83a:	4770      	bx	lr

0800c83c <rmw_uxrce_init_static_input_buffer_memory>:
 800c83c:	b1da      	cbz	r2, 800c876 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c840:	7a03      	ldrb	r3, [r0, #8]
 800c842:	4606      	mov	r6, r0
 800c844:	b9b3      	cbnz	r3, 800c874 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800c846:	460c      	mov	r4, r1
 800c848:	2001      	movs	r0, #1
 800c84a:	f44f 6104 	mov.w	r1, #2112	; 0x840
 800c84e:	461f      	mov	r7, r3
 800c850:	e9c6 3300 	strd	r3, r3, [r6]
 800c854:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800c858:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800c85c:	7230      	strb	r0, [r6, #8]
 800c85e:	60f1      	str	r1, [r6, #12]
 800c860:	4621      	mov	r1, r4
 800c862:	4630      	mov	r0, r6
 800c864:	f009 fbd0 	bl	8016008 <put_memory>
 800c868:	60e4      	str	r4, [r4, #12]
 800c86a:	7027      	strb	r7, [r4, #0]
 800c86c:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800c870:	42a5      	cmp	r5, r4
 800c872:	d1f5      	bne.n	800c860 <rmw_uxrce_init_static_input_buffer_memory+0x24>
 800c874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c876:	4770      	bx	lr

0800c878 <rmw_uxrce_init_init_options_impl_memory>:
 800c878:	b1ba      	cbz	r2, 800c8aa <rmw_uxrce_init_init_options_impl_memory+0x32>
 800c87a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87c:	7a03      	ldrb	r3, [r0, #8]
 800c87e:	4605      	mov	r5, r0
 800c880:	b993      	cbnz	r3, 800c8a8 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800c882:	460c      	mov	r4, r1
 800c884:	212c      	movs	r1, #44	; 0x2c
 800c886:	2001      	movs	r0, #1
 800c888:	461f      	mov	r7, r3
 800c88a:	fb01 4602 	mla	r6, r1, r2, r4
 800c88e:	e9c5 3300 	strd	r3, r3, [r5]
 800c892:	60e9      	str	r1, [r5, #12]
 800c894:	7228      	strb	r0, [r5, #8]
 800c896:	4621      	mov	r1, r4
 800c898:	4628      	mov	r0, r5
 800c89a:	f009 fbb5 	bl	8016008 <put_memory>
 800c89e:	60e4      	str	r4, [r4, #12]
 800c8a0:	f804 7b2c 	strb.w	r7, [r4], #44
 800c8a4:	42a6      	cmp	r6, r4
 800c8a6:	d1f6      	bne.n	800c896 <rmw_uxrce_init_init_options_impl_memory+0x1e>
 800c8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8aa:	4770      	bx	lr

0800c8ac <rmw_uxrce_init_wait_set_memory>:
 800c8ac:	b1ca      	cbz	r2, 800c8e2 <rmw_uxrce_init_wait_set_memory+0x36>
 800c8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b0:	7a03      	ldrb	r3, [r0, #8]
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	b9a3      	cbnz	r3, 800c8e0 <rmw_uxrce_init_wait_set_memory+0x34>
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	2001      	movs	r0, #1
 800c8ba:	211c      	movs	r1, #28
 800c8bc:	461f      	mov	r7, r3
 800c8be:	e9c6 3300 	strd	r3, r3, [r6]
 800c8c2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800c8c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8ca:	7230      	strb	r0, [r6, #8]
 800c8cc:	60f1      	str	r1, [r6, #12]
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	f009 fb99 	bl	8016008 <put_memory>
 800c8d6:	60e4      	str	r4, [r4, #12]
 800c8d8:	f804 7b1c 	strb.w	r7, [r4], #28
 800c8dc:	42a5      	cmp	r5, r4
 800c8de:	d1f6      	bne.n	800c8ce <rmw_uxrce_init_wait_set_memory+0x22>
 800c8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e2:	4770      	bx	lr

0800c8e4 <rmw_uxrce_init_guard_condition_memory>:
 800c8e4:	b1ba      	cbz	r2, 800c916 <rmw_uxrce_init_guard_condition_memory+0x32>
 800c8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e8:	7a03      	ldrb	r3, [r0, #8]
 800c8ea:	4605      	mov	r5, r0
 800c8ec:	b993      	cbnz	r3, 800c914 <rmw_uxrce_init_guard_condition_memory+0x30>
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	2001      	movs	r0, #1
 800c8f2:	2120      	movs	r1, #32
 800c8f4:	461f      	mov	r7, r3
 800c8f6:	e9c5 3300 	strd	r3, r3, [r5]
 800c8fa:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800c8fe:	7228      	strb	r0, [r5, #8]
 800c900:	60e9      	str	r1, [r5, #12]
 800c902:	4621      	mov	r1, r4
 800c904:	4628      	mov	r0, r5
 800c906:	f009 fb7f 	bl	8016008 <put_memory>
 800c90a:	60e4      	str	r4, [r4, #12]
 800c90c:	f804 7b20 	strb.w	r7, [r4], #32
 800c910:	42a6      	cmp	r6, r4
 800c912:	d1f6      	bne.n	800c902 <rmw_uxrce_init_guard_condition_memory+0x1e>
 800c914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c916:	4770      	bx	lr

0800c918 <rmw_uxrce_fini_session_memory>:
 800c918:	4601      	mov	r1, r0
 800c91a:	4801      	ldr	r0, [pc, #4]	; (800c920 <rmw_uxrce_fini_session_memory+0x8>)
 800c91c:	f009 bb74 	b.w	8016008 <put_memory>
 800c920:	2000beb0 	.word	0x2000beb0

0800c924 <rmw_uxrce_fini_node_memory>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4604      	mov	r4, r0
 800c928:	6800      	ldr	r0, [r0, #0]
 800c92a:	b128      	cbz	r0, 800c938 <rmw_uxrce_fini_node_memory+0x14>
 800c92c:	4b07      	ldr	r3, [pc, #28]	; (800c94c <rmw_uxrce_fini_node_memory+0x28>)
 800c92e:	6819      	ldr	r1, [r3, #0]
 800c930:	f7f3 fc7e 	bl	8000230 <strcmp>
 800c934:	b940      	cbnz	r0, 800c948 <rmw_uxrce_fini_node_memory+0x24>
 800c936:	6020      	str	r0, [r4, #0]
 800c938:	6861      	ldr	r1, [r4, #4]
 800c93a:	b129      	cbz	r1, 800c948 <rmw_uxrce_fini_node_memory+0x24>
 800c93c:	2500      	movs	r5, #0
 800c93e:	4804      	ldr	r0, [pc, #16]	; (800c950 <rmw_uxrce_fini_node_memory+0x2c>)
 800c940:	610d      	str	r5, [r1, #16]
 800c942:	f009 fb61 	bl	8016008 <put_memory>
 800c946:	6065      	str	r5, [r4, #4]
 800c948:	bd38      	pop	{r3, r4, r5, pc}
 800c94a:	bf00      	nop
 800c94c:	0801a724 	.word	0x0801a724
 800c950:	2000bcdc 	.word	0x2000bcdc

0800c954 <rmw_uxrce_fini_publisher_memory>:
 800c954:	b510      	push	{r4, lr}
 800c956:	4604      	mov	r4, r0
 800c958:	6800      	ldr	r0, [r0, #0]
 800c95a:	b128      	cbz	r0, 800c968 <rmw_uxrce_fini_publisher_memory+0x14>
 800c95c:	4b06      	ldr	r3, [pc, #24]	; (800c978 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c95e:	6819      	ldr	r1, [r3, #0]
 800c960:	f7f3 fc66 	bl	8000230 <strcmp>
 800c964:	b938      	cbnz	r0, 800c976 <rmw_uxrce_fini_publisher_memory+0x22>
 800c966:	6020      	str	r0, [r4, #0]
 800c968:	6861      	ldr	r1, [r4, #4]
 800c96a:	b121      	cbz	r1, 800c976 <rmw_uxrce_fini_publisher_memory+0x22>
 800c96c:	4803      	ldr	r0, [pc, #12]	; (800c97c <rmw_uxrce_fini_publisher_memory+0x28>)
 800c96e:	f009 fb4b 	bl	8016008 <put_memory>
 800c972:	2300      	movs	r3, #0
 800c974:	6063      	str	r3, [r4, #4]
 800c976:	bd10      	pop	{r4, pc}
 800c978:	0801a724 	.word	0x0801a724
 800c97c:	20008d18 	.word	0x20008d18

0800c980 <rmw_uxrce_fini_subscription_memory>:
 800c980:	b510      	push	{r4, lr}
 800c982:	4604      	mov	r4, r0
 800c984:	6800      	ldr	r0, [r0, #0]
 800c986:	b128      	cbz	r0, 800c994 <rmw_uxrce_fini_subscription_memory+0x14>
 800c988:	4b06      	ldr	r3, [pc, #24]	; (800c9a4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c98a:	6819      	ldr	r1, [r3, #0]
 800c98c:	f7f3 fc50 	bl	8000230 <strcmp>
 800c990:	b938      	cbnz	r0, 800c9a2 <rmw_uxrce_fini_subscription_memory+0x22>
 800c992:	6020      	str	r0, [r4, #0]
 800c994:	6861      	ldr	r1, [r4, #4]
 800c996:	b121      	cbz	r1, 800c9a2 <rmw_uxrce_fini_subscription_memory+0x22>
 800c998:	4803      	ldr	r0, [pc, #12]	; (800c9a8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c99a:	f009 fb35 	bl	8016008 <put_memory>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	6063      	str	r3, [r4, #4]
 800c9a2:	bd10      	pop	{r4, pc}
 800c9a4:	0801a724 	.word	0x0801a724
 800c9a8:	2000bf74 	.word	0x2000bf74

0800c9ac <rmw_uxrce_fini_service_memory>:
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	6800      	ldr	r0, [r0, #0]
 800c9b2:	b128      	cbz	r0, 800c9c0 <rmw_uxrce_fini_service_memory+0x14>
 800c9b4:	4b06      	ldr	r3, [pc, #24]	; (800c9d0 <rmw_uxrce_fini_service_memory+0x24>)
 800c9b6:	6819      	ldr	r1, [r3, #0]
 800c9b8:	f7f3 fc3a 	bl	8000230 <strcmp>
 800c9bc:	b938      	cbnz	r0, 800c9ce <rmw_uxrce_fini_service_memory+0x22>
 800c9be:	6020      	str	r0, [r4, #0]
 800c9c0:	6861      	ldr	r1, [r4, #4]
 800c9c2:	b121      	cbz	r1, 800c9ce <rmw_uxrce_fini_service_memory+0x22>
 800c9c4:	4803      	ldr	r0, [pc, #12]	; (800c9d4 <rmw_uxrce_fini_service_memory+0x28>)
 800c9c6:	f009 fb1f 	bl	8016008 <put_memory>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	6063      	str	r3, [r4, #4]
 800c9ce:	bd10      	pop	{r4, pc}
 800c9d0:	0801a724 	.word	0x0801a724
 800c9d4:	2000bf64 	.word	0x2000bf64

0800c9d8 <rmw_uxrce_fini_client_memory>:
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	4604      	mov	r4, r0
 800c9dc:	6800      	ldr	r0, [r0, #0]
 800c9de:	b128      	cbz	r0, 800c9ec <rmw_uxrce_fini_client_memory+0x14>
 800c9e0:	4b06      	ldr	r3, [pc, #24]	; (800c9fc <rmw_uxrce_fini_client_memory+0x24>)
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	f7f3 fc24 	bl	8000230 <strcmp>
 800c9e8:	b938      	cbnz	r0, 800c9fa <rmw_uxrce_fini_client_memory+0x22>
 800c9ea:	6020      	str	r0, [r4, #0]
 800c9ec:	6861      	ldr	r1, [r4, #4]
 800c9ee:	b121      	cbz	r1, 800c9fa <rmw_uxrce_fini_client_memory+0x22>
 800c9f0:	4803      	ldr	r0, [pc, #12]	; (800ca00 <rmw_uxrce_fini_client_memory+0x28>)
 800c9f2:	f009 fb09 	bl	8016008 <put_memory>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	bd10      	pop	{r4, pc}
 800c9fc:	0801a724 	.word	0x0801a724
 800ca00:	20009598 	.word	0x20009598

0800ca04 <rmw_uxrce_fini_topic_memory>:
 800ca04:	b510      	push	{r4, lr}
 800ca06:	4604      	mov	r4, r0
 800ca08:	4803      	ldr	r0, [pc, #12]	; (800ca18 <rmw_uxrce_fini_topic_memory+0x14>)
 800ca0a:	4621      	mov	r1, r4
 800ca0c:	f009 fafc 	bl	8016008 <put_memory>
 800ca10:	2300      	movs	r3, #0
 800ca12:	61a3      	str	r3, [r4, #24]
 800ca14:	bd10      	pop	{r4, pc}
 800ca16:	bf00      	nop
 800ca18:	2000bea0 	.word	0x2000bea0

0800ca1c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	b4f0      	push	{r4, r5, r6, r7}
 800ca20:	4923      	ldr	r1, [pc, #140]	; (800cab0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ca22:	ac04      	add	r4, sp, #16
 800ca24:	e884 000c 	stmia.w	r4, {r2, r3}
 800ca28:	680d      	ldr	r5, [r1, #0]
 800ca2a:	9c05      	ldr	r4, [sp, #20]
 800ca2c:	4601      	mov	r1, r0
 800ca2e:	2d00      	cmp	r5, #0
 800ca30:	d03c      	beq.n	800caac <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800ca32:	462b      	mov	r3, r5
 800ca34:	2000      	movs	r0, #0
 800ca36:	68da      	ldr	r2, [r3, #12]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ca3e:	4291      	cmp	r1, r2
 800ca40:	bf08      	it	eq
 800ca42:	3001      	addeq	r0, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1f6      	bne.n	800ca36 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800ca48:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d025      	beq.n	800ca9c <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800ca50:	d905      	bls.n	800ca5e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d003      	beq.n	800ca5e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ca56:	2000      	movs	r0, #0
 800ca58:	bcf0      	pop	{r4, r5, r6, r7}
 800ca5a:	b002      	add	sp, #8
 800ca5c:	4770      	bx	lr
 800ca5e:	b304      	cbz	r4, 800caa2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ca60:	4284      	cmp	r4, r0
 800ca62:	d81e      	bhi.n	800caa2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ca64:	2d00      	cmp	r5, #0
 800ca66:	d0f6      	beq.n	800ca56 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ca68:	2000      	movs	r0, #0
 800ca6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ca6e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800ca72:	e002      	b.n	800ca7a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ca74:	68ad      	ldr	r5, [r5, #8]
 800ca76:	2d00      	cmp	r5, #0
 800ca78:	d0ee      	beq.n	800ca58 <rmw_uxrce_get_static_input_buffer_for_entity+0x3c>
 800ca7a:	68eb      	ldr	r3, [r5, #12]
 800ca7c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ca80:	4291      	cmp	r1, r2
 800ca82:	d1f7      	bne.n	800ca74 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ca84:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8c:	42b2      	cmp	r2, r6
 800ca8e:	eb73 0407 	sbcs.w	r4, r3, r7
 800ca92:	daef      	bge.n	800ca74 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ca94:	4616      	mov	r6, r2
 800ca96:	461f      	mov	r7, r3
 800ca98:	4628      	mov	r0, r5
 800ca9a:	e7eb      	b.n	800ca74 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ca9c:	b10c      	cbz	r4, 800caa2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ca9e:	4284      	cmp	r4, r0
 800caa0:	d9d9      	bls.n	800ca56 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800caa2:	bcf0      	pop	{r4, r5, r6, r7}
 800caa4:	4802      	ldr	r0, [pc, #8]	; (800cab0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800caa6:	b002      	add	sp, #8
 800caa8:	f009 ba9e 	b.w	8015fe8 <get_memory>
 800caac:	4628      	mov	r0, r5
 800caae:	e7cb      	b.n	800ca48 <rmw_uxrce_get_static_input_buffer_for_entity+0x2c>
 800cab0:	20008d08 	.word	0x20008d08

0800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800cab4:	4b12      	ldr	r3, [pc, #72]	; (800cb00 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	b303      	cbz	r3, 800cafc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>
 800caba:	e92d 03d0 	stmdb	sp!, {r4, r6, r7, r8, r9}
 800cabe:	4604      	mov	r4, r0
 800cac0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cac4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800cac8:	2000      	movs	r0, #0
 800caca:	e001      	b.n	800cad0 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	b193      	cbz	r3, 800caf6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800cad0:	68da      	ldr	r2, [r3, #12]
 800cad2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800cad6:	428c      	cmp	r4, r1
 800cad8:	d1f8      	bne.n	800cacc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cada:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800cade:	e9d2 8900 	ldrd	r8, r9, [r2]
 800cae2:	45b0      	cmp	r8, r6
 800cae4:	eb79 0207 	sbcs.w	r2, r9, r7
 800cae8:	daf0      	bge.n	800cacc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800caea:	4618      	mov	r0, r3
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	4646      	mov	r6, r8
 800caf0:	464f      	mov	r7, r9
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1ec      	bne.n	800cad0 <rmw_uxrce_find_static_input_buffer_by_owner+0x1c>
 800caf6:	e8bd 03d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9}
 800cafa:	4770      	bx	lr
 800cafc:	4618      	mov	r0, r3
 800cafe:	4770      	bx	lr
 800cb00:	20008d08 	.word	0x20008d08
 800cb04:	00000000 	.word	0x00000000

0800cb08 <rmw_uxrce_clean_expired_static_input_buffer>:
 800cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0c:	4e38      	ldr	r6, [pc, #224]	; (800cbf0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800cb0e:	b083      	sub	sp, #12
 800cb10:	f8d6 8000 	ldr.w	r8, [r6]
 800cb14:	f7ff fdb4 	bl	800c680 <rmw_uros_epoch_nanos>
 800cb18:	f1b8 0f00 	cmp.w	r8, #0
 800cb1c:	d05f      	beq.n	800cbde <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800cb1e:	46b1      	mov	r9, r6
 800cb20:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800cb24:	4682      	mov	sl, r0
 800cb26:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800cb2a:	468b      	mov	fp, r1
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d02d      	beq.n	800cb8c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800cb30:	2b05      	cmp	r3, #5
 800cb32:	d041      	beq.n	800cbb8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800cb34:	2b03      	cmp	r3, #3
 800cb36:	d029      	beq.n	800cb8c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	2100      	movs	r1, #0
 800cb40:	e9cd 2300 	strd	r2, r3, [sp]
 800cb44:	9b00      	ldr	r3, [sp, #0]
 800cb46:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800cb4a:	18c2      	adds	r2, r0, r3
 800cb4c:	9b01      	ldr	r3, [sp, #4]
 800cb4e:	cec0      	ldmia	r6, {r6, r7}
 800cb50:	eb41 0303 	adc.w	r3, r1, r3
 800cb54:	1994      	adds	r4, r2, r6
 800cb56:	eb43 0507 	adc.w	r5, r3, r7
 800cb5a:	4554      	cmp	r4, sl
 800cb5c:	eb75 020b 	sbcs.w	r2, r5, fp
 800cb60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb64:	db03      	blt.n	800cb6e <rmw_uxrce_clean_expired_static_input_buffer+0x66>
 800cb66:	45b2      	cmp	sl, r6
 800cb68:	eb7b 0207 	sbcs.w	r2, fp, r7
 800cb6c:	da05      	bge.n	800cb7a <rmw_uxrce_clean_expired_static_input_buffer+0x72>
 800cb6e:	4641      	mov	r1, r8
 800cb70:	4648      	mov	r0, r9
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	f009 fa48 	bl	8016008 <put_memory>
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d02f      	beq.n	800cbde <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800cb7e:	4698      	mov	r8, r3
 800cb80:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800cb84:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	d1d1      	bne.n	800cb30 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800cb8c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800cb90:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800cb94:	e9cd 2300 	strd	r2, r3, [sp]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800cb9e:	d015      	beq.n	800cbcc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cba0:	9a01      	ldr	r2, [sp, #4]
 800cba2:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800cba4:	fb03 f702 	mul.w	r7, r3, r2
 800cba8:	9a00      	ldr	r2, [sp, #0]
 800cbaa:	fba2 2303 	umull	r2, r3, r2, r3
 800cbae:	e9cd 2300 	strd	r2, r3, [sp]
 800cbb2:	443b      	add	r3, r7
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	e7c5      	b.n	800cb44 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800cbb8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800cbbc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800cbc0:	e9cd 2300 	strd	r2, r3, [sp]
 800cbc4:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	d1e9      	bne.n	800cba0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800cbcc:	ea50 0301 	orrs.w	r3, r0, r1
 800cbd0:	d1b8      	bne.n	800cb44 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800cbd2:	a305      	add	r3, pc, #20	; (adr r3, 800cbe8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	e9cd 2300 	strd	r2, r3, [sp]
 800cbdc:	e7b2      	b.n	800cb44 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800cbde:	b003      	add	sp, #12
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	f3af 8000 	nop.w
 800cbe8:	fc23ac00 	.word	0xfc23ac00
 800cbec:	00000006 	.word	0x00000006
 800cbf0:	20008d08 	.word	0x20008d08
 800cbf4:	3b9aca00 	.word	0x3b9aca00

0800cbf8 <run_xrce_session>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	788c      	ldrb	r4, [r1, #2]
 800cbfc:	b086      	sub	sp, #24
 800cbfe:	2c01      	cmp	r4, #1
 800cc00:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cc04:	d00c      	beq.n	800cc20 <run_xrce_session+0x28>
 800cc06:	4619      	mov	r1, r3
 800cc08:	2301      	movs	r3, #1
 800cc0a:	f10d 020e 	add.w	r2, sp, #14
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cc14:	f10d 0317 	add.w	r3, sp, #23
 800cc18:	f004 fc0a 	bl	8011430 <uxr_run_session_until_all_status>
 800cc1c:	b006      	add	sp, #24
 800cc1e:	bd10      	pop	{r4, pc}
 800cc20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800cc24:	f004 fb4e 	bl	80112c4 <uxr_flash_output_streams>
 800cc28:	4620      	mov	r0, r4
 800cc2a:	b006      	add	sp, #24
 800cc2c:	bd10      	pop	{r4, pc}
 800cc2e:	bf00      	nop

0800cc30 <convert_qos_profile>:
 800cc30:	b430      	push	{r4, r5}
 800cc32:	7a0d      	ldrb	r5, [r1, #8]
 800cc34:	780c      	ldrb	r4, [r1, #0]
 800cc36:	7a4a      	ldrb	r2, [r1, #9]
 800cc38:	f1a5 0502 	sub.w	r5, r5, #2
 800cc3c:	f1a4 0402 	sub.w	r4, r4, #2
 800cc40:	fab5 f585 	clz	r5, r5
 800cc44:	fab4 f484 	clz	r4, r4
 800cc48:	2a02      	cmp	r2, #2
 800cc4a:	bf18      	it	ne
 800cc4c:	2200      	movne	r2, #0
 800cc4e:	8889      	ldrh	r1, [r1, #4]
 800cc50:	096d      	lsrs	r5, r5, #5
 800cc52:	0964      	lsrs	r4, r4, #5
 800cc54:	7045      	strb	r5, [r0, #1]
 800cc56:	7084      	strb	r4, [r0, #2]
 800cc58:	7002      	strb	r2, [r0, #0]
 800cc5a:	8081      	strh	r1, [r0, #4]
 800cc5c:	bc30      	pop	{r4, r5}
 800cc5e:	4770      	bx	lr

0800cc60 <generate_type_name>:
 800cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc64:	4606      	mov	r6, r0
 800cc66:	b086      	sub	sp, #24
 800cc68:	6840      	ldr	r0, [r0, #4]
 800cc6a:	4688      	mov	r8, r1
 800cc6c:	4617      	mov	r7, r2
 800cc6e:	f7f3 fae9 	bl	8000244 <strlen>
 800cc72:	6834      	ldr	r4, [r6, #0]
 800cc74:	4605      	mov	r5, r0
 800cc76:	b11c      	cbz	r4, 800cc80 <generate_type_name+0x20>
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f7f3 fae3 	bl	8000244 <strlen>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	2300      	movs	r3, #0
 800cc82:	f888 3000 	strb.w	r3, [r8]
 800cc86:	6833      	ldr	r3, [r6, #0]
 800cc88:	3508      	adds	r5, #8
 800cc8a:	442c      	add	r4, r5
 800cc8c:	b19b      	cbz	r3, 800ccb6 <generate_type_name+0x56>
 800cc8e:	490c      	ldr	r1, [pc, #48]	; (800ccc0 <generate_type_name+0x60>)
 800cc90:	4608      	mov	r0, r1
 800cc92:	6875      	ldr	r5, [r6, #4]
 800cc94:	4a0b      	ldr	r2, [pc, #44]	; (800ccc4 <generate_type_name+0x64>)
 800cc96:	9504      	str	r5, [sp, #16]
 800cc98:	4d0b      	ldr	r5, [pc, #44]	; (800ccc8 <generate_type_name+0x68>)
 800cc9a:	9103      	str	r1, [sp, #12]
 800cc9c:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800cca0:	9000      	str	r0, [sp, #0]
 800cca2:	9205      	str	r2, [sp, #20]
 800cca4:	4639      	mov	r1, r7
 800cca6:	4640      	mov	r0, r8
 800cca8:	4a08      	ldr	r2, [pc, #32]	; (800cccc <generate_type_name+0x6c>)
 800ccaa:	f00a fe8d 	bl	80179c8 <sniprintf>
 800ccae:	4620      	mov	r0, r4
 800ccb0:	b006      	add	sp, #24
 800ccb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb6:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <generate_type_name+0x70>)
 800ccb8:	4901      	ldr	r1, [pc, #4]	; (800ccc0 <generate_type_name+0x60>)
 800ccba:	4618      	mov	r0, r3
 800ccbc:	e7e9      	b.n	800cc92 <generate_type_name+0x32>
 800ccbe:	bf00      	nop
 800ccc0:	08019f48 	.word	0x08019f48
 800ccc4:	08019f5c 	.word	0x08019f5c
 800ccc8:	08019f60 	.word	0x08019f60
 800cccc:	08019f4c 	.word	0x08019f4c
 800ccd0:	0801a4fc 	.word	0x0801a4fc

0800ccd4 <generate_topic_name>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	9000      	str	r0, [sp, #0]
 800ccda:	4614      	mov	r4, r2
 800ccdc:	4608      	mov	r0, r1
 800ccde:	4b06      	ldr	r3, [pc, #24]	; (800ccf8 <generate_topic_name+0x24>)
 800cce0:	4611      	mov	r1, r2
 800cce2:	4a06      	ldr	r2, [pc, #24]	; (800ccfc <generate_topic_name+0x28>)
 800cce4:	f00a fe70 	bl	80179c8 <sniprintf>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	da02      	bge.n	800ccf2 <generate_topic_name+0x1e>
 800ccec:	4284      	cmp	r4, r0
 800ccee:	bfd8      	it	le
 800ccf0:	2000      	movle	r0, #0
 800ccf2:	b002      	add	sp, #8
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	bf00      	nop
 800ccf8:	08019f6c 	.word	0x08019f6c
 800ccfc:	08019f64 	.word	0x08019f64

0800cd00 <is_uxrce_rmw_identifier_valid>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	4604      	mov	r4, r0
 800cd04:	b140      	cbz	r0, 800cd18 <is_uxrce_rmw_identifier_valid+0x18>
 800cd06:	f009 f9d7 	bl	80160b8 <rmw_get_implementation_identifier>
 800cd0a:	4601      	mov	r1, r0
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f7f3 fa8f 	bl	8000230 <strcmp>
 800cd12:	fab0 f080 	clz	r0, r0
 800cd16:	0940      	lsrs	r0, r0, #5
 800cd18:	bd10      	pop	{r4, pc}
 800cd1a:	bf00      	nop

0800cd1c <get_message_typesupport_handle>:
 800cd1c:	6883      	ldr	r3, [r0, #8]
 800cd1e:	4718      	bx	r3

0800cd20 <get_message_typesupport_handle_function>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	4604      	mov	r4, r0
 800cd24:	6800      	ldr	r0, [r0, #0]
 800cd26:	f7f3 fa83 	bl	8000230 <strcmp>
 800cd2a:	2800      	cmp	r0, #0
 800cd2c:	bf0c      	ite	eq
 800cd2e:	4620      	moveq	r0, r4
 800cd30:	2000      	movne	r0, #0
 800cd32:	bd10      	pop	{r4, pc}

0800cd34 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cd34:	f000 b8ea 	b.w	800cf0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>

0800cd38 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800cd38:	f000 ba46 	b.w	800d1c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>

0800cd3c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 800cd3c:	f000 bb22 	b.w	800d384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>

0800cd40 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	4607      	mov	r7, r0
 800cd44:	460e      	mov	r6, r1
 800cd46:	f000 fc25 	bl	800d594 <get_serialized_size_std_msgs__msg__Header>
 800cd4a:	1835      	adds	r5, r6, r0
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	f107 0018 	add.w	r0, r7, #24
 800cd52:	f000 febd 	bl	800dad0 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800cd56:	4405      	add	r5, r0
 800cd58:	4628      	mov	r0, r5
 800cd5a:	2108      	movs	r1, #8
 800cd5c:	f003 f850 	bl	800fe00 <ucdr_alignment>
 800cd60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd64:	4425      	add	r5, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800cd6c:	f000 ff6a 	bl	800dc44 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cd70:	4405      	add	r5, r0
 800cd72:	4628      	mov	r0, r5
 800cd74:	2108      	movs	r1, #8
 800cd76:	f003 f843 	bl	800fe00 <ucdr_alignment>
 800cd7a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd7e:	442c      	add	r4, r5
 800cd80:	4621      	mov	r1, r4
 800cd82:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800cd86:	f000 ff5d 	bl	800dc44 <get_serialized_size_geometry_msgs__msg__Vector3>
 800cd8a:	4404      	add	r4, r0
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	2108      	movs	r1, #8
 800cd90:	f003 f836 	bl	800fe00 <ucdr_alignment>
 800cd94:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 800cd98:	4430      	add	r0, r6
 800cd9a:	4420      	add	r0, r4
 800cd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9e:	bf00      	nop

0800cda0 <get_serialized_size_sensor_msgs__msg__Imu>:
 800cda0:	b108      	cbz	r0, 800cda6 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800cda2:	f7ff bfcd 	b.w	800cd40 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800cda6:	4770      	bx	lr

0800cda8 <_Imu__get_serialized_size>:
 800cda8:	b110      	cbz	r0, 800cdb0 <_Imu__get_serialized_size+0x8>
 800cdaa:	2100      	movs	r1, #0
 800cdac:	f7ff bfc8 	b.w	800cd40 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <_Imu__cdr_deserialize>:
 800cdb4:	b538      	push	{r3, r4, r5, lr}
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	b399      	cbz	r1, 800ce22 <_Imu__cdr_deserialize+0x6e>
 800cdba:	4605      	mov	r5, r0
 800cdbc:	f000 fc6c 	bl	800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cdc0:	6843      	ldr	r3, [r0, #4]
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	4798      	blx	r3
 800cdca:	f000 ff37 	bl	800dc3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800cdce:	6843      	ldr	r3, [r0, #4]
 800cdd0:	f104 0118 	add.w	r1, r4, #24
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	4628      	mov	r0, r5
 800cdd8:	4798      	blx	r3
 800cdda:	2209      	movs	r2, #9
 800cddc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800cde0:	4628      	mov	r0, r5
 800cde2:	f001 faef 	bl	800e3c4 <ucdr_deserialize_array_double>
 800cde6:	f000 ffb9 	bl	800dd5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cdea:	6843      	ldr	r3, [r0, #4]
 800cdec:	f104 0180 	add.w	r1, r4, #128	; 0x80
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	4798      	blx	r3
 800cdf6:	2209      	movs	r2, #9
 800cdf8:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	f001 fae1 	bl	800e3c4 <ucdr_deserialize_array_double>
 800ce02:	f000 ffab 	bl	800dd5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ce06:	6843      	ldr	r3, [r0, #4]
 800ce08:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	4798      	blx	r3
 800ce12:	4628      	mov	r0, r5
 800ce14:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800ce18:	2209      	movs	r2, #9
 800ce1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce1e:	f001 bad1 	b.w	800e3c4 <ucdr_deserialize_array_double>
 800ce22:	4608      	mov	r0, r1
 800ce24:	bd38      	pop	{r3, r4, r5, pc}
 800ce26:	bf00      	nop

0800ce28 <_Imu__cdr_serialize>:
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d035      	beq.n	800ce98 <_Imu__cdr_serialize+0x70>
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	460d      	mov	r5, r1
 800ce30:	4604      	mov	r4, r0
 800ce32:	f000 fc31 	bl	800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ce36:	6843      	ldr	r3, [r0, #4]
 800ce38:	4629      	mov	r1, r5
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	4798      	blx	r3
 800ce40:	f000 fefc 	bl	800dc3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ce44:	6843      	ldr	r3, [r0, #4]
 800ce46:	4629      	mov	r1, r5
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	f104 0018 	add.w	r0, r4, #24
 800ce4e:	4798      	blx	r3
 800ce50:	2209      	movs	r2, #9
 800ce52:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ce56:	4628      	mov	r0, r5
 800ce58:	f001 fa08 	bl	800e26c <ucdr_serialize_array_double>
 800ce5c:	f000 ff7e 	bl	800dd5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ce60:	6843      	ldr	r3, [r0, #4]
 800ce62:	4629      	mov	r1, r5
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800ce6a:	4798      	blx	r3
 800ce6c:	2209      	movs	r2, #9
 800ce6e:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800ce72:	4628      	mov	r0, r5
 800ce74:	f001 f9fa 	bl	800e26c <ucdr_serialize_array_double>
 800ce78:	f000 ff70 	bl	800dd5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ce7c:	6843      	ldr	r3, [r0, #4]
 800ce7e:	4629      	mov	r1, r5
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 800ce86:	4798      	blx	r3
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 800ce8e:	2209      	movs	r2, #9
 800ce90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce94:	f001 b9ea 	b.w	800e26c <ucdr_serialize_array_double>
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop

0800ce9c <max_serialized_size_sensor_msgs__msg__Imu>:
 800ce9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce9e:	2301      	movs	r3, #1
 800cea0:	7003      	strb	r3, [r0, #0]
 800cea2:	4607      	mov	r7, r0
 800cea4:	460e      	mov	r6, r1
 800cea6:	f000 fbed 	bl	800d684 <max_serialized_size_std_msgs__msg__Header>
 800ceaa:	1835      	adds	r5, r6, r0
 800ceac:	4629      	mov	r1, r5
 800ceae:	4638      	mov	r0, r7
 800ceb0:	f000 fea0 	bl	800dbf4 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800ceb4:	4405      	add	r5, r0
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	2108      	movs	r1, #8
 800ceba:	f002 ffa1 	bl	800fe00 <ucdr_alignment>
 800cebe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cec2:	4425      	add	r5, r4
 800cec4:	4629      	mov	r1, r5
 800cec6:	4638      	mov	r0, r7
 800cec8:	f000 ff2c 	bl	800dd24 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cecc:	4405      	add	r5, r0
 800cece:	4628      	mov	r0, r5
 800ced0:	2108      	movs	r1, #8
 800ced2:	f002 ff95 	bl	800fe00 <ucdr_alignment>
 800ced6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ceda:	442c      	add	r4, r5
 800cedc:	4621      	mov	r1, r4
 800cede:	4638      	mov	r0, r7
 800cee0:	f000 ff20 	bl	800dd24 <max_serialized_size_geometry_msgs__msg__Vector3>
 800cee4:	4404      	add	r4, r0
 800cee6:	4620      	mov	r0, r4
 800cee8:	2108      	movs	r1, #8
 800ceea:	f002 ff89 	bl	800fe00 <ucdr_alignment>
 800ceee:	f1c6 0648 	rsb	r6, r6, #72	; 0x48
 800cef2:	4430      	add	r0, r6
 800cef4:	4420      	add	r0, r4
 800cef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cef8 <_Imu__max_serialized_size>:
 800cef8:	b500      	push	{lr}
 800cefa:	b083      	sub	sp, #12
 800cefc:	2100      	movs	r1, #0
 800cefe:	f10d 0007 	add.w	r0, sp, #7
 800cf02:	f7ff ffcb 	bl	800ce9c <max_serialized_size_sensor_msgs__msg__Imu>
 800cf06:	b003      	add	sp, #12
 800cf08:	f85d fb04 	ldr.w	pc, [sp], #4

0800cf0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cf0c:	4800      	ldr	r0, [pc, #0]	; (800cf10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800cf0e:	4770      	bx	lr
 800cf10:	20000028 	.word	0x20000028

0800cf14 <_JointState__max_serialized_size>:
 800cf14:	2301      	movs	r3, #1
 800cf16:	b500      	push	{lr}
 800cf18:	b083      	sub	sp, #12
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	f10d 0007 	add.w	r0, sp, #7
 800cf20:	f88d 3007 	strb.w	r3, [sp, #7]
 800cf24:	f000 fbae 	bl	800d684 <max_serialized_size_std_msgs__msg__Header>
 800cf28:	b003      	add	sp, #12
 800cf2a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf2e:	bf00      	nop

0800cf30 <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 800cf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf34:	4688      	mov	r8, r1
 800cf36:	4606      	mov	r6, r0
 800cf38:	f000 fb2c 	bl	800d594 <get_serialized_size_std_msgs__msg__Header>
 800cf3c:	eb08 0400 	add.w	r4, r8, r0
 800cf40:	4620      	mov	r0, r4
 800cf42:	2104      	movs	r1, #4
 800cf44:	69b7      	ldr	r7, [r6, #24]
 800cf46:	f002 ff5b 	bl	800fe00 <ucdr_alignment>
 800cf4a:	1d03      	adds	r3, r0, #4
 800cf4c:	441c      	add	r4, r3
 800cf4e:	b187      	cbz	r7, 800cf72 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x42>
 800cf50:	2500      	movs	r5, #0
 800cf52:	4620      	mov	r0, r4
 800cf54:	2104      	movs	r1, #4
 800cf56:	f002 ff53 	bl	800fe00 <ucdr_alignment>
 800cf5a:	6973      	ldr	r3, [r6, #20]
 800cf5c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800cf60:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cf64:	3501      	adds	r5, #1
 800cf66:	1903      	adds	r3, r0, r4
 800cf68:	6854      	ldr	r4, [r2, #4]
 800cf6a:	3305      	adds	r3, #5
 800cf6c:	42af      	cmp	r7, r5
 800cf6e:	441c      	add	r4, r3
 800cf70:	d1ef      	bne.n	800cf52 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 800cf72:	2104      	movs	r1, #4
 800cf74:	4620      	mov	r0, r4
 800cf76:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800cf78:	f002 ff42 	bl	800fe00 <ucdr_alignment>
 800cf7c:	4404      	add	r4, r0
 800cf7e:	3404      	adds	r4, #4
 800cf80:	4620      	mov	r0, r4
 800cf82:	2108      	movs	r1, #8
 800cf84:	f002 ff3c 	bl	800fe00 <ucdr_alignment>
 800cf88:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800cf8c:	442c      	add	r4, r5
 800cf8e:	4620      	mov	r0, r4
 800cf90:	2104      	movs	r1, #4
 800cf92:	6b37      	ldr	r7, [r6, #48]	; 0x30
 800cf94:	f002 ff34 	bl	800fe00 <ucdr_alignment>
 800cf98:	1d05      	adds	r5, r0, #4
 800cf9a:	4425      	add	r5, r4
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	2108      	movs	r1, #8
 800cfa0:	f002 ff2e 	bl	800fe00 <ucdr_alignment>
 800cfa4:	eb00 04c7 	add.w	r4, r0, r7, lsl #3
 800cfa8:	4425      	add	r5, r4
 800cfaa:	4628      	mov	r0, r5
 800cfac:	2104      	movs	r1, #4
 800cfae:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
 800cfb0:	f002 ff26 	bl	800fe00 <ucdr_alignment>
 800cfb4:	1d04      	adds	r4, r0, #4
 800cfb6:	442c      	add	r4, r5
 800cfb8:	4620      	mov	r0, r4
 800cfba:	2108      	movs	r1, #8
 800cfbc:	f002 ff20 	bl	800fe00 <ucdr_alignment>
 800cfc0:	ebc8 08c6 	rsb	r8, r8, r6, lsl #3
 800cfc4:	4440      	add	r0, r8
 800cfc6:	4420      	add	r0, r4
 800cfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfcc <get_serialized_size_sensor_msgs__msg__JointState>:
 800cfcc:	b108      	cbz	r0, 800cfd2 <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 800cfce:	f7ff bfaf 	b.w	800cf30 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800cfd2:	4770      	bx	lr

0800cfd4 <_JointState__get_serialized_size>:
 800cfd4:	b110      	cbz	r0, 800cfdc <_JointState__get_serialized_size+0x8>
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	f7ff bfaa 	b.w	800cf30 <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop

0800cfe0 <_JointState__cdr_deserialize>:
 800cfe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	2900      	cmp	r1, #0
 800cfea:	d073      	beq.n	800d0d4 <_JointState__cdr_deserialize+0xf4>
 800cfec:	4606      	mov	r6, r0
 800cfee:	f000 fb53 	bl	800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cff2:	6843      	ldr	r3, [r0, #4]
 800cff4:	4629      	mov	r1, r5
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	4630      	mov	r0, r6
 800cffa:	4798      	blx	r3
 800cffc:	4669      	mov	r1, sp
 800cffe:	4630      	mov	r0, r6
 800d000:	f001 fe02 	bl	800ec08 <ucdr_deserialize_uint32_t>
 800d004:	9b00      	ldr	r3, [sp, #0]
 800d006:	69ea      	ldr	r2, [r5, #28]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d34d      	bcc.n	800d0a8 <_JointState__cdr_deserialize+0xc8>
 800d00c:	61ab      	str	r3, [r5, #24]
 800d00e:	f10d 0804 	add.w	r8, sp, #4
 800d012:	b320      	cbz	r0, 800d05e <_JointState__cdr_deserialize+0x7e>
 800d014:	2400      	movs	r4, #0
 800d016:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d01a:	429c      	cmp	r4, r3
 800d01c:	f10d 0804 	add.w	r8, sp, #4
 800d020:	ea4f 0781 	mov.w	r7, r1, lsl #2
 800d024:	d21b      	bcs.n	800d05e <_JointState__cdr_deserialize+0x7e>
 800d026:	696a      	ldr	r2, [r5, #20]
 800d028:	4643      	mov	r3, r8
 800d02a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800d02e:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800d032:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d036:	4630      	mov	r0, r6
 800d038:	464a      	mov	r2, r9
 800d03a:	f002 ff61 	bl	800ff00 <ucdr_deserialize_sequence_char>
 800d03e:	2800      	cmp	r0, #0
 800d040:	d037      	beq.n	800d0b2 <_JointState__cdr_deserialize+0xd2>
 800d042:	9901      	ldr	r1, [sp, #4]
 800d044:	b101      	cbz	r1, 800d048 <_JointState__cdr_deserialize+0x68>
 800d046:	3901      	subs	r1, #1
 800d048:	696a      	ldr	r2, [r5, #20]
 800d04a:	9b00      	ldr	r3, [sp, #0]
 800d04c:	4417      	add	r7, r2
 800d04e:	3401      	adds	r4, #1
 800d050:	6079      	str	r1, [r7, #4]
 800d052:	429c      	cmp	r4, r3
 800d054:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d058:	ea4f 0781 	mov.w	r7, r1, lsl #2
 800d05c:	d3e3      	bcc.n	800d026 <_JointState__cdr_deserialize+0x46>
 800d05e:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800d060:	4643      	mov	r3, r8
 800d062:	4622      	mov	r2, r4
 800d064:	4630      	mov	r0, r6
 800d066:	6a29      	ldr	r1, [r5, #32]
 800d068:	f002 fffa 	bl	8010060 <ucdr_deserialize_sequence_double>
 800d06c:	9b01      	ldr	r3, [sp, #4]
 800d06e:	2800      	cmp	r0, #0
 800d070:	d055      	beq.n	800d11e <_JointState__cdr_deserialize+0x13e>
 800d072:	626b      	str	r3, [r5, #36]	; 0x24
 800d074:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800d076:	4643      	mov	r3, r8
 800d078:	4622      	mov	r2, r4
 800d07a:	4630      	mov	r0, r6
 800d07c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800d07e:	f002 ffef 	bl	8010060 <ucdr_deserialize_sequence_double>
 800d082:	9b01      	ldr	r3, [sp, #4]
 800d084:	2800      	cmp	r0, #0
 800d086:	d03a      	beq.n	800d0fe <_JointState__cdr_deserialize+0x11e>
 800d088:	632b      	str	r3, [r5, #48]	; 0x30
 800d08a:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800d08c:	4643      	mov	r3, r8
 800d08e:	463a      	mov	r2, r7
 800d090:	4630      	mov	r0, r6
 800d092:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800d094:	f002 ffe4 	bl	8010060 <ucdr_deserialize_sequence_double>
 800d098:	9b01      	ldr	r3, [sp, #4]
 800d09a:	4604      	mov	r4, r0
 800d09c:	b1f8      	cbz	r0, 800d0de <_JointState__cdr_deserialize+0xfe>
 800d09e:	4620      	mov	r0, r4
 800d0a0:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d0a2:	b003      	add	sp, #12
 800d0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0a8:	2400      	movs	r4, #0
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	b003      	add	sp, #12
 800d0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0b2:	9b01      	ldr	r3, [sp, #4]
 800d0b4:	4599      	cmp	r9, r3
 800d0b6:	d2d2      	bcs.n	800d05e <_JointState__cdr_deserialize+0x7e>
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	7571      	strb	r1, [r6, #21]
 800d0bc:	696b      	ldr	r3, [r5, #20]
 800d0be:	75b0      	strb	r0, [r6, #22]
 800d0c0:	441f      	add	r7, r3
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f002 feb3 	bl	800fe30 <ucdr_align_to>
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	9901      	ldr	r1, [sp, #4]
 800d0ce:	f002 fee5 	bl	800fe9c <ucdr_advance_buffer>
 800d0d2:	e7c4      	b.n	800d05e <_JointState__cdr_deserialize+0x7e>
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	b003      	add	sp, #12
 800d0da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0de:	429f      	cmp	r7, r3
 800d0e0:	d2e3      	bcs.n	800d0aa <_JointState__cdr_deserialize+0xca>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	75b0      	strb	r0, [r6, #22]
 800d0e6:	7573      	strb	r3, [r6, #21]
 800d0e8:	2108      	movs	r1, #8
 800d0ea:	63e8      	str	r0, [r5, #60]	; 0x3c
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f002 fe9f 	bl	800fe30 <ucdr_align_to>
 800d0f2:	9901      	ldr	r1, [sp, #4]
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	00c9      	lsls	r1, r1, #3
 800d0f8:	f002 fed0 	bl	800fe9c <ucdr_advance_buffer>
 800d0fc:	e7d5      	b.n	800d0aa <_JointState__cdr_deserialize+0xca>
 800d0fe:	429c      	cmp	r4, r3
 800d100:	d2c3      	bcs.n	800d08a <_JointState__cdr_deserialize+0xaa>
 800d102:	2301      	movs	r3, #1
 800d104:	75b0      	strb	r0, [r6, #22]
 800d106:	7573      	strb	r3, [r6, #21]
 800d108:	2108      	movs	r1, #8
 800d10a:	6328      	str	r0, [r5, #48]	; 0x30
 800d10c:	4630      	mov	r0, r6
 800d10e:	f002 fe8f 	bl	800fe30 <ucdr_align_to>
 800d112:	9901      	ldr	r1, [sp, #4]
 800d114:	4630      	mov	r0, r6
 800d116:	00c9      	lsls	r1, r1, #3
 800d118:	f002 fec0 	bl	800fe9c <ucdr_advance_buffer>
 800d11c:	e7b5      	b.n	800d08a <_JointState__cdr_deserialize+0xaa>
 800d11e:	429c      	cmp	r4, r3
 800d120:	d2a8      	bcs.n	800d074 <_JointState__cdr_deserialize+0x94>
 800d122:	2301      	movs	r3, #1
 800d124:	75b0      	strb	r0, [r6, #22]
 800d126:	7573      	strb	r3, [r6, #21]
 800d128:	2108      	movs	r1, #8
 800d12a:	6268      	str	r0, [r5, #36]	; 0x24
 800d12c:	4630      	mov	r0, r6
 800d12e:	f002 fe7f 	bl	800fe30 <ucdr_align_to>
 800d132:	9901      	ldr	r1, [sp, #4]
 800d134:	4630      	mov	r0, r6
 800d136:	00c9      	lsls	r1, r1, #3
 800d138:	f002 feb0 	bl	800fe9c <ucdr_advance_buffer>
 800d13c:	e79a      	b.n	800d074 <_JointState__cdr_deserialize+0x94>
 800d13e:	bf00      	nop

0800d140 <_JointState__cdr_serialize>:
 800d140:	2800      	cmp	r0, #0
 800d142:	d040      	beq.n	800d1c6 <_JointState__cdr_serialize+0x86>
 800d144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d148:	4688      	mov	r8, r1
 800d14a:	4607      	mov	r7, r0
 800d14c:	f000 faa4 	bl	800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d150:	6843      	ldr	r3, [r0, #4]
 800d152:	4641      	mov	r1, r8
 800d154:	4638      	mov	r0, r7
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	4798      	blx	r3
 800d15a:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800d15e:	4640      	mov	r0, r8
 800d160:	4649      	mov	r1, r9
 800d162:	f001 fc21 	bl	800e9a8 <ucdr_serialize_uint32_t>
 800d166:	b1e8      	cbz	r0, 800d1a4 <_JointState__cdr_serialize+0x64>
 800d168:	f1b9 0f00 	cmp.w	r9, #0
 800d16c:	d01a      	beq.n	800d1a4 <_JointState__cdr_serialize+0x64>
 800d16e:	2400      	movs	r4, #0
 800d170:	e00c      	b.n	800d18c <_JointState__cdr_serialize+0x4c>
 800d172:	4630      	mov	r0, r6
 800d174:	f7f3 f866 	bl	8000244 <strlen>
 800d178:	1c42      	adds	r2, r0, #1
 800d17a:	6068      	str	r0, [r5, #4]
 800d17c:	4631      	mov	r1, r6
 800d17e:	4640      	mov	r0, r8
 800d180:	f002 feac 	bl	800fedc <ucdr_serialize_sequence_char>
 800d184:	3401      	adds	r4, #1
 800d186:	b168      	cbz	r0, 800d1a4 <_JointState__cdr_serialize+0x64>
 800d188:	45a1      	cmp	r9, r4
 800d18a:	d00b      	beq.n	800d1a4 <_JointState__cdr_serialize+0x64>
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800d192:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d196:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d19a:	2e00      	cmp	r6, #0
 800d19c:	d1e9      	bne.n	800d172 <_JointState__cdr_serialize+0x32>
 800d19e:	4632      	mov	r2, r6
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	e7ea      	b.n	800d17a <_JointState__cdr_serialize+0x3a>
 800d1a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	f002 ff47 	bl	801003c <ucdr_serialize_sequence_double>
 800d1ae:	e9d7 120b 	ldrd	r1, r2, [r7, #44]	; 0x2c
 800d1b2:	4640      	mov	r0, r8
 800d1b4:	f002 ff42 	bl	801003c <ucdr_serialize_sequence_double>
 800d1b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d1bc:	4640      	mov	r0, r8
 800d1be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c2:	f002 bf3b 	b.w	801003c <ucdr_serialize_sequence_double>
 800d1c6:	4770      	bx	lr

0800d1c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800d1c8:	4800      	ldr	r0, [pc, #0]	; (800d1cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800d1ca:	4770      	bx	lr
 800d1cc:	20000050 	.word	0x20000050

0800d1d0 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>:
 800d1d0:	b570      	push	{r4, r5, r6, lr}
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	4606      	mov	r6, r0
 800d1d6:	f000 f9dd 	bl	800d594 <get_serialized_size_std_msgs__msg__Header>
 800d1da:	1825      	adds	r5, r4, r0
 800d1dc:	4629      	mov	r1, r5
 800d1de:	f106 0014 	add.w	r0, r6, #20
 800d1e2:	f000 f8d3 	bl	800d38c <get_serialized_size_sensor_msgs__msg__NavSatStatus>
 800d1e6:	4405      	add	r5, r0
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	2108      	movs	r1, #8
 800d1ec:	f002 fe08 	bl	800fe00 <ucdr_alignment>
 800d1f0:	f100 0608 	add.w	r6, r0, #8
 800d1f4:	4435      	add	r5, r6
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	2108      	movs	r1, #8
 800d1fa:	f002 fe01 	bl	800fe00 <ucdr_alignment>
 800d1fe:	f100 0608 	add.w	r6, r0, #8
 800d202:	442e      	add	r6, r5
 800d204:	4630      	mov	r0, r6
 800d206:	2108      	movs	r1, #8
 800d208:	f002 fdfa 	bl	800fe00 <ucdr_alignment>
 800d20c:	f100 0508 	add.w	r5, r0, #8
 800d210:	442e      	add	r6, r5
 800d212:	4630      	mov	r0, r6
 800d214:	2108      	movs	r1, #8
 800d216:	f002 fdf3 	bl	800fe00 <ucdr_alignment>
 800d21a:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800d21e:	4435      	add	r5, r6
 800d220:	4628      	mov	r0, r5
 800d222:	2101      	movs	r1, #1
 800d224:	f002 fdec 	bl	800fe00 <ucdr_alignment>
 800d228:	f1c4 0401 	rsb	r4, r4, #1
 800d22c:	4420      	add	r0, r4
 800d22e:	4428      	add	r0, r5
 800d230:	bd70      	pop	{r4, r5, r6, pc}
 800d232:	bf00      	nop

0800d234 <get_serialized_size_sensor_msgs__msg__NavSatFix>:
 800d234:	b108      	cbz	r0, 800d23a <get_serialized_size_sensor_msgs__msg__NavSatFix+0x6>
 800d236:	f7ff bfcb 	b.w	800d1d0 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 800d23a:	4770      	bx	lr

0800d23c <_NavSatFix__get_serialized_size>:
 800d23c:	b110      	cbz	r0, 800d244 <_NavSatFix__get_serialized_size+0x8>
 800d23e:	2100      	movs	r1, #0
 800d240:	f7ff bfc6 	b.w	800d1d0 <get_serialized_size_sensor_msgs__msg__NavSatFix.part.0>
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop

0800d248 <_NavSatFix__cdr_deserialize>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	460c      	mov	r4, r1
 800d24c:	b359      	cbz	r1, 800d2a6 <_NavSatFix__cdr_deserialize+0x5e>
 800d24e:	4605      	mov	r5, r0
 800d250:	f000 fa22 	bl	800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d254:	6843      	ldr	r3, [r0, #4]
 800d256:	4621      	mov	r1, r4
 800d258:	68db      	ldr	r3, [r3, #12]
 800d25a:	4628      	mov	r0, r5
 800d25c:	4798      	blx	r3
 800d25e:	f000 f8f9 	bl	800d454 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 800d262:	6843      	ldr	r3, [r0, #4]
 800d264:	f104 0114 	add.w	r1, r4, #20
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	4628      	mov	r0, r5
 800d26c:	4798      	blx	r3
 800d26e:	f104 0118 	add.w	r1, r4, #24
 800d272:	4628      	mov	r0, r5
 800d274:	f002 fbd6 	bl	800fa24 <ucdr_deserialize_double>
 800d278:	f104 0120 	add.w	r1, r4, #32
 800d27c:	4628      	mov	r0, r5
 800d27e:	f002 fbd1 	bl	800fa24 <ucdr_deserialize_double>
 800d282:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800d286:	4628      	mov	r0, r5
 800d288:	f002 fbcc 	bl	800fa24 <ucdr_deserialize_double>
 800d28c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d290:	4628      	mov	r0, r5
 800d292:	2209      	movs	r2, #9
 800d294:	f001 f896 	bl	800e3c4 <ucdr_deserialize_array_double>
 800d298:	4628      	mov	r0, r5
 800d29a:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800d29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2a2:	f001 b97d 	b.w	800e5a0 <ucdr_deserialize_uint8_t>
 800d2a6:	4608      	mov	r0, r1
 800d2a8:	bd38      	pop	{r3, r4, r5, pc}
 800d2aa:	bf00      	nop

0800d2ac <_NavSatFix__cdr_serialize>:
 800d2ac:	b368      	cbz	r0, 800d30a <_NavSatFix__cdr_serialize+0x5e>
 800d2ae:	b538      	push	{r3, r4, r5, lr}
 800d2b0:	460d      	mov	r5, r1
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f000 f9f0 	bl	800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d2b8:	6843      	ldr	r3, [r0, #4]
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	4798      	blx	r3
 800d2c2:	f000 f8c7 	bl	800d454 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>
 800d2c6:	6843      	ldr	r3, [r0, #4]
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	f104 0014 	add.w	r0, r4, #20
 800d2d0:	4798      	blx	r3
 800d2d2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	f002 fa02 	bl	800f6e0 <ucdr_serialize_double>
 800d2dc:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f002 f9fd 	bl	800f6e0 <ucdr_serialize_double>
 800d2e6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f002 f9f8 	bl	800f6e0 <ucdr_serialize_double>
 800d2f0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d2f4:	4628      	mov	r0, r5
 800d2f6:	2209      	movs	r2, #9
 800d2f8:	f000 ffb8 	bl	800e26c <ucdr_serialize_array_double>
 800d2fc:	4628      	mov	r0, r5
 800d2fe:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
 800d302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d306:	f001 b935 	b.w	800e574 <ucdr_serialize_uint8_t>
 800d30a:	4770      	bx	lr

0800d30c <max_serialized_size_sensor_msgs__msg__NavSatFix>:
 800d30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d30e:	2701      	movs	r7, #1
 800d310:	7007      	strb	r7, [r0, #0]
 800d312:	460c      	mov	r4, r1
 800d314:	4606      	mov	r6, r0
 800d316:	f000 f9b5 	bl	800d684 <max_serialized_size_std_msgs__msg__Header>
 800d31a:	1825      	adds	r5, r4, r0
 800d31c:	4629      	mov	r1, r5
 800d31e:	4630      	mov	r0, r6
 800d320:	f000 f884 	bl	800d42c <max_serialized_size_sensor_msgs__msg__NavSatStatus>
 800d324:	4405      	add	r5, r0
 800d326:	4628      	mov	r0, r5
 800d328:	2108      	movs	r1, #8
 800d32a:	f002 fd69 	bl	800fe00 <ucdr_alignment>
 800d32e:	f100 0608 	add.w	r6, r0, #8
 800d332:	4435      	add	r5, r6
 800d334:	4628      	mov	r0, r5
 800d336:	2108      	movs	r1, #8
 800d338:	f002 fd62 	bl	800fe00 <ucdr_alignment>
 800d33c:	f100 0608 	add.w	r6, r0, #8
 800d340:	442e      	add	r6, r5
 800d342:	4630      	mov	r0, r6
 800d344:	2108      	movs	r1, #8
 800d346:	f002 fd5b 	bl	800fe00 <ucdr_alignment>
 800d34a:	f100 0508 	add.w	r5, r0, #8
 800d34e:	442e      	add	r6, r5
 800d350:	4630      	mov	r0, r6
 800d352:	2108      	movs	r1, #8
 800d354:	f002 fd54 	bl	800fe00 <ucdr_alignment>
 800d358:	f100 0548 	add.w	r5, r0, #72	; 0x48
 800d35c:	4435      	add	r5, r6
 800d35e:	4639      	mov	r1, r7
 800d360:	4628      	mov	r0, r5
 800d362:	f002 fd4d 	bl	800fe00 <ucdr_alignment>
 800d366:	1b3c      	subs	r4, r7, r4
 800d368:	4420      	add	r0, r4
 800d36a:	4428      	add	r0, r5
 800d36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d36e:	bf00      	nop

0800d370 <_NavSatFix__max_serialized_size>:
 800d370:	b500      	push	{lr}
 800d372:	b083      	sub	sp, #12
 800d374:	2100      	movs	r1, #0
 800d376:	f10d 0007 	add.w	r0, sp, #7
 800d37a:	f7ff ffc7 	bl	800d30c <max_serialized_size_sensor_msgs__msg__NavSatFix>
 800d37e:	b003      	add	sp, #12
 800d380:	f85d fb04 	ldr.w	pc, [sp], #4

0800d384 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix>:
 800d384:	4800      	ldr	r0, [pc, #0]	; (800d388 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatFix+0x4>)
 800d386:	4770      	bx	lr
 800d388:	20000078 	.word	0x20000078

0800d38c <get_serialized_size_sensor_msgs__msg__NavSatStatus>:
 800d38c:	b180      	cbz	r0, 800d3b0 <get_serialized_size_sensor_msgs__msg__NavSatStatus+0x24>
 800d38e:	b538      	push	{r3, r4, r5, lr}
 800d390:	460d      	mov	r5, r1
 800d392:	2101      	movs	r1, #1
 800d394:	4628      	mov	r0, r5
 800d396:	f002 fd33 	bl	800fe00 <ucdr_alignment>
 800d39a:	1c6c      	adds	r4, r5, #1
 800d39c:	4404      	add	r4, r0
 800d39e:	4620      	mov	r0, r4
 800d3a0:	2102      	movs	r1, #2
 800d3a2:	f002 fd2d 	bl	800fe00 <ucdr_alignment>
 800d3a6:	f1c5 0502 	rsb	r5, r5, #2
 800d3aa:	4428      	add	r0, r5
 800d3ac:	4420      	add	r0, r4
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop

0800d3b4 <_NavSatStatus__cdr_deserialize>:
 800d3b4:	b538      	push	{r3, r4, r5, lr}
 800d3b6:	460c      	mov	r4, r1
 800d3b8:	b141      	cbz	r1, 800d3cc <_NavSatStatus__cdr_deserialize+0x18>
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	f001 fe30 	bl	800f020 <ucdr_deserialize_int8_t>
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	1ca1      	adds	r1, r4, #2
 800d3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3c8:	f001 ba00 	b.w	800e7cc <ucdr_deserialize_uint16_t>
 800d3cc:	4608      	mov	r0, r1
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}

0800d3d0 <_NavSatStatus__cdr_serialize>:
 800d3d0:	b168      	cbz	r0, 800d3ee <_NavSatStatus__cdr_serialize+0x1e>
 800d3d2:	b538      	push	{r3, r4, r5, lr}
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	f990 1000 	ldrsb.w	r1, [r0]
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f001 fe09 	bl	800eff4 <ucdr_serialize_int8_t>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	8861      	ldrh	r1, [r4, #2]
 800d3e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ea:	f001 b8ef 	b.w	800e5cc <ucdr_serialize_uint16_t>
 800d3ee:	4770      	bx	lr

0800d3f0 <_NavSatStatus__get_serialized_size>:
 800d3f0:	b160      	cbz	r0, 800d40c <_NavSatStatus__get_serialized_size+0x1c>
 800d3f2:	b510      	push	{r4, lr}
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	f002 fd02 	bl	800fe00 <ucdr_alignment>
 800d3fc:	1c44      	adds	r4, r0, #1
 800d3fe:	4620      	mov	r0, r4
 800d400:	2102      	movs	r1, #2
 800d402:	f002 fcfd 	bl	800fe00 <ucdr_alignment>
 800d406:	3002      	adds	r0, #2
 800d408:	4420      	add	r0, r4
 800d40a:	bd10      	pop	{r4, pc}
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop

0800d410 <_NavSatStatus__max_serialized_size>:
 800d410:	b510      	push	{r4, lr}
 800d412:	2101      	movs	r1, #1
 800d414:	2000      	movs	r0, #0
 800d416:	f002 fcf3 	bl	800fe00 <ucdr_alignment>
 800d41a:	1c44      	adds	r4, r0, #1
 800d41c:	4620      	mov	r0, r4
 800d41e:	2102      	movs	r1, #2
 800d420:	f002 fcee 	bl	800fe00 <ucdr_alignment>
 800d424:	3002      	adds	r0, #2
 800d426:	4420      	add	r0, r4
 800d428:	bd10      	pop	{r4, pc}
 800d42a:	bf00      	nop

0800d42c <max_serialized_size_sensor_msgs__msg__NavSatStatus>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4603      	mov	r3, r0
 800d430:	460c      	mov	r4, r1
 800d432:	2101      	movs	r1, #1
 800d434:	4620      	mov	r0, r4
 800d436:	7019      	strb	r1, [r3, #0]
 800d438:	f002 fce2 	bl	800fe00 <ucdr_alignment>
 800d43c:	1c65      	adds	r5, r4, #1
 800d43e:	4405      	add	r5, r0
 800d440:	4628      	mov	r0, r5
 800d442:	2102      	movs	r1, #2
 800d444:	f002 fcdc 	bl	800fe00 <ucdr_alignment>
 800d448:	f1c4 0402 	rsb	r4, r4, #2
 800d44c:	4420      	add	r0, r4
 800d44e:	4428      	add	r0, r5
 800d450:	bd38      	pop	{r3, r4, r5, pc}
 800d452:	bf00      	nop

0800d454 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus>:
 800d454:	4800      	ldr	r0, [pc, #0]	; (800d458 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__NavSatStatus+0x4>)
 800d456:	4770      	bx	lr
 800d458:	200000a0 	.word	0x200000a0

0800d45c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d45c:	f000 b888 	b.w	800d570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>

0800d460 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 800d460:	f000 ba48 	b.w	800d8f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>

0800d464 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800d464:	f000 bac8 	b.w	800d9f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>

0800d468 <_Float32MultiArray__max_serialized_size>:
 800d468:	2301      	movs	r3, #1
 800d46a:	b500      	push	{lr}
 800d46c:	b083      	sub	sp, #12
 800d46e:	2100      	movs	r1, #0
 800d470:	f10d 0007 	add.w	r0, sp, #7
 800d474:	f88d 3007 	strb.w	r3, [sp, #7]
 800d478:	f000 f9aa 	bl	800d7d0 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d47c:	b003      	add	sp, #12
 800d47e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d482:	bf00      	nop

0800d484 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	4604      	mov	r4, r0
 800d488:	b190      	cbz	r0, 800d4b0 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x2c>
 800d48a:	460d      	mov	r5, r1
 800d48c:	f000 f944 	bl	800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d490:	182e      	adds	r6, r5, r0
 800d492:	2104      	movs	r1, #4
 800d494:	4630      	mov	r0, r6
 800d496:	6967      	ldr	r7, [r4, #20]
 800d498:	f002 fcb2 	bl	800fe00 <ucdr_alignment>
 800d49c:	1d04      	adds	r4, r0, #4
 800d49e:	4434      	add	r4, r6
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	2104      	movs	r1, #4
 800d4a4:	f002 fcac 	bl	800fe00 <ucdr_alignment>
 800d4a8:	ebc5 0587 	rsb	r5, r5, r7, lsl #2
 800d4ac:	4428      	add	r0, r5
 800d4ae:	4420      	add	r0, r4
 800d4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b2:	bf00      	nop

0800d4b4 <_Float32MultiArray__cdr_deserialize>:
 800d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	b1d1      	cbz	r1, 800d4f2 <_Float32MultiArray__cdr_deserialize+0x3e>
 800d4bc:	4606      	mov	r6, r0
 800d4be:	f000 f991 	bl	800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d4c2:	6843      	ldr	r3, [r0, #4]
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4798      	blx	r3
 800d4cc:	69a7      	ldr	r7, [r4, #24]
 800d4ce:	ab01      	add	r3, sp, #4
 800d4d0:	463a      	mov	r2, r7
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	6921      	ldr	r1, [r4, #16]
 800d4d6:	f002 fd97 	bl	8010008 <ucdr_deserialize_sequence_float>
 800d4da:	9b01      	ldr	r3, [sp, #4]
 800d4dc:	4605      	mov	r5, r0
 800d4de:	b920      	cbnz	r0, 800d4ea <_Float32MultiArray__cdr_deserialize+0x36>
 800d4e0:	429f      	cmp	r7, r3
 800d4e2:	d30a      	bcc.n	800d4fa <_Float32MultiArray__cdr_deserialize+0x46>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	b003      	add	sp, #12
 800d4e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	6163      	str	r3, [r4, #20]
 800d4ee:	b003      	add	sp, #12
 800d4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4f2:	460d      	mov	r5, r1
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	b003      	add	sp, #12
 800d4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	75b0      	strb	r0, [r6, #22]
 800d4fe:	7573      	strb	r3, [r6, #21]
 800d500:	2104      	movs	r1, #4
 800d502:	6160      	str	r0, [r4, #20]
 800d504:	4630      	mov	r0, r6
 800d506:	f002 fc93 	bl	800fe30 <ucdr_align_to>
 800d50a:	9901      	ldr	r1, [sp, #4]
 800d50c:	4630      	mov	r0, r6
 800d50e:	0089      	lsls	r1, r1, #2
 800d510:	f002 fcc4 	bl	800fe9c <ucdr_advance_buffer>
 800d514:	4628      	mov	r0, r5
 800d516:	b003      	add	sp, #12
 800d518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51a:	bf00      	nop

0800d51c <_Float32MultiArray__cdr_serialize>:
 800d51c:	b180      	cbz	r0, 800d540 <_Float32MultiArray__cdr_serialize+0x24>
 800d51e:	b538      	push	{r3, r4, r5, lr}
 800d520:	460d      	mov	r5, r1
 800d522:	4604      	mov	r4, r0
 800d524:	f000 f95e 	bl	800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d528:	6843      	ldr	r3, [r0, #4]
 800d52a:	4629      	mov	r1, r5
 800d52c:	4620      	mov	r0, r4
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	4798      	blx	r3
 800d532:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d536:	4628      	mov	r0, r5
 800d538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d53c:	f002 bd52 	b.w	800ffe4 <ucdr_serialize_sequence_float>
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop

0800d544 <_Float32MultiArray__get_serialized_size>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4604      	mov	r4, r0
 800d548:	b180      	cbz	r0, 800d56c <_Float32MultiArray__get_serialized_size+0x28>
 800d54a:	2100      	movs	r1, #0
 800d54c:	f000 f8e4 	bl	800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d550:	2104      	movs	r1, #4
 800d552:	6965      	ldr	r5, [r4, #20]
 800d554:	4604      	mov	r4, r0
 800d556:	f002 fc53 	bl	800fe00 <ucdr_alignment>
 800d55a:	4404      	add	r4, r0
 800d55c:	3404      	adds	r4, #4
 800d55e:	4620      	mov	r0, r4
 800d560:	2104      	movs	r1, #4
 800d562:	f002 fc4d 	bl	800fe00 <ucdr_alignment>
 800d566:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800d56a:	4420      	add	r0, r4
 800d56c:	bd38      	pop	{r3, r4, r5, pc}
 800d56e:	bf00      	nop

0800d570 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d570:	4800      	ldr	r0, [pc, #0]	; (800d574 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800d572:	4770      	bx	lr
 800d574:	200000c8 	.word	0x200000c8

0800d578 <_Header__max_serialized_size>:
 800d578:	2301      	movs	r3, #1
 800d57a:	b500      	push	{lr}
 800d57c:	b083      	sub	sp, #12
 800d57e:	2100      	movs	r1, #0
 800d580:	f10d 0007 	add.w	r0, sp, #7
 800d584:	f88d 3007 	strb.w	r3, [sp, #7]
 800d588:	f000 fa8a 	bl	800daa0 <max_serialized_size_builtin_interfaces__msg__Time>
 800d58c:	b003      	add	sp, #12
 800d58e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d592:	bf00      	nop

0800d594 <get_serialized_size_std_msgs__msg__Header>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	4605      	mov	r5, r0
 800d598:	b168      	cbz	r0, 800d5b6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800d59a:	460c      	mov	r4, r1
 800d59c:	f000 fa30 	bl	800da00 <get_serialized_size_builtin_interfaces__msg__Time>
 800d5a0:	1826      	adds	r6, r4, r0
 800d5a2:	2104      	movs	r1, #4
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f002 fc2b 	bl	800fe00 <ucdr_alignment>
 800d5aa:	68e9      	ldr	r1, [r5, #12]
 800d5ac:	f1c4 0405 	rsb	r4, r4, #5
 800d5b0:	440c      	add	r4, r1
 800d5b2:	4404      	add	r4, r0
 800d5b4:	19a0      	adds	r0, r4, r6
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}

0800d5b8 <_Header__cdr_deserialize>:
 800d5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	b083      	sub	sp, #12
 800d5be:	b1e1      	cbz	r1, 800d5fa <_Header__cdr_deserialize+0x42>
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	f000 fa81 	bl	800dac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d5c6:	6843      	ldr	r3, [r0, #4]
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	4798      	blx	r3
 800d5d0:	6927      	ldr	r7, [r4, #16]
 800d5d2:	ab01      	add	r3, sp, #4
 800d5d4:	463a      	mov	r2, r7
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	68a1      	ldr	r1, [r4, #8]
 800d5da:	f002 fc91 	bl	800ff00 <ucdr_deserialize_sequence_char>
 800d5de:	9b01      	ldr	r3, [sp, #4]
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	b920      	cbnz	r0, 800d5ee <_Header__cdr_deserialize+0x36>
 800d5e4:	429f      	cmp	r7, r3
 800d5e6:	d30c      	bcc.n	800d602 <_Header__cdr_deserialize+0x4a>
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	b003      	add	sp, #12
 800d5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ee:	b103      	cbz	r3, 800d5f2 <_Header__cdr_deserialize+0x3a>
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	60e3      	str	r3, [r4, #12]
 800d5f6:	b003      	add	sp, #12
 800d5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	b003      	add	sp, #12
 800d600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d602:	2101      	movs	r1, #1
 800d604:	75b0      	strb	r0, [r6, #22]
 800d606:	7571      	strb	r1, [r6, #21]
 800d608:	60e0      	str	r0, [r4, #12]
 800d60a:	4630      	mov	r0, r6
 800d60c:	f002 fc10 	bl	800fe30 <ucdr_align_to>
 800d610:	4630      	mov	r0, r6
 800d612:	9901      	ldr	r1, [sp, #4]
 800d614:	f002 fc42 	bl	800fe9c <ucdr_advance_buffer>
 800d618:	4628      	mov	r0, r5
 800d61a:	b003      	add	sp, #12
 800d61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d61e:	bf00      	nop

0800d620 <_Header__cdr_serialize>:
 800d620:	b1f8      	cbz	r0, 800d662 <_Header__cdr_serialize+0x42>
 800d622:	b570      	push	{r4, r5, r6, lr}
 800d624:	4604      	mov	r4, r0
 800d626:	460d      	mov	r5, r1
 800d628:	f000 fa4e 	bl	800dac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d62c:	6843      	ldr	r3, [r0, #4]
 800d62e:	4629      	mov	r1, r5
 800d630:	4620      	mov	r0, r4
 800d632:	689b      	ldr	r3, [r3, #8]
 800d634:	4798      	blx	r3
 800d636:	68a6      	ldr	r6, [r4, #8]
 800d638:	b156      	cbz	r6, 800d650 <_Header__cdr_serialize+0x30>
 800d63a:	4630      	mov	r0, r6
 800d63c:	f7f2 fe02 	bl	8000244 <strlen>
 800d640:	4631      	mov	r1, r6
 800d642:	60e0      	str	r0, [r4, #12]
 800d644:	1c42      	adds	r2, r0, #1
 800d646:	4628      	mov	r0, r5
 800d648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d64c:	f002 bc46 	b.w	800fedc <ucdr_serialize_sequence_char>
 800d650:	4630      	mov	r0, r6
 800d652:	4632      	mov	r2, r6
 800d654:	60e0      	str	r0, [r4, #12]
 800d656:	4631      	mov	r1, r6
 800d658:	4628      	mov	r0, r5
 800d65a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d65e:	f002 bc3d 	b.w	800fedc <ucdr_serialize_sequence_char>
 800d662:	4770      	bx	lr

0800d664 <_Header__get_serialized_size>:
 800d664:	b538      	push	{r3, r4, r5, lr}
 800d666:	4604      	mov	r4, r0
 800d668:	b150      	cbz	r0, 800d680 <_Header__get_serialized_size+0x1c>
 800d66a:	2100      	movs	r1, #0
 800d66c:	f000 f9c8 	bl	800da00 <get_serialized_size_builtin_interfaces__msg__Time>
 800d670:	2104      	movs	r1, #4
 800d672:	4605      	mov	r5, r0
 800d674:	f002 fbc4 	bl	800fe00 <ucdr_alignment>
 800d678:	68e4      	ldr	r4, [r4, #12]
 800d67a:	3405      	adds	r4, #5
 800d67c:	442c      	add	r4, r5
 800d67e:	4420      	add	r0, r4
 800d680:	bd38      	pop	{r3, r4, r5, pc}
 800d682:	bf00      	nop

0800d684 <max_serialized_size_std_msgs__msg__Header>:
 800d684:	2301      	movs	r3, #1
 800d686:	b510      	push	{r4, lr}
 800d688:	7003      	strb	r3, [r0, #0]
 800d68a:	4604      	mov	r4, r0
 800d68c:	f000 fa08 	bl	800daa0 <max_serialized_size_builtin_interfaces__msg__Time>
 800d690:	2300      	movs	r3, #0
 800d692:	7023      	strb	r3, [r4, #0]
 800d694:	bd10      	pop	{r4, pc}
 800d696:	bf00      	nop

0800d698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d698:	4800      	ldr	r0, [pc, #0]	; (800d69c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800d69a:	4770      	bx	lr
 800d69c:	200000f0 	.word	0x200000f0

0800d6a0 <_MultiArrayLayout__max_serialized_size>:
 800d6a0:	2104      	movs	r1, #4
 800d6a2:	b508      	push	{r3, lr}
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	f002 fbab 	bl	800fe00 <ucdr_alignment>
 800d6aa:	3004      	adds	r0, #4
 800d6ac:	bd08      	pop	{r3, pc}
 800d6ae:	bf00      	nop

0800d6b0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800d6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6b4:	4607      	mov	r7, r0
 800d6b6:	4689      	mov	r9, r1
 800d6b8:	4608      	mov	r0, r1
 800d6ba:	2104      	movs	r1, #4
 800d6bc:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800d6c0:	f002 fb9e 	bl	800fe00 <ucdr_alignment>
 800d6c4:	f109 0304 	add.w	r3, r9, #4
 800d6c8:	18c6      	adds	r6, r0, r3
 800d6ca:	f1b8 0f00 	cmp.w	r8, #0
 800d6ce:	d018      	beq.n	800d702 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800d6d0:	2500      	movs	r5, #0
 800d6d2:	f009 f89b 	bl	801680c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	6843      	ldr	r3, [r0, #4]
 800d6da:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800d6de:	4631      	mov	r1, r6
 800d6e0:	695b      	ldr	r3, [r3, #20]
 800d6e2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d6e6:	4798      	blx	r3
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	2c04      	cmp	r4, #4
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	bf28      	it	cs
 800d6f2:	2104      	movcs	r1, #4
 800d6f4:	f002 fb84 	bl	800fe00 <ucdr_alignment>
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	4404      	add	r4, r0
 800d6fc:	45a8      	cmp	r8, r5
 800d6fe:	4426      	add	r6, r4
 800d700:	d1e7      	bne.n	800d6d2 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800d702:	2104      	movs	r1, #4
 800d704:	4630      	mov	r0, r6
 800d706:	f002 fb7b 	bl	800fe00 <ucdr_alignment>
 800d70a:	f1c9 0904 	rsb	r9, r9, #4
 800d70e:	444e      	add	r6, r9
 800d710:	4430      	add	r0, r6
 800d712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d716:	bf00      	nop

0800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d718:	b108      	cbz	r0, 800d71e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800d71a:	f7ff bfc9 	b.w	800d6b0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d71e:	4770      	bx	lr

0800d720 <_MultiArrayLayout__get_serialized_size>:
 800d720:	b110      	cbz	r0, 800d728 <_MultiArrayLayout__get_serialized_size+0x8>
 800d722:	2100      	movs	r1, #0
 800d724:	f7ff bfc4 	b.w	800d6b0 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop

0800d72c <_MultiArrayLayout__cdr_deserialize>:
 800d72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d72e:	460d      	mov	r5, r1
 800d730:	b083      	sub	sp, #12
 800d732:	b329      	cbz	r1, 800d780 <_MultiArrayLayout__cdr_deserialize+0x54>
 800d734:	a901      	add	r1, sp, #4
 800d736:	4607      	mov	r7, r0
 800d738:	f001 fa66 	bl	800ec08 <ucdr_deserialize_uint32_t>
 800d73c:	9b01      	ldr	r3, [sp, #4]
 800d73e:	68aa      	ldr	r2, [r5, #8]
 800d740:	429a      	cmp	r2, r3
 800d742:	d31a      	bcc.n	800d77a <_MultiArrayLayout__cdr_deserialize+0x4e>
 800d744:	606b      	str	r3, [r5, #4]
 800d746:	b18b      	cbz	r3, 800d76c <_MultiArrayLayout__cdr_deserialize+0x40>
 800d748:	2400      	movs	r4, #0
 800d74a:	4626      	mov	r6, r4
 800d74c:	e002      	b.n	800d754 <_MultiArrayLayout__cdr_deserialize+0x28>
 800d74e:	9b01      	ldr	r3, [sp, #4]
 800d750:	429e      	cmp	r6, r3
 800d752:	d20b      	bcs.n	800d76c <_MultiArrayLayout__cdr_deserialize+0x40>
 800d754:	f009 f85a 	bl	801680c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d758:	6829      	ldr	r1, [r5, #0]
 800d75a:	6843      	ldr	r3, [r0, #4]
 800d75c:	4421      	add	r1, r4
 800d75e:	4638      	mov	r0, r7
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	4798      	blx	r3
 800d764:	3601      	adds	r6, #1
 800d766:	3414      	adds	r4, #20
 800d768:	2800      	cmp	r0, #0
 800d76a:	d1f0      	bne.n	800d74e <_MultiArrayLayout__cdr_deserialize+0x22>
 800d76c:	4638      	mov	r0, r7
 800d76e:	f105 010c 	add.w	r1, r5, #12
 800d772:	f001 fa49 	bl	800ec08 <ucdr_deserialize_uint32_t>
 800d776:	b003      	add	sp, #12
 800d778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d77a:	2000      	movs	r0, #0
 800d77c:	b003      	add	sp, #12
 800d77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d780:	4608      	mov	r0, r1
 800d782:	b003      	add	sp, #12
 800d784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d786:	bf00      	nop

0800d788 <_MultiArrayLayout__cdr_serialize>:
 800d788:	b308      	cbz	r0, 800d7ce <_MultiArrayLayout__cdr_serialize+0x46>
 800d78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78c:	6847      	ldr	r7, [r0, #4]
 800d78e:	460e      	mov	r6, r1
 800d790:	4605      	mov	r5, r0
 800d792:	4608      	mov	r0, r1
 800d794:	4639      	mov	r1, r7
 800d796:	f001 f907 	bl	800e9a8 <ucdr_serialize_uint32_t>
 800d79a:	b190      	cbz	r0, 800d7c2 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d79c:	b18f      	cbz	r7, 800d7c2 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d79e:	2400      	movs	r4, #0
 800d7a0:	e001      	b.n	800d7a6 <_MultiArrayLayout__cdr_serialize+0x1e>
 800d7a2:	42a7      	cmp	r7, r4
 800d7a4:	d00d      	beq.n	800d7c2 <_MultiArrayLayout__cdr_serialize+0x3a>
 800d7a6:	f009 f831 	bl	801680c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800d7aa:	682a      	ldr	r2, [r5, #0]
 800d7ac:	6843      	ldr	r3, [r0, #4]
 800d7ae:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800d7b2:	4631      	mov	r1, r6
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d7ba:	4798      	blx	r3
 800d7bc:	3401      	adds	r4, #1
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d1ef      	bne.n	800d7a2 <_MultiArrayLayout__cdr_serialize+0x1a>
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	68e9      	ldr	r1, [r5, #12]
 800d7c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7ca:	f001 b8ed 	b.w	800e9a8 <ucdr_serialize_uint32_t>
 800d7ce:	4770      	bx	lr

0800d7d0 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800d7d0:	b508      	push	{r3, lr}
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	4608      	mov	r0, r1
 800d7d8:	701a      	strb	r2, [r3, #0]
 800d7da:	2104      	movs	r1, #4
 800d7dc:	f002 fb10 	bl	800fe00 <ucdr_alignment>
 800d7e0:	3004      	adds	r0, #4
 800d7e2:	bd08      	pop	{r3, pc}

0800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800d7e4:	4800      	ldr	r0, [pc, #0]	; (800d7e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800d7e6:	4770      	bx	lr
 800d7e8:	20000118 	.word	0x20000118

0800d7ec <_UInt16MultiArray__max_serialized_size>:
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	b500      	push	{lr}
 800d7f0:	b083      	sub	sp, #12
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	f10d 0007 	add.w	r0, sp, #7
 800d7f8:	f88d 3007 	strb.w	r3, [sp, #7]
 800d7fc:	f7ff ffe8 	bl	800d7d0 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d800:	b003      	add	sp, #12
 800d802:	f85d fb04 	ldr.w	pc, [sp], #4
 800d806:	bf00      	nop

0800d808 <get_serialized_size_std_msgs__msg__UInt16MultiArray>:
 800d808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d80a:	4604      	mov	r4, r0
 800d80c:	b190      	cbz	r0, 800d834 <get_serialized_size_std_msgs__msg__UInt16MultiArray+0x2c>
 800d80e:	460d      	mov	r5, r1
 800d810:	f7ff ff82 	bl	800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d814:	182e      	adds	r6, r5, r0
 800d816:	2104      	movs	r1, #4
 800d818:	4630      	mov	r0, r6
 800d81a:	6967      	ldr	r7, [r4, #20]
 800d81c:	f002 faf0 	bl	800fe00 <ucdr_alignment>
 800d820:	1d04      	adds	r4, r0, #4
 800d822:	4434      	add	r4, r6
 800d824:	4620      	mov	r0, r4
 800d826:	2102      	movs	r1, #2
 800d828:	f002 faea 	bl	800fe00 <ucdr_alignment>
 800d82c:	ebc5 0547 	rsb	r5, r5, r7, lsl #1
 800d830:	4428      	add	r0, r5
 800d832:	4420      	add	r0, r4
 800d834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d836:	bf00      	nop

0800d838 <_UInt16MultiArray__cdr_deserialize>:
 800d838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d83a:	460c      	mov	r4, r1
 800d83c:	b083      	sub	sp, #12
 800d83e:	b1d1      	cbz	r1, 800d876 <_UInt16MultiArray__cdr_deserialize+0x3e>
 800d840:	4606      	mov	r6, r0
 800d842:	f7ff ffcf 	bl	800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d846:	6843      	ldr	r3, [r0, #4]
 800d848:	4621      	mov	r1, r4
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	4630      	mov	r0, r6
 800d84e:	4798      	blx	r3
 800d850:	69a7      	ldr	r7, [r4, #24]
 800d852:	ab01      	add	r3, sp, #4
 800d854:	463a      	mov	r2, r7
 800d856:	4630      	mov	r0, r6
 800d858:	6921      	ldr	r1, [r4, #16]
 800d85a:	f002 fba9 	bl	800ffb0 <ucdr_deserialize_sequence_uint16_t>
 800d85e:	9b01      	ldr	r3, [sp, #4]
 800d860:	4605      	mov	r5, r0
 800d862:	b920      	cbnz	r0, 800d86e <_UInt16MultiArray__cdr_deserialize+0x36>
 800d864:	429f      	cmp	r7, r3
 800d866:	d30a      	bcc.n	800d87e <_UInt16MultiArray__cdr_deserialize+0x46>
 800d868:	4628      	mov	r0, r5
 800d86a:	b003      	add	sp, #12
 800d86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86e:	4628      	mov	r0, r5
 800d870:	6163      	str	r3, [r4, #20]
 800d872:	b003      	add	sp, #12
 800d874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d876:	460d      	mov	r5, r1
 800d878:	4628      	mov	r0, r5
 800d87a:	b003      	add	sp, #12
 800d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d87e:	2301      	movs	r3, #1
 800d880:	75b0      	strb	r0, [r6, #22]
 800d882:	7573      	strb	r3, [r6, #21]
 800d884:	2102      	movs	r1, #2
 800d886:	6160      	str	r0, [r4, #20]
 800d888:	4630      	mov	r0, r6
 800d88a:	f002 fad1 	bl	800fe30 <ucdr_align_to>
 800d88e:	9901      	ldr	r1, [sp, #4]
 800d890:	4630      	mov	r0, r6
 800d892:	0049      	lsls	r1, r1, #1
 800d894:	f002 fb02 	bl	800fe9c <ucdr_advance_buffer>
 800d898:	4628      	mov	r0, r5
 800d89a:	b003      	add	sp, #12
 800d89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89e:	bf00      	nop

0800d8a0 <_UInt16MultiArray__cdr_serialize>:
 800d8a0:	b180      	cbz	r0, 800d8c4 <_UInt16MultiArray__cdr_serialize+0x24>
 800d8a2:	b538      	push	{r3, r4, r5, lr}
 800d8a4:	460d      	mov	r5, r1
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	f7ff ff9c 	bl	800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d8ac:	6843      	ldr	r3, [r0, #4]
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	4798      	blx	r3
 800d8b6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8c0:	f002 bb64 	b.w	800ff8c <ucdr_serialize_sequence_uint16_t>
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop

0800d8c8 <_UInt16MultiArray__get_serialized_size>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	b180      	cbz	r0, 800d8f0 <_UInt16MultiArray__get_serialized_size+0x28>
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	f7ff ff22 	bl	800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d8d4:	2104      	movs	r1, #4
 800d8d6:	6965      	ldr	r5, [r4, #20]
 800d8d8:	4604      	mov	r4, r0
 800d8da:	f002 fa91 	bl	800fe00 <ucdr_alignment>
 800d8de:	4404      	add	r4, r0
 800d8e0:	3404      	adds	r4, #4
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	2102      	movs	r1, #2
 800d8e6:	f002 fa8b 	bl	800fe00 <ucdr_alignment>
 800d8ea:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 800d8ee:	4420      	add	r0, r4
 800d8f0:	bd38      	pop	{r3, r4, r5, pc}
 800d8f2:	bf00      	nop

0800d8f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray>:
 800d8f4:	4800      	ldr	r0, [pc, #0]	; (800d8f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt16MultiArray+0x4>)
 800d8f6:	4770      	bx	lr
 800d8f8:	20000140 	.word	0x20000140

0800d8fc <_UInt8MultiArray__max_serialized_size>:
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	b500      	push	{lr}
 800d900:	b083      	sub	sp, #12
 800d902:	2100      	movs	r1, #0
 800d904:	f10d 0007 	add.w	r0, sp, #7
 800d908:	f88d 3007 	strb.w	r3, [sp, #7]
 800d90c:	f7ff ff60 	bl	800d7d0 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d910:	b003      	add	sp, #12
 800d912:	f85d fb04 	ldr.w	pc, [sp], #4
 800d916:	bf00      	nop

0800d918 <get_serialized_size_std_msgs__msg__UInt8MultiArray>:
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	4604      	mov	r4, r0
 800d91c:	b188      	cbz	r0, 800d942 <get_serialized_size_std_msgs__msg__UInt8MultiArray+0x2a>
 800d91e:	460e      	mov	r6, r1
 800d920:	f7ff fefa 	bl	800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d924:	1837      	adds	r7, r6, r0
 800d926:	4638      	mov	r0, r7
 800d928:	2104      	movs	r1, #4
 800d92a:	6965      	ldr	r5, [r4, #20]
 800d92c:	f002 fa68 	bl	800fe00 <ucdr_alignment>
 800d930:	3004      	adds	r0, #4
 800d932:	4407      	add	r7, r0
 800d934:	4638      	mov	r0, r7
 800d936:	2101      	movs	r1, #1
 800d938:	f002 fa62 	bl	800fe00 <ucdr_alignment>
 800d93c:	1bad      	subs	r5, r5, r6
 800d93e:	4405      	add	r5, r0
 800d940:	19e8      	adds	r0, r5, r7
 800d942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d944 <_UInt8MultiArray__cdr_deserialize>:
 800d944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d946:	460c      	mov	r4, r1
 800d948:	b083      	sub	sp, #12
 800d94a:	b1d1      	cbz	r1, 800d982 <_UInt8MultiArray__cdr_deserialize+0x3e>
 800d94c:	4606      	mov	r6, r0
 800d94e:	f7ff ff49 	bl	800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d952:	6843      	ldr	r3, [r0, #4]
 800d954:	4621      	mov	r1, r4
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	4630      	mov	r0, r6
 800d95a:	4798      	blx	r3
 800d95c:	69a7      	ldr	r7, [r4, #24]
 800d95e:	ab01      	add	r3, sp, #4
 800d960:	463a      	mov	r2, r7
 800d962:	4630      	mov	r0, r6
 800d964:	6921      	ldr	r1, [r4, #16]
 800d966:	f002 faf7 	bl	800ff58 <ucdr_deserialize_sequence_uint8_t>
 800d96a:	9b01      	ldr	r3, [sp, #4]
 800d96c:	4605      	mov	r5, r0
 800d96e:	b920      	cbnz	r0, 800d97a <_UInt8MultiArray__cdr_deserialize+0x36>
 800d970:	429f      	cmp	r7, r3
 800d972:	d30a      	bcc.n	800d98a <_UInt8MultiArray__cdr_deserialize+0x46>
 800d974:	4628      	mov	r0, r5
 800d976:	b003      	add	sp, #12
 800d978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d97a:	4628      	mov	r0, r5
 800d97c:	6163      	str	r3, [r4, #20]
 800d97e:	b003      	add	sp, #12
 800d980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d982:	460d      	mov	r5, r1
 800d984:	4628      	mov	r0, r5
 800d986:	b003      	add	sp, #12
 800d988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d98a:	2101      	movs	r1, #1
 800d98c:	75b0      	strb	r0, [r6, #22]
 800d98e:	7571      	strb	r1, [r6, #21]
 800d990:	6160      	str	r0, [r4, #20]
 800d992:	4630      	mov	r0, r6
 800d994:	f002 fa4c 	bl	800fe30 <ucdr_align_to>
 800d998:	4630      	mov	r0, r6
 800d99a:	9901      	ldr	r1, [sp, #4]
 800d99c:	f002 fa7e 	bl	800fe9c <ucdr_advance_buffer>
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	b003      	add	sp, #12
 800d9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9a6:	bf00      	nop

0800d9a8 <_UInt8MultiArray__cdr_serialize>:
 800d9a8:	b180      	cbz	r0, 800d9cc <_UInt8MultiArray__cdr_serialize+0x24>
 800d9aa:	b538      	push	{r3, r4, r5, lr}
 800d9ac:	460d      	mov	r5, r1
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	f7ff ff18 	bl	800d7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d9b4:	6843      	ldr	r3, [r0, #4]
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	4798      	blx	r3
 800d9be:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c8:	f002 bab4 	b.w	800ff34 <ucdr_serialize_sequence_uint8_t>
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop

0800d9d0 <_UInt8MultiArray__get_serialized_size>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	b178      	cbz	r0, 800d9f6 <_UInt8MultiArray__get_serialized_size+0x26>
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	f7ff fe9e 	bl	800d718 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800d9dc:	2104      	movs	r1, #4
 800d9de:	6965      	ldr	r5, [r4, #20]
 800d9e0:	4604      	mov	r4, r0
 800d9e2:	f002 fa0d 	bl	800fe00 <ucdr_alignment>
 800d9e6:	4404      	add	r4, r0
 800d9e8:	3404      	adds	r4, #4
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	2101      	movs	r1, #1
 800d9ee:	f002 fa07 	bl	800fe00 <ucdr_alignment>
 800d9f2:	4428      	add	r0, r5
 800d9f4:	4420      	add	r0, r4
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}

0800d9f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray>:
 800d9f8:	4800      	ldr	r0, [pc, #0]	; (800d9fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__UInt8MultiArray+0x4>)
 800d9fa:	4770      	bx	lr
 800d9fc:	20000168 	.word	0x20000168

0800da00 <get_serialized_size_builtin_interfaces__msg__Time>:
 800da00:	b180      	cbz	r0, 800da24 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800da02:	b538      	push	{r3, r4, r5, lr}
 800da04:	460d      	mov	r5, r1
 800da06:	2104      	movs	r1, #4
 800da08:	4628      	mov	r0, r5
 800da0a:	f002 f9f9 	bl	800fe00 <ucdr_alignment>
 800da0e:	1d2c      	adds	r4, r5, #4
 800da10:	4404      	add	r4, r0
 800da12:	4620      	mov	r0, r4
 800da14:	2104      	movs	r1, #4
 800da16:	f002 f9f3 	bl	800fe00 <ucdr_alignment>
 800da1a:	f1c5 0504 	rsb	r5, r5, #4
 800da1e:	4428      	add	r0, r5
 800da20:	4420      	add	r0, r4
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop

0800da28 <_Time__cdr_deserialize>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	460c      	mov	r4, r1
 800da2c:	b141      	cbz	r1, 800da40 <_Time__cdr_deserialize+0x18>
 800da2e:	4605      	mov	r5, r0
 800da30:	f001 fc98 	bl	800f364 <ucdr_deserialize_int32_t>
 800da34:	4628      	mov	r0, r5
 800da36:	1d21      	adds	r1, r4, #4
 800da38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3c:	f001 b8e4 	b.w	800ec08 <ucdr_deserialize_uint32_t>
 800da40:	4608      	mov	r0, r1
 800da42:	bd38      	pop	{r3, r4, r5, pc}

0800da44 <_Time__cdr_serialize>:
 800da44:	b160      	cbz	r0, 800da60 <_Time__cdr_serialize+0x1c>
 800da46:	b538      	push	{r3, r4, r5, lr}
 800da48:	460d      	mov	r5, r1
 800da4a:	4604      	mov	r4, r0
 800da4c:	6801      	ldr	r1, [r0, #0]
 800da4e:	4628      	mov	r0, r5
 800da50:	f001 fbf0 	bl	800f234 <ucdr_serialize_int32_t>
 800da54:	4628      	mov	r0, r5
 800da56:	6861      	ldr	r1, [r4, #4]
 800da58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da5c:	f000 bfa4 	b.w	800e9a8 <ucdr_serialize_uint32_t>
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop

0800da64 <_Time__get_serialized_size>:
 800da64:	b160      	cbz	r0, 800da80 <_Time__get_serialized_size+0x1c>
 800da66:	b510      	push	{r4, lr}
 800da68:	2104      	movs	r1, #4
 800da6a:	2000      	movs	r0, #0
 800da6c:	f002 f9c8 	bl	800fe00 <ucdr_alignment>
 800da70:	1d04      	adds	r4, r0, #4
 800da72:	4620      	mov	r0, r4
 800da74:	2104      	movs	r1, #4
 800da76:	f002 f9c3 	bl	800fe00 <ucdr_alignment>
 800da7a:	3004      	adds	r0, #4
 800da7c:	4420      	add	r0, r4
 800da7e:	bd10      	pop	{r4, pc}
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop

0800da84 <_Time__max_serialized_size>:
 800da84:	b510      	push	{r4, lr}
 800da86:	2104      	movs	r1, #4
 800da88:	2000      	movs	r0, #0
 800da8a:	f002 f9b9 	bl	800fe00 <ucdr_alignment>
 800da8e:	1d04      	adds	r4, r0, #4
 800da90:	4620      	mov	r0, r4
 800da92:	2104      	movs	r1, #4
 800da94:	f002 f9b4 	bl	800fe00 <ucdr_alignment>
 800da98:	3004      	adds	r0, #4
 800da9a:	4420      	add	r0, r4
 800da9c:	bd10      	pop	{r4, pc}
 800da9e:	bf00      	nop

0800daa0 <max_serialized_size_builtin_interfaces__msg__Time>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	2201      	movs	r2, #1
 800daa4:	4603      	mov	r3, r0
 800daa6:	460c      	mov	r4, r1
 800daa8:	701a      	strb	r2, [r3, #0]
 800daaa:	4608      	mov	r0, r1
 800daac:	2104      	movs	r1, #4
 800daae:	f002 f9a7 	bl	800fe00 <ucdr_alignment>
 800dab2:	1d25      	adds	r5, r4, #4
 800dab4:	4405      	add	r5, r0
 800dab6:	4628      	mov	r0, r5
 800dab8:	2104      	movs	r1, #4
 800daba:	f002 f9a1 	bl	800fe00 <ucdr_alignment>
 800dabe:	f1c4 0404 	rsb	r4, r4, #4
 800dac2:	4420      	add	r0, r4
 800dac4:	4428      	add	r0, r5
 800dac6:	bd38      	pop	{r3, r4, r5, pc}

0800dac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800dac8:	4800      	ldr	r0, [pc, #0]	; (800dacc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800daca:	4770      	bx	lr
 800dacc:	20000190 	.word	0x20000190

0800dad0 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800dad0:	b1f0      	cbz	r0, 800db10 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800dad2:	b570      	push	{r4, r5, r6, lr}
 800dad4:	460d      	mov	r5, r1
 800dad6:	2108      	movs	r1, #8
 800dad8:	4628      	mov	r0, r5
 800dada:	f002 f991 	bl	800fe00 <ucdr_alignment>
 800dade:	f105 0408 	add.w	r4, r5, #8
 800dae2:	1826      	adds	r6, r4, r0
 800dae4:	4630      	mov	r0, r6
 800dae6:	2108      	movs	r1, #8
 800dae8:	f002 f98a 	bl	800fe00 <ucdr_alignment>
 800daec:	f100 0408 	add.w	r4, r0, #8
 800daf0:	4434      	add	r4, r6
 800daf2:	4620      	mov	r0, r4
 800daf4:	2108      	movs	r1, #8
 800daf6:	f002 f983 	bl	800fe00 <ucdr_alignment>
 800dafa:	3008      	adds	r0, #8
 800dafc:	4404      	add	r4, r0
 800dafe:	4620      	mov	r0, r4
 800db00:	2108      	movs	r1, #8
 800db02:	f002 f97d 	bl	800fe00 <ucdr_alignment>
 800db06:	f1c5 0508 	rsb	r5, r5, #8
 800db0a:	4428      	add	r0, r5
 800db0c:	4420      	add	r0, r4
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	4770      	bx	lr
 800db12:	bf00      	nop

0800db14 <_Quaternion__cdr_deserialize>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	460c      	mov	r4, r1
 800db18:	b199      	cbz	r1, 800db42 <_Quaternion__cdr_deserialize+0x2e>
 800db1a:	4605      	mov	r5, r0
 800db1c:	f001 ff82 	bl	800fa24 <ucdr_deserialize_double>
 800db20:	f104 0108 	add.w	r1, r4, #8
 800db24:	4628      	mov	r0, r5
 800db26:	f001 ff7d 	bl	800fa24 <ucdr_deserialize_double>
 800db2a:	f104 0110 	add.w	r1, r4, #16
 800db2e:	4628      	mov	r0, r5
 800db30:	f001 ff78 	bl	800fa24 <ucdr_deserialize_double>
 800db34:	4628      	mov	r0, r5
 800db36:	f104 0118 	add.w	r1, r4, #24
 800db3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db3e:	f001 bf71 	b.w	800fa24 <ucdr_deserialize_double>
 800db42:	4608      	mov	r0, r1
 800db44:	bd38      	pop	{r3, r4, r5, pc}
 800db46:	bf00      	nop

0800db48 <_Quaternion__cdr_serialize>:
 800db48:	b1c0      	cbz	r0, 800db7c <_Quaternion__cdr_serialize+0x34>
 800db4a:	e9d0 2300 	ldrd	r2, r3, [r0]
 800db4e:	b570      	push	{r4, r5, r6, lr}
 800db50:	460d      	mov	r5, r1
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	f001 fdc3 	bl	800f6e0 <ucdr_serialize_double>
 800db5a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800db5e:	4628      	mov	r0, r5
 800db60:	f001 fdbe 	bl	800f6e0 <ucdr_serialize_double>
 800db64:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800db68:	4628      	mov	r0, r5
 800db6a:	f001 fdb9 	bl	800f6e0 <ucdr_serialize_double>
 800db6e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800db72:	4628      	mov	r0, r5
 800db74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db78:	f001 bdb2 	b.w	800f6e0 <ucdr_serialize_double>
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop

0800db80 <_Quaternion__get_serialized_size>:
 800db80:	b1d0      	cbz	r0, 800dbb8 <_Quaternion__get_serialized_size+0x38>
 800db82:	b538      	push	{r3, r4, r5, lr}
 800db84:	2108      	movs	r1, #8
 800db86:	2000      	movs	r0, #0
 800db88:	f002 f93a 	bl	800fe00 <ucdr_alignment>
 800db8c:	f100 0508 	add.w	r5, r0, #8
 800db90:	4628      	mov	r0, r5
 800db92:	2108      	movs	r1, #8
 800db94:	f002 f934 	bl	800fe00 <ucdr_alignment>
 800db98:	f100 0408 	add.w	r4, r0, #8
 800db9c:	442c      	add	r4, r5
 800db9e:	4620      	mov	r0, r4
 800dba0:	2108      	movs	r1, #8
 800dba2:	f002 f92d 	bl	800fe00 <ucdr_alignment>
 800dba6:	3008      	adds	r0, #8
 800dba8:	4404      	add	r4, r0
 800dbaa:	4620      	mov	r0, r4
 800dbac:	2108      	movs	r1, #8
 800dbae:	f002 f927 	bl	800fe00 <ucdr_alignment>
 800dbb2:	3008      	adds	r0, #8
 800dbb4:	4420      	add	r0, r4
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	4770      	bx	lr
 800dbba:	bf00      	nop

0800dbbc <_Quaternion__max_serialized_size>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	2108      	movs	r1, #8
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	f002 f91d 	bl	800fe00 <ucdr_alignment>
 800dbc6:	f100 0508 	add.w	r5, r0, #8
 800dbca:	4628      	mov	r0, r5
 800dbcc:	2108      	movs	r1, #8
 800dbce:	f002 f917 	bl	800fe00 <ucdr_alignment>
 800dbd2:	f100 0408 	add.w	r4, r0, #8
 800dbd6:	4425      	add	r5, r4
 800dbd8:	4628      	mov	r0, r5
 800dbda:	2108      	movs	r1, #8
 800dbdc:	f002 f910 	bl	800fe00 <ucdr_alignment>
 800dbe0:	f100 0408 	add.w	r4, r0, #8
 800dbe4:	442c      	add	r4, r5
 800dbe6:	4620      	mov	r0, r4
 800dbe8:	2108      	movs	r1, #8
 800dbea:	f002 f909 	bl	800fe00 <ucdr_alignment>
 800dbee:	3008      	adds	r0, #8
 800dbf0:	4420      	add	r0, r4
 800dbf2:	bd38      	pop	{r3, r4, r5, pc}

0800dbf4 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	b570      	push	{r4, r5, r6, lr}
 800dbfa:	4608      	mov	r0, r1
 800dbfc:	701a      	strb	r2, [r3, #0]
 800dbfe:	460c      	mov	r4, r1
 800dc00:	2108      	movs	r1, #8
 800dc02:	f002 f8fd 	bl	800fe00 <ucdr_alignment>
 800dc06:	f104 0608 	add.w	r6, r4, #8
 800dc0a:	4406      	add	r6, r0
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	2108      	movs	r1, #8
 800dc10:	f002 f8f6 	bl	800fe00 <ucdr_alignment>
 800dc14:	f100 0508 	add.w	r5, r0, #8
 800dc18:	442e      	add	r6, r5
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	2108      	movs	r1, #8
 800dc1e:	f002 f8ef 	bl	800fe00 <ucdr_alignment>
 800dc22:	f100 0508 	add.w	r5, r0, #8
 800dc26:	4435      	add	r5, r6
 800dc28:	4628      	mov	r0, r5
 800dc2a:	2108      	movs	r1, #8
 800dc2c:	f002 f8e8 	bl	800fe00 <ucdr_alignment>
 800dc30:	f1c4 0408 	rsb	r4, r4, #8
 800dc34:	4420      	add	r0, r4
 800dc36:	4428      	add	r0, r5
 800dc38:	bd70      	pop	{r4, r5, r6, pc}
 800dc3a:	bf00      	nop

0800dc3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800dc3c:	4800      	ldr	r0, [pc, #0]	; (800dc40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800dc3e:	4770      	bx	lr
 800dc40:	200001b8 	.word	0x200001b8

0800dc44 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800dc44:	b1b8      	cbz	r0, 800dc76 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800dc46:	b538      	push	{r3, r4, r5, lr}
 800dc48:	460d      	mov	r5, r1
 800dc4a:	2108      	movs	r1, #8
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	f002 f8d7 	bl	800fe00 <ucdr_alignment>
 800dc52:	f105 0408 	add.w	r4, r5, #8
 800dc56:	4404      	add	r4, r0
 800dc58:	4620      	mov	r0, r4
 800dc5a:	2108      	movs	r1, #8
 800dc5c:	f002 f8d0 	bl	800fe00 <ucdr_alignment>
 800dc60:	3008      	adds	r0, #8
 800dc62:	4404      	add	r4, r0
 800dc64:	4620      	mov	r0, r4
 800dc66:	2108      	movs	r1, #8
 800dc68:	f002 f8ca 	bl	800fe00 <ucdr_alignment>
 800dc6c:	f1c5 0508 	rsb	r5, r5, #8
 800dc70:	4428      	add	r0, r5
 800dc72:	4420      	add	r0, r4
 800dc74:	bd38      	pop	{r3, r4, r5, pc}
 800dc76:	4770      	bx	lr

0800dc78 <_Vector3__cdr_deserialize>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	460c      	mov	r4, r1
 800dc7c:	b171      	cbz	r1, 800dc9c <_Vector3__cdr_deserialize+0x24>
 800dc7e:	4605      	mov	r5, r0
 800dc80:	f001 fed0 	bl	800fa24 <ucdr_deserialize_double>
 800dc84:	f104 0108 	add.w	r1, r4, #8
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f001 fecb 	bl	800fa24 <ucdr_deserialize_double>
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f104 0110 	add.w	r1, r4, #16
 800dc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc98:	f001 bec4 	b.w	800fa24 <ucdr_deserialize_double>
 800dc9c:	4608      	mov	r0, r1
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}

0800dca0 <_Vector3__cdr_serialize>:
 800dca0:	b198      	cbz	r0, 800dcca <_Vector3__cdr_serialize+0x2a>
 800dca2:	e9d0 2300 	ldrd	r2, r3, [r0]
 800dca6:	b570      	push	{r4, r5, r6, lr}
 800dca8:	460d      	mov	r5, r1
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	f001 fd17 	bl	800f6e0 <ucdr_serialize_double>
 800dcb2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800dcb6:	4628      	mov	r0, r5
 800dcb8:	f001 fd12 	bl	800f6e0 <ucdr_serialize_double>
 800dcbc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcc6:	f001 bd0b 	b.w	800f6e0 <ucdr_serialize_double>
 800dcca:	4770      	bx	lr

0800dccc <_Vector3__get_serialized_size>:
 800dccc:	b198      	cbz	r0, 800dcf6 <_Vector3__get_serialized_size+0x2a>
 800dcce:	b510      	push	{r4, lr}
 800dcd0:	2108      	movs	r1, #8
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	f002 f894 	bl	800fe00 <ucdr_alignment>
 800dcd8:	f100 0408 	add.w	r4, r0, #8
 800dcdc:	4620      	mov	r0, r4
 800dcde:	2108      	movs	r1, #8
 800dce0:	f002 f88e 	bl	800fe00 <ucdr_alignment>
 800dce4:	3008      	adds	r0, #8
 800dce6:	4404      	add	r4, r0
 800dce8:	4620      	mov	r0, r4
 800dcea:	2108      	movs	r1, #8
 800dcec:	f002 f888 	bl	800fe00 <ucdr_alignment>
 800dcf0:	3008      	adds	r0, #8
 800dcf2:	4420      	add	r0, r4
 800dcf4:	bd10      	pop	{r4, pc}
 800dcf6:	4770      	bx	lr

0800dcf8 <_Vector3__max_serialized_size>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	2108      	movs	r1, #8
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	f002 f87f 	bl	800fe00 <ucdr_alignment>
 800dd02:	f100 0508 	add.w	r5, r0, #8
 800dd06:	4628      	mov	r0, r5
 800dd08:	2108      	movs	r1, #8
 800dd0a:	f002 f879 	bl	800fe00 <ucdr_alignment>
 800dd0e:	f100 0408 	add.w	r4, r0, #8
 800dd12:	442c      	add	r4, r5
 800dd14:	4620      	mov	r0, r4
 800dd16:	2108      	movs	r1, #8
 800dd18:	f002 f872 	bl	800fe00 <ucdr_alignment>
 800dd1c:	3008      	adds	r0, #8
 800dd1e:	4420      	add	r0, r4
 800dd20:	bd38      	pop	{r3, r4, r5, pc}
 800dd22:	bf00      	nop

0800dd24 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800dd24:	4603      	mov	r3, r0
 800dd26:	2201      	movs	r2, #1
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	701a      	strb	r2, [r3, #0]
 800dd2e:	460c      	mov	r4, r1
 800dd30:	2108      	movs	r1, #8
 800dd32:	f002 f865 	bl	800fe00 <ucdr_alignment>
 800dd36:	f104 0508 	add.w	r5, r4, #8
 800dd3a:	1946      	adds	r6, r0, r5
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	2108      	movs	r1, #8
 800dd40:	f002 f85e 	bl	800fe00 <ucdr_alignment>
 800dd44:	f100 0508 	add.w	r5, r0, #8
 800dd48:	4435      	add	r5, r6
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	2108      	movs	r1, #8
 800dd4e:	f002 f857 	bl	800fe00 <ucdr_alignment>
 800dd52:	f1c4 0408 	rsb	r4, r4, #8
 800dd56:	4420      	add	r0, r4
 800dd58:	4428      	add	r0, r5
 800dd5a:	bd70      	pop	{r4, r5, r6, pc}

0800dd5c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800dd5c:	4800      	ldr	r0, [pc, #0]	; (800dd60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800dd5e:	4770      	bx	lr
 800dd60:	200001e0 	.word	0x200001e0

0800dd64 <ucdr_serialize_endian_array_char>:
 800dd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd68:	4619      	mov	r1, r3
 800dd6a:	461e      	mov	r6, r3
 800dd6c:	4690      	mov	r8, r2
 800dd6e:	4604      	mov	r4, r0
 800dd70:	f001 fff0 	bl	800fd54 <ucdr_check_buffer_available_for>
 800dd74:	b9e0      	cbnz	r0, 800ddb0 <ucdr_serialize_endian_array_char+0x4c>
 800dd76:	4637      	mov	r7, r6
 800dd78:	e00a      	b.n	800dd90 <ucdr_serialize_endian_array_char+0x2c>
 800dd7a:	462a      	mov	r2, r5
 800dd7c:	68a0      	ldr	r0, [r4, #8]
 800dd7e:	f009 fca1 	bl	80176c4 <memcpy>
 800dd82:	68a2      	ldr	r2, [r4, #8]
 800dd84:	6923      	ldr	r3, [r4, #16]
 800dd86:	442a      	add	r2, r5
 800dd88:	442b      	add	r3, r5
 800dd8a:	1b7f      	subs	r7, r7, r5
 800dd8c:	60a2      	str	r2, [r4, #8]
 800dd8e:	6123      	str	r3, [r4, #16]
 800dd90:	4639      	mov	r1, r7
 800dd92:	2201      	movs	r2, #1
 800dd94:	4620      	mov	r0, r4
 800dd96:	f002 f865 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800dd9a:	1bf1      	subs	r1, r6, r7
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	4441      	add	r1, r8
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d1ea      	bne.n	800dd7a <ucdr_serialize_endian_array_char+0x16>
 800dda4:	2301      	movs	r3, #1
 800dda6:	7da0      	ldrb	r0, [r4, #22]
 800dda8:	7563      	strb	r3, [r4, #21]
 800ddaa:	4058      	eors	r0, r3
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	68a0      	ldr	r0, [r4, #8]
 800ddb6:	f009 fc85 	bl	80176c4 <memcpy>
 800ddba:	68a2      	ldr	r2, [r4, #8]
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	4432      	add	r2, r6
 800ddc0:	4433      	add	r3, r6
 800ddc2:	60a2      	str	r2, [r4, #8]
 800ddc4:	6123      	str	r3, [r4, #16]
 800ddc6:	e7ed      	b.n	800dda4 <ucdr_serialize_endian_array_char+0x40>

0800ddc8 <ucdr_deserialize_endian_array_char>:
 800ddc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddcc:	4619      	mov	r1, r3
 800ddce:	461e      	mov	r6, r3
 800ddd0:	4690      	mov	r8, r2
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	f001 ffbe 	bl	800fd54 <ucdr_check_buffer_available_for>
 800ddd8:	b9e0      	cbnz	r0, 800de14 <ucdr_deserialize_endian_array_char+0x4c>
 800ddda:	4637      	mov	r7, r6
 800dddc:	e00a      	b.n	800ddf4 <ucdr_deserialize_endian_array_char+0x2c>
 800ddde:	462a      	mov	r2, r5
 800dde0:	68a1      	ldr	r1, [r4, #8]
 800dde2:	f009 fc6f 	bl	80176c4 <memcpy>
 800dde6:	68a2      	ldr	r2, [r4, #8]
 800dde8:	6923      	ldr	r3, [r4, #16]
 800ddea:	442a      	add	r2, r5
 800ddec:	442b      	add	r3, r5
 800ddee:	1b7f      	subs	r7, r7, r5
 800ddf0:	60a2      	str	r2, [r4, #8]
 800ddf2:	6123      	str	r3, [r4, #16]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	f002 f833 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800ddfe:	4605      	mov	r5, r0
 800de00:	1bf0      	subs	r0, r6, r7
 800de02:	4440      	add	r0, r8
 800de04:	2d00      	cmp	r5, #0
 800de06:	d1ea      	bne.n	800ddde <ucdr_deserialize_endian_array_char+0x16>
 800de08:	2301      	movs	r3, #1
 800de0a:	7da0      	ldrb	r0, [r4, #22]
 800de0c:	7563      	strb	r3, [r4, #21]
 800de0e:	4058      	eors	r0, r3
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de14:	4632      	mov	r2, r6
 800de16:	4640      	mov	r0, r8
 800de18:	68a1      	ldr	r1, [r4, #8]
 800de1a:	f009 fc53 	bl	80176c4 <memcpy>
 800de1e:	68a2      	ldr	r2, [r4, #8]
 800de20:	6923      	ldr	r3, [r4, #16]
 800de22:	4432      	add	r2, r6
 800de24:	4433      	add	r3, r6
 800de26:	60a2      	str	r2, [r4, #8]
 800de28:	6123      	str	r3, [r4, #16]
 800de2a:	e7ed      	b.n	800de08 <ucdr_deserialize_endian_array_char+0x40>

0800de2c <ucdr_serialize_array_uint8_t>:
 800de2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de30:	4688      	mov	r8, r1
 800de32:	4611      	mov	r1, r2
 800de34:	4616      	mov	r6, r2
 800de36:	4604      	mov	r4, r0
 800de38:	f001 ff8c 	bl	800fd54 <ucdr_check_buffer_available_for>
 800de3c:	b9e0      	cbnz	r0, 800de78 <ucdr_serialize_array_uint8_t+0x4c>
 800de3e:	4637      	mov	r7, r6
 800de40:	e00a      	b.n	800de58 <ucdr_serialize_array_uint8_t+0x2c>
 800de42:	462a      	mov	r2, r5
 800de44:	68a0      	ldr	r0, [r4, #8]
 800de46:	f009 fc3d 	bl	80176c4 <memcpy>
 800de4a:	68a2      	ldr	r2, [r4, #8]
 800de4c:	6923      	ldr	r3, [r4, #16]
 800de4e:	442a      	add	r2, r5
 800de50:	442b      	add	r3, r5
 800de52:	1b7f      	subs	r7, r7, r5
 800de54:	60a2      	str	r2, [r4, #8]
 800de56:	6123      	str	r3, [r4, #16]
 800de58:	4639      	mov	r1, r7
 800de5a:	2201      	movs	r2, #1
 800de5c:	4620      	mov	r0, r4
 800de5e:	f002 f801 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800de62:	1bf1      	subs	r1, r6, r7
 800de64:	4605      	mov	r5, r0
 800de66:	4441      	add	r1, r8
 800de68:	2800      	cmp	r0, #0
 800de6a:	d1ea      	bne.n	800de42 <ucdr_serialize_array_uint8_t+0x16>
 800de6c:	2301      	movs	r3, #1
 800de6e:	7da0      	ldrb	r0, [r4, #22]
 800de70:	7563      	strb	r3, [r4, #21]
 800de72:	4058      	eors	r0, r3
 800de74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de78:	4632      	mov	r2, r6
 800de7a:	4641      	mov	r1, r8
 800de7c:	68a0      	ldr	r0, [r4, #8]
 800de7e:	f009 fc21 	bl	80176c4 <memcpy>
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	6922      	ldr	r2, [r4, #16]
 800de86:	4433      	add	r3, r6
 800de88:	4432      	add	r2, r6
 800de8a:	60a3      	str	r3, [r4, #8]
 800de8c:	6122      	str	r2, [r4, #16]
 800de8e:	e7ed      	b.n	800de6c <ucdr_serialize_array_uint8_t+0x40>

0800de90 <ucdr_serialize_endian_array_uint8_t>:
 800de90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de94:	4619      	mov	r1, r3
 800de96:	461e      	mov	r6, r3
 800de98:	4690      	mov	r8, r2
 800de9a:	4604      	mov	r4, r0
 800de9c:	f001 ff5a 	bl	800fd54 <ucdr_check_buffer_available_for>
 800dea0:	b9e0      	cbnz	r0, 800dedc <ucdr_serialize_endian_array_uint8_t+0x4c>
 800dea2:	4637      	mov	r7, r6
 800dea4:	e00a      	b.n	800debc <ucdr_serialize_endian_array_uint8_t+0x2c>
 800dea6:	462a      	mov	r2, r5
 800dea8:	68a0      	ldr	r0, [r4, #8]
 800deaa:	f009 fc0b 	bl	80176c4 <memcpy>
 800deae:	68a2      	ldr	r2, [r4, #8]
 800deb0:	6923      	ldr	r3, [r4, #16]
 800deb2:	442a      	add	r2, r5
 800deb4:	442b      	add	r3, r5
 800deb6:	1b7f      	subs	r7, r7, r5
 800deb8:	60a2      	str	r2, [r4, #8]
 800deba:	6123      	str	r3, [r4, #16]
 800debc:	4639      	mov	r1, r7
 800debe:	2201      	movs	r2, #1
 800dec0:	4620      	mov	r0, r4
 800dec2:	f001 ffcf 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800dec6:	1bf1      	subs	r1, r6, r7
 800dec8:	4605      	mov	r5, r0
 800deca:	4441      	add	r1, r8
 800decc:	2800      	cmp	r0, #0
 800dece:	d1ea      	bne.n	800dea6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800ded0:	2301      	movs	r3, #1
 800ded2:	7da0      	ldrb	r0, [r4, #22]
 800ded4:	7563      	strb	r3, [r4, #21]
 800ded6:	4058      	eors	r0, r3
 800ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dedc:	4632      	mov	r2, r6
 800dede:	4641      	mov	r1, r8
 800dee0:	68a0      	ldr	r0, [r4, #8]
 800dee2:	f009 fbef 	bl	80176c4 <memcpy>
 800dee6:	68a2      	ldr	r2, [r4, #8]
 800dee8:	6923      	ldr	r3, [r4, #16]
 800deea:	4432      	add	r2, r6
 800deec:	4433      	add	r3, r6
 800deee:	60a2      	str	r2, [r4, #8]
 800def0:	6123      	str	r3, [r4, #16]
 800def2:	e7ed      	b.n	800ded0 <ucdr_serialize_endian_array_uint8_t+0x40>

0800def4 <ucdr_deserialize_array_uint8_t>:
 800def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def8:	4688      	mov	r8, r1
 800defa:	4611      	mov	r1, r2
 800defc:	4616      	mov	r6, r2
 800defe:	4604      	mov	r4, r0
 800df00:	f001 ff28 	bl	800fd54 <ucdr_check_buffer_available_for>
 800df04:	b9e0      	cbnz	r0, 800df40 <ucdr_deserialize_array_uint8_t+0x4c>
 800df06:	4637      	mov	r7, r6
 800df08:	e00a      	b.n	800df20 <ucdr_deserialize_array_uint8_t+0x2c>
 800df0a:	462a      	mov	r2, r5
 800df0c:	68a1      	ldr	r1, [r4, #8]
 800df0e:	f009 fbd9 	bl	80176c4 <memcpy>
 800df12:	68a2      	ldr	r2, [r4, #8]
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	442a      	add	r2, r5
 800df18:	442b      	add	r3, r5
 800df1a:	1b7f      	subs	r7, r7, r5
 800df1c:	60a2      	str	r2, [r4, #8]
 800df1e:	6123      	str	r3, [r4, #16]
 800df20:	2201      	movs	r2, #1
 800df22:	4639      	mov	r1, r7
 800df24:	4620      	mov	r0, r4
 800df26:	f001 ff9d 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800df2a:	4605      	mov	r5, r0
 800df2c:	1bf0      	subs	r0, r6, r7
 800df2e:	4440      	add	r0, r8
 800df30:	2d00      	cmp	r5, #0
 800df32:	d1ea      	bne.n	800df0a <ucdr_deserialize_array_uint8_t+0x16>
 800df34:	2301      	movs	r3, #1
 800df36:	7da0      	ldrb	r0, [r4, #22]
 800df38:	7563      	strb	r3, [r4, #21]
 800df3a:	4058      	eors	r0, r3
 800df3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df40:	4632      	mov	r2, r6
 800df42:	4640      	mov	r0, r8
 800df44:	68a1      	ldr	r1, [r4, #8]
 800df46:	f009 fbbd 	bl	80176c4 <memcpy>
 800df4a:	68a3      	ldr	r3, [r4, #8]
 800df4c:	6922      	ldr	r2, [r4, #16]
 800df4e:	4433      	add	r3, r6
 800df50:	4432      	add	r2, r6
 800df52:	60a3      	str	r3, [r4, #8]
 800df54:	6122      	str	r2, [r4, #16]
 800df56:	e7ed      	b.n	800df34 <ucdr_deserialize_array_uint8_t+0x40>

0800df58 <ucdr_deserialize_endian_array_uint8_t>:
 800df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5c:	4619      	mov	r1, r3
 800df5e:	461e      	mov	r6, r3
 800df60:	4690      	mov	r8, r2
 800df62:	4604      	mov	r4, r0
 800df64:	f001 fef6 	bl	800fd54 <ucdr_check_buffer_available_for>
 800df68:	b9e0      	cbnz	r0, 800dfa4 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800df6a:	4637      	mov	r7, r6
 800df6c:	e00a      	b.n	800df84 <ucdr_deserialize_endian_array_uint8_t+0x2c>
 800df6e:	462a      	mov	r2, r5
 800df70:	68a1      	ldr	r1, [r4, #8]
 800df72:	f009 fba7 	bl	80176c4 <memcpy>
 800df76:	68a2      	ldr	r2, [r4, #8]
 800df78:	6923      	ldr	r3, [r4, #16]
 800df7a:	442a      	add	r2, r5
 800df7c:	442b      	add	r3, r5
 800df7e:	1b7f      	subs	r7, r7, r5
 800df80:	60a2      	str	r2, [r4, #8]
 800df82:	6123      	str	r3, [r4, #16]
 800df84:	2201      	movs	r2, #1
 800df86:	4639      	mov	r1, r7
 800df88:	4620      	mov	r0, r4
 800df8a:	f001 ff6b 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800df8e:	4605      	mov	r5, r0
 800df90:	1bf0      	subs	r0, r6, r7
 800df92:	4440      	add	r0, r8
 800df94:	2d00      	cmp	r5, #0
 800df96:	d1ea      	bne.n	800df6e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800df98:	2301      	movs	r3, #1
 800df9a:	7da0      	ldrb	r0, [r4, #22]
 800df9c:	7563      	strb	r3, [r4, #21]
 800df9e:	4058      	eors	r0, r3
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	4632      	mov	r2, r6
 800dfa6:	4640      	mov	r0, r8
 800dfa8:	68a1      	ldr	r1, [r4, #8]
 800dfaa:	f009 fb8b 	bl	80176c4 <memcpy>
 800dfae:	68a2      	ldr	r2, [r4, #8]
 800dfb0:	6923      	ldr	r3, [r4, #16]
 800dfb2:	4432      	add	r2, r6
 800dfb4:	4433      	add	r3, r6
 800dfb6:	60a2      	str	r2, [r4, #8]
 800dfb8:	6123      	str	r3, [r4, #16]
 800dfba:	e7ed      	b.n	800df98 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800dfbc <ucdr_serialize_endian_array_uint16_t>:
 800dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc0:	460f      	mov	r7, r1
 800dfc2:	2102      	movs	r1, #2
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	4614      	mov	r4, r2
 800dfc8:	461e      	mov	r6, r3
 800dfca:	f001 ff21 	bl	800fe10 <ucdr_buffer_alignment>
 800dfce:	f895 8015 	ldrb.w	r8, [r5, #21]
 800dfd2:	4601      	mov	r1, r0
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f001 ff61 	bl	800fe9c <ucdr_advance_buffer>
 800dfda:	2f01      	cmp	r7, #1
 800dfdc:	f885 8015 	strb.w	r8, [r5, #21]
 800dfe0:	d010      	beq.n	800e004 <ucdr_serialize_endian_array_uint16_t+0x48>
 800dfe2:	b156      	cbz	r6, 800dffa <ucdr_serialize_endian_array_uint16_t+0x3e>
 800dfe4:	3c02      	subs	r4, #2
 800dfe6:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800dfea:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 800dfee:	4639      	mov	r1, r7
 800dff0:	4628      	mov	r0, r5
 800dff2:	f000 fb6b 	bl	800e6cc <ucdr_serialize_endian_uint16_t>
 800dff6:	42b4      	cmp	r4, r6
 800dff8:	d1f7      	bne.n	800dfea <ucdr_serialize_endian_array_uint16_t+0x2e>
 800dffa:	7da8      	ldrb	r0, [r5, #22]
 800dffc:	f080 0001 	eor.w	r0, r0, #1
 800e000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e004:	0076      	lsls	r6, r6, #1
 800e006:	4631      	mov	r1, r6
 800e008:	4628      	mov	r0, r5
 800e00a:	f001 fea3 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e00e:	b9f8      	cbnz	r0, 800e050 <ucdr_serialize_endian_array_uint16_t+0x94>
 800e010:	46b0      	mov	r8, r6
 800e012:	e00b      	b.n	800e02c <ucdr_serialize_endian_array_uint16_t+0x70>
 800e014:	463a      	mov	r2, r7
 800e016:	68a8      	ldr	r0, [r5, #8]
 800e018:	f009 fb54 	bl	80176c4 <memcpy>
 800e01c:	68aa      	ldr	r2, [r5, #8]
 800e01e:	692b      	ldr	r3, [r5, #16]
 800e020:	443a      	add	r2, r7
 800e022:	443b      	add	r3, r7
 800e024:	eba8 0807 	sub.w	r8, r8, r7
 800e028:	60aa      	str	r2, [r5, #8]
 800e02a:	612b      	str	r3, [r5, #16]
 800e02c:	4641      	mov	r1, r8
 800e02e:	2202      	movs	r2, #2
 800e030:	4628      	mov	r0, r5
 800e032:	f001 ff17 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e036:	eba6 0108 	sub.w	r1, r6, r8
 800e03a:	4607      	mov	r7, r0
 800e03c:	4421      	add	r1, r4
 800e03e:	2800      	cmp	r0, #0
 800e040:	d1e8      	bne.n	800e014 <ucdr_serialize_endian_array_uint16_t+0x58>
 800e042:	2302      	movs	r3, #2
 800e044:	7da8      	ldrb	r0, [r5, #22]
 800e046:	756b      	strb	r3, [r5, #21]
 800e048:	f080 0001 	eor.w	r0, r0, #1
 800e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e050:	4632      	mov	r2, r6
 800e052:	4621      	mov	r1, r4
 800e054:	68a8      	ldr	r0, [r5, #8]
 800e056:	f009 fb35 	bl	80176c4 <memcpy>
 800e05a:	68aa      	ldr	r2, [r5, #8]
 800e05c:	692b      	ldr	r3, [r5, #16]
 800e05e:	4432      	add	r2, r6
 800e060:	441e      	add	r6, r3
 800e062:	60aa      	str	r2, [r5, #8]
 800e064:	612e      	str	r6, [r5, #16]
 800e066:	e7ec      	b.n	800e042 <ucdr_serialize_endian_array_uint16_t+0x86>

0800e068 <ucdr_deserialize_endian_array_uint16_t>:
 800e068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06c:	460f      	mov	r7, r1
 800e06e:	2102      	movs	r1, #2
 800e070:	4605      	mov	r5, r0
 800e072:	4614      	mov	r4, r2
 800e074:	461e      	mov	r6, r3
 800e076:	f001 fecb 	bl	800fe10 <ucdr_buffer_alignment>
 800e07a:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e07e:	4601      	mov	r1, r0
 800e080:	4628      	mov	r0, r5
 800e082:	f001 ff0b 	bl	800fe9c <ucdr_advance_buffer>
 800e086:	2f01      	cmp	r7, #1
 800e088:	f885 8015 	strb.w	r8, [r5, #21]
 800e08c:	d00f      	beq.n	800e0ae <ucdr_deserialize_endian_array_uint16_t+0x46>
 800e08e:	b14e      	cbz	r6, 800e0a4 <ucdr_deserialize_endian_array_uint16_t+0x3c>
 800e090:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800e094:	4622      	mov	r2, r4
 800e096:	4639      	mov	r1, r7
 800e098:	4628      	mov	r0, r5
 800e09a:	3402      	adds	r4, #2
 800e09c:	f000 fc0a 	bl	800e8b4 <ucdr_deserialize_endian_uint16_t>
 800e0a0:	42a6      	cmp	r6, r4
 800e0a2:	d1f7      	bne.n	800e094 <ucdr_deserialize_endian_array_uint16_t+0x2c>
 800e0a4:	7da8      	ldrb	r0, [r5, #22]
 800e0a6:	f080 0001 	eor.w	r0, r0, #1
 800e0aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ae:	0076      	lsls	r6, r6, #1
 800e0b0:	4631      	mov	r1, r6
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f001 fe4e 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e0b8:	b9f8      	cbnz	r0, 800e0fa <ucdr_deserialize_endian_array_uint16_t+0x92>
 800e0ba:	46b0      	mov	r8, r6
 800e0bc:	e00b      	b.n	800e0d6 <ucdr_deserialize_endian_array_uint16_t+0x6e>
 800e0be:	463a      	mov	r2, r7
 800e0c0:	68a9      	ldr	r1, [r5, #8]
 800e0c2:	f009 faff 	bl	80176c4 <memcpy>
 800e0c6:	68aa      	ldr	r2, [r5, #8]
 800e0c8:	692b      	ldr	r3, [r5, #16]
 800e0ca:	443a      	add	r2, r7
 800e0cc:	443b      	add	r3, r7
 800e0ce:	eba8 0807 	sub.w	r8, r8, r7
 800e0d2:	60aa      	str	r2, [r5, #8]
 800e0d4:	612b      	str	r3, [r5, #16]
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	4641      	mov	r1, r8
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f001 fec2 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	eba6 0008 	sub.w	r0, r6, r8
 800e0e6:	4420      	add	r0, r4
 800e0e8:	2f00      	cmp	r7, #0
 800e0ea:	d1e8      	bne.n	800e0be <ucdr_deserialize_endian_array_uint16_t+0x56>
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	7da8      	ldrb	r0, [r5, #22]
 800e0f0:	756b      	strb	r3, [r5, #21]
 800e0f2:	f080 0001 	eor.w	r0, r0, #1
 800e0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0fa:	4632      	mov	r2, r6
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	68a9      	ldr	r1, [r5, #8]
 800e100:	f009 fae0 	bl	80176c4 <memcpy>
 800e104:	68aa      	ldr	r2, [r5, #8]
 800e106:	692b      	ldr	r3, [r5, #16]
 800e108:	4432      	add	r2, r6
 800e10a:	441e      	add	r6, r3
 800e10c:	60aa      	str	r2, [r5, #8]
 800e10e:	612e      	str	r6, [r5, #16]
 800e110:	e7ec      	b.n	800e0ec <ucdr_deserialize_endian_array_uint16_t+0x84>
 800e112:	bf00      	nop

0800e114 <ucdr_serialize_endian_array_float>:
 800e114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e118:	460f      	mov	r7, r1
 800e11a:	2104      	movs	r1, #4
 800e11c:	4605      	mov	r5, r0
 800e11e:	4614      	mov	r4, r2
 800e120:	461e      	mov	r6, r3
 800e122:	f001 fe75 	bl	800fe10 <ucdr_buffer_alignment>
 800e126:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e12a:	4601      	mov	r1, r0
 800e12c:	4628      	mov	r0, r5
 800e12e:	f001 feb5 	bl	800fe9c <ucdr_advance_buffer>
 800e132:	2f01      	cmp	r7, #1
 800e134:	f885 8015 	strb.w	r8, [r5, #21]
 800e138:	d010      	beq.n	800e15c <ucdr_serialize_endian_array_float+0x48>
 800e13a:	b156      	cbz	r6, 800e152 <ucdr_serialize_endian_array_float+0x3e>
 800e13c:	3c04      	subs	r4, #4
 800e13e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e142:	f854 2f04 	ldr.w	r2, [r4, #4]!
 800e146:	4639      	mov	r1, r7
 800e148:	4628      	mov	r0, r5
 800e14a:	f001 f99b 	bl	800f484 <ucdr_serialize_endian_float>
 800e14e:	42b4      	cmp	r4, r6
 800e150:	d1f7      	bne.n	800e142 <ucdr_serialize_endian_array_float+0x2e>
 800e152:	7da8      	ldrb	r0, [r5, #22]
 800e154:	f080 0001 	eor.w	r0, r0, #1
 800e158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15c:	00b6      	lsls	r6, r6, #2
 800e15e:	4631      	mov	r1, r6
 800e160:	4628      	mov	r0, r5
 800e162:	f001 fdf7 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e166:	b9f8      	cbnz	r0, 800e1a8 <ucdr_serialize_endian_array_float+0x94>
 800e168:	46b0      	mov	r8, r6
 800e16a:	e00b      	b.n	800e184 <ucdr_serialize_endian_array_float+0x70>
 800e16c:	463a      	mov	r2, r7
 800e16e:	68a8      	ldr	r0, [r5, #8]
 800e170:	f009 faa8 	bl	80176c4 <memcpy>
 800e174:	68aa      	ldr	r2, [r5, #8]
 800e176:	692b      	ldr	r3, [r5, #16]
 800e178:	443a      	add	r2, r7
 800e17a:	443b      	add	r3, r7
 800e17c:	eba8 0807 	sub.w	r8, r8, r7
 800e180:	60aa      	str	r2, [r5, #8]
 800e182:	612b      	str	r3, [r5, #16]
 800e184:	4641      	mov	r1, r8
 800e186:	2204      	movs	r2, #4
 800e188:	4628      	mov	r0, r5
 800e18a:	f001 fe6b 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e18e:	eba6 0108 	sub.w	r1, r6, r8
 800e192:	4607      	mov	r7, r0
 800e194:	4421      	add	r1, r4
 800e196:	2800      	cmp	r0, #0
 800e198:	d1e8      	bne.n	800e16c <ucdr_serialize_endian_array_float+0x58>
 800e19a:	2304      	movs	r3, #4
 800e19c:	7da8      	ldrb	r0, [r5, #22]
 800e19e:	756b      	strb	r3, [r5, #21]
 800e1a0:	f080 0001 	eor.w	r0, r0, #1
 800e1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a8:	4632      	mov	r2, r6
 800e1aa:	4621      	mov	r1, r4
 800e1ac:	68a8      	ldr	r0, [r5, #8]
 800e1ae:	f009 fa89 	bl	80176c4 <memcpy>
 800e1b2:	68aa      	ldr	r2, [r5, #8]
 800e1b4:	692b      	ldr	r3, [r5, #16]
 800e1b6:	4432      	add	r2, r6
 800e1b8:	441e      	add	r6, r3
 800e1ba:	60aa      	str	r2, [r5, #8]
 800e1bc:	612e      	str	r6, [r5, #16]
 800e1be:	e7ec      	b.n	800e19a <ucdr_serialize_endian_array_float+0x86>

0800e1c0 <ucdr_deserialize_endian_array_float>:
 800e1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c4:	460f      	mov	r7, r1
 800e1c6:	2104      	movs	r1, #4
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	4614      	mov	r4, r2
 800e1cc:	461e      	mov	r6, r3
 800e1ce:	f001 fe1f 	bl	800fe10 <ucdr_buffer_alignment>
 800e1d2:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	4628      	mov	r0, r5
 800e1da:	f001 fe5f 	bl	800fe9c <ucdr_advance_buffer>
 800e1de:	2f01      	cmp	r7, #1
 800e1e0:	f885 8015 	strb.w	r8, [r5, #21]
 800e1e4:	d00f      	beq.n	800e206 <ucdr_deserialize_endian_array_float+0x46>
 800e1e6:	b14e      	cbz	r6, 800e1fc <ucdr_deserialize_endian_array_float+0x3c>
 800e1e8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e1ec:	4622      	mov	r2, r4
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	3404      	adds	r4, #4
 800e1f4:	f001 f9de 	bl	800f5b4 <ucdr_deserialize_endian_float>
 800e1f8:	42a6      	cmp	r6, r4
 800e1fa:	d1f7      	bne.n	800e1ec <ucdr_deserialize_endian_array_float+0x2c>
 800e1fc:	7da8      	ldrb	r0, [r5, #22]
 800e1fe:	f080 0001 	eor.w	r0, r0, #1
 800e202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e206:	00b6      	lsls	r6, r6, #2
 800e208:	4631      	mov	r1, r6
 800e20a:	4628      	mov	r0, r5
 800e20c:	f001 fda2 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e210:	b9f8      	cbnz	r0, 800e252 <ucdr_deserialize_endian_array_float+0x92>
 800e212:	46b0      	mov	r8, r6
 800e214:	e00b      	b.n	800e22e <ucdr_deserialize_endian_array_float+0x6e>
 800e216:	463a      	mov	r2, r7
 800e218:	68a9      	ldr	r1, [r5, #8]
 800e21a:	f009 fa53 	bl	80176c4 <memcpy>
 800e21e:	68aa      	ldr	r2, [r5, #8]
 800e220:	692b      	ldr	r3, [r5, #16]
 800e222:	443a      	add	r2, r7
 800e224:	443b      	add	r3, r7
 800e226:	eba8 0807 	sub.w	r8, r8, r7
 800e22a:	60aa      	str	r2, [r5, #8]
 800e22c:	612b      	str	r3, [r5, #16]
 800e22e:	2204      	movs	r2, #4
 800e230:	4641      	mov	r1, r8
 800e232:	4628      	mov	r0, r5
 800e234:	f001 fe16 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e238:	4607      	mov	r7, r0
 800e23a:	eba6 0008 	sub.w	r0, r6, r8
 800e23e:	4420      	add	r0, r4
 800e240:	2f00      	cmp	r7, #0
 800e242:	d1e8      	bne.n	800e216 <ucdr_deserialize_endian_array_float+0x56>
 800e244:	2304      	movs	r3, #4
 800e246:	7da8      	ldrb	r0, [r5, #22]
 800e248:	756b      	strb	r3, [r5, #21]
 800e24a:	f080 0001 	eor.w	r0, r0, #1
 800e24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e252:	4632      	mov	r2, r6
 800e254:	4620      	mov	r0, r4
 800e256:	68a9      	ldr	r1, [r5, #8]
 800e258:	f009 fa34 	bl	80176c4 <memcpy>
 800e25c:	68aa      	ldr	r2, [r5, #8]
 800e25e:	692b      	ldr	r3, [r5, #16]
 800e260:	4432      	add	r2, r6
 800e262:	441e      	add	r6, r3
 800e264:	60aa      	str	r2, [r5, #8]
 800e266:	612e      	str	r6, [r5, #16]
 800e268:	e7ec      	b.n	800e244 <ucdr_deserialize_endian_array_float+0x84>
 800e26a:	bf00      	nop

0800e26c <ucdr_serialize_array_double>:
 800e26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e270:	460d      	mov	r5, r1
 800e272:	2108      	movs	r1, #8
 800e274:	4604      	mov	r4, r0
 800e276:	4616      	mov	r6, r2
 800e278:	f001 fdca 	bl	800fe10 <ucdr_buffer_alignment>
 800e27c:	4601      	mov	r1, r0
 800e27e:	4620      	mov	r0, r4
 800e280:	7d67      	ldrb	r7, [r4, #21]
 800e282:	f001 fe0b 	bl	800fe9c <ucdr_advance_buffer>
 800e286:	7d21      	ldrb	r1, [r4, #20]
 800e288:	7567      	strb	r7, [r4, #21]
 800e28a:	2901      	cmp	r1, #1
 800e28c:	d011      	beq.n	800e2b2 <ucdr_serialize_array_double+0x46>
 800e28e:	b15e      	cbz	r6, 800e2a8 <ucdr_serialize_array_double+0x3c>
 800e290:	3d08      	subs	r5, #8
 800e292:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800e296:	e000      	b.n	800e29a <ucdr_serialize_array_double+0x2e>
 800e298:	7d21      	ldrb	r1, [r4, #20]
 800e29a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f001 faee 	bl	800f880 <ucdr_serialize_endian_double>
 800e2a4:	42b5      	cmp	r5, r6
 800e2a6:	d1f7      	bne.n	800e298 <ucdr_serialize_array_double+0x2c>
 800e2a8:	7da0      	ldrb	r0, [r4, #22]
 800e2aa:	f080 0001 	eor.w	r0, r0, #1
 800e2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b2:	00f6      	lsls	r6, r6, #3
 800e2b4:	4631      	mov	r1, r6
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f001 fd4c 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e2bc:	b9f8      	cbnz	r0, 800e2fe <ucdr_serialize_array_double+0x92>
 800e2be:	46b0      	mov	r8, r6
 800e2c0:	e00b      	b.n	800e2da <ucdr_serialize_array_double+0x6e>
 800e2c2:	463a      	mov	r2, r7
 800e2c4:	68a0      	ldr	r0, [r4, #8]
 800e2c6:	f009 f9fd 	bl	80176c4 <memcpy>
 800e2ca:	68a2      	ldr	r2, [r4, #8]
 800e2cc:	6923      	ldr	r3, [r4, #16]
 800e2ce:	443a      	add	r2, r7
 800e2d0:	443b      	add	r3, r7
 800e2d2:	eba8 0807 	sub.w	r8, r8, r7
 800e2d6:	60a2      	str	r2, [r4, #8]
 800e2d8:	6123      	str	r3, [r4, #16]
 800e2da:	4641      	mov	r1, r8
 800e2dc:	2208      	movs	r2, #8
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f001 fdc0 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e2e4:	eba6 0108 	sub.w	r1, r6, r8
 800e2e8:	4607      	mov	r7, r0
 800e2ea:	4429      	add	r1, r5
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d1e8      	bne.n	800e2c2 <ucdr_serialize_array_double+0x56>
 800e2f0:	2308      	movs	r3, #8
 800e2f2:	7da0      	ldrb	r0, [r4, #22]
 800e2f4:	7563      	strb	r3, [r4, #21]
 800e2f6:	f080 0001 	eor.w	r0, r0, #1
 800e2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fe:	4632      	mov	r2, r6
 800e300:	4629      	mov	r1, r5
 800e302:	68a0      	ldr	r0, [r4, #8]
 800e304:	f009 f9de 	bl	80176c4 <memcpy>
 800e308:	68a2      	ldr	r2, [r4, #8]
 800e30a:	6923      	ldr	r3, [r4, #16]
 800e30c:	4432      	add	r2, r6
 800e30e:	441e      	add	r6, r3
 800e310:	60a2      	str	r2, [r4, #8]
 800e312:	6126      	str	r6, [r4, #16]
 800e314:	e7ec      	b.n	800e2f0 <ucdr_serialize_array_double+0x84>
 800e316:	bf00      	nop

0800e318 <ucdr_serialize_endian_array_double>:
 800e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31c:	460f      	mov	r7, r1
 800e31e:	2108      	movs	r1, #8
 800e320:	4605      	mov	r5, r0
 800e322:	4614      	mov	r4, r2
 800e324:	461e      	mov	r6, r3
 800e326:	f001 fd73 	bl	800fe10 <ucdr_buffer_alignment>
 800e32a:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e32e:	4601      	mov	r1, r0
 800e330:	4628      	mov	r0, r5
 800e332:	f001 fdb3 	bl	800fe9c <ucdr_advance_buffer>
 800e336:	2f01      	cmp	r7, #1
 800e338:	f885 8015 	strb.w	r8, [r5, #21]
 800e33c:	d010      	beq.n	800e360 <ucdr_serialize_endian_array_double+0x48>
 800e33e:	b156      	cbz	r6, 800e356 <ucdr_serialize_endian_array_double+0x3e>
 800e340:	3c08      	subs	r4, #8
 800e342:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e346:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800e34a:	4639      	mov	r1, r7
 800e34c:	4628      	mov	r0, r5
 800e34e:	f001 fa97 	bl	800f880 <ucdr_serialize_endian_double>
 800e352:	42b4      	cmp	r4, r6
 800e354:	d1f7      	bne.n	800e346 <ucdr_serialize_endian_array_double+0x2e>
 800e356:	7da8      	ldrb	r0, [r5, #22]
 800e358:	f080 0001 	eor.w	r0, r0, #1
 800e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e360:	00f6      	lsls	r6, r6, #3
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	f001 fcf5 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e36a:	b9f8      	cbnz	r0, 800e3ac <ucdr_serialize_endian_array_double+0x94>
 800e36c:	46b0      	mov	r8, r6
 800e36e:	e00b      	b.n	800e388 <ucdr_serialize_endian_array_double+0x70>
 800e370:	463a      	mov	r2, r7
 800e372:	68a8      	ldr	r0, [r5, #8]
 800e374:	f009 f9a6 	bl	80176c4 <memcpy>
 800e378:	68aa      	ldr	r2, [r5, #8]
 800e37a:	692b      	ldr	r3, [r5, #16]
 800e37c:	443a      	add	r2, r7
 800e37e:	443b      	add	r3, r7
 800e380:	eba8 0807 	sub.w	r8, r8, r7
 800e384:	60aa      	str	r2, [r5, #8]
 800e386:	612b      	str	r3, [r5, #16]
 800e388:	4641      	mov	r1, r8
 800e38a:	2208      	movs	r2, #8
 800e38c:	4628      	mov	r0, r5
 800e38e:	f001 fd69 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e392:	eba6 0108 	sub.w	r1, r6, r8
 800e396:	4607      	mov	r7, r0
 800e398:	4421      	add	r1, r4
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d1e8      	bne.n	800e370 <ucdr_serialize_endian_array_double+0x58>
 800e39e:	2308      	movs	r3, #8
 800e3a0:	7da8      	ldrb	r0, [r5, #22]
 800e3a2:	756b      	strb	r3, [r5, #21]
 800e3a4:	f080 0001 	eor.w	r0, r0, #1
 800e3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ac:	4632      	mov	r2, r6
 800e3ae:	4621      	mov	r1, r4
 800e3b0:	68a8      	ldr	r0, [r5, #8]
 800e3b2:	f009 f987 	bl	80176c4 <memcpy>
 800e3b6:	68aa      	ldr	r2, [r5, #8]
 800e3b8:	692b      	ldr	r3, [r5, #16]
 800e3ba:	4432      	add	r2, r6
 800e3bc:	441e      	add	r6, r3
 800e3be:	60aa      	str	r2, [r5, #8]
 800e3c0:	612e      	str	r6, [r5, #16]
 800e3c2:	e7ec      	b.n	800e39e <ucdr_serialize_endian_array_double+0x86>

0800e3c4 <ucdr_deserialize_array_double>:
 800e3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c8:	460d      	mov	r5, r1
 800e3ca:	2108      	movs	r1, #8
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	4616      	mov	r6, r2
 800e3d0:	f001 fd1e 	bl	800fe10 <ucdr_buffer_alignment>
 800e3d4:	4601      	mov	r1, r0
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	7d67      	ldrb	r7, [r4, #21]
 800e3da:	f001 fd5f 	bl	800fe9c <ucdr_advance_buffer>
 800e3de:	7d21      	ldrb	r1, [r4, #20]
 800e3e0:	7567      	strb	r7, [r4, #21]
 800e3e2:	2901      	cmp	r1, #1
 800e3e4:	d010      	beq.n	800e408 <ucdr_deserialize_array_double+0x44>
 800e3e6:	b156      	cbz	r6, 800e3fe <ucdr_deserialize_array_double+0x3a>
 800e3e8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800e3ec:	e000      	b.n	800e3f0 <ucdr_deserialize_array_double+0x2c>
 800e3ee:	7d21      	ldrb	r1, [r4, #20]
 800e3f0:	462a      	mov	r2, r5
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	3508      	adds	r5, #8
 800e3f6:	f001 fbdb 	bl	800fbb0 <ucdr_deserialize_endian_double>
 800e3fa:	42ae      	cmp	r6, r5
 800e3fc:	d1f7      	bne.n	800e3ee <ucdr_deserialize_array_double+0x2a>
 800e3fe:	7da0      	ldrb	r0, [r4, #22]
 800e400:	f080 0001 	eor.w	r0, r0, #1
 800e404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e408:	00f6      	lsls	r6, r6, #3
 800e40a:	4631      	mov	r1, r6
 800e40c:	4620      	mov	r0, r4
 800e40e:	f001 fca1 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e412:	b9f8      	cbnz	r0, 800e454 <ucdr_deserialize_array_double+0x90>
 800e414:	46b0      	mov	r8, r6
 800e416:	e00b      	b.n	800e430 <ucdr_deserialize_array_double+0x6c>
 800e418:	463a      	mov	r2, r7
 800e41a:	68a1      	ldr	r1, [r4, #8]
 800e41c:	f009 f952 	bl	80176c4 <memcpy>
 800e420:	68a2      	ldr	r2, [r4, #8]
 800e422:	6923      	ldr	r3, [r4, #16]
 800e424:	443a      	add	r2, r7
 800e426:	443b      	add	r3, r7
 800e428:	eba8 0807 	sub.w	r8, r8, r7
 800e42c:	60a2      	str	r2, [r4, #8]
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	2208      	movs	r2, #8
 800e432:	4641      	mov	r1, r8
 800e434:	4620      	mov	r0, r4
 800e436:	f001 fd15 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e43a:	4607      	mov	r7, r0
 800e43c:	eba6 0008 	sub.w	r0, r6, r8
 800e440:	4428      	add	r0, r5
 800e442:	2f00      	cmp	r7, #0
 800e444:	d1e8      	bne.n	800e418 <ucdr_deserialize_array_double+0x54>
 800e446:	2308      	movs	r3, #8
 800e448:	7da0      	ldrb	r0, [r4, #22]
 800e44a:	7563      	strb	r3, [r4, #21]
 800e44c:	f080 0001 	eor.w	r0, r0, #1
 800e450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e454:	4632      	mov	r2, r6
 800e456:	4628      	mov	r0, r5
 800e458:	68a1      	ldr	r1, [r4, #8]
 800e45a:	f009 f933 	bl	80176c4 <memcpy>
 800e45e:	68a2      	ldr	r2, [r4, #8]
 800e460:	6923      	ldr	r3, [r4, #16]
 800e462:	4432      	add	r2, r6
 800e464:	441e      	add	r6, r3
 800e466:	60a2      	str	r2, [r4, #8]
 800e468:	6126      	str	r6, [r4, #16]
 800e46a:	e7ec      	b.n	800e446 <ucdr_deserialize_array_double+0x82>

0800e46c <ucdr_deserialize_endian_array_double>:
 800e46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e470:	460f      	mov	r7, r1
 800e472:	2108      	movs	r1, #8
 800e474:	4605      	mov	r5, r0
 800e476:	4614      	mov	r4, r2
 800e478:	461e      	mov	r6, r3
 800e47a:	f001 fcc9 	bl	800fe10 <ucdr_buffer_alignment>
 800e47e:	f895 8015 	ldrb.w	r8, [r5, #21]
 800e482:	4601      	mov	r1, r0
 800e484:	4628      	mov	r0, r5
 800e486:	f001 fd09 	bl	800fe9c <ucdr_advance_buffer>
 800e48a:	2f01      	cmp	r7, #1
 800e48c:	f885 8015 	strb.w	r8, [r5, #21]
 800e490:	d00f      	beq.n	800e4b2 <ucdr_deserialize_endian_array_double+0x46>
 800e492:	b14e      	cbz	r6, 800e4a8 <ucdr_deserialize_endian_array_double+0x3c>
 800e494:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800e498:	4622      	mov	r2, r4
 800e49a:	4639      	mov	r1, r7
 800e49c:	4628      	mov	r0, r5
 800e49e:	3408      	adds	r4, #8
 800e4a0:	f001 fb86 	bl	800fbb0 <ucdr_deserialize_endian_double>
 800e4a4:	42a6      	cmp	r6, r4
 800e4a6:	d1f7      	bne.n	800e498 <ucdr_deserialize_endian_array_double+0x2c>
 800e4a8:	7da8      	ldrb	r0, [r5, #22]
 800e4aa:	f080 0001 	eor.w	r0, r0, #1
 800e4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b2:	00f6      	lsls	r6, r6, #3
 800e4b4:	4631      	mov	r1, r6
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f001 fc4c 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e4bc:	b9f8      	cbnz	r0, 800e4fe <ucdr_deserialize_endian_array_double+0x92>
 800e4be:	46b0      	mov	r8, r6
 800e4c0:	e00b      	b.n	800e4da <ucdr_deserialize_endian_array_double+0x6e>
 800e4c2:	463a      	mov	r2, r7
 800e4c4:	68a9      	ldr	r1, [r5, #8]
 800e4c6:	f009 f8fd 	bl	80176c4 <memcpy>
 800e4ca:	68aa      	ldr	r2, [r5, #8]
 800e4cc:	692b      	ldr	r3, [r5, #16]
 800e4ce:	443a      	add	r2, r7
 800e4d0:	443b      	add	r3, r7
 800e4d2:	eba8 0807 	sub.w	r8, r8, r7
 800e4d6:	60aa      	str	r2, [r5, #8]
 800e4d8:	612b      	str	r3, [r5, #16]
 800e4da:	2208      	movs	r2, #8
 800e4dc:	4641      	mov	r1, r8
 800e4de:	4628      	mov	r0, r5
 800e4e0:	f001 fcc0 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	eba6 0008 	sub.w	r0, r6, r8
 800e4ea:	4420      	add	r0, r4
 800e4ec:	2f00      	cmp	r7, #0
 800e4ee:	d1e8      	bne.n	800e4c2 <ucdr_deserialize_endian_array_double+0x56>
 800e4f0:	2308      	movs	r3, #8
 800e4f2:	7da8      	ldrb	r0, [r5, #22]
 800e4f4:	756b      	strb	r3, [r5, #21]
 800e4f6:	f080 0001 	eor.w	r0, r0, #1
 800e4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4fe:	4632      	mov	r2, r6
 800e500:	4620      	mov	r0, r4
 800e502:	68a9      	ldr	r1, [r5, #8]
 800e504:	f009 f8de 	bl	80176c4 <memcpy>
 800e508:	68aa      	ldr	r2, [r5, #8]
 800e50a:	692b      	ldr	r3, [r5, #16]
 800e50c:	4432      	add	r2, r6
 800e50e:	441e      	add	r6, r3
 800e510:	60aa      	str	r2, [r5, #8]
 800e512:	612e      	str	r6, [r5, #16]
 800e514:	e7ec      	b.n	800e4f0 <ucdr_deserialize_endian_array_double+0x84>
 800e516:	bf00      	nop

0800e518 <ucdr_serialize_bool>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	460d      	mov	r5, r1
 800e51c:	2101      	movs	r1, #1
 800e51e:	4604      	mov	r4, r0
 800e520:	f001 fc24 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e524:	b148      	cbz	r0, 800e53a <ucdr_serialize_bool+0x22>
 800e526:	2101      	movs	r1, #1
 800e528:	68a3      	ldr	r3, [r4, #8]
 800e52a:	701d      	strb	r5, [r3, #0]
 800e52c:	68a2      	ldr	r2, [r4, #8]
 800e52e:	6923      	ldr	r3, [r4, #16]
 800e530:	440a      	add	r2, r1
 800e532:	440b      	add	r3, r1
 800e534:	60a2      	str	r2, [r4, #8]
 800e536:	6123      	str	r3, [r4, #16]
 800e538:	7561      	strb	r1, [r4, #21]
 800e53a:	7da0      	ldrb	r0, [r4, #22]
 800e53c:	f080 0001 	eor.w	r0, r0, #1
 800e540:	bd38      	pop	{r3, r4, r5, pc}
 800e542:	bf00      	nop

0800e544 <ucdr_deserialize_bool>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	460d      	mov	r5, r1
 800e548:	2101      	movs	r1, #1
 800e54a:	4604      	mov	r4, r0
 800e54c:	f001 fc0e 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e550:	b160      	cbz	r0, 800e56c <ucdr_deserialize_bool+0x28>
 800e552:	68a2      	ldr	r2, [r4, #8]
 800e554:	2001      	movs	r0, #1
 800e556:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e55a:	6923      	ldr	r3, [r4, #16]
 800e55c:	3900      	subs	r1, #0
 800e55e:	bf18      	it	ne
 800e560:	2101      	movne	r1, #1
 800e562:	4403      	add	r3, r0
 800e564:	7029      	strb	r1, [r5, #0]
 800e566:	60a2      	str	r2, [r4, #8]
 800e568:	6123      	str	r3, [r4, #16]
 800e56a:	7560      	strb	r0, [r4, #21]
 800e56c:	7da0      	ldrb	r0, [r4, #22]
 800e56e:	f080 0001 	eor.w	r0, r0, #1
 800e572:	bd38      	pop	{r3, r4, r5, pc}

0800e574 <ucdr_serialize_uint8_t>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	460d      	mov	r5, r1
 800e578:	2101      	movs	r1, #1
 800e57a:	4604      	mov	r4, r0
 800e57c:	f001 fbf6 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e580:	b148      	cbz	r0, 800e596 <ucdr_serialize_uint8_t+0x22>
 800e582:	2101      	movs	r1, #1
 800e584:	68a3      	ldr	r3, [r4, #8]
 800e586:	701d      	strb	r5, [r3, #0]
 800e588:	68a2      	ldr	r2, [r4, #8]
 800e58a:	6923      	ldr	r3, [r4, #16]
 800e58c:	440a      	add	r2, r1
 800e58e:	440b      	add	r3, r1
 800e590:	60a2      	str	r2, [r4, #8]
 800e592:	6123      	str	r3, [r4, #16]
 800e594:	7561      	strb	r1, [r4, #21]
 800e596:	7da0      	ldrb	r0, [r4, #22]
 800e598:	f080 0001 	eor.w	r0, r0, #1
 800e59c:	bd38      	pop	{r3, r4, r5, pc}
 800e59e:	bf00      	nop

0800e5a0 <ucdr_deserialize_uint8_t>:
 800e5a0:	b538      	push	{r3, r4, r5, lr}
 800e5a2:	460d      	mov	r5, r1
 800e5a4:	2101      	movs	r1, #1
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	f001 fbe0 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e5ac:	b150      	cbz	r0, 800e5c4 <ucdr_deserialize_uint8_t+0x24>
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	68a3      	ldr	r3, [r4, #8]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	702b      	strb	r3, [r5, #0]
 800e5b6:	68a2      	ldr	r2, [r4, #8]
 800e5b8:	6923      	ldr	r3, [r4, #16]
 800e5ba:	440a      	add	r2, r1
 800e5bc:	440b      	add	r3, r1
 800e5be:	60a2      	str	r2, [r4, #8]
 800e5c0:	6123      	str	r3, [r4, #16]
 800e5c2:	7561      	strb	r1, [r4, #21]
 800e5c4:	7da0      	ldrb	r0, [r4, #22]
 800e5c6:	f080 0001 	eor.w	r0, r0, #1
 800e5ca:	bd38      	pop	{r3, r4, r5, pc}

0800e5cc <ucdr_serialize_uint16_t>:
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d2:	2102      	movs	r1, #2
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e5dc:	f001 fc18 	bl	800fe10 <ucdr_buffer_alignment>
 800e5e0:	4601      	mov	r1, r0
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	7d67      	ldrb	r7, [r4, #21]
 800e5e6:	f001 fc59 	bl	800fe9c <ucdr_advance_buffer>
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	2102      	movs	r1, #2
 800e5ee:	f001 fbb1 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e5f2:	bb78      	cbnz	r0, 800e654 <ucdr_serialize_uint16_t+0x88>
 800e5f4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e5f8:	42ab      	cmp	r3, r5
 800e5fa:	d926      	bls.n	800e64a <ucdr_serialize_uint16_t+0x7e>
 800e5fc:	6922      	ldr	r2, [r4, #16]
 800e5fe:	1b5e      	subs	r6, r3, r5
 800e600:	4432      	add	r2, r6
 800e602:	f1c6 0802 	rsb	r8, r6, #2
 800e606:	4641      	mov	r1, r8
 800e608:	4620      	mov	r0, r4
 800e60a:	60a3      	str	r3, [r4, #8]
 800e60c:	6122      	str	r2, [r4, #16]
 800e60e:	f001 fbad 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e612:	2800      	cmp	r0, #0
 800e614:	d03b      	beq.n	800e68e <ucdr_serialize_uint16_t+0xc2>
 800e616:	7d23      	ldrb	r3, [r4, #20]
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d04a      	beq.n	800e6b2 <ucdr_serialize_uint16_t+0xe6>
 800e61c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e620:	702b      	strb	r3, [r5, #0]
 800e622:	2e00      	cmp	r6, #0
 800e624:	d040      	beq.n	800e6a8 <ucdr_serialize_uint16_t+0xdc>
 800e626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e62a:	706b      	strb	r3, [r5, #1]
 800e62c:	2102      	movs	r1, #2
 800e62e:	6923      	ldr	r3, [r4, #16]
 800e630:	68a2      	ldr	r2, [r4, #8]
 800e632:	7da0      	ldrb	r0, [r4, #22]
 800e634:	440b      	add	r3, r1
 800e636:	1b9e      	subs	r6, r3, r6
 800e638:	4442      	add	r2, r8
 800e63a:	f080 0001 	eor.w	r0, r0, #1
 800e63e:	6126      	str	r6, [r4, #16]
 800e640:	60a2      	str	r2, [r4, #8]
 800e642:	7561      	strb	r1, [r4, #21]
 800e644:	b002      	add	sp, #8
 800e646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e64a:	2102      	movs	r1, #2
 800e64c:	4620      	mov	r0, r4
 800e64e:	f001 fb8d 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e652:	b190      	cbz	r0, 800e67a <ucdr_serialize_uint16_t+0xae>
 800e654:	7d23      	ldrb	r3, [r4, #20]
 800e656:	2b01      	cmp	r3, #1
 800e658:	68a3      	ldr	r3, [r4, #8]
 800e65a:	d014      	beq.n	800e686 <ucdr_serialize_uint16_t+0xba>
 800e65c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e660:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e664:	7019      	strb	r1, [r3, #0]
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	705a      	strb	r2, [r3, #1]
 800e66a:	2102      	movs	r1, #2
 800e66c:	68a2      	ldr	r2, [r4, #8]
 800e66e:	6923      	ldr	r3, [r4, #16]
 800e670:	440a      	add	r2, r1
 800e672:	440b      	add	r3, r1
 800e674:	60a2      	str	r2, [r4, #8]
 800e676:	6123      	str	r3, [r4, #16]
 800e678:	7561      	strb	r1, [r4, #21]
 800e67a:	7da0      	ldrb	r0, [r4, #22]
 800e67c:	f080 0001 	eor.w	r0, r0, #1
 800e680:	b002      	add	sp, #8
 800e682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e686:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e68a:	801a      	strh	r2, [r3, #0]
 800e68c:	e7ed      	b.n	800e66a <ucdr_serialize_uint16_t+0x9e>
 800e68e:	68a2      	ldr	r2, [r4, #8]
 800e690:	6923      	ldr	r3, [r4, #16]
 800e692:	7da0      	ldrb	r0, [r4, #22]
 800e694:	1b92      	subs	r2, r2, r6
 800e696:	f080 0001 	eor.w	r0, r0, #1
 800e69a:	1b9e      	subs	r6, r3, r6
 800e69c:	7567      	strb	r7, [r4, #21]
 800e69e:	60a2      	str	r2, [r4, #8]
 800e6a0:	6126      	str	r6, [r4, #16]
 800e6a2:	b002      	add	sp, #8
 800e6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a8:	68a3      	ldr	r3, [r4, #8]
 800e6aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	e7bc      	b.n	800e62c <ucdr_serialize_uint16_t+0x60>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f10d 0506 	add.w	r5, sp, #6
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	4632      	mov	r2, r6
 800e6bc:	f009 f802 	bl	80176c4 <memcpy>
 800e6c0:	4642      	mov	r2, r8
 800e6c2:	68a0      	ldr	r0, [r4, #8]
 800e6c4:	19a9      	adds	r1, r5, r6
 800e6c6:	f008 fffd 	bl	80176c4 <memcpy>
 800e6ca:	e7af      	b.n	800e62c <ucdr_serialize_uint16_t+0x60>

0800e6cc <ucdr_serialize_endian_uint16_t>:
 800e6cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	2102      	movs	r1, #2
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e6dc:	f001 fb98 	bl	800fe10 <ucdr_buffer_alignment>
 800e6e0:	4601      	mov	r1, r0
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e6e8:	f001 fbd8 	bl	800fe9c <ucdr_advance_buffer>
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	2102      	movs	r1, #2
 800e6f0:	f001 fb30 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e6f4:	bb70      	cbnz	r0, 800e754 <ucdr_serialize_endian_uint16_t+0x88>
 800e6f6:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e6fa:	42b3      	cmp	r3, r6
 800e6fc:	d925      	bls.n	800e74a <ucdr_serialize_endian_uint16_t+0x7e>
 800e6fe:	6922      	ldr	r2, [r4, #16]
 800e700:	1b9f      	subs	r7, r3, r6
 800e702:	443a      	add	r2, r7
 800e704:	f1c7 0902 	rsb	r9, r7, #2
 800e708:	4649      	mov	r1, r9
 800e70a:	4620      	mov	r0, r4
 800e70c:	60a3      	str	r3, [r4, #8]
 800e70e:	6122      	str	r2, [r4, #16]
 800e710:	f001 fb2c 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e714:	2800      	cmp	r0, #0
 800e716:	d039      	beq.n	800e78c <ucdr_serialize_endian_uint16_t+0xc0>
 800e718:	2d01      	cmp	r5, #1
 800e71a:	d04a      	beq.n	800e7b2 <ucdr_serialize_endian_uint16_t+0xe6>
 800e71c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e720:	7033      	strb	r3, [r6, #0]
 800e722:	2f00      	cmp	r7, #0
 800e724:	d040      	beq.n	800e7a8 <ucdr_serialize_endian_uint16_t+0xdc>
 800e726:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e72a:	7073      	strb	r3, [r6, #1]
 800e72c:	2102      	movs	r1, #2
 800e72e:	6923      	ldr	r3, [r4, #16]
 800e730:	68a2      	ldr	r2, [r4, #8]
 800e732:	7da0      	ldrb	r0, [r4, #22]
 800e734:	440b      	add	r3, r1
 800e736:	1bdf      	subs	r7, r3, r7
 800e738:	444a      	add	r2, r9
 800e73a:	f080 0001 	eor.w	r0, r0, #1
 800e73e:	6127      	str	r7, [r4, #16]
 800e740:	60a2      	str	r2, [r4, #8]
 800e742:	7561      	strb	r1, [r4, #21]
 800e744:	b003      	add	sp, #12
 800e746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e74a:	2102      	movs	r1, #2
 800e74c:	4620      	mov	r0, r4
 800e74e:	f001 fb0d 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e752:	b188      	cbz	r0, 800e778 <ucdr_serialize_endian_uint16_t+0xac>
 800e754:	2d01      	cmp	r5, #1
 800e756:	68a3      	ldr	r3, [r4, #8]
 800e758:	d014      	beq.n	800e784 <ucdr_serialize_endian_uint16_t+0xb8>
 800e75a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e75e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e762:	7019      	strb	r1, [r3, #0]
 800e764:	68a3      	ldr	r3, [r4, #8]
 800e766:	705a      	strb	r2, [r3, #1]
 800e768:	2102      	movs	r1, #2
 800e76a:	68a2      	ldr	r2, [r4, #8]
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	440a      	add	r2, r1
 800e770:	440b      	add	r3, r1
 800e772:	60a2      	str	r2, [r4, #8]
 800e774:	6123      	str	r3, [r4, #16]
 800e776:	7561      	strb	r1, [r4, #21]
 800e778:	7da0      	ldrb	r0, [r4, #22]
 800e77a:	f080 0001 	eor.w	r0, r0, #1
 800e77e:	b003      	add	sp, #12
 800e780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e784:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e788:	801a      	strh	r2, [r3, #0]
 800e78a:	e7ed      	b.n	800e768 <ucdr_serialize_endian_uint16_t+0x9c>
 800e78c:	68a2      	ldr	r2, [r4, #8]
 800e78e:	6923      	ldr	r3, [r4, #16]
 800e790:	7da0      	ldrb	r0, [r4, #22]
 800e792:	1bd2      	subs	r2, r2, r7
 800e794:	f080 0001 	eor.w	r0, r0, #1
 800e798:	1bdf      	subs	r7, r3, r7
 800e79a:	f884 8015 	strb.w	r8, [r4, #21]
 800e79e:	60a2      	str	r2, [r4, #8]
 800e7a0:	6127      	str	r7, [r4, #16]
 800e7a2:	b003      	add	sp, #12
 800e7a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a8:	68a3      	ldr	r3, [r4, #8]
 800e7aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7ae:	701a      	strb	r2, [r3, #0]
 800e7b0:	e7bc      	b.n	800e72c <ucdr_serialize_endian_uint16_t+0x60>
 800e7b2:	f10d 0506 	add.w	r5, sp, #6
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	463a      	mov	r2, r7
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	f008 ff82 	bl	80176c4 <memcpy>
 800e7c0:	464a      	mov	r2, r9
 800e7c2:	68a0      	ldr	r0, [r4, #8]
 800e7c4:	19e9      	adds	r1, r5, r7
 800e7c6:	f008 ff7d 	bl	80176c4 <memcpy>
 800e7ca:	e7af      	b.n	800e72c <ucdr_serialize_endian_uint16_t+0x60>

0800e7cc <ucdr_deserialize_uint16_t>:
 800e7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	2102      	movs	r1, #2
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	f001 fb1b 	bl	800fe10 <ucdr_buffer_alignment>
 800e7da:	4601      	mov	r1, r0
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e7e2:	f001 fb5b 	bl	800fe9c <ucdr_advance_buffer>
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	2102      	movs	r1, #2
 800e7ea:	f001 fab3 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e7ee:	bb60      	cbnz	r0, 800e84a <ucdr_deserialize_uint16_t+0x7e>
 800e7f0:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800e7f4:	42b3      	cmp	r3, r6
 800e7f6:	d923      	bls.n	800e840 <ucdr_deserialize_uint16_t+0x74>
 800e7f8:	6922      	ldr	r2, [r4, #16]
 800e7fa:	1b9f      	subs	r7, r3, r6
 800e7fc:	443a      	add	r2, r7
 800e7fe:	f1c7 0902 	rsb	r9, r7, #2
 800e802:	4649      	mov	r1, r9
 800e804:	4620      	mov	r0, r4
 800e806:	60a3      	str	r3, [r4, #8]
 800e808:	6122      	str	r2, [r4, #16]
 800e80a:	f001 faaf 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d034      	beq.n	800e87c <ucdr_deserialize_uint16_t+0xb0>
 800e812:	7d23      	ldrb	r3, [r4, #20]
 800e814:	2b01      	cmp	r3, #1
 800e816:	d042      	beq.n	800e89e <ucdr_deserialize_uint16_t+0xd2>
 800e818:	7873      	ldrb	r3, [r6, #1]
 800e81a:	702b      	strb	r3, [r5, #0]
 800e81c:	2f00      	cmp	r7, #0
 800e81e:	d03a      	beq.n	800e896 <ucdr_deserialize_uint16_t+0xca>
 800e820:	7833      	ldrb	r3, [r6, #0]
 800e822:	706b      	strb	r3, [r5, #1]
 800e824:	2102      	movs	r1, #2
 800e826:	6923      	ldr	r3, [r4, #16]
 800e828:	68a2      	ldr	r2, [r4, #8]
 800e82a:	7da0      	ldrb	r0, [r4, #22]
 800e82c:	440b      	add	r3, r1
 800e82e:	1bdf      	subs	r7, r3, r7
 800e830:	444a      	add	r2, r9
 800e832:	7561      	strb	r1, [r4, #21]
 800e834:	6127      	str	r7, [r4, #16]
 800e836:	60a2      	str	r2, [r4, #8]
 800e838:	f080 0001 	eor.w	r0, r0, #1
 800e83c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e840:	2102      	movs	r1, #2
 800e842:	4620      	mov	r0, r4
 800e844:	f001 fa92 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e848:	b180      	cbz	r0, 800e86c <ucdr_deserialize_uint16_t+0xa0>
 800e84a:	7d23      	ldrb	r3, [r4, #20]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	68a3      	ldr	r3, [r4, #8]
 800e850:	d011      	beq.n	800e876 <ucdr_deserialize_uint16_t+0xaa>
 800e852:	785b      	ldrb	r3, [r3, #1]
 800e854:	702b      	strb	r3, [r5, #0]
 800e856:	68a3      	ldr	r3, [r4, #8]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	706b      	strb	r3, [r5, #1]
 800e85c:	2102      	movs	r1, #2
 800e85e:	68a2      	ldr	r2, [r4, #8]
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	440a      	add	r2, r1
 800e864:	440b      	add	r3, r1
 800e866:	60a2      	str	r2, [r4, #8]
 800e868:	6123      	str	r3, [r4, #16]
 800e86a:	7561      	strb	r1, [r4, #21]
 800e86c:	7da0      	ldrb	r0, [r4, #22]
 800e86e:	f080 0001 	eor.w	r0, r0, #1
 800e872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e876:	881b      	ldrh	r3, [r3, #0]
 800e878:	802b      	strh	r3, [r5, #0]
 800e87a:	e7ef      	b.n	800e85c <ucdr_deserialize_uint16_t+0x90>
 800e87c:	68a2      	ldr	r2, [r4, #8]
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	7da0      	ldrb	r0, [r4, #22]
 800e882:	1bd2      	subs	r2, r2, r7
 800e884:	f884 8015 	strb.w	r8, [r4, #21]
 800e888:	1bdf      	subs	r7, r3, r7
 800e88a:	60a2      	str	r2, [r4, #8]
 800e88c:	6127      	str	r7, [r4, #16]
 800e88e:	f080 0001 	eor.w	r0, r0, #1
 800e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	706b      	strb	r3, [r5, #1]
 800e89c:	e7c2      	b.n	800e824 <ucdr_deserialize_uint16_t+0x58>
 800e89e:	4631      	mov	r1, r6
 800e8a0:	463a      	mov	r2, r7
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f008 ff0e 	bl	80176c4 <memcpy>
 800e8a8:	464a      	mov	r2, r9
 800e8aa:	68a1      	ldr	r1, [r4, #8]
 800e8ac:	19e8      	adds	r0, r5, r7
 800e8ae:	f008 ff09 	bl	80176c4 <memcpy>
 800e8b2:	e7b7      	b.n	800e824 <ucdr_deserialize_uint16_t+0x58>

0800e8b4 <ucdr_deserialize_endian_uint16_t>:
 800e8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b8:	460e      	mov	r6, r1
 800e8ba:	2102      	movs	r1, #2
 800e8bc:	4604      	mov	r4, r0
 800e8be:	4615      	mov	r5, r2
 800e8c0:	f001 faa6 	bl	800fe10 <ucdr_buffer_alignment>
 800e8c4:	4601      	mov	r1, r0
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e8cc:	f001 fae6 	bl	800fe9c <ucdr_advance_buffer>
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	2102      	movs	r1, #2
 800e8d4:	f001 fa3e 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e8d8:	bb70      	cbnz	r0, 800e938 <ucdr_deserialize_endian_uint16_t+0x84>
 800e8da:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e8de:	42bb      	cmp	r3, r7
 800e8e0:	d925      	bls.n	800e92e <ucdr_deserialize_endian_uint16_t+0x7a>
 800e8e2:	6922      	ldr	r2, [r4, #16]
 800e8e4:	eba3 0807 	sub.w	r8, r3, r7
 800e8e8:	4442      	add	r2, r8
 800e8ea:	f1c8 0a02 	rsb	sl, r8, #2
 800e8ee:	4651      	mov	r1, sl
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	60a3      	str	r3, [r4, #8]
 800e8f4:	6122      	str	r2, [r4, #16]
 800e8f6:	f001 fa39 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d034      	beq.n	800e968 <ucdr_deserialize_endian_uint16_t+0xb4>
 800e8fe:	2e01      	cmp	r6, #1
 800e900:	d045      	beq.n	800e98e <ucdr_deserialize_endian_uint16_t+0xda>
 800e902:	787b      	ldrb	r3, [r7, #1]
 800e904:	702b      	strb	r3, [r5, #0]
 800e906:	f1b8 0f00 	cmp.w	r8, #0
 800e90a:	d03c      	beq.n	800e986 <ucdr_deserialize_endian_uint16_t+0xd2>
 800e90c:	783b      	ldrb	r3, [r7, #0]
 800e90e:	706b      	strb	r3, [r5, #1]
 800e910:	2102      	movs	r1, #2
 800e912:	6923      	ldr	r3, [r4, #16]
 800e914:	68a2      	ldr	r2, [r4, #8]
 800e916:	7da0      	ldrb	r0, [r4, #22]
 800e918:	440b      	add	r3, r1
 800e91a:	eba3 0308 	sub.w	r3, r3, r8
 800e91e:	4452      	add	r2, sl
 800e920:	7561      	strb	r1, [r4, #21]
 800e922:	6123      	str	r3, [r4, #16]
 800e924:	60a2      	str	r2, [r4, #8]
 800e926:	f080 0001 	eor.w	r0, r0, #1
 800e92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e92e:	2102      	movs	r1, #2
 800e930:	4620      	mov	r0, r4
 800e932:	f001 fa1b 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e936:	b178      	cbz	r0, 800e958 <ucdr_deserialize_endian_uint16_t+0xa4>
 800e938:	2e01      	cmp	r6, #1
 800e93a:	68a3      	ldr	r3, [r4, #8]
 800e93c:	d011      	beq.n	800e962 <ucdr_deserialize_endian_uint16_t+0xae>
 800e93e:	785b      	ldrb	r3, [r3, #1]
 800e940:	702b      	strb	r3, [r5, #0]
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	706b      	strb	r3, [r5, #1]
 800e948:	2102      	movs	r1, #2
 800e94a:	68a2      	ldr	r2, [r4, #8]
 800e94c:	6923      	ldr	r3, [r4, #16]
 800e94e:	440a      	add	r2, r1
 800e950:	440b      	add	r3, r1
 800e952:	60a2      	str	r2, [r4, #8]
 800e954:	6123      	str	r3, [r4, #16]
 800e956:	7561      	strb	r1, [r4, #21]
 800e958:	7da0      	ldrb	r0, [r4, #22]
 800e95a:	f080 0001 	eor.w	r0, r0, #1
 800e95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e962:	881b      	ldrh	r3, [r3, #0]
 800e964:	802b      	strh	r3, [r5, #0]
 800e966:	e7ef      	b.n	800e948 <ucdr_deserialize_endian_uint16_t+0x94>
 800e968:	68a2      	ldr	r2, [r4, #8]
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	7da0      	ldrb	r0, [r4, #22]
 800e96e:	eba2 0208 	sub.w	r2, r2, r8
 800e972:	eba3 0308 	sub.w	r3, r3, r8
 800e976:	f884 9015 	strb.w	r9, [r4, #21]
 800e97a:	60a2      	str	r2, [r4, #8]
 800e97c:	6123      	str	r3, [r4, #16]
 800e97e:	f080 0001 	eor.w	r0, r0, #1
 800e982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e986:	68a3      	ldr	r3, [r4, #8]
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	706b      	strb	r3, [r5, #1]
 800e98c:	e7c0      	b.n	800e910 <ucdr_deserialize_endian_uint16_t+0x5c>
 800e98e:	4639      	mov	r1, r7
 800e990:	4642      	mov	r2, r8
 800e992:	4628      	mov	r0, r5
 800e994:	f008 fe96 	bl	80176c4 <memcpy>
 800e998:	4652      	mov	r2, sl
 800e99a:	68a1      	ldr	r1, [r4, #8]
 800e99c:	eb05 0008 	add.w	r0, r5, r8
 800e9a0:	f008 fe90 	bl	80176c4 <memcpy>
 800e9a4:	e7b4      	b.n	800e910 <ucdr_deserialize_endian_uint16_t+0x5c>
 800e9a6:	bf00      	nop

0800e9a8 <ucdr_serialize_uint32_t>:
 800e9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	9101      	str	r1, [sp, #4]
 800e9b0:	2104      	movs	r1, #4
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	f001 fa2c 	bl	800fe10 <ucdr_buffer_alignment>
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	7d67      	ldrb	r7, [r4, #21]
 800e9be:	f001 fa6d 	bl	800fe9c <ucdr_advance_buffer>
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	2104      	movs	r1, #4
 800e9c6:	f001 f9c5 	bl	800fd54 <ucdr_check_buffer_available_for>
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	d139      	bne.n	800ea42 <ucdr_serialize_uint32_t+0x9a>
 800e9ce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e9d2:	42ab      	cmp	r3, r5
 800e9d4:	d930      	bls.n	800ea38 <ucdr_serialize_uint32_t+0x90>
 800e9d6:	6922      	ldr	r2, [r4, #16]
 800e9d8:	1b5e      	subs	r6, r3, r5
 800e9da:	4432      	add	r2, r6
 800e9dc:	f1c6 0804 	rsb	r8, r6, #4
 800e9e0:	4641      	mov	r1, r8
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	60a3      	str	r3, [r4, #8]
 800e9e6:	6122      	str	r2, [r4, #16]
 800e9e8:	f001 f9c0 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d04c      	beq.n	800ea8a <ucdr_serialize_uint32_t+0xe2>
 800e9f0:	7d23      	ldrb	r3, [r4, #20]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d063      	beq.n	800eabe <ucdr_serialize_uint32_t+0x116>
 800e9f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e9fa:	702b      	strb	r3, [r5, #0]
 800e9fc:	2e00      	cmp	r6, #0
 800e9fe:	d051      	beq.n	800eaa4 <ucdr_serialize_uint32_t+0xfc>
 800ea00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea04:	2e01      	cmp	r6, #1
 800ea06:	706b      	strb	r3, [r5, #1]
 800ea08:	d050      	beq.n	800eaac <ucdr_serialize_uint32_t+0x104>
 800ea0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea0e:	2e02      	cmp	r6, #2
 800ea10:	70ab      	strb	r3, [r5, #2]
 800ea12:	d04f      	beq.n	800eab4 <ucdr_serialize_uint32_t+0x10c>
 800ea14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea18:	70eb      	strb	r3, [r5, #3]
 800ea1a:	2104      	movs	r1, #4
 800ea1c:	6923      	ldr	r3, [r4, #16]
 800ea1e:	68a2      	ldr	r2, [r4, #8]
 800ea20:	7da0      	ldrb	r0, [r4, #22]
 800ea22:	440b      	add	r3, r1
 800ea24:	1b9e      	subs	r6, r3, r6
 800ea26:	4442      	add	r2, r8
 800ea28:	f080 0001 	eor.w	r0, r0, #1
 800ea2c:	6126      	str	r6, [r4, #16]
 800ea2e:	60a2      	str	r2, [r4, #8]
 800ea30:	7561      	strb	r1, [r4, #21]
 800ea32:	b002      	add	sp, #8
 800ea34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea38:	2104      	movs	r1, #4
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f001 f996 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800ea40:	b1d0      	cbz	r0, 800ea78 <ucdr_serialize_uint32_t+0xd0>
 800ea42:	7d23      	ldrb	r3, [r4, #20]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	68a3      	ldr	r3, [r4, #8]
 800ea48:	d01c      	beq.n	800ea84 <ucdr_serialize_uint32_t+0xdc>
 800ea4a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ea4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ea52:	7019      	strb	r1, [r3, #0]
 800ea54:	68a3      	ldr	r3, [r4, #8]
 800ea56:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ea5a:	705a      	strb	r2, [r3, #1]
 800ea5c:	68a3      	ldr	r3, [r4, #8]
 800ea5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ea62:	7099      	strb	r1, [r3, #2]
 800ea64:	68a3      	ldr	r3, [r4, #8]
 800ea66:	70da      	strb	r2, [r3, #3]
 800ea68:	2104      	movs	r1, #4
 800ea6a:	68a2      	ldr	r2, [r4, #8]
 800ea6c:	6923      	ldr	r3, [r4, #16]
 800ea6e:	440a      	add	r2, r1
 800ea70:	440b      	add	r3, r1
 800ea72:	60a2      	str	r2, [r4, #8]
 800ea74:	6123      	str	r3, [r4, #16]
 800ea76:	7561      	strb	r1, [r4, #21]
 800ea78:	7da0      	ldrb	r0, [r4, #22]
 800ea7a:	f080 0001 	eor.w	r0, r0, #1
 800ea7e:	b002      	add	sp, #8
 800ea80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea84:	9a01      	ldr	r2, [sp, #4]
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	e7ee      	b.n	800ea68 <ucdr_serialize_uint32_t+0xc0>
 800ea8a:	68a2      	ldr	r2, [r4, #8]
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	7da0      	ldrb	r0, [r4, #22]
 800ea90:	1b92      	subs	r2, r2, r6
 800ea92:	f080 0001 	eor.w	r0, r0, #1
 800ea96:	1b9e      	subs	r6, r3, r6
 800ea98:	7567      	strb	r7, [r4, #21]
 800ea9a:	60a2      	str	r2, [r4, #8]
 800ea9c:	6126      	str	r6, [r4, #16]
 800ea9e:	b002      	add	sp, #8
 800eaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa4:	68a3      	ldr	r3, [r4, #8]
 800eaa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eaaa:	701a      	strb	r2, [r3, #0]
 800eaac:	68a3      	ldr	r3, [r4, #8]
 800eaae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eab2:	701a      	strb	r2, [r3, #0]
 800eab4:	68a3      	ldr	r3, [r4, #8]
 800eab6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eaba:	701a      	strb	r2, [r3, #0]
 800eabc:	e7ad      	b.n	800ea1a <ucdr_serialize_uint32_t+0x72>
 800eabe:	4628      	mov	r0, r5
 800eac0:	ad01      	add	r5, sp, #4
 800eac2:	4629      	mov	r1, r5
 800eac4:	4632      	mov	r2, r6
 800eac6:	f008 fdfd 	bl	80176c4 <memcpy>
 800eaca:	4642      	mov	r2, r8
 800eacc:	68a0      	ldr	r0, [r4, #8]
 800eace:	19a9      	adds	r1, r5, r6
 800ead0:	f008 fdf8 	bl	80176c4 <memcpy>
 800ead4:	e7a1      	b.n	800ea1a <ucdr_serialize_uint32_t+0x72>
 800ead6:	bf00      	nop

0800ead8 <ucdr_serialize_endian_uint32_t>:
 800ead8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eadc:	460d      	mov	r5, r1
 800eade:	b083      	sub	sp, #12
 800eae0:	2104      	movs	r1, #4
 800eae2:	4604      	mov	r4, r0
 800eae4:	9201      	str	r2, [sp, #4]
 800eae6:	f001 f993 	bl	800fe10 <ucdr_buffer_alignment>
 800eaea:	4601      	mov	r1, r0
 800eaec:	4620      	mov	r0, r4
 800eaee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eaf2:	f001 f9d3 	bl	800fe9c <ucdr_advance_buffer>
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	2104      	movs	r1, #4
 800eafa:	f001 f92b 	bl	800fd54 <ucdr_check_buffer_available_for>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d138      	bne.n	800eb74 <ucdr_serialize_endian_uint32_t+0x9c>
 800eb02:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800eb06:	42b3      	cmp	r3, r6
 800eb08:	d92f      	bls.n	800eb6a <ucdr_serialize_endian_uint32_t+0x92>
 800eb0a:	6922      	ldr	r2, [r4, #16]
 800eb0c:	1b9f      	subs	r7, r3, r6
 800eb0e:	443a      	add	r2, r7
 800eb10:	f1c7 0904 	rsb	r9, r7, #4
 800eb14:	4649      	mov	r1, r9
 800eb16:	4620      	mov	r0, r4
 800eb18:	60a3      	str	r3, [r4, #8]
 800eb1a:	6122      	str	r2, [r4, #16]
 800eb1c:	f001 f926 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d04a      	beq.n	800ebba <ucdr_serialize_endian_uint32_t+0xe2>
 800eb24:	2d01      	cmp	r5, #1
 800eb26:	d063      	beq.n	800ebf0 <ucdr_serialize_endian_uint32_t+0x118>
 800eb28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb2c:	7033      	strb	r3, [r6, #0]
 800eb2e:	2f00      	cmp	r7, #0
 800eb30:	d051      	beq.n	800ebd6 <ucdr_serialize_endian_uint32_t+0xfe>
 800eb32:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb36:	2f01      	cmp	r7, #1
 800eb38:	7073      	strb	r3, [r6, #1]
 800eb3a:	d050      	beq.n	800ebde <ucdr_serialize_endian_uint32_t+0x106>
 800eb3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eb40:	2f02      	cmp	r7, #2
 800eb42:	70b3      	strb	r3, [r6, #2]
 800eb44:	d04f      	beq.n	800ebe6 <ucdr_serialize_endian_uint32_t+0x10e>
 800eb46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eb4a:	70f3      	strb	r3, [r6, #3]
 800eb4c:	2104      	movs	r1, #4
 800eb4e:	6923      	ldr	r3, [r4, #16]
 800eb50:	68a2      	ldr	r2, [r4, #8]
 800eb52:	7da0      	ldrb	r0, [r4, #22]
 800eb54:	440b      	add	r3, r1
 800eb56:	1bdf      	subs	r7, r3, r7
 800eb58:	444a      	add	r2, r9
 800eb5a:	f080 0001 	eor.w	r0, r0, #1
 800eb5e:	6127      	str	r7, [r4, #16]
 800eb60:	60a2      	str	r2, [r4, #8]
 800eb62:	7561      	strb	r1, [r4, #21]
 800eb64:	b003      	add	sp, #12
 800eb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb6a:	2104      	movs	r1, #4
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f001 f8fd 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800eb72:	b1c8      	cbz	r0, 800eba8 <ucdr_serialize_endian_uint32_t+0xd0>
 800eb74:	2d01      	cmp	r5, #1
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	d01c      	beq.n	800ebb4 <ucdr_serialize_endian_uint32_t+0xdc>
 800eb7a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eb7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb82:	7019      	strb	r1, [r3, #0]
 800eb84:	68a3      	ldr	r3, [r4, #8]
 800eb86:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800eb8a:	705a      	strb	r2, [r3, #1]
 800eb8c:	68a3      	ldr	r3, [r4, #8]
 800eb8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eb92:	7099      	strb	r1, [r3, #2]
 800eb94:	68a3      	ldr	r3, [r4, #8]
 800eb96:	70da      	strb	r2, [r3, #3]
 800eb98:	2104      	movs	r1, #4
 800eb9a:	68a2      	ldr	r2, [r4, #8]
 800eb9c:	6923      	ldr	r3, [r4, #16]
 800eb9e:	440a      	add	r2, r1
 800eba0:	440b      	add	r3, r1
 800eba2:	60a2      	str	r2, [r4, #8]
 800eba4:	6123      	str	r3, [r4, #16]
 800eba6:	7561      	strb	r1, [r4, #21]
 800eba8:	7da0      	ldrb	r0, [r4, #22]
 800ebaa:	f080 0001 	eor.w	r0, r0, #1
 800ebae:	b003      	add	sp, #12
 800ebb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebb4:	9a01      	ldr	r2, [sp, #4]
 800ebb6:	601a      	str	r2, [r3, #0]
 800ebb8:	e7ee      	b.n	800eb98 <ucdr_serialize_endian_uint32_t+0xc0>
 800ebba:	68a2      	ldr	r2, [r4, #8]
 800ebbc:	6923      	ldr	r3, [r4, #16]
 800ebbe:	7da0      	ldrb	r0, [r4, #22]
 800ebc0:	1bd2      	subs	r2, r2, r7
 800ebc2:	f080 0001 	eor.w	r0, r0, #1
 800ebc6:	1bdf      	subs	r7, r3, r7
 800ebc8:	f884 8015 	strb.w	r8, [r4, #21]
 800ebcc:	60a2      	str	r2, [r4, #8]
 800ebce:	6127      	str	r7, [r4, #16]
 800ebd0:	b003      	add	sp, #12
 800ebd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebd6:	68a3      	ldr	r3, [r4, #8]
 800ebd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebdc:	701a      	strb	r2, [r3, #0]
 800ebde:	68a3      	ldr	r3, [r4, #8]
 800ebe0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ebe4:	701a      	strb	r2, [r3, #0]
 800ebe6:	68a3      	ldr	r3, [r4, #8]
 800ebe8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ebec:	701a      	strb	r2, [r3, #0]
 800ebee:	e7ad      	b.n	800eb4c <ucdr_serialize_endian_uint32_t+0x74>
 800ebf0:	ad01      	add	r5, sp, #4
 800ebf2:	4629      	mov	r1, r5
 800ebf4:	463a      	mov	r2, r7
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	f008 fd64 	bl	80176c4 <memcpy>
 800ebfc:	464a      	mov	r2, r9
 800ebfe:	68a0      	ldr	r0, [r4, #8]
 800ec00:	19e9      	adds	r1, r5, r7
 800ec02:	f008 fd5f 	bl	80176c4 <memcpy>
 800ec06:	e7a1      	b.n	800eb4c <ucdr_serialize_endian_uint32_t+0x74>

0800ec08 <ucdr_deserialize_uint32_t>:
 800ec08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec0c:	460d      	mov	r5, r1
 800ec0e:	2104      	movs	r1, #4
 800ec10:	4604      	mov	r4, r0
 800ec12:	f001 f8fd 	bl	800fe10 <ucdr_buffer_alignment>
 800ec16:	4601      	mov	r1, r0
 800ec18:	4620      	mov	r0, r4
 800ec1a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec1e:	f001 f93d 	bl	800fe9c <ucdr_advance_buffer>
 800ec22:	4620      	mov	r0, r4
 800ec24:	2104      	movs	r1, #4
 800ec26:	f001 f895 	bl	800fd54 <ucdr_check_buffer_available_for>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d138      	bne.n	800eca0 <ucdr_deserialize_uint32_t+0x98>
 800ec2e:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800ec32:	42b3      	cmp	r3, r6
 800ec34:	d92f      	bls.n	800ec96 <ucdr_deserialize_uint32_t+0x8e>
 800ec36:	6922      	ldr	r2, [r4, #16]
 800ec38:	1b9f      	subs	r7, r3, r6
 800ec3a:	443a      	add	r2, r7
 800ec3c:	f1c7 0904 	rsb	r9, r7, #4
 800ec40:	4649      	mov	r1, r9
 800ec42:	4620      	mov	r0, r4
 800ec44:	60a3      	str	r3, [r4, #8]
 800ec46:	6122      	str	r2, [r4, #16]
 800ec48:	f001 f890 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d046      	beq.n	800ecde <ucdr_deserialize_uint32_t+0xd6>
 800ec50:	7d23      	ldrb	r3, [r4, #20]
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d05c      	beq.n	800ed10 <ucdr_deserialize_uint32_t+0x108>
 800ec56:	78f3      	ldrb	r3, [r6, #3]
 800ec58:	702b      	strb	r3, [r5, #0]
 800ec5a:	2f00      	cmp	r7, #0
 800ec5c:	d04c      	beq.n	800ecf8 <ucdr_deserialize_uint32_t+0xf0>
 800ec5e:	78b2      	ldrb	r2, [r6, #2]
 800ec60:	2f01      	cmp	r7, #1
 800ec62:	f105 0302 	add.w	r3, r5, #2
 800ec66:	706a      	strb	r2, [r5, #1]
 800ec68:	d04a      	beq.n	800ed00 <ucdr_deserialize_uint32_t+0xf8>
 800ec6a:	7872      	ldrb	r2, [r6, #1]
 800ec6c:	2f02      	cmp	r7, #2
 800ec6e:	f105 0303 	add.w	r3, r5, #3
 800ec72:	70aa      	strb	r2, [r5, #2]
 800ec74:	d048      	beq.n	800ed08 <ucdr_deserialize_uint32_t+0x100>
 800ec76:	7833      	ldrb	r3, [r6, #0]
 800ec78:	70eb      	strb	r3, [r5, #3]
 800ec7a:	2104      	movs	r1, #4
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	68a2      	ldr	r2, [r4, #8]
 800ec80:	7da0      	ldrb	r0, [r4, #22]
 800ec82:	440b      	add	r3, r1
 800ec84:	1bdf      	subs	r7, r3, r7
 800ec86:	444a      	add	r2, r9
 800ec88:	7561      	strb	r1, [r4, #21]
 800ec8a:	6127      	str	r7, [r4, #16]
 800ec8c:	60a2      	str	r2, [r4, #8]
 800ec8e:	f080 0001 	eor.w	r0, r0, #1
 800ec92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec96:	2104      	movs	r1, #4
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f001 f867 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800ec9e:	b1b0      	cbz	r0, 800ecce <ucdr_deserialize_uint32_t+0xc6>
 800eca0:	7d23      	ldrb	r3, [r4, #20]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	68a3      	ldr	r3, [r4, #8]
 800eca6:	d017      	beq.n	800ecd8 <ucdr_deserialize_uint32_t+0xd0>
 800eca8:	78db      	ldrb	r3, [r3, #3]
 800ecaa:	702b      	strb	r3, [r5, #0]
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	789b      	ldrb	r3, [r3, #2]
 800ecb0:	706b      	strb	r3, [r5, #1]
 800ecb2:	68a3      	ldr	r3, [r4, #8]
 800ecb4:	785b      	ldrb	r3, [r3, #1]
 800ecb6:	70ab      	strb	r3, [r5, #2]
 800ecb8:	68a3      	ldr	r3, [r4, #8]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	70eb      	strb	r3, [r5, #3]
 800ecbe:	2104      	movs	r1, #4
 800ecc0:	68a2      	ldr	r2, [r4, #8]
 800ecc2:	6923      	ldr	r3, [r4, #16]
 800ecc4:	440a      	add	r2, r1
 800ecc6:	440b      	add	r3, r1
 800ecc8:	60a2      	str	r2, [r4, #8]
 800ecca:	6123      	str	r3, [r4, #16]
 800eccc:	7561      	strb	r1, [r4, #21]
 800ecce:	7da0      	ldrb	r0, [r4, #22]
 800ecd0:	f080 0001 	eor.w	r0, r0, #1
 800ecd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	602b      	str	r3, [r5, #0]
 800ecdc:	e7ef      	b.n	800ecbe <ucdr_deserialize_uint32_t+0xb6>
 800ecde:	68a2      	ldr	r2, [r4, #8]
 800ece0:	6923      	ldr	r3, [r4, #16]
 800ece2:	7da0      	ldrb	r0, [r4, #22]
 800ece4:	1bd2      	subs	r2, r2, r7
 800ece6:	f884 8015 	strb.w	r8, [r4, #21]
 800ecea:	1bdf      	subs	r7, r3, r7
 800ecec:	60a2      	str	r2, [r4, #8]
 800ecee:	6127      	str	r7, [r4, #16]
 800ecf0:	f080 0001 	eor.w	r0, r0, #1
 800ecf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecf8:	68a2      	ldr	r2, [r4, #8]
 800ecfa:	1cab      	adds	r3, r5, #2
 800ecfc:	7892      	ldrb	r2, [r2, #2]
 800ecfe:	706a      	strb	r2, [r5, #1]
 800ed00:	68a2      	ldr	r2, [r4, #8]
 800ed02:	7852      	ldrb	r2, [r2, #1]
 800ed04:	f803 2b01 	strb.w	r2, [r3], #1
 800ed08:	68a2      	ldr	r2, [r4, #8]
 800ed0a:	7812      	ldrb	r2, [r2, #0]
 800ed0c:	701a      	strb	r2, [r3, #0]
 800ed0e:	e7b4      	b.n	800ec7a <ucdr_deserialize_uint32_t+0x72>
 800ed10:	4631      	mov	r1, r6
 800ed12:	463a      	mov	r2, r7
 800ed14:	4628      	mov	r0, r5
 800ed16:	f008 fcd5 	bl	80176c4 <memcpy>
 800ed1a:	464a      	mov	r2, r9
 800ed1c:	68a1      	ldr	r1, [r4, #8]
 800ed1e:	19e8      	adds	r0, r5, r7
 800ed20:	f008 fcd0 	bl	80176c4 <memcpy>
 800ed24:	e7a9      	b.n	800ec7a <ucdr_deserialize_uint32_t+0x72>
 800ed26:	bf00      	nop

0800ed28 <ucdr_deserialize_endian_uint32_t>:
 800ed28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed2c:	460e      	mov	r6, r1
 800ed2e:	2104      	movs	r1, #4
 800ed30:	4604      	mov	r4, r0
 800ed32:	4615      	mov	r5, r2
 800ed34:	f001 f86c 	bl	800fe10 <ucdr_buffer_alignment>
 800ed38:	4601      	mov	r1, r0
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ed40:	f001 f8ac 	bl	800fe9c <ucdr_advance_buffer>
 800ed44:	4620      	mov	r0, r4
 800ed46:	2104      	movs	r1, #4
 800ed48:	f001 f804 	bl	800fd54 <ucdr_check_buffer_available_for>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d13c      	bne.n	800edca <ucdr_deserialize_endian_uint32_t+0xa2>
 800ed50:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ed54:	42bb      	cmp	r3, r7
 800ed56:	d933      	bls.n	800edc0 <ucdr_deserialize_endian_uint32_t+0x98>
 800ed58:	6922      	ldr	r2, [r4, #16]
 800ed5a:	eba3 0807 	sub.w	r8, r3, r7
 800ed5e:	4442      	add	r2, r8
 800ed60:	f1c8 0a04 	rsb	sl, r8, #4
 800ed64:	4651      	mov	r1, sl
 800ed66:	4620      	mov	r0, r4
 800ed68:	60a3      	str	r3, [r4, #8]
 800ed6a:	6122      	str	r2, [r4, #16]
 800ed6c:	f000 fffe 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d048      	beq.n	800ee06 <ucdr_deserialize_endian_uint32_t+0xde>
 800ed74:	2e01      	cmp	r6, #1
 800ed76:	d061      	beq.n	800ee3c <ucdr_deserialize_endian_uint32_t+0x114>
 800ed78:	78fb      	ldrb	r3, [r7, #3]
 800ed7a:	702b      	strb	r3, [r5, #0]
 800ed7c:	f1b8 0f00 	cmp.w	r8, #0
 800ed80:	d050      	beq.n	800ee24 <ucdr_deserialize_endian_uint32_t+0xfc>
 800ed82:	78ba      	ldrb	r2, [r7, #2]
 800ed84:	f1b8 0f01 	cmp.w	r8, #1
 800ed88:	f105 0302 	add.w	r3, r5, #2
 800ed8c:	706a      	strb	r2, [r5, #1]
 800ed8e:	d04d      	beq.n	800ee2c <ucdr_deserialize_endian_uint32_t+0x104>
 800ed90:	787a      	ldrb	r2, [r7, #1]
 800ed92:	f1b8 0f02 	cmp.w	r8, #2
 800ed96:	f105 0303 	add.w	r3, r5, #3
 800ed9a:	70aa      	strb	r2, [r5, #2]
 800ed9c:	d04a      	beq.n	800ee34 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ed9e:	783b      	ldrb	r3, [r7, #0]
 800eda0:	70eb      	strb	r3, [r5, #3]
 800eda2:	2104      	movs	r1, #4
 800eda4:	6923      	ldr	r3, [r4, #16]
 800eda6:	68a2      	ldr	r2, [r4, #8]
 800eda8:	7da0      	ldrb	r0, [r4, #22]
 800edaa:	440b      	add	r3, r1
 800edac:	eba3 0308 	sub.w	r3, r3, r8
 800edb0:	4452      	add	r2, sl
 800edb2:	7561      	strb	r1, [r4, #21]
 800edb4:	6123      	str	r3, [r4, #16]
 800edb6:	60a2      	str	r2, [r4, #8]
 800edb8:	f080 0001 	eor.w	r0, r0, #1
 800edbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edc0:	2104      	movs	r1, #4
 800edc2:	4620      	mov	r0, r4
 800edc4:	f000 ffd2 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800edc8:	b1a8      	cbz	r0, 800edf6 <ucdr_deserialize_endian_uint32_t+0xce>
 800edca:	2e01      	cmp	r6, #1
 800edcc:	68a3      	ldr	r3, [r4, #8]
 800edce:	d017      	beq.n	800ee00 <ucdr_deserialize_endian_uint32_t+0xd8>
 800edd0:	78db      	ldrb	r3, [r3, #3]
 800edd2:	702b      	strb	r3, [r5, #0]
 800edd4:	68a3      	ldr	r3, [r4, #8]
 800edd6:	789b      	ldrb	r3, [r3, #2]
 800edd8:	706b      	strb	r3, [r5, #1]
 800edda:	68a3      	ldr	r3, [r4, #8]
 800eddc:	785b      	ldrb	r3, [r3, #1]
 800edde:	70ab      	strb	r3, [r5, #2]
 800ede0:	68a3      	ldr	r3, [r4, #8]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	70eb      	strb	r3, [r5, #3]
 800ede6:	2104      	movs	r1, #4
 800ede8:	68a2      	ldr	r2, [r4, #8]
 800edea:	6923      	ldr	r3, [r4, #16]
 800edec:	440a      	add	r2, r1
 800edee:	440b      	add	r3, r1
 800edf0:	60a2      	str	r2, [r4, #8]
 800edf2:	6123      	str	r3, [r4, #16]
 800edf4:	7561      	strb	r1, [r4, #21]
 800edf6:	7da0      	ldrb	r0, [r4, #22]
 800edf8:	f080 0001 	eor.w	r0, r0, #1
 800edfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	602b      	str	r3, [r5, #0]
 800ee04:	e7ef      	b.n	800ede6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800ee06:	68a2      	ldr	r2, [r4, #8]
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	7da0      	ldrb	r0, [r4, #22]
 800ee0c:	eba2 0208 	sub.w	r2, r2, r8
 800ee10:	eba3 0308 	sub.w	r3, r3, r8
 800ee14:	f884 9015 	strb.w	r9, [r4, #21]
 800ee18:	60a2      	str	r2, [r4, #8]
 800ee1a:	6123      	str	r3, [r4, #16]
 800ee1c:	f080 0001 	eor.w	r0, r0, #1
 800ee20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee24:	68a2      	ldr	r2, [r4, #8]
 800ee26:	1cab      	adds	r3, r5, #2
 800ee28:	7892      	ldrb	r2, [r2, #2]
 800ee2a:	706a      	strb	r2, [r5, #1]
 800ee2c:	68a2      	ldr	r2, [r4, #8]
 800ee2e:	7852      	ldrb	r2, [r2, #1]
 800ee30:	f803 2b01 	strb.w	r2, [r3], #1
 800ee34:	68a2      	ldr	r2, [r4, #8]
 800ee36:	7812      	ldrb	r2, [r2, #0]
 800ee38:	701a      	strb	r2, [r3, #0]
 800ee3a:	e7b2      	b.n	800eda2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	4642      	mov	r2, r8
 800ee40:	4628      	mov	r0, r5
 800ee42:	f008 fc3f 	bl	80176c4 <memcpy>
 800ee46:	4652      	mov	r2, sl
 800ee48:	68a1      	ldr	r1, [r4, #8]
 800ee4a:	eb05 0008 	add.w	r0, r5, r8
 800ee4e:	f008 fc39 	bl	80176c4 <memcpy>
 800ee52:	e7a6      	b.n	800eda2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800ee54 <ucdr_serialize_uint64_t>:
 800ee54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	2108      	movs	r1, #8
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	e9cd 2300 	strd	r2, r3, [sp]
 800ee62:	f000 ffd5 	bl	800fe10 <ucdr_buffer_alignment>
 800ee66:	4601      	mov	r1, r0
 800ee68:	4620      	mov	r0, r4
 800ee6a:	7d67      	ldrb	r7, [r4, #21]
 800ee6c:	f001 f816 	bl	800fe9c <ucdr_advance_buffer>
 800ee70:	4620      	mov	r0, r4
 800ee72:	2108      	movs	r1, #8
 800ee74:	f000 ff6e 	bl	800fd54 <ucdr_check_buffer_available_for>
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d14e      	bne.n	800ef1a <ucdr_serialize_uint64_t+0xc6>
 800ee7c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ee80:	42ab      	cmp	r3, r5
 800ee82:	d945      	bls.n	800ef10 <ucdr_serialize_uint64_t+0xbc>
 800ee84:	6922      	ldr	r2, [r4, #16]
 800ee86:	1b5e      	subs	r6, r3, r5
 800ee88:	4432      	add	r2, r6
 800ee8a:	f1c6 0808 	rsb	r8, r6, #8
 800ee8e:	4641      	mov	r1, r8
 800ee90:	4620      	mov	r0, r4
 800ee92:	60a3      	str	r3, [r4, #8]
 800ee94:	6122      	str	r2, [r4, #16]
 800ee96:	f000 ff69 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d074      	beq.n	800ef88 <ucdr_serialize_uint64_t+0x134>
 800ee9e:	7d23      	ldrb	r3, [r4, #20]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	f000 809b 	beq.w	800efdc <ucdr_serialize_uint64_t+0x188>
 800eea6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eeaa:	702b      	strb	r3, [r5, #0]
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	d078      	beq.n	800efa2 <ucdr_serialize_uint64_t+0x14e>
 800eeb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eeb4:	2e01      	cmp	r6, #1
 800eeb6:	706b      	strb	r3, [r5, #1]
 800eeb8:	d077      	beq.n	800efaa <ucdr_serialize_uint64_t+0x156>
 800eeba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eebe:	2e02      	cmp	r6, #2
 800eec0:	70ab      	strb	r3, [r5, #2]
 800eec2:	d076      	beq.n	800efb2 <ucdr_serialize_uint64_t+0x15e>
 800eec4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eec8:	2e03      	cmp	r6, #3
 800eeca:	70eb      	strb	r3, [r5, #3]
 800eecc:	d075      	beq.n	800efba <ucdr_serialize_uint64_t+0x166>
 800eece:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800eed2:	2e04      	cmp	r6, #4
 800eed4:	712b      	strb	r3, [r5, #4]
 800eed6:	d074      	beq.n	800efc2 <ucdr_serialize_uint64_t+0x16e>
 800eed8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800eedc:	2e05      	cmp	r6, #5
 800eede:	716b      	strb	r3, [r5, #5]
 800eee0:	d073      	beq.n	800efca <ucdr_serialize_uint64_t+0x176>
 800eee2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800eee6:	2e06      	cmp	r6, #6
 800eee8:	71ab      	strb	r3, [r5, #6]
 800eeea:	d072      	beq.n	800efd2 <ucdr_serialize_uint64_t+0x17e>
 800eeec:	f89d 3000 	ldrb.w	r3, [sp]
 800eef0:	71eb      	strb	r3, [r5, #7]
 800eef2:	2108      	movs	r1, #8
 800eef4:	6923      	ldr	r3, [r4, #16]
 800eef6:	68a2      	ldr	r2, [r4, #8]
 800eef8:	7da0      	ldrb	r0, [r4, #22]
 800eefa:	440b      	add	r3, r1
 800eefc:	1b9e      	subs	r6, r3, r6
 800eefe:	4442      	add	r2, r8
 800ef00:	f080 0001 	eor.w	r0, r0, #1
 800ef04:	6126      	str	r6, [r4, #16]
 800ef06:	60a2      	str	r2, [r4, #8]
 800ef08:	7561      	strb	r1, [r4, #21]
 800ef0a:	b002      	add	sp, #8
 800ef0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef10:	2108      	movs	r1, #8
 800ef12:	4620      	mov	r0, r4
 800ef14:	f000 ff2a 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800ef18:	b350      	cbz	r0, 800ef70 <ucdr_serialize_uint64_t+0x11c>
 800ef1a:	7d23      	ldrb	r3, [r4, #20]
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	d02d      	beq.n	800ef7c <ucdr_serialize_uint64_t+0x128>
 800ef20:	68a3      	ldr	r3, [r4, #8]
 800ef22:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ef26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef2a:	7019      	strb	r1, [r3, #0]
 800ef2c:	68a3      	ldr	r3, [r4, #8]
 800ef2e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ef32:	705a      	strb	r2, [r3, #1]
 800ef34:	68a3      	ldr	r3, [r4, #8]
 800ef36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef3a:	7099      	strb	r1, [r3, #2]
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800ef42:	70da      	strb	r2, [r3, #3]
 800ef44:	68a3      	ldr	r3, [r4, #8]
 800ef46:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ef4a:	7119      	strb	r1, [r3, #4]
 800ef4c:	68a3      	ldr	r3, [r4, #8]
 800ef4e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800ef52:	715a      	strb	r2, [r3, #5]
 800ef54:	68a3      	ldr	r3, [r4, #8]
 800ef56:	f89d 2000 	ldrb.w	r2, [sp]
 800ef5a:	7199      	strb	r1, [r3, #6]
 800ef5c:	68a3      	ldr	r3, [r4, #8]
 800ef5e:	71da      	strb	r2, [r3, #7]
 800ef60:	2108      	movs	r1, #8
 800ef62:	68a2      	ldr	r2, [r4, #8]
 800ef64:	6923      	ldr	r3, [r4, #16]
 800ef66:	440a      	add	r2, r1
 800ef68:	440b      	add	r3, r1
 800ef6a:	60a2      	str	r2, [r4, #8]
 800ef6c:	6123      	str	r3, [r4, #16]
 800ef6e:	7561      	strb	r1, [r4, #21]
 800ef70:	7da0      	ldrb	r0, [r4, #22]
 800ef72:	f080 0001 	eor.w	r0, r0, #1
 800ef76:	b002      	add	sp, #8
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7c:	466b      	mov	r3, sp
 800ef7e:	68a2      	ldr	r2, [r4, #8]
 800ef80:	cb03      	ldmia	r3!, {r0, r1}
 800ef82:	6010      	str	r0, [r2, #0]
 800ef84:	6051      	str	r1, [r2, #4]
 800ef86:	e7eb      	b.n	800ef60 <ucdr_serialize_uint64_t+0x10c>
 800ef88:	68a2      	ldr	r2, [r4, #8]
 800ef8a:	6923      	ldr	r3, [r4, #16]
 800ef8c:	7da0      	ldrb	r0, [r4, #22]
 800ef8e:	1b92      	subs	r2, r2, r6
 800ef90:	f080 0001 	eor.w	r0, r0, #1
 800ef94:	1b9e      	subs	r6, r3, r6
 800ef96:	7567      	strb	r7, [r4, #21]
 800ef98:	60a2      	str	r2, [r4, #8]
 800ef9a:	6126      	str	r6, [r4, #16]
 800ef9c:	b002      	add	sp, #8
 800ef9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efa2:	68a3      	ldr	r3, [r4, #8]
 800efa4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800efa8:	701a      	strb	r2, [r3, #0]
 800efaa:	68a3      	ldr	r3, [r4, #8]
 800efac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800efb0:	701a      	strb	r2, [r3, #0]
 800efb2:	68a3      	ldr	r3, [r4, #8]
 800efb4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800efb8:	701a      	strb	r2, [r3, #0]
 800efba:	68a3      	ldr	r3, [r4, #8]
 800efbc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	68a3      	ldr	r3, [r4, #8]
 800efc4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800efc8:	701a      	strb	r2, [r3, #0]
 800efca:	68a3      	ldr	r3, [r4, #8]
 800efcc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800efd0:	701a      	strb	r2, [r3, #0]
 800efd2:	68a3      	ldr	r3, [r4, #8]
 800efd4:	f89d 2000 	ldrb.w	r2, [sp]
 800efd8:	701a      	strb	r2, [r3, #0]
 800efda:	e78a      	b.n	800eef2 <ucdr_serialize_uint64_t+0x9e>
 800efdc:	4628      	mov	r0, r5
 800efde:	466d      	mov	r5, sp
 800efe0:	4632      	mov	r2, r6
 800efe2:	4629      	mov	r1, r5
 800efe4:	f008 fb6e 	bl	80176c4 <memcpy>
 800efe8:	4642      	mov	r2, r8
 800efea:	68a0      	ldr	r0, [r4, #8]
 800efec:	19a9      	adds	r1, r5, r6
 800efee:	f008 fb69 	bl	80176c4 <memcpy>
 800eff2:	e77e      	b.n	800eef2 <ucdr_serialize_uint64_t+0x9e>

0800eff4 <ucdr_serialize_int8_t>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	460d      	mov	r5, r1
 800eff8:	2101      	movs	r1, #1
 800effa:	4604      	mov	r4, r0
 800effc:	f000 feb6 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f000:	b148      	cbz	r0, 800f016 <ucdr_serialize_int8_t+0x22>
 800f002:	2101      	movs	r1, #1
 800f004:	68a3      	ldr	r3, [r4, #8]
 800f006:	701d      	strb	r5, [r3, #0]
 800f008:	68a2      	ldr	r2, [r4, #8]
 800f00a:	6923      	ldr	r3, [r4, #16]
 800f00c:	440a      	add	r2, r1
 800f00e:	440b      	add	r3, r1
 800f010:	60a2      	str	r2, [r4, #8]
 800f012:	6123      	str	r3, [r4, #16]
 800f014:	7561      	strb	r1, [r4, #21]
 800f016:	7da0      	ldrb	r0, [r4, #22]
 800f018:	f080 0001 	eor.w	r0, r0, #1
 800f01c:	bd38      	pop	{r3, r4, r5, pc}
 800f01e:	bf00      	nop

0800f020 <ucdr_deserialize_int8_t>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	460d      	mov	r5, r1
 800f024:	2101      	movs	r1, #1
 800f026:	4604      	mov	r4, r0
 800f028:	f000 fea0 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f02c:	b150      	cbz	r0, 800f044 <ucdr_deserialize_int8_t+0x24>
 800f02e:	2101      	movs	r1, #1
 800f030:	68a3      	ldr	r3, [r4, #8]
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	702b      	strb	r3, [r5, #0]
 800f036:	68a2      	ldr	r2, [r4, #8]
 800f038:	6923      	ldr	r3, [r4, #16]
 800f03a:	440a      	add	r2, r1
 800f03c:	440b      	add	r3, r1
 800f03e:	60a2      	str	r2, [r4, #8]
 800f040:	6123      	str	r3, [r4, #16]
 800f042:	7561      	strb	r1, [r4, #21]
 800f044:	7da0      	ldrb	r0, [r4, #22]
 800f046:	f080 0001 	eor.w	r0, r0, #1
 800f04a:	bd38      	pop	{r3, r4, r5, pc}

0800f04c <ucdr_serialize_int16_t>:
 800f04c:	460b      	mov	r3, r1
 800f04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f052:	2102      	movs	r1, #2
 800f054:	b082      	sub	sp, #8
 800f056:	4604      	mov	r4, r0
 800f058:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f05c:	f000 fed8 	bl	800fe10 <ucdr_buffer_alignment>
 800f060:	4601      	mov	r1, r0
 800f062:	4620      	mov	r0, r4
 800f064:	7d67      	ldrb	r7, [r4, #21]
 800f066:	f000 ff19 	bl	800fe9c <ucdr_advance_buffer>
 800f06a:	4620      	mov	r0, r4
 800f06c:	2102      	movs	r1, #2
 800f06e:	f000 fe71 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f072:	bb78      	cbnz	r0, 800f0d4 <ucdr_serialize_int16_t+0x88>
 800f074:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f078:	42ab      	cmp	r3, r5
 800f07a:	d926      	bls.n	800f0ca <ucdr_serialize_int16_t+0x7e>
 800f07c:	6922      	ldr	r2, [r4, #16]
 800f07e:	1b5e      	subs	r6, r3, r5
 800f080:	4432      	add	r2, r6
 800f082:	f1c6 0802 	rsb	r8, r6, #2
 800f086:	4641      	mov	r1, r8
 800f088:	4620      	mov	r0, r4
 800f08a:	60a3      	str	r3, [r4, #8]
 800f08c:	6122      	str	r2, [r4, #16]
 800f08e:	f000 fe6d 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f092:	2800      	cmp	r0, #0
 800f094:	d03b      	beq.n	800f10e <ucdr_serialize_int16_t+0xc2>
 800f096:	7d23      	ldrb	r3, [r4, #20]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d04a      	beq.n	800f132 <ucdr_serialize_int16_t+0xe6>
 800f09c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f0a0:	702b      	strb	r3, [r5, #0]
 800f0a2:	2e00      	cmp	r6, #0
 800f0a4:	d040      	beq.n	800f128 <ucdr_serialize_int16_t+0xdc>
 800f0a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f0aa:	706b      	strb	r3, [r5, #1]
 800f0ac:	2102      	movs	r1, #2
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	68a2      	ldr	r2, [r4, #8]
 800f0b2:	7da0      	ldrb	r0, [r4, #22]
 800f0b4:	440b      	add	r3, r1
 800f0b6:	1b9e      	subs	r6, r3, r6
 800f0b8:	4442      	add	r2, r8
 800f0ba:	f080 0001 	eor.w	r0, r0, #1
 800f0be:	6126      	str	r6, [r4, #16]
 800f0c0:	60a2      	str	r2, [r4, #8]
 800f0c2:	7561      	strb	r1, [r4, #21]
 800f0c4:	b002      	add	sp, #8
 800f0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ca:	2102      	movs	r1, #2
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f000 fe4d 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f0d2:	b190      	cbz	r0, 800f0fa <ucdr_serialize_int16_t+0xae>
 800f0d4:	7d23      	ldrb	r3, [r4, #20]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	d014      	beq.n	800f106 <ucdr_serialize_int16_t+0xba>
 800f0dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f0e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0e4:	7019      	strb	r1, [r3, #0]
 800f0e6:	68a3      	ldr	r3, [r4, #8]
 800f0e8:	705a      	strb	r2, [r3, #1]
 800f0ea:	2102      	movs	r1, #2
 800f0ec:	68a2      	ldr	r2, [r4, #8]
 800f0ee:	6923      	ldr	r3, [r4, #16]
 800f0f0:	440a      	add	r2, r1
 800f0f2:	440b      	add	r3, r1
 800f0f4:	60a2      	str	r2, [r4, #8]
 800f0f6:	6123      	str	r3, [r4, #16]
 800f0f8:	7561      	strb	r1, [r4, #21]
 800f0fa:	7da0      	ldrb	r0, [r4, #22]
 800f0fc:	f080 0001 	eor.w	r0, r0, #1
 800f100:	b002      	add	sp, #8
 800f102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f106:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f10a:	801a      	strh	r2, [r3, #0]
 800f10c:	e7ed      	b.n	800f0ea <ucdr_serialize_int16_t+0x9e>
 800f10e:	68a2      	ldr	r2, [r4, #8]
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	7da0      	ldrb	r0, [r4, #22]
 800f114:	1b92      	subs	r2, r2, r6
 800f116:	f080 0001 	eor.w	r0, r0, #1
 800f11a:	1b9e      	subs	r6, r3, r6
 800f11c:	7567      	strb	r7, [r4, #21]
 800f11e:	60a2      	str	r2, [r4, #8]
 800f120:	6126      	str	r6, [r4, #16]
 800f122:	b002      	add	sp, #8
 800f124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f128:	68a3      	ldr	r3, [r4, #8]
 800f12a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	e7bc      	b.n	800f0ac <ucdr_serialize_int16_t+0x60>
 800f132:	4628      	mov	r0, r5
 800f134:	f10d 0506 	add.w	r5, sp, #6
 800f138:	4629      	mov	r1, r5
 800f13a:	4632      	mov	r2, r6
 800f13c:	f008 fac2 	bl	80176c4 <memcpy>
 800f140:	4642      	mov	r2, r8
 800f142:	68a0      	ldr	r0, [r4, #8]
 800f144:	19a9      	adds	r1, r5, r6
 800f146:	f008 fabd 	bl	80176c4 <memcpy>
 800f14a:	e7af      	b.n	800f0ac <ucdr_serialize_int16_t+0x60>

0800f14c <ucdr_deserialize_int16_t>:
 800f14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f150:	460d      	mov	r5, r1
 800f152:	2102      	movs	r1, #2
 800f154:	4604      	mov	r4, r0
 800f156:	f000 fe5b 	bl	800fe10 <ucdr_buffer_alignment>
 800f15a:	4601      	mov	r1, r0
 800f15c:	4620      	mov	r0, r4
 800f15e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f162:	f000 fe9b 	bl	800fe9c <ucdr_advance_buffer>
 800f166:	4620      	mov	r0, r4
 800f168:	2102      	movs	r1, #2
 800f16a:	f000 fdf3 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f16e:	bb60      	cbnz	r0, 800f1ca <ucdr_deserialize_int16_t+0x7e>
 800f170:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f174:	42b3      	cmp	r3, r6
 800f176:	d923      	bls.n	800f1c0 <ucdr_deserialize_int16_t+0x74>
 800f178:	6922      	ldr	r2, [r4, #16]
 800f17a:	1b9f      	subs	r7, r3, r6
 800f17c:	443a      	add	r2, r7
 800f17e:	f1c7 0902 	rsb	r9, r7, #2
 800f182:	4649      	mov	r1, r9
 800f184:	4620      	mov	r0, r4
 800f186:	60a3      	str	r3, [r4, #8]
 800f188:	6122      	str	r2, [r4, #16]
 800f18a:	f000 fdef 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d034      	beq.n	800f1fc <ucdr_deserialize_int16_t+0xb0>
 800f192:	7d23      	ldrb	r3, [r4, #20]
 800f194:	2b01      	cmp	r3, #1
 800f196:	d042      	beq.n	800f21e <ucdr_deserialize_int16_t+0xd2>
 800f198:	7873      	ldrb	r3, [r6, #1]
 800f19a:	702b      	strb	r3, [r5, #0]
 800f19c:	2f00      	cmp	r7, #0
 800f19e:	d03a      	beq.n	800f216 <ucdr_deserialize_int16_t+0xca>
 800f1a0:	7833      	ldrb	r3, [r6, #0]
 800f1a2:	706b      	strb	r3, [r5, #1]
 800f1a4:	2102      	movs	r1, #2
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	68a2      	ldr	r2, [r4, #8]
 800f1aa:	7da0      	ldrb	r0, [r4, #22]
 800f1ac:	440b      	add	r3, r1
 800f1ae:	1bdf      	subs	r7, r3, r7
 800f1b0:	444a      	add	r2, r9
 800f1b2:	7561      	strb	r1, [r4, #21]
 800f1b4:	6127      	str	r7, [r4, #16]
 800f1b6:	60a2      	str	r2, [r4, #8]
 800f1b8:	f080 0001 	eor.w	r0, r0, #1
 800f1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1c0:	2102      	movs	r1, #2
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f000 fdd2 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f1c8:	b180      	cbz	r0, 800f1ec <ucdr_deserialize_int16_t+0xa0>
 800f1ca:	7d23      	ldrb	r3, [r4, #20]
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	d011      	beq.n	800f1f6 <ucdr_deserialize_int16_t+0xaa>
 800f1d2:	785b      	ldrb	r3, [r3, #1]
 800f1d4:	702b      	strb	r3, [r5, #0]
 800f1d6:	68a3      	ldr	r3, [r4, #8]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	706b      	strb	r3, [r5, #1]
 800f1dc:	2102      	movs	r1, #2
 800f1de:	68a2      	ldr	r2, [r4, #8]
 800f1e0:	6923      	ldr	r3, [r4, #16]
 800f1e2:	440a      	add	r2, r1
 800f1e4:	440b      	add	r3, r1
 800f1e6:	60a2      	str	r2, [r4, #8]
 800f1e8:	6123      	str	r3, [r4, #16]
 800f1ea:	7561      	strb	r1, [r4, #21]
 800f1ec:	7da0      	ldrb	r0, [r4, #22]
 800f1ee:	f080 0001 	eor.w	r0, r0, #1
 800f1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	802b      	strh	r3, [r5, #0]
 800f1fa:	e7ef      	b.n	800f1dc <ucdr_deserialize_int16_t+0x90>
 800f1fc:	68a2      	ldr	r2, [r4, #8]
 800f1fe:	6923      	ldr	r3, [r4, #16]
 800f200:	7da0      	ldrb	r0, [r4, #22]
 800f202:	1bd2      	subs	r2, r2, r7
 800f204:	f884 8015 	strb.w	r8, [r4, #21]
 800f208:	1bdf      	subs	r7, r3, r7
 800f20a:	60a2      	str	r2, [r4, #8]
 800f20c:	6127      	str	r7, [r4, #16]
 800f20e:	f080 0001 	eor.w	r0, r0, #1
 800f212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f216:	68a3      	ldr	r3, [r4, #8]
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	706b      	strb	r3, [r5, #1]
 800f21c:	e7c2      	b.n	800f1a4 <ucdr_deserialize_int16_t+0x58>
 800f21e:	4631      	mov	r1, r6
 800f220:	463a      	mov	r2, r7
 800f222:	4628      	mov	r0, r5
 800f224:	f008 fa4e 	bl	80176c4 <memcpy>
 800f228:	464a      	mov	r2, r9
 800f22a:	68a1      	ldr	r1, [r4, #8]
 800f22c:	19e8      	adds	r0, r5, r7
 800f22e:	f008 fa49 	bl	80176c4 <memcpy>
 800f232:	e7b7      	b.n	800f1a4 <ucdr_deserialize_int16_t+0x58>

0800f234 <ucdr_serialize_int32_t>:
 800f234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f238:	b082      	sub	sp, #8
 800f23a:	9101      	str	r1, [sp, #4]
 800f23c:	2104      	movs	r1, #4
 800f23e:	4604      	mov	r4, r0
 800f240:	f000 fde6 	bl	800fe10 <ucdr_buffer_alignment>
 800f244:	4601      	mov	r1, r0
 800f246:	4620      	mov	r0, r4
 800f248:	7d67      	ldrb	r7, [r4, #21]
 800f24a:	f000 fe27 	bl	800fe9c <ucdr_advance_buffer>
 800f24e:	4620      	mov	r0, r4
 800f250:	2104      	movs	r1, #4
 800f252:	f000 fd7f 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f256:	2800      	cmp	r0, #0
 800f258:	d139      	bne.n	800f2ce <ucdr_serialize_int32_t+0x9a>
 800f25a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f25e:	42ab      	cmp	r3, r5
 800f260:	d930      	bls.n	800f2c4 <ucdr_serialize_int32_t+0x90>
 800f262:	6922      	ldr	r2, [r4, #16]
 800f264:	1b5e      	subs	r6, r3, r5
 800f266:	4432      	add	r2, r6
 800f268:	f1c6 0804 	rsb	r8, r6, #4
 800f26c:	4641      	mov	r1, r8
 800f26e:	4620      	mov	r0, r4
 800f270:	60a3      	str	r3, [r4, #8]
 800f272:	6122      	str	r2, [r4, #16]
 800f274:	f000 fd7a 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d04c      	beq.n	800f316 <ucdr_serialize_int32_t+0xe2>
 800f27c:	7d23      	ldrb	r3, [r4, #20]
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d063      	beq.n	800f34a <ucdr_serialize_int32_t+0x116>
 800f282:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f286:	702b      	strb	r3, [r5, #0]
 800f288:	2e00      	cmp	r6, #0
 800f28a:	d051      	beq.n	800f330 <ucdr_serialize_int32_t+0xfc>
 800f28c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f290:	2e01      	cmp	r6, #1
 800f292:	706b      	strb	r3, [r5, #1]
 800f294:	d050      	beq.n	800f338 <ucdr_serialize_int32_t+0x104>
 800f296:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f29a:	2e02      	cmp	r6, #2
 800f29c:	70ab      	strb	r3, [r5, #2]
 800f29e:	d04f      	beq.n	800f340 <ucdr_serialize_int32_t+0x10c>
 800f2a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f2a4:	70eb      	strb	r3, [r5, #3]
 800f2a6:	2104      	movs	r1, #4
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	68a2      	ldr	r2, [r4, #8]
 800f2ac:	7da0      	ldrb	r0, [r4, #22]
 800f2ae:	440b      	add	r3, r1
 800f2b0:	1b9e      	subs	r6, r3, r6
 800f2b2:	4442      	add	r2, r8
 800f2b4:	f080 0001 	eor.w	r0, r0, #1
 800f2b8:	6126      	str	r6, [r4, #16]
 800f2ba:	60a2      	str	r2, [r4, #8]
 800f2bc:	7561      	strb	r1, [r4, #21]
 800f2be:	b002      	add	sp, #8
 800f2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c4:	2104      	movs	r1, #4
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f000 fd50 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f2cc:	b1d0      	cbz	r0, 800f304 <ucdr_serialize_int32_t+0xd0>
 800f2ce:	7d23      	ldrb	r3, [r4, #20]
 800f2d0:	2b01      	cmp	r3, #1
 800f2d2:	68a3      	ldr	r3, [r4, #8]
 800f2d4:	d01c      	beq.n	800f310 <ucdr_serialize_int32_t+0xdc>
 800f2d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f2da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2de:	7019      	strb	r1, [r3, #0]
 800f2e0:	68a3      	ldr	r3, [r4, #8]
 800f2e2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f2e6:	705a      	strb	r2, [r3, #1]
 800f2e8:	68a3      	ldr	r3, [r4, #8]
 800f2ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f2ee:	7099      	strb	r1, [r3, #2]
 800f2f0:	68a3      	ldr	r3, [r4, #8]
 800f2f2:	70da      	strb	r2, [r3, #3]
 800f2f4:	2104      	movs	r1, #4
 800f2f6:	68a2      	ldr	r2, [r4, #8]
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	440a      	add	r2, r1
 800f2fc:	440b      	add	r3, r1
 800f2fe:	60a2      	str	r2, [r4, #8]
 800f300:	6123      	str	r3, [r4, #16]
 800f302:	7561      	strb	r1, [r4, #21]
 800f304:	7da0      	ldrb	r0, [r4, #22]
 800f306:	f080 0001 	eor.w	r0, r0, #1
 800f30a:	b002      	add	sp, #8
 800f30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f310:	9a01      	ldr	r2, [sp, #4]
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	e7ee      	b.n	800f2f4 <ucdr_serialize_int32_t+0xc0>
 800f316:	68a2      	ldr	r2, [r4, #8]
 800f318:	6923      	ldr	r3, [r4, #16]
 800f31a:	7da0      	ldrb	r0, [r4, #22]
 800f31c:	1b92      	subs	r2, r2, r6
 800f31e:	f080 0001 	eor.w	r0, r0, #1
 800f322:	1b9e      	subs	r6, r3, r6
 800f324:	7567      	strb	r7, [r4, #21]
 800f326:	60a2      	str	r2, [r4, #8]
 800f328:	6126      	str	r6, [r4, #16]
 800f32a:	b002      	add	sp, #8
 800f32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f330:	68a3      	ldr	r3, [r4, #8]
 800f332:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f336:	701a      	strb	r2, [r3, #0]
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f33e:	701a      	strb	r2, [r3, #0]
 800f340:	68a3      	ldr	r3, [r4, #8]
 800f342:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f346:	701a      	strb	r2, [r3, #0]
 800f348:	e7ad      	b.n	800f2a6 <ucdr_serialize_int32_t+0x72>
 800f34a:	4628      	mov	r0, r5
 800f34c:	ad01      	add	r5, sp, #4
 800f34e:	4629      	mov	r1, r5
 800f350:	4632      	mov	r2, r6
 800f352:	f008 f9b7 	bl	80176c4 <memcpy>
 800f356:	4642      	mov	r2, r8
 800f358:	68a0      	ldr	r0, [r4, #8]
 800f35a:	19a9      	adds	r1, r5, r6
 800f35c:	f008 f9b2 	bl	80176c4 <memcpy>
 800f360:	e7a1      	b.n	800f2a6 <ucdr_serialize_int32_t+0x72>
 800f362:	bf00      	nop

0800f364 <ucdr_deserialize_int32_t>:
 800f364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f368:	460d      	mov	r5, r1
 800f36a:	2104      	movs	r1, #4
 800f36c:	4604      	mov	r4, r0
 800f36e:	f000 fd4f 	bl	800fe10 <ucdr_buffer_alignment>
 800f372:	4601      	mov	r1, r0
 800f374:	4620      	mov	r0, r4
 800f376:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f37a:	f000 fd8f 	bl	800fe9c <ucdr_advance_buffer>
 800f37e:	4620      	mov	r0, r4
 800f380:	2104      	movs	r1, #4
 800f382:	f000 fce7 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f386:	2800      	cmp	r0, #0
 800f388:	d138      	bne.n	800f3fc <ucdr_deserialize_int32_t+0x98>
 800f38a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f38e:	42b3      	cmp	r3, r6
 800f390:	d92f      	bls.n	800f3f2 <ucdr_deserialize_int32_t+0x8e>
 800f392:	6922      	ldr	r2, [r4, #16]
 800f394:	1b9f      	subs	r7, r3, r6
 800f396:	443a      	add	r2, r7
 800f398:	f1c7 0904 	rsb	r9, r7, #4
 800f39c:	4649      	mov	r1, r9
 800f39e:	4620      	mov	r0, r4
 800f3a0:	60a3      	str	r3, [r4, #8]
 800f3a2:	6122      	str	r2, [r4, #16]
 800f3a4:	f000 fce2 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	d046      	beq.n	800f43a <ucdr_deserialize_int32_t+0xd6>
 800f3ac:	7d23      	ldrb	r3, [r4, #20]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d05c      	beq.n	800f46c <ucdr_deserialize_int32_t+0x108>
 800f3b2:	78f3      	ldrb	r3, [r6, #3]
 800f3b4:	702b      	strb	r3, [r5, #0]
 800f3b6:	2f00      	cmp	r7, #0
 800f3b8:	d04c      	beq.n	800f454 <ucdr_deserialize_int32_t+0xf0>
 800f3ba:	78b2      	ldrb	r2, [r6, #2]
 800f3bc:	2f01      	cmp	r7, #1
 800f3be:	f105 0302 	add.w	r3, r5, #2
 800f3c2:	706a      	strb	r2, [r5, #1]
 800f3c4:	d04a      	beq.n	800f45c <ucdr_deserialize_int32_t+0xf8>
 800f3c6:	7872      	ldrb	r2, [r6, #1]
 800f3c8:	2f02      	cmp	r7, #2
 800f3ca:	f105 0303 	add.w	r3, r5, #3
 800f3ce:	70aa      	strb	r2, [r5, #2]
 800f3d0:	d048      	beq.n	800f464 <ucdr_deserialize_int32_t+0x100>
 800f3d2:	7833      	ldrb	r3, [r6, #0]
 800f3d4:	70eb      	strb	r3, [r5, #3]
 800f3d6:	2104      	movs	r1, #4
 800f3d8:	6923      	ldr	r3, [r4, #16]
 800f3da:	68a2      	ldr	r2, [r4, #8]
 800f3dc:	7da0      	ldrb	r0, [r4, #22]
 800f3de:	440b      	add	r3, r1
 800f3e0:	1bdf      	subs	r7, r3, r7
 800f3e2:	444a      	add	r2, r9
 800f3e4:	7561      	strb	r1, [r4, #21]
 800f3e6:	6127      	str	r7, [r4, #16]
 800f3e8:	60a2      	str	r2, [r4, #8]
 800f3ea:	f080 0001 	eor.w	r0, r0, #1
 800f3ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3f2:	2104      	movs	r1, #4
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f000 fcb9 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f3fa:	b1b0      	cbz	r0, 800f42a <ucdr_deserialize_int32_t+0xc6>
 800f3fc:	7d23      	ldrb	r3, [r4, #20]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	68a3      	ldr	r3, [r4, #8]
 800f402:	d017      	beq.n	800f434 <ucdr_deserialize_int32_t+0xd0>
 800f404:	78db      	ldrb	r3, [r3, #3]
 800f406:	702b      	strb	r3, [r5, #0]
 800f408:	68a3      	ldr	r3, [r4, #8]
 800f40a:	789b      	ldrb	r3, [r3, #2]
 800f40c:	706b      	strb	r3, [r5, #1]
 800f40e:	68a3      	ldr	r3, [r4, #8]
 800f410:	785b      	ldrb	r3, [r3, #1]
 800f412:	70ab      	strb	r3, [r5, #2]
 800f414:	68a3      	ldr	r3, [r4, #8]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	70eb      	strb	r3, [r5, #3]
 800f41a:	2104      	movs	r1, #4
 800f41c:	68a2      	ldr	r2, [r4, #8]
 800f41e:	6923      	ldr	r3, [r4, #16]
 800f420:	440a      	add	r2, r1
 800f422:	440b      	add	r3, r1
 800f424:	60a2      	str	r2, [r4, #8]
 800f426:	6123      	str	r3, [r4, #16]
 800f428:	7561      	strb	r1, [r4, #21]
 800f42a:	7da0      	ldrb	r0, [r4, #22]
 800f42c:	f080 0001 	eor.w	r0, r0, #1
 800f430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	e7ef      	b.n	800f41a <ucdr_deserialize_int32_t+0xb6>
 800f43a:	68a2      	ldr	r2, [r4, #8]
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	7da0      	ldrb	r0, [r4, #22]
 800f440:	1bd2      	subs	r2, r2, r7
 800f442:	f884 8015 	strb.w	r8, [r4, #21]
 800f446:	1bdf      	subs	r7, r3, r7
 800f448:	60a2      	str	r2, [r4, #8]
 800f44a:	6127      	str	r7, [r4, #16]
 800f44c:	f080 0001 	eor.w	r0, r0, #1
 800f450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f454:	68a2      	ldr	r2, [r4, #8]
 800f456:	1cab      	adds	r3, r5, #2
 800f458:	7892      	ldrb	r2, [r2, #2]
 800f45a:	706a      	strb	r2, [r5, #1]
 800f45c:	68a2      	ldr	r2, [r4, #8]
 800f45e:	7852      	ldrb	r2, [r2, #1]
 800f460:	f803 2b01 	strb.w	r2, [r3], #1
 800f464:	68a2      	ldr	r2, [r4, #8]
 800f466:	7812      	ldrb	r2, [r2, #0]
 800f468:	701a      	strb	r2, [r3, #0]
 800f46a:	e7b4      	b.n	800f3d6 <ucdr_deserialize_int32_t+0x72>
 800f46c:	4631      	mov	r1, r6
 800f46e:	463a      	mov	r2, r7
 800f470:	4628      	mov	r0, r5
 800f472:	f008 f927 	bl	80176c4 <memcpy>
 800f476:	464a      	mov	r2, r9
 800f478:	68a1      	ldr	r1, [r4, #8]
 800f47a:	19e8      	adds	r0, r5, r7
 800f47c:	f008 f922 	bl	80176c4 <memcpy>
 800f480:	e7a9      	b.n	800f3d6 <ucdr_deserialize_int32_t+0x72>
 800f482:	bf00      	nop

0800f484 <ucdr_serialize_endian_float>:
 800f484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f488:	460d      	mov	r5, r1
 800f48a:	b083      	sub	sp, #12
 800f48c:	2104      	movs	r1, #4
 800f48e:	4604      	mov	r4, r0
 800f490:	9201      	str	r2, [sp, #4]
 800f492:	f000 fcbd 	bl	800fe10 <ucdr_buffer_alignment>
 800f496:	4601      	mov	r1, r0
 800f498:	4620      	mov	r0, r4
 800f49a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f49e:	f000 fcfd 	bl	800fe9c <ucdr_advance_buffer>
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	2104      	movs	r1, #4
 800f4a6:	f000 fc55 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f4aa:	2800      	cmp	r0, #0
 800f4ac:	d138      	bne.n	800f520 <ucdr_serialize_endian_float+0x9c>
 800f4ae:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f4b2:	42b3      	cmp	r3, r6
 800f4b4:	d92f      	bls.n	800f516 <ucdr_serialize_endian_float+0x92>
 800f4b6:	6922      	ldr	r2, [r4, #16]
 800f4b8:	1b9f      	subs	r7, r3, r6
 800f4ba:	443a      	add	r2, r7
 800f4bc:	f1c7 0904 	rsb	r9, r7, #4
 800f4c0:	4649      	mov	r1, r9
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	60a3      	str	r3, [r4, #8]
 800f4c6:	6122      	str	r2, [r4, #16]
 800f4c8:	f000 fc50 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f4cc:	2800      	cmp	r0, #0
 800f4ce:	d04a      	beq.n	800f566 <ucdr_serialize_endian_float+0xe2>
 800f4d0:	2d01      	cmp	r5, #1
 800f4d2:	d063      	beq.n	800f59c <ucdr_serialize_endian_float+0x118>
 800f4d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4d8:	7033      	strb	r3, [r6, #0]
 800f4da:	2f00      	cmp	r7, #0
 800f4dc:	d051      	beq.n	800f582 <ucdr_serialize_endian_float+0xfe>
 800f4de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4e2:	2f01      	cmp	r7, #1
 800f4e4:	7073      	strb	r3, [r6, #1]
 800f4e6:	d050      	beq.n	800f58a <ucdr_serialize_endian_float+0x106>
 800f4e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f4ec:	2f02      	cmp	r7, #2
 800f4ee:	70b3      	strb	r3, [r6, #2]
 800f4f0:	d04f      	beq.n	800f592 <ucdr_serialize_endian_float+0x10e>
 800f4f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f4f6:	70f3      	strb	r3, [r6, #3]
 800f4f8:	2104      	movs	r1, #4
 800f4fa:	6923      	ldr	r3, [r4, #16]
 800f4fc:	68a2      	ldr	r2, [r4, #8]
 800f4fe:	7da0      	ldrb	r0, [r4, #22]
 800f500:	440b      	add	r3, r1
 800f502:	1bdf      	subs	r7, r3, r7
 800f504:	444a      	add	r2, r9
 800f506:	f080 0001 	eor.w	r0, r0, #1
 800f50a:	6127      	str	r7, [r4, #16]
 800f50c:	60a2      	str	r2, [r4, #8]
 800f50e:	7561      	strb	r1, [r4, #21]
 800f510:	b003      	add	sp, #12
 800f512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f516:	2104      	movs	r1, #4
 800f518:	4620      	mov	r0, r4
 800f51a:	f000 fc27 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f51e:	b1c8      	cbz	r0, 800f554 <ucdr_serialize_endian_float+0xd0>
 800f520:	2d01      	cmp	r5, #1
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	d01c      	beq.n	800f560 <ucdr_serialize_endian_float+0xdc>
 800f526:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f52a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f52e:	7019      	strb	r1, [r3, #0]
 800f530:	68a3      	ldr	r3, [r4, #8]
 800f532:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f536:	705a      	strb	r2, [r3, #1]
 800f538:	68a3      	ldr	r3, [r4, #8]
 800f53a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f53e:	7099      	strb	r1, [r3, #2]
 800f540:	68a3      	ldr	r3, [r4, #8]
 800f542:	70da      	strb	r2, [r3, #3]
 800f544:	2104      	movs	r1, #4
 800f546:	68a2      	ldr	r2, [r4, #8]
 800f548:	6923      	ldr	r3, [r4, #16]
 800f54a:	440a      	add	r2, r1
 800f54c:	440b      	add	r3, r1
 800f54e:	60a2      	str	r2, [r4, #8]
 800f550:	6123      	str	r3, [r4, #16]
 800f552:	7561      	strb	r1, [r4, #21]
 800f554:	7da0      	ldrb	r0, [r4, #22]
 800f556:	f080 0001 	eor.w	r0, r0, #1
 800f55a:	b003      	add	sp, #12
 800f55c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f560:	9a01      	ldr	r2, [sp, #4]
 800f562:	601a      	str	r2, [r3, #0]
 800f564:	e7ee      	b.n	800f544 <ucdr_serialize_endian_float+0xc0>
 800f566:	68a2      	ldr	r2, [r4, #8]
 800f568:	6923      	ldr	r3, [r4, #16]
 800f56a:	7da0      	ldrb	r0, [r4, #22]
 800f56c:	1bd2      	subs	r2, r2, r7
 800f56e:	f080 0001 	eor.w	r0, r0, #1
 800f572:	1bdf      	subs	r7, r3, r7
 800f574:	f884 8015 	strb.w	r8, [r4, #21]
 800f578:	60a2      	str	r2, [r4, #8]
 800f57a:	6127      	str	r7, [r4, #16]
 800f57c:	b003      	add	sp, #12
 800f57e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f588:	701a      	strb	r2, [r3, #0]
 800f58a:	68a3      	ldr	r3, [r4, #8]
 800f58c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f590:	701a      	strb	r2, [r3, #0]
 800f592:	68a3      	ldr	r3, [r4, #8]
 800f594:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f598:	701a      	strb	r2, [r3, #0]
 800f59a:	e7ad      	b.n	800f4f8 <ucdr_serialize_endian_float+0x74>
 800f59c:	ad01      	add	r5, sp, #4
 800f59e:	4629      	mov	r1, r5
 800f5a0:	463a      	mov	r2, r7
 800f5a2:	4630      	mov	r0, r6
 800f5a4:	f008 f88e 	bl	80176c4 <memcpy>
 800f5a8:	464a      	mov	r2, r9
 800f5aa:	68a0      	ldr	r0, [r4, #8]
 800f5ac:	19e9      	adds	r1, r5, r7
 800f5ae:	f008 f889 	bl	80176c4 <memcpy>
 800f5b2:	e7a1      	b.n	800f4f8 <ucdr_serialize_endian_float+0x74>

0800f5b4 <ucdr_deserialize_endian_float>:
 800f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b8:	460e      	mov	r6, r1
 800f5ba:	2104      	movs	r1, #4
 800f5bc:	4604      	mov	r4, r0
 800f5be:	4615      	mov	r5, r2
 800f5c0:	f000 fc26 	bl	800fe10 <ucdr_buffer_alignment>
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f5cc:	f000 fc66 	bl	800fe9c <ucdr_advance_buffer>
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	2104      	movs	r1, #4
 800f5d4:	f000 fbbe 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f5d8:	2800      	cmp	r0, #0
 800f5da:	d13c      	bne.n	800f656 <ucdr_deserialize_endian_float+0xa2>
 800f5dc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f5e0:	42bb      	cmp	r3, r7
 800f5e2:	d933      	bls.n	800f64c <ucdr_deserialize_endian_float+0x98>
 800f5e4:	6922      	ldr	r2, [r4, #16]
 800f5e6:	eba3 0807 	sub.w	r8, r3, r7
 800f5ea:	4442      	add	r2, r8
 800f5ec:	f1c8 0a04 	rsb	sl, r8, #4
 800f5f0:	4651      	mov	r1, sl
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	60a3      	str	r3, [r4, #8]
 800f5f6:	6122      	str	r2, [r4, #16]
 800f5f8:	f000 fbb8 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d048      	beq.n	800f692 <ucdr_deserialize_endian_float+0xde>
 800f600:	2e01      	cmp	r6, #1
 800f602:	d061      	beq.n	800f6c8 <ucdr_deserialize_endian_float+0x114>
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	702b      	strb	r3, [r5, #0]
 800f608:	f1b8 0f00 	cmp.w	r8, #0
 800f60c:	d050      	beq.n	800f6b0 <ucdr_deserialize_endian_float+0xfc>
 800f60e:	78ba      	ldrb	r2, [r7, #2]
 800f610:	f1b8 0f01 	cmp.w	r8, #1
 800f614:	f105 0302 	add.w	r3, r5, #2
 800f618:	706a      	strb	r2, [r5, #1]
 800f61a:	d04d      	beq.n	800f6b8 <ucdr_deserialize_endian_float+0x104>
 800f61c:	787a      	ldrb	r2, [r7, #1]
 800f61e:	f1b8 0f02 	cmp.w	r8, #2
 800f622:	f105 0303 	add.w	r3, r5, #3
 800f626:	70aa      	strb	r2, [r5, #2]
 800f628:	d04a      	beq.n	800f6c0 <ucdr_deserialize_endian_float+0x10c>
 800f62a:	783b      	ldrb	r3, [r7, #0]
 800f62c:	70eb      	strb	r3, [r5, #3]
 800f62e:	2104      	movs	r1, #4
 800f630:	6923      	ldr	r3, [r4, #16]
 800f632:	68a2      	ldr	r2, [r4, #8]
 800f634:	7da0      	ldrb	r0, [r4, #22]
 800f636:	440b      	add	r3, r1
 800f638:	eba3 0308 	sub.w	r3, r3, r8
 800f63c:	4452      	add	r2, sl
 800f63e:	7561      	strb	r1, [r4, #21]
 800f640:	6123      	str	r3, [r4, #16]
 800f642:	60a2      	str	r2, [r4, #8]
 800f644:	f080 0001 	eor.w	r0, r0, #1
 800f648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f64c:	2104      	movs	r1, #4
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 fb8c 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f654:	b1a8      	cbz	r0, 800f682 <ucdr_deserialize_endian_float+0xce>
 800f656:	2e01      	cmp	r6, #1
 800f658:	68a3      	ldr	r3, [r4, #8]
 800f65a:	d017      	beq.n	800f68c <ucdr_deserialize_endian_float+0xd8>
 800f65c:	78db      	ldrb	r3, [r3, #3]
 800f65e:	702b      	strb	r3, [r5, #0]
 800f660:	68a3      	ldr	r3, [r4, #8]
 800f662:	789b      	ldrb	r3, [r3, #2]
 800f664:	706b      	strb	r3, [r5, #1]
 800f666:	68a3      	ldr	r3, [r4, #8]
 800f668:	785b      	ldrb	r3, [r3, #1]
 800f66a:	70ab      	strb	r3, [r5, #2]
 800f66c:	68a3      	ldr	r3, [r4, #8]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	70eb      	strb	r3, [r5, #3]
 800f672:	2104      	movs	r1, #4
 800f674:	68a2      	ldr	r2, [r4, #8]
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	440a      	add	r2, r1
 800f67a:	440b      	add	r3, r1
 800f67c:	60a2      	str	r2, [r4, #8]
 800f67e:	6123      	str	r3, [r4, #16]
 800f680:	7561      	strb	r1, [r4, #21]
 800f682:	7da0      	ldrb	r0, [r4, #22]
 800f684:	f080 0001 	eor.w	r0, r0, #1
 800f688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	602b      	str	r3, [r5, #0]
 800f690:	e7ef      	b.n	800f672 <ucdr_deserialize_endian_float+0xbe>
 800f692:	68a2      	ldr	r2, [r4, #8]
 800f694:	6923      	ldr	r3, [r4, #16]
 800f696:	7da0      	ldrb	r0, [r4, #22]
 800f698:	eba2 0208 	sub.w	r2, r2, r8
 800f69c:	eba3 0308 	sub.w	r3, r3, r8
 800f6a0:	f884 9015 	strb.w	r9, [r4, #21]
 800f6a4:	60a2      	str	r2, [r4, #8]
 800f6a6:	6123      	str	r3, [r4, #16]
 800f6a8:	f080 0001 	eor.w	r0, r0, #1
 800f6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b0:	68a2      	ldr	r2, [r4, #8]
 800f6b2:	1cab      	adds	r3, r5, #2
 800f6b4:	7892      	ldrb	r2, [r2, #2]
 800f6b6:	706a      	strb	r2, [r5, #1]
 800f6b8:	68a2      	ldr	r2, [r4, #8]
 800f6ba:	7852      	ldrb	r2, [r2, #1]
 800f6bc:	f803 2b01 	strb.w	r2, [r3], #1
 800f6c0:	68a2      	ldr	r2, [r4, #8]
 800f6c2:	7812      	ldrb	r2, [r2, #0]
 800f6c4:	701a      	strb	r2, [r3, #0]
 800f6c6:	e7b2      	b.n	800f62e <ucdr_deserialize_endian_float+0x7a>
 800f6c8:	4639      	mov	r1, r7
 800f6ca:	4642      	mov	r2, r8
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	f007 fff9 	bl	80176c4 <memcpy>
 800f6d2:	4652      	mov	r2, sl
 800f6d4:	68a1      	ldr	r1, [r4, #8]
 800f6d6:	eb05 0008 	add.w	r0, r5, r8
 800f6da:	f007 fff3 	bl	80176c4 <memcpy>
 800f6de:	e7a6      	b.n	800f62e <ucdr_deserialize_endian_float+0x7a>

0800f6e0 <ucdr_serialize_double>:
 800f6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e4:	2108      	movs	r1, #8
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	4604      	mov	r4, r0
 800f6ea:	e9cd 2300 	strd	r2, r3, [sp]
 800f6ee:	f000 fb8f 	bl	800fe10 <ucdr_buffer_alignment>
 800f6f2:	4601      	mov	r1, r0
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	7d67      	ldrb	r7, [r4, #21]
 800f6f8:	f000 fbd0 	bl	800fe9c <ucdr_advance_buffer>
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	2108      	movs	r1, #8
 800f700:	f000 fb28 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f704:	2800      	cmp	r0, #0
 800f706:	d14e      	bne.n	800f7a6 <ucdr_serialize_double+0xc6>
 800f708:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	d945      	bls.n	800f79c <ucdr_serialize_double+0xbc>
 800f710:	6922      	ldr	r2, [r4, #16]
 800f712:	1b5e      	subs	r6, r3, r5
 800f714:	4432      	add	r2, r6
 800f716:	f1c6 0808 	rsb	r8, r6, #8
 800f71a:	4641      	mov	r1, r8
 800f71c:	4620      	mov	r0, r4
 800f71e:	60a3      	str	r3, [r4, #8]
 800f720:	6122      	str	r2, [r4, #16]
 800f722:	f000 fb23 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f726:	2800      	cmp	r0, #0
 800f728:	d074      	beq.n	800f814 <ucdr_serialize_double+0x134>
 800f72a:	7d23      	ldrb	r3, [r4, #20]
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	f000 809b 	beq.w	800f868 <ucdr_serialize_double+0x188>
 800f732:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f736:	702b      	strb	r3, [r5, #0]
 800f738:	2e00      	cmp	r6, #0
 800f73a:	d078      	beq.n	800f82e <ucdr_serialize_double+0x14e>
 800f73c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f740:	2e01      	cmp	r6, #1
 800f742:	706b      	strb	r3, [r5, #1]
 800f744:	d077      	beq.n	800f836 <ucdr_serialize_double+0x156>
 800f746:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f74a:	2e02      	cmp	r6, #2
 800f74c:	70ab      	strb	r3, [r5, #2]
 800f74e:	d076      	beq.n	800f83e <ucdr_serialize_double+0x15e>
 800f750:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f754:	2e03      	cmp	r6, #3
 800f756:	70eb      	strb	r3, [r5, #3]
 800f758:	d075      	beq.n	800f846 <ucdr_serialize_double+0x166>
 800f75a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f75e:	2e04      	cmp	r6, #4
 800f760:	712b      	strb	r3, [r5, #4]
 800f762:	d074      	beq.n	800f84e <ucdr_serialize_double+0x16e>
 800f764:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f768:	2e05      	cmp	r6, #5
 800f76a:	716b      	strb	r3, [r5, #5]
 800f76c:	d073      	beq.n	800f856 <ucdr_serialize_double+0x176>
 800f76e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f772:	2e06      	cmp	r6, #6
 800f774:	71ab      	strb	r3, [r5, #6]
 800f776:	d072      	beq.n	800f85e <ucdr_serialize_double+0x17e>
 800f778:	f89d 3000 	ldrb.w	r3, [sp]
 800f77c:	71eb      	strb	r3, [r5, #7]
 800f77e:	2108      	movs	r1, #8
 800f780:	6923      	ldr	r3, [r4, #16]
 800f782:	68a2      	ldr	r2, [r4, #8]
 800f784:	7da0      	ldrb	r0, [r4, #22]
 800f786:	440b      	add	r3, r1
 800f788:	1b9e      	subs	r6, r3, r6
 800f78a:	4442      	add	r2, r8
 800f78c:	f080 0001 	eor.w	r0, r0, #1
 800f790:	6126      	str	r6, [r4, #16]
 800f792:	60a2      	str	r2, [r4, #8]
 800f794:	7561      	strb	r1, [r4, #21]
 800f796:	b002      	add	sp, #8
 800f798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f79c:	2108      	movs	r1, #8
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fae4 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f7a4:	b350      	cbz	r0, 800f7fc <ucdr_serialize_double+0x11c>
 800f7a6:	7d23      	ldrb	r3, [r4, #20]
 800f7a8:	2b01      	cmp	r3, #1
 800f7aa:	d02d      	beq.n	800f808 <ucdr_serialize_double+0x128>
 800f7ac:	68a3      	ldr	r3, [r4, #8]
 800f7ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f7b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7b6:	7019      	strb	r1, [r3, #0]
 800f7b8:	68a3      	ldr	r3, [r4, #8]
 800f7ba:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f7be:	705a      	strb	r2, [r3, #1]
 800f7c0:	68a3      	ldr	r3, [r4, #8]
 800f7c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7c6:	7099      	strb	r1, [r3, #2]
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f7ce:	70da      	strb	r2, [r3, #3]
 800f7d0:	68a3      	ldr	r3, [r4, #8]
 800f7d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f7d6:	7119      	strb	r1, [r3, #4]
 800f7d8:	68a3      	ldr	r3, [r4, #8]
 800f7da:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f7de:	715a      	strb	r2, [r3, #5]
 800f7e0:	68a3      	ldr	r3, [r4, #8]
 800f7e2:	f89d 2000 	ldrb.w	r2, [sp]
 800f7e6:	7199      	strb	r1, [r3, #6]
 800f7e8:	68a3      	ldr	r3, [r4, #8]
 800f7ea:	71da      	strb	r2, [r3, #7]
 800f7ec:	2108      	movs	r1, #8
 800f7ee:	68a2      	ldr	r2, [r4, #8]
 800f7f0:	6923      	ldr	r3, [r4, #16]
 800f7f2:	440a      	add	r2, r1
 800f7f4:	440b      	add	r3, r1
 800f7f6:	60a2      	str	r2, [r4, #8]
 800f7f8:	6123      	str	r3, [r4, #16]
 800f7fa:	7561      	strb	r1, [r4, #21]
 800f7fc:	7da0      	ldrb	r0, [r4, #22]
 800f7fe:	f080 0001 	eor.w	r0, r0, #1
 800f802:	b002      	add	sp, #8
 800f804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f808:	466b      	mov	r3, sp
 800f80a:	68a2      	ldr	r2, [r4, #8]
 800f80c:	cb03      	ldmia	r3!, {r0, r1}
 800f80e:	6010      	str	r0, [r2, #0]
 800f810:	6051      	str	r1, [r2, #4]
 800f812:	e7eb      	b.n	800f7ec <ucdr_serialize_double+0x10c>
 800f814:	68a2      	ldr	r2, [r4, #8]
 800f816:	6923      	ldr	r3, [r4, #16]
 800f818:	7da0      	ldrb	r0, [r4, #22]
 800f81a:	1b92      	subs	r2, r2, r6
 800f81c:	f080 0001 	eor.w	r0, r0, #1
 800f820:	1b9e      	subs	r6, r3, r6
 800f822:	7567      	strb	r7, [r4, #21]
 800f824:	60a2      	str	r2, [r4, #8]
 800f826:	6126      	str	r6, [r4, #16]
 800f828:	b002      	add	sp, #8
 800f82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f82e:	68a3      	ldr	r3, [r4, #8]
 800f830:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f834:	701a      	strb	r2, [r3, #0]
 800f836:	68a3      	ldr	r3, [r4, #8]
 800f838:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f83c:	701a      	strb	r2, [r3, #0]
 800f83e:	68a3      	ldr	r3, [r4, #8]
 800f840:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f844:	701a      	strb	r2, [r3, #0]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	68a3      	ldr	r3, [r4, #8]
 800f850:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f854:	701a      	strb	r2, [r3, #0]
 800f856:	68a3      	ldr	r3, [r4, #8]
 800f858:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f85c:	701a      	strb	r2, [r3, #0]
 800f85e:	68a3      	ldr	r3, [r4, #8]
 800f860:	f89d 2000 	ldrb.w	r2, [sp]
 800f864:	701a      	strb	r2, [r3, #0]
 800f866:	e78a      	b.n	800f77e <ucdr_serialize_double+0x9e>
 800f868:	4628      	mov	r0, r5
 800f86a:	466d      	mov	r5, sp
 800f86c:	4632      	mov	r2, r6
 800f86e:	4629      	mov	r1, r5
 800f870:	f007 ff28 	bl	80176c4 <memcpy>
 800f874:	4642      	mov	r2, r8
 800f876:	68a0      	ldr	r0, [r4, #8]
 800f878:	19a9      	adds	r1, r5, r6
 800f87a:	f007 ff23 	bl	80176c4 <memcpy>
 800f87e:	e77e      	b.n	800f77e <ucdr_serialize_double+0x9e>

0800f880 <ucdr_serialize_endian_double>:
 800f880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f884:	460d      	mov	r5, r1
 800f886:	b083      	sub	sp, #12
 800f888:	2108      	movs	r1, #8
 800f88a:	4604      	mov	r4, r0
 800f88c:	e9cd 2300 	strd	r2, r3, [sp]
 800f890:	f000 fabe 	bl	800fe10 <ucdr_buffer_alignment>
 800f894:	4601      	mov	r1, r0
 800f896:	4620      	mov	r0, r4
 800f898:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f89c:	f000 fafe 	bl	800fe9c <ucdr_advance_buffer>
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	2108      	movs	r1, #8
 800f8a4:	f000 fa56 	bl	800fd54 <ucdr_check_buffer_available_for>
 800f8a8:	2800      	cmp	r0, #0
 800f8aa:	d14d      	bne.n	800f948 <ucdr_serialize_endian_double+0xc8>
 800f8ac:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800f8b0:	42b3      	cmp	r3, r6
 800f8b2:	d944      	bls.n	800f93e <ucdr_serialize_endian_double+0xbe>
 800f8b4:	6922      	ldr	r2, [r4, #16]
 800f8b6:	1b9f      	subs	r7, r3, r6
 800f8b8:	443a      	add	r2, r7
 800f8ba:	f1c7 0908 	rsb	r9, r7, #8
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	60a3      	str	r3, [r4, #8]
 800f8c4:	6122      	str	r2, [r4, #16]
 800f8c6:	f000 fa51 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f8ca:	2800      	cmp	r0, #0
 800f8cc:	d072      	beq.n	800f9b4 <ucdr_serialize_endian_double+0x134>
 800f8ce:	2d01      	cmp	r5, #1
 800f8d0:	f000 809b 	beq.w	800fa0a <ucdr_serialize_endian_double+0x18a>
 800f8d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8d8:	7033      	strb	r3, [r6, #0]
 800f8da:	2f00      	cmp	r7, #0
 800f8dc:	d078      	beq.n	800f9d0 <ucdr_serialize_endian_double+0x150>
 800f8de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8e2:	2f01      	cmp	r7, #1
 800f8e4:	7073      	strb	r3, [r6, #1]
 800f8e6:	d077      	beq.n	800f9d8 <ucdr_serialize_endian_double+0x158>
 800f8e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8ec:	2f02      	cmp	r7, #2
 800f8ee:	70b3      	strb	r3, [r6, #2]
 800f8f0:	d076      	beq.n	800f9e0 <ucdr_serialize_endian_double+0x160>
 800f8f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8f6:	2f03      	cmp	r7, #3
 800f8f8:	70f3      	strb	r3, [r6, #3]
 800f8fa:	d075      	beq.n	800f9e8 <ucdr_serialize_endian_double+0x168>
 800f8fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f900:	2f04      	cmp	r7, #4
 800f902:	7133      	strb	r3, [r6, #4]
 800f904:	d074      	beq.n	800f9f0 <ucdr_serialize_endian_double+0x170>
 800f906:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f90a:	2f05      	cmp	r7, #5
 800f90c:	7173      	strb	r3, [r6, #5]
 800f90e:	d073      	beq.n	800f9f8 <ucdr_serialize_endian_double+0x178>
 800f910:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f914:	2f06      	cmp	r7, #6
 800f916:	71b3      	strb	r3, [r6, #6]
 800f918:	d072      	beq.n	800fa00 <ucdr_serialize_endian_double+0x180>
 800f91a:	f89d 3000 	ldrb.w	r3, [sp]
 800f91e:	71f3      	strb	r3, [r6, #7]
 800f920:	2108      	movs	r1, #8
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	68a2      	ldr	r2, [r4, #8]
 800f926:	7da0      	ldrb	r0, [r4, #22]
 800f928:	440b      	add	r3, r1
 800f92a:	1bdf      	subs	r7, r3, r7
 800f92c:	444a      	add	r2, r9
 800f92e:	f080 0001 	eor.w	r0, r0, #1
 800f932:	6127      	str	r7, [r4, #16]
 800f934:	60a2      	str	r2, [r4, #8]
 800f936:	7561      	strb	r1, [r4, #21]
 800f938:	b003      	add	sp, #12
 800f93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f93e:	2108      	movs	r1, #8
 800f940:	4620      	mov	r0, r4
 800f942:	f000 fa13 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800f946:	b348      	cbz	r0, 800f99c <ucdr_serialize_endian_double+0x11c>
 800f948:	2d01      	cmp	r5, #1
 800f94a:	d02d      	beq.n	800f9a8 <ucdr_serialize_endian_double+0x128>
 800f94c:	68a3      	ldr	r3, [r4, #8]
 800f94e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f952:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f956:	7019      	strb	r1, [r3, #0]
 800f958:	68a3      	ldr	r3, [r4, #8]
 800f95a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f95e:	705a      	strb	r2, [r3, #1]
 800f960:	68a3      	ldr	r3, [r4, #8]
 800f962:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f966:	7099      	strb	r1, [r3, #2]
 800f968:	68a3      	ldr	r3, [r4, #8]
 800f96a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800f96e:	70da      	strb	r2, [r3, #3]
 800f970:	68a3      	ldr	r3, [r4, #8]
 800f972:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f976:	7119      	strb	r1, [r3, #4]
 800f978:	68a3      	ldr	r3, [r4, #8]
 800f97a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f97e:	715a      	strb	r2, [r3, #5]
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	f89d 2000 	ldrb.w	r2, [sp]
 800f986:	7199      	strb	r1, [r3, #6]
 800f988:	68a3      	ldr	r3, [r4, #8]
 800f98a:	71da      	strb	r2, [r3, #7]
 800f98c:	2108      	movs	r1, #8
 800f98e:	68a2      	ldr	r2, [r4, #8]
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	440a      	add	r2, r1
 800f994:	440b      	add	r3, r1
 800f996:	60a2      	str	r2, [r4, #8]
 800f998:	6123      	str	r3, [r4, #16]
 800f99a:	7561      	strb	r1, [r4, #21]
 800f99c:	7da0      	ldrb	r0, [r4, #22]
 800f99e:	f080 0001 	eor.w	r0, r0, #1
 800f9a2:	b003      	add	sp, #12
 800f9a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9a8:	466b      	mov	r3, sp
 800f9aa:	68a2      	ldr	r2, [r4, #8]
 800f9ac:	cb03      	ldmia	r3!, {r0, r1}
 800f9ae:	6010      	str	r0, [r2, #0]
 800f9b0:	6051      	str	r1, [r2, #4]
 800f9b2:	e7eb      	b.n	800f98c <ucdr_serialize_endian_double+0x10c>
 800f9b4:	68a2      	ldr	r2, [r4, #8]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	7da0      	ldrb	r0, [r4, #22]
 800f9ba:	1bd2      	subs	r2, r2, r7
 800f9bc:	f080 0001 	eor.w	r0, r0, #1
 800f9c0:	1bdf      	subs	r7, r3, r7
 800f9c2:	f884 8015 	strb.w	r8, [r4, #21]
 800f9c6:	60a2      	str	r2, [r4, #8]
 800f9c8:	6127      	str	r7, [r4, #16]
 800f9ca:	b003      	add	sp, #12
 800f9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9d0:	68a3      	ldr	r3, [r4, #8]
 800f9d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9d6:	701a      	strb	r2, [r3, #0]
 800f9d8:	68a3      	ldr	r3, [r4, #8]
 800f9da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f9de:	701a      	strb	r2, [r3, #0]
 800f9e0:	68a3      	ldr	r3, [r4, #8]
 800f9e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f9e6:	701a      	strb	r2, [r3, #0]
 800f9e8:	68a3      	ldr	r3, [r4, #8]
 800f9ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f9ee:	701a      	strb	r2, [r3, #0]
 800f9f0:	68a3      	ldr	r3, [r4, #8]
 800f9f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f9f6:	701a      	strb	r2, [r3, #0]
 800f9f8:	68a3      	ldr	r3, [r4, #8]
 800f9fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f9fe:	701a      	strb	r2, [r3, #0]
 800fa00:	68a3      	ldr	r3, [r4, #8]
 800fa02:	f89d 2000 	ldrb.w	r2, [sp]
 800fa06:	701a      	strb	r2, [r3, #0]
 800fa08:	e78a      	b.n	800f920 <ucdr_serialize_endian_double+0xa0>
 800fa0a:	466d      	mov	r5, sp
 800fa0c:	463a      	mov	r2, r7
 800fa0e:	4629      	mov	r1, r5
 800fa10:	4630      	mov	r0, r6
 800fa12:	f007 fe57 	bl	80176c4 <memcpy>
 800fa16:	464a      	mov	r2, r9
 800fa18:	68a0      	ldr	r0, [r4, #8]
 800fa1a:	19e9      	adds	r1, r5, r7
 800fa1c:	f007 fe52 	bl	80176c4 <memcpy>
 800fa20:	e77e      	b.n	800f920 <ucdr_serialize_endian_double+0xa0>
 800fa22:	bf00      	nop

0800fa24 <ucdr_deserialize_double>:
 800fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa28:	460d      	mov	r5, r1
 800fa2a:	2108      	movs	r1, #8
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	f000 f9ef 	bl	800fe10 <ucdr_buffer_alignment>
 800fa32:	4601      	mov	r1, r0
 800fa34:	4620      	mov	r0, r4
 800fa36:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fa3a:	f000 fa2f 	bl	800fe9c <ucdr_advance_buffer>
 800fa3e:	4620      	mov	r0, r4
 800fa40:	2108      	movs	r1, #8
 800fa42:	f000 f987 	bl	800fd54 <ucdr_check_buffer_available_for>
 800fa46:	2800      	cmp	r0, #0
 800fa48:	d151      	bne.n	800faee <ucdr_deserialize_double+0xca>
 800fa4a:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800fa4e:	42b3      	cmp	r3, r6
 800fa50:	d948      	bls.n	800fae4 <ucdr_deserialize_double+0xc0>
 800fa52:	6922      	ldr	r2, [r4, #16]
 800fa54:	1b9f      	subs	r7, r3, r6
 800fa56:	443a      	add	r2, r7
 800fa58:	f1c7 0808 	rsb	r8, r7, #8
 800fa5c:	4641      	mov	r1, r8
 800fa5e:	4620      	mov	r0, r4
 800fa60:	60a3      	str	r3, [r4, #8]
 800fa62:	6122      	str	r2, [r4, #16]
 800fa64:	f000 f982 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d06d      	beq.n	800fb48 <ucdr_deserialize_double+0x124>
 800fa6c:	7d23      	ldrb	r3, [r4, #20]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	f000 8093 	beq.w	800fb9a <ucdr_deserialize_double+0x176>
 800fa74:	79f3      	ldrb	r3, [r6, #7]
 800fa76:	702b      	strb	r3, [r5, #0]
 800fa78:	2f00      	cmp	r7, #0
 800fa7a:	d072      	beq.n	800fb62 <ucdr_deserialize_double+0x13e>
 800fa7c:	79b2      	ldrb	r2, [r6, #6]
 800fa7e:	2f01      	cmp	r7, #1
 800fa80:	f105 0302 	add.w	r3, r5, #2
 800fa84:	706a      	strb	r2, [r5, #1]
 800fa86:	d070      	beq.n	800fb6a <ucdr_deserialize_double+0x146>
 800fa88:	7972      	ldrb	r2, [r6, #5]
 800fa8a:	2f02      	cmp	r7, #2
 800fa8c:	f105 0303 	add.w	r3, r5, #3
 800fa90:	70aa      	strb	r2, [r5, #2]
 800fa92:	d06e      	beq.n	800fb72 <ucdr_deserialize_double+0x14e>
 800fa94:	7932      	ldrb	r2, [r6, #4]
 800fa96:	2f03      	cmp	r7, #3
 800fa98:	f105 0304 	add.w	r3, r5, #4
 800fa9c:	70ea      	strb	r2, [r5, #3]
 800fa9e:	d06c      	beq.n	800fb7a <ucdr_deserialize_double+0x156>
 800faa0:	78f2      	ldrb	r2, [r6, #3]
 800faa2:	2f04      	cmp	r7, #4
 800faa4:	f105 0305 	add.w	r3, r5, #5
 800faa8:	712a      	strb	r2, [r5, #4]
 800faaa:	d06a      	beq.n	800fb82 <ucdr_deserialize_double+0x15e>
 800faac:	78b2      	ldrb	r2, [r6, #2]
 800faae:	2f05      	cmp	r7, #5
 800fab0:	f105 0306 	add.w	r3, r5, #6
 800fab4:	716a      	strb	r2, [r5, #5]
 800fab6:	d068      	beq.n	800fb8a <ucdr_deserialize_double+0x166>
 800fab8:	7872      	ldrb	r2, [r6, #1]
 800faba:	2f06      	cmp	r7, #6
 800fabc:	f105 0307 	add.w	r3, r5, #7
 800fac0:	71aa      	strb	r2, [r5, #6]
 800fac2:	d066      	beq.n	800fb92 <ucdr_deserialize_double+0x16e>
 800fac4:	7833      	ldrb	r3, [r6, #0]
 800fac6:	71eb      	strb	r3, [r5, #7]
 800fac8:	2108      	movs	r1, #8
 800faca:	6923      	ldr	r3, [r4, #16]
 800facc:	68a2      	ldr	r2, [r4, #8]
 800face:	7da0      	ldrb	r0, [r4, #22]
 800fad0:	440b      	add	r3, r1
 800fad2:	1bdf      	subs	r7, r3, r7
 800fad4:	4442      	add	r2, r8
 800fad6:	7561      	strb	r1, [r4, #21]
 800fad8:	6127      	str	r7, [r4, #16]
 800fada:	60a2      	str	r2, [r4, #8]
 800fadc:	f080 0001 	eor.w	r0, r0, #1
 800fae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fae4:	2108      	movs	r1, #8
 800fae6:	4620      	mov	r0, r4
 800fae8:	f000 f940 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800faec:	b310      	cbz	r0, 800fb34 <ucdr_deserialize_double+0x110>
 800faee:	7d23      	ldrb	r3, [r4, #20]
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	d023      	beq.n	800fb3e <ucdr_deserialize_double+0x11a>
 800faf6:	79db      	ldrb	r3, [r3, #7]
 800faf8:	702b      	strb	r3, [r5, #0]
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	799b      	ldrb	r3, [r3, #6]
 800fafe:	706b      	strb	r3, [r5, #1]
 800fb00:	68a3      	ldr	r3, [r4, #8]
 800fb02:	795b      	ldrb	r3, [r3, #5]
 800fb04:	70ab      	strb	r3, [r5, #2]
 800fb06:	68a3      	ldr	r3, [r4, #8]
 800fb08:	791b      	ldrb	r3, [r3, #4]
 800fb0a:	70eb      	strb	r3, [r5, #3]
 800fb0c:	68a3      	ldr	r3, [r4, #8]
 800fb0e:	78db      	ldrb	r3, [r3, #3]
 800fb10:	712b      	strb	r3, [r5, #4]
 800fb12:	68a3      	ldr	r3, [r4, #8]
 800fb14:	789b      	ldrb	r3, [r3, #2]
 800fb16:	716b      	strb	r3, [r5, #5]
 800fb18:	68a3      	ldr	r3, [r4, #8]
 800fb1a:	785b      	ldrb	r3, [r3, #1]
 800fb1c:	71ab      	strb	r3, [r5, #6]
 800fb1e:	68a3      	ldr	r3, [r4, #8]
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	71eb      	strb	r3, [r5, #7]
 800fb24:	2108      	movs	r1, #8
 800fb26:	68a2      	ldr	r2, [r4, #8]
 800fb28:	6923      	ldr	r3, [r4, #16]
 800fb2a:	440a      	add	r2, r1
 800fb2c:	440b      	add	r3, r1
 800fb2e:	60a2      	str	r2, [r4, #8]
 800fb30:	6123      	str	r3, [r4, #16]
 800fb32:	7561      	strb	r1, [r4, #21]
 800fb34:	7da0      	ldrb	r0, [r4, #22]
 800fb36:	f080 0001 	eor.w	r0, r0, #1
 800fb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	602a      	str	r2, [r5, #0]
 800fb44:	606b      	str	r3, [r5, #4]
 800fb46:	e7ed      	b.n	800fb24 <ucdr_deserialize_double+0x100>
 800fb48:	68a2      	ldr	r2, [r4, #8]
 800fb4a:	6923      	ldr	r3, [r4, #16]
 800fb4c:	7da0      	ldrb	r0, [r4, #22]
 800fb4e:	1bd2      	subs	r2, r2, r7
 800fb50:	f884 9015 	strb.w	r9, [r4, #21]
 800fb54:	1bdf      	subs	r7, r3, r7
 800fb56:	60a2      	str	r2, [r4, #8]
 800fb58:	6127      	str	r7, [r4, #16]
 800fb5a:	f080 0001 	eor.w	r0, r0, #1
 800fb5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb62:	68a2      	ldr	r2, [r4, #8]
 800fb64:	1cab      	adds	r3, r5, #2
 800fb66:	7992      	ldrb	r2, [r2, #6]
 800fb68:	706a      	strb	r2, [r5, #1]
 800fb6a:	68a2      	ldr	r2, [r4, #8]
 800fb6c:	7952      	ldrb	r2, [r2, #5]
 800fb6e:	f803 2b01 	strb.w	r2, [r3], #1
 800fb72:	68a2      	ldr	r2, [r4, #8]
 800fb74:	7912      	ldrb	r2, [r2, #4]
 800fb76:	f803 2b01 	strb.w	r2, [r3], #1
 800fb7a:	68a2      	ldr	r2, [r4, #8]
 800fb7c:	78d2      	ldrb	r2, [r2, #3]
 800fb7e:	f803 2b01 	strb.w	r2, [r3], #1
 800fb82:	68a2      	ldr	r2, [r4, #8]
 800fb84:	7892      	ldrb	r2, [r2, #2]
 800fb86:	f803 2b01 	strb.w	r2, [r3], #1
 800fb8a:	68a2      	ldr	r2, [r4, #8]
 800fb8c:	7852      	ldrb	r2, [r2, #1]
 800fb8e:	f803 2b01 	strb.w	r2, [r3], #1
 800fb92:	68a2      	ldr	r2, [r4, #8]
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	701a      	strb	r2, [r3, #0]
 800fb98:	e796      	b.n	800fac8 <ucdr_deserialize_double+0xa4>
 800fb9a:	4631      	mov	r1, r6
 800fb9c:	463a      	mov	r2, r7
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f007 fd90 	bl	80176c4 <memcpy>
 800fba4:	4642      	mov	r2, r8
 800fba6:	68a1      	ldr	r1, [r4, #8]
 800fba8:	19e8      	adds	r0, r5, r7
 800fbaa:	f007 fd8b 	bl	80176c4 <memcpy>
 800fbae:	e78b      	b.n	800fac8 <ucdr_deserialize_double+0xa4>

0800fbb0 <ucdr_deserialize_endian_double>:
 800fbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbb4:	460e      	mov	r6, r1
 800fbb6:	2108      	movs	r1, #8
 800fbb8:	4604      	mov	r4, r0
 800fbba:	4615      	mov	r5, r2
 800fbbc:	f000 f928 	bl	800fe10 <ucdr_buffer_alignment>
 800fbc0:	4601      	mov	r1, r0
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fbc8:	f000 f968 	bl	800fe9c <ucdr_advance_buffer>
 800fbcc:	4620      	mov	r0, r4
 800fbce:	2108      	movs	r1, #8
 800fbd0:	f000 f8c0 	bl	800fd54 <ucdr_check_buffer_available_for>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d159      	bne.n	800fc8c <ucdr_deserialize_endian_double+0xdc>
 800fbd8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fbdc:	42bb      	cmp	r3, r7
 800fbde:	d950      	bls.n	800fc82 <ucdr_deserialize_endian_double+0xd2>
 800fbe0:	6922      	ldr	r2, [r4, #16]
 800fbe2:	eba3 0807 	sub.w	r8, r3, r7
 800fbe6:	4442      	add	r2, r8
 800fbe8:	f1c8 0a08 	rsb	sl, r8, #8
 800fbec:	4651      	mov	r1, sl
 800fbee:	4620      	mov	r0, r4
 800fbf0:	60a3      	str	r3, [r4, #8]
 800fbf2:	6122      	str	r2, [r4, #16]
 800fbf4:	f000 f8ba 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d073      	beq.n	800fce4 <ucdr_deserialize_endian_double+0x134>
 800fbfc:	2e01      	cmp	r6, #1
 800fbfe:	f000 809c 	beq.w	800fd3a <ucdr_deserialize_endian_double+0x18a>
 800fc02:	79fb      	ldrb	r3, [r7, #7]
 800fc04:	702b      	strb	r3, [r5, #0]
 800fc06:	f1b8 0f00 	cmp.w	r8, #0
 800fc0a:	d07a      	beq.n	800fd02 <ucdr_deserialize_endian_double+0x152>
 800fc0c:	79ba      	ldrb	r2, [r7, #6]
 800fc0e:	f1b8 0f01 	cmp.w	r8, #1
 800fc12:	f105 0302 	add.w	r3, r5, #2
 800fc16:	706a      	strb	r2, [r5, #1]
 800fc18:	d077      	beq.n	800fd0a <ucdr_deserialize_endian_double+0x15a>
 800fc1a:	797a      	ldrb	r2, [r7, #5]
 800fc1c:	f1b8 0f02 	cmp.w	r8, #2
 800fc20:	f105 0303 	add.w	r3, r5, #3
 800fc24:	70aa      	strb	r2, [r5, #2]
 800fc26:	d074      	beq.n	800fd12 <ucdr_deserialize_endian_double+0x162>
 800fc28:	793a      	ldrb	r2, [r7, #4]
 800fc2a:	f1b8 0f03 	cmp.w	r8, #3
 800fc2e:	f105 0304 	add.w	r3, r5, #4
 800fc32:	70ea      	strb	r2, [r5, #3]
 800fc34:	d071      	beq.n	800fd1a <ucdr_deserialize_endian_double+0x16a>
 800fc36:	78fa      	ldrb	r2, [r7, #3]
 800fc38:	f1b8 0f04 	cmp.w	r8, #4
 800fc3c:	f105 0305 	add.w	r3, r5, #5
 800fc40:	712a      	strb	r2, [r5, #4]
 800fc42:	d06e      	beq.n	800fd22 <ucdr_deserialize_endian_double+0x172>
 800fc44:	78ba      	ldrb	r2, [r7, #2]
 800fc46:	f1b8 0f05 	cmp.w	r8, #5
 800fc4a:	f105 0306 	add.w	r3, r5, #6
 800fc4e:	716a      	strb	r2, [r5, #5]
 800fc50:	d06b      	beq.n	800fd2a <ucdr_deserialize_endian_double+0x17a>
 800fc52:	787a      	ldrb	r2, [r7, #1]
 800fc54:	f1b8 0f06 	cmp.w	r8, #6
 800fc58:	f105 0307 	add.w	r3, r5, #7
 800fc5c:	71aa      	strb	r2, [r5, #6]
 800fc5e:	d068      	beq.n	800fd32 <ucdr_deserialize_endian_double+0x182>
 800fc60:	783b      	ldrb	r3, [r7, #0]
 800fc62:	71eb      	strb	r3, [r5, #7]
 800fc64:	2108      	movs	r1, #8
 800fc66:	6923      	ldr	r3, [r4, #16]
 800fc68:	68a2      	ldr	r2, [r4, #8]
 800fc6a:	7da0      	ldrb	r0, [r4, #22]
 800fc6c:	440b      	add	r3, r1
 800fc6e:	eba3 0308 	sub.w	r3, r3, r8
 800fc72:	4452      	add	r2, sl
 800fc74:	7561      	strb	r1, [r4, #21]
 800fc76:	6123      	str	r3, [r4, #16]
 800fc78:	60a2      	str	r2, [r4, #8]
 800fc7a:	f080 0001 	eor.w	r0, r0, #1
 800fc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc82:	2108      	movs	r1, #8
 800fc84:	4620      	mov	r0, r4
 800fc86:	f000 f871 	bl	800fd6c <ucdr_check_final_buffer_behavior>
 800fc8a:	b308      	cbz	r0, 800fcd0 <ucdr_deserialize_endian_double+0x120>
 800fc8c:	2e01      	cmp	r6, #1
 800fc8e:	68a3      	ldr	r3, [r4, #8]
 800fc90:	d023      	beq.n	800fcda <ucdr_deserialize_endian_double+0x12a>
 800fc92:	79db      	ldrb	r3, [r3, #7]
 800fc94:	702b      	strb	r3, [r5, #0]
 800fc96:	68a3      	ldr	r3, [r4, #8]
 800fc98:	799b      	ldrb	r3, [r3, #6]
 800fc9a:	706b      	strb	r3, [r5, #1]
 800fc9c:	68a3      	ldr	r3, [r4, #8]
 800fc9e:	795b      	ldrb	r3, [r3, #5]
 800fca0:	70ab      	strb	r3, [r5, #2]
 800fca2:	68a3      	ldr	r3, [r4, #8]
 800fca4:	791b      	ldrb	r3, [r3, #4]
 800fca6:	70eb      	strb	r3, [r5, #3]
 800fca8:	68a3      	ldr	r3, [r4, #8]
 800fcaa:	78db      	ldrb	r3, [r3, #3]
 800fcac:	712b      	strb	r3, [r5, #4]
 800fcae:	68a3      	ldr	r3, [r4, #8]
 800fcb0:	789b      	ldrb	r3, [r3, #2]
 800fcb2:	716b      	strb	r3, [r5, #5]
 800fcb4:	68a3      	ldr	r3, [r4, #8]
 800fcb6:	785b      	ldrb	r3, [r3, #1]
 800fcb8:	71ab      	strb	r3, [r5, #6]
 800fcba:	68a3      	ldr	r3, [r4, #8]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	71eb      	strb	r3, [r5, #7]
 800fcc0:	2108      	movs	r1, #8
 800fcc2:	68a2      	ldr	r2, [r4, #8]
 800fcc4:	6923      	ldr	r3, [r4, #16]
 800fcc6:	440a      	add	r2, r1
 800fcc8:	440b      	add	r3, r1
 800fcca:	60a2      	str	r2, [r4, #8]
 800fccc:	6123      	str	r3, [r4, #16]
 800fcce:	7561      	strb	r1, [r4, #21]
 800fcd0:	7da0      	ldrb	r0, [r4, #22]
 800fcd2:	f080 0001 	eor.w	r0, r0, #1
 800fcd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	602a      	str	r2, [r5, #0]
 800fce0:	606b      	str	r3, [r5, #4]
 800fce2:	e7ed      	b.n	800fcc0 <ucdr_deserialize_endian_double+0x110>
 800fce4:	68a2      	ldr	r2, [r4, #8]
 800fce6:	6923      	ldr	r3, [r4, #16]
 800fce8:	7da0      	ldrb	r0, [r4, #22]
 800fcea:	eba2 0208 	sub.w	r2, r2, r8
 800fcee:	eba3 0308 	sub.w	r3, r3, r8
 800fcf2:	f884 9015 	strb.w	r9, [r4, #21]
 800fcf6:	60a2      	str	r2, [r4, #8]
 800fcf8:	6123      	str	r3, [r4, #16]
 800fcfa:	f080 0001 	eor.w	r0, r0, #1
 800fcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd02:	68a2      	ldr	r2, [r4, #8]
 800fd04:	1cab      	adds	r3, r5, #2
 800fd06:	7992      	ldrb	r2, [r2, #6]
 800fd08:	706a      	strb	r2, [r5, #1]
 800fd0a:	68a2      	ldr	r2, [r4, #8]
 800fd0c:	7952      	ldrb	r2, [r2, #5]
 800fd0e:	f803 2b01 	strb.w	r2, [r3], #1
 800fd12:	68a2      	ldr	r2, [r4, #8]
 800fd14:	7912      	ldrb	r2, [r2, #4]
 800fd16:	f803 2b01 	strb.w	r2, [r3], #1
 800fd1a:	68a2      	ldr	r2, [r4, #8]
 800fd1c:	78d2      	ldrb	r2, [r2, #3]
 800fd1e:	f803 2b01 	strb.w	r2, [r3], #1
 800fd22:	68a2      	ldr	r2, [r4, #8]
 800fd24:	7892      	ldrb	r2, [r2, #2]
 800fd26:	f803 2b01 	strb.w	r2, [r3], #1
 800fd2a:	68a2      	ldr	r2, [r4, #8]
 800fd2c:	7852      	ldrb	r2, [r2, #1]
 800fd2e:	f803 2b01 	strb.w	r2, [r3], #1
 800fd32:	68a2      	ldr	r2, [r4, #8]
 800fd34:	7812      	ldrb	r2, [r2, #0]
 800fd36:	701a      	strb	r2, [r3, #0]
 800fd38:	e794      	b.n	800fc64 <ucdr_deserialize_endian_double+0xb4>
 800fd3a:	4639      	mov	r1, r7
 800fd3c:	4642      	mov	r2, r8
 800fd3e:	4628      	mov	r0, r5
 800fd40:	f007 fcc0 	bl	80176c4 <memcpy>
 800fd44:	4652      	mov	r2, sl
 800fd46:	68a1      	ldr	r1, [r4, #8]
 800fd48:	eb05 0008 	add.w	r0, r5, r8
 800fd4c:	f007 fcba 	bl	80176c4 <memcpy>
 800fd50:	e788      	b.n	800fc64 <ucdr_deserialize_endian_double+0xb4>
 800fd52:	bf00      	nop

0800fd54 <ucdr_check_buffer_available_for>:
 800fd54:	7d83      	ldrb	r3, [r0, #22]
 800fd56:	b93b      	cbnz	r3, 800fd68 <ucdr_check_buffer_available_for+0x14>
 800fd58:	6883      	ldr	r3, [r0, #8]
 800fd5a:	6840      	ldr	r0, [r0, #4]
 800fd5c:	4419      	add	r1, r3
 800fd5e:	4288      	cmp	r0, r1
 800fd60:	bf34      	ite	cc
 800fd62:	2000      	movcc	r0, #0
 800fd64:	2001      	movcs	r0, #1
 800fd66:	4770      	bx	lr
 800fd68:	2000      	movs	r0, #0
 800fd6a:	4770      	bx	lr

0800fd6c <ucdr_check_final_buffer_behavior>:
 800fd6c:	7d83      	ldrb	r3, [r0, #22]
 800fd6e:	b943      	cbnz	r3, 800fd82 <ucdr_check_final_buffer_behavior+0x16>
 800fd70:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800fd74:	4291      	cmp	r1, r2
 800fd76:	b510      	push	{r4, lr}
 800fd78:	4604      	mov	r4, r0
 800fd7a:	d205      	bcs.n	800fd88 <ucdr_check_final_buffer_behavior+0x1c>
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	4618      	mov	r0, r3
 800fd80:	bd10      	pop	{r4, pc}
 800fd82:	2300      	movs	r3, #0
 800fd84:	4618      	mov	r0, r3
 800fd86:	4770      	bx	lr
 800fd88:	6982      	ldr	r2, [r0, #24]
 800fd8a:	b13a      	cbz	r2, 800fd9c <ucdr_check_final_buffer_behavior+0x30>
 800fd8c:	69c1      	ldr	r1, [r0, #28]
 800fd8e:	4790      	blx	r2
 800fd90:	f080 0301 	eor.w	r3, r0, #1
 800fd94:	b2db      	uxtb	r3, r3
 800fd96:	75a0      	strb	r0, [r4, #22]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	bd10      	pop	{r4, pc}
 800fd9c:	2001      	movs	r0, #1
 800fd9e:	75a0      	strb	r0, [r4, #22]
 800fda0:	e7fa      	b.n	800fd98 <ucdr_check_final_buffer_behavior+0x2c>
 800fda2:	bf00      	nop

0800fda4 <ucdr_set_on_full_buffer_callback>:
 800fda4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop

0800fdac <ucdr_init_buffer_origin_offset_endian>:
 800fdac:	b430      	push	{r4, r5}
 800fdae:	2400      	movs	r4, #0
 800fdb0:	9d02      	ldr	r5, [sp, #8]
 800fdb2:	440a      	add	r2, r1
 800fdb4:	6001      	str	r1, [r0, #0]
 800fdb6:	60c3      	str	r3, [r0, #12]
 800fdb8:	4429      	add	r1, r5
 800fdba:	441d      	add	r5, r3
 800fdbc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fdc0:	e9c0 4406 	strd	r4, r4, [r0, #24]
 800fdc4:	6105      	str	r5, [r0, #16]
 800fdc6:	7544      	strb	r4, [r0, #21]
 800fdc8:	7584      	strb	r4, [r0, #22]
 800fdca:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800fdce:	bc30      	pop	{r4, r5}
 800fdd0:	7503      	strb	r3, [r0, #20]
 800fdd2:	4770      	bx	lr

0800fdd4 <ucdr_init_buffer_origin_offset>:
 800fdd4:	b530      	push	{r4, r5, lr}
 800fdd6:	2501      	movs	r5, #1
 800fdd8:	b083      	sub	sp, #12
 800fdda:	9c06      	ldr	r4, [sp, #24]
 800fddc:	e9cd 4500 	strd	r4, r5, [sp]
 800fde0:	f7ff ffe4 	bl	800fdac <ucdr_init_buffer_origin_offset_endian>
 800fde4:	b003      	add	sp, #12
 800fde6:	bd30      	pop	{r4, r5, pc}

0800fde8 <ucdr_init_buffer_origin>:
 800fde8:	b510      	push	{r4, lr}
 800fdea:	2400      	movs	r4, #0
 800fdec:	b082      	sub	sp, #8
 800fdee:	9400      	str	r4, [sp, #0]
 800fdf0:	f7ff fff0 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 800fdf4:	b002      	add	sp, #8
 800fdf6:	bd10      	pop	{r4, pc}

0800fdf8 <ucdr_init_buffer>:
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	f7ff bff5 	b.w	800fde8 <ucdr_init_buffer_origin>
 800fdfe:	bf00      	nop

0800fe00 <ucdr_alignment>:
 800fe00:	fbb0 f3f1 	udiv	r3, r0, r1
 800fe04:	fb03 0311 	mls	r3, r3, r1, r0
 800fe08:	1e48      	subs	r0, r1, #1
 800fe0a:	1ac9      	subs	r1, r1, r3
 800fe0c:	4008      	ands	r0, r1
 800fe0e:	4770      	bx	lr

0800fe10 <ucdr_buffer_alignment>:
 800fe10:	7d43      	ldrb	r3, [r0, #21]
 800fe12:	428b      	cmp	r3, r1
 800fe14:	d209      	bcs.n	800fe2a <ucdr_buffer_alignment+0x1a>
 800fe16:	6903      	ldr	r3, [r0, #16]
 800fe18:	1e4a      	subs	r2, r1, #1
 800fe1a:	fbb3 f0f1 	udiv	r0, r3, r1
 800fe1e:	fb01 3010 	mls	r0, r1, r0, r3
 800fe22:	1a09      	subs	r1, r1, r0
 800fe24:	ea01 0002 	and.w	r0, r1, r2
 800fe28:	4770      	bx	lr
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop

0800fe30 <ucdr_align_to>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	4604      	mov	r4, r0
 800fe34:	460d      	mov	r5, r1
 800fe36:	f7ff ffeb 	bl	800fe10 <ucdr_buffer_alignment>
 800fe3a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 800fe3e:	4402      	add	r2, r0
 800fe40:	4293      	cmp	r3, r2
 800fe42:	bf28      	it	cs
 800fe44:	4613      	movcs	r3, r2
 800fe46:	6922      	ldr	r2, [r4, #16]
 800fe48:	7565      	strb	r5, [r4, #21]
 800fe4a:	4410      	add	r0, r2
 800fe4c:	6120      	str	r0, [r4, #16]
 800fe4e:	60a3      	str	r3, [r4, #8]
 800fe50:	bd38      	pop	{r3, r4, r5, pc}
 800fe52:	bf00      	nop

0800fe54 <ucdr_buffer_length>:
 800fe54:	6882      	ldr	r2, [r0, #8]
 800fe56:	6800      	ldr	r0, [r0, #0]
 800fe58:	1a10      	subs	r0, r2, r0
 800fe5a:	4770      	bx	lr

0800fe5c <ucdr_buffer_remaining>:
 800fe5c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fe60:	1a10      	subs	r0, r2, r0
 800fe62:	4770      	bx	lr

0800fe64 <ucdr_check_final_buffer_behavior_array>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	7d83      	ldrb	r3, [r0, #22]
 800fe68:	b963      	cbnz	r3, 800fe84 <ucdr_check_final_buffer_behavior_array+0x20>
 800fe6a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	4604      	mov	r4, r0
 800fe72:	460d      	mov	r5, r1
 800fe74:	d308      	bcc.n	800fe88 <ucdr_check_final_buffer_behavior_array+0x24>
 800fe76:	b139      	cbz	r1, 800fe88 <ucdr_check_final_buffer_behavior_array+0x24>
 800fe78:	6983      	ldr	r3, [r0, #24]
 800fe7a:	b163      	cbz	r3, 800fe96 <ucdr_check_final_buffer_behavior_array+0x32>
 800fe7c:	69c1      	ldr	r1, [r0, #28]
 800fe7e:	4798      	blx	r3
 800fe80:	75a0      	strb	r0, [r4, #22]
 800fe82:	b108      	cbz	r0, 800fe88 <ucdr_check_final_buffer_behavior_array+0x24>
 800fe84:	2000      	movs	r0, #0
 800fe86:	bd38      	pop	{r3, r4, r5, pc}
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f7ff ffe7 	bl	800fe5c <ucdr_buffer_remaining>
 800fe8e:	42a8      	cmp	r0, r5
 800fe90:	bf28      	it	cs
 800fe92:	4628      	movcs	r0, r5
 800fe94:	bd38      	pop	{r3, r4, r5, pc}
 800fe96:	2301      	movs	r3, #1
 800fe98:	7583      	strb	r3, [r0, #22]
 800fe9a:	e7f3      	b.n	800fe84 <ucdr_check_final_buffer_behavior_array+0x20>

0800fe9c <ucdr_advance_buffer>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	4604      	mov	r4, r0
 800fea0:	460d      	mov	r5, r1
 800fea2:	f7ff ff57 	bl	800fd54 <ucdr_check_buffer_available_for>
 800fea6:	b178      	cbz	r0, 800fec8 <ucdr_advance_buffer+0x2c>
 800fea8:	68a3      	ldr	r3, [r4, #8]
 800feaa:	6921      	ldr	r1, [r4, #16]
 800feac:	442b      	add	r3, r5
 800feae:	60a3      	str	r3, [r4, #8]
 800feb0:	2301      	movs	r3, #1
 800feb2:	4429      	add	r1, r5
 800feb4:	7563      	strb	r3, [r4, #21]
 800feb6:	6121      	str	r1, [r4, #16]
 800feb8:	bd38      	pop	{r3, r4, r5, pc}
 800feba:	68a2      	ldr	r2, [r4, #8]
 800febc:	6923      	ldr	r3, [r4, #16]
 800febe:	4402      	add	r2, r0
 800fec0:	4403      	add	r3, r0
 800fec2:	1a2d      	subs	r5, r5, r0
 800fec4:	60a2      	str	r2, [r4, #8]
 800fec6:	6123      	str	r3, [r4, #16]
 800fec8:	2201      	movs	r2, #1
 800feca:	4629      	mov	r1, r5
 800fecc:	4620      	mov	r0, r4
 800fece:	f7ff ffc9 	bl	800fe64 <ucdr_check_final_buffer_behavior_array>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d1f1      	bne.n	800feba <ucdr_advance_buffer+0x1e>
 800fed6:	2301      	movs	r3, #1
 800fed8:	7563      	strb	r3, [r4, #21]
 800feda:	bd38      	pop	{r3, r4, r5, pc}

0800fedc <ucdr_serialize_sequence_char>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	4615      	mov	r5, r2
 800fee0:	460e      	mov	r6, r1
 800fee2:	7d01      	ldrb	r1, [r0, #20]
 800fee4:	4604      	mov	r4, r0
 800fee6:	f7fe fdf7 	bl	800ead8 <ucdr_serialize_endian_uint32_t>
 800feea:	b90d      	cbnz	r5, 800fef0 <ucdr_serialize_sequence_char+0x14>
 800feec:	2001      	movs	r0, #1
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	462b      	mov	r3, r5
 800fef2:	4632      	mov	r2, r6
 800fef4:	4620      	mov	r0, r4
 800fef6:	7d21      	ldrb	r1, [r4, #20]
 800fef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fefc:	f7fd bf32 	b.w	800dd64 <ucdr_serialize_endian_array_char>

0800ff00 <ucdr_deserialize_sequence_char>:
 800ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff04:	461d      	mov	r5, r3
 800ff06:	4616      	mov	r6, r2
 800ff08:	460f      	mov	r7, r1
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	7d01      	ldrb	r1, [r0, #20]
 800ff0e:	4604      	mov	r4, r0
 800ff10:	f7fe ff0a 	bl	800ed28 <ucdr_deserialize_endian_uint32_t>
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	429e      	cmp	r6, r3
 800ff18:	bf3c      	itt	cc
 800ff1a:	2201      	movcc	r2, #1
 800ff1c:	75a2      	strbcc	r2, [r4, #22]
 800ff1e:	b913      	cbnz	r3, 800ff26 <ucdr_deserialize_sequence_char+0x26>
 800ff20:	2001      	movs	r0, #1
 800ff22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff26:	463a      	mov	r2, r7
 800ff28:	4620      	mov	r0, r4
 800ff2a:	7d21      	ldrb	r1, [r4, #20]
 800ff2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff30:	f7fd bf4a 	b.w	800ddc8 <ucdr_deserialize_endian_array_char>

0800ff34 <ucdr_serialize_sequence_uint8_t>:
 800ff34:	b570      	push	{r4, r5, r6, lr}
 800ff36:	4615      	mov	r5, r2
 800ff38:	460e      	mov	r6, r1
 800ff3a:	7d01      	ldrb	r1, [r0, #20]
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	f7fe fdcb 	bl	800ead8 <ucdr_serialize_endian_uint32_t>
 800ff42:	b90d      	cbnz	r5, 800ff48 <ucdr_serialize_sequence_uint8_t+0x14>
 800ff44:	2001      	movs	r0, #1
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	462b      	mov	r3, r5
 800ff4a:	4632      	mov	r2, r6
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	7d21      	ldrb	r1, [r4, #20]
 800ff50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff54:	f7fd bf9c 	b.w	800de90 <ucdr_serialize_endian_array_uint8_t>

0800ff58 <ucdr_deserialize_sequence_uint8_t>:
 800ff58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5c:	461d      	mov	r5, r3
 800ff5e:	4616      	mov	r6, r2
 800ff60:	460f      	mov	r7, r1
 800ff62:	461a      	mov	r2, r3
 800ff64:	7d01      	ldrb	r1, [r0, #20]
 800ff66:	4604      	mov	r4, r0
 800ff68:	f7fe fede 	bl	800ed28 <ucdr_deserialize_endian_uint32_t>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	429e      	cmp	r6, r3
 800ff70:	bf3c      	itt	cc
 800ff72:	2201      	movcc	r2, #1
 800ff74:	75a2      	strbcc	r2, [r4, #22]
 800ff76:	b913      	cbnz	r3, 800ff7e <ucdr_deserialize_sequence_uint8_t+0x26>
 800ff78:	2001      	movs	r0, #1
 800ff7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7e:	463a      	mov	r2, r7
 800ff80:	4620      	mov	r0, r4
 800ff82:	7d21      	ldrb	r1, [r4, #20]
 800ff84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff88:	f7fd bfe6 	b.w	800df58 <ucdr_deserialize_endian_array_uint8_t>

0800ff8c <ucdr_serialize_sequence_uint16_t>:
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	4615      	mov	r5, r2
 800ff90:	460e      	mov	r6, r1
 800ff92:	7d01      	ldrb	r1, [r0, #20]
 800ff94:	4604      	mov	r4, r0
 800ff96:	f7fe fd9f 	bl	800ead8 <ucdr_serialize_endian_uint32_t>
 800ff9a:	b90d      	cbnz	r5, 800ffa0 <ucdr_serialize_sequence_uint16_t+0x14>
 800ff9c:	2001      	movs	r0, #1
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	462b      	mov	r3, r5
 800ffa2:	4632      	mov	r2, r6
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	7d21      	ldrb	r1, [r4, #20]
 800ffa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffac:	f7fe b806 	b.w	800dfbc <ucdr_serialize_endian_array_uint16_t>

0800ffb0 <ucdr_deserialize_sequence_uint16_t>:
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	461d      	mov	r5, r3
 800ffb6:	4616      	mov	r6, r2
 800ffb8:	460f      	mov	r7, r1
 800ffba:	461a      	mov	r2, r3
 800ffbc:	7d01      	ldrb	r1, [r0, #20]
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	f7fe feb2 	bl	800ed28 <ucdr_deserialize_endian_uint32_t>
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	429e      	cmp	r6, r3
 800ffc8:	bf3c      	itt	cc
 800ffca:	2201      	movcc	r2, #1
 800ffcc:	75a2      	strbcc	r2, [r4, #22]
 800ffce:	b913      	cbnz	r3, 800ffd6 <ucdr_deserialize_sequence_uint16_t+0x26>
 800ffd0:	2001      	movs	r0, #1
 800ffd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffd6:	463a      	mov	r2, r7
 800ffd8:	4620      	mov	r0, r4
 800ffda:	7d21      	ldrb	r1, [r4, #20]
 800ffdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe0:	f7fe b842 	b.w	800e068 <ucdr_deserialize_endian_array_uint16_t>

0800ffe4 <ucdr_serialize_sequence_float>:
 800ffe4:	b570      	push	{r4, r5, r6, lr}
 800ffe6:	4615      	mov	r5, r2
 800ffe8:	460e      	mov	r6, r1
 800ffea:	7d01      	ldrb	r1, [r0, #20]
 800ffec:	4604      	mov	r4, r0
 800ffee:	f7fe fd73 	bl	800ead8 <ucdr_serialize_endian_uint32_t>
 800fff2:	b90d      	cbnz	r5, 800fff8 <ucdr_serialize_sequence_float+0x14>
 800fff4:	2001      	movs	r0, #1
 800fff6:	bd70      	pop	{r4, r5, r6, pc}
 800fff8:	462b      	mov	r3, r5
 800fffa:	4632      	mov	r2, r6
 800fffc:	4620      	mov	r0, r4
 800fffe:	7d21      	ldrb	r1, [r4, #20]
 8010000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010004:	f7fe b886 	b.w	800e114 <ucdr_serialize_endian_array_float>

08010008 <ucdr_deserialize_sequence_float>:
 8010008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000c:	461d      	mov	r5, r3
 801000e:	4616      	mov	r6, r2
 8010010:	460f      	mov	r7, r1
 8010012:	461a      	mov	r2, r3
 8010014:	7d01      	ldrb	r1, [r0, #20]
 8010016:	4604      	mov	r4, r0
 8010018:	f7fe fe86 	bl	800ed28 <ucdr_deserialize_endian_uint32_t>
 801001c:	682b      	ldr	r3, [r5, #0]
 801001e:	429e      	cmp	r6, r3
 8010020:	bf3c      	itt	cc
 8010022:	2201      	movcc	r2, #1
 8010024:	75a2      	strbcc	r2, [r4, #22]
 8010026:	b913      	cbnz	r3, 801002e <ucdr_deserialize_sequence_float+0x26>
 8010028:	2001      	movs	r0, #1
 801002a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002e:	463a      	mov	r2, r7
 8010030:	4620      	mov	r0, r4
 8010032:	7d21      	ldrb	r1, [r4, #20]
 8010034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010038:	f7fe b8c2 	b.w	800e1c0 <ucdr_deserialize_endian_array_float>

0801003c <ucdr_serialize_sequence_double>:
 801003c:	b570      	push	{r4, r5, r6, lr}
 801003e:	4615      	mov	r5, r2
 8010040:	460e      	mov	r6, r1
 8010042:	7d01      	ldrb	r1, [r0, #20]
 8010044:	4604      	mov	r4, r0
 8010046:	f7fe fd47 	bl	800ead8 <ucdr_serialize_endian_uint32_t>
 801004a:	b90d      	cbnz	r5, 8010050 <ucdr_serialize_sequence_double+0x14>
 801004c:	2001      	movs	r0, #1
 801004e:	bd70      	pop	{r4, r5, r6, pc}
 8010050:	462b      	mov	r3, r5
 8010052:	4632      	mov	r2, r6
 8010054:	4620      	mov	r0, r4
 8010056:	7d21      	ldrb	r1, [r4, #20]
 8010058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801005c:	f7fe b95c 	b.w	800e318 <ucdr_serialize_endian_array_double>

08010060 <ucdr_deserialize_sequence_double>:
 8010060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010064:	461d      	mov	r5, r3
 8010066:	4616      	mov	r6, r2
 8010068:	460f      	mov	r7, r1
 801006a:	461a      	mov	r2, r3
 801006c:	7d01      	ldrb	r1, [r0, #20]
 801006e:	4604      	mov	r4, r0
 8010070:	f7fe fe5a 	bl	800ed28 <ucdr_deserialize_endian_uint32_t>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	429e      	cmp	r6, r3
 8010078:	bf3c      	itt	cc
 801007a:	2201      	movcc	r2, #1
 801007c:	75a2      	strbcc	r2, [r4, #22]
 801007e:	b913      	cbnz	r3, 8010086 <ucdr_deserialize_sequence_double+0x26>
 8010080:	2001      	movs	r0, #1
 8010082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010086:	463a      	mov	r2, r7
 8010088:	4620      	mov	r0, r4
 801008a:	7d21      	ldrb	r1, [r4, #20]
 801008c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010090:	f7fe b9ec 	b.w	800e46c <ucdr_deserialize_endian_array_double>

08010094 <uxr_buffer_delete_entity>:
 8010094:	b510      	push	{r4, lr}
 8010096:	2303      	movs	r3, #3
 8010098:	2400      	movs	r4, #0
 801009a:	b08e      	sub	sp, #56	; 0x38
 801009c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	2204      	movs	r2, #4
 80100a4:	ab06      	add	r3, sp, #24
 80100a6:	4604      	mov	r4, r0
 80100a8:	9103      	str	r1, [sp, #12]
 80100aa:	f001 fa15 	bl	80114d8 <uxr_prepare_stream_to_write_submessage>
 80100ae:	b918      	cbnz	r0, 80100b8 <uxr_buffer_delete_entity+0x24>
 80100b0:	4604      	mov	r4, r0
 80100b2:	4620      	mov	r0, r4
 80100b4:	b00e      	add	sp, #56	; 0x38
 80100b6:	bd10      	pop	{r4, pc}
 80100b8:	9902      	ldr	r1, [sp, #8]
 80100ba:	aa05      	add	r2, sp, #20
 80100bc:	4620      	mov	r0, r4
 80100be:	f001 fb3d 	bl	801173c <uxr_init_base_object_request>
 80100c2:	4604      	mov	r4, r0
 80100c4:	a905      	add	r1, sp, #20
 80100c6:	a806      	add	r0, sp, #24
 80100c8:	f003 f888 	bl	80131dc <uxr_serialize_DELETE_Payload>
 80100cc:	4620      	mov	r0, r4
 80100ce:	b00e      	add	sp, #56	; 0x38
 80100d0:	bd10      	pop	{r4, pc}
 80100d2:	bf00      	nop

080100d4 <uxr_common_create_entity>:
 80100d4:	b530      	push	{r4, r5, lr}
 80100d6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80100da:	b08d      	sub	sp, #52	; 0x34
 80100dc:	2d01      	cmp	r5, #1
 80100de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80100e2:	bf18      	it	ne
 80100e4:	2200      	movne	r2, #0
 80100e6:	4604      	mov	r4, r0
 80100e8:	f04f 0101 	mov.w	r1, #1
 80100ec:	bf08      	it	eq
 80100ee:	f003 0201 	andeq.w	r2, r3, #1
 80100f2:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80100f6:	330e      	adds	r3, #14
 80100f8:	441a      	add	r2, r3
 80100fa:	e9cd 1000 	strd	r1, r0, [sp]
 80100fe:	b292      	uxth	r2, r2
 8010100:	4620      	mov	r0, r4
 8010102:	9903      	ldr	r1, [sp, #12]
 8010104:	ab04      	add	r3, sp, #16
 8010106:	f001 f9e7 	bl	80114d8 <uxr_prepare_stream_to_write_submessage>
 801010a:	b918      	cbnz	r0, 8010114 <uxr_common_create_entity+0x40>
 801010c:	4604      	mov	r4, r0
 801010e:	4620      	mov	r0, r4
 8010110:	b00d      	add	sp, #52	; 0x34
 8010112:	bd30      	pop	{r4, r5, pc}
 8010114:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010116:	9902      	ldr	r1, [sp, #8]
 8010118:	4620      	mov	r0, r4
 801011a:	f001 fb0f 	bl	801173c <uxr_init_base_object_request>
 801011e:	4604      	mov	r4, r0
 8010120:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010122:	a804      	add	r0, sp, #16
 8010124:	f002 ffc2 	bl	80130ac <uxr_serialize_CREATE_Payload>
 8010128:	4620      	mov	r0, r4
 801012a:	b00d      	add	sp, #52	; 0x34
 801012c:	bd30      	pop	{r4, r5, pc}
 801012e:	bf00      	nop

08010130 <uxr_buffer_create_participant_bin>:
 8010130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010134:	f04f 0c00 	mov.w	ip, #0
 8010138:	f04f 0e03 	mov.w	lr, #3
 801013c:	2701      	movs	r7, #1
 801013e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010142:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8010144:	ac11      	add	r4, sp, #68	; 0x44
 8010146:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 801014a:	f884 e008 	strb.w	lr, [r4, #8]
 801014e:	7127      	strb	r7, [r4, #4]
 8010150:	4605      	mov	r5, r0
 8010152:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010156:	f89d 8274 	ldrb.w	r8, [sp, #628]	; 0x274
 801015a:	f88d c014 	strb.w	ip, [sp, #20]
 801015e:	b1de      	cbz	r6, 8010198 <uxr_buffer_create_participant_bin+0x68>
 8010160:	f88d 701c 	strb.w	r7, [sp, #28]
 8010164:	9608      	str	r6, [sp, #32]
 8010166:	f44f 7200 	mov.w	r2, #512	; 0x200
 801016a:	a809      	add	r0, sp, #36	; 0x24
 801016c:	a915      	add	r1, sp, #84	; 0x54
 801016e:	f7ff fe43 	bl	800fdf8 <ucdr_init_buffer>
 8010172:	a905      	add	r1, sp, #20
 8010174:	a809      	add	r0, sp, #36	; 0x24
 8010176:	f002 fc2b 	bl	80129d0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801017a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801017e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010180:	9401      	str	r4, [sp, #4]
 8010182:	f8cd 8000 	str.w	r8, [sp]
 8010186:	4628      	mov	r0, r5
 8010188:	b2b3      	uxth	r3, r6
 801018a:	60e6      	str	r6, [r4, #12]
 801018c:	f7ff ffa2 	bl	80100d4 <uxr_common_create_entity>
 8010190:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8010194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010198:	f88d 601c 	strb.w	r6, [sp, #28]
 801019c:	e7e3      	b.n	8010166 <uxr_buffer_create_participant_bin+0x36>
 801019e:	bf00      	nop

080101a0 <uxr_buffer_create_topic_bin>:
 80101a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101a2:	2602      	movs	r6, #2
 80101a4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80101a8:	4605      	mov	r5, r0
 80101aa:	9105      	str	r1, [sp, #20]
 80101ac:	4618      	mov	r0, r3
 80101ae:	a997      	add	r1, sp, #604	; 0x25c
 80101b0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80101b4:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 80101b8:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 80101bc:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 80101be:	f000 fa61 	bl	8010684 <uxr_object_id_to_raw>
 80101c2:	2203      	movs	r2, #3
 80101c4:	2101      	movs	r1, #1
 80101c6:	2300      	movs	r3, #0
 80101c8:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
 80101cc:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 80101ce:	a80b      	add	r0, sp, #44	; 0x2c
 80101d0:	9206      	str	r2, [sp, #24]
 80101d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80101d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101da:	a917      	add	r1, sp, #92	; 0x5c
 80101dc:	f88d 301c 	strb.w	r3, [sp, #28]
 80101e0:	960a      	str	r6, [sp, #40]	; 0x28
 80101e2:	f7ff fe09 	bl	800fdf8 <ucdr_init_buffer>
 80101e6:	a906      	add	r1, sp, #24
 80101e8:	a80b      	add	r0, sp, #44	; 0x2c
 80101ea:	f002 fc13 	bl	8012a14 <uxr_serialize_OBJK_Topic_Binary>
 80101ee:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80101f2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80101f4:	ac13      	add	r4, sp, #76	; 0x4c
 80101f6:	e9cd 7400 	strd	r7, r4, [sp]
 80101fa:	4628      	mov	r0, r5
 80101fc:	b2b3      	uxth	r3, r6
 80101fe:	60e6      	str	r6, [r4, #12]
 8010200:	f7ff ff68 	bl	80100d4 <uxr_common_create_entity>
 8010204:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8010208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020a:	bf00      	nop

0801020c <uxr_buffer_create_publisher_bin>:
 801020c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801020e:	2603      	movs	r6, #3
 8010210:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010214:	4605      	mov	r5, r0
 8010216:	9105      	str	r1, [sp, #20]
 8010218:	4618      	mov	r0, r3
 801021a:	a992      	add	r1, sp, #584	; 0x248
 801021c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010220:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010224:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8010228:	f000 fa2c 	bl	8010684 <uxr_object_id_to_raw>
 801022c:	2300      	movs	r3, #0
 801022e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010232:	a806      	add	r0, sp, #24
 8010234:	a912      	add	r1, sp, #72	; 0x48
 8010236:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801023a:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 801023e:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010242:	f7ff fdd9 	bl	800fdf8 <ucdr_init_buffer>
 8010246:	a993      	add	r1, sp, #588	; 0x24c
 8010248:	a806      	add	r0, sp, #24
 801024a:	f002 fc97 	bl	8012b7c <uxr_serialize_OBJK_Publisher_Binary>
 801024e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010252:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010254:	ac0e      	add	r4, sp, #56	; 0x38
 8010256:	9700      	str	r7, [sp, #0]
 8010258:	9401      	str	r4, [sp, #4]
 801025a:	4628      	mov	r0, r5
 801025c:	b2b3      	uxth	r3, r6
 801025e:	60e6      	str	r6, [r4, #12]
 8010260:	f7ff ff38 	bl	80100d4 <uxr_common_create_entity>
 8010264:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8010268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801026a:	bf00      	nop

0801026c <uxr_buffer_create_subscriber_bin>:
 801026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801026e:	2604      	movs	r6, #4
 8010270:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010274:	4605      	mov	r5, r0
 8010276:	9105      	str	r1, [sp, #20]
 8010278:	4618      	mov	r0, r3
 801027a:	a992      	add	r1, sp, #584	; 0x248
 801027c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010280:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010284:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8010288:	f000 f9fc 	bl	8010684 <uxr_object_id_to_raw>
 801028c:	2103      	movs	r1, #3
 801028e:	2300      	movs	r3, #0
 8010290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010294:	a806      	add	r0, sp, #24
 8010296:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 801029a:	a912      	add	r1, sp, #72	; 0x48
 801029c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80102a0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80102a4:	f7ff fda8 	bl	800fdf8 <ucdr_init_buffer>
 80102a8:	a993      	add	r1, sp, #588	; 0x24c
 80102aa:	a806      	add	r0, sp, #24
 80102ac:	f002 fd16 	bl	8012cdc <uxr_serialize_OBJK_Subscriber_Binary>
 80102b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80102b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80102b6:	ac0e      	add	r4, sp, #56	; 0x38
 80102b8:	9700      	str	r7, [sp, #0]
 80102ba:	9401      	str	r4, [sp, #4]
 80102bc:	4628      	mov	r0, r5
 80102be:	b2b3      	uxth	r3, r6
 80102c0:	60e6      	str	r6, [r4, #12]
 80102c2:	f7ff ff07 	bl	80100d4 <uxr_common_create_entity>
 80102c6:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80102ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102cc <uxr_buffer_create_datawriter_bin>:
 80102cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d0:	2705      	movs	r7, #5
 80102d2:	2603      	movs	r6, #3
 80102d4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80102d8:	f8bd 82a8 	ldrh.w	r8, [sp, #680]	; 0x2a8
 80102dc:	9105      	str	r1, [sp, #20]
 80102de:	4605      	mov	r5, r0
 80102e0:	a9a1      	add	r1, sp, #644	; 0x284
 80102e2:	4618      	mov	r0, r3
 80102e4:	f88d 7078 	strb.w	r7, [sp, #120]	; 0x78
 80102e8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80102ec:	f89d 72ac 	ldrb.w	r7, [sp, #684]	; 0x2ac
 80102f0:	f000 f9c8 	bl	8010684 <uxr_object_id_to_raw>
 80102f4:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80102f6:	a90e      	add	r1, sp, #56	; 0x38
 80102f8:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
 80102fc:	f000 f9c2 	bl	8010684 <uxr_object_id_to_raw>
 8010300:	f1b8 0000 	subs.w	r0, r8, #0
 8010304:	f04f 0300 	mov.w	r3, #0
 8010308:	bf18      	it	ne
 801030a:	2001      	movne	r0, #1
 801030c:	2201      	movs	r2, #1
 801030e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8010312:	ac1d      	add	r4, sp, #116	; 0x74
 8010314:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8010318:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 801031c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8010320:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010324:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010328:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801032c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010330:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010334:	bb89      	cbnz	r1, 801039a <uxr_buffer_create_datawriter_bin+0xce>
 8010336:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801033a:	f04f 0823 	mov.w	r8, #35	; 0x23
 801033e:	f04f 0e13 	mov.w	lr, #19
 8010342:	f04f 0c0b 	mov.w	ip, #11
 8010346:	2221      	movs	r2, #33	; 0x21
 8010348:	2111      	movs	r1, #17
 801034a:	2009      	movs	r0, #9
 801034c:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010350:	b923      	cbnz	r3, 801035c <uxr_buffer_create_datawriter_bin+0x90>
 8010352:	4642      	mov	r2, r8
 8010354:	4671      	mov	r1, lr
 8010356:	4660      	mov	r0, ip
 8010358:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 801035c:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010360:	2b01      	cmp	r3, #1
 8010362:	d025      	beq.n	80103b0 <uxr_buffer_create_datawriter_bin+0xe4>
 8010364:	2b03      	cmp	r3, #3
 8010366:	d029      	beq.n	80103bc <uxr_buffer_create_datawriter_bin+0xf0>
 8010368:	b32b      	cbz	r3, 80103b6 <uxr_buffer_create_datawriter_bin+0xea>
 801036a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801036e:	a806      	add	r0, sp, #24
 8010370:	a921      	add	r1, sp, #132	; 0x84
 8010372:	f7ff fd41 	bl	800fdf8 <ucdr_init_buffer>
 8010376:	a90e      	add	r1, sp, #56	; 0x38
 8010378:	a806      	add	r0, sp, #24
 801037a:	f002 fd51 	bl	8012e20 <uxr_serialize_OBJK_DataWriter_Binary>
 801037e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010382:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010384:	9401      	str	r4, [sp, #4]
 8010386:	9700      	str	r7, [sp, #0]
 8010388:	4628      	mov	r0, r5
 801038a:	b2b3      	uxth	r3, r6
 801038c:	60e6      	str	r6, [r4, #12]
 801038e:	f7ff fea1 	bl	80100d4 <uxr_common_create_entity>
 8010392:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801039a:	f04f 0822 	mov.w	r8, #34	; 0x22
 801039e:	f04f 0e12 	mov.w	lr, #18
 80103a2:	f04f 0c0a 	mov.w	ip, #10
 80103a6:	2220      	movs	r2, #32
 80103a8:	2110      	movs	r1, #16
 80103aa:	2008      	movs	r0, #8
 80103ac:	2602      	movs	r6, #2
 80103ae:	e7cd      	b.n	801034c <uxr_buffer_create_datawriter_bin+0x80>
 80103b0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80103b4:	e7d9      	b.n	801036a <uxr_buffer_create_datawriter_bin+0x9e>
 80103b6:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80103ba:	e7d6      	b.n	801036a <uxr_buffer_create_datawriter_bin+0x9e>
 80103bc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80103c0:	e7d3      	b.n	801036a <uxr_buffer_create_datawriter_bin+0x9e>
 80103c2:	bf00      	nop

080103c4 <uxr_buffer_create_datareader_bin>:
 80103c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c8:	2706      	movs	r7, #6
 80103ca:	2603      	movs	r6, #3
 80103cc:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80103d0:	f8bd 82b0 	ldrh.w	r8, [sp, #688]	; 0x2b0
 80103d4:	9105      	str	r1, [sp, #20]
 80103d6:	4605      	mov	r5, r0
 80103d8:	a9a3      	add	r1, sp, #652	; 0x28c
 80103da:	4618      	mov	r0, r3
 80103dc:	f88d 7080 	strb.w	r7, [sp, #128]	; 0x80
 80103e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80103e4:	f89d 72b4 	ldrb.w	r7, [sp, #692]	; 0x2b4
 80103e8:	f000 f94c 	bl	8010684 <uxr_object_id_to_raw>
 80103ec:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 80103ee:	a90e      	add	r1, sp, #56	; 0x38
 80103f0:	f88d 6084 	strb.w	r6, [sp, #132]	; 0x84
 80103f4:	f000 f946 	bl	8010684 <uxr_object_id_to_raw>
 80103f8:	f1b8 0000 	subs.w	r0, r8, #0
 80103fc:	f04f 0300 	mov.w	r3, #0
 8010400:	bf18      	it	ne
 8010402:	2001      	movne	r0, #1
 8010404:	2201      	movs	r2, #1
 8010406:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 801040a:	ac1f      	add	r4, sp, #124	; 0x7c
 801040c:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8010410:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
 8010414:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8010418:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 801041c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010420:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010424:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010428:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801042c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010430:	bb89      	cbnz	r1, 8010496 <uxr_buffer_create_datareader_bin+0xd2>
 8010432:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010436:	f04f 0823 	mov.w	r8, #35	; 0x23
 801043a:	f04f 0e13 	mov.w	lr, #19
 801043e:	f04f 0c0b 	mov.w	ip, #11
 8010442:	2221      	movs	r2, #33	; 0x21
 8010444:	2111      	movs	r1, #17
 8010446:	2009      	movs	r0, #9
 8010448:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 801044c:	b923      	cbnz	r3, 8010458 <uxr_buffer_create_datareader_bin+0x94>
 801044e:	4642      	mov	r2, r8
 8010450:	4671      	mov	r1, lr
 8010452:	4660      	mov	r0, ip
 8010454:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 8010458:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 801045c:	2b01      	cmp	r3, #1
 801045e:	d025      	beq.n	80104ac <uxr_buffer_create_datareader_bin+0xe8>
 8010460:	2b03      	cmp	r3, #3
 8010462:	d029      	beq.n	80104b8 <uxr_buffer_create_datareader_bin+0xf4>
 8010464:	b32b      	cbz	r3, 80104b2 <uxr_buffer_create_datareader_bin+0xee>
 8010466:	f44f 7200 	mov.w	r2, #512	; 0x200
 801046a:	a806      	add	r0, sp, #24
 801046c:	a923      	add	r1, sp, #140	; 0x8c
 801046e:	f7ff fcc3 	bl	800fdf8 <ucdr_init_buffer>
 8010472:	a90e      	add	r1, sp, #56	; 0x38
 8010474:	a806      	add	r0, sp, #24
 8010476:	f002 fc97 	bl	8012da8 <uxr_serialize_OBJK_DataReader_Binary>
 801047a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801047e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010480:	9401      	str	r4, [sp, #4]
 8010482:	9700      	str	r7, [sp, #0]
 8010484:	4628      	mov	r0, r5
 8010486:	b2b3      	uxth	r3, r6
 8010488:	60e6      	str	r6, [r4, #12]
 801048a:	f7ff fe23 	bl	80100d4 <uxr_common_create_entity>
 801048e:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010496:	f04f 0822 	mov.w	r8, #34	; 0x22
 801049a:	f04f 0e12 	mov.w	lr, #18
 801049e:	f04f 0c0a 	mov.w	ip, #10
 80104a2:	2220      	movs	r2, #32
 80104a4:	2110      	movs	r1, #16
 80104a6:	2008      	movs	r0, #8
 80104a8:	2602      	movs	r6, #2
 80104aa:	e7cd      	b.n	8010448 <uxr_buffer_create_datareader_bin+0x84>
 80104ac:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 80104b0:	e7d9      	b.n	8010466 <uxr_buffer_create_datareader_bin+0xa2>
 80104b2:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80104b6:	e7d6      	b.n	8010466 <uxr_buffer_create_datareader_bin+0xa2>
 80104b8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80104bc:	e7d3      	b.n	8010466 <uxr_buffer_create_datareader_bin+0xa2>
 80104be:	bf00      	nop

080104c0 <get_custom_error>:
 80104c0:	4b01      	ldr	r3, [pc, #4]	; (80104c8 <get_custom_error+0x8>)
 80104c2:	7818      	ldrb	r0, [r3, #0]
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	2000677c 	.word	0x2000677c

080104cc <recv_custom_msg>:
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d0:	2600      	movs	r6, #0
 80104d2:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80104d6:	b089      	sub	sp, #36	; 0x24
 80104d8:	4604      	mov	r4, r0
 80104da:	468a      	mov	sl, r1
 80104dc:	4693      	mov	fp, r2
 80104de:	9305      	str	r3, [sp, #20]
 80104e0:	f88d 601e 	strb.w	r6, [sp, #30]
 80104e4:	b325      	cbz	r5, 8010530 <recv_custom_msg+0x64>
 80104e6:	f44f 7900 	mov.w	r9, #512	; 0x200
 80104ea:	f200 2802 	addw	r8, r0, #514	; 0x202
 80104ee:	f10d 071f 	add.w	r7, sp, #31
 80104f2:	ae05      	add	r6, sp, #20
 80104f4:	f10d 051e 	add.w	r5, sp, #30
 80104f8:	e002      	b.n	8010500 <recv_custom_msg+0x34>
 80104fa:	9b05      	ldr	r3, [sp, #20]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	dd0f      	ble.n	8010520 <recv_custom_msg+0x54>
 8010500:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010504:	e9cd 9500 	strd	r9, r5, [sp]
 8010508:	4623      	mov	r3, r4
 801050a:	4622      	mov	r2, r4
 801050c:	4640      	mov	r0, r8
 801050e:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8010512:	f001 fb3b 	bl	8011b8c <uxr_read_framed_msg>
 8010516:	2800      	cmp	r0, #0
 8010518:	d0ef      	beq.n	80104fa <recv_custom_msg+0x2e>
 801051a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801051e:	b1b3      	cbz	r3, 801054e <recv_custom_msg+0x82>
 8010520:	2000      	movs	r0, #0
 8010522:	4b0f      	ldr	r3, [pc, #60]	; (8010560 <recv_custom_msg+0x94>)
 8010524:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	b009      	add	sp, #36	; 0x24
 801052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010530:	f10d 021f 	add.w	r2, sp, #31
 8010534:	9200      	str	r2, [sp, #0]
 8010536:	4601      	mov	r1, r0
 8010538:	f44f 7200 	mov.w	r2, #512	; 0x200
 801053c:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8010540:	47a8      	blx	r5
 8010542:	2800      	cmp	r0, #0
 8010544:	d0ec      	beq.n	8010520 <recv_custom_msg+0x54>
 8010546:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1e8      	bne.n	8010520 <recv_custom_msg+0x54>
 801054e:	f8cb 0000 	str.w	r0, [fp]
 8010552:	2001      	movs	r0, #1
 8010554:	f8ca 4000 	str.w	r4, [sl]
 8010558:	b009      	add	sp, #36	; 0x24
 801055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055e:	bf00      	nop
 8010560:	2000677c 	.word	0x2000677c

08010564 <send_custom_msg>:
 8010564:	b570      	push	{r4, r5, r6, lr}
 8010566:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801056a:	4616      	mov	r6, r2
 801056c:	b086      	sub	sp, #24
 801056e:	b975      	cbnz	r5, 801058e <send_custom_msg+0x2a>
 8010570:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8010574:	f10d 0317 	add.w	r3, sp, #23
 8010578:	47a0      	blx	r4
 801057a:	b108      	cbz	r0, 8010580 <send_custom_msg+0x1c>
 801057c:	42b0      	cmp	r0, r6
 801057e:	d015      	beq.n	80105ac <send_custom_msg+0x48>
 8010580:	2000      	movs	r0, #0
 8010582:	4b0c      	ldr	r3, [pc, #48]	; (80105b4 <send_custom_msg+0x50>)
 8010584:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	b006      	add	sp, #24
 801058c:	bd70      	pop	{r4, r5, r6, pc}
 801058e:	460b      	mov	r3, r1
 8010590:	2100      	movs	r1, #0
 8010592:	e9cd 6100 	strd	r6, r1, [sp]
 8010596:	f10d 0217 	add.w	r2, sp, #23
 801059a:	9202      	str	r2, [sp, #8]
 801059c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80105a0:	4602      	mov	r2, r0
 80105a2:	f200 2002 	addw	r0, r0, #514	; 0x202
 80105a6:	f001 f8ff 	bl	80117a8 <uxr_write_framed_msg>
 80105aa:	e7e6      	b.n	801057a <send_custom_msg+0x16>
 80105ac:	2001      	movs	r0, #1
 80105ae:	b006      	add	sp, #24
 80105b0:	bd70      	pop	{r4, r5, r6, pc}
 80105b2:	bf00      	nop
 80105b4:	2000677c 	.word	0x2000677c

080105b8 <uxr_set_custom_transport_callbacks>:
 80105b8:	b430      	push	{r4, r5}
 80105ba:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80105be:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80105c2:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80105c6:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80105ca:	bc30      	pop	{r4, r5}
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop

080105d0 <uxr_init_custom_transport>:
 80105d0:	b538      	push	{r3, r4, r5, lr}
 80105d2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80105d6:	b303      	cbz	r3, 801061a <uxr_init_custom_transport+0x4a>
 80105d8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80105dc:	4604      	mov	r4, r0
 80105de:	b1e2      	cbz	r2, 801061a <uxr_init_custom_transport+0x4a>
 80105e0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80105e4:	b1ca      	cbz	r2, 801061a <uxr_init_custom_transport+0x4a>
 80105e6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80105ea:	b1b2      	cbz	r2, 801061a <uxr_init_custom_transport+0x4a>
 80105ec:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80105f0:	4798      	blx	r3
 80105f2:	4605      	mov	r5, r0
 80105f4:	b188      	cbz	r0, 801061a <uxr_init_custom_transport+0x4a>
 80105f6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80105fa:	b98b      	cbnz	r3, 8010620 <uxr_init_custom_transport+0x50>
 80105fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010600:	490a      	ldr	r1, [pc, #40]	; (801062c <uxr_init_custom_transport+0x5c>)
 8010602:	4a0b      	ldr	r2, [pc, #44]	; (8010630 <uxr_init_custom_transport+0x60>)
 8010604:	4b0b      	ldr	r3, [pc, #44]	; (8010634 <uxr_init_custom_transport+0x64>)
 8010606:	f8a4 0288 	strh.w	r0, [r4, #648]	; 0x288
 801060a:	e9c4 129f 	strd	r1, r2, [r4, #636]	; 0x27c
 801060e:	4628      	mov	r0, r5
 8010610:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8010614:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 8010618:	bd38      	pop	{r3, r4, r5, pc}
 801061a:	2500      	movs	r5, #0
 801061c:	4628      	mov	r0, r5
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	2100      	movs	r1, #0
 8010622:	f204 2002 	addw	r0, r4, #514	; 0x202
 8010626:	f001 f8b9 	bl	801179c <uxr_init_framing_io>
 801062a:	e7e7      	b.n	80105fc <uxr_init_custom_transport+0x2c>
 801062c:	08010565 	.word	0x08010565
 8010630:	080104cd 	.word	0x080104cd
 8010634:	080104c1 	.word	0x080104c1

08010638 <uxr_close_custom_transport>:
 8010638:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801063c:	4718      	bx	r3
 801063e:	bf00      	nop

08010640 <uxr_object_id>:
 8010640:	2300      	movs	r3, #0
 8010642:	b082      	sub	sp, #8
 8010644:	f88d 1006 	strb.w	r1, [sp, #6]
 8010648:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801064c:	f360 030f 	bfi	r3, r0, #0, #16
 8010650:	f362 431f 	bfi	r3, r2, #16, #16
 8010654:	4618      	mov	r0, r3
 8010656:	b002      	add	sp, #8
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop

0801065c <uxr_object_id_from_raw>:
 801065c:	4602      	mov	r2, r0
 801065e:	2000      	movs	r0, #0
 8010660:	7853      	ldrb	r3, [r2, #1]
 8010662:	b082      	sub	sp, #8
 8010664:	7812      	ldrb	r2, [r2, #0]
 8010666:	f003 010f 	and.w	r1, r3, #15
 801066a:	f88d 1006 	strb.w	r1, [sp, #6]
 801066e:	091b      	lsrs	r3, r3, #4
 8010670:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010674:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010678:	f363 000f 	bfi	r0, r3, #0, #16
 801067c:	f362 401f 	bfi	r0, r2, #16, #16
 8010680:	b002      	add	sp, #8
 8010682:	4770      	bx	lr

08010684 <uxr_object_id_to_raw>:
 8010684:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010688:	b082      	sub	sp, #8
 801068a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801068e:	f3c0 100b 	ubfx	r0, r0, #4, #12
 8010692:	7008      	strb	r0, [r1, #0]
 8010694:	704b      	strb	r3, [r1, #1]
 8010696:	b002      	add	sp, #8
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop

0801069c <uxr_buffer_request_data>:
 801069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801069e:	b095      	sub	sp, #84	; 0x54
 80106a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80106a2:	2600      	movs	r6, #0
 80106a4:	2d00      	cmp	r5, #0
 80106a6:	bf14      	ite	ne
 80106a8:	2701      	movne	r7, #1
 80106aa:	2700      	moveq	r7, #0
 80106ac:	4604      	mov	r4, r0
 80106ae:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80106b2:	9303      	str	r3, [sp, #12]
 80106b4:	f88d 301c 	strb.w	r3, [sp, #28]
 80106b8:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80106bc:	f88d 601d 	strb.w	r6, [sp, #29]
 80106c0:	f88d 601e 	strb.w	r6, [sp, #30]
 80106c4:	d021      	beq.n	801070a <uxr_buffer_request_data+0x6e>
 80106c6:	686a      	ldr	r2, [r5, #4]
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 80106ce:	2210      	movs	r2, #16
 80106d0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80106d4:	2308      	movs	r3, #8
 80106d6:	2100      	movs	r1, #0
 80106d8:	4620      	mov	r0, r4
 80106da:	e9cd 3100 	strd	r3, r1, [sp]
 80106de:	9905      	ldr	r1, [sp, #20]
 80106e0:	ab0c      	add	r3, sp, #48	; 0x30
 80106e2:	f000 fef9 	bl	80114d8 <uxr_prepare_stream_to_write_submessage>
 80106e6:	b918      	cbnz	r0, 80106f0 <uxr_buffer_request_data+0x54>
 80106e8:	4604      	mov	r4, r0
 80106ea:	4620      	mov	r0, r4
 80106ec:	b015      	add	sp, #84	; 0x54
 80106ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106f0:	9904      	ldr	r1, [sp, #16]
 80106f2:	aa06      	add	r2, sp, #24
 80106f4:	4620      	mov	r0, r4
 80106f6:	f001 f821 	bl	801173c <uxr_init_base_object_request>
 80106fa:	4604      	mov	r4, r0
 80106fc:	a906      	add	r1, sp, #24
 80106fe:	a80c      	add	r0, sp, #48	; 0x30
 8010700:	f002 fdca 	bl	8013298 <uxr_serialize_READ_DATA_Payload>
 8010704:	4620      	mov	r0, r4
 8010706:	b015      	add	sp, #84	; 0x54
 8010708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801070a:	2208      	movs	r2, #8
 801070c:	e7e2      	b.n	80106d4 <uxr_buffer_request_data+0x38>
 801070e:	bf00      	nop

08010710 <uxr_buffer_cancel_data>:
 8010710:	b530      	push	{r4, r5, lr}
 8010712:	2308      	movs	r3, #8
 8010714:	2400      	movs	r4, #0
 8010716:	2501      	movs	r5, #1
 8010718:	b095      	sub	sp, #84	; 0x54
 801071a:	e9cd 4201 	strd	r4, r2, [sp, #4]
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	9205      	str	r2, [sp, #20]
 8010722:	ab0c      	add	r3, sp, #48	; 0x30
 8010724:	2210      	movs	r2, #16
 8010726:	f8ad 401c 	strh.w	r4, [sp, #28]
 801072a:	f88d 401e 	strb.w	r4, [sp, #30]
 801072e:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8010732:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8010736:	9103      	str	r1, [sp, #12]
 8010738:	4604      	mov	r4, r0
 801073a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801073e:	f000 fecb 	bl	80114d8 <uxr_prepare_stream_to_write_submessage>
 8010742:	b918      	cbnz	r0, 801074c <uxr_buffer_cancel_data+0x3c>
 8010744:	4604      	mov	r4, r0
 8010746:	4620      	mov	r0, r4
 8010748:	b015      	add	sp, #84	; 0x54
 801074a:	bd30      	pop	{r4, r5, pc}
 801074c:	9905      	ldr	r1, [sp, #20]
 801074e:	aa06      	add	r2, sp, #24
 8010750:	4620      	mov	r0, r4
 8010752:	f000 fff3 	bl	801173c <uxr_init_base_object_request>
 8010756:	4604      	mov	r4, r0
 8010758:	a906      	add	r1, sp, #24
 801075a:	a80c      	add	r0, sp, #48	; 0x30
 801075c:	f002 fd9c 	bl	8013298 <uxr_serialize_READ_DATA_Payload>
 8010760:	4620      	mov	r0, r4
 8010762:	b015      	add	sp, #84	; 0x54
 8010764:	bd30      	pop	{r4, r5, pc}
 8010766:	bf00      	nop

08010768 <read_submessage_format>:
 8010768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801076c:	b095      	sub	sp, #84	; 0x54
 801076e:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8010772:	b113      	cbz	r3, 801077a <read_submessage_format+0x12>
 8010774:	b015      	add	sp, #84	; 0x54
 8010776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801077a:	460c      	mov	r4, r1
 801077c:	4606      	mov	r6, r0
 801077e:	4690      	mov	r8, r2
 8010780:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010784:	a80c      	add	r0, sp, #48	; 0x30
 8010786:	1a52      	subs	r2, r2, r1
 8010788:	461d      	mov	r5, r3
 801078a:	e9dd 731c 	ldrd	r7, r3, [sp, #112]	; 0x70
 801078e:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8010792:	f89d 7076 	ldrb.w	r7, [sp, #118]	; 0x76
 8010796:	f7ff fb2f 	bl	800fdf8 <ucdr_init_buffer>
 801079a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801079e:	a80c      	add	r0, sp, #48	; 0x30
 80107a0:	f7ff fb00 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 80107a4:	69e3      	ldr	r3, [r4, #28]
 80107a6:	b17b      	cbz	r3, 80107c8 <read_submessage_format+0x60>
 80107a8:	2f07      	cmp	r7, #7
 80107aa:	751d      	strb	r5, [r3, #20]
 80107ac:	d03a      	beq.n	8010824 <read_submessage_format+0xbc>
 80107ae:	2f08      	cmp	r7, #8
 80107b0:	d029      	beq.n	8010806 <read_submessage_format+0x9e>
 80107b2:	2f06      	cmp	r7, #6
 80107b4:	d00e      	beq.n	80107d4 <read_submessage_format+0x6c>
 80107b6:	2201      	movs	r2, #1
 80107b8:	751a      	strb	r2, [r3, #20]
 80107ba:	4641      	mov	r1, r8
 80107bc:	4620      	mov	r0, r4
 80107be:	f7ff fb6d 	bl	800fe9c <ucdr_advance_buffer>
 80107c2:	b015      	add	sp, #84	; 0x54
 80107c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107c8:	2f07      	cmp	r7, #7
 80107ca:	d02b      	beq.n	8010824 <read_submessage_format+0xbc>
 80107cc:	2f08      	cmp	r7, #8
 80107ce:	d01a      	beq.n	8010806 <read_submessage_format+0x9e>
 80107d0:	2f06      	cmp	r7, #6
 80107d2:	d1f2      	bne.n	80107ba <read_submessage_format+0x52>
 80107d4:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 80107d8:	b195      	cbz	r5, 8010800 <read_submessage_format+0x98>
 80107da:	2206      	movs	r2, #6
 80107dc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80107e0:	f88d 2016 	strb.w	r2, [sp, #22]
 80107e4:	aa0c      	add	r2, sp, #48	; 0x30
 80107e6:	9200      	str	r2, [sp, #0]
 80107e8:	9302      	str	r3, [sp, #8]
 80107ea:	464a      	mov	r2, r9
 80107ec:	9b04      	ldr	r3, [sp, #16]
 80107ee:	4630      	mov	r0, r6
 80107f0:	9905      	ldr	r1, [sp, #20]
 80107f2:	f8cd 8004 	str.w	r8, [sp, #4]
 80107f6:	47a8      	blx	r5
 80107f8:	2201      	movs	r2, #1
 80107fa:	69e3      	ldr	r3, [r4, #28]
 80107fc:	f886 20b4 	strb.w	r2, [r6, #180]	; 0xb4
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1d8      	bne.n	80107b6 <read_submessage_format+0x4e>
 8010804:	e7d9      	b.n	80107ba <read_submessage_format+0x52>
 8010806:	f8d6 20a4 	ldr.w	r2, [r6, #164]	; 0xa4
 801080a:	2a00      	cmp	r2, #0
 801080c:	d0f8      	beq.n	8010800 <read_submessage_format+0x98>
 801080e:	a906      	add	r1, sp, #24
 8010810:	a80c      	add	r0, sp, #48	; 0x30
 8010812:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010814:	f002 fe14 	bl	8013440 <uxr_deserialize_SampleIdentity>
 8010818:	2800      	cmp	r0, #0
 801081a:	d13c      	bne.n	8010896 <read_submessage_format+0x12e>
 801081c:	69e3      	ldr	r3, [r4, #28]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1c9      	bne.n	80107b6 <read_submessage_format+0x4e>
 8010822:	e7ca      	b.n	80107ba <read_submessage_format+0x52>
 8010824:	f8d6 20ac 	ldr.w	r2, [r6, #172]	; 0xac
 8010828:	b132      	cbz	r2, 8010838 <read_submessage_format+0xd0>
 801082a:	a906      	add	r1, sp, #24
 801082c:	a80c      	add	r0, sp, #48	; 0x30
 801082e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010830:	f002 fbd0 	bl	8012fd4 <uxr_deserialize_BaseObjectRequest>
 8010834:	b930      	cbnz	r0, 8010844 <read_submessage_format+0xdc>
 8010836:	69e3      	ldr	r3, [r4, #28]
 8010838:	68a2      	ldr	r2, [r4, #8]
 801083a:	4442      	add	r2, r8
 801083c:	60a2      	str	r2, [r4, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1b9      	bne.n	80107b6 <read_submessage_format+0x4e>
 8010842:	e7ba      	b.n	80107ba <read_submessage_format+0x52>
 8010844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010846:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801084a:	a80c      	add	r0, sp, #48	; 0x30
 801084c:	1a52      	subs	r2, r2, r1
 801084e:	1aed      	subs	r5, r5, r3
 8010850:	f7ff fad2 	bl	800fdf8 <ucdr_init_buffer>
 8010854:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010858:	a80c      	add	r0, sp, #48	; 0x30
 801085a:	f7ff faa3 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 801085e:	2107      	movs	r1, #7
 8010860:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8010864:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010868:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 801086c:	4445      	add	r5, r8
 801086e:	b2ad      	uxth	r5, r5
 8010870:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010874:	aa0c      	add	r2, sp, #48	; 0x30
 8010876:	9200      	str	r2, [sp, #0]
 8010878:	9002      	str	r0, [sp, #8]
 801087a:	f88d 1016 	strb.w	r1, [sp, #22]
 801087e:	9501      	str	r5, [sp, #4]
 8010880:	b29b      	uxth	r3, r3
 8010882:	464a      	mov	r2, r9
 8010884:	4630      	mov	r0, r6
 8010886:	9905      	ldr	r1, [sp, #20]
 8010888:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
 801088c:	47a8      	blx	r5
 801088e:	2301      	movs	r3, #1
 8010890:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8010894:	e7cf      	b.n	8010836 <read_submessage_format+0xce>
 8010896:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010898:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801089c:	a80c      	add	r0, sp, #48	; 0x30
 801089e:	1a52      	subs	r2, r2, r1
 80108a0:	1aed      	subs	r5, r5, r3
 80108a2:	f7ff faa9 	bl	800fdf8 <ucdr_init_buffer>
 80108a6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80108aa:	a80c      	add	r0, sp, #48	; 0x30
 80108ac:	f7ff fa7a 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 80108b0:	2308      	movs	r3, #8
 80108b2:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 80108b6:	4445      	add	r5, r8
 80108b8:	f88d 3016 	strb.w	r3, [sp, #22]
 80108bc:	b2ad      	uxth	r5, r5
 80108be:	ab0c      	add	r3, sp, #48	; 0x30
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	9002      	str	r0, [sp, #8]
 80108c4:	9501      	str	r5, [sp, #4]
 80108c6:	ab06      	add	r3, sp, #24
 80108c8:	464a      	mov	r2, r9
 80108ca:	4630      	mov	r0, r6
 80108cc:	9905      	ldr	r1, [sp, #20]
 80108ce:	f8d6 50a4 	ldr.w	r5, [r6, #164]	; 0xa4
 80108d2:	47a8      	blx	r5
 80108d4:	2301      	movs	r3, #1
 80108d6:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80108da:	e79f      	b.n	801081c <read_submessage_format+0xb4>

080108dc <on_get_fragmentation_info>:
 80108dc:	b500      	push	{lr}
 80108de:	b08b      	sub	sp, #44	; 0x2c
 80108e0:	4601      	mov	r1, r0
 80108e2:	2204      	movs	r2, #4
 80108e4:	a802      	add	r0, sp, #8
 80108e6:	f7ff fa87 	bl	800fdf8 <ucdr_init_buffer>
 80108ea:	f10d 0305 	add.w	r3, sp, #5
 80108ee:	a802      	add	r0, sp, #8
 80108f0:	f10d 0206 	add.w	r2, sp, #6
 80108f4:	a901      	add	r1, sp, #4
 80108f6:	f001 fd1d 	bl	8012334 <uxr_read_submessage_header>
 80108fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80108fe:	2b0d      	cmp	r3, #13
 8010900:	d003      	beq.n	801090a <on_get_fragmentation_info+0x2e>
 8010902:	2000      	movs	r0, #0
 8010904:	b00b      	add	sp, #44	; 0x2c
 8010906:	f85d fb04 	ldr.w	pc, [sp], #4
 801090a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801090e:	f013 0f02 	tst.w	r3, #2
 8010912:	bf14      	ite	ne
 8010914:	2002      	movne	r0, #2
 8010916:	2001      	moveq	r0, #1
 8010918:	b00b      	add	sp, #44	; 0x2c
 801091a:	f85d fb04 	ldr.w	pc, [sp], #4
 801091e:	bf00      	nop

08010920 <write_submessage_acknack.isra.0>:
 8010920:	b570      	push	{r4, r5, r6, lr}
 8010922:	4614      	mov	r4, r2
 8010924:	b092      	sub	sp, #72	; 0x48
 8010926:	4605      	mov	r5, r0
 8010928:	460e      	mov	r6, r1
 801092a:	f000 feff 	bl	801172c <uxr_session_header_offset>
 801092e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8010932:	9000      	str	r0, [sp, #0]
 8010934:	a905      	add	r1, sp, #20
 8010936:	a80a      	add	r0, sp, #40	; 0x28
 8010938:	2300      	movs	r3, #0
 801093a:	2211      	movs	r2, #17
 801093c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8010940:	f7ff fa48 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8010944:	3450      	adds	r4, #80	; 0x50
 8010946:	2205      	movs	r2, #5
 8010948:	2300      	movs	r3, #0
 801094a:	210a      	movs	r1, #10
 801094c:	a80a      	add	r0, sp, #40	; 0x28
 801094e:	f001 fcd7 	bl	8012300 <uxr_buffer_submessage_header>
 8010952:	a903      	add	r1, sp, #12
 8010954:	4620      	mov	r0, r4
 8010956:	f006 f90b 	bl	8016b70 <uxr_compute_acknack>
 801095a:	a903      	add	r1, sp, #12
 801095c:	ba43      	rev16	r3, r0
 801095e:	a80a      	add	r0, sp, #40	; 0x28
 8010960:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010964:	f88d 6010 	strb.w	r6, [sp, #16]
 8010968:	f002 fcba 	bl	80132e0 <uxr_serialize_ACKNACK_Payload>
 801096c:	2200      	movs	r2, #0
 801096e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010970:	4611      	mov	r1, r2
 8010972:	4628      	mov	r0, r5
 8010974:	f000 fe86 	bl	8011684 <uxr_stamp_session_header>
 8010978:	a80a      	add	r0, sp, #40	; 0x28
 801097a:	f7ff fa6b 	bl	800fe54 <ucdr_buffer_length>
 801097e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010980:	4602      	mov	r2, r0
 8010982:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010986:	a905      	add	r1, sp, #20
 8010988:	47a0      	blx	r4
 801098a:	b012      	add	sp, #72	; 0x48
 801098c:	bd70      	pop	{r4, r5, r6, pc}
 801098e:	bf00      	nop

08010990 <uxr_acknack_pong.part.0>:
 8010990:	b570      	push	{r4, r5, r6, lr}
 8010992:	2400      	movs	r4, #0
 8010994:	4605      	mov	r5, r0
 8010996:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 801099a:	f10d 0306 	add.w	r3, sp, #6
 801099e:	a901      	add	r1, sp, #4
 80109a0:	f10d 0205 	add.w	r2, sp, #5
 80109a4:	f88d 4004 	strb.w	r4, [sp, #4]
 80109a8:	f88d 4005 	strb.w	r4, [sp, #5]
 80109ac:	f8ad 4006 	strh.w	r4, [sp, #6]
 80109b0:	f001 fef6 	bl	80127a0 <uxr_deserialize_submessage_header>
 80109b4:	4628      	mov	r0, r5
 80109b6:	f7ff fa51 	bl	800fe5c <ucdr_buffer_remaining>
 80109ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80109be:	4298      	cmp	r0, r3
 80109c0:	d31d      	bcc.n	80109fe <uxr_acknack_pong.part.0+0x6e>
 80109c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80109c6:	2b06      	cmp	r3, #6
 80109c8:	d003      	beq.n	80109d2 <uxr_acknack_pong.part.0+0x42>
 80109ca:	4620      	mov	r0, r4
 80109cc:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 80109d0:	bd70      	pop	{r4, r5, r6, pc}
 80109d2:	a902      	add	r1, sp, #8
 80109d4:	4628      	mov	r0, r5
 80109d6:	f002 fb0d 	bl	8012ff4 <uxr_deserialize_BaseObjectReply>
 80109da:	a904      	add	r1, sp, #16
 80109dc:	4604      	mov	r4, r0
 80109de:	4628      	mov	r0, r5
 80109e0:	f7fd fdb0 	bl	800e544 <ucdr_deserialize_bool>
 80109e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80109e8:	4004      	ands	r4, r0
 80109ea:	b2e4      	uxtb	r4, r4
 80109ec:	bb23      	cbnz	r3, 8010a38 <uxr_acknack_pong.part.0+0xa8>
 80109ee:	4628      	mov	r0, r5
 80109f0:	a989      	add	r1, sp, #548	; 0x224
 80109f2:	f7fd fda7 	bl	800e544 <ucdr_deserialize_bool>
 80109f6:	f89d 3224 	ldrb.w	r3, [sp, #548]	; 0x224
 80109fa:	4606      	mov	r6, r0
 80109fc:	b91b      	cbnz	r3, 8010a06 <uxr_acknack_pong.part.0+0x76>
 80109fe:	2000      	movs	r0, #0
 8010a00:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
 8010a04:	bd70      	pop	{r4, r5, r6, pc}
 8010a06:	4628      	mov	r0, r5
 8010a08:	a98a      	add	r1, sp, #552	; 0x228
 8010a0a:	f7fd fdc9 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8010a0e:	4226      	tst	r6, r4
 8010a10:	d0f5      	beq.n	80109fe <uxr_acknack_pong.part.0+0x6e>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d0f3      	beq.n	80109fe <uxr_acknack_pong.part.0+0x6e>
 8010a16:	f89d 3228 	ldrb.w	r3, [sp, #552]	; 0x228
 8010a1a:	2b0d      	cmp	r3, #13
 8010a1c:	d1ef      	bne.n	80109fe <uxr_acknack_pong.part.0+0x6e>
 8010a1e:	4628      	mov	r0, r5
 8010a20:	a98c      	add	r1, sp, #560	; 0x230
 8010a22:	f7fe fb93 	bl	800f14c <ucdr_deserialize_int16_t>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d0ea      	beq.n	8010a00 <uxr_acknack_pong.part.0+0x70>
 8010a2a:	f9bd 4230 	ldrsh.w	r4, [sp, #560]	; 0x230
 8010a2e:	2c00      	cmp	r4, #0
 8010a30:	bfd4      	ite	le
 8010a32:	2000      	movle	r0, #0
 8010a34:	2001      	movgt	r0, #1
 8010a36:	e7e3      	b.n	8010a00 <uxr_acknack_pong.part.0+0x70>
 8010a38:	4628      	mov	r0, r5
 8010a3a:	a905      	add	r1, sp, #20
 8010a3c:	f002 fa1c 	bl	8012e78 <uxr_deserialize_ObjectVariant>
 8010a40:	4004      	ands	r4, r0
 8010a42:	e7d4      	b.n	80109ee <uxr_acknack_pong.part.0+0x5e>

08010a44 <read_submessage_list>:
 8010a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a48:	4604      	mov	r4, r0
 8010a4a:	460d      	mov	r5, r1
 8010a4c:	b099      	sub	sp, #100	; 0x64
 8010a4e:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 8010d44 <read_submessage_list+0x300>
 8010a52:	920b      	str	r2, [sp, #44]	; 0x2c
 8010a54:	4628      	mov	r0, r5
 8010a56:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8010a5a:	aa0e      	add	r2, sp, #56	; 0x38
 8010a5c:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8010a60:	f001 fc68 	bl	8012334 <uxr_read_submessage_header>
 8010a64:	2800      	cmp	r0, #0
 8010a66:	f000 810d 	beq.w	8010c84 <read_submessage_list+0x240>
 8010a6a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8010a6e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8010a72:	3b04      	subs	r3, #4
 8010a74:	2b0b      	cmp	r3, #11
 8010a76:	d8ed      	bhi.n	8010a54 <read_submessage_list+0x10>
 8010a78:	a101      	add	r1, pc, #4	; (adr r1, 8010a80 <read_submessage_list+0x3c>)
 8010a7a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a7e:	bf00      	nop
 8010a80:	08010c75 	.word	0x08010c75
 8010a84:	08010c69 	.word	0x08010c69
 8010a88:	08010a55 	.word	0x08010a55
 8010a8c:	08010a55 	.word	0x08010a55
 8010a90:	08010a55 	.word	0x08010a55
 8010a94:	08010bc9 	.word	0x08010bc9
 8010a98:	08010b59 	.word	0x08010b59
 8010a9c:	08010b17 	.word	0x08010b17
 8010aa0:	08010a55 	.word	0x08010a55
 8010aa4:	08010a55 	.word	0x08010a55
 8010aa8:	08010a55 	.word	0x08010a55
 8010aac:	08010ab1 	.word	0x08010ab1
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	a912      	add	r1, sp, #72	; 0x48
 8010ab4:	f002 fc72 	bl	801339c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8010ab8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8010abc:	2e00      	cmp	r6, #0
 8010abe:	f000 8112 	beq.w	8010ce6 <read_submessage_list+0x2a2>
 8010ac2:	f001 fc7f 	bl	80123c4 <uxr_nanos>
 8010ac6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8010ac8:	f04f 0900 	mov.w	r9, #0
 8010acc:	46b8      	mov	r8, r7
 8010ace:	4602      	mov	r2, r0
 8010ad0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010ad2:	f04f 0c00 	mov.w	ip, #0
 8010ad6:	4683      	mov	fp, r0
 8010ad8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8010ada:	460b      	mov	r3, r1
 8010adc:	fbca 8907 	smlal	r8, r9, sl, r7
 8010ae0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8010ae4:	46d8      	mov	r8, fp
 8010ae6:	46e1      	mov	r9, ip
 8010ae8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010aea:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8010aec:	4608      	mov	r0, r1
 8010aee:	2100      	movs	r1, #0
 8010af0:	fbca 8907 	smlal	r8, r9, sl, r7
 8010af4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010af6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010afa:	fbca 0107 	smlal	r0, r1, sl, r7
 8010afe:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 8010b02:	e9cd 0100 	strd	r0, r1, [sp]
 8010b06:	9706      	str	r7, [sp, #24]
 8010b08:	4620      	mov	r0, r4
 8010b0a:	47b0      	blx	r6
 8010b0c:	f04f 0301 	mov.w	r3, #1
 8010b10:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8010b14:	e79e      	b.n	8010a54 <read_submessage_list+0x10>
 8010b16:	a912      	add	r1, sp, #72	; 0x48
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f002 fc1f 	bl	801335c <uxr_deserialize_HEARTBEAT_Payload>
 8010b1e:	2100      	movs	r1, #0
 8010b20:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010b24:	f001 fadc 	bl	80120e0 <uxr_stream_id_from_raw>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010b2e:	4631      	mov	r1, r6
 8010b30:	f104 0008 	add.w	r0, r4, #8
 8010b34:	9311      	str	r3, [sp, #68]	; 0x44
 8010b36:	f001 fbc1 	bl	80122bc <uxr_get_input_reliable_stream>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d08a      	beq.n	8010a54 <read_submessage_list+0x10>
 8010b3e:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8010b42:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8010b46:	f006 f807 	bl	8016b58 <uxr_process_heartbeat>
 8010b4a:	4632      	mov	r2, r6
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8010b52:	f7ff fee5 	bl	8010920 <write_submessage_acknack.isra.0>
 8010b56:	e77d      	b.n	8010a54 <read_submessage_list+0x10>
 8010b58:	a912      	add	r1, sp, #72	; 0x48
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f002 fbd6 	bl	801330c <uxr_deserialize_ACKNACK_Payload>
 8010b60:	2100      	movs	r1, #0
 8010b62:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010b66:	f001 fabb 	bl	80120e0 <uxr_stream_id_from_raw>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	f104 0008 	add.w	r0, r4, #8
 8010b70:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010b74:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b76:	f001 fb8b 	bl	8012290 <uxr_get_output_reliable_stream>
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	f43f af69 	beq.w	8010a54 <read_submessage_list+0x10>
 8010b82:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8010b86:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8010b8a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8010b8e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8010b92:	b289      	uxth	r1, r1
 8010b94:	f006 fb20 	bl	80171d8 <uxr_process_acknack>
 8010b98:	4630      	mov	r0, r6
 8010b9a:	f006 fae3 	bl	8017164 <uxr_begin_output_nack_buffer_it>
 8010b9e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010ba2:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010ba6:	e005      	b.n	8010bb4 <read_submessage_list+0x170>
 8010ba8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010baa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010bac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010bae:	e9d3 0700 	ldrd	r0, r7, [r3]
 8010bb2:	47b8      	blx	r7
 8010bb4:	4641      	mov	r1, r8
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8010bbc:	aa11      	add	r2, sp, #68	; 0x44
 8010bbe:	f006 fad3 	bl	8017168 <uxr_next_reliable_nack_buffer_to_send>
 8010bc2:	2800      	cmp	r0, #0
 8010bc4:	d1f0      	bne.n	8010ba8 <read_submessage_list+0x164>
 8010bc6:	e745      	b.n	8010a54 <read_submessage_list+0x10>
 8010bc8:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8010bcc:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8010bd0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010bd4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8010bd8:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
 8010bdc:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
 8010be0:	4641      	mov	r1, r8
 8010be2:	4628      	mov	r0, r5
 8010be4:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
 8010be8:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8010bec:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 8010bf0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010bf4:	f002 f9ee 	bl	8012fd4 <uxr_deserialize_BaseObjectRequest>
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	a911      	add	r1, sp, #68	; 0x44
 8010bfc:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8010c00:	f000 fdba 	bl	8011778 <uxr_parse_base_object_request>
 8010c04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010c06:	f8d4 9080 	ldr.w	r9, [r4, #128]	; 0x80
 8010c0a:	3e04      	subs	r6, #4
 8010c0c:	f8bd 803a 	ldrh.w	r8, [sp, #58]	; 0x3a
 8010c10:	f007 070e 	and.w	r7, r7, #14
 8010c14:	b2b6      	uxth	r6, r6
 8010c16:	9112      	str	r1, [sp, #72]	; 0x48
 8010c18:	f1b9 0f00 	cmp.w	r9, #0
 8010c1c:	d006      	beq.n	8010c2c <read_submessage_list+0x1e8>
 8010c1e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010c22:	4642      	mov	r2, r8
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	4620      	mov	r0, r4
 8010c28:	2300      	movs	r3, #0
 8010c2a:	47c8      	blx	r9
 8010c2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8010c2e:	b168      	cbz	r0, 8010c4c <read_submessage_list+0x208>
 8010c30:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8010c32:	2300      	movs	r3, #0
 8010c34:	3902      	subs	r1, #2
 8010c36:	e002      	b.n	8010c3e <read_submessage_list+0x1fa>
 8010c38:	3301      	adds	r3, #1
 8010c3a:	4283      	cmp	r3, r0
 8010c3c:	d006      	beq.n	8010c4c <read_submessage_list+0x208>
 8010c3e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8010c42:	4542      	cmp	r2, r8
 8010c44:	d1f8      	bne.n	8010c38 <read_submessage_list+0x1f4>
 8010c46:	2100      	movs	r1, #0
 8010c48:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8010c4a:	54d1      	strb	r1, [r2, r3]
 8010c4c:	f8bd 103a 	ldrh.w	r1, [sp, #58]	; 0x3a
 8010c50:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010c52:	463b      	mov	r3, r7
 8010c54:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8010c58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	9100      	str	r1, [sp, #0]
 8010c5e:	4620      	mov	r0, r4
 8010c60:	4629      	mov	r1, r5
 8010c62:	f7ff fd81 	bl	8010768 <read_submessage_format>
 8010c66:	e6f5      	b.n	8010a54 <read_submessage_list+0x10>
 8010c68:	b97a      	cbnz	r2, 8010c8a <read_submessage_list+0x246>
 8010c6a:	4629      	mov	r1, r5
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f000 fcd7 	bl	8011620 <uxr_read_delete_session_status>
 8010c72:	e6ef      	b.n	8010a54 <read_submessage_list+0x10>
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	f47f aeed 	bne.w	8010a54 <read_submessage_list+0x10>
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f000 fcc3 	bl	8011608 <uxr_read_create_session_status>
 8010c82:	e6e7      	b.n	8010a54 <read_submessage_list+0x10>
 8010c84:	b019      	add	sp, #100	; 0x64
 8010c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c8a:	a912      	add	r1, sp, #72	; 0x48
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f002 fae5 	bl	801325c <uxr_deserialize_STATUS_Payload>
 8010c92:	a910      	add	r1, sp, #64	; 0x40
 8010c94:	aa0f      	add	r2, sp, #60	; 0x3c
 8010c96:	a812      	add	r0, sp, #72	; 0x48
 8010c98:	f000 fd6e 	bl	8011778 <uxr_parse_base_object_request>
 8010c9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010c9e:	f8d4 8080 	ldr.w	r8, [r4, #128]	; 0x80
 8010ca2:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8010ca6:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8010caa:	9111      	str	r1, [sp, #68]	; 0x44
 8010cac:	f1b8 0f00 	cmp.w	r8, #0
 8010cb0:	d006      	beq.n	8010cc0 <read_submessage_list+0x27c>
 8010cb2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010cb6:	4632      	mov	r2, r6
 8010cb8:	9300      	str	r3, [sp, #0]
 8010cba:	4620      	mov	r0, r4
 8010cbc:	463b      	mov	r3, r7
 8010cbe:	47c0      	blx	r8
 8010cc0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8010cc2:	2a00      	cmp	r2, #0
 8010cc4:	f43f aec6 	beq.w	8010a54 <read_submessage_list+0x10>
 8010cc8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8010cca:	2100      	movs	r1, #0
 8010ccc:	3802      	subs	r0, #2
 8010cce:	e003      	b.n	8010cd8 <read_submessage_list+0x294>
 8010cd0:	3101      	adds	r1, #1
 8010cd2:	4291      	cmp	r1, r2
 8010cd4:	f43f aebe 	beq.w	8010a54 <read_submessage_list+0x10>
 8010cd8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8010cdc:	42b3      	cmp	r3, r6
 8010cde:	d1f7      	bne.n	8010cd0 <read_submessage_list+0x28c>
 8010ce0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010ce2:	545f      	strb	r7, [r3, r1]
 8010ce4:	e6b6      	b.n	8010a54 <read_submessage_list+0x10>
 8010ce6:	f001 fb6d 	bl	80123c4 <uxr_nanos>
 8010cea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010cec:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8010cee:	4693      	mov	fp, r2
 8010cf0:	f04f 0c00 	mov.w	ip, #0
 8010cf4:	46b8      	mov	r8, r7
 8010cf6:	f04f 0900 	mov.w	r9, #0
 8010cfa:	2700      	movs	r7, #0
 8010cfc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010cfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010d00:	fbca bc03 	smlal	fp, ip, sl, r3
 8010d04:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8010d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010d08:	fbca 6702 	smlal	r6, r7, sl, r2
 8010d0c:	fbca 8903 	smlal	r8, r9, sl, r3
 8010d10:	eb1b 0000 	adds.w	r0, fp, r0
 8010d14:	eb4c 0101 	adc.w	r1, ip, r1
 8010d18:	eb18 0306 	adds.w	r3, r8, r6
 8010d1c:	eb49 0207 	adc.w	r2, r9, r7
 8010d20:	1ac3      	subs	r3, r0, r3
 8010d22:	9308      	str	r3, [sp, #32]
 8010d24:	eb61 0302 	sbc.w	r3, r1, r2
 8010d28:	9309      	str	r3, [sp, #36]	; 0x24
 8010d2a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010d2e:	0fd3      	lsrs	r3, r2, #31
 8010d30:	18c9      	adds	r1, r1, r3
 8010d32:	f142 0200 	adc.w	r2, r2, #0
 8010d36:	084b      	lsrs	r3, r1, #1
 8010d38:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8010d3c:	1052      	asrs	r2, r2, #1
 8010d3e:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8010d42:	e6e3      	b.n	8010b0c <read_submessage_list+0xc8>
 8010d44:	3b9aca00 	.word	0x3b9aca00

08010d48 <listen_message>:
 8010d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8010d4e:	b099      	sub	sp, #100	; 0x64
 8010d50:	6894      	ldr	r4, [r2, #8]
 8010d52:	460b      	mov	r3, r1
 8010d54:	4605      	mov	r5, r0
 8010d56:	a904      	add	r1, sp, #16
 8010d58:	6810      	ldr	r0, [r2, #0]
 8010d5a:	aa05      	add	r2, sp, #20
 8010d5c:	47a0      	blx	r4
 8010d5e:	4604      	mov	r4, r0
 8010d60:	b918      	cbnz	r0, 8010d6a <listen_message+0x22>
 8010d62:	4620      	mov	r0, r4
 8010d64:	b019      	add	sp, #100	; 0x64
 8010d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d6a:	2600      	movs	r6, #0
 8010d6c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8010d70:	a808      	add	r0, sp, #32
 8010d72:	f7ff f841 	bl	800fdf8 <ucdr_init_buffer>
 8010d76:	4628      	mov	r0, r5
 8010d78:	a908      	add	r1, sp, #32
 8010d7a:	f10d 030e 	add.w	r3, sp, #14
 8010d7e:	aa03      	add	r2, sp, #12
 8010d80:	f88d 600c 	strb.w	r6, [sp, #12]
 8010d84:	f000 fc92 	bl	80116ac <uxr_read_session_header>
 8010d88:	b1e8      	cbz	r0, 8010dc6 <listen_message+0x7e>
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8010d90:	f001 f9a6 	bl	80120e0 <uxr_stream_id_from_raw>
 8010d94:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010d98:	2f01      	cmp	r7, #1
 8010d9a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
 8010d9e:	9007      	str	r0, [sp, #28]
 8010da0:	fa5f f880 	uxtb.w	r8, r0
 8010da4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010da8:	d01b      	beq.n	8010de2 <listen_message+0x9a>
 8010daa:	2f02      	cmp	r7, #2
 8010dac:	d031      	beq.n	8010e12 <listen_message+0xca>
 8010dae:	2f00      	cmp	r7, #0
 8010db0:	d1d7      	bne.n	8010d62 <listen_message+0x1a>
 8010db2:	4639      	mov	r1, r7
 8010db4:	4638      	mov	r0, r7
 8010db6:	f001 f993 	bl	80120e0 <uxr_stream_id_from_raw>
 8010dba:	a908      	add	r1, sp, #32
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7ff fe40 	bl	8010a44 <read_submessage_list>
 8010dc4:	e7cd      	b.n	8010d62 <listen_message+0x1a>
 8010dc6:	a808      	add	r0, sp, #32
 8010dc8:	f7ff f848 	bl	800fe5c <ucdr_buffer_remaining>
 8010dcc:	2804      	cmp	r0, #4
 8010dce:	d9c8      	bls.n	8010d62 <listen_message+0x1a>
 8010dd0:	a808      	add	r0, sp, #32
 8010dd2:	f7ff fddd 	bl	8010990 <uxr_acknack_pong.part.0>
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d0c3      	beq.n	8010d62 <listen_message+0x1a>
 8010dda:	2301      	movs	r3, #1
 8010ddc:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 8010de0:	e7bf      	b.n	8010d62 <listen_message+0x1a>
 8010de2:	4631      	mov	r1, r6
 8010de4:	f105 0008 	add.w	r0, r5, #8
 8010de8:	f001 fa5e 	bl	80122a8 <uxr_get_input_best_effort_stream>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d0b8      	beq.n	8010d62 <listen_message+0x1a>
 8010df0:	4651      	mov	r1, sl
 8010df2:	f005 fd2d 	bl	8016850 <uxr_receive_best_effort_message>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d0b3      	beq.n	8010d62 <listen_message+0x1a>
 8010dfa:	f88d 801c 	strb.w	r8, [sp, #28]
 8010dfe:	f88d 601d 	strb.w	r6, [sp, #29]
 8010e02:	f88d 701e 	strb.w	r7, [sp, #30]
 8010e06:	4628      	mov	r0, r5
 8010e08:	9a07      	ldr	r2, [sp, #28]
 8010e0a:	a908      	add	r1, sp, #32
 8010e0c:	f7ff fe1a 	bl	8010a44 <read_submessage_list>
 8010e10:	e7a7      	b.n	8010d62 <listen_message+0x1a>
 8010e12:	4631      	mov	r1, r6
 8010e14:	f105 0008 	add.w	r0, r5, #8
 8010e18:	f001 fa50 	bl	80122bc <uxr_get_input_reliable_stream>
 8010e1c:	4681      	mov	r9, r0
 8010e1e:	b328      	cbz	r0, 8010e6c <listen_message+0x124>
 8010e20:	a808      	add	r0, sp, #32
 8010e22:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8010e26:	f7ff f819 	bl	800fe5c <ucdr_buffer_remaining>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	f10d 000d 	add.w	r0, sp, #13
 8010e30:	9000      	str	r0, [sp, #0]
 8010e32:	465a      	mov	r2, fp
 8010e34:	4651      	mov	r1, sl
 8010e36:	4648      	mov	r0, r9
 8010e38:	f005 fd8e 	bl	8016958 <uxr_receive_reliable_message>
 8010e3c:	b1b0      	cbz	r0, 8010e6c <listen_message+0x124>
 8010e3e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8010e42:	b1cb      	cbz	r3, 8010e78 <listen_message+0x130>
 8010e44:	2702      	movs	r7, #2
 8010e46:	e00a      	b.n	8010e5e <listen_message+0x116>
 8010e48:	f88d 801c 	strb.w	r8, [sp, #28]
 8010e4c:	f88d 601d 	strb.w	r6, [sp, #29]
 8010e50:	f88d 701e 	strb.w	r7, [sp, #30]
 8010e54:	4628      	mov	r0, r5
 8010e56:	9a07      	ldr	r2, [sp, #28]
 8010e58:	a910      	add	r1, sp, #64	; 0x40
 8010e5a:	f7ff fdf3 	bl	8010a44 <read_submessage_list>
 8010e5e:	2204      	movs	r2, #4
 8010e60:	4648      	mov	r0, r9
 8010e62:	a910      	add	r1, sp, #64	; 0x40
 8010e64:	f005 fdf8 	bl	8016a58 <uxr_next_input_reliable_buffer_available>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	d1ed      	bne.n	8010e48 <listen_message+0x100>
 8010e6c:	4632      	mov	r2, r6
 8010e6e:	4641      	mov	r1, r8
 8010e70:	4628      	mov	r0, r5
 8010e72:	f7ff fd55 	bl	8010920 <write_submessage_acknack.isra.0>
 8010e76:	e774      	b.n	8010d62 <listen_message+0x1a>
 8010e78:	f88d 801c 	strb.w	r8, [sp, #28]
 8010e7c:	f88d 601d 	strb.w	r6, [sp, #29]
 8010e80:	f88d 701e 	strb.w	r7, [sp, #30]
 8010e84:	4628      	mov	r0, r5
 8010e86:	9a07      	ldr	r2, [sp, #28]
 8010e88:	a908      	add	r1, sp, #32
 8010e8a:	f7ff fddb 	bl	8010a44 <read_submessage_list>
 8010e8e:	e7d9      	b.n	8010e44 <listen_message+0xfc>

08010e90 <listen_message_reliably>:
 8010e90:	1e0b      	subs	r3, r1, #0
 8010e92:	bfb8      	it	lt
 8010e94:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	4683      	mov	fp, r0
 8010e9e:	b095      	sub	sp, #84	; 0x54
 8010ea0:	9303      	str	r3, [sp, #12]
 8010ea2:	f001 fa73 	bl	801238c <uxr_millis>
 8010ea6:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010eaa:	4688      	mov	r8, r1
 8010eac:	4607      	mov	r7, r0
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 8093 	beq.w	8010fda <listen_message_reliably+0x14a>
 8010eb4:	2600      	movs	r6, #0
 8010eb6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8010eba:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8010ebe:	4630      	mov	r0, r6
 8010ec0:	e00f      	b.n	8010ee2 <listen_message_reliably+0x52>
 8010ec2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010ec6:	454a      	cmp	r2, r9
 8010ec8:	eb73 010a 	sbcs.w	r1, r3, sl
 8010ecc:	bfb8      	it	lt
 8010ece:	469a      	movlt	sl, r3
 8010ed0:	f106 0601 	add.w	r6, r6, #1
 8010ed4:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010ed8:	b2f0      	uxtb	r0, r6
 8010eda:	bfb8      	it	lt
 8010edc:	4691      	movlt	r9, r2
 8010ede:	4283      	cmp	r3, r0
 8010ee0:	d953      	bls.n	8010f8a <listen_message_reliably+0xfa>
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	2102      	movs	r1, #2
 8010ee6:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010eea:	f001 f8cf 	bl	801208c <uxr_stream_id>
 8010eee:	4601      	mov	r1, r0
 8010ef0:	00e4      	lsls	r4, r4, #3
 8010ef2:	f104 0520 	add.w	r5, r4, #32
 8010ef6:	445d      	add	r5, fp
 8010ef8:	4643      	mov	r3, r8
 8010efa:	463a      	mov	r2, r7
 8010efc:	4628      	mov	r0, r5
 8010efe:	9104      	str	r1, [sp, #16]
 8010f00:	f006 f904 	bl	801710c <uxr_update_output_stream_heartbeat_timestamp>
 8010f04:	eb0b 0304 	add.w	r3, fp, r4
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d0da      	beq.n	8010ec2 <listen_message_reliably+0x32>
 8010f0c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010f10:	4658      	mov	r0, fp
 8010f12:	f89d 5011 	ldrb.w	r5, [sp, #17]
 8010f16:	9302      	str	r3, [sp, #8]
 8010f18:	f000 fc08 	bl	801172c <uxr_session_header_offset>
 8010f1c:	3501      	adds	r5, #1
 8010f1e:	2300      	movs	r3, #0
 8010f20:	2211      	movs	r2, #17
 8010f22:	9000      	str	r0, [sp, #0]
 8010f24:	a907      	add	r1, sp, #28
 8010f26:	a80c      	add	r0, sp, #48	; 0x30
 8010f28:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010f2c:	f7fe ff52 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8010f30:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8010f34:	2300      	movs	r3, #0
 8010f36:	2205      	movs	r2, #5
 8010f38:	210b      	movs	r1, #11
 8010f3a:	a80c      	add	r0, sp, #48	; 0x30
 8010f3c:	f001 f9e0 	bl	8012300 <uxr_buffer_submessage_header>
 8010f40:	2101      	movs	r1, #1
 8010f42:	8968      	ldrh	r0, [r5, #10]
 8010f44:	f006 f9a2 	bl	801728c <uxr_seq_num_add>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	892a      	ldrh	r2, [r5, #8]
 8010f4c:	9d02      	ldr	r5, [sp, #8]
 8010f4e:	a905      	add	r1, sp, #20
 8010f50:	a80c      	add	r0, sp, #48	; 0x30
 8010f52:	f88d 5018 	strb.w	r5, [sp, #24]
 8010f56:	f8ad 2016 	strh.w	r2, [sp, #22]
 8010f5a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010f5e:	f002 f9e9 	bl	8013334 <uxr_serialize_HEARTBEAT_Payload>
 8010f62:	2200      	movs	r2, #0
 8010f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f66:	4611      	mov	r1, r2
 8010f68:	4658      	mov	r0, fp
 8010f6a:	f000 fb8b 	bl	8011684 <uxr_stamp_session_header>
 8010f6e:	a80c      	add	r0, sp, #48	; 0x30
 8010f70:	f7fe ff70 	bl	800fe54 <ucdr_buffer_length>
 8010f74:	f8db 3070 	ldr.w	r3, [fp, #112]	; 0x70
 8010f78:	4602      	mov	r2, r0
 8010f7a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010f7e:	a907      	add	r1, sp, #28
 8010f80:	445c      	add	r4, fp
 8010f82:	47a8      	blx	r5
 8010f84:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010f88:	e79d      	b.n	8010ec6 <listen_message_reliably+0x36>
 8010f8a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f92:	45a2      	cmp	sl, r4
 8010f94:	bf08      	it	eq
 8010f96:	4599      	cmpeq	r9, r3
 8010f98:	d01f      	beq.n	8010fda <listen_message_reliably+0x14a>
 8010f9a:	eba9 0107 	sub.w	r1, r9, r7
 8010f9e:	2900      	cmp	r1, #0
 8010fa0:	bf08      	it	eq
 8010fa2:	2101      	moveq	r1, #1
 8010fa4:	9c03      	ldr	r4, [sp, #12]
 8010fa6:	4658      	mov	r0, fp
 8010fa8:	428c      	cmp	r4, r1
 8010faa:	4623      	mov	r3, r4
 8010fac:	bfa8      	it	ge
 8010fae:	460b      	movge	r3, r1
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	461f      	mov	r7, r3
 8010fb4:	f7ff fec8 	bl	8010d48 <listen_message>
 8010fb8:	b110      	cbz	r0, 8010fc0 <listen_message_reliably+0x130>
 8010fba:	b015      	add	sp, #84	; 0x54
 8010fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fc0:	1be3      	subs	r3, r4, r7
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	9303      	str	r3, [sp, #12]
 8010fc6:	ddf8      	ble.n	8010fba <listen_message_reliably+0x12a>
 8010fc8:	f001 f9e0 	bl	801238c <uxr_millis>
 8010fcc:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8010fd0:	4688      	mov	r8, r1
 8010fd2:	4607      	mov	r7, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f47f af6d 	bne.w	8010eb4 <listen_message_reliably+0x24>
 8010fda:	9903      	ldr	r1, [sp, #12]
 8010fdc:	e7df      	b.n	8010f9e <listen_message_reliably+0x10e>
 8010fde:	bf00      	nop

08010fe0 <uxr_init_session>:
 8010fe0:	b5d0      	push	{r4, r6, r7, lr}
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	2600      	movs	r6, #0
 8010fe6:	2700      	movs	r7, #0
 8010fe8:	4604      	mov	r4, r0
 8010fea:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8010fee:	6701      	str	r1, [r0, #112]	; 0x70
 8010ff0:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8010ff4:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8010ff8:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8010ffc:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8011000:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8011004:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8011008:	2181      	movs	r1, #129	; 0x81
 801100a:	f000 faa9 	bl	8011560 <uxr_init_session_info>
 801100e:	f104 0008 	add.w	r0, r4, #8
 8011012:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8011016:	f001 b88f 	b.w	8012138 <uxr_init_stream_storage>
 801101a:	bf00      	nop

0801101c <uxr_set_status_callback>:
 801101c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop

08011024 <uxr_set_topic_callback>:
 8011024:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop

0801102c <uxr_set_request_callback>:
 801102c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop

08011034 <uxr_set_reply_callback>:
 8011034:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop

0801103c <uxr_create_session>:
 801103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011040:	4604      	mov	r4, r0
 8011042:	f100 0708 	add.w	r7, r0, #8
 8011046:	b092      	sub	sp, #72	; 0x48
 8011048:	4638      	mov	r0, r7
 801104a:	f001 f87f 	bl	801214c <uxr_reset_stream_storage>
 801104e:	4620      	mov	r0, r4
 8011050:	f000 fb6c 	bl	801172c <uxr_session_header_offset>
 8011054:	2300      	movs	r3, #0
 8011056:	221c      	movs	r2, #28
 8011058:	9000      	str	r0, [sp, #0]
 801105a:	a903      	add	r1, sp, #12
 801105c:	a80a      	add	r0, sp, #40	; 0x28
 801105e:	f7fe feb9 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8011062:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011064:	4620      	mov	r0, r4
 8011066:	8a1a      	ldrh	r2, [r3, #16]
 8011068:	a90a      	add	r1, sp, #40	; 0x28
 801106a:	3a04      	subs	r2, #4
 801106c:	b292      	uxth	r2, r2
 801106e:	f000 fa89 	bl	8011584 <uxr_buffer_create_session>
 8011072:	4620      	mov	r0, r4
 8011074:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011076:	f000 faf1 	bl	801165c <uxr_stamp_create_session_header>
 801107a:	a80a      	add	r0, sp, #40	; 0x28
 801107c:	f7fe feea 	bl	800fe54 <ucdr_buffer_length>
 8011080:	23ff      	movs	r3, #255	; 0xff
 8011082:	4606      	mov	r6, r0
 8011084:	250a      	movs	r5, #10
 8011086:	7163      	strb	r3, [r4, #5]
 8011088:	e001      	b.n	801108e <uxr_create_session+0x52>
 801108a:	2bff      	cmp	r3, #255	; 0xff
 801108c:	d10d      	bne.n	80110aa <uxr_create_session+0x6e>
 801108e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011090:	4632      	mov	r2, r6
 8011092:	e9d3 0800 	ldrd	r0, r8, [r3]
 8011096:	a903      	add	r1, sp, #12
 8011098:	47c0      	blx	r8
 801109a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801109e:	4620      	mov	r0, r4
 80110a0:	f7ff fe52 	bl	8010d48 <listen_message>
 80110a4:	3d01      	subs	r5, #1
 80110a6:	7963      	ldrb	r3, [r4, #5]
 80110a8:	d1ef      	bne.n	801108a <uxr_create_session+0x4e>
 80110aa:	b11b      	cbz	r3, 80110b4 <uxr_create_session+0x78>
 80110ac:	2000      	movs	r0, #0
 80110ae:	b012      	add	sp, #72	; 0x48
 80110b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b4:	4638      	mov	r0, r7
 80110b6:	f001 f849 	bl	801214c <uxr_reset_stream_storage>
 80110ba:	2001      	movs	r0, #1
 80110bc:	b012      	add	sp, #72	; 0x48
 80110be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110c2:	bf00      	nop

080110c4 <uxr_delete_session_retries>:
 80110c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	b08e      	sub	sp, #56	; 0x38
 80110ca:	4604      	mov	r4, r0
 80110cc:	460d      	mov	r5, r1
 80110ce:	f000 fb2d 	bl	801172c <uxr_session_header_offset>
 80110d2:	2300      	movs	r3, #0
 80110d4:	2210      	movs	r2, #16
 80110d6:	9000      	str	r0, [sp, #0]
 80110d8:	a902      	add	r1, sp, #8
 80110da:	a806      	add	r0, sp, #24
 80110dc:	f7fe fe7a 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 80110e0:	4620      	mov	r0, r4
 80110e2:	a906      	add	r1, sp, #24
 80110e4:	f000 fa74 	bl	80115d0 <uxr_buffer_delete_session>
 80110e8:	2200      	movs	r2, #0
 80110ea:	9b06      	ldr	r3, [sp, #24]
 80110ec:	4620      	mov	r0, r4
 80110ee:	4611      	mov	r1, r2
 80110f0:	f000 fac8 	bl	8011684 <uxr_stamp_session_header>
 80110f4:	a806      	add	r0, sp, #24
 80110f6:	f7fe fead 	bl	800fe54 <ucdr_buffer_length>
 80110fa:	23ff      	movs	r3, #255	; 0xff
 80110fc:	4606      	mov	r6, r0
 80110fe:	7163      	strb	r3, [r4, #5]
 8011100:	b1f5      	cbz	r5, 8011140 <uxr_delete_session_retries+0x7c>
 8011102:	2700      	movs	r7, #0
 8011104:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011106:	4632      	mov	r2, r6
 8011108:	e9d3 0800 	ldrd	r0, r8, [r3]
 801110c:	a902      	add	r1, sp, #8
 801110e:	47c0      	blx	r8
 8011110:	3701      	adds	r7, #1
 8011112:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011116:	4620      	mov	r0, r4
 8011118:	f7ff fe16 	bl	8010d48 <listen_message>
 801111c:	42bd      	cmp	r5, r7
 801111e:	7963      	ldrb	r3, [r4, #5]
 8011120:	d007      	beq.n	8011132 <uxr_delete_session_retries+0x6e>
 8011122:	2bff      	cmp	r3, #255	; 0xff
 8011124:	d0ee      	beq.n	8011104 <uxr_delete_session_retries+0x40>
 8011126:	fab3 f083 	clz	r0, r3
 801112a:	0940      	lsrs	r0, r0, #5
 801112c:	b00e      	add	sp, #56	; 0x38
 801112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011132:	2bff      	cmp	r3, #255	; 0xff
 8011134:	bf08      	it	eq
 8011136:	2000      	moveq	r0, #0
 8011138:	d1f5      	bne.n	8011126 <uxr_delete_session_retries+0x62>
 801113a:	b00e      	add	sp, #56	; 0x38
 801113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011140:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011142:	4602      	mov	r2, r0
 8011144:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011148:	a902      	add	r1, sp, #8
 801114a:	47a8      	blx	r5
 801114c:	7963      	ldrb	r3, [r4, #5]
 801114e:	fab3 f083 	clz	r0, r3
 8011152:	0940      	lsrs	r0, r0, #5
 8011154:	e7ea      	b.n	801112c <uxr_delete_session_retries+0x68>
 8011156:	bf00      	nop

08011158 <uxr_create_output_best_effort_stream>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	4604      	mov	r4, r0
 801115e:	460d      	mov	r5, r1
 8011160:	4616      	mov	r6, r2
 8011162:	f000 fae3 	bl	801172c <uxr_session_header_offset>
 8011166:	4632      	mov	r2, r6
 8011168:	4603      	mov	r3, r0
 801116a:	4629      	mov	r1, r5
 801116c:	f104 0008 	add.w	r0, r4, #8
 8011170:	b002      	add	sp, #8
 8011172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011176:	f001 b829 	b.w	80121cc <uxr_add_output_best_effort_buffer>
 801117a:	bf00      	nop

0801117c <uxr_create_output_reliable_stream>:
 801117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801117e:	b085      	sub	sp, #20
 8011180:	460d      	mov	r5, r1
 8011182:	4616      	mov	r6, r2
 8011184:	461f      	mov	r7, r3
 8011186:	4604      	mov	r4, r0
 8011188:	f000 fad0 	bl	801172c <uxr_session_header_offset>
 801118c:	4684      	mov	ip, r0
 801118e:	463b      	mov	r3, r7
 8011190:	4632      	mov	r2, r6
 8011192:	4629      	mov	r1, r5
 8011194:	f104 0008 	add.w	r0, r4, #8
 8011198:	f8cd c000 	str.w	ip, [sp]
 801119c:	f001 f828 	bl	80121f0 <uxr_add_output_reliable_buffer>
 80111a0:	4603      	mov	r3, r0
 80111a2:	2000      	movs	r0, #0
 80111a4:	b2da      	uxtb	r2, r3
 80111a6:	f362 0007 	bfi	r0, r2, #0, #8
 80111aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80111ae:	f362 200f 	bfi	r0, r2, #8, #8
 80111b2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80111b6:	f362 4017 	bfi	r0, r2, #16, #8
 80111ba:	0e1b      	lsrs	r3, r3, #24
 80111bc:	f363 601f 	bfi	r0, r3, #24, #8
 80111c0:	b005      	add	sp, #20
 80111c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080111c4 <uxr_create_input_best_effort_stream>:
 80111c4:	b082      	sub	sp, #8
 80111c6:	3008      	adds	r0, #8
 80111c8:	b002      	add	sp, #8
 80111ca:	f001 b82b 	b.w	8012224 <uxr_add_input_best_effort_buffer>
 80111ce:	bf00      	nop

080111d0 <uxr_create_input_reliable_stream>:
 80111d0:	b510      	push	{r4, lr}
 80111d2:	4c0c      	ldr	r4, [pc, #48]	; (8011204 <uxr_create_input_reliable_stream+0x34>)
 80111d4:	b084      	sub	sp, #16
 80111d6:	9400      	str	r4, [sp, #0]
 80111d8:	3008      	adds	r0, #8
 80111da:	f001 f839 	bl	8012250 <uxr_add_input_reliable_buffer>
 80111de:	4603      	mov	r3, r0
 80111e0:	2000      	movs	r0, #0
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	f362 0007 	bfi	r0, r2, #0, #8
 80111e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80111ec:	f362 200f 	bfi	r0, r2, #8, #8
 80111f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80111f4:	f362 4017 	bfi	r0, r2, #16, #8
 80111f8:	0e1b      	lsrs	r3, r3, #24
 80111fa:	f363 601f 	bfi	r0, r3, #24, #8
 80111fe:	b004      	add	sp, #16
 8011200:	bd10      	pop	{r4, pc}
 8011202:	bf00      	nop
 8011204:	080108dd 	.word	0x080108dd

08011208 <uxr_sync_session>:
 8011208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801120a:	b093      	sub	sp, #76	; 0x4c
 801120c:	4604      	mov	r4, r0
 801120e:	460d      	mov	r5, r1
 8011210:	f000 fa8c 	bl	801172c <uxr_session_header_offset>
 8011214:	2300      	movs	r3, #0
 8011216:	2214      	movs	r2, #20
 8011218:	9000      	str	r0, [sp, #0]
 801121a:	a905      	add	r1, sp, #20
 801121c:	a80a      	add	r0, sp, #40	; 0x28
 801121e:	f7fe fdd9 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8011222:	2300      	movs	r3, #0
 8011224:	2208      	movs	r2, #8
 8011226:	210e      	movs	r1, #14
 8011228:	a80a      	add	r0, sp, #40	; 0x28
 801122a:	f001 f869 	bl	8012300 <uxr_buffer_submessage_header>
 801122e:	f001 f8c9 	bl	80123c4 <uxr_nanos>
 8011232:	a31d      	add	r3, pc, #116	; (adr r3, 80112a8 <uxr_sync_session+0xa0>)
 8011234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011238:	4606      	mov	r6, r0
 801123a:	460f      	mov	r7, r1
 801123c:	f7ef fa8e 	bl	800075c <__aeabi_ldivmod>
 8011240:	a319      	add	r3, pc, #100	; (adr r3, 80112a8 <uxr_sync_session+0xa0>)
 8011242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011246:	4684      	mov	ip, r0
 8011248:	4639      	mov	r1, r7
 801124a:	4630      	mov	r0, r6
 801124c:	f8cd c00c 	str.w	ip, [sp, #12]
 8011250:	f7ef fa84 	bl	800075c <__aeabi_ldivmod>
 8011254:	a903      	add	r1, sp, #12
 8011256:	a80a      	add	r0, sp, #40	; 0x28
 8011258:	9204      	str	r2, [sp, #16]
 801125a:	f002 f891 	bl	8013380 <uxr_serialize_TIMESTAMP_Payload>
 801125e:	2200      	movs	r2, #0
 8011260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011262:	4611      	mov	r1, r2
 8011264:	4620      	mov	r0, r4
 8011266:	f000 fa0d 	bl	8011684 <uxr_stamp_session_header>
 801126a:	a80a      	add	r0, sp, #40	; 0x28
 801126c:	f7fe fdf2 	bl	800fe54 <ucdr_buffer_length>
 8011270:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011272:	4602      	mov	r2, r0
 8011274:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011278:	a905      	add	r1, sp, #20
 801127a:	47b0      	blx	r6
 801127c:	f001 f886 	bl	801238c <uxr_millis>
 8011280:	2300      	movs	r3, #0
 8011282:	4606      	mov	r6, r0
 8011284:	4629      	mov	r1, r5
 8011286:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 801128a:	e000      	b.n	801128e <uxr_sync_session+0x86>
 801128c:	b950      	cbnz	r0, 80112a4 <uxr_sync_session+0x9c>
 801128e:	4620      	mov	r0, r4
 8011290:	f7ff fdfe 	bl	8010e90 <listen_message_reliably>
 8011294:	f001 f87a 	bl	801238c <uxr_millis>
 8011298:	1b83      	subs	r3, r0, r6
 801129a:	1ae9      	subs	r1, r5, r3
 801129c:	2900      	cmp	r1, #0
 801129e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
 80112a2:	dcf3      	bgt.n	801128c <uxr_sync_session+0x84>
 80112a4:	b013      	add	sp, #76	; 0x4c
 80112a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112a8:	3b9aca00 	.word	0x3b9aca00
 80112ac:	00000000 	.word	0x00000000

080112b0 <uxr_epoch_nanos>:
 80112b0:	b510      	push	{r4, lr}
 80112b2:	4604      	mov	r4, r0
 80112b4:	f001 f886 	bl	80123c4 <uxr_nanos>
 80112b8:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80112bc:	1ac0      	subs	r0, r0, r3
 80112be:	eb61 0102 	sbc.w	r1, r1, r2
 80112c2:	bd10      	pop	{r4, pc}

080112c4 <uxr_flash_output_streams>:
 80112c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c8:	7e03      	ldrb	r3, [r0, #24]
 80112ca:	4604      	mov	r4, r0
 80112cc:	b084      	sub	sp, #16
 80112ce:	b1fb      	cbz	r3, 8011310 <uxr_flash_output_streams+0x4c>
 80112d0:	f04f 0900 	mov.w	r9, #0
 80112d4:	4648      	mov	r0, r9
 80112d6:	f10d 0802 	add.w	r8, sp, #2
 80112da:	af03      	add	r7, sp, #12
 80112dc:	ae02      	add	r6, sp, #8
 80112de:	2201      	movs	r2, #1
 80112e0:	4611      	mov	r1, r2
 80112e2:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80112e6:	f000 fed1 	bl	801208c <uxr_stream_id>
 80112ea:	4684      	mov	ip, r0
 80112ec:	3508      	adds	r5, #8
 80112ee:	4643      	mov	r3, r8
 80112f0:	4628      	mov	r0, r5
 80112f2:	463a      	mov	r2, r7
 80112f4:	4631      	mov	r1, r6
 80112f6:	f8cd c004 	str.w	ip, [sp, #4]
 80112fa:	f005 fcbf 	bl	8016c7c <uxr_prepare_best_effort_buffer_to_send>
 80112fe:	2800      	cmp	r0, #0
 8011300:	d13c      	bne.n	801137c <uxr_flash_output_streams+0xb8>
 8011302:	7e23      	ldrb	r3, [r4, #24]
 8011304:	f109 0901 	add.w	r9, r9, #1
 8011308:	fa5f f089 	uxtb.w	r0, r9
 801130c:	4283      	cmp	r3, r0
 801130e:	d8e6      	bhi.n	80112de <uxr_flash_output_streams+0x1a>
 8011310:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011314:	b37b      	cbz	r3, 8011376 <uxr_flash_output_streams+0xb2>
 8011316:	f04f 0900 	mov.w	r9, #0
 801131a:	4648      	mov	r0, r9
 801131c:	f10d 0802 	add.w	r8, sp, #2
 8011320:	af03      	add	r7, sp, #12
 8011322:	ae02      	add	r6, sp, #8
 8011324:	2201      	movs	r2, #1
 8011326:	2102      	movs	r1, #2
 8011328:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801132c:	f000 feae 	bl	801208c <uxr_stream_id>
 8011330:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011334:	3520      	adds	r5, #32
 8011336:	9001      	str	r0, [sp, #4]
 8011338:	e00d      	b.n	8011356 <uxr_flash_output_streams+0x92>
 801133a:	4620      	mov	r0, r4
 801133c:	9b02      	ldr	r3, [sp, #8]
 801133e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011342:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011346:	f000 f99d 	bl	8011684 <uxr_stamp_session_header>
 801134a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801134c:	9a03      	ldr	r2, [sp, #12]
 801134e:	9902      	ldr	r1, [sp, #8]
 8011350:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8011354:	47d0      	blx	sl
 8011356:	4643      	mov	r3, r8
 8011358:	463a      	mov	r2, r7
 801135a:	4631      	mov	r1, r6
 801135c:	4628      	mov	r0, r5
 801135e:	f005 fe8f 	bl	8017080 <uxr_prepare_next_reliable_buffer_to_send>
 8011362:	2800      	cmp	r0, #0
 8011364:	d1e9      	bne.n	801133a <uxr_flash_output_streams+0x76>
 8011366:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801136a:	f109 0901 	add.w	r9, r9, #1
 801136e:	fa5f f089 	uxtb.w	r0, r9
 8011372:	4283      	cmp	r3, r0
 8011374:	d8d6      	bhi.n	8011324 <uxr_flash_output_streams+0x60>
 8011376:	b004      	add	sp, #16
 8011378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137c:	4620      	mov	r0, r4
 801137e:	9b02      	ldr	r3, [sp, #8]
 8011380:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011384:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011388:	f000 f97c 	bl	8011684 <uxr_stamp_session_header>
 801138c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801138e:	9a03      	ldr	r2, [sp, #12]
 8011390:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011394:	9902      	ldr	r1, [sp, #8]
 8011396:	47a8      	blx	r5
 8011398:	f109 0901 	add.w	r9, r9, #1
 801139c:	7e23      	ldrb	r3, [r4, #24]
 801139e:	fa5f f089 	uxtb.w	r0, r9
 80113a2:	4283      	cmp	r3, r0
 80113a4:	d89b      	bhi.n	80112de <uxr_flash_output_streams+0x1a>
 80113a6:	e7b3      	b.n	8011310 <uxr_flash_output_streams+0x4c>

080113a8 <uxr_run_session_until_data>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	4604      	mov	r4, r0
 80113ac:	460d      	mov	r5, r1
 80113ae:	f000 ffed 	bl	801238c <uxr_millis>
 80113b2:	4606      	mov	r6, r0
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7ff ff85 	bl	80112c4 <uxr_flash_output_streams>
 80113ba:	2300      	movs	r3, #0
 80113bc:	4629      	mov	r1, r5
 80113be:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80113c2:	e005      	b.n	80113d0 <uxr_run_session_until_data+0x28>
 80113c4:	f000 ffe2 	bl	801238c <uxr_millis>
 80113c8:	1b81      	subs	r1, r0, r6
 80113ca:	1a69      	subs	r1, r5, r1
 80113cc:	2900      	cmp	r1, #0
 80113ce:	dd07      	ble.n	80113e0 <uxr_run_session_until_data+0x38>
 80113d0:	4620      	mov	r0, r4
 80113d2:	f7ff fd5d 	bl	8010e90 <listen_message_reliably>
 80113d6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80113da:	2800      	cmp	r0, #0
 80113dc:	d0f2      	beq.n	80113c4 <uxr_run_session_until_data+0x1c>
 80113de:	bd70      	pop	{r4, r5, r6, pc}
 80113e0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80113e4:	bd70      	pop	{r4, r5, r6, pc}
 80113e6:	bf00      	nop

080113e8 <uxr_run_session_until_confirm_delivery>:
 80113e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ec:	4606      	mov	r6, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	f000 ffcc 	bl	801238c <uxr_millis>
 80113f4:	4607      	mov	r7, r0
 80113f6:	4630      	mov	r0, r6
 80113f8:	f7ff ff64 	bl	80112c4 <uxr_flash_output_streams>
 80113fc:	2d00      	cmp	r5, #0
 80113fe:	bfa8      	it	ge
 8011400:	462c      	movge	r4, r5
 8011402:	f106 0808 	add.w	r8, r6, #8
 8011406:	da09      	bge.n	801141c <uxr_run_session_until_confirm_delivery+0x34>
 8011408:	e00d      	b.n	8011426 <uxr_run_session_until_confirm_delivery+0x3e>
 801140a:	4621      	mov	r1, r4
 801140c:	4630      	mov	r0, r6
 801140e:	f7ff fd3f 	bl	8010e90 <listen_message_reliably>
 8011412:	f000 ffbb 	bl	801238c <uxr_millis>
 8011416:	1bc1      	subs	r1, r0, r7
 8011418:	1a6c      	subs	r4, r5, r1
 801141a:	d404      	bmi.n	8011426 <uxr_run_session_until_confirm_delivery+0x3e>
 801141c:	4640      	mov	r0, r8
 801141e:	f000 ff59 	bl	80122d4 <uxr_output_streams_confirmed>
 8011422:	2800      	cmp	r0, #0
 8011424:	d0f1      	beq.n	801140a <uxr_run_session_until_confirm_delivery+0x22>
 8011426:	4640      	mov	r0, r8
 8011428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801142c:	f000 bf52 	b.w	80122d4 <uxr_output_streams_confirmed>

08011430 <uxr_run_session_until_all_status>:
 8011430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011436:	4688      	mov	r8, r1
 8011438:	4615      	mov	r5, r2
 801143a:	461c      	mov	r4, r3
 801143c:	4607      	mov	r7, r0
 801143e:	f7ff ff41 	bl	80112c4 <uxr_flash_output_streams>
 8011442:	b126      	cbz	r6, 801144e <uxr_run_session_until_all_status+0x1e>
 8011444:	4632      	mov	r2, r6
 8011446:	21ff      	movs	r1, #255	; 0xff
 8011448:	4620      	mov	r0, r4
 801144a:	f006 f963 	bl	8017714 <memset>
 801144e:	e9c7 541d 	strd	r5, r4, [r7, #116]	; 0x74
 8011452:	67fe      	str	r6, [r7, #124]	; 0x7c
 8011454:	f000 ff9a 	bl	801238c <uxr_millis>
 8011458:	4641      	mov	r1, r8
 801145a:	4681      	mov	r9, r0
 801145c:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8011460:	f1a5 0a02 	sub.w	sl, r5, #2
 8011464:	4638      	mov	r0, r7
 8011466:	f7ff fd13 	bl	8010e90 <listen_message_reliably>
 801146a:	f000 ff8f 	bl	801238c <uxr_millis>
 801146e:	eba0 0109 	sub.w	r1, r0, r9
 8011472:	eba8 0101 	sub.w	r1, r8, r1
 8011476:	b33e      	cbz	r6, 80114c8 <uxr_run_session_until_all_status+0x98>
 8011478:	4658      	mov	r0, fp
 801147a:	465c      	mov	r4, fp
 801147c:	2301      	movs	r3, #1
 801147e:	e002      	b.n	8011486 <uxr_run_session_until_all_status+0x56>
 8011480:	42b3      	cmp	r3, r6
 8011482:	d20c      	bcs.n	801149e <uxr_run_session_until_all_status+0x6e>
 8011484:	3301      	adds	r3, #1
 8011486:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801148a:	2dff      	cmp	r5, #255	; 0xff
 801148c:	d1f8      	bne.n	8011480 <uxr_run_session_until_all_status+0x50>
 801148e:	42b3      	cmp	r3, r6
 8011490:	f83a 2013 	ldrh.w	r2, [sl, r3, lsl #1]
 8011494:	d213      	bcs.n	80114be <uxr_run_session_until_all_status+0x8e>
 8011496:	2a00      	cmp	r2, #0
 8011498:	d0f4      	beq.n	8011484 <uxr_run_session_until_all_status+0x54>
 801149a:	2900      	cmp	r1, #0
 801149c:	dce2      	bgt.n	8011464 <uxr_run_session_until_all_status+0x34>
 801149e:	2300      	movs	r3, #0
 80114a0:	445e      	add	r6, fp
 80114a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80114a4:	e001      	b.n	80114aa <uxr_run_session_until_all_status+0x7a>
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d812      	bhi.n	80114d0 <uxr_run_session_until_all_status+0xa0>
 80114aa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80114ae:	4286      	cmp	r6, r0
 80114b0:	d1f9      	bne.n	80114a6 <uxr_run_session_until_all_status+0x76>
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	bf8c      	ite	hi
 80114b6:	2000      	movhi	r0, #0
 80114b8:	2001      	movls	r0, #1
 80114ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114be:	2900      	cmp	r1, #0
 80114c0:	dded      	ble.n	801149e <uxr_run_session_until_all_status+0x6e>
 80114c2:	2a00      	cmp	r2, #0
 80114c4:	d1ce      	bne.n	8011464 <uxr_run_session_until_all_status+0x34>
 80114c6:	e7ea      	b.n	801149e <uxr_run_session_until_all_status+0x6e>
 80114c8:	2001      	movs	r0, #1
 80114ca:	67fe      	str	r6, [r7, #124]	; 0x7c
 80114cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d0:	2000      	movs	r0, #0
 80114d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d6:	bf00      	nop

080114d8 <uxr_prepare_stream_to_write_submessage>:
 80114d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114dc:	4615      	mov	r5, r2
 80114de:	b082      	sub	sp, #8
 80114e0:	4682      	mov	sl, r0
 80114e2:	4610      	mov	r0, r2
 80114e4:	461e      	mov	r6, r3
 80114e6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80114ea:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80114ee:	9101      	str	r1, [sp, #4]
 80114f0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80114f4:	f000 ff44 	bl	8012380 <uxr_submessage_padding>
 80114f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80114fc:	f105 0904 	add.w	r9, r5, #4
 8011500:	2b01      	cmp	r3, #1
 8011502:	4481      	add	r9, r0
 8011504:	d01d      	beq.n	8011542 <uxr_prepare_stream_to_write_submessage+0x6a>
 8011506:	2b02      	cmp	r3, #2
 8011508:	d116      	bne.n	8011538 <uxr_prepare_stream_to_write_submessage+0x60>
 801150a:	4621      	mov	r1, r4
 801150c:	f10a 0008 	add.w	r0, sl, #8
 8011510:	f000 febe 	bl	8012290 <uxr_get_output_reliable_stream>
 8011514:	4604      	mov	r4, r0
 8011516:	b158      	cbz	r0, 8011530 <uxr_prepare_stream_to_write_submessage+0x58>
 8011518:	4649      	mov	r1, r9
 801151a:	4632      	mov	r2, r6
 801151c:	f005 fc52 	bl	8016dc4 <uxr_prepare_reliable_buffer_to_write>
 8011520:	4604      	mov	r4, r0
 8011522:	b12c      	cbz	r4, 8011530 <uxr_prepare_stream_to_write_submessage+0x58>
 8011524:	4643      	mov	r3, r8
 8011526:	4639      	mov	r1, r7
 8011528:	4630      	mov	r0, r6
 801152a:	b2aa      	uxth	r2, r5
 801152c:	f000 fee8 	bl	8012300 <uxr_buffer_submessage_header>
 8011530:	4620      	mov	r0, r4
 8011532:	b002      	add	sp, #8
 8011534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011538:	2400      	movs	r4, #0
 801153a:	4620      	mov	r0, r4
 801153c:	b002      	add	sp, #8
 801153e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011542:	4621      	mov	r1, r4
 8011544:	f10a 0008 	add.w	r0, sl, #8
 8011548:	f000 fe9a 	bl	8012280 <uxr_get_output_best_effort_stream>
 801154c:	4604      	mov	r4, r0
 801154e:	2800      	cmp	r0, #0
 8011550:	d0ee      	beq.n	8011530 <uxr_prepare_stream_to_write_submessage+0x58>
 8011552:	4649      	mov	r1, r9
 8011554:	4632      	mov	r2, r6
 8011556:	f005 fb71 	bl	8016c3c <uxr_prepare_best_effort_buffer_to_write>
 801155a:	4604      	mov	r4, r0
 801155c:	e7e1      	b.n	8011522 <uxr_prepare_stream_to_write_submessage+0x4a>
 801155e:	bf00      	nop

08011560 <uxr_init_session_info>:
 8011560:	b430      	push	{r4, r5}
 8011562:	23ff      	movs	r3, #255	; 0xff
 8011564:	2409      	movs	r4, #9
 8011566:	0e15      	lsrs	r5, r2, #24
 8011568:	7102      	strb	r2, [r0, #4]
 801156a:	7001      	strb	r1, [r0, #0]
 801156c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8011570:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011574:	7045      	strb	r5, [r0, #1]
 8011576:	80c4      	strh	r4, [r0, #6]
 8011578:	7081      	strb	r1, [r0, #2]
 801157a:	70c2      	strb	r2, [r0, #3]
 801157c:	7143      	strb	r3, [r0, #5]
 801157e:	bc30      	pop	{r4, r5}
 8011580:	4770      	bx	lr
 8011582:	bf00      	nop

08011584 <uxr_buffer_create_session>:
 8011584:	b570      	push	{r4, r5, r6, lr}
 8011586:	460c      	mov	r4, r1
 8011588:	2101      	movs	r1, #1
 801158a:	2300      	movs	r3, #0
 801158c:	b088      	sub	sp, #32
 801158e:	4d0f      	ldr	r5, [pc, #60]	; (80115cc <uxr_buffer_create_session+0x48>)
 8011590:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011594:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011598:	80c1      	strh	r1, [r0, #6]
 801159a:	9202      	str	r2, [sp, #8]
 801159c:	7800      	ldrb	r0, [r0, #0]
 801159e:	88aa      	ldrh	r2, [r5, #4]
 80115a0:	682e      	ldr	r6, [r5, #0]
 80115a2:	f88d 000c 	strb.w	r0, [sp, #12]
 80115a6:	f8ad 1004 	strh.w	r1, [sp, #4]
 80115aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 80115ae:	4619      	mov	r1, r3
 80115b0:	2210      	movs	r2, #16
 80115b2:	4620      	mov	r0, r4
 80115b4:	f88d 300d 	strb.w	r3, [sp, #13]
 80115b8:	9600      	str	r6, [sp, #0]
 80115ba:	f000 fea1 	bl	8012300 <uxr_buffer_submessage_header>
 80115be:	4620      	mov	r0, r4
 80115c0:	4669      	mov	r1, sp
 80115c2:	f001 fd71 	bl	80130a8 <uxr_serialize_CREATE_CLIENT_Payload>
 80115c6:	b008      	add	sp, #32
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
 80115ca:	bf00      	nop
 80115cc:	08019c68 	.word	0x08019c68

080115d0 <uxr_buffer_delete_session>:
 80115d0:	b530      	push	{r4, r5, lr}
 80115d2:	2202      	movs	r2, #2
 80115d4:	460c      	mov	r4, r1
 80115d6:	f44f 7500 	mov.w	r5, #512	; 0x200
 80115da:	4b0a      	ldr	r3, [pc, #40]	; (8011604 <uxr_buffer_delete_session+0x34>)
 80115dc:	b083      	sub	sp, #12
 80115de:	8919      	ldrh	r1, [r3, #8]
 80115e0:	80c2      	strh	r2, [r0, #6]
 80115e2:	2300      	movs	r3, #0
 80115e4:	2204      	movs	r2, #4
 80115e6:	f8ad 1006 	strh.w	r1, [sp, #6]
 80115ea:	4620      	mov	r0, r4
 80115ec:	2103      	movs	r1, #3
 80115ee:	f8ad 5004 	strh.w	r5, [sp, #4]
 80115f2:	f000 fe85 	bl	8012300 <uxr_buffer_submessage_header>
 80115f6:	4620      	mov	r0, r4
 80115f8:	a901      	add	r1, sp, #4
 80115fa:	f001 fdef 	bl	80131dc <uxr_serialize_DELETE_Payload>
 80115fe:	b003      	add	sp, #12
 8011600:	bd30      	pop	{r4, r5, pc}
 8011602:	bf00      	nop
 8011604:	08019c68 	.word	0x08019c68

08011608 <uxr_read_create_session_status>:
 8011608:	b510      	push	{r4, lr}
 801160a:	b088      	sub	sp, #32
 801160c:	4604      	mov	r4, r0
 801160e:	4608      	mov	r0, r1
 8011610:	a901      	add	r1, sp, #4
 8011612:	f001 fdf3 	bl	80131fc <uxr_deserialize_STATUS_AGENT_Payload>
 8011616:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801161a:	7163      	strb	r3, [r4, #5]
 801161c:	b008      	add	sp, #32
 801161e:	bd10      	pop	{r4, pc}

08011620 <uxr_read_delete_session_status>:
 8011620:	b510      	push	{r4, lr}
 8011622:	4604      	mov	r4, r0
 8011624:	b084      	sub	sp, #16
 8011626:	4608      	mov	r0, r1
 8011628:	a902      	add	r1, sp, #8
 801162a:	f001 fe17 	bl	801325c <uxr_deserialize_STATUS_Payload>
 801162e:	88e3      	ldrh	r3, [r4, #6]
 8011630:	2b02      	cmp	r3, #2
 8011632:	d001      	beq.n	8011638 <uxr_read_delete_session_status+0x18>
 8011634:	b004      	add	sp, #16
 8011636:	bd10      	pop	{r4, pc}
 8011638:	f10d 000a 	add.w	r0, sp, #10
 801163c:	f7ff f80e 	bl	801065c <uxr_object_id_from_raw>
 8011640:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011644:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011648:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801164c:	b29b      	uxth	r3, r3
 801164e:	2b02      	cmp	r3, #2
 8011650:	bf04      	itt	eq
 8011652:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011656:	7163      	strbeq	r3, [r4, #5]
 8011658:	b004      	add	sp, #16
 801165a:	bd10      	pop	{r4, pc}

0801165c <uxr_stamp_create_session_header>:
 801165c:	b510      	push	{r4, lr}
 801165e:	4604      	mov	r4, r0
 8011660:	b08a      	sub	sp, #40	; 0x28
 8011662:	a802      	add	r0, sp, #8
 8011664:	2208      	movs	r2, #8
 8011666:	f7fe fbc7 	bl	800fdf8 <ucdr_init_buffer>
 801166a:	2300      	movs	r3, #0
 801166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011670:	461a      	mov	r2, r3
 8011672:	a802      	add	r0, sp, #8
 8011674:	9400      	str	r4, [sp, #0]
 8011676:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801167a:	f001 f841 	bl	8012700 <uxr_serialize_message_header>
 801167e:	b00a      	add	sp, #40	; 0x28
 8011680:	bd10      	pop	{r4, pc}
 8011682:	bf00      	nop

08011684 <uxr_stamp_session_header>:
 8011684:	b570      	push	{r4, r5, r6, lr}
 8011686:	4604      	mov	r4, r0
 8011688:	460d      	mov	r5, r1
 801168a:	4616      	mov	r6, r2
 801168c:	b08a      	sub	sp, #40	; 0x28
 801168e:	4619      	mov	r1, r3
 8011690:	a802      	add	r0, sp, #8
 8011692:	2208      	movs	r2, #8
 8011694:	f7fe fbb0 	bl	800fdf8 <ucdr_init_buffer>
 8011698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169c:	4633      	mov	r3, r6
 801169e:	462a      	mov	r2, r5
 80116a0:	a802      	add	r0, sp, #8
 80116a2:	9400      	str	r4, [sp, #0]
 80116a4:	f001 f82c 	bl	8012700 <uxr_serialize_message_header>
 80116a8:	b00a      	add	sp, #40	; 0x28
 80116aa:	bd70      	pop	{r4, r5, r6, pc}

080116ac <uxr_read_session_header>:
 80116ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116b0:	4607      	mov	r7, r0
 80116b2:	b084      	sub	sp, #16
 80116b4:	4608      	mov	r0, r1
 80116b6:	460c      	mov	r4, r1
 80116b8:	4615      	mov	r5, r2
 80116ba:	461e      	mov	r6, r3
 80116bc:	f7fe fbce 	bl	800fe5c <ucdr_buffer_remaining>
 80116c0:	2808      	cmp	r0, #8
 80116c2:	d803      	bhi.n	80116cc <uxr_read_session_header+0x20>
 80116c4:	2000      	movs	r0, #0
 80116c6:	b004      	add	sp, #16
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	f10d 080c 	add.w	r8, sp, #12
 80116d0:	4633      	mov	r3, r6
 80116d2:	462a      	mov	r2, r5
 80116d4:	4620      	mov	r0, r4
 80116d6:	f8cd 8000 	str.w	r8, [sp]
 80116da:	f10d 010b 	add.w	r1, sp, #11
 80116de:	f001 f82d 	bl	801273c <uxr_deserialize_message_header>
 80116e2:	783a      	ldrb	r2, [r7, #0]
 80116e4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d1eb      	bne.n	80116c4 <uxr_read_session_header+0x18>
 80116ec:	061b      	lsls	r3, r3, #24
 80116ee:	d41b      	bmi.n	8011728 <uxr_read_session_header+0x7c>
 80116f0:	f898 2000 	ldrb.w	r2, [r8]
 80116f4:	787b      	ldrb	r3, [r7, #1]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d003      	beq.n	8011702 <uxr_read_session_header+0x56>
 80116fa:	2001      	movs	r0, #1
 80116fc:	f080 0001 	eor.w	r0, r0, #1
 8011700:	e7e1      	b.n	80116c6 <uxr_read_session_header+0x1a>
 8011702:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011706:	78bb      	ldrb	r3, [r7, #2]
 8011708:	1cb9      	adds	r1, r7, #2
 801170a:	429a      	cmp	r2, r3
 801170c:	d1f5      	bne.n	80116fa <uxr_read_session_header+0x4e>
 801170e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011712:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011716:	429a      	cmp	r2, r3
 8011718:	d1ef      	bne.n	80116fa <uxr_read_session_header+0x4e>
 801171a:	784b      	ldrb	r3, [r1, #1]
 801171c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011720:	429a      	cmp	r2, r3
 8011722:	d1ea      	bne.n	80116fa <uxr_read_session_header+0x4e>
 8011724:	2000      	movs	r0, #0
 8011726:	e7e9      	b.n	80116fc <uxr_read_session_header+0x50>
 8011728:	2001      	movs	r0, #1
 801172a:	e7cc      	b.n	80116c6 <uxr_read_session_header+0x1a>

0801172c <uxr_session_header_offset>:
 801172c:	f990 3000 	ldrsb.w	r3, [r0]
 8011730:	2b00      	cmp	r3, #0
 8011732:	bfac      	ite	ge
 8011734:	2008      	movge	r0, #8
 8011736:	2004      	movlt	r0, #4
 8011738:	4770      	bx	lr
 801173a:	bf00      	nop

0801173c <uxr_init_base_object_request>:
 801173c:	b530      	push	{r4, r5, lr}
 801173e:	f64f 75f4 	movw	r5, #65524	; 0xfff4
 8011742:	88c3      	ldrh	r3, [r0, #6]
 8011744:	b083      	sub	sp, #12
 8011746:	f1a3 040a 	sub.w	r4, r3, #10
 801174a:	b2a4      	uxth	r4, r4
 801174c:	42ac      	cmp	r4, r5
 801174e:	9101      	str	r1, [sp, #4]
 8011750:	d80e      	bhi.n	8011770 <uxr_init_base_object_request+0x34>
 8011752:	3301      	adds	r3, #1
 8011754:	b29c      	uxth	r4, r3
 8011756:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801175a:	b2db      	uxtb	r3, r3
 801175c:	80c4      	strh	r4, [r0, #6]
 801175e:	1c91      	adds	r1, r2, #2
 8011760:	9801      	ldr	r0, [sp, #4]
 8011762:	7015      	strb	r5, [r2, #0]
 8011764:	7053      	strb	r3, [r2, #1]
 8011766:	f7fe ff8d 	bl	8010684 <uxr_object_id_to_raw>
 801176a:	4620      	mov	r0, r4
 801176c:	b003      	add	sp, #12
 801176e:	bd30      	pop	{r4, r5, pc}
 8011770:	230a      	movs	r3, #10
 8011772:	2500      	movs	r5, #0
 8011774:	461c      	mov	r4, r3
 8011776:	e7f1      	b.n	801175c <uxr_init_base_object_request+0x20>

08011778 <uxr_parse_base_object_request>:
 8011778:	b570      	push	{r4, r5, r6, lr}
 801177a:	4604      	mov	r4, r0
 801177c:	3002      	adds	r0, #2
 801177e:	460d      	mov	r5, r1
 8011780:	4616      	mov	r6, r2
 8011782:	f7fe ff6b 	bl	801065c <uxr_object_id_from_raw>
 8011786:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801178a:	8028      	strh	r0, [r5, #0]
 801178c:	806b      	strh	r3, [r5, #2]
 801178e:	7822      	ldrb	r2, [r4, #0]
 8011790:	7863      	ldrb	r3, [r4, #1]
 8011792:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011796:	8033      	strh	r3, [r6, #0]
 8011798:	bd70      	pop	{r4, r5, r6, pc}
 801179a:	bf00      	nop

0801179c <uxr_init_framing_io>:
 801179c:	2300      	movs	r3, #0
 801179e:	7041      	strb	r1, [r0, #1]
 80117a0:	7003      	strb	r3, [r0, #0]
 80117a2:	8583      	strh	r3, [r0, #44]	; 0x2c
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop

080117a8 <uxr_write_framed_msg>:
 80117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ac:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80117b0:	4604      	mov	r4, r0
 80117b2:	7840      	ldrb	r0, [r0, #1]
 80117b4:	b085      	sub	sp, #20
 80117b6:	f1a0 057d 	sub.w	r5, r0, #125	; 0x7d
 80117ba:	2d01      	cmp	r5, #1
 80117bc:	460e      	mov	r6, r1
 80117be:	4617      	mov	r7, r2
 80117c0:	469b      	mov	fp, r3
 80117c2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80117c6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80117ca:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
 80117ce:	f240 8131 	bls.w	8011a34 <uxr_write_framed_msg+0x28c>
 80117d2:	2302      	movs	r3, #2
 80117d4:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 80117d8:	2a01      	cmp	r2, #1
 80117da:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80117de:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80117e2:	f240 8092 	bls.w	801190a <uxr_write_framed_msg+0x162>
 80117e6:	2303      	movs	r3, #3
 80117e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117ea:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 80117ee:	b2d0      	uxtb	r0, r2
 80117f0:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80117f4:	2a01      	cmp	r2, #1
 80117f6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80117fa:	f240 809c 	bls.w	8011936 <uxr_write_framed_msg+0x18e>
 80117fe:	18e2      	adds	r2, r4, r3
 8011800:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8011804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011806:	3301      	adds	r3, #1
 8011808:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801180c:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011810:	2a01      	cmp	r2, #1
 8011812:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011816:	f240 80a1 	bls.w	801195c <uxr_write_framed_msg+0x1b4>
 801181a:	1c5a      	adds	r2, r3, #1
 801181c:	4423      	add	r3, r4
 801181e:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8011822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011824:	b2d2      	uxtb	r2, r2
 8011826:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801182a:	2b00      	cmp	r3, #0
 801182c:	f000 80a6 	beq.w	801197c <uxr_write_framed_msg+0x1d4>
 8011830:	f04f 0a00 	mov.w	sl, #0
 8011834:	46d1      	mov	r9, sl
 8011836:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801183a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801183e:	2901      	cmp	r1, #1
 8011840:	f240 80bf 	bls.w	80119c2 <uxr_write_framed_msg+0x21a>
 8011844:	2a29      	cmp	r2, #41	; 0x29
 8011846:	f200 809c 	bhi.w	8011982 <uxr_write_framed_msg+0x1da>
 801184a:	1c50      	adds	r0, r2, #1
 801184c:	18a1      	adds	r1, r4, r2
 801184e:	b2c2      	uxtb	r2, r0
 8011850:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8011854:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011858:	ea8a 0303 	eor.w	r3, sl, r3
 801185c:	4988      	ldr	r1, [pc, #544]	; (8011a80 <uxr_write_framed_msg+0x2d8>)
 801185e:	b2db      	uxtb	r3, r3
 8011860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011864:	f109 0901 	add.w	r9, r9, #1
 8011868:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 801186c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801186e:	454b      	cmp	r3, r9
 8011870:	d8e1      	bhi.n	8011836 <uxr_write_framed_msg+0x8e>
 8011872:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011876:	fa5f f98a 	uxtb.w	r9, sl
 801187a:	9301      	str	r3, [sp, #4]
 801187c:	f04f 0b00 	mov.w	fp, #0
 8011880:	f88d 900c 	strb.w	r9, [sp, #12]
 8011884:	f88d 300d 	strb.w	r3, [sp, #13]
 8011888:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 801188c:	fa5f f18a 	uxtb.w	r1, sl
 8011890:	2901      	cmp	r1, #1
 8011892:	d921      	bls.n	80118d8 <uxr_write_framed_msg+0x130>
 8011894:	2a29      	cmp	r2, #41	; 0x29
 8011896:	f240 80a6 	bls.w	80119e6 <uxr_write_framed_msg+0x23e>
 801189a:	2500      	movs	r5, #0
 801189c:	e000      	b.n	80118a0 <uxr_write_framed_msg+0xf8>
 801189e:	b160      	cbz	r0, 80118ba <uxr_write_framed_msg+0x112>
 80118a0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80118a4:	1b52      	subs	r2, r2, r5
 80118a6:	4643      	mov	r3, r8
 80118a8:	4638      	mov	r0, r7
 80118aa:	4421      	add	r1, r4
 80118ac:	47b0      	blx	r6
 80118ae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80118b2:	4405      	add	r5, r0
 80118b4:	4295      	cmp	r5, r2
 80118b6:	d3f2      	bcc.n	801189e <uxr_write_framed_msg+0xf6>
 80118b8:	d003      	beq.n	80118c2 <uxr_write_framed_msg+0x11a>
 80118ba:	2000      	movs	r0, #0
 80118bc:	b005      	add	sp, #20
 80118be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c2:	f04f 0300 	mov.w	r3, #0
 80118c6:	fa5f f18a 	uxtb.w	r1, sl
 80118ca:	2901      	cmp	r1, #1
 80118cc:	f04f 0200 	mov.w	r2, #0
 80118d0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80118d4:	f200 8087 	bhi.w	80119e6 <uxr_write_framed_msg+0x23e>
 80118d8:	1c51      	adds	r1, r2, #1
 80118da:	b2c9      	uxtb	r1, r1
 80118dc:	2929      	cmp	r1, #41	; 0x29
 80118de:	d8dc      	bhi.n	801189a <uxr_write_framed_msg+0xf2>
 80118e0:	1c91      	adds	r1, r2, #2
 80118e2:	18a0      	adds	r0, r4, r2
 80118e4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80118e8:	b2ca      	uxtb	r2, r1
 80118ea:	4659      	mov	r1, fp
 80118ec:	f089 0920 	eor.w	r9, r9, #32
 80118f0:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 80118f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80118f8:	f04f 0b01 	mov.w	fp, #1
 80118fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011900:	2900      	cmp	r1, #0
 8011902:	d17c      	bne.n	80119fe <uxr_write_framed_msg+0x256>
 8011904:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011908:	e7be      	b.n	8011888 <uxr_write_framed_msg+0xe0>
 801190a:	461a      	mov	r2, r3
 801190c:	2503      	movs	r5, #3
 801190e:	2304      	movs	r3, #4
 8011910:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8011914:	980e      	ldr	r0, [sp, #56]	; 0x38
 8011916:	4422      	add	r2, r4
 8011918:	b2c0      	uxtb	r0, r0
 801191a:	f882 c038 	strb.w	ip, [r2, #56]	; 0x38
 801191e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011922:	4425      	add	r5, r4
 8011924:	f081 0120 	eor.w	r1, r1, #32
 8011928:	2a01      	cmp	r2, #1
 801192a:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
 801192e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011932:	f63f af64 	bhi.w	80117fe <uxr_write_framed_msg+0x56>
 8011936:	217d      	movs	r1, #125	; 0x7d
 8011938:	18e2      	adds	r2, r4, r3
 801193a:	f080 0020 	eor.w	r0, r0, #32
 801193e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8011942:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
 8011946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011948:	3302      	adds	r3, #2
 801194a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801194e:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011952:	2a01      	cmp	r2, #1
 8011954:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011958:	f63f af5f 	bhi.w	801181a <uxr_write_framed_msg+0x72>
 801195c:	257d      	movs	r5, #125	; 0x7d
 801195e:	18e0      	adds	r0, r4, r3
 8011960:	3302      	adds	r3, #2
 8011962:	b2da      	uxtb	r2, r3
 8011964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011966:	f081 0120 	eor.w	r1, r1, #32
 801196a:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 801196e:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011972:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011976:	2b00      	cmp	r3, #0
 8011978:	f47f af5a 	bne.w	8011830 <uxr_write_framed_msg+0x88>
 801197c:	4699      	mov	r9, r3
 801197e:	9301      	str	r3, [sp, #4]
 8011980:	e77c      	b.n	801187c <uxr_write_framed_msg+0xd4>
 8011982:	2500      	movs	r5, #0
 8011984:	e001      	b.n	801198a <uxr_write_framed_msg+0x1e2>
 8011986:	2800      	cmp	r0, #0
 8011988:	d097      	beq.n	80118ba <uxr_write_framed_msg+0x112>
 801198a:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801198e:	1b52      	subs	r2, r2, r5
 8011990:	4643      	mov	r3, r8
 8011992:	4638      	mov	r0, r7
 8011994:	4421      	add	r1, r4
 8011996:	47b0      	blx	r6
 8011998:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801199c:	4405      	add	r5, r0
 801199e:	4295      	cmp	r5, r2
 80119a0:	d3f1      	bcc.n	8011986 <uxr_write_framed_msg+0x1de>
 80119a2:	d18a      	bne.n	80118ba <uxr_write_framed_msg+0x112>
 80119a4:	f04f 0300 	mov.w	r3, #0
 80119a8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80119ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119ae:	454b      	cmp	r3, r9
 80119b0:	d95f      	bls.n	8011a72 <uxr_write_framed_msg+0x2ca>
 80119b2:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80119bc:	2901      	cmp	r1, #1
 80119be:	f63f af41 	bhi.w	8011844 <uxr_write_framed_msg+0x9c>
 80119c2:	1c51      	adds	r1, r2, #1
 80119c4:	b2c9      	uxtb	r1, r1
 80119c6:	2929      	cmp	r1, #41	; 0x29
 80119c8:	d8db      	bhi.n	8011982 <uxr_write_framed_msg+0x1da>
 80119ca:	1c95      	adds	r5, r2, #2
 80119cc:	18a0      	adds	r0, r4, r2
 80119ce:	b2ea      	uxtb	r2, r5
 80119d0:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80119d4:	f083 0120 	eor.w	r1, r3, #32
 80119d8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80119dc:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80119e0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80119e4:	e738      	b.n	8011858 <uxr_write_framed_msg+0xb0>
 80119e6:	4659      	mov	r1, fp
 80119e8:	1c55      	adds	r5, r2, #1
 80119ea:	18a0      	adds	r0, r4, r2
 80119ec:	b2ea      	uxtb	r2, r5
 80119ee:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 80119f2:	f04f 0b01 	mov.w	fp, #1
 80119f6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80119fa:	2900      	cmp	r1, #0
 80119fc:	d082      	beq.n	8011904 <uxr_write_framed_msg+0x15c>
 80119fe:	2500      	movs	r5, #0
 8011a00:	e002      	b.n	8011a08 <uxr_write_framed_msg+0x260>
 8011a02:	2800      	cmp	r0, #0
 8011a04:	f43f af59 	beq.w	80118ba <uxr_write_framed_msg+0x112>
 8011a08:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011a0c:	1b52      	subs	r2, r2, r5
 8011a0e:	4643      	mov	r3, r8
 8011a10:	4638      	mov	r0, r7
 8011a12:	4421      	add	r1, r4
 8011a14:	47b0      	blx	r6
 8011a16:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011a1a:	4405      	add	r5, r0
 8011a1c:	4295      	cmp	r5, r2
 8011a1e:	d3f0      	bcc.n	8011a02 <uxr_write_framed_msg+0x25a>
 8011a20:	f47f af4b 	bne.w	80118ba <uxr_write_framed_msg+0x112>
 8011a24:	2300      	movs	r3, #0
 8011a26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a28:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011a2c:	b290      	uxth	r0, r2
 8011a2e:	b005      	add	sp, #20
 8011a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a34:	2303      	movs	r3, #3
 8011a36:	257d      	movs	r5, #125	; 0x7d
 8011a38:	f1a1 027d 	sub.w	r2, r1, #125	; 0x7d
 8011a3c:	f080 0020 	eor.w	r0, r0, #32
 8011a40:	2a01      	cmp	r2, #1
 8011a42:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8011a46:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011a4a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8011a4e:	d803      	bhi.n	8011a58 <uxr_write_framed_msg+0x2b0>
 8011a50:	461a      	mov	r2, r3
 8011a52:	2504      	movs	r5, #4
 8011a54:	2305      	movs	r3, #5
 8011a56:	e75b      	b.n	8011910 <uxr_write_framed_msg+0x168>
 8011a58:	2304      	movs	r3, #4
 8011a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a5c:	f884 103b 	strb.w	r1, [r4, #59]	; 0x3b
 8011a60:	b2d0      	uxtb	r0, r2
 8011a62:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011a66:	2a01      	cmp	r2, #1
 8011a68:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011a6c:	f63f aec7 	bhi.w	80117fe <uxr_write_framed_msg+0x56>
 8011a70:	e761      	b.n	8011936 <uxr_write_framed_msg+0x18e>
 8011a72:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011a76:	2200      	movs	r2, #0
 8011a78:	fa5f f98a 	uxtb.w	r9, sl
 8011a7c:	9301      	str	r3, [sp, #4]
 8011a7e:	e6fd      	b.n	801187c <uxr_write_framed_msg+0xd4>
 8011a80:	0801a05c 	.word	0x0801a05c

08011a84 <uxr_framing_read_transport>:
 8011a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a88:	4604      	mov	r4, r0
 8011a8a:	b083      	sub	sp, #12
 8011a8c:	461f      	mov	r7, r3
 8011a8e:	4689      	mov	r9, r1
 8011a90:	4692      	mov	sl, r2
 8011a92:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011a96:	f000 fc79 	bl	801238c <uxr_millis>
 8011a9a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011a9e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8011aa2:	4680      	mov	r8, r0
 8011aa4:	42b3      	cmp	r3, r6
 8011aa6:	d060      	beq.n	8011b6a <uxr_framing_read_transport+0xe6>
 8011aa8:	d81c      	bhi.n	8011ae4 <uxr_framing_read_transport+0x60>
 8011aaa:	1e75      	subs	r5, r6, #1
 8011aac:	2600      	movs	r6, #0
 8011aae:	1aed      	subs	r5, r5, r3
 8011ab0:	b2ed      	uxtb	r5, r5
 8011ab2:	455d      	cmp	r5, fp
 8011ab4:	d81f      	bhi.n	8011af6 <uxr_framing_read_transport+0x72>
 8011ab6:	19ab      	adds	r3, r5, r6
 8011ab8:	455b      	cmp	r3, fp
 8011aba:	bf84      	itt	hi
 8011abc:	ebab 0605 	subhi.w	r6, fp, r5
 8011ac0:	b2f6      	uxtbhi	r6, r6
 8011ac2:	b9ed      	cbnz	r5, 8011b00 <uxr_framing_read_transport+0x7c>
 8011ac4:	f04f 0b00 	mov.w	fp, #0
 8011ac8:	f000 fc60 	bl	801238c <uxr_millis>
 8011acc:	eba0 0808 	sub.w	r8, r0, r8
 8011ad0:	4658      	mov	r0, fp
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	eba3 0308 	sub.w	r3, r3, r8
 8011ad8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011adc:	603b      	str	r3, [r7, #0]
 8011ade:	b003      	add	sp, #12
 8011ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae4:	2e00      	cmp	r6, #0
 8011ae6:	d048      	beq.n	8011b7a <uxr_framing_read_transport+0xf6>
 8011ae8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8011aec:	b2ed      	uxtb	r5, r5
 8011aee:	3e01      	subs	r6, #1
 8011af0:	455d      	cmp	r5, fp
 8011af2:	b2f6      	uxtb	r6, r6
 8011af4:	d9df      	bls.n	8011ab6 <uxr_framing_read_transport+0x32>
 8011af6:	fa5f f58b 	uxtb.w	r5, fp
 8011afa:	2600      	movs	r6, #0
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	d0e1      	beq.n	8011ac4 <uxr_framing_read_transport+0x40>
 8011b00:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011b04:	3102      	adds	r1, #2
 8011b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b08:	462a      	mov	r2, r5
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	4421      	add	r1, r4
 8011b10:	4650      	mov	r0, sl
 8011b12:	47c8      	blx	r9
 8011b14:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011b18:	4a1b      	ldr	r2, [pc, #108]	; (8011b88 <uxr_framing_read_transport+0x104>)
 8011b1a:	4403      	add	r3, r0
 8011b1c:	0859      	lsrs	r1, r3, #1
 8011b1e:	fba2 2101 	umull	r2, r1, r2, r1
 8011b22:	222a      	movs	r2, #42	; 0x2a
 8011b24:	0889      	lsrs	r1, r1, #2
 8011b26:	fb02 3111 	mls	r1, r2, r1, r3
 8011b2a:	4683      	mov	fp, r0
 8011b2c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d0c7      	beq.n	8011ac4 <uxr_framing_read_transport+0x40>
 8011b34:	42a8      	cmp	r0, r5
 8011b36:	d1c7      	bne.n	8011ac8 <uxr_framing_read_transport+0x44>
 8011b38:	b31e      	cbz	r6, 8011b82 <uxr_framing_read_transport+0xfe>
 8011b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b3c:	3102      	adds	r1, #2
 8011b3e:	4632      	mov	r2, r6
 8011b40:	4421      	add	r1, r4
 8011b42:	9300      	str	r3, [sp, #0]
 8011b44:	4650      	mov	r0, sl
 8011b46:	2300      	movs	r3, #0
 8011b48:	47c8      	blx	r9
 8011b4a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011b4e:	4a0e      	ldr	r2, [pc, #56]	; (8011b88 <uxr_framing_read_transport+0x104>)
 8011b50:	1819      	adds	r1, r3, r0
 8011b52:	084b      	lsrs	r3, r1, #1
 8011b54:	fba2 2303 	umull	r2, r3, r2, r3
 8011b58:	222a      	movs	r2, #42	; 0x2a
 8011b5a:	089b      	lsrs	r3, r3, #2
 8011b5c:	fb02 1313 	mls	r3, r2, r3, r1
 8011b60:	eb00 0b05 	add.w	fp, r0, r5
 8011b64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8011b68:	e7ae      	b.n	8011ac8 <uxr_framing_read_transport+0x44>
 8011b6a:	2600      	movs	r6, #0
 8011b6c:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8011b70:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8011b72:	d9c0      	bls.n	8011af6 <uxr_framing_read_transport+0x72>
 8011b74:	2102      	movs	r1, #2
 8011b76:	2529      	movs	r5, #41	; 0x29
 8011b78:	e7c5      	b.n	8011b06 <uxr_framing_read_transport+0x82>
 8011b7a:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8011b7e:	b2ed      	uxtb	r5, r5
 8011b80:	e797      	b.n	8011ab2 <uxr_framing_read_transport+0x2e>
 8011b82:	46ab      	mov	fp, r5
 8011b84:	e7a0      	b.n	8011ac8 <uxr_framing_read_transport+0x44>
 8011b86:	bf00      	nop
 8011b88:	30c30c31 	.word	0x30c30c31

08011b8c <uxr_read_framed_msg>:
 8011b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b90:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8011b94:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8011b98:	4604      	mov	r4, r0
 8011b9a:	42ae      	cmp	r6, r5
 8011b9c:	461f      	mov	r7, r3
 8011b9e:	4689      	mov	r9, r1
 8011ba0:	4692      	mov	sl, r2
 8011ba2:	b083      	sub	sp, #12
 8011ba4:	f000 8176 	beq.w	8011e94 <uxr_read_framed_msg+0x308>
 8011ba8:	7823      	ldrb	r3, [r4, #0]
 8011baa:	4ec7      	ldr	r6, [pc, #796]	; (8011ec8 <uxr_read_framed_msg+0x33c>)
 8011bac:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8011ecc <uxr_read_framed_msg+0x340>
 8011bb0:	2b07      	cmp	r3, #7
 8011bb2:	d8fd      	bhi.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011bb4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011bb8:	00ee010d 	.word	0x00ee010d
 8011bbc:	00b100ce 	.word	0x00b100ce
 8011bc0:	004d0088 	.word	0x004d0088
 8011bc4:	00080030 	.word	0x00080030
 8011bc8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011bcc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	f000 813a 	beq.w	8011e4a <uxr_read_framed_msg+0x2be>
 8011bd6:	18e1      	adds	r1, r4, r3
 8011bd8:	7889      	ldrb	r1, [r1, #2]
 8011bda:	202a      	movs	r0, #42	; 0x2a
 8011bdc:	297d      	cmp	r1, #125	; 0x7d
 8011bde:	f000 81b0 	beq.w	8011f42 <uxr_read_framed_msg+0x3b6>
 8011be2:	3301      	adds	r3, #1
 8011be4:	085a      	lsrs	r2, r3, #1
 8011be6:	fba6 5202 	umull	r5, r2, r6, r2
 8011bea:	0892      	lsrs	r2, r2, #2
 8011bec:	fb00 3312 	mls	r3, r0, r2, r3
 8011bf0:	297e      	cmp	r1, #126	; 0x7e
 8011bf2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011bf6:	f000 8244 	beq.w	8012082 <uxr_read_framed_msg+0x4f6>
 8011bfa:	2000      	movs	r0, #0
 8011bfc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011bfe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011c00:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	429a      	cmp	r2, r3
 8011c08:	86a3      	strh	r3, [r4, #52]	; 0x34
 8011c0a:	7020      	strb	r0, [r4, #0]
 8011c0c:	f000 8176 	beq.w	8011efc <uxr_read_framed_msg+0x370>
 8011c10:	2000      	movs	r0, #0
 8011c12:	b003      	add	sp, #12
 8011c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c18:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011c1c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011c20:	429a      	cmp	r2, r3
 8011c22:	f000 8121 	beq.w	8011e68 <uxr_read_framed_msg+0x2dc>
 8011c26:	18e1      	adds	r1, r4, r3
 8011c28:	7889      	ldrb	r1, [r1, #2]
 8011c2a:	202a      	movs	r0, #42	; 0x2a
 8011c2c:	297d      	cmp	r1, #125	; 0x7d
 8011c2e:	f000 816d 	beq.w	8011f0c <uxr_read_framed_msg+0x380>
 8011c32:	3301      	adds	r3, #1
 8011c34:	085a      	lsrs	r2, r3, #1
 8011c36:	fba6 5202 	umull	r5, r2, r6, r2
 8011c3a:	0892      	lsrs	r2, r2, #2
 8011c3c:	fb00 3312 	mls	r3, r0, r2, r3
 8011c40:	297e      	cmp	r1, #126	; 0x7e
 8011c42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011c46:	f000 820c 	beq.w	8012062 <uxr_read_framed_msg+0x4d6>
 8011c4a:	2307      	movs	r3, #7
 8011c4c:	86a1      	strh	r1, [r4, #52]	; 0x34
 8011c4e:	7023      	strb	r3, [r4, #0]
 8011c50:	e7ae      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011c52:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8011c54:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8011c58:	459e      	cmp	lr, r3
 8011c5a:	d930      	bls.n	8011cbe <uxr_read_framed_msg+0x132>
 8011c5c:	252a      	movs	r5, #42	; 0x2a
 8011c5e:	e021      	b.n	8011ca4 <uxr_read_framed_msg+0x118>
 8011c60:	7889      	ldrb	r1, [r1, #2]
 8011c62:	297d      	cmp	r1, #125	; 0x7d
 8011c64:	f000 80d1 	beq.w	8011e0a <uxr_read_framed_msg+0x27e>
 8011c68:	fba6 2000 	umull	r2, r0, r6, r0
 8011c6c:	0880      	lsrs	r0, r0, #2
 8011c6e:	fb05 c010 	mls	r0, r5, r0, ip
 8011c72:	297e      	cmp	r1, #126	; 0x7e
 8011c74:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8011c78:	f000 80c4 	beq.w	8011e04 <uxr_read_framed_msg+0x278>
 8011c7c:	54f9      	strb	r1, [r7, r3]
 8011c7e:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 8011c82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8011c84:	ea8c 0001 	eor.w	r0, ip, r1
 8011c88:	b2c0      	uxtb	r0, r0
 8011c8a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
 8011c8e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8011c92:	3301      	adds	r3, #1
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	ea82 221c 	eor.w	r2, r2, ip, lsr #8
 8011c9a:	4573      	cmp	r3, lr
 8011c9c:	86e2      	strh	r2, [r4, #54]	; 0x36
 8011c9e:	8663      	strh	r3, [r4, #50]	; 0x32
 8011ca0:	f080 8116 	bcs.w	8011ed0 <uxr_read_framed_msg+0x344>
 8011ca4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011ca8:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 8011cac:	f102 0c01 	add.w	ip, r2, #1
 8011cb0:	4593      	cmp	fp, r2
 8011cb2:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8011cb6:	eb04 0102 	add.w	r1, r4, r2
 8011cba:	d1d1      	bne.n	8011c60 <uxr_read_framed_msg+0xd4>
 8011cbc:	459e      	cmp	lr, r3
 8011cbe:	f040 810b 	bne.w	8011ed8 <uxr_read_framed_msg+0x34c>
 8011cc2:	2306      	movs	r3, #6
 8011cc4:	7023      	strb	r3, [r4, #0]
 8011cc6:	e773      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011cc8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011ccc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	f000 80ba 	beq.w	8011e4a <uxr_read_framed_msg+0x2be>
 8011cd6:	18e1      	adds	r1, r4, r3
 8011cd8:	7889      	ldrb	r1, [r1, #2]
 8011cda:	202a      	movs	r0, #42	; 0x2a
 8011cdc:	297d      	cmp	r1, #125	; 0x7d
 8011cde:	f000 818a 	beq.w	8011ff6 <uxr_read_framed_msg+0x46a>
 8011ce2:	3301      	adds	r3, #1
 8011ce4:	085a      	lsrs	r2, r3, #1
 8011ce6:	fba6 5202 	umull	r5, r2, r6, r2
 8011cea:	0892      	lsrs	r2, r2, #2
 8011cec:	fb00 3212 	mls	r2, r0, r2, r3
 8011cf0:	297e      	cmp	r1, #126	; 0x7e
 8011cf2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011cf6:	f000 81c4 	beq.w	8012082 <uxr_read_framed_msg+0x4f6>
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011cfe:	8660      	strh	r0, [r4, #50]	; 0x32
 8011d00:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011d04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	428b      	cmp	r3, r1
 8011d0a:	8623      	strh	r3, [r4, #48]	; 0x30
 8011d0c:	86e0      	strh	r0, [r4, #54]	; 0x36
 8011d0e:	f240 80d8 	bls.w	8011ec2 <uxr_read_framed_msg+0x336>
 8011d12:	7020      	strb	r0, [r4, #0]
 8011d14:	b003      	add	sp, #12
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011d1e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011d22:	429a      	cmp	r2, r3
 8011d24:	f000 80a0 	beq.w	8011e68 <uxr_read_framed_msg+0x2dc>
 8011d28:	18e1      	adds	r1, r4, r3
 8011d2a:	7889      	ldrb	r1, [r1, #2]
 8011d2c:	202a      	movs	r0, #42	; 0x2a
 8011d2e:	297d      	cmp	r1, #125	; 0x7d
 8011d30:	f000 817c 	beq.w	801202c <uxr_read_framed_msg+0x4a0>
 8011d34:	3301      	adds	r3, #1
 8011d36:	085a      	lsrs	r2, r3, #1
 8011d38:	fba6 5202 	umull	r5, r2, r6, r2
 8011d3c:	0892      	lsrs	r2, r2, #2
 8011d3e:	fb00 3312 	mls	r3, r0, r2, r3
 8011d42:	297e      	cmp	r1, #126	; 0x7e
 8011d44:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011d48:	f000 818b 	beq.w	8012062 <uxr_read_framed_msg+0x4d6>
 8011d4c:	2304      	movs	r3, #4
 8011d4e:	8621      	strh	r1, [r4, #48]	; 0x30
 8011d50:	7023      	strb	r3, [r4, #0]
 8011d52:	e72d      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011d54:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011d58:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011d5c:	4291      	cmp	r1, r2
 8011d5e:	f000 80ae 	beq.w	8011ebe <uxr_read_framed_msg+0x332>
 8011d62:	18a3      	adds	r3, r4, r2
 8011d64:	7898      	ldrb	r0, [r3, #2]
 8011d66:	287d      	cmp	r0, #125	; 0x7d
 8011d68:	f000 8107 	beq.w	8011f7a <uxr_read_framed_msg+0x3ee>
 8011d6c:	232a      	movs	r3, #42	; 0x2a
 8011d6e:	3201      	adds	r2, #1
 8011d70:	0851      	lsrs	r1, r2, #1
 8011d72:	fba6 5101 	umull	r5, r1, r6, r1
 8011d76:	0889      	lsrs	r1, r1, #2
 8011d78:	fb03 2211 	mls	r2, r3, r1, r2
 8011d7c:	287e      	cmp	r0, #126	; 0x7e
 8011d7e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011d82:	f000 8180 	beq.w	8012086 <uxr_read_framed_msg+0x4fa>
 8011d86:	7863      	ldrb	r3, [r4, #1]
 8011d88:	4283      	cmp	r3, r0
 8011d8a:	bf0c      	ite	eq
 8011d8c:	2303      	moveq	r3, #3
 8011d8e:	2300      	movne	r3, #0
 8011d90:	7023      	strb	r3, [r4, #0]
 8011d92:	e70d      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011d94:	2200      	movs	r2, #0
 8011d96:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011d9a:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8011d9e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8011da2:	4288      	cmp	r0, r1
 8011da4:	d062      	beq.n	8011e6c <uxr_read_framed_msg+0x2e0>
 8011da6:	1862      	adds	r2, r4, r1
 8011da8:	7892      	ldrb	r2, [r2, #2]
 8011daa:	2a7d      	cmp	r2, #125	; 0x7d
 8011dac:	f000 8100 	beq.w	8011fb0 <uxr_read_framed_msg+0x424>
 8011db0:	202a      	movs	r0, #42	; 0x2a
 8011db2:	3101      	adds	r1, #1
 8011db4:	084b      	lsrs	r3, r1, #1
 8011db6:	fba6 5303 	umull	r5, r3, r6, r3
 8011dba:	089b      	lsrs	r3, r3, #2
 8011dbc:	fb00 1313 	mls	r3, r0, r3, r1
 8011dc0:	2a7e      	cmp	r2, #126	; 0x7e
 8011dc2:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8011dc6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011dca:	d04f      	beq.n	8011e6c <uxr_read_framed_msg+0x2e0>
 8011dcc:	2302      	movs	r3, #2
 8011dce:	7023      	strb	r3, [r4, #0]
 8011dd0:	e6ee      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011dd2:	252a      	movs	r5, #42	; 0x2a
 8011dd4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011dd8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011ddc:	f103 0c01 	add.w	ip, r3, #1
 8011de0:	4298      	cmp	r0, r3
 8011de2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011de6:	eb04 0103 	add.w	r1, r4, r3
 8011dea:	f43f af11 	beq.w	8011c10 <uxr_read_framed_msg+0x84>
 8011dee:	fba6 3202 	umull	r3, r2, r6, r2
 8011df2:	0892      	lsrs	r2, r2, #2
 8011df4:	fb05 c212 	mls	r2, r5, r2, ip
 8011df8:	7889      	ldrb	r1, [r1, #2]
 8011dfa:	b2d3      	uxtb	r3, r2
 8011dfc:	297e      	cmp	r1, #126	; 0x7e
 8011dfe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011e02:	d1eb      	bne.n	8011ddc <uxr_read_framed_msg+0x250>
 8011e04:	2301      	movs	r3, #1
 8011e06:	7023      	strb	r3, [r4, #0]
 8011e08:	e6d2      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011e0a:	f102 0c01 	add.w	ip, r2, #1
 8011e0e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8011e12:	fba6 0101 	umull	r0, r1, r6, r1
 8011e16:	0889      	lsrs	r1, r1, #2
 8011e18:	fb05 c111 	mls	r1, r5, r1, ip
 8011e1c:	eb04 0c01 	add.w	ip, r4, r1
 8011e20:	b2c9      	uxtb	r1, r1
 8011e22:	3202      	adds	r2, #2
 8011e24:	458b      	cmp	fp, r1
 8011e26:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8011e2a:	f43f af47 	beq.w	8011cbc <uxr_read_framed_msg+0x130>
 8011e2e:	fba6 1000 	umull	r1, r0, r6, r0
 8011e32:	0880      	lsrs	r0, r0, #2
 8011e34:	fb05 2210 	mls	r2, r5, r0, r2
 8011e38:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8011e3c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011e40:	297e      	cmp	r1, #126	; 0x7e
 8011e42:	d036      	beq.n	8011eb2 <uxr_read_framed_msg+0x326>
 8011e44:	f081 0120 	eor.w	r1, r1, #32
 8011e48:	e718      	b.n	8011c7c <uxr_read_framed_msg+0xf0>
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e4e:	4649      	mov	r1, r9
 8011e50:	e9cd 2300 	strd	r2, r3, [sp]
 8011e54:	4620      	mov	r0, r4
 8011e56:	4652      	mov	r2, sl
 8011e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e5a:	f7ff fe13 	bl	8011a84 <uxr_framing_read_transport>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	f43f aed6 	beq.w	8011c10 <uxr_read_framed_msg+0x84>
 8011e64:	7823      	ldrb	r3, [r4, #0]
 8011e66:	e6a3      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011e68:	2302      	movs	r3, #2
 8011e6a:	e7ef      	b.n	8011e4c <uxr_read_framed_msg+0x2c0>
 8011e6c:	2304      	movs	r3, #4
 8011e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e70:	4649      	mov	r1, r9
 8011e72:	e9cd 2300 	strd	r2, r3, [sp]
 8011e76:	4620      	mov	r0, r4
 8011e78:	4652      	mov	r2, sl
 8011e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e7c:	f7ff fe02 	bl	8011a84 <uxr_framing_read_transport>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d1ef      	bne.n	8011e64 <uxr_read_framed_msg+0x2d8>
 8011e84:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8011e88:	387e      	subs	r0, #126	; 0x7e
 8011e8a:	bf18      	it	ne
 8011e8c:	2001      	movne	r0, #1
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d0e8      	beq.n	8011e64 <uxr_read_framed_msg+0x2d8>
 8011e92:	e6bd      	b.n	8011c10 <uxr_read_framed_msg+0x84>
 8011e94:	2305      	movs	r3, #5
 8011e96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011e98:	e9cd 5300 	strd	r5, r3, [sp]
 8011e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e9e:	f7ff fdf1 	bl	8011a84 <uxr_framing_read_transport>
 8011ea2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011ea6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	f43f aeb0 	beq.w	8011c10 <uxr_read_framed_msg+0x84>
 8011eb0:	e67a      	b.n	8011ba8 <uxr_read_framed_msg+0x1c>
 8011eb2:	459e      	cmp	lr, r3
 8011eb4:	f43f af05 	beq.w	8011cc2 <uxr_read_framed_msg+0x136>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	7023      	strb	r3, [r4, #0]
 8011ebc:	e678      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011ebe:	2303      	movs	r3, #3
 8011ec0:	e7c4      	b.n	8011e4c <uxr_read_framed_msg+0x2c0>
 8011ec2:	2305      	movs	r3, #5
 8011ec4:	7023      	strb	r3, [r4, #0]
 8011ec6:	e673      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8011ec8:	30c30c31 	.word	0x30c30c31
 8011ecc:	0801a05c 	.word	0x0801a05c
 8011ed0:	f43f aef7 	beq.w	8011cc2 <uxr_read_framed_msg+0x136>
 8011ed4:	297e      	cmp	r1, #126	; 0x7e
 8011ed6:	d095      	beq.n	8011e04 <uxr_read_framed_msg+0x278>
 8011ed8:	ebae 0303 	sub.w	r3, lr, r3
 8011edc:	3302      	adds	r3, #2
 8011ede:	9301      	str	r3, [sp, #4]
 8011ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ee2:	4652      	mov	r2, sl
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	4649      	mov	r1, r9
 8011ee8:	4620      	mov	r0, r4
 8011eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011eec:	f7ff fdca 	bl	8011a84 <uxr_framing_read_transport>
 8011ef0:	fab0 f080 	clz	r0, r0
 8011ef4:	0940      	lsrs	r0, r0, #5
 8011ef6:	2800      	cmp	r0, #0
 8011ef8:	d0b4      	beq.n	8011e64 <uxr_read_framed_msg+0x2d8>
 8011efa:	e689      	b.n	8011c10 <uxr_read_framed_msg+0x84>
 8011efc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8011f06:	b003      	add	sp, #12
 8011f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f0c:	1c5d      	adds	r5, r3, #1
 8011f0e:	0869      	lsrs	r1, r5, #1
 8011f10:	fba6 c101 	umull	ip, r1, r6, r1
 8011f14:	0889      	lsrs	r1, r1, #2
 8011f16:	fb00 5111 	mls	r1, r0, r1, r5
 8011f1a:	b2cd      	uxtb	r5, r1
 8011f1c:	42aa      	cmp	r2, r5
 8011f1e:	d0a3      	beq.n	8011e68 <uxr_read_framed_msg+0x2dc>
 8011f20:	3302      	adds	r3, #2
 8011f22:	085a      	lsrs	r2, r3, #1
 8011f24:	fba6 5202 	umull	r5, r2, r6, r2
 8011f28:	0892      	lsrs	r2, r2, #2
 8011f2a:	fb00 3212 	mls	r2, r0, r2, r3
 8011f2e:	1863      	adds	r3, r4, r1
 8011f30:	7899      	ldrb	r1, [r3, #2]
 8011f32:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011f36:	297e      	cmp	r1, #126	; 0x7e
 8011f38:	f000 8093 	beq.w	8012062 <uxr_read_framed_msg+0x4d6>
 8011f3c:	f081 0120 	eor.w	r1, r1, #32
 8011f40:	e683      	b.n	8011c4a <uxr_read_framed_msg+0xbe>
 8011f42:	1c5d      	adds	r5, r3, #1
 8011f44:	0869      	lsrs	r1, r5, #1
 8011f46:	fba6 c101 	umull	ip, r1, r6, r1
 8011f4a:	0889      	lsrs	r1, r1, #2
 8011f4c:	fb00 5111 	mls	r1, r0, r1, r5
 8011f50:	b2cd      	uxtb	r5, r1
 8011f52:	42aa      	cmp	r2, r5
 8011f54:	f43f af79 	beq.w	8011e4a <uxr_read_framed_msg+0x2be>
 8011f58:	3302      	adds	r3, #2
 8011f5a:	085a      	lsrs	r2, r3, #1
 8011f5c:	fba6 5202 	umull	r5, r2, r6, r2
 8011f60:	0892      	lsrs	r2, r2, #2
 8011f62:	fb00 3212 	mls	r2, r0, r2, r3
 8011f66:	1863      	adds	r3, r4, r1
 8011f68:	789b      	ldrb	r3, [r3, #2]
 8011f6a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011f6e:	2b7e      	cmp	r3, #126	; 0x7e
 8011f70:	f000 8087 	beq.w	8012082 <uxr_read_framed_msg+0x4f6>
 8011f74:	f083 0120 	eor.w	r1, r3, #32
 8011f78:	e63f      	b.n	8011bfa <uxr_read_framed_msg+0x6e>
 8011f7a:	202a      	movs	r0, #42	; 0x2a
 8011f7c:	1c55      	adds	r5, r2, #1
 8011f7e:	086b      	lsrs	r3, r5, #1
 8011f80:	fba6 c303 	umull	ip, r3, r6, r3
 8011f84:	089b      	lsrs	r3, r3, #2
 8011f86:	fb00 5313 	mls	r3, r0, r3, r5
 8011f8a:	b2dd      	uxtb	r5, r3
 8011f8c:	42a9      	cmp	r1, r5
 8011f8e:	d096      	beq.n	8011ebe <uxr_read_framed_msg+0x332>
 8011f90:	3202      	adds	r2, #2
 8011f92:	0851      	lsrs	r1, r2, #1
 8011f94:	fba6 5101 	umull	r5, r1, r6, r1
 8011f98:	0889      	lsrs	r1, r1, #2
 8011f9a:	fb00 2211 	mls	r2, r0, r1, r2
 8011f9e:	4423      	add	r3, r4
 8011fa0:	789b      	ldrb	r3, [r3, #2]
 8011fa2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011fa6:	2b7e      	cmp	r3, #126	; 0x7e
 8011fa8:	d06d      	beq.n	8012086 <uxr_read_framed_msg+0x4fa>
 8011faa:	f083 0020 	eor.w	r0, r3, #32
 8011fae:	e6ea      	b.n	8011d86 <uxr_read_framed_msg+0x1fa>
 8011fb0:	252a      	movs	r5, #42	; 0x2a
 8011fb2:	f101 0c01 	add.w	ip, r1, #1
 8011fb6:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8011fba:	fba6 2303 	umull	r2, r3, r6, r3
 8011fbe:	089a      	lsrs	r2, r3, #2
 8011fc0:	fb05 c212 	mls	r2, r5, r2, ip
 8011fc4:	b2d3      	uxtb	r3, r2
 8011fc6:	4298      	cmp	r0, r3
 8011fc8:	f43f af50 	beq.w	8011e6c <uxr_read_framed_msg+0x2e0>
 8011fcc:	1c8b      	adds	r3, r1, #2
 8011fce:	0859      	lsrs	r1, r3, #1
 8011fd0:	fba6 0101 	umull	r0, r1, r6, r1
 8011fd4:	0889      	lsrs	r1, r1, #2
 8011fd6:	fb05 3111 	mls	r1, r5, r1, r3
 8011fda:	18a3      	adds	r3, r4, r2
 8011fdc:	789b      	ldrb	r3, [r3, #2]
 8011fde:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8011fe2:	2b7e      	cmp	r3, #126	; 0x7e
 8011fe4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8011fe8:	f43f af40 	beq.w	8011e6c <uxr_read_framed_msg+0x2e0>
 8011fec:	f083 0320 	eor.w	r3, r3, #32
 8011ff0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8011ff4:	e6ea      	b.n	8011dcc <uxr_read_framed_msg+0x240>
 8011ff6:	1c5d      	adds	r5, r3, #1
 8011ff8:	0869      	lsrs	r1, r5, #1
 8011ffa:	fba6 c101 	umull	ip, r1, r6, r1
 8011ffe:	0889      	lsrs	r1, r1, #2
 8012000:	fb00 5111 	mls	r1, r0, r1, r5
 8012004:	b2cd      	uxtb	r5, r1
 8012006:	42aa      	cmp	r2, r5
 8012008:	f43f af1f 	beq.w	8011e4a <uxr_read_framed_msg+0x2be>
 801200c:	3302      	adds	r3, #2
 801200e:	085a      	lsrs	r2, r3, #1
 8012010:	fba6 5202 	umull	r5, r2, r6, r2
 8012014:	0892      	lsrs	r2, r2, #2
 8012016:	fb00 3212 	mls	r2, r0, r2, r3
 801201a:	1863      	adds	r3, r4, r1
 801201c:	789b      	ldrb	r3, [r3, #2]
 801201e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012022:	2b7e      	cmp	r3, #126	; 0x7e
 8012024:	d02d      	beq.n	8012082 <uxr_read_framed_msg+0x4f6>
 8012026:	f083 0120 	eor.w	r1, r3, #32
 801202a:	e666      	b.n	8011cfa <uxr_read_framed_msg+0x16e>
 801202c:	1c5d      	adds	r5, r3, #1
 801202e:	0869      	lsrs	r1, r5, #1
 8012030:	fba6 c101 	umull	ip, r1, r6, r1
 8012034:	0889      	lsrs	r1, r1, #2
 8012036:	fb00 5111 	mls	r1, r0, r1, r5
 801203a:	b2cd      	uxtb	r5, r1
 801203c:	42aa      	cmp	r2, r5
 801203e:	f43f af13 	beq.w	8011e68 <uxr_read_framed_msg+0x2dc>
 8012042:	3302      	adds	r3, #2
 8012044:	085a      	lsrs	r2, r3, #1
 8012046:	fba6 5202 	umull	r5, r2, r6, r2
 801204a:	0892      	lsrs	r2, r2, #2
 801204c:	fb00 3212 	mls	r2, r0, r2, r3
 8012050:	1863      	adds	r3, r4, r1
 8012052:	7899      	ldrb	r1, [r3, #2]
 8012054:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012058:	297e      	cmp	r1, #126	; 0x7e
 801205a:	d002      	beq.n	8012062 <uxr_read_framed_msg+0x4d6>
 801205c:	f081 0120 	eor.w	r1, r1, #32
 8012060:	e674      	b.n	8011d4c <uxr_read_framed_msg+0x1c0>
 8012062:	2302      	movs	r3, #2
 8012064:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012066:	4649      	mov	r1, r9
 8012068:	e9cd 2300 	strd	r2, r3, [sp]
 801206c:	4620      	mov	r0, r4
 801206e:	4652      	mov	r2, sl
 8012070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012072:	f7ff fd07 	bl	8011a84 <uxr_framing_read_transport>
 8012076:	2800      	cmp	r0, #0
 8012078:	f47f aef4 	bne.w	8011e64 <uxr_read_framed_msg+0x2d8>
 801207c:	2301      	movs	r3, #1
 801207e:	7023      	strb	r3, [r4, #0]
 8012080:	e596      	b.n	8011bb0 <uxr_read_framed_msg+0x24>
 8012082:	2301      	movs	r3, #1
 8012084:	e7ee      	b.n	8012064 <uxr_read_framed_msg+0x4d8>
 8012086:	2303      	movs	r3, #3
 8012088:	e7ec      	b.n	8012064 <uxr_read_framed_msg+0x4d8>
 801208a:	bf00      	nop

0801208c <uxr_stream_id>:
 801208c:	b430      	push	{r4, r5}
 801208e:	2901      	cmp	r1, #1
 8012090:	4604      	mov	r4, r0
 8012092:	b082      	sub	sp, #8
 8012094:	d01e      	beq.n	80120d4 <uxr_stream_id+0x48>
 8012096:	2902      	cmp	r1, #2
 8012098:	f04f 0500 	mov.w	r5, #0
 801209c:	d01d      	beq.n	80120da <uxr_stream_id+0x4e>
 801209e:	2300      	movs	r3, #0
 80120a0:	4618      	mov	r0, r3
 80120a2:	f365 0307 	bfi	r3, r5, #0, #8
 80120a6:	f364 230f 	bfi	r3, r4, #8, #8
 80120aa:	f361 4317 	bfi	r3, r1, #16, #8
 80120ae:	f362 631f 	bfi	r3, r2, #24, #8
 80120b2:	b2da      	uxtb	r2, r3
 80120b4:	f362 0007 	bfi	r0, r2, #0, #8
 80120b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80120bc:	f362 200f 	bfi	r0, r2, #8, #8
 80120c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80120c4:	f362 4017 	bfi	r0, r2, #16, #8
 80120c8:	0e1b      	lsrs	r3, r3, #24
 80120ca:	f363 601f 	bfi	r0, r3, #24, #8
 80120ce:	b002      	add	sp, #8
 80120d0:	bc30      	pop	{r4, r5}
 80120d2:	4770      	bx	lr
 80120d4:	1c45      	adds	r5, r0, #1
 80120d6:	b2ed      	uxtb	r5, r5
 80120d8:	e7e1      	b.n	801209e <uxr_stream_id+0x12>
 80120da:	f080 0580 	eor.w	r5, r0, #128	; 0x80
 80120de:	e7de      	b.n	801209e <uxr_stream_id+0x12>

080120e0 <uxr_stream_id_from_raw>:
 80120e0:	b430      	push	{r4, r5}
 80120e2:	4602      	mov	r2, r0
 80120e4:	b082      	sub	sp, #8
 80120e6:	b128      	cbz	r0, 80120f4 <uxr_stream_id_from_raw+0x14>
 80120e8:	0603      	lsls	r3, r0, #24
 80120ea:	d420      	bmi.n	801212e <uxr_stream_id_from_raw+0x4e>
 80120ec:	1e44      	subs	r4, r0, #1
 80120ee:	2501      	movs	r5, #1
 80120f0:	b2e4      	uxtb	r4, r4
 80120f2:	e001      	b.n	80120f8 <uxr_stream_id_from_raw+0x18>
 80120f4:	4605      	mov	r5, r0
 80120f6:	4604      	mov	r4, r0
 80120f8:	2300      	movs	r3, #0
 80120fa:	4618      	mov	r0, r3
 80120fc:	f362 0307 	bfi	r3, r2, #0, #8
 8012100:	f364 230f 	bfi	r3, r4, #8, #8
 8012104:	f365 4317 	bfi	r3, r5, #16, #8
 8012108:	f361 631f 	bfi	r3, r1, #24, #8
 801210c:	b2da      	uxtb	r2, r3
 801210e:	f362 0007 	bfi	r0, r2, #0, #8
 8012112:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012116:	f362 200f 	bfi	r0, r2, #8, #8
 801211a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801211e:	f362 4017 	bfi	r0, r2, #16, #8
 8012122:	0e1b      	lsrs	r3, r3, #24
 8012124:	f363 601f 	bfi	r0, r3, #24, #8
 8012128:	b002      	add	sp, #8
 801212a:	bc30      	pop	{r4, r5}
 801212c:	4770      	bx	lr
 801212e:	2502      	movs	r5, #2
 8012130:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8012134:	e7e0      	b.n	80120f8 <uxr_stream_id_from_raw+0x18>
 8012136:	bf00      	nop

08012138 <uxr_init_stream_storage>:
 8012138:	2300      	movs	r3, #0
 801213a:	7403      	strb	r3, [r0, #16]
 801213c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012140:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8012144:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop

0801214c <uxr_reset_stream_storage>:
 801214c:	b570      	push	{r4, r5, r6, lr}
 801214e:	7c03      	ldrb	r3, [r0, #16]
 8012150:	4604      	mov	r4, r0
 8012152:	b153      	cbz	r3, 801216a <uxr_reset_stream_storage+0x1e>
 8012154:	4606      	mov	r6, r0
 8012156:	2500      	movs	r5, #0
 8012158:	4630      	mov	r0, r6
 801215a:	f004 fd69 	bl	8016c30 <uxr_reset_output_best_effort_stream>
 801215e:	7c23      	ldrb	r3, [r4, #16]
 8012160:	3501      	adds	r5, #1
 8012162:	42ab      	cmp	r3, r5
 8012164:	f106 0610 	add.w	r6, r6, #16
 8012168:	d8f6      	bhi.n	8012158 <uxr_reset_stream_storage+0xc>
 801216a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801216e:	b163      	cbz	r3, 801218a <uxr_reset_stream_storage+0x3e>
 8012170:	2600      	movs	r6, #0
 8012172:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012176:	4628      	mov	r0, r5
 8012178:	f004 fb66 	bl	8016848 <uxr_reset_input_best_effort_stream>
 801217c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012180:	3601      	adds	r6, #1
 8012182:	42b3      	cmp	r3, r6
 8012184:	f105 0502 	add.w	r5, r5, #2
 8012188:	d8f5      	bhi.n	8012176 <uxr_reset_stream_storage+0x2a>
 801218a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801218e:	b163      	cbz	r3, 80121aa <uxr_reset_stream_storage+0x5e>
 8012190:	2600      	movs	r6, #0
 8012192:	f104 0518 	add.w	r5, r4, #24
 8012196:	4628      	mov	r0, r5
 8012198:	f004 fdea 	bl	8016d70 <uxr_reset_output_reliable_stream>
 801219c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80121a0:	3601      	adds	r6, #1
 80121a2:	42b3      	cmp	r3, r6
 80121a4:	f105 0528 	add.w	r5, r5, #40	; 0x28
 80121a8:	d8f5      	bhi.n	8012196 <uxr_reset_stream_storage+0x4a>
 80121aa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80121ae:	b163      	cbz	r3, 80121ca <uxr_reset_stream_storage+0x7e>
 80121b0:	2600      	movs	r6, #0
 80121b2:	f104 0548 	add.w	r5, r4, #72	; 0x48
 80121b6:	4628      	mov	r0, r5
 80121b8:	f004 fbae 	bl	8016918 <uxr_reset_input_reliable_stream>
 80121bc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80121c0:	3601      	adds	r6, #1
 80121c2:	42b3      	cmp	r3, r6
 80121c4:	f105 0518 	add.w	r5, r5, #24
 80121c8:	d8f5      	bhi.n	80121b6 <uxr_reset_stream_storage+0x6a>
 80121ca:	bd70      	pop	{r4, r5, r6, pc}

080121cc <uxr_add_output_best_effort_buffer>:
 80121cc:	b530      	push	{r4, r5, lr}
 80121ce:	7c04      	ldrb	r4, [r0, #16]
 80121d0:	b083      	sub	sp, #12
 80121d2:	1c65      	adds	r5, r4, #1
 80121d4:	7405      	strb	r5, [r0, #16]
 80121d6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80121da:	f004 fd1f 	bl	8016c1c <uxr_init_output_best_effort_stream>
 80121de:	2201      	movs	r2, #1
 80121e0:	4620      	mov	r0, r4
 80121e2:	4611      	mov	r1, r2
 80121e4:	b003      	add	sp, #12
 80121e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121ea:	f7ff bf4f 	b.w	801208c <uxr_stream_id>
 80121ee:	bf00      	nop

080121f0 <uxr_add_output_reliable_buffer>:
 80121f0:	b570      	push	{r4, r5, r6, lr}
 80121f2:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80121f6:	b084      	sub	sp, #16
 80121f8:	1c66      	adds	r6, r4, #1
 80121fa:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 80121fe:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8012202:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8012206:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 801220a:	3018      	adds	r0, #24
 801220c:	9500      	str	r5, [sp, #0]
 801220e:	f004 fd7d 	bl	8016d0c <uxr_init_output_reliable_stream>
 8012212:	4620      	mov	r0, r4
 8012214:	2201      	movs	r2, #1
 8012216:	2102      	movs	r1, #2
 8012218:	b004      	add	sp, #16
 801221a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801221e:	f7ff bf35 	b.w	801208c <uxr_stream_id>
 8012222:	bf00      	nop

08012224 <uxr_add_input_best_effort_buffer>:
 8012224:	b510      	push	{r4, lr}
 8012226:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801222a:	b082      	sub	sp, #8
 801222c:	1c62      	adds	r2, r4, #1
 801222e:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8012232:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8012236:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801223a:	f004 fb01 	bl	8016840 <uxr_init_input_best_effort_stream>
 801223e:	4620      	mov	r0, r4
 8012240:	2200      	movs	r2, #0
 8012242:	2101      	movs	r1, #1
 8012244:	b002      	add	sp, #8
 8012246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801224a:	f7ff bf1f 	b.w	801208c <uxr_stream_id>
 801224e:	bf00      	nop

08012250 <uxr_add_input_reliable_buffer>:
 8012250:	b570      	push	{r4, r5, r6, lr}
 8012252:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8012256:	b084      	sub	sp, #16
 8012258:	1c66      	adds	r6, r4, #1
 801225a:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 801225e:	9d08      	ldr	r5, [sp, #32]
 8012260:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8012264:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8012268:	3048      	adds	r0, #72	; 0x48
 801226a:	9500      	str	r5, [sp, #0]
 801226c:	f004 fb30 	bl	80168d0 <uxr_init_input_reliable_stream>
 8012270:	4620      	mov	r0, r4
 8012272:	2200      	movs	r2, #0
 8012274:	2102      	movs	r1, #2
 8012276:	b004      	add	sp, #16
 8012278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801227c:	f7ff bf06 	b.w	801208c <uxr_stream_id>

08012280 <uxr_get_output_best_effort_stream>:
 8012280:	7c03      	ldrb	r3, [r0, #16]
 8012282:	428b      	cmp	r3, r1
 8012284:	bf8c      	ite	hi
 8012286:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801228a:	2000      	movls	r0, #0
 801228c:	4770      	bx	lr
 801228e:	bf00      	nop

08012290 <uxr_get_output_reliable_stream>:
 8012290:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012294:	428b      	cmp	r3, r1
 8012296:	bf83      	ittte	hi
 8012298:	eb01 0181 	addhi.w	r1, r1, r1, lsl #2
 801229c:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 80122a0:	3018      	addhi	r0, #24
 80122a2:	2000      	movls	r0, #0
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop

080122a8 <uxr_get_input_best_effort_stream>:
 80122a8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80122ac:	428b      	cmp	r3, r1
 80122ae:	bf86      	itte	hi
 80122b0:	3121      	addhi	r1, #33	; 0x21
 80122b2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80122b6:	2000      	movls	r0, #0
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop

080122bc <uxr_get_input_reliable_stream>:
 80122bc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80122c0:	428b      	cmp	r3, r1
 80122c2:	bf83      	ittte	hi
 80122c4:	eb01 0141 	addhi.w	r1, r1, r1, lsl #1
 80122c8:	eb00 00c1 	addhi.w	r0, r0, r1, lsl #3
 80122cc:	3048      	addhi	r0, #72	; 0x48
 80122ce:	2000      	movls	r0, #0
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop

080122d4 <uxr_output_streams_confirmed>:
 80122d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80122d8:	b183      	cbz	r3, 80122fc <uxr_output_streams_confirmed+0x28>
 80122da:	b570      	push	{r4, r5, r6, lr}
 80122dc:	4606      	mov	r6, r0
 80122de:	2400      	movs	r4, #0
 80122e0:	f100 0518 	add.w	r5, r0, #24
 80122e4:	e001      	b.n	80122ea <uxr_output_streams_confirmed+0x16>
 80122e6:	3528      	adds	r5, #40	; 0x28
 80122e8:	b138      	cbz	r0, 80122fa <uxr_output_streams_confirmed+0x26>
 80122ea:	4628      	mov	r0, r5
 80122ec:	f004 ffa2 	bl	8017234 <uxr_is_output_up_to_date>
 80122f0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80122f4:	3401      	adds	r4, #1
 80122f6:	42a3      	cmp	r3, r4
 80122f8:	d8f5      	bhi.n	80122e6 <uxr_output_streams_confirmed+0x12>
 80122fa:	bd70      	pop	{r4, r5, r6, pc}
 80122fc:	2001      	movs	r0, #1
 80122fe:	4770      	bx	lr

08012300 <uxr_buffer_submessage_header>:
 8012300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012302:	460e      	mov	r6, r1
 8012304:	2104      	movs	r1, #4
 8012306:	4615      	mov	r5, r2
 8012308:	4604      	mov	r4, r0
 801230a:	461f      	mov	r7, r3
 801230c:	f7fd fd90 	bl	800fe30 <ucdr_align_to>
 8012310:	2301      	movs	r3, #1
 8012312:	4631      	mov	r1, r6
 8012314:	ea47 0203 	orr.w	r2, r7, r3
 8012318:	4620      	mov	r0, r4
 801231a:	7523      	strb	r3, [r4, #20]
 801231c:	462b      	mov	r3, r5
 801231e:	f000 fa2d 	bl	801277c <uxr_serialize_submessage_header>
 8012322:	4620      	mov	r0, r4
 8012324:	f7fd fd9a 	bl	800fe5c <ucdr_buffer_remaining>
 8012328:	42a8      	cmp	r0, r5
 801232a:	bf34      	ite	cc
 801232c:	2000      	movcc	r0, #0
 801232e:	2001      	movcs	r0, #1
 8012330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012332:	bf00      	nop

08012334 <uxr_read_submessage_header>:
 8012334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012338:	4604      	mov	r4, r0
 801233a:	460d      	mov	r5, r1
 801233c:	2104      	movs	r1, #4
 801233e:	4616      	mov	r6, r2
 8012340:	4698      	mov	r8, r3
 8012342:	f7fd fd75 	bl	800fe30 <ucdr_align_to>
 8012346:	4620      	mov	r0, r4
 8012348:	f7fd fd88 	bl	800fe5c <ucdr_buffer_remaining>
 801234c:	2803      	cmp	r0, #3
 801234e:	bf8c      	ite	hi
 8012350:	2701      	movhi	r7, #1
 8012352:	2700      	movls	r7, #0
 8012354:	d802      	bhi.n	801235c <uxr_read_submessage_header+0x28>
 8012356:	4638      	mov	r0, r7
 8012358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801235c:	4633      	mov	r3, r6
 801235e:	4642      	mov	r2, r8
 8012360:	4620      	mov	r0, r4
 8012362:	4629      	mov	r1, r5
 8012364:	f000 fa1c 	bl	80127a0 <uxr_deserialize_submessage_header>
 8012368:	f898 3000 	ldrb.w	r3, [r8]
 801236c:	4638      	mov	r0, r7
 801236e:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8012372:	f003 0301 	and.w	r3, r3, #1
 8012376:	f888 2000 	strb.w	r2, [r8]
 801237a:	7523      	strb	r3, [r4, #20]
 801237c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012380 <uxr_submessage_padding>:
 8012380:	f010 0003 	ands.w	r0, r0, #3
 8012384:	bf18      	it	ne
 8012386:	f1c0 0004 	rsbne	r0, r0, #4
 801238a:	4770      	bx	lr

0801238c <uxr_millis>:
 801238c:	b510      	push	{r4, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	4669      	mov	r1, sp
 8012392:	2001      	movs	r0, #1
 8012394:	f7f0 fc90 	bl	8002cb8 <clock_gettime>
 8012398:	e9dd 0200 	ldrd	r0, r2, [sp]
 801239c:	4b07      	ldr	r3, [pc, #28]	; (80123bc <uxr_millis+0x30>)
 801239e:	9c02      	ldr	r4, [sp, #8]
 80123a0:	fba0 0103 	umull	r0, r1, r0, r3
 80123a4:	fb03 1102 	mla	r1, r3, r2, r1
 80123a8:	1900      	adds	r0, r0, r4
 80123aa:	f04f 0300 	mov.w	r3, #0
 80123ae:	4a04      	ldr	r2, [pc, #16]	; (80123c0 <uxr_millis+0x34>)
 80123b0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80123b4:	f7ee f9d2 	bl	800075c <__aeabi_ldivmod>
 80123b8:	b004      	add	sp, #16
 80123ba:	bd10      	pop	{r4, pc}
 80123bc:	3b9aca00 	.word	0x3b9aca00
 80123c0:	000f4240 	.word	0x000f4240

080123c4 <uxr_nanos>:
 80123c4:	b500      	push	{lr}
 80123c6:	b085      	sub	sp, #20
 80123c8:	4669      	mov	r1, sp
 80123ca:	2001      	movs	r0, #1
 80123cc:	f7f0 fc74 	bl	8002cb8 <clock_gettime>
 80123d0:	e9dd 2000 	ldrd	r2, r0, [sp]
 80123d4:	4906      	ldr	r1, [pc, #24]	; (80123f0 <uxr_nanos+0x2c>)
 80123d6:	fba2 2301 	umull	r2, r3, r2, r1
 80123da:	fb01 3300 	mla	r3, r1, r0, r3
 80123de:	9802      	ldr	r0, [sp, #8]
 80123e0:	4684      	mov	ip, r0
 80123e2:	1810      	adds	r0, r2, r0
 80123e4:	eb43 71ec 	adc.w	r1, r3, ip, asr #31
 80123e8:	b005      	add	sp, #20
 80123ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80123ee:	bf00      	nop
 80123f0:	3b9aca00 	.word	0x3b9aca00

080123f4 <on_full_output_buffer_fragmented>:
 80123f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123f8:	460c      	mov	r4, r1
 80123fa:	b08a      	sub	sp, #40	; 0x28
 80123fc:	4606      	mov	r6, r0
 80123fe:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8012402:	f104 0008 	add.w	r0, r4, #8
 8012406:	f7ff ff43 	bl	8012290 <uxr_get_output_reliable_stream>
 801240a:	4605      	mov	r5, r0
 801240c:	f004 ff1c 	bl	8017248 <get_available_free_slots>
 8012410:	b968      	cbnz	r0, 801242e <on_full_output_buffer_fragmented+0x3a>
 8012412:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8012416:	4620      	mov	r0, r4
 8012418:	4798      	blx	r3
 801241a:	b918      	cbnz	r0, 8012424 <on_full_output_buffer_fragmented+0x30>
 801241c:	2001      	movs	r0, #1
 801241e:	b00a      	add	sp, #40	; 0x28
 8012420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012424:	4628      	mov	r0, r5
 8012426:	f004 ff0f 	bl	8017248 <get_available_free_slots>
 801242a:	2800      	cmp	r0, #0
 801242c:	d0f6      	beq.n	801241c <on_full_output_buffer_fragmented+0x28>
 801242e:	892a      	ldrh	r2, [r5, #8]
 8012430:	89e8      	ldrh	r0, [r5, #14]
 8012432:	686b      	ldr	r3, [r5, #4]
 8012434:	fbb0 f1f2 	udiv	r1, r0, r2
 8012438:	fbb3 f8f2 	udiv	r8, r3, r2
 801243c:	fb02 0111 	mls	r1, r2, r1, r0
 8012440:	7b2b      	ldrb	r3, [r5, #12]
 8012442:	b289      	uxth	r1, r1
 8012444:	fb08 f101 	mul.w	r1, r8, r1
 8012448:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 801244c:	f1a8 0804 	sub.w	r8, r8, #4
 8012450:	33fc      	adds	r3, #252	; 0xfc
 8012452:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8012456:	4443      	add	r3, r8
 8012458:	682a      	ldr	r2, [r5, #0]
 801245a:	b29f      	uxth	r7, r3
 801245c:	1bc0      	subs	r0, r0, r7
 801245e:	3104      	adds	r1, #4
 8012460:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8012464:	4411      	add	r1, r2
 8012466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801246a:	4642      	mov	r2, r8
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	a802      	add	r0, sp, #8
 8012470:	2300      	movs	r3, #0
 8012472:	f7fd fcaf 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8012476:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801247a:	f102 0308 	add.w	r3, r2, #8
 801247e:	4543      	cmp	r3, r8
 8012480:	d928      	bls.n	80124d4 <on_full_output_buffer_fragmented+0xe0>
 8012482:	463a      	mov	r2, r7
 8012484:	2300      	movs	r3, #0
 8012486:	210d      	movs	r1, #13
 8012488:	a802      	add	r0, sp, #8
 801248a:	f7ff ff39 	bl	8012300 <uxr_buffer_submessage_header>
 801248e:	8929      	ldrh	r1, [r5, #8]
 8012490:	89e8      	ldrh	r0, [r5, #14]
 8012492:	686b      	ldr	r3, [r5, #4]
 8012494:	fbb0 f2f1 	udiv	r2, r0, r1
 8012498:	fbb3 f3f1 	udiv	r3, r3, r1
 801249c:	fb01 0212 	mls	r2, r1, r2, r0
 80124a0:	b292      	uxth	r2, r2
 80124a2:	fb03 f302 	mul.w	r3, r3, r2
 80124a6:	682a      	ldr	r2, [r5, #0]
 80124a8:	f842 8003 	str.w	r8, [r2, r3]
 80124ac:	2101      	movs	r1, #1
 80124ae:	89e8      	ldrh	r0, [r5, #14]
 80124b0:	f004 feec 	bl	801728c <uxr_seq_num_add>
 80124b4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80124b8:	81e8      	strh	r0, [r5, #14]
 80124ba:	1a52      	subs	r2, r2, r1
 80124bc:	4630      	mov	r0, r6
 80124be:	f7fd fc9b 	bl	800fdf8 <ucdr_init_buffer>
 80124c2:	4630      	mov	r0, r6
 80124c4:	4622      	mov	r2, r4
 80124c6:	490f      	ldr	r1, [pc, #60]	; (8012504 <on_full_output_buffer_fragmented+0x110>)
 80124c8:	f7fd fc6c 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 80124cc:	2000      	movs	r0, #0
 80124ce:	b00a      	add	sp, #40	; 0x28
 80124d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d4:	2302      	movs	r3, #2
 80124d6:	210d      	movs	r1, #13
 80124d8:	b292      	uxth	r2, r2
 80124da:	a802      	add	r0, sp, #8
 80124dc:	f7ff ff10 	bl	8012300 <uxr_buffer_submessage_header>
 80124e0:	8929      	ldrh	r1, [r5, #8]
 80124e2:	89e8      	ldrh	r0, [r5, #14]
 80124e4:	686b      	ldr	r3, [r5, #4]
 80124e6:	fbb0 f2f1 	udiv	r2, r0, r1
 80124ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80124ee:	fb01 0212 	mls	r2, r1, r2, r0
 80124f2:	b292      	uxth	r2, r2
 80124f4:	fb03 f302 	mul.w	r3, r3, r2
 80124f8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80124fc:	6829      	ldr	r1, [r5, #0]
 80124fe:	3208      	adds	r2, #8
 8012500:	50ca      	str	r2, [r1, r3]
 8012502:	e7d3      	b.n	80124ac <on_full_output_buffer_fragmented+0xb8>
 8012504:	080123f5 	.word	0x080123f5

08012508 <uxr_prepare_output_stream>:
 8012508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801250a:	2407      	movs	r4, #7
 801250c:	2500      	movs	r5, #0
 801250e:	b087      	sub	sp, #28
 8012510:	9202      	str	r2, [sp, #8]
 8012512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012514:	e9cd 4500 	strd	r4, r5, [sp]
 8012518:	3204      	adds	r2, #4
 801251a:	461c      	mov	r4, r3
 801251c:	4606      	mov	r6, r0
 801251e:	9103      	str	r1, [sp, #12]
 8012520:	f7fe ffda 	bl	80114d8 <uxr_prepare_stream_to_write_submessage>
 8012524:	f080 0201 	eor.w	r2, r0, #1
 8012528:	b2d2      	uxtb	r2, r2
 801252a:	75a2      	strb	r2, [r4, #22]
 801252c:	b112      	cbz	r2, 8012534 <uxr_prepare_output_stream+0x2c>
 801252e:	4628      	mov	r0, r5
 8012530:	b007      	add	sp, #28
 8012532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012534:	aa05      	add	r2, sp, #20
 8012536:	9902      	ldr	r1, [sp, #8]
 8012538:	4630      	mov	r0, r6
 801253a:	f7ff f8ff 	bl	801173c <uxr_init_base_object_request>
 801253e:	4605      	mov	r5, r0
 8012540:	a905      	add	r1, sp, #20
 8012542:	4620      	mov	r0, r4
 8012544:	f000 febc 	bl	80132c0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012548:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801254c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012550:	4620      	mov	r0, r4
 8012552:	1a52      	subs	r2, r2, r1
 8012554:	f7fd fc50 	bl	800fdf8 <ucdr_init_buffer>
 8012558:	4620      	mov	r0, r4
 801255a:	463a      	mov	r2, r7
 801255c:	4631      	mov	r1, r6
 801255e:	f7fd fc21 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 8012562:	4628      	mov	r0, r5
 8012564:	b007      	add	sp, #28
 8012566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012568 <uxr_prepare_output_stream_fragmented>:
 8012568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801256c:	b093      	sub	sp, #76	; 0x4c
 801256e:	9107      	str	r1, [sp, #28]
 8012570:	4605      	mov	r5, r0
 8012572:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012576:	3008      	adds	r0, #8
 8012578:	9303      	str	r3, [sp, #12]
 801257a:	9206      	str	r2, [sp, #24]
 801257c:	f7ff fe88 	bl	8012290 <uxr_get_output_reliable_stream>
 8012580:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012584:	2b01      	cmp	r3, #1
 8012586:	f000 8094 	beq.w	80126b2 <uxr_prepare_output_stream_fragmented+0x14a>
 801258a:	4604      	mov	r4, r0
 801258c:	2800      	cmp	r0, #0
 801258e:	f000 8090 	beq.w	80126b2 <uxr_prepare_output_stream_fragmented+0x14a>
 8012592:	f004 fe59 	bl	8017248 <get_available_free_slots>
 8012596:	2800      	cmp	r0, #0
 8012598:	f000 8086 	beq.w	80126a8 <uxr_prepare_output_stream_fragmented+0x140>
 801259c:	8923      	ldrh	r3, [r4, #8]
 801259e:	89e7      	ldrh	r7, [r4, #14]
 80125a0:	6862      	ldr	r2, [r4, #4]
 80125a2:	fbb7 f8f3 	udiv	r8, r7, r3
 80125a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80125aa:	fb03 7818 	mls	r8, r3, r8, r7
 80125ae:	fa1f f888 	uxth.w	r8, r8
 80125b2:	fb02 f808 	mul.w	r8, r2, r8
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	f108 0804 	add.w	r8, r8, #4
 80125bc:	4498      	add	r8, r3
 80125be:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80125c2:	7b23      	ldrb	r3, [r4, #12]
 80125c4:	9204      	str	r2, [sp, #16]
 80125c6:	4553      	cmp	r3, sl
 80125c8:	f1a2 0b04 	sub.w	fp, r2, #4
 80125cc:	d37d      	bcc.n	80126ca <uxr_prepare_output_stream_fragmented+0x162>
 80125ce:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80125d0:	f1ab 0904 	sub.w	r9, fp, #4
 80125d4:	eba9 0903 	sub.w	r9, r9, r3
 80125d8:	3608      	adds	r6, #8
 80125da:	2300      	movs	r3, #0
 80125dc:	465a      	mov	r2, fp
 80125de:	4641      	mov	r1, r8
 80125e0:	a80a      	add	r0, sp, #40	; 0x28
 80125e2:	f8cd a000 	str.w	sl, [sp]
 80125e6:	fa1f f989 	uxth.w	r9, r9
 80125ea:	9605      	str	r6, [sp, #20]
 80125ec:	f7fd fbf2 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 80125f0:	455e      	cmp	r6, fp
 80125f2:	bf34      	ite	cc
 80125f4:	2302      	movcc	r3, #2
 80125f6:	2300      	movcs	r3, #0
 80125f8:	464a      	mov	r2, r9
 80125fa:	210d      	movs	r1, #13
 80125fc:	a80a      	add	r0, sp, #40	; 0x28
 80125fe:	f7ff fe7f 	bl	8012300 <uxr_buffer_submessage_header>
 8012602:	8921      	ldrh	r1, [r4, #8]
 8012604:	6862      	ldr	r2, [r4, #4]
 8012606:	fbb7 f3f1 	udiv	r3, r7, r1
 801260a:	fbb2 f2f1 	udiv	r2, r2, r1
 801260e:	fb01 7313 	mls	r3, r1, r3, r7
 8012612:	b29b      	uxth	r3, r3
 8012614:	fb03 f302 	mul.w	r3, r3, r2
 8012618:	6822      	ldr	r2, [r4, #0]
 801261a:	4638      	mov	r0, r7
 801261c:	f842 b003 	str.w	fp, [r2, r3]
 8012620:	2101      	movs	r1, #1
 8012622:	f004 fe33 	bl	801728c <uxr_seq_num_add>
 8012626:	9b04      	ldr	r3, [sp, #16]
 8012628:	9e03      	ldr	r6, [sp, #12]
 801262a:	f1a3 0208 	sub.w	r2, r3, #8
 801262e:	f10a 0104 	add.w	r1, sl, #4
 8012632:	4607      	mov	r7, r0
 8012634:	eba2 020a 	sub.w	r2, r2, sl
 8012638:	4630      	mov	r0, r6
 801263a:	4441      	add	r1, r8
 801263c:	f7fd fbdc 	bl	800fdf8 <ucdr_init_buffer>
 8012640:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012642:	2107      	movs	r1, #7
 8012644:	1d1a      	adds	r2, r3, #4
 8012646:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801264a:	bf28      	it	cs
 801264c:	2200      	movcs	r2, #0
 801264e:	2300      	movs	r3, #0
 8012650:	81e7      	strh	r7, [r4, #14]
 8012652:	b292      	uxth	r2, r2
 8012654:	4630      	mov	r0, r6
 8012656:	f7ff fe53 	bl	8012300 <uxr_buffer_submessage_header>
 801265a:	4628      	mov	r0, r5
 801265c:	9906      	ldr	r1, [sp, #24]
 801265e:	aa09      	add	r2, sp, #36	; 0x24
 8012660:	f7ff f86c 	bl	801173c <uxr_init_base_object_request>
 8012664:	4604      	mov	r4, r0
 8012666:	b328      	cbz	r0, 80126b4 <uxr_prepare_output_stream_fragmented+0x14c>
 8012668:	9e03      	ldr	r6, [sp, #12]
 801266a:	a909      	add	r1, sp, #36	; 0x24
 801266c:	4630      	mov	r0, r6
 801266e:	f000 fe27 	bl	80132c0 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012672:	68b1      	ldr	r1, [r6, #8]
 8012674:	6872      	ldr	r2, [r6, #4]
 8012676:	4630      	mov	r0, r6
 8012678:	1a52      	subs	r2, r2, r1
 801267a:	f7fd fbbd 	bl	800fdf8 <ucdr_init_buffer>
 801267e:	9a05      	ldr	r2, [sp, #20]
 8012680:	9b07      	ldr	r3, [sp, #28]
 8012682:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012686:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012688:	4630      	mov	r0, r6
 801268a:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 801268e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012690:	491a      	ldr	r1, [pc, #104]	; (80126fc <uxr_prepare_output_stream_fragmented+0x194>)
 8012692:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8012696:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801269a:	462a      	mov	r2, r5
 801269c:	f7fd fb82 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 80126a0:	4620      	mov	r0, r4
 80126a2:	b013      	add	sp, #76	; 0x4c
 80126a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a8:	4628      	mov	r0, r5
 80126aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80126ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80126ae:	4798      	blx	r3
 80126b0:	b920      	cbnz	r0, 80126bc <uxr_prepare_output_stream_fragmented+0x154>
 80126b2:	2400      	movs	r4, #0
 80126b4:	4620      	mov	r0, r4
 80126b6:	b013      	add	sp, #76	; 0x4c
 80126b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126bc:	4620      	mov	r0, r4
 80126be:	f004 fdc3 	bl	8017248 <get_available_free_slots>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	f47f af6a 	bne.w	801259c <uxr_prepare_output_stream_fragmented+0x34>
 80126c8:	e7f3      	b.n	80126b2 <uxr_prepare_output_stream_fragmented+0x14a>
 80126ca:	4638      	mov	r0, r7
 80126cc:	2101      	movs	r1, #1
 80126ce:	f004 fddd 	bl	801728c <uxr_seq_num_add>
 80126d2:	8922      	ldrh	r2, [r4, #8]
 80126d4:	6863      	ldr	r3, [r4, #4]
 80126d6:	fbb0 f8f2 	udiv	r8, r0, r2
 80126da:	fbb3 f3f2 	udiv	r3, r3, r2
 80126de:	fb02 0818 	mls	r8, r2, r8, r0
 80126e2:	fa1f f888 	uxth.w	r8, r8
 80126e6:	fb08 f803 	mul.w	r8, r8, r3
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	f108 0804 	add.w	r8, r8, #4
 80126f0:	4498      	add	r8, r3
 80126f2:	4607      	mov	r7, r0
 80126f4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80126f8:	7b23      	ldrb	r3, [r4, #12]
 80126fa:	e768      	b.n	80125ce <uxr_prepare_output_stream_fragmented+0x66>
 80126fc:	080123f5 	.word	0x080123f5

08012700 <uxr_serialize_message_header>:
 8012700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012704:	4617      	mov	r7, r2
 8012706:	4604      	mov	r4, r0
 8012708:	461e      	mov	r6, r3
 801270a:	460d      	mov	r5, r1
 801270c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8012710:	f7fb ff30 	bl	800e574 <ucdr_serialize_uint8_t>
 8012714:	4639      	mov	r1, r7
 8012716:	4620      	mov	r0, r4
 8012718:	f7fb ff2c 	bl	800e574 <ucdr_serialize_uint8_t>
 801271c:	4632      	mov	r2, r6
 801271e:	4620      	mov	r0, r4
 8012720:	2101      	movs	r1, #1
 8012722:	f7fb ffd3 	bl	800e6cc <ucdr_serialize_endian_uint16_t>
 8012726:	062b      	lsls	r3, r5, #24
 8012728:	d501      	bpl.n	801272e <uxr_serialize_message_header+0x2e>
 801272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801272e:	4641      	mov	r1, r8
 8012730:	4620      	mov	r0, r4
 8012732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012736:	2204      	movs	r2, #4
 8012738:	f7fb bb78 	b.w	800de2c <ucdr_serialize_array_uint8_t>

0801273c <uxr_deserialize_message_header>:
 801273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012740:	4617      	mov	r7, r2
 8012742:	4604      	mov	r4, r0
 8012744:	461e      	mov	r6, r3
 8012746:	460d      	mov	r5, r1
 8012748:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801274c:	f7fb ff28 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012750:	4639      	mov	r1, r7
 8012752:	4620      	mov	r0, r4
 8012754:	f7fb ff24 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012758:	4632      	mov	r2, r6
 801275a:	4620      	mov	r0, r4
 801275c:	2101      	movs	r1, #1
 801275e:	f7fc f8a9 	bl	800e8b4 <ucdr_deserialize_endian_uint16_t>
 8012762:	f995 3000 	ldrsb.w	r3, [r5]
 8012766:	2b00      	cmp	r3, #0
 8012768:	da01      	bge.n	801276e <uxr_deserialize_message_header+0x32>
 801276a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801276e:	4641      	mov	r1, r8
 8012770:	4620      	mov	r0, r4
 8012772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012776:	2204      	movs	r2, #4
 8012778:	f7fb bbbc 	b.w	800def4 <ucdr_deserialize_array_uint8_t>

0801277c <uxr_serialize_submessage_header>:
 801277c:	b570      	push	{r4, r5, r6, lr}
 801277e:	4616      	mov	r6, r2
 8012780:	4604      	mov	r4, r0
 8012782:	461d      	mov	r5, r3
 8012784:	f7fb fef6 	bl	800e574 <ucdr_serialize_uint8_t>
 8012788:	4631      	mov	r1, r6
 801278a:	4620      	mov	r0, r4
 801278c:	f7fb fef2 	bl	800e574 <ucdr_serialize_uint8_t>
 8012790:	462a      	mov	r2, r5
 8012792:	4620      	mov	r0, r4
 8012794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012798:	2101      	movs	r1, #1
 801279a:	f7fb bf97 	b.w	800e6cc <ucdr_serialize_endian_uint16_t>
 801279e:	bf00      	nop

080127a0 <uxr_deserialize_submessage_header>:
 80127a0:	b570      	push	{r4, r5, r6, lr}
 80127a2:	4616      	mov	r6, r2
 80127a4:	4604      	mov	r4, r0
 80127a6:	461d      	mov	r5, r3
 80127a8:	f7fb fefa 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 80127ac:	4631      	mov	r1, r6
 80127ae:	4620      	mov	r0, r4
 80127b0:	f7fb fef6 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 80127b4:	462a      	mov	r2, r5
 80127b6:	4620      	mov	r0, r4
 80127b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127bc:	2101      	movs	r1, #1
 80127be:	f7fc b879 	b.w	800e8b4 <ucdr_deserialize_endian_uint16_t>
 80127c2:	bf00      	nop

080127c4 <uxr_serialize_CLIENT_Representation>:
 80127c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127c8:	2204      	movs	r2, #4
 80127ca:	460c      	mov	r4, r1
 80127cc:	4605      	mov	r5, r0
 80127ce:	f7fb fb2d 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80127d2:	2202      	movs	r2, #2
 80127d4:	4606      	mov	r6, r0
 80127d6:	1d21      	adds	r1, r4, #4
 80127d8:	4628      	mov	r0, r5
 80127da:	f7fb fb27 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80127de:	2202      	movs	r2, #2
 80127e0:	1da1      	adds	r1, r4, #6
 80127e2:	4006      	ands	r6, r0
 80127e4:	4628      	mov	r0, r5
 80127e6:	f7fb fb21 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2204      	movs	r2, #4
 80127ee:	f104 0108 	add.w	r1, r4, #8
 80127f2:	4628      	mov	r0, r5
 80127f4:	b2f6      	uxtb	r6, r6
 80127f6:	401e      	ands	r6, r3
 80127f8:	f7fb fb18 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80127fc:	4603      	mov	r3, r0
 80127fe:	7b21      	ldrb	r1, [r4, #12]
 8012800:	4628      	mov	r0, r5
 8012802:	401e      	ands	r6, r3
 8012804:	f7fb feb6 	bl	800e574 <ucdr_serialize_uint8_t>
 8012808:	4603      	mov	r3, r0
 801280a:	7b61      	ldrb	r1, [r4, #13]
 801280c:	4628      	mov	r0, r5
 801280e:	401e      	ands	r6, r3
 8012810:	f7fb fe82 	bl	800e518 <ucdr_serialize_bool>
 8012814:	7b63      	ldrb	r3, [r4, #13]
 8012816:	4006      	ands	r6, r0
 8012818:	b933      	cbnz	r3, 8012828 <uxr_serialize_CLIENT_Representation+0x64>
 801281a:	4628      	mov	r0, r5
 801281c:	8ba1      	ldrh	r1, [r4, #28]
 801281e:	f7fb fed5 	bl	800e5cc <ucdr_serialize_uint16_t>
 8012822:	4030      	ands	r0, r6
 8012824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012828:	4628      	mov	r0, r5
 801282a:	6921      	ldr	r1, [r4, #16]
 801282c:	f7fc f8bc 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8012830:	6923      	ldr	r3, [r4, #16]
 8012832:	b1cb      	cbz	r3, 8012868 <uxr_serialize_CLIENT_Representation+0xa4>
 8012834:	b1d0      	cbz	r0, 801286c <uxr_serialize_CLIENT_Representation+0xa8>
 8012836:	46a0      	mov	r8, r4
 8012838:	f04f 0900 	mov.w	r9, #0
 801283c:	e002      	b.n	8012844 <uxr_serialize_CLIENT_Representation+0x80>
 801283e:	f108 0808 	add.w	r8, r8, #8
 8012842:	b198      	cbz	r0, 801286c <uxr_serialize_CLIENT_Representation+0xa8>
 8012844:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012848:	4628      	mov	r0, r5
 801284a:	f003 ffe3 	bl	8016814 <ucdr_serialize_string>
 801284e:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012852:	4607      	mov	r7, r0
 8012854:	4628      	mov	r0, r5
 8012856:	f003 ffdd 	bl	8016814 <ucdr_serialize_string>
 801285a:	6923      	ldr	r3, [r4, #16]
 801285c:	f109 0901 	add.w	r9, r9, #1
 8012860:	4038      	ands	r0, r7
 8012862:	4599      	cmp	r9, r3
 8012864:	b2c0      	uxtb	r0, r0
 8012866:	d3ea      	bcc.n	801283e <uxr_serialize_CLIENT_Representation+0x7a>
 8012868:	4006      	ands	r6, r0
 801286a:	e7d6      	b.n	801281a <uxr_serialize_CLIENT_Representation+0x56>
 801286c:	2600      	movs	r6, #0
 801286e:	e7d4      	b.n	801281a <uxr_serialize_CLIENT_Representation+0x56>

08012870 <uxr_deserialize_CLIENT_Representation>:
 8012870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012874:	2204      	movs	r2, #4
 8012876:	460c      	mov	r4, r1
 8012878:	4605      	mov	r5, r0
 801287a:	f7fb fb3b 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801287e:	2202      	movs	r2, #2
 8012880:	4606      	mov	r6, r0
 8012882:	1d21      	adds	r1, r4, #4
 8012884:	4628      	mov	r0, r5
 8012886:	f7fb fb35 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801288a:	2202      	movs	r2, #2
 801288c:	1da1      	adds	r1, r4, #6
 801288e:	4006      	ands	r6, r0
 8012890:	4628      	mov	r0, r5
 8012892:	f7fb fb2f 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012896:	4603      	mov	r3, r0
 8012898:	2204      	movs	r2, #4
 801289a:	f104 0108 	add.w	r1, r4, #8
 801289e:	4628      	mov	r0, r5
 80128a0:	b2f6      	uxtb	r6, r6
 80128a2:	401e      	ands	r6, r3
 80128a4:	f7fb fb26 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 80128a8:	4603      	mov	r3, r0
 80128aa:	f104 010c 	add.w	r1, r4, #12
 80128ae:	4628      	mov	r0, r5
 80128b0:	401e      	ands	r6, r3
 80128b2:	f7fb fe75 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 80128b6:	4603      	mov	r3, r0
 80128b8:	f104 010d 	add.w	r1, r4, #13
 80128bc:	4628      	mov	r0, r5
 80128be:	401e      	ands	r6, r3
 80128c0:	f7fb fe40 	bl	800e544 <ucdr_deserialize_bool>
 80128c4:	7b63      	ldrb	r3, [r4, #13]
 80128c6:	4006      	ands	r6, r0
 80128c8:	b93b      	cbnz	r3, 80128da <uxr_deserialize_CLIENT_Representation+0x6a>
 80128ca:	4628      	mov	r0, r5
 80128cc:	f104 011c 	add.w	r1, r4, #28
 80128d0:	f7fb ff7c 	bl	800e7cc <ucdr_deserialize_uint16_t>
 80128d4:	4030      	ands	r0, r6
 80128d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128da:	4628      	mov	r0, r5
 80128dc:	f104 0110 	add.w	r1, r4, #16
 80128e0:	f7fc f992 	bl	800ec08 <ucdr_deserialize_uint32_t>
 80128e4:	6923      	ldr	r3, [r4, #16]
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d903      	bls.n	80128f2 <uxr_deserialize_CLIENT_Representation+0x82>
 80128ea:	2301      	movs	r3, #1
 80128ec:	2600      	movs	r6, #0
 80128ee:	75ab      	strb	r3, [r5, #22]
 80128f0:	e7eb      	b.n	80128ca <uxr_deserialize_CLIENT_Representation+0x5a>
 80128f2:	b1eb      	cbz	r3, 8012930 <uxr_deserialize_CLIENT_Representation+0xc0>
 80128f4:	b1f0      	cbz	r0, 8012934 <uxr_deserialize_CLIENT_Representation+0xc4>
 80128f6:	46a0      	mov	r8, r4
 80128f8:	f04f 0900 	mov.w	r9, #0
 80128fc:	e002      	b.n	8012904 <uxr_deserialize_CLIENT_Representation+0x94>
 80128fe:	f108 0808 	add.w	r8, r8, #8
 8012902:	b1b8      	cbz	r0, 8012934 <uxr_deserialize_CLIENT_Representation+0xc4>
 8012904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012908:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801290c:	4628      	mov	r0, r5
 801290e:	f003 ff8f 	bl	8016830 <ucdr_deserialize_string>
 8012912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012916:	4607      	mov	r7, r0
 8012918:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801291c:	4628      	mov	r0, r5
 801291e:	f003 ff87 	bl	8016830 <ucdr_deserialize_string>
 8012922:	6923      	ldr	r3, [r4, #16]
 8012924:	f109 0901 	add.w	r9, r9, #1
 8012928:	4038      	ands	r0, r7
 801292a:	4599      	cmp	r9, r3
 801292c:	b2c0      	uxtb	r0, r0
 801292e:	d3e6      	bcc.n	80128fe <uxr_deserialize_CLIENT_Representation+0x8e>
 8012930:	4006      	ands	r6, r0
 8012932:	e7ca      	b.n	80128ca <uxr_deserialize_CLIENT_Representation+0x5a>
 8012934:	2600      	movs	r6, #0
 8012936:	e7c8      	b.n	80128ca <uxr_deserialize_CLIENT_Representation+0x5a>

08012938 <uxr_serialize_AGENT_Representation>:
 8012938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801293c:	2204      	movs	r2, #4
 801293e:	460c      	mov	r4, r1
 8012940:	4605      	mov	r5, r0
 8012942:	f7fb fa73 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8012946:	2202      	movs	r2, #2
 8012948:	4606      	mov	r6, r0
 801294a:	1d21      	adds	r1, r4, #4
 801294c:	4628      	mov	r0, r5
 801294e:	f7fb fa6d 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8012952:	2202      	movs	r2, #2
 8012954:	1da1      	adds	r1, r4, #6
 8012956:	4006      	ands	r6, r0
 8012958:	4628      	mov	r0, r5
 801295a:	f7fb fa67 	bl	800de2c <ucdr_serialize_array_uint8_t>
 801295e:	4603      	mov	r3, r0
 8012960:	7a21      	ldrb	r1, [r4, #8]
 8012962:	4628      	mov	r0, r5
 8012964:	b2f6      	uxtb	r6, r6
 8012966:	401e      	ands	r6, r3
 8012968:	f7fb fdd6 	bl	800e518 <ucdr_serialize_bool>
 801296c:	7a23      	ldrb	r3, [r4, #8]
 801296e:	ea00 0706 	and.w	r7, r0, r6
 8012972:	b913      	cbnz	r3, 801297a <uxr_serialize_AGENT_Representation+0x42>
 8012974:	4638      	mov	r0, r7
 8012976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801297a:	4628      	mov	r0, r5
 801297c:	68e1      	ldr	r1, [r4, #12]
 801297e:	f7fc f813 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8012982:	68e3      	ldr	r3, [r4, #12]
 8012984:	b313      	cbz	r3, 80129cc <uxr_serialize_AGENT_Representation+0x94>
 8012986:	b1e8      	cbz	r0, 80129c4 <uxr_serialize_AGENT_Representation+0x8c>
 8012988:	46a0      	mov	r8, r4
 801298a:	f04f 0900 	mov.w	r9, #0
 801298e:	e002      	b.n	8012996 <uxr_serialize_AGENT_Representation+0x5e>
 8012990:	f108 0808 	add.w	r8, r8, #8
 8012994:	b1b3      	cbz	r3, 80129c4 <uxr_serialize_AGENT_Representation+0x8c>
 8012996:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801299a:	4628      	mov	r0, r5
 801299c:	f003 ff3a 	bl	8016814 <ucdr_serialize_string>
 80129a0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80129a4:	4606      	mov	r6, r0
 80129a6:	4628      	mov	r0, r5
 80129a8:	f003 ff34 	bl	8016814 <ucdr_serialize_string>
 80129ac:	68e2      	ldr	r2, [r4, #12]
 80129ae:	f109 0901 	add.w	r9, r9, #1
 80129b2:	ea06 0300 	and.w	r3, r6, r0
 80129b6:	4591      	cmp	r9, r2
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	d3e9      	bcc.n	8012990 <uxr_serialize_AGENT_Representation+0x58>
 80129bc:	401f      	ands	r7, r3
 80129be:	4638      	mov	r0, r7
 80129c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129c4:	2700      	movs	r7, #0
 80129c6:	4638      	mov	r0, r7
 80129c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129cc:	4007      	ands	r7, r0
 80129ce:	e7d1      	b.n	8012974 <uxr_serialize_AGENT_Representation+0x3c>

080129d0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80129d0:	b570      	push	{r4, r5, r6, lr}
 80129d2:	460d      	mov	r5, r1
 80129d4:	7809      	ldrb	r1, [r1, #0]
 80129d6:	4606      	mov	r6, r0
 80129d8:	f7fb fd9e 	bl	800e518 <ucdr_serialize_bool>
 80129dc:	782b      	ldrb	r3, [r5, #0]
 80129de:	4604      	mov	r4, r0
 80129e0:	b94b      	cbnz	r3, 80129f6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80129e2:	4630      	mov	r0, r6
 80129e4:	7a29      	ldrb	r1, [r5, #8]
 80129e6:	f7fb fd97 	bl	800e518 <ucdr_serialize_bool>
 80129ea:	7a2b      	ldrb	r3, [r5, #8]
 80129ec:	4004      	ands	r4, r0
 80129ee:	b2e4      	uxtb	r4, r4
 80129f0:	b943      	cbnz	r3, 8012a04 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80129f2:	4620      	mov	r0, r4
 80129f4:	bd70      	pop	{r4, r5, r6, pc}
 80129f6:	4630      	mov	r0, r6
 80129f8:	6869      	ldr	r1, [r5, #4]
 80129fa:	f003 ff0b 	bl	8016814 <ucdr_serialize_string>
 80129fe:	4004      	ands	r4, r0
 8012a00:	b2e4      	uxtb	r4, r4
 8012a02:	e7ee      	b.n	80129e2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012a04:	4630      	mov	r0, r6
 8012a06:	68e9      	ldr	r1, [r5, #12]
 8012a08:	f003 ff04 	bl	8016814 <ucdr_serialize_string>
 8012a0c:	4004      	ands	r4, r0
 8012a0e:	4620      	mov	r0, r4
 8012a10:	bd70      	pop	{r4, r5, r6, pc}
 8012a12:	bf00      	nop

08012a14 <uxr_serialize_OBJK_Topic_Binary>:
 8012a14:	b570      	push	{r4, r5, r6, lr}
 8012a16:	460d      	mov	r5, r1
 8012a18:	6809      	ldr	r1, [r1, #0]
 8012a1a:	4606      	mov	r6, r0
 8012a1c:	f003 fefa 	bl	8016814 <ucdr_serialize_string>
 8012a20:	7929      	ldrb	r1, [r5, #4]
 8012a22:	4604      	mov	r4, r0
 8012a24:	4630      	mov	r0, r6
 8012a26:	f7fb fd77 	bl	800e518 <ucdr_serialize_bool>
 8012a2a:	792b      	ldrb	r3, [r5, #4]
 8012a2c:	4004      	ands	r4, r0
 8012a2e:	b2e4      	uxtb	r4, r4
 8012a30:	b943      	cbnz	r3, 8012a44 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012a32:	4630      	mov	r0, r6
 8012a34:	7b29      	ldrb	r1, [r5, #12]
 8012a36:	f7fb fd6f 	bl	800e518 <ucdr_serialize_bool>
 8012a3a:	7b2b      	ldrb	r3, [r5, #12]
 8012a3c:	4004      	ands	r4, r0
 8012a3e:	b93b      	cbnz	r3, 8012a50 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012a40:	4620      	mov	r0, r4
 8012a42:	bd70      	pop	{r4, r5, r6, pc}
 8012a44:	4630      	mov	r0, r6
 8012a46:	68a9      	ldr	r1, [r5, #8]
 8012a48:	f003 fee4 	bl	8016814 <ucdr_serialize_string>
 8012a4c:	4004      	ands	r4, r0
 8012a4e:	e7f0      	b.n	8012a32 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012a50:	4630      	mov	r0, r6
 8012a52:	6929      	ldr	r1, [r5, #16]
 8012a54:	f003 fede 	bl	8016814 <ucdr_serialize_string>
 8012a58:	4004      	ands	r4, r0
 8012a5a:	b2e4      	uxtb	r4, r4
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	bd70      	pop	{r4, r5, r6, pc}

08012a60 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a64:	460c      	mov	r4, r1
 8012a66:	7809      	ldrb	r1, [r1, #0]
 8012a68:	4606      	mov	r6, r0
 8012a6a:	f7fb fd55 	bl	800e518 <ucdr_serialize_bool>
 8012a6e:	7823      	ldrb	r3, [r4, #0]
 8012a70:	4605      	mov	r5, r0
 8012a72:	b96b      	cbnz	r3, 8012a90 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012a74:	4630      	mov	r0, r6
 8012a76:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012a7a:	f7fb fd4d 	bl	800e518 <ucdr_serialize_bool>
 8012a7e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012a82:	4005      	ands	r5, r0
 8012a84:	b2ed      	uxtb	r5, r5
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d169      	bne.n	8012b5e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012a8a:	4628      	mov	r0, r5
 8012a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a90:	4630      	mov	r0, r6
 8012a92:	6861      	ldr	r1, [r4, #4]
 8012a94:	f7fb ff88 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8012a98:	6863      	ldr	r3, [r4, #4]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d06b      	beq.n	8012b76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	d067      	beq.n	8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	68a1      	ldr	r1, [r4, #8]
 8012aa6:	f003 feb5 	bl	8016814 <ucdr_serialize_string>
 8012aaa:	6863      	ldr	r3, [r4, #4]
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d953      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d05e      	beq.n	8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ab4:	4630      	mov	r0, r6
 8012ab6:	68e1      	ldr	r1, [r4, #12]
 8012ab8:	f003 feac 	bl	8016814 <ucdr_serialize_string>
 8012abc:	6863      	ldr	r3, [r4, #4]
 8012abe:	2b02      	cmp	r3, #2
 8012ac0:	d94a      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d055      	beq.n	8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	6921      	ldr	r1, [r4, #16]
 8012aca:	f003 fea3 	bl	8016814 <ucdr_serialize_string>
 8012ace:	6863      	ldr	r3, [r4, #4]
 8012ad0:	2b03      	cmp	r3, #3
 8012ad2:	d941      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ad4:	2800      	cmp	r0, #0
 8012ad6:	d04c      	beq.n	8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ad8:	4630      	mov	r0, r6
 8012ada:	6961      	ldr	r1, [r4, #20]
 8012adc:	f003 fe9a 	bl	8016814 <ucdr_serialize_string>
 8012ae0:	6863      	ldr	r3, [r4, #4]
 8012ae2:	2b04      	cmp	r3, #4
 8012ae4:	d938      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d043      	beq.n	8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012aea:	4630      	mov	r0, r6
 8012aec:	69a1      	ldr	r1, [r4, #24]
 8012aee:	f003 fe91 	bl	8016814 <ucdr_serialize_string>
 8012af2:	6863      	ldr	r3, [r4, #4]
 8012af4:	2b05      	cmp	r3, #5
 8012af6:	d92f      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012af8:	2800      	cmp	r0, #0
 8012afa:	d03a      	beq.n	8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012afc:	4630      	mov	r0, r6
 8012afe:	69e1      	ldr	r1, [r4, #28]
 8012b00:	f003 fe88 	bl	8016814 <ucdr_serialize_string>
 8012b04:	6863      	ldr	r3, [r4, #4]
 8012b06:	2b06      	cmp	r3, #6
 8012b08:	d926      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b0a:	b390      	cbz	r0, 8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	6a21      	ldr	r1, [r4, #32]
 8012b10:	f003 fe80 	bl	8016814 <ucdr_serialize_string>
 8012b14:	6863      	ldr	r3, [r4, #4]
 8012b16:	2b07      	cmp	r3, #7
 8012b18:	d91e      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b1a:	b350      	cbz	r0, 8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012b20:	f003 fe78 	bl	8016814 <ucdr_serialize_string>
 8012b24:	6863      	ldr	r3, [r4, #4]
 8012b26:	2b08      	cmp	r3, #8
 8012b28:	d916      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b2a:	b310      	cbz	r0, 8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012b30:	f003 fe70 	bl	8016814 <ucdr_serialize_string>
 8012b34:	6863      	ldr	r3, [r4, #4]
 8012b36:	2b09      	cmp	r3, #9
 8012b38:	d90e      	bls.n	8012b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012b3a:	b1d0      	cbz	r0, 8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b3c:	2709      	movs	r7, #9
 8012b3e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012b42:	e000      	b.n	8012b46 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012b44:	b1a8      	cbz	r0, 8012b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012b46:	4630      	mov	r0, r6
 8012b48:	f858 1b04 	ldr.w	r1, [r8], #4
 8012b4c:	f003 fe62 	bl	8016814 <ucdr_serialize_string>
 8012b50:	6862      	ldr	r2, [r4, #4]
 8012b52:	3701      	adds	r7, #1
 8012b54:	4297      	cmp	r7, r2
 8012b56:	d3f5      	bcc.n	8012b44 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012b58:	4005      	ands	r5, r0
 8012b5a:	b2ed      	uxtb	r5, r5
 8012b5c:	e78a      	b.n	8012a74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012b5e:	4630      	mov	r0, r6
 8012b60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b62:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012b66:	f7fd f9e5 	bl	800ff34 <ucdr_serialize_sequence_uint8_t>
 8012b6a:	4005      	ands	r5, r0
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b72:	2500      	movs	r5, #0
 8012b74:	e77e      	b.n	8012a74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012b76:	4028      	ands	r0, r5
 8012b78:	b2c5      	uxtb	r5, r0
 8012b7a:	e77b      	b.n	8012a74 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012b7c <uxr_serialize_OBJK_Publisher_Binary>:
 8012b7c:	b570      	push	{r4, r5, r6, lr}
 8012b7e:	460d      	mov	r5, r1
 8012b80:	7809      	ldrb	r1, [r1, #0]
 8012b82:	4606      	mov	r6, r0
 8012b84:	f7fb fcc8 	bl	800e518 <ucdr_serialize_bool>
 8012b88:	782b      	ldrb	r3, [r5, #0]
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	b94b      	cbnz	r3, 8012ba2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012b8e:	4630      	mov	r0, r6
 8012b90:	7a29      	ldrb	r1, [r5, #8]
 8012b92:	f7fb fcc1 	bl	800e518 <ucdr_serialize_bool>
 8012b96:	7a2b      	ldrb	r3, [r5, #8]
 8012b98:	4004      	ands	r4, r0
 8012b9a:	b2e4      	uxtb	r4, r4
 8012b9c:	b943      	cbnz	r3, 8012bb0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	bd70      	pop	{r4, r5, r6, pc}
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	6869      	ldr	r1, [r5, #4]
 8012ba6:	f003 fe35 	bl	8016814 <ucdr_serialize_string>
 8012baa:	4004      	ands	r4, r0
 8012bac:	b2e4      	uxtb	r4, r4
 8012bae:	e7ee      	b.n	8012b8e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f105 010c 	add.w	r1, r5, #12
 8012bb6:	f7ff ff53 	bl	8012a60 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012bba:	4004      	ands	r4, r0
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	bd70      	pop	{r4, r5, r6, pc}

08012bc0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc4:	460c      	mov	r4, r1
 8012bc6:	7809      	ldrb	r1, [r1, #0]
 8012bc8:	4606      	mov	r6, r0
 8012bca:	f7fb fca5 	bl	800e518 <ucdr_serialize_bool>
 8012bce:	7823      	ldrb	r3, [r4, #0]
 8012bd0:	4605      	mov	r5, r0
 8012bd2:	b96b      	cbnz	r3, 8012bf0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012bda:	f7fb fc9d 	bl	800e518 <ucdr_serialize_bool>
 8012bde:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012be2:	4005      	ands	r5, r0
 8012be4:	b2ed      	uxtb	r5, r5
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d169      	bne.n	8012cbe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012bea:	4628      	mov	r0, r5
 8012bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	6861      	ldr	r1, [r4, #4]
 8012bf4:	f7fb fed8 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8012bf8:	6863      	ldr	r3, [r4, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d06b      	beq.n	8012cd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	d067      	beq.n	8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c02:	4630      	mov	r0, r6
 8012c04:	68a1      	ldr	r1, [r4, #8]
 8012c06:	f003 fe05 	bl	8016814 <ucdr_serialize_string>
 8012c0a:	6863      	ldr	r3, [r4, #4]
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	d953      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c10:	2800      	cmp	r0, #0
 8012c12:	d05e      	beq.n	8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c14:	4630      	mov	r0, r6
 8012c16:	68e1      	ldr	r1, [r4, #12]
 8012c18:	f003 fdfc 	bl	8016814 <ucdr_serialize_string>
 8012c1c:	6863      	ldr	r3, [r4, #4]
 8012c1e:	2b02      	cmp	r3, #2
 8012c20:	d94a      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c22:	2800      	cmp	r0, #0
 8012c24:	d055      	beq.n	8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c26:	4630      	mov	r0, r6
 8012c28:	6921      	ldr	r1, [r4, #16]
 8012c2a:	f003 fdf3 	bl	8016814 <ucdr_serialize_string>
 8012c2e:	6863      	ldr	r3, [r4, #4]
 8012c30:	2b03      	cmp	r3, #3
 8012c32:	d941      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d04c      	beq.n	8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c38:	4630      	mov	r0, r6
 8012c3a:	6961      	ldr	r1, [r4, #20]
 8012c3c:	f003 fdea 	bl	8016814 <ucdr_serialize_string>
 8012c40:	6863      	ldr	r3, [r4, #4]
 8012c42:	2b04      	cmp	r3, #4
 8012c44:	d938      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	d043      	beq.n	8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c4a:	4630      	mov	r0, r6
 8012c4c:	69a1      	ldr	r1, [r4, #24]
 8012c4e:	f003 fde1 	bl	8016814 <ucdr_serialize_string>
 8012c52:	6863      	ldr	r3, [r4, #4]
 8012c54:	2b05      	cmp	r3, #5
 8012c56:	d92f      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d03a      	beq.n	8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	69e1      	ldr	r1, [r4, #28]
 8012c60:	f003 fdd8 	bl	8016814 <ucdr_serialize_string>
 8012c64:	6863      	ldr	r3, [r4, #4]
 8012c66:	2b06      	cmp	r3, #6
 8012c68:	d926      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c6a:	b390      	cbz	r0, 8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	6a21      	ldr	r1, [r4, #32]
 8012c70:	f003 fdd0 	bl	8016814 <ucdr_serialize_string>
 8012c74:	6863      	ldr	r3, [r4, #4]
 8012c76:	2b07      	cmp	r3, #7
 8012c78:	d91e      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c7a:	b350      	cbz	r0, 8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012c80:	f003 fdc8 	bl	8016814 <ucdr_serialize_string>
 8012c84:	6863      	ldr	r3, [r4, #4]
 8012c86:	2b08      	cmp	r3, #8
 8012c88:	d916      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c8a:	b310      	cbz	r0, 8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012c90:	f003 fdc0 	bl	8016814 <ucdr_serialize_string>
 8012c94:	6863      	ldr	r3, [r4, #4]
 8012c96:	2b09      	cmp	r3, #9
 8012c98:	d90e      	bls.n	8012cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c9a:	b1d0      	cbz	r0, 8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c9c:	2709      	movs	r7, #9
 8012c9e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012ca2:	e000      	b.n	8012ca6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012ca4:	b1a8      	cbz	r0, 8012cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ca6:	4630      	mov	r0, r6
 8012ca8:	f858 1b04 	ldr.w	r1, [r8], #4
 8012cac:	f003 fdb2 	bl	8016814 <ucdr_serialize_string>
 8012cb0:	6862      	ldr	r2, [r4, #4]
 8012cb2:	3701      	adds	r7, #1
 8012cb4:	4297      	cmp	r7, r2
 8012cb6:	d3f5      	bcc.n	8012ca4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012cb8:	4005      	ands	r5, r0
 8012cba:	b2ed      	uxtb	r5, r5
 8012cbc:	e78a      	b.n	8012bd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012cc2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012cc6:	f7fd f935 	bl	800ff34 <ucdr_serialize_sequence_uint8_t>
 8012cca:	4005      	ands	r5, r0
 8012ccc:	4628      	mov	r0, r5
 8012cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd2:	2500      	movs	r5, #0
 8012cd4:	e77e      	b.n	8012bd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012cd6:	4028      	ands	r0, r5
 8012cd8:	b2c5      	uxtb	r5, r0
 8012cda:	e77b      	b.n	8012bd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012cdc <uxr_serialize_OBJK_Subscriber_Binary>:
 8012cdc:	b570      	push	{r4, r5, r6, lr}
 8012cde:	460d      	mov	r5, r1
 8012ce0:	7809      	ldrb	r1, [r1, #0]
 8012ce2:	4606      	mov	r6, r0
 8012ce4:	f7fb fc18 	bl	800e518 <ucdr_serialize_bool>
 8012ce8:	782b      	ldrb	r3, [r5, #0]
 8012cea:	4604      	mov	r4, r0
 8012cec:	b94b      	cbnz	r3, 8012d02 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012cee:	4630      	mov	r0, r6
 8012cf0:	7a29      	ldrb	r1, [r5, #8]
 8012cf2:	f7fb fc11 	bl	800e518 <ucdr_serialize_bool>
 8012cf6:	7a2b      	ldrb	r3, [r5, #8]
 8012cf8:	4004      	ands	r4, r0
 8012cfa:	b2e4      	uxtb	r4, r4
 8012cfc:	b943      	cbnz	r3, 8012d10 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012cfe:	4620      	mov	r0, r4
 8012d00:	bd70      	pop	{r4, r5, r6, pc}
 8012d02:	4630      	mov	r0, r6
 8012d04:	6869      	ldr	r1, [r5, #4]
 8012d06:	f003 fd85 	bl	8016814 <ucdr_serialize_string>
 8012d0a:	4004      	ands	r4, r0
 8012d0c:	b2e4      	uxtb	r4, r4
 8012d0e:	e7ee      	b.n	8012cee <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012d10:	4630      	mov	r0, r6
 8012d12:	f105 010c 	add.w	r1, r5, #12
 8012d16:	f7ff ff53 	bl	8012bc0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012d1a:	4004      	ands	r4, r0
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}

08012d20 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012d20:	b570      	push	{r4, r5, r6, lr}
 8012d22:	460d      	mov	r5, r1
 8012d24:	8809      	ldrh	r1, [r1, #0]
 8012d26:	4606      	mov	r6, r0
 8012d28:	f7fb fc50 	bl	800e5cc <ucdr_serialize_uint16_t>
 8012d2c:	78a9      	ldrb	r1, [r5, #2]
 8012d2e:	4604      	mov	r4, r0
 8012d30:	4630      	mov	r0, r6
 8012d32:	f7fb fbf1 	bl	800e518 <ucdr_serialize_bool>
 8012d36:	78ab      	ldrb	r3, [r5, #2]
 8012d38:	4004      	ands	r4, r0
 8012d3a:	b2e4      	uxtb	r4, r4
 8012d3c:	b9b3      	cbnz	r3, 8012d6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8012d3e:	4630      	mov	r0, r6
 8012d40:	79a9      	ldrb	r1, [r5, #6]
 8012d42:	f7fb fbe9 	bl	800e518 <ucdr_serialize_bool>
 8012d46:	79ab      	ldrb	r3, [r5, #6]
 8012d48:	4004      	ands	r4, r0
 8012d4a:	bb33      	cbnz	r3, 8012d9a <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	7b29      	ldrb	r1, [r5, #12]
 8012d50:	f7fb fbe2 	bl	800e518 <ucdr_serialize_bool>
 8012d54:	7b2b      	ldrb	r3, [r5, #12]
 8012d56:	4004      	ands	r4, r0
 8012d58:	b9c3      	cbnz	r3, 8012d8c <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	7d29      	ldrb	r1, [r5, #20]
 8012d5e:	f7fb fbdb 	bl	800e518 <ucdr_serialize_bool>
 8012d62:	7d2b      	ldrb	r3, [r5, #20]
 8012d64:	4004      	ands	r4, r0
 8012d66:	b93b      	cbnz	r3, 8012d78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8012d68:	4620      	mov	r0, r4
 8012d6a:	bd70      	pop	{r4, r5, r6, pc}
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	88a9      	ldrh	r1, [r5, #4]
 8012d70:	f7fb fc2c 	bl	800e5cc <ucdr_serialize_uint16_t>
 8012d74:	4004      	ands	r4, r0
 8012d76:	e7e2      	b.n	8012d3e <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8012d78:	4630      	mov	r0, r6
 8012d7a:	69aa      	ldr	r2, [r5, #24]
 8012d7c:	f105 011c 	add.w	r1, r5, #28
 8012d80:	f7fd f8d8 	bl	800ff34 <ucdr_serialize_sequence_uint8_t>
 8012d84:	4004      	ands	r4, r0
 8012d86:	b2e4      	uxtb	r4, r4
 8012d88:	4620      	mov	r0, r4
 8012d8a:	bd70      	pop	{r4, r5, r6, pc}
 8012d8c:	4630      	mov	r0, r6
 8012d8e:	6929      	ldr	r1, [r5, #16]
 8012d90:	f7fb fe0a 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8012d94:	4004      	ands	r4, r0
 8012d96:	b2e4      	uxtb	r4, r4
 8012d98:	e7df      	b.n	8012d5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8012d9a:	4630      	mov	r0, r6
 8012d9c:	68a9      	ldr	r1, [r5, #8]
 8012d9e:	f7fb fe03 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8012da2:	4004      	ands	r4, r0
 8012da4:	b2e4      	uxtb	r4, r4
 8012da6:	e7d1      	b.n	8012d4c <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08012da8 <uxr_serialize_OBJK_DataReader_Binary>:
 8012da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012daa:	2202      	movs	r2, #2
 8012dac:	460c      	mov	r4, r1
 8012dae:	4606      	mov	r6, r0
 8012db0:	f7fb f83c 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8012db4:	78a1      	ldrb	r1, [r4, #2]
 8012db6:	4605      	mov	r5, r0
 8012db8:	4630      	mov	r0, r6
 8012dba:	f7fb fbad 	bl	800e518 <ucdr_serialize_bool>
 8012dbe:	78a3      	ldrb	r3, [r4, #2]
 8012dc0:	4005      	ands	r5, r0
 8012dc2:	b2ed      	uxtb	r5, r5
 8012dc4:	b90b      	cbnz	r3, 8012dca <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dca:	f104 0108 	add.w	r1, r4, #8
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f7ff ffa6 	bl	8012d20 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012dd4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012dd8:	4607      	mov	r7, r0
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f7fb fb9c 	bl	800e518 <ucdr_serialize_bool>
 8012de0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012de4:	4007      	ands	r7, r0
 8012de6:	b2ff      	uxtb	r7, r7
 8012de8:	b95b      	cbnz	r3, 8012e02 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012dea:	4630      	mov	r0, r6
 8012dec:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8012df0:	f7fb fb92 	bl	800e518 <ucdr_serialize_bool>
 8012df4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012df8:	4007      	ands	r7, r0
 8012dfa:	b94b      	cbnz	r3, 8012e10 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012dfc:	403d      	ands	r5, r7
 8012dfe:	4628      	mov	r0, r5
 8012e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e02:	4630      	mov	r0, r6
 8012e04:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012e08:	f7fc f824 	bl	800ee54 <ucdr_serialize_uint64_t>
 8012e0c:	4007      	ands	r7, r0
 8012e0e:	e7ec      	b.n	8012dea <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012e10:	4630      	mov	r0, r6
 8012e12:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012e14:	f003 fcfe 	bl	8016814 <ucdr_serialize_string>
 8012e18:	4007      	ands	r7, r0
 8012e1a:	b2ff      	uxtb	r7, r7
 8012e1c:	e7ee      	b.n	8012dfc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012e1e:	bf00      	nop

08012e20 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e22:	2202      	movs	r2, #2
 8012e24:	460d      	mov	r5, r1
 8012e26:	4606      	mov	r6, r0
 8012e28:	f7fb f800 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8012e2c:	78a9      	ldrb	r1, [r5, #2]
 8012e2e:	4604      	mov	r4, r0
 8012e30:	4630      	mov	r0, r6
 8012e32:	f7fb fb71 	bl	800e518 <ucdr_serialize_bool>
 8012e36:	78ab      	ldrb	r3, [r5, #2]
 8012e38:	4004      	ands	r4, r0
 8012e3a:	b2e4      	uxtb	r4, r4
 8012e3c:	b90b      	cbnz	r3, 8012e42 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012e3e:	4620      	mov	r0, r4
 8012e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e42:	f105 0108 	add.w	r1, r5, #8
 8012e46:	4630      	mov	r0, r6
 8012e48:	f7ff ff6a 	bl	8012d20 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012e4c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012e50:	4607      	mov	r7, r0
 8012e52:	4630      	mov	r0, r6
 8012e54:	f7fb fb60 	bl	800e518 <ucdr_serialize_bool>
 8012e58:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012e5c:	4007      	ands	r7, r0
 8012e5e:	b2ff      	uxtb	r7, r7
 8012e60:	b913      	cbnz	r3, 8012e68 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012e62:	403c      	ands	r4, r7
 8012e64:	4620      	mov	r0, r4
 8012e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e68:	4630      	mov	r0, r6
 8012e6a:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012e6e:	f7fb fff1 	bl	800ee54 <ucdr_serialize_uint64_t>
 8012e72:	4007      	ands	r7, r0
 8012e74:	e7f5      	b.n	8012e62 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012e76:	bf00      	nop

08012e78 <uxr_deserialize_ObjectVariant>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	4605      	mov	r5, r0
 8012e7c:	460e      	mov	r6, r1
 8012e7e:	f7fb fb8f 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012e82:	b320      	cbz	r0, 8012ece <uxr_deserialize_ObjectVariant+0x56>
 8012e84:	7833      	ldrb	r3, [r6, #0]
 8012e86:	4604      	mov	r4, r0
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	2b0d      	cmp	r3, #13
 8012e8c:	d81d      	bhi.n	8012eca <uxr_deserialize_ObjectVariant+0x52>
 8012e8e:	e8df f003 	tbb	[pc, r3]
 8012e92:	2107      	.short	0x2107
 8012e94:	21214b4b 	.word	0x21214b4b
 8012e98:	381c2121 	.word	0x381c2121
 8012e9c:	876a3838 	.word	0x876a3838
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	1d31      	adds	r1, r6, #4
 8012ea4:	f7fb fb7c 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	b138      	cbz	r0, 8012ebc <uxr_deserialize_ObjectVariant+0x44>
 8012eac:	7933      	ldrb	r3, [r6, #4]
 8012eae:	2b02      	cmp	r3, #2
 8012eb0:	d07c      	beq.n	8012fac <uxr_deserialize_ObjectVariant+0x134>
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	f000 8082 	beq.w	8012fbc <uxr_deserialize_ObjectVariant+0x144>
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d077      	beq.n	8012fac <uxr_deserialize_ObjectVariant+0x134>
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012ec2:	f7fc f943 	bl	800f14c <ucdr_deserialize_int16_t>
 8012ec6:	4004      	ands	r4, r0
 8012ec8:	b2e4      	uxtb	r4, r4
 8012eca:	4620      	mov	r0, r4
 8012ecc:	bd70      	pop	{r4, r5, r6, pc}
 8012ece:	2400      	movs	r4, #0
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}
 8012ed4:	4628      	mov	r0, r5
 8012ed6:	1d31      	adds	r1, r6, #4
 8012ed8:	f7fb fb62 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012edc:	4604      	mov	r4, r0
 8012ede:	b130      	cbz	r0, 8012eee <uxr_deserialize_ObjectVariant+0x76>
 8012ee0:	7933      	ldrb	r3, [r6, #4]
 8012ee2:	2b02      	cmp	r3, #2
 8012ee4:	d037      	beq.n	8012f56 <uxr_deserialize_ObjectVariant+0xde>
 8012ee6:	2b03      	cmp	r3, #3
 8012ee8:	d02a      	beq.n	8012f40 <uxr_deserialize_ObjectVariant+0xc8>
 8012eea:	2b01      	cmp	r3, #1
 8012eec:	d033      	beq.n	8012f56 <uxr_deserialize_ObjectVariant+0xde>
 8012eee:	4628      	mov	r0, r5
 8012ef0:	2202      	movs	r2, #2
 8012ef2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012ef6:	f7fa fffd 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012efa:	4004      	ands	r4, r0
 8012efc:	b2e4      	uxtb	r4, r4
 8012efe:	4620      	mov	r0, r4
 8012f00:	bd70      	pop	{r4, r5, r6, pc}
 8012f02:	4628      	mov	r0, r5
 8012f04:	1d31      	adds	r1, r6, #4
 8012f06:	f7fb fb4b 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012f0a:	2800      	cmp	r0, #0
 8012f0c:	d0df      	beq.n	8012ece <uxr_deserialize_ObjectVariant+0x56>
 8012f0e:	7933      	ldrb	r3, [r6, #4]
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d001      	beq.n	8012f18 <uxr_deserialize_ObjectVariant+0xa0>
 8012f14:	2b02      	cmp	r3, #2
 8012f16:	d1d8      	bne.n	8012eca <uxr_deserialize_ObjectVariant+0x52>
 8012f18:	4628      	mov	r0, r5
 8012f1a:	68b1      	ldr	r1, [r6, #8]
 8012f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f24:	f003 bc84 	b.w	8016830 <ucdr_deserialize_string>
 8012f28:	4628      	mov	r0, r5
 8012f2a:	1d31      	adds	r1, r6, #4
 8012f2c:	f7fb fb38 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8012f30:	4604      	mov	r4, r0
 8012f32:	2800      	cmp	r0, #0
 8012f34:	d0db      	beq.n	8012eee <uxr_deserialize_ObjectVariant+0x76>
 8012f36:	7933      	ldrb	r3, [r6, #4]
 8012f38:	2b02      	cmp	r3, #2
 8012f3a:	d00c      	beq.n	8012f56 <uxr_deserialize_ObjectVariant+0xde>
 8012f3c:	2b03      	cmp	r3, #3
 8012f3e:	d1d6      	bne.n	8012eee <uxr_deserialize_ObjectVariant+0x76>
 8012f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f44:	4628      	mov	r0, r5
 8012f46:	f106 0308 	add.w	r3, r6, #8
 8012f4a:	f106 010c 	add.w	r1, r6, #12
 8012f4e:	f7fd f803 	bl	800ff58 <ucdr_deserialize_sequence_uint8_t>
 8012f52:	4604      	mov	r4, r0
 8012f54:	e7cb      	b.n	8012eee <uxr_deserialize_ObjectVariant+0x76>
 8012f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	68b1      	ldr	r1, [r6, #8]
 8012f5e:	f003 fc67 	bl	8016830 <ucdr_deserialize_string>
 8012f62:	4604      	mov	r4, r0
 8012f64:	e7c3      	b.n	8012eee <uxr_deserialize_ObjectVariant+0x76>
 8012f66:	2204      	movs	r2, #4
 8012f68:	4628      	mov	r0, r5
 8012f6a:	18b1      	adds	r1, r6, r2
 8012f6c:	f7fa ffc2 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012f70:	2202      	movs	r2, #2
 8012f72:	4604      	mov	r4, r0
 8012f74:	f106 0108 	add.w	r1, r6, #8
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f7fa ffbb 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012f7e:	2202      	movs	r2, #2
 8012f80:	4004      	ands	r4, r0
 8012f82:	f106 010a 	add.w	r1, r6, #10
 8012f86:	4628      	mov	r0, r5
 8012f88:	f7fa ffb4 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	b2e4      	uxtb	r4, r4
 8012f90:	4628      	mov	r0, r5
 8012f92:	f106 010c 	add.w	r1, r6, #12
 8012f96:	401c      	ands	r4, r3
 8012f98:	f7fb fad4 	bl	800e544 <ucdr_deserialize_bool>
 8012f9c:	4004      	ands	r4, r0
 8012f9e:	e794      	b.n	8012eca <uxr_deserialize_ObjectVariant+0x52>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	1d31      	adds	r1, r6, #4
 8012fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fa8:	f7ff bc62 	b.w	8012870 <uxr_deserialize_CLIENT_Representation>
 8012fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	68b1      	ldr	r1, [r6, #8]
 8012fb4:	f003 fc3c 	bl	8016830 <ucdr_deserialize_string>
 8012fb8:	4604      	mov	r4, r0
 8012fba:	e77f      	b.n	8012ebc <uxr_deserialize_ObjectVariant+0x44>
 8012fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f106 0308 	add.w	r3, r6, #8
 8012fc6:	f106 010c 	add.w	r1, r6, #12
 8012fca:	f7fc ffc5 	bl	800ff58 <ucdr_deserialize_sequence_uint8_t>
 8012fce:	4604      	mov	r4, r0
 8012fd0:	e774      	b.n	8012ebc <uxr_deserialize_ObjectVariant+0x44>
 8012fd2:	bf00      	nop

08012fd4 <uxr_deserialize_BaseObjectRequest>:
 8012fd4:	b570      	push	{r4, r5, r6, lr}
 8012fd6:	2202      	movs	r2, #2
 8012fd8:	4605      	mov	r5, r0
 8012fda:	460e      	mov	r6, r1
 8012fdc:	f7fa ff8a 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012fe0:	2202      	movs	r2, #2
 8012fe2:	4604      	mov	r4, r0
 8012fe4:	1cb1      	adds	r1, r6, #2
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f7fa ff84 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8012fec:	4020      	ands	r0, r4
 8012fee:	b2c0      	uxtb	r0, r0
 8012ff0:	bd70      	pop	{r4, r5, r6, pc}
 8012ff2:	bf00      	nop

08012ff4 <uxr_deserialize_BaseObjectReply>:
 8012ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff8:	2202      	movs	r2, #2
 8012ffa:	4606      	mov	r6, r0
 8012ffc:	460f      	mov	r7, r1
 8012ffe:	f7fa ff79 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8013002:	2202      	movs	r2, #2
 8013004:	1cb9      	adds	r1, r7, #2
 8013006:	4605      	mov	r5, r0
 8013008:	4630      	mov	r0, r6
 801300a:	f7fa ff73 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801300e:	1d39      	adds	r1, r7, #4
 8013010:	4680      	mov	r8, r0
 8013012:	4630      	mov	r0, r6
 8013014:	f7fb fac4 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8013018:	1d79      	adds	r1, r7, #5
 801301a:	4604      	mov	r4, r0
 801301c:	4630      	mov	r0, r6
 801301e:	f7fb fabf 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8013022:	ea05 0508 	and.w	r5, r5, r8
 8013026:	402c      	ands	r4, r5
 8013028:	4020      	ands	r0, r4
 801302a:	b2c0      	uxtb	r0, r0
 801302c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013030 <uxr_serialize_ReadSpecification>:
 8013030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013032:	460d      	mov	r5, r1
 8013034:	7809      	ldrb	r1, [r1, #0]
 8013036:	4606      	mov	r6, r0
 8013038:	f7fb fa9c 	bl	800e574 <ucdr_serialize_uint8_t>
 801303c:	7869      	ldrb	r1, [r5, #1]
 801303e:	4604      	mov	r4, r0
 8013040:	4630      	mov	r0, r6
 8013042:	f7fb fa97 	bl	800e574 <ucdr_serialize_uint8_t>
 8013046:	78a9      	ldrb	r1, [r5, #2]
 8013048:	4004      	ands	r4, r0
 801304a:	4630      	mov	r0, r6
 801304c:	f7fb fa64 	bl	800e518 <ucdr_serialize_bool>
 8013050:	78ab      	ldrb	r3, [r5, #2]
 8013052:	b2e4      	uxtb	r4, r4
 8013054:	4004      	ands	r4, r0
 8013056:	b943      	cbnz	r3, 801306a <uxr_serialize_ReadSpecification+0x3a>
 8013058:	4630      	mov	r0, r6
 801305a:	7a29      	ldrb	r1, [r5, #8]
 801305c:	f7fb fa5c 	bl	800e518 <ucdr_serialize_bool>
 8013060:	7a2b      	ldrb	r3, [r5, #8]
 8013062:	4004      	ands	r4, r0
 8013064:	b93b      	cbnz	r3, 8013076 <uxr_serialize_ReadSpecification+0x46>
 8013066:	4620      	mov	r0, r4
 8013068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801306a:	4630      	mov	r0, r6
 801306c:	6869      	ldr	r1, [r5, #4]
 801306e:	f003 fbd1 	bl	8016814 <ucdr_serialize_string>
 8013072:	4004      	ands	r4, r0
 8013074:	e7f0      	b.n	8013058 <uxr_serialize_ReadSpecification+0x28>
 8013076:	8969      	ldrh	r1, [r5, #10]
 8013078:	4630      	mov	r0, r6
 801307a:	f7fb faa7 	bl	800e5cc <ucdr_serialize_uint16_t>
 801307e:	89a9      	ldrh	r1, [r5, #12]
 8013080:	4607      	mov	r7, r0
 8013082:	4630      	mov	r0, r6
 8013084:	f7fb faa2 	bl	800e5cc <ucdr_serialize_uint16_t>
 8013088:	89e9      	ldrh	r1, [r5, #14]
 801308a:	4007      	ands	r7, r0
 801308c:	4630      	mov	r0, r6
 801308e:	f7fb fa9d 	bl	800e5cc <ucdr_serialize_uint16_t>
 8013092:	8a29      	ldrh	r1, [r5, #16]
 8013094:	4605      	mov	r5, r0
 8013096:	4630      	mov	r0, r6
 8013098:	f7fb fa98 	bl	800e5cc <ucdr_serialize_uint16_t>
 801309c:	b2ff      	uxtb	r7, r7
 801309e:	403c      	ands	r4, r7
 80130a0:	402c      	ands	r4, r5
 80130a2:	4004      	ands	r4, r0
 80130a4:	4620      	mov	r0, r4
 80130a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130a8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80130a8:	f7ff bb8c 	b.w	80127c4 <uxr_serialize_CLIENT_Representation>

080130ac <uxr_serialize_CREATE_Payload>:
 80130ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ae:	2202      	movs	r2, #2
 80130b0:	4606      	mov	r6, r0
 80130b2:	460d      	mov	r5, r1
 80130b4:	f7fa feba 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80130b8:	1ca9      	adds	r1, r5, #2
 80130ba:	4604      	mov	r4, r0
 80130bc:	2202      	movs	r2, #2
 80130be:	4630      	mov	r0, r6
 80130c0:	f7fa feb4 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80130c4:	7929      	ldrb	r1, [r5, #4]
 80130c6:	4607      	mov	r7, r0
 80130c8:	4630      	mov	r0, r6
 80130ca:	f7fb fa53 	bl	800e574 <ucdr_serialize_uint8_t>
 80130ce:	b328      	cbz	r0, 801311c <uxr_serialize_CREATE_Payload+0x70>
 80130d0:	792b      	ldrb	r3, [r5, #4]
 80130d2:	403c      	ands	r4, r7
 80130d4:	3b01      	subs	r3, #1
 80130d6:	b2e4      	uxtb	r4, r4
 80130d8:	2b0d      	cmp	r3, #13
 80130da:	d81d      	bhi.n	8013118 <uxr_serialize_CREATE_Payload+0x6c>
 80130dc:	e8df f003 	tbb	[pc, r3]
 80130e0:	32320753 	.word	0x32320753
 80130e4:	07070707 	.word	0x07070707
 80130e8:	2121211c 	.word	0x2121211c
 80130ec:	684c      	.short	0x684c
 80130ee:	4630      	mov	r0, r6
 80130f0:	7a29      	ldrb	r1, [r5, #8]
 80130f2:	f7fb fa3f 	bl	800e574 <ucdr_serialize_uint8_t>
 80130f6:	4607      	mov	r7, r0
 80130f8:	b130      	cbz	r0, 8013108 <uxr_serialize_CREATE_Payload+0x5c>
 80130fa:	7a2b      	ldrb	r3, [r5, #8]
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	d035      	beq.n	801316c <uxr_serialize_CREATE_Payload+0xc0>
 8013100:	2b03      	cmp	r3, #3
 8013102:	d02b      	beq.n	801315c <uxr_serialize_CREATE_Payload+0xb0>
 8013104:	2b01      	cmp	r3, #1
 8013106:	d031      	beq.n	801316c <uxr_serialize_CREATE_Payload+0xc0>
 8013108:	4630      	mov	r0, r6
 801310a:	2202      	movs	r2, #2
 801310c:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8013110:	f7fa fe8c 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8013114:	4038      	ands	r0, r7
 8013116:	4004      	ands	r4, r0
 8013118:	4620      	mov	r0, r4
 801311a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801311c:	2400      	movs	r4, #0
 801311e:	4620      	mov	r0, r4
 8013120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013122:	4630      	mov	r0, r6
 8013124:	7a29      	ldrb	r1, [r5, #8]
 8013126:	f7fb fa25 	bl	800e574 <ucdr_serialize_uint8_t>
 801312a:	2800      	cmp	r0, #0
 801312c:	d0f6      	beq.n	801311c <uxr_serialize_CREATE_Payload+0x70>
 801312e:	7a2b      	ldrb	r3, [r5, #8]
 8013130:	2b01      	cmp	r3, #1
 8013132:	d001      	beq.n	8013138 <uxr_serialize_CREATE_Payload+0x8c>
 8013134:	2b02      	cmp	r3, #2
 8013136:	d1ef      	bne.n	8013118 <uxr_serialize_CREATE_Payload+0x6c>
 8013138:	4630      	mov	r0, r6
 801313a:	68e9      	ldr	r1, [r5, #12]
 801313c:	f003 fb6a 	bl	8016814 <ucdr_serialize_string>
 8013140:	4004      	ands	r4, r0
 8013142:	e7e9      	b.n	8013118 <uxr_serialize_CREATE_Payload+0x6c>
 8013144:	4630      	mov	r0, r6
 8013146:	7a29      	ldrb	r1, [r5, #8]
 8013148:	f7fb fa14 	bl	800e574 <ucdr_serialize_uint8_t>
 801314c:	4607      	mov	r7, r0
 801314e:	2800      	cmp	r0, #0
 8013150:	d0da      	beq.n	8013108 <uxr_serialize_CREATE_Payload+0x5c>
 8013152:	7a2b      	ldrb	r3, [r5, #8]
 8013154:	2b02      	cmp	r3, #2
 8013156:	d009      	beq.n	801316c <uxr_serialize_CREATE_Payload+0xc0>
 8013158:	2b03      	cmp	r3, #3
 801315a:	d1d5      	bne.n	8013108 <uxr_serialize_CREATE_Payload+0x5c>
 801315c:	4630      	mov	r0, r6
 801315e:	68ea      	ldr	r2, [r5, #12]
 8013160:	f105 0110 	add.w	r1, r5, #16
 8013164:	f7fc fee6 	bl	800ff34 <ucdr_serialize_sequence_uint8_t>
 8013168:	4607      	mov	r7, r0
 801316a:	e7cd      	b.n	8013108 <uxr_serialize_CREATE_Payload+0x5c>
 801316c:	4630      	mov	r0, r6
 801316e:	68e9      	ldr	r1, [r5, #12]
 8013170:	f003 fb50 	bl	8016814 <ucdr_serialize_string>
 8013174:	4607      	mov	r7, r0
 8013176:	e7c7      	b.n	8013108 <uxr_serialize_CREATE_Payload+0x5c>
 8013178:	4630      	mov	r0, r6
 801317a:	f105 0108 	add.w	r1, r5, #8
 801317e:	f7ff fbdb 	bl	8012938 <uxr_serialize_AGENT_Representation>
 8013182:	4004      	ands	r4, r0
 8013184:	e7c8      	b.n	8013118 <uxr_serialize_CREATE_Payload+0x6c>
 8013186:	4630      	mov	r0, r6
 8013188:	7a29      	ldrb	r1, [r5, #8]
 801318a:	f7fb f9f3 	bl	800e574 <ucdr_serialize_uint8_t>
 801318e:	4607      	mov	r7, r0
 8013190:	b130      	cbz	r0, 80131a0 <uxr_serialize_CREATE_Payload+0xf4>
 8013192:	7a2b      	ldrb	r3, [r5, #8]
 8013194:	2b02      	cmp	r3, #2
 8013196:	d012      	beq.n	80131be <uxr_serialize_CREATE_Payload+0x112>
 8013198:	2b03      	cmp	r3, #3
 801319a:	d016      	beq.n	80131ca <uxr_serialize_CREATE_Payload+0x11e>
 801319c:	2b01      	cmp	r3, #1
 801319e:	d00e      	beq.n	80131be <uxr_serialize_CREATE_Payload+0x112>
 80131a0:	4630      	mov	r0, r6
 80131a2:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 80131a6:	f7fb ff51 	bl	800f04c <ucdr_serialize_int16_t>
 80131aa:	4038      	ands	r0, r7
 80131ac:	4004      	ands	r4, r0
 80131ae:	e7b3      	b.n	8013118 <uxr_serialize_CREATE_Payload+0x6c>
 80131b0:	4630      	mov	r0, r6
 80131b2:	f105 0108 	add.w	r1, r5, #8
 80131b6:	f7ff fb05 	bl	80127c4 <uxr_serialize_CLIENT_Representation>
 80131ba:	4004      	ands	r4, r0
 80131bc:	e7ac      	b.n	8013118 <uxr_serialize_CREATE_Payload+0x6c>
 80131be:	4630      	mov	r0, r6
 80131c0:	68e9      	ldr	r1, [r5, #12]
 80131c2:	f003 fb27 	bl	8016814 <ucdr_serialize_string>
 80131c6:	4607      	mov	r7, r0
 80131c8:	e7ea      	b.n	80131a0 <uxr_serialize_CREATE_Payload+0xf4>
 80131ca:	4630      	mov	r0, r6
 80131cc:	68ea      	ldr	r2, [r5, #12]
 80131ce:	f105 0110 	add.w	r1, r5, #16
 80131d2:	f7fc feaf 	bl	800ff34 <ucdr_serialize_sequence_uint8_t>
 80131d6:	4607      	mov	r7, r0
 80131d8:	e7e2      	b.n	80131a0 <uxr_serialize_CREATE_Payload+0xf4>
 80131da:	bf00      	nop

080131dc <uxr_serialize_DELETE_Payload>:
 80131dc:	b570      	push	{r4, r5, r6, lr}
 80131de:	2202      	movs	r2, #2
 80131e0:	4605      	mov	r5, r0
 80131e2:	460e      	mov	r6, r1
 80131e4:	f7fa fe22 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80131e8:	2202      	movs	r2, #2
 80131ea:	4604      	mov	r4, r0
 80131ec:	1cb1      	adds	r1, r6, #2
 80131ee:	4628      	mov	r0, r5
 80131f0:	f7fa fe1c 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80131f4:	4020      	ands	r0, r4
 80131f6:	b2c0      	uxtb	r0, r0
 80131f8:	bd70      	pop	{r4, r5, r6, pc}
 80131fa:	bf00      	nop

080131fc <uxr_deserialize_STATUS_AGENT_Payload>:
 80131fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013200:	4606      	mov	r6, r0
 8013202:	460f      	mov	r7, r1
 8013204:	f7fb f9cc 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8013208:	1c79      	adds	r1, r7, #1
 801320a:	4605      	mov	r5, r0
 801320c:	4630      	mov	r0, r6
 801320e:	f7fb f9c7 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8013212:	1d39      	adds	r1, r7, #4
 8013214:	4682      	mov	sl, r0
 8013216:	2204      	movs	r2, #4
 8013218:	4630      	mov	r0, r6
 801321a:	f7fa fe6b 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801321e:	f107 0108 	add.w	r1, r7, #8
 8013222:	4681      	mov	r9, r0
 8013224:	2202      	movs	r2, #2
 8013226:	4630      	mov	r0, r6
 8013228:	f7fa fe64 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801322c:	2202      	movs	r2, #2
 801322e:	4680      	mov	r8, r0
 8013230:	f107 010a 	add.w	r1, r7, #10
 8013234:	4630      	mov	r0, r6
 8013236:	f7fa fe5d 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801323a:	ea05 050a 	and.w	r5, r5, sl
 801323e:	b2ec      	uxtb	r4, r5
 8013240:	f107 010c 	add.w	r1, r7, #12
 8013244:	4605      	mov	r5, r0
 8013246:	4630      	mov	r0, r6
 8013248:	f7fb f97c 	bl	800e544 <ucdr_deserialize_bool>
 801324c:	ea04 0409 	and.w	r4, r4, r9
 8013250:	ea08 0404 	and.w	r4, r8, r4
 8013254:	4025      	ands	r5, r4
 8013256:	4028      	ands	r0, r5
 8013258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801325c <uxr_deserialize_STATUS_Payload>:
 801325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013260:	2202      	movs	r2, #2
 8013262:	4606      	mov	r6, r0
 8013264:	460f      	mov	r7, r1
 8013266:	f7fa fe45 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801326a:	2202      	movs	r2, #2
 801326c:	1cb9      	adds	r1, r7, #2
 801326e:	4605      	mov	r5, r0
 8013270:	4630      	mov	r0, r6
 8013272:	f7fa fe3f 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8013276:	1d39      	adds	r1, r7, #4
 8013278:	4680      	mov	r8, r0
 801327a:	4630      	mov	r0, r6
 801327c:	f7fb f990 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8013280:	1d79      	adds	r1, r7, #5
 8013282:	4604      	mov	r4, r0
 8013284:	4630      	mov	r0, r6
 8013286:	f7fb f98b 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 801328a:	ea05 0508 	and.w	r5, r5, r8
 801328e:	402c      	ands	r4, r5
 8013290:	4020      	ands	r0, r4
 8013292:	b2c0      	uxtb	r0, r0
 8013294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013298 <uxr_serialize_READ_DATA_Payload>:
 8013298:	b570      	push	{r4, r5, r6, lr}
 801329a:	2202      	movs	r2, #2
 801329c:	4605      	mov	r5, r0
 801329e:	460e      	mov	r6, r1
 80132a0:	f7fa fdc4 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80132a4:	2202      	movs	r2, #2
 80132a6:	1cb1      	adds	r1, r6, #2
 80132a8:	4604      	mov	r4, r0
 80132aa:	4628      	mov	r0, r5
 80132ac:	f7fa fdbe 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80132b0:	1d31      	adds	r1, r6, #4
 80132b2:	4004      	ands	r4, r0
 80132b4:	4628      	mov	r0, r5
 80132b6:	f7ff febb 	bl	8013030 <uxr_serialize_ReadSpecification>
 80132ba:	b2e4      	uxtb	r4, r4
 80132bc:	4020      	ands	r0, r4
 80132be:	bd70      	pop	{r4, r5, r6, pc}

080132c0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80132c0:	b570      	push	{r4, r5, r6, lr}
 80132c2:	2202      	movs	r2, #2
 80132c4:	4605      	mov	r5, r0
 80132c6:	460e      	mov	r6, r1
 80132c8:	f7fa fdb0 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80132cc:	2202      	movs	r2, #2
 80132ce:	4604      	mov	r4, r0
 80132d0:	1cb1      	adds	r1, r6, #2
 80132d2:	4628      	mov	r0, r5
 80132d4:	f7fa fdaa 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80132d8:	4020      	ands	r0, r4
 80132da:	b2c0      	uxtb	r0, r0
 80132dc:	bd70      	pop	{r4, r5, r6, pc}
 80132de:	bf00      	nop

080132e0 <uxr_serialize_ACKNACK_Payload>:
 80132e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e2:	460f      	mov	r7, r1
 80132e4:	460e      	mov	r6, r1
 80132e6:	f837 1b02 	ldrh.w	r1, [r7], #2
 80132ea:	4605      	mov	r5, r0
 80132ec:	f7fb f96e 	bl	800e5cc <ucdr_serialize_uint16_t>
 80132f0:	4639      	mov	r1, r7
 80132f2:	2202      	movs	r2, #2
 80132f4:	4604      	mov	r4, r0
 80132f6:	4628      	mov	r0, r5
 80132f8:	f7fa fd98 	bl	800de2c <ucdr_serialize_array_uint8_t>
 80132fc:	7931      	ldrb	r1, [r6, #4]
 80132fe:	4004      	ands	r4, r0
 8013300:	4628      	mov	r0, r5
 8013302:	f7fb f937 	bl	800e574 <ucdr_serialize_uint8_t>
 8013306:	b2e4      	uxtb	r4, r4
 8013308:	4020      	ands	r0, r4
 801330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801330c <uxr_deserialize_ACKNACK_Payload>:
 801330c:	b570      	push	{r4, r5, r6, lr}
 801330e:	4605      	mov	r5, r0
 8013310:	460e      	mov	r6, r1
 8013312:	f7fb fa5b 	bl	800e7cc <ucdr_deserialize_uint16_t>
 8013316:	2202      	movs	r2, #2
 8013318:	1cb1      	adds	r1, r6, #2
 801331a:	4604      	mov	r4, r0
 801331c:	4628      	mov	r0, r5
 801331e:	f7fa fde9 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8013322:	1d31      	adds	r1, r6, #4
 8013324:	4004      	ands	r4, r0
 8013326:	4628      	mov	r0, r5
 8013328:	f7fb f93a 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 801332c:	b2e4      	uxtb	r4, r4
 801332e:	4020      	ands	r0, r4
 8013330:	bd70      	pop	{r4, r5, r6, pc}
 8013332:	bf00      	nop

08013334 <uxr_serialize_HEARTBEAT_Payload>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	460d      	mov	r5, r1
 8013338:	8809      	ldrh	r1, [r1, #0]
 801333a:	4606      	mov	r6, r0
 801333c:	f7fb f946 	bl	800e5cc <ucdr_serialize_uint16_t>
 8013340:	8869      	ldrh	r1, [r5, #2]
 8013342:	4604      	mov	r4, r0
 8013344:	4630      	mov	r0, r6
 8013346:	f7fb f941 	bl	800e5cc <ucdr_serialize_uint16_t>
 801334a:	7929      	ldrb	r1, [r5, #4]
 801334c:	4004      	ands	r4, r0
 801334e:	4630      	mov	r0, r6
 8013350:	f7fb f910 	bl	800e574 <ucdr_serialize_uint8_t>
 8013354:	b2e4      	uxtb	r4, r4
 8013356:	4020      	ands	r0, r4
 8013358:	bd70      	pop	{r4, r5, r6, pc}
 801335a:	bf00      	nop

0801335c <uxr_deserialize_HEARTBEAT_Payload>:
 801335c:	b570      	push	{r4, r5, r6, lr}
 801335e:	4605      	mov	r5, r0
 8013360:	460e      	mov	r6, r1
 8013362:	f7fb fa33 	bl	800e7cc <ucdr_deserialize_uint16_t>
 8013366:	1cb1      	adds	r1, r6, #2
 8013368:	4604      	mov	r4, r0
 801336a:	4628      	mov	r0, r5
 801336c:	f7fb fa2e 	bl	800e7cc <ucdr_deserialize_uint16_t>
 8013370:	1d31      	adds	r1, r6, #4
 8013372:	4004      	ands	r4, r0
 8013374:	4628      	mov	r0, r5
 8013376:	f7fb f913 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 801337a:	b2e4      	uxtb	r4, r4
 801337c:	4020      	ands	r0, r4
 801337e:	bd70      	pop	{r4, r5, r6, pc}

08013380 <uxr_serialize_TIMESTAMP_Payload>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	460d      	mov	r5, r1
 8013384:	6809      	ldr	r1, [r1, #0]
 8013386:	4606      	mov	r6, r0
 8013388:	f7fb ff54 	bl	800f234 <ucdr_serialize_int32_t>
 801338c:	6869      	ldr	r1, [r5, #4]
 801338e:	4604      	mov	r4, r0
 8013390:	4630      	mov	r0, r6
 8013392:	f7fb fb09 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8013396:	4020      	ands	r0, r4
 8013398:	b2c0      	uxtb	r0, r0
 801339a:	bd70      	pop	{r4, r5, r6, pc}

0801339c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133a0:	4605      	mov	r5, r0
 80133a2:	460e      	mov	r6, r1
 80133a4:	f7fb ffde 	bl	800f364 <ucdr_deserialize_int32_t>
 80133a8:	1d31      	adds	r1, r6, #4
 80133aa:	4607      	mov	r7, r0
 80133ac:	4628      	mov	r0, r5
 80133ae:	f7fb fc2b 	bl	800ec08 <ucdr_deserialize_uint32_t>
 80133b2:	f106 0108 	add.w	r1, r6, #8
 80133b6:	4680      	mov	r8, r0
 80133b8:	4628      	mov	r0, r5
 80133ba:	f7fb ffd3 	bl	800f364 <ucdr_deserialize_int32_t>
 80133be:	f106 010c 	add.w	r1, r6, #12
 80133c2:	4604      	mov	r4, r0
 80133c4:	4628      	mov	r0, r5
 80133c6:	f7fb fc1f 	bl	800ec08 <ucdr_deserialize_uint32_t>
 80133ca:	ea07 0708 	and.w	r7, r7, r8
 80133ce:	403c      	ands	r4, r7
 80133d0:	f106 0110 	add.w	r1, r6, #16
 80133d4:	4004      	ands	r4, r0
 80133d6:	4628      	mov	r0, r5
 80133d8:	f7fb ffc4 	bl	800f364 <ucdr_deserialize_int32_t>
 80133dc:	4603      	mov	r3, r0
 80133de:	f106 0114 	add.w	r1, r6, #20
 80133e2:	4628      	mov	r0, r5
 80133e4:	461d      	mov	r5, r3
 80133e6:	f7fb fc0f 	bl	800ec08 <ucdr_deserialize_uint32_t>
 80133ea:	b2e4      	uxtb	r4, r4
 80133ec:	402c      	ands	r4, r5
 80133ee:	4020      	ands	r0, r4
 80133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133f4 <uxr_serialize_SampleIdentity>:
 80133f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f8:	220c      	movs	r2, #12
 80133fa:	4604      	mov	r4, r0
 80133fc:	460d      	mov	r5, r1
 80133fe:	f7fa fd15 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8013402:	2203      	movs	r2, #3
 8013404:	f105 010c 	add.w	r1, r5, #12
 8013408:	4607      	mov	r7, r0
 801340a:	4620      	mov	r0, r4
 801340c:	f7fa fd0e 	bl	800de2c <ucdr_serialize_array_uint8_t>
 8013410:	7be9      	ldrb	r1, [r5, #15]
 8013412:	4680      	mov	r8, r0
 8013414:	4620      	mov	r0, r4
 8013416:	f7fb f8ad 	bl	800e574 <ucdr_serialize_uint8_t>
 801341a:	6929      	ldr	r1, [r5, #16]
 801341c:	4606      	mov	r6, r0
 801341e:	4620      	mov	r0, r4
 8013420:	f7fb ff08 	bl	800f234 <ucdr_serialize_int32_t>
 8013424:	4603      	mov	r3, r0
 8013426:	6969      	ldr	r1, [r5, #20]
 8013428:	4620      	mov	r0, r4
 801342a:	461c      	mov	r4, r3
 801342c:	f7fb fabc 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8013430:	ea07 0708 	and.w	r7, r7, r8
 8013434:	403e      	ands	r6, r7
 8013436:	4034      	ands	r4, r6
 8013438:	4020      	ands	r0, r4
 801343a:	b2c0      	uxtb	r0, r0
 801343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013440 <uxr_deserialize_SampleIdentity>:
 8013440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013444:	220c      	movs	r2, #12
 8013446:	4604      	mov	r4, r0
 8013448:	460d      	mov	r5, r1
 801344a:	f7fa fd53 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801344e:	2203      	movs	r2, #3
 8013450:	f105 010c 	add.w	r1, r5, #12
 8013454:	4607      	mov	r7, r0
 8013456:	4620      	mov	r0, r4
 8013458:	f7fa fd4c 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 801345c:	f105 010f 	add.w	r1, r5, #15
 8013460:	4680      	mov	r8, r0
 8013462:	4620      	mov	r0, r4
 8013464:	f7fb f89c 	bl	800e5a0 <ucdr_deserialize_uint8_t>
 8013468:	f105 0110 	add.w	r1, r5, #16
 801346c:	4606      	mov	r6, r0
 801346e:	4620      	mov	r0, r4
 8013470:	f7fb ff78 	bl	800f364 <ucdr_deserialize_int32_t>
 8013474:	4603      	mov	r3, r0
 8013476:	f105 0114 	add.w	r1, r5, #20
 801347a:	4620      	mov	r0, r4
 801347c:	461c      	mov	r4, r3
 801347e:	f7fb fbc3 	bl	800ec08 <ucdr_deserialize_uint32_t>
 8013482:	ea07 0708 	and.w	r7, r7, r8
 8013486:	403e      	ands	r6, r7
 8013488:	4034      	ands	r4, r6
 801348a:	4020      	ands	r0, r4
 801348c:	b2c0      	uxtb	r0, r0
 801348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013492:	bf00      	nop

08013494 <rcl_client_get_rmw_handle>:
 8013494:	b110      	cbz	r0, 801349c <rcl_client_get_rmw_handle+0x8>
 8013496:	6800      	ldr	r0, [r0, #0]
 8013498:	b100      	cbz	r0, 801349c <rcl_client_get_rmw_handle+0x8>
 801349a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801349c:	4770      	bx	lr
 801349e:	bf00      	nop

080134a0 <rcl_take_response>:
 80134a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134a2:	460e      	mov	r6, r1
 80134a4:	4607      	mov	r7, r0
 80134a6:	b08d      	sub	sp, #52	; 0x34
 80134a8:	ad06      	add	r5, sp, #24
 80134aa:	460c      	mov	r4, r1
 80134ac:	4694      	mov	ip, r2
 80134ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80134b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80134b2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80134b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80134ba:	b337      	cbz	r7, 801350a <rcl_take_response+0x6a>
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	b323      	cbz	r3, 801350a <rcl_take_response+0x6a>
 80134c0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80134c2:	b310      	cbz	r0, 801350a <rcl_take_response+0x6a>
 80134c4:	4662      	mov	r2, ip
 80134c6:	b31a      	cbz	r2, 8013510 <rcl_take_response+0x70>
 80134c8:	2300      	movs	r3, #0
 80134ca:	2600      	movs	r6, #0
 80134cc:	2700      	movs	r7, #0
 80134ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80134d2:	a902      	add	r1, sp, #8
 80134d4:	f10d 0307 	add.w	r3, sp, #7
 80134d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80134dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80134e0:	f002 ff1c 	bl	801631c <rmw_take_response>
 80134e4:	4606      	mov	r6, r0
 80134e6:	b9a8      	cbnz	r0, 8013514 <rcl_take_response+0x74>
 80134e8:	f240 13f5 	movw	r3, #501	; 0x1f5
 80134ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80134f0:	2a00      	cmp	r2, #0
 80134f2:	bf08      	it	eq
 80134f4:	461e      	moveq	r6, r3
 80134f6:	ad06      	add	r5, sp, #24
 80134f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80134fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80134fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013500:	e884 0003 	stmia.w	r4, {r0, r1}
 8013504:	4630      	mov	r0, r6
 8013506:	b00d      	add	sp, #52	; 0x34
 8013508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801350a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801350e:	e7f2      	b.n	80134f6 <rcl_take_response+0x56>
 8013510:	260b      	movs	r6, #11
 8013512:	e7f0      	b.n	80134f6 <rcl_take_response+0x56>
 8013514:	2601      	movs	r6, #1
 8013516:	e7ee      	b.n	80134f6 <rcl_take_response+0x56>

08013518 <rcl_convert_rmw_ret_to_rcl_ret>:
 8013518:	280b      	cmp	r0, #11
 801351a:	dc0d      	bgt.n	8013538 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801351c:	2800      	cmp	r0, #0
 801351e:	db09      	blt.n	8013534 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013520:	280b      	cmp	r0, #11
 8013522:	d807      	bhi.n	8013534 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013524:	e8df f000 	tbb	[pc, r0]
 8013528:	07060607 	.word	0x07060607
 801352c:	06060606 	.word	0x06060606
 8013530:	07070606 	.word	0x07070606
 8013534:	2001      	movs	r0, #1
 8013536:	4770      	bx	lr
 8013538:	28cb      	cmp	r0, #203	; 0xcb
 801353a:	bf18      	it	ne
 801353c:	2001      	movne	r0, #1
 801353e:	4770      	bx	lr

08013540 <rcl_get_zero_initialized_context>:
 8013540:	b4d0      	push	{r4, r6, r7}
 8013542:	2600      	movs	r6, #0
 8013544:	2700      	movs	r7, #0
 8013546:	4604      	mov	r4, r0
 8013548:	4b04      	ldr	r3, [pc, #16]	; (801355c <rcl_get_zero_initialized_context+0x1c>)
 801354a:	e9c3 6702 	strd	r6, r7, [r3, #8]
 801354e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013554:	4620      	mov	r0, r4
 8013556:	bcd0      	pop	{r4, r6, r7}
 8013558:	4770      	bx	lr
 801355a:	bf00      	nop
 801355c:	20006780 	.word	0x20006780

08013560 <rcl_context_is_valid>:
 8013560:	b150      	cbz	r0, 8013578 <rcl_context_is_valid+0x18>
 8013562:	b508      	push	{r3, lr}
 8013564:	2105      	movs	r1, #5
 8013566:	3008      	adds	r0, #8
 8013568:	f002 f942 	bl	80157f0 <__atomic_load_8>
 801356c:	ea51 0300 	orrs.w	r3, r1, r0
 8013570:	bf14      	ite	ne
 8013572:	2001      	movne	r0, #1
 8013574:	2000      	moveq	r0, #0
 8013576:	bd08      	pop	{r3, pc}
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop

0801357c <__cleanup_context>:
 801357c:	2305      	movs	r3, #5
 801357e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013582:	4606      	mov	r6, r0
 8013584:	b087      	sub	sp, #28
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	3008      	adds	r0, #8
 801358a:	2200      	movs	r2, #0
 801358c:	2300      	movs	r3, #0
 801358e:	f002 f963 	bl	8015858 <__atomic_store_8>
 8013592:	6830      	ldr	r0, [r6, #0]
 8013594:	2800      	cmp	r0, #0
 8013596:	d052      	beq.n	801363e <__cleanup_context+0xc2>
 8013598:	6947      	ldr	r7, [r0, #20]
 801359a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801359e:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80135a2:	b137      	cbz	r7, 80135b2 <__cleanup_context+0x36>
 80135a4:	3014      	adds	r0, #20
 80135a6:	f7f6 fde5 	bl	800a174 <rcl_init_options_fini>
 80135aa:	4607      	mov	r7, r0
 80135ac:	2800      	cmp	r0, #0
 80135ae:	d148      	bne.n	8013642 <__cleanup_context+0xc6>
 80135b0:	6830      	ldr	r0, [r6, #0]
 80135b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80135b4:	b143      	cbz	r3, 80135c8 <__cleanup_context+0x4c>
 80135b6:	3028      	adds	r0, #40	; 0x28
 80135b8:	f7f8 fb98 	bl	800bcec <rmw_context_fini>
 80135bc:	b118      	cbz	r0, 80135c6 <__cleanup_context+0x4a>
 80135be:	2f00      	cmp	r7, #0
 80135c0:	d042      	beq.n	8013648 <__cleanup_context+0xcc>
 80135c2:	f7f7 ff35 	bl	800b430 <rcutils_reset_error>
 80135c6:	6830      	ldr	r0, [r6, #0]
 80135c8:	6a01      	ldr	r1, [r0, #32]
 80135ca:	b1d9      	cbz	r1, 8013604 <__cleanup_context+0x88>
 80135cc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80135d0:	2a01      	cmp	r2, #1
 80135d2:	f173 0000 	sbcs.w	r0, r3, #0
 80135d6:	db11      	blt.n	80135fc <__cleanup_context+0x80>
 80135d8:	2400      	movs	r4, #0
 80135da:	2500      	movs	r5, #0
 80135dc:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80135e0:	b308      	cbz	r0, 8013626 <__cleanup_context+0xaa>
 80135e2:	4649      	mov	r1, r9
 80135e4:	47c0      	blx	r8
 80135e6:	6831      	ldr	r1, [r6, #0]
 80135e8:	3401      	adds	r4, #1
 80135ea:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80135ee:	f145 0500 	adc.w	r5, r5, #0
 80135f2:	4294      	cmp	r4, r2
 80135f4:	eb75 0003 	sbcs.w	r0, r5, r3
 80135f8:	6a09      	ldr	r1, [r1, #32]
 80135fa:	dbef      	blt.n	80135dc <__cleanup_context+0x60>
 80135fc:	4608      	mov	r0, r1
 80135fe:	4649      	mov	r1, r9
 8013600:	47c0      	blx	r8
 8013602:	6830      	ldr	r0, [r6, #0]
 8013604:	4649      	mov	r1, r9
 8013606:	47c0      	blx	r8
 8013608:	2000      	movs	r0, #0
 801360a:	2100      	movs	r1, #0
 801360c:	4b10      	ldr	r3, [pc, #64]	; (8013650 <__cleanup_context+0xd4>)
 801360e:	ac02      	add	r4, sp, #8
 8013610:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801361a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801361e:	4638      	mov	r0, r7
 8013620:	b007      	add	sp, #28
 8013622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013626:	3401      	adds	r4, #1
 8013628:	f145 0500 	adc.w	r5, r5, #0
 801362c:	4294      	cmp	r4, r2
 801362e:	eb75 0003 	sbcs.w	r0, r5, r3
 8013632:	dbd3      	blt.n	80135dc <__cleanup_context+0x60>
 8013634:	4608      	mov	r0, r1
 8013636:	4649      	mov	r1, r9
 8013638:	47c0      	blx	r8
 801363a:	6830      	ldr	r0, [r6, #0]
 801363c:	e7e2      	b.n	8013604 <__cleanup_context+0x88>
 801363e:	4607      	mov	r7, r0
 8013640:	e7e2      	b.n	8013608 <__cleanup_context+0x8c>
 8013642:	f7f7 fef5 	bl	800b430 <rcutils_reset_error>
 8013646:	e7b3      	b.n	80135b0 <__cleanup_context+0x34>
 8013648:	f7ff ff66 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 801364c:	4607      	mov	r7, r0
 801364e:	e7b8      	b.n	80135c2 <__cleanup_context+0x46>
 8013650:	20006780 	.word	0x20006780

08013654 <rcl_expand_topic_name>:
 8013654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013658:	b08b      	sub	sp, #44	; 0x2c
 801365a:	9306      	str	r3, [sp, #24]
 801365c:	2800      	cmp	r0, #0
 801365e:	f000 80d6 	beq.w	801380e <rcl_expand_topic_name+0x1ba>
 8013662:	460e      	mov	r6, r1
 8013664:	2900      	cmp	r1, #0
 8013666:	f000 80d2 	beq.w	801380e <rcl_expand_topic_name+0x1ba>
 801366a:	4617      	mov	r7, r2
 801366c:	2a00      	cmp	r2, #0
 801366e:	f000 80ce 	beq.w	801380e <rcl_expand_topic_name+0x1ba>
 8013672:	2b00      	cmp	r3, #0
 8013674:	f000 80cb 	beq.w	801380e <rcl_expand_topic_name+0x1ba>
 8013678:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801367a:	2b00      	cmp	r3, #0
 801367c:	f000 80c7 	beq.w	801380e <rcl_expand_topic_name+0x1ba>
 8013680:	2200      	movs	r2, #0
 8013682:	a909      	add	r1, sp, #36	; 0x24
 8013684:	4680      	mov	r8, r0
 8013686:	f001 f9cf 	bl	8014a28 <rcl_validate_topic_name>
 801368a:	4604      	mov	r4, r0
 801368c:	2800      	cmp	r0, #0
 801368e:	f040 80ba 	bne.w	8013806 <rcl_expand_topic_name+0x1b2>
 8013692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013694:	2b00      	cmp	r3, #0
 8013696:	f040 80c3 	bne.w	8013820 <rcl_expand_topic_name+0x1cc>
 801369a:	4602      	mov	r2, r0
 801369c:	a909      	add	r1, sp, #36	; 0x24
 801369e:	4630      	mov	r0, r6
 80136a0:	f002 fb5c 	bl	8015d5c <rmw_validate_node_name>
 80136a4:	2800      	cmp	r0, #0
 80136a6:	f040 80b7 	bne.w	8013818 <rcl_expand_topic_name+0x1c4>
 80136aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136ac:	2a00      	cmp	r2, #0
 80136ae:	f040 80bc 	bne.w	801382a <rcl_expand_topic_name+0x1d6>
 80136b2:	4638      	mov	r0, r7
 80136b4:	a909      	add	r1, sp, #36	; 0x24
 80136b6:	f002 fb33 	bl	8015d20 <rmw_validate_namespace>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	f040 80ac 	bne.w	8013818 <rcl_expand_topic_name+0x1c4>
 80136c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80136c2:	2c00      	cmp	r4, #0
 80136c4:	f040 80f4 	bne.w	80138b0 <rcl_expand_topic_name+0x25c>
 80136c8:	217b      	movs	r1, #123	; 0x7b
 80136ca:	4640      	mov	r0, r8
 80136cc:	f004 f9d0 	bl	8017a70 <strchr>
 80136d0:	f898 3000 	ldrb.w	r3, [r8]
 80136d4:	4683      	mov	fp, r0
 80136d6:	2b2f      	cmp	r3, #47	; 0x2f
 80136d8:	f000 80a9 	beq.w	801382e <rcl_expand_topic_name+0x1da>
 80136dc:	2b7e      	cmp	r3, #126	; 0x7e
 80136de:	f040 80ad 	bne.w	801383c <rcl_expand_topic_name+0x1e8>
 80136e2:	4638      	mov	r0, r7
 80136e4:	f7ec fdae 	bl	8000244 <strlen>
 80136e8:	4681      	mov	r9, r0
 80136ea:	f8df e228 	ldr.w	lr, [pc, #552]	; 8013914 <rcl_expand_topic_name+0x2c0>
 80136ee:	f8df c228 	ldr.w	ip, [pc, #552]	; 8013918 <rcl_expand_topic_name+0x2c4>
 80136f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80136f4:	f1b9 0f01 	cmp.w	r9, #1
 80136f8:	bf18      	it	ne
 80136fa:	46f4      	movne	ip, lr
 80136fc:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8013700:	ab14      	add	r3, sp, #80	; 0x50
 8013702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013704:	e9cd c702 	strd	ip, r7, [sp, #8]
 8013708:	f108 0c01 	add.w	ip, r8, #1
 801370c:	9500      	str	r5, [sp, #0]
 801370e:	9604      	str	r6, [sp, #16]
 8013710:	f8cd e004 	str.w	lr, [sp, #4]
 8013714:	f8cd c014 	str.w	ip, [sp, #20]
 8013718:	f002 f954 	bl	80159c4 <rcutils_format_string_limit>
 801371c:	4605      	mov	r5, r0
 801371e:	2800      	cmp	r0, #0
 8013720:	f000 80c8 	beq.w	80138b4 <rcl_expand_topic_name+0x260>
 8013724:	465b      	mov	r3, fp
 8013726:	2b00      	cmp	r3, #0
 8013728:	f000 80a4 	beq.w	8013874 <rcl_expand_topic_name+0x220>
 801372c:	217b      	movs	r1, #123	; 0x7b
 801372e:	f004 f99f 	bl	8017a70 <strchr>
 8013732:	46a9      	mov	r9, r5
 8013734:	4683      	mov	fp, r0
 8013736:	46aa      	mov	sl, r5
 8013738:	9407      	str	r4, [sp, #28]
 801373a:	465d      	mov	r5, fp
 801373c:	464c      	mov	r4, r9
 801373e:	2d00      	cmp	r5, #0
 8013740:	f000 80bd 	beq.w	80138be <rcl_expand_topic_name+0x26a>
 8013744:	217d      	movs	r1, #125	; 0x7d
 8013746:	4620      	mov	r0, r4
 8013748:	f004 f992 	bl	8017a70 <strchr>
 801374c:	eba0 0905 	sub.w	r9, r0, r5
 8013750:	f109 0b01 	add.w	fp, r9, #1
 8013754:	465a      	mov	r2, fp
 8013756:	4629      	mov	r1, r5
 8013758:	4869      	ldr	r0, [pc, #420]	; (8013900 <rcl_expand_topic_name+0x2ac>)
 801375a:	f004 f99e 	bl	8017a9a <strncmp>
 801375e:	2800      	cmp	r0, #0
 8013760:	d06a      	beq.n	8013838 <rcl_expand_topic_name+0x1e4>
 8013762:	465a      	mov	r2, fp
 8013764:	4629      	mov	r1, r5
 8013766:	4867      	ldr	r0, [pc, #412]	; (8013904 <rcl_expand_topic_name+0x2b0>)
 8013768:	f004 f997 	bl	8017a9a <strncmp>
 801376c:	b128      	cbz	r0, 801377a <rcl_expand_topic_name+0x126>
 801376e:	465a      	mov	r2, fp
 8013770:	4629      	mov	r1, r5
 8013772:	4865      	ldr	r0, [pc, #404]	; (8013908 <rcl_expand_topic_name+0x2b4>)
 8013774:	f004 f991 	bl	8017a9a <strncmp>
 8013778:	bb38      	cbnz	r0, 80137ca <rcl_expand_topic_name+0x176>
 801377a:	46b9      	mov	r9, r7
 801377c:	ab16      	add	r3, sp, #88	; 0x58
 801377e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013782:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013786:	ab14      	add	r3, sp, #80	; 0x50
 8013788:	4628      	mov	r0, r5
 801378a:	cb0c      	ldmia	r3, {r2, r3}
 801378c:	4659      	mov	r1, fp
 801378e:	f002 fa55 	bl	8015c3c <rcutils_strndup>
 8013792:	4605      	mov	r5, r0
 8013794:	2800      	cmp	r0, #0
 8013796:	f000 809c 	beq.w	80138d2 <rcl_expand_topic_name+0x27e>
 801379a:	464a      	mov	r2, r9
 801379c:	4620      	mov	r0, r4
 801379e:	4629      	mov	r1, r5
 80137a0:	ab14      	add	r3, sp, #80	; 0x50
 80137a2:	f002 f961 	bl	8015a68 <rcutils_repl_str>
 80137a6:	4604      	mov	r4, r0
 80137a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137aa:	4628      	mov	r0, r5
 80137ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137ae:	4798      	blx	r3
 80137b0:	4650      	mov	r0, sl
 80137b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137b6:	4798      	blx	r3
 80137b8:	2c00      	cmp	r4, #0
 80137ba:	d07b      	beq.n	80138b4 <rcl_expand_topic_name+0x260>
 80137bc:	217b      	movs	r1, #123	; 0x7b
 80137be:	4620      	mov	r0, r4
 80137c0:	f004 f956 	bl	8017a70 <strchr>
 80137c4:	46a2      	mov	sl, r4
 80137c6:	4605      	mov	r5, r0
 80137c8:	e7b9      	b.n	801373e <rcl_expand_topic_name+0xea>
 80137ca:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80137ce:	9806      	ldr	r0, [sp, #24]
 80137d0:	1c69      	adds	r1, r5, #1
 80137d2:	f7f7 ff3f 	bl	800b654 <rcutils_string_map_getn>
 80137d6:	4681      	mov	r9, r0
 80137d8:	2800      	cmp	r0, #0
 80137da:	d1cf      	bne.n	801377c <rcl_expand_topic_name+0x128>
 80137dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80137de:	ab16      	add	r3, sp, #88	; 0x58
 80137e0:	6010      	str	r0, [r2, #0]
 80137e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80137e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80137ea:	ab14      	add	r3, sp, #80	; 0x50
 80137ec:	cb0c      	ldmia	r3, {r2, r3}
 80137ee:	4659      	mov	r1, fp
 80137f0:	4628      	mov	r0, r5
 80137f2:	f002 fa23 	bl	8015c3c <rcutils_strndup>
 80137f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137fa:	4798      	blx	r3
 80137fc:	4650      	mov	r0, sl
 80137fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013800:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013802:	4798      	blx	r3
 8013804:	2469      	movs	r4, #105	; 0x69
 8013806:	4620      	mov	r0, r4
 8013808:	b00b      	add	sp, #44	; 0x2c
 801380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380e:	240b      	movs	r4, #11
 8013810:	4620      	mov	r0, r4
 8013812:	b00b      	add	sp, #44	; 0x2c
 8013814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013818:	f7ff fe7e 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 801381c:	4604      	mov	r4, r0
 801381e:	e7f2      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 8013820:	2467      	movs	r4, #103	; 0x67
 8013822:	4620      	mov	r0, r4
 8013824:	b00b      	add	sp, #44	; 0x2c
 8013826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382a:	24c9      	movs	r4, #201	; 0xc9
 801382c:	e7eb      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 801382e:	2800      	cmp	r0, #0
 8013830:	d057      	beq.n	80138e2 <rcl_expand_topic_name+0x28e>
 8013832:	46c1      	mov	r9, r8
 8013834:	4625      	mov	r5, r4
 8013836:	e77e      	b.n	8013736 <rcl_expand_topic_name+0xe2>
 8013838:	46b1      	mov	r9, r6
 801383a:	e79f      	b.n	801377c <rcl_expand_topic_name+0x128>
 801383c:	2800      	cmp	r0, #0
 801383e:	d1f8      	bne.n	8013832 <rcl_expand_topic_name+0x1de>
 8013840:	4638      	mov	r0, r7
 8013842:	f7ec fcff 	bl	8000244 <strlen>
 8013846:	4a31      	ldr	r2, [pc, #196]	; (801390c <rcl_expand_topic_name+0x2b8>)
 8013848:	4b31      	ldr	r3, [pc, #196]	; (8013910 <rcl_expand_topic_name+0x2bc>)
 801384a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801384e:	2801      	cmp	r0, #1
 8013850:	bf18      	it	ne
 8013852:	4613      	movne	r3, r2
 8013854:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013856:	e9cd 3702 	strd	r3, r7, [sp, #8]
 801385a:	e9cd 2100 	strd	r2, r1, [sp]
 801385e:	f8cd 8010 	str.w	r8, [sp, #16]
 8013862:	ab14      	add	r3, sp, #80	; 0x50
 8013864:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013866:	f002 f8ad 	bl	80159c4 <rcutils_format_string_limit>
 801386a:	4605      	mov	r5, r0
 801386c:	b315      	cbz	r5, 80138b4 <rcl_expand_topic_name+0x260>
 801386e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013870:	601d      	str	r5, [r3, #0]
 8013872:	e7c8      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 8013874:	782b      	ldrb	r3, [r5, #0]
 8013876:	2b2f      	cmp	r3, #47	; 0x2f
 8013878:	d0f9      	beq.n	801386e <rcl_expand_topic_name+0x21a>
 801387a:	4638      	mov	r0, r7
 801387c:	f7ec fce2 	bl	8000244 <strlen>
 8013880:	4a22      	ldr	r2, [pc, #136]	; (801390c <rcl_expand_topic_name+0x2b8>)
 8013882:	4b23      	ldr	r3, [pc, #140]	; (8013910 <rcl_expand_topic_name+0x2bc>)
 8013884:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013888:	2801      	cmp	r0, #1
 801388a:	bf18      	it	ne
 801388c:	4613      	movne	r3, r2
 801388e:	e9cd 7503 	strd	r7, r5, [sp, #12]
 8013892:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013896:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013898:	ab14      	add	r3, sp, #80	; 0x50
 801389a:	9200      	str	r2, [sp, #0]
 801389c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801389e:	f002 f891 	bl	80159c4 <rcutils_format_string_limit>
 80138a2:	4603      	mov	r3, r0
 80138a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80138a6:	4628      	mov	r0, r5
 80138a8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80138aa:	461d      	mov	r5, r3
 80138ac:	4790      	blx	r2
 80138ae:	e7dd      	b.n	801386c <rcl_expand_topic_name+0x218>
 80138b0:	24ca      	movs	r4, #202	; 0xca
 80138b2:	e7a8      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 80138b4:	2300      	movs	r3, #0
 80138b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80138b8:	240a      	movs	r4, #10
 80138ba:	6013      	str	r3, [r2, #0]
 80138bc:	e7a3      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 80138be:	4653      	mov	r3, sl
 80138c0:	4655      	mov	r5, sl
 80138c2:	9c07      	ldr	r4, [sp, #28]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d1d5      	bne.n	8013874 <rcl_expand_topic_name+0x220>
 80138c8:	f898 3000 	ldrb.w	r3, [r8]
 80138cc:	2b2f      	cmp	r3, #47	; 0x2f
 80138ce:	d0ce      	beq.n	801386e <rcl_expand_topic_name+0x21a>
 80138d0:	e7b6      	b.n	8013840 <rcl_expand_topic_name+0x1ec>
 80138d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80138d4:	4650      	mov	r0, sl
 80138d6:	601d      	str	r5, [r3, #0]
 80138d8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80138da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138dc:	4798      	blx	r3
 80138de:	240a      	movs	r4, #10
 80138e0:	e791      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 80138e2:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 80138e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80138ea:	ab14      	add	r3, sp, #80	; 0x50
 80138ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80138ee:	4640      	mov	r0, r8
 80138f0:	f002 f982 	bl	8015bf8 <rcutils_strdup>
 80138f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80138f6:	2800      	cmp	r0, #0
 80138f8:	bf08      	it	eq
 80138fa:	240a      	moveq	r4, #10
 80138fc:	6018      	str	r0, [r3, #0]
 80138fe:	e782      	b.n	8013806 <rcl_expand_topic_name+0x1b2>
 8013900:	0801a264 	.word	0x0801a264
 8013904:	0801a26c 	.word	0x0801a26c
 8013908:	0801a274 	.word	0x0801a274
 801390c:	08019f1c 	.word	0x08019f1c
 8013910:	08019f64 	.word	0x08019f64
 8013914:	0801a25c 	.word	0x0801a25c
 8013918:	08019f54 	.word	0x08019f54

0801391c <rcl_get_default_topic_name_substitutions>:
 801391c:	2800      	cmp	r0, #0
 801391e:	bf0c      	ite	eq
 8013920:	200b      	moveq	r0, #11
 8013922:	2000      	movne	r0, #0
 8013924:	4770      	bx	lr
 8013926:	bf00      	nop

08013928 <rcl_init>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	1e07      	subs	r7, r0, #0
 801392e:	4688      	mov	r8, r1
 8013930:	4692      	mov	sl, r2
 8013932:	4699      	mov	r9, r3
 8013934:	b09f      	sub	sp, #124	; 0x7c
 8013936:	f340 8096 	ble.w	8013a66 <rcl_init+0x13e>
 801393a:	2900      	cmp	r1, #0
 801393c:	f000 8096 	beq.w	8013a6c <rcl_init+0x144>
 8013940:	2400      	movs	r4, #0
 8013942:	1f0d      	subs	r5, r1, #4
 8013944:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8013948:	3401      	adds	r4, #1
 801394a:	2e00      	cmp	r6, #0
 801394c:	f000 808e 	beq.w	8013a6c <rcl_init+0x144>
 8013950:	42a7      	cmp	r7, r4
 8013952:	d1f7      	bne.n	8013944 <rcl_init+0x1c>
 8013954:	f1ba 0f00 	cmp.w	sl, #0
 8013958:	f000 8088 	beq.w	8013a6c <rcl_init+0x144>
 801395c:	f8da 4000 	ldr.w	r4, [sl]
 8013960:	2c00      	cmp	r4, #0
 8013962:	f000 8083 	beq.w	8013a6c <rcl_init+0x144>
 8013966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013968:	ad19      	add	r5, sp, #100	; 0x64
 801396a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801396c:	6823      	ldr	r3, [r4, #0]
 801396e:	a819      	add	r0, sp, #100	; 0x64
 8013970:	602b      	str	r3, [r5, #0]
 8013972:	f7f7 fc6d 	bl	800b250 <rcutils_allocator_is_valid>
 8013976:	2800      	cmp	r0, #0
 8013978:	d078      	beq.n	8013a6c <rcl_init+0x144>
 801397a:	f1b9 0f00 	cmp.w	r9, #0
 801397e:	d075      	beq.n	8013a6c <rcl_init+0x144>
 8013980:	f8d9 3000 	ldr.w	r3, [r9]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d176      	bne.n	8013a76 <rcl_init+0x14e>
 8013988:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801398c:	2178      	movs	r1, #120	; 0x78
 801398e:	2001      	movs	r0, #1
 8013990:	4798      	blx	r3
 8013992:	4604      	mov	r4, r0
 8013994:	f8c9 0000 	str.w	r0, [r9]
 8013998:	2800      	cmp	r0, #0
 801399a:	f000 80c6 	beq.w	8013b2a <rcl_init+0x202>
 801399e:	a802      	add	r0, sp, #8
 80139a0:	f002 f968 	bl	8015c74 <rmw_get_zero_initialized_context>
 80139a4:	2250      	movs	r2, #80	; 0x50
 80139a6:	a902      	add	r1, sp, #8
 80139a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80139ac:	f003 fe8a 	bl	80176c4 <memcpy>
 80139b0:	f8d9 6000 	ldr.w	r6, [r9]
 80139b4:	ac19      	add	r4, sp, #100	; 0x64
 80139b6:	4635      	mov	r5, r6
 80139b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80139bc:	6823      	ldr	r3, [r4, #0]
 80139be:	f106 0114 	add.w	r1, r6, #20
 80139c2:	4650      	mov	r0, sl
 80139c4:	602b      	str	r3, [r5, #0]
 80139c6:	f7f6 fbf9 	bl	800a1bc <rcl_init_options_copy>
 80139ca:	4606      	mov	r6, r0
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d143      	bne.n	8013a58 <rcl_init+0x130>
 80139d0:	463c      	mov	r4, r7
 80139d2:	f8d9 a000 	ldr.w	sl, [r9]
 80139d6:	17fd      	asrs	r5, r7, #31
 80139d8:	e9ca 4506 	strd	r4, r5, [sl, #24]
 80139dc:	f8ca 0020 	str.w	r0, [sl, #32]
 80139e0:	2f00      	cmp	r7, #0
 80139e2:	d04d      	beq.n	8013a80 <rcl_init+0x158>
 80139e4:	f1b8 0f00 	cmp.w	r8, #0
 80139e8:	d04a      	beq.n	8013a80 <rcl_init+0x158>
 80139ea:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80139ee:	4638      	mov	r0, r7
 80139f0:	2104      	movs	r1, #4
 80139f2:	4798      	blx	r3
 80139f4:	f8d9 b000 	ldr.w	fp, [r9]
 80139f8:	f8ca 0020 	str.w	r0, [sl, #32]
 80139fc:	f8db 3020 	ldr.w	r3, [fp, #32]
 8013a00:	b34b      	cbz	r3, 8013a56 <rcl_init+0x12e>
 8013a02:	2f01      	cmp	r7, #1
 8013a04:	f175 0300 	sbcs.w	r3, r5, #0
 8013a08:	db3a      	blt.n	8013a80 <rcl_init+0x158>
 8013a0a:	2600      	movs	r6, #0
 8013a0c:	2700      	movs	r7, #0
 8013a0e:	f1a8 0804 	sub.w	r8, r8, #4
 8013a12:	e00d      	b.n	8013a30 <rcl_init+0x108>
 8013a14:	4652      	mov	r2, sl
 8013a16:	f8d8 1000 	ldr.w	r1, [r8]
 8013a1a:	f003 fe53 	bl	80176c4 <memcpy>
 8013a1e:	3601      	adds	r6, #1
 8013a20:	f147 0700 	adc.w	r7, r7, #0
 8013a24:	42bd      	cmp	r5, r7
 8013a26:	bf08      	it	eq
 8013a28:	42b4      	cmpeq	r4, r6
 8013a2a:	d029      	beq.n	8013a80 <rcl_init+0x158>
 8013a2c:	f8d9 b000 	ldr.w	fp, [r9]
 8013a30:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8013a34:	f7ec fc06 	bl	8000244 <strlen>
 8013a38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013a3a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8013a3c:	f8db b020 	ldr.w	fp, [fp, #32]
 8013a40:	4682      	mov	sl, r0
 8013a42:	4798      	blx	r3
 8013a44:	f8d9 2000 	ldr.w	r2, [r9]
 8013a48:	00b3      	lsls	r3, r6, #2
 8013a4a:	6a12      	ldr	r2, [r2, #32]
 8013a4c:	f84b 0003 	str.w	r0, [fp, r3]
 8013a50:	58d0      	ldr	r0, [r2, r3]
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d1de      	bne.n	8013a14 <rcl_init+0xec>
 8013a56:	260a      	movs	r6, #10
 8013a58:	4648      	mov	r0, r9
 8013a5a:	f7ff fd8f 	bl	801357c <__cleanup_context>
 8013a5e:	4630      	mov	r0, r6
 8013a60:	b01f      	add	sp, #124	; 0x7c
 8013a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a66:	2900      	cmp	r1, #0
 8013a68:	f43f af74 	beq.w	8013954 <rcl_init+0x2c>
 8013a6c:	260b      	movs	r6, #11
 8013a6e:	4630      	mov	r0, r6
 8013a70:	b01f      	add	sp, #124	; 0x7c
 8013a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a76:	2664      	movs	r6, #100	; 0x64
 8013a78:	4630      	mov	r0, r6
 8013a7a:	b01f      	add	sp, #124	; 0x7c
 8013a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a80:	2605      	movs	r6, #5
 8013a82:	2300      	movs	r3, #0
 8013a84:	2201      	movs	r2, #1
 8013a86:	4832      	ldr	r0, [pc, #200]	; (8013b50 <rcl_init+0x228>)
 8013a88:	9600      	str	r6, [sp, #0]
 8013a8a:	f001 ff51 	bl	8015930 <__atomic_fetch_add_8>
 8013a8e:	4604      	mov	r4, r0
 8013a90:	460d      	mov	r5, r1
 8013a92:	ea54 0305 	orrs.w	r3, r4, r5
 8013a96:	d03e      	beq.n	8013b16 <rcl_init+0x1ee>
 8013a98:	4602      	mov	r2, r0
 8013a9a:	460b      	mov	r3, r1
 8013a9c:	9600      	str	r6, [sp, #0]
 8013a9e:	f109 0008 	add.w	r0, r9, #8
 8013aa2:	f001 fed9 	bl	8015858 <__atomic_store_8>
 8013aa6:	f8d9 3000 	ldr.w	r3, [r9]
 8013aaa:	695f      	ldr	r7, [r3, #20]
 8013aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aae:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8013ab2:	3301      	adds	r3, #1
 8013ab4:	d03d      	beq.n	8013b32 <rcl_init+0x20a>
 8013ab6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013aba:	b94b      	cbnz	r3, 8013ad0 <rcl_init+0x1a8>
 8013abc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8013ac0:	f000 f848 	bl	8013b54 <rcl_get_localhost_only>
 8013ac4:	4606      	mov	r6, r0
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d1c6      	bne.n	8013a58 <rcl_init+0x130>
 8013aca:	f8d9 3000 	ldr.w	r3, [r9]
 8013ace:	695f      	ldr	r7, [r3, #20]
 8013ad0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ad2:	aa18      	add	r2, sp, #96	; 0x60
 8013ad4:	a917      	add	r1, sp, #92	; 0x5c
 8013ad6:	f000 ff95 	bl	8014a04 <rcl_validate_enclave_name>
 8013ada:	4606      	mov	r6, r0
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d1bb      	bne.n	8013a58 <rcl_init+0x130>
 8013ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013ae2:	bb23      	cbnz	r3, 8013b2e <rcl_init+0x206>
 8013ae4:	f8d9 1000 	ldr.w	r1, [r9]
 8013ae8:	694b      	ldr	r3, [r1, #20]
 8013aea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013aec:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013af0:	f000 fad6 	bl	80140a0 <rcl_get_security_options_from_environment>
 8013af4:	4606      	mov	r6, r0
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d1ae      	bne.n	8013a58 <rcl_init+0x130>
 8013afa:	f8d9 1000 	ldr.w	r1, [r9]
 8013afe:	6948      	ldr	r0, [r1, #20]
 8013b00:	3128      	adds	r1, #40	; 0x28
 8013b02:	3018      	adds	r0, #24
 8013b04:	f7f7 ffcc 	bl	800baa0 <rmw_init>
 8013b08:	4606      	mov	r6, r0
 8013b0a:	2800      	cmp	r0, #0
 8013b0c:	d0af      	beq.n	8013a6e <rcl_init+0x146>
 8013b0e:	f7ff fd03 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 8013b12:	4606      	mov	r6, r0
 8013b14:	e7a0      	b.n	8013a58 <rcl_init+0x130>
 8013b16:	9600      	str	r6, [sp, #0]
 8013b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b20:	480b      	ldr	r0, [pc, #44]	; (8013b50 <rcl_init+0x228>)
 8013b22:	f001 fe99 	bl	8015858 <__atomic_store_8>
 8013b26:	2601      	movs	r6, #1
 8013b28:	e796      	b.n	8013a58 <rcl_init+0x130>
 8013b2a:	260a      	movs	r6, #10
 8013b2c:	e79f      	b.n	8013a6e <rcl_init+0x146>
 8013b2e:	2601      	movs	r6, #1
 8013b30:	e792      	b.n	8013a58 <rcl_init+0x130>
 8013b32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013b36:	f003 fbc9 	bl	80172cc <rcl_get_default_domain_id>
 8013b3a:	4606      	mov	r6, r0
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d18b      	bne.n	8013a58 <rcl_init+0x130>
 8013b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b42:	3301      	adds	r3, #1
 8013b44:	f8d9 3000 	ldr.w	r3, [r9]
 8013b48:	bf08      	it	eq
 8013b4a:	6278      	streq	r0, [r7, #36]	; 0x24
 8013b4c:	695f      	ldr	r7, [r3, #20]
 8013b4e:	e7b2      	b.n	8013ab6 <rcl_init+0x18e>
 8013b50:	20000208 	.word	0x20000208

08013b54 <rcl_get_localhost_only>:
 8013b54:	2300      	movs	r3, #0
 8013b56:	b510      	push	{r4, lr}
 8013b58:	b082      	sub	sp, #8
 8013b5a:	9301      	str	r3, [sp, #4]
 8013b5c:	b1b8      	cbz	r0, 8013b8e <rcl_get_localhost_only+0x3a>
 8013b5e:	4604      	mov	r4, r0
 8013b60:	a901      	add	r1, sp, #4
 8013b62:	480c      	ldr	r0, [pc, #48]	; (8013b94 <rcl_get_localhost_only+0x40>)
 8013b64:	f001 ff68 	bl	8015a38 <rcutils_get_env>
 8013b68:	b110      	cbz	r0, 8013b70 <rcl_get_localhost_only+0x1c>
 8013b6a:	2001      	movs	r0, #1
 8013b6c:	b002      	add	sp, #8
 8013b6e:	bd10      	pop	{r4, pc}
 8013b70:	9b01      	ldr	r3, [sp, #4]
 8013b72:	b113      	cbz	r3, 8013b7a <rcl_get_localhost_only+0x26>
 8013b74:	781a      	ldrb	r2, [r3, #0]
 8013b76:	2a31      	cmp	r2, #49	; 0x31
 8013b78:	d004      	beq.n	8013b84 <rcl_get_localhost_only+0x30>
 8013b7a:	2302      	movs	r3, #2
 8013b7c:	2000      	movs	r0, #0
 8013b7e:	7023      	strb	r3, [r4, #0]
 8013b80:	b002      	add	sp, #8
 8013b82:	bd10      	pop	{r4, pc}
 8013b84:	785b      	ldrb	r3, [r3, #1]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d1f7      	bne.n	8013b7a <rcl_get_localhost_only+0x26>
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	e7f6      	b.n	8013b7c <rcl_get_localhost_only+0x28>
 8013b8e:	200b      	movs	r0, #11
 8013b90:	b002      	add	sp, #8
 8013b92:	bd10      	pop	{r4, pc}
 8013b94:	0801a280 	.word	0x0801a280

08013b98 <rcl_get_zero_initialized_node>:
 8013b98:	4603      	mov	r3, r0
 8013b9a:	4a03      	ldr	r2, [pc, #12]	; (8013ba8 <rcl_get_zero_initialized_node+0x10>)
 8013b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ba0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	4770      	bx	lr
 8013ba8:	0801a29c 	.word	0x0801a29c

08013bac <rcl_node_init>:
 8013bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	2700      	movs	r7, #0
 8013bb2:	b09b      	sub	sp, #108	; 0x6c
 8013bb4:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
 8013bb8:	4604      	mov	r4, r0
 8013bba:	a815      	add	r0, sp, #84	; 0x54
 8013bbc:	460e      	mov	r6, r1
 8013bbe:	4615      	mov	r5, r2
 8013bc0:	4698      	mov	r8, r3
 8013bc2:	9713      	str	r7, [sp, #76]	; 0x4c
 8013bc4:	f003 fc90 	bl	80174e8 <rcl_guard_condition_get_default_options>
 8013bc8:	f1b9 0f00 	cmp.w	r9, #0
 8013bcc:	f000 80fa 	beq.w	8013dc4 <rcl_node_init+0x218>
 8013bd0:	f109 0a04 	add.w	sl, r9, #4
 8013bd4:	4650      	mov	r0, sl
 8013bd6:	f7f7 fb3b 	bl	800b250 <rcutils_allocator_is_valid>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	f000 80f2 	beq.w	8013dc4 <rcl_node_init+0x218>
 8013be0:	2e00      	cmp	r6, #0
 8013be2:	f000 80ef 	beq.w	8013dc4 <rcl_node_init+0x218>
 8013be6:	2d00      	cmp	r5, #0
 8013be8:	f000 80ec 	beq.w	8013dc4 <rcl_node_init+0x218>
 8013bec:	2c00      	cmp	r4, #0
 8013bee:	f000 80e9 	beq.w	8013dc4 <rcl_node_init+0x218>
 8013bf2:	6867      	ldr	r7, [r4, #4]
 8013bf4:	2f00      	cmp	r7, #0
 8013bf6:	f040 810f 	bne.w	8013e18 <rcl_node_init+0x26c>
 8013bfa:	f1b8 0f00 	cmp.w	r8, #0
 8013bfe:	f000 80e1 	beq.w	8013dc4 <rcl_node_init+0x218>
 8013c02:	4640      	mov	r0, r8
 8013c04:	f7ff fcac 	bl	8013560 <rcl_context_is_valid>
 8013c08:	4683      	mov	fp, r0
 8013c0a:	2800      	cmp	r0, #0
 8013c0c:	f000 80df 	beq.w	8013dce <rcl_node_init+0x222>
 8013c10:	463a      	mov	r2, r7
 8013c12:	4630      	mov	r0, r6
 8013c14:	a914      	add	r1, sp, #80	; 0x50
 8013c16:	9714      	str	r7, [sp, #80]	; 0x50
 8013c18:	f002 f8a0 	bl	8015d5c <rmw_validate_node_name>
 8013c1c:	4607      	mov	r7, r0
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	f040 80d1 	bne.w	8013dc6 <rcl_node_init+0x21a>
 8013c24:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013c26:	2800      	cmp	r0, #0
 8013c28:	f040 8100 	bne.w	8013e2c <rcl_node_init+0x280>
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	f7ec fb09 	bl	8000244 <strlen>
 8013c32:	2800      	cmp	r0, #0
 8013c34:	f040 80cd 	bne.w	8013dd2 <rcl_node_init+0x226>
 8013c38:	4d8d      	ldr	r5, [pc, #564]	; (8013e70 <rcl_node_init+0x2c4>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	a914      	add	r1, sp, #80	; 0x50
 8013c40:	f002 f86e 	bl	8015d20 <rmw_validate_namespace>
 8013c44:	4607      	mov	r7, r0
 8013c46:	2800      	cmp	r0, #0
 8013c48:	f040 80bd 	bne.w	8013dc6 <rcl_node_init+0x21a>
 8013c4c:	4683      	mov	fp, r0
 8013c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	f040 80ef 	bne.w	8013e34 <rcl_node_init+0x288>
 8013c56:	2030      	movs	r0, #48	; 0x30
 8013c58:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8013c5c:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013c60:	9307      	str	r3, [sp, #28]
 8013c62:	4790      	blx	r2
 8013c64:	4607      	mov	r7, r0
 8013c66:	6060      	str	r0, [r4, #4]
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	f000 80da 	beq.w	8013e22 <rcl_node_init+0x276>
 8013c6e:	9b07      	ldr	r3, [sp, #28]
 8013c70:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8013c74:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8013c78:	a80a      	add	r0, sp, #40	; 0x28
 8013c7a:	f000 f929 	bl	8013ed0 <rcl_node_get_default_options>
 8013c7e:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8013c82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013c86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013c88:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8013c8c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8013c90:	4648      	mov	r0, r9
 8013c92:	6861      	ldr	r1, [r4, #4]
 8013c94:	f8c4 8000 	str.w	r8, [r4]
 8013c98:	f000 f936 	bl	8013f08 <rcl_node_options_copy>
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d168      	bne.n	8013d72 <rcl_node_init+0x1c6>
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	f7ec facf 	bl	8000244 <strlen>
 8013ca6:	4428      	add	r0, r5
 8013ca8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8013cac:	2b2f      	cmp	r3, #47	; 0x2f
 8013cae:	f000 80c9 	beq.w	8013e44 <rcl_node_init+0x298>
 8013cb2:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8013cb6:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8013cba:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8013e78 <rcl_node_init+0x2cc>
 8013cbe:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8013cc2:	9701      	str	r7, [sp, #4]
 8013cc4:	f8da 7010 	ldr.w	r7, [sl, #16]
 8013cc8:	f8cd c008 	str.w	ip, [sp, #8]
 8013ccc:	9700      	str	r7, [sp, #0]
 8013cce:	6867      	ldr	r7, [r4, #4]
 8013cd0:	f001 fe78 	bl	80159c4 <rcutils_format_string_limit>
 8013cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8013cd6:	6867      	ldr	r7, [r4, #4]
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	1c59      	adds	r1, r3, #1
 8013cdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8013cde:	f000 80ba 	beq.w	8013e56 <rcl_node_init+0x2aa>
 8013ce2:	f8d8 2000 	ldr.w	r2, [r8]
 8013ce6:	61fb      	str	r3, [r7, #28]
 8013ce8:	6952      	ldr	r2, [r2, #20]
 8013cea:	6821      	ldr	r1, [r4, #0]
 8013cec:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8013cf0:	6808      	ldr	r0, [r1, #0]
 8013cf2:	f1a2 0201 	sub.w	r2, r2, #1
 8013cf6:	fab2 f282 	clz	r2, r2
 8013cfa:	0952      	lsrs	r2, r2, #5
 8013cfc:	9200      	str	r2, [sp, #0]
 8013cfe:	4631      	mov	r1, r6
 8013d00:	462a      	mov	r2, r5
 8013d02:	3028      	adds	r0, #40	; 0x28
 8013d04:	f7f8 f89e 	bl	800be44 <rmw_create_node>
 8013d08:	6863      	ldr	r3, [r4, #4]
 8013d0a:	6238      	str	r0, [r7, #32]
 8013d0c:	6a18      	ldr	r0, [r3, #32]
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d031      	beq.n	8013d76 <rcl_node_init+0x1ca>
 8013d12:	f7f8 f929 	bl	800bf68 <rmw_node_get_graph_guard_condition>
 8013d16:	4607      	mov	r7, r0
 8013d18:	b358      	cbz	r0, 8013d72 <rcl_node_init+0x1c6>
 8013d1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013d1e:	2008      	movs	r0, #8
 8013d20:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013d24:	6866      	ldr	r6, [r4, #4]
 8013d26:	4798      	blx	r3
 8013d28:	6863      	ldr	r3, [r4, #4]
 8013d2a:	6270      	str	r0, [r6, #36]	; 0x24
 8013d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d2e:	9207      	str	r2, [sp, #28]
 8013d30:	b30a      	cbz	r2, 8013d76 <rcl_node_init+0x1ca>
 8013d32:	ae08      	add	r6, sp, #32
 8013d34:	4630      	mov	r0, r6
 8013d36:	f003 fafd 	bl	8017334 <rcl_get_zero_initialized_guard_condition>
 8013d3a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013d3e:	9a07      	ldr	r2, [sp, #28]
 8013d40:	ae15      	add	r6, sp, #84	; 0x54
 8013d42:	e882 0003 	stmia.w	r2, {r0, r1}
 8013d46:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8013d4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013d4c:	6862      	ldr	r2, [r4, #4]
 8013d4e:	f8da 3000 	ldr.w	r3, [sl]
 8013d52:	f8d2 c024 	ldr.w	ip, [r2, #36]	; 0x24
 8013d56:	6033      	str	r3, [r6, #0]
 8013d58:	ab1a      	add	r3, sp, #104	; 0x68
 8013d5a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8013d5e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013d62:	4639      	mov	r1, r7
 8013d64:	4660      	mov	r0, ip
 8013d66:	4642      	mov	r2, r8
 8013d68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d6a:	f003 fb43 	bl	80173f4 <rcl_guard_condition_init_from_rmw>
 8013d6e:	4607      	mov	r7, r0
 8013d70:	b320      	cbz	r0, 8013dbc <rcl_node_init+0x210>
 8013d72:	6863      	ldr	r3, [r4, #4]
 8013d74:	b1f3      	cbz	r3, 8013db4 <rcl_node_init+0x208>
 8013d76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013d78:	b128      	cbz	r0, 8013d86 <rcl_node_init+0x1da>
 8013d7a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013d7e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013d82:	4798      	blx	r3
 8013d84:	6863      	ldr	r3, [r4, #4]
 8013d86:	6a18      	ldr	r0, [r3, #32]
 8013d88:	b110      	cbz	r0, 8013d90 <rcl_node_init+0x1e4>
 8013d8a:	f7f8 f873 	bl	800be74 <rmw_destroy_node>
 8013d8e:	6863      	ldr	r3, [r4, #4]
 8013d90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d92:	b148      	cbz	r0, 8013da8 <rcl_node_init+0x1fc>
 8013d94:	f003 fb86 	bl	80174a4 <rcl_guard_condition_fini>
 8013d98:	6862      	ldr	r2, [r4, #4]
 8013d9a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013d9e:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8013da0:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013da4:	4798      	blx	r3
 8013da6:	6863      	ldr	r3, [r4, #4]
 8013da8:	4618      	mov	r0, r3
 8013daa:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013dae:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013db2:	4798      	blx	r3
 8013db4:	2300      	movs	r3, #0
 8013db6:	2701      	movs	r7, #1
 8013db8:	e9c4 3300 	strd	r3, r3, [r4]
 8013dbc:	f1bb 0f00 	cmp.w	fp, #0
 8013dc0:	d123      	bne.n	8013e0a <rcl_node_init+0x25e>
 8013dc2:	e000      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013dc4:	270b      	movs	r7, #11
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	b01b      	add	sp, #108	; 0x6c
 8013dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dce:	2765      	movs	r7, #101	; 0x65
 8013dd0:	e7f9      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013dd2:	782b      	ldrb	r3, [r5, #0]
 8013dd4:	2b2f      	cmp	r3, #47	; 0x2f
 8013dd6:	f43f af30 	beq.w	8013c3a <rcl_node_init+0x8e>
 8013dda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013dde:	4a25      	ldr	r2, [pc, #148]	; (8013e74 <rcl_node_init+0x2c8>)
 8013de0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8013de4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8013de8:	9503      	str	r5, [sp, #12]
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8013df0:	f001 fde8 	bl	80159c4 <rcutils_format_string_limit>
 8013df4:	4605      	mov	r5, r0
 8013df6:	b360      	cbz	r0, 8013e52 <rcl_node_init+0x2a6>
 8013df8:	2200      	movs	r2, #0
 8013dfa:	a914      	add	r1, sp, #80	; 0x50
 8013dfc:	9214      	str	r2, [sp, #80]	; 0x50
 8013dfe:	f001 ff8f 	bl	8015d20 <rmw_validate_namespace>
 8013e02:	4607      	mov	r7, r0
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f43f af22 	beq.w	8013c4e <rcl_node_init+0xa2>
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013e10:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8013e14:	4798      	blx	r3
 8013e16:	e7d6      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013e18:	2764      	movs	r7, #100	; 0x64
 8013e1a:	4638      	mov	r0, r7
 8013e1c:	b01b      	add	sp, #108	; 0x6c
 8013e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e22:	270a      	movs	r7, #10
 8013e24:	f1bb 0f00 	cmp.w	fp, #0
 8013e28:	d1ef      	bne.n	8013e0a <rcl_node_init+0x25e>
 8013e2a:	e7cc      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013e2c:	f001 ffe8 	bl	8015e00 <rmw_node_name_validation_result_string>
 8013e30:	27c9      	movs	r7, #201	; 0xc9
 8013e32:	e7c8      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013e34:	4618      	mov	r0, r3
 8013e36:	f001 ff85 	bl	8015d44 <rmw_namespace_validation_result_string>
 8013e3a:	27ca      	movs	r7, #202	; 0xca
 8013e3c:	f1bb 0f00 	cmp.w	fp, #0
 8013e40:	d1e3      	bne.n	8013e0a <rcl_node_init+0x25e>
 8013e42:	e7c0      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013e44:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8013e48:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8013e4c:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8013e7c <rcl_node_init+0x2d0>
 8013e50:	e735      	b.n	8013cbe <rcl_node_init+0x112>
 8013e52:	270a      	movs	r7, #10
 8013e54:	e7b7      	b.n	8013dc6 <rcl_node_init+0x21a>
 8013e56:	a813      	add	r0, sp, #76	; 0x4c
 8013e58:	f003 fa38 	bl	80172cc <rcl_get_default_domain_id>
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d188      	bne.n	8013d72 <rcl_node_init+0x1c6>
 8013e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013e62:	1c5a      	adds	r2, r3, #1
 8013e64:	bf09      	itett	eq
 8013e66:	4603      	moveq	r3, r0
 8013e68:	6867      	ldrne	r7, [r4, #4]
 8013e6a:	6867      	ldreq	r7, [r4, #4]
 8013e6c:	9013      	streq	r0, [sp, #76]	; 0x4c
 8013e6e:	e738      	b.n	8013ce2 <rcl_node_init+0x136>
 8013e70:	08019f18 	.word	0x08019f18
 8013e74:	0801a298 	.word	0x0801a298
 8013e78:	08019f1c 	.word	0x08019f1c
 8013e7c:	08019f64 	.word	0x08019f64

08013e80 <rcl_node_is_valid>:
 8013e80:	b130      	cbz	r0, 8013e90 <rcl_node_is_valid+0x10>
 8013e82:	6843      	ldr	r3, [r0, #4]
 8013e84:	b123      	cbz	r3, 8013e90 <rcl_node_is_valid+0x10>
 8013e86:	6a1b      	ldr	r3, [r3, #32]
 8013e88:	b113      	cbz	r3, 8013e90 <rcl_node_is_valid+0x10>
 8013e8a:	6800      	ldr	r0, [r0, #0]
 8013e8c:	f7ff bb68 	b.w	8013560 <rcl_context_is_valid>
 8013e90:	2000      	movs	r0, #0
 8013e92:	4770      	bx	lr

08013e94 <rcl_node_get_name>:
 8013e94:	b120      	cbz	r0, 8013ea0 <rcl_node_get_name+0xc>
 8013e96:	6840      	ldr	r0, [r0, #4]
 8013e98:	b110      	cbz	r0, 8013ea0 <rcl_node_get_name+0xc>
 8013e9a:	6a00      	ldr	r0, [r0, #32]
 8013e9c:	b100      	cbz	r0, 8013ea0 <rcl_node_get_name+0xc>
 8013e9e:	6880      	ldr	r0, [r0, #8]
 8013ea0:	4770      	bx	lr
 8013ea2:	bf00      	nop

08013ea4 <rcl_node_get_namespace>:
 8013ea4:	b120      	cbz	r0, 8013eb0 <rcl_node_get_namespace+0xc>
 8013ea6:	6840      	ldr	r0, [r0, #4]
 8013ea8:	b110      	cbz	r0, 8013eb0 <rcl_node_get_namespace+0xc>
 8013eaa:	6a00      	ldr	r0, [r0, #32]
 8013eac:	b100      	cbz	r0, 8013eb0 <rcl_node_get_namespace+0xc>
 8013eae:	68c0      	ldr	r0, [r0, #12]
 8013eb0:	4770      	bx	lr
 8013eb2:	bf00      	nop

08013eb4 <rcl_node_get_options>:
 8013eb4:	b128      	cbz	r0, 8013ec2 <rcl_node_get_options+0xe>
 8013eb6:	6840      	ldr	r0, [r0, #4]
 8013eb8:	b118      	cbz	r0, 8013ec2 <rcl_node_get_options+0xe>
 8013eba:	6a03      	ldr	r3, [r0, #32]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	bf08      	it	eq
 8013ec0:	2000      	moveq	r0, #0
 8013ec2:	4770      	bx	lr

08013ec4 <rcl_node_get_rmw_handle>:
 8013ec4:	b110      	cbz	r0, 8013ecc <rcl_node_get_rmw_handle+0x8>
 8013ec6:	6840      	ldr	r0, [r0, #4]
 8013ec8:	b100      	cbz	r0, 8013ecc <rcl_node_get_rmw_handle+0x8>
 8013eca:	6a00      	ldr	r0, [r0, #32]
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop

08013ed0 <rcl_node_get_default_options>:
 8013ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed4:	4680      	mov	r8, r0
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	466d      	mov	r5, sp
 8013eda:	4c0a      	ldr	r4, [pc, #40]	; (8013f04 <rcl_node_get_default_options+0x34>)
 8013edc:	4646      	mov	r6, r8
 8013ede:	4627      	mov	r7, r4
 8013ee0:	4668      	mov	r0, sp
 8013ee2:	3404      	adds	r4, #4
 8013ee4:	f7f7 f9a6 	bl	800b234 <rcutils_get_default_allocator>
 8013ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013eec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013eee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013ef0:	682b      	ldr	r3, [r5, #0]
 8013ef2:	6023      	str	r3, [r4, #0]
 8013ef4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8013ef8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8013efc:	4640      	mov	r0, r8
 8013efe:	b006      	add	sp, #24
 8013f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f04:	20000210 	.word	0x20000210

08013f08 <rcl_node_options_copy>:
 8013f08:	b1d8      	cbz	r0, 8013f42 <rcl_node_options_copy+0x3a>
 8013f0a:	b4f0      	push	{r4, r5, r6, r7}
 8013f0c:	460f      	mov	r7, r1
 8013f0e:	b1a9      	cbz	r1, 8013f3c <rcl_node_options_copy+0x34>
 8013f10:	4288      	cmp	r0, r1
 8013f12:	4606      	mov	r6, r0
 8013f14:	d012      	beq.n	8013f3c <rcl_node_options_copy+0x34>
 8013f16:	4605      	mov	r5, r0
 8013f18:	460c      	mov	r4, r1
 8013f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f1e:	f890 c018 	ldrb.w	ip, [r0, #24]
 8013f22:	f844 3b04 	str.w	r3, [r4], #4
 8013f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f2a:	7e73      	ldrb	r3, [r6, #25]
 8013f2c:	682a      	ldr	r2, [r5, #0]
 8013f2e:	2000      	movs	r0, #0
 8013f30:	6022      	str	r2, [r4, #0]
 8013f32:	f887 c018 	strb.w	ip, [r7, #24]
 8013f36:	767b      	strb	r3, [r7, #25]
 8013f38:	bcf0      	pop	{r4, r5, r6, r7}
 8013f3a:	4770      	bx	lr
 8013f3c:	200b      	movs	r0, #11
 8013f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8013f40:	4770      	bx	lr
 8013f42:	200b      	movs	r0, #11
 8013f44:	4770      	bx	lr
 8013f46:	bf00      	nop

08013f48 <exact_match_lookup>:
 8013f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f4a:	460d      	mov	r5, r1
 8013f4c:	4614      	mov	r4, r2
 8013f4e:	b085      	sub	sp, #20
 8013f50:	f102 0608 	add.w	r6, r2, #8
 8013f54:	4607      	mov	r7, r0
 8013f56:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013f5a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f5e:	4628      	mov	r0, r5
 8013f60:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013f64:	4917      	ldr	r1, [pc, #92]	; (8013fc4 <exact_match_lookup+0x7c>)
 8013f66:	f001 fd1f 	bl	80159a8 <rcutils_join_path>
 8013f6a:	783b      	ldrb	r3, [r7, #0]
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	2b2f      	cmp	r3, #47	; 0x2f
 8013f70:	d021      	beq.n	8013fb6 <exact_match_lookup+0x6e>
 8013f72:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8013f76:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013f7a:	1c78      	adds	r0, r7, #1
 8013f7c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8013f80:	f001 fd18 	bl	80159b4 <rcutils_to_native_path>
 8013f84:	4603      	mov	r3, r0
 8013f86:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013f8a:	461e      	mov	r6, r3
 8013f8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013f90:	4631      	mov	r1, r6
 8013f92:	e894 000c 	ldmia.w	r4, {r2, r3}
 8013f96:	4628      	mov	r0, r5
 8013f98:	f001 fd06 	bl	80159a8 <rcutils_join_path>
 8013f9c:	4607      	mov	r7, r0
 8013f9e:	6863      	ldr	r3, [r4, #4]
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	6921      	ldr	r1, [r4, #16]
 8013fa4:	4798      	blx	r3
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	463d      	mov	r5, r7
 8013faa:	6863      	ldr	r3, [r4, #4]
 8013fac:	6921      	ldr	r1, [r4, #16]
 8013fae:	4798      	blx	r3
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	b005      	add	sp, #20
 8013fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fb6:	787b      	ldrb	r3, [r7, #1]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1da      	bne.n	8013f72 <exact_match_lookup+0x2a>
 8013fbc:	4628      	mov	r0, r5
 8013fbe:	b005      	add	sp, #20
 8013fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	0801a2e0 	.word	0x0801a2e0

08013fc8 <rcl_get_secure_root>:
 8013fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013fcc:	b085      	sub	sp, #20
 8013fce:	b168      	cbz	r0, 8013fec <rcl_get_secure_root+0x24>
 8013fd0:	4607      	mov	r7, r0
 8013fd2:	4608      	mov	r0, r1
 8013fd4:	460c      	mov	r4, r1
 8013fd6:	f7f7 f93b 	bl	800b250 <rcutils_allocator_is_valid>
 8013fda:	b138      	cbz	r0, 8013fec <rcl_get_secure_root+0x24>
 8013fdc:	2300      	movs	r3, #0
 8013fde:	482e      	ldr	r0, [pc, #184]	; (8014098 <rcl_get_secure_root+0xd0>)
 8013fe0:	a903      	add	r1, sp, #12
 8013fe2:	9303      	str	r3, [sp, #12]
 8013fe4:	f001 fd28 	bl	8015a38 <rcutils_get_env>
 8013fe8:	4605      	mov	r5, r0
 8013fea:	b120      	cbz	r0, 8013ff6 <rcl_get_secure_root+0x2e>
 8013fec:	2500      	movs	r5, #0
 8013fee:	4628      	mov	r0, r5
 8013ff0:	b005      	add	sp, #20
 8013ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ff6:	9e03      	ldr	r6, [sp, #12]
 8013ff8:	7833      	ldrb	r3, [r6, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d0f6      	beq.n	8013fec <rcl_get_secure_root+0x24>
 8013ffe:	f104 090c 	add.w	r9, r4, #12
 8014002:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014006:	e88d 0003 	stmia.w	sp, {r0, r1}
 801400a:	4630      	mov	r0, r6
 801400c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014010:	f001 fdf2 	bl	8015bf8 <rcutils_strdup>
 8014014:	4680      	mov	r8, r0
 8014016:	2800      	cmp	r0, #0
 8014018:	d0e8      	beq.n	8013fec <rcl_get_secure_root+0x24>
 801401a:	4820      	ldr	r0, [pc, #128]	; (801409c <rcl_get_secure_root+0xd4>)
 801401c:	a903      	add	r1, sp, #12
 801401e:	9503      	str	r5, [sp, #12]
 8014020:	f001 fd0a 	bl	8015a38 <rcutils_get_env>
 8014024:	b160      	cbz	r0, 8014040 <rcl_get_secure_root+0x78>
 8014026:	2600      	movs	r6, #0
 8014028:	4630      	mov	r0, r6
 801402a:	6863      	ldr	r3, [r4, #4]
 801402c:	6921      	ldr	r1, [r4, #16]
 801402e:	4798      	blx	r3
 8014030:	4640      	mov	r0, r8
 8014032:	6863      	ldr	r3, [r4, #4]
 8014034:	6921      	ldr	r1, [r4, #16]
 8014036:	4798      	blx	r3
 8014038:	4628      	mov	r0, r5
 801403a:	b005      	add	sp, #20
 801403c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014040:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8014044:	f89c 6000 	ldrb.w	r6, [ip]
 8014048:	b1f6      	cbz	r6, 8014088 <rcl_get_secure_root+0xc0>
 801404a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801404e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014052:	4660      	mov	r0, ip
 8014054:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014058:	f001 fdce 	bl	8015bf8 <rcutils_strdup>
 801405c:	4606      	mov	r6, r0
 801405e:	2800      	cmp	r0, #0
 8014060:	d0e1      	beq.n	8014026 <rcl_get_secure_root+0x5e>
 8014062:	4622      	mov	r2, r4
 8014064:	4641      	mov	r1, r8
 8014066:	f7ff ff6f 	bl	8013f48 <exact_match_lookup>
 801406a:	4605      	mov	r5, r0
 801406c:	2d00      	cmp	r5, #0
 801406e:	d0db      	beq.n	8014028 <rcl_get_secure_root+0x60>
 8014070:	4628      	mov	r0, r5
 8014072:	f001 fc97 	bl	80159a4 <rcutils_is_directory>
 8014076:	4603      	mov	r3, r0
 8014078:	2800      	cmp	r0, #0
 801407a:	d1d5      	bne.n	8014028 <rcl_get_secure_root+0x60>
 801407c:	4628      	mov	r0, r5
 801407e:	6862      	ldr	r2, [r4, #4]
 8014080:	6921      	ldr	r1, [r4, #16]
 8014082:	461d      	mov	r5, r3
 8014084:	4790      	blx	r2
 8014086:	e7cf      	b.n	8014028 <rcl_get_secure_root+0x60>
 8014088:	4638      	mov	r0, r7
 801408a:	4622      	mov	r2, r4
 801408c:	4641      	mov	r1, r8
 801408e:	f7ff ff5b 	bl	8013f48 <exact_match_lookup>
 8014092:	4605      	mov	r5, r0
 8014094:	e7ea      	b.n	801406c <rcl_get_secure_root+0xa4>
 8014096:	bf00      	nop
 8014098:	0801a2ec 	.word	0x0801a2ec
 801409c:	0801a304 	.word	0x0801a304

080140a0 <rcl_get_security_options_from_environment>:
 80140a0:	2300      	movs	r3, #0
 80140a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	4606      	mov	r6, r0
 80140aa:	460f      	mov	r7, r1
 80140ac:	4820      	ldr	r0, [pc, #128]	; (8014130 <rcl_get_security_options_from_environment+0x90>)
 80140ae:	a901      	add	r1, sp, #4
 80140b0:	4690      	mov	r8, r2
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	f001 fcc0 	bl	8015a38 <rcutils_get_env>
 80140b8:	b120      	cbz	r0, 80140c4 <rcl_get_security_options_from_environment+0x24>
 80140ba:	2501      	movs	r5, #1
 80140bc:	4628      	mov	r0, r5
 80140be:	b002      	add	sp, #8
 80140c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140c4:	4604      	mov	r4, r0
 80140c6:	491b      	ldr	r1, [pc, #108]	; (8014134 <rcl_get_security_options_from_environment+0x94>)
 80140c8:	9801      	ldr	r0, [sp, #4]
 80140ca:	f7ec f8b1 	bl	8000230 <strcmp>
 80140ce:	4605      	mov	r5, r0
 80140d0:	b9e8      	cbnz	r0, 801410e <rcl_get_security_options_from_environment+0x6e>
 80140d2:	9001      	str	r0, [sp, #4]
 80140d4:	f1b8 0f00 	cmp.w	r8, #0
 80140d8:	d020      	beq.n	801411c <rcl_get_security_options_from_environment+0x7c>
 80140da:	4817      	ldr	r0, [pc, #92]	; (8014138 <rcl_get_security_options_from_environment+0x98>)
 80140dc:	a901      	add	r1, sp, #4
 80140de:	f001 fcab 	bl	8015a38 <rcutils_get_env>
 80140e2:	2800      	cmp	r0, #0
 80140e4:	d1e9      	bne.n	80140ba <rcl_get_security_options_from_environment+0x1a>
 80140e6:	4915      	ldr	r1, [pc, #84]	; (801413c <rcl_get_security_options_from_environment+0x9c>)
 80140e8:	9801      	ldr	r0, [sp, #4]
 80140ea:	f7ec f8a1 	bl	8000230 <strcmp>
 80140ee:	fab0 f080 	clz	r0, r0
 80140f2:	0940      	lsrs	r0, r0, #5
 80140f4:	f888 0000 	strb.w	r0, [r8]
 80140f8:	4639      	mov	r1, r7
 80140fa:	4630      	mov	r0, r6
 80140fc:	f7ff ff64 	bl	8013fc8 <rcl_get_secure_root>
 8014100:	b170      	cbz	r0, 8014120 <rcl_get_security_options_from_environment+0x80>
 8014102:	f8c8 0004 	str.w	r0, [r8, #4]
 8014106:	4628      	mov	r0, r5
 8014108:	b002      	add	sp, #8
 801410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801410e:	4625      	mov	r5, r4
 8014110:	4628      	mov	r0, r5
 8014112:	f888 4000 	strb.w	r4, [r8]
 8014116:	b002      	add	sp, #8
 8014118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801411c:	250b      	movs	r5, #11
 801411e:	e7cd      	b.n	80140bc <rcl_get_security_options_from_environment+0x1c>
 8014120:	f898 5000 	ldrb.w	r5, [r8]
 8014124:	f1a5 0501 	sub.w	r5, r5, #1
 8014128:	fab5 f585 	clz	r5, r5
 801412c:	096d      	lsrs	r5, r5, #5
 801412e:	e7c5      	b.n	80140bc <rcl_get_security_options_from_environment+0x1c>
 8014130:	0801a2a4 	.word	0x0801a2a4
 8014134:	0801a2b8 	.word	0x0801a2b8
 8014138:	0801a2c0 	.word	0x0801a2c0
 801413c:	0801a2d8 	.word	0x0801a2d8

08014140 <rcl_service_get_rmw_handle>:
 8014140:	b110      	cbz	r0, 8014148 <rcl_service_get_rmw_handle+0x8>
 8014142:	6800      	ldr	r0, [r0, #0]
 8014144:	b100      	cbz	r0, 8014148 <rcl_service_get_rmw_handle+0x8>
 8014146:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014148:	4770      	bx	lr
 801414a:	bf00      	nop

0801414c <rcl_take_request>:
 801414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801414e:	460e      	mov	r6, r1
 8014150:	4607      	mov	r7, r0
 8014152:	b08d      	sub	sp, #52	; 0x34
 8014154:	ad06      	add	r5, sp, #24
 8014156:	460c      	mov	r4, r1
 8014158:	4694      	mov	ip, r2
 801415a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801415c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801415e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014162:	e885 0003 	stmia.w	r5, {r0, r1}
 8014166:	b1e7      	cbz	r7, 80141a2 <rcl_take_request+0x56>
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	b1d3      	cbz	r3, 80141a2 <rcl_take_request+0x56>
 801416c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801416e:	b1c0      	cbz	r0, 80141a2 <rcl_take_request+0x56>
 8014170:	4662      	mov	r2, ip
 8014172:	b30a      	cbz	r2, 80141b8 <rcl_take_request+0x6c>
 8014174:	2500      	movs	r5, #0
 8014176:	f10d 0307 	add.w	r3, sp, #7
 801417a:	a902      	add	r1, sp, #8
 801417c:	f88d 5007 	strb.w	r5, [sp, #7]
 8014180:	f002 f810 	bl	80161a4 <rmw_take_request>
 8014184:	4606      	mov	r6, r0
 8014186:	b178      	cbz	r0, 80141a8 <rcl_take_request+0x5c>
 8014188:	280a      	cmp	r0, #10
 801418a:	bf18      	it	ne
 801418c:	2601      	movne	r6, #1
 801418e:	ad06      	add	r5, sp, #24
 8014190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014194:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014198:	e884 0003 	stmia.w	r4, {r0, r1}
 801419c:	4630      	mov	r0, r6
 801419e:	b00d      	add	sp, #52	; 0x34
 80141a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141a2:	f44f 7616 	mov.w	r6, #600	; 0x258
 80141a6:	e7f2      	b.n	801418e <rcl_take_request+0x42>
 80141a8:	f240 2359 	movw	r3, #601	; 0x259
 80141ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80141b0:	2a00      	cmp	r2, #0
 80141b2:	bf08      	it	eq
 80141b4:	461e      	moveq	r6, r3
 80141b6:	e7ea      	b.n	801418e <rcl_take_request+0x42>
 80141b8:	260b      	movs	r6, #11
 80141ba:	e7e8      	b.n	801418e <rcl_take_request+0x42>

080141bc <rcl_send_response>:
 80141bc:	b160      	cbz	r0, 80141d8 <rcl_send_response+0x1c>
 80141be:	6800      	ldr	r0, [r0, #0]
 80141c0:	b150      	cbz	r0, 80141d8 <rcl_send_response+0x1c>
 80141c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80141c4:	b140      	cbz	r0, 80141d8 <rcl_send_response+0x1c>
 80141c6:	b151      	cbz	r1, 80141de <rcl_send_response+0x22>
 80141c8:	b510      	push	{r4, lr}
 80141ca:	b152      	cbz	r2, 80141e2 <rcl_send_response+0x26>
 80141cc:	f002 f848 	bl	8016260 <rmw_send_response>
 80141d0:	3800      	subs	r0, #0
 80141d2:	bf18      	it	ne
 80141d4:	2001      	movne	r0, #1
 80141d6:	bd10      	pop	{r4, pc}
 80141d8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80141dc:	4770      	bx	lr
 80141de:	200b      	movs	r0, #11
 80141e0:	4770      	bx	lr
 80141e2:	200b      	movs	r0, #11
 80141e4:	bd10      	pop	{r4, pc}
 80141e6:	bf00      	nop

080141e8 <rcl_get_system_time>:
 80141e8:	4608      	mov	r0, r1
 80141ea:	f7f7 ba63 	b.w	800b6b4 <rcutils_system_time_now>
 80141ee:	bf00      	nop

080141f0 <rcl_get_steady_time>:
 80141f0:	4608      	mov	r0, r1
 80141f2:	f7f7 ba87 	b.w	800b704 <rcutils_steady_time_now>
 80141f6:	bf00      	nop

080141f8 <rcl_get_ros_time>:
 80141f8:	7a03      	ldrb	r3, [r0, #8]
 80141fa:	b510      	push	{r4, lr}
 80141fc:	460c      	mov	r4, r1
 80141fe:	b143      	cbz	r3, 8014212 <rcl_get_ros_time+0x1a>
 8014200:	2105      	movs	r1, #5
 8014202:	f001 faf5 	bl	80157f0 <__atomic_load_8>
 8014206:	4602      	mov	r2, r0
 8014208:	460b      	mov	r3, r1
 801420a:	2000      	movs	r0, #0
 801420c:	e9c4 2300 	strd	r2, r3, [r4]
 8014210:	bd10      	pop	{r4, pc}
 8014212:	4608      	mov	r0, r1
 8014214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014218:	f7f7 ba4c 	b.w	800b6b4 <rcutils_system_time_now>

0801421c <rcl_clock_init>:
 801421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014220:	4605      	mov	r5, r0
 8014222:	4610      	mov	r0, r2
 8014224:	4614      	mov	r4, r2
 8014226:	460e      	mov	r6, r1
 8014228:	f7f7 f812 	bl	800b250 <rcutils_allocator_is_valid>
 801422c:	b128      	cbz	r0, 801423a <rcl_clock_init+0x1e>
 801422e:	2d03      	cmp	r5, #3
 8014230:	d803      	bhi.n	801423a <rcl_clock_init+0x1e>
 8014232:	e8df f005 	tbb	[pc, r5]
 8014236:	2e1d      	.short	0x2e1d
 8014238:	0555      	.short	0x0555
 801423a:	200b      	movs	r0, #11
 801423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014240:	2e00      	cmp	r6, #0
 8014242:	d0fa      	beq.n	801423a <rcl_clock_init+0x1e>
 8014244:	2c00      	cmp	r4, #0
 8014246:	d0f8      	beq.n	801423a <rcl_clock_init+0x1e>
 8014248:	2700      	movs	r7, #0
 801424a:	f04f 0c03 	mov.w	ip, #3
 801424e:	7037      	strb	r7, [r6, #0]
 8014250:	f106 0514 	add.w	r5, r6, #20
 8014254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014256:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801425a:	6137      	str	r7, [r6, #16]
 801425c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801425e:	4b2a      	ldr	r3, [pc, #168]	; (8014308 <rcl_clock_init+0xec>)
 8014260:	6822      	ldr	r2, [r4, #0]
 8014262:	4638      	mov	r0, r7
 8014264:	602a      	str	r2, [r5, #0]
 8014266:	f886 c000 	strb.w	ip, [r6]
 801426a:	60f3      	str	r3, [r6, #12]
 801426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014270:	2e00      	cmp	r6, #0
 8014272:	d0e2      	beq.n	801423a <rcl_clock_init+0x1e>
 8014274:	2700      	movs	r7, #0
 8014276:	f106 0514 	add.w	r5, r6, #20
 801427a:	7037      	strb	r7, [r6, #0]
 801427c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801427e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014282:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014288:	6823      	ldr	r3, [r4, #0]
 801428a:	4638      	mov	r0, r7
 801428c:	602b      	str	r3, [r5, #0]
 801428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014292:	2e00      	cmp	r6, #0
 8014294:	d0d1      	beq.n	801423a <rcl_clock_init+0x1e>
 8014296:	2c00      	cmp	r4, #0
 8014298:	d0cf      	beq.n	801423a <rcl_clock_init+0x1e>
 801429a:	f04f 0800 	mov.w	r8, #0
 801429e:	4627      	mov	r7, r4
 80142a0:	f886 8000 	strb.w	r8, [r6]
 80142a4:	f106 0514 	add.w	r5, r6, #20
 80142a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80142aa:	e9c6 8801 	strd	r8, r8, [r6, #4]
 80142ae:	e9c6 8803 	strd	r8, r8, [r6, #12]
 80142b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80142b4:	683a      	ldr	r2, [r7, #0]
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	602a      	str	r2, [r5, #0]
 80142ba:	2010      	movs	r0, #16
 80142bc:	6921      	ldr	r1, [r4, #16]
 80142be:	4798      	blx	r3
 80142c0:	4603      	mov	r3, r0
 80142c2:	6130      	str	r0, [r6, #16]
 80142c4:	b1e8      	cbz	r0, 8014302 <rcl_clock_init+0xe6>
 80142c6:	2400      	movs	r4, #0
 80142c8:	2500      	movs	r5, #0
 80142ca:	2201      	movs	r2, #1
 80142cc:	f880 8008 	strb.w	r8, [r0, #8]
 80142d0:	e9c3 4500 	strd	r4, r5, [r3]
 80142d4:	4b0d      	ldr	r3, [pc, #52]	; (801430c <rcl_clock_init+0xf0>)
 80142d6:	7032      	strb	r2, [r6, #0]
 80142d8:	4640      	mov	r0, r8
 80142da:	60f3      	str	r3, [r6, #12]
 80142dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142e0:	2e00      	cmp	r6, #0
 80142e2:	d0aa      	beq.n	801423a <rcl_clock_init+0x1e>
 80142e4:	2c00      	cmp	r4, #0
 80142e6:	d0a8      	beq.n	801423a <rcl_clock_init+0x1e>
 80142e8:	2700      	movs	r7, #0
 80142ea:	f106 0514 	add.w	r5, r6, #20
 80142ee:	7037      	strb	r7, [r6, #0]
 80142f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142f2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80142f6:	6137      	str	r7, [r6, #16]
 80142f8:	f04f 0c02 	mov.w	ip, #2
 80142fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80142fe:	4b04      	ldr	r3, [pc, #16]	; (8014310 <rcl_clock_init+0xf4>)
 8014300:	e7ae      	b.n	8014260 <rcl_clock_init+0x44>
 8014302:	200a      	movs	r0, #10
 8014304:	e79a      	b.n	801423c <rcl_clock_init+0x20>
 8014306:	bf00      	nop
 8014308:	080141f1 	.word	0x080141f1
 801430c:	080141f9 	.word	0x080141f9
 8014310:	080141e9 	.word	0x080141e9

08014314 <rcl_clock_get_now>:
 8014314:	b140      	cbz	r0, 8014328 <rcl_clock_get_now+0x14>
 8014316:	b139      	cbz	r1, 8014328 <rcl_clock_get_now+0x14>
 8014318:	7803      	ldrb	r3, [r0, #0]
 801431a:	b11b      	cbz	r3, 8014324 <rcl_clock_get_now+0x10>
 801431c:	68c3      	ldr	r3, [r0, #12]
 801431e:	b10b      	cbz	r3, 8014324 <rcl_clock_get_now+0x10>
 8014320:	6900      	ldr	r0, [r0, #16]
 8014322:	4718      	bx	r3
 8014324:	2001      	movs	r0, #1
 8014326:	4770      	bx	lr
 8014328:	200b      	movs	r0, #11
 801432a:	4770      	bx	lr

0801432c <rcl_clock_add_jump_callback>:
 801432c:	b082      	sub	sp, #8
 801432e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014332:	a906      	add	r1, sp, #24
 8014334:	e881 000c 	stmia.w	r1, {r2, r3}
 8014338:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 801433c:	b338      	cbz	r0, 801438e <rcl_clock_add_jump_callback+0x62>
 801433e:	4604      	mov	r4, r0
 8014340:	3014      	adds	r0, #20
 8014342:	f7f6 ff85 	bl	800b250 <rcutils_allocator_is_valid>
 8014346:	b310      	cbz	r0, 801438e <rcl_clock_add_jump_callback+0x62>
 8014348:	b30e      	cbz	r6, 801438e <rcl_clock_add_jump_callback+0x62>
 801434a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801434e:	2a00      	cmp	r2, #0
 8014350:	f173 0300 	sbcs.w	r3, r3, #0
 8014354:	db1b      	blt.n	801438e <rcl_clock_add_jump_callback+0x62>
 8014356:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801435a:	2a01      	cmp	r2, #1
 801435c:	f173 0300 	sbcs.w	r3, r3, #0
 8014360:	da15      	bge.n	801438e <rcl_clock_add_jump_callback+0x62>
 8014362:	68a7      	ldr	r7, [r4, #8]
 8014364:	2f00      	cmp	r7, #0
 8014366:	d03f      	beq.n	80143e8 <rcl_clock_add_jump_callback+0xbc>
 8014368:	6860      	ldr	r0, [r4, #4]
 801436a:	2300      	movs	r3, #0
 801436c:	f100 0220 	add.w	r2, r0, #32
 8014370:	e003      	b.n	801437a <rcl_clock_add_jump_callback+0x4e>
 8014372:	42bb      	cmp	r3, r7
 8014374:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8014378:	d00e      	beq.n	8014398 <rcl_clock_add_jump_callback+0x6c>
 801437a:	f852 1c20 	ldr.w	r1, [r2, #-32]
 801437e:	3301      	adds	r3, #1
 8014380:	42b1      	cmp	r1, r6
 8014382:	d1f6      	bne.n	8014372 <rcl_clock_add_jump_callback+0x46>
 8014384:	6811      	ldr	r1, [r2, #0]
 8014386:	42a9      	cmp	r1, r5
 8014388:	d1f3      	bne.n	8014372 <rcl_clock_add_jump_callback+0x46>
 801438a:	2001      	movs	r0, #1
 801438c:	e000      	b.n	8014390 <rcl_clock_add_jump_callback+0x64>
 801438e:	200b      	movs	r0, #11
 8014390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014394:	b002      	add	sp, #8
 8014396:	4770      	bx	lr
 8014398:	3301      	adds	r3, #1
 801439a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801439e:	00d9      	lsls	r1, r3, #3
 80143a0:	69e3      	ldr	r3, [r4, #28]
 80143a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80143a4:	4798      	blx	r3
 80143a6:	b1e8      	cbz	r0, 80143e4 <rcl_clock_add_jump_callback+0xb8>
 80143a8:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80143ac:	f10d 0c18 	add.w	ip, sp, #24
 80143b0:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
 80143b4:	eb00 08c3 	add.w	r8, r0, r3, lsl #3
 80143b8:	f108 0708 	add.w	r7, r8, #8
 80143bc:	6060      	str	r0, [r4, #4]
 80143be:	f840 6033 	str.w	r6, [r0, r3, lsl #3]
 80143c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80143c8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80143cc:	f10e 0301 	add.w	r3, lr, #1
 80143d0:	e887 0003 	stmia.w	r7, {r0, r1}
 80143d4:	f8c8 5020 	str.w	r5, [r8, #32]
 80143d8:	2000      	movs	r0, #0
 80143da:	60a3      	str	r3, [r4, #8]
 80143dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143e0:	b002      	add	sp, #8
 80143e2:	4770      	bx	lr
 80143e4:	200a      	movs	r0, #10
 80143e6:	e7d3      	b.n	8014390 <rcl_clock_add_jump_callback+0x64>
 80143e8:	2128      	movs	r1, #40	; 0x28
 80143ea:	6860      	ldr	r0, [r4, #4]
 80143ec:	e7d8      	b.n	80143a0 <rcl_clock_add_jump_callback+0x74>
 80143ee:	bf00      	nop

080143f0 <rcl_clock_remove_jump_callback>:
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d057      	beq.n	80144a4 <rcl_clock_remove_jump_callback+0xb4>
 80143f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143f8:	4607      	mov	r7, r0
 80143fa:	3014      	adds	r0, #20
 80143fc:	460c      	mov	r4, r1
 80143fe:	4615      	mov	r5, r2
 8014400:	f7f6 ff26 	bl	800b250 <rcutils_allocator_is_valid>
 8014404:	2800      	cmp	r0, #0
 8014406:	d03a      	beq.n	801447e <rcl_clock_remove_jump_callback+0x8e>
 8014408:	2c00      	cmp	r4, #0
 801440a:	d038      	beq.n	801447e <rcl_clock_remove_jump_callback+0x8e>
 801440c:	f8d7 8008 	ldr.w	r8, [r7, #8]
 8014410:	f1b8 0f00 	cmp.w	r8, #0
 8014414:	d00c      	beq.n	8014430 <rcl_clock_remove_jump_callback+0x40>
 8014416:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801441a:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
 801441e:	4676      	mov	r6, lr
 8014420:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
 8014424:	6833      	ldr	r3, [r6, #0]
 8014426:	42a3      	cmp	r3, r4
 8014428:	d005      	beq.n	8014436 <rcl_clock_remove_jump_callback+0x46>
 801442a:	3628      	adds	r6, #40	; 0x28
 801442c:	45b4      	cmp	ip, r6
 801442e:	d1f9      	bne.n	8014424 <rcl_clock_remove_jump_callback+0x34>
 8014430:	2001      	movs	r0, #1
 8014432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014436:	6a33      	ldr	r3, [r6, #32]
 8014438:	3628      	adds	r6, #40	; 0x28
 801443a:	4566      	cmp	r6, ip
 801443c:	d02a      	beq.n	8014494 <rcl_clock_remove_jump_callback+0xa4>
 801443e:	42ab      	cmp	r3, r5
 8014440:	d1f0      	bne.n	8014424 <rcl_clock_remove_jump_callback+0x34>
 8014442:	4635      	mov	r5, r6
 8014444:	f1a6 0428 	sub.w	r4, r6, #40	; 0x28
 8014448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801444a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014450:	3628      	adds	r6, #40	; 0x28
 8014452:	4566      	cmp	r6, ip
 8014454:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014458:	e884 0003 	stmia.w	r4, {r0, r1}
 801445c:	d1f1      	bne.n	8014442 <rcl_clock_remove_jump_callback+0x52>
 801445e:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8014462:	60bc      	str	r4, [r7, #8]
 8014464:	b174      	cbz	r4, 8014484 <rcl_clock_remove_jump_callback+0x94>
 8014466:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801446a:	4670      	mov	r0, lr
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014470:	00e1      	lsls	r1, r4, #3
 8014472:	4798      	blx	r3
 8014474:	b1c0      	cbz	r0, 80144a8 <rcl_clock_remove_jump_callback+0xb8>
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	2000      	movs	r0, #0
 801447a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801447e:	200b      	movs	r0, #11
 8014480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014484:	4670      	mov	r0, lr
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801448a:	4798      	blx	r3
 801448c:	4620      	mov	r0, r4
 801448e:	607c      	str	r4, [r7, #4]
 8014490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014494:	42ab      	cmp	r3, r5
 8014496:	d1cb      	bne.n	8014430 <rcl_clock_remove_jump_callback+0x40>
 8014498:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 801449c:	60bc      	str	r4, [r7, #8]
 801449e:	2c00      	cmp	r4, #0
 80144a0:	d1e1      	bne.n	8014466 <rcl_clock_remove_jump_callback+0x76>
 80144a2:	e7ef      	b.n	8014484 <rcl_clock_remove_jump_callback+0x94>
 80144a4:	200b      	movs	r0, #11
 80144a6:	4770      	bx	lr
 80144a8:	200a      	movs	r0, #10
 80144aa:	e7e9      	b.n	8014480 <rcl_clock_remove_jump_callback+0x90>

080144ac <_rcl_timer_time_jump>:
 80144ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b0:	4683      	mov	fp, r0
 80144b2:	4614      	mov	r4, r2
 80144b4:	b085      	sub	sp, #20
 80144b6:	b131      	cbz	r1, 80144c6 <_rcl_timer_time_jump+0x1a>
 80144b8:	7803      	ldrb	r3, [r0, #0]
 80144ba:	3b02      	subs	r3, #2
 80144bc:	2b01      	cmp	r3, #1
 80144be:	d940      	bls.n	8014542 <_rcl_timer_time_jump+0x96>
 80144c0:	b005      	add	sp, #20
 80144c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144c6:	6813      	ldr	r3, [r2, #0]
 80144c8:	a902      	add	r1, sp, #8
 80144ca:	6818      	ldr	r0, [r3, #0]
 80144cc:	f7ff ff22 	bl	8014314 <rcl_clock_get_now>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d1f5      	bne.n	80144c0 <_rcl_timer_time_jump+0x14>
 80144d4:	6820      	ldr	r0, [r4, #0]
 80144d6:	2105      	movs	r1, #5
 80144d8:	3020      	adds	r0, #32
 80144da:	f001 f989 	bl	80157f0 <__atomic_load_8>
 80144de:	460b      	mov	r3, r1
 80144e0:	4680      	mov	r8, r0
 80144e2:	6820      	ldr	r0, [r4, #0]
 80144e4:	2105      	movs	r1, #5
 80144e6:	3028      	adds	r0, #40	; 0x28
 80144e8:	4699      	mov	r9, r3
 80144ea:	f001 f981 	bl	80157f0 <__atomic_load_8>
 80144ee:	460b      	mov	r3, r1
 80144f0:	4606      	mov	r6, r0
 80144f2:	6820      	ldr	r0, [r4, #0]
 80144f4:	2105      	movs	r1, #5
 80144f6:	3018      	adds	r0, #24
 80144f8:	461f      	mov	r7, r3
 80144fa:	f001 f979 	bl	80157f0 <__atomic_load_8>
 80144fe:	f89b 3000 	ldrb.w	r3, [fp]
 8014502:	4605      	mov	r5, r0
 8014504:	3b02      	subs	r3, #2
 8014506:	2b01      	cmp	r3, #1
 8014508:	468a      	mov	sl, r1
 801450a:	d937      	bls.n	801457c <_rcl_timer_time_jump+0xd0>
 801450c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014510:	42b0      	cmp	r0, r6
 8014512:	eb71 0307 	sbcs.w	r3, r1, r7
 8014516:	da5f      	bge.n	80145d8 <_rcl_timer_time_jump+0x12c>
 8014518:	4540      	cmp	r0, r8
 801451a:	eb71 0309 	sbcs.w	r3, r1, r9
 801451e:	dacf      	bge.n	80144c0 <_rcl_timer_time_jump+0x14>
 8014520:	2605      	movs	r6, #5
 8014522:	182a      	adds	r2, r5, r0
 8014524:	6820      	ldr	r0, [r4, #0]
 8014526:	eb4a 0301 	adc.w	r3, sl, r1
 801452a:	9600      	str	r6, [sp, #0]
 801452c:	3028      	adds	r0, #40	; 0x28
 801452e:	f001 f993 	bl	8015858 <__atomic_store_8>
 8014532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014536:	6820      	ldr	r0, [r4, #0]
 8014538:	9600      	str	r6, [sp, #0]
 801453a:	3020      	adds	r0, #32
 801453c:	f001 f98c 	bl	8015858 <__atomic_store_8>
 8014540:	e7be      	b.n	80144c0 <_rcl_timer_time_jump+0x14>
 8014542:	6813      	ldr	r3, [r2, #0]
 8014544:	a902      	add	r1, sp, #8
 8014546:	6818      	ldr	r0, [r3, #0]
 8014548:	f7ff fee4 	bl	8014314 <rcl_clock_get_now>
 801454c:	2800      	cmp	r0, #0
 801454e:	d1b7      	bne.n	80144c0 <_rcl_timer_time_jump+0x14>
 8014550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014554:	4313      	orrs	r3, r2
 8014556:	d0b3      	beq.n	80144c0 <_rcl_timer_time_jump+0x14>
 8014558:	6820      	ldr	r0, [r4, #0]
 801455a:	2105      	movs	r1, #5
 801455c:	3028      	adds	r0, #40	; 0x28
 801455e:	f001 f947 	bl	80157f0 <__atomic_load_8>
 8014562:	2505      	movs	r5, #5
 8014564:	9a02      	ldr	r2, [sp, #8]
 8014566:	6824      	ldr	r4, [r4, #0]
 8014568:	9b03      	ldr	r3, [sp, #12]
 801456a:	1a82      	subs	r2, r0, r2
 801456c:	eb61 0303 	sbc.w	r3, r1, r3
 8014570:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8014574:	9500      	str	r5, [sp, #0]
 8014576:	f001 f96f 	bl	8015858 <__atomic_store_8>
 801457a:	e7a1      	b.n	80144c0 <_rcl_timer_time_jump+0x14>
 801457c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014580:	4313      	orrs	r3, r2
 8014582:	d09d      	beq.n	80144c0 <_rcl_timer_time_jump+0x14>
 8014584:	f04f 0805 	mov.w	r8, #5
 8014588:	6820      	ldr	r0, [r4, #0]
 801458a:	2300      	movs	r3, #0
 801458c:	2200      	movs	r2, #0
 801458e:	f8cd 8000 	str.w	r8, [sp]
 8014592:	3030      	adds	r0, #48	; 0x30
 8014594:	f001 f994 	bl	80158c0 <__atomic_exchange_8>
 8014598:	4606      	mov	r6, r0
 801459a:	460f      	mov	r7, r1
 801459c:	ea56 0307 	orrs.w	r3, r6, r7
 80145a0:	d08e      	beq.n	80144c0 <_rcl_timer_time_jump+0x14>
 80145a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80145a6:	1a12      	subs	r2, r2, r0
 80145a8:	6820      	ldr	r0, [r4, #0]
 80145aa:	eb63 0301 	sbc.w	r3, r3, r1
 80145ae:	1952      	adds	r2, r2, r5
 80145b0:	eb43 030a 	adc.w	r3, r3, sl
 80145b4:	f8cd 8000 	str.w	r8, [sp]
 80145b8:	3028      	adds	r0, #40	; 0x28
 80145ba:	f001 f94d 	bl	8015858 <__atomic_store_8>
 80145be:	9a02      	ldr	r2, [sp, #8]
 80145c0:	6820      	ldr	r0, [r4, #0]
 80145c2:	9b03      	ldr	r3, [sp, #12]
 80145c4:	1b92      	subs	r2, r2, r6
 80145c6:	f100 0020 	add.w	r0, r0, #32
 80145ca:	f8cd 8000 	str.w	r8, [sp]
 80145ce:	eb63 0307 	sbc.w	r3, r3, r7
 80145d2:	f001 f941 	bl	8015858 <__atomic_store_8>
 80145d6:	e773      	b.n	80144c0 <_rcl_timer_time_jump+0x14>
 80145d8:	6820      	ldr	r0, [r4, #0]
 80145da:	3008      	adds	r0, #8
 80145dc:	f002 ff9c 	bl	8017518 <rcl_trigger_guard_condition>
 80145e0:	e76e      	b.n	80144c0 <_rcl_timer_time_jump+0x14>
 80145e2:	bf00      	nop

080145e4 <rcl_get_zero_initialized_timer>:
 80145e4:	4b01      	ldr	r3, [pc, #4]	; (80145ec <rcl_get_zero_initialized_timer+0x8>)
 80145e6:	6818      	ldr	r0, [r3, #0]
 80145e8:	4770      	bx	lr
 80145ea:	bf00      	nop
 80145ec:	0801a324 	.word	0x0801a324

080145f0 <rcl_timer_init>:
 80145f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145f4:	b0ab      	sub	sp, #172	; 0xac
 80145f6:	4604      	mov	r4, r0
 80145f8:	a837      	add	r0, sp, #220	; 0xdc
 80145fa:	460d      	mov	r5, r1
 80145fc:	4617      	mov	r7, r2
 80145fe:	f7f6 fe27 	bl	800b250 <rcutils_allocator_is_valid>
 8014602:	2800      	cmp	r0, #0
 8014604:	d06a      	beq.n	80146dc <rcl_timer_init+0xec>
 8014606:	2c00      	cmp	r4, #0
 8014608:	d068      	beq.n	80146dc <rcl_timer_init+0xec>
 801460a:	2d00      	cmp	r5, #0
 801460c:	d066      	beq.n	80146dc <rcl_timer_init+0xec>
 801460e:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 8014612:	2a00      	cmp	r2, #0
 8014614:	f173 0300 	sbcs.w	r3, r3, #0
 8014618:	db60      	blt.n	80146dc <rcl_timer_init+0xec>
 801461a:	6823      	ldr	r3, [r4, #0]
 801461c:	b123      	cbz	r3, 8014628 <rcl_timer_init+0x38>
 801461e:	2664      	movs	r6, #100	; 0x64
 8014620:	4630      	mov	r0, r6
 8014622:	b02b      	add	sp, #172	; 0xac
 8014624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014628:	4628      	mov	r0, r5
 801462a:	a908      	add	r1, sp, #32
 801462c:	f7ff fe72 	bl	8014314 <rcl_clock_get_now>
 8014630:	4606      	mov	r6, r0
 8014632:	2800      	cmp	r0, #0
 8014634:	d1f4      	bne.n	8014620 <rcl_timer_init+0x30>
 8014636:	f10d 0b18 	add.w	fp, sp, #24
 801463a:	ae0b      	add	r6, sp, #44	; 0x2c
 801463c:	4658      	mov	r0, fp
 801463e:	f10d 0a60 	add.w	sl, sp, #96	; 0x60
 8014642:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
 8014646:	f002 fe75 	bl	8017334 <rcl_get_zero_initialized_guard_condition>
 801464a:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801464e:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014652:	4630      	mov	r0, r6
 8014654:	f002 ff48 	bl	80174e8 <rcl_guard_condition_get_default_options>
 8014658:	ab0d      	add	r3, sp, #52	; 0x34
 801465a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801465e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014662:	4639      	mov	r1, r7
 8014664:	e896 000c 	ldmia.w	r6, {r2, r3}
 8014668:	4650      	mov	r0, sl
 801466a:	f002 fe6d 	bl	8017348 <rcl_guard_condition_init>
 801466e:	4606      	mov	r6, r0
 8014670:	2800      	cmp	r0, #0
 8014672:	d1d5      	bne.n	8014620 <rcl_timer_init+0x30>
 8014674:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014676:	781f      	ldrb	r7, [r3, #0]
 8014678:	2f01      	cmp	r7, #1
 801467a:	d034      	beq.n	80146e6 <rcl_timer_init+0xf6>
 801467c:	9b08      	ldr	r3, [sp, #32]
 801467e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8014680:	af37      	add	r7, sp, #220	; 0xdc
 8014682:	eb13 0802 	adds.w	r8, r3, r2
 8014686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014688:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801468a:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 801468e:	eb43 0902 	adc.w	r9, r3, r2
 8014692:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801469c:	f04f 0e00 	mov.w	lr, #0
 80146a0:	921a      	str	r2, [sp, #104]	; 0x68
 80146a2:	2100      	movs	r1, #0
 80146a4:	f8cc 3000 	str.w	r3, [ip]
 80146a8:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	; 0xd0
 80146ac:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 80146b0:	2200      	movs	r2, #0
 80146b2:	4603      	mov	r3, r0
 80146b4:	e9cd 1222 	strd	r1, r2, [sp, #136]	; 0x88
 80146b8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80146bc:	2050      	movs	r0, #80	; 0x50
 80146be:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
 80146c2:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 80146c6:	993b      	ldr	r1, [sp, #236]	; 0xec
 80146c8:	f88d e090 	strb.w	lr, [sp, #144]	; 0x90
 80146cc:	4798      	blx	r3
 80146ce:	6020      	str	r0, [r4, #0]
 80146d0:	b358      	cbz	r0, 801472a <rcl_timer_init+0x13a>
 80146d2:	2250      	movs	r2, #80	; 0x50
 80146d4:	a916      	add	r1, sp, #88	; 0x58
 80146d6:	f002 fff5 	bl	80176c4 <memcpy>
 80146da:	e7a1      	b.n	8014620 <rcl_timer_init+0x30>
 80146dc:	260b      	movs	r6, #11
 80146de:	4630      	mov	r0, r6
 80146e0:	b02b      	add	sp, #172	; 0xac
 80146e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e6:	2001      	movs	r0, #1
 80146e8:	2100      	movs	r1, #0
 80146ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146f2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80146f6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80146fa:	f8df c044 	ldr.w	ip, [pc, #68]	; 8014740 <rcl_timer_init+0x150>
 80146fe:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
 8014702:	9405      	str	r4, [sp, #20]
 8014704:	ab12      	add	r3, sp, #72	; 0x48
 8014706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014708:	f8cd c010 	str.w	ip, [sp, #16]
 801470c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014714:	4628      	mov	r0, r5
 8014716:	f7ff fe09 	bl	801432c <rcl_clock_add_jump_callback>
 801471a:	4607      	mov	r7, r0
 801471c:	2800      	cmp	r0, #0
 801471e:	d0ad      	beq.n	801467c <rcl_timer_init+0x8c>
 8014720:	4650      	mov	r0, sl
 8014722:	f002 febf 	bl	80174a4 <rcl_guard_condition_fini>
 8014726:	463e      	mov	r6, r7
 8014728:	e77a      	b.n	8014620 <rcl_timer_init+0x30>
 801472a:	4650      	mov	r0, sl
 801472c:	f002 feba 	bl	80174a4 <rcl_guard_condition_fini>
 8014730:	4622      	mov	r2, r4
 8014732:	4628      	mov	r0, r5
 8014734:	4902      	ldr	r1, [pc, #8]	; (8014740 <rcl_timer_init+0x150>)
 8014736:	f7ff fe5b 	bl	80143f0 <rcl_clock_remove_jump_callback>
 801473a:	260a      	movs	r6, #10
 801473c:	e770      	b.n	8014620 <rcl_timer_init+0x30>
 801473e:	bf00      	nop
 8014740:	080144ad 	.word	0x080144ad

08014744 <rcl_timer_call>:
 8014744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014748:	b08b      	sub	sp, #44	; 0x2c
 801474a:	2800      	cmp	r0, #0
 801474c:	d070      	beq.n	8014830 <rcl_timer_call+0xec>
 801474e:	6803      	ldr	r3, [r0, #0]
 8014750:	f3bf 8f5b 	dmb	ish
 8014754:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014758:	4604      	mov	r4, r0
 801475a:	f3bf 8f5b 	dmb	ish
 801475e:	2b00      	cmp	r3, #0
 8014760:	d15b      	bne.n	801481a <rcl_timer_call+0xd6>
 8014762:	6803      	ldr	r3, [r0, #0]
 8014764:	a908      	add	r1, sp, #32
 8014766:	6818      	ldr	r0, [r3, #0]
 8014768:	f7ff fdd4 	bl	8014314 <rcl_clock_get_now>
 801476c:	4605      	mov	r5, r0
 801476e:	2800      	cmp	r0, #0
 8014770:	d14f      	bne.n	8014812 <rcl_timer_call+0xce>
 8014772:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014776:	2a00      	cmp	r2, #0
 8014778:	f173 0100 	sbcs.w	r1, r3, #0
 801477c:	db53      	blt.n	8014826 <rcl_timer_call+0xe2>
 801477e:	2605      	movs	r6, #5
 8014780:	6820      	ldr	r0, [r4, #0]
 8014782:	9600      	str	r6, [sp, #0]
 8014784:	3020      	adds	r0, #32
 8014786:	f001 f89b 	bl	80158c0 <__atomic_exchange_8>
 801478a:	6822      	ldr	r2, [r4, #0]
 801478c:	f3bf 8f5b 	dmb	ish
 8014790:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8014794:	f3bf 8f5b 	dmb	ish
 8014798:	460b      	mov	r3, r1
 801479a:	4682      	mov	sl, r0
 801479c:	6820      	ldr	r0, [r4, #0]
 801479e:	4631      	mov	r1, r6
 80147a0:	3028      	adds	r0, #40	; 0x28
 80147a2:	9305      	str	r3, [sp, #20]
 80147a4:	f001 f824 	bl	80157f0 <__atomic_load_8>
 80147a8:	4603      	mov	r3, r0
 80147aa:	460a      	mov	r2, r1
 80147ac:	6820      	ldr	r0, [r4, #0]
 80147ae:	4631      	mov	r1, r6
 80147b0:	3018      	adds	r0, #24
 80147b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80147b6:	f001 f81b 	bl	80157f0 <__atomic_load_8>
 80147ba:	4684      	mov	ip, r0
 80147bc:	468e      	mov	lr, r1
 80147be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80147c2:	9b04      	ldr	r3, [sp, #16]
 80147c4:	9a03      	ldr	r2, [sp, #12]
 80147c6:	eb13 080c 	adds.w	r8, r3, ip
 80147ca:	eb42 090e 	adc.w	r9, r2, lr
 80147ce:	4580      	cmp	r8, r0
 80147d0:	eb79 0301 	sbcs.w	r3, r9, r1
 80147d4:	4666      	mov	r6, ip
 80147d6:	4677      	mov	r7, lr
 80147d8:	460a      	mov	r2, r1
 80147da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80147de:	da04      	bge.n	80147ea <rcl_timer_call+0xa6>
 80147e0:	ea56 0307 	orrs.w	r3, r6, r7
 80147e4:	d129      	bne.n	801483a <rcl_timer_call+0xf6>
 80147e6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80147ea:	2105      	movs	r1, #5
 80147ec:	6820      	ldr	r0, [r4, #0]
 80147ee:	4642      	mov	r2, r8
 80147f0:	464b      	mov	r3, r9
 80147f2:	9100      	str	r1, [sp, #0]
 80147f4:	3028      	adds	r0, #40	; 0x28
 80147f6:	f001 f82f 	bl	8015858 <__atomic_store_8>
 80147fa:	f1bb 0f00 	cmp.w	fp, #0
 80147fe:	d008      	beq.n	8014812 <rcl_timer_call+0xce>
 8014800:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014804:	9905      	ldr	r1, [sp, #20]
 8014806:	ebb2 020a 	subs.w	r2, r2, sl
 801480a:	4620      	mov	r0, r4
 801480c:	eb63 0301 	sbc.w	r3, r3, r1
 8014810:	47d8      	blx	fp
 8014812:	4628      	mov	r0, r5
 8014814:	b00b      	add	sp, #44	; 0x2c
 8014816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801481a:	f240 3521 	movw	r5, #801	; 0x321
 801481e:	4628      	mov	r0, r5
 8014820:	b00b      	add	sp, #44	; 0x2c
 8014822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014826:	2501      	movs	r5, #1
 8014828:	4628      	mov	r0, r5
 801482a:	b00b      	add	sp, #44	; 0x2c
 801482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014830:	250b      	movs	r5, #11
 8014832:	4628      	mov	r0, r5
 8014834:	b00b      	add	sp, #44	; 0x2c
 8014836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801483a:	ebb0 0008 	subs.w	r0, r0, r8
 801483e:	eb62 0109 	sbc.w	r1, r2, r9
 8014842:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8014846:	4673      	mov	r3, lr
 8014848:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 801484c:	4662      	mov	r2, ip
 801484e:	f7eb ff85 	bl	800075c <__aeabi_ldivmod>
 8014852:	fb00 7307 	mla	r3, r0, r7, r7
 8014856:	3001      	adds	r0, #1
 8014858:	f141 0100 	adc.w	r1, r1, #0
 801485c:	fb06 3101 	mla	r1, r6, r1, r3
 8014860:	fba0 6706 	umull	r6, r7, r0, r6
 8014864:	440f      	add	r7, r1
 8014866:	eb18 0806 	adds.w	r8, r8, r6
 801486a:	eb49 0907 	adc.w	r9, r9, r7
 801486e:	e7bc      	b.n	80147ea <rcl_timer_call+0xa6>

08014870 <rcl_timer_is_ready>:
 8014870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014874:	b082      	sub	sp, #8
 8014876:	b310      	cbz	r0, 80148be <rcl_timer_is_ready+0x4e>
 8014878:	4688      	mov	r8, r1
 801487a:	b301      	cbz	r1, 80148be <rcl_timer_is_ready+0x4e>
 801487c:	6803      	ldr	r3, [r0, #0]
 801487e:	4604      	mov	r4, r0
 8014880:	4669      	mov	r1, sp
 8014882:	6818      	ldr	r0, [r3, #0]
 8014884:	f7ff fd46 	bl	8014314 <rcl_clock_get_now>
 8014888:	4605      	mov	r5, r0
 801488a:	b118      	cbz	r0, 8014894 <rcl_timer_is_ready+0x24>
 801488c:	4628      	mov	r0, r5
 801488e:	b002      	add	sp, #8
 8014890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014894:	6820      	ldr	r0, [r4, #0]
 8014896:	2105      	movs	r1, #5
 8014898:	3028      	adds	r0, #40	; 0x28
 801489a:	f000 ffa9 	bl	80157f0 <__atomic_load_8>
 801489e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80148a2:	1ac6      	subs	r6, r0, r3
 80148a4:	eb61 0702 	sbc.w	r7, r1, r2
 80148a8:	2e01      	cmp	r6, #1
 80148aa:	f177 0300 	sbcs.w	r3, r7, #0
 80148ae:	db0b      	blt.n	80148c8 <rcl_timer_is_ready+0x58>
 80148b0:	462b      	mov	r3, r5
 80148b2:	4628      	mov	r0, r5
 80148b4:	f888 3000 	strb.w	r3, [r8]
 80148b8:	b002      	add	sp, #8
 80148ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148be:	250b      	movs	r5, #11
 80148c0:	4628      	mov	r0, r5
 80148c2:	b002      	add	sp, #8
 80148c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148c8:	6823      	ldr	r3, [r4, #0]
 80148ca:	f3bf 8f5b 	dmb	ish
 80148ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80148d2:	f3bf 8f5b 	dmb	ish
 80148d6:	fab3 f383 	clz	r3, r3
 80148da:	095b      	lsrs	r3, r3, #5
 80148dc:	e7e9      	b.n	80148b2 <rcl_timer_is_ready+0x42>
 80148de:	bf00      	nop

080148e0 <rcl_timer_get_time_until_next_call>:
 80148e0:	b570      	push	{r4, r5, r6, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	b1d8      	cbz	r0, 801491e <rcl_timer_get_time_until_next_call+0x3e>
 80148e6:	460d      	mov	r5, r1
 80148e8:	b1c9      	cbz	r1, 801491e <rcl_timer_get_time_until_next_call+0x3e>
 80148ea:	6803      	ldr	r3, [r0, #0]
 80148ec:	4604      	mov	r4, r0
 80148ee:	4669      	mov	r1, sp
 80148f0:	6818      	ldr	r0, [r3, #0]
 80148f2:	f7ff fd0f 	bl	8014314 <rcl_clock_get_now>
 80148f6:	4606      	mov	r6, r0
 80148f8:	b110      	cbz	r0, 8014900 <rcl_timer_get_time_until_next_call+0x20>
 80148fa:	4630      	mov	r0, r6
 80148fc:	b002      	add	sp, #8
 80148fe:	bd70      	pop	{r4, r5, r6, pc}
 8014900:	6820      	ldr	r0, [r4, #0]
 8014902:	2105      	movs	r1, #5
 8014904:	3028      	adds	r0, #40	; 0x28
 8014906:	f000 ff73 	bl	80157f0 <__atomic_load_8>
 801490a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801490e:	1ac0      	subs	r0, r0, r3
 8014910:	eb61 0102 	sbc.w	r1, r1, r2
 8014914:	e9c5 0100 	strd	r0, r1, [r5]
 8014918:	4630      	mov	r0, r6
 801491a:	b002      	add	sp, #8
 801491c:	bd70      	pop	{r4, r5, r6, pc}
 801491e:	260b      	movs	r6, #11
 8014920:	4630      	mov	r0, r6
 8014922:	b002      	add	sp, #8
 8014924:	bd70      	pop	{r4, r5, r6, pc}
 8014926:	bf00      	nop

08014928 <rcl_timer_is_canceled>:
 8014928:	b168      	cbz	r0, 8014946 <rcl_timer_is_canceled+0x1e>
 801492a:	b161      	cbz	r1, 8014946 <rcl_timer_is_canceled+0x1e>
 801492c:	6803      	ldr	r3, [r0, #0]
 801492e:	f3bf 8f5b 	dmb	ish
 8014932:	2000      	movs	r0, #0
 8014934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014938:	f3bf 8f5b 	dmb	ish
 801493c:	1a1b      	subs	r3, r3, r0
 801493e:	bf18      	it	ne
 8014940:	2301      	movne	r3, #1
 8014942:	700b      	strb	r3, [r1, #0]
 8014944:	4770      	bx	lr
 8014946:	200b      	movs	r0, #11
 8014948:	4770      	bx	lr
 801494a:	bf00      	nop

0801494c <rcl_timer_get_guard_condition>:
 801494c:	b130      	cbz	r0, 801495c <rcl_timer_get_guard_condition+0x10>
 801494e:	6800      	ldr	r0, [r0, #0]
 8014950:	b120      	cbz	r0, 801495c <rcl_timer_get_guard_condition+0x10>
 8014952:	68c3      	ldr	r3, [r0, #12]
 8014954:	b10b      	cbz	r3, 801495a <rcl_timer_get_guard_condition+0xe>
 8014956:	3008      	adds	r0, #8
 8014958:	4770      	bx	lr
 801495a:	4618      	mov	r0, r3
 801495c:	4770      	bx	lr
 801495e:	bf00      	nop

08014960 <rcl_validate_enclave_name_with_size>:
 8014960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014962:	b0c3      	sub	sp, #268	; 0x10c
 8014964:	b1d0      	cbz	r0, 801499c <rcl_validate_enclave_name_with_size+0x3c>
 8014966:	4615      	mov	r5, r2
 8014968:	b1c2      	cbz	r2, 801499c <rcl_validate_enclave_name_with_size+0x3c>
 801496a:	461f      	mov	r7, r3
 801496c:	466a      	mov	r2, sp
 801496e:	ab01      	add	r3, sp, #4
 8014970:	460e      	mov	r6, r1
 8014972:	f001 f987 	bl	8015c84 <rmw_validate_namespace_with_size>
 8014976:	4604      	mov	r4, r0
 8014978:	b9e0      	cbnz	r0, 80149b4 <rcl_validate_enclave_name_with_size+0x54>
 801497a:	9b00      	ldr	r3, [sp, #0]
 801497c:	b923      	cbnz	r3, 8014988 <rcl_validate_enclave_name_with_size+0x28>
 801497e:	2300      	movs	r3, #0
 8014980:	602b      	str	r3, [r5, #0]
 8014982:	4620      	mov	r0, r4
 8014984:	b043      	add	sp, #268	; 0x10c
 8014986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014988:	2b07      	cmp	r3, #7
 801498a:	d00b      	beq.n	80149a4 <rcl_validate_enclave_name_with_size+0x44>
 801498c:	1e5a      	subs	r2, r3, #1
 801498e:	2a05      	cmp	r2, #5
 8014990:	d82e      	bhi.n	80149f0 <rcl_validate_enclave_name_with_size+0x90>
 8014992:	e8df f002 	tbb	[pc, r2]
 8014996:	211e      	.short	0x211e
 8014998:	152a2724 	.word	0x152a2724
 801499c:	240b      	movs	r4, #11
 801499e:	4620      	mov	r0, r4
 80149a0:	b043      	add	sp, #268	; 0x10c
 80149a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149a4:	2eff      	cmp	r6, #255	; 0xff
 80149a6:	d9ea      	bls.n	801497e <rcl_validate_enclave_name_with_size+0x1e>
 80149a8:	602b      	str	r3, [r5, #0]
 80149aa:	2f00      	cmp	r7, #0
 80149ac:	d0e9      	beq.n	8014982 <rcl_validate_enclave_name_with_size+0x22>
 80149ae:	23fe      	movs	r3, #254	; 0xfe
 80149b0:	603b      	str	r3, [r7, #0]
 80149b2:	e7e6      	b.n	8014982 <rcl_validate_enclave_name_with_size+0x22>
 80149b4:	f7fe fdb0 	bl	8013518 <rcl_convert_rmw_ret_to_rcl_ret>
 80149b8:	4604      	mov	r4, r0
 80149ba:	4620      	mov	r0, r4
 80149bc:	b043      	add	sp, #268	; 0x10c
 80149be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c0:	2306      	movs	r3, #6
 80149c2:	602b      	str	r3, [r5, #0]
 80149c4:	2f00      	cmp	r7, #0
 80149c6:	d0dc      	beq.n	8014982 <rcl_validate_enclave_name_with_size+0x22>
 80149c8:	4620      	mov	r0, r4
 80149ca:	9b01      	ldr	r3, [sp, #4]
 80149cc:	603b      	str	r3, [r7, #0]
 80149ce:	b043      	add	sp, #268	; 0x10c
 80149d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149d2:	2301      	movs	r3, #1
 80149d4:	602b      	str	r3, [r5, #0]
 80149d6:	e7f5      	b.n	80149c4 <rcl_validate_enclave_name_with_size+0x64>
 80149d8:	2302      	movs	r3, #2
 80149da:	602b      	str	r3, [r5, #0]
 80149dc:	e7f2      	b.n	80149c4 <rcl_validate_enclave_name_with_size+0x64>
 80149de:	2303      	movs	r3, #3
 80149e0:	602b      	str	r3, [r5, #0]
 80149e2:	e7ef      	b.n	80149c4 <rcl_validate_enclave_name_with_size+0x64>
 80149e4:	2304      	movs	r3, #4
 80149e6:	602b      	str	r3, [r5, #0]
 80149e8:	e7ec      	b.n	80149c4 <rcl_validate_enclave_name_with_size+0x64>
 80149ea:	2305      	movs	r3, #5
 80149ec:	602b      	str	r3, [r5, #0]
 80149ee:	e7e9      	b.n	80149c4 <rcl_validate_enclave_name_with_size+0x64>
 80149f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80149f4:	4a02      	ldr	r2, [pc, #8]	; (8014a00 <rcl_validate_enclave_name_with_size+0xa0>)
 80149f6:	a802      	add	r0, sp, #8
 80149f8:	f001 f8d0 	bl	8015b9c <rcutils_snprintf>
 80149fc:	2401      	movs	r4, #1
 80149fe:	e7c0      	b.n	8014982 <rcl_validate_enclave_name_with_size+0x22>
 8014a00:	0801a328 	.word	0x0801a328

08014a04 <rcl_validate_enclave_name>:
 8014a04:	b168      	cbz	r0, 8014a22 <rcl_validate_enclave_name+0x1e>
 8014a06:	b570      	push	{r4, r5, r6, lr}
 8014a08:	460d      	mov	r5, r1
 8014a0a:	4616      	mov	r6, r2
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	f7eb fc19 	bl	8000244 <strlen>
 8014a12:	4633      	mov	r3, r6
 8014a14:	4601      	mov	r1, r0
 8014a16:	462a      	mov	r2, r5
 8014a18:	4620      	mov	r0, r4
 8014a1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a1e:	f7ff bf9f 	b.w	8014960 <rcl_validate_enclave_name_with_size>
 8014a22:	200b      	movs	r0, #11
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop

08014a28 <rcl_validate_topic_name>:
 8014a28:	2800      	cmp	r0, #0
 8014a2a:	f000 808c 	beq.w	8014b46 <rcl_validate_topic_name+0x11e>
 8014a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a32:	460e      	mov	r6, r1
 8014a34:	2900      	cmp	r1, #0
 8014a36:	f000 808d 	beq.w	8014b54 <rcl_validate_topic_name+0x12c>
 8014a3a:	4617      	mov	r7, r2
 8014a3c:	4605      	mov	r5, r0
 8014a3e:	f7eb fc01 	bl	8000244 <strlen>
 8014a42:	b1b0      	cbz	r0, 8014a72 <rcl_validate_topic_name+0x4a>
 8014a44:	f895 9000 	ldrb.w	r9, [r5]
 8014a48:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8014bf0 <rcl_validate_topic_name+0x1c8>
 8014a4c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014a50:	f013 0304 	ands.w	r3, r3, #4
 8014a54:	d179      	bne.n	8014b4a <rcl_validate_topic_name+0x122>
 8014a56:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014a5a:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014a5e:	2a2f      	cmp	r2, #47	; 0x2f
 8014a60:	d10e      	bne.n	8014a80 <rcl_validate_topic_name+0x58>
 8014a62:	2202      	movs	r2, #2
 8014a64:	6032      	str	r2, [r6, #0]
 8014a66:	b377      	cbz	r7, 8014ac6 <rcl_validate_topic_name+0x9e>
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f8c7 8000 	str.w	r8, [r7]
 8014a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a72:	2301      	movs	r3, #1
 8014a74:	6033      	str	r3, [r6, #0]
 8014a76:	b337      	cbz	r7, 8014ac6 <rcl_validate_topic_name+0x9e>
 8014a78:	2000      	movs	r0, #0
 8014a7a:	6038      	str	r0, [r7, #0]
 8014a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a80:	461c      	mov	r4, r3
 8014a82:	4619      	mov	r1, r3
 8014a84:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8014a88:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8014a8c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014a90:	f1be 0f09 	cmp.w	lr, #9
 8014a94:	d947      	bls.n	8014b26 <rcl_validate_topic_name+0xfe>
 8014a96:	f022 0e20 	bic.w	lr, r2, #32
 8014a9a:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8014a9e:	f1be 0f19 	cmp.w	lr, #25
 8014aa2:	d940      	bls.n	8014b26 <rcl_validate_topic_name+0xfe>
 8014aa4:	2a5f      	cmp	r2, #95	; 0x5f
 8014aa6:	d015      	beq.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014aa8:	2a2f      	cmp	r2, #47	; 0x2f
 8014aaa:	d072      	beq.n	8014b92 <rcl_validate_topic_name+0x16a>
 8014aac:	2a7e      	cmp	r2, #126	; 0x7e
 8014aae:	d053      	beq.n	8014b58 <rcl_validate_topic_name+0x130>
 8014ab0:	2a7b      	cmp	r2, #123	; 0x7b
 8014ab2:	d00b      	beq.n	8014acc <rcl_validate_topic_name+0xa4>
 8014ab4:	2a7d      	cmp	r2, #125	; 0x7d
 8014ab6:	f040 808a 	bne.w	8014bce <rcl_validate_topic_name+0x1a6>
 8014aba:	2c00      	cmp	r4, #0
 8014abc:	d174      	bne.n	8014ba8 <rcl_validate_topic_name+0x180>
 8014abe:	2305      	movs	r3, #5
 8014ac0:	6033      	str	r3, [r6, #0]
 8014ac2:	b107      	cbz	r7, 8014ac6 <rcl_validate_topic_name+0x9e>
 8014ac4:	6039      	str	r1, [r7, #0]
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014acc:	2c00      	cmp	r4, #0
 8014ace:	d162      	bne.n	8014b96 <rcl_validate_topic_name+0x16e>
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	2401      	movs	r4, #1
 8014ad4:	3101      	adds	r1, #1
 8014ad6:	4288      	cmp	r0, r1
 8014ad8:	d1d6      	bne.n	8014a88 <rcl_validate_topic_name+0x60>
 8014ada:	2c00      	cmp	r4, #0
 8014adc:	d16c      	bne.n	8014bb8 <rcl_validate_topic_name+0x190>
 8014ade:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	f108 0401 	add.w	r4, r8, #1
 8014ae8:	d108      	bne.n	8014afc <rcl_validate_topic_name+0xd4>
 8014aea:	e044      	b.n	8014b76 <rcl_validate_topic_name+0x14e>
 8014aec:	2801      	cmp	r0, #1
 8014aee:	d05d      	beq.n	8014bac <rcl_validate_topic_name+0x184>
 8014af0:	461a      	mov	r2, r3
 8014af2:	4291      	cmp	r1, r2
 8014af4:	4618      	mov	r0, r3
 8014af6:	f105 0501 	add.w	r5, r5, #1
 8014afa:	d95a      	bls.n	8014bb2 <rcl_validate_topic_name+0x18a>
 8014afc:	4580      	cmp	r8, r0
 8014afe:	f100 0301 	add.w	r3, r0, #1
 8014b02:	d04d      	beq.n	8014ba0 <rcl_validate_topic_name+0x178>
 8014b04:	782a      	ldrb	r2, [r5, #0]
 8014b06:	2a2f      	cmp	r2, #47	; 0x2f
 8014b08:	d1f0      	bne.n	8014aec <rcl_validate_topic_name+0xc4>
 8014b0a:	786a      	ldrb	r2, [r5, #1]
 8014b0c:	1c43      	adds	r3, r0, #1
 8014b0e:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8014b12:	461a      	mov	r2, r3
 8014b14:	0740      	lsls	r0, r0, #29
 8014b16:	d5ec      	bpl.n	8014af2 <rcl_validate_topic_name+0xca>
 8014b18:	2304      	movs	r3, #4
 8014b1a:	6033      	str	r3, [r6, #0]
 8014b1c:	2f00      	cmp	r7, #0
 8014b1e:	d0d2      	beq.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014b20:	2000      	movs	r0, #0
 8014b22:	603a      	str	r2, [r7, #0]
 8014b24:	e7aa      	b.n	8014a7c <rcl_validate_topic_name+0x54>
 8014b26:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014b2a:	0752      	lsls	r2, r2, #29
 8014b2c:	d5d2      	bpl.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014b2e:	2c00      	cmp	r4, #0
 8014b30:	d0d0      	beq.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014b32:	2900      	cmp	r1, #0
 8014b34:	d0ce      	beq.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014b36:	1e4a      	subs	r2, r1, #1
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d1cb      	bne.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014b3c:	2309      	movs	r3, #9
 8014b3e:	6033      	str	r3, [r6, #0]
 8014b40:	2f00      	cmp	r7, #0
 8014b42:	d1bf      	bne.n	8014ac4 <rcl_validate_topic_name+0x9c>
 8014b44:	e7bf      	b.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014b46:	200b      	movs	r0, #11
 8014b48:	4770      	bx	lr
 8014b4a:	2304      	movs	r3, #4
 8014b4c:	6033      	str	r3, [r6, #0]
 8014b4e:	2f00      	cmp	r7, #0
 8014b50:	d192      	bne.n	8014a78 <rcl_validate_topic_name+0x50>
 8014b52:	e7b8      	b.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014b54:	200b      	movs	r0, #11
 8014b56:	e791      	b.n	8014a7c <rcl_validate_topic_name+0x54>
 8014b58:	2900      	cmp	r1, #0
 8014b5a:	d0bb      	beq.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014b5c:	2306      	movs	r3, #6
 8014b5e:	6033      	str	r3, [r6, #0]
 8014b60:	2f00      	cmp	r7, #0
 8014b62:	d1af      	bne.n	8014ac4 <rcl_validate_topic_name+0x9c>
 8014b64:	e7af      	b.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014b66:	2801      	cmp	r0, #1
 8014b68:	d03a      	beq.n	8014be0 <rcl_validate_topic_name+0x1b8>
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	4291      	cmp	r1, r2
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f105 0501 	add.w	r5, r5, #1
 8014b74:	d91d      	bls.n	8014bb2 <rcl_validate_topic_name+0x18a>
 8014b76:	4580      	cmp	r8, r0
 8014b78:	f100 0301 	add.w	r3, r0, #1
 8014b7c:	d023      	beq.n	8014bc6 <rcl_validate_topic_name+0x19e>
 8014b7e:	782a      	ldrb	r2, [r5, #0]
 8014b80:	2a2f      	cmp	r2, #47	; 0x2f
 8014b82:	d1f0      	bne.n	8014b66 <rcl_validate_topic_name+0x13e>
 8014b84:	786a      	ldrb	r2, [r5, #1]
 8014b86:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	0740      	lsls	r0, r0, #29
 8014b8e:	d5ed      	bpl.n	8014b6c <rcl_validate_topic_name+0x144>
 8014b90:	e7c2      	b.n	8014b18 <rcl_validate_topic_name+0xf0>
 8014b92:	2c00      	cmp	r4, #0
 8014b94:	d09e      	beq.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014b96:	2308      	movs	r3, #8
 8014b98:	6033      	str	r3, [r6, #0]
 8014b9a:	2f00      	cmp	r7, #0
 8014b9c:	d192      	bne.n	8014ac4 <rcl_validate_topic_name+0x9c>
 8014b9e:	e792      	b.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014ba0:	4622      	mov	r2, r4
 8014ba2:	f108 0301 	add.w	r3, r8, #1
 8014ba6:	e7a4      	b.n	8014af2 <rcl_validate_topic_name+0xca>
 8014ba8:	2400      	movs	r4, #0
 8014baa:	e793      	b.n	8014ad4 <rcl_validate_topic_name+0xac>
 8014bac:	2202      	movs	r2, #2
 8014bae:	4613      	mov	r3, r2
 8014bb0:	e79f      	b.n	8014af2 <rcl_validate_topic_name+0xca>
 8014bb2:	2000      	movs	r0, #0
 8014bb4:	6030      	str	r0, [r6, #0]
 8014bb6:	e761      	b.n	8014a7c <rcl_validate_topic_name+0x54>
 8014bb8:	2205      	movs	r2, #5
 8014bba:	6032      	str	r2, [r6, #0]
 8014bbc:	2f00      	cmp	r7, #0
 8014bbe:	d082      	beq.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014bc0:	2000      	movs	r0, #0
 8014bc2:	603b      	str	r3, [r7, #0]
 8014bc4:	e75a      	b.n	8014a7c <rcl_validate_topic_name+0x54>
 8014bc6:	4622      	mov	r2, r4
 8014bc8:	f108 0301 	add.w	r3, r8, #1
 8014bcc:	e7ce      	b.n	8014b6c <rcl_validate_topic_name+0x144>
 8014bce:	2c00      	cmp	r4, #0
 8014bd0:	bf14      	ite	ne
 8014bd2:	2308      	movne	r3, #8
 8014bd4:	2303      	moveq	r3, #3
 8014bd6:	6033      	str	r3, [r6, #0]
 8014bd8:	2f00      	cmp	r7, #0
 8014bda:	f47f af73 	bne.w	8014ac4 <rcl_validate_topic_name+0x9c>
 8014bde:	e772      	b.n	8014ac6 <rcl_validate_topic_name+0x9e>
 8014be0:	2307      	movs	r3, #7
 8014be2:	6033      	str	r3, [r6, #0]
 8014be4:	2f00      	cmp	r7, #0
 8014be6:	f43f af6e 	beq.w	8014ac6 <rcl_validate_topic_name+0x9e>
 8014bea:	6038      	str	r0, [r7, #0]
 8014bec:	2000      	movs	r0, #0
 8014bee:	e745      	b.n	8014a7c <rcl_validate_topic_name+0x54>
 8014bf0:	0801a755 	.word	0x0801a755

08014bf4 <rcl_get_zero_initialized_wait_set>:
 8014bf4:	b470      	push	{r4, r5, r6}
 8014bf6:	4604      	mov	r4, r0
 8014bf8:	4606      	mov	r6, r0
 8014bfa:	4d06      	ldr	r5, [pc, #24]	; (8014c14 <rcl_get_zero_initialized_wait_set+0x20>)
 8014bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c08:	682b      	ldr	r3, [r5, #0]
 8014c0a:	4630      	mov	r0, r6
 8014c0c:	6023      	str	r3, [r4, #0]
 8014c0e:	bc70      	pop	{r4, r5, r6}
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	0801a388 	.word	0x0801a388

08014c18 <rcl_wait_set_is_valid>:
 8014c18:	b118      	cbz	r0, 8014c22 <rcl_wait_set_is_valid+0xa>
 8014c1a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014c1c:	3800      	subs	r0, #0
 8014c1e:	bf18      	it	ne
 8014c20:	2001      	movne	r0, #1
 8014c22:	4770      	bx	lr

08014c24 <rcl_wait_set_fini>:
 8014c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c28:	b083      	sub	sp, #12
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	f000 8098 	beq.w	8014d60 <rcl_wait_set_fini+0x13c>
 8014c30:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8014c32:	4604      	mov	r4, r0
 8014c34:	2e00      	cmp	r6, #0
 8014c36:	f000 808f 	beq.w	8014d58 <rcl_wait_set_fini+0x134>
 8014c3a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8014c3c:	f001 fd44 	bl	80166c8 <rmw_destroy_wait_set>
 8014c40:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014c42:	1e06      	subs	r6, r0, #0
 8014c44:	bf18      	it	ne
 8014c46:	f44f 7661 	movne.w	r6, #900	; 0x384
 8014c4a:	2d00      	cmp	r5, #0
 8014c4c:	f000 8084 	beq.w	8014d58 <rcl_wait_set_fini+0x134>
 8014c50:	2700      	movs	r7, #0
 8014c52:	6820      	ldr	r0, [r4, #0]
 8014c54:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014c58:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8014c5c:	6067      	str	r7, [r4, #4]
 8014c5e:	602f      	str	r7, [r5, #0]
 8014c60:	b118      	cbz	r0, 8014c6a <rcl_wait_set_fini+0x46>
 8014c62:	4649      	mov	r1, r9
 8014c64:	47c0      	blx	r8
 8014c66:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014c68:	6027      	str	r7, [r4, #0]
 8014c6a:	68a8      	ldr	r0, [r5, #8]
 8014c6c:	b128      	cbz	r0, 8014c7a <rcl_wait_set_fini+0x56>
 8014c6e:	4649      	mov	r1, r9
 8014c70:	47c0      	blx	r8
 8014c72:	2300      	movs	r3, #0
 8014c74:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014c76:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8014c7a:	f04f 0800 	mov.w	r8, #0
 8014c7e:	68a0      	ldr	r0, [r4, #8]
 8014c80:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014c82:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014c84:	f8c4 800c 	str.w	r8, [r4, #12]
 8014c88:	f8c5 800c 	str.w	r8, [r5, #12]
 8014c8c:	b128      	cbz	r0, 8014c9a <rcl_wait_set_fini+0x76>
 8014c8e:	47b8      	blx	r7
 8014c90:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014c92:	f8c4 8008 	str.w	r8, [r4, #8]
 8014c96:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014c98:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014c9a:	f04f 0800 	mov.w	r8, #0
 8014c9e:	6968      	ldr	r0, [r5, #20]
 8014ca0:	f8c5 8010 	str.w	r8, [r5, #16]
 8014ca4:	b128      	cbz	r0, 8014cb2 <rcl_wait_set_fini+0x8e>
 8014ca6:	47b8      	blx	r7
 8014ca8:	f8c5 8014 	str.w	r8, [r5, #20]
 8014cac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014cae:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014cb0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014cb2:	f04f 0800 	mov.w	r8, #0
 8014cb6:	6920      	ldr	r0, [r4, #16]
 8014cb8:	f8c4 8014 	str.w	r8, [r4, #20]
 8014cbc:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8014cc0:	b128      	cbz	r0, 8014cce <rcl_wait_set_fini+0xaa>
 8014cc2:	47b8      	blx	r7
 8014cc4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014cc6:	f8c4 8010 	str.w	r8, [r4, #16]
 8014cca:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8014ccc:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014cce:	f04f 0800 	mov.w	r8, #0
 8014cd2:	69a0      	ldr	r0, [r4, #24]
 8014cd4:	f8c4 801c 	str.w	r8, [r4, #28]
 8014cd8:	f8c5 8018 	str.w	r8, [r5, #24]
 8014cdc:	b128      	cbz	r0, 8014cea <rcl_wait_set_fini+0xc6>
 8014cde:	9101      	str	r1, [sp, #4]
 8014ce0:	47b8      	blx	r7
 8014ce2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014ce4:	9901      	ldr	r1, [sp, #4]
 8014ce6:	f8c4 8018 	str.w	r8, [r4, #24]
 8014cea:	6a28      	ldr	r0, [r5, #32]
 8014cec:	b120      	cbz	r0, 8014cf8 <rcl_wait_set_fini+0xd4>
 8014cee:	47b8      	blx	r7
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014cf4:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014cf8:	2700      	movs	r7, #0
 8014cfa:	6a20      	ldr	r0, [r4, #32]
 8014cfc:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014d00:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8014d04:	6267      	str	r7, [r4, #36]	; 0x24
 8014d06:	626f      	str	r7, [r5, #36]	; 0x24
 8014d08:	b118      	cbz	r0, 8014d12 <rcl_wait_set_fini+0xee>
 8014d0a:	4649      	mov	r1, r9
 8014d0c:	47c0      	blx	r8
 8014d0e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014d10:	6227      	str	r7, [r4, #32]
 8014d12:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8014d14:	b128      	cbz	r0, 8014d22 <rcl_wait_set_fini+0xfe>
 8014d16:	4649      	mov	r1, r9
 8014d18:	47c0      	blx	r8
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014d1e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8014d22:	2700      	movs	r7, #0
 8014d24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014d26:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014d2a:	f8d5 9058 	ldr.w	r9, [r5, #88]	; 0x58
 8014d2e:	62e7      	str	r7, [r4, #44]	; 0x2c
 8014d30:	632f      	str	r7, [r5, #48]	; 0x30
 8014d32:	b118      	cbz	r0, 8014d3c <rcl_wait_set_fini+0x118>
 8014d34:	4649      	mov	r1, r9
 8014d36:	47c0      	blx	r8
 8014d38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014d3a:	62a7      	str	r7, [r4, #40]	; 0x28
 8014d3c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8014d3e:	b128      	cbz	r0, 8014d4c <rcl_wait_set_fini+0x128>
 8014d40:	4649      	mov	r1, r9
 8014d42:	47c0      	blx	r8
 8014d44:	2300      	movs	r3, #0
 8014d46:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014d48:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8014d4c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014d4e:	4628      	mov	r0, r5
 8014d50:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014d52:	4798      	blx	r3
 8014d54:	2300      	movs	r3, #0
 8014d56:	6323      	str	r3, [r4, #48]	; 0x30
 8014d58:	4630      	mov	r0, r6
 8014d5a:	b003      	add	sp, #12
 8014d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d60:	260b      	movs	r6, #11
 8014d62:	4630      	mov	r0, r6
 8014d64:	b003      	add	sp, #12
 8014d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d6a:	bf00      	nop

08014d6c <rcl_wait_set_add_subscription>:
 8014d6c:	b320      	cbz	r0, 8014db8 <rcl_wait_set_add_subscription+0x4c>
 8014d6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014d70:	b570      	push	{r4, r5, r6, lr}
 8014d72:	4604      	mov	r4, r0
 8014d74:	b1d3      	cbz	r3, 8014dac <rcl_wait_set_add_subscription+0x40>
 8014d76:	b319      	cbz	r1, 8014dc0 <rcl_wait_set_add_subscription+0x54>
 8014d78:	681d      	ldr	r5, [r3, #0]
 8014d7a:	6860      	ldr	r0, [r4, #4]
 8014d7c:	4285      	cmp	r5, r0
 8014d7e:	d218      	bcs.n	8014db2 <rcl_wait_set_add_subscription+0x46>
 8014d80:	6820      	ldr	r0, [r4, #0]
 8014d82:	1c6e      	adds	r6, r5, #1
 8014d84:	601e      	str	r6, [r3, #0]
 8014d86:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014d8a:	b102      	cbz	r2, 8014d8e <rcl_wait_set_add_subscription+0x22>
 8014d8c:	6015      	str	r5, [r2, #0]
 8014d8e:	4608      	mov	r0, r1
 8014d90:	f7f5 fd88 	bl	800a8a4 <rcl_subscription_get_rmw_handle>
 8014d94:	b190      	cbz	r0, 8014dbc <rcl_wait_set_add_subscription+0x50>
 8014d96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014d98:	6842      	ldr	r2, [r0, #4]
 8014d9a:	689b      	ldr	r3, [r3, #8]
 8014d9c:	2000      	movs	r0, #0
 8014d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014da2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014da4:	6853      	ldr	r3, [r2, #4]
 8014da6:	3301      	adds	r3, #1
 8014da8:	6053      	str	r3, [r2, #4]
 8014daa:	bd70      	pop	{r4, r5, r6, pc}
 8014dac:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014db0:	bd70      	pop	{r4, r5, r6, pc}
 8014db2:	f240 3086 	movw	r0, #902	; 0x386
 8014db6:	bd70      	pop	{r4, r5, r6, pc}
 8014db8:	200b      	movs	r0, #11
 8014dba:	4770      	bx	lr
 8014dbc:	2001      	movs	r0, #1
 8014dbe:	bd70      	pop	{r4, r5, r6, pc}
 8014dc0:	200b      	movs	r0, #11
 8014dc2:	bd70      	pop	{r4, r5, r6, pc}

08014dc4 <rcl_wait_set_clear>:
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	d074      	beq.n	8014eb2 <rcl_wait_set_clear+0xee>
 8014dc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014dca:	b510      	push	{r4, lr}
 8014dcc:	4604      	mov	r4, r0
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d071      	beq.n	8014eb6 <rcl_wait_set_clear+0xf2>
 8014dd2:	6800      	ldr	r0, [r0, #0]
 8014dd4:	b138      	cbz	r0, 8014de6 <rcl_wait_set_clear+0x22>
 8014dd6:	6862      	ldr	r2, [r4, #4]
 8014dd8:	2100      	movs	r1, #0
 8014dda:	0092      	lsls	r2, r2, #2
 8014ddc:	f002 fc9a 	bl	8017714 <memset>
 8014de0:	2200      	movs	r2, #0
 8014de2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014de4:	601a      	str	r2, [r3, #0]
 8014de6:	68a0      	ldr	r0, [r4, #8]
 8014de8:	b138      	cbz	r0, 8014dfa <rcl_wait_set_clear+0x36>
 8014dea:	68e2      	ldr	r2, [r4, #12]
 8014dec:	2100      	movs	r1, #0
 8014dee:	0092      	lsls	r2, r2, #2
 8014df0:	f002 fc90 	bl	8017714 <memset>
 8014df4:	2200      	movs	r2, #0
 8014df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014df8:	60da      	str	r2, [r3, #12]
 8014dfa:	69a0      	ldr	r0, [r4, #24]
 8014dfc:	b138      	cbz	r0, 8014e0e <rcl_wait_set_clear+0x4a>
 8014dfe:	69e2      	ldr	r2, [r4, #28]
 8014e00:	2100      	movs	r1, #0
 8014e02:	0092      	lsls	r2, r2, #2
 8014e04:	f002 fc86 	bl	8017714 <memset>
 8014e08:	2200      	movs	r2, #0
 8014e0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e0c:	619a      	str	r2, [r3, #24]
 8014e0e:	6a20      	ldr	r0, [r4, #32]
 8014e10:	b138      	cbz	r0, 8014e22 <rcl_wait_set_clear+0x5e>
 8014e12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014e14:	2100      	movs	r1, #0
 8014e16:	0092      	lsls	r2, r2, #2
 8014e18:	f002 fc7c 	bl	8017714 <memset>
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e20:	625a      	str	r2, [r3, #36]	; 0x24
 8014e22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014e24:	b138      	cbz	r0, 8014e36 <rcl_wait_set_clear+0x72>
 8014e26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014e28:	2100      	movs	r1, #0
 8014e2a:	0092      	lsls	r2, r2, #2
 8014e2c:	f002 fc72 	bl	8017714 <memset>
 8014e30:	2200      	movs	r2, #0
 8014e32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e34:	631a      	str	r2, [r3, #48]	; 0x30
 8014e36:	6920      	ldr	r0, [r4, #16]
 8014e38:	b138      	cbz	r0, 8014e4a <rcl_wait_set_clear+0x86>
 8014e3a:	6962      	ldr	r2, [r4, #20]
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	0092      	lsls	r2, r2, #2
 8014e40:	f002 fc68 	bl	8017714 <memset>
 8014e44:	2200      	movs	r2, #0
 8014e46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e48:	641a      	str	r2, [r3, #64]	; 0x40
 8014e4a:	6898      	ldr	r0, [r3, #8]
 8014e4c:	b138      	cbz	r0, 8014e5e <rcl_wait_set_clear+0x9a>
 8014e4e:	685a      	ldr	r2, [r3, #4]
 8014e50:	2100      	movs	r1, #0
 8014e52:	0092      	lsls	r2, r2, #2
 8014e54:	f002 fc5e 	bl	8017714 <memset>
 8014e58:	2200      	movs	r2, #0
 8014e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e5c:	605a      	str	r2, [r3, #4]
 8014e5e:	6958      	ldr	r0, [r3, #20]
 8014e60:	b138      	cbz	r0, 8014e72 <rcl_wait_set_clear+0xae>
 8014e62:	691a      	ldr	r2, [r3, #16]
 8014e64:	2100      	movs	r1, #0
 8014e66:	0092      	lsls	r2, r2, #2
 8014e68:	f002 fc54 	bl	8017714 <memset>
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e70:	611a      	str	r2, [r3, #16]
 8014e72:	6a18      	ldr	r0, [r3, #32]
 8014e74:	b138      	cbz	r0, 8014e86 <rcl_wait_set_clear+0xc2>
 8014e76:	69da      	ldr	r2, [r3, #28]
 8014e78:	2100      	movs	r1, #0
 8014e7a:	0092      	lsls	r2, r2, #2
 8014e7c:	f002 fc4a 	bl	8017714 <memset>
 8014e80:	2200      	movs	r2, #0
 8014e82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e84:	61da      	str	r2, [r3, #28]
 8014e86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014e88:	b138      	cbz	r0, 8014e9a <rcl_wait_set_clear+0xd6>
 8014e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	0092      	lsls	r2, r2, #2
 8014e90:	f002 fc40 	bl	8017714 <memset>
 8014e94:	2200      	movs	r2, #0
 8014e96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014e98:	629a      	str	r2, [r3, #40]	; 0x28
 8014e9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014e9c:	b140      	cbz	r0, 8014eb0 <rcl_wait_set_clear+0xec>
 8014e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	0092      	lsls	r2, r2, #2
 8014ea4:	f002 fc36 	bl	8017714 <memset>
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	4618      	mov	r0, r3
 8014eac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014eae:	6353      	str	r3, [r2, #52]	; 0x34
 8014eb0:	bd10      	pop	{r4, pc}
 8014eb2:	200b      	movs	r0, #11
 8014eb4:	4770      	bx	lr
 8014eb6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014eba:	bd10      	pop	{r4, pc}

08014ebc <rcl_wait_set_resize>:
 8014ebc:	2800      	cmp	r0, #0
 8014ebe:	f000 81a7 	beq.w	8015210 <rcl_wait_set_resize+0x354>
 8014ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec6:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8014eca:	4604      	mov	r4, r0
 8014ecc:	b083      	sub	sp, #12
 8014ece:	f1ba 0f00 	cmp.w	sl, #0
 8014ed2:	f000 819f 	beq.w	8015214 <rcl_wait_set_resize+0x358>
 8014ed6:	f04f 0800 	mov.w	r8, #0
 8014eda:	461e      	mov	r6, r3
 8014edc:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8014ee0:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8014ee4:	460f      	mov	r7, r1
 8014ee6:	f8c0 8004 	str.w	r8, [r0, #4]
 8014eea:	4615      	mov	r5, r2
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	f8ca 8000 	str.w	r8, [sl]
 8014ef2:	2900      	cmp	r1, #0
 8014ef4:	f000 80ca 	beq.w	801508c <rcl_wait_set_resize+0x1d0>
 8014ef8:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014efc:	4651      	mov	r1, sl
 8014efe:	464a      	mov	r2, r9
 8014f00:	6800      	ldr	r0, [r0, #0]
 8014f02:	4798      	blx	r3
 8014f04:	6020      	str	r0, [r4, #0]
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f000 80d9 	beq.w	80150be <rcl_wait_set_resize+0x202>
 8014f0c:	4652      	mov	r2, sl
 8014f0e:	4641      	mov	r1, r8
 8014f10:	f002 fc00 	bl	8017714 <memset>
 8014f14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014f16:	6067      	str	r7, [r4, #4]
 8014f18:	464a      	mov	r2, r9
 8014f1a:	6898      	ldr	r0, [r3, #8]
 8014f1c:	f8c3 8004 	str.w	r8, [r3, #4]
 8014f20:	9301      	str	r3, [sp, #4]
 8014f22:	4651      	mov	r1, sl
 8014f24:	9b00      	ldr	r3, [sp, #0]
 8014f26:	4798      	blx	r3
 8014f28:	9b01      	ldr	r3, [sp, #4]
 8014f2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014f2c:	6098      	str	r0, [r3, #8]
 8014f2e:	6897      	ldr	r7, [r2, #8]
 8014f30:	2f00      	cmp	r7, #0
 8014f32:	f000 80bf 	beq.w	80150b4 <rcl_wait_set_resize+0x1f8>
 8014f36:	4652      	mov	r2, sl
 8014f38:	4641      	mov	r1, r8
 8014f3a:	4638      	mov	r0, r7
 8014f3c:	f002 fbea 	bl	8017714 <memset>
 8014f40:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014f44:	2700      	movs	r7, #0
 8014f46:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8014f4a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014f4e:	60e7      	str	r7, [r4, #12]
 8014f50:	f8ca 700c 	str.w	r7, [sl, #12]
 8014f54:	2d00      	cmp	r5, #0
 8014f56:	f040 80b6 	bne.w	80150c6 <rcl_wait_set_resize+0x20a>
 8014f5a:	68a0      	ldr	r0, [r4, #8]
 8014f5c:	b130      	cbz	r0, 8014f6c <rcl_wait_set_resize+0xb0>
 8014f5e:	4641      	mov	r1, r8
 8014f60:	4790      	blx	r2
 8014f62:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014f66:	60a5      	str	r5, [r4, #8]
 8014f68:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014f6c:	2700      	movs	r7, #0
 8014f6e:	19ad      	adds	r5, r5, r6
 8014f70:	f8ca 7010 	str.w	r7, [sl, #16]
 8014f74:	f040 80bf 	bne.w	80150f6 <rcl_wait_set_resize+0x23a>
 8014f78:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014f7c:	b148      	cbz	r0, 8014f92 <rcl_wait_set_resize+0xd6>
 8014f7e:	4641      	mov	r1, r8
 8014f80:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8014f84:	4798      	blx	r3
 8014f86:	f8ca 5014 	str.w	r5, [sl, #20]
 8014f8a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014f8e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014f92:	2500      	movs	r5, #0
 8014f94:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8014f98:	6165      	str	r5, [r4, #20]
 8014f9a:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8014f9e:	2e00      	cmp	r6, #0
 8014fa0:	f040 80c0 	bne.w	8015124 <rcl_wait_set_resize+0x268>
 8014fa4:	6920      	ldr	r0, [r4, #16]
 8014fa6:	b140      	cbz	r0, 8014fba <rcl_wait_set_resize+0xfe>
 8014fa8:	4641      	mov	r1, r8
 8014faa:	47c8      	blx	r9
 8014fac:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014fb0:	6126      	str	r6, [r4, #16]
 8014fb2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014fb6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8014fba:	2500      	movs	r5, #0
 8014fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fbe:	61e5      	str	r5, [r4, #28]
 8014fc0:	f8ca 5018 	str.w	r5, [sl, #24]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	f040 80c2 	bne.w	801514e <rcl_wait_set_resize+0x292>
 8014fca:	69a0      	ldr	r0, [r4, #24]
 8014fcc:	b128      	cbz	r0, 8014fda <rcl_wait_set_resize+0x11e>
 8014fce:	4641      	mov	r1, r8
 8014fd0:	47c8      	blx	r9
 8014fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014fd8:	61a3      	str	r3, [r4, #24]
 8014fda:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014fde:	b130      	cbz	r0, 8014fee <rcl_wait_set_resize+0x132>
 8014fe0:	4641      	mov	r1, r8
 8014fe2:	47c8      	blx	r9
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014fea:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8014fee:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 8014ff2:	2600      	movs	r6, #0
 8014ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ff6:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8014ffa:	6266      	str	r6, [r4, #36]	; 0x24
 8014ffc:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8015000:	2b00      	cmp	r3, #0
 8015002:	f000 80c9 	beq.w	8015198 <rcl_wait_set_resize+0x2dc>
 8015006:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801500a:	4651      	mov	r1, sl
 801500c:	463a      	mov	r2, r7
 801500e:	6a20      	ldr	r0, [r4, #32]
 8015010:	47c8      	blx	r9
 8015012:	6220      	str	r0, [r4, #32]
 8015014:	2800      	cmp	r0, #0
 8015016:	d052      	beq.n	80150be <rcl_wait_set_resize+0x202>
 8015018:	4652      	mov	r2, sl
 801501a:	4631      	mov	r1, r6
 801501c:	f002 fb7a 	bl	8017714 <memset>
 8015020:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015024:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8015026:	6263      	str	r3, [r4, #36]	; 0x24
 8015028:	463a      	mov	r2, r7
 801502a:	62ae      	str	r6, [r5, #40]	; 0x28
 801502c:	4651      	mov	r1, sl
 801502e:	47c8      	blx	r9
 8015030:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015032:	62e8      	str	r0, [r5, #44]	; 0x2c
 8015034:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8015036:	2d00      	cmp	r5, #0
 8015038:	f000 8106 	beq.w	8015248 <rcl_wait_set_resize+0x38c>
 801503c:	4652      	mov	r2, sl
 801503e:	4631      	mov	r1, r6
 8015040:	4628      	mov	r0, r5
 8015042:	f002 fb67 	bl	8017714 <memset>
 8015046:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801504a:	2500      	movs	r5, #0
 801504c:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 8015050:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015052:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8015056:	62e5      	str	r5, [r4, #44]	; 0x2c
 8015058:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 801505c:	2b00      	cmp	r3, #0
 801505e:	f040 80b0 	bne.w	80151c2 <rcl_wait_set_resize+0x306>
 8015062:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015064:	b128      	cbz	r0, 8015072 <rcl_wait_set_resize+0x1b6>
 8015066:	4631      	mov	r1, r6
 8015068:	47b8      	blx	r7
 801506a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801506c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015070:	62a3      	str	r3, [r4, #40]	; 0x28
 8015072:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8015076:	b318      	cbz	r0, 80150c0 <rcl_wait_set_resize+0x204>
 8015078:	4631      	mov	r1, r6
 801507a:	47b8      	blx	r7
 801507c:	2300      	movs	r3, #0
 801507e:	4618      	mov	r0, r3
 8015080:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015082:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8015086:	b003      	add	sp, #12
 8015088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801508c:	6800      	ldr	r0, [r0, #0]
 801508e:	b120      	cbz	r0, 801509a <rcl_wait_set_resize+0x1de>
 8015090:	4649      	mov	r1, r9
 8015092:	47d8      	blx	fp
 8015094:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015098:	6027      	str	r7, [r4, #0]
 801509a:	f8da 0008 	ldr.w	r0, [sl, #8]
 801509e:	2800      	cmp	r0, #0
 80150a0:	f43f af50 	beq.w	8014f44 <rcl_wait_set_resize+0x88>
 80150a4:	4649      	mov	r1, r9
 80150a6:	47d8      	blx	fp
 80150a8:	2300      	movs	r3, #0
 80150aa:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80150ae:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80150b2:	e747      	b.n	8014f44 <rcl_wait_set_resize+0x88>
 80150b4:	4649      	mov	r1, r9
 80150b6:	6820      	ldr	r0, [r4, #0]
 80150b8:	47d8      	blx	fp
 80150ba:	e9c4 7700 	strd	r7, r7, [r4]
 80150be:	200a      	movs	r0, #10
 80150c0:	b003      	add	sp, #12
 80150c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80150ca:	4642      	mov	r2, r8
 80150cc:	4649      	mov	r1, r9
 80150ce:	68a0      	ldr	r0, [r4, #8]
 80150d0:	4798      	blx	r3
 80150d2:	60a0      	str	r0, [r4, #8]
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d0f2      	beq.n	80150be <rcl_wait_set_resize+0x202>
 80150d8:	4639      	mov	r1, r7
 80150da:	2700      	movs	r7, #0
 80150dc:	464a      	mov	r2, r9
 80150de:	f002 fb19 	bl	8017714 <memset>
 80150e2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80150e6:	60e5      	str	r5, [r4, #12]
 80150e8:	19ad      	adds	r5, r5, r6
 80150ea:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80150ee:	f8ca 7010 	str.w	r7, [sl, #16]
 80150f2:	f43f af41 	beq.w	8014f78 <rcl_wait_set_resize+0xbc>
 80150f6:	00ad      	lsls	r5, r5, #2
 80150f8:	4642      	mov	r2, r8
 80150fa:	4629      	mov	r1, r5
 80150fc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8015100:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015104:	4798      	blx	r3
 8015106:	4680      	mov	r8, r0
 8015108:	f8ca 0014 	str.w	r0, [sl, #20]
 801510c:	2800      	cmp	r0, #0
 801510e:	f000 8084 	beq.w	801521a <rcl_wait_set_resize+0x35e>
 8015112:	462a      	mov	r2, r5
 8015114:	4639      	mov	r1, r7
 8015116:	f002 fafd 	bl	8017714 <memset>
 801511a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801511e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015122:	e736      	b.n	8014f92 <rcl_wait_set_resize+0xd6>
 8015124:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8015128:	4642      	mov	r2, r8
 801512a:	4649      	mov	r1, r9
 801512c:	6920      	ldr	r0, [r4, #16]
 801512e:	47b8      	blx	r7
 8015130:	6120      	str	r0, [r4, #16]
 8015132:	2800      	cmp	r0, #0
 8015134:	d0c3      	beq.n	80150be <rcl_wait_set_resize+0x202>
 8015136:	464a      	mov	r2, r9
 8015138:	4629      	mov	r1, r5
 801513a:	f002 faeb 	bl	8017714 <memset>
 801513e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015142:	6166      	str	r6, [r4, #20]
 8015144:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015148:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801514c:	e735      	b.n	8014fba <rcl_wait_set_resize+0xfe>
 801514e:	009e      	lsls	r6, r3, #2
 8015150:	4631      	mov	r1, r6
 8015152:	4642      	mov	r2, r8
 8015154:	69a0      	ldr	r0, [r4, #24]
 8015156:	47b8      	blx	r7
 8015158:	61a0      	str	r0, [r4, #24]
 801515a:	2800      	cmp	r0, #0
 801515c:	d0af      	beq.n	80150be <rcl_wait_set_resize+0x202>
 801515e:	4632      	mov	r2, r6
 8015160:	4629      	mov	r1, r5
 8015162:	f002 fad7 	bl	8017714 <memset>
 8015166:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801516a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801516c:	4642      	mov	r2, r8
 801516e:	61e3      	str	r3, [r4, #28]
 8015170:	4631      	mov	r1, r6
 8015172:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015176:	f8ca 501c 	str.w	r5, [sl, #28]
 801517a:	47b8      	blx	r7
 801517c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801517e:	f8ca 0020 	str.w	r0, [sl, #32]
 8015182:	6a1f      	ldr	r7, [r3, #32]
 8015184:	2f00      	cmp	r7, #0
 8015186:	d058      	beq.n	801523a <rcl_wait_set_resize+0x37e>
 8015188:	4632      	mov	r2, r6
 801518a:	4629      	mov	r1, r5
 801518c:	4638      	mov	r0, r7
 801518e:	f002 fac1 	bl	8017714 <memset>
 8015192:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015196:	e72a      	b.n	8014fee <rcl_wait_set_resize+0x132>
 8015198:	6a20      	ldr	r0, [r4, #32]
 801519a:	b128      	cbz	r0, 80151a8 <rcl_wait_set_resize+0x2ec>
 801519c:	4639      	mov	r1, r7
 801519e:	47c0      	blx	r8
 80151a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151a2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80151a6:	6223      	str	r3, [r4, #32]
 80151a8:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f43f af4c 	beq.w	801504a <rcl_wait_set_resize+0x18e>
 80151b2:	4639      	mov	r1, r7
 80151b4:	47c0      	blx	r8
 80151b6:	2300      	movs	r3, #0
 80151b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80151bc:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80151c0:	e743      	b.n	801504a <rcl_wait_set_resize+0x18e>
 80151c2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80151c6:	4641      	mov	r1, r8
 80151c8:	4632      	mov	r2, r6
 80151ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80151cc:	47c8      	blx	r9
 80151ce:	62a0      	str	r0, [r4, #40]	; 0x28
 80151d0:	2800      	cmp	r0, #0
 80151d2:	f43f af74 	beq.w	80150be <rcl_wait_set_resize+0x202>
 80151d6:	4642      	mov	r2, r8
 80151d8:	4629      	mov	r1, r5
 80151da:	f002 fa9b 	bl	8017714 <memset>
 80151de:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80151e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80151e4:	4632      	mov	r2, r6
 80151e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80151e8:	4641      	mov	r1, r8
 80151ea:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80151ee:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80151f2:	47c8      	blx	r9
 80151f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80151f6:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80151fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80151fc:	b35b      	cbz	r3, 8015256 <rcl_wait_set_resize+0x39a>
 80151fe:	4642      	mov	r2, r8
 8015200:	4618      	mov	r0, r3
 8015202:	4629      	mov	r1, r5
 8015204:	f002 fa86 	bl	8017714 <memset>
 8015208:	4628      	mov	r0, r5
 801520a:	b003      	add	sp, #12
 801520c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015210:	200b      	movs	r0, #11
 8015212:	4770      	bx	lr
 8015214:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015218:	e752      	b.n	80150c0 <rcl_wait_set_resize+0x204>
 801521a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801521c:	68a0      	ldr	r0, [r4, #8]
 801521e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015220:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015222:	4790      	blx	r2
 8015224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015226:	6920      	ldr	r0, [r4, #16]
 8015228:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801522c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801522e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015230:	4790      	blx	r2
 8015232:	200a      	movs	r0, #10
 8015234:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015238:	e742      	b.n	80150c0 <rcl_wait_set_resize+0x204>
 801523a:	69a0      	ldr	r0, [r4, #24]
 801523c:	4641      	mov	r1, r8
 801523e:	47c8      	blx	r9
 8015240:	200a      	movs	r0, #10
 8015242:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8015246:	e73b      	b.n	80150c0 <rcl_wait_set_resize+0x204>
 8015248:	6a20      	ldr	r0, [r4, #32]
 801524a:	4639      	mov	r1, r7
 801524c:	47c0      	blx	r8
 801524e:	200a      	movs	r0, #10
 8015250:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8015254:	e734      	b.n	80150c0 <rcl_wait_set_resize+0x204>
 8015256:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015258:	4631      	mov	r1, r6
 801525a:	9300      	str	r3, [sp, #0]
 801525c:	47b8      	blx	r7
 801525e:	9b00      	ldr	r3, [sp, #0]
 8015260:	200a      	movs	r0, #10
 8015262:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8015266:	e72b      	b.n	80150c0 <rcl_wait_set_resize+0x204>

08015268 <rcl_wait_set_init>:
 8015268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801526c:	b084      	sub	sp, #16
 801526e:	4604      	mov	r4, r0
 8015270:	a810      	add	r0, sp, #64	; 0x40
 8015272:	460f      	mov	r7, r1
 8015274:	4690      	mov	r8, r2
 8015276:	4699      	mov	r9, r3
 8015278:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801527c:	f7f5 ffe8 	bl	800b250 <rcutils_allocator_is_valid>
 8015280:	2800      	cmp	r0, #0
 8015282:	d06b      	beq.n	801535c <rcl_wait_set_init+0xf4>
 8015284:	2c00      	cmp	r4, #0
 8015286:	d069      	beq.n	801535c <rcl_wait_set_init+0xf4>
 8015288:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801528a:	b125      	cbz	r5, 8015296 <rcl_wait_set_init+0x2e>
 801528c:	2564      	movs	r5, #100	; 0x64
 801528e:	4628      	mov	r0, r5
 8015290:	b004      	add	sp, #16
 8015292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015296:	f1ba 0f00 	cmp.w	sl, #0
 801529a:	d05f      	beq.n	801535c <rcl_wait_set_init+0xf4>
 801529c:	4650      	mov	r0, sl
 801529e:	f7fe f95f 	bl	8013560 <rcl_context_is_valid>
 80152a2:	2800      	cmp	r0, #0
 80152a4:	d067      	beq.n	8015376 <rcl_wait_set_init+0x10e>
 80152a6:	205c      	movs	r0, #92	; 0x5c
 80152a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80152ac:	4798      	blx	r3
 80152ae:	6320      	str	r0, [r4, #48]	; 0x30
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d062      	beq.n	801537a <rcl_wait_set_init+0x112>
 80152b4:	225c      	movs	r2, #92	; 0x5c
 80152b6:	4629      	mov	r1, r5
 80152b8:	f002 fa2c 	bl	8017714 <memset>
 80152bc:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80152be:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
 80152c2:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80152c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152ca:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80152ce:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80152d2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80152d6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80152da:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80152de:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80152e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152e6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80152ea:	1899      	adds	r1, r3, r2
 80152ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152ee:	f8de 3000 	ldr.w	r3, [lr]
 80152f2:	f8da 0000 	ldr.w	r0, [sl]
 80152f6:	4411      	add	r1, r2
 80152f8:	4441      	add	r1, r8
 80152fa:	f8cc 3000 	str.w	r3, [ip]
 80152fe:	3028      	adds	r0, #40	; 0x28
 8015300:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015304:	f001 f9d6 	bl	80166b4 <rmw_create_wait_set>
 8015308:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801530a:	63f0      	str	r0, [r6, #60]	; 0x3c
 801530c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801530e:	b350      	cbz	r0, 8015366 <rcl_wait_set_init+0xfe>
 8015310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015312:	4642      	mov	r2, r8
 8015314:	9302      	str	r3, [sp, #8]
 8015316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015318:	4639      	mov	r1, r7
 801531a:	9301      	str	r3, [sp, #4]
 801531c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801531e:	4620      	mov	r0, r4
 8015320:	9300      	str	r3, [sp, #0]
 8015322:	464b      	mov	r3, r9
 8015324:	f7ff fdca 	bl	8014ebc <rcl_wait_set_resize>
 8015328:	4605      	mov	r5, r0
 801532a:	2800      	cmp	r0, #0
 801532c:	d0af      	beq.n	801528e <rcl_wait_set_init+0x26>
 801532e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015330:	bb2b      	cbnz	r3, 801537e <rcl_wait_set_init+0x116>
 8015332:	2600      	movs	r6, #0
 8015334:	4620      	mov	r0, r4
 8015336:	4633      	mov	r3, r6
 8015338:	4632      	mov	r2, r6
 801533a:	4631      	mov	r1, r6
 801533c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015340:	9600      	str	r6, [sp, #0]
 8015342:	f7ff fdbb 	bl	8014ebc <rcl_wait_set_resize>
 8015346:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015348:	2800      	cmp	r0, #0
 801534a:	d0a0      	beq.n	801528e <rcl_wait_set_init+0x26>
 801534c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801534e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8015350:	4798      	blx	r3
 8015352:	4628      	mov	r0, r5
 8015354:	6326      	str	r6, [r4, #48]	; 0x30
 8015356:	b004      	add	sp, #16
 8015358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801535c:	250b      	movs	r5, #11
 801535e:	4628      	mov	r0, r5
 8015360:	b004      	add	sp, #16
 8015362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015366:	2501      	movs	r5, #1
 8015368:	f001 f9ae 	bl	80166c8 <rmw_destroy_wait_set>
 801536c:	2800      	cmp	r0, #0
 801536e:	bf18      	it	ne
 8015370:	f44f 7561 	movne.w	r5, #900	; 0x384
 8015374:	e7dd      	b.n	8015332 <rcl_wait_set_init+0xca>
 8015376:	2565      	movs	r5, #101	; 0x65
 8015378:	e789      	b.n	801528e <rcl_wait_set_init+0x26>
 801537a:	250a      	movs	r5, #10
 801537c:	e787      	b.n	801528e <rcl_wait_set_init+0x26>
 801537e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015380:	e7f2      	b.n	8015368 <rcl_wait_set_init+0x100>
 8015382:	bf00      	nop

08015384 <rcl_wait_set_add_guard_condition>:
 8015384:	b320      	cbz	r0, 80153d0 <rcl_wait_set_add_guard_condition+0x4c>
 8015386:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015388:	b570      	push	{r4, r5, r6, lr}
 801538a:	4604      	mov	r4, r0
 801538c:	b1d3      	cbz	r3, 80153c4 <rcl_wait_set_add_guard_condition+0x40>
 801538e:	b319      	cbz	r1, 80153d8 <rcl_wait_set_add_guard_condition+0x54>
 8015390:	68dd      	ldr	r5, [r3, #12]
 8015392:	68e0      	ldr	r0, [r4, #12]
 8015394:	4285      	cmp	r5, r0
 8015396:	d218      	bcs.n	80153ca <rcl_wait_set_add_guard_condition+0x46>
 8015398:	68a0      	ldr	r0, [r4, #8]
 801539a:	1c6e      	adds	r6, r5, #1
 801539c:	60de      	str	r6, [r3, #12]
 801539e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80153a2:	b102      	cbz	r2, 80153a6 <rcl_wait_set_add_guard_condition+0x22>
 80153a4:	6015      	str	r5, [r2, #0]
 80153a6:	4608      	mov	r0, r1
 80153a8:	f002 f8c6 	bl	8017538 <rcl_guard_condition_get_rmw_handle>
 80153ac:	b190      	cbz	r0, 80153d4 <rcl_wait_set_add_guard_condition+0x50>
 80153ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80153b0:	6842      	ldr	r2, [r0, #4]
 80153b2:	695b      	ldr	r3, [r3, #20]
 80153b4:	2000      	movs	r0, #0
 80153b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80153ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80153bc:	6913      	ldr	r3, [r2, #16]
 80153be:	3301      	adds	r3, #1
 80153c0:	6113      	str	r3, [r2, #16]
 80153c2:	bd70      	pop	{r4, r5, r6, pc}
 80153c4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80153c8:	bd70      	pop	{r4, r5, r6, pc}
 80153ca:	f240 3086 	movw	r0, #902	; 0x386
 80153ce:	bd70      	pop	{r4, r5, r6, pc}
 80153d0:	200b      	movs	r0, #11
 80153d2:	4770      	bx	lr
 80153d4:	2001      	movs	r0, #1
 80153d6:	bd70      	pop	{r4, r5, r6, pc}
 80153d8:	200b      	movs	r0, #11
 80153da:	bd70      	pop	{r4, r5, r6, pc}

080153dc <rcl_wait_set_add_timer>:
 80153dc:	b340      	cbz	r0, 8015430 <rcl_wait_set_add_timer+0x54>
 80153de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80153e0:	b570      	push	{r4, r5, r6, lr}
 80153e2:	4604      	mov	r4, r0
 80153e4:	b1f3      	cbz	r3, 8015424 <rcl_wait_set_add_timer+0x48>
 80153e6:	b329      	cbz	r1, 8015434 <rcl_wait_set_add_timer+0x58>
 80153e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80153ea:	6965      	ldr	r5, [r4, #20]
 80153ec:	42a8      	cmp	r0, r5
 80153ee:	d21c      	bcs.n	801542a <rcl_wait_set_add_timer+0x4e>
 80153f0:	6925      	ldr	r5, [r4, #16]
 80153f2:	1c46      	adds	r6, r0, #1
 80153f4:	641e      	str	r6, [r3, #64]	; 0x40
 80153f6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80153fa:	b102      	cbz	r2, 80153fe <rcl_wait_set_add_timer+0x22>
 80153fc:	6010      	str	r0, [r2, #0]
 80153fe:	4608      	mov	r0, r1
 8015400:	f7ff faa4 	bl	801494c <rcl_timer_get_guard_condition>
 8015404:	b168      	cbz	r0, 8015422 <rcl_wait_set_add_timer+0x46>
 8015406:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015408:	68e3      	ldr	r3, [r4, #12]
 801540a:	6c15      	ldr	r5, [r2, #64]	; 0x40
 801540c:	3b01      	subs	r3, #1
 801540e:	441d      	add	r5, r3
 8015410:	f002 f892 	bl	8017538 <rcl_guard_condition_get_rmw_handle>
 8015414:	b180      	cbz	r0, 8015438 <rcl_wait_set_add_timer+0x5c>
 8015416:	6842      	ldr	r2, [r0, #4]
 8015418:	2000      	movs	r0, #0
 801541a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801541c:	695b      	ldr	r3, [r3, #20]
 801541e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015422:	bd70      	pop	{r4, r5, r6, pc}
 8015424:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015428:	bd70      	pop	{r4, r5, r6, pc}
 801542a:	f240 3086 	movw	r0, #902	; 0x386
 801542e:	bd70      	pop	{r4, r5, r6, pc}
 8015430:	200b      	movs	r0, #11
 8015432:	4770      	bx	lr
 8015434:	200b      	movs	r0, #11
 8015436:	bd70      	pop	{r4, r5, r6, pc}
 8015438:	2001      	movs	r0, #1
 801543a:	bd70      	pop	{r4, r5, r6, pc}

0801543c <rcl_wait_set_add_client>:
 801543c:	b320      	cbz	r0, 8015488 <rcl_wait_set_add_client+0x4c>
 801543e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015440:	b570      	push	{r4, r5, r6, lr}
 8015442:	4604      	mov	r4, r0
 8015444:	b1d3      	cbz	r3, 801547c <rcl_wait_set_add_client+0x40>
 8015446:	b319      	cbz	r1, 8015490 <rcl_wait_set_add_client+0x54>
 8015448:	699d      	ldr	r5, [r3, #24]
 801544a:	69e0      	ldr	r0, [r4, #28]
 801544c:	4285      	cmp	r5, r0
 801544e:	d218      	bcs.n	8015482 <rcl_wait_set_add_client+0x46>
 8015450:	69a0      	ldr	r0, [r4, #24]
 8015452:	1c6e      	adds	r6, r5, #1
 8015454:	619e      	str	r6, [r3, #24]
 8015456:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801545a:	b102      	cbz	r2, 801545e <rcl_wait_set_add_client+0x22>
 801545c:	6015      	str	r5, [r2, #0]
 801545e:	4608      	mov	r0, r1
 8015460:	f7fe f818 	bl	8013494 <rcl_client_get_rmw_handle>
 8015464:	b190      	cbz	r0, 801548c <rcl_wait_set_add_client+0x50>
 8015466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015468:	6842      	ldr	r2, [r0, #4]
 801546a:	6a1b      	ldr	r3, [r3, #32]
 801546c:	2000      	movs	r0, #0
 801546e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015472:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015474:	69d3      	ldr	r3, [r2, #28]
 8015476:	3301      	adds	r3, #1
 8015478:	61d3      	str	r3, [r2, #28]
 801547a:	bd70      	pop	{r4, r5, r6, pc}
 801547c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015480:	bd70      	pop	{r4, r5, r6, pc}
 8015482:	f240 3086 	movw	r0, #902	; 0x386
 8015486:	bd70      	pop	{r4, r5, r6, pc}
 8015488:	200b      	movs	r0, #11
 801548a:	4770      	bx	lr
 801548c:	2001      	movs	r0, #1
 801548e:	bd70      	pop	{r4, r5, r6, pc}
 8015490:	200b      	movs	r0, #11
 8015492:	bd70      	pop	{r4, r5, r6, pc}

08015494 <rcl_wait_set_add_service>:
 8015494:	b320      	cbz	r0, 80154e0 <rcl_wait_set_add_service+0x4c>
 8015496:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015498:	b570      	push	{r4, r5, r6, lr}
 801549a:	4604      	mov	r4, r0
 801549c:	b1d3      	cbz	r3, 80154d4 <rcl_wait_set_add_service+0x40>
 801549e:	b319      	cbz	r1, 80154e8 <rcl_wait_set_add_service+0x54>
 80154a0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80154a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80154a4:	4285      	cmp	r5, r0
 80154a6:	d218      	bcs.n	80154da <rcl_wait_set_add_service+0x46>
 80154a8:	6a20      	ldr	r0, [r4, #32]
 80154aa:	1c6e      	adds	r6, r5, #1
 80154ac:	625e      	str	r6, [r3, #36]	; 0x24
 80154ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80154b2:	b102      	cbz	r2, 80154b6 <rcl_wait_set_add_service+0x22>
 80154b4:	6015      	str	r5, [r2, #0]
 80154b6:	4608      	mov	r0, r1
 80154b8:	f7fe fe42 	bl	8014140 <rcl_service_get_rmw_handle>
 80154bc:	b190      	cbz	r0, 80154e4 <rcl_wait_set_add_service+0x50>
 80154be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80154c0:	6842      	ldr	r2, [r0, #4]
 80154c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c4:	2000      	movs	r0, #0
 80154c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80154ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80154cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80154ce:	3301      	adds	r3, #1
 80154d0:	6293      	str	r3, [r2, #40]	; 0x28
 80154d2:	bd70      	pop	{r4, r5, r6, pc}
 80154d4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80154d8:	bd70      	pop	{r4, r5, r6, pc}
 80154da:	f240 3086 	movw	r0, #902	; 0x386
 80154de:	bd70      	pop	{r4, r5, r6, pc}
 80154e0:	200b      	movs	r0, #11
 80154e2:	4770      	bx	lr
 80154e4:	2001      	movs	r0, #1
 80154e6:	bd70      	pop	{r4, r5, r6, pc}
 80154e8:	200b      	movs	r0, #11
 80154ea:	bd70      	pop	{r4, r5, r6, pc}
 80154ec:	0000      	movs	r0, r0
	...

080154f0 <rcl_wait>:
 80154f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f4:	b08f      	sub	sp, #60	; 0x3c
 80154f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80154fa:	2800      	cmp	r0, #0
 80154fc:	f000 8152 	beq.w	80157a4 <rcl_wait+0x2b4>
 8015500:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8015502:	4604      	mov	r4, r0
 8015504:	2d00      	cmp	r5, #0
 8015506:	f000 80c0 	beq.w	801568a <rcl_wait+0x19a>
 801550a:	6843      	ldr	r3, [r0, #4]
 801550c:	b973      	cbnz	r3, 801552c <rcl_wait+0x3c>
 801550e:	68e3      	ldr	r3, [r4, #12]
 8015510:	b963      	cbnz	r3, 801552c <rcl_wait+0x3c>
 8015512:	6963      	ldr	r3, [r4, #20]
 8015514:	b953      	cbnz	r3, 801552c <rcl_wait+0x3c>
 8015516:	69e3      	ldr	r3, [r4, #28]
 8015518:	b943      	cbnz	r3, 801552c <rcl_wait+0x3c>
 801551a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801551c:	b933      	cbnz	r3, 801552c <rcl_wait+0x3c>
 801551e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015520:	b923      	cbnz	r3, 801552c <rcl_wait+0x3c>
 8015522:	f240 3085 	movw	r0, #901	; 0x385
 8015526:	b00f      	add	sp, #60	; 0x3c
 8015528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015530:	2a01      	cmp	r2, #1
 8015532:	f173 0300 	sbcs.w	r3, r3, #0
 8015536:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8015538:	db56      	blt.n	80155e8 <rcl_wait+0xf8>
 801553a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801553e:	2900      	cmp	r1, #0
 8015540:	f000 814f 	beq.w	80157e2 <rcl_wait+0x2f2>
 8015544:	2300      	movs	r3, #0
 8015546:	f04f 0800 	mov.w	r8, #0
 801554a:	f04f 0900 	mov.w	r9, #0
 801554e:	469b      	mov	fp, r3
 8015550:	9307      	str	r3, [sp, #28]
 8015552:	e00d      	b.n	8015570 <rcl_wait+0x80>
 8015554:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015556:	6922      	ldr	r2, [r4, #16]
 8015558:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801555a:	f842 000a 	str.w	r0, [r2, sl]
 801555e:	2300      	movs	r3, #0
 8015560:	f118 0801 	adds.w	r8, r8, #1
 8015564:	f149 0900 	adc.w	r9, r9, #0
 8015568:	4599      	cmp	r9, r3
 801556a:	bf08      	it	eq
 801556c:	4588      	cmpeq	r8, r1
 801556e:	d243      	bcs.n	80155f8 <rcl_wait+0x108>
 8015570:	6922      	ldr	r2, [r4, #16]
 8015572:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8015576:	f852 000a 	ldr.w	r0, [r2, sl]
 801557a:	2800      	cmp	r0, #0
 801557c:	d0ef      	beq.n	801555e <rcl_wait+0x6e>
 801557e:	68e2      	ldr	r2, [r4, #12]
 8015580:	6969      	ldr	r1, [r5, #20]
 8015582:	4442      	add	r2, r8
 8015584:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8015588:	b13b      	cbz	r3, 801559a <rcl_wait+0xaa>
 801558a:	692a      	ldr	r2, [r5, #16]
 801558c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015590:	6921      	ldr	r1, [r4, #16]
 8015592:	3201      	adds	r2, #1
 8015594:	f851 000a 	ldr.w	r0, [r1, sl]
 8015598:	612a      	str	r2, [r5, #16]
 801559a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801559e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80155a2:	f7ff f9c1 	bl	8014928 <rcl_timer_is_canceled>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	d1bd      	bne.n	8015526 <rcl_wait+0x36>
 80155aa:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80155ae:	2a00      	cmp	r2, #0
 80155b0:	d1d0      	bne.n	8015554 <rcl_wait+0x64>
 80155b2:	6922      	ldr	r2, [r4, #16]
 80155b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80155b8:	f852 000a 	ldr.w	r0, [r2, sl]
 80155bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155c0:	a90a      	add	r1, sp, #40	; 0x28
 80155c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80155c6:	f7ff f98b 	bl	80148e0 <rcl_timer_get_time_until_next_call>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d1ab      	bne.n	8015526 <rcl_wait+0x36>
 80155ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80155d2:	42b2      	cmp	r2, r6
 80155d4:	eb73 0107 	sbcs.w	r1, r3, r7
 80155d8:	da03      	bge.n	80155e2 <rcl_wait+0xf2>
 80155da:	461f      	mov	r7, r3
 80155dc:	2301      	movs	r3, #1
 80155de:	4616      	mov	r6, r2
 80155e0:	9307      	str	r3, [sp, #28]
 80155e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80155e4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80155e6:	e7ba      	b.n	801555e <rcl_wait+0x6e>
 80155e8:	2900      	cmp	r1, #0
 80155ea:	f000 80e4 	beq.w	80157b6 <rcl_wait+0x2c6>
 80155ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80155f2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80155f6:	e7a5      	b.n	8015544 <rcl_wait+0x54>
 80155f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155fc:	4313      	orrs	r3, r2
 80155fe:	d149      	bne.n	8015694 <rcl_wait+0x1a4>
 8015600:	2300      	movs	r3, #0
 8015602:	2200      	movs	r2, #0
 8015604:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015608:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801560c:	ab0a      	add	r3, sp, #40	; 0x28
 801560e:	9302      	str	r3, [sp, #8]
 8015610:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8015612:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8015616:	e9cd 3200 	strd	r3, r2, [sp]
 801561a:	f105 0110 	add.w	r1, r5, #16
 801561e:	f105 031c 	add.w	r3, r5, #28
 8015622:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8015626:	1d28      	adds	r0, r5, #4
 8015628:	f000 fec4 	bl	80163b4 <rmw_wait>
 801562c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801562e:	4607      	mov	r7, r0
 8015630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015632:	b32a      	cbz	r2, 8015680 <rcl_wait+0x190>
 8015634:	f04f 0800 	mov.w	r8, #0
 8015638:	4646      	mov	r6, r8
 801563a:	e005      	b.n	8015648 <rcl_wait+0x158>
 801563c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801563e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015640:	f108 0801 	add.w	r8, r8, #1
 8015644:	4542      	cmp	r2, r8
 8015646:	d91b      	bls.n	8015680 <rcl_wait+0x190>
 8015648:	6922      	ldr	r2, [r4, #16]
 801564a:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801564e:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8015652:	2800      	cmp	r0, #0
 8015654:	d0f3      	beq.n	801563e <rcl_wait+0x14e>
 8015656:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801565a:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 801565e:	f7ff f907 	bl	8014870 <rcl_timer_is_ready>
 8015662:	2800      	cmp	r0, #0
 8015664:	f47f af5f 	bne.w	8015526 <rcl_wait+0x36>
 8015668:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801566c:	2a00      	cmp	r2, #0
 801566e:	d1e5      	bne.n	801563c <rcl_wait+0x14c>
 8015670:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015672:	6921      	ldr	r1, [r4, #16]
 8015674:	f108 0801 	add.w	r8, r8, #1
 8015678:	514a      	str	r2, [r1, r5]
 801567a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801567c:	4542      	cmp	r2, r8
 801567e:	d8e3      	bhi.n	8015648 <rcl_wait+0x158>
 8015680:	f037 0002 	bics.w	r0, r7, #2
 8015684:	d02c      	beq.n	80156e0 <rcl_wait+0x1f0>
 8015686:	2001      	movs	r0, #1
 8015688:	e74d      	b.n	8015526 <rcl_wait+0x36>
 801568a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801568e:	b00f      	add	sp, #60	; 0x3c
 8015690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015698:	2a01      	cmp	r2, #1
 801569a:	f173 0300 	sbcs.w	r3, r3, #0
 801569e:	f2c0 8085 	blt.w	80157ac <rcl_wait+0x2bc>
 80156a2:	2e00      	cmp	r6, #0
 80156a4:	f177 0300 	sbcs.w	r3, r7, #0
 80156a8:	bfb8      	it	lt
 80156aa:	2600      	movlt	r6, #0
 80156ac:	a34e      	add	r3, pc, #312	; (adr r3, 80157e8 <rcl_wait+0x2f8>)
 80156ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b2:	bfb8      	it	lt
 80156b4:	2700      	movlt	r7, #0
 80156b6:	4630      	mov	r0, r6
 80156b8:	4639      	mov	r1, r7
 80156ba:	f7eb f84f 	bl	800075c <__aeabi_ldivmod>
 80156be:	a34a      	add	r3, pc, #296	; (adr r3, 80157e8 <rcl_wait+0x2f8>)
 80156c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c4:	4680      	mov	r8, r0
 80156c6:	4689      	mov	r9, r1
 80156c8:	4630      	mov	r0, r6
 80156ca:	4639      	mov	r1, r7
 80156cc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80156d0:	f7eb f844 	bl	800075c <__aeabi_ldivmod>
 80156d4:	4619      	mov	r1, r3
 80156d6:	4610      	mov	r0, r2
 80156d8:	ab0a      	add	r3, sp, #40	; 0x28
 80156da:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156de:	e796      	b.n	801560e <rcl_wait+0x11e>
 80156e0:	6866      	ldr	r6, [r4, #4]
 80156e2:	4602      	mov	r2, r0
 80156e4:	b91e      	cbnz	r6, 80156ee <rcl_wait+0x1fe>
 80156e6:	e00d      	b.n	8015704 <rcl_wait+0x214>
 80156e8:	3201      	adds	r2, #1
 80156ea:	42b2      	cmp	r2, r6
 80156ec:	d00a      	beq.n	8015704 <rcl_wait+0x214>
 80156ee:	6899      	ldr	r1, [r3, #8]
 80156f0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80156f4:	2900      	cmp	r1, #0
 80156f6:	d1f7      	bne.n	80156e8 <rcl_wait+0x1f8>
 80156f8:	6825      	ldr	r5, [r4, #0]
 80156fa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80156fe:	3201      	adds	r2, #1
 8015700:	42b2      	cmp	r2, r6
 8015702:	d1f4      	bne.n	80156ee <rcl_wait+0x1fe>
 8015704:	68e6      	ldr	r6, [r4, #12]
 8015706:	2200      	movs	r2, #0
 8015708:	b91e      	cbnz	r6, 8015712 <rcl_wait+0x222>
 801570a:	e00d      	b.n	8015728 <rcl_wait+0x238>
 801570c:	3201      	adds	r2, #1
 801570e:	42b2      	cmp	r2, r6
 8015710:	d00a      	beq.n	8015728 <rcl_wait+0x238>
 8015712:	6959      	ldr	r1, [r3, #20]
 8015714:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015718:	2900      	cmp	r1, #0
 801571a:	d1f7      	bne.n	801570c <rcl_wait+0x21c>
 801571c:	68a5      	ldr	r5, [r4, #8]
 801571e:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015722:	3201      	adds	r2, #1
 8015724:	42b2      	cmp	r2, r6
 8015726:	d1f4      	bne.n	8015712 <rcl_wait+0x222>
 8015728:	69e6      	ldr	r6, [r4, #28]
 801572a:	2200      	movs	r2, #0
 801572c:	b91e      	cbnz	r6, 8015736 <rcl_wait+0x246>
 801572e:	e00d      	b.n	801574c <rcl_wait+0x25c>
 8015730:	3201      	adds	r2, #1
 8015732:	42b2      	cmp	r2, r6
 8015734:	d00a      	beq.n	801574c <rcl_wait+0x25c>
 8015736:	6a19      	ldr	r1, [r3, #32]
 8015738:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801573c:	2900      	cmp	r1, #0
 801573e:	d1f7      	bne.n	8015730 <rcl_wait+0x240>
 8015740:	69a5      	ldr	r5, [r4, #24]
 8015742:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015746:	3201      	adds	r2, #1
 8015748:	42b2      	cmp	r2, r6
 801574a:	d1f4      	bne.n	8015736 <rcl_wait+0x246>
 801574c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801574e:	2200      	movs	r2, #0
 8015750:	b91e      	cbnz	r6, 801575a <rcl_wait+0x26a>
 8015752:	e00d      	b.n	8015770 <rcl_wait+0x280>
 8015754:	3201      	adds	r2, #1
 8015756:	4296      	cmp	r6, r2
 8015758:	d00a      	beq.n	8015770 <rcl_wait+0x280>
 801575a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801575c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015760:	2900      	cmp	r1, #0
 8015762:	d1f7      	bne.n	8015754 <rcl_wait+0x264>
 8015764:	6a25      	ldr	r5, [r4, #32]
 8015766:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801576a:	3201      	adds	r2, #1
 801576c:	4296      	cmp	r6, r2
 801576e:	d1f4      	bne.n	801575a <rcl_wait+0x26a>
 8015770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015772:	2200      	movs	r2, #0
 8015774:	b91e      	cbnz	r6, 801577e <rcl_wait+0x28e>
 8015776:	e00d      	b.n	8015794 <rcl_wait+0x2a4>
 8015778:	3201      	adds	r2, #1
 801577a:	42b2      	cmp	r2, r6
 801577c:	d00a      	beq.n	8015794 <rcl_wait+0x2a4>
 801577e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015780:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015784:	2900      	cmp	r1, #0
 8015786:	d1f7      	bne.n	8015778 <rcl_wait+0x288>
 8015788:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801578a:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801578e:	3201      	adds	r2, #1
 8015790:	42b2      	cmp	r2, r6
 8015792:	d1f4      	bne.n	801577e <rcl_wait+0x28e>
 8015794:	2f02      	cmp	r7, #2
 8015796:	f47f aec6 	bne.w	8015526 <rcl_wait+0x36>
 801579a:	9b07      	ldr	r3, [sp, #28]
 801579c:	2b00      	cmp	r3, #0
 801579e:	bf08      	it	eq
 80157a0:	2002      	moveq	r0, #2
 80157a2:	e6c0      	b.n	8015526 <rcl_wait+0x36>
 80157a4:	200b      	movs	r0, #11
 80157a6:	b00f      	add	sp, #60	; 0x3c
 80157a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ac:	9b07      	ldr	r3, [sp, #28]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f47f af77 	bne.w	80156a2 <rcl_wait+0x1b2>
 80157b4:	e72b      	b.n	801560e <rcl_wait+0x11e>
 80157b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157ba:	4313      	orrs	r3, r2
 80157bc:	bf08      	it	eq
 80157be:	9107      	streq	r1, [sp, #28]
 80157c0:	f43f af1e 	beq.w	8015600 <rcl_wait+0x110>
 80157c4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80157c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157cc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80157d0:	2a01      	cmp	r2, #1
 80157d2:	f173 0300 	sbcs.w	r3, r3, #0
 80157d6:	f04f 0300 	mov.w	r3, #0
 80157da:	9307      	str	r3, [sp, #28]
 80157dc:	f6bf af61 	bge.w	80156a2 <rcl_wait+0x1b2>
 80157e0:	e715      	b.n	801560e <rcl_wait+0x11e>
 80157e2:	4632      	mov	r2, r6
 80157e4:	463b      	mov	r3, r7
 80157e6:	e7f3      	b.n	80157d0 <rcl_wait+0x2e0>
 80157e8:	3b9aca00 	.word	0x3b9aca00
 80157ec:	00000000 	.word	0x00000000

080157f0 <__atomic_load_8>:
 80157f0:	f04f 0101 	mov.w	r1, #1
 80157f4:	ea80 4210 	eor.w	r2, r0, r0, lsr #16
 80157f8:	f082 023d 	eor.w	r2, r2, #61	; 0x3d
 80157fc:	4b13      	ldr	r3, [pc, #76]	; (801584c <__atomic_load_8+0x5c>)
 80157fe:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8015802:	ea82 1212 	eor.w	r2, r2, r2, lsr #4
 8015806:	fb03 f302 	mul.w	r3, r3, r2
 801580a:	4a11      	ldr	r2, [pc, #68]	; (8015850 <__atomic_load_8+0x60>)
 801580c:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8015810:	b430      	push	{r4, r5}
 8015812:	fba2 4203 	umull	r4, r2, r2, r3
 8015816:	0912      	lsrs	r2, r2, #4
 8015818:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 801581c:	ebc2 02c4 	rsb	r2, r2, r4, lsl #3
 8015820:	4c0c      	ldr	r4, [pc, #48]	; (8015854 <__atomic_load_8+0x64>)
 8015822:	1a9b      	subs	r3, r3, r2
 8015824:	18e5      	adds	r5, r4, r3
 8015826:	e8d5 2f4f 	ldrexb	r2, [r5]
 801582a:	e8c5 1f4c 	strexb	ip, r1, [r5]
 801582e:	f1bc 0f00 	cmp.w	ip, #0
 8015832:	d1f8      	bne.n	8015826 <__atomic_load_8+0x36>
 8015834:	b2d2      	uxtb	r2, r2
 8015836:	f3bf 8f5b 	dmb	ish
 801583a:	2a00      	cmp	r2, #0
 801583c:	d1f3      	bne.n	8015826 <__atomic_load_8+0x36>
 801583e:	c803      	ldmia	r0, {r0, r1}
 8015840:	f3bf 8f5b 	dmb	ish
 8015844:	54e2      	strb	r2, [r4, r3]
 8015846:	bc30      	pop	{r4, r5}
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	27d4eb2d 	.word	0x27d4eb2d
 8015850:	b21642c9 	.word	0xb21642c9
 8015854:	20006790 	.word	0x20006790

08015858 <__atomic_store_8>:
 8015858:	b4f0      	push	{r4, r5, r6, r7}
 801585a:	f04f 0501 	mov.w	r5, #1
 801585e:	ea80 4410 	eor.w	r4, r0, r0, lsr #16
 8015862:	f084 043d 	eor.w	r4, r4, #61	; 0x3d
 8015866:	4913      	ldr	r1, [pc, #76]	; (80158b4 <__atomic_store_8+0x5c>)
 8015868:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 801586c:	ea84 1414 	eor.w	r4, r4, r4, lsr #4
 8015870:	fb01 f104 	mul.w	r1, r1, r4
 8015874:	4c10      	ldr	r4, [pc, #64]	; (80158b8 <__atomic_store_8+0x60>)
 8015876:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801587a:	fba4 6401 	umull	r6, r4, r4, r1
 801587e:	0924      	lsrs	r4, r4, #4
 8015880:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8015884:	ebc4 04c6 	rsb	r4, r4, r6, lsl #3
 8015888:	4e0c      	ldr	r6, [pc, #48]	; (80158bc <__atomic_store_8+0x64>)
 801588a:	1b09      	subs	r1, r1, r4
 801588c:	1877      	adds	r7, r6, r1
 801588e:	e8d7 4f4f 	ldrexb	r4, [r7]
 8015892:	e8c7 5f4c 	strexb	ip, r5, [r7]
 8015896:	f1bc 0f00 	cmp.w	ip, #0
 801589a:	d1f8      	bne.n	801588e <__atomic_store_8+0x36>
 801589c:	b2e4      	uxtb	r4, r4
 801589e:	f3bf 8f5b 	dmb	ish
 80158a2:	2c00      	cmp	r4, #0
 80158a4:	d1f3      	bne.n	801588e <__atomic_store_8+0x36>
 80158a6:	e9c0 2300 	strd	r2, r3, [r0]
 80158aa:	f3bf 8f5b 	dmb	ish
 80158ae:	5474      	strb	r4, [r6, r1]
 80158b0:	bcf0      	pop	{r4, r5, r6, r7}
 80158b2:	4770      	bx	lr
 80158b4:	27d4eb2d 	.word	0x27d4eb2d
 80158b8:	b21642c9 	.word	0xb21642c9
 80158bc:	20006790 	.word	0x20006790

080158c0 <__atomic_exchange_8>:
 80158c0:	b4f0      	push	{r4, r5, r6, r7}
 80158c2:	4605      	mov	r5, r0
 80158c4:	f04f 0001 	mov.w	r0, #1
 80158c8:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 80158cc:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80158d0:	4c14      	ldr	r4, [pc, #80]	; (8015924 <__atomic_exchange_8+0x64>)
 80158d2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80158d6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80158da:	fb04 f401 	mul.w	r4, r4, r1
 80158de:	4912      	ldr	r1, [pc, #72]	; (8015928 <__atomic_exchange_8+0x68>)
 80158e0:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 80158e4:	fba1 6104 	umull	r6, r1, r1, r4
 80158e8:	0909      	lsrs	r1, r1, #4
 80158ea:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 80158ee:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 80158f2:	4f0e      	ldr	r7, [pc, #56]	; (801592c <__atomic_exchange_8+0x6c>)
 80158f4:	1a64      	subs	r4, r4, r1
 80158f6:	1939      	adds	r1, r7, r4
 80158f8:	e8d1 6f4f 	ldrexb	r6, [r1]
 80158fc:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8015900:	f1bc 0f00 	cmp.w	ip, #0
 8015904:	d1f8      	bne.n	80158f8 <__atomic_exchange_8+0x38>
 8015906:	b2f6      	uxtb	r6, r6
 8015908:	f3bf 8f5b 	dmb	ish
 801590c:	2e00      	cmp	r6, #0
 801590e:	d1f3      	bne.n	80158f8 <__atomic_exchange_8+0x38>
 8015910:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015914:	e9c5 2300 	strd	r2, r3, [r5]
 8015918:	f3bf 8f5b 	dmb	ish
 801591c:	553e      	strb	r6, [r7, r4]
 801591e:	bcf0      	pop	{r4, r5, r6, r7}
 8015920:	4770      	bx	lr
 8015922:	bf00      	nop
 8015924:	27d4eb2d 	.word	0x27d4eb2d
 8015928:	b21642c9 	.word	0xb21642c9
 801592c:	20006790 	.word	0x20006790

08015930 <__atomic_fetch_add_8>:
 8015930:	b4f0      	push	{r4, r5, r6, r7}
 8015932:	4605      	mov	r5, r0
 8015934:	f04f 0001 	mov.w	r0, #1
 8015938:	ea85 4115 	eor.w	r1, r5, r5, lsr #16
 801593c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8015940:	4c15      	ldr	r4, [pc, #84]	; (8015998 <__atomic_fetch_add_8+0x68>)
 8015942:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015946:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801594a:	fb04 f401 	mul.w	r4, r4, r1
 801594e:	4913      	ldr	r1, [pc, #76]	; (801599c <__atomic_fetch_add_8+0x6c>)
 8015950:	ea84 34d4 	eor.w	r4, r4, r4, lsr #15
 8015954:	fba1 6104 	umull	r6, r1, r1, r4
 8015958:	0909      	lsrs	r1, r1, #4
 801595a:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 801595e:	ebc1 01c6 	rsb	r1, r1, r6, lsl #3
 8015962:	4f0f      	ldr	r7, [pc, #60]	; (80159a0 <__atomic_fetch_add_8+0x70>)
 8015964:	1a64      	subs	r4, r4, r1
 8015966:	1939      	adds	r1, r7, r4
 8015968:	e8d1 6f4f 	ldrexb	r6, [r1]
 801596c:	e8c1 0f4c 	strexb	ip, r0, [r1]
 8015970:	f1bc 0f00 	cmp.w	ip, #0
 8015974:	d1f8      	bne.n	8015968 <__atomic_fetch_add_8+0x38>
 8015976:	b2f6      	uxtb	r6, r6
 8015978:	f3bf 8f5b 	dmb	ish
 801597c:	2e00      	cmp	r6, #0
 801597e:	d1f3      	bne.n	8015968 <__atomic_fetch_add_8+0x38>
 8015980:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015984:	1882      	adds	r2, r0, r2
 8015986:	eb41 0303 	adc.w	r3, r1, r3
 801598a:	e9c5 2300 	strd	r2, r3, [r5]
 801598e:	f3bf 8f5b 	dmb	ish
 8015992:	553e      	strb	r6, [r7, r4]
 8015994:	bcf0      	pop	{r4, r5, r6, r7}
 8015996:	4770      	bx	lr
 8015998:	27d4eb2d 	.word	0x27d4eb2d
 801599c:	b21642c9 	.word	0xb21642c9
 80159a0:	20006790 	.word	0x20006790

080159a4 <rcutils_is_directory>:
 80159a4:	2000      	movs	r0, #0
 80159a6:	4770      	bx	lr

080159a8 <rcutils_join_path>:
 80159a8:	b082      	sub	sp, #8
 80159aa:	2000      	movs	r0, #0
 80159ac:	e88d 000c 	stmia.w	sp, {r2, r3}
 80159b0:	b002      	add	sp, #8
 80159b2:	4770      	bx	lr

080159b4 <rcutils_to_native_path>:
 80159b4:	b084      	sub	sp, #16
 80159b6:	a801      	add	r0, sp, #4
 80159b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80159bc:	b004      	add	sp, #16
 80159be:	2000      	movs	r0, #0
 80159c0:	4770      	bx	lr
 80159c2:	bf00      	nop

080159c4 <rcutils_format_string_limit>:
 80159c4:	b40f      	push	{r0, r1, r2, r3}
 80159c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159c8:	b083      	sub	sp, #12
 80159ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80159cc:	ac08      	add	r4, sp, #32
 80159ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80159d2:	b34e      	cbz	r6, 8015a28 <rcutils_format_string_limit+0x64>
 80159d4:	a808      	add	r0, sp, #32
 80159d6:	f7f5 fc3b 	bl	800b250 <rcutils_allocator_is_valid>
 80159da:	b328      	cbz	r0, 8015a28 <rcutils_format_string_limit+0x64>
 80159dc:	2100      	movs	r1, #0
 80159de:	ab0f      	add	r3, sp, #60	; 0x3c
 80159e0:	4608      	mov	r0, r1
 80159e2:	4632      	mov	r2, r6
 80159e4:	e9cd 3300 	strd	r3, r3, [sp]
 80159e8:	f000 f8f4 	bl	8015bd4 <rcutils_vsnprintf>
 80159ec:	1c43      	adds	r3, r0, #1
 80159ee:	4605      	mov	r5, r0
 80159f0:	d01a      	beq.n	8015a28 <rcutils_format_string_limit+0x64>
 80159f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159f4:	1c47      	adds	r7, r0, #1
 80159f6:	429f      	cmp	r7, r3
 80159f8:	bf84      	itt	hi
 80159fa:	461f      	movhi	r7, r3
 80159fc:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8015a00:	4638      	mov	r0, r7
 8015a02:	9b08      	ldr	r3, [sp, #32]
 8015a04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a06:	4798      	blx	r3
 8015a08:	4604      	mov	r4, r0
 8015a0a:	b168      	cbz	r0, 8015a28 <rcutils_format_string_limit+0x64>
 8015a0c:	4632      	mov	r2, r6
 8015a0e:	4639      	mov	r1, r7
 8015a10:	9b01      	ldr	r3, [sp, #4]
 8015a12:	f000 f8df 	bl	8015bd4 <rcutils_vsnprintf>
 8015a16:	2800      	cmp	r0, #0
 8015a18:	db02      	blt.n	8015a20 <rcutils_format_string_limit+0x5c>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	5563      	strb	r3, [r4, r5]
 8015a1e:	e004      	b.n	8015a2a <rcutils_format_string_limit+0x66>
 8015a20:	4620      	mov	r0, r4
 8015a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a26:	4798      	blx	r3
 8015a28:	2400      	movs	r4, #0
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	b003      	add	sp, #12
 8015a2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015a32:	b004      	add	sp, #16
 8015a34:	4770      	bx	lr
 8015a36:	bf00      	nop

08015a38 <rcutils_get_env>:
 8015a38:	b168      	cbz	r0, 8015a56 <rcutils_get_env+0x1e>
 8015a3a:	b510      	push	{r4, lr}
 8015a3c:	460c      	mov	r4, r1
 8015a3e:	b129      	cbz	r1, 8015a4c <rcutils_get_env+0x14>
 8015a40:	f001 fdc6 	bl	80175d0 <getenv>
 8015a44:	b120      	cbz	r0, 8015a50 <rcutils_get_env+0x18>
 8015a46:	6020      	str	r0, [r4, #0]
 8015a48:	2000      	movs	r0, #0
 8015a4a:	bd10      	pop	{r4, pc}
 8015a4c:	4803      	ldr	r0, [pc, #12]	; (8015a5c <rcutils_get_env+0x24>)
 8015a4e:	bd10      	pop	{r4, pc}
 8015a50:	4b03      	ldr	r3, [pc, #12]	; (8015a60 <rcutils_get_env+0x28>)
 8015a52:	6023      	str	r3, [r4, #0]
 8015a54:	bd10      	pop	{r4, pc}
 8015a56:	4803      	ldr	r0, [pc, #12]	; (8015a64 <rcutils_get_env+0x2c>)
 8015a58:	4770      	bx	lr
 8015a5a:	bf00      	nop
 8015a5c:	0801a3d8 	.word	0x0801a3d8
 8015a60:	0801a4fc 	.word	0x0801a4fc
 8015a64:	0801a3bc 	.word	0x0801a3bc

08015a68 <rcutils_repl_str>:
 8015a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a6c:	4680      	mov	r8, r0
 8015a6e:	b089      	sub	sp, #36	; 0x24
 8015a70:	4608      	mov	r0, r1
 8015a72:	2600      	movs	r6, #0
 8015a74:	468a      	mov	sl, r1
 8015a76:	4699      	mov	r9, r3
 8015a78:	f8cd 8004 	str.w	r8, [sp, #4]
 8015a7c:	9206      	str	r2, [sp, #24]
 8015a7e:	f7ea fbe1 	bl	8000244 <strlen>
 8015a82:	4637      	mov	r7, r6
 8015a84:	46b3      	mov	fp, r6
 8015a86:	2510      	movs	r5, #16
 8015a88:	9002      	str	r0, [sp, #8]
 8015a8a:	e01e      	b.n	8015aca <rcutils_repl_str+0x62>
 8015a8c:	f10b 0b01 	add.w	fp, fp, #1
 8015a90:	455e      	cmp	r6, fp
 8015a92:	d211      	bcs.n	8015ab8 <rcutils_repl_str+0x50>
 8015a94:	442e      	add	r6, r5
 8015a96:	4638      	mov	r0, r7
 8015a98:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015a9c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015aa0:	00b1      	lsls	r1, r6, #2
 8015aa2:	4798      	blx	r3
 8015aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d074      	beq.n	8015b96 <rcutils_repl_str+0x12e>
 8015aac:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8015ab0:	bf28      	it	cs
 8015ab2:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8015ab6:	4607      	mov	r7, r0
 8015ab8:	9a01      	ldr	r2, [sp, #4]
 8015aba:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8015abe:	1aa2      	subs	r2, r4, r2
 8015ac0:	f843 2c04 	str.w	r2, [r3, #-4]
 8015ac4:	9b02      	ldr	r3, [sp, #8]
 8015ac6:	eb04 0803 	add.w	r8, r4, r3
 8015aca:	4651      	mov	r1, sl
 8015acc:	4640      	mov	r0, r8
 8015ace:	f002 f803 	bl	8017ad8 <strstr>
 8015ad2:	4604      	mov	r4, r0
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d1d9      	bne.n	8015a8c <rcutils_repl_str+0x24>
 8015ad8:	4640      	mov	r0, r8
 8015ada:	f7ea fbb3 	bl	8000244 <strlen>
 8015ade:	9b01      	ldr	r3, [sp, #4]
 8015ae0:	eba8 0303 	sub.w	r3, r8, r3
 8015ae4:	181d      	adds	r5, r3, r0
 8015ae6:	9505      	str	r5, [sp, #20]
 8015ae8:	f1bb 0f00 	cmp.w	fp, #0
 8015aec:	d03d      	beq.n	8015b6a <rcutils_repl_str+0x102>
 8015aee:	9806      	ldr	r0, [sp, #24]
 8015af0:	f7ea fba8 	bl	8000244 <strlen>
 8015af4:	9b02      	ldr	r3, [sp, #8]
 8015af6:	4682      	mov	sl, r0
 8015af8:	1ac3      	subs	r3, r0, r3
 8015afa:	fb0b 5303 	mla	r3, fp, r3, r5
 8015afe:	461a      	mov	r2, r3
 8015b00:	9307      	str	r3, [sp, #28]
 8015b02:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015b06:	f8d9 3000 	ldr.w	r3, [r9]
 8015b0a:	1c50      	adds	r0, r2, #1
 8015b0c:	4798      	blx	r3
 8015b0e:	9004      	str	r0, [sp, #16]
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d040      	beq.n	8015b96 <rcutils_repl_str+0x12e>
 8015b14:	463e      	mov	r6, r7
 8015b16:	683a      	ldr	r2, [r7, #0]
 8015b18:	9901      	ldr	r1, [sp, #4]
 8015b1a:	f001 fdd3 	bl	80176c4 <memcpy>
 8015b1e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8015b22:	683d      	ldr	r5, [r7, #0]
 8015b24:	9303      	str	r3, [sp, #12]
 8015b26:	9b04      	ldr	r3, [sp, #16]
 8015b28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015b2c:	441d      	add	r5, r3
 8015b2e:	4652      	mov	r2, sl
 8015b30:	4641      	mov	r1, r8
 8015b32:	4628      	mov	r0, r5
 8015b34:	f001 fdc6 	bl	80176c4 <memcpy>
 8015b38:	f856 2b04 	ldr.w	r2, [r6], #4
 8015b3c:	9b02      	ldr	r3, [sp, #8]
 8015b3e:	eb05 000a 	add.w	r0, r5, sl
 8015b42:	441a      	add	r2, r3
 8015b44:	9b01      	ldr	r3, [sp, #4]
 8015b46:	1899      	adds	r1, r3, r2
 8015b48:	9b03      	ldr	r3, [sp, #12]
 8015b4a:	429c      	cmp	r4, r3
 8015b4c:	bf0c      	ite	eq
 8015b4e:	9b05      	ldreq	r3, [sp, #20]
 8015b50:	6833      	ldrne	r3, [r6, #0]
 8015b52:	3401      	adds	r4, #1
 8015b54:	1a9a      	subs	r2, r3, r2
 8015b56:	1885      	adds	r5, r0, r2
 8015b58:	f001 fdb4 	bl	80176c4 <memcpy>
 8015b5c:	455c      	cmp	r4, fp
 8015b5e:	d3e6      	bcc.n	8015b2e <rcutils_repl_str+0xc6>
 8015b60:	2300      	movs	r3, #0
 8015b62:	9a04      	ldr	r2, [sp, #16]
 8015b64:	9907      	ldr	r1, [sp, #28]
 8015b66:	5453      	strb	r3, [r2, r1]
 8015b68:	e00b      	b.n	8015b82 <rcutils_repl_str+0x11a>
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	f8d9 3000 	ldr.w	r3, [r9]
 8015b70:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015b74:	3001      	adds	r0, #1
 8015b76:	4798      	blx	r3
 8015b78:	9004      	str	r0, [sp, #16]
 8015b7a:	b110      	cbz	r0, 8015b82 <rcutils_repl_str+0x11a>
 8015b7c:	9901      	ldr	r1, [sp, #4]
 8015b7e:	f001 ff84 	bl	8017a8a <strcpy>
 8015b82:	4638      	mov	r0, r7
 8015b84:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015b88:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015b8c:	4798      	blx	r3
 8015b8e:	9804      	ldr	r0, [sp, #16]
 8015b90:	b009      	add	sp, #36	; 0x24
 8015b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b96:	2300      	movs	r3, #0
 8015b98:	9304      	str	r3, [sp, #16]
 8015b9a:	e7f2      	b.n	8015b82 <rcutils_repl_str+0x11a>

08015b9c <rcutils_snprintf>:
 8015b9c:	b40c      	push	{r2, r3}
 8015b9e:	b530      	push	{r4, r5, lr}
 8015ba0:	b083      	sub	sp, #12
 8015ba2:	ab06      	add	r3, sp, #24
 8015ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ba8:	9301      	str	r3, [sp, #4]
 8015baa:	b152      	cbz	r2, 8015bc2 <rcutils_snprintf+0x26>
 8015bac:	b138      	cbz	r0, 8015bbe <rcutils_snprintf+0x22>
 8015bae:	b141      	cbz	r1, 8015bc2 <rcutils_snprintf+0x26>
 8015bb0:	f002 f85c 	bl	8017c6c <vsniprintf>
 8015bb4:	b003      	add	sp, #12
 8015bb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015bba:	b002      	add	sp, #8
 8015bbc:	4770      	bx	lr
 8015bbe:	2900      	cmp	r1, #0
 8015bc0:	d0f6      	beq.n	8015bb0 <rcutils_snprintf+0x14>
 8015bc2:	f001 fcff 	bl	80175c4 <__errno>
 8015bc6:	2216      	movs	r2, #22
 8015bc8:	4603      	mov	r3, r0
 8015bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bce:	601a      	str	r2, [r3, #0]
 8015bd0:	e7f0      	b.n	8015bb4 <rcutils_snprintf+0x18>
 8015bd2:	bf00      	nop

08015bd4 <rcutils_vsnprintf>:
 8015bd4:	b570      	push	{r4, r5, r6, lr}
 8015bd6:	b13a      	cbz	r2, 8015be8 <rcutils_vsnprintf+0x14>
 8015bd8:	b120      	cbz	r0, 8015be4 <rcutils_vsnprintf+0x10>
 8015bda:	b129      	cbz	r1, 8015be8 <rcutils_vsnprintf+0x14>
 8015bdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015be0:	f002 b844 	b.w	8017c6c <vsniprintf>
 8015be4:	2900      	cmp	r1, #0
 8015be6:	d0f9      	beq.n	8015bdc <rcutils_vsnprintf+0x8>
 8015be8:	f001 fcec 	bl	80175c4 <__errno>
 8015bec:	2316      	movs	r3, #22
 8015bee:	6003      	str	r3, [r0, #0]
 8015bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bf4:	bd70      	pop	{r4, r5, r6, pc}
 8015bf6:	bf00      	nop

08015bf8 <rcutils_strdup>:
 8015bf8:	b084      	sub	sp, #16
 8015bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfc:	ac07      	add	r4, sp, #28
 8015bfe:	4605      	mov	r5, r0
 8015c00:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8015c04:	b1a0      	cbz	r0, 8015c30 <rcutils_strdup+0x38>
 8015c06:	f7ea fb1d 	bl	8000244 <strlen>
 8015c0a:	1c47      	adds	r7, r0, #1
 8015c0c:	4606      	mov	r6, r0
 8015c0e:	9b07      	ldr	r3, [sp, #28]
 8015c10:	4638      	mov	r0, r7
 8015c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c14:	4798      	blx	r3
 8015c16:	4604      	mov	r4, r0
 8015c18:	b128      	cbz	r0, 8015c26 <rcutils_strdup+0x2e>
 8015c1a:	463a      	mov	r2, r7
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	f001 fd51 	bl	80176c4 <memcpy>
 8015c22:	2300      	movs	r3, #0
 8015c24:	55a3      	strb	r3, [r4, r6]
 8015c26:	4620      	mov	r0, r4
 8015c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c2c:	b004      	add	sp, #16
 8015c2e:	4770      	bx	lr
 8015c30:	4604      	mov	r4, r0
 8015c32:	4620      	mov	r0, r4
 8015c34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c38:	b004      	add	sp, #16
 8015c3a:	4770      	bx	lr

08015c3c <rcutils_strndup>:
 8015c3c:	b082      	sub	sp, #8
 8015c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c40:	ac06      	add	r4, sp, #24
 8015c42:	4605      	mov	r5, r0
 8015c44:	e884 000c 	stmia.w	r4, {r2, r3}
 8015c48:	b188      	cbz	r0, 8015c6e <rcutils_strndup+0x32>
 8015c4a:	1c4f      	adds	r7, r1, #1
 8015c4c:	460e      	mov	r6, r1
 8015c4e:	4638      	mov	r0, r7
 8015c50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015c52:	4790      	blx	r2
 8015c54:	4604      	mov	r4, r0
 8015c56:	b128      	cbz	r0, 8015c64 <rcutils_strndup+0x28>
 8015c58:	463a      	mov	r2, r7
 8015c5a:	4629      	mov	r1, r5
 8015c5c:	f001 fd32 	bl	80176c4 <memcpy>
 8015c60:	2300      	movs	r3, #0
 8015c62:	55a3      	strb	r3, [r4, r6]
 8015c64:	4620      	mov	r0, r4
 8015c66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015c6a:	b002      	add	sp, #8
 8015c6c:	4770      	bx	lr
 8015c6e:	4604      	mov	r4, r0
 8015c70:	e7f8      	b.n	8015c64 <rcutils_strndup+0x28>
 8015c72:	bf00      	nop

08015c74 <rmw_get_zero_initialized_context>:
 8015c74:	b510      	push	{r4, lr}
 8015c76:	4604      	mov	r4, r0
 8015c78:	2250      	movs	r2, #80	; 0x50
 8015c7a:	2100      	movs	r1, #0
 8015c7c:	f001 fd4a 	bl	8017714 <memset>
 8015c80:	4620      	mov	r0, r4
 8015c82:	bd10      	pop	{r4, pc}

08015c84 <rmw_validate_namespace_with_size>:
 8015c84:	b340      	cbz	r0, 8015cd8 <rmw_validate_namespace_with_size+0x54>
 8015c86:	b5d0      	push	{r4, r6, r7, lr}
 8015c88:	4614      	mov	r4, r2
 8015c8a:	b0c2      	sub	sp, #264	; 0x108
 8015c8c:	b332      	cbz	r2, 8015cdc <rmw_validate_namespace_with_size+0x58>
 8015c8e:	2901      	cmp	r1, #1
 8015c90:	460f      	mov	r7, r1
 8015c92:	461e      	mov	r6, r3
 8015c94:	d102      	bne.n	8015c9c <rmw_validate_namespace_with_size+0x18>
 8015c96:	7803      	ldrb	r3, [r0, #0]
 8015c98:	2b2f      	cmp	r3, #47	; 0x2f
 8015c9a:	d019      	beq.n	8015cd0 <rmw_validate_namespace_with_size+0x4c>
 8015c9c:	4669      	mov	r1, sp
 8015c9e:	aa01      	add	r2, sp, #4
 8015ca0:	f7f5 fd84 	bl	800b7ac <rmw_validate_full_topic_name>
 8015ca4:	b990      	cbnz	r0, 8015ccc <rmw_validate_namespace_with_size+0x48>
 8015ca6:	9b00      	ldr	r3, [sp, #0]
 8015ca8:	b14b      	cbz	r3, 8015cbe <rmw_validate_namespace_with_size+0x3a>
 8015caa:	2b07      	cmp	r3, #7
 8015cac:	d007      	beq.n	8015cbe <rmw_validate_namespace_with_size+0x3a>
 8015cae:	1e5a      	subs	r2, r3, #1
 8015cb0:	2a05      	cmp	r2, #5
 8015cb2:	d82b      	bhi.n	8015d0c <rmw_validate_namespace_with_size+0x88>
 8015cb4:	e8df f002 	tbb	[pc, r2]
 8015cb8:	24211e1b 	.word	0x24211e1b
 8015cbc:	1427      	.short	0x1427
 8015cbe:	2ff5      	cmp	r7, #245	; 0xf5
 8015cc0:	d906      	bls.n	8015cd0 <rmw_validate_namespace_with_size+0x4c>
 8015cc2:	2307      	movs	r3, #7
 8015cc4:	6023      	str	r3, [r4, #0]
 8015cc6:	b10e      	cbz	r6, 8015ccc <rmw_validate_namespace_with_size+0x48>
 8015cc8:	23f4      	movs	r3, #244	; 0xf4
 8015cca:	6033      	str	r3, [r6, #0]
 8015ccc:	b042      	add	sp, #264	; 0x108
 8015cce:	bdd0      	pop	{r4, r6, r7, pc}
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	6020      	str	r0, [r4, #0]
 8015cd4:	b042      	add	sp, #264	; 0x108
 8015cd6:	bdd0      	pop	{r4, r6, r7, pc}
 8015cd8:	200b      	movs	r0, #11
 8015cda:	4770      	bx	lr
 8015cdc:	200b      	movs	r0, #11
 8015cde:	e7f5      	b.n	8015ccc <rmw_validate_namespace_with_size+0x48>
 8015ce0:	2306      	movs	r3, #6
 8015ce2:	6023      	str	r3, [r4, #0]
 8015ce4:	2e00      	cmp	r6, #0
 8015ce6:	d0f1      	beq.n	8015ccc <rmw_validate_namespace_with_size+0x48>
 8015ce8:	9b01      	ldr	r3, [sp, #4]
 8015cea:	6033      	str	r3, [r6, #0]
 8015cec:	e7ee      	b.n	8015ccc <rmw_validate_namespace_with_size+0x48>
 8015cee:	2301      	movs	r3, #1
 8015cf0:	6023      	str	r3, [r4, #0]
 8015cf2:	e7f7      	b.n	8015ce4 <rmw_validate_namespace_with_size+0x60>
 8015cf4:	2302      	movs	r3, #2
 8015cf6:	6023      	str	r3, [r4, #0]
 8015cf8:	e7f4      	b.n	8015ce4 <rmw_validate_namespace_with_size+0x60>
 8015cfa:	2303      	movs	r3, #3
 8015cfc:	6023      	str	r3, [r4, #0]
 8015cfe:	e7f1      	b.n	8015ce4 <rmw_validate_namespace_with_size+0x60>
 8015d00:	2304      	movs	r3, #4
 8015d02:	6023      	str	r3, [r4, #0]
 8015d04:	e7ee      	b.n	8015ce4 <rmw_validate_namespace_with_size+0x60>
 8015d06:	2305      	movs	r3, #5
 8015d08:	6023      	str	r3, [r4, #0]
 8015d0a:	e7eb      	b.n	8015ce4 <rmw_validate_namespace_with_size+0x60>
 8015d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015d10:	4a02      	ldr	r2, [pc, #8]	; (8015d1c <rmw_validate_namespace_with_size+0x98>)
 8015d12:	a802      	add	r0, sp, #8
 8015d14:	f7ff ff42 	bl	8015b9c <rcutils_snprintf>
 8015d18:	2001      	movs	r0, #1
 8015d1a:	e7d7      	b.n	8015ccc <rmw_validate_namespace_with_size+0x48>
 8015d1c:	0801a3f4 	.word	0x0801a3f4

08015d20 <rmw_validate_namespace>:
 8015d20:	b168      	cbz	r0, 8015d3e <rmw_validate_namespace+0x1e>
 8015d22:	b570      	push	{r4, r5, r6, lr}
 8015d24:	460d      	mov	r5, r1
 8015d26:	4616      	mov	r6, r2
 8015d28:	4604      	mov	r4, r0
 8015d2a:	f7ea fa8b 	bl	8000244 <strlen>
 8015d2e:	4633      	mov	r3, r6
 8015d30:	4601      	mov	r1, r0
 8015d32:	462a      	mov	r2, r5
 8015d34:	4620      	mov	r0, r4
 8015d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d3a:	f7ff bfa3 	b.w	8015c84 <rmw_validate_namespace_with_size>
 8015d3e:	200b      	movs	r0, #11
 8015d40:	4770      	bx	lr
 8015d42:	bf00      	nop

08015d44 <rmw_namespace_validation_result_string>:
 8015d44:	2807      	cmp	r0, #7
 8015d46:	bf9a      	itte	ls
 8015d48:	4b02      	ldrls	r3, [pc, #8]	; (8015d54 <rmw_namespace_validation_result_string+0x10>)
 8015d4a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015d4e:	4802      	ldrhi	r0, [pc, #8]	; (8015d58 <rmw_namespace_validation_result_string+0x14>)
 8015d50:	4770      	bx	lr
 8015d52:	bf00      	nop
 8015d54:	0801a5ec 	.word	0x0801a5ec
 8015d58:	0801a444 	.word	0x0801a444

08015d5c <rmw_validate_node_name>:
 8015d5c:	2800      	cmp	r0, #0
 8015d5e:	d03b      	beq.n	8015dd8 <rmw_validate_node_name+0x7c>
 8015d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d64:	460f      	mov	r7, r1
 8015d66:	2900      	cmp	r1, #0
 8015d68:	d038      	beq.n	8015ddc <rmw_validate_node_name+0x80>
 8015d6a:	4615      	mov	r5, r2
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	f7ea fa69 	bl	8000244 <strlen>
 8015d72:	b1e0      	cbz	r0, 8015dae <rmw_validate_node_name+0x52>
 8015d74:	1e63      	subs	r3, r4, #1
 8015d76:	eb03 0e00 	add.w	lr, r3, r0
 8015d7a:	f1c4 0c01 	rsb	ip, r4, #1
 8015d7e:	eb0c 0803 	add.w	r8, ip, r3
 8015d82:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8015d86:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8015d8a:	f026 0220 	bic.w	r2, r6, #32
 8015d8e:	2909      	cmp	r1, #9
 8015d90:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8015d94:	d913      	bls.n	8015dbe <rmw_validate_node_name+0x62>
 8015d96:	2a19      	cmp	r2, #25
 8015d98:	d911      	bls.n	8015dbe <rmw_validate_node_name+0x62>
 8015d9a:	2e5f      	cmp	r6, #95	; 0x5f
 8015d9c:	d00f      	beq.n	8015dbe <rmw_validate_node_name+0x62>
 8015d9e:	2302      	movs	r3, #2
 8015da0:	603b      	str	r3, [r7, #0]
 8015da2:	b10d      	cbz	r5, 8015da8 <rmw_validate_node_name+0x4c>
 8015da4:	f8c5 8000 	str.w	r8, [r5]
 8015da8:	2000      	movs	r0, #0
 8015daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dae:	2301      	movs	r3, #1
 8015db0:	603b      	str	r3, [r7, #0]
 8015db2:	2d00      	cmp	r5, #0
 8015db4:	d0f8      	beq.n	8015da8 <rmw_validate_node_name+0x4c>
 8015db6:	2000      	movs	r0, #0
 8015db8:	6028      	str	r0, [r5, #0]
 8015dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dbe:	4573      	cmp	r3, lr
 8015dc0:	d1dd      	bne.n	8015d7e <rmw_validate_node_name+0x22>
 8015dc2:	7822      	ldrb	r2, [r4, #0]
 8015dc4:	4b0d      	ldr	r3, [pc, #52]	; (8015dfc <rmw_validate_node_name+0xa0>)
 8015dc6:	5cd3      	ldrb	r3, [r2, r3]
 8015dc8:	f013 0304 	ands.w	r3, r3, #4
 8015dcc:	d110      	bne.n	8015df0 <rmw_validate_node_name+0x94>
 8015dce:	28ff      	cmp	r0, #255	; 0xff
 8015dd0:	d806      	bhi.n	8015de0 <rmw_validate_node_name+0x84>
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	603b      	str	r3, [r7, #0]
 8015dd6:	e7e8      	b.n	8015daa <rmw_validate_node_name+0x4e>
 8015dd8:	200b      	movs	r0, #11
 8015dda:	4770      	bx	lr
 8015ddc:	200b      	movs	r0, #11
 8015dde:	e7e4      	b.n	8015daa <rmw_validate_node_name+0x4e>
 8015de0:	2204      	movs	r2, #4
 8015de2:	603a      	str	r2, [r7, #0]
 8015de4:	2d00      	cmp	r5, #0
 8015de6:	d0df      	beq.n	8015da8 <rmw_validate_node_name+0x4c>
 8015de8:	22fe      	movs	r2, #254	; 0xfe
 8015dea:	4618      	mov	r0, r3
 8015dec:	602a      	str	r2, [r5, #0]
 8015dee:	e7dc      	b.n	8015daa <rmw_validate_node_name+0x4e>
 8015df0:	2303      	movs	r3, #3
 8015df2:	603b      	str	r3, [r7, #0]
 8015df4:	2d00      	cmp	r5, #0
 8015df6:	d1de      	bne.n	8015db6 <rmw_validate_node_name+0x5a>
 8015df8:	e7d6      	b.n	8015da8 <rmw_validate_node_name+0x4c>
 8015dfa:	bf00      	nop
 8015dfc:	0801a755 	.word	0x0801a755

08015e00 <rmw_node_name_validation_result_string>:
 8015e00:	2804      	cmp	r0, #4
 8015e02:	bf9a      	itte	ls
 8015e04:	4b02      	ldrls	r3, [pc, #8]	; (8015e10 <rmw_node_name_validation_result_string+0x10>)
 8015e06:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015e0a:	4802      	ldrhi	r0, [pc, #8]	; (8015e14 <rmw_node_name_validation_result_string+0x14>)
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	0801a6f8 	.word	0x0801a6f8
 8015e14:	0801a60c 	.word	0x0801a60c

08015e18 <on_status>:
 8015e18:	b082      	sub	sp, #8
 8015e1a:	b002      	add	sp, #8
 8015e1c:	4770      	bx	lr
 8015e1e:	bf00      	nop

08015e20 <on_topic>:
 8015e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e24:	4a21      	ldr	r2, [pc, #132]	; (8015eac <on_topic+0x8c>)
 8015e26:	b094      	sub	sp, #80	; 0x50
 8015e28:	6812      	ldr	r2, [r2, #0]
 8015e2a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015e2c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8015e30:	9113      	str	r1, [sp, #76]	; 0x4c
 8015e32:	9312      	str	r3, [sp, #72]	; 0x48
 8015e34:	b3ba      	cbz	r2, 8015ea6 <on_topic+0x86>
 8015e36:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8015e3a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8015e3e:	e001      	b.n	8015e44 <on_topic+0x24>
 8015e40:	6892      	ldr	r2, [r2, #8]
 8015e42:	b382      	cbz	r2, 8015ea6 <on_topic+0x86>
 8015e44:	68d4      	ldr	r4, [r2, #12]
 8015e46:	8aa3      	ldrh	r3, [r4, #20]
 8015e48:	428b      	cmp	r3, r1
 8015e4a:	d1f9      	bne.n	8015e40 <on_topic+0x20>
 8015e4c:	7da3      	ldrb	r3, [r4, #22]
 8015e4e:	4283      	cmp	r3, r0
 8015e50:	d1f6      	bne.n	8015e40 <on_topic+0x20>
 8015e52:	2248      	movs	r2, #72	; 0x48
 8015e54:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015e58:	4668      	mov	r0, sp
 8015e5a:	f001 fc33 	bl	80176c4 <memcpy>
 8015e5e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8015e62:	4620      	mov	r0, r4
 8015e64:	f7f6 fdda 	bl	800ca1c <rmw_uxrce_get_static_input_buffer_for_entity>
 8015e68:	4607      	mov	r7, r0
 8015e6a:	b1e0      	cbz	r0, 8015ea6 <on_topic+0x86>
 8015e6c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8015e70:	462a      	mov	r2, r5
 8015e72:	4630      	mov	r0, r6
 8015e74:	f108 0110 	add.w	r1, r8, #16
 8015e78:	f7f8 f83c 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8015e7c:	b930      	cbnz	r0, 8015e8c <on_topic+0x6c>
 8015e7e:	4639      	mov	r1, r7
 8015e80:	480b      	ldr	r0, [pc, #44]	; (8015eb0 <on_topic+0x90>)
 8015e82:	b014      	add	sp, #80	; 0x50
 8015e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e88:	f000 b8be 	b.w	8016008 <put_memory>
 8015e8c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8015e90:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8015e94:	f7f6 fbf4 	bl	800c680 <rmw_uros_epoch_nanos>
 8015e98:	2305      	movs	r3, #5
 8015e9a:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8015e9e:	e9c2 0100 	strd	r0, r1, [r2]
 8015ea2:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8015ea6:	b014      	add	sp, #80	; 0x50
 8015ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eac:	2000bf74 	.word	0x2000bf74
 8015eb0:	20008d08 	.word	0x20008d08

08015eb4 <on_request>:
 8015eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015eb8:	4823      	ldr	r0, [pc, #140]	; (8015f48 <on_request+0x94>)
 8015eba:	b095      	sub	sp, #84	; 0x54
 8015ebc:	6800      	ldr	r0, [r0, #0]
 8015ebe:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8015ec2:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8015ec6:	9113      	str	r1, [sp, #76]	; 0x4c
 8015ec8:	2800      	cmp	r0, #0
 8015eca:	d039      	beq.n	8015f40 <on_request+0x8c>
 8015ecc:	461d      	mov	r5, r3
 8015ece:	e001      	b.n	8015ed4 <on_request+0x20>
 8015ed0:	6880      	ldr	r0, [r0, #8]
 8015ed2:	b3a8      	cbz	r0, 8015f40 <on_request+0x8c>
 8015ed4:	68c4      	ldr	r4, [r0, #12]
 8015ed6:	8b21      	ldrh	r1, [r4, #24]
 8015ed8:	4291      	cmp	r1, r2
 8015eda:	d1f9      	bne.n	8015ed0 <on_request+0x1c>
 8015edc:	2248      	movs	r2, #72	; 0x48
 8015ede:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015ee2:	4668      	mov	r0, sp
 8015ee4:	f001 fbee 	bl	80176c4 <memcpy>
 8015ee8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8015eec:	4620      	mov	r0, r4
 8015eee:	f7f6 fd95 	bl	800ca1c <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ef2:	4606      	mov	r6, r0
 8015ef4:	b320      	cbz	r0, 8015f40 <on_request+0x8c>
 8015ef6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8015efa:	463a      	mov	r2, r7
 8015efc:	4640      	mov	r0, r8
 8015efe:	f109 0110 	add.w	r1, r9, #16
 8015f02:	f7f7 fff7 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8015f06:	b930      	cbnz	r0, 8015f16 <on_request+0x62>
 8015f08:	4631      	mov	r1, r6
 8015f0a:	4810      	ldr	r0, [pc, #64]	; (8015f4c <on_request+0x98>)
 8015f0c:	b015      	add	sp, #84	; 0x54
 8015f0e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f12:	f000 b879 	b.w	8016008 <put_memory>
 8015f16:	f609 0628 	addw	r6, r9, #2088	; 0x828
 8015f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f1c:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8015f20:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 8015f24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015f26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015f2a:	e886 0003 	stmia.w	r6, {r0, r1}
 8015f2e:	f7f6 fba7 	bl	800c680 <rmw_uros_epoch_nanos>
 8015f32:	2303      	movs	r3, #3
 8015f34:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015f38:	e9c2 0100 	strd	r0, r1, [r2]
 8015f3c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8015f40:	b015      	add	sp, #84	; 0x54
 8015f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f46:	bf00      	nop
 8015f48:	2000bf64 	.word	0x2000bf64
 8015f4c:	20008d08 	.word	0x20008d08

08015f50 <on_reply>:
 8015f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f54:	4822      	ldr	r0, [pc, #136]	; (8015fe0 <on_reply+0x90>)
 8015f56:	b095      	sub	sp, #84	; 0x54
 8015f58:	6800      	ldr	r0, [r0, #0]
 8015f5a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8015f5e:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 8015f62:	9113      	str	r1, [sp, #76]	; 0x4c
 8015f64:	2800      	cmp	r0, #0
 8015f66:	d037      	beq.n	8015fd8 <on_reply+0x88>
 8015f68:	461d      	mov	r5, r3
 8015f6a:	e001      	b.n	8015f70 <on_reply+0x20>
 8015f6c:	6880      	ldr	r0, [r0, #8]
 8015f6e:	b398      	cbz	r0, 8015fd8 <on_reply+0x88>
 8015f70:	68c4      	ldr	r4, [r0, #12]
 8015f72:	8b21      	ldrh	r1, [r4, #24]
 8015f74:	4291      	cmp	r1, r2
 8015f76:	d1f9      	bne.n	8015f6c <on_reply+0x1c>
 8015f78:	2248      	movs	r2, #72	; 0x48
 8015f7a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015f7e:	4668      	mov	r0, sp
 8015f80:	f001 fba0 	bl	80176c4 <memcpy>
 8015f84:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8015f88:	4620      	mov	r0, r4
 8015f8a:	f7f6 fd47 	bl	800ca1c <rmw_uxrce_get_static_input_buffer_for_entity>
 8015f8e:	4606      	mov	r6, r0
 8015f90:	b310      	cbz	r0, 8015fd8 <on_reply+0x88>
 8015f92:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8015f96:	463a      	mov	r2, r7
 8015f98:	4640      	mov	r0, r8
 8015f9a:	f109 0110 	add.w	r1, r9, #16
 8015f9e:	f7f7 ffa9 	bl	800def4 <ucdr_deserialize_array_uint8_t>
 8015fa2:	b930      	cbnz	r0, 8015fb2 <on_reply+0x62>
 8015fa4:	4631      	mov	r1, r6
 8015fa6:	480f      	ldr	r0, [pc, #60]	; (8015fe4 <on_reply+0x94>)
 8015fa8:	b015      	add	sp, #84	; 0x54
 8015faa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fae:	f000 b82b 	b.w	8016008 <put_memory>
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	b2aa      	uxth	r2, r5
 8015fb6:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8015fba:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8015fbe:	f8c9 7810 	str.w	r7, [r9, #2064]	; 0x810
 8015fc2:	e9c1 2300 	strd	r2, r3, [r1]
 8015fc6:	f7f6 fb5b 	bl	800c680 <rmw_uros_epoch_nanos>
 8015fca:	2304      	movs	r3, #4
 8015fcc:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015fd0:	e9c2 0100 	strd	r0, r1, [r2]
 8015fd4:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8015fd8:	b015      	add	sp, #84	; 0x54
 8015fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fde:	bf00      	nop
 8015fe0:	20009598 	.word	0x20009598
 8015fe4:	20008d08 	.word	0x20008d08

08015fe8 <get_memory>:
 8015fe8:	4603      	mov	r3, r0
 8015fea:	6840      	ldr	r0, [r0, #4]
 8015fec:	b158      	cbz	r0, 8016006 <get_memory+0x1e>
 8015fee:	6882      	ldr	r2, [r0, #8]
 8015ff0:	605a      	str	r2, [r3, #4]
 8015ff2:	b10a      	cbz	r2, 8015ff8 <get_memory+0x10>
 8015ff4:	2100      	movs	r1, #0
 8015ff6:	6051      	str	r1, [r2, #4]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	6082      	str	r2, [r0, #8]
 8015ffc:	b102      	cbz	r2, 8016000 <get_memory+0x18>
 8015ffe:	6050      	str	r0, [r2, #4]
 8016000:	2200      	movs	r2, #0
 8016002:	6042      	str	r2, [r0, #4]
 8016004:	6018      	str	r0, [r3, #0]
 8016006:	4770      	bx	lr

08016008 <put_memory>:
 8016008:	684b      	ldr	r3, [r1, #4]
 801600a:	b10b      	cbz	r3, 8016010 <put_memory+0x8>
 801600c:	688a      	ldr	r2, [r1, #8]
 801600e:	609a      	str	r2, [r3, #8]
 8016010:	688a      	ldr	r2, [r1, #8]
 8016012:	b102      	cbz	r2, 8016016 <put_memory+0xe>
 8016014:	6053      	str	r3, [r2, #4]
 8016016:	6803      	ldr	r3, [r0, #0]
 8016018:	428b      	cmp	r3, r1
 801601a:	6843      	ldr	r3, [r0, #4]
 801601c:	bf08      	it	eq
 801601e:	6002      	streq	r2, [r0, #0]
 8016020:	608b      	str	r3, [r1, #8]
 8016022:	b103      	cbz	r3, 8016026 <put_memory+0x1e>
 8016024:	6059      	str	r1, [r3, #4]
 8016026:	2300      	movs	r3, #0
 8016028:	604b      	str	r3, [r1, #4]
 801602a:	6041      	str	r1, [r0, #4]
 801602c:	4770      	bx	lr
 801602e:	bf00      	nop

08016030 <rmw_destroy_client>:
 8016030:	b570      	push	{r4, r5, r6, lr}
 8016032:	b128      	cbz	r0, 8016040 <rmw_destroy_client+0x10>
 8016034:	4604      	mov	r4, r0
 8016036:	6800      	ldr	r0, [r0, #0]
 8016038:	460d      	mov	r5, r1
 801603a:	f7f6 fe61 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 801603e:	b910      	cbnz	r0, 8016046 <rmw_destroy_client+0x16>
 8016040:	2401      	movs	r4, #1
 8016042:	4620      	mov	r0, r4
 8016044:	bd70      	pop	{r4, r5, r6, pc}
 8016046:	6863      	ldr	r3, [r4, #4]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d0f9      	beq.n	8016040 <rmw_destroy_client+0x10>
 801604c:	2d00      	cmp	r5, #0
 801604e:	d0f7      	beq.n	8016040 <rmw_destroy_client+0x10>
 8016050:	6828      	ldr	r0, [r5, #0]
 8016052:	f7f6 fe55 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 8016056:	2800      	cmp	r0, #0
 8016058:	d0f2      	beq.n	8016040 <rmw_destroy_client+0x10>
 801605a:	686e      	ldr	r6, [r5, #4]
 801605c:	2e00      	cmp	r6, #0
 801605e:	d0ef      	beq.n	8016040 <rmw_destroy_client+0x10>
 8016060:	6864      	ldr	r4, [r4, #4]
 8016062:	6932      	ldr	r2, [r6, #16]
 8016064:	6920      	ldr	r0, [r4, #16]
 8016066:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801606a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801606e:	6819      	ldr	r1, [r3, #0]
 8016070:	f7fa fb4e 	bl	8010710 <uxr_buffer_cancel_data>
 8016074:	4602      	mov	r2, r0
 8016076:	6920      	ldr	r0, [r4, #16]
 8016078:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801607c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016080:	f7f6 fdba 	bl	800cbf8 <run_xrce_session>
 8016084:	6920      	ldr	r0, [r4, #16]
 8016086:	6932      	ldr	r2, [r6, #16]
 8016088:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801608c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016090:	6819      	ldr	r1, [r3, #0]
 8016092:	f7f9 ffff 	bl	8010094 <uxr_buffer_delete_entity>
 8016096:	4602      	mov	r2, r0
 8016098:	6920      	ldr	r0, [r4, #16]
 801609a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801609e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80160a2:	f7f6 fda9 	bl	800cbf8 <run_xrce_session>
 80160a6:	4603      	mov	r3, r0
 80160a8:	4628      	mov	r0, r5
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	bf14      	ite	ne
 80160ae:	2400      	movne	r4, #0
 80160b0:	2402      	moveq	r4, #2
 80160b2:	f7f6 fc91 	bl	800c9d8 <rmw_uxrce_fini_client_memory>
 80160b6:	e7c4      	b.n	8016042 <rmw_destroy_client+0x12>

080160b8 <rmw_get_implementation_identifier>:
 80160b8:	4b01      	ldr	r3, [pc, #4]	; (80160c0 <rmw_get_implementation_identifier+0x8>)
 80160ba:	6818      	ldr	r0, [r3, #0]
 80160bc:	4770      	bx	lr
 80160be:	bf00      	nop
 80160c0:	0801a724 	.word	0x0801a724

080160c4 <create_topic>:
 80160c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80160c8:	4605      	mov	r5, r0
 80160ca:	b085      	sub	sp, #20
 80160cc:	4821      	ldr	r0, [pc, #132]	; (8016154 <create_topic+0x90>)
 80160ce:	460f      	mov	r7, r1
 80160d0:	4616      	mov	r6, r2
 80160d2:	f7ff ff89 	bl	8015fe8 <get_memory>
 80160d6:	4604      	mov	r4, r0
 80160d8:	b390      	cbz	r0, 8016140 <create_topic+0x7c>
 80160da:	f241 5396 	movw	r3, #5526	; 0x1596
 80160de:	692a      	ldr	r2, [r5, #16]
 80160e0:	68c4      	ldr	r4, [r0, #12]
 80160e2:	5ad0      	ldrh	r0, [r2, r3]
 80160e4:	61a5      	str	r5, [r4, #24]
 80160e6:	1c41      	adds	r1, r0, #1
 80160e8:	6166      	str	r6, [r4, #20]
 80160ea:	52d1      	strh	r1, [r2, r3]
 80160ec:	2102      	movs	r1, #2
 80160ee:	f7fa faa7 	bl	8010640 <uxr_object_id>
 80160f2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8016158 <create_topic+0x94>
 80160f6:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801615c <create_topic+0x98>
 80160fa:	4641      	mov	r1, r8
 80160fc:	223c      	movs	r2, #60	; 0x3c
 80160fe:	6120      	str	r0, [r4, #16]
 8016100:	4638      	mov	r0, r7
 8016102:	f7f6 fde7 	bl	800ccd4 <generate_topic_name>
 8016106:	4649      	mov	r1, r9
 8016108:	2264      	movs	r2, #100	; 0x64
 801610a:	4630      	mov	r0, r6
 801610c:	f7f6 fda8 	bl	800cc60 <generate_type_name>
 8016110:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8016114:	2106      	movs	r1, #6
 8016116:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801611a:	e9cd 8900 	strd	r8, r9, [sp]
 801611e:	9102      	str	r1, [sp, #8]
 8016120:	6811      	ldr	r1, [r2, #0]
 8016122:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016126:	6922      	ldr	r2, [r4, #16]
 8016128:	f7fa f83a 	bl	80101a0 <uxr_buffer_create_topic_bin>
 801612c:	4602      	mov	r2, r0
 801612e:	6928      	ldr	r0, [r5, #16]
 8016130:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016134:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016138:	f7f6 fd5e 	bl	800cbf8 <run_xrce_session>
 801613c:	4605      	mov	r5, r0
 801613e:	b118      	cbz	r0, 8016148 <create_topic+0x84>
 8016140:	4620      	mov	r0, r4
 8016142:	b005      	add	sp, #20
 8016144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016148:	4620      	mov	r0, r4
 801614a:	f7f6 fc5b 	bl	800ca04 <rmw_uxrce_fini_topic_memory>
 801614e:	462c      	mov	r4, r5
 8016150:	e7f6      	b.n	8016140 <create_topic+0x7c>
 8016152:	bf00      	nop
 8016154:	2000bea0 	.word	0x2000bea0
 8016158:	200067a8 	.word	0x200067a8
 801615c:	200067e4 	.word	0x200067e4

08016160 <destroy_topic>:
 8016160:	b538      	push	{r3, r4, r5, lr}
 8016162:	6985      	ldr	r5, [r0, #24]
 8016164:	b1dd      	cbz	r5, 801619e <destroy_topic+0x3e>
 8016166:	4604      	mov	r4, r0
 8016168:	6928      	ldr	r0, [r5, #16]
 801616a:	6922      	ldr	r2, [r4, #16]
 801616c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016170:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016174:	6819      	ldr	r1, [r3, #0]
 8016176:	f7f9 ff8d 	bl	8010094 <uxr_buffer_delete_entity>
 801617a:	4602      	mov	r2, r0
 801617c:	6928      	ldr	r0, [r5, #16]
 801617e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016182:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016186:	f7f6 fd37 	bl	800cbf8 <run_xrce_session>
 801618a:	4603      	mov	r3, r0
 801618c:	2b00      	cmp	r3, #0
 801618e:	4620      	mov	r0, r4
 8016190:	bf14      	ite	ne
 8016192:	2400      	movne	r4, #0
 8016194:	2402      	moveq	r4, #2
 8016196:	f7f6 fc35 	bl	800ca04 <rmw_uxrce_fini_topic_memory>
 801619a:	4620      	mov	r0, r4
 801619c:	bd38      	pop	{r3, r4, r5, pc}
 801619e:	2401      	movs	r4, #1
 80161a0:	4620      	mov	r0, r4
 80161a2:	bd38      	pop	{r3, r4, r5, pc}

080161a4 <rmw_take_request>:
 80161a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161a8:	4605      	mov	r5, r0
 80161aa:	6800      	ldr	r0, [r0, #0]
 80161ac:	460c      	mov	r4, r1
 80161ae:	4690      	mov	r8, r2
 80161b0:	461e      	mov	r6, r3
 80161b2:	b089      	sub	sp, #36	; 0x24
 80161b4:	b128      	cbz	r0, 80161c2 <rmw_take_request+0x1e>
 80161b6:	4b28      	ldr	r3, [pc, #160]	; (8016258 <rmw_take_request+0xb4>)
 80161b8:	6819      	ldr	r1, [r3, #0]
 80161ba:	f7ea f839 	bl	8000230 <strcmp>
 80161be:	2800      	cmp	r0, #0
 80161c0:	d146      	bne.n	8016250 <rmw_take_request+0xac>
 80161c2:	b10e      	cbz	r6, 80161c8 <rmw_take_request+0x24>
 80161c4:	2300      	movs	r3, #0
 80161c6:	7033      	strb	r3, [r6, #0]
 80161c8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80161cc:	f7f6 fc9c 	bl	800cb08 <rmw_uxrce_clean_expired_static_input_buffer>
 80161d0:	4648      	mov	r0, r9
 80161d2:	f7f6 fc6f 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80161d6:	4607      	mov	r7, r0
 80161d8:	b3b0      	cbz	r0, 8016248 <rmw_take_request+0xa4>
 80161da:	68c5      	ldr	r5, [r0, #12]
 80161dc:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80161e0:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80161e4:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80161e8:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80161ec:	7423      	strb	r3, [r4, #16]
 80161ee:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 80161f2:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 80161f6:	f8a4 2011 	strh.w	r2, [r4, #17]
 80161fa:	74e3      	strb	r3, [r4, #19]
 80161fc:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8016200:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8016204:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8016208:	6161      	str	r1, [r4, #20]
 801620a:	61a2      	str	r2, [r4, #24]
 801620c:	61e3      	str	r3, [r4, #28]
 801620e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016212:	689b      	ldr	r3, [r3, #8]
 8016214:	4798      	blx	r3
 8016216:	6844      	ldr	r4, [r0, #4]
 8016218:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801621c:	4668      	mov	r0, sp
 801621e:	f105 0110 	add.w	r1, r5, #16
 8016222:	f7f9 fde9 	bl	800fdf8 <ucdr_init_buffer>
 8016226:	4641      	mov	r1, r8
 8016228:	68e3      	ldr	r3, [r4, #12]
 801622a:	4668      	mov	r0, sp
 801622c:	4798      	blx	r3
 801622e:	4639      	mov	r1, r7
 8016230:	4604      	mov	r4, r0
 8016232:	480a      	ldr	r0, [pc, #40]	; (801625c <rmw_take_request+0xb8>)
 8016234:	f7ff fee8 	bl	8016008 <put_memory>
 8016238:	b106      	cbz	r6, 801623c <rmw_take_request+0x98>
 801623a:	7034      	strb	r4, [r6, #0]
 801623c:	f084 0001 	eor.w	r0, r4, #1
 8016240:	b2c0      	uxtb	r0, r0
 8016242:	b009      	add	sp, #36	; 0x24
 8016244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016248:	2001      	movs	r0, #1
 801624a:	b009      	add	sp, #36	; 0x24
 801624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016250:	200c      	movs	r0, #12
 8016252:	b009      	add	sp, #36	; 0x24
 8016254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016258:	0801a724 	.word	0x0801a724
 801625c:	20008d08 	.word	0x20008d08

08016260 <rmw_send_response>:
 8016260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016262:	4605      	mov	r5, r0
 8016264:	6800      	ldr	r0, [r0, #0]
 8016266:	460c      	mov	r4, r1
 8016268:	4617      	mov	r7, r2
 801626a:	b091      	sub	sp, #68	; 0x44
 801626c:	b128      	cbz	r0, 801627a <rmw_send_response+0x1a>
 801626e:	4b2a      	ldr	r3, [pc, #168]	; (8016318 <rmw_send_response+0xb8>)
 8016270:	6819      	ldr	r1, [r3, #0]
 8016272:	f7e9 ffdd 	bl	8000230 <strcmp>
 8016276:	2800      	cmp	r0, #0
 8016278:	d143      	bne.n	8016302 <rmw_send_response+0xa2>
 801627a:	4621      	mov	r1, r4
 801627c:	4622      	mov	r2, r4
 801627e:	f831 ef01 	ldrh.w	lr, [r1, #1]!
 8016282:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016286:	f891 c002 	ldrb.w	ip, [r1, #2]
 801628a:	686d      	ldr	r5, [r5, #4]
 801628c:	6851      	ldr	r1, [r2, #4]
 801628e:	6966      	ldr	r6, [r4, #20]
 8016290:	f88d c016 	strb.w	ip, [sp, #22]
 8016294:	6892      	ldr	r2, [r2, #8]
 8016296:	f894 c000 	ldrb.w	ip, [r4]
 801629a:	ab02      	add	r3, sp, #8
 801629c:	f8ad e014 	strh.w	lr, [sp, #20]
 80162a0:	f88d c017 	strb.w	ip, [sp, #23]
 80162a4:	9606      	str	r6, [sp, #24]
 80162a6:	c307      	stmia	r3!, {r0, r1, r2}
 80162a8:	6922      	ldr	r2, [r4, #16]
 80162aa:	696b      	ldr	r3, [r5, #20]
 80162ac:	9207      	str	r2, [sp, #28]
 80162ae:	68db      	ldr	r3, [r3, #12]
 80162b0:	6fae      	ldr	r6, [r5, #120]	; 0x78
 80162b2:	4798      	blx	r3
 80162b4:	6844      	ldr	r4, [r0, #4]
 80162b6:	4638      	mov	r0, r7
 80162b8:	6923      	ldr	r3, [r4, #16]
 80162ba:	4798      	blx	r3
 80162bc:	6932      	ldr	r2, [r6, #16]
 80162be:	3018      	adds	r0, #24
 80162c0:	9000      	str	r0, [sp, #0]
 80162c2:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80162c4:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 80162c8:	ab08      	add	r3, sp, #32
 80162ca:	692a      	ldr	r2, [r5, #16]
 80162cc:	f7fc f91c 	bl	8012508 <uxr_prepare_output_stream>
 80162d0:	b910      	cbnz	r0, 80162d8 <rmw_send_response+0x78>
 80162d2:	2001      	movs	r0, #1
 80162d4:	b011      	add	sp, #68	; 0x44
 80162d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162d8:	a902      	add	r1, sp, #8
 80162da:	a808      	add	r0, sp, #32
 80162dc:	f7fd f88a 	bl	80133f4 <uxr_serialize_SampleIdentity>
 80162e0:	68a3      	ldr	r3, [r4, #8]
 80162e2:	4638      	mov	r0, r7
 80162e4:	a908      	add	r1, sp, #32
 80162e6:	4798      	blx	r3
 80162e8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80162ec:	6930      	ldr	r0, [r6, #16]
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d00a      	beq.n	8016308 <rmw_send_response+0xa8>
 80162f2:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80162f4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80162f8:	f7fb f876 	bl	80113e8 <uxr_run_session_until_confirm_delivery>
 80162fc:	2000      	movs	r0, #0
 80162fe:	b011      	add	sp, #68	; 0x44
 8016300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016302:	200c      	movs	r0, #12
 8016304:	b011      	add	sp, #68	; 0x44
 8016306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016308:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801630c:	f7fa ffda 	bl	80112c4 <uxr_flash_output_streams>
 8016310:	2000      	movs	r0, #0
 8016312:	b011      	add	sp, #68	; 0x44
 8016314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016316:	bf00      	nop
 8016318:	0801a724 	.word	0x0801a724

0801631c <rmw_take_response>:
 801631c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016320:	4604      	mov	r4, r0
 8016322:	6800      	ldr	r0, [r0, #0]
 8016324:	4688      	mov	r8, r1
 8016326:	4617      	mov	r7, r2
 8016328:	461d      	mov	r5, r3
 801632a:	b089      	sub	sp, #36	; 0x24
 801632c:	b120      	cbz	r0, 8016338 <rmw_take_response+0x1c>
 801632e:	4b1f      	ldr	r3, [pc, #124]	; (80163ac <rmw_take_response+0x90>)
 8016330:	6819      	ldr	r1, [r3, #0]
 8016332:	f7e9 ff7d 	bl	8000230 <strcmp>
 8016336:	bb88      	cbnz	r0, 801639c <rmw_take_response+0x80>
 8016338:	b10d      	cbz	r5, 801633e <rmw_take_response+0x22>
 801633a:	2300      	movs	r3, #0
 801633c:	702b      	strb	r3, [r5, #0]
 801633e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016342:	f7f6 fbe1 	bl	800cb08 <rmw_uxrce_clean_expired_static_input_buffer>
 8016346:	4648      	mov	r0, r9
 8016348:	f7f6 fbb4 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801634c:	4606      	mov	r6, r0
 801634e:	b348      	cbz	r0, 80163a4 <rmw_take_response+0x88>
 8016350:	68c4      	ldr	r4, [r0, #12]
 8016352:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8016356:	f604 0328 	addw	r3, r4, #2088	; 0x828
 801635a:	68d1      	ldr	r1, [r2, #12]
 801635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016360:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8016364:	4788      	blx	r1
 8016366:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801636a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801636e:	f104 0110 	add.w	r1, r4, #16
 8016372:	4668      	mov	r0, sp
 8016374:	f7f9 fd40 	bl	800fdf8 <ucdr_init_buffer>
 8016378:	4639      	mov	r1, r7
 801637a:	4668      	mov	r0, sp
 801637c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016380:	4798      	blx	r3
 8016382:	4631      	mov	r1, r6
 8016384:	4604      	mov	r4, r0
 8016386:	480a      	ldr	r0, [pc, #40]	; (80163b0 <rmw_take_response+0x94>)
 8016388:	f7ff fe3e 	bl	8016008 <put_memory>
 801638c:	b105      	cbz	r5, 8016390 <rmw_take_response+0x74>
 801638e:	702c      	strb	r4, [r5, #0]
 8016390:	f084 0001 	eor.w	r0, r4, #1
 8016394:	b2c0      	uxtb	r0, r0
 8016396:	b009      	add	sp, #36	; 0x24
 8016398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801639c:	200c      	movs	r0, #12
 801639e:	b009      	add	sp, #36	; 0x24
 80163a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163a4:	2001      	movs	r0, #1
 80163a6:	b009      	add	sp, #36	; 0x24
 80163a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163ac:	0801a724 	.word	0x0801a724
 80163b0:	20008d08 	.word	0x20008d08

080163b4 <rmw_wait>:
 80163b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163b8:	4698      	mov	r8, r3
 80163ba:	4607      	mov	r7, r0
 80163bc:	460e      	mov	r6, r1
 80163be:	4691      	mov	r9, r2
 80163c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163c2:	2a00      	cmp	r2, #0
 80163c4:	f000 8123 	beq.w	801660e <rmw_wait+0x25a>
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	f000 812c 	beq.w	8016626 <rmw_wait+0x272>
 80163ce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80163d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163d6:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80163da:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 80163de:	ebbb 0b02 	subs.w	fp, fp, r2
 80163e2:	ea4a 6ad2 	orr.w	sl, sl, r2, lsr #27
 80163e6:	eb6a 0a03 	sbc.w	sl, sl, r3
 80163ea:	ea4f 0c8b 	mov.w	ip, fp, lsl #2
 80163ee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80163f2:	ea4a 7a9b 	orr.w	sl, sl, fp, lsr #30
 80163f6:	eb1c 0b02 	adds.w	fp, ip, r2
 80163fa:	eb4a 0a03 	adc.w	sl, sl, r3
 80163fe:	4aab      	ldr	r2, [pc, #684]	; (80166ac <rmw_wait+0x2f8>)
 8016400:	2300      	movs	r3, #0
 8016402:	f7ea f9fb 	bl	80007fc <__aeabi_uldivmod>
 8016406:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801640a:	2300      	movs	r3, #0
 801640c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8016410:	ea4a 7a5b 	orr.w	sl, sl, fp, lsr #29
 8016414:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016418:	eb1b 0400 	adds.w	r4, fp, r0
 801641c:	eb4a 0501 	adc.w	r5, sl, r1
 8016420:	42a2      	cmp	r2, r4
 8016422:	eb73 0105 	sbcs.w	r1, r3, r5
 8016426:	f2c0 80f0 	blt.w	801660a <rmw_wait+0x256>
 801642a:	f7f6 fb6d 	bl	800cb08 <rmw_uxrce_clean_expired_static_input_buffer>
 801642e:	4ba0      	ldr	r3, [pc, #640]	; (80166b0 <rmw_wait+0x2fc>)
 8016430:	681d      	ldr	r5, [r3, #0]
 8016432:	b145      	cbz	r5, 8016446 <rmw_wait+0x92>
 8016434:	462b      	mov	r3, r5
 8016436:	f241 50a4 	movw	r0, #5540	; 0x15a4
 801643a:	2100      	movs	r1, #0
 801643c:	68da      	ldr	r2, [r3, #12]
 801643e:	689b      	ldr	r3, [r3, #8]
 8016440:	5411      	strb	r1, [r2, r0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d1fa      	bne.n	801643c <rmw_wait+0x88>
 8016446:	f1b9 0f00 	cmp.w	r9, #0
 801644a:	d012      	beq.n	8016472 <rmw_wait+0xbe>
 801644c:	f8d9 1000 	ldr.w	r1, [r9]
 8016450:	b179      	cbz	r1, 8016472 <rmw_wait+0xbe>
 8016452:	2300      	movs	r3, #0
 8016454:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8016458:	f04f 0c01 	mov.w	ip, #1
 801645c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8016460:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016464:	3301      	adds	r3, #1
 8016466:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8016468:	4299      	cmp	r1, r3
 801646a:	6912      	ldr	r2, [r2, #16]
 801646c:	f802 c00e 	strb.w	ip, [r2, lr]
 8016470:	d1f6      	bne.n	8016460 <rmw_wait+0xac>
 8016472:	f1b8 0f00 	cmp.w	r8, #0
 8016476:	d012      	beq.n	801649e <rmw_wait+0xea>
 8016478:	f8d8 1000 	ldr.w	r1, [r8]
 801647c:	b179      	cbz	r1, 801649e <rmw_wait+0xea>
 801647e:	2300      	movs	r3, #0
 8016480:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 8016484:	f04f 0c01 	mov.w	ip, #1
 8016488:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801648c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8016490:	3301      	adds	r3, #1
 8016492:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8016494:	4299      	cmp	r1, r3
 8016496:	6912      	ldr	r2, [r2, #16]
 8016498:	f802 c00e 	strb.w	ip, [r2, lr]
 801649c:	d1f6      	bne.n	801648c <rmw_wait+0xd8>
 801649e:	b187      	cbz	r7, 80164c2 <rmw_wait+0x10e>
 80164a0:	6839      	ldr	r1, [r7, #0]
 80164a2:	b171      	cbz	r1, 80164c2 <rmw_wait+0x10e>
 80164a4:	2300      	movs	r3, #0
 80164a6:	f241 5ea4 	movw	lr, #5540	; 0x15a4
 80164aa:	f04f 0c01 	mov.w	ip, #1
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 80164b4:	3301      	adds	r3, #1
 80164b6:	6a12      	ldr	r2, [r2, #32]
 80164b8:	4299      	cmp	r1, r3
 80164ba:	6912      	ldr	r2, [r2, #16]
 80164bc:	f802 c00e 	strb.w	ip, [r2, lr]
 80164c0:	d1f6      	bne.n	80164b0 <rmw_wait+0xfc>
 80164c2:	b355      	cbz	r5, 801651a <rmw_wait+0x166>
 80164c4:	462b      	mov	r3, r5
 80164c6:	f04f 0a00 	mov.w	sl, #0
 80164ca:	f241 51a4 	movw	r1, #5540	; 0x15a4
 80164ce:	68da      	ldr	r2, [r3, #12]
 80164d0:	689b      	ldr	r3, [r3, #8]
 80164d2:	5c50      	ldrb	r0, [r2, r1]
 80164d4:	4450      	add	r0, sl
 80164d6:	fa5f fa80 	uxtb.w	sl, r0
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d1f7      	bne.n	80164ce <rmw_wait+0x11a>
 80164de:	f1ba 0f00 	cmp.w	sl, #0
 80164e2:	d01a      	beq.n	801651a <rmw_wait+0x166>
 80164e4:	1c63      	adds	r3, r4, #1
 80164e6:	d00d      	beq.n	8016504 <rmw_wait+0x150>
 80164e8:	4620      	mov	r0, r4
 80164ea:	f7e9 ff6d 	bl	80003c8 <__aeabi_i2f>
 80164ee:	4604      	mov	r4, r0
 80164f0:	4650      	mov	r0, sl
 80164f2:	f7e9 ff65 	bl	80003c0 <__aeabi_ui2f>
 80164f6:	4601      	mov	r1, r0
 80164f8:	4620      	mov	r0, r4
 80164fa:	f7ea f86d 	bl	80005d8 <__aeabi_fdiv>
 80164fe:	f7ea f907 	bl	8000710 <__aeabi_f2iz>
 8016502:	4604      	mov	r4, r0
 8016504:	f241 5aa4 	movw	sl, #5540	; 0x15a4
 8016508:	68e8      	ldr	r0, [r5, #12]
 801650a:	f810 300a 	ldrb.w	r3, [r0, sl]
 801650e:	2b00      	cmp	r3, #0
 8016510:	f040 808c 	bne.w	801662c <rmw_wait+0x278>
 8016514:	68ad      	ldr	r5, [r5, #8]
 8016516:	2d00      	cmp	r5, #0
 8016518:	d1f6      	bne.n	8016508 <rmw_wait+0x154>
 801651a:	f1b9 0f00 	cmp.w	r9, #0
 801651e:	f000 80a3 	beq.w	8016668 <rmw_wait+0x2b4>
 8016522:	f8d9 5000 	ldr.w	r5, [r9]
 8016526:	2d00      	cmp	r5, #0
 8016528:	f000 808a 	beq.w	8016640 <rmw_wait+0x28c>
 801652c:	2400      	movs	r4, #0
 801652e:	4625      	mov	r5, r4
 8016530:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016534:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016538:	f7f6 fabc 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801653c:	2800      	cmp	r0, #0
 801653e:	d054      	beq.n	80165ea <rmw_wait+0x236>
 8016540:	f8d9 3000 	ldr.w	r3, [r9]
 8016544:	3401      	adds	r4, #1
 8016546:	42a3      	cmp	r3, r4
 8016548:	f04f 0501 	mov.w	r5, #1
 801654c:	d8f0      	bhi.n	8016530 <rmw_wait+0x17c>
 801654e:	f1b8 0f00 	cmp.w	r8, #0
 8016552:	d012      	beq.n	801657a <rmw_wait+0x1c6>
 8016554:	f8d8 3000 	ldr.w	r3, [r8]
 8016558:	b17b      	cbz	r3, 801657a <rmw_wait+0x1c6>
 801655a:	2400      	movs	r4, #0
 801655c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016560:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016564:	f7f6 faa6 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016568:	2800      	cmp	r0, #0
 801656a:	d046      	beq.n	80165fa <rmw_wait+0x246>
 801656c:	f8d8 3000 	ldr.w	r3, [r8]
 8016570:	3401      	adds	r4, #1
 8016572:	42a3      	cmp	r3, r4
 8016574:	f04f 0501 	mov.w	r5, #1
 8016578:	d8f0      	bhi.n	801655c <rmw_wait+0x1a8>
 801657a:	b1df      	cbz	r7, 80165b4 <rmw_wait+0x200>
 801657c:	683b      	ldr	r3, [r7, #0]
 801657e:	b1cb      	cbz	r3, 80165b4 <rmw_wait+0x200>
 8016580:	2400      	movs	r4, #0
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016588:	f7f6 fa94 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801658c:	b158      	cbz	r0, 80165a6 <rmw_wait+0x1f2>
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	3401      	adds	r4, #1
 8016592:	42a3      	cmp	r3, r4
 8016594:	d961      	bls.n	801665a <rmw_wait+0x2a6>
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2501      	movs	r5, #1
 801659a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801659e:	f7f6 fa89 	bl	800cab4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80165a2:	2800      	cmp	r0, #0
 80165a4:	d1f3      	bne.n	801658e <rmw_wait+0x1da>
 80165a6:	e9d7 3200 	ldrd	r3, r2, [r7]
 80165aa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80165ae:	3401      	adds	r4, #1
 80165b0:	42a3      	cmp	r3, r4
 80165b2:	d8e6      	bhi.n	8016582 <rmw_wait+0x1ce>
 80165b4:	b1a6      	cbz	r6, 80165e0 <rmw_wait+0x22c>
 80165b6:	6834      	ldr	r4, [r6, #0]
 80165b8:	b194      	cbz	r4, 80165e0 <rmw_wait+0x22c>
 80165ba:	2300      	movs	r3, #0
 80165bc:	461f      	mov	r7, r3
 80165be:	e004      	b.n	80165ca <rmw_wait+0x216>
 80165c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80165c4:	3301      	adds	r3, #1
 80165c6:	42a3      	cmp	r3, r4
 80165c8:	d00a      	beq.n	80165e0 <rmw_wait+0x22c>
 80165ca:	6870      	ldr	r0, [r6, #4]
 80165cc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80165d0:	7c0a      	ldrb	r2, [r1, #16]
 80165d2:	2a00      	cmp	r2, #0
 80165d4:	d0f4      	beq.n	80165c0 <rmw_wait+0x20c>
 80165d6:	3301      	adds	r3, #1
 80165d8:	42a3      	cmp	r3, r4
 80165da:	4615      	mov	r5, r2
 80165dc:	740f      	strb	r7, [r1, #16]
 80165de:	d1f4      	bne.n	80165ca <rmw_wait+0x216>
 80165e0:	2d00      	cmp	r5, #0
 80165e2:	d037      	beq.n	8016654 <rmw_wait+0x2a0>
 80165e4:	2000      	movs	r0, #0
 80165e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165ea:	e9d9 3200 	ldrd	r3, r2, [r9]
 80165ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80165f2:	3401      	adds	r4, #1
 80165f4:	42a3      	cmp	r3, r4
 80165f6:	d89b      	bhi.n	8016530 <rmw_wait+0x17c>
 80165f8:	e7a9      	b.n	801654e <rmw_wait+0x19a>
 80165fa:	e9d8 3200 	ldrd	r3, r2, [r8]
 80165fe:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016602:	3401      	adds	r4, #1
 8016604:	429c      	cmp	r4, r3
 8016606:	d3a9      	bcc.n	801655c <rmw_wait+0x1a8>
 8016608:	e7b7      	b.n	801657a <rmw_wait+0x1c6>
 801660a:	4614      	mov	r4, r2
 801660c:	e70d      	b.n	801642a <rmw_wait+0x76>
 801660e:	f1b8 0f00 	cmp.w	r8, #0
 8016612:	f47f aed9 	bne.w	80163c8 <rmw_wait+0x14>
 8016616:	2800      	cmp	r0, #0
 8016618:	f47f aed6 	bne.w	80163c8 <rmw_wait+0x14>
 801661c:	2900      	cmp	r1, #0
 801661e:	d0e1      	beq.n	80165e4 <rmw_wait+0x230>
 8016620:	2b00      	cmp	r3, #0
 8016622:	f47f aed4 	bne.w	80163ce <rmw_wait+0x1a>
 8016626:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801662a:	e6fe      	b.n	801642a <rmw_wait+0x76>
 801662c:	4621      	mov	r1, r4
 801662e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016632:	f7fa feb9 	bl	80113a8 <uxr_run_session_until_data>
 8016636:	68ad      	ldr	r5, [r5, #8]
 8016638:	2d00      	cmp	r5, #0
 801663a:	f47f af65 	bne.w	8016508 <rmw_wait+0x154>
 801663e:	e76c      	b.n	801651a <rmw_wait+0x166>
 8016640:	f1b8 0f00 	cmp.w	r8, #0
 8016644:	d11d      	bne.n	8016682 <rmw_wait+0x2ce>
 8016646:	b34f      	cbz	r7, 801669c <rmw_wait+0x2e8>
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	4645      	mov	r5, r8
 801664c:	2b00      	cmp	r3, #0
 801664e:	d197      	bne.n	8016580 <rmw_wait+0x1cc>
 8016650:	2e00      	cmp	r6, #0
 8016652:	d1b0      	bne.n	80165b6 <rmw_wait+0x202>
 8016654:	2002      	movs	r0, #2
 8016656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801665a:	2e00      	cmp	r6, #0
 801665c:	d0c2      	beq.n	80165e4 <rmw_wait+0x230>
 801665e:	6834      	ldr	r4, [r6, #0]
 8016660:	2501      	movs	r5, #1
 8016662:	2c00      	cmp	r4, #0
 8016664:	d1a9      	bne.n	80165ba <rmw_wait+0x206>
 8016666:	e7bd      	b.n	80165e4 <rmw_wait+0x230>
 8016668:	f1b8 0f00 	cmp.w	r8, #0
 801666c:	d0eb      	beq.n	8016646 <rmw_wait+0x292>
 801666e:	f8d8 3000 	ldr.w	r3, [r8]
 8016672:	464d      	mov	r5, r9
 8016674:	2b00      	cmp	r3, #0
 8016676:	f47f af70 	bne.w	801655a <rmw_wait+0x1a6>
 801667a:	2f00      	cmp	r7, #0
 801667c:	f47f af7e 	bne.w	801657c <rmw_wait+0x1c8>
 8016680:	e008      	b.n	8016694 <rmw_wait+0x2e0>
 8016682:	f8d8 3000 	ldr.w	r3, [r8]
 8016686:	2b00      	cmp	r3, #0
 8016688:	f47f af67 	bne.w	801655a <rmw_wait+0x1a6>
 801668c:	461d      	mov	r5, r3
 801668e:	2f00      	cmp	r7, #0
 8016690:	f47f af74 	bne.w	801657c <rmw_wait+0x1c8>
 8016694:	463d      	mov	r5, r7
 8016696:	2e00      	cmp	r6, #0
 8016698:	d18d      	bne.n	80165b6 <rmw_wait+0x202>
 801669a:	e7db      	b.n	8016654 <rmw_wait+0x2a0>
 801669c:	2e00      	cmp	r6, #0
 801669e:	d0d9      	beq.n	8016654 <rmw_wait+0x2a0>
 80166a0:	6834      	ldr	r4, [r6, #0]
 80166a2:	463d      	mov	r5, r7
 80166a4:	2c00      	cmp	r4, #0
 80166a6:	d188      	bne.n	80165ba <rmw_wait+0x206>
 80166a8:	e7d4      	b.n	8016654 <rmw_wait+0x2a0>
 80166aa:	bf00      	nop
 80166ac:	000f4240 	.word	0x000f4240
 80166b0:	2000beb0 	.word	0x2000beb0

080166b4 <rmw_create_wait_set>:
 80166b4:	b508      	push	{r3, lr}
 80166b6:	4803      	ldr	r0, [pc, #12]	; (80166c4 <rmw_create_wait_set+0x10>)
 80166b8:	f7ff fc96 	bl	8015fe8 <get_memory>
 80166bc:	b108      	cbz	r0, 80166c2 <rmw_create_wait_set+0xe>
 80166be:	68c0      	ldr	r0, [r0, #12]
 80166c0:	3010      	adds	r0, #16
 80166c2:	bd08      	pop	{r3, pc}
 80166c4:	2000d688 	.word	0x2000d688

080166c8 <rmw_destroy_wait_set>:
 80166c8:	b508      	push	{r3, lr}
 80166ca:	4b08      	ldr	r3, [pc, #32]	; (80166ec <rmw_destroy_wait_set+0x24>)
 80166cc:	6819      	ldr	r1, [r3, #0]
 80166ce:	b911      	cbnz	r1, 80166d6 <rmw_destroy_wait_set+0xe>
 80166d0:	e00a      	b.n	80166e8 <rmw_destroy_wait_set+0x20>
 80166d2:	6889      	ldr	r1, [r1, #8]
 80166d4:	b141      	cbz	r1, 80166e8 <rmw_destroy_wait_set+0x20>
 80166d6:	68cb      	ldr	r3, [r1, #12]
 80166d8:	3310      	adds	r3, #16
 80166da:	4298      	cmp	r0, r3
 80166dc:	d1f9      	bne.n	80166d2 <rmw_destroy_wait_set+0xa>
 80166de:	4803      	ldr	r0, [pc, #12]	; (80166ec <rmw_destroy_wait_set+0x24>)
 80166e0:	f7ff fc92 	bl	8016008 <put_memory>
 80166e4:	2000      	movs	r0, #0
 80166e6:	bd08      	pop	{r3, pc}
 80166e8:	2001      	movs	r0, #1
 80166ea:	bd08      	pop	{r3, pc}
 80166ec:	2000d688 	.word	0x2000d688

080166f0 <_MultiArrayDimension__cdr_serialize>:
 80166f0:	b1d0      	cbz	r0, 8016728 <_MultiArrayDimension__cdr_serialize+0x38>
 80166f2:	b570      	push	{r4, r5, r6, lr}
 80166f4:	6806      	ldr	r6, [r0, #0]
 80166f6:	460d      	mov	r5, r1
 80166f8:	4604      	mov	r4, r0
 80166fa:	b196      	cbz	r6, 8016722 <_MultiArrayDimension__cdr_serialize+0x32>
 80166fc:	4630      	mov	r0, r6
 80166fe:	f7e9 fda1 	bl	8000244 <strlen>
 8016702:	1c42      	adds	r2, r0, #1
 8016704:	4631      	mov	r1, r6
 8016706:	6060      	str	r0, [r4, #4]
 8016708:	4628      	mov	r0, r5
 801670a:	f7f9 fbe7 	bl	800fedc <ucdr_serialize_sequence_char>
 801670e:	68e1      	ldr	r1, [r4, #12]
 8016710:	4628      	mov	r0, r5
 8016712:	f7f8 f949 	bl	800e9a8 <ucdr_serialize_uint32_t>
 8016716:	4628      	mov	r0, r5
 8016718:	6921      	ldr	r1, [r4, #16]
 801671a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801671e:	f7f8 b943 	b.w	800e9a8 <ucdr_serialize_uint32_t>
 8016722:	4632      	mov	r2, r6
 8016724:	4630      	mov	r0, r6
 8016726:	e7ed      	b.n	8016704 <_MultiArrayDimension__cdr_serialize+0x14>
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop

0801672c <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 801672c:	b570      	push	{r4, r5, r6, lr}
 801672e:	4604      	mov	r4, r0
 8016730:	b1b0      	cbz	r0, 8016760 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8016732:	460d      	mov	r5, r1
 8016734:	2104      	movs	r1, #4
 8016736:	4628      	mov	r0, r5
 8016738:	f7f9 fb62 	bl	800fe00 <ucdr_alignment>
 801673c:	6866      	ldr	r6, [r4, #4]
 801673e:	1d6c      	adds	r4, r5, #5
 8016740:	4434      	add	r4, r6
 8016742:	1826      	adds	r6, r4, r0
 8016744:	2104      	movs	r1, #4
 8016746:	4630      	mov	r0, r6
 8016748:	f7f9 fb5a 	bl	800fe00 <ucdr_alignment>
 801674c:	1d04      	adds	r4, r0, #4
 801674e:	4434      	add	r4, r6
 8016750:	4620      	mov	r0, r4
 8016752:	2104      	movs	r1, #4
 8016754:	f7f9 fb54 	bl	800fe00 <ucdr_alignment>
 8016758:	f1c5 0504 	rsb	r5, r5, #4
 801675c:	4428      	add	r0, r5
 801675e:	4420      	add	r0, r4
 8016760:	bd70      	pop	{r4, r5, r6, pc}
 8016762:	bf00      	nop

08016764 <_MultiArrayDimension__cdr_deserialize>:
 8016764:	b570      	push	{r4, r5, r6, lr}
 8016766:	460c      	mov	r4, r1
 8016768:	b082      	sub	sp, #8
 801676a:	b1d1      	cbz	r1, 80167a2 <_MultiArrayDimension__cdr_deserialize+0x3e>
 801676c:	688e      	ldr	r6, [r1, #8]
 801676e:	ab01      	add	r3, sp, #4
 8016770:	4632      	mov	r2, r6
 8016772:	6809      	ldr	r1, [r1, #0]
 8016774:	4605      	mov	r5, r0
 8016776:	f7f9 fbc3 	bl	800ff00 <ucdr_deserialize_sequence_char>
 801677a:	9b01      	ldr	r3, [sp, #4]
 801677c:	b968      	cbnz	r0, 801679a <_MultiArrayDimension__cdr_deserialize+0x36>
 801677e:	429e      	cmp	r6, r3
 8016780:	d312      	bcc.n	80167a8 <_MultiArrayDimension__cdr_deserialize+0x44>
 8016782:	f104 010c 	add.w	r1, r4, #12
 8016786:	4628      	mov	r0, r5
 8016788:	f7f8 fa3e 	bl	800ec08 <ucdr_deserialize_uint32_t>
 801678c:	4628      	mov	r0, r5
 801678e:	f104 0110 	add.w	r1, r4, #16
 8016792:	f7f8 fa39 	bl	800ec08 <ucdr_deserialize_uint32_t>
 8016796:	b002      	add	sp, #8
 8016798:	bd70      	pop	{r4, r5, r6, pc}
 801679a:	b103      	cbz	r3, 801679e <_MultiArrayDimension__cdr_deserialize+0x3a>
 801679c:	3b01      	subs	r3, #1
 801679e:	6063      	str	r3, [r4, #4]
 80167a0:	e7ef      	b.n	8016782 <_MultiArrayDimension__cdr_deserialize+0x1e>
 80167a2:	4608      	mov	r0, r1
 80167a4:	b002      	add	sp, #8
 80167a6:	bd70      	pop	{r4, r5, r6, pc}
 80167a8:	2101      	movs	r1, #1
 80167aa:	75a8      	strb	r0, [r5, #22]
 80167ac:	7569      	strb	r1, [r5, #21]
 80167ae:	6060      	str	r0, [r4, #4]
 80167b0:	4628      	mov	r0, r5
 80167b2:	f7f9 fb3d 	bl	800fe30 <ucdr_align_to>
 80167b6:	4628      	mov	r0, r5
 80167b8:	9901      	ldr	r1, [sp, #4]
 80167ba:	f7f9 fb6f 	bl	800fe9c <ucdr_advance_buffer>
 80167be:	e7e0      	b.n	8016782 <_MultiArrayDimension__cdr_deserialize+0x1e>

080167c0 <_MultiArrayDimension__max_serialized_size>:
 80167c0:	b510      	push	{r4, lr}
 80167c2:	2104      	movs	r1, #4
 80167c4:	2000      	movs	r0, #0
 80167c6:	f7f9 fb1b 	bl	800fe00 <ucdr_alignment>
 80167ca:	1d04      	adds	r4, r0, #4
 80167cc:	4620      	mov	r0, r4
 80167ce:	2104      	movs	r1, #4
 80167d0:	f7f9 fb16 	bl	800fe00 <ucdr_alignment>
 80167d4:	3004      	adds	r0, #4
 80167d6:	4420      	add	r0, r4
 80167d8:	bd10      	pop	{r4, pc}
 80167da:	bf00      	nop

080167dc <_MultiArrayDimension__get_serialized_size>:
 80167dc:	b510      	push	{r4, lr}
 80167de:	4604      	mov	r4, r0
 80167e0:	b190      	cbz	r0, 8016808 <_MultiArrayDimension__get_serialized_size+0x2c>
 80167e2:	2104      	movs	r1, #4
 80167e4:	2000      	movs	r0, #0
 80167e6:	f7f9 fb0b 	bl	800fe00 <ucdr_alignment>
 80167ea:	6864      	ldr	r4, [r4, #4]
 80167ec:	2104      	movs	r1, #4
 80167ee:	3405      	adds	r4, #5
 80167f0:	4404      	add	r4, r0
 80167f2:	4620      	mov	r0, r4
 80167f4:	f7f9 fb04 	bl	800fe00 <ucdr_alignment>
 80167f8:	3004      	adds	r0, #4
 80167fa:	4404      	add	r4, r0
 80167fc:	4620      	mov	r0, r4
 80167fe:	2104      	movs	r1, #4
 8016800:	f7f9 fafe 	bl	800fe00 <ucdr_alignment>
 8016804:	3004      	adds	r0, #4
 8016806:	4420      	add	r0, r4
 8016808:	bd10      	pop	{r4, pc}
 801680a:	bf00      	nop

0801680c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801680c:	4800      	ldr	r0, [pc, #0]	; (8016810 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 801680e:	4770      	bx	lr
 8016810:	2000022c 	.word	0x2000022c

08016814 <ucdr_serialize_string>:
 8016814:	b538      	push	{r3, r4, r5, lr}
 8016816:	4605      	mov	r5, r0
 8016818:	4608      	mov	r0, r1
 801681a:	460c      	mov	r4, r1
 801681c:	f7e9 fd12 	bl	8000244 <strlen>
 8016820:	4602      	mov	r2, r0
 8016822:	4621      	mov	r1, r4
 8016824:	4628      	mov	r0, r5
 8016826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801682a:	3201      	adds	r2, #1
 801682c:	f7f9 bb56 	b.w	800fedc <ucdr_serialize_sequence_char>

08016830 <ucdr_deserialize_string>:
 8016830:	b500      	push	{lr}
 8016832:	b083      	sub	sp, #12
 8016834:	ab01      	add	r3, sp, #4
 8016836:	f7f9 fb63 	bl	800ff00 <ucdr_deserialize_sequence_char>
 801683a:	b003      	add	sp, #12
 801683c:	f85d fb04 	ldr.w	pc, [sp], #4

08016840 <uxr_init_input_best_effort_stream>:
 8016840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016844:	8003      	strh	r3, [r0, #0]
 8016846:	4770      	bx	lr

08016848 <uxr_reset_input_best_effort_stream>:
 8016848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801684c:	8003      	strh	r3, [r0, #0]
 801684e:	4770      	bx	lr

08016850 <uxr_receive_best_effort_message>:
 8016850:	b538      	push	{r3, r4, r5, lr}
 8016852:	4604      	mov	r4, r0
 8016854:	8800      	ldrh	r0, [r0, #0]
 8016856:	460d      	mov	r5, r1
 8016858:	f000 fd20 	bl	801729c <uxr_seq_num_cmp>
 801685c:	4603      	mov	r3, r0
 801685e:	2b00      	cmp	r3, #0
 8016860:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016864:	bfb8      	it	lt
 8016866:	8025      	strhlt	r5, [r4, #0]
 8016868:	bd38      	pop	{r3, r4, r5, pc}
 801686a:	bf00      	nop

0801686c <on_full_input_buffer>:
 801686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801686e:	890f      	ldrh	r7, [r1, #8]
 8016870:	460d      	mov	r5, r1
 8016872:	c912      	ldmia	r1, {r1, r4}
 8016874:	fbb4 f4f7 	udiv	r4, r4, r7
 8016878:	6802      	ldr	r2, [r0, #0]
 801687a:	4606      	mov	r6, r0
 801687c:	1a53      	subs	r3, r2, r1
 801687e:	fbb3 f3f4 	udiv	r3, r3, r4
 8016882:	3301      	adds	r3, #1
 8016884:	b29b      	uxth	r3, r3
 8016886:	fbb3 f2f7 	udiv	r2, r3, r7
 801688a:	fb07 3312 	mls	r3, r7, r2, r3
 801688e:	b29b      	uxth	r3, r3
 8016890:	fb04 f403 	mul.w	r4, r4, r3
 8016894:	7d28      	ldrb	r0, [r5, #20]
 8016896:	1d23      	adds	r3, r4, #4
 8016898:	440b      	add	r3, r1
 801689a:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801689e:	b110      	cbz	r0, 80168a6 <on_full_input_buffer+0x3a>
 80168a0:	2000      	movs	r0, #0
 80168a2:	f843 0c04 	str.w	r0, [r3, #-4]
 80168a6:	2a03      	cmp	r2, #3
 80168a8:	d801      	bhi.n	80168ae <on_full_input_buffer+0x42>
 80168aa:	2001      	movs	r0, #1
 80168ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ae:	3408      	adds	r4, #8
 80168b0:	4630      	mov	r0, r6
 80168b2:	6933      	ldr	r3, [r6, #16]
 80168b4:	4421      	add	r1, r4
 80168b6:	3a04      	subs	r2, #4
 80168b8:	f7f9 fa96 	bl	800fde8 <ucdr_init_buffer_origin>
 80168bc:	4630      	mov	r0, r6
 80168be:	462a      	mov	r2, r5
 80168c0:	4902      	ldr	r1, [pc, #8]	; (80168cc <on_full_input_buffer+0x60>)
 80168c2:	f7f9 fa6f 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 80168c6:	2000      	movs	r0, #0
 80168c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ca:	bf00      	nop
 80168cc:	0801686d 	.word	0x0801686d

080168d0 <uxr_init_input_reliable_stream>:
 80168d0:	b430      	push	{r4, r5}
 80168d2:	2500      	movs	r5, #0
 80168d4:	9c02      	ldr	r4, [sp, #8]
 80168d6:	6001      	str	r1, [r0, #0]
 80168d8:	8103      	strh	r3, [r0, #8]
 80168da:	6042      	str	r2, [r0, #4]
 80168dc:	6104      	str	r4, [r0, #16]
 80168de:	7505      	strb	r5, [r0, #20]
 80168e0:	b1ab      	cbz	r3, 801690e <uxr_init_input_reliable_stream+0x3e>
 80168e2:	600d      	str	r5, [r1, #0]
 80168e4:	8901      	ldrh	r1, [r0, #8]
 80168e6:	2901      	cmp	r1, #1
 80168e8:	d911      	bls.n	801690e <uxr_init_input_reliable_stream+0x3e>
 80168ea:	2201      	movs	r2, #1
 80168ec:	fbb2 f3f1 	udiv	r3, r2, r1
 80168f0:	6844      	ldr	r4, [r0, #4]
 80168f2:	fb01 2313 	mls	r3, r1, r3, r2
 80168f6:	fbb4 f1f1 	udiv	r1, r4, r1
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	fb03 f301 	mul.w	r3, r3, r1
 8016900:	6801      	ldr	r1, [r0, #0]
 8016902:	3201      	adds	r2, #1
 8016904:	50cd      	str	r5, [r1, r3]
 8016906:	8901      	ldrh	r1, [r0, #8]
 8016908:	b292      	uxth	r2, r2
 801690a:	4291      	cmp	r1, r2
 801690c:	d8ee      	bhi.n	80168ec <uxr_init_input_reliable_stream+0x1c>
 801690e:	bc30      	pop	{r4, r5}
 8016910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016914:	60c3      	str	r3, [r0, #12]
 8016916:	4770      	bx	lr

08016918 <uxr_reset_input_reliable_stream>:
 8016918:	8902      	ldrh	r2, [r0, #8]
 801691a:	b1ca      	cbz	r2, 8016950 <uxr_reset_input_reliable_stream+0x38>
 801691c:	b470      	push	{r4, r5, r6}
 801691e:	2500      	movs	r5, #0
 8016920:	4629      	mov	r1, r5
 8016922:	462e      	mov	r6, r5
 8016924:	fbb1 f3f2 	udiv	r3, r1, r2
 8016928:	6844      	ldr	r4, [r0, #4]
 801692a:	fb02 1313 	mls	r3, r2, r3, r1
 801692e:	fbb4 f2f2 	udiv	r2, r4, r2
 8016932:	b29b      	uxth	r3, r3
 8016934:	fb03 f302 	mul.w	r3, r3, r2
 8016938:	6802      	ldr	r2, [r0, #0]
 801693a:	3501      	adds	r5, #1
 801693c:	50d6      	str	r6, [r2, r3]
 801693e:	8902      	ldrh	r2, [r0, #8]
 8016940:	b2a9      	uxth	r1, r5
 8016942:	428a      	cmp	r2, r1
 8016944:	d8ee      	bhi.n	8016924 <uxr_reset_input_reliable_stream+0xc>
 8016946:	bc70      	pop	{r4, r5, r6}
 8016948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801694c:	60c3      	str	r3, [r0, #12]
 801694e:	4770      	bx	lr
 8016950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016954:	60c3      	str	r3, [r0, #12]
 8016956:	4770      	bx	lr

08016958 <uxr_receive_reliable_message>:
 8016958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801695c:	4604      	mov	r4, r0
 801695e:	460d      	mov	r5, r1
 8016960:	8901      	ldrh	r1, [r0, #8]
 8016962:	8980      	ldrh	r0, [r0, #12]
 8016964:	4690      	mov	r8, r2
 8016966:	461f      	mov	r7, r3
 8016968:	f000 fc90 	bl	801728c <uxr_seq_num_add>
 801696c:	4629      	mov	r1, r5
 801696e:	4606      	mov	r6, r0
 8016970:	89a0      	ldrh	r0, [r4, #12]
 8016972:	f000 fc93 	bl	801729c <uxr_seq_num_cmp>
 8016976:	2800      	cmp	r0, #0
 8016978:	db0a      	blt.n	8016990 <uxr_receive_reliable_message+0x38>
 801697a:	2600      	movs	r6, #0
 801697c:	4629      	mov	r1, r5
 801697e:	89e0      	ldrh	r0, [r4, #14]
 8016980:	f000 fc8c 	bl	801729c <uxr_seq_num_cmp>
 8016984:	2800      	cmp	r0, #0
 8016986:	bfb8      	it	lt
 8016988:	81e5      	strhlt	r5, [r4, #14]
 801698a:	4630      	mov	r0, r6
 801698c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016990:	4630      	mov	r0, r6
 8016992:	4629      	mov	r1, r5
 8016994:	f000 fc82 	bl	801729c <uxr_seq_num_cmp>
 8016998:	2800      	cmp	r0, #0
 801699a:	dbee      	blt.n	801697a <uxr_receive_reliable_message+0x22>
 801699c:	4640      	mov	r0, r8
 801699e:	6923      	ldr	r3, [r4, #16]
 80169a0:	4798      	blx	r3
 80169a2:	4681      	mov	r9, r0
 80169a4:	2101      	movs	r1, #1
 80169a6:	89a0      	ldrh	r0, [r4, #12]
 80169a8:	f000 fc70 	bl	801728c <uxr_seq_num_add>
 80169ac:	f1b9 0f00 	cmp.w	r9, #0
 80169b0:	d101      	bne.n	80169b6 <uxr_receive_reliable_message+0x5e>
 80169b2:	4285      	cmp	r5, r0
 80169b4:	d049      	beq.n	8016a4a <uxr_receive_reliable_message+0xf2>
 80169b6:	8921      	ldrh	r1, [r4, #8]
 80169b8:	6862      	ldr	r2, [r4, #4]
 80169ba:	fbb5 f3f1 	udiv	r3, r5, r1
 80169be:	fbb2 f2f1 	udiv	r2, r2, r1
 80169c2:	fb01 5313 	mls	r3, r1, r3, r5
 80169c6:	b29b      	uxth	r3, r3
 80169c8:	fb03 f302 	mul.w	r3, r3, r2
 80169cc:	6820      	ldr	r0, [r4, #0]
 80169ce:	3304      	adds	r3, #4
 80169d0:	4418      	add	r0, r3
 80169d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1cf      	bne.n	801697a <uxr_receive_reliable_message+0x22>
 80169da:	4641      	mov	r1, r8
 80169dc:	463a      	mov	r2, r7
 80169de:	f000 fe71 	bl	80176c4 <memcpy>
 80169e2:	8921      	ldrh	r1, [r4, #8]
 80169e4:	6862      	ldr	r2, [r4, #4]
 80169e6:	fbb5 f3f1 	udiv	r3, r5, r1
 80169ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80169ee:	2001      	movs	r0, #1
 80169f0:	fb01 5313 	mls	r3, r1, r3, r5
 80169f4:	b29b      	uxth	r3, r3
 80169f6:	fb03 f302 	mul.w	r3, r3, r2
 80169fa:	6822      	ldr	r2, [r4, #0]
 80169fc:	50d7      	str	r7, [r2, r3]
 80169fe:	9b08      	ldr	r3, [sp, #32]
 8016a00:	7018      	strb	r0, [r3, #0]
 8016a02:	f1b9 0f00 	cmp.w	r9, #0
 8016a06:	d0b8      	beq.n	801697a <uxr_receive_reliable_message+0x22>
 8016a08:	89a6      	ldrh	r6, [r4, #12]
 8016a0a:	e001      	b.n	8016a10 <uxr_receive_reliable_message+0xb8>
 8016a0c:	2801      	cmp	r0, #1
 8016a0e:	d1b4      	bne.n	801697a <uxr_receive_reliable_message+0x22>
 8016a10:	4630      	mov	r0, r6
 8016a12:	2101      	movs	r1, #1
 8016a14:	f000 fc3a 	bl	801728c <uxr_seq_num_add>
 8016a18:	8921      	ldrh	r1, [r4, #8]
 8016a1a:	6862      	ldr	r2, [r4, #4]
 8016a1c:	fbb0 f3f1 	udiv	r3, r0, r1
 8016a20:	fbb2 f2f1 	udiv	r2, r2, r1
 8016a24:	fb01 0313 	mls	r3, r1, r3, r0
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	fb03 f302 	mul.w	r3, r3, r2
 8016a2e:	4606      	mov	r6, r0
 8016a30:	6820      	ldr	r0, [r4, #0]
 8016a32:	3304      	adds	r3, #4
 8016a34:	4418      	add	r0, r3
 8016a36:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d09d      	beq.n	801697a <uxr_receive_reliable_message+0x22>
 8016a3e:	6923      	ldr	r3, [r4, #16]
 8016a40:	4798      	blx	r3
 8016a42:	2802      	cmp	r0, #2
 8016a44:	d1e2      	bne.n	8016a0c <uxr_receive_reliable_message+0xb4>
 8016a46:	2601      	movs	r6, #1
 8016a48:	e798      	b.n	801697c <uxr_receive_reliable_message+0x24>
 8016a4a:	9b08      	ldr	r3, [sp, #32]
 8016a4c:	81a5      	strh	r5, [r4, #12]
 8016a4e:	2601      	movs	r6, #1
 8016a50:	f883 9000 	strb.w	r9, [r3]
 8016a54:	e792      	b.n	801697c <uxr_receive_reliable_message+0x24>
 8016a56:	bf00      	nop

08016a58 <uxr_next_input_reliable_buffer_available>:
 8016a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a5c:	4604      	mov	r4, r0
 8016a5e:	460e      	mov	r6, r1
 8016a60:	8980      	ldrh	r0, [r0, #12]
 8016a62:	2101      	movs	r1, #1
 8016a64:	4617      	mov	r7, r2
 8016a66:	f000 fc11 	bl	801728c <uxr_seq_num_add>
 8016a6a:	8921      	ldrh	r1, [r4, #8]
 8016a6c:	6862      	ldr	r2, [r4, #4]
 8016a6e:	fbb0 f3f1 	udiv	r3, r0, r1
 8016a72:	fbb2 f2f1 	udiv	r2, r2, r1
 8016a76:	fb01 0313 	mls	r3, r1, r3, r0
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	fb03 f302 	mul.w	r3, r3, r2
 8016a80:	6822      	ldr	r2, [r4, #0]
 8016a82:	3304      	adds	r3, #4
 8016a84:	eb02 0803 	add.w	r8, r2, r3
 8016a88:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8016a8c:	f1b9 0f00 	cmp.w	r9, #0
 8016a90:	d025      	beq.n	8016ade <uxr_next_input_reliable_buffer_available+0x86>
 8016a92:	4605      	mov	r5, r0
 8016a94:	6923      	ldr	r3, [r4, #16]
 8016a96:	4640      	mov	r0, r8
 8016a98:	4798      	blx	r3
 8016a9a:	4682      	mov	sl, r0
 8016a9c:	b310      	cbz	r0, 8016ae4 <uxr_next_input_reliable_buffer_available+0x8c>
 8016a9e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016aa2:	e005      	b.n	8016ab0 <uxr_next_input_reliable_buffer_available+0x58>
 8016aa4:	6923      	ldr	r3, [r4, #16]
 8016aa6:	4798      	blx	r3
 8016aa8:	2802      	cmp	r0, #2
 8016aaa:	d032      	beq.n	8016b12 <uxr_next_input_reliable_buffer_available+0xba>
 8016aac:	2801      	cmp	r0, #1
 8016aae:	d116      	bne.n	8016ade <uxr_next_input_reliable_buffer_available+0x86>
 8016ab0:	4650      	mov	r0, sl
 8016ab2:	2101      	movs	r1, #1
 8016ab4:	f000 fbea 	bl	801728c <uxr_seq_num_add>
 8016ab8:	4682      	mov	sl, r0
 8016aba:	8922      	ldrh	r2, [r4, #8]
 8016abc:	6860      	ldr	r0, [r4, #4]
 8016abe:	fbba f3f2 	udiv	r3, sl, r2
 8016ac2:	fbb0 f0f2 	udiv	r0, r0, r2
 8016ac6:	fb02 a313 	mls	r3, r2, r3, sl
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	fb03 f300 	mul.w	r3, r3, r0
 8016ad0:	6820      	ldr	r0, [r4, #0]
 8016ad2:	3304      	adds	r3, #4
 8016ad4:	4418      	add	r0, r3
 8016ad6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d1e2      	bne.n	8016aa4 <uxr_next_input_reliable_buffer_available+0x4c>
 8016ade:	2000      	movs	r0, #0
 8016ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ae4:	464a      	mov	r2, r9
 8016ae6:	4641      	mov	r1, r8
 8016ae8:	4630      	mov	r0, r6
 8016aea:	f7f9 f985 	bl	800fdf8 <ucdr_init_buffer>
 8016aee:	8921      	ldrh	r1, [r4, #8]
 8016af0:	6862      	ldr	r2, [r4, #4]
 8016af2:	fbb5 f3f1 	udiv	r3, r5, r1
 8016af6:	fbb2 f2f1 	udiv	r2, r2, r1
 8016afa:	fb01 5313 	mls	r3, r1, r3, r5
 8016afe:	b29b      	uxth	r3, r3
 8016b00:	fb03 f302 	mul.w	r3, r3, r2
 8016b04:	6822      	ldr	r2, [r4, #0]
 8016b06:	2001      	movs	r0, #1
 8016b08:	f842 a003 	str.w	sl, [r2, r3]
 8016b0c:	81a5      	strh	r5, [r4, #12]
 8016b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b12:	8922      	ldrh	r2, [r4, #8]
 8016b14:	6863      	ldr	r3, [r4, #4]
 8016b16:	fbb5 f0f2 	udiv	r0, r5, r2
 8016b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b1e:	f04f 0c00 	mov.w	ip, #0
 8016b22:	fb02 5510 	mls	r5, r2, r0, r5
 8016b26:	b2ad      	uxth	r5, r5
 8016b28:	fb05 f503 	mul.w	r5, r5, r3
 8016b2c:	6823      	ldr	r3, [r4, #0]
 8016b2e:	4630      	mov	r0, r6
 8016b30:	eba9 0207 	sub.w	r2, r9, r7
 8016b34:	eb08 0107 	add.w	r1, r8, r7
 8016b38:	f843 c005 	str.w	ip, [r3, r5]
 8016b3c:	f7f9 f95c 	bl	800fdf8 <ucdr_init_buffer>
 8016b40:	4630      	mov	r0, r6
 8016b42:	4622      	mov	r2, r4
 8016b44:	4903      	ldr	r1, [pc, #12]	; (8016b54 <uxr_next_input_reliable_buffer_available+0xfc>)
 8016b46:	f7f9 f92d 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 8016b4a:	2001      	movs	r0, #1
 8016b4c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016b50:	e7c6      	b.n	8016ae0 <uxr_next_input_reliable_buffer_available+0x88>
 8016b52:	bf00      	nop
 8016b54:	0801686d 	.word	0x0801686d

08016b58 <uxr_process_heartbeat>:
 8016b58:	b538      	push	{r3, r4, r5, lr}
 8016b5a:	4611      	mov	r1, r2
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	89c0      	ldrh	r0, [r0, #14]
 8016b60:	4615      	mov	r5, r2
 8016b62:	f000 fb9b 	bl	801729c <uxr_seq_num_cmp>
 8016b66:	2800      	cmp	r0, #0
 8016b68:	bfb8      	it	lt
 8016b6a:	81e5      	strhlt	r5, [r4, #14]
 8016b6c:	bd38      	pop	{r3, r4, r5, pc}
 8016b6e:	bf00      	nop

08016b70 <uxr_compute_acknack>:
 8016b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b74:	8903      	ldrh	r3, [r0, #8]
 8016b76:	4604      	mov	r4, r0
 8016b78:	460d      	mov	r5, r1
 8016b7a:	8986      	ldrh	r6, [r0, #12]
 8016b7c:	b1d3      	cbz	r3, 8016bb4 <uxr_compute_acknack+0x44>
 8016b7e:	4630      	mov	r0, r6
 8016b80:	2701      	movs	r7, #1
 8016b82:	e003      	b.n	8016b8c <uxr_compute_acknack+0x1c>
 8016b84:	4567      	cmp	r7, ip
 8016b86:	d215      	bcs.n	8016bb4 <uxr_compute_acknack+0x44>
 8016b88:	89a0      	ldrh	r0, [r4, #12]
 8016b8a:	3701      	adds	r7, #1
 8016b8c:	b2b9      	uxth	r1, r7
 8016b8e:	f000 fb7d 	bl	801728c <uxr_seq_num_add>
 8016b92:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b96:	6863      	ldr	r3, [r4, #4]
 8016b98:	fbb0 f2fc 	udiv	r2, r0, ip
 8016b9c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016ba0:	fb0c 0212 	mls	r2, ip, r2, r0
 8016ba4:	6821      	ldr	r1, [r4, #0]
 8016ba6:	b292      	uxth	r2, r2
 8016ba8:	fb02 1303 	mla	r3, r2, r3, r1
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1e8      	bne.n	8016b84 <uxr_compute_acknack+0x14>
 8016bb2:	4606      	mov	r6, r0
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	802e      	strh	r6, [r5, #0]
 8016bba:	89e6      	ldrh	r6, [r4, #14]
 8016bbc:	f000 fb6a 	bl	8017294 <uxr_seq_num_sub>
 8016bc0:	4601      	mov	r1, r0
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	f000 fb66 	bl	8017294 <uxr_seq_num_sub>
 8016bc8:	4606      	mov	r6, r0
 8016bca:	b310      	cbz	r0, 8016c12 <uxr_compute_acknack+0xa2>
 8016bcc:	f04f 0900 	mov.w	r9, #0
 8016bd0:	f04f 0801 	mov.w	r8, #1
 8016bd4:	464f      	mov	r7, r9
 8016bd6:	fa1f f189 	uxth.w	r1, r9
 8016bda:	8828      	ldrh	r0, [r5, #0]
 8016bdc:	f000 fb56 	bl	801728c <uxr_seq_num_add>
 8016be0:	8923      	ldrh	r3, [r4, #8]
 8016be2:	6862      	ldr	r2, [r4, #4]
 8016be4:	fbb0 fcf3 	udiv	ip, r0, r3
 8016be8:	fbb2 f1f3 	udiv	r1, r2, r3
 8016bec:	fb0c 0313 	mls	r3, ip, r3, r0
 8016bf0:	6822      	ldr	r2, [r4, #0]
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	fb03 2201 	mla	r2, r3, r1, r2
 8016bf8:	6812      	ldr	r2, [r2, #0]
 8016bfa:	fa08 f309 	lsl.w	r3, r8, r9
 8016bfe:	f109 0901 	add.w	r9, r9, #1
 8016c02:	b90a      	cbnz	r2, 8016c08 <uxr_compute_acknack+0x98>
 8016c04:	431f      	orrs	r7, r3
 8016c06:	b2bf      	uxth	r7, r7
 8016c08:	454e      	cmp	r6, r9
 8016c0a:	d1e4      	bne.n	8016bd6 <uxr_compute_acknack+0x66>
 8016c0c:	4638      	mov	r0, r7
 8016c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c12:	4607      	mov	r7, r0
 8016c14:	4638      	mov	r0, r7
 8016c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c1a:	bf00      	nop

08016c1c <uxr_init_output_best_effort_stream>:
 8016c1c:	b410      	push	{r4}
 8016c1e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8016c22:	e9c0 1300 	strd	r1, r3, [r0]
 8016c26:	81c4      	strh	r4, [r0, #14]
 8016c28:	7303      	strb	r3, [r0, #12]
 8016c2a:	bc10      	pop	{r4}
 8016c2c:	6082      	str	r2, [r0, #8]
 8016c2e:	4770      	bx	lr

08016c30 <uxr_reset_output_best_effort_stream>:
 8016c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c34:	7b03      	ldrb	r3, [r0, #12]
 8016c36:	81c2      	strh	r2, [r0, #14]
 8016c38:	6043      	str	r3, [r0, #4]
 8016c3a:	4770      	bx	lr

08016c3c <uxr_prepare_best_effort_buffer_to_write>:
 8016c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c3e:	4604      	mov	r4, r0
 8016c40:	b083      	sub	sp, #12
 8016c42:	6840      	ldr	r0, [r0, #4]
 8016c44:	460d      	mov	r5, r1
 8016c46:	4616      	mov	r6, r2
 8016c48:	f7fb fb9a 	bl	8012380 <uxr_submessage_padding>
 8016c4c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016c50:	4410      	add	r0, r2
 8016c52:	1942      	adds	r2, r0, r5
 8016c54:	4293      	cmp	r3, r2
 8016c56:	bf2c      	ite	cs
 8016c58:	2701      	movcs	r7, #1
 8016c5a:	2700      	movcc	r7, #0
 8016c5c:	d202      	bcs.n	8016c64 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016c5e:	4638      	mov	r0, r7
 8016c60:	b003      	add	sp, #12
 8016c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c64:	9000      	str	r0, [sp, #0]
 8016c66:	6821      	ldr	r1, [r4, #0]
 8016c68:	4630      	mov	r0, r6
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	f7f9 f8b2 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8016c70:	4638      	mov	r0, r7
 8016c72:	6861      	ldr	r1, [r4, #4]
 8016c74:	4429      	add	r1, r5
 8016c76:	6061      	str	r1, [r4, #4]
 8016c78:	b003      	add	sp, #12
 8016c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016c7c <uxr_prepare_best_effort_buffer_to_send>:
 8016c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c80:	6845      	ldr	r5, [r0, #4]
 8016c82:	4604      	mov	r4, r0
 8016c84:	7b00      	ldrb	r0, [r0, #12]
 8016c86:	4285      	cmp	r5, r0
 8016c88:	bf8c      	ite	hi
 8016c8a:	2701      	movhi	r7, #1
 8016c8c:	2700      	movls	r7, #0
 8016c8e:	d802      	bhi.n	8016c96 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8016c90:	4638      	mov	r0, r7
 8016c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c96:	4688      	mov	r8, r1
 8016c98:	89e0      	ldrh	r0, [r4, #14]
 8016c9a:	2101      	movs	r1, #1
 8016c9c:	4615      	mov	r5, r2
 8016c9e:	461e      	mov	r6, r3
 8016ca0:	f000 faf4 	bl	801728c <uxr_seq_num_add>
 8016ca4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016ca8:	81e0      	strh	r0, [r4, #14]
 8016caa:	8030      	strh	r0, [r6, #0]
 8016cac:	f8c8 2000 	str.w	r2, [r8]
 8016cb0:	602b      	str	r3, [r5, #0]
 8016cb2:	7b23      	ldrb	r3, [r4, #12]
 8016cb4:	4638      	mov	r0, r7
 8016cb6:	6063      	str	r3, [r4, #4]
 8016cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016cbc <on_full_output_buffer>:
 8016cbc:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8016cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc2:	460d      	mov	r5, r1
 8016cc4:	c90a      	ldmia	r1, {r1, r3}
 8016cc6:	fbb3 f7fc 	udiv	r7, r3, ip
 8016cca:	6804      	ldr	r4, [r0, #0]
 8016ccc:	4606      	mov	r6, r0
 8016cce:	1a63      	subs	r3, r4, r1
 8016cd0:	fbb3 f3f7 	udiv	r3, r3, r7
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	fbb3 f4fc 	udiv	r4, r3, ip
 8016cdc:	fb0c 3314 	mls	r3, ip, r4, r3
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	fb07 f303 	mul.w	r3, r7, r3
 8016ce6:	7b2a      	ldrb	r2, [r5, #12]
 8016ce8:	58cc      	ldr	r4, [r1, r3]
 8016cea:	4413      	add	r3, r2
 8016cec:	3308      	adds	r3, #8
 8016cee:	1aa2      	subs	r2, r4, r2
 8016cf0:	4419      	add	r1, r3
 8016cf2:	3a04      	subs	r2, #4
 8016cf4:	6903      	ldr	r3, [r0, #16]
 8016cf6:	f7f9 f877 	bl	800fde8 <ucdr_init_buffer_origin>
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	462a      	mov	r2, r5
 8016cfe:	4902      	ldr	r1, [pc, #8]	; (8016d08 <on_full_output_buffer+0x4c>)
 8016d00:	f7f9 f850 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 8016d04:	2000      	movs	r0, #0
 8016d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d08:	08016cbd 	.word	0x08016cbd

08016d0c <uxr_init_output_reliable_stream>:
 8016d0c:	b430      	push	{r4, r5}
 8016d0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016d12:	6001      	str	r1, [r0, #0]
 8016d14:	8103      	strh	r3, [r0, #8]
 8016d16:	6042      	str	r2, [r0, #4]
 8016d18:	7304      	strb	r4, [r0, #12]
 8016d1a:	b1b3      	cbz	r3, 8016d4a <uxr_init_output_reliable_stream+0x3e>
 8016d1c:	600c      	str	r4, [r1, #0]
 8016d1e:	8901      	ldrh	r1, [r0, #8]
 8016d20:	2901      	cmp	r1, #1
 8016d22:	d912      	bls.n	8016d4a <uxr_init_output_reliable_stream+0x3e>
 8016d24:	2201      	movs	r2, #1
 8016d26:	fbb2 f3f1 	udiv	r3, r2, r1
 8016d2a:	6844      	ldr	r4, [r0, #4]
 8016d2c:	fb01 2313 	mls	r3, r1, r3, r2
 8016d30:	fbb4 f1f1 	udiv	r1, r4, r1
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	fb03 f301 	mul.w	r3, r3, r1
 8016d3a:	7b04      	ldrb	r4, [r0, #12]
 8016d3c:	6801      	ldr	r1, [r0, #0]
 8016d3e:	3201      	adds	r2, #1
 8016d40:	50cc      	str	r4, [r1, r3]
 8016d42:	8901      	ldrh	r1, [r0, #8]
 8016d44:	b292      	uxth	r2, r2
 8016d46:	4291      	cmp	r1, r2
 8016d48:	d8ed      	bhi.n	8016d26 <uxr_init_output_reliable_stream+0x1a>
 8016d4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016d4e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8016d52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016d56:	2200      	movs	r2, #0
 8016d58:	4b04      	ldr	r3, [pc, #16]	; (8016d6c <uxr_init_output_reliable_stream+0x60>)
 8016d5a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8016d5e:	bc30      	pop	{r4, r5}
 8016d60:	8241      	strh	r1, [r0, #18]
 8016d62:	8402      	strh	r2, [r0, #32]
 8016d64:	f8c0 300e 	str.w	r3, [r0, #14]
 8016d68:	4770      	bx	lr
 8016d6a:	bf00      	nop
 8016d6c:	ffff0000 	.word	0xffff0000

08016d70 <uxr_reset_output_reliable_stream>:
 8016d70:	8902      	ldrh	r2, [r0, #8]
 8016d72:	b430      	push	{r4, r5}
 8016d74:	b19a      	cbz	r2, 8016d9e <uxr_reset_output_reliable_stream+0x2e>
 8016d76:	2500      	movs	r5, #0
 8016d78:	4629      	mov	r1, r5
 8016d7a:	fbb1 f3f2 	udiv	r3, r1, r2
 8016d7e:	6844      	ldr	r4, [r0, #4]
 8016d80:	fb02 1313 	mls	r3, r2, r3, r1
 8016d84:	fbb4 f2f2 	udiv	r2, r4, r2
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	fb03 f302 	mul.w	r3, r3, r2
 8016d8e:	7b01      	ldrb	r1, [r0, #12]
 8016d90:	6802      	ldr	r2, [r0, #0]
 8016d92:	3501      	adds	r5, #1
 8016d94:	50d1      	str	r1, [r2, r3]
 8016d96:	8902      	ldrh	r2, [r0, #8]
 8016d98:	b2a9      	uxth	r1, r5
 8016d9a:	428a      	cmp	r2, r1
 8016d9c:	d8ed      	bhi.n	8016d7a <uxr_reset_output_reliable_stream+0xa>
 8016d9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016da2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8016da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016daa:	2200      	movs	r2, #0
 8016dac:	4b04      	ldr	r3, [pc, #16]	; (8016dc0 <uxr_reset_output_reliable_stream+0x50>)
 8016dae:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8016db2:	bc30      	pop	{r4, r5}
 8016db4:	8241      	strh	r1, [r0, #18]
 8016db6:	8402      	strh	r2, [r0, #32]
 8016db8:	f8c0 300e 	str.w	r3, [r0, #14]
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	ffff0000 	.word	0xffff0000

08016dc4 <uxr_prepare_reliable_buffer_to_write>:
 8016dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc8:	4604      	mov	r4, r0
 8016dca:	89c5      	ldrh	r5, [r0, #14]
 8016dcc:	8900      	ldrh	r0, [r0, #8]
 8016dce:	6866      	ldr	r6, [r4, #4]
 8016dd0:	fbb5 f3f0 	udiv	r3, r5, r0
 8016dd4:	fbb6 f6f0 	udiv	r6, r6, r0
 8016dd8:	fb00 5313 	mls	r3, r0, r3, r5
 8016ddc:	b29b      	uxth	r3, r3
 8016dde:	fb06 f303 	mul.w	r3, r6, r3
 8016de2:	4688      	mov	r8, r1
 8016de4:	6821      	ldr	r1, [r4, #0]
 8016de6:	3304      	adds	r3, #4
 8016de8:	b091      	sub	sp, #68	; 0x44
 8016dea:	18cb      	adds	r3, r1, r3
 8016dec:	9604      	str	r6, [sp, #16]
 8016dee:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016df2:	2104      	movs	r1, #4
 8016df4:	4630      	mov	r0, r6
 8016df6:	9305      	str	r3, [sp, #20]
 8016df8:	9206      	str	r2, [sp, #24]
 8016dfa:	f7f9 f801 	bl	800fe00 <ucdr_alignment>
 8016dfe:	1833      	adds	r3, r6, r0
 8016e00:	9e04      	ldr	r6, [sp, #16]
 8016e02:	eb03 0708 	add.w	r7, r3, r8
 8016e06:	3e04      	subs	r6, #4
 8016e08:	42b7      	cmp	r7, r6
 8016e0a:	9303      	str	r3, [sp, #12]
 8016e0c:	f240 80dd 	bls.w	8016fca <uxr_prepare_reliable_buffer_to_write+0x206>
 8016e10:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016e14:	eb0e 0308 	add.w	r3, lr, r8
 8016e18:	42b3      	cmp	r3, r6
 8016e1a:	f240 80c3 	bls.w	8016fa4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8016e1e:	9b03      	ldr	r3, [sp, #12]
 8016e20:	3304      	adds	r3, #4
 8016e22:	42b3      	cmp	r3, r6
 8016e24:	f080 810d 	bcs.w	8017042 <uxr_prepare_reliable_buffer_to_write+0x27e>
 8016e28:	8920      	ldrh	r0, [r4, #8]
 8016e2a:	2800      	cmp	r0, #0
 8016e2c:	f000 8123 	beq.w	8017076 <uxr_prepare_reliable_buffer_to_write+0x2b2>
 8016e30:	f04f 0c00 	mov.w	ip, #0
 8016e34:	6862      	ldr	r2, [r4, #4]
 8016e36:	4661      	mov	r1, ip
 8016e38:	fbb2 f9f0 	udiv	r9, r2, r0
 8016e3c:	4662      	mov	r2, ip
 8016e3e:	6827      	ldr	r7, [r4, #0]
 8016e40:	fbb2 f3f0 	udiv	r3, r2, r0
 8016e44:	fb00 2313 	mls	r3, r0, r3, r2
 8016e48:	b29b      	uxth	r3, r3
 8016e4a:	fb09 7303 	mla	r3, r9, r3, r7
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	f10c 0c01 	add.w	ip, ip, #1
 8016e54:	459e      	cmp	lr, r3
 8016e56:	bf08      	it	eq
 8016e58:	3101      	addeq	r1, #1
 8016e5a:	fa1f f28c 	uxth.w	r2, ip
 8016e5e:	bf08      	it	eq
 8016e60:	b289      	uxtheq	r1, r1
 8016e62:	4282      	cmp	r2, r0
 8016e64:	d3ec      	bcc.n	8016e40 <uxr_prepare_reliable_buffer_to_write+0x7c>
 8016e66:	9b03      	ldr	r3, [sp, #12]
 8016e68:	1f37      	subs	r7, r6, #4
 8016e6a:	b2bf      	uxth	r7, r7
 8016e6c:	eba7 0903 	sub.w	r9, r7, r3
 8016e70:	fa1f f989 	uxth.w	r9, r9
 8016e74:	eba7 070e 	sub.w	r7, r7, lr
 8016e78:	b2bf      	uxth	r7, r7
 8016e7a:	eba8 0809 	sub.w	r8, r8, r9
 8016e7e:	fbb8 faf7 	udiv	sl, r8, r7
 8016e82:	fb07 831a 	mls	r3, r7, sl, r8
 8016e86:	9707      	str	r7, [sp, #28]
 8016e88:	b113      	cbz	r3, 8016e90 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8016e8a:	9307      	str	r3, [sp, #28]
 8016e8c:	f10a 0a01 	add.w	sl, sl, #1
 8016e90:	fa1f fa8a 	uxth.w	sl, sl
 8016e94:	458a      	cmp	sl, r1
 8016e96:	f200 8094 	bhi.w	8016fc2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016e9a:	f10d 0b20 	add.w	fp, sp, #32
 8016e9e:	f1ba 0f00 	cmp.w	sl, #0
 8016ea2:	d039      	beq.n	8016f18 <uxr_prepare_reliable_buffer_to_write+0x154>
 8016ea4:	f04f 0800 	mov.w	r8, #0
 8016ea8:	f10d 0b20 	add.w	fp, sp, #32
 8016eac:	e000      	b.n	8016eb0 <uxr_prepare_reliable_buffer_to_write+0xec>
 8016eae:	46b9      	mov	r9, r7
 8016eb0:	fbb5 f1f0 	udiv	r1, r5, r0
 8016eb4:	6863      	ldr	r3, [r4, #4]
 8016eb6:	fb00 5111 	mls	r1, r0, r1, r5
 8016eba:	fbb3 f3f0 	udiv	r3, r3, r0
 8016ebe:	b289      	uxth	r1, r1
 8016ec0:	fb01 f103 	mul.w	r1, r1, r3
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	3104      	adds	r1, #4
 8016ec8:	4419      	add	r1, r3
 8016eca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ece:	4632      	mov	r2, r6
 8016ed0:	4658      	mov	r0, fp
 8016ed2:	9300      	str	r3, [sp, #0]
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	f7f8 ff7d 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8016eda:	464a      	mov	r2, r9
 8016edc:	2300      	movs	r3, #0
 8016ede:	210d      	movs	r1, #13
 8016ee0:	4658      	mov	r0, fp
 8016ee2:	f7fb fa0d 	bl	8012300 <uxr_buffer_submessage_header>
 8016ee6:	8921      	ldrh	r1, [r4, #8]
 8016ee8:	6862      	ldr	r2, [r4, #4]
 8016eea:	fbb5 f3f1 	udiv	r3, r5, r1
 8016eee:	fbb2 f2f1 	udiv	r2, r2, r1
 8016ef2:	fb01 5313 	mls	r3, r1, r3, r5
 8016ef6:	b29b      	uxth	r3, r3
 8016ef8:	fb03 f302 	mul.w	r3, r3, r2
 8016efc:	6822      	ldr	r2, [r4, #0]
 8016efe:	4628      	mov	r0, r5
 8016f00:	50d6      	str	r6, [r2, r3]
 8016f02:	2101      	movs	r1, #1
 8016f04:	f000 f9c2 	bl	801728c <uxr_seq_num_add>
 8016f08:	f108 0801 	add.w	r8, r8, #1
 8016f0c:	fa1f f388 	uxth.w	r3, r8
 8016f10:	459a      	cmp	sl, r3
 8016f12:	4605      	mov	r5, r0
 8016f14:	8920      	ldrh	r0, [r4, #8]
 8016f16:	d8ca      	bhi.n	8016eae <uxr_prepare_reliable_buffer_to_write+0xea>
 8016f18:	fbb5 f1f0 	udiv	r1, r5, r0
 8016f1c:	6863      	ldr	r3, [r4, #4]
 8016f1e:	fb00 5111 	mls	r1, r0, r1, r5
 8016f22:	fbb3 f0f0 	udiv	r0, r3, r0
 8016f26:	b289      	uxth	r1, r1
 8016f28:	fb01 f100 	mul.w	r1, r1, r0
 8016f2c:	6823      	ldr	r3, [r4, #0]
 8016f2e:	3104      	adds	r1, #4
 8016f30:	4419      	add	r1, r3
 8016f32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f36:	4632      	mov	r2, r6
 8016f38:	4658      	mov	r0, fp
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	f7f8 ff49 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8016f42:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016f46:	4658      	mov	r0, fp
 8016f48:	fa1f f288 	uxth.w	r2, r8
 8016f4c:	2302      	movs	r3, #2
 8016f4e:	210d      	movs	r1, #13
 8016f50:	f7fb f9d6 	bl	8012300 <uxr_buffer_submessage_header>
 8016f54:	8922      	ldrh	r2, [r4, #8]
 8016f56:	6863      	ldr	r3, [r4, #4]
 8016f58:	fbb5 f0f2 	udiv	r0, r5, r2
 8016f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016f60:	fb02 5010 	mls	r0, r2, r0, r5
 8016f64:	b280      	uxth	r0, r0
 8016f66:	fb00 f003 	mul.w	r0, r0, r3
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	9f03      	ldr	r7, [sp, #12]
 8016f6e:	9307      	str	r3, [sp, #28]
 8016f70:	9b05      	ldr	r3, [sp, #20]
 8016f72:	7b26      	ldrb	r6, [r4, #12]
 8016f74:	1d39      	adds	r1, r7, #4
 8016f76:	440b      	add	r3, r1
 8016f78:	4619      	mov	r1, r3
 8016f7a:	3604      	adds	r6, #4
 8016f7c:	9b07      	ldr	r3, [sp, #28]
 8016f7e:	9a04      	ldr	r2, [sp, #16]
 8016f80:	4446      	add	r6, r8
 8016f82:	501e      	str	r6, [r3, r0]
 8016f84:	9e06      	ldr	r6, [sp, #24]
 8016f86:	3a08      	subs	r2, #8
 8016f88:	4630      	mov	r0, r6
 8016f8a:	1bd2      	subs	r2, r2, r7
 8016f8c:	f7f8 ff34 	bl	800fdf8 <ucdr_init_buffer>
 8016f90:	4630      	mov	r0, r6
 8016f92:	4622      	mov	r2, r4
 8016f94:	4939      	ldr	r1, [pc, #228]	; (801707c <uxr_prepare_reliable_buffer_to_write+0x2b8>)
 8016f96:	f7f8 ff05 	bl	800fda4 <ucdr_set_on_full_buffer_callback>
 8016f9a:	2001      	movs	r0, #1
 8016f9c:	81e5      	strh	r5, [r4, #14]
 8016f9e:	b011      	add	sp, #68	; 0x44
 8016fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fa4:	2101      	movs	r1, #1
 8016fa6:	89e0      	ldrh	r0, [r4, #14]
 8016fa8:	f000 f970 	bl	801728c <uxr_seq_num_add>
 8016fac:	8921      	ldrh	r1, [r4, #8]
 8016fae:	4605      	mov	r5, r0
 8016fb0:	8a60      	ldrh	r0, [r4, #18]
 8016fb2:	f000 f96b 	bl	801728c <uxr_seq_num_add>
 8016fb6:	4601      	mov	r1, r0
 8016fb8:	4628      	mov	r0, r5
 8016fba:	f000 f96f 	bl	801729c <uxr_seq_num_cmp>
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	dd24      	ble.n	801700c <uxr_prepare_reliable_buffer_to_write+0x248>
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	b011      	add	sp, #68	; 0x44
 8016fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fca:	8921      	ldrh	r1, [r4, #8]
 8016fcc:	8a60      	ldrh	r0, [r4, #18]
 8016fce:	f000 f95d 	bl	801728c <uxr_seq_num_add>
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	f000 f961 	bl	801729c <uxr_seq_num_cmp>
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	dcf1      	bgt.n	8016fc2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016fde:	8920      	ldrh	r0, [r4, #8]
 8016fe0:	6862      	ldr	r2, [r4, #4]
 8016fe2:	fbb5 f3f0 	udiv	r3, r5, r0
 8016fe6:	fbb2 f2f0 	udiv	r2, r2, r0
 8016fea:	fb00 5313 	mls	r3, r0, r3, r5
 8016fee:	b29b      	uxth	r3, r3
 8016ff0:	fb03 f302 	mul.w	r3, r3, r2
 8016ff4:	6822      	ldr	r2, [r4, #0]
 8016ff6:	9806      	ldr	r0, [sp, #24]
 8016ff8:	50d7      	str	r7, [r2, r3]
 8016ffa:	9b03      	ldr	r3, [sp, #12]
 8016ffc:	463a      	mov	r2, r7
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	9905      	ldr	r1, [sp, #20]
 8017002:	2300      	movs	r3, #0
 8017004:	f7f8 fee6 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 8017008:	2001      	movs	r0, #1
 801700a:	e7db      	b.n	8016fc4 <uxr_prepare_reliable_buffer_to_write+0x200>
 801700c:	8921      	ldrh	r1, [r4, #8]
 801700e:	6862      	ldr	r2, [r4, #4]
 8017010:	fbb5 f3f1 	udiv	r3, r5, r1
 8017014:	fbb2 f2f1 	udiv	r2, r2, r1
 8017018:	fb01 5313 	mls	r3, r1, r3, r5
 801701c:	b29b      	uxth	r3, r3
 801701e:	fb03 f302 	mul.w	r3, r3, r2
 8017022:	6821      	ldr	r1, [r4, #0]
 8017024:	7b22      	ldrb	r2, [r4, #12]
 8017026:	3304      	adds	r3, #4
 8017028:	4419      	add	r1, r3
 801702a:	4442      	add	r2, r8
 801702c:	f841 2c04 	str.w	r2, [r1, #-4]
 8017030:	7b23      	ldrb	r3, [r4, #12]
 8017032:	9806      	ldr	r0, [sp, #24]
 8017034:	9300      	str	r3, [sp, #0]
 8017036:	2300      	movs	r3, #0
 8017038:	f7f8 fecc 	bl	800fdd4 <ucdr_init_buffer_origin_offset>
 801703c:	2001      	movs	r0, #1
 801703e:	81e5      	strh	r5, [r4, #14]
 8017040:	e7c0      	b.n	8016fc4 <uxr_prepare_reliable_buffer_to_write+0x200>
 8017042:	4628      	mov	r0, r5
 8017044:	2101      	movs	r1, #1
 8017046:	f000 f921 	bl	801728c <uxr_seq_num_add>
 801704a:	4605      	mov	r5, r0
 801704c:	8920      	ldrh	r0, [r4, #8]
 801704e:	6862      	ldr	r2, [r4, #4]
 8017050:	fbb5 f3f0 	udiv	r3, r5, r0
 8017054:	fbb2 f2f0 	udiv	r2, r2, r0
 8017058:	fb00 5313 	mls	r3, r0, r3, r5
 801705c:	b29b      	uxth	r3, r3
 801705e:	fb03 f302 	mul.w	r3, r3, r2
 8017062:	6822      	ldr	r2, [r4, #0]
 8017064:	3304      	adds	r3, #4
 8017066:	18d3      	adds	r3, r2, r3
 8017068:	9305      	str	r3, [sp, #20]
 801706a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801706e:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8017072:	9303      	str	r3, [sp, #12]
 8017074:	e6d9      	b.n	8016e2a <uxr_prepare_reliable_buffer_to_write+0x66>
 8017076:	4601      	mov	r1, r0
 8017078:	e6f5      	b.n	8016e66 <uxr_prepare_reliable_buffer_to_write+0xa2>
 801707a:	bf00      	nop
 801707c:	08016cbd 	.word	0x08016cbd

08017080 <uxr_prepare_next_reliable_buffer_to_send>:
 8017080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017084:	4606      	mov	r6, r0
 8017086:	4689      	mov	r9, r1
 8017088:	8a00      	ldrh	r0, [r0, #16]
 801708a:	2101      	movs	r1, #1
 801708c:	4690      	mov	r8, r2
 801708e:	461f      	mov	r7, r3
 8017090:	f000 f8fc 	bl	801728c <uxr_seq_num_add>
 8017094:	8038      	strh	r0, [r7, #0]
 8017096:	8932      	ldrh	r2, [r6, #8]
 8017098:	6873      	ldr	r3, [r6, #4]
 801709a:	fbb0 f5f2 	udiv	r5, r0, r2
 801709e:	fbb3 f3f2 	udiv	r3, r3, r2
 80170a2:	fb02 0415 	mls	r4, r2, r5, r0
 80170a6:	b2a4      	uxth	r4, r4
 80170a8:	fb04 f403 	mul.w	r4, r4, r3
 80170ac:	6833      	ldr	r3, [r6, #0]
 80170ae:	3404      	adds	r4, #4
 80170b0:	4423      	add	r3, r4
 80170b2:	f8c9 3000 	str.w	r3, [r9]
 80170b6:	6833      	ldr	r3, [r6, #0]
 80170b8:	89f1      	ldrh	r1, [r6, #14]
 80170ba:	441c      	add	r4, r3
 80170bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80170c0:	f8c8 3000 	str.w	r3, [r8]
 80170c4:	f000 f8ea 	bl	801729c <uxr_seq_num_cmp>
 80170c8:	2800      	cmp	r0, #0
 80170ca:	dd02      	ble.n	80170d2 <uxr_prepare_next_reliable_buffer_to_send+0x52>
 80170cc:	2000      	movs	r0, #0
 80170ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170d2:	f8d8 2000 	ldr.w	r2, [r8]
 80170d6:	7b33      	ldrb	r3, [r6, #12]
 80170d8:	429a      	cmp	r2, r3
 80170da:	d9f7      	bls.n	80170cc <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 80170dc:	8a71      	ldrh	r1, [r6, #18]
 80170de:	8a30      	ldrh	r0, [r6, #16]
 80170e0:	f000 f8d8 	bl	8017294 <uxr_seq_num_sub>
 80170e4:	8933      	ldrh	r3, [r6, #8]
 80170e6:	4283      	cmp	r3, r0
 80170e8:	d0f0      	beq.n	80170cc <uxr_prepare_next_reliable_buffer_to_send+0x4c>
 80170ea:	8838      	ldrh	r0, [r7, #0]
 80170ec:	89f3      	ldrh	r3, [r6, #14]
 80170ee:	8230      	strh	r0, [r6, #16]
 80170f0:	4298      	cmp	r0, r3
 80170f2:	d002      	beq.n	80170fa <uxr_prepare_next_reliable_buffer_to_send+0x7a>
 80170f4:	2001      	movs	r0, #1
 80170f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170fa:	2101      	movs	r1, #1
 80170fc:	f000 f8c6 	bl	801728c <uxr_seq_num_add>
 8017100:	4603      	mov	r3, r0
 8017102:	2001      	movs	r0, #1
 8017104:	81f3      	strh	r3, [r6, #14]
 8017106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801710a:	bf00      	nop

0801710c <uxr_update_output_stream_heartbeat_timestamp>:
 801710c:	b5d0      	push	{r4, r6, r7, lr}
 801710e:	8a01      	ldrh	r1, [r0, #16]
 8017110:	4604      	mov	r4, r0
 8017112:	8a40      	ldrh	r0, [r0, #18]
 8017114:	4616      	mov	r6, r2
 8017116:	461f      	mov	r7, r3
 8017118:	f000 f8c0 	bl	801729c <uxr_seq_num_cmp>
 801711c:	2800      	cmp	r0, #0
 801711e:	db07      	blt.n	8017130 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8017120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017124:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017128:	2000      	movs	r0, #0
 801712a:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801712e:	bdd0      	pop	{r4, r6, r7, pc}
 8017130:	f894 0020 	ldrb.w	r0, [r4, #32]
 8017134:	b948      	cbnz	r0, 801714a <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8017136:	2301      	movs	r3, #1
 8017138:	f884 3020 	strb.w	r3, [r4, #32]
 801713c:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8017140:	f147 0200 	adc.w	r2, r7, #0
 8017144:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8017148:	bdd0      	pop	{r4, r6, r7, pc}
 801714a:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801714e:	4296      	cmp	r6, r2
 8017150:	eb77 0303 	sbcs.w	r3, r7, r3
 8017154:	bfa5      	ittet	ge
 8017156:	3001      	addge	r0, #1
 8017158:	f884 0020 	strbge.w	r0, [r4, #32]
 801715c:	2000      	movlt	r0, #0
 801715e:	2001      	movge	r0, #1
 8017160:	e7ec      	b.n	801713c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8017162:	bf00      	nop

08017164 <uxr_begin_output_nack_buffer_it>:
 8017164:	8a40      	ldrh	r0, [r0, #18]
 8017166:	4770      	bx	lr

08017168 <uxr_next_reliable_nack_buffer_to_send>:
 8017168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801716c:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8017170:	f1b9 0f00 	cmp.w	r9, #0
 8017174:	d011      	beq.n	801719a <uxr_next_reliable_nack_buffer_to_send+0x32>
 8017176:	460f      	mov	r7, r1
 8017178:	4690      	mov	r8, r2
 801717a:	461e      	mov	r6, r3
 801717c:	4605      	mov	r5, r0
 801717e:	8818      	ldrh	r0, [r3, #0]
 8017180:	2101      	movs	r1, #1
 8017182:	f000 f883 	bl	801728c <uxr_seq_num_add>
 8017186:	8030      	strh	r0, [r6, #0]
 8017188:	8a29      	ldrh	r1, [r5, #16]
 801718a:	f000 f887 	bl	801729c <uxr_seq_num_cmp>
 801718e:	2800      	cmp	r0, #0
 8017190:	dd06      	ble.n	80171a0 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8017192:	2300      	movs	r3, #0
 8017194:	4699      	mov	r9, r3
 8017196:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 801719a:	4648      	mov	r0, r9
 801719c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171a0:	892a      	ldrh	r2, [r5, #8]
 80171a2:	8830      	ldrh	r0, [r6, #0]
 80171a4:	686b      	ldr	r3, [r5, #4]
 80171a6:	fbb0 f4f2 	udiv	r4, r0, r2
 80171aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80171ae:	fb02 0414 	mls	r4, r2, r4, r0
 80171b2:	b2a4      	uxth	r4, r4
 80171b4:	fb04 f403 	mul.w	r4, r4, r3
 80171b8:	682b      	ldr	r3, [r5, #0]
 80171ba:	3404      	adds	r4, #4
 80171bc:	4423      	add	r3, r4
 80171be:	603b      	str	r3, [r7, #0]
 80171c0:	682b      	ldr	r3, [r5, #0]
 80171c2:	441c      	add	r4, r3
 80171c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80171c8:	f8c8 3000 	str.w	r3, [r8]
 80171cc:	7b2a      	ldrb	r2, [r5, #12]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d0d6      	beq.n	8017180 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80171d2:	4648      	mov	r0, r9
 80171d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080171d8 <uxr_process_acknack>:
 80171d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171da:	4604      	mov	r4, r0
 80171dc:	460e      	mov	r6, r1
 80171de:	4610      	mov	r0, r2
 80171e0:	2101      	movs	r1, #1
 80171e2:	f000 f857 	bl	8017294 <uxr_seq_num_sub>
 80171e6:	8a61      	ldrh	r1, [r4, #18]
 80171e8:	f000 f854 	bl	8017294 <uxr_seq_num_sub>
 80171ec:	b1b8      	cbz	r0, 801721e <uxr_process_acknack+0x46>
 80171ee:	4605      	mov	r5, r0
 80171f0:	2700      	movs	r7, #0
 80171f2:	2101      	movs	r1, #1
 80171f4:	8a60      	ldrh	r0, [r4, #18]
 80171f6:	f000 f849 	bl	801728c <uxr_seq_num_add>
 80171fa:	8921      	ldrh	r1, [r4, #8]
 80171fc:	6862      	ldr	r2, [r4, #4]
 80171fe:	fbb0 f3f1 	udiv	r3, r0, r1
 8017202:	fbb2 f2f1 	udiv	r2, r2, r1
 8017206:	fb01 0313 	mls	r3, r1, r3, r0
 801720a:	b29b      	uxth	r3, r3
 801720c:	fb03 f302 	mul.w	r3, r3, r2
 8017210:	7b21      	ldrb	r1, [r4, #12]
 8017212:	6822      	ldr	r2, [r4, #0]
 8017214:	3701      	adds	r7, #1
 8017216:	42bd      	cmp	r5, r7
 8017218:	8260      	strh	r0, [r4, #18]
 801721a:	50d1      	str	r1, [r2, r3]
 801721c:	d1e9      	bne.n	80171f2 <uxr_process_acknack+0x1a>
 801721e:	3e00      	subs	r6, #0
 8017220:	f04f 0300 	mov.w	r3, #0
 8017224:	bf18      	it	ne
 8017226:	2601      	movne	r6, #1
 8017228:	f884 3020 	strb.w	r3, [r4, #32]
 801722c:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8017230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017232:	bf00      	nop

08017234 <uxr_is_output_up_to_date>:
 8017234:	8a01      	ldrh	r1, [r0, #16]
 8017236:	b508      	push	{r3, lr}
 8017238:	8a40      	ldrh	r0, [r0, #18]
 801723a:	f000 f82f 	bl	801729c <uxr_seq_num_cmp>
 801723e:	fab0 f080 	clz	r0, r0
 8017242:	0940      	lsrs	r0, r0, #5
 8017244:	bd08      	pop	{r3, pc}
 8017246:	bf00      	nop

08017248 <get_available_free_slots>:
 8017248:	8901      	ldrh	r1, [r0, #8]
 801724a:	b1e1      	cbz	r1, 8017286 <get_available_free_slots+0x3e>
 801724c:	b4f0      	push	{r4, r5, r6, r7}
 801724e:	2400      	movs	r4, #0
 8017250:	4603      	mov	r3, r0
 8017252:	6845      	ldr	r5, [r0, #4]
 8017254:	4622      	mov	r2, r4
 8017256:	4620      	mov	r0, r4
 8017258:	fbb5 f5f1 	udiv	r5, r5, r1
 801725c:	681f      	ldr	r7, [r3, #0]
 801725e:	7b1e      	ldrb	r6, [r3, #12]
 8017260:	fbb2 f3f1 	udiv	r3, r2, r1
 8017264:	fb01 2313 	mls	r3, r1, r3, r2
 8017268:	b29b      	uxth	r3, r3
 801726a:	fb05 7303 	mla	r3, r5, r3, r7
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	3401      	adds	r4, #1
 8017272:	429e      	cmp	r6, r3
 8017274:	bf08      	it	eq
 8017276:	3001      	addeq	r0, #1
 8017278:	b2a2      	uxth	r2, r4
 801727a:	bf08      	it	eq
 801727c:	b280      	uxtheq	r0, r0
 801727e:	428a      	cmp	r2, r1
 8017280:	d3ee      	bcc.n	8017260 <get_available_free_slots+0x18>
 8017282:	bcf0      	pop	{r4, r5, r6, r7}
 8017284:	4770      	bx	lr
 8017286:	4608      	mov	r0, r1
 8017288:	4770      	bx	lr
 801728a:	bf00      	nop

0801728c <uxr_seq_num_add>:
 801728c:	4408      	add	r0, r1
 801728e:	b280      	uxth	r0, r0
 8017290:	4770      	bx	lr
 8017292:	bf00      	nop

08017294 <uxr_seq_num_sub>:
 8017294:	1a40      	subs	r0, r0, r1
 8017296:	b280      	uxth	r0, r0
 8017298:	4770      	bx	lr
 801729a:	bf00      	nop

0801729c <uxr_seq_num_cmp>:
 801729c:	4288      	cmp	r0, r1
 801729e:	d011      	beq.n	80172c4 <uxr_seq_num_cmp+0x28>
 80172a0:	d309      	bcc.n	80172b6 <uxr_seq_num_cmp+0x1a>
 80172a2:	4288      	cmp	r0, r1
 80172a4:	d910      	bls.n	80172c8 <uxr_seq_num_cmp+0x2c>
 80172a6:	1a40      	subs	r0, r0, r1
 80172a8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80172ac:	bfd4      	ite	le
 80172ae:	2001      	movle	r0, #1
 80172b0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80172b4:	4770      	bx	lr
 80172b6:	1a0b      	subs	r3, r1, r0
 80172b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80172bc:	daf1      	bge.n	80172a2 <uxr_seq_num_cmp+0x6>
 80172be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172c2:	4770      	bx	lr
 80172c4:	2000      	movs	r0, #0
 80172c6:	4770      	bx	lr
 80172c8:	2001      	movs	r0, #1
 80172ca:	4770      	bx	lr

080172cc <rcl_get_default_domain_id>:
 80172cc:	2300      	movs	r3, #0
 80172ce:	b530      	push	{r4, r5, lr}
 80172d0:	b083      	sub	sp, #12
 80172d2:	9300      	str	r3, [sp, #0]
 80172d4:	b1d0      	cbz	r0, 801730c <rcl_get_default_domain_id+0x40>
 80172d6:	4604      	mov	r4, r0
 80172d8:	4669      	mov	r1, sp
 80172da:	4815      	ldr	r0, [pc, #84]	; (8017330 <rcl_get_default_domain_id+0x64>)
 80172dc:	f7fe fbac 	bl	8015a38 <rcutils_get_env>
 80172e0:	4602      	mov	r2, r0
 80172e2:	b110      	cbz	r0, 80172ea <rcl_get_default_domain_id+0x1e>
 80172e4:	2001      	movs	r0, #1
 80172e6:	b003      	add	sp, #12
 80172e8:	bd30      	pop	{r4, r5, pc}
 80172ea:	9b00      	ldr	r3, [sp, #0]
 80172ec:	b18b      	cbz	r3, 8017312 <rcl_get_default_domain_id+0x46>
 80172ee:	7818      	ldrb	r0, [r3, #0]
 80172f0:	2800      	cmp	r0, #0
 80172f2:	d0f8      	beq.n	80172e6 <rcl_get_default_domain_id+0x1a>
 80172f4:	4618      	mov	r0, r3
 80172f6:	a901      	add	r1, sp, #4
 80172f8:	9201      	str	r2, [sp, #4]
 80172fa:	f000 fc81 	bl	8017c00 <strtoul>
 80172fe:	4605      	mov	r5, r0
 8017300:	b150      	cbz	r0, 8017318 <rcl_get_default_domain_id+0x4c>
 8017302:	1c43      	adds	r3, r0, #1
 8017304:	d00d      	beq.n	8017322 <rcl_get_default_domain_id+0x56>
 8017306:	2000      	movs	r0, #0
 8017308:	6025      	str	r5, [r4, #0]
 801730a:	e7ec      	b.n	80172e6 <rcl_get_default_domain_id+0x1a>
 801730c:	200b      	movs	r0, #11
 801730e:	b003      	add	sp, #12
 8017310:	bd30      	pop	{r4, r5, pc}
 8017312:	4618      	mov	r0, r3
 8017314:	b003      	add	sp, #12
 8017316:	bd30      	pop	{r4, r5, pc}
 8017318:	9b01      	ldr	r3, [sp, #4]
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d0f2      	beq.n	8017306 <rcl_get_default_domain_id+0x3a>
 8017320:	e7e0      	b.n	80172e4 <rcl_get_default_domain_id+0x18>
 8017322:	f000 f94f 	bl	80175c4 <__errno>
 8017326:	6803      	ldr	r3, [r0, #0]
 8017328:	2b22      	cmp	r3, #34	; 0x22
 801732a:	d1ec      	bne.n	8017306 <rcl_get_default_domain_id+0x3a>
 801732c:	e7da      	b.n	80172e4 <rcl_get_default_domain_id+0x18>
 801732e:	bf00      	nop
 8017330:	0801a73c 	.word	0x0801a73c

08017334 <rcl_get_zero_initialized_guard_condition>:
 8017334:	4603      	mov	r3, r0
 8017336:	4a03      	ldr	r2, [pc, #12]	; (8017344 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017338:	e892 0003 	ldmia.w	r2, {r0, r1}
 801733c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017340:	4618      	mov	r0, r3
 8017342:	4770      	bx	lr
 8017344:	0801a74c 	.word	0x0801a74c

08017348 <rcl_guard_condition_init>:
 8017348:	b082      	sub	sp, #8
 801734a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801734c:	b087      	sub	sp, #28
 801734e:	ad0c      	add	r5, sp, #48	; 0x30
 8017350:	e9c5 2300 	strd	r2, r3, [r5]
 8017354:	ac01      	add	r4, sp, #4
 8017356:	4607      	mov	r7, r0
 8017358:	460e      	mov	r6, r1
 801735a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801735c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801735e:	682b      	ldr	r3, [r5, #0]
 8017360:	a801      	add	r0, sp, #4
 8017362:	6023      	str	r3, [r4, #0]
 8017364:	f7f3 ff74 	bl	800b250 <rcutils_allocator_is_valid>
 8017368:	2800      	cmp	r0, #0
 801736a:	d032      	beq.n	80173d2 <rcl_guard_condition_init+0x8a>
 801736c:	463d      	mov	r5, r7
 801736e:	2f00      	cmp	r7, #0
 8017370:	d02f      	beq.n	80173d2 <rcl_guard_condition_init+0x8a>
 8017372:	687f      	ldr	r7, [r7, #4]
 8017374:	bb3f      	cbnz	r7, 80173c6 <rcl_guard_condition_init+0x7e>
 8017376:	2e00      	cmp	r6, #0
 8017378:	d02b      	beq.n	80173d2 <rcl_guard_condition_init+0x8a>
 801737a:	4630      	mov	r0, r6
 801737c:	f7fc f8f0 	bl	8013560 <rcl_context_is_valid>
 8017380:	2800      	cmp	r0, #0
 8017382:	d02c      	beq.n	80173de <rcl_guard_condition_init+0x96>
 8017384:	201c      	movs	r0, #28
 8017386:	9b01      	ldr	r3, [sp, #4]
 8017388:	9905      	ldr	r1, [sp, #20]
 801738a:	4798      	blx	r3
 801738c:	4604      	mov	r4, r0
 801738e:	6068      	str	r0, [r5, #4]
 8017390:	2800      	cmp	r0, #0
 8017392:	d02d      	beq.n	80173f0 <rcl_guard_condition_init+0xa8>
 8017394:	6830      	ldr	r0, [r6, #0]
 8017396:	3028      	adds	r0, #40	; 0x28
 8017398:	f000 f8d4 	bl	8017544 <rmw_create_guard_condition>
 801739c:	686e      	ldr	r6, [r5, #4]
 801739e:	6020      	str	r0, [r4, #0]
 80173a0:	6834      	ldr	r4, [r6, #0]
 80173a2:	b1f4      	cbz	r4, 80173e2 <rcl_guard_condition_init+0x9a>
 80173a4:	f04f 0c01 	mov.w	ip, #1
 80173a8:	ac01      	add	r4, sp, #4
 80173aa:	f106 0508 	add.w	r5, r6, #8
 80173ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80173b0:	f886 c004 	strb.w	ip, [r6, #4]
 80173b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80173b6:	4638      	mov	r0, r7
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	602b      	str	r3, [r5, #0]
 80173bc:	b007      	add	sp, #28
 80173be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80173c2:	b002      	add	sp, #8
 80173c4:	4770      	bx	lr
 80173c6:	2064      	movs	r0, #100	; 0x64
 80173c8:	b007      	add	sp, #28
 80173ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80173ce:	b002      	add	sp, #8
 80173d0:	4770      	bx	lr
 80173d2:	200b      	movs	r0, #11
 80173d4:	b007      	add	sp, #28
 80173d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80173da:	b002      	add	sp, #8
 80173dc:	4770      	bx	lr
 80173de:	2065      	movs	r0, #101	; 0x65
 80173e0:	e7f2      	b.n	80173c8 <rcl_guard_condition_init+0x80>
 80173e2:	4630      	mov	r0, r6
 80173e4:	9b02      	ldr	r3, [sp, #8]
 80173e6:	9905      	ldr	r1, [sp, #20]
 80173e8:	4798      	blx	r3
 80173ea:	2001      	movs	r0, #1
 80173ec:	606c      	str	r4, [r5, #4]
 80173ee:	e7eb      	b.n	80173c8 <rcl_guard_condition_init+0x80>
 80173f0:	200a      	movs	r0, #10
 80173f2:	e7e9      	b.n	80173c8 <rcl_guard_condition_init+0x80>

080173f4 <rcl_guard_condition_init_from_rmw>:
 80173f4:	4684      	mov	ip, r0
 80173f6:	b082      	sub	sp, #8
 80173f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173fc:	b086      	sub	sp, #24
 80173fe:	ac0c      	add	r4, sp, #48	; 0x30
 8017400:	f844 3f04 	str.w	r3, [r4, #4]!
 8017404:	ad01      	add	r5, sp, #4
 8017406:	460f      	mov	r7, r1
 8017408:	4616      	mov	r6, r2
 801740a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801740c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801740e:	6823      	ldr	r3, [r4, #0]
 8017410:	a801      	add	r0, sp, #4
 8017412:	4664      	mov	r4, ip
 8017414:	602b      	str	r3, [r5, #0]
 8017416:	f7f3 ff1b 	bl	800b250 <rcutils_allocator_is_valid>
 801741a:	b338      	cbz	r0, 801746c <rcl_guard_condition_init_from_rmw+0x78>
 801741c:	b334      	cbz	r4, 801746c <rcl_guard_condition_init_from_rmw+0x78>
 801741e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017422:	f1b8 0f00 	cmp.w	r8, #0
 8017426:	d11b      	bne.n	8017460 <rcl_guard_condition_init_from_rmw+0x6c>
 8017428:	b306      	cbz	r6, 801746c <rcl_guard_condition_init_from_rmw+0x78>
 801742a:	4630      	mov	r0, r6
 801742c:	f7fc f898 	bl	8013560 <rcl_context_is_valid>
 8017430:	b310      	cbz	r0, 8017478 <rcl_guard_condition_init_from_rmw+0x84>
 8017432:	201c      	movs	r0, #28
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	9905      	ldr	r1, [sp, #20]
 8017438:	4798      	blx	r3
 801743a:	4605      	mov	r5, r0
 801743c:	6060      	str	r0, [r4, #4]
 801743e:	b340      	cbz	r0, 8017492 <rcl_guard_condition_init_from_rmw+0x9e>
 8017440:	b1e7      	cbz	r7, 801747c <rcl_guard_condition_init_from_rmw+0x88>
 8017442:	6007      	str	r7, [r0, #0]
 8017444:	f880 8004 	strb.w	r8, [r0, #4]
 8017448:	ac01      	add	r4, sp, #4
 801744a:	3508      	adds	r5, #8
 801744c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801744e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017450:	2000      	movs	r0, #0
 8017452:	6823      	ldr	r3, [r4, #0]
 8017454:	602b      	str	r3, [r5, #0]
 8017456:	b006      	add	sp, #24
 8017458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801745c:	b002      	add	sp, #8
 801745e:	4770      	bx	lr
 8017460:	2064      	movs	r0, #100	; 0x64
 8017462:	b006      	add	sp, #24
 8017464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017468:	b002      	add	sp, #8
 801746a:	4770      	bx	lr
 801746c:	200b      	movs	r0, #11
 801746e:	b006      	add	sp, #24
 8017470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017474:	b002      	add	sp, #8
 8017476:	4770      	bx	lr
 8017478:	2065      	movs	r0, #101	; 0x65
 801747a:	e7f2      	b.n	8017462 <rcl_guard_condition_init_from_rmw+0x6e>
 801747c:	6830      	ldr	r0, [r6, #0]
 801747e:	3028      	adds	r0, #40	; 0x28
 8017480:	f000 f860 	bl	8017544 <rmw_create_guard_condition>
 8017484:	6028      	str	r0, [r5, #0]
 8017486:	6865      	ldr	r5, [r4, #4]
 8017488:	682e      	ldr	r6, [r5, #0]
 801748a:	b126      	cbz	r6, 8017496 <rcl_guard_condition_init_from_rmw+0xa2>
 801748c:	2301      	movs	r3, #1
 801748e:	712b      	strb	r3, [r5, #4]
 8017490:	e7da      	b.n	8017448 <rcl_guard_condition_init_from_rmw+0x54>
 8017492:	200a      	movs	r0, #10
 8017494:	e7e5      	b.n	8017462 <rcl_guard_condition_init_from_rmw+0x6e>
 8017496:	4628      	mov	r0, r5
 8017498:	9b02      	ldr	r3, [sp, #8]
 801749a:	9905      	ldr	r1, [sp, #20]
 801749c:	4798      	blx	r3
 801749e:	2001      	movs	r0, #1
 80174a0:	6066      	str	r6, [r4, #4]
 80174a2:	e7de      	b.n	8017462 <rcl_guard_condition_init_from_rmw+0x6e>

080174a4 <rcl_guard_condition_fini>:
 80174a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a6:	b1e0      	cbz	r0, 80174e2 <rcl_guard_condition_fini+0x3e>
 80174a8:	4604      	mov	r4, r0
 80174aa:	6840      	ldr	r0, [r0, #4]
 80174ac:	b158      	cbz	r0, 80174c6 <rcl_guard_condition_fini+0x22>
 80174ae:	6803      	ldr	r3, [r0, #0]
 80174b0:	68c6      	ldr	r6, [r0, #12]
 80174b2:	6987      	ldr	r7, [r0, #24]
 80174b4:	b153      	cbz	r3, 80174cc <rcl_guard_condition_fini+0x28>
 80174b6:	7905      	ldrb	r5, [r0, #4]
 80174b8:	b955      	cbnz	r5, 80174d0 <rcl_guard_condition_fini+0x2c>
 80174ba:	4639      	mov	r1, r7
 80174bc:	47b0      	blx	r6
 80174be:	2300      	movs	r3, #0
 80174c0:	4628      	mov	r0, r5
 80174c2:	6063      	str	r3, [r4, #4]
 80174c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174c6:	4605      	mov	r5, r0
 80174c8:	4628      	mov	r0, r5
 80174ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174cc:	461d      	mov	r5, r3
 80174ce:	e7f4      	b.n	80174ba <rcl_guard_condition_fini+0x16>
 80174d0:	4618      	mov	r0, r3
 80174d2:	f000 f84b 	bl	801756c <rmw_destroy_guard_condition>
 80174d6:	4605      	mov	r5, r0
 80174d8:	3d00      	subs	r5, #0
 80174da:	bf18      	it	ne
 80174dc:	2501      	movne	r5, #1
 80174de:	6860      	ldr	r0, [r4, #4]
 80174e0:	e7eb      	b.n	80174ba <rcl_guard_condition_fini+0x16>
 80174e2:	250b      	movs	r5, #11
 80174e4:	4628      	mov	r0, r5
 80174e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080174e8 <rcl_guard_condition_get_default_options>:
 80174e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ec:	4680      	mov	r8, r0
 80174ee:	b086      	sub	sp, #24
 80174f0:	466d      	mov	r5, sp
 80174f2:	4c08      	ldr	r4, [pc, #32]	; (8017514 <rcl_guard_condition_get_default_options+0x2c>)
 80174f4:	4646      	mov	r6, r8
 80174f6:	4627      	mov	r7, r4
 80174f8:	4668      	mov	r0, sp
 80174fa:	f7f3 fe9b 	bl	800b234 <rcutils_get_default_allocator>
 80174fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017502:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017504:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017506:	4640      	mov	r0, r8
 8017508:	682b      	ldr	r3, [r5, #0]
 801750a:	6023      	str	r3, [r4, #0]
 801750c:	6033      	str	r3, [r6, #0]
 801750e:	b006      	add	sp, #24
 8017510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017514:	20006848 	.word	0x20006848

08017518 <rcl_trigger_guard_condition>:
 8017518:	b148      	cbz	r0, 801752e <rcl_trigger_guard_condition+0x16>
 801751a:	b508      	push	{r3, lr}
 801751c:	6843      	ldr	r3, [r0, #4]
 801751e:	b143      	cbz	r3, 8017532 <rcl_trigger_guard_condition+0x1a>
 8017520:	6818      	ldr	r0, [r3, #0]
 8017522:	f000 f837 	bl	8017594 <rmw_trigger_guard_condition>
 8017526:	3800      	subs	r0, #0
 8017528:	bf18      	it	ne
 801752a:	2001      	movne	r0, #1
 801752c:	bd08      	pop	{r3, pc}
 801752e:	200b      	movs	r0, #11
 8017530:	4770      	bx	lr
 8017532:	200b      	movs	r0, #11
 8017534:	bd08      	pop	{r3, pc}
 8017536:	bf00      	nop

08017538 <rcl_guard_condition_get_rmw_handle>:
 8017538:	b110      	cbz	r0, 8017540 <rcl_guard_condition_get_rmw_handle+0x8>
 801753a:	6840      	ldr	r0, [r0, #4]
 801753c:	b100      	cbz	r0, 8017540 <rcl_guard_condition_get_rmw_handle+0x8>
 801753e:	6800      	ldr	r0, [r0, #0]
 8017540:	4770      	bx	lr
 8017542:	bf00      	nop

08017544 <rmw_create_guard_condition>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4605      	mov	r5, r0
 8017548:	4807      	ldr	r0, [pc, #28]	; (8017568 <rmw_create_guard_condition+0x24>)
 801754a:	f7fe fd4d 	bl	8015fe8 <get_memory>
 801754e:	b148      	cbz	r0, 8017564 <rmw_create_guard_condition+0x20>
 8017550:	2300      	movs	r3, #0
 8017552:	68c4      	ldr	r4, [r0, #12]
 8017554:	61e5      	str	r5, [r4, #28]
 8017556:	7423      	strb	r3, [r4, #16]
 8017558:	f7fe fdae 	bl	80160b8 <rmw_get_implementation_identifier>
 801755c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017560:	f104 0014 	add.w	r0, r4, #20
 8017564:	bd38      	pop	{r3, r4, r5, pc}
 8017566:	bf00      	nop
 8017568:	2000be90 	.word	0x2000be90

0801756c <rmw_destroy_guard_condition>:
 801756c:	b508      	push	{r3, lr}
 801756e:	4b08      	ldr	r3, [pc, #32]	; (8017590 <rmw_destroy_guard_condition+0x24>)
 8017570:	6819      	ldr	r1, [r3, #0]
 8017572:	b911      	cbnz	r1, 801757a <rmw_destroy_guard_condition+0xe>
 8017574:	e00a      	b.n	801758c <rmw_destroy_guard_condition+0x20>
 8017576:	6889      	ldr	r1, [r1, #8]
 8017578:	b141      	cbz	r1, 801758c <rmw_destroy_guard_condition+0x20>
 801757a:	68cb      	ldr	r3, [r1, #12]
 801757c:	3314      	adds	r3, #20
 801757e:	4298      	cmp	r0, r3
 8017580:	d1f9      	bne.n	8017576 <rmw_destroy_guard_condition+0xa>
 8017582:	4803      	ldr	r0, [pc, #12]	; (8017590 <rmw_destroy_guard_condition+0x24>)
 8017584:	f7fe fd40 	bl	8016008 <put_memory>
 8017588:	2000      	movs	r0, #0
 801758a:	bd08      	pop	{r3, pc}
 801758c:	2001      	movs	r0, #1
 801758e:	bd08      	pop	{r3, pc}
 8017590:	2000be90 	.word	0x2000be90

08017594 <rmw_trigger_guard_condition>:
 8017594:	b160      	cbz	r0, 80175b0 <rmw_trigger_guard_condition+0x1c>
 8017596:	b510      	push	{r4, lr}
 8017598:	4604      	mov	r4, r0
 801759a:	6800      	ldr	r0, [r0, #0]
 801759c:	f7f5 fbb0 	bl	800cd00 <is_uxrce_rmw_identifier_valid>
 80175a0:	b908      	cbnz	r0, 80175a6 <rmw_trigger_guard_condition+0x12>
 80175a2:	2001      	movs	r0, #1
 80175a4:	bd10      	pop	{r4, pc}
 80175a6:	2201      	movs	r2, #1
 80175a8:	6863      	ldr	r3, [r4, #4]
 80175aa:	2000      	movs	r0, #0
 80175ac:	741a      	strb	r2, [r3, #16]
 80175ae:	bd10      	pop	{r4, pc}
 80175b0:	2001      	movs	r0, #1
 80175b2:	4770      	bx	lr

080175b4 <calloc>:
 80175b4:	4b02      	ldr	r3, [pc, #8]	; (80175c0 <calloc+0xc>)
 80175b6:	460a      	mov	r2, r1
 80175b8:	4601      	mov	r1, r0
 80175ba:	6818      	ldr	r0, [r3, #0]
 80175bc:	f000 b8b2 	b.w	8017724 <_calloc_r>
 80175c0:	20000254 	.word	0x20000254

080175c4 <__errno>:
 80175c4:	4b01      	ldr	r3, [pc, #4]	; (80175cc <__errno+0x8>)
 80175c6:	6818      	ldr	r0, [r3, #0]
 80175c8:	4770      	bx	lr
 80175ca:	bf00      	nop
 80175cc:	20000254 	.word	0x20000254

080175d0 <getenv>:
 80175d0:	b507      	push	{r0, r1, r2, lr}
 80175d2:	4b04      	ldr	r3, [pc, #16]	; (80175e4 <getenv+0x14>)
 80175d4:	4601      	mov	r1, r0
 80175d6:	aa01      	add	r2, sp, #4
 80175d8:	6818      	ldr	r0, [r3, #0]
 80175da:	f000 f805 	bl	80175e8 <_findenv_r>
 80175de:	b003      	add	sp, #12
 80175e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80175e4:	20000254 	.word	0x20000254

080175e8 <_findenv_r>:
 80175e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175ec:	4607      	mov	r7, r0
 80175ee:	4689      	mov	r9, r1
 80175f0:	4616      	mov	r6, r2
 80175f2:	f000 fb67 	bl	8017cc4 <__env_lock>
 80175f6:	4b18      	ldr	r3, [pc, #96]	; (8017658 <_findenv_r+0x70>)
 80175f8:	681c      	ldr	r4, [r3, #0]
 80175fa:	469a      	mov	sl, r3
 80175fc:	b134      	cbz	r4, 801760c <_findenv_r+0x24>
 80175fe:	464b      	mov	r3, r9
 8017600:	4698      	mov	r8, r3
 8017602:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017606:	b139      	cbz	r1, 8017618 <_findenv_r+0x30>
 8017608:	293d      	cmp	r1, #61	; 0x3d
 801760a:	d1f9      	bne.n	8017600 <_findenv_r+0x18>
 801760c:	4638      	mov	r0, r7
 801760e:	f000 fb5f 	bl	8017cd0 <__env_unlock>
 8017612:	2000      	movs	r0, #0
 8017614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017618:	eba8 0809 	sub.w	r8, r8, r9
 801761c:	46a3      	mov	fp, r4
 801761e:	f854 0b04 	ldr.w	r0, [r4], #4
 8017622:	2800      	cmp	r0, #0
 8017624:	d0f2      	beq.n	801760c <_findenv_r+0x24>
 8017626:	4642      	mov	r2, r8
 8017628:	4649      	mov	r1, r9
 801762a:	f000 fa36 	bl	8017a9a <strncmp>
 801762e:	2800      	cmp	r0, #0
 8017630:	d1f4      	bne.n	801761c <_findenv_r+0x34>
 8017632:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017636:	eb03 0508 	add.w	r5, r3, r8
 801763a:	f813 3008 	ldrb.w	r3, [r3, r8]
 801763e:	2b3d      	cmp	r3, #61	; 0x3d
 8017640:	d1ec      	bne.n	801761c <_findenv_r+0x34>
 8017642:	f8da 3000 	ldr.w	r3, [sl]
 8017646:	4638      	mov	r0, r7
 8017648:	ebab 0303 	sub.w	r3, fp, r3
 801764c:	109b      	asrs	r3, r3, #2
 801764e:	6033      	str	r3, [r6, #0]
 8017650:	f000 fb3e 	bl	8017cd0 <__env_unlock>
 8017654:	1c68      	adds	r0, r5, #1
 8017656:	e7dd      	b.n	8017614 <_findenv_r+0x2c>
 8017658:	20000000 	.word	0x20000000

0801765c <__libc_init_array>:
 801765c:	b570      	push	{r4, r5, r6, lr}
 801765e:	2600      	movs	r6, #0
 8017660:	4d0c      	ldr	r5, [pc, #48]	; (8017694 <__libc_init_array+0x38>)
 8017662:	4c0d      	ldr	r4, [pc, #52]	; (8017698 <__libc_init_array+0x3c>)
 8017664:	1b64      	subs	r4, r4, r5
 8017666:	10a4      	asrs	r4, r4, #2
 8017668:	42a6      	cmp	r6, r4
 801766a:	d109      	bne.n	8017680 <__libc_init_array+0x24>
 801766c:	f001 fbb0 	bl	8018dd0 <_init>
 8017670:	2600      	movs	r6, #0
 8017672:	4d0a      	ldr	r5, [pc, #40]	; (801769c <__libc_init_array+0x40>)
 8017674:	4c0a      	ldr	r4, [pc, #40]	; (80176a0 <__libc_init_array+0x44>)
 8017676:	1b64      	subs	r4, r4, r5
 8017678:	10a4      	asrs	r4, r4, #2
 801767a:	42a6      	cmp	r6, r4
 801767c:	d105      	bne.n	801768a <__libc_init_array+0x2e>
 801767e:	bd70      	pop	{r4, r5, r6, pc}
 8017680:	f855 3b04 	ldr.w	r3, [r5], #4
 8017684:	4798      	blx	r3
 8017686:	3601      	adds	r6, #1
 8017688:	e7ee      	b.n	8017668 <__libc_init_array+0xc>
 801768a:	f855 3b04 	ldr.w	r3, [r5], #4
 801768e:	4798      	blx	r3
 8017690:	3601      	adds	r6, #1
 8017692:	e7f2      	b.n	801767a <__libc_init_array+0x1e>
 8017694:	0801a9ac 	.word	0x0801a9ac
 8017698:	0801a9ac 	.word	0x0801a9ac
 801769c:	0801a9ac 	.word	0x0801a9ac
 80176a0:	0801a9b0 	.word	0x0801a9b0

080176a4 <malloc>:
 80176a4:	4b02      	ldr	r3, [pc, #8]	; (80176b0 <malloc+0xc>)
 80176a6:	4601      	mov	r1, r0
 80176a8:	6818      	ldr	r0, [r3, #0]
 80176aa:	f000 b895 	b.w	80177d8 <_malloc_r>
 80176ae:	bf00      	nop
 80176b0:	20000254 	.word	0x20000254

080176b4 <free>:
 80176b4:	4b02      	ldr	r3, [pc, #8]	; (80176c0 <free+0xc>)
 80176b6:	4601      	mov	r1, r0
 80176b8:	6818      	ldr	r0, [r3, #0]
 80176ba:	f000 b841 	b.w	8017740 <_free_r>
 80176be:	bf00      	nop
 80176c0:	20000254 	.word	0x20000254

080176c4 <memcpy>:
 80176c4:	440a      	add	r2, r1
 80176c6:	4291      	cmp	r1, r2
 80176c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80176cc:	d100      	bne.n	80176d0 <memcpy+0xc>
 80176ce:	4770      	bx	lr
 80176d0:	b510      	push	{r4, lr}
 80176d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176d6:	4291      	cmp	r1, r2
 80176d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80176dc:	d1f9      	bne.n	80176d2 <memcpy+0xe>
 80176de:	bd10      	pop	{r4, pc}

080176e0 <memmove>:
 80176e0:	4288      	cmp	r0, r1
 80176e2:	b510      	push	{r4, lr}
 80176e4:	eb01 0402 	add.w	r4, r1, r2
 80176e8:	d902      	bls.n	80176f0 <memmove+0x10>
 80176ea:	4284      	cmp	r4, r0
 80176ec:	4623      	mov	r3, r4
 80176ee:	d807      	bhi.n	8017700 <memmove+0x20>
 80176f0:	1e43      	subs	r3, r0, #1
 80176f2:	42a1      	cmp	r1, r4
 80176f4:	d008      	beq.n	8017708 <memmove+0x28>
 80176f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80176fe:	e7f8      	b.n	80176f2 <memmove+0x12>
 8017700:	4601      	mov	r1, r0
 8017702:	4402      	add	r2, r0
 8017704:	428a      	cmp	r2, r1
 8017706:	d100      	bne.n	801770a <memmove+0x2a>
 8017708:	bd10      	pop	{r4, pc}
 801770a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801770e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017712:	e7f7      	b.n	8017704 <memmove+0x24>

08017714 <memset>:
 8017714:	4603      	mov	r3, r0
 8017716:	4402      	add	r2, r0
 8017718:	4293      	cmp	r3, r2
 801771a:	d100      	bne.n	801771e <memset+0xa>
 801771c:	4770      	bx	lr
 801771e:	f803 1b01 	strb.w	r1, [r3], #1
 8017722:	e7f9      	b.n	8017718 <memset+0x4>

08017724 <_calloc_r>:
 8017724:	b538      	push	{r3, r4, r5, lr}
 8017726:	fb02 f501 	mul.w	r5, r2, r1
 801772a:	4629      	mov	r1, r5
 801772c:	f000 f854 	bl	80177d8 <_malloc_r>
 8017730:	4604      	mov	r4, r0
 8017732:	b118      	cbz	r0, 801773c <_calloc_r+0x18>
 8017734:	462a      	mov	r2, r5
 8017736:	2100      	movs	r1, #0
 8017738:	f7ff ffec 	bl	8017714 <memset>
 801773c:	4620      	mov	r0, r4
 801773e:	bd38      	pop	{r3, r4, r5, pc}

08017740 <_free_r>:
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	4605      	mov	r5, r0
 8017744:	2900      	cmp	r1, #0
 8017746:	d043      	beq.n	80177d0 <_free_r+0x90>
 8017748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801774c:	1f0c      	subs	r4, r1, #4
 801774e:	2b00      	cmp	r3, #0
 8017750:	bfb8      	it	lt
 8017752:	18e4      	addlt	r4, r4, r3
 8017754:	f000 fbcc 	bl	8017ef0 <__malloc_lock>
 8017758:	4a1e      	ldr	r2, [pc, #120]	; (80177d4 <_free_r+0x94>)
 801775a:	6813      	ldr	r3, [r2, #0]
 801775c:	4610      	mov	r0, r2
 801775e:	b933      	cbnz	r3, 801776e <_free_r+0x2e>
 8017760:	6063      	str	r3, [r4, #4]
 8017762:	6014      	str	r4, [r2, #0]
 8017764:	4628      	mov	r0, r5
 8017766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801776a:	f000 bbc7 	b.w	8017efc <__malloc_unlock>
 801776e:	42a3      	cmp	r3, r4
 8017770:	d90a      	bls.n	8017788 <_free_r+0x48>
 8017772:	6821      	ldr	r1, [r4, #0]
 8017774:	1862      	adds	r2, r4, r1
 8017776:	4293      	cmp	r3, r2
 8017778:	bf01      	itttt	eq
 801777a:	681a      	ldreq	r2, [r3, #0]
 801777c:	685b      	ldreq	r3, [r3, #4]
 801777e:	1852      	addeq	r2, r2, r1
 8017780:	6022      	streq	r2, [r4, #0]
 8017782:	6063      	str	r3, [r4, #4]
 8017784:	6004      	str	r4, [r0, #0]
 8017786:	e7ed      	b.n	8017764 <_free_r+0x24>
 8017788:	461a      	mov	r2, r3
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	b10b      	cbz	r3, 8017792 <_free_r+0x52>
 801778e:	42a3      	cmp	r3, r4
 8017790:	d9fa      	bls.n	8017788 <_free_r+0x48>
 8017792:	6811      	ldr	r1, [r2, #0]
 8017794:	1850      	adds	r0, r2, r1
 8017796:	42a0      	cmp	r0, r4
 8017798:	d10b      	bne.n	80177b2 <_free_r+0x72>
 801779a:	6820      	ldr	r0, [r4, #0]
 801779c:	4401      	add	r1, r0
 801779e:	1850      	adds	r0, r2, r1
 80177a0:	4283      	cmp	r3, r0
 80177a2:	6011      	str	r1, [r2, #0]
 80177a4:	d1de      	bne.n	8017764 <_free_r+0x24>
 80177a6:	6818      	ldr	r0, [r3, #0]
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	4401      	add	r1, r0
 80177ac:	6011      	str	r1, [r2, #0]
 80177ae:	6053      	str	r3, [r2, #4]
 80177b0:	e7d8      	b.n	8017764 <_free_r+0x24>
 80177b2:	d902      	bls.n	80177ba <_free_r+0x7a>
 80177b4:	230c      	movs	r3, #12
 80177b6:	602b      	str	r3, [r5, #0]
 80177b8:	e7d4      	b.n	8017764 <_free_r+0x24>
 80177ba:	6820      	ldr	r0, [r4, #0]
 80177bc:	1821      	adds	r1, r4, r0
 80177be:	428b      	cmp	r3, r1
 80177c0:	bf01      	itttt	eq
 80177c2:	6819      	ldreq	r1, [r3, #0]
 80177c4:	685b      	ldreq	r3, [r3, #4]
 80177c6:	1809      	addeq	r1, r1, r0
 80177c8:	6021      	streq	r1, [r4, #0]
 80177ca:	6063      	str	r3, [r4, #4]
 80177cc:	6054      	str	r4, [r2, #4]
 80177ce:	e7c9      	b.n	8017764 <_free_r+0x24>
 80177d0:	bd38      	pop	{r3, r4, r5, pc}
 80177d2:	bf00      	nop
 80177d4:	2000685c 	.word	0x2000685c

080177d8 <_malloc_r>:
 80177d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177da:	1ccd      	adds	r5, r1, #3
 80177dc:	f025 0503 	bic.w	r5, r5, #3
 80177e0:	3508      	adds	r5, #8
 80177e2:	2d0c      	cmp	r5, #12
 80177e4:	bf38      	it	cc
 80177e6:	250c      	movcc	r5, #12
 80177e8:	2d00      	cmp	r5, #0
 80177ea:	4606      	mov	r6, r0
 80177ec:	db01      	blt.n	80177f2 <_malloc_r+0x1a>
 80177ee:	42a9      	cmp	r1, r5
 80177f0:	d903      	bls.n	80177fa <_malloc_r+0x22>
 80177f2:	230c      	movs	r3, #12
 80177f4:	6033      	str	r3, [r6, #0]
 80177f6:	2000      	movs	r0, #0
 80177f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177fa:	f000 fb79 	bl	8017ef0 <__malloc_lock>
 80177fe:	4921      	ldr	r1, [pc, #132]	; (8017884 <_malloc_r+0xac>)
 8017800:	680a      	ldr	r2, [r1, #0]
 8017802:	4614      	mov	r4, r2
 8017804:	b99c      	cbnz	r4, 801782e <_malloc_r+0x56>
 8017806:	4f20      	ldr	r7, [pc, #128]	; (8017888 <_malloc_r+0xb0>)
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	b923      	cbnz	r3, 8017816 <_malloc_r+0x3e>
 801780c:	4621      	mov	r1, r4
 801780e:	4630      	mov	r0, r6
 8017810:	f000 f8ca 	bl	80179a8 <_sbrk_r>
 8017814:	6038      	str	r0, [r7, #0]
 8017816:	4629      	mov	r1, r5
 8017818:	4630      	mov	r0, r6
 801781a:	f000 f8c5 	bl	80179a8 <_sbrk_r>
 801781e:	1c43      	adds	r3, r0, #1
 8017820:	d123      	bne.n	801786a <_malloc_r+0x92>
 8017822:	230c      	movs	r3, #12
 8017824:	4630      	mov	r0, r6
 8017826:	6033      	str	r3, [r6, #0]
 8017828:	f000 fb68 	bl	8017efc <__malloc_unlock>
 801782c:	e7e3      	b.n	80177f6 <_malloc_r+0x1e>
 801782e:	6823      	ldr	r3, [r4, #0]
 8017830:	1b5b      	subs	r3, r3, r5
 8017832:	d417      	bmi.n	8017864 <_malloc_r+0x8c>
 8017834:	2b0b      	cmp	r3, #11
 8017836:	d903      	bls.n	8017840 <_malloc_r+0x68>
 8017838:	6023      	str	r3, [r4, #0]
 801783a:	441c      	add	r4, r3
 801783c:	6025      	str	r5, [r4, #0]
 801783e:	e004      	b.n	801784a <_malloc_r+0x72>
 8017840:	6863      	ldr	r3, [r4, #4]
 8017842:	42a2      	cmp	r2, r4
 8017844:	bf0c      	ite	eq
 8017846:	600b      	streq	r3, [r1, #0]
 8017848:	6053      	strne	r3, [r2, #4]
 801784a:	4630      	mov	r0, r6
 801784c:	f000 fb56 	bl	8017efc <__malloc_unlock>
 8017850:	f104 000b 	add.w	r0, r4, #11
 8017854:	1d23      	adds	r3, r4, #4
 8017856:	f020 0007 	bic.w	r0, r0, #7
 801785a:	1ac2      	subs	r2, r0, r3
 801785c:	d0cc      	beq.n	80177f8 <_malloc_r+0x20>
 801785e:	1a1b      	subs	r3, r3, r0
 8017860:	50a3      	str	r3, [r4, r2]
 8017862:	e7c9      	b.n	80177f8 <_malloc_r+0x20>
 8017864:	4622      	mov	r2, r4
 8017866:	6864      	ldr	r4, [r4, #4]
 8017868:	e7cc      	b.n	8017804 <_malloc_r+0x2c>
 801786a:	1cc4      	adds	r4, r0, #3
 801786c:	f024 0403 	bic.w	r4, r4, #3
 8017870:	42a0      	cmp	r0, r4
 8017872:	d0e3      	beq.n	801783c <_malloc_r+0x64>
 8017874:	1a21      	subs	r1, r4, r0
 8017876:	4630      	mov	r0, r6
 8017878:	f000 f896 	bl	80179a8 <_sbrk_r>
 801787c:	3001      	adds	r0, #1
 801787e:	d1dd      	bne.n	801783c <_malloc_r+0x64>
 8017880:	e7cf      	b.n	8017822 <_malloc_r+0x4a>
 8017882:	bf00      	nop
 8017884:	2000685c 	.word	0x2000685c
 8017888:	20006860 	.word	0x20006860

0801788c <iprintf>:
 801788c:	b40f      	push	{r0, r1, r2, r3}
 801788e:	4b0a      	ldr	r3, [pc, #40]	; (80178b8 <iprintf+0x2c>)
 8017890:	b513      	push	{r0, r1, r4, lr}
 8017892:	681c      	ldr	r4, [r3, #0]
 8017894:	b124      	cbz	r4, 80178a0 <iprintf+0x14>
 8017896:	69a3      	ldr	r3, [r4, #24]
 8017898:	b913      	cbnz	r3, 80178a0 <iprintf+0x14>
 801789a:	4620      	mov	r0, r4
 801789c:	f000 fa76 	bl	8017d8c <__sinit>
 80178a0:	ab05      	add	r3, sp, #20
 80178a2:	4620      	mov	r0, r4
 80178a4:	9a04      	ldr	r2, [sp, #16]
 80178a6:	68a1      	ldr	r1, [r4, #8]
 80178a8:	9301      	str	r3, [sp, #4]
 80178aa:	f000 fcd7 	bl	801825c <_vfiprintf_r>
 80178ae:	b002      	add	sp, #8
 80178b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178b4:	b004      	add	sp, #16
 80178b6:	4770      	bx	lr
 80178b8:	20000254 	.word	0x20000254

080178bc <srand>:
 80178bc:	b538      	push	{r3, r4, r5, lr}
 80178be:	4b10      	ldr	r3, [pc, #64]	; (8017900 <srand+0x44>)
 80178c0:	4604      	mov	r4, r0
 80178c2:	681d      	ldr	r5, [r3, #0]
 80178c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80178c6:	b9b3      	cbnz	r3, 80178f6 <srand+0x3a>
 80178c8:	2018      	movs	r0, #24
 80178ca:	f7ff feeb 	bl	80176a4 <malloc>
 80178ce:	4602      	mov	r2, r0
 80178d0:	63a8      	str	r0, [r5, #56]	; 0x38
 80178d2:	b920      	cbnz	r0, 80178de <srand+0x22>
 80178d4:	2142      	movs	r1, #66	; 0x42
 80178d6:	4b0b      	ldr	r3, [pc, #44]	; (8017904 <srand+0x48>)
 80178d8:	480b      	ldr	r0, [pc, #44]	; (8017908 <srand+0x4c>)
 80178da:	f000 f9d5 	bl	8017c88 <__assert_func>
 80178de:	490b      	ldr	r1, [pc, #44]	; (801790c <srand+0x50>)
 80178e0:	4b0b      	ldr	r3, [pc, #44]	; (8017910 <srand+0x54>)
 80178e2:	e9c0 1300 	strd	r1, r3, [r0]
 80178e6:	4b0b      	ldr	r3, [pc, #44]	; (8017914 <srand+0x58>)
 80178e8:	2100      	movs	r1, #0
 80178ea:	6083      	str	r3, [r0, #8]
 80178ec:	230b      	movs	r3, #11
 80178ee:	8183      	strh	r3, [r0, #12]
 80178f0:	2001      	movs	r0, #1
 80178f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80178f6:	2200      	movs	r2, #0
 80178f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80178fa:	611c      	str	r4, [r3, #16]
 80178fc:	615a      	str	r2, [r3, #20]
 80178fe:	bd38      	pop	{r3, r4, r5, pc}
 8017900:	20000254 	.word	0x20000254
 8017904:	0801a85c 	.word	0x0801a85c
 8017908:	0801a873 	.word	0x0801a873
 801790c:	abcd330e 	.word	0xabcd330e
 8017910:	e66d1234 	.word	0xe66d1234
 8017914:	0005deec 	.word	0x0005deec

08017918 <rand>:
 8017918:	4b17      	ldr	r3, [pc, #92]	; (8017978 <rand+0x60>)
 801791a:	b510      	push	{r4, lr}
 801791c:	681c      	ldr	r4, [r3, #0]
 801791e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017920:	b9b3      	cbnz	r3, 8017950 <rand+0x38>
 8017922:	2018      	movs	r0, #24
 8017924:	f7ff febe 	bl	80176a4 <malloc>
 8017928:	4602      	mov	r2, r0
 801792a:	63a0      	str	r0, [r4, #56]	; 0x38
 801792c:	b920      	cbnz	r0, 8017938 <rand+0x20>
 801792e:	214e      	movs	r1, #78	; 0x4e
 8017930:	4b12      	ldr	r3, [pc, #72]	; (801797c <rand+0x64>)
 8017932:	4813      	ldr	r0, [pc, #76]	; (8017980 <rand+0x68>)
 8017934:	f000 f9a8 	bl	8017c88 <__assert_func>
 8017938:	4912      	ldr	r1, [pc, #72]	; (8017984 <rand+0x6c>)
 801793a:	4b13      	ldr	r3, [pc, #76]	; (8017988 <rand+0x70>)
 801793c:	e9c0 1300 	strd	r1, r3, [r0]
 8017940:	4b12      	ldr	r3, [pc, #72]	; (801798c <rand+0x74>)
 8017942:	2100      	movs	r1, #0
 8017944:	6083      	str	r3, [r0, #8]
 8017946:	230b      	movs	r3, #11
 8017948:	8183      	strh	r3, [r0, #12]
 801794a:	2001      	movs	r0, #1
 801794c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017950:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017952:	480f      	ldr	r0, [pc, #60]	; (8017990 <rand+0x78>)
 8017954:	690a      	ldr	r2, [r1, #16]
 8017956:	694b      	ldr	r3, [r1, #20]
 8017958:	4350      	muls	r0, r2
 801795a:	4c0e      	ldr	r4, [pc, #56]	; (8017994 <rand+0x7c>)
 801795c:	fb04 0003 	mla	r0, r4, r3, r0
 8017960:	fba2 3404 	umull	r3, r4, r2, r4
 8017964:	1c5a      	adds	r2, r3, #1
 8017966:	4404      	add	r4, r0
 8017968:	f144 0000 	adc.w	r0, r4, #0
 801796c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017970:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017974:	bd10      	pop	{r4, pc}
 8017976:	bf00      	nop
 8017978:	20000254 	.word	0x20000254
 801797c:	0801a85c 	.word	0x0801a85c
 8017980:	0801a873 	.word	0x0801a873
 8017984:	abcd330e 	.word	0xabcd330e
 8017988:	e66d1234 	.word	0xe66d1234
 801798c:	0005deec 	.word	0x0005deec
 8017990:	5851f42d 	.word	0x5851f42d
 8017994:	4c957f2d 	.word	0x4c957f2d

08017998 <realloc>:
 8017998:	4b02      	ldr	r3, [pc, #8]	; (80179a4 <realloc+0xc>)
 801799a:	460a      	mov	r2, r1
 801799c:	4601      	mov	r1, r0
 801799e:	6818      	ldr	r0, [r3, #0]
 80179a0:	f000 bab2 	b.w	8017f08 <_realloc_r>
 80179a4:	20000254 	.word	0x20000254

080179a8 <_sbrk_r>:
 80179a8:	b538      	push	{r3, r4, r5, lr}
 80179aa:	2300      	movs	r3, #0
 80179ac:	4d05      	ldr	r5, [pc, #20]	; (80179c4 <_sbrk_r+0x1c>)
 80179ae:	4604      	mov	r4, r0
 80179b0:	4608      	mov	r0, r1
 80179b2:	602b      	str	r3, [r5, #0]
 80179b4:	f7eb fb16 	bl	8002fe4 <_sbrk>
 80179b8:	1c43      	adds	r3, r0, #1
 80179ba:	d102      	bne.n	80179c2 <_sbrk_r+0x1a>
 80179bc:	682b      	ldr	r3, [r5, #0]
 80179be:	b103      	cbz	r3, 80179c2 <_sbrk_r+0x1a>
 80179c0:	6023      	str	r3, [r4, #0]
 80179c2:	bd38      	pop	{r3, r4, r5, pc}
 80179c4:	2000d6a4 	.word	0x2000d6a4

080179c8 <sniprintf>:
 80179c8:	b40c      	push	{r2, r3}
 80179ca:	b530      	push	{r4, r5, lr}
 80179cc:	4b17      	ldr	r3, [pc, #92]	; (8017a2c <sniprintf+0x64>)
 80179ce:	1e0c      	subs	r4, r1, #0
 80179d0:	681d      	ldr	r5, [r3, #0]
 80179d2:	b09d      	sub	sp, #116	; 0x74
 80179d4:	da08      	bge.n	80179e8 <sniprintf+0x20>
 80179d6:	238b      	movs	r3, #139	; 0x8b
 80179d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179dc:	602b      	str	r3, [r5, #0]
 80179de:	b01d      	add	sp, #116	; 0x74
 80179e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179e4:	b002      	add	sp, #8
 80179e6:	4770      	bx	lr
 80179e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80179ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179f0:	bf0c      	ite	eq
 80179f2:	4623      	moveq	r3, r4
 80179f4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80179f8:	9304      	str	r3, [sp, #16]
 80179fa:	9307      	str	r3, [sp, #28]
 80179fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a00:	9002      	str	r0, [sp, #8]
 8017a02:	9006      	str	r0, [sp, #24]
 8017a04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a08:	4628      	mov	r0, r5
 8017a0a:	ab21      	add	r3, sp, #132	; 0x84
 8017a0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017a0e:	a902      	add	r1, sp, #8
 8017a10:	9301      	str	r3, [sp, #4]
 8017a12:	f000 fafb 	bl	801800c <_svfiprintf_r>
 8017a16:	1c43      	adds	r3, r0, #1
 8017a18:	bfbc      	itt	lt
 8017a1a:	238b      	movlt	r3, #139	; 0x8b
 8017a1c:	602b      	strlt	r3, [r5, #0]
 8017a1e:	2c00      	cmp	r4, #0
 8017a20:	d0dd      	beq.n	80179de <sniprintf+0x16>
 8017a22:	2200      	movs	r2, #0
 8017a24:	9b02      	ldr	r3, [sp, #8]
 8017a26:	701a      	strb	r2, [r3, #0]
 8017a28:	e7d9      	b.n	80179de <sniprintf+0x16>
 8017a2a:	bf00      	nop
 8017a2c:	20000254 	.word	0x20000254

08017a30 <siprintf>:
 8017a30:	b40e      	push	{r1, r2, r3}
 8017a32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017a36:	b500      	push	{lr}
 8017a38:	b09c      	sub	sp, #112	; 0x70
 8017a3a:	ab1d      	add	r3, sp, #116	; 0x74
 8017a3c:	9002      	str	r0, [sp, #8]
 8017a3e:	9006      	str	r0, [sp, #24]
 8017a40:	9107      	str	r1, [sp, #28]
 8017a42:	9104      	str	r1, [sp, #16]
 8017a44:	4808      	ldr	r0, [pc, #32]	; (8017a68 <siprintf+0x38>)
 8017a46:	4909      	ldr	r1, [pc, #36]	; (8017a6c <siprintf+0x3c>)
 8017a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a4c:	9105      	str	r1, [sp, #20]
 8017a4e:	6800      	ldr	r0, [r0, #0]
 8017a50:	a902      	add	r1, sp, #8
 8017a52:	9301      	str	r3, [sp, #4]
 8017a54:	f000 fada 	bl	801800c <_svfiprintf_r>
 8017a58:	2200      	movs	r2, #0
 8017a5a:	9b02      	ldr	r3, [sp, #8]
 8017a5c:	701a      	strb	r2, [r3, #0]
 8017a5e:	b01c      	add	sp, #112	; 0x70
 8017a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a64:	b003      	add	sp, #12
 8017a66:	4770      	bx	lr
 8017a68:	20000254 	.word	0x20000254
 8017a6c:	ffff0208 	.word	0xffff0208

08017a70 <strchr>:
 8017a70:	4603      	mov	r3, r0
 8017a72:	b2c9      	uxtb	r1, r1
 8017a74:	4618      	mov	r0, r3
 8017a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a7a:	b112      	cbz	r2, 8017a82 <strchr+0x12>
 8017a7c:	428a      	cmp	r2, r1
 8017a7e:	d1f9      	bne.n	8017a74 <strchr+0x4>
 8017a80:	4770      	bx	lr
 8017a82:	2900      	cmp	r1, #0
 8017a84:	bf18      	it	ne
 8017a86:	2000      	movne	r0, #0
 8017a88:	4770      	bx	lr

08017a8a <strcpy>:
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a90:	f803 2b01 	strb.w	r2, [r3], #1
 8017a94:	2a00      	cmp	r2, #0
 8017a96:	d1f9      	bne.n	8017a8c <strcpy+0x2>
 8017a98:	4770      	bx	lr

08017a9a <strncmp>:
 8017a9a:	b510      	push	{r4, lr}
 8017a9c:	b16a      	cbz	r2, 8017aba <strncmp+0x20>
 8017a9e:	3901      	subs	r1, #1
 8017aa0:	1884      	adds	r4, r0, r2
 8017aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017aa6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017aaa:	4293      	cmp	r3, r2
 8017aac:	d103      	bne.n	8017ab6 <strncmp+0x1c>
 8017aae:	42a0      	cmp	r0, r4
 8017ab0:	d001      	beq.n	8017ab6 <strncmp+0x1c>
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d1f5      	bne.n	8017aa2 <strncmp+0x8>
 8017ab6:	1a98      	subs	r0, r3, r2
 8017ab8:	bd10      	pop	{r4, pc}
 8017aba:	4610      	mov	r0, r2
 8017abc:	e7fc      	b.n	8017ab8 <strncmp+0x1e>

08017abe <strnlen>:
 8017abe:	4602      	mov	r2, r0
 8017ac0:	b510      	push	{r4, lr}
 8017ac2:	4401      	add	r1, r0
 8017ac4:	428a      	cmp	r2, r1
 8017ac6:	4613      	mov	r3, r2
 8017ac8:	d101      	bne.n	8017ace <strnlen+0x10>
 8017aca:	1a18      	subs	r0, r3, r0
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	781c      	ldrb	r4, [r3, #0]
 8017ad0:	3201      	adds	r2, #1
 8017ad2:	2c00      	cmp	r4, #0
 8017ad4:	d1f6      	bne.n	8017ac4 <strnlen+0x6>
 8017ad6:	e7f8      	b.n	8017aca <strnlen+0xc>

08017ad8 <strstr>:
 8017ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ada:	780c      	ldrb	r4, [r1, #0]
 8017adc:	b164      	cbz	r4, 8017af8 <strstr+0x20>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	781a      	ldrb	r2, [r3, #0]
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	1c5e      	adds	r6, r3, #1
 8017ae6:	b90a      	cbnz	r2, 8017aec <strstr+0x14>
 8017ae8:	4610      	mov	r0, r2
 8017aea:	e005      	b.n	8017af8 <strstr+0x20>
 8017aec:	4294      	cmp	r4, r2
 8017aee:	d108      	bne.n	8017b02 <strstr+0x2a>
 8017af0:	460d      	mov	r5, r1
 8017af2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017af6:	b902      	cbnz	r2, 8017afa <strstr+0x22>
 8017af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017afa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8017afe:	4297      	cmp	r7, r2
 8017b00:	d0f7      	beq.n	8017af2 <strstr+0x1a>
 8017b02:	4633      	mov	r3, r6
 8017b04:	e7ec      	b.n	8017ae0 <strstr+0x8>
	...

08017b08 <_strtoul_l.isra.0>:
 8017b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b0c:	468c      	mov	ip, r1
 8017b0e:	4686      	mov	lr, r0
 8017b10:	4e3a      	ldr	r6, [pc, #232]	; (8017bfc <_strtoul_l.isra.0+0xf4>)
 8017b12:	4660      	mov	r0, ip
 8017b14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017b18:	5da5      	ldrb	r5, [r4, r6]
 8017b1a:	f015 0508 	ands.w	r5, r5, #8
 8017b1e:	d1f8      	bne.n	8017b12 <_strtoul_l.isra.0+0xa>
 8017b20:	2c2d      	cmp	r4, #45	; 0x2d
 8017b22:	d134      	bne.n	8017b8e <_strtoul_l.isra.0+0x86>
 8017b24:	f04f 0801 	mov.w	r8, #1
 8017b28:	f89c 4000 	ldrb.w	r4, [ip]
 8017b2c:	f100 0c02 	add.w	ip, r0, #2
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d05e      	beq.n	8017bf2 <_strtoul_l.isra.0+0xea>
 8017b34:	2b10      	cmp	r3, #16
 8017b36:	d10c      	bne.n	8017b52 <_strtoul_l.isra.0+0x4a>
 8017b38:	2c30      	cmp	r4, #48	; 0x30
 8017b3a:	d10a      	bne.n	8017b52 <_strtoul_l.isra.0+0x4a>
 8017b3c:	f89c 0000 	ldrb.w	r0, [ip]
 8017b40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017b44:	2858      	cmp	r0, #88	; 0x58
 8017b46:	d14f      	bne.n	8017be8 <_strtoul_l.isra.0+0xe0>
 8017b48:	2310      	movs	r3, #16
 8017b4a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8017b4e:	f10c 0c02 	add.w	ip, ip, #2
 8017b52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017b56:	fbb7 f7f3 	udiv	r7, r7, r3
 8017b5a:	2500      	movs	r5, #0
 8017b5c:	fb03 f907 	mul.w	r9, r3, r7
 8017b60:	4628      	mov	r0, r5
 8017b62:	ea6f 0909 	mvn.w	r9, r9
 8017b66:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017b6a:	2e09      	cmp	r6, #9
 8017b6c:	d818      	bhi.n	8017ba0 <_strtoul_l.isra.0+0x98>
 8017b6e:	4634      	mov	r4, r6
 8017b70:	42a3      	cmp	r3, r4
 8017b72:	dd24      	ble.n	8017bbe <_strtoul_l.isra.0+0xb6>
 8017b74:	2d00      	cmp	r5, #0
 8017b76:	db1f      	blt.n	8017bb8 <_strtoul_l.isra.0+0xb0>
 8017b78:	4287      	cmp	r7, r0
 8017b7a:	d31d      	bcc.n	8017bb8 <_strtoul_l.isra.0+0xb0>
 8017b7c:	d101      	bne.n	8017b82 <_strtoul_l.isra.0+0x7a>
 8017b7e:	45a1      	cmp	r9, r4
 8017b80:	db1a      	blt.n	8017bb8 <_strtoul_l.isra.0+0xb0>
 8017b82:	2501      	movs	r5, #1
 8017b84:	fb00 4003 	mla	r0, r0, r3, r4
 8017b88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017b8c:	e7eb      	b.n	8017b66 <_strtoul_l.isra.0+0x5e>
 8017b8e:	2c2b      	cmp	r4, #43	; 0x2b
 8017b90:	bf08      	it	eq
 8017b92:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017b96:	46a8      	mov	r8, r5
 8017b98:	bf08      	it	eq
 8017b9a:	f100 0c02 	addeq.w	ip, r0, #2
 8017b9e:	e7c7      	b.n	8017b30 <_strtoul_l.isra.0+0x28>
 8017ba0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017ba4:	2e19      	cmp	r6, #25
 8017ba6:	d801      	bhi.n	8017bac <_strtoul_l.isra.0+0xa4>
 8017ba8:	3c37      	subs	r4, #55	; 0x37
 8017baa:	e7e1      	b.n	8017b70 <_strtoul_l.isra.0+0x68>
 8017bac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017bb0:	2e19      	cmp	r6, #25
 8017bb2:	d804      	bhi.n	8017bbe <_strtoul_l.isra.0+0xb6>
 8017bb4:	3c57      	subs	r4, #87	; 0x57
 8017bb6:	e7db      	b.n	8017b70 <_strtoul_l.isra.0+0x68>
 8017bb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017bbc:	e7e4      	b.n	8017b88 <_strtoul_l.isra.0+0x80>
 8017bbe:	2d00      	cmp	r5, #0
 8017bc0:	da07      	bge.n	8017bd2 <_strtoul_l.isra.0+0xca>
 8017bc2:	2322      	movs	r3, #34	; 0x22
 8017bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bc8:	f8ce 3000 	str.w	r3, [lr]
 8017bcc:	b942      	cbnz	r2, 8017be0 <_strtoul_l.isra.0+0xd8>
 8017bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bd2:	f1b8 0f00 	cmp.w	r8, #0
 8017bd6:	d000      	beq.n	8017bda <_strtoul_l.isra.0+0xd2>
 8017bd8:	4240      	negs	r0, r0
 8017bda:	2a00      	cmp	r2, #0
 8017bdc:	d0f7      	beq.n	8017bce <_strtoul_l.isra.0+0xc6>
 8017bde:	b10d      	cbz	r5, 8017be4 <_strtoul_l.isra.0+0xdc>
 8017be0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8017be4:	6011      	str	r1, [r2, #0]
 8017be6:	e7f2      	b.n	8017bce <_strtoul_l.isra.0+0xc6>
 8017be8:	2430      	movs	r4, #48	; 0x30
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d1b1      	bne.n	8017b52 <_strtoul_l.isra.0+0x4a>
 8017bee:	2308      	movs	r3, #8
 8017bf0:	e7af      	b.n	8017b52 <_strtoul_l.isra.0+0x4a>
 8017bf2:	2c30      	cmp	r4, #48	; 0x30
 8017bf4:	d0a2      	beq.n	8017b3c <_strtoul_l.isra.0+0x34>
 8017bf6:	230a      	movs	r3, #10
 8017bf8:	e7ab      	b.n	8017b52 <_strtoul_l.isra.0+0x4a>
 8017bfa:	bf00      	nop
 8017bfc:	0801a755 	.word	0x0801a755

08017c00 <strtoul>:
 8017c00:	4613      	mov	r3, r2
 8017c02:	460a      	mov	r2, r1
 8017c04:	4601      	mov	r1, r0
 8017c06:	4802      	ldr	r0, [pc, #8]	; (8017c10 <strtoul+0x10>)
 8017c08:	6800      	ldr	r0, [r0, #0]
 8017c0a:	f7ff bf7d 	b.w	8017b08 <_strtoul_l.isra.0>
 8017c0e:	bf00      	nop
 8017c10:	20000254 	.word	0x20000254

08017c14 <_vsniprintf_r>:
 8017c14:	b530      	push	{r4, r5, lr}
 8017c16:	1e14      	subs	r4, r2, #0
 8017c18:	4605      	mov	r5, r0
 8017c1a:	b09b      	sub	sp, #108	; 0x6c
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	da05      	bge.n	8017c2c <_vsniprintf_r+0x18>
 8017c20:	238b      	movs	r3, #139	; 0x8b
 8017c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c26:	602b      	str	r3, [r5, #0]
 8017c28:	b01b      	add	sp, #108	; 0x6c
 8017c2a:	bd30      	pop	{r4, r5, pc}
 8017c2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017c30:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c34:	bf0c      	ite	eq
 8017c36:	4623      	moveq	r3, r4
 8017c38:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8017c3c:	9302      	str	r3, [sp, #8]
 8017c3e:	9305      	str	r3, [sp, #20]
 8017c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c44:	4602      	mov	r2, r0
 8017c46:	9100      	str	r1, [sp, #0]
 8017c48:	9104      	str	r1, [sp, #16]
 8017c4a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017c4e:	4669      	mov	r1, sp
 8017c50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017c52:	4628      	mov	r0, r5
 8017c54:	f000 f9da 	bl	801800c <_svfiprintf_r>
 8017c58:	1c43      	adds	r3, r0, #1
 8017c5a:	bfbc      	itt	lt
 8017c5c:	238b      	movlt	r3, #139	; 0x8b
 8017c5e:	602b      	strlt	r3, [r5, #0]
 8017c60:	2c00      	cmp	r4, #0
 8017c62:	d0e1      	beq.n	8017c28 <_vsniprintf_r+0x14>
 8017c64:	2200      	movs	r2, #0
 8017c66:	9b00      	ldr	r3, [sp, #0]
 8017c68:	701a      	strb	r2, [r3, #0]
 8017c6a:	e7dd      	b.n	8017c28 <_vsniprintf_r+0x14>

08017c6c <vsniprintf>:
 8017c6c:	b507      	push	{r0, r1, r2, lr}
 8017c6e:	9300      	str	r3, [sp, #0]
 8017c70:	4613      	mov	r3, r2
 8017c72:	460a      	mov	r2, r1
 8017c74:	4601      	mov	r1, r0
 8017c76:	4803      	ldr	r0, [pc, #12]	; (8017c84 <vsniprintf+0x18>)
 8017c78:	6800      	ldr	r0, [r0, #0]
 8017c7a:	f7ff ffcb 	bl	8017c14 <_vsniprintf_r>
 8017c7e:	b003      	add	sp, #12
 8017c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c84:	20000254 	.word	0x20000254

08017c88 <__assert_func>:
 8017c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017c8a:	4614      	mov	r4, r2
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	4b09      	ldr	r3, [pc, #36]	; (8017cb4 <__assert_func+0x2c>)
 8017c90:	4605      	mov	r5, r0
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	68d8      	ldr	r0, [r3, #12]
 8017c96:	b14c      	cbz	r4, 8017cac <__assert_func+0x24>
 8017c98:	4b07      	ldr	r3, [pc, #28]	; (8017cb8 <__assert_func+0x30>)
 8017c9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c9e:	9100      	str	r1, [sp, #0]
 8017ca0:	462b      	mov	r3, r5
 8017ca2:	4906      	ldr	r1, [pc, #24]	; (8017cbc <__assert_func+0x34>)
 8017ca4:	f000 f8f0 	bl	8017e88 <fiprintf>
 8017ca8:	f000 feb4 	bl	8018a14 <abort>
 8017cac:	4b04      	ldr	r3, [pc, #16]	; (8017cc0 <__assert_func+0x38>)
 8017cae:	461c      	mov	r4, r3
 8017cb0:	e7f3      	b.n	8017c9a <__assert_func+0x12>
 8017cb2:	bf00      	nop
 8017cb4:	20000254 	.word	0x20000254
 8017cb8:	0801a8d2 	.word	0x0801a8d2
 8017cbc:	0801a8df 	.word	0x0801a8df
 8017cc0:	0801a90d 	.word	0x0801a90d

08017cc4 <__env_lock>:
 8017cc4:	4801      	ldr	r0, [pc, #4]	; (8017ccc <__env_lock+0x8>)
 8017cc6:	f000 b911 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017cca:	bf00      	nop
 8017ccc:	2000d69a 	.word	0x2000d69a

08017cd0 <__env_unlock>:
 8017cd0:	4801      	ldr	r0, [pc, #4]	; (8017cd8 <__env_unlock+0x8>)
 8017cd2:	f000 b90c 	b.w	8017eee <__retarget_lock_release_recursive>
 8017cd6:	bf00      	nop
 8017cd8:	2000d69a 	.word	0x2000d69a

08017cdc <std>:
 8017cdc:	2300      	movs	r3, #0
 8017cde:	b510      	push	{r4, lr}
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8017ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017cea:	6083      	str	r3, [r0, #8]
 8017cec:	8181      	strh	r1, [r0, #12]
 8017cee:	6643      	str	r3, [r0, #100]	; 0x64
 8017cf0:	81c2      	strh	r2, [r0, #14]
 8017cf2:	6183      	str	r3, [r0, #24]
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	2208      	movs	r2, #8
 8017cf8:	305c      	adds	r0, #92	; 0x5c
 8017cfa:	f7ff fd0b 	bl	8017714 <memset>
 8017cfe:	4b05      	ldr	r3, [pc, #20]	; (8017d14 <std+0x38>)
 8017d00:	6224      	str	r4, [r4, #32]
 8017d02:	6263      	str	r3, [r4, #36]	; 0x24
 8017d04:	4b04      	ldr	r3, [pc, #16]	; (8017d18 <std+0x3c>)
 8017d06:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d08:	4b04      	ldr	r3, [pc, #16]	; (8017d1c <std+0x40>)
 8017d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d0c:	4b04      	ldr	r3, [pc, #16]	; (8017d20 <std+0x44>)
 8017d0e:	6323      	str	r3, [r4, #48]	; 0x30
 8017d10:	bd10      	pop	{r4, pc}
 8017d12:	bf00      	nop
 8017d14:	080187e9 	.word	0x080187e9
 8017d18:	0801880b 	.word	0x0801880b
 8017d1c:	08018843 	.word	0x08018843
 8017d20:	08018867 	.word	0x08018867

08017d24 <_cleanup_r>:
 8017d24:	4901      	ldr	r1, [pc, #4]	; (8017d2c <_cleanup_r+0x8>)
 8017d26:	f000 b8c1 	b.w	8017eac <_fwalk_reent>
 8017d2a:	bf00      	nop
 8017d2c:	08018b51 	.word	0x08018b51

08017d30 <__sfmoreglue>:
 8017d30:	b570      	push	{r4, r5, r6, lr}
 8017d32:	2568      	movs	r5, #104	; 0x68
 8017d34:	1e4a      	subs	r2, r1, #1
 8017d36:	4355      	muls	r5, r2
 8017d38:	460e      	mov	r6, r1
 8017d3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d3e:	f7ff fd4b 	bl	80177d8 <_malloc_r>
 8017d42:	4604      	mov	r4, r0
 8017d44:	b140      	cbz	r0, 8017d58 <__sfmoreglue+0x28>
 8017d46:	2100      	movs	r1, #0
 8017d48:	e9c0 1600 	strd	r1, r6, [r0]
 8017d4c:	300c      	adds	r0, #12
 8017d4e:	60a0      	str	r0, [r4, #8]
 8017d50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017d54:	f7ff fcde 	bl	8017714 <memset>
 8017d58:	4620      	mov	r0, r4
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}

08017d5c <__sfp_lock_acquire>:
 8017d5c:	4801      	ldr	r0, [pc, #4]	; (8017d64 <__sfp_lock_acquire+0x8>)
 8017d5e:	f000 b8c5 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017d62:	bf00      	nop
 8017d64:	2000d6a0 	.word	0x2000d6a0

08017d68 <__sfp_lock_release>:
 8017d68:	4801      	ldr	r0, [pc, #4]	; (8017d70 <__sfp_lock_release+0x8>)
 8017d6a:	f000 b8c0 	b.w	8017eee <__retarget_lock_release_recursive>
 8017d6e:	bf00      	nop
 8017d70:	2000d6a0 	.word	0x2000d6a0

08017d74 <__sinit_lock_acquire>:
 8017d74:	4801      	ldr	r0, [pc, #4]	; (8017d7c <__sinit_lock_acquire+0x8>)
 8017d76:	f000 b8b9 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017d7a:	bf00      	nop
 8017d7c:	2000d69b 	.word	0x2000d69b

08017d80 <__sinit_lock_release>:
 8017d80:	4801      	ldr	r0, [pc, #4]	; (8017d88 <__sinit_lock_release+0x8>)
 8017d82:	f000 b8b4 	b.w	8017eee <__retarget_lock_release_recursive>
 8017d86:	bf00      	nop
 8017d88:	2000d69b 	.word	0x2000d69b

08017d8c <__sinit>:
 8017d8c:	b510      	push	{r4, lr}
 8017d8e:	4604      	mov	r4, r0
 8017d90:	f7ff fff0 	bl	8017d74 <__sinit_lock_acquire>
 8017d94:	69a3      	ldr	r3, [r4, #24]
 8017d96:	b11b      	cbz	r3, 8017da0 <__sinit+0x14>
 8017d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d9c:	f7ff bff0 	b.w	8017d80 <__sinit_lock_release>
 8017da0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017da4:	6523      	str	r3, [r4, #80]	; 0x50
 8017da6:	4b13      	ldr	r3, [pc, #76]	; (8017df4 <__sinit+0x68>)
 8017da8:	4a13      	ldr	r2, [pc, #76]	; (8017df8 <__sinit+0x6c>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	62a2      	str	r2, [r4, #40]	; 0x28
 8017dae:	42a3      	cmp	r3, r4
 8017db0:	bf08      	it	eq
 8017db2:	2301      	moveq	r3, #1
 8017db4:	4620      	mov	r0, r4
 8017db6:	bf08      	it	eq
 8017db8:	61a3      	streq	r3, [r4, #24]
 8017dba:	f000 f81f 	bl	8017dfc <__sfp>
 8017dbe:	6060      	str	r0, [r4, #4]
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f000 f81b 	bl	8017dfc <__sfp>
 8017dc6:	60a0      	str	r0, [r4, #8]
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f000 f817 	bl	8017dfc <__sfp>
 8017dce:	2200      	movs	r2, #0
 8017dd0:	2104      	movs	r1, #4
 8017dd2:	60e0      	str	r0, [r4, #12]
 8017dd4:	6860      	ldr	r0, [r4, #4]
 8017dd6:	f7ff ff81 	bl	8017cdc <std>
 8017dda:	2201      	movs	r2, #1
 8017ddc:	2109      	movs	r1, #9
 8017dde:	68a0      	ldr	r0, [r4, #8]
 8017de0:	f7ff ff7c 	bl	8017cdc <std>
 8017de4:	2202      	movs	r2, #2
 8017de6:	2112      	movs	r1, #18
 8017de8:	68e0      	ldr	r0, [r4, #12]
 8017dea:	f7ff ff77 	bl	8017cdc <std>
 8017dee:	2301      	movs	r3, #1
 8017df0:	61a3      	str	r3, [r4, #24]
 8017df2:	e7d1      	b.n	8017d98 <__sinit+0xc>
 8017df4:	0801a858 	.word	0x0801a858
 8017df8:	08017d25 	.word	0x08017d25

08017dfc <__sfp>:
 8017dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfe:	4607      	mov	r7, r0
 8017e00:	f7ff ffac 	bl	8017d5c <__sfp_lock_acquire>
 8017e04:	4b1e      	ldr	r3, [pc, #120]	; (8017e80 <__sfp+0x84>)
 8017e06:	681e      	ldr	r6, [r3, #0]
 8017e08:	69b3      	ldr	r3, [r6, #24]
 8017e0a:	b913      	cbnz	r3, 8017e12 <__sfp+0x16>
 8017e0c:	4630      	mov	r0, r6
 8017e0e:	f7ff ffbd 	bl	8017d8c <__sinit>
 8017e12:	3648      	adds	r6, #72	; 0x48
 8017e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017e18:	3b01      	subs	r3, #1
 8017e1a:	d503      	bpl.n	8017e24 <__sfp+0x28>
 8017e1c:	6833      	ldr	r3, [r6, #0]
 8017e1e:	b30b      	cbz	r3, 8017e64 <__sfp+0x68>
 8017e20:	6836      	ldr	r6, [r6, #0]
 8017e22:	e7f7      	b.n	8017e14 <__sfp+0x18>
 8017e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017e28:	b9d5      	cbnz	r5, 8017e60 <__sfp+0x64>
 8017e2a:	4b16      	ldr	r3, [pc, #88]	; (8017e84 <__sfp+0x88>)
 8017e2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e30:	60e3      	str	r3, [r4, #12]
 8017e32:	6665      	str	r5, [r4, #100]	; 0x64
 8017e34:	f000 f859 	bl	8017eea <__retarget_lock_init_recursive>
 8017e38:	f7ff ff96 	bl	8017d68 <__sfp_lock_release>
 8017e3c:	2208      	movs	r2, #8
 8017e3e:	4629      	mov	r1, r5
 8017e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017e48:	6025      	str	r5, [r4, #0]
 8017e4a:	61a5      	str	r5, [r4, #24]
 8017e4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e50:	f7ff fc60 	bl	8017714 <memset>
 8017e54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e60:	3468      	adds	r4, #104	; 0x68
 8017e62:	e7d9      	b.n	8017e18 <__sfp+0x1c>
 8017e64:	2104      	movs	r1, #4
 8017e66:	4638      	mov	r0, r7
 8017e68:	f7ff ff62 	bl	8017d30 <__sfmoreglue>
 8017e6c:	4604      	mov	r4, r0
 8017e6e:	6030      	str	r0, [r6, #0]
 8017e70:	2800      	cmp	r0, #0
 8017e72:	d1d5      	bne.n	8017e20 <__sfp+0x24>
 8017e74:	f7ff ff78 	bl	8017d68 <__sfp_lock_release>
 8017e78:	230c      	movs	r3, #12
 8017e7a:	603b      	str	r3, [r7, #0]
 8017e7c:	e7ee      	b.n	8017e5c <__sfp+0x60>
 8017e7e:	bf00      	nop
 8017e80:	0801a858 	.word	0x0801a858
 8017e84:	ffff0001 	.word	0xffff0001

08017e88 <fiprintf>:
 8017e88:	b40e      	push	{r1, r2, r3}
 8017e8a:	b503      	push	{r0, r1, lr}
 8017e8c:	4601      	mov	r1, r0
 8017e8e:	ab03      	add	r3, sp, #12
 8017e90:	4805      	ldr	r0, [pc, #20]	; (8017ea8 <fiprintf+0x20>)
 8017e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e96:	6800      	ldr	r0, [r0, #0]
 8017e98:	9301      	str	r3, [sp, #4]
 8017e9a:	f000 f9df 	bl	801825c <_vfiprintf_r>
 8017e9e:	b002      	add	sp, #8
 8017ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ea4:	b003      	add	sp, #12
 8017ea6:	4770      	bx	lr
 8017ea8:	20000254 	.word	0x20000254

08017eac <_fwalk_reent>:
 8017eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017eb0:	4606      	mov	r6, r0
 8017eb2:	4688      	mov	r8, r1
 8017eb4:	2700      	movs	r7, #0
 8017eb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8017ec2:	d505      	bpl.n	8017ed0 <_fwalk_reent+0x24>
 8017ec4:	6824      	ldr	r4, [r4, #0]
 8017ec6:	2c00      	cmp	r4, #0
 8017ec8:	d1f7      	bne.n	8017eba <_fwalk_reent+0xe>
 8017eca:	4638      	mov	r0, r7
 8017ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ed0:	89ab      	ldrh	r3, [r5, #12]
 8017ed2:	2b01      	cmp	r3, #1
 8017ed4:	d907      	bls.n	8017ee6 <_fwalk_reent+0x3a>
 8017ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017eda:	3301      	adds	r3, #1
 8017edc:	d003      	beq.n	8017ee6 <_fwalk_reent+0x3a>
 8017ede:	4629      	mov	r1, r5
 8017ee0:	4630      	mov	r0, r6
 8017ee2:	47c0      	blx	r8
 8017ee4:	4307      	orrs	r7, r0
 8017ee6:	3568      	adds	r5, #104	; 0x68
 8017ee8:	e7e9      	b.n	8017ebe <_fwalk_reent+0x12>

08017eea <__retarget_lock_init_recursive>:
 8017eea:	4770      	bx	lr

08017eec <__retarget_lock_acquire_recursive>:
 8017eec:	4770      	bx	lr

08017eee <__retarget_lock_release_recursive>:
 8017eee:	4770      	bx	lr

08017ef0 <__malloc_lock>:
 8017ef0:	4801      	ldr	r0, [pc, #4]	; (8017ef8 <__malloc_lock+0x8>)
 8017ef2:	f7ff bffb 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017ef6:	bf00      	nop
 8017ef8:	2000d69c 	.word	0x2000d69c

08017efc <__malloc_unlock>:
 8017efc:	4801      	ldr	r0, [pc, #4]	; (8017f04 <__malloc_unlock+0x8>)
 8017efe:	f7ff bff6 	b.w	8017eee <__retarget_lock_release_recursive>
 8017f02:	bf00      	nop
 8017f04:	2000d69c 	.word	0x2000d69c

08017f08 <_realloc_r>:
 8017f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f0a:	4607      	mov	r7, r0
 8017f0c:	4614      	mov	r4, r2
 8017f0e:	460e      	mov	r6, r1
 8017f10:	b921      	cbnz	r1, 8017f1c <_realloc_r+0x14>
 8017f12:	4611      	mov	r1, r2
 8017f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f18:	f7ff bc5e 	b.w	80177d8 <_malloc_r>
 8017f1c:	b922      	cbnz	r2, 8017f28 <_realloc_r+0x20>
 8017f1e:	f7ff fc0f 	bl	8017740 <_free_r>
 8017f22:	4625      	mov	r5, r4
 8017f24:	4628      	mov	r0, r5
 8017f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f28:	f000 fed2 	bl	8018cd0 <_malloc_usable_size_r>
 8017f2c:	42a0      	cmp	r0, r4
 8017f2e:	d20f      	bcs.n	8017f50 <_realloc_r+0x48>
 8017f30:	4621      	mov	r1, r4
 8017f32:	4638      	mov	r0, r7
 8017f34:	f7ff fc50 	bl	80177d8 <_malloc_r>
 8017f38:	4605      	mov	r5, r0
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	d0f2      	beq.n	8017f24 <_realloc_r+0x1c>
 8017f3e:	4631      	mov	r1, r6
 8017f40:	4622      	mov	r2, r4
 8017f42:	f7ff fbbf 	bl	80176c4 <memcpy>
 8017f46:	4631      	mov	r1, r6
 8017f48:	4638      	mov	r0, r7
 8017f4a:	f7ff fbf9 	bl	8017740 <_free_r>
 8017f4e:	e7e9      	b.n	8017f24 <_realloc_r+0x1c>
 8017f50:	4635      	mov	r5, r6
 8017f52:	e7e7      	b.n	8017f24 <_realloc_r+0x1c>

08017f54 <__ssputs_r>:
 8017f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f58:	688e      	ldr	r6, [r1, #8]
 8017f5a:	4682      	mov	sl, r0
 8017f5c:	429e      	cmp	r6, r3
 8017f5e:	460c      	mov	r4, r1
 8017f60:	4690      	mov	r8, r2
 8017f62:	461f      	mov	r7, r3
 8017f64:	d838      	bhi.n	8017fd8 <__ssputs_r+0x84>
 8017f66:	898a      	ldrh	r2, [r1, #12]
 8017f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017f6c:	d032      	beq.n	8017fd4 <__ssputs_r+0x80>
 8017f6e:	6825      	ldr	r5, [r4, #0]
 8017f70:	6909      	ldr	r1, [r1, #16]
 8017f72:	3301      	adds	r3, #1
 8017f74:	eba5 0901 	sub.w	r9, r5, r1
 8017f78:	6965      	ldr	r5, [r4, #20]
 8017f7a:	444b      	add	r3, r9
 8017f7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017f84:	106d      	asrs	r5, r5, #1
 8017f86:	429d      	cmp	r5, r3
 8017f88:	bf38      	it	cc
 8017f8a:	461d      	movcc	r5, r3
 8017f8c:	0553      	lsls	r3, r2, #21
 8017f8e:	d531      	bpl.n	8017ff4 <__ssputs_r+0xa0>
 8017f90:	4629      	mov	r1, r5
 8017f92:	f7ff fc21 	bl	80177d8 <_malloc_r>
 8017f96:	4606      	mov	r6, r0
 8017f98:	b950      	cbnz	r0, 8017fb0 <__ssputs_r+0x5c>
 8017f9a:	230c      	movs	r3, #12
 8017f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fa0:	f8ca 3000 	str.w	r3, [sl]
 8017fa4:	89a3      	ldrh	r3, [r4, #12]
 8017fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017faa:	81a3      	strh	r3, [r4, #12]
 8017fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb0:	464a      	mov	r2, r9
 8017fb2:	6921      	ldr	r1, [r4, #16]
 8017fb4:	f7ff fb86 	bl	80176c4 <memcpy>
 8017fb8:	89a3      	ldrh	r3, [r4, #12]
 8017fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017fc2:	81a3      	strh	r3, [r4, #12]
 8017fc4:	6126      	str	r6, [r4, #16]
 8017fc6:	444e      	add	r6, r9
 8017fc8:	6026      	str	r6, [r4, #0]
 8017fca:	463e      	mov	r6, r7
 8017fcc:	6165      	str	r5, [r4, #20]
 8017fce:	eba5 0509 	sub.w	r5, r5, r9
 8017fd2:	60a5      	str	r5, [r4, #8]
 8017fd4:	42be      	cmp	r6, r7
 8017fd6:	d900      	bls.n	8017fda <__ssputs_r+0x86>
 8017fd8:	463e      	mov	r6, r7
 8017fda:	4632      	mov	r2, r6
 8017fdc:	4641      	mov	r1, r8
 8017fde:	6820      	ldr	r0, [r4, #0]
 8017fe0:	f7ff fb7e 	bl	80176e0 <memmove>
 8017fe4:	68a3      	ldr	r3, [r4, #8]
 8017fe6:	6822      	ldr	r2, [r4, #0]
 8017fe8:	1b9b      	subs	r3, r3, r6
 8017fea:	4432      	add	r2, r6
 8017fec:	2000      	movs	r0, #0
 8017fee:	60a3      	str	r3, [r4, #8]
 8017ff0:	6022      	str	r2, [r4, #0]
 8017ff2:	e7db      	b.n	8017fac <__ssputs_r+0x58>
 8017ff4:	462a      	mov	r2, r5
 8017ff6:	f7ff ff87 	bl	8017f08 <_realloc_r>
 8017ffa:	4606      	mov	r6, r0
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	d1e1      	bne.n	8017fc4 <__ssputs_r+0x70>
 8018000:	4650      	mov	r0, sl
 8018002:	6921      	ldr	r1, [r4, #16]
 8018004:	f7ff fb9c 	bl	8017740 <_free_r>
 8018008:	e7c7      	b.n	8017f9a <__ssputs_r+0x46>
	...

0801800c <_svfiprintf_r>:
 801800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018010:	4698      	mov	r8, r3
 8018012:	898b      	ldrh	r3, [r1, #12]
 8018014:	4607      	mov	r7, r0
 8018016:	061b      	lsls	r3, r3, #24
 8018018:	460d      	mov	r5, r1
 801801a:	4614      	mov	r4, r2
 801801c:	b09d      	sub	sp, #116	; 0x74
 801801e:	d50e      	bpl.n	801803e <_svfiprintf_r+0x32>
 8018020:	690b      	ldr	r3, [r1, #16]
 8018022:	b963      	cbnz	r3, 801803e <_svfiprintf_r+0x32>
 8018024:	2140      	movs	r1, #64	; 0x40
 8018026:	f7ff fbd7 	bl	80177d8 <_malloc_r>
 801802a:	6028      	str	r0, [r5, #0]
 801802c:	6128      	str	r0, [r5, #16]
 801802e:	b920      	cbnz	r0, 801803a <_svfiprintf_r+0x2e>
 8018030:	230c      	movs	r3, #12
 8018032:	603b      	str	r3, [r7, #0]
 8018034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018038:	e0d1      	b.n	80181de <_svfiprintf_r+0x1d2>
 801803a:	2340      	movs	r3, #64	; 0x40
 801803c:	616b      	str	r3, [r5, #20]
 801803e:	2300      	movs	r3, #0
 8018040:	9309      	str	r3, [sp, #36]	; 0x24
 8018042:	2320      	movs	r3, #32
 8018044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018048:	2330      	movs	r3, #48	; 0x30
 801804a:	f04f 0901 	mov.w	r9, #1
 801804e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018052:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80181f8 <_svfiprintf_r+0x1ec>
 8018056:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801805a:	4623      	mov	r3, r4
 801805c:	469a      	mov	sl, r3
 801805e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018062:	b10a      	cbz	r2, 8018068 <_svfiprintf_r+0x5c>
 8018064:	2a25      	cmp	r2, #37	; 0x25
 8018066:	d1f9      	bne.n	801805c <_svfiprintf_r+0x50>
 8018068:	ebba 0b04 	subs.w	fp, sl, r4
 801806c:	d00b      	beq.n	8018086 <_svfiprintf_r+0x7a>
 801806e:	465b      	mov	r3, fp
 8018070:	4622      	mov	r2, r4
 8018072:	4629      	mov	r1, r5
 8018074:	4638      	mov	r0, r7
 8018076:	f7ff ff6d 	bl	8017f54 <__ssputs_r>
 801807a:	3001      	adds	r0, #1
 801807c:	f000 80aa 	beq.w	80181d4 <_svfiprintf_r+0x1c8>
 8018080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018082:	445a      	add	r2, fp
 8018084:	9209      	str	r2, [sp, #36]	; 0x24
 8018086:	f89a 3000 	ldrb.w	r3, [sl]
 801808a:	2b00      	cmp	r3, #0
 801808c:	f000 80a2 	beq.w	80181d4 <_svfiprintf_r+0x1c8>
 8018090:	2300      	movs	r3, #0
 8018092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801809a:	f10a 0a01 	add.w	sl, sl, #1
 801809e:	9304      	str	r3, [sp, #16]
 80180a0:	9307      	str	r3, [sp, #28]
 80180a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180a6:	931a      	str	r3, [sp, #104]	; 0x68
 80180a8:	4654      	mov	r4, sl
 80180aa:	2205      	movs	r2, #5
 80180ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180b0:	4851      	ldr	r0, [pc, #324]	; (80181f8 <_svfiprintf_r+0x1ec>)
 80180b2:	f000 fdff 	bl	8018cb4 <memchr>
 80180b6:	9a04      	ldr	r2, [sp, #16]
 80180b8:	b9d8      	cbnz	r0, 80180f2 <_svfiprintf_r+0xe6>
 80180ba:	06d0      	lsls	r0, r2, #27
 80180bc:	bf44      	itt	mi
 80180be:	2320      	movmi	r3, #32
 80180c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180c4:	0711      	lsls	r1, r2, #28
 80180c6:	bf44      	itt	mi
 80180c8:	232b      	movmi	r3, #43	; 0x2b
 80180ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80180ce:	f89a 3000 	ldrb.w	r3, [sl]
 80180d2:	2b2a      	cmp	r3, #42	; 0x2a
 80180d4:	d015      	beq.n	8018102 <_svfiprintf_r+0xf6>
 80180d6:	4654      	mov	r4, sl
 80180d8:	2000      	movs	r0, #0
 80180da:	f04f 0c0a 	mov.w	ip, #10
 80180de:	9a07      	ldr	r2, [sp, #28]
 80180e0:	4621      	mov	r1, r4
 80180e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180e6:	3b30      	subs	r3, #48	; 0x30
 80180e8:	2b09      	cmp	r3, #9
 80180ea:	d94e      	bls.n	801818a <_svfiprintf_r+0x17e>
 80180ec:	b1b0      	cbz	r0, 801811c <_svfiprintf_r+0x110>
 80180ee:	9207      	str	r2, [sp, #28]
 80180f0:	e014      	b.n	801811c <_svfiprintf_r+0x110>
 80180f2:	eba0 0308 	sub.w	r3, r0, r8
 80180f6:	fa09 f303 	lsl.w	r3, r9, r3
 80180fa:	4313      	orrs	r3, r2
 80180fc:	46a2      	mov	sl, r4
 80180fe:	9304      	str	r3, [sp, #16]
 8018100:	e7d2      	b.n	80180a8 <_svfiprintf_r+0x9c>
 8018102:	9b03      	ldr	r3, [sp, #12]
 8018104:	1d19      	adds	r1, r3, #4
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	9103      	str	r1, [sp, #12]
 801810a:	2b00      	cmp	r3, #0
 801810c:	bfbb      	ittet	lt
 801810e:	425b      	neglt	r3, r3
 8018110:	f042 0202 	orrlt.w	r2, r2, #2
 8018114:	9307      	strge	r3, [sp, #28]
 8018116:	9307      	strlt	r3, [sp, #28]
 8018118:	bfb8      	it	lt
 801811a:	9204      	strlt	r2, [sp, #16]
 801811c:	7823      	ldrb	r3, [r4, #0]
 801811e:	2b2e      	cmp	r3, #46	; 0x2e
 8018120:	d10c      	bne.n	801813c <_svfiprintf_r+0x130>
 8018122:	7863      	ldrb	r3, [r4, #1]
 8018124:	2b2a      	cmp	r3, #42	; 0x2a
 8018126:	d135      	bne.n	8018194 <_svfiprintf_r+0x188>
 8018128:	9b03      	ldr	r3, [sp, #12]
 801812a:	3402      	adds	r4, #2
 801812c:	1d1a      	adds	r2, r3, #4
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	9203      	str	r2, [sp, #12]
 8018132:	2b00      	cmp	r3, #0
 8018134:	bfb8      	it	lt
 8018136:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801813a:	9305      	str	r3, [sp, #20]
 801813c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018208 <_svfiprintf_r+0x1fc>
 8018140:	2203      	movs	r2, #3
 8018142:	4650      	mov	r0, sl
 8018144:	7821      	ldrb	r1, [r4, #0]
 8018146:	f000 fdb5 	bl	8018cb4 <memchr>
 801814a:	b140      	cbz	r0, 801815e <_svfiprintf_r+0x152>
 801814c:	2340      	movs	r3, #64	; 0x40
 801814e:	eba0 000a 	sub.w	r0, r0, sl
 8018152:	fa03 f000 	lsl.w	r0, r3, r0
 8018156:	9b04      	ldr	r3, [sp, #16]
 8018158:	3401      	adds	r4, #1
 801815a:	4303      	orrs	r3, r0
 801815c:	9304      	str	r3, [sp, #16]
 801815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018162:	2206      	movs	r2, #6
 8018164:	4825      	ldr	r0, [pc, #148]	; (80181fc <_svfiprintf_r+0x1f0>)
 8018166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801816a:	f000 fda3 	bl	8018cb4 <memchr>
 801816e:	2800      	cmp	r0, #0
 8018170:	d038      	beq.n	80181e4 <_svfiprintf_r+0x1d8>
 8018172:	4b23      	ldr	r3, [pc, #140]	; (8018200 <_svfiprintf_r+0x1f4>)
 8018174:	bb1b      	cbnz	r3, 80181be <_svfiprintf_r+0x1b2>
 8018176:	9b03      	ldr	r3, [sp, #12]
 8018178:	3307      	adds	r3, #7
 801817a:	f023 0307 	bic.w	r3, r3, #7
 801817e:	3308      	adds	r3, #8
 8018180:	9303      	str	r3, [sp, #12]
 8018182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018184:	4433      	add	r3, r6
 8018186:	9309      	str	r3, [sp, #36]	; 0x24
 8018188:	e767      	b.n	801805a <_svfiprintf_r+0x4e>
 801818a:	460c      	mov	r4, r1
 801818c:	2001      	movs	r0, #1
 801818e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018192:	e7a5      	b.n	80180e0 <_svfiprintf_r+0xd4>
 8018194:	2300      	movs	r3, #0
 8018196:	f04f 0c0a 	mov.w	ip, #10
 801819a:	4619      	mov	r1, r3
 801819c:	3401      	adds	r4, #1
 801819e:	9305      	str	r3, [sp, #20]
 80181a0:	4620      	mov	r0, r4
 80181a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181a6:	3a30      	subs	r2, #48	; 0x30
 80181a8:	2a09      	cmp	r2, #9
 80181aa:	d903      	bls.n	80181b4 <_svfiprintf_r+0x1a8>
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d0c5      	beq.n	801813c <_svfiprintf_r+0x130>
 80181b0:	9105      	str	r1, [sp, #20]
 80181b2:	e7c3      	b.n	801813c <_svfiprintf_r+0x130>
 80181b4:	4604      	mov	r4, r0
 80181b6:	2301      	movs	r3, #1
 80181b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80181bc:	e7f0      	b.n	80181a0 <_svfiprintf_r+0x194>
 80181be:	ab03      	add	r3, sp, #12
 80181c0:	9300      	str	r3, [sp, #0]
 80181c2:	462a      	mov	r2, r5
 80181c4:	4638      	mov	r0, r7
 80181c6:	4b0f      	ldr	r3, [pc, #60]	; (8018204 <_svfiprintf_r+0x1f8>)
 80181c8:	a904      	add	r1, sp, #16
 80181ca:	f3af 8000 	nop.w
 80181ce:	1c42      	adds	r2, r0, #1
 80181d0:	4606      	mov	r6, r0
 80181d2:	d1d6      	bne.n	8018182 <_svfiprintf_r+0x176>
 80181d4:	89ab      	ldrh	r3, [r5, #12]
 80181d6:	065b      	lsls	r3, r3, #25
 80181d8:	f53f af2c 	bmi.w	8018034 <_svfiprintf_r+0x28>
 80181dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181de:	b01d      	add	sp, #116	; 0x74
 80181e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e4:	ab03      	add	r3, sp, #12
 80181e6:	9300      	str	r3, [sp, #0]
 80181e8:	462a      	mov	r2, r5
 80181ea:	4638      	mov	r0, r7
 80181ec:	4b05      	ldr	r3, [pc, #20]	; (8018204 <_svfiprintf_r+0x1f8>)
 80181ee:	a904      	add	r1, sp, #16
 80181f0:	f000 f9d4 	bl	801859c <_printf_i>
 80181f4:	e7eb      	b.n	80181ce <_svfiprintf_r+0x1c2>
 80181f6:	bf00      	nop
 80181f8:	0801a970 	.word	0x0801a970
 80181fc:	0801a97a 	.word	0x0801a97a
 8018200:	00000000 	.word	0x00000000
 8018204:	08017f55 	.word	0x08017f55
 8018208:	0801a976 	.word	0x0801a976

0801820c <__sfputc_r>:
 801820c:	6893      	ldr	r3, [r2, #8]
 801820e:	b410      	push	{r4}
 8018210:	3b01      	subs	r3, #1
 8018212:	2b00      	cmp	r3, #0
 8018214:	6093      	str	r3, [r2, #8]
 8018216:	da07      	bge.n	8018228 <__sfputc_r+0x1c>
 8018218:	6994      	ldr	r4, [r2, #24]
 801821a:	42a3      	cmp	r3, r4
 801821c:	db01      	blt.n	8018222 <__sfputc_r+0x16>
 801821e:	290a      	cmp	r1, #10
 8018220:	d102      	bne.n	8018228 <__sfputc_r+0x1c>
 8018222:	bc10      	pop	{r4}
 8018224:	f000 bb24 	b.w	8018870 <__swbuf_r>
 8018228:	6813      	ldr	r3, [r2, #0]
 801822a:	1c58      	adds	r0, r3, #1
 801822c:	6010      	str	r0, [r2, #0]
 801822e:	7019      	strb	r1, [r3, #0]
 8018230:	4608      	mov	r0, r1
 8018232:	bc10      	pop	{r4}
 8018234:	4770      	bx	lr

08018236 <__sfputs_r>:
 8018236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018238:	4606      	mov	r6, r0
 801823a:	460f      	mov	r7, r1
 801823c:	4614      	mov	r4, r2
 801823e:	18d5      	adds	r5, r2, r3
 8018240:	42ac      	cmp	r4, r5
 8018242:	d101      	bne.n	8018248 <__sfputs_r+0x12>
 8018244:	2000      	movs	r0, #0
 8018246:	e007      	b.n	8018258 <__sfputs_r+0x22>
 8018248:	463a      	mov	r2, r7
 801824a:	4630      	mov	r0, r6
 801824c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018250:	f7ff ffdc 	bl	801820c <__sfputc_r>
 8018254:	1c43      	adds	r3, r0, #1
 8018256:	d1f3      	bne.n	8018240 <__sfputs_r+0xa>
 8018258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801825c <_vfiprintf_r>:
 801825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018260:	460d      	mov	r5, r1
 8018262:	4614      	mov	r4, r2
 8018264:	4698      	mov	r8, r3
 8018266:	4606      	mov	r6, r0
 8018268:	b09d      	sub	sp, #116	; 0x74
 801826a:	b118      	cbz	r0, 8018274 <_vfiprintf_r+0x18>
 801826c:	6983      	ldr	r3, [r0, #24]
 801826e:	b90b      	cbnz	r3, 8018274 <_vfiprintf_r+0x18>
 8018270:	f7ff fd8c 	bl	8017d8c <__sinit>
 8018274:	4b89      	ldr	r3, [pc, #548]	; (801849c <_vfiprintf_r+0x240>)
 8018276:	429d      	cmp	r5, r3
 8018278:	d11b      	bne.n	80182b2 <_vfiprintf_r+0x56>
 801827a:	6875      	ldr	r5, [r6, #4]
 801827c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801827e:	07d9      	lsls	r1, r3, #31
 8018280:	d405      	bmi.n	801828e <_vfiprintf_r+0x32>
 8018282:	89ab      	ldrh	r3, [r5, #12]
 8018284:	059a      	lsls	r2, r3, #22
 8018286:	d402      	bmi.n	801828e <_vfiprintf_r+0x32>
 8018288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801828a:	f7ff fe2f 	bl	8017eec <__retarget_lock_acquire_recursive>
 801828e:	89ab      	ldrh	r3, [r5, #12]
 8018290:	071b      	lsls	r3, r3, #28
 8018292:	d501      	bpl.n	8018298 <_vfiprintf_r+0x3c>
 8018294:	692b      	ldr	r3, [r5, #16]
 8018296:	b9eb      	cbnz	r3, 80182d4 <_vfiprintf_r+0x78>
 8018298:	4629      	mov	r1, r5
 801829a:	4630      	mov	r0, r6
 801829c:	f000 fb4c 	bl	8018938 <__swsetup_r>
 80182a0:	b1c0      	cbz	r0, 80182d4 <_vfiprintf_r+0x78>
 80182a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182a4:	07dc      	lsls	r4, r3, #31
 80182a6:	d50e      	bpl.n	80182c6 <_vfiprintf_r+0x6a>
 80182a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182ac:	b01d      	add	sp, #116	; 0x74
 80182ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b2:	4b7b      	ldr	r3, [pc, #492]	; (80184a0 <_vfiprintf_r+0x244>)
 80182b4:	429d      	cmp	r5, r3
 80182b6:	d101      	bne.n	80182bc <_vfiprintf_r+0x60>
 80182b8:	68b5      	ldr	r5, [r6, #8]
 80182ba:	e7df      	b.n	801827c <_vfiprintf_r+0x20>
 80182bc:	4b79      	ldr	r3, [pc, #484]	; (80184a4 <_vfiprintf_r+0x248>)
 80182be:	429d      	cmp	r5, r3
 80182c0:	bf08      	it	eq
 80182c2:	68f5      	ldreq	r5, [r6, #12]
 80182c4:	e7da      	b.n	801827c <_vfiprintf_r+0x20>
 80182c6:	89ab      	ldrh	r3, [r5, #12]
 80182c8:	0598      	lsls	r0, r3, #22
 80182ca:	d4ed      	bmi.n	80182a8 <_vfiprintf_r+0x4c>
 80182cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182ce:	f7ff fe0e 	bl	8017eee <__retarget_lock_release_recursive>
 80182d2:	e7e9      	b.n	80182a8 <_vfiprintf_r+0x4c>
 80182d4:	2300      	movs	r3, #0
 80182d6:	9309      	str	r3, [sp, #36]	; 0x24
 80182d8:	2320      	movs	r3, #32
 80182da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182de:	2330      	movs	r3, #48	; 0x30
 80182e0:	f04f 0901 	mov.w	r9, #1
 80182e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80182e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80184a8 <_vfiprintf_r+0x24c>
 80182ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80182f0:	4623      	mov	r3, r4
 80182f2:	469a      	mov	sl, r3
 80182f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182f8:	b10a      	cbz	r2, 80182fe <_vfiprintf_r+0xa2>
 80182fa:	2a25      	cmp	r2, #37	; 0x25
 80182fc:	d1f9      	bne.n	80182f2 <_vfiprintf_r+0x96>
 80182fe:	ebba 0b04 	subs.w	fp, sl, r4
 8018302:	d00b      	beq.n	801831c <_vfiprintf_r+0xc0>
 8018304:	465b      	mov	r3, fp
 8018306:	4622      	mov	r2, r4
 8018308:	4629      	mov	r1, r5
 801830a:	4630      	mov	r0, r6
 801830c:	f7ff ff93 	bl	8018236 <__sfputs_r>
 8018310:	3001      	adds	r0, #1
 8018312:	f000 80aa 	beq.w	801846a <_vfiprintf_r+0x20e>
 8018316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018318:	445a      	add	r2, fp
 801831a:	9209      	str	r2, [sp, #36]	; 0x24
 801831c:	f89a 3000 	ldrb.w	r3, [sl]
 8018320:	2b00      	cmp	r3, #0
 8018322:	f000 80a2 	beq.w	801846a <_vfiprintf_r+0x20e>
 8018326:	2300      	movs	r3, #0
 8018328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801832c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018330:	f10a 0a01 	add.w	sl, sl, #1
 8018334:	9304      	str	r3, [sp, #16]
 8018336:	9307      	str	r3, [sp, #28]
 8018338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801833c:	931a      	str	r3, [sp, #104]	; 0x68
 801833e:	4654      	mov	r4, sl
 8018340:	2205      	movs	r2, #5
 8018342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018346:	4858      	ldr	r0, [pc, #352]	; (80184a8 <_vfiprintf_r+0x24c>)
 8018348:	f000 fcb4 	bl	8018cb4 <memchr>
 801834c:	9a04      	ldr	r2, [sp, #16]
 801834e:	b9d8      	cbnz	r0, 8018388 <_vfiprintf_r+0x12c>
 8018350:	06d1      	lsls	r1, r2, #27
 8018352:	bf44      	itt	mi
 8018354:	2320      	movmi	r3, #32
 8018356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801835a:	0713      	lsls	r3, r2, #28
 801835c:	bf44      	itt	mi
 801835e:	232b      	movmi	r3, #43	; 0x2b
 8018360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018364:	f89a 3000 	ldrb.w	r3, [sl]
 8018368:	2b2a      	cmp	r3, #42	; 0x2a
 801836a:	d015      	beq.n	8018398 <_vfiprintf_r+0x13c>
 801836c:	4654      	mov	r4, sl
 801836e:	2000      	movs	r0, #0
 8018370:	f04f 0c0a 	mov.w	ip, #10
 8018374:	9a07      	ldr	r2, [sp, #28]
 8018376:	4621      	mov	r1, r4
 8018378:	f811 3b01 	ldrb.w	r3, [r1], #1
 801837c:	3b30      	subs	r3, #48	; 0x30
 801837e:	2b09      	cmp	r3, #9
 8018380:	d94e      	bls.n	8018420 <_vfiprintf_r+0x1c4>
 8018382:	b1b0      	cbz	r0, 80183b2 <_vfiprintf_r+0x156>
 8018384:	9207      	str	r2, [sp, #28]
 8018386:	e014      	b.n	80183b2 <_vfiprintf_r+0x156>
 8018388:	eba0 0308 	sub.w	r3, r0, r8
 801838c:	fa09 f303 	lsl.w	r3, r9, r3
 8018390:	4313      	orrs	r3, r2
 8018392:	46a2      	mov	sl, r4
 8018394:	9304      	str	r3, [sp, #16]
 8018396:	e7d2      	b.n	801833e <_vfiprintf_r+0xe2>
 8018398:	9b03      	ldr	r3, [sp, #12]
 801839a:	1d19      	adds	r1, r3, #4
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	9103      	str	r1, [sp, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	bfbb      	ittet	lt
 80183a4:	425b      	neglt	r3, r3
 80183a6:	f042 0202 	orrlt.w	r2, r2, #2
 80183aa:	9307      	strge	r3, [sp, #28]
 80183ac:	9307      	strlt	r3, [sp, #28]
 80183ae:	bfb8      	it	lt
 80183b0:	9204      	strlt	r2, [sp, #16]
 80183b2:	7823      	ldrb	r3, [r4, #0]
 80183b4:	2b2e      	cmp	r3, #46	; 0x2e
 80183b6:	d10c      	bne.n	80183d2 <_vfiprintf_r+0x176>
 80183b8:	7863      	ldrb	r3, [r4, #1]
 80183ba:	2b2a      	cmp	r3, #42	; 0x2a
 80183bc:	d135      	bne.n	801842a <_vfiprintf_r+0x1ce>
 80183be:	9b03      	ldr	r3, [sp, #12]
 80183c0:	3402      	adds	r4, #2
 80183c2:	1d1a      	adds	r2, r3, #4
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	9203      	str	r2, [sp, #12]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	bfb8      	it	lt
 80183cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80183d0:	9305      	str	r3, [sp, #20]
 80183d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80184b8 <_vfiprintf_r+0x25c>
 80183d6:	2203      	movs	r2, #3
 80183d8:	4650      	mov	r0, sl
 80183da:	7821      	ldrb	r1, [r4, #0]
 80183dc:	f000 fc6a 	bl	8018cb4 <memchr>
 80183e0:	b140      	cbz	r0, 80183f4 <_vfiprintf_r+0x198>
 80183e2:	2340      	movs	r3, #64	; 0x40
 80183e4:	eba0 000a 	sub.w	r0, r0, sl
 80183e8:	fa03 f000 	lsl.w	r0, r3, r0
 80183ec:	9b04      	ldr	r3, [sp, #16]
 80183ee:	3401      	adds	r4, #1
 80183f0:	4303      	orrs	r3, r0
 80183f2:	9304      	str	r3, [sp, #16]
 80183f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183f8:	2206      	movs	r2, #6
 80183fa:	482c      	ldr	r0, [pc, #176]	; (80184ac <_vfiprintf_r+0x250>)
 80183fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018400:	f000 fc58 	bl	8018cb4 <memchr>
 8018404:	2800      	cmp	r0, #0
 8018406:	d03f      	beq.n	8018488 <_vfiprintf_r+0x22c>
 8018408:	4b29      	ldr	r3, [pc, #164]	; (80184b0 <_vfiprintf_r+0x254>)
 801840a:	bb1b      	cbnz	r3, 8018454 <_vfiprintf_r+0x1f8>
 801840c:	9b03      	ldr	r3, [sp, #12]
 801840e:	3307      	adds	r3, #7
 8018410:	f023 0307 	bic.w	r3, r3, #7
 8018414:	3308      	adds	r3, #8
 8018416:	9303      	str	r3, [sp, #12]
 8018418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801841a:	443b      	add	r3, r7
 801841c:	9309      	str	r3, [sp, #36]	; 0x24
 801841e:	e767      	b.n	80182f0 <_vfiprintf_r+0x94>
 8018420:	460c      	mov	r4, r1
 8018422:	2001      	movs	r0, #1
 8018424:	fb0c 3202 	mla	r2, ip, r2, r3
 8018428:	e7a5      	b.n	8018376 <_vfiprintf_r+0x11a>
 801842a:	2300      	movs	r3, #0
 801842c:	f04f 0c0a 	mov.w	ip, #10
 8018430:	4619      	mov	r1, r3
 8018432:	3401      	adds	r4, #1
 8018434:	9305      	str	r3, [sp, #20]
 8018436:	4620      	mov	r0, r4
 8018438:	f810 2b01 	ldrb.w	r2, [r0], #1
 801843c:	3a30      	subs	r2, #48	; 0x30
 801843e:	2a09      	cmp	r2, #9
 8018440:	d903      	bls.n	801844a <_vfiprintf_r+0x1ee>
 8018442:	2b00      	cmp	r3, #0
 8018444:	d0c5      	beq.n	80183d2 <_vfiprintf_r+0x176>
 8018446:	9105      	str	r1, [sp, #20]
 8018448:	e7c3      	b.n	80183d2 <_vfiprintf_r+0x176>
 801844a:	4604      	mov	r4, r0
 801844c:	2301      	movs	r3, #1
 801844e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018452:	e7f0      	b.n	8018436 <_vfiprintf_r+0x1da>
 8018454:	ab03      	add	r3, sp, #12
 8018456:	9300      	str	r3, [sp, #0]
 8018458:	462a      	mov	r2, r5
 801845a:	4630      	mov	r0, r6
 801845c:	4b15      	ldr	r3, [pc, #84]	; (80184b4 <_vfiprintf_r+0x258>)
 801845e:	a904      	add	r1, sp, #16
 8018460:	f3af 8000 	nop.w
 8018464:	4607      	mov	r7, r0
 8018466:	1c78      	adds	r0, r7, #1
 8018468:	d1d6      	bne.n	8018418 <_vfiprintf_r+0x1bc>
 801846a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801846c:	07d9      	lsls	r1, r3, #31
 801846e:	d405      	bmi.n	801847c <_vfiprintf_r+0x220>
 8018470:	89ab      	ldrh	r3, [r5, #12]
 8018472:	059a      	lsls	r2, r3, #22
 8018474:	d402      	bmi.n	801847c <_vfiprintf_r+0x220>
 8018476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018478:	f7ff fd39 	bl	8017eee <__retarget_lock_release_recursive>
 801847c:	89ab      	ldrh	r3, [r5, #12]
 801847e:	065b      	lsls	r3, r3, #25
 8018480:	f53f af12 	bmi.w	80182a8 <_vfiprintf_r+0x4c>
 8018484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018486:	e711      	b.n	80182ac <_vfiprintf_r+0x50>
 8018488:	ab03      	add	r3, sp, #12
 801848a:	9300      	str	r3, [sp, #0]
 801848c:	462a      	mov	r2, r5
 801848e:	4630      	mov	r0, r6
 8018490:	4b08      	ldr	r3, [pc, #32]	; (80184b4 <_vfiprintf_r+0x258>)
 8018492:	a904      	add	r1, sp, #16
 8018494:	f000 f882 	bl	801859c <_printf_i>
 8018498:	e7e4      	b.n	8018464 <_vfiprintf_r+0x208>
 801849a:	bf00      	nop
 801849c:	0801a930 	.word	0x0801a930
 80184a0:	0801a950 	.word	0x0801a950
 80184a4:	0801a910 	.word	0x0801a910
 80184a8:	0801a970 	.word	0x0801a970
 80184ac:	0801a97a 	.word	0x0801a97a
 80184b0:	00000000 	.word	0x00000000
 80184b4:	08018237 	.word	0x08018237
 80184b8:	0801a976 	.word	0x0801a976

080184bc <_printf_common>:
 80184bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184c0:	4616      	mov	r6, r2
 80184c2:	4699      	mov	r9, r3
 80184c4:	688a      	ldr	r2, [r1, #8]
 80184c6:	690b      	ldr	r3, [r1, #16]
 80184c8:	4607      	mov	r7, r0
 80184ca:	4293      	cmp	r3, r2
 80184cc:	bfb8      	it	lt
 80184ce:	4613      	movlt	r3, r2
 80184d0:	6033      	str	r3, [r6, #0]
 80184d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80184d6:	460c      	mov	r4, r1
 80184d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80184dc:	b10a      	cbz	r2, 80184e2 <_printf_common+0x26>
 80184de:	3301      	adds	r3, #1
 80184e0:	6033      	str	r3, [r6, #0]
 80184e2:	6823      	ldr	r3, [r4, #0]
 80184e4:	0699      	lsls	r1, r3, #26
 80184e6:	bf42      	ittt	mi
 80184e8:	6833      	ldrmi	r3, [r6, #0]
 80184ea:	3302      	addmi	r3, #2
 80184ec:	6033      	strmi	r3, [r6, #0]
 80184ee:	6825      	ldr	r5, [r4, #0]
 80184f0:	f015 0506 	ands.w	r5, r5, #6
 80184f4:	d106      	bne.n	8018504 <_printf_common+0x48>
 80184f6:	f104 0a19 	add.w	sl, r4, #25
 80184fa:	68e3      	ldr	r3, [r4, #12]
 80184fc:	6832      	ldr	r2, [r6, #0]
 80184fe:	1a9b      	subs	r3, r3, r2
 8018500:	42ab      	cmp	r3, r5
 8018502:	dc28      	bgt.n	8018556 <_printf_common+0x9a>
 8018504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018508:	1e13      	subs	r3, r2, #0
 801850a:	6822      	ldr	r2, [r4, #0]
 801850c:	bf18      	it	ne
 801850e:	2301      	movne	r3, #1
 8018510:	0692      	lsls	r2, r2, #26
 8018512:	d42d      	bmi.n	8018570 <_printf_common+0xb4>
 8018514:	4649      	mov	r1, r9
 8018516:	4638      	mov	r0, r7
 8018518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801851c:	47c0      	blx	r8
 801851e:	3001      	adds	r0, #1
 8018520:	d020      	beq.n	8018564 <_printf_common+0xa8>
 8018522:	6823      	ldr	r3, [r4, #0]
 8018524:	68e5      	ldr	r5, [r4, #12]
 8018526:	f003 0306 	and.w	r3, r3, #6
 801852a:	2b04      	cmp	r3, #4
 801852c:	bf18      	it	ne
 801852e:	2500      	movne	r5, #0
 8018530:	6832      	ldr	r2, [r6, #0]
 8018532:	f04f 0600 	mov.w	r6, #0
 8018536:	68a3      	ldr	r3, [r4, #8]
 8018538:	bf08      	it	eq
 801853a:	1aad      	subeq	r5, r5, r2
 801853c:	6922      	ldr	r2, [r4, #16]
 801853e:	bf08      	it	eq
 8018540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018544:	4293      	cmp	r3, r2
 8018546:	bfc4      	itt	gt
 8018548:	1a9b      	subgt	r3, r3, r2
 801854a:	18ed      	addgt	r5, r5, r3
 801854c:	341a      	adds	r4, #26
 801854e:	42b5      	cmp	r5, r6
 8018550:	d11a      	bne.n	8018588 <_printf_common+0xcc>
 8018552:	2000      	movs	r0, #0
 8018554:	e008      	b.n	8018568 <_printf_common+0xac>
 8018556:	2301      	movs	r3, #1
 8018558:	4652      	mov	r2, sl
 801855a:	4649      	mov	r1, r9
 801855c:	4638      	mov	r0, r7
 801855e:	47c0      	blx	r8
 8018560:	3001      	adds	r0, #1
 8018562:	d103      	bne.n	801856c <_printf_common+0xb0>
 8018564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801856c:	3501      	adds	r5, #1
 801856e:	e7c4      	b.n	80184fa <_printf_common+0x3e>
 8018570:	2030      	movs	r0, #48	; 0x30
 8018572:	18e1      	adds	r1, r4, r3
 8018574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018578:	1c5a      	adds	r2, r3, #1
 801857a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801857e:	4422      	add	r2, r4
 8018580:	3302      	adds	r3, #2
 8018582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018586:	e7c5      	b.n	8018514 <_printf_common+0x58>
 8018588:	2301      	movs	r3, #1
 801858a:	4622      	mov	r2, r4
 801858c:	4649      	mov	r1, r9
 801858e:	4638      	mov	r0, r7
 8018590:	47c0      	blx	r8
 8018592:	3001      	adds	r0, #1
 8018594:	d0e6      	beq.n	8018564 <_printf_common+0xa8>
 8018596:	3601      	adds	r6, #1
 8018598:	e7d9      	b.n	801854e <_printf_common+0x92>
	...

0801859c <_printf_i>:
 801859c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80185a0:	460c      	mov	r4, r1
 80185a2:	7e27      	ldrb	r7, [r4, #24]
 80185a4:	4691      	mov	r9, r2
 80185a6:	2f78      	cmp	r7, #120	; 0x78
 80185a8:	4680      	mov	r8, r0
 80185aa:	469a      	mov	sl, r3
 80185ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80185ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80185b2:	d807      	bhi.n	80185c4 <_printf_i+0x28>
 80185b4:	2f62      	cmp	r7, #98	; 0x62
 80185b6:	d80a      	bhi.n	80185ce <_printf_i+0x32>
 80185b8:	2f00      	cmp	r7, #0
 80185ba:	f000 80d9 	beq.w	8018770 <_printf_i+0x1d4>
 80185be:	2f58      	cmp	r7, #88	; 0x58
 80185c0:	f000 80a4 	beq.w	801870c <_printf_i+0x170>
 80185c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80185c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80185cc:	e03a      	b.n	8018644 <_printf_i+0xa8>
 80185ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80185d2:	2b15      	cmp	r3, #21
 80185d4:	d8f6      	bhi.n	80185c4 <_printf_i+0x28>
 80185d6:	a001      	add	r0, pc, #4	; (adr r0, 80185dc <_printf_i+0x40>)
 80185d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80185dc:	08018635 	.word	0x08018635
 80185e0:	08018649 	.word	0x08018649
 80185e4:	080185c5 	.word	0x080185c5
 80185e8:	080185c5 	.word	0x080185c5
 80185ec:	080185c5 	.word	0x080185c5
 80185f0:	080185c5 	.word	0x080185c5
 80185f4:	08018649 	.word	0x08018649
 80185f8:	080185c5 	.word	0x080185c5
 80185fc:	080185c5 	.word	0x080185c5
 8018600:	080185c5 	.word	0x080185c5
 8018604:	080185c5 	.word	0x080185c5
 8018608:	08018757 	.word	0x08018757
 801860c:	08018679 	.word	0x08018679
 8018610:	08018739 	.word	0x08018739
 8018614:	080185c5 	.word	0x080185c5
 8018618:	080185c5 	.word	0x080185c5
 801861c:	08018779 	.word	0x08018779
 8018620:	080185c5 	.word	0x080185c5
 8018624:	08018679 	.word	0x08018679
 8018628:	080185c5 	.word	0x080185c5
 801862c:	080185c5 	.word	0x080185c5
 8018630:	08018741 	.word	0x08018741
 8018634:	680b      	ldr	r3, [r1, #0]
 8018636:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801863a:	1d1a      	adds	r2, r3, #4
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	600a      	str	r2, [r1, #0]
 8018640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018644:	2301      	movs	r3, #1
 8018646:	e0a4      	b.n	8018792 <_printf_i+0x1f6>
 8018648:	6825      	ldr	r5, [r4, #0]
 801864a:	6808      	ldr	r0, [r1, #0]
 801864c:	062e      	lsls	r6, r5, #24
 801864e:	f100 0304 	add.w	r3, r0, #4
 8018652:	d50a      	bpl.n	801866a <_printf_i+0xce>
 8018654:	6805      	ldr	r5, [r0, #0]
 8018656:	600b      	str	r3, [r1, #0]
 8018658:	2d00      	cmp	r5, #0
 801865a:	da03      	bge.n	8018664 <_printf_i+0xc8>
 801865c:	232d      	movs	r3, #45	; 0x2d
 801865e:	426d      	negs	r5, r5
 8018660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018664:	230a      	movs	r3, #10
 8018666:	485e      	ldr	r0, [pc, #376]	; (80187e0 <_printf_i+0x244>)
 8018668:	e019      	b.n	801869e <_printf_i+0x102>
 801866a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801866e:	6805      	ldr	r5, [r0, #0]
 8018670:	600b      	str	r3, [r1, #0]
 8018672:	bf18      	it	ne
 8018674:	b22d      	sxthne	r5, r5
 8018676:	e7ef      	b.n	8018658 <_printf_i+0xbc>
 8018678:	680b      	ldr	r3, [r1, #0]
 801867a:	6825      	ldr	r5, [r4, #0]
 801867c:	1d18      	adds	r0, r3, #4
 801867e:	6008      	str	r0, [r1, #0]
 8018680:	0628      	lsls	r0, r5, #24
 8018682:	d501      	bpl.n	8018688 <_printf_i+0xec>
 8018684:	681d      	ldr	r5, [r3, #0]
 8018686:	e002      	b.n	801868e <_printf_i+0xf2>
 8018688:	0669      	lsls	r1, r5, #25
 801868a:	d5fb      	bpl.n	8018684 <_printf_i+0xe8>
 801868c:	881d      	ldrh	r5, [r3, #0]
 801868e:	2f6f      	cmp	r7, #111	; 0x6f
 8018690:	bf0c      	ite	eq
 8018692:	2308      	moveq	r3, #8
 8018694:	230a      	movne	r3, #10
 8018696:	4852      	ldr	r0, [pc, #328]	; (80187e0 <_printf_i+0x244>)
 8018698:	2100      	movs	r1, #0
 801869a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801869e:	6866      	ldr	r6, [r4, #4]
 80186a0:	2e00      	cmp	r6, #0
 80186a2:	bfa8      	it	ge
 80186a4:	6821      	ldrge	r1, [r4, #0]
 80186a6:	60a6      	str	r6, [r4, #8]
 80186a8:	bfa4      	itt	ge
 80186aa:	f021 0104 	bicge.w	r1, r1, #4
 80186ae:	6021      	strge	r1, [r4, #0]
 80186b0:	b90d      	cbnz	r5, 80186b6 <_printf_i+0x11a>
 80186b2:	2e00      	cmp	r6, #0
 80186b4:	d04d      	beq.n	8018752 <_printf_i+0x1b6>
 80186b6:	4616      	mov	r6, r2
 80186b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80186bc:	fb03 5711 	mls	r7, r3, r1, r5
 80186c0:	5dc7      	ldrb	r7, [r0, r7]
 80186c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80186c6:	462f      	mov	r7, r5
 80186c8:	42bb      	cmp	r3, r7
 80186ca:	460d      	mov	r5, r1
 80186cc:	d9f4      	bls.n	80186b8 <_printf_i+0x11c>
 80186ce:	2b08      	cmp	r3, #8
 80186d0:	d10b      	bne.n	80186ea <_printf_i+0x14e>
 80186d2:	6823      	ldr	r3, [r4, #0]
 80186d4:	07df      	lsls	r7, r3, #31
 80186d6:	d508      	bpl.n	80186ea <_printf_i+0x14e>
 80186d8:	6923      	ldr	r3, [r4, #16]
 80186da:	6861      	ldr	r1, [r4, #4]
 80186dc:	4299      	cmp	r1, r3
 80186de:	bfde      	ittt	le
 80186e0:	2330      	movle	r3, #48	; 0x30
 80186e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80186e6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80186ea:	1b92      	subs	r2, r2, r6
 80186ec:	6122      	str	r2, [r4, #16]
 80186ee:	464b      	mov	r3, r9
 80186f0:	4621      	mov	r1, r4
 80186f2:	4640      	mov	r0, r8
 80186f4:	f8cd a000 	str.w	sl, [sp]
 80186f8:	aa03      	add	r2, sp, #12
 80186fa:	f7ff fedf 	bl	80184bc <_printf_common>
 80186fe:	3001      	adds	r0, #1
 8018700:	d14c      	bne.n	801879c <_printf_i+0x200>
 8018702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018706:	b004      	add	sp, #16
 8018708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801870c:	4834      	ldr	r0, [pc, #208]	; (80187e0 <_printf_i+0x244>)
 801870e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018712:	680e      	ldr	r6, [r1, #0]
 8018714:	6823      	ldr	r3, [r4, #0]
 8018716:	f856 5b04 	ldr.w	r5, [r6], #4
 801871a:	061f      	lsls	r7, r3, #24
 801871c:	600e      	str	r6, [r1, #0]
 801871e:	d514      	bpl.n	801874a <_printf_i+0x1ae>
 8018720:	07d9      	lsls	r1, r3, #31
 8018722:	bf44      	itt	mi
 8018724:	f043 0320 	orrmi.w	r3, r3, #32
 8018728:	6023      	strmi	r3, [r4, #0]
 801872a:	b91d      	cbnz	r5, 8018734 <_printf_i+0x198>
 801872c:	6823      	ldr	r3, [r4, #0]
 801872e:	f023 0320 	bic.w	r3, r3, #32
 8018732:	6023      	str	r3, [r4, #0]
 8018734:	2310      	movs	r3, #16
 8018736:	e7af      	b.n	8018698 <_printf_i+0xfc>
 8018738:	6823      	ldr	r3, [r4, #0]
 801873a:	f043 0320 	orr.w	r3, r3, #32
 801873e:	6023      	str	r3, [r4, #0]
 8018740:	2378      	movs	r3, #120	; 0x78
 8018742:	4828      	ldr	r0, [pc, #160]	; (80187e4 <_printf_i+0x248>)
 8018744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018748:	e7e3      	b.n	8018712 <_printf_i+0x176>
 801874a:	065e      	lsls	r6, r3, #25
 801874c:	bf48      	it	mi
 801874e:	b2ad      	uxthmi	r5, r5
 8018750:	e7e6      	b.n	8018720 <_printf_i+0x184>
 8018752:	4616      	mov	r6, r2
 8018754:	e7bb      	b.n	80186ce <_printf_i+0x132>
 8018756:	680b      	ldr	r3, [r1, #0]
 8018758:	6826      	ldr	r6, [r4, #0]
 801875a:	1d1d      	adds	r5, r3, #4
 801875c:	6960      	ldr	r0, [r4, #20]
 801875e:	600d      	str	r5, [r1, #0]
 8018760:	0635      	lsls	r5, r6, #24
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	d501      	bpl.n	801876a <_printf_i+0x1ce>
 8018766:	6018      	str	r0, [r3, #0]
 8018768:	e002      	b.n	8018770 <_printf_i+0x1d4>
 801876a:	0671      	lsls	r1, r6, #25
 801876c:	d5fb      	bpl.n	8018766 <_printf_i+0x1ca>
 801876e:	8018      	strh	r0, [r3, #0]
 8018770:	2300      	movs	r3, #0
 8018772:	4616      	mov	r6, r2
 8018774:	6123      	str	r3, [r4, #16]
 8018776:	e7ba      	b.n	80186ee <_printf_i+0x152>
 8018778:	680b      	ldr	r3, [r1, #0]
 801877a:	1d1a      	adds	r2, r3, #4
 801877c:	600a      	str	r2, [r1, #0]
 801877e:	681e      	ldr	r6, [r3, #0]
 8018780:	2100      	movs	r1, #0
 8018782:	4630      	mov	r0, r6
 8018784:	6862      	ldr	r2, [r4, #4]
 8018786:	f000 fa95 	bl	8018cb4 <memchr>
 801878a:	b108      	cbz	r0, 8018790 <_printf_i+0x1f4>
 801878c:	1b80      	subs	r0, r0, r6
 801878e:	6060      	str	r0, [r4, #4]
 8018790:	6863      	ldr	r3, [r4, #4]
 8018792:	6123      	str	r3, [r4, #16]
 8018794:	2300      	movs	r3, #0
 8018796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801879a:	e7a8      	b.n	80186ee <_printf_i+0x152>
 801879c:	4632      	mov	r2, r6
 801879e:	4649      	mov	r1, r9
 80187a0:	4640      	mov	r0, r8
 80187a2:	6923      	ldr	r3, [r4, #16]
 80187a4:	47d0      	blx	sl
 80187a6:	3001      	adds	r0, #1
 80187a8:	d0ab      	beq.n	8018702 <_printf_i+0x166>
 80187aa:	6823      	ldr	r3, [r4, #0]
 80187ac:	079b      	lsls	r3, r3, #30
 80187ae:	d413      	bmi.n	80187d8 <_printf_i+0x23c>
 80187b0:	68e0      	ldr	r0, [r4, #12]
 80187b2:	9b03      	ldr	r3, [sp, #12]
 80187b4:	4298      	cmp	r0, r3
 80187b6:	bfb8      	it	lt
 80187b8:	4618      	movlt	r0, r3
 80187ba:	e7a4      	b.n	8018706 <_printf_i+0x16a>
 80187bc:	2301      	movs	r3, #1
 80187be:	4632      	mov	r2, r6
 80187c0:	4649      	mov	r1, r9
 80187c2:	4640      	mov	r0, r8
 80187c4:	47d0      	blx	sl
 80187c6:	3001      	adds	r0, #1
 80187c8:	d09b      	beq.n	8018702 <_printf_i+0x166>
 80187ca:	3501      	adds	r5, #1
 80187cc:	68e3      	ldr	r3, [r4, #12]
 80187ce:	9903      	ldr	r1, [sp, #12]
 80187d0:	1a5b      	subs	r3, r3, r1
 80187d2:	42ab      	cmp	r3, r5
 80187d4:	dcf2      	bgt.n	80187bc <_printf_i+0x220>
 80187d6:	e7eb      	b.n	80187b0 <_printf_i+0x214>
 80187d8:	2500      	movs	r5, #0
 80187da:	f104 0619 	add.w	r6, r4, #25
 80187de:	e7f5      	b.n	80187cc <_printf_i+0x230>
 80187e0:	0801a981 	.word	0x0801a981
 80187e4:	0801a992 	.word	0x0801a992

080187e8 <__sread>:
 80187e8:	b510      	push	{r4, lr}
 80187ea:	460c      	mov	r4, r1
 80187ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187f0:	f000 fa76 	bl	8018ce0 <_read_r>
 80187f4:	2800      	cmp	r0, #0
 80187f6:	bfab      	itete	ge
 80187f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80187fa:	89a3      	ldrhlt	r3, [r4, #12]
 80187fc:	181b      	addge	r3, r3, r0
 80187fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018802:	bfac      	ite	ge
 8018804:	6563      	strge	r3, [r4, #84]	; 0x54
 8018806:	81a3      	strhlt	r3, [r4, #12]
 8018808:	bd10      	pop	{r4, pc}

0801880a <__swrite>:
 801880a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801880e:	461f      	mov	r7, r3
 8018810:	898b      	ldrh	r3, [r1, #12]
 8018812:	4605      	mov	r5, r0
 8018814:	05db      	lsls	r3, r3, #23
 8018816:	460c      	mov	r4, r1
 8018818:	4616      	mov	r6, r2
 801881a:	d505      	bpl.n	8018828 <__swrite+0x1e>
 801881c:	2302      	movs	r3, #2
 801881e:	2200      	movs	r2, #0
 8018820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018824:	f000 f9d0 	bl	8018bc8 <_lseek_r>
 8018828:	89a3      	ldrh	r3, [r4, #12]
 801882a:	4632      	mov	r2, r6
 801882c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018830:	81a3      	strh	r3, [r4, #12]
 8018832:	4628      	mov	r0, r5
 8018834:	463b      	mov	r3, r7
 8018836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801883a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801883e:	f000 b869 	b.w	8018914 <_write_r>

08018842 <__sseek>:
 8018842:	b510      	push	{r4, lr}
 8018844:	460c      	mov	r4, r1
 8018846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801884a:	f000 f9bd 	bl	8018bc8 <_lseek_r>
 801884e:	1c43      	adds	r3, r0, #1
 8018850:	89a3      	ldrh	r3, [r4, #12]
 8018852:	bf15      	itete	ne
 8018854:	6560      	strne	r0, [r4, #84]	; 0x54
 8018856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801885a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801885e:	81a3      	strheq	r3, [r4, #12]
 8018860:	bf18      	it	ne
 8018862:	81a3      	strhne	r3, [r4, #12]
 8018864:	bd10      	pop	{r4, pc}

08018866 <__sclose>:
 8018866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801886a:	f000 b8db 	b.w	8018a24 <_close_r>
	...

08018870 <__swbuf_r>:
 8018870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018872:	460e      	mov	r6, r1
 8018874:	4614      	mov	r4, r2
 8018876:	4605      	mov	r5, r0
 8018878:	b118      	cbz	r0, 8018882 <__swbuf_r+0x12>
 801887a:	6983      	ldr	r3, [r0, #24]
 801887c:	b90b      	cbnz	r3, 8018882 <__swbuf_r+0x12>
 801887e:	f7ff fa85 	bl	8017d8c <__sinit>
 8018882:	4b21      	ldr	r3, [pc, #132]	; (8018908 <__swbuf_r+0x98>)
 8018884:	429c      	cmp	r4, r3
 8018886:	d12b      	bne.n	80188e0 <__swbuf_r+0x70>
 8018888:	686c      	ldr	r4, [r5, #4]
 801888a:	69a3      	ldr	r3, [r4, #24]
 801888c:	60a3      	str	r3, [r4, #8]
 801888e:	89a3      	ldrh	r3, [r4, #12]
 8018890:	071a      	lsls	r2, r3, #28
 8018892:	d52f      	bpl.n	80188f4 <__swbuf_r+0x84>
 8018894:	6923      	ldr	r3, [r4, #16]
 8018896:	b36b      	cbz	r3, 80188f4 <__swbuf_r+0x84>
 8018898:	6923      	ldr	r3, [r4, #16]
 801889a:	6820      	ldr	r0, [r4, #0]
 801889c:	b2f6      	uxtb	r6, r6
 801889e:	1ac0      	subs	r0, r0, r3
 80188a0:	6963      	ldr	r3, [r4, #20]
 80188a2:	4637      	mov	r7, r6
 80188a4:	4283      	cmp	r3, r0
 80188a6:	dc04      	bgt.n	80188b2 <__swbuf_r+0x42>
 80188a8:	4621      	mov	r1, r4
 80188aa:	4628      	mov	r0, r5
 80188ac:	f000 f950 	bl	8018b50 <_fflush_r>
 80188b0:	bb30      	cbnz	r0, 8018900 <__swbuf_r+0x90>
 80188b2:	68a3      	ldr	r3, [r4, #8]
 80188b4:	3001      	adds	r0, #1
 80188b6:	3b01      	subs	r3, #1
 80188b8:	60a3      	str	r3, [r4, #8]
 80188ba:	6823      	ldr	r3, [r4, #0]
 80188bc:	1c5a      	adds	r2, r3, #1
 80188be:	6022      	str	r2, [r4, #0]
 80188c0:	701e      	strb	r6, [r3, #0]
 80188c2:	6963      	ldr	r3, [r4, #20]
 80188c4:	4283      	cmp	r3, r0
 80188c6:	d004      	beq.n	80188d2 <__swbuf_r+0x62>
 80188c8:	89a3      	ldrh	r3, [r4, #12]
 80188ca:	07db      	lsls	r3, r3, #31
 80188cc:	d506      	bpl.n	80188dc <__swbuf_r+0x6c>
 80188ce:	2e0a      	cmp	r6, #10
 80188d0:	d104      	bne.n	80188dc <__swbuf_r+0x6c>
 80188d2:	4621      	mov	r1, r4
 80188d4:	4628      	mov	r0, r5
 80188d6:	f000 f93b 	bl	8018b50 <_fflush_r>
 80188da:	b988      	cbnz	r0, 8018900 <__swbuf_r+0x90>
 80188dc:	4638      	mov	r0, r7
 80188de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188e0:	4b0a      	ldr	r3, [pc, #40]	; (801890c <__swbuf_r+0x9c>)
 80188e2:	429c      	cmp	r4, r3
 80188e4:	d101      	bne.n	80188ea <__swbuf_r+0x7a>
 80188e6:	68ac      	ldr	r4, [r5, #8]
 80188e8:	e7cf      	b.n	801888a <__swbuf_r+0x1a>
 80188ea:	4b09      	ldr	r3, [pc, #36]	; (8018910 <__swbuf_r+0xa0>)
 80188ec:	429c      	cmp	r4, r3
 80188ee:	bf08      	it	eq
 80188f0:	68ec      	ldreq	r4, [r5, #12]
 80188f2:	e7ca      	b.n	801888a <__swbuf_r+0x1a>
 80188f4:	4621      	mov	r1, r4
 80188f6:	4628      	mov	r0, r5
 80188f8:	f000 f81e 	bl	8018938 <__swsetup_r>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	d0cb      	beq.n	8018898 <__swbuf_r+0x28>
 8018900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018904:	e7ea      	b.n	80188dc <__swbuf_r+0x6c>
 8018906:	bf00      	nop
 8018908:	0801a930 	.word	0x0801a930
 801890c:	0801a950 	.word	0x0801a950
 8018910:	0801a910 	.word	0x0801a910

08018914 <_write_r>:
 8018914:	b538      	push	{r3, r4, r5, lr}
 8018916:	4604      	mov	r4, r0
 8018918:	4608      	mov	r0, r1
 801891a:	4611      	mov	r1, r2
 801891c:	2200      	movs	r2, #0
 801891e:	4d05      	ldr	r5, [pc, #20]	; (8018934 <_write_r+0x20>)
 8018920:	602a      	str	r2, [r5, #0]
 8018922:	461a      	mov	r2, r3
 8018924:	f7ea fb42 	bl	8002fac <_write>
 8018928:	1c43      	adds	r3, r0, #1
 801892a:	d102      	bne.n	8018932 <_write_r+0x1e>
 801892c:	682b      	ldr	r3, [r5, #0]
 801892e:	b103      	cbz	r3, 8018932 <_write_r+0x1e>
 8018930:	6023      	str	r3, [r4, #0]
 8018932:	bd38      	pop	{r3, r4, r5, pc}
 8018934:	2000d6a4 	.word	0x2000d6a4

08018938 <__swsetup_r>:
 8018938:	4b32      	ldr	r3, [pc, #200]	; (8018a04 <__swsetup_r+0xcc>)
 801893a:	b570      	push	{r4, r5, r6, lr}
 801893c:	681d      	ldr	r5, [r3, #0]
 801893e:	4606      	mov	r6, r0
 8018940:	460c      	mov	r4, r1
 8018942:	b125      	cbz	r5, 801894e <__swsetup_r+0x16>
 8018944:	69ab      	ldr	r3, [r5, #24]
 8018946:	b913      	cbnz	r3, 801894e <__swsetup_r+0x16>
 8018948:	4628      	mov	r0, r5
 801894a:	f7ff fa1f 	bl	8017d8c <__sinit>
 801894e:	4b2e      	ldr	r3, [pc, #184]	; (8018a08 <__swsetup_r+0xd0>)
 8018950:	429c      	cmp	r4, r3
 8018952:	d10f      	bne.n	8018974 <__swsetup_r+0x3c>
 8018954:	686c      	ldr	r4, [r5, #4]
 8018956:	89a3      	ldrh	r3, [r4, #12]
 8018958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801895c:	0719      	lsls	r1, r3, #28
 801895e:	d42c      	bmi.n	80189ba <__swsetup_r+0x82>
 8018960:	06dd      	lsls	r5, r3, #27
 8018962:	d411      	bmi.n	8018988 <__swsetup_r+0x50>
 8018964:	2309      	movs	r3, #9
 8018966:	6033      	str	r3, [r6, #0]
 8018968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801896c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018970:	81a3      	strh	r3, [r4, #12]
 8018972:	e03e      	b.n	80189f2 <__swsetup_r+0xba>
 8018974:	4b25      	ldr	r3, [pc, #148]	; (8018a0c <__swsetup_r+0xd4>)
 8018976:	429c      	cmp	r4, r3
 8018978:	d101      	bne.n	801897e <__swsetup_r+0x46>
 801897a:	68ac      	ldr	r4, [r5, #8]
 801897c:	e7eb      	b.n	8018956 <__swsetup_r+0x1e>
 801897e:	4b24      	ldr	r3, [pc, #144]	; (8018a10 <__swsetup_r+0xd8>)
 8018980:	429c      	cmp	r4, r3
 8018982:	bf08      	it	eq
 8018984:	68ec      	ldreq	r4, [r5, #12]
 8018986:	e7e6      	b.n	8018956 <__swsetup_r+0x1e>
 8018988:	0758      	lsls	r0, r3, #29
 801898a:	d512      	bpl.n	80189b2 <__swsetup_r+0x7a>
 801898c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801898e:	b141      	cbz	r1, 80189a2 <__swsetup_r+0x6a>
 8018990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018994:	4299      	cmp	r1, r3
 8018996:	d002      	beq.n	801899e <__swsetup_r+0x66>
 8018998:	4630      	mov	r0, r6
 801899a:	f7fe fed1 	bl	8017740 <_free_r>
 801899e:	2300      	movs	r3, #0
 80189a0:	6363      	str	r3, [r4, #52]	; 0x34
 80189a2:	89a3      	ldrh	r3, [r4, #12]
 80189a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80189a8:	81a3      	strh	r3, [r4, #12]
 80189aa:	2300      	movs	r3, #0
 80189ac:	6063      	str	r3, [r4, #4]
 80189ae:	6923      	ldr	r3, [r4, #16]
 80189b0:	6023      	str	r3, [r4, #0]
 80189b2:	89a3      	ldrh	r3, [r4, #12]
 80189b4:	f043 0308 	orr.w	r3, r3, #8
 80189b8:	81a3      	strh	r3, [r4, #12]
 80189ba:	6923      	ldr	r3, [r4, #16]
 80189bc:	b94b      	cbnz	r3, 80189d2 <__swsetup_r+0x9a>
 80189be:	89a3      	ldrh	r3, [r4, #12]
 80189c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80189c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80189c8:	d003      	beq.n	80189d2 <__swsetup_r+0x9a>
 80189ca:	4621      	mov	r1, r4
 80189cc:	4630      	mov	r0, r6
 80189ce:	f000 f931 	bl	8018c34 <__smakebuf_r>
 80189d2:	89a0      	ldrh	r0, [r4, #12]
 80189d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80189d8:	f010 0301 	ands.w	r3, r0, #1
 80189dc:	d00a      	beq.n	80189f4 <__swsetup_r+0xbc>
 80189de:	2300      	movs	r3, #0
 80189e0:	60a3      	str	r3, [r4, #8]
 80189e2:	6963      	ldr	r3, [r4, #20]
 80189e4:	425b      	negs	r3, r3
 80189e6:	61a3      	str	r3, [r4, #24]
 80189e8:	6923      	ldr	r3, [r4, #16]
 80189ea:	b943      	cbnz	r3, 80189fe <__swsetup_r+0xc6>
 80189ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80189f0:	d1ba      	bne.n	8018968 <__swsetup_r+0x30>
 80189f2:	bd70      	pop	{r4, r5, r6, pc}
 80189f4:	0781      	lsls	r1, r0, #30
 80189f6:	bf58      	it	pl
 80189f8:	6963      	ldrpl	r3, [r4, #20]
 80189fa:	60a3      	str	r3, [r4, #8]
 80189fc:	e7f4      	b.n	80189e8 <__swsetup_r+0xb0>
 80189fe:	2000      	movs	r0, #0
 8018a00:	e7f7      	b.n	80189f2 <__swsetup_r+0xba>
 8018a02:	bf00      	nop
 8018a04:	20000254 	.word	0x20000254
 8018a08:	0801a930 	.word	0x0801a930
 8018a0c:	0801a950 	.word	0x0801a950
 8018a10:	0801a910 	.word	0x0801a910

08018a14 <abort>:
 8018a14:	2006      	movs	r0, #6
 8018a16:	b508      	push	{r3, lr}
 8018a18:	f000 f99c 	bl	8018d54 <raise>
 8018a1c:	2001      	movs	r0, #1
 8018a1e:	f7ea fa9e 	bl	8002f5e <_exit>
	...

08018a24 <_close_r>:
 8018a24:	b538      	push	{r3, r4, r5, lr}
 8018a26:	2300      	movs	r3, #0
 8018a28:	4d05      	ldr	r5, [pc, #20]	; (8018a40 <_close_r+0x1c>)
 8018a2a:	4604      	mov	r4, r0
 8018a2c:	4608      	mov	r0, r1
 8018a2e:	602b      	str	r3, [r5, #0]
 8018a30:	f7ea fb0e 	bl	8003050 <_close>
 8018a34:	1c43      	adds	r3, r0, #1
 8018a36:	d102      	bne.n	8018a3e <_close_r+0x1a>
 8018a38:	682b      	ldr	r3, [r5, #0]
 8018a3a:	b103      	cbz	r3, 8018a3e <_close_r+0x1a>
 8018a3c:	6023      	str	r3, [r4, #0]
 8018a3e:	bd38      	pop	{r3, r4, r5, pc}
 8018a40:	2000d6a4 	.word	0x2000d6a4

08018a44 <__sflush_r>:
 8018a44:	898a      	ldrh	r2, [r1, #12]
 8018a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4a:	4605      	mov	r5, r0
 8018a4c:	0710      	lsls	r0, r2, #28
 8018a4e:	460c      	mov	r4, r1
 8018a50:	d458      	bmi.n	8018b04 <__sflush_r+0xc0>
 8018a52:	684b      	ldr	r3, [r1, #4]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	dc05      	bgt.n	8018a64 <__sflush_r+0x20>
 8018a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	dc02      	bgt.n	8018a64 <__sflush_r+0x20>
 8018a5e:	2000      	movs	r0, #0
 8018a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a66:	2e00      	cmp	r6, #0
 8018a68:	d0f9      	beq.n	8018a5e <__sflush_r+0x1a>
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a70:	682f      	ldr	r7, [r5, #0]
 8018a72:	602b      	str	r3, [r5, #0]
 8018a74:	d032      	beq.n	8018adc <__sflush_r+0x98>
 8018a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a78:	89a3      	ldrh	r3, [r4, #12]
 8018a7a:	075a      	lsls	r2, r3, #29
 8018a7c:	d505      	bpl.n	8018a8a <__sflush_r+0x46>
 8018a7e:	6863      	ldr	r3, [r4, #4]
 8018a80:	1ac0      	subs	r0, r0, r3
 8018a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a84:	b10b      	cbz	r3, 8018a8a <__sflush_r+0x46>
 8018a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018a88:	1ac0      	subs	r0, r0, r3
 8018a8a:	2300      	movs	r3, #0
 8018a8c:	4602      	mov	r2, r0
 8018a8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a90:	4628      	mov	r0, r5
 8018a92:	6a21      	ldr	r1, [r4, #32]
 8018a94:	47b0      	blx	r6
 8018a96:	1c43      	adds	r3, r0, #1
 8018a98:	89a3      	ldrh	r3, [r4, #12]
 8018a9a:	d106      	bne.n	8018aaa <__sflush_r+0x66>
 8018a9c:	6829      	ldr	r1, [r5, #0]
 8018a9e:	291d      	cmp	r1, #29
 8018aa0:	d82c      	bhi.n	8018afc <__sflush_r+0xb8>
 8018aa2:	4a2a      	ldr	r2, [pc, #168]	; (8018b4c <__sflush_r+0x108>)
 8018aa4:	40ca      	lsrs	r2, r1
 8018aa6:	07d6      	lsls	r6, r2, #31
 8018aa8:	d528      	bpl.n	8018afc <__sflush_r+0xb8>
 8018aaa:	2200      	movs	r2, #0
 8018aac:	6062      	str	r2, [r4, #4]
 8018aae:	6922      	ldr	r2, [r4, #16]
 8018ab0:	04d9      	lsls	r1, r3, #19
 8018ab2:	6022      	str	r2, [r4, #0]
 8018ab4:	d504      	bpl.n	8018ac0 <__sflush_r+0x7c>
 8018ab6:	1c42      	adds	r2, r0, #1
 8018ab8:	d101      	bne.n	8018abe <__sflush_r+0x7a>
 8018aba:	682b      	ldr	r3, [r5, #0]
 8018abc:	b903      	cbnz	r3, 8018ac0 <__sflush_r+0x7c>
 8018abe:	6560      	str	r0, [r4, #84]	; 0x54
 8018ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ac2:	602f      	str	r7, [r5, #0]
 8018ac4:	2900      	cmp	r1, #0
 8018ac6:	d0ca      	beq.n	8018a5e <__sflush_r+0x1a>
 8018ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018acc:	4299      	cmp	r1, r3
 8018ace:	d002      	beq.n	8018ad6 <__sflush_r+0x92>
 8018ad0:	4628      	mov	r0, r5
 8018ad2:	f7fe fe35 	bl	8017740 <_free_r>
 8018ad6:	2000      	movs	r0, #0
 8018ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8018ada:	e7c1      	b.n	8018a60 <__sflush_r+0x1c>
 8018adc:	6a21      	ldr	r1, [r4, #32]
 8018ade:	2301      	movs	r3, #1
 8018ae0:	4628      	mov	r0, r5
 8018ae2:	47b0      	blx	r6
 8018ae4:	1c41      	adds	r1, r0, #1
 8018ae6:	d1c7      	bne.n	8018a78 <__sflush_r+0x34>
 8018ae8:	682b      	ldr	r3, [r5, #0]
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d0c4      	beq.n	8018a78 <__sflush_r+0x34>
 8018aee:	2b1d      	cmp	r3, #29
 8018af0:	d001      	beq.n	8018af6 <__sflush_r+0xb2>
 8018af2:	2b16      	cmp	r3, #22
 8018af4:	d101      	bne.n	8018afa <__sflush_r+0xb6>
 8018af6:	602f      	str	r7, [r5, #0]
 8018af8:	e7b1      	b.n	8018a5e <__sflush_r+0x1a>
 8018afa:	89a3      	ldrh	r3, [r4, #12]
 8018afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b00:	81a3      	strh	r3, [r4, #12]
 8018b02:	e7ad      	b.n	8018a60 <__sflush_r+0x1c>
 8018b04:	690f      	ldr	r7, [r1, #16]
 8018b06:	2f00      	cmp	r7, #0
 8018b08:	d0a9      	beq.n	8018a5e <__sflush_r+0x1a>
 8018b0a:	0793      	lsls	r3, r2, #30
 8018b0c:	bf18      	it	ne
 8018b0e:	2300      	movne	r3, #0
 8018b10:	680e      	ldr	r6, [r1, #0]
 8018b12:	bf08      	it	eq
 8018b14:	694b      	ldreq	r3, [r1, #20]
 8018b16:	eba6 0807 	sub.w	r8, r6, r7
 8018b1a:	600f      	str	r7, [r1, #0]
 8018b1c:	608b      	str	r3, [r1, #8]
 8018b1e:	f1b8 0f00 	cmp.w	r8, #0
 8018b22:	dd9c      	ble.n	8018a5e <__sflush_r+0x1a>
 8018b24:	4643      	mov	r3, r8
 8018b26:	463a      	mov	r2, r7
 8018b28:	4628      	mov	r0, r5
 8018b2a:	6a21      	ldr	r1, [r4, #32]
 8018b2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b2e:	47b0      	blx	r6
 8018b30:	2800      	cmp	r0, #0
 8018b32:	dc06      	bgt.n	8018b42 <__sflush_r+0xfe>
 8018b34:	89a3      	ldrh	r3, [r4, #12]
 8018b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b3e:	81a3      	strh	r3, [r4, #12]
 8018b40:	e78e      	b.n	8018a60 <__sflush_r+0x1c>
 8018b42:	4407      	add	r7, r0
 8018b44:	eba8 0800 	sub.w	r8, r8, r0
 8018b48:	e7e9      	b.n	8018b1e <__sflush_r+0xda>
 8018b4a:	bf00      	nop
 8018b4c:	20400001 	.word	0x20400001

08018b50 <_fflush_r>:
 8018b50:	b538      	push	{r3, r4, r5, lr}
 8018b52:	690b      	ldr	r3, [r1, #16]
 8018b54:	4605      	mov	r5, r0
 8018b56:	460c      	mov	r4, r1
 8018b58:	b913      	cbnz	r3, 8018b60 <_fflush_r+0x10>
 8018b5a:	2500      	movs	r5, #0
 8018b5c:	4628      	mov	r0, r5
 8018b5e:	bd38      	pop	{r3, r4, r5, pc}
 8018b60:	b118      	cbz	r0, 8018b6a <_fflush_r+0x1a>
 8018b62:	6983      	ldr	r3, [r0, #24]
 8018b64:	b90b      	cbnz	r3, 8018b6a <_fflush_r+0x1a>
 8018b66:	f7ff f911 	bl	8017d8c <__sinit>
 8018b6a:	4b14      	ldr	r3, [pc, #80]	; (8018bbc <_fflush_r+0x6c>)
 8018b6c:	429c      	cmp	r4, r3
 8018b6e:	d11b      	bne.n	8018ba8 <_fflush_r+0x58>
 8018b70:	686c      	ldr	r4, [r5, #4]
 8018b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d0ef      	beq.n	8018b5a <_fflush_r+0xa>
 8018b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018b7c:	07d0      	lsls	r0, r2, #31
 8018b7e:	d404      	bmi.n	8018b8a <_fflush_r+0x3a>
 8018b80:	0599      	lsls	r1, r3, #22
 8018b82:	d402      	bmi.n	8018b8a <_fflush_r+0x3a>
 8018b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b86:	f7ff f9b1 	bl	8017eec <__retarget_lock_acquire_recursive>
 8018b8a:	4628      	mov	r0, r5
 8018b8c:	4621      	mov	r1, r4
 8018b8e:	f7ff ff59 	bl	8018a44 <__sflush_r>
 8018b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b94:	4605      	mov	r5, r0
 8018b96:	07da      	lsls	r2, r3, #31
 8018b98:	d4e0      	bmi.n	8018b5c <_fflush_r+0xc>
 8018b9a:	89a3      	ldrh	r3, [r4, #12]
 8018b9c:	059b      	lsls	r3, r3, #22
 8018b9e:	d4dd      	bmi.n	8018b5c <_fflush_r+0xc>
 8018ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ba2:	f7ff f9a4 	bl	8017eee <__retarget_lock_release_recursive>
 8018ba6:	e7d9      	b.n	8018b5c <_fflush_r+0xc>
 8018ba8:	4b05      	ldr	r3, [pc, #20]	; (8018bc0 <_fflush_r+0x70>)
 8018baa:	429c      	cmp	r4, r3
 8018bac:	d101      	bne.n	8018bb2 <_fflush_r+0x62>
 8018bae:	68ac      	ldr	r4, [r5, #8]
 8018bb0:	e7df      	b.n	8018b72 <_fflush_r+0x22>
 8018bb2:	4b04      	ldr	r3, [pc, #16]	; (8018bc4 <_fflush_r+0x74>)
 8018bb4:	429c      	cmp	r4, r3
 8018bb6:	bf08      	it	eq
 8018bb8:	68ec      	ldreq	r4, [r5, #12]
 8018bba:	e7da      	b.n	8018b72 <_fflush_r+0x22>
 8018bbc:	0801a930 	.word	0x0801a930
 8018bc0:	0801a950 	.word	0x0801a950
 8018bc4:	0801a910 	.word	0x0801a910

08018bc8 <_lseek_r>:
 8018bc8:	b538      	push	{r3, r4, r5, lr}
 8018bca:	4604      	mov	r4, r0
 8018bcc:	4608      	mov	r0, r1
 8018bce:	4611      	mov	r1, r2
 8018bd0:	2200      	movs	r2, #0
 8018bd2:	4d05      	ldr	r5, [pc, #20]	; (8018be8 <_lseek_r+0x20>)
 8018bd4:	602a      	str	r2, [r5, #0]
 8018bd6:	461a      	mov	r2, r3
 8018bd8:	f7ea fa5e 	bl	8003098 <_lseek>
 8018bdc:	1c43      	adds	r3, r0, #1
 8018bde:	d102      	bne.n	8018be6 <_lseek_r+0x1e>
 8018be0:	682b      	ldr	r3, [r5, #0]
 8018be2:	b103      	cbz	r3, 8018be6 <_lseek_r+0x1e>
 8018be4:	6023      	str	r3, [r4, #0]
 8018be6:	bd38      	pop	{r3, r4, r5, pc}
 8018be8:	2000d6a4 	.word	0x2000d6a4

08018bec <__swhatbuf_r>:
 8018bec:	b570      	push	{r4, r5, r6, lr}
 8018bee:	460e      	mov	r6, r1
 8018bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bf4:	4614      	mov	r4, r2
 8018bf6:	2900      	cmp	r1, #0
 8018bf8:	461d      	mov	r5, r3
 8018bfa:	b096      	sub	sp, #88	; 0x58
 8018bfc:	da07      	bge.n	8018c0e <__swhatbuf_r+0x22>
 8018bfe:	2300      	movs	r3, #0
 8018c00:	602b      	str	r3, [r5, #0]
 8018c02:	89b3      	ldrh	r3, [r6, #12]
 8018c04:	061a      	lsls	r2, r3, #24
 8018c06:	d410      	bmi.n	8018c2a <__swhatbuf_r+0x3e>
 8018c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c0c:	e00e      	b.n	8018c2c <__swhatbuf_r+0x40>
 8018c0e:	466a      	mov	r2, sp
 8018c10:	f000 f8bc 	bl	8018d8c <_fstat_r>
 8018c14:	2800      	cmp	r0, #0
 8018c16:	dbf2      	blt.n	8018bfe <__swhatbuf_r+0x12>
 8018c18:	9a01      	ldr	r2, [sp, #4]
 8018c1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c22:	425a      	negs	r2, r3
 8018c24:	415a      	adcs	r2, r3
 8018c26:	602a      	str	r2, [r5, #0]
 8018c28:	e7ee      	b.n	8018c08 <__swhatbuf_r+0x1c>
 8018c2a:	2340      	movs	r3, #64	; 0x40
 8018c2c:	2000      	movs	r0, #0
 8018c2e:	6023      	str	r3, [r4, #0]
 8018c30:	b016      	add	sp, #88	; 0x58
 8018c32:	bd70      	pop	{r4, r5, r6, pc}

08018c34 <__smakebuf_r>:
 8018c34:	898b      	ldrh	r3, [r1, #12]
 8018c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c38:	079d      	lsls	r5, r3, #30
 8018c3a:	4606      	mov	r6, r0
 8018c3c:	460c      	mov	r4, r1
 8018c3e:	d507      	bpl.n	8018c50 <__smakebuf_r+0x1c>
 8018c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c44:	6023      	str	r3, [r4, #0]
 8018c46:	6123      	str	r3, [r4, #16]
 8018c48:	2301      	movs	r3, #1
 8018c4a:	6163      	str	r3, [r4, #20]
 8018c4c:	b002      	add	sp, #8
 8018c4e:	bd70      	pop	{r4, r5, r6, pc}
 8018c50:	466a      	mov	r2, sp
 8018c52:	ab01      	add	r3, sp, #4
 8018c54:	f7ff ffca 	bl	8018bec <__swhatbuf_r>
 8018c58:	9900      	ldr	r1, [sp, #0]
 8018c5a:	4605      	mov	r5, r0
 8018c5c:	4630      	mov	r0, r6
 8018c5e:	f7fe fdbb 	bl	80177d8 <_malloc_r>
 8018c62:	b948      	cbnz	r0, 8018c78 <__smakebuf_r+0x44>
 8018c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c68:	059a      	lsls	r2, r3, #22
 8018c6a:	d4ef      	bmi.n	8018c4c <__smakebuf_r+0x18>
 8018c6c:	f023 0303 	bic.w	r3, r3, #3
 8018c70:	f043 0302 	orr.w	r3, r3, #2
 8018c74:	81a3      	strh	r3, [r4, #12]
 8018c76:	e7e3      	b.n	8018c40 <__smakebuf_r+0xc>
 8018c78:	4b0d      	ldr	r3, [pc, #52]	; (8018cb0 <__smakebuf_r+0x7c>)
 8018c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c7c:	89a3      	ldrh	r3, [r4, #12]
 8018c7e:	6020      	str	r0, [r4, #0]
 8018c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c84:	81a3      	strh	r3, [r4, #12]
 8018c86:	9b00      	ldr	r3, [sp, #0]
 8018c88:	6120      	str	r0, [r4, #16]
 8018c8a:	6163      	str	r3, [r4, #20]
 8018c8c:	9b01      	ldr	r3, [sp, #4]
 8018c8e:	b15b      	cbz	r3, 8018ca8 <__smakebuf_r+0x74>
 8018c90:	4630      	mov	r0, r6
 8018c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c96:	f000 f88b 	bl	8018db0 <_isatty_r>
 8018c9a:	b128      	cbz	r0, 8018ca8 <__smakebuf_r+0x74>
 8018c9c:	89a3      	ldrh	r3, [r4, #12]
 8018c9e:	f023 0303 	bic.w	r3, r3, #3
 8018ca2:	f043 0301 	orr.w	r3, r3, #1
 8018ca6:	81a3      	strh	r3, [r4, #12]
 8018ca8:	89a0      	ldrh	r0, [r4, #12]
 8018caa:	4305      	orrs	r5, r0
 8018cac:	81a5      	strh	r5, [r4, #12]
 8018cae:	e7cd      	b.n	8018c4c <__smakebuf_r+0x18>
 8018cb0:	08017d25 	.word	0x08017d25

08018cb4 <memchr>:
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	b510      	push	{r4, lr}
 8018cb8:	b2c9      	uxtb	r1, r1
 8018cba:	4402      	add	r2, r0
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	4618      	mov	r0, r3
 8018cc0:	d101      	bne.n	8018cc6 <memchr+0x12>
 8018cc2:	2000      	movs	r0, #0
 8018cc4:	e003      	b.n	8018cce <memchr+0x1a>
 8018cc6:	7804      	ldrb	r4, [r0, #0]
 8018cc8:	3301      	adds	r3, #1
 8018cca:	428c      	cmp	r4, r1
 8018ccc:	d1f6      	bne.n	8018cbc <memchr+0x8>
 8018cce:	bd10      	pop	{r4, pc}

08018cd0 <_malloc_usable_size_r>:
 8018cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cd4:	1f18      	subs	r0, r3, #4
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	bfbc      	itt	lt
 8018cda:	580b      	ldrlt	r3, [r1, r0]
 8018cdc:	18c0      	addlt	r0, r0, r3
 8018cde:	4770      	bx	lr

08018ce0 <_read_r>:
 8018ce0:	b538      	push	{r3, r4, r5, lr}
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	4608      	mov	r0, r1
 8018ce6:	4611      	mov	r1, r2
 8018ce8:	2200      	movs	r2, #0
 8018cea:	4d05      	ldr	r5, [pc, #20]	; (8018d00 <_read_r+0x20>)
 8018cec:	602a      	str	r2, [r5, #0]
 8018cee:	461a      	mov	r2, r3
 8018cf0:	f7ea f93f 	bl	8002f72 <_read>
 8018cf4:	1c43      	adds	r3, r0, #1
 8018cf6:	d102      	bne.n	8018cfe <_read_r+0x1e>
 8018cf8:	682b      	ldr	r3, [r5, #0]
 8018cfa:	b103      	cbz	r3, 8018cfe <_read_r+0x1e>
 8018cfc:	6023      	str	r3, [r4, #0]
 8018cfe:	bd38      	pop	{r3, r4, r5, pc}
 8018d00:	2000d6a4 	.word	0x2000d6a4

08018d04 <_raise_r>:
 8018d04:	291f      	cmp	r1, #31
 8018d06:	b538      	push	{r3, r4, r5, lr}
 8018d08:	4604      	mov	r4, r0
 8018d0a:	460d      	mov	r5, r1
 8018d0c:	d904      	bls.n	8018d18 <_raise_r+0x14>
 8018d0e:	2316      	movs	r3, #22
 8018d10:	6003      	str	r3, [r0, #0]
 8018d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d16:	bd38      	pop	{r3, r4, r5, pc}
 8018d18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018d1a:	b112      	cbz	r2, 8018d22 <_raise_r+0x1e>
 8018d1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018d20:	b94b      	cbnz	r3, 8018d36 <_raise_r+0x32>
 8018d22:	4620      	mov	r0, r4
 8018d24:	f000 f830 	bl	8018d88 <_getpid_r>
 8018d28:	462a      	mov	r2, r5
 8018d2a:	4601      	mov	r1, r0
 8018d2c:	4620      	mov	r0, r4
 8018d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d32:	f000 b817 	b.w	8018d64 <_kill_r>
 8018d36:	2b01      	cmp	r3, #1
 8018d38:	d00a      	beq.n	8018d50 <_raise_r+0x4c>
 8018d3a:	1c59      	adds	r1, r3, #1
 8018d3c:	d103      	bne.n	8018d46 <_raise_r+0x42>
 8018d3e:	2316      	movs	r3, #22
 8018d40:	6003      	str	r3, [r0, #0]
 8018d42:	2001      	movs	r0, #1
 8018d44:	e7e7      	b.n	8018d16 <_raise_r+0x12>
 8018d46:	2400      	movs	r4, #0
 8018d48:	4628      	mov	r0, r5
 8018d4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018d4e:	4798      	blx	r3
 8018d50:	2000      	movs	r0, #0
 8018d52:	e7e0      	b.n	8018d16 <_raise_r+0x12>

08018d54 <raise>:
 8018d54:	4b02      	ldr	r3, [pc, #8]	; (8018d60 <raise+0xc>)
 8018d56:	4601      	mov	r1, r0
 8018d58:	6818      	ldr	r0, [r3, #0]
 8018d5a:	f7ff bfd3 	b.w	8018d04 <_raise_r>
 8018d5e:	bf00      	nop
 8018d60:	20000254 	.word	0x20000254

08018d64 <_kill_r>:
 8018d64:	b538      	push	{r3, r4, r5, lr}
 8018d66:	2300      	movs	r3, #0
 8018d68:	4d06      	ldr	r5, [pc, #24]	; (8018d84 <_kill_r+0x20>)
 8018d6a:	4604      	mov	r4, r0
 8018d6c:	4608      	mov	r0, r1
 8018d6e:	4611      	mov	r1, r2
 8018d70:	602b      	str	r3, [r5, #0]
 8018d72:	f7ea f8e4 	bl	8002f3e <_kill>
 8018d76:	1c43      	adds	r3, r0, #1
 8018d78:	d102      	bne.n	8018d80 <_kill_r+0x1c>
 8018d7a:	682b      	ldr	r3, [r5, #0]
 8018d7c:	b103      	cbz	r3, 8018d80 <_kill_r+0x1c>
 8018d7e:	6023      	str	r3, [r4, #0]
 8018d80:	bd38      	pop	{r3, r4, r5, pc}
 8018d82:	bf00      	nop
 8018d84:	2000d6a4 	.word	0x2000d6a4

08018d88 <_getpid_r>:
 8018d88:	f7ea b8d2 	b.w	8002f30 <_getpid>

08018d8c <_fstat_r>:
 8018d8c:	b538      	push	{r3, r4, r5, lr}
 8018d8e:	2300      	movs	r3, #0
 8018d90:	4d06      	ldr	r5, [pc, #24]	; (8018dac <_fstat_r+0x20>)
 8018d92:	4604      	mov	r4, r0
 8018d94:	4608      	mov	r0, r1
 8018d96:	4611      	mov	r1, r2
 8018d98:	602b      	str	r3, [r5, #0]
 8018d9a:	f7ea f964 	bl	8003066 <_fstat>
 8018d9e:	1c43      	adds	r3, r0, #1
 8018da0:	d102      	bne.n	8018da8 <_fstat_r+0x1c>
 8018da2:	682b      	ldr	r3, [r5, #0]
 8018da4:	b103      	cbz	r3, 8018da8 <_fstat_r+0x1c>
 8018da6:	6023      	str	r3, [r4, #0]
 8018da8:	bd38      	pop	{r3, r4, r5, pc}
 8018daa:	bf00      	nop
 8018dac:	2000d6a4 	.word	0x2000d6a4

08018db0 <_isatty_r>:
 8018db0:	b538      	push	{r3, r4, r5, lr}
 8018db2:	2300      	movs	r3, #0
 8018db4:	4d05      	ldr	r5, [pc, #20]	; (8018dcc <_isatty_r+0x1c>)
 8018db6:	4604      	mov	r4, r0
 8018db8:	4608      	mov	r0, r1
 8018dba:	602b      	str	r3, [r5, #0]
 8018dbc:	f7ea f962 	bl	8003084 <_isatty>
 8018dc0:	1c43      	adds	r3, r0, #1
 8018dc2:	d102      	bne.n	8018dca <_isatty_r+0x1a>
 8018dc4:	682b      	ldr	r3, [r5, #0]
 8018dc6:	b103      	cbz	r3, 8018dca <_isatty_r+0x1a>
 8018dc8:	6023      	str	r3, [r4, #0]
 8018dca:	bd38      	pop	{r3, r4, r5, pc}
 8018dcc:	2000d6a4 	.word	0x2000d6a4

08018dd0 <_init>:
 8018dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dd2:	bf00      	nop
 8018dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dd6:	bc08      	pop	{r3}
 8018dd8:	469e      	mov	lr, r3
 8018dda:	4770      	bx	lr

08018ddc <_fini>:
 8018ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dde:	bf00      	nop
 8018de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018de2:	bc08      	pop	{r3}
 8018de4:	469e      	mov	lr, r3
 8018de6:	4770      	bx	lr
